head	1.1;
branch	1.1.101;
access;
symbols
	MIRBSD_10_BASE:1.1.101.1
	MIRBSD_9_BASE:1.1.101.1
	gcc-3_4_6:1.1.101.1
	MIRBSD_8:1.1.101.1.0.2
	MIRBSD_8_BASE:1.1.101.1
	gcc-3_4-20051206:1.1.101.1
	gcc-3_4-20051115:1.1.101.1
	gcc-3_4-20050823:1.1.101.1
	FSF:1.1.101;
locks; strict;
comment	@# @;


1.1
date	2005.03.21.12.07.39;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.03.21.12.07.39;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Copyright (C) 2000  Free Software Foundation

   This file is part of libgcj.

This software is copyrighted work licensed under the terms of the
Libgcj License.  Please consult the file "LIBGCJ_LICENSE" for
details.  */

package gnu.gcj.xlib;

import gnu.gcj.RawData;

/**
 * An X11 color map resource.
 *
 * @@author Rolf W. Rasmussen <rolfwr@@ii.uib.no>
 */
public final class Colormap extends XID
{
  Screen screen;
  
  public static final byte FLAG_SHARED = 1;
  public static final byte FLAG_NOT_SHARED = 2;
  
  public Colormap(Screen screen, int xid)
  {
    super(screen.getDisplay(), xid);
    this.screen = screen;
  }
  
  /**
   * Allocate color pixel.
   *
   * @@param color The color to be allocated.  If allocation is
   * successful, this object will be modified to reflect the actual
   * color that was allocated.
   *
   * @@return the pixel value of the allocated color.
   */
  public native long allocateColorPixel(XColor color);

  /**
   * Allocate a color consisting of the given RGB-triplet.
   *
   * @@return a color object describing the allocated color.
   */
  public XColor allocateColor(int r, int g, int b)
  {
    XColor color = new XColor(r, g, b);
    allocateColorPixel(color);
    
    return color;
  }

  /**
   * Get an array of all colors that currently resides in shared (read
   * only) color-cells in this color map.
   */
  public native XColor[] getSharedColors();


  /**
   * Get all colors currently residing in this color map.  Colors that
   * are shared (read only) are marked as such by the color flags.
   * The indexes of the returned array will correspond to the
   * colorcells of the color map.  Given a color <code>XColor
   * color</code> from a given color-cell, the expression
   * <code>color.getFlags() == Colormap.FLAG_SHARED</code> will check
   * whether the color-cell is shared.
   */
  public native XColor[] getXColors();

  /**
   * Convenience method used by native code to create fully
   * initialized arrays of XColor objects.
   */
  private XColor[] newXColorArray(int n)
  {
    XColor[] array = new XColor[n];
    for (int i=0; i<n; i++)
      array[i] = new XColor();
    return array;
  }
}
@


1.1.101.1
log
@Import the GNU Compiler Collection 3.4-stable
from gcc-3.4-20050318.tar.bz2 after having
* all top-level non-directories (files)
  - except config.if
and these directories completely:
* INSTALL
* boehm-gc/Mac_files
* boehm-gc/cord
* boehm-gc/doc
* boehm-gc/tests
* contrib
  - except texi2pod.pl
* gcc/f
* gcc/po
* gcc/testsuite
* gcc/treelang
* include
* intl
* libf2c
* libffi/testsuite
* libiberty
* libjava/testsuite
* libstdc++-v3/docs
* libstdc++-v3/po
* libstdc++-v3/scripts
* libstdc++-v3/testsuite
* maintainer-scripts
* zlib
removed before importing.
@
text
@@
