head	1.1;
branch	1.1.101;
access;
symbols
	MIRBSD_10_BASE:1.1.101.1
	MIRBSD_9_BASE:1.1.101.1
	gcc-3_4_6:1.1.101.1
	MIRBSD_8:1.1.101.1.0.2
	MIRBSD_8_BASE:1.1.101.1
	gcc-3_4-20051206:1.1.101.1
	gcc-3_4-20051115:1.1.101.1
	gcc-3_4-20050823:1.1.101.1
	FSF:1.1.101;
locks; strict;
comment	@ * @;


1.1
date	2005.03.21.12.07.23;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.03.21.12.07.23;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# ifndef GC_H
#   include "gc.h"
# endif

/*
 * Invoke all remaining finalizers that haven't yet been run.
 * This is needed for strict compliance with the Java standard, 
 * which can make the runtime guarantee that all finalizers are run.
 * This is problematic for several reasons:
 * 1) It means that finalizers, and all methods calle by them,
 *    must be prepared to deal with objects that have been finalized in
 *    spite of the fact that they are still referenced by statically
 *    allocated pointer variables.
 * 1) It may mean that we get stuck in an infinite loop running
 *    finalizers which create new finalizable objects, though that's
 *    probably unlikely.
 * Thus this is not recommended for general use.
 */
void GC_finalize_all();

/*
 * A version of GC_register_finalizer that allows the object to be
 * finalized before the objects it references.  This is again error
 * prone, in that it makes it easy to accidentally reference finalized
 * objects.  Again, recommended only for JVM implementors.
 */
void GC_register_finalizer_no_order(GC_PTR obj,
			       GC_finalization_proc fn, GC_PTR cd,
			       GC_finalization_proc *ofn, GC_PTR * ocd);

void GC_debug_register_finalizer_no_order(GC_PTR obj,
			       GC_finalization_proc fn, GC_PTR cd,
			       GC_finalization_proc *ofn, GC_PTR * ocd);

#ifdef GC_DEBUG
#   define GC_REGISTER_FINALIZER(p, f, d, of, od) \
	GC_debug_register_finalizer_no_order(p, f, d, of, od)
#else
#   define GC_REGISTER_FINALIZER(p, f, d, of, od) \
	GC_register_finalizer_no_order(p, f, d, of, od)
#endif
@


1.1.101.1
log
@Import the GNU Compiler Collection 3.4-stable
from gcc-3.4-20050318.tar.bz2 after having
* all top-level non-directories (files)
  - except config.if
and these directories completely:
* INSTALL
* boehm-gc/Mac_files
* boehm-gc/cord
* boehm-gc/doc
* boehm-gc/tests
* contrib
  - except texi2pod.pl
* gcc/f
* gcc/po
* gcc/testsuite
* gcc/treelang
* include
* intl
* libf2c
* libffi/testsuite
* libiberty
* libjava/testsuite
* libstdc++-v3/docs
* libstdc++-v3/po
* libstdc++-v3/scripts
* libstdc++-v3/testsuite
* maintainer-scripts
* zlib
removed before importing.
@
text
@@
