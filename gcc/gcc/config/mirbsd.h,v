head	1.26;
access;
symbols
	MIRBSD_10_BASE:1.18
	MIRBSD_9_BASE:1.11
	MIRBSD_8:1.10.0.2
	MIRBSD_8_BASE:1.10;
locks; strict;
comment	@ * @;


1.26
date	2010.01.14.23.00.28;	author tg;	state Exp;
branches;
next	1.25;
commitid	1004B4FA1FF19A82452;

1.25
date	2009.12.12.19.40.42;	author tg;	state Exp;
branches;
next	1.24;
commitid	1004B23F1B9396598C0;

1.24
date	2009.12.06.18.22.38;	author tg;	state Exp;
branches;
next	1.23;
commitid	1004B1BF6717C20CC9E;

1.23
date	2009.12.06.17.12.13;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004B1BE5FF45999076;

1.22
date	2009.09.12.13.52.38;	author tg;	state Exp;
branches;
next	1.21;
commitid	1004AABA773427566D7;

1.21
date	2009.02.25.17.41.42;	author tg;	state Exp;
branches;
next	1.20;
commitid	10049A582CD4140FBA8;

1.20
date	2009.02.25.09.15.27;	author tg;	state Exp;
branches;
next	1.19;
commitid	10049A50C0316BE91C1;

1.19
date	2008.12.26.16.01.20;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004954FFC469B460F4;

1.18
date	2007.10.05.21.07.55;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004706A7B426F56E5E;

1.17
date	2007.10.02.00.24.09;	author tg;	state Exp;
branches;
next	1.16;
commitid	10047018F481CA2A3B9;

1.16
date	2006.12.11.20.35.09;	author tg;	state Exp;
branches;
next	1.15;
commitid	100457DC1142EA49AA1;

1.15
date	2006.12.11.20.30.59;	author tg;	state Exp;
branches;
next	1.14;
commitid	100457DBF523050091A;

1.14
date	2006.11.09.02.22.57;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004552911848D04E30;

1.13
date	2006.11.09.02.20.48;	author tg;	state Exp;
branches;
next	1.12;
commitid	10045528F2F3400A3AB;

1.12
date	2006.09.20.17.45.29;	author tg;	state Exp;
branches;
next	1.11;
commitid	10045117DFF16ABCCA0;

1.11
date	2006.06.15.19.18.47;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004491B2706C2443B2;

1.10
date	2005.09.22.19.45.25;	author tg;	state Exp;
branches;
next	1.9;
commitid	44a433309e0952a;

1.9
date	2005.08.29.19.41.13;	author tg;	state Exp;
branches;
next	1.8;
commitid	3d4b431364e5a4d2;

1.8
date	2005.07.28.19.19.37;	author tg;	state Exp;
branches;
next	1.7;
commitid	2fe742e92fce1415;

1.7
date	2005.07.25.17.45.22;	author tg;	state Exp;
branches;
next	1.6;
commitid	69e42e525226f66;

1.6
date	2005.04.30.21.34.16;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.16.16.33;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.10.20.43.09;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.26.00.00.30;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.25.21.56.13;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.25.18.49.28;	author tg;	state Exp;
branches;
next	;


desc
@@


1.26
log
@introduce __MirBSD_kernel__ (like kFreeBSD does) and __MirOS__ (userland?)
@
text
@/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.25 2009/12/12 19:40:42 tg Exp $ */

/* Base configuration file for all MirOS BSD targets.
   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2006, 2007,
   2008, 2009, 2010
   Free Software Foundation, Inc.
   Contributed by Thorsten “mirabilos” Glaser <tg@@mirbsd.org>

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#include <sys/types.h>
#include <sys/mman.h>
#include <stdint.h>
#include <stdio.h>
#include <unistd.h>

/* TARGET_OS_CPP_BUILTINS() common to all MirOS BSD targets.  */
#define MIRBSD_OS_CPP_BUILTINS()			\
  do							\
    {							\
      builtin_define ("__MirOS__");			\
      builtin_define ("__MirBSD_kernel__");		\
      builtin_define ("__MirBSD__");			\
      builtin_define ("__OpenBSD__");			\
      builtin_define ("__unix__");			\
      builtin_define ("__STDC_ISO_10646__=200009L");	\
      builtin_assert ("system=unix");			\
      builtin_assert ("system=bsd");			\
      builtin_assert ("system=MirBSD");			\
    }							\
  while (0)

/* CPP_SPEC parts common to all MirOS BSD targets.  */
#ifdef CPP_CPU_SPEC
#define MIRBSD_CPP_SPEC			\
  "%(cpp_cpu) 				\
   %{posix:-D_POSIX_SOURCE}		\
   %{pthread:-D_POSIX_THREADS}"
#else
#define MIRBSD_CPP_SPEC			\
  "%{posix:-D_POSIX_SOURCE}		\
   %{pthread:-D_POSIX_THREADS}"
#endif

#undef CPP_SPEC
#define CPP_SPEC			MIRBSD_CPP_SPEC

/* Since we use gas, stdin -> - is a good idea.  */
#define AS_NEEDS_DASH_FOR_PIPED_INPUT


/* Look for the include files in the system-defined places.  */

#undef INCLUDE_DEFAULTS
#define INCLUDE_DEFAULTS {					\
	{ GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1, 0 },		\
	{ GPLUSPLUS_TOOL_INCLUDE_DIR, "G++", 1, 1, 0 },		\
	{ GPLUSPLUS_BACKWARD_INCLUDE_DIR, "G++", 1, 1, 0 },	\
	{ GCC_INCLUDE_DIR, "GCC", 0, 0, 0 },			\
	{ "/usr/include", NULL, 0, 0, 1 },			\
	{ NULL, NULL, 0, 0, 0 }					\
}

/* MirOS provides most *crt*.o files in the /usr/lib directory.  */

#undef STANDARD_STARTFILE_PREFIX
#define STANDARD_STARTFILE_PREFIX	"/usr/lib/"


/* Provide a LIB_SPEC appropriate for MirOS BSD.  */

#define MIRBSD_LIB_SPEC		\
  "%{pthread:-lpthread}		\
   %{!shared:			\
     %{!symbolic:-lc}}"

#undef LIB_SPEC
#define LIB_SPEC		MIRBSD_LIB_SPEC

/* Provide a LIBGCC_SPEC stub for shared libgcc use.  */

#define MIRBSD_LIBGCC_SPEC	"-lgcc"

#undef LIBGCC_SPEC
#define LIBGCC_SPEC		MIRBSD_LIBGCC_SPEC

/* When building shared libraries, the initialization and finalization
   functions for the library are .init and .fini respectively.  */

#define COLLECT_SHARED_INIT_FUNC(STREAM,FUNC)				\
  do {									\
    fprintf ((STREAM), "void __init() __asm__ (\".init\");");		\
    fprintf ((STREAM), "void __init() {\n\t%s();\n}\n", (FUNC));	\
  } while (0)

#define COLLECT_SHARED_FINI_FUNC(STREAM,FUNC)				\
  do {									\
    fprintf ((STREAM), "void __fini() __asm__ (\".fini\");");		\
    fprintf ((STREAM), "void __fini() {\n\t%s();\n}\n", (FUNC));	\
  } while (0)

#undef TARGET_HAS_F_SETLKW
#define TARGET_HAS_F_SETLKW

/* Handle #pragma weak and #pragma pack.  */

#define HANDLE_SYSV_PRAGMA 1

/* Define this so we can compile MS code for use with WINE.  */
#define HANDLE_PRAGMA_PACK_PUSH_POP 1

/* Don't use the 'xsTAG;' construct in DBX output; BSD systems that
   use DBX don't support it.  */
#define DBX_NO_XREFS


/* Define some types that are the same on all MirOS BSD platforms,
   making them agree with <machine/ansi.h>.  */

#undef WCHAR_TYPE
#define WCHAR_TYPE "short unsigned int"

#undef WCHAR_TYPE_SIZE
#define WCHAR_TYPE_SIZE 16

#undef WINT_TYPE
#define WINT_TYPE "unsigned int"

#undef SIZE_TYPE
#define SIZE_TYPE "long unsigned int"

#undef PTRDIFF_TYPE
#define PTRDIFF_TYPE "long int"

/* This defines which switch letters take arguments.  On MirOS, most
   of the normal cases (defined by gcc.c) apply.  */

#undef SWITCH_TAKES_ARG
#define SWITCH_TAKES_ARG(CHAR)			\
  (DEFAULT_SWITCH_TAKES_ARG (CHAR)		\
   || (CHAR) == 'R')


/* Provide a STARTFILE_SPEC appropriate for MirOS BSD.  Here we
   provide support for the special GCC option -static.  On ELF
   targets, we also add the crtbegin.o file, which provides part
   of the support for getting C++ file-scope static objects
   constructed before entering "main".  */

#define MIRBSD_STARTFILE_SPEC	\
  "%:if-exists(crti%O%s)	\
   %{!shared:crt0%O%s}		\
   %{static:			\
     %:if-exists-else(crtbeginT%O%s crtbegin%O%s)} \
   %{!static:			\
     %{!shared:crtbegin%O%s}	\
     %{shared:crtbeginS%O%s}}"

#undef STARTFILE_SPEC
#define STARTFILE_SPEC MIRBSD_STARTFILE_SPEC


/* Provide an ENDFILE_SPEC appropriate for MirOS BSD.  Here we
   add crtend.o, which provides part of the support for getting
   C++ file-scope static objects deconstructed after exiting "main".  */

#define MIRBSD_ENDFILE_SPEC	\
  "%{!shared:crtend%O%s}	\
   %{shared:crtendS%O%s}	\
   %:if-exists(crtn%O%s)"

#undef ENDFILE_SPEC
#define ENDFILE_SPEC MIRBSD_ENDFILE_SPEC

/*
 * Work around gcc version-specific library vs rpath problem.
 * Components are:
 *	%R = sysroot præfix (empty except if cross-compiling)
 *	STANDARD_EXEC_PREFIX = “${PREFIX}/lib/gcc/”
 *	DEFAULT_TARGET_MACHINE = “${OStriplet}”
 *	DEFAULT_TARGET_VERSION = “3.4.6”
 */
#undef MIRBSD_RDIR
#define MIRBSD_RDIR	STANDARD_EXEC_PREFIX DEFAULT_TARGET_MACHINE "/" \
			DEFAULT_TARGET_VERSION

/* Provide a LINK_SPEC appropriate for MirOS BSD.  Here we provide
   support for the special GCC options -assert, -R, -rpath, -shared,
   -nostdlib, -static, -rdynamic, and -dynamic-linker.

   Target-specific code can use this in conjunction with any other
   target-specific LINK_SPEC options.  */

#define MIRBSD_LINK_SPEC			\
  "%{assert*} %{R*} %{rpath*}			\
   -L%R" MIRBSD_RDIR " -rpath " MIRBSD_RDIR "	\
   %{!shared:					\
     -dc -dp					\
     %{!nostdlib:%{!r*:%{!e*:-e __start}}}	\
     %{!static:					\
       %{rdynamic:-export-dynamic}		\
       %{!dynamic-linker:			\
	 -dynamic-linker /usr/libexec/ld.so}}	\
     %{static:-Bstatic}}			\
   %{!static:-Bdynamic}				\
   %{shared:-shared}"

#undef LINK_SPEC
#define LINK_SPEC MIRBSD_LINK_SPEC

/* This is to address issues with libgcc: some of the functions are
   also provided by libc, and we prefer these due to them being less
   buggy.  Since we always use GNU ld, we can use the libs grouping
   feature to prevent listing the libraries two or three times each.  */
#undef LINK_GCC_C_SEQUENCE_SPEC
#define LINK_GCC_C_SEQUENCE_SPEC "--start-group %L %G --end-group"

/* Don't assume anything about the header files.  Needed for libjava.  */
#undef NO_IMPLICIT_EXTERN_C
#define NO_IMPLICIT_EXTERN_C 1

/* MirOS libc already provides the ProPolice functions.  */

#define _LIBC_PROVIDES_SSP_

/* MirOS libc already provides the quad arithmetic functions.  */

#define _LIBC_PROVIDES_QUAD_

/* MirOS BSD targets need to make the stack executable.  */

#undef ENABLE_EXECUTE_STACK
#define ENABLE_EXECUTE_STACK						\
extern void __enable_execute_stack (void *);				\
void									\
__enable_execute_stack (void *addr)					\
{									\
  static intptr_t size = 0;						\
  static intptr_t mask;							\
  intptr_t page = (intptr_t)addr;					\
  size_t end = (intptr_t)addr + TRAMPOLINE_SIZE;			\
									\
  if (size == 0)							\
    {									\
      size = sysconf(_SC_PAGESIZE);					\
      mask = ~(size - 1);						\
    }									\
									\
  page &= mask;								\
  end = (end & mask) + size - page;					\
									\
  if (mprotect ((char *)page, end,					\
   PROT_READ | PROT_WRITE | PROT_EXEC) < 0)				\
    perror ("mprotect of trampoline code");				\
}

/* Disable the use of unsafe builtin functions (strcat, strcpy), making
   them easier to be spotted in the object files.  */

#define NO_UNSAFE_BUILTINS

/* Support of shared libraries, mostly imported from svr4.h through netbsd.  */
/* Two differences from svr4.h:
   - we use . - _func instead of a local label,
   - we put extra spaces in expressions such as
     .type _func , @@function
     This is more readable for a human being and confuses cxxfilt less.  */

/* Assembler format: output and generation of labels.  */

/* Define the strings used for the .type and .size directives.
   These strings generally do not vary from one system running BSD
   to another, but if a given system needs to use different pseudo-op
   names for these, they may be overridden in the arch specific file.  */

#undef TYPE_ASM_OP
#undef SIZE_ASM_OP
#undef SET_ASM_OP
#undef GLOBAL_ASM_OP

#define TYPE_ASM_OP	"\t.type\t"
#define SIZE_ASM_OP	"\t.size\t"
#define SET_ASM_OP	"\t.set\t"
#define GLOBAL_ASM_OP	"\t.globl\t"

/* The following macro defines the format used to output the second
   operand of the .type assembler directive.  */
#undef TYPE_OPERAND_FMT
#define TYPE_OPERAND_FMT	"@@%s"

/* Provision if extra assembler code is needed to declare a function's result
   (taken from svr4, not needed yet actually).  */
#ifndef ASM_DECLARE_RESULT
#define ASM_DECLARE_RESULT(FILE, RESULT)
#endif

/* These macros generate the special .type and .size directives which
   are used to set the corresponding fields of the linker symbol table
   entries under MirOS.  These macros also have to output the starting
   labels for the relevant functions/objects.  */

/* Extra assembler code needed to declare a function properly.
   Some assemblers may also need to also have something extra said
   about the function's return value.  We allow for that here.  */
#undef ASM_DECLARE_FUNCTION_NAME
#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)			\
  do {									\
	fprintf (FILE, "%s", TYPE_ASM_OP);				\
	assemble_name (FILE, NAME);					\
	fputs (" , ", FILE);						\
	fprintf (FILE, TYPE_OPERAND_FMT, "function");			\
	putc ('\n', FILE);						\
	ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));			\
	ASM_OUTPUT_LABEL(FILE, NAME);					\
  } while (0)

/* Declare the size of a function.  */
#undef ASM_DECLARE_FUNCTION_SIZE
#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)			\
  do {									\
	if (!flag_inhibit_size_directive) {				\
		fprintf (FILE, "%s", SIZE_ASM_OP);			\
		assemble_name (FILE, (FNAME));				\
		fputs (" , . - ", FILE);				\
		assemble_name (FILE, (FNAME));				\
		putc ('\n', FILE);					\
	}								\
  } while (0)

/* Extra assembler code needed to declare an object properly.  */
#undef ASM_DECLARE_OBJECT_NAME
#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)			\
  do {									\
	fprintf (FILE, "%s", TYPE_ASM_OP);				\
	assemble_name (FILE, NAME);					\
	fputs (" , ", FILE);						\
	fprintf (FILE, TYPE_OPERAND_FMT, "object");			\
	putc ('\n', FILE);						\
	size_directive_output = 0;					\
	if (!flag_inhibit_size_directive && (DECL) &&			\
	    DECL_SIZE (DECL)) {						\
		size_directive_output = 1;				\
		fprintf (FILE, "%s", SIZE_ASM_OP);			\
		assemble_name (FILE, NAME);				\
		fprintf (FILE, " , %ld\n",				\
		    int_size_in_bytes (TREE_TYPE (DECL)));		\
	}								\
	ASM_OUTPUT_LABEL (FILE, NAME);					\
  } while (0)

/* Output the size directive for a decl in rest_of_decl_compilation
   in the case where we did not do so before the initializer.
   Once we find the error_mark_node, we know that the value of
   size_directive_output was set by ASM_DECLARE_OBJECT_NAME
   when it was run for the same decl.  */
#undef ASM_FINISH_DECLARE_OBJECT
#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)	\
do {									\
	const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);		\
	if (!flag_inhibit_size_directive && DECL_SIZE (DECL)		\
	    && ! AT_END && TOP_LEVEL					\
	    && DECL_INITIAL (DECL) == error_mark_node			\
	    && !size_directive_output) {				\
		size_directive_output = 1;				\
		fprintf (FILE, "%s", SIZE_ASM_OP);			\
		assemble_name (FILE, name);				\
		fprintf (FILE, " , %ld\n",				\
		    int_size_in_bytes (TREE_TYPE (DECL)));		\
	}								\
   } while (0)

/* Those are 'generic' ways to weaken/globalize a label. We shouldn't need
   to override a processor specific definition. Hence, #ifndef ASM_*
   In case overriding turns out to be needed, one can always #undef ASM_*
   before including this file.  */

/* Tell the assembler that a symbol is weak.  */
/* Note: netbsd arm32 assembler needs a .globl here. An override may
   be needed when/if we go for arm32 support.  */
#ifndef ASM_WEAKEN_LABEL
#define ASM_WEAKEN_LABEL(FILE,NAME) \
  do { fputs ("\t.weak\t", FILE); assemble_name (FILE, NAME); \
       fputc ('\n', FILE); } while (0)
#endif

/* Exception handling.  */

/* The principle is as follows:
   When using --enable-shared, a libgcc_eh.a and libgcc_s.so is
   built and -lgcc in LIBGCC_SPEC is transformed into a weird
   sequence.
   Defining LINK_EH_SPEC has the side effect that
   -shared still means -static-gcc by default, and you must use
   -shared-libgcc explicitly (g++ does this) to pull in -lgcc_s
   instead of -lgcc -lgcc_eh at link time.
   Other than that, the C string LINK_EH_SPEC is appended to the
   linker spec automatically, so we define it to be empty.  */
#undef LINK_EH_SPEC
#ifdef HAVE_LD_EH_FRAME_HDR
#define LINK_EH_SPEC	"%{!static:--eh-frame-hdr}"
#else
#define LINK_EH_SPEC	""
#endif
@


1.25
log
@attempt version-specific *includes* not just *libs* as well,
so that we don’t need to remove Objective-C support from base
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.24 2009/12/06 18:22:38 tg Exp $ */
d5 1
a5 1
   2008, 2009
d35 2
@


1.24
log
@sync configs as well as possible with ports/lang/egcs/gcc4.4
untested
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.23 2009/12/06 17:12:13 tg Exp $ */
a65 25
/* MIRBSD_NATIVE is defined when gcc is integrated into the MirOS
   source tree so it can be configured appropriately.  The same
   applies for MIRBSD_CROSS, except it's used in cross-compiling,
   but only outside of the mbsd-bug package or other standardised
   cross-build environments that use sysroot instead, because the
   include path is *emptied* by MIRBSD_CROSS.  */

#ifdef MIRBSD_NATIVE

#undef GPLUSPLUS_INCLUDE_DIR
#define GPLUSPLUS_INCLUDE_DIR		"/usr/include/gxx"

#undef GCC_INCLUDE_DIR
#define GCC_INCLUDE_DIR			"/usr/include"

#else

/* Not sure how to do this best.  We use MIRBSD_NATIVE to
   cross-compile the native compiler, though.  */

#undef GCC_INCLUDE_DIR
#define GCC_INCLUDE_DIR			GPLUSPLUS_INCLUDE_DIR "/.."

#endif

d67 8
a74 8
#define INCLUDE_DEFAULTS				\
  {							\
    { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1, 0 },		\
    { GPLUSPLUS_TOOL_INCLUDE_DIR, "G++", 1, 1, 0 },	\
    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, "G++", 1, 1, 0 },	\
    { GCC_INCLUDE_DIR, "GCC", 0, 0, 0 },		\
    { 0, 0, 0, 0, 0 }					\
  }
d76 1
a76 2
/* Under MirOS, the normal location of the various *crt*.o files is the
   /usr/lib directory.  */
@


1.23
log
@unbreak pthreads in Objective-C
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.22 2009/09/12 13:52:38 tg Exp $ */
d25 6
d63 3
a71 3
#if defined(MIRBSD_NATIVE) || defined(MIRBSD_CROSS)

/* Look for the include files in the system-defined places.  */
a106 2
#endif /* MIRBSD_NATIVE */

a142 5
/* Implicit library calls should use memcpy, not bcopy, etc.  */

#undef TARGET_MEM_FUNCTIONS
#define TARGET_MEM_FUNCTIONS 1

d270 24
a293 1
#include "exec-stack.h"
d378 2
a379 1
	if (!flag_inhibit_size_directive && DECL_SIZE (DECL)) {		\
@


1.22
log
@remove *all* symbols common to libgcc/libgcc_s and libc/libmdsup from
the former pair, so that we will not ever have troubles like the ones
from UMAC-64 back then again; inspired by pvalchev’s comment about me
possibly introducing problems by merely changing the linking order
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.21 2009/02/25 17:41:42 tg Exp $ */
a143 4
/* Otherwise, since we support weak, gthr.h erroneously tries to use
   #pragma weak.  */
#define GTHREAD_USE_WEAK 0

@


1.21
log
@ok, let’s try the version-specific library thing again:
• the DT_RPATH must not contain the sysroot præfix
• the -L must contain it
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.18 2007/10/05 21:07:55 tg Exp $ */
d269 4
@


1.20
log
@• when using sysroot, it is not enough to set a -rpath to the directory
  containing the version specific run-time libraries, but we also need
  a -L on it for the cross-gcc to pick up the libgcc.a from the foreign
  arch’s native gcc
• note that MIRBSD_CROSS _empties_ the include path
@
text
@d227 2
a228 2
#define MIRBSD_RDIR	"%R" STANDARD_EXEC_PREFIX DEFAULT_TARGET_MACHINE \
			"/" DEFAULT_TARGET_VERSION
d239 1
a239 1
   -L" MIRBSD_RDIR " -rpath " MIRBSD_RDIR "	\
@


1.19
log
@tentatively move base-gcc to version-specific library directories, too

(the gxx includes stay, but the csu files move, so that we can use the
BSD licenced ones for pcc in /usr/lib later)
@
text
@d5 1
a5 1
   2008
d59 4
a62 1
   applies for MIRBSD_CROSS, except it's used in cross-compiling.  */
d221 1
a221 1
 *	%R = sysroot præfix (usually empty)
d226 3
a228 3
#undef MIRBSD_RPATH
#define MIRBSD_RPATH	"-rpath %R" STANDARD_EXEC_PREFIX \
			    DEFAULT_TARGET_MACHINE "/" DEFAULT_TARGET_VERSION
d238 2
a239 2
  "%{assert*}					\
   %{R*} %{rpath*} " MIRBSD_RPATH "		\
@


1.18
log
@undef before defining, we override that of <sparc/sparc.h> here
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.17 2007/10/02 00:24:09 tg Exp $ */
d4 2
a5 1
   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2006, 2007
d7 1
a7 1
   Contributed by Thorsten “mirabilos” Glaser <tg@@mirbsd.de>
d13 1
a13 2
the Free Software Foundation; either version 2, or (at your option)
any later version.
d215 12
d235 2
a236 1
  "%{assert*} %{R*} %{rpath*}			\
@


1.17
log
@maybe fix UMAC-64 ssh on sparc… this is a longer conversation between me and
an OpenSSH developer (pvalchev@@obsd) who’s been +extremely+ helpful in trak-
king this down (thanks a lot, in case you’re reading this *winks moid*)

we now list libc before libgcc on the ld command line, and use the -( ‥ -)
feature of ld(1) to group them, so we don’t have to list them twice, since
we always only use GNU ld (for now).
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.16 2006/12/11 20:35:09 tg Exp $ */
d242 1
d246 2
a247 2
#undef	NO_IMPLICIT_EXTERN_C
#define	NO_IMPLICIT_EXTERN_C 1
d306 1
a306 1
#define	ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)			\
d319 1
a319 1
#define	ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)			\
d332 1
a332 1
#define	ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)			\
d356 1
a356 1
#define	ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)	\
d397 1
a397 1
#undef	LINK_EH_SPEC
d399 1
a399 1
#define	LINK_EH_SPEC	"%{!static:--eh-frame-hdr}"
d401 1
a401 1
#define	LINK_EH_SPEC	""
@


1.16
log
@improve xbuild, idea from obsd
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.15 2006/12/11 20:30:59 tg Exp $ */
d4 1
a4 1
   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2006
d6 1
a6 1
   Contributed by Thorsten "mirabilos" Glaser <tg@@mirbsd.de>
d52 1
a52 1
#define CPP_SPEC MIRBSD_CPP_SPEC
d109 1
a109 1
#define LIB_SPEC MIRBSD_LIB_SPEC
d116 1
a116 1
#define LIBGCC_SPEC MIRBSD_LIBGCC_SPEC
d238 6
d246 1
a246 1
#define	NO_IMPLICIT_EXTERN_C	1
@


1.15
log
@some changes regarding the MIRBSD_NATIVE cpp flag: if cross-building,
define MIRBSD_CROSS instead, but have them share the effect of setting
the same (sane?) defaults; make changes that don't depend on if gcc is
inside our tree or not (e.g. the -fno-ident default) not depending on
its existence

XXX check the INCLUDE_DEFAULTS for cross-compilation
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.14 2006/11/09 02:22:57 tg Exp $ */
d64 2
d72 10
@


1.14
log
@cosmetics
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.13 2006/11/09 02:20:48 tg Exp $ */
d58 3
a60 3
   source tree so it can be configured appropriately.  */

#ifdef MIRBSD_NATIVE
@


1.13
log
@ISO C99 - ISO/IEC 9899:1999 (E) - says:
| 6.10.8 Predefined macro names
| 2 The following macro names are conditionally defined by the implementation:
| __STDC_ISO_10646__	An integer constant of the form yyyymmL (for example,
| 199712L), intended to indicate that values of type wchar_t are the
| coded representations of the characters defined by ISO/IEC 10646, along
| with all amendments and technical corrigenda as of the specified year and
| month.

DR 273 - http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_273.htm - says:
| Replace the relevant part of 6.10.8 with:
|
| __STDC_ISO_10646__
|
| An integer constant of the form yyyymmL (for example, 199712L). If
| this symbol is defined, then every character in the "Unicode required
| set", when stored in an object of type wchar_t, has the same value as
| the short identifier of that character. The "Unicode required set"
| consists of all the characters that are defined by ISO/IEC 10646,
| along with all amendments and technical corrigenda, as of the
| specified year and month.

According to http://www.mail-archive.com/unicode@@unicode.org/msg26235.html
the BMP was exceeded starting December 2001, so any earlier value does not
"define" other "all the characters".

According to http://sources.redhat.com/ml/libc-alpha/2000-10/msg00133.html
the printed copy of ISO/IEC 10646-1:2000(E) which Markus Kuhn received has
a date of September 2000, so we use this value.

ISO C99 requires the preprocessor to define __STDC_ISO_10646__, and contrary
to GNU/Linux, we do so because we're a centrally organised OS. Unlike any of
the other BSDs, we're actually using UCS-2HE as wchar_t.

This bumps the patchlevel.
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.12 2006/09/20 17:45:29 tg Exp $ */
d4 1
a4 1
   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005
d6 1
a6 1
   Hacked by Thorsten Glaser <tg@@MirBSD.de>
d140 1
a140 1
/* Don't use the `xsTAG;' construct in DBX output; OpenBSD systems that
d253 1
a253 1
   These strings generally do not vary from one system running OpenBSD
d280 1
a280 1
   entries under OpenBSD.  These macros also have to output the starting
d352 1
a352 1
/* Those are `generic' ways to weaken/globalize a label. We shouldn't need
@


1.12
log
@* switch ptrdiff_t and size_t to long, so that they can
  be the same (long) on LP64 and ILP32 arches -> no ABI
  change, since we only have ILP32 arches for now
* fix wchar_t from <machine/ansi.h> to agree with gcc's
  idea of how types have to be specified
* while here, nuke obsolete MirPPC config
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.11 2006/06/15 19:18:47 tg Exp $ */
d26 11
a36 9
#define MIRBSD_OS_CPP_BUILTINS()		\
  do						\
    {						\
      builtin_define ("__MirBSD__");		\
      builtin_define ("__OpenBSD__");		\
      builtin_define ("__unix__");		\
      builtin_assert ("system=unix");		\
      builtin_assert ("system=MirBSD");		\
    }						\
@


1.11
log
@mirbsd.org, 66h.42h.de, bsdadvocacy.org, and whatnot
we changed that too often, try to clean up the mess
mostly outside the www/ module which is dead anyway.
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.10 2005/09/22 19:45:25 tg Exp $ */
d155 6
@


1.10
log
@wint_t is now an unsigned int
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.9 2005/08/29 19:41:13 tg Exp $ */
d6 1
a6 1
   Hacked by Thorsten Glaser <tg@@MirBSD.org>
@


1.9
log
@/usr/lib/debug is obsolete
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.8 2005/07/28 19:19:37 tg Exp $ */
d153 1
a153 1
#define WINT_TYPE "int"
@


1.8
log
@fix a segfault in crapwar^Wgcc build
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.7 2005/07/25 17:45:22 tg Exp $ */
d206 1
a206 4
     %{!nostdlib:				\
       %{g:-L/usr/lib/debug}			\
       %{!r*:					\
	 %{!e*:-e __start}}}			\
@


1.7
log
@On MirOS, we use UCS-2ME internally, thus make wchar_t an unsigned short.

agreed bsiegert@@ ("yay, finally locales!")
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.6 2005/04/30 21:34:16 tg Exp $ */
d147 1
a147 1
#define WCHAR_TYPE "unsigned short"
@


1.6
log
@fix libjava
From: Andrew Pinski <pinskia@@physics.uc.edu>
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.5 2005/04/29 16:16:33 tg Exp $ */
d147 1
a147 1
#define WCHAR_TYPE "int"
d150 1
a150 1
#define WCHAR_TYPE_SIZE 32
@


1.5
log
@more EH, from kettenis@@obsd
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.4 2005/04/10 20:43:09 tg Exp $ */
d221 4
@


1.4
log
@add -L/usr/lib/debug automatically if -g
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.3 2005/03/26 00:00:30 tg Exp $ */
d370 3
d374 1
@


1.3
log
@nothing but -lgcc, else the parser's too stupid
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.2 2005/03/25 21:56:13 tg Exp $ */
d207 1
@


1.2
log
@enable experimental support for a shared libgcc
(adding libgcc_eh.a and libgcc_s.so), pulled by
all languages but C (I wonder why ObjC is in?).

this is needed for proper exception handling, a
libgcc*.so just cannot be in base8.ngz though.
@
text
@d1 1
a1 1
/* $MirOS: gcc/gcc/config/mirbsd.h,v 1.1 2005/03/25 18:49:28 tg Exp $ */
d97 1
a97 2
/* Provide a LIBGCC_SPEC appropriate for MirOS BSD.  We also want to exclude
   libgcc with -symbolic.  */
d99 1
a99 2
#define MIRBSD_LIBGCC_SPEC	\
  "%{!symbolic:-lgcc}"
@


1.1
log
@add MirOS-specific files
@
text
@d1 1
a1 1
/* $MirOS$ */
d6 1
a6 1
   Hacked by Thorsten Glaser <tg@@66.42h.de>
d101 1
a101 1
  "%{!symbolic:%{!shared:-lgcc}}"
d357 15
@

