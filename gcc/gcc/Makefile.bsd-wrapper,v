head	1.59;
access;
symbols
	MIRBSD_10_BASE:1.51
	MIRBSD_9_BASE:1.44
	MIRBSD_8:1.28.0.2
	MIRBSD_8_BASE:1.28;
locks; strict;
comment	@# @;


1.59
date	2017.04.03.04.29.29;	author tg;	state Exp;
branches;
next	1.58;
commitid	10058E1CFAC644611AA;

1.58
date	2017.04.03.02.37.00;	author tg;	state Exp;
branches;
next	1.57;
commitid	10058E1B5250AF477B9;

1.57
date	2014.02.10.20.07.56;	author tg;	state Exp;
branches;
next	1.56;
commitid	10052F931AD7C10757F;

1.56
date	2014.02.09.16.48.52;	author tg;	state Exp;
branches;
next	1.55;
commitid	10052F7B18B4C4978BF;

1.55
date	2009.12.12.19.40.41;	author tg;	state Exp;
branches;
next	1.54;
commitid	1004B23F1B9396598C0;

1.54
date	2009.04.17.16.30.08;	author tg;	state Exp;
branches;
next	1.53;
commitid	10049E8AE7E236917EA;

1.53
date	2008.12.26.16.01.19;	author tg;	state Exp;
branches;
next	1.52;
commitid	1004954FFC469B460F4;

1.52
date	2008.11.18.19.17.54;	author tg;	state Exp;
branches;
next	1.51;
commitid	100492314B6207EBA74;

1.51
date	2007.08.24.14.20.00;	author tg;	state Exp;
branches;
next	1.50;
commitid	10046CEE8E817DEC27F;

1.50
date	2007.06.12.23.29.42;	author tg;	state Exp;
branches;
next	1.49;
commitid	100466F2C794A4C5F15;

1.49
date	2007.06.12.22.18.28;	author tg;	state Exp;
branches;
next	1.48;
commitid	100466F1BC50F9CBB1A;

1.48
date	2007.06.10.17.19.23;	author tg;	state Exp;
branches;
next	1.47;
commitid	100466C3247736E7B1E;

1.47
date	2007.06.10.12.48.36;	author tg;	state Exp;
branches;
next	1.46;
commitid	100466BF3325AA07055;

1.46
date	2007.06.10.03.19.27;	author tg;	state Exp;
branches;
next	1.45;
commitid	100466B6DB0510D7F48;

1.45
date	2006.12.11.20.30.54;	author tg;	state Exp;
branches;
next	1.44;
commitid	100457DBF523050091A;

1.44
date	2006.06.22.12.49.44;	author tg;	state Exp;
branches;
next	1.43;
commitid	100449A91FF0E77A2AC;

1.43
date	2006.06.22.11.11.52;	author tg;	state Exp;
branches;
next	1.42;
commitid	100449A7AF97F9F9BBC;

1.42
date	2006.06.17.18.35.46;	author tg;	state Exp;
branches;
next	1.41;
commitid	10044944B98184982FE;

1.41
date	2006.06.17.18.11.25;	author tg;	state Exp;
branches;
next	1.40;
commitid	100449445AB0C4BBC72;

1.40
date	2006.06.11.01.45.19;	author tg;	state Exp;
branches;
next	1.39;
commitid	100448B75C050CAB801;

1.39
date	2006.03.31.16.14.49;	author tg;	state Exp;
branches;
next	1.38;
commitid	100442D55867D57F7FA;

1.38
date	2006.03.31.03.27.40;	author tg;	state Exp;
branches;
next	1.37;
commitid	100442CA1C20B4C09DC;

1.37
date	2006.03.31.03.16.49;	author tg;	state Exp;
branches;
next	1.36;
commitid	100442C9F0D2D8D21E8;

1.36
date	2006.03.27.11.19.49;	author tg;	state Exp;
branches;
next	1.35;
commitid	1004427CA641797ABE7;

1.35
date	2006.03.01.20.13.57;	author tg;	state Exp;
branches;
next	1.34;
commitid	1004406007B04AC0974;

1.34
date	2006.03.01.20.08.09;	author tg;	state Exp;
branches;
next	1.33;
commitid	1004405FF327F754F6C;

1.33
date	2006.03.01.13.26.32;	author tg;	state Exp;
branches;
next	1.32;
commitid	1004405A11A55FB7DBD;

1.32
date	2006.03.01.13.21.35;	author tg;	state Exp;
branches;
next	1.31;
commitid	10044059FF14EB553B5;

1.31
date	2006.03.01.13.20.07;	author tg;	state Exp;
branches;
next	1.30;
commitid	10044059F9B7128B037;

1.30
date	2006.03.01.13.12.05;	author tg;	state Exp;
branches;
next	1.29;
commitid	10044059DB701C1188E;

1.29
date	2006.02.01.01.28.39;	author tg;	state Exp;
branches;
next	1.28;
commitid	10043E00ED62F1999E5;

1.28
date	2005.11.23.18.29.47;	author tg;	state Exp;
branches;
next	1.27;
commitid	753b4384b515b1ce;

1.27
date	2005.11.22.21.54.06;	author tg;	state Exp;
branches;
next	1.26;
commitid	f924383936ceba7;

1.26
date	2005.11.22.19.38.53;	author tg;	state Exp;
branches;
next	1.25;
commitid	788d438373cd8db7;

1.25
date	2005.11.22.18.17.19;	author tg;	state Exp;
branches;
next	1.24;
commitid	2a1c438360a0196c;

1.24
date	2005.11.22.17.55.20;	author tg;	state Exp;
branches;
next	1.23;
commitid	52b843835b5a18a8;

1.23
date	2005.11.20.17.02.22;	author tg;	state Exp;
branches;
next	1.22;
commitid	58994380ac1cceb1;

1.22
date	2005.08.28.22.29.15;	author tg;	state Exp;
branches;
next	1.21;
commitid	16343123abb206d;

1.21
date	2005.08.28.21.53.50;	author tg;	state Exp;
branches;
next	1.20;
commitid	34f24312327ceead;

1.20
date	2005.08.28.21.30.43;	author tg;	state Exp;
branches;
next	1.19;
commitid	113143122d14e42e;

1.19
date	2005.08.28.19.58.46;	author tg;	state Exp;
branches;
next	1.18;
commitid	72164312177bc766;

1.18
date	2005.08.28.18.43.54;	author tg;	state Exp;
branches;
next	1.17;
commitid	44a431205f74101;

1.17
date	2005.07.06.18.48.07;	author tg;	state Exp;
branches;
next	1.16;
commitid	494942cc27676cb9;

1.16
date	2005.05.26.21.35.27;	author tg;	state Exp;
branches;
next	1.15;
commitid	7a234296413358ce;

1.15
date	2005.05.19.22.37.07;	author tg;	state Exp;
branches;
next	1.14;
commitid	629428d150afc6a;

1.14
date	2005.05.14.17.43.41;	author tg;	state Exp;
branches;
next	1.13;
commitid	36d2428638ba72ae;

1.13
date	2005.05.14.16.21.56;	author tg;	state Exp;
branches;
next	1.12;
commitid	51eb428625399862;

1.12
date	2005.05.01.21.54.14;	author tg;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.01.02.51.34;	author tg;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.17.02.28.25;	author tg;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.29.22.31.19;	author tg;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.28.15.10.15;	author tg;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.27.19.33.17;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.26.19.54.18;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.26.00.06.38;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.25.23.38.14;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.25.21.56.11;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.25.21.05.00;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.25.18.49.27;	author tg;	state Exp;
branches;
next	;


desc
@@


1.59
log
@drop all this fixincludes stuff, it’s considered harmful

we can just fix our headers if they break, plus it’s only limits.h…
@
text
@# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.58 2017/04/03 02:37:00 tg Exp $

.include <bsd.own.mk>
.include "${GNUSYSTEM_AUX_DIR}/locations.mk"
.include "../Makefile.inc"

MAN=		doc/${M_CPP}.1 doc/mgcc.1
B_MAN=		doc/cpp.1 doc/gcc.1 doc/gcov.1
INFO=		doc/cpp.info doc/cppinternals.info doc/gcc.info doc/gccint.info

.if !defined(NO_ADA) || ${NO_ADA:L} == "no"
INFO+=		doc/gnat-style.info doc/gnat_rm.info doc/gnat_ugn_unw.info
.endif

.if !defined(NO_CXX) || ${NO_CXX:L} == "no"
MLINKS=		mgcc.1 g++.1
.endif

.if !defined(NO_JAVA) || ${NO_JAVA:L} == "no"
B_MAN+=		doc/gcj.1 doc/gcjh.1 doc/gij.1 doc/jcf-dump.1 \
		doc/jv-convert.1 doc/jv-scan.1 doc/rmic.1 doc/rmiregistry.1
INFO+=		doc/gcj.info
.endif

.if (${CROSS_MODE:L} == "yes") && !defined(_CROSSBUILD)
ALL_TARGET?=	native xgcc cpp
FSFMARGS+=	LANGUAGES='c $$(CONFIG_LANGUAGES)'
XARGS+=		GNATMAKENATIVE="--GCC=/usr/bin/mgcc --GNATLINK='/usr/bin/gnatlink --GCC=/usr/bin/mgcc --LINK=/usr/bin/mgcc'"
.else
ALL_TARGET?=
.endif
.if (${CROSS_MODE:L} == "yes") && !defined(_CROSSBUILD)
INST_TARGET=	INSTALL_TARGET='install-common lang.install-normal' install
.elif defined(_CROSSBUILD)
INST_TARGET=	INSTALL_TARGET='install-common \
		$$(INSTALL_LIBGCC) lang.install-normal install-driver' install
.else
INST_TARGET=	INSTALL_TARGET='install-common \
		$$(INSTALL_LIBGCC) lang.install-normal' install
.endif
FSFISLIB=	No
FSFMAKE=	PATH=${FSFOBJDIR}/lbin:$$PATH ${XVARS} \
		    ${MAKE} ${FSFMARGS} ${XARGS}

__LANGS=	--enable-languages=c
.if !defined(NO_ADA) || ${NO_ADA:L} == "no"
__LANGS:=	${__LANGS},ada
.endif
.if !defined(NO_CXX) || ${NO_CXX:L} == "no"
__LANGS:=	${__LANGS},c++
.endif
.if !defined(NO_OBJC) || ${NO_OBJC:L} == "no"
__LANGS:=	${__LANGS},objc
.endif
.if !defined(NO_JAVA) || ${NO_JAVA:L} == "no"
__LANGS:=	${__LANGS},java
.endif
.if !defined(NO_PASCAL) || ${NO_PASCAL:L} == "no"
__LANGS:=	${__LANGS},pascal
# must use c99 because of // comments in pascal
# must use gnu extensions because of crtstuff
.  if !${COPTS:M-std=gnu99}
COPTS+=		-std=gnu99
.  endif
.endif

VSLIBDIR=	${GCC_PREFIX}/lib/gcc/${GCCTARGET}/${GCCVERSION}
BOOT_CFLAGS?=	${FSFCFLAGS}
GNATLIBCFLAGS?=	${BOOT_CFLAGS}
CPPFLAGS+=	-I${GNU_LIBIBERTY_INC}
XARGS+=		BISON=yacc LIBIBERTY_HDRS="${GNU_LIBIBERTY_INC}" \
		extrapartsdir=${VSLIBDIR:Q} BOOT_CFLAGS="${BOOT_CFLAGS}" \
		CFLAGS="${FSFCFLAGS}" GNATLIBCFLAGS="${GNATLIBCFLAGS}" \
		HOST_CC="${HOSTCC}" MAKEINFOFLAGS=--no-split \
		VALGRIND_DRIVER_DEFINES="-DNO_SHARED_LIBGCC_MULTILIB"
.ifdef _CROSSBUILD
XARGS+=		TCFLAGS="${CROSSCFLAGS}"
.else
XARGS+=		TCFLAGS="${FSFCFLAGS}"
.endif
XARGS+=		CC_FOR_BUILD=${HOSTCC:C/ *$//:Q}
.if ${GCC_NATIVE:L} == "yes"
XARGS+=		BUILD_LIBIBERTY="-liberty" LIBIBERTY="-liberty" \
		SUB_LIBERTY="-liberty" STMP_FIXINC=
M_CPP=		mcpp
.else
_LIBERTY?=	${GNU_LIBIBERTY_SRC}/obj/libiberty.a
XARGS+=		BUILD_LIBIBERTY="${_LIBERTY}" LIBIBERTY="${_LIBERTY}" \
		SUB_LIBERTY="${_LIBERTY}" WITH_SHARED_LIBGPC=no
M_CPP=		cpp
.endif

# This is to prevent the compiler from "overloading" us with pseudo-local
# symbols e.g. in shared libraries - for now...
CFVARS+=	gcc_cv_as_ix86_gotoff_in_data=no

CFARGS+=	--prefix=${GCC_PREFIX} --libexecdir=${GCC_PREFIX}/lib \
		--infodir=${GCC_INFODIR} --mandir=${GCC_MANDIR} \
		--disable-generated-files-in-srcdir --with-system-zlib \
		--disable-threads ${OBJC_GC} --enable-shared \
		--enable-stack-protector --disable-sjlj-exceptions \
		--with-local-prefix=${GCC_PREFIX} --disable-nls \
		--enable-version-specific-runtime-libs ${__LANGS}
.if (${CROSS_MODE:L} == "yes") && !defined(_CROSSBUILD)
# required if build != (host == target), for the chained auto-build.h call
# breaks if build == host == target *sigh*
CFARGS+=	--target=${GCCTARGET}
.endif
.if !defined(NO_THREADS) || ${NO_THREADS:L} == "no"
CFARGS+=	--enable-threads=posix
.else
CFARGS+=	--disable-threads
.endif

MAN+=		${B_MAN:Ndoc/gcc.1:Ndoc/cpp.1}
CLEANFILES+=	gcclink ${MAN} ${INFO} doc/fsf-funding.7 doc/gccinstall.info \
		doc/gfdl.7 doc/gnat_ugn_unw.texi doc/gpl.7 doc/gcc.1 \
		gcov-iov.h gengtype-lex.c gengtype-yacc.c gengtype-yacc.h \
		gpr2make gprcmd gpc-run p/handle-opts.c

# For Ada (native/host gnatmake)
config.status: gcclink

gcclink:
.if ${CC} != "gcc"
	test -d lbin || mkdir lbin
	-rm -f lbin/gcc
	print '#!/bin/sh\nexec ${CC:S/'/'\''/g} "$$@@"' >lbin/gcc
	chmod a+x lbin/gcc
.endif
	touch $@@

tconfig.h:	prereq
	cd ${FSFOBJDIR} && ${FSFMAKE} $@@

tree-check.h:	prereq
	cd ${FSFOBJDIR} && ${FSFMAKE} $@@

all-quick:
	cd ${FSFOBJDIR} && ${FSFMAKE} ${ALL_TARGET}

pre-install:
	mkdir -p ${DESTDIR:Q}${VSLIBDIR:Q} ${DESTDIR:Q}${MANDIR:Q}1
.if !defined(NO_PASCAL) || ${NO_PASCAL:L} == "no"
.  if (${GCC_NATIVE:L} != "yes") && exists(${.SYSMK}/libmirmake.a)
	mkdir libmirmake && cd libmirmake && ar x ${.SYSMK}/libmirmake.a md5.o
	ar r libgpc.a libmirmake/md5.o
	-rm -rf libmirmake
.  endif
.endif

${B_MAN}: .MADE do-build

doc/mgcc.1: .MADE doc/gcc.1
.if !defined(NO_CXX) || ${NO_CXX:L} == "no"
	sed -e 's#^gcc\( .*- GNU project C and\)#mgcc, c++\1#' \
	    <doc/gcc.1 >doc/mgcc.1
.else
	sed -e 's#^gcc\( .*- GNU project C and\)#mgcc\1#' \
	    <doc/gcc.1 >doc/mgcc.1
.endif

doc/mcpp.1: .MADE doc/cpp.1
	sed -e 's#^cpp\( .*- The \)C#mcpp\1GNU C#' \
	    <doc/cpp.1 >doc/mcpp.1

post-install:
.ifndef GCC_NO_SHARED_LIBGCC
.if (${GCC_NATIVE:L} == "yes") && (${NOPIC:L} == "no") && \
    ((${CROSS_MODE:L} != "yes") || defined(_CROSSBUILD))
	-${INSTALL} ${INSTALL_COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
	    libgcc_s_fpic.so.${LIBGCC_REV} \
	    ${DESTDIR:Q}${VSLIBDIR:Q}/libgcc_s.so.${LIBGCC_REV}
.endif
.endif
.if ${NOMAN:L} == "no"
.  for _i in ${INFO}
	${INSTALL} ${INSTALL_COPY} -o ${MANOWN} -g ${MANGRP} -m ${MANMODE} \
	    ${_i} ${DESTDIR}${GCC_INFODIR}/
.  endfor
.endif
.ifndef _CROSSBUILD
	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -m ${BINMODE} \
	    -o ${BINOWN} -g ${BINGRP} cpp ${DESTDIR}${GCC_PREFIX}/bin/${M_CPP}
	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -m ${BINMODE} \
	    -o ${BINOWN} -g ${BINGRP} xgcc ${DESTDIR}${GCC_PREFIX}/bin/mgcc
	cd ${DESTDIR}${GCC_PREFIX}/bin && ln -f mgcc gcc-${GCCVERSION}
.endif
.if (${CROSS_MODE:L} == "yes") && !defined(_CROSSBUILD)
	@@echo 'Remember to copy over: /usr/lib/crt{begin,end}{,S,T}.o'
	@@echo '  /usr/lib/gcc/${GCCTARGET}/${GCCVERSION}/{f{PIC,pic},include}'
	@@echo '  /usr/lib/gcc/${GCCTARGET}/${GCCVERSION}/lib{gcc,gcov}.a'
.  if !defined(NO_ADA) || ${NO_ADA:L} == "no"
	@@echo '  /usr/lib/gcc/${GCCTARGET}/${GCCVERSION}/ada{include,lib}'
.  endif
	@@echo 'XXX: some things may be in ${VSLIBDIR} instead of /usr/lib/gcc'
.endif
	chown -R ${BINOWN}:${BINGRP} ${DESTDIR:Q}${VSLIBDIR:Q}

pre-clean:
	-rm -rf ada lbin

.PHONY: all-quick

.include <bsd.cfwrap.mk>

.ifdef _CROSSBUILD
CFARGS+=--with-gnu-as=${GCC_PREFIX}/${GCCTARGET}/bin/as \
	--with-gnu-ld=${GCC_PREFIX}/${GCCTARGET}/bin/ld \
	--with-sysroot=${GCC_PREFIX:H} \
	--disable-shared
XVARS+=	GCC_NO_WERROR=1 GCC_HONOUR_COPTS=0
XARGS+=	AR_FOR_TARGET=${GCC_PREFIX}/${GCCTARGET}/bin/ar \
	NM_FOR_TARGET=${GCC_PREFIX}/${GCCTARGET}/bin/nm \
	RANLIB_FOR_TARGET=${GCC_PREFIX}/${GCCTARGET}/bin/ranlib
.endif
@


1.58
log
@break Makefiles enough to make C and Pascal compile with mirmake ipv gmake
(cross only C)
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.57 2014/02/10 20:07:56 tg Exp $
d26 1
a26 1
ALL_TARGET?=	native xgcc cpp xlimits.h
d35 1
a35 1
INST_TARGET=	INSTALL_TARGET='install-common $$(INSTALL_HEADERS) \
d38 1
a38 1
INST_TARGET=	INSTALL_TARGET='install-common $$(INSTALL_HEADERS) \
@


1.57
log
@drop g++ from manpage
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.56 2014/02/09 16:48:52 tg Exp $
d43 1
a43 2
		    ${GMAKE} ${FSFMARGS} ${XARGS}
FSFMARGS+=	MAKE=${GMAKE}
d84 1
a84 1
		SUB_LIBERTY="-liberty" STMP_FIXINC=stmp-fixinc-fake
@


1.56
log
@stop shipping libgcc_s in base, too
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.55 2009/12/12 19:40:41 tg Exp $
d156 1
d159 4
@


1.55
log
@attempt version-specific *includes* not just *libs* as well,
so that we don’t need to remove Objective-C support from base
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.54 2009/04/17 16:30:08 tg Exp $
d164 1
d171 1
@


1.54
log
@introduce new FSFISLIB (default yes) and set it to no to prevent things
like cvs, lynx, etc. to be built with -O1 -fno-omit-frame-pointer -g1
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.53 2008/12/26 16:01:19 tg Exp $
a83 1
CPPFLAGS+=	-DMIRBSD_NATIVE
a87 1
CPPFLAGS+=	-DMIRBSD_CROSS
a103 1
		--with-gxx-include-dir=${GCC_PREFIX}/include/gxx \
@


1.53
log
@tentatively move base-gcc to version-specific library directories, too

(the gxx includes stay, but the csu files move, so that we can use the
BSD licenced ones for pcc in /usr/lib later)
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.52 2008/11/18 19:17:54 tg Exp $
d41 1
@


1.52
log
@• rename cpp(1) manpage to mcpp(1)
• deprecate separate /usr/bin/cpp executable
⇒ people shall use “${CC} -E” if they need to preprocess compiled source,
  and /usr/libexec/cpp¹ otherwise

① C99 pcc-cpp only
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.51 2007/08/24 14:20:00 tg Exp $
d67 1
d72 1
a72 1
		extrapartsdir='${GCC_PREFIX}/lib' BOOT_CFLAGS="${BOOT_CFLAGS}" \
d105 2
a106 1
		--with-gxx-include-dir=${GCC_PREFIX}/include/gxx ${__LANGS}
d146 1
a146 2
	mkdir -p ${DESTDIR}${GCC_PREFIX}/lib/gcc/${GCCTARGET}/${GCCVERSION} \
	    ${DESTDIR}${MANDIR}1
d170 1
a170 1
	    ${DESTDIR}${GCC_PREFIX}/lib/libgcc_s.so.${LIBGCC_REV}
d192 1
d194 1
a194 2
	chown -R ${BINOWN}:${BINGRP} \
	    ${DESTDIR}${GCC_PREFIX}/lib/gcc/${GCCTARGET}/${GCCVERSION}
@


1.51
log
@• add -std=gnu99 to default CFLAGS
• first round of assorted fixes
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.50 2007/06/12 23:29:42 tg Exp $
d7 2
a8 1
MAN=		doc/cpp.1 doc/mgcc.1 doc/gcov.1
d20 1
a20 1
MAN+=		doc/gcj.1 doc/gcjh.1 doc/gij.1 doc/jcf-dump.1 \
d116 1
d154 1
a154 3
${MAN}: .MADE do-build

doc/gcc.1: .MADE do-build
d160 4
@


1.50
log
@errors here aren't fatal
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.49 2007/06/12 22:18:28 tg Exp $
d61 1
d63 1
@


1.49
log
@take care of cross not building libgcc_s
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.48 2007/06/10 17:19:23 tg Exp $
d161 1
a161 1
	${INSTALL} ${INSTALL_COPY} -o ${LIBOWN} -g ${LIBGRP} -m ${LIBMODE} \
@


1.48
log
@unbreak configuration of a native compiler to be cross-built
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.47 2007/06/10 12:48:36 tg Exp $
d159 2
a160 2
.if ${GCC_NATIVE:L} == "yes"
.  if ${NOPIC:L} == "no"
a163 1
.  endif
d166 1
a166 1
.for _i in ${INFO}
d169 1
a169 1
.endfor
@


1.47
log
@make it possible to cross-build a native gcc+gnat
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.46 2007/06/10 03:19:27 tg Exp $
d26 1
a26 1
XARGS+=		LANGUAGES='c $$(CONFIG_LANGUAGES)'
@


1.46
log
@first step of trying to build cross-compilers and cross-build native compi-
lers with both the new framework and Ada… this isn't enough apparently tho…
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.45 2006/12/11 20:30:54 tg Exp $
d26 2
d183 3
@


1.45
log
@some changes regarding the MIRBSD_NATIVE cpp flag: if cross-building,
define MIRBSD_CROSS instead, but have them share the effect of setting
the same (sane?) defaults; make changes that don't depend on if gcc is
inside our tree or not (e.g. the -fno-ident default) not depending on
its existence

XXX check the INCLUDE_DEFAULTS for cross-compilation
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.44 2006/06/22 12:49:44 tg Exp $
d25 1
a25 1
ALL_TARGET?=	config.status auto-host.h build- c collect2 xgcc cpp xlimits.h
d63 1
d67 1
a67 1
		CFLAGS="${FSFCFLAGS}" GNATLIBCFLAGS="${BOOT_CFLAGS}" \
@


1.44
log
@f.ck
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.43 2006/06/22 11:11:52 tg Exp $
d81 1
@


1.43
log
@fix thinko introduced while cross-building a native compiler
bump version to #9-release while here
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.42 2006/06/17 18:35:46 tg Exp $
d98 1
a98 1
.ifndef _CROSSBUILD
d100 1
@


1.42
log
@make build and install finish (C lang only)
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.41 2006/06/17 18:11:25 tg Exp $
d24 1
a24 1
.if defined(CROSS_MODE) && !defined(_CROSSBUILD)
d29 1
a29 1
.if defined(CROSS_MODE) && !defined(_CROSSBUILD)
d174 1
a174 1
.if defined(CROSS_MODE) && !defined(_CROSSBUILD)
@


1.41
log
@* add CC_FOR_BUILD to the overridden variables' list
* if *not* building a cross-compiler, but (cross-)building
  a native compiler, add --target=... to fix the generation
  of auto-build.h via the chained configure call
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.40 2006/06/11 01:45:19 tg Exp $
d24 3
d28 4
a31 1
.ifdef _CROSSBUILD
d174 5
@


1.40
log
@honour NOMAN for info files, too
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.39 2006/03/31 16:14:49 tg Exp $
d68 1
d92 4
@


1.39
log
@ln(1) can fail if not assisted by -f
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.38 2006/03/31 03:27:40 tg Exp $
d150 1
d155 1
@


1.38
log
@unbreak COMPILER_ONLY=yes build
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.37 2006/03/31 03:16:49 tg Exp $
d159 1
a159 1
	cd ${DESTDIR}${GCC_PREFIX}/bin && ln mgcc gcc-${GCCVERSION}
@


1.37
log
@That's what I get for running an alpha version of GNU pascal...
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.36 2006/03/27 11:19:49 tg Exp $
d159 1
a159 1
	cd ${DESTDIR}${GCC_PREFIX} && ln mgcc gcc-${GCCVERSION}
@


1.36
log
@add /usr/bin/gcc-3.4.6 hardlink to mgcc
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.35 2006/03/01 20:13:57 tg Exp $
d51 3
@


1.35
log
@use sysroot (try)
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.34 2006/03/01 20:08:09 tg Exp $
d156 1
@


1.34
log
@something more closely resembling a cross-built toolchain
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.33 2006/03/01 13:26:32 tg Exp $
d170 1
@


1.33
log
@some more crossbuild hooks
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.32 2006/03/01 13:21:35 tg Exp $
d58 7
a64 3
		HOST_CC="${HOSTCC}" HOST_CFLAGS="${HOSTCFLAGS}" \
		VALGRIND_DRIVER_DEFINES="-DNO_SHARED_LIBGCC_MULTILIB" \
		TCFLAGS="${FSFCFLAGS}" MAKEINFOFLAGS=--no-split
d168 3
d172 3
a174 2
CFARGS+=--with-gnu-as=${GCC_PREFIX}/bin/as \
	--with-gnu-ld=${GCC_PREFIX}/bin/ld
@


1.32
log
@help cross-compiler builds
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.31 2006/03/01 13:20:07 tg Exp $
d25 4
d31 1
d147 1
d152 1
d165 2
@


1.31
log
@honour NOPIC
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.30 2006/03/01 13:12:05 tg Exp $
d155 4
@


1.30
log
@disable threads in the else case
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.29 2006/02/01 01:28:39 tg Exp $
d132 1
d136 1
@


1.29
log
@cope for another heap of fallout
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.28 2005/11/23 18:29:47 tg Exp $
d81 2
@


1.28
log
@for 'make bootstrap', fix build on apple, add md5.o from libmirmake.a
to libgpc.a, etc.
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.27 2005/11/22 21:54:06 tg Exp $
d55 1
a55 1
		LIBGCC2_DEBUG_CFLAGS="${FSFCFLAGS}" MAKEINFOFLAGS=--no-split
@


1.27
log
@with a mgcc built with itself you can even build the pascal RTS,
but don't try to make a .so lib out of it on Darwin et al. ;)
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.26 2005/11/22 19:38:53 tg Exp $
d110 9
a118 1
	mkdir -p ${DESTDIR}${GCC_PREFIX}/lib/gcc/${GCCTARGET}/${GCCVERSION}
@


1.26
log
@cpp(1) and GCC_NATIVE=no
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.25 2005/11/22 18:17:19 tg Exp $
d64 1
a64 1
		SUB_LIBERTY="${_LIBERTY}" STMP_FIXINC=stmp-fixinc
@


1.25
log
@boehm-gc won't work on non-native (too many files nuked and stuff hardcoded)
so build ObjC without GC in the portable case
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.24 2005/11/22 17:55:20 tg Exp $
d60 1
d65 1
a65 1
CPP=		${CC} -E
d131 1
a131 1
	    -o ${BINOWN} -g ${BINGRP} cpp ${DESTDIR}${GCC_PREFIX}/bin/mcpp
@


1.24
log
@with quite little effort the gcc module can be made portable
Initial testing on Darwin; this only removes build failures,
testing will be done later
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.23 2005/11/20 17:02:22 tg Exp $
d74 1
a74 1
		--disable-threads --enable-objc-gc --enable-shared \
@


1.23
log
@bsiegert@@ doesn't want -fstack-protector-all to be default

(ok, we do find more bugs, but are we capable of fixing them?)
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.22 2005/08/28 22:29:15 tg Exp $
d49 1
a49 1
CPPFLAGS+=	-I${GNU_LIBIBERTY_INC} -DMIRBSD_NATIVE
d51 1
a51 3
		BUILD_LIBIBERTY="-liberty" LIBIBERTY="-liberty" \
		SUB_LIBERTY="-liberty" STMP_FIXINC=stmp-fixinc-fake \
		extrapartsdir='/usr/lib' BOOT_CFLAGS="${BOOT_CFLAGS}" \
d56 10
d71 3
a73 2
CFARGS+=	--prefix=/usr --libexecdir=/usr/lib --infodir=/usr/share/info \
		--mandir=/usr/share/man --disable-generated-files-in-srcdir \
d76 2
a77 2
		--with-local-prefix=/usr --disable-nls --with-system-zlib \
		--with-gxx-include-dir=/usr/include/gxx ${__LANGS}
d109 1
a109 1
	mkdir -p ${DESTDIR}/usr/lib/gcc/${GCCTARGET}/${GCCVERSION}
d120 1
d123 2
a124 1
	    ${DESTDIR}/usr/lib/libgcc_s.so.${LIBGCC_REV}
d127 1
a127 1
	    ${_i} ${DESTDIR}/usr/share/info/
d130 1
a130 1
	    -o ${BINOWN} -g ${BINGRP} cpp ${DESTDIR}/usr/bin/mcpp
d132 1
a132 1
	    -o ${BINOWN} -g ${BINGRP} xgcc ${DESTDIR}/usr/bin/mgcc
d134 1
a134 1
	    ${DESTDIR}/usr/lib/gcc/${GCCTARGET}/${GCCVERSION}
@


1.22
log
@let's be a bit daring and enable the stack protector for all functions
(another 2 to 3 % slow-down, according to Theo, but worth it IMO)
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.21 2005/08/28 21:53:50 tg Exp $
d66 1
a66 1
		--enable-stack-protector=always --disable-sjlj-exceptions \
@


1.21
log
@fix chown *sigh*
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.20 2005/08/28 21:30:43 tg Exp $
d66 1
a66 1
		--enable-stack-protector=yes --disable-sjlj-exceptions \
@


1.20
log
@fix manpage editing, oops
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.19 2005/08/28 19:58:46 tg Exp $
d122 1
a122 1
	chown -Rh ${BINOWN}:${BINGRP} \
@


1.19
log
@* add comment about "magic" variable
* better generation of lbin/gcc
* use chown -h
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.18 2005/08/28 18:43:54 tg Exp $
d107 1
a107 1
	sed -e 's#^\(     \)gcc\( - GNU project C and\)#\1mgcc, c++\2#' \
@


1.18
log
@replace mgcc(1) man page title, for 'man -k'
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.17 2005/07/06 18:48:07 tg Exp $
d59 2
d85 2
a86 1
	ln -s $$(whence -p ${CC}) lbin/gcc
d122 1
a122 1
	chown -R ${BINOWN}:${BINGRP} \
@


1.17
log
@I'll now try to compile this... permission fixing
and more version numbering stuff will follow later
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.16 2005/05/26 21:35:27 tg Exp $
d104 2
a105 1
	cp doc/gcc.1 doc/mgcc.1
@


1.16
log
@merge gcc 3.4.5 (prerelease)
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.15 2005/05/19 22:37:07 tg Exp $
a6 3
LIBGCC_VERSION=	1.1
CPPFLAGS+=	-I${GNU_LIBIBERTY_INC} -DMIRBSD_NATIVE

d27 2
a28 2
FSFMAKE=	ulimit -dS 245760; PATH=${FSFOBJDIR}/lbin:$$PATH \
		${XVARS} ${GMAKE} ${FSFMARGS} ${XARGS}
d49 1
d108 2
a109 2
	    libgcc_s_fpic.so.${LIBGCC_VERSION} \
	    ${DESTDIR}/usr/lib/libgcc_s.so.${LIBGCC_VERSION}
@


1.15
log
@don't rebuild the manual pages every time the phony target
is executed - the dependency is only to serialise anyway, so
use the .MADE special source. RTFM: make(1)
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.14 2005/05/14 17:43:41 tg Exp $
a6 1
GCCVERSION=	3.4.4
@


1.14
log
@make it work

just that now:
 Program received signal SIGSEGV, Segmentation fault.
 0x051b7fd0 in pthread_stackseg_np () from /usr/lib/libpthread.so.8.0
the problem is just at a different place...
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.13 2005/05/14 16:21:56 tg Exp $
d102 1
a102 1
${MAN}: do-build
d104 1
a104 1
doc/gcc.1: do-build
d106 1
a106 1
doc/mgcc.1: doc/gcc.1
@


1.13
log
@* merge gcc update
* re-enable boehm-gc
* build a threaded gcc

this is still broken
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.12 2005/05/01 21:54:14 tg Exp $
d8 1
a8 1
LIBGCC_MAJOR=	1
d111 2
a112 2
	    libgcc_s_fpic.so.${LIBGCC_MAJOR} \
	    ${DESTDIR}/usr/lib/libgcc_s.so.${LIBGCC_MAJOR}.0
@


1.12
log
@disable boehm-gc for gcj and Objective C
cf. http://www.monkey.org/openbsd/archive/ports/0304/msg00263.html
and today's IRC log
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.11 2005/05/01 02:51:34 tg Exp $
d66 1
a66 1
		--disable-threads --disable-objc-gc --enable-shared \
d70 3
@


1.11
log
@*/Makefile.in:	hand-edit: no install on all; mkinstalldirs
configure:	regen
top-level/gcc:	change from undef/def to yes/no logic
libffi:		my fix was only partially right, there is *.S sources...

tweak enough to make libjava build again
it doesn't install yet, but I do have to sleep too, you know?
and disable debugging, it isn't good for you
-rwxr-xr-x  1 tg    wsrc  40888110 May  1 02:07 /usr/obj/gcc/libjava/.libs/libgcj.so.5.0*
-r--r--r--  1 root  bin    9888484 May  1 02:35 /usr/lib/libgcj.so.5.0
sounds reasonable, but
-r--r--r--  1 root  bin   99385856 May  1 02:31 /usr/lib/libgcj.a
does not, definitively. and sparc will not have gcj... I think.

congratulations, MirOS now takes ~4 hours longer for a full
make dist-q on an Athlon XP 1200 MHz.
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.10 2005/04/17 02:28:25 tg Exp $
d66 1
a66 1
		--disable-threads --enable-objc-gc --enable-shared \
@


1.10
log
@disable @@GOTOFF (in .data) relocations, because we do not want
1000000000 local lables to show up in shared libraries
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.9 2005/03/29 22:31:19 tg Exp $
d14 1
a14 1
.ifndef NO_ADA
d18 1
a18 1
.ifndef NO_CXX
d22 1
a22 1
.ifndef NO_JAVA
d36 1
a36 1
.ifndef NO_ADA
d39 1
a39 1
.ifndef NO_CXX
d42 1
a42 1
.ifndef NO_OBJC
d45 1
a45 1
.ifndef NO_JAVA
d48 1
a48 1
.ifndef NO_PASCAL
@


1.9
log
@pass MAKEINFOFLAGS manually, it didn't work *sigh*
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.8 2005/03/28 15:10:15 tg Exp $
d62 2
@


1.8
log
@enable gpc; sync
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.7 2005/03/27 19:33:17 tg Exp $
d60 1
a60 1
		LIBGCC2_DEBUG_CFLAGS="${FSFCFLAGS}"
@


1.7
log
@NO, NO and NO again
no libgcc_s_fpic.so.1!
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.6 2005/03/26 19:54:18 tg Exp $
d48 3
d72 1
a72 1
		gpr2make gprcmd
@


1.6
log
@let's try without setjmp/longjmp
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.5 2005/03/26 00:06:38 tg Exp $
d56 1
@


1.5
log
@oops, it's a library, LIBMODE please
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.4 2005/03/25 23:38:14 tg Exp $
d61 1
a61 1
		--enable-stack-protector=yes --enable-sjlj-exceptions \
@


1.4
log
@Instead of bearing with a /lib/libgcc_s_fpic.so.1
I'd rather install /usr/lib/libgcc_s.so.1.0 myself
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.3 2005/03/25 21:56:11 tg Exp $
d101 1
a101 1
	${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m ${BINMODE} \
@


1.3
log
@enable experimental support for a shared libgcc
(adding libgcc_eh.a and libgcc_s.so), pulled by
all languages but C (I wonder why ObjC is in?).

this is needed for proper exception handling, a
libgcc*.so just cannot be in base8.ngz though.
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.2 2005/03/25 21:05:00 tg Exp $
d8 1
d101 3
@


1.2
log
@build libgcc2 with our CFLAGS too
@
text
@d1 1
a1 1
# $MirOS: gcc/gcc/Makefile.bsd-wrapper,v 1.1 2005/03/25 18:49:27 tg Exp $
d59 1
a59 1
		--disable-threads --enable-objc-gc --disable-shared \
@


1.1
log
@add MirOS-specific files
@
text
@d1 1
a1 1
# $MirOS$
d54 2
a55 1
		HOST_CC="${HOSTCC}" HOST_CFLAGS="${HOSTCFLAGS}"
@

