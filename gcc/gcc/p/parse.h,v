head	1.4;
access;
symbols
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.3
	gpc-20060325:1.1.111.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	gpc-20051116:1.1.111.1
	gpc:1.1.111;
locks; strict;
comment	@ * @;


1.4
date	2017.04.03.00.30.12;	author tg;	state Exp;
branches;
next	1.3;
commitid	10058E197A9233A0A72;

1.3
date	2006.03.27.11.59.02;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004427D394409B84F7;

1.2
date	2005.11.20.13.45.42;	author tg;	state Exp;
branches;
next	1.1;
commitid	168043807e0039e4;

1.1
date	2005.03.27.23.28.07;	author tg;	state Exp;
branches
	1.1.111.1;
next	;

1.1.111.1
date	2005.11.20.12.18.42;	author tg;	state Exp;
branches;
next	1.1.111.2;
commitid	3462438069a7b269;

1.1.111.2
date	2006.03.27.11.51.06;	author tg;	state Exp;
branches;
next	;
commitid	1004427D1B80A0FD957;


desc
@@


1.4
log
@regen
@
text
@/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton interface for Bison GLR parsers in C

   Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     prec_lower_than_error = 258,
     prec_if = 259,
     prec_import = 260,
     p_uses = 261,
     p_else = 262,
     p_and = 263,
     p_array = 264,
     p_begin = 265,
     p_case = 266,
     p_div = 267,
     p_do = 268,
     p_downto = 269,
     p_end = 270,
     p_file = 271,
     p_for = 272,
     p_function = 273,
     p_goto = 274,
     p_if = 275,
     p_in = 276,
     p_label = 277,
     p_mod = 278,
     p_nil = 279,
     p_not = 280,
     p_of = 281,
     p_or = 282,
     p_packed = 283,
     p_procedure = 284,
     p_to = 285,
     p_program = 286,
     p_record = 287,
     p_repeat = 288,
     p_set = 289,
     p_then = 290,
     p_type = 291,
     p_until = 292,
     p_var = 293,
     p_while = 294,
     p_with = 295,
     p_absolute = 296,
     p_abstract = 297,
     p_and_then = 298,
     p_as = 299,
     p_asm = 300,
     p_attribute = 301,
     p_bindable = 302,
     p_const = 303,
     p_constructor = 304,
     p_destructor = 305,
     p_external = 306,
     p_far = 307,
     p_finalization = 308,
     p_forward = 309,
     p_implementation = 310,
     p_import = 311,
     p_inherited = 312,
     p_initialization = 313,
     p_is = 314,
     p_near = 315,
     p_object = 316,
     p_only = 317,
     p_operator = 318,
     p_otherwise = 319,
     p_or_else = 320,
     p_pow = 321,
     p_qualified = 322,
     p_restricted = 323,
     p_shl = 324,
     p_shr = 325,
     p_unit = 326,
     p_value = 327,
     p_virtual = 328,
     p_xor = 329,
     p_asmname = 330,
     p_c = 331,
     p_c_language = 332,
     p_class = 333,
     p_override = 334,
     p_reintroduce = 335,
     p_view = 336,
     p_Addr = 337,
     p_Assigned = 338,
     p_Dispose = 339,
     p_Exit = 340,
     p_FormatString = 341,
     p_New = 342,
     p_Return = 343,
     p_StringOf = 344,
     LEX_INTCONST = 345,
     LEX_INTCONST_BASE = 346,
     LEX_STRCONST = 347,
     LEX_REALCONST = 348,
     LEX_BUILTIN_PROCEDURE = 349,
     LEX_BUILTIN_PROCEDURE_WRITE = 350,
     LEX_BUILTIN_FUNCTION = 351,
     LEX_ID = 352,
     LEX_CARET_WHITE = 353,
     LEX_CARET_LETTER = 354,
     LEX_ASSIGN = 355,
     LEX_RENAME = 356,
     LEX_RANGE = 357,
     LEX_ELLIPSIS = 358,
     LEX_CONST_EQUAL = 359,
     LEX_SYMDIFF = 360,
     LEX_NE = 361,
     LEX_GE = 362,
     LEX_LE = 363,
     LEX_POWER = 364,
     LEX_BPPLUS = 365,
     LEX_BPMINUS = 366,
     LEX_CEIL_PLUS = 367,
     LEX_CEIL_MINUS = 368,
     LEX_FLOOR_PLUS = 369,
     LEX_FLOOR_MINUS = 370,
     LEX_CEIL_MULT = 371,
     LEX_CEIL_DIV = 372,
     LEX_FLOOR_MULT = 373,
     LEX_FLOOR_DIV = 374
   };
#endif


/* Copy the first part of user declarations.  */
#line 63 "parse.y"

#ifndef GPC_PARSE_Y_FIRST_PROLOGUE
#define GPC_PARSE_Y_FIRST_PROLOGUE

#define YYMAXDEPTH 200000
#include "gpc.h"
#ifdef GCC_4_0
#include "cgraph.h"
#endif

/* A few keywords of some dialects can be parsed as regular identifiers
   and checked from the parser actions => fewer special tokens. */
#define ASSERT_ID(id, location, pseudo_keyword) \
  do if (!IDENTIFIER_IS_BUILT_IN (id, pseudo_keyword) || !PD_ACTIVE (IDENTIFIER_BUILT_IN_VALUE (id))) \
    { yyerror_id (id, &location); YYERROR; } while (0)

enum { od_none, od_uses, od_label, od_const, od_type, od_var, od_routine };
union yyGLRStackItem;
#define YYLLOC_DEFAULT(DEST, SRC, N) locations (&DEST, SRC, N)
#ifndef GCC_3_4
#define LOCATION_NOTE(LOC) if (current_function_decl) emit_line_note ((LOC).first_file, (LOC).first_line)
#else
#define LOCATION_NOTE(LOC) if (current_function_decl) \
  { \
    location_t loc_aux; \
    loc_aux.file = (LOC).first_file; \
    loc_aux.line = (LOC).first_line; \
    emit_line_note (loc_aux); \
  }
#endif
#define COPYLOC(D, S) /* @@@@ ? (* (YYLTYPE *) memcpy (&(D), &(S), sizeof (YYLTYPE))) */ (S)

#define YYASSERT gcc_assert
#define YYMALLOC (void *) xmalloc
#define YYREALLOC (void *) xrealloc
#endif


#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE 
#line 110 "parse.y"
{
  enum tree_code code;
  long itype;
  tree ttype;
}
/* Line 2616 of glr.c.  */
#line 212 "parse.h"
	YYSTYPE;
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{

  int first_line;
  int first_column;
  int last_line;
  int last_column;

} YYLTYPE;
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


extern YYSTYPE yylval;

extern YYLTYPE yylloc;


@


1.3
log
@merge
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.1.  */
d3 3
a5 2
/* Skeleton parser for GLR parsing with Bison,
   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
d22 13
d160 46
a205 125
/* Tokens.  */
#define prec_lower_than_error 258
#define prec_if 259
#define prec_import 260
#define p_uses 261
#define p_else 262
#define p_and 263
#define p_array 264
#define p_begin 265
#define p_case 266
#define p_div 267
#define p_do 268
#define p_downto 269
#define p_end 270
#define p_file 271
#define p_for 272
#define p_function 273
#define p_goto 274
#define p_if 275
#define p_in 276
#define p_label 277
#define p_mod 278
#define p_nil 279
#define p_not 280
#define p_of 281
#define p_or 282
#define p_packed 283
#define p_procedure 284
#define p_to 285
#define p_program 286
#define p_record 287
#define p_repeat 288
#define p_set 289
#define p_then 290
#define p_type 291
#define p_until 292
#define p_var 293
#define p_while 294
#define p_with 295
#define p_absolute 296
#define p_abstract 297
#define p_and_then 298
#define p_as 299
#define p_asm 300
#define p_attribute 301
#define p_bindable 302
#define p_const 303
#define p_constructor 304
#define p_destructor 305
#define p_external 306
#define p_far 307
#define p_finalization 308
#define p_forward 309
#define p_implementation 310
#define p_import 311
#define p_inherited 312
#define p_initialization 313
#define p_is 314
#define p_near 315
#define p_object 316
#define p_only 317
#define p_operator 318
#define p_otherwise 319
#define p_or_else 320
#define p_pow 321
#define p_qualified 322
#define p_restricted 323
#define p_shl 324
#define p_shr 325
#define p_unit 326
#define p_value 327
#define p_virtual 328
#define p_xor 329
#define p_asmname 330
#define p_c 331
#define p_c_language 332
#define p_class 333
#define p_override 334
#define p_reintroduce 335
#define p_view 336
#define p_Addr 337
#define p_Assigned 338
#define p_Dispose 339
#define p_Exit 340
#define p_FormatString 341
#define p_New 342
#define p_Return 343
#define p_StringOf 344
#define LEX_INTCONST 345
#define LEX_INTCONST_BASE 346
#define LEX_STRCONST 347
#define LEX_REALCONST 348
#define LEX_BUILTIN_PROCEDURE 349
#define LEX_BUILTIN_PROCEDURE_WRITE 350
#define LEX_BUILTIN_FUNCTION 351
#define LEX_ID 352
#define LEX_CARET_WHITE 353
#define LEX_CARET_LETTER 354
#define LEX_ASSIGN 355
#define LEX_RENAME 356
#define LEX_RANGE 357
#define LEX_ELLIPSIS 358
#define LEX_CONST_EQUAL 359
#define LEX_SYMDIFF 360
#define LEX_NE 361
#define LEX_GE 362
#define LEX_LE 363
#define LEX_POWER 364
#define LEX_BPPLUS 365
#define LEX_BPMINUS 366
#define LEX_CEIL_PLUS 367
#define LEX_CEIL_MINUS 368
#define LEX_FLOOR_PLUS 369
#define LEX_FLOOR_MINUS 370
#define LEX_CEIL_MULT 371
#define LEX_CEIL_DIV 372
#define LEX_FLOOR_MULT 373
#define LEX_FLOOR_DIV 374




#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 112 "parse.y"
typedef union YYSTYPE {
d209 4
a212 3
} YYSTYPE;
/* Line 2359 of glr.c.  */
#line 277 "parse.h"
d217 1
a217 3
extern YYSTYPE yylval;

#if ! defined (YYLTYPE) && ! defined (YYLTYPE_IS_DECLARED)
d231 3
@


1.2
log
@these files are generated and thusly part of our new gpc vendor branch
(except gpc-lex.c whose diff is no longer needed either now)
@
text
@d105 39
a143 37
     p_Addr = 336,
     p_Assigned = 337,
     p_Dispose = 338,
     p_Exit = 339,
     p_FormatString = 340,
     p_New = 341,
     p_Return = 342,
     LEX_INTCONST = 343,
     LEX_INTCONST_BASE = 344,
     LEX_STRCONST = 345,
     LEX_REALCONST = 346,
     LEX_BUILTIN_PROCEDURE = 347,
     LEX_BUILTIN_PROCEDURE_WRITE = 348,
     LEX_BUILTIN_FUNCTION = 349,
     LEX_ID = 350,
     LEX_CARET_WHITE = 351,
     LEX_CARET_LETTER = 352,
     LEX_ASSIGN = 353,
     LEX_RENAME = 354,
     LEX_RANGE = 355,
     LEX_ELLIPSIS = 356,
     LEX_CONST_EQUAL = 357,
     LEX_SYMDIFF = 358,
     LEX_NE = 359,
     LEX_GE = 360,
     LEX_LE = 361,
     LEX_POWER = 362,
     LEX_BPPLUS = 363,
     LEX_BPMINUS = 364,
     LEX_CEIL_PLUS = 365,
     LEX_CEIL_MINUS = 366,
     LEX_FLOOR_PLUS = 367,
     LEX_FLOOR_MINUS = 368,
     LEX_CEIL_MULT = 369,
     LEX_CEIL_DIV = 370,
     LEX_FLOOR_MULT = 371,
     LEX_FLOOR_DIV = 372
d225 39
a263 37
#define p_Addr 336
#define p_Assigned 337
#define p_Dispose 338
#define p_Exit 339
#define p_FormatString 340
#define p_New 341
#define p_Return 342
#define LEX_INTCONST 343
#define LEX_INTCONST_BASE 344
#define LEX_STRCONST 345
#define LEX_REALCONST 346
#define LEX_BUILTIN_PROCEDURE 347
#define LEX_BUILTIN_PROCEDURE_WRITE 348
#define LEX_BUILTIN_FUNCTION 349
#define LEX_ID 350
#define LEX_CARET_WHITE 351
#define LEX_CARET_LETTER 352
#define LEX_ASSIGN 353
#define LEX_RENAME 354
#define LEX_RANGE 355
#define LEX_ELLIPSIS 356
#define LEX_CONST_EQUAL 357
#define LEX_SYMDIFF 358
#define LEX_NE 359
#define LEX_GE 360
#define LEX_LE 361
#define LEX_POWER 362
#define LEX_BPPLUS 363
#define LEX_BPMINUS 364
#define LEX_CEIL_PLUS 365
#define LEX_CEIL_MINUS 366
#define LEX_FLOOR_PLUS 367
#define LEX_FLOOR_MINUS 368
#define LEX_CEIL_MULT 369
#define LEX_CEIL_DIV 370
#define LEX_FLOOR_MULT 371
#define LEX_FLOOR_DIV 372
d269 1
a269 1
#line 108 "parse.y"
d276 1
a276 1
#line 273 "parse.h"
@


1.1
log
@pregenerate some files
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.0.  */
d4 1
a4 1
   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.
d18 2
a19 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d27 1
a27 1
     prec_id = 258,
d29 63
a91 63
     prec_lower_than_error = 260,
     prec_import = 261,
     p_operator = 262,
     p_destructor = 263,
     p_constructor = 264,
     p_implementation = 265,
     p_initialization = 266,
     p_uses = 267,
     p_else = 268,
     p_and = 269,
     p_array = 270,
     p_begin = 271,
     p_case = 272,
     p_div = 273,
     p_do = 274,
     p_downto = 275,
     p_end = 276,
     p_file = 277,
     p_for = 278,
     p_function = 279,
     p_goto = 280,
     p_if = 281,
     p_in = 282,
     p_label = 283,
     p_mod = 284,
     p_nil = 285,
     p_not = 286,
     p_of = 287,
     p_or = 288,
     p_packed = 289,
     p_procedure = 290,
     p_to = 291,
     p_program = 292,
     p_record = 293,
     p_repeat = 294,
     p_set = 295,
     p_then = 296,
     p_type = 297,
     p_until = 298,
     p_var = 299,
     p_while = 300,
     p_with = 301,
     p_absolute = 302,
     p_abstract = 303,
     p_and_then = 304,
     p_as = 305,
     p_asm = 306,
     p_attribute = 307,
     p_bindable = 308,
     p_const = 309,
     p_external = 310,
     p_far = 311,
     p_finalization = 312,
     p_forward = 313,
     p_import = 314,
     p_inherited = 315,
     p_is = 316,
     p_near = 317,
     p_object = 318,
     p_only = 319,
     p_otherwise = 320,
     p_or_else = 321,
     p_pow = 322,
d102 6
a107 6
     p_Addr = 333,
     p_Assigned = 334,
     p_Dispose = 335,
     p_FormatString = 336,
     p_New = 337,
     p_Return = 338,
d109 12
a120 12
     LEX_ID = 340,
     LEX_BUILTIN_PROCEDURE = 341,
     LEX_BUILTIN_PROCEDURE_WRITE = 342,
     LEX_BUILTIN_FUNCTION = 343,
     LEX_BUILTIN_FUNCTION_VT = 344,
     LEX_BUILTIN_VARIABLE = 345,
     LEX_INTCONST = 346,
     LEX_INTCONST_BASE = 347,
     LEX_STRCONST = 348,
     LEX_REALCONST = 349,
     LEX_CARET_WHITE = 350,
     LEX_STRUCTOR = 351,
d122 12
a133 12
     LEX_CONST_EQUAL = 353,
     LEX_BPPLUS = 354,
     LEX_BPMINUS = 355,
     LEX_RANGE = 356,
     LEX_ELLIPSIS = 357,
     LEX_RENAME = 358,
     LEX_SYMDIFF = 359,
     LEX_ASSIGN = 360,
     LEX_NE = 361,
     LEX_GE = 362,
     LEX_LE = 363,
     LEX_POWER = 364,
d144 2
a145 1
#define prec_id 258
d147 63
a209 63
#define prec_lower_than_error 260
#define prec_import 261
#define p_operator 262
#define p_destructor 263
#define p_constructor 264
#define p_implementation 265
#define p_initialization 266
#define p_uses 267
#define p_else 268
#define p_and 269
#define p_array 270
#define p_begin 271
#define p_case 272
#define p_div 273
#define p_do 274
#define p_downto 275
#define p_end 276
#define p_file 277
#define p_for 278
#define p_function 279
#define p_goto 280
#define p_if 281
#define p_in 282
#define p_label 283
#define p_mod 284
#define p_nil 285
#define p_not 286
#define p_of 287
#define p_or 288
#define p_packed 289
#define p_procedure 290
#define p_to 291
#define p_program 292
#define p_record 293
#define p_repeat 294
#define p_set 295
#define p_then 296
#define p_type 297
#define p_until 298
#define p_var 299
#define p_while 300
#define p_with 301
#define p_absolute 302
#define p_abstract 303
#define p_and_then 304
#define p_as 305
#define p_asm 306
#define p_attribute 307
#define p_bindable 308
#define p_const 309
#define p_external 310
#define p_far 311
#define p_finalization 312
#define p_forward 313
#define p_import 314
#define p_inherited 315
#define p_is 316
#define p_near 317
#define p_object 318
#define p_only 319
#define p_otherwise 320
#define p_or_else 321
#define p_pow 322
d220 6
a225 6
#define p_Addr 333
#define p_Assigned 334
#define p_Dispose 335
#define p_FormatString 336
#define p_New 337
#define p_Return 338
d227 12
a238 12
#define LEX_ID 340
#define LEX_BUILTIN_PROCEDURE 341
#define LEX_BUILTIN_PROCEDURE_WRITE 342
#define LEX_BUILTIN_FUNCTION 343
#define LEX_BUILTIN_FUNCTION_VT 344
#define LEX_BUILTIN_VARIABLE 345
#define LEX_INTCONST 346
#define LEX_INTCONST_BASE 347
#define LEX_STRCONST 348
#define LEX_REALCONST 349
#define LEX_CARET_WHITE 350
#define LEX_STRUCTOR 351
d240 12
a251 12
#define LEX_CONST_EQUAL 353
#define LEX_BPPLUS 354
#define LEX_BPMINUS 355
#define LEX_RANGE 356
#define LEX_ELLIPSIS 357
#define LEX_RENAME 358
#define LEX_SYMDIFF 359
#define LEX_ASSIGN 360
#define LEX_NE 361
#define LEX_GE 362
#define LEX_LE 363
#define LEX_POWER 364
d265 1
a265 1
#line 118 "parse.y"
d271 2
a272 2
/* Line 2089 of glr.c.  */
#line 272 "parse.h"
@


1.1.111.1
log
@Update to gpc-20051116 with the following diffs applied:
Message-ID: <E1EcXkX-0004mi-00@@hera.math.uni.wroc.pl>
Message-ID: <E1Ed6ro-00056J-00@@hera.math.uni.wroc.pl>
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.1.  */
d4 1
a4 1
   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
d18 2
a19 2
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
d27 1
a27 1
     prec_lower_than_error = 258,
d29 63
a91 63
     prec_import = 260,
     p_uses = 261,
     p_else = 262,
     p_and = 263,
     p_array = 264,
     p_begin = 265,
     p_case = 266,
     p_div = 267,
     p_do = 268,
     p_downto = 269,
     p_end = 270,
     p_file = 271,
     p_for = 272,
     p_function = 273,
     p_goto = 274,
     p_if = 275,
     p_in = 276,
     p_label = 277,
     p_mod = 278,
     p_nil = 279,
     p_not = 280,
     p_of = 281,
     p_or = 282,
     p_packed = 283,
     p_procedure = 284,
     p_to = 285,
     p_program = 286,
     p_record = 287,
     p_repeat = 288,
     p_set = 289,
     p_then = 290,
     p_type = 291,
     p_until = 292,
     p_var = 293,
     p_while = 294,
     p_with = 295,
     p_absolute = 296,
     p_abstract = 297,
     p_and_then = 298,
     p_as = 299,
     p_asm = 300,
     p_attribute = 301,
     p_bindable = 302,
     p_const = 303,
     p_constructor = 304,
     p_destructor = 305,
     p_external = 306,
     p_far = 307,
     p_finalization = 308,
     p_forward = 309,
     p_implementation = 310,
     p_import = 311,
     p_inherited = 312,
     p_initialization = 313,
     p_is = 314,
     p_near = 315,
     p_object = 316,
     p_only = 317,
     p_operator = 318,
     p_otherwise = 319,
     p_or_else = 320,
     p_pow = 321,
     p_qualified = 322,
d102 6
a107 6
     p_class = 333,
     p_override = 334,
     p_reintroduce = 335,
     p_Addr = 336,
     p_Assigned = 337,
     p_Dispose = 338,
d109 12
a120 12
     p_FormatString = 340,
     p_New = 341,
     p_Return = 342,
     LEX_INTCONST = 343,
     LEX_INTCONST_BASE = 344,
     LEX_STRCONST = 345,
     LEX_REALCONST = 346,
     LEX_BUILTIN_PROCEDURE = 347,
     LEX_BUILTIN_PROCEDURE_WRITE = 348,
     LEX_BUILTIN_FUNCTION = 349,
     LEX_ID = 350,
     LEX_CARET_WHITE = 351,
d122 12
a133 12
     LEX_ASSIGN = 353,
     LEX_RENAME = 354,
     LEX_RANGE = 355,
     LEX_ELLIPSIS = 356,
     LEX_CONST_EQUAL = 357,
     LEX_SYMDIFF = 358,
     LEX_NE = 359,
     LEX_GE = 360,
     LEX_LE = 361,
     LEX_POWER = 362,
     LEX_BPPLUS = 363,
     LEX_BPMINUS = 364,
d144 1
a144 2
/* Tokens.  */
#define prec_lower_than_error 258
d146 63
a208 63
#define prec_import 260
#define p_uses 261
#define p_else 262
#define p_and 263
#define p_array 264
#define p_begin 265
#define p_case 266
#define p_div 267
#define p_do 268
#define p_downto 269
#define p_end 270
#define p_file 271
#define p_for 272
#define p_function 273
#define p_goto 274
#define p_if 275
#define p_in 276
#define p_label 277
#define p_mod 278
#define p_nil 279
#define p_not 280
#define p_of 281
#define p_or 282
#define p_packed 283
#define p_procedure 284
#define p_to 285
#define p_program 286
#define p_record 287
#define p_repeat 288
#define p_set 289
#define p_then 290
#define p_type 291
#define p_until 292
#define p_var 293
#define p_while 294
#define p_with 295
#define p_absolute 296
#define p_abstract 297
#define p_and_then 298
#define p_as 299
#define p_asm 300
#define p_attribute 301
#define p_bindable 302
#define p_const 303
#define p_constructor 304
#define p_destructor 305
#define p_external 306
#define p_far 307
#define p_finalization 308
#define p_forward 309
#define p_implementation 310
#define p_import 311
#define p_inherited 312
#define p_initialization 313
#define p_is 314
#define p_near 315
#define p_object 316
#define p_only 317
#define p_operator 318
#define p_otherwise 319
#define p_or_else 320
#define p_pow 321
#define p_qualified 322
d219 6
a224 6
#define p_class 333
#define p_override 334
#define p_reintroduce 335
#define p_Addr 336
#define p_Assigned 337
#define p_Dispose 338
d226 12
a237 12
#define p_FormatString 340
#define p_New 341
#define p_Return 342
#define LEX_INTCONST 343
#define LEX_INTCONST_BASE 344
#define LEX_STRCONST 345
#define LEX_REALCONST 346
#define LEX_BUILTIN_PROCEDURE 347
#define LEX_BUILTIN_PROCEDURE_WRITE 348
#define LEX_BUILTIN_FUNCTION 349
#define LEX_ID 350
#define LEX_CARET_WHITE 351
d239 12
a250 12
#define LEX_ASSIGN 353
#define LEX_RENAME 354
#define LEX_RANGE 355
#define LEX_ELLIPSIS 356
#define LEX_CONST_EQUAL 357
#define LEX_SYMDIFF 358
#define LEX_NE 359
#define LEX_GE 360
#define LEX_LE 361
#define LEX_POWER 362
#define LEX_BPPLUS 363
#define LEX_BPMINUS 364
d264 1
a264 1
#line 108 "parse.y"
d270 2
a271 2
/* Line 2359 of glr.c.  */
#line 273 "parse.h"
@


1.1.111.2
log
@Update gcc/p/ to gpc-20060325
@
text
@d105 37
a141 39
     p_view = 336,
     p_Addr = 337,
     p_Assigned = 338,
     p_Dispose = 339,
     p_Exit = 340,
     p_FormatString = 341,
     p_New = 342,
     p_Return = 343,
     p_StringOf = 344,
     LEX_INTCONST = 345,
     LEX_INTCONST_BASE = 346,
     LEX_STRCONST = 347,
     LEX_REALCONST = 348,
     LEX_BUILTIN_PROCEDURE = 349,
     LEX_BUILTIN_PROCEDURE_WRITE = 350,
     LEX_BUILTIN_FUNCTION = 351,
     LEX_ID = 352,
     LEX_CARET_WHITE = 353,
     LEX_CARET_LETTER = 354,
     LEX_ASSIGN = 355,
     LEX_RENAME = 356,
     LEX_RANGE = 357,
     LEX_ELLIPSIS = 358,
     LEX_CONST_EQUAL = 359,
     LEX_SYMDIFF = 360,
     LEX_NE = 361,
     LEX_GE = 362,
     LEX_LE = 363,
     LEX_POWER = 364,
     LEX_BPPLUS = 365,
     LEX_BPMINUS = 366,
     LEX_CEIL_PLUS = 367,
     LEX_CEIL_MINUS = 368,
     LEX_FLOOR_PLUS = 369,
     LEX_FLOOR_MINUS = 370,
     LEX_CEIL_MULT = 371,
     LEX_CEIL_DIV = 372,
     LEX_FLOOR_MULT = 373,
     LEX_FLOOR_DIV = 374
d223 37
a259 39
#define p_view 336
#define p_Addr 337
#define p_Assigned 338
#define p_Dispose 339
#define p_Exit 340
#define p_FormatString 341
#define p_New 342
#define p_Return 343
#define p_StringOf 344
#define LEX_INTCONST 345
#define LEX_INTCONST_BASE 346
#define LEX_STRCONST 347
#define LEX_REALCONST 348
#define LEX_BUILTIN_PROCEDURE 349
#define LEX_BUILTIN_PROCEDURE_WRITE 350
#define LEX_BUILTIN_FUNCTION 351
#define LEX_ID 352
#define LEX_CARET_WHITE 353
#define LEX_CARET_LETTER 354
#define LEX_ASSIGN 355
#define LEX_RENAME 356
#define LEX_RANGE 357
#define LEX_ELLIPSIS 358
#define LEX_CONST_EQUAL 359
#define LEX_SYMDIFF 360
#define LEX_NE 361
#define LEX_GE 362
#define LEX_LE 363
#define LEX_POWER 364
#define LEX_BPPLUS 365
#define LEX_BPMINUS 366
#define LEX_CEIL_PLUS 367
#define LEX_CEIL_MINUS 368
#define LEX_FLOOR_PLUS 369
#define LEX_FLOOR_MINUS 370
#define LEX_CEIL_MULT 371
#define LEX_CEIL_DIV 372
#define LEX_FLOOR_MULT 373
#define LEX_FLOOR_DIV 374
d265 1
a265 1
#line 112 "parse.y"
d272 1
a272 1
#line 277 "parse.h"
@


