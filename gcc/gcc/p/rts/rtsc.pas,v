head	1.5;
access;
symbols
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.4
	gpc-20060325:1.1.111.2
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	gpc-20051116:1.1.111.1
	gpc:1.1.111;
locks; strict;
comment	@ * @;


1.5
date	2017.08.07.20.11.36;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005988C69344442E37;

1.4
date	2006.03.27.11.59.04;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004427D394409B84F7;

1.3
date	2005.11.20.13.45.44;	author tg;	state Exp;
branches;
next	1.2;
commitid	168043807e0039e4;

1.2
date	2005.03.28.01.57.17;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.27.23.47.31;	author tg;	state Exp;
branches
	1.1.111.1;
next	;

1.1.111.1
date	2005.11.20.12.18.44;	author tg;	state Exp;
branches;
next	1.1.111.2;
commitid	3462438069a7b269;

1.1.111.2
date	2006.03.27.11.51.07;	author tg;	state Exp;
branches;
next	;
commitid	1004427D1B80A0FD957;


desc
@@


1.5
log
@filesystem
@
text
@{ This file was generated automatically by make-rtsc-pas.
  DO NOT CHANGE THIS FILE MANUALLY! }

{ Pascal declarations of the GPC Run Time System routines that are
  implemented in C

  Note about the `GPC_' prefix:
  This is inserted so that some identifiers don't conflict with the
  built-in ones. In some cases, the built-in ones do exactly the
  same as the ones declared here, but often enough, they contain
  some "magic", so they should be used instead of the plain
  declarations here. In general, routines with a `GPC_' prefix
  should not be called from programs. They may change or disappear
  in future GPC versions.

  Copyright (C) 1998-2006 Free Software Foundation, Inc.

  Author: Frank Heckenbach <frank@@pascal.gnu.de>

  This file is part of GNU Pascal.

  GNU Pascal is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published
  by the Free Software Foundation; either version 2, or (at your
  option) any later version.

  GNU Pascal is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with GNU Pascal; see the file COPYING. If not, write to the
  Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
  02111-1307, USA.

  As a special exception, if you link this file with files compiled
  with a GNU compiler to produce an executable, this does not cause
  the resulting executable to be covered by the GNU General Public
  License. This exception does not however invalidate any other
  reasons why the executable file might be covered by the GNU
  General Public License. }

{$gnu-pascal,I-}

unit RTSC; attribute (name = 'GPC');

interface

const
  { Maximum size of a variable }
  MaxVarSize = MaxInt div 8;

{ If set, characters >= #$80 are assumed to be letters even if the
  locale routines don't say so. This is a kludge because some
  systems don't have correct non-English locale tables. }
var
  FakeHighLetters: Boolean = False; attribute (name = '_p_FakeHighLetters');

type
  PCStrings = ^TCStrings;
  TCStrings = array [0 .. MaxVarSize div SizeOf (CString) - 1] of CString;

  Int64 = Integer attribute (Size = 64);
  UnixTimeType = LongInt;  { This is hard-coded in the compiler. Do not change here. }
  MicroSecondTimeType = LongInt;
  FileSizeType = LongInt;
  SignedSizeType = Integer attribute (Size = BitSizeOf (SizeType));
  TSignalHandler = procedure (Signal: CInteger);

  StatFSBuffer = record
    BlockSize, BlocksTotal, BlocksFree: LongInt;
    FilesTotal, FilesFree: CInteger
  end;

  InternalSelectType = record
    Handle: CInteger;
    Read, Write, Exception: Boolean
  end;

  PString = ^String;

  { `Max' so the range of the array does not become invalid for
    Count = 0 }
  PPStrings = ^TPStrings;
  TPStrings (Count: Cardinal) = array [1 .. Max (Count, 1)] of PString;

  GlobBuffer = record
    Result: PPStrings;
    Internal1: Pointer;
    Internal2: PCStrings;
    Internal3: CInteger
  end;

{@@internal}
  TCPasswordEntry = record
    UserName, RealName, Password, HomeDirectory, Shell: CString;
    UID, GID: CInteger
  end;

  PCPasswordEntries = ^TCPasswordEntries;
  TCPasswordEntries = array [0 .. MaxVarSize div SizeOf (TCPasswordEntry) - 1] of TCPasswordEntry;

{$define SqRt InternalSqRt} {$define Exp InternalExp} {$define Ln InternalLn}  { @@@@ }
{@@endinternal}

{ Mathematical routines }

{@@internal}
function  Sin (x: Real): Real; attribute (const); external name '_p_Sin';
function  Cos (x: Real): Real; attribute (const); external name '_p_Cos';
function  ArcSin (x: Real): Real; attribute (const); external name '_p_ArcSin';
function  ArcCos (x: Real): Real; attribute (const); external name '_p_ArcCos';
function  ArcTan (x: Real): Real; attribute (const); external name '_p_ArcTan';
function  SqRt (x: Real): Real; attribute (const); external name '_p_SqRt';
function  Ln (x: Real): Real; attribute (const); external name '_p_Ln';
function  Exp (x: Real): Real; attribute (const); external name '_p_Exp';
function  Power (x: Real; y: Real): Real; attribute (const); external name '_p_Power';
function  InternalHypot (x: Real; y: Real): Real; attribute (const); external name '_p_InternalHypot';
function  InternalLn1Plus (x: Real): Real; attribute (const); external name '_p_InternalLn1Plus';
function  LongReal_Sin (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_Sin';
function  LongReal_Cos (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_Cos';
function  LongReal_ArcSin (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_ArcSin';
function  LongReal_ArcCos (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_ArcCos';
function  LongReal_ArcTan (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_ArcTan';
function  LongReal_SqRt (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_SqRt';
function  LongReal_Ln (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_Ln';
function  LongReal_Exp (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_Exp';
function  LongReal_Power (x: LongReal; y: LongReal): LongReal; attribute (const); external name '_p_LongReal_Power';
{@@endinternal}

function  SinH (x: Real): Real; attribute (const); external name '_p_SinH';
function  CosH (x: Real): Real; attribute (const); external name '_p_CosH';
function  ArcTan2 (y: Real; x: Real): Real; attribute (const); external name '_p_ArcTan2';
function  IsInfinity (x: LongReal): Boolean; attribute (const); external name '_p_IsInfinity';
function  IsNotANumber (x: LongReal): Boolean; attribute (const); external name '_p_IsNotANumber';
procedure SplitReal (x: LongReal; var Exponent: CInteger; var Mantissa: LongReal); external name '_p_SplitReal';

{ Character routines }

{@@internal}

{ Convert a character to upper case, according to the current
  locale.
  Except in `--borland-pascal' mode, `UpCase' does the same. }
function  UpCase (ch: Char): Char; attribute (const); external name '_p_UpCase';
{@@endinternal}


{ Convert a character to lower case, according to the current
  locale. }
function  LoCase (ch: Char): Char; attribute (const); external name '_p_LoCase';
function  IsUpCase (ch: Char): Boolean; attribute (const); external name '_p_IsUpCase';
function  IsLoCase (ch: Char): Boolean; attribute (const); external name '_p_IsLoCase';
function  IsAlpha (ch: Char): Boolean; attribute (const); external name '_p_IsAlpha';
function  IsAlphaNum (ch: Char): Boolean; attribute (const); external name '_p_IsAlphaNum';
function  IsAlphaNumUnderscore (ch: Char): Boolean; attribute (const); external name '_p_IsAlphaNumUnderscore';
function  IsSpace (ch: Char): Boolean; attribute (const); external name '_p_IsSpace';
function  IsPrintable (ch: Char): Boolean; attribute (const); external name '_p_IsPrintable';

{ Time routines }

{ Sleep for a given number of seconds. }
procedure Sleep (Seconds: CInteger); external name '_p_Sleep';

{ Sleep for a given number of microseconds. }
procedure SleepMicroSeconds (MicroSeconds: CInteger); external name '_p_SleepMicroSeconds';

{ Set an alarm timer. }
function  Alarm (Seconds: CInteger): CInteger; external name '_p_Alarm';

{ Convert a Unix time value to broken-down local time.
  All parameters except Time may be Null. }
procedure UnixTimeToTime (Time: UnixTimeType; var Year: CInteger; var Month: CInteger; var Day: CInteger; var Hour: CInteger; var Minute: CInteger; var Second: CInteger;
                                var TimeZone: CInteger; var DST: Boolean; var TZName1: CString; var TZName2: CString); external name '_p_UnixTimeToTime';

{ Convert broken-down local time to a Unix time value. }
function  TimeToUnixTime (Year: CInteger; Month: CInteger; Day: CInteger; Hour: CInteger; Minute: CInteger; Second: CInteger): UnixTimeType; external name '_p_TimeToUnixTime';

{ Get the real time. MicroSecond can be Null and is ignored then. }
function  GetUnixTime (var MicroSecond: CInteger): UnixTimeType; external name '_p_GetUnixTime';

{ Get the CPU time used. MicroSecond can be Null and is ignored
  then. }
function  GetCPUTime (var MicroSecond: CInteger): CInteger; external name '_p_GetCPUTime';

{@@internal}
procedure InitTime; external name '_p_InitTime';
function  CFormatTime (Time: UnixTimeType; Format: CString; Buf: CString; Size: CInteger): CInteger; external name '_p_CFormatTime';
{@@endinternal}


{ Signal and process routines }

{ Extract information from the status returned by PWait }
function  StatusExited (Status: CInteger): Boolean; attribute (const); external name '_p_StatusExited';
function  StatusExitCode (Status: CInteger): CInteger; attribute (const); external name '_p_StatusExitCode';
function  StatusSignaled (Status: CInteger): Boolean; attribute (const); external name '_p_StatusSignaled';
function  StatusTermSignal (Status: CInteger): CInteger; attribute (const); external name '_p_StatusTermSignal';
function  StatusStopped (Status: CInteger): Boolean; attribute (const); external name '_p_StatusStopped';
function  StatusStopSignal (Status: CInteger): CInteger; attribute (const); external name '_p_StatusStopSignal';

{ Install a signal handler and optionally return the previous
  handler. OldHandler and OldRestart may be Null. }
function  InstallSignalHandler (Signal: CInteger; Handler: TSignalHandler; Restart: Boolean; UnlessIgnored: Boolean;
  var OldHandler: TSignalHandler; var OldRestart: Boolean): Boolean; external name '_p_InstallSignalHandler';

{ Block or unblock a signal. }
procedure BlockSignal (Signal: CInteger; Block: Boolean); external name '_p_BlockSignal';

{ Test whether a signal is blocked. }
function  SignalBlocked (Signal: CInteger): Boolean; external name '_p_SignalBlocked';

{ Sends a signal to a process. Returns True if successful. If Signal
  is 0, it doesn't send a signal, but still checks whether it would
  be possible to send a signal to the given process. }
function  Kill (PID: CInteger; Signal: CInteger): Boolean; external name '_p_Kill';

{ Constant for WaitPID }
const
  AnyChild = -1;

{ Waits for a child process with the given PID (or any child process
  if PID = AnyChild) to terminate or be stopped. Returns the PID of
  the process. WStatus will contain the status and can be evaluated
  with StatusExited etc.. If nothing happened, and Block is False,
  the function will return 0, and WStatus will be 0. If an error
  occurred (especially on single tasking systems where WaitPID is
  not possible), the function will return a negative value, and
  WStatus will be 0. }
function  WaitPID (PID: CInteger; var WStatus: CInteger; Block: Boolean): CInteger; external name '_p_WaitPID';

{ Returns the process ID. }
function  ProcessID: CInteger; external name '_p_ProcessID';

{ Returns the process group. }
function  ProcessGroup: CInteger; external name '_p_ProcessGroup';

{ Returns the real or effective user ID of the process. }
function  UserID (Effective: Boolean): CInteger; external name '_p_UserID';

{ Tries to change the real and/or effective user ID. }
function  SetUserID (Real: CInteger; Effective: CInteger): Boolean; external name '_p_SetUserID';

{ Returns the real or effective group ID of the process. }
function  GroupID (Effective: Boolean): CInteger; external name '_p_GroupID';

{ Tries to change the real and/or effective group ID. }
function  SetGroupID (Real: CInteger; Effective: CInteger): Boolean; external name '_p_SetGroupID';

{ Low-level file routines. Mostly for internal use. }

{ Get information about a filesystem. }
function  StatFS (Path: CString; var Buf: StatFSBuffer): Boolean; external name '_p_StatFS';
function  CStringOpenDir (DirName: CString): Pointer; external name '_p_CStringOpenDir';
function  CStringReadDir (Dir: Pointer): CString; external name '_p_CStringReadDir';
procedure CStringCloseDir (Dir: Pointer); external name '_p_CStringCloseDir';

{ Returns the value of the symlink FileName in a CString allocated
  from the heap. Returns nil if it is no symlink or the function
  is not supported. }
function  ReadLink (FileName: CString): CString; external name '_p_ReadLink';

{ Returns a pointer to a *static* buffer! }
function  CStringRealPath (Path: CString): CString; external name '_p_CStringRealPath';

{ File mode constants that are ORed for BindingType.Mode, ChMod,
  CStringChMod and Stat. The values below are valid for all OSs
  (as far as supported). If the OS uses different values, they're
  converted internally. }
const
  fm_SetUID           = 8#4000;
  fm_SetGID           = 8#2000;
  fm_Sticky           = 8#1000;
  fm_UserReadable     = 8#400;
  fm_UserWritable     = 8#200;
  fm_UserExecutable   = 8#100;
  fm_GroupReadable    = 8#40;
  fm_GroupWritable    = 8#20;
  fm_GroupExecutable  = 8#10;
  fm_OthersReadable   = 8#4;
  fm_OthersWritable   = 8#2;
  fm_OthersExecutable = 8#1;

{ Constants for Access and OpenHandle }
const
  MODE_EXEC     = 1 shl 0;
  MODE_WRITE    = 1 shl 1;
  MODE_READ     = 1 shl 2;
  MODE_FILE     = 1 shl 3;
  MODE_CREATE   = 1 shl 4;
  MODE_EXCL     = 1 shl 5;
  MODE_TRUNCATE = 1 shl 6;
  MODE_APPEND   = 1 shl 7;
  MODE_BINARY   = 1 shl 8;

{ Check if a file name is accessible. }
function  Access (FileName: CString; Request: CInteger): CInteger; external name '_p_Access';

{ Get information about a file. Any argument except FileName can
  be Null. }
function  Stat (FileName: CString; var Size: FileSizeType;
  var ATime: UnixTimeType; var MTime: UnixTimeType; var CTime: UnixTimeType;
  var User: CInteger; var Group: CInteger; var Mode: CInteger; var Device: CInteger; var INode: CInteger; var Links: CInteger;
  var SymLink: Boolean; var Dir: Boolean; var Special: Boolean): CInteger; external name '_p_Stat';
function  OpenHandle (FileName: CString; Mode: CInteger): CInteger; external name '_p_OpenHandle';
function  ReadHandle (Handle: CInteger; Buffer: Pointer; Size: SizeType): SignedSizeType; external name '_p_ReadHandle';
function  WriteHandle (Handle: CInteger; Buffer: Pointer; Size: SizeType): SignedSizeType; external name '_p_WriteHandle';
function  CloseHandle (Handle: CInteger): CInteger; external name '_p_CloseHandle';
procedure FlushHandle (Handle: CInteger); external name '_p_FlushHandle';
function  DupHandle (Src: CInteger; Dest: CInteger): CInteger; external name '_p_DupHandle';
function  SetFileMode (Handle: CInteger; Mode: CInteger; On: Boolean): CInteger; attribute (ignorable); external name '_p_SetFileMode';
function  CStringRename (OldName: CString; NewName: CString): CInteger; external name '_p_CStringRename';
function  CStringUnlink (FileName: CString): CInteger; external name '_p_CStringUnlink';
function  CStringChDir (FileName: CString): CInteger; external name '_p_CStringChDir';
function  CStringMkDir (FileName: CString): CInteger; external name '_p_CStringMkDir';
function  CStringRmDir (FileName: CString): CInteger; external name '_p_CStringRmDir';
function  UMask (Mask: CInteger): CInteger; attribute (ignorable); external name '_p_UMask';
function  CStringChMod (FileName: CString; Mode: CInteger): CInteger; external name '_p_CStringChMod';
function  CStringChOwn (FileName: CString; Owner: CInteger; Group: CInteger): CInteger; external name '_p_CStringChOwn';
function  CStringUTime (FileName: CString; AccessTime: UnixTimeType; ModificationTime: UnixTimeType): CInteger; external name '_p_CStringUTime';

{ Constants for SeekHandle }
const
  SeekAbsolute = 0;
  SeekRelative = 1;
  SeekFileEnd  = 2;

{ Seek to a position on a file handle. }
function  SeekHandle (Handle: CInteger; Offset: FileSizeType; Whence: CInteger): FileSizeType; external name '_p_SeekHandle';
function  TruncateHandle (Handle: CInteger; Size: FileSizeType): CInteger; external name '_p_TruncateHandle';
function  LockHandle (Handle: CInteger; WriteLock: Boolean; Block: Boolean): Boolean; external name '_p_LockHandle';
function  UnlockHandle (Handle: CInteger): Boolean; external name '_p_UnlockHandle';
function  SelectHandle (Count: CInteger; var Events: InternalSelectType; MicroSeconds: MicroSecondTimeType): CInteger; external name '_p_SelectHandle';

{ Constants for MMapHandle and MemoryMap }
const
  mm_Readable   = 1;
  mm_Writable   = 2;
  mm_Executable = 4;

{ Try to map (a part of) a file to memory. }
function  MMapHandle (Start: Pointer; Length: SizeType; Access: CInteger; Shared: Boolean; Handle: CInteger; Offset: FileSizeType): Pointer; external name '_p_MMapHandle';

{ Unmap a previous memory mapping. }
function  MUnMapHandle (Start: Pointer; Length: SizeType): CInteger; external name '_p_MUnMapHandle';

{ Returns the file name of the terminal device that is open on
  Handle. Returns nil if (and only if) Handle is not open or not
  connected to a terminal. If NeedName is False, it doesn't bother
  to search for the real name and just returns DefaultName if it
  is a terminal and nil otherwise. DefaultName is also returned if
  NeedName is True, Handle is connected to a terminal, but the
  system does not provide information about the real file name. }
function  GetTerminalNameHandle (Handle: CInteger; NeedName: Boolean; DefaultName: CString): CString; external name '_p_GetTerminalNameHandle';

{ System routines }

{ Sets the process group of Process (or the current one if Process
  is 0) to ProcessGroup (or its PID if ProcessGroup is 0). Returns
  True if successful. }
function  SetProcessGroup (Process: CInteger; ProcessGroup: CInteger): Boolean; external name '_p_SetProcessGroup';

{ Sets the process group of a terminal given by Terminal (as a file
  handle) to ProcessGroup. ProcessGroup must be the ID of a process
  group in the same session. Returns True if successful. }
function  SetTerminalProcessGroup (Handle: CInteger; ProcessGroup: CInteger): Boolean; external name '_p_SetTerminalProcessGroup';

{ Returns the process group of a terminal given by Terminal (as a
  file handle), or -1 on error. }
function  GetTerminalProcessGroup (Handle: CInteger): CInteger; external name '_p_GetTerminalProcessGroup';

{ Set the standard input's signal generation, if it is a terminal. }
procedure SetInputSignals (Signals: Boolean); external name '_p_SetInputSignals';

{ Get the standard input's signal generation, if it is a terminal. }
function  GetInputSignals: Boolean; external name '_p_GetInputSignals';

{ Internal routines }

{ Returns system information if available. Fields not available will
  be set to nil. }
procedure CStringSystemInfo (var SysName: CString; var NodeName: CString; var Release: CString; var Version: CString; var Machine: CString; var DomainName: CString); external name '_p_CStringSystemInfo';

{ Returns the path of the running executable *if possible*. }
function  CStringExecutablePath (Buffer: CString): CString; external name '_p_CStringExecutablePath';

{@@internal}

{ Returns a temporary directory name *if possible*. }
function  CStringGetTempDirectory (Buffer: CString; Size: CInteger): CString; external name '_p_CStringGetTempDirectory';

{ Executes a command line. }
function  CSystem (CmdLine: CString): CInteger; external name '_p_CSystem';
function  GetStartEnvironment (ValueIfNotFound: PCStrings): PCStrings; external name '_p_GetStartEnvironment';
procedure CStringSetEnv (VarName: CString; Value: CString; NewEnvCString: CString; UnSet: Boolean); external name '_p_CStringSetEnv';
{@@endinternal}


{ Sets ErrNo to the value of `errno' and returns the description
  for this error. May return nil if not supported! ErrNo may be
  Null (then only the description is returned). }
function  CStringStrError (var ErrNo: CInteger): CString; external name '_p_CStringStrError';

{@@internal}

{ Returns a description for a signal. May return nil if not supported! }
function  CStringStrSignal (Signal: CInteger): CString; external name '_p_CStringStrSignal';
function  FNMatch (Pattern: CString; FileName: CString): CInteger; external name '_p_FNMatch';
procedure GlobInternal (var Buf: GlobBuffer; Pattern: CString); external name '_p_GlobInternal';
procedure GlobFreeInternal (var Buf: GlobBuffer); external name '_p_GlobFreeInternal';
function  CGetPwNam (UserName: CString; var Entry: TCPasswordEntry): Boolean; external name '_p_CGetPwNam';
function  CGetPwUID (UID: CInteger; var Entry: TCPasswordEntry): Boolean; external name '_p_CGetPwUID';
function  CGetPwEnt (var Entries: PCPasswordEntries): CInteger; external name '_p_CGetPwEnt';
procedure InitMisc; external name '_p_InitMisc';
procedure InitMalloc (procedure WarnProc (Msg: CString)); external name '_p_InitMalloc';
procedure ExitProgram (Status: CInteger; AbortFlag: Boolean); attribute (noreturn); external name '_p_ExitProgram';
{@@endinternal}

{@@internal}
{ rtsc.pas }
type
  PProcedure = ^procedure;
  PProcList = ^TProcList;
  TProcList = record
    Next, Prev: PProcList;
    Proc: PProcedure
  end;

procedure RunFinalizers (var AtExitProcs: PProcList); attribute (name = '_p_RunFinalizers');

{@@endinternal}

implementation

{ @@@@ from files.pas }
procedure Initialize_Std_Files; attribute (iocritical); external name '_p_Initialize_Std_Files';

{ This file is always compiled with debug information (see
  Makefile.in), but the file name of the following routine is set to
  a magic name, so a debugger can recognize it automatically and
  step over it into the finalizers themselves. }
{$ifndef DEBUG}
#line 1 "<implicit code>"
{$endif}
procedure RunFinalizers (var AtExitProcs: PProcList);
var
  p: PProcList;
  Proc: PProcedure;
begin
  while AtExitProcs <> nil do
    begin
      p := AtExitProcs;
      AtExitProcs := AtExitProcs^.Next;
      Proc := p^.Proc;
      Dispose (p);
      Proc^
    end
end;

{$I+}

begin
  InitMisc;
  InitTime;
  Initialize_Std_Files  { Do this very early, so standard files are available for messages etc. }
end.
@


1.4
log
@merge
@
text
@d253 1
a253 1
{ Get information about a file system. }
@


1.3
log
@these files are generated and thusly part of our new gpc vendor branch
(except gpc-lex.c whose diff is no longer needed either now)
@
text
@d16 1
a16 1
  Copyright (C) 1998-2005 Free Software Foundation, Inc.
@


1.2
log
@generate them from the original gpc distribution rather
looks like they don't like our sed
@
text
@d141 2
d147 2
d294 2
a295 1
  MODE_BINARY   = 1 shl 7;
d312 1
@


1.1
log
@regenerate more autogen'd stuff
@
text
@d110 20
a129 20
Real _p_Sin (Real x) attribute (const);
Real _p_Cos (Real x) attribute (const);
Real _p_ArcSin (Real x) attribute (const);
Real _p_ArcCos (Real x) attribute (const);
Real _p_ArcTan (Real x) attribute (const);
Real _p_SqRt (Real x) attribute (const);
Real _p_Ln (Real x) attribute (const);
Real _p_Exp (Real x) attribute (const);
Real _p_Power (Real x; Real y) attribute (const);
Real _p_InternalHypot (Real x; Real y) attribute (const);
Real _p_InternalLn1Plus (Real x) attribute (const);
long Real _p_LongReal_Sin (long Real x) attribute (const);
long Real _p_LongReal_Cos (long Real x) attribute (const);
long Real _p_LongReal_ArcSin (long Real x) attribute (const);
long Real _p_LongReal_ArcCos (long Real x) attribute (const);
long Real _p_LongReal_ArcTan (long Real x) attribute (const);
long Real _p_LongReal_SqRt (long Real x) attribute (const);
long Real _p_LongReal_Ln (long Real x) attribute (const);
long Real _p_LongReal_Exp (long Real x) attribute (const);
long Real _p_LongReal_Power (long Real x; long Real y) attribute (const);
d132 6
a137 6
Real _p_SinH (Real x) attribute (const);
Real _p_CosH (Real x) attribute (const);
Real _p_ArcTan2 (Real y; Real x) attribute (const);
Boolean _p_IsInfinity (long Real x) attribute (const);
Boolean _p_IsNotANumber (long Real x) attribute (const);
void _p_SplitReal (long Real x; CInteger *Exponent; long Real *Mantissa)
d142 3
a144 1
Char _p_UpCase (Char ch) attribute (const);
d147 9
a155 8
Char _p_LoCase (Char ch) attribute (const);
Boolean _p_IsUpCase (Char ch) attribute (const);
Boolean _p_IsLoCase (Char ch) attribute (const);
Boolean _p_IsAlpha (Char ch) attribute (const);
Boolean _p_IsAlphaNum (Char ch) attribute (const);
Boolean _p_IsAlphaNumUnderscore (Char ch) attribute (const);
Boolean _p_IsSpace (Char ch) attribute (const);
Boolean _p_IsPrintable (Char ch) attribute (const);
d160 1
a160 1
void _p_Sleep (CInteger Seconds)
d163 1
a163 1
void _p_SleepMicroSeconds (CInteger MicroSeconds)
d166 1
a166 1
CInteger _p_Alarm (CInteger Seconds)
d169 3
a171 2
void _p_UnixTimeToTime (UnixTimeType Time; CInteger *Year; CInteger *Month; CInteger *Day; CInteger *Hour; CInteger *Minute; CInteger *Second;
                                CInteger *TimeZone; Boolean *DST; CString *TZName1; CString *TZName2)
d174 1
a174 1
UnixTimeType _p_TimeToUnixTime (CInteger Year; CInteger Month; CInteger Day; CInteger Hour; CInteger Minute; CInteger Second)
d177 1
a177 1
UnixTimeType _p_GetUnixTime (CInteger *MicroSecond)
d180 2
a181 1
CInteger _p_GetCPUTime (CInteger *MicroSecond)
d184 2
a185 2
void _p_InitTime
CInteger _p_CFormatTime (UnixTimeType Time; CString Format; CString Buf; CInteger Size)
d192 6
a197 6
Boolean _p_StatusExited (CInteger Status) attribute (const);
CInteger _p_StatusExitCode (CInteger Status) attribute (const);
Boolean _p_StatusSignaled (CInteger Status) attribute (const);
CInteger _p_StatusTermSignal (CInteger Status) attribute (const);
Boolean _p_StatusStopped (CInteger Status) attribute (const);
CInteger _p_StatusStopSignal (CInteger Status) attribute (const);
d200 3
a202 2
Boolean _p_InstallSignalHandler (CInteger Signal; TSignalHandler Handler; Boolean Restart; Boolean UnlessIgnored;
  TSignalHandler *OldHandler; Boolean *OldRestart)
d205 1
a205 1
void _p_BlockSignal (CInteger Signal; Boolean Block)
d208 1
a208 1
Boolean _p_SignalBlocked (CInteger Signal)
d211 3
a213 1
Boolean _p_Kill (CInteger PID; CInteger Signal)
d220 8
a227 1
CInteger _p_WaitPID (CInteger PID; CInteger *WStatus; Boolean Block)
d230 1
a230 1
CInteger _p_ProcessID
d233 1
a233 1
CInteger _p_ProcessGroup
d236 1
a236 1
CInteger _p_UserID (Boolean Effective)
d239 1
a239 1
Boolean _p_SetUserID (CInteger Real; CInteger Effective)
d242 1
a242 1
CInteger _p_GroupID (Boolean Effective)
d245 1
a245 1
Boolean _p_SetGroupID (CInteger Real; CInteger Effective)
d250 4
a253 4
Boolean _p_StatFS (CString Path; StatFSBuffer *Buf)
Pointer _p_CStringOpenDir (CString DirName)
CString _p_CStringReadDir (Pointer Dir)
void _p_CStringCloseDir (Pointer Dir)
d256 3
a258 1
CString _p_ReadLink (protected CString FileName)
d261 1
a261 1
CString _p_CStringRealPath (CString Path)
d264 3
d268 12
a279 12
  fm_SetUID           = 04000;
  fm_SetGID           = 02000;
  fm_Sticky           = 01000;
  fm_UserReadable     = 00400;
  fm_UserWritable     = 00200;
  fm_UserExecutable   = 00100;
  fm_GroupReadable    = 00040;
  fm_GroupWritable    = 00020;
  fm_GroupExecutable  = 00010;
  fm_OthersReadable   = 00004;
  fm_OthersWritable   = 00002;
  fm_OthersExecutable = 00001;
d283 8
a290 8
  MODE_EXEC     = 1 << 0;
  MODE_WRITE    = 1 << 1;
  MODE_READ     = 1 << 2;
  MODE_FILE     = 1 << 3;
  MODE_CREATE   = 1 << 4;
  MODE_EXCL     = 1 << 5;
  MODE_TRUNCATE = 1 << 6;
  MODE_BINARY   = 1 << 7;
d293 1
a293 1
CInteger _p_Access (protected CString FileName; CInteger Request)
d296 20
a315 19
CInteger _p_Stat (protected CString FileName; FileSizeType *Size;
  UnixTimeType *ATime; UnixTimeType *MTime; UnixTimeType *CTime;
  CInteger *User; CInteger *Group; CInteger *Mode; CInteger *Device; CInteger *INode; CInteger *Links;
  Boolean *SymLink; Boolean *Dir; Boolean *Special)
CInteger _p_OpenHandle (protected CString FileName; CInteger Mode)
SignedSizeType _p_ReadHandle (CInteger Handle; Pointer Buffer; SizeType Size)
SignedSizeType _p_WriteHandle (CInteger Handle; Pointer Buffer; SizeType Size)
CInteger _p_CloseHandle (CInteger Handle)
void _p_FlushHandle (CInteger Handle)
CInteger _p_DupHandle (CInteger Src; CInteger Dest)
CInteger _p_CStringRename (protected CString OldName; protected CString NewName)
CInteger _p_CStringUnlink (protected CString FileName)
CInteger _p_CStringChDir (protected CString FileName)
CInteger _p_CStringMkDir (protected CString FileName)
CInteger _p_CStringRmDir (protected CString FileName)
CInteger _p_UMask (CInteger Mask) attribute (ignorable);
CInteger _p_CStringChMod (protected CString FileName; CInteger Mode)
CInteger _p_CStringChOwn (protected CString FileName; CInteger Owner; CInteger Group)
CInteger _p_CStringUTime (protected CString FileName; UnixTimeType AccessTime; UnixTimeType ModificationTime)
d324 5
a328 5
FileSizeType _p_SeekHandle (CInteger Handle; FileSizeType Offset; CInteger Whence)
CInteger _p_TruncateHandle (CInteger Handle; FileSizeType Size)
Boolean _p_LockHandle (CInteger Handle; Boolean WriteLock; Boolean Block)
Boolean _p_UnlockHandle (CInteger Handle)
CInteger _p_SelectHandle (CInteger Count; InternalSelectType *Events; MicroSecondTimeType MicroSeconds)
d337 1
a337 1
Pointer _p_MMapHandle (Pointer Start; SizeType Length; CInteger Access; Boolean Shared; CInteger Handle; FileSizeType Offset)
d340 1
a340 1
CInteger _p_MUnMapHandle (Pointer Start; SizeType Length)
d343 7
a349 1
CString _p_GetTerminalNameHandle (CInteger Handle; Boolean NeedName; CString DefaultName)
d354 3
a356 1
Boolean _p_SetProcessGroup (CInteger Process; CInteger ProcessGroup)
d359 3
a361 1
Boolean _p_SetTerminalProcessGroup (CInteger Handle; CInteger ProcessGroup)
d364 2
a365 1
CInteger _p_GetTerminalProcessGroup (CInteger Handle)
d368 1
a368 1
void _p_SetInputSignals (Boolean Signals)
d371 1
a371 1
Boolean _p_GetInputSignals
d376 2
a377 1
void _p_CStringSystemInfo (CString *SysName; CString *NodeName; CString *Release; CString *Version; CString *Machine; CString *DomainName)
d380 1
a380 1
protected CString _p_CStringExecutablePath (CString Buffer)
d385 1
a385 1
protected CString _p_CStringGetTempDirectory (CString Buffer; CInteger Size)
d388 3
a390 3
CInteger _p_CSystem (CString CmdLine)
PCStrings _p_GetStartEnvironment (PCStrings ValueIfNotFound)
void _p_CStringSetEnv (CString VarName; CString Value; CString NewEnvCString; Boolean UnSet)
d395 3
a397 1
protected CString _p_CStringStrError (CInteger *ErrNo)
d402 10
a411 10
protected CString _p_CStringStrSignal (CInteger Signal)
CInteger _p_FNMatch (protected CString Pattern; protected CString FileName)
void _p_GlobInternal (GlobBuffer *Buf; CString Pattern)
void _p_GlobFreeInternal (GlobBuffer *Buf)
Boolean _p_CGetPwNam (CString UserName; TCPasswordEntry *Entry)
Boolean _p_CGetPwUID (CInteger UID; TCPasswordEntry *Entry)
CInteger _p_CGetPwEnt (PCPasswordEntries *Entries)
void _p_InitMisc
void _p_InitMalloc (void (*WarnProc) (CString Msg))
void _p_ExitProgram (CInteger Status; Boolean AbortFlag) attribute (noreturn);
@


1.1.111.1
log
@Update to gpc-20051116 with the following diffs applied:
Message-ID: <E1EcXkX-0004mi-00@@hera.math.uni.wroc.pl>
Message-ID: <E1Ed6ro-00056J-00@@hera.math.uni.wroc.pl>
@
text
@d110 20
a129 20
function  Sin (x: Real): Real; attribute (const); external name '_p_Sin';
function  Cos (x: Real): Real; attribute (const); external name '_p_Cos';
function  ArcSin (x: Real): Real; attribute (const); external name '_p_ArcSin';
function  ArcCos (x: Real): Real; attribute (const); external name '_p_ArcCos';
function  ArcTan (x: Real): Real; attribute (const); external name '_p_ArcTan';
function  SqRt (x: Real): Real; attribute (const); external name '_p_SqRt';
function  Ln (x: Real): Real; attribute (const); external name '_p_Ln';
function  Exp (x: Real): Real; attribute (const); external name '_p_Exp';
function  Power (x: Real; y: Real): Real; attribute (const); external name '_p_Power';
function  InternalHypot (x: Real; y: Real): Real; attribute (const); external name '_p_InternalHypot';
function  InternalLn1Plus (x: Real): Real; attribute (const); external name '_p_InternalLn1Plus';
function  LongReal_Sin (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_Sin';
function  LongReal_Cos (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_Cos';
function  LongReal_ArcSin (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_ArcSin';
function  LongReal_ArcCos (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_ArcCos';
function  LongReal_ArcTan (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_ArcTan';
function  LongReal_SqRt (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_SqRt';
function  LongReal_Ln (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_Ln';
function  LongReal_Exp (x: LongReal): LongReal; attribute (const); external name '_p_LongReal_Exp';
function  LongReal_Power (x: LongReal; y: LongReal): LongReal; attribute (const); external name '_p_LongReal_Power';
d132 6
a137 6
function  SinH (x: Real): Real; attribute (const); external name '_p_SinH';
function  CosH (x: Real): Real; attribute (const); external name '_p_CosH';
function  ArcTan2 (y: Real; x: Real): Real; attribute (const); external name '_p_ArcTan2';
function  IsInfinity (x: LongReal): Boolean; attribute (const); external name '_p_IsInfinity';
function  IsNotANumber (x: LongReal): Boolean; attribute (const); external name '_p_IsNotANumber';
procedure SplitReal (x: LongReal; var Exponent: CInteger; var Mantissa: LongReal); external name '_p_SplitReal';
a140 2
{@@internal}

d142 1
a142 5
  locale.
  Except in `--borland-pascal' mode, `UpCase' does the same. }
function  UpCase (ch: Char): Char; attribute (const); external name '_p_UpCase';
{@@endinternal}

d145 8
a152 9
  locale. }
function  LoCase (ch: Char): Char; attribute (const); external name '_p_LoCase';
function  IsUpCase (ch: Char): Boolean; attribute (const); external name '_p_IsUpCase';
function  IsLoCase (ch: Char): Boolean; attribute (const); external name '_p_IsLoCase';
function  IsAlpha (ch: Char): Boolean; attribute (const); external name '_p_IsAlpha';
function  IsAlphaNum (ch: Char): Boolean; attribute (const); external name '_p_IsAlphaNum';
function  IsAlphaNumUnderscore (ch: Char): Boolean; attribute (const); external name '_p_IsAlphaNumUnderscore';
function  IsSpace (ch: Char): Boolean; attribute (const); external name '_p_IsSpace';
function  IsPrintable (ch: Char): Boolean; attribute (const); external name '_p_IsPrintable';
d157 1
a157 1
procedure Sleep (Seconds: CInteger); external name '_p_Sleep';
d160 1
a160 1
procedure SleepMicroSeconds (MicroSeconds: CInteger); external name '_p_SleepMicroSeconds';
d163 1
a163 1
function  Alarm (Seconds: CInteger): CInteger; external name '_p_Alarm';
d166 2
a167 3
  All parameters except Time may be Null. }
procedure UnixTimeToTime (Time: UnixTimeType; var Year: CInteger; var Month: CInteger; var Day: CInteger; var Hour: CInteger; var Minute: CInteger; var Second: CInteger;
                                var TimeZone: CInteger; var DST: Boolean; var TZName1: CString; var TZName2: CString); external name '_p_UnixTimeToTime';
d170 1
a170 1
function  TimeToUnixTime (Year: CInteger; Month: CInteger; Day: CInteger; Hour: CInteger; Minute: CInteger; Second: CInteger): UnixTimeType; external name '_p_TimeToUnixTime';
d173 1
a173 1
function  GetUnixTime (var MicroSecond: CInteger): UnixTimeType; external name '_p_GetUnixTime';
d176 1
a176 2
  then. }
function  GetCPUTime (var MicroSecond: CInteger): CInteger; external name '_p_GetCPUTime';
d179 2
a180 2
procedure InitTime; external name '_p_InitTime';
function  CFormatTime (Time: UnixTimeType; Format: CString; Buf: CString; Size: CInteger): CInteger; external name '_p_CFormatTime';
d187 6
a192 6
function  StatusExited (Status: CInteger): Boolean; attribute (const); external name '_p_StatusExited';
function  StatusExitCode (Status: CInteger): CInteger; attribute (const); external name '_p_StatusExitCode';
function  StatusSignaled (Status: CInteger): Boolean; attribute (const); external name '_p_StatusSignaled';
function  StatusTermSignal (Status: CInteger): CInteger; attribute (const); external name '_p_StatusTermSignal';
function  StatusStopped (Status: CInteger): Boolean; attribute (const); external name '_p_StatusStopped';
function  StatusStopSignal (Status: CInteger): CInteger; attribute (const); external name '_p_StatusStopSignal';
d195 2
a196 3
  handler. OldHandler and OldRestart may be Null. }
function  InstallSignalHandler (Signal: CInteger; Handler: TSignalHandler; Restart: Boolean; UnlessIgnored: Boolean;
  var OldHandler: TSignalHandler; var OldRestart: Boolean): Boolean; external name '_p_InstallSignalHandler';
d199 1
a199 1
procedure BlockSignal (Signal: CInteger; Block: Boolean); external name '_p_BlockSignal';
d202 1
a202 1
function  SignalBlocked (Signal: CInteger): Boolean; external name '_p_SignalBlocked';
d205 1
a205 3
  is 0, it doesn't send a signal, but still checks whether it would
  be possible to send a signal to the given process. }
function  Kill (PID: CInteger; Signal: CInteger): Boolean; external name '_p_Kill';
d212 1
a212 8
  if PID = AnyChild) to terminate or be stopped. Returns the PID of
  the process. WStatus will contain the status and can be evaluated
  with StatusExited etc.. If nothing happened, and Block is False,
  the function will return 0, and WStatus will be 0. If an error
  occurred (especially on single tasking systems where WaitPID is
  not possible), the function will return a negative value, and
  WStatus will be 0. }
function  WaitPID (PID: CInteger; var WStatus: CInteger; Block: Boolean): CInteger; external name '_p_WaitPID';
d215 1
a215 1
function  ProcessID: CInteger; external name '_p_ProcessID';
d218 1
a218 1
function  ProcessGroup: CInteger; external name '_p_ProcessGroup';
d221 1
a221 1
function  UserID (Effective: Boolean): CInteger; external name '_p_UserID';
d224 1
a224 1
function  SetUserID (Real: CInteger; Effective: CInteger): Boolean; external name '_p_SetUserID';
d227 1
a227 1
function  GroupID (Effective: Boolean): CInteger; external name '_p_GroupID';
d230 1
a230 1
function  SetGroupID (Real: CInteger; Effective: CInteger): Boolean; external name '_p_SetGroupID';
d235 4
a238 4
function  StatFS (Path: CString; var Buf: StatFSBuffer): Boolean; external name '_p_StatFS';
function  CStringOpenDir (DirName: CString): Pointer; external name '_p_CStringOpenDir';
function  CStringReadDir (Dir: Pointer): CString; external name '_p_CStringReadDir';
procedure CStringCloseDir (Dir: Pointer); external name '_p_CStringCloseDir';
d241 1
a241 3
  from the heap. Returns nil if it is no symlink or the function
  is not supported. }
function  ReadLink (FileName: CString): CString; external name '_p_ReadLink';
d244 1
a244 1
function  CStringRealPath (Path: CString): CString; external name '_p_CStringRealPath';
a246 3
  CStringChMod and Stat. The values below are valid for all OSs
  (as far as supported). If the OS uses different values, they're
  converted internally. }
d248 12
a259 12
  fm_SetUID           = 8#4000;
  fm_SetGID           = 8#2000;
  fm_Sticky           = 8#1000;
  fm_UserReadable     = 8#400;
  fm_UserWritable     = 8#200;
  fm_UserExecutable   = 8#100;
  fm_GroupReadable    = 8#40;
  fm_GroupWritable    = 8#20;
  fm_GroupExecutable  = 8#10;
  fm_OthersReadable   = 8#4;
  fm_OthersWritable   = 8#2;
  fm_OthersExecutable = 8#1;
d263 8
a270 9
  MODE_EXEC     = 1 shl 0;
  MODE_WRITE    = 1 shl 1;
  MODE_READ     = 1 shl 2;
  MODE_FILE     = 1 shl 3;
  MODE_CREATE   = 1 shl 4;
  MODE_EXCL     = 1 shl 5;
  MODE_TRUNCATE = 1 shl 6;
  MODE_APPEND   = 1 shl 7;
  MODE_BINARY   = 1 shl 8;
d273 1
a273 1
function  Access (FileName: CString; Request: CInteger): CInteger; external name '_p_Access';
d276 19
a294 21
  be Null. }
function  Stat (FileName: CString; var Size: FileSizeType;
  var ATime: UnixTimeType; var MTime: UnixTimeType; var CTime: UnixTimeType;
  var User: CInteger; var Group: CInteger; var Mode: CInteger; var Device: CInteger; var INode: CInteger; var Links: CInteger;
  var SymLink: Boolean; var Dir: Boolean; var Special: Boolean): CInteger; external name '_p_Stat';
function  OpenHandle (FileName: CString; Mode: CInteger): CInteger; external name '_p_OpenHandle';
function  ReadHandle (Handle: CInteger; Buffer: Pointer; Size: SizeType): SignedSizeType; external name '_p_ReadHandle';
function  WriteHandle (Handle: CInteger; Buffer: Pointer; Size: SizeType): SignedSizeType; external name '_p_WriteHandle';
function  CloseHandle (Handle: CInteger): CInteger; external name '_p_CloseHandle';
procedure FlushHandle (Handle: CInteger); external name '_p_FlushHandle';
function  DupHandle (Src: CInteger; Dest: CInteger): CInteger; external name '_p_DupHandle';
function  SetFileMode (Handle: CInteger; Mode: CInteger; On: Boolean): CInteger; attribute (ignorable); external name '_p_SetFileMode';
function  CStringRename (OldName: CString; NewName: CString): CInteger; external name '_p_CStringRename';
function  CStringUnlink (FileName: CString): CInteger; external name '_p_CStringUnlink';
function  CStringChDir (FileName: CString): CInteger; external name '_p_CStringChDir';
function  CStringMkDir (FileName: CString): CInteger; external name '_p_CStringMkDir';
function  CStringRmDir (FileName: CString): CInteger; external name '_p_CStringRmDir';
function  UMask (Mask: CInteger): CInteger; attribute (ignorable); external name '_p_UMask';
function  CStringChMod (FileName: CString; Mode: CInteger): CInteger; external name '_p_CStringChMod';
function  CStringChOwn (FileName: CString; Owner: CInteger; Group: CInteger): CInteger; external name '_p_CStringChOwn';
function  CStringUTime (FileName: CString; AccessTime: UnixTimeType; ModificationTime: UnixTimeType): CInteger; external name '_p_CStringUTime';
d303 5
a307 5
function  SeekHandle (Handle: CInteger; Offset: FileSizeType; Whence: CInteger): FileSizeType; external name '_p_SeekHandle';
function  TruncateHandle (Handle: CInteger; Size: FileSizeType): CInteger; external name '_p_TruncateHandle';
function  LockHandle (Handle: CInteger; WriteLock: Boolean; Block: Boolean): Boolean; external name '_p_LockHandle';
function  UnlockHandle (Handle: CInteger): Boolean; external name '_p_UnlockHandle';
function  SelectHandle (Count: CInteger; var Events: InternalSelectType; MicroSeconds: MicroSecondTimeType): CInteger; external name '_p_SelectHandle';
d316 1
a316 1
function  MMapHandle (Start: Pointer; Length: SizeType; Access: CInteger; Shared: Boolean; Handle: CInteger; Offset: FileSizeType): Pointer; external name '_p_MMapHandle';
d319 1
a319 1
function  MUnMapHandle (Start: Pointer; Length: SizeType): CInteger; external name '_p_MUnMapHandle';
d322 1
a322 7
  Handle. Returns nil if (and only if) Handle is not open or not
  connected to a terminal. If NeedName is False, it doesn't bother
  to search for the real name and just returns DefaultName if it
  is a terminal and nil otherwise. DefaultName is also returned if
  NeedName is True, Handle is connected to a terminal, but the
  system does not provide information about the real file name. }
function  GetTerminalNameHandle (Handle: CInteger; NeedName: Boolean; DefaultName: CString): CString; external name '_p_GetTerminalNameHandle';
d327 1
a327 3
  is 0) to ProcessGroup (or its PID if ProcessGroup is 0). Returns
  True if successful. }
function  SetProcessGroup (Process: CInteger; ProcessGroup: CInteger): Boolean; external name '_p_SetProcessGroup';
d330 1
a330 3
  handle) to ProcessGroup. ProcessGroup must be the ID of a process
  group in the same session. Returns True if successful. }
function  SetTerminalProcessGroup (Handle: CInteger; ProcessGroup: CInteger): Boolean; external name '_p_SetTerminalProcessGroup';
d333 1
a333 2
  file handle), or -1 on error. }
function  GetTerminalProcessGroup (Handle: CInteger): CInteger; external name '_p_GetTerminalProcessGroup';
d336 1
a336 1
procedure SetInputSignals (Signals: Boolean); external name '_p_SetInputSignals';
d339 1
a339 1
function  GetInputSignals: Boolean; external name '_p_GetInputSignals';
d344 1
a344 2
  be set to nil. }
procedure CStringSystemInfo (var SysName: CString; var NodeName: CString; var Release: CString; var Version: CString; var Machine: CString; var DomainName: CString); external name '_p_CStringSystemInfo';
d347 1
a347 1
function  CStringExecutablePath (Buffer: CString): CString; external name '_p_CStringExecutablePath';
d352 1
a352 1
function  CStringGetTempDirectory (Buffer: CString; Size: CInteger): CString; external name '_p_CStringGetTempDirectory';
d355 3
a357 3
function  CSystem (CmdLine: CString): CInteger; external name '_p_CSystem';
function  GetStartEnvironment (ValueIfNotFound: PCStrings): PCStrings; external name '_p_GetStartEnvironment';
procedure CStringSetEnv (VarName: CString; Value: CString; NewEnvCString: CString; UnSet: Boolean); external name '_p_CStringSetEnv';
d362 1
a362 3
  for this error. May return nil if not supported! ErrNo may be
  Null (then only the description is returned). }
function  CStringStrError (var ErrNo: CInteger): CString; external name '_p_CStringStrError';
d367 10
a376 10
function  CStringStrSignal (Signal: CInteger): CString; external name '_p_CStringStrSignal';
function  FNMatch (Pattern: CString; FileName: CString): CInteger; external name '_p_FNMatch';
procedure GlobInternal (var Buf: GlobBuffer; Pattern: CString); external name '_p_GlobInternal';
procedure GlobFreeInternal (var Buf: GlobBuffer); external name '_p_GlobFreeInternal';
function  CGetPwNam (UserName: CString; var Entry: TCPasswordEntry): Boolean; external name '_p_CGetPwNam';
function  CGetPwUID (UID: CInteger; var Entry: TCPasswordEntry): Boolean; external name '_p_CGetPwUID';
function  CGetPwEnt (var Entries: PCPasswordEntries): CInteger; external name '_p_CGetPwEnt';
procedure InitMisc; external name '_p_InitMisc';
procedure InitMalloc (procedure WarnProc (Msg: CString)); external name '_p_InitMalloc';
procedure ExitProgram (Status: CInteger; AbortFlag: Boolean); attribute (noreturn); external name '_p_ExitProgram';
@


1.1.111.2
log
@Update gcc/p/ to gpc-20060325
@
text
@d16 1
a16 1
  Copyright (C) 1998-2006 Free Software Foundation, Inc.
@


