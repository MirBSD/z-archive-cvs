head	1.5;
access;
symbols
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.4
	gpc-20060325:1.1.111.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	gpc-20051116:1.1.111.1
	gpc:1.1.111;
locks; strict;
comment	@ * @;


1.5
date	2017.04.03.00.30.08;	author tg;	state Exp;
branches;
next	1.4;
commitid	10058E197A9233A0A72;

1.4
date	2006.03.31.03.16.51;	author tg;	state Exp;
branches;
next	1.3;
commitid	100442C9F0D2D8D21E8;

1.3
date	2006.03.27.11.58.59;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004427D394409B84F7;

1.2
date	2005.11.20.13.45.39;	author tg;	state Exp;
branches;
next	1.1;
commitid	168043807e0039e4;

1.1
date	2005.03.27.23.28.06;	author tg;	state Exp;
branches
	1.1.111.1;
next	;

1.1.111.1
date	2005.11.20.12.18.42;	author tg;	state Exp;
branches;
next	1.1.111.2;
commitid	3462438069a7b269;

1.1.111.2
date	2006.03.27.11.51.06;	author tg;	state Exp;
branches;
next	;
commitid	1004427D1B80A0FD957;


desc
@@


1.5
log
@regen
@
text
@/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison GLR parsers in C

   Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C GLR parser skeleton written by Paul Hilfinger.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "glr.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 1






#include "parse.h"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

/* Default (constant) value used for initialization for null
   right-hand sides.  Unlike the standard yacc.c template,
   here we set the default value of $$ to a zeroed-out value.
   Since the default value is undefined, this behavior is
   technically correct.  */
static YYSTYPE yyval_default;

/* Copy the second part of user declarations.  */
#line 116 "parse.y"

static int check_decl_order (int, int);

extern int main_yyparse (void);
#define yyparse main_yyparse

static void locations (YYLTYPE *, const union yyGLRStackItem *, int);


/* Line 234 of glr.c.  */
#line 97 "parse.c"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#ifndef YYFREE
# define YYFREE free
#endif
#ifndef YYMALLOC
# define YYMALLOC malloc
#endif
#ifndef YYREALLOC
# define YYREALLOC realloc
#endif

#define YYSIZEMAX ((size_t) -1)

#ifdef __cplusplus
   typedef bool yybool;
#else
   typedef unsigned char yybool;
#endif
#define yytrue 1
#define yyfalse 0

#ifndef YYSETJMP
# include <setjmp.h>
# define YYJMP_BUF jmp_buf
# define YYSETJMP(env) setjmp (env)
# define YYLONGJMP(env, val) longjmp (env, val)
#endif

/*-----------------.
| GCC extensions.  |
`-----------------*/

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5) || __STRICT_ANSI__)
#  define __attribute__(Spec) /* empty */
# endif
#endif

#define YYOPTIONAL_LOC(Name) Name

#ifndef YYASSERT
# define YYASSERT(condition) ((void) ((condition) || (abort (), 0)))
#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  70
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   8810

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  139
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  294
/* YYNRULES -- Number of rules.  */
#define YYNRULES  797
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1330
/* YYMAXRHS -- Maximum number of symbols on right-hand side of rule.  */
#define YYMAXRHS 12
/* YYMAXLEFT -- Maximum number of symbols to the left of a handle
   accessed by $0, $-1, etc., in any rule.  */
#define YYMAXLEFT 0

/* YYTRANSLATE(X) -- Bison symbol number corresponding to X.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   374

#define YYTRANSLATE(YYX)						\
  ((YYX <= 0) ? YYEOF :							\
   (unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   138,     2,
     121,   122,   132,   130,   123,   131,   129,   133,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   124,   120,
     134,   135,   136,     2,   127,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   125,     2,   126,   128,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   137,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     4,     6,     7,     8,    17,    19,    20,
      21,    34,    36,    38,    39,    43,    44,    45,    55,    56,
      63,    64,    65,    74,    75,    83,    84,    92,    93,    94,
     101,   102,   107,   108,   112,   114,   115,   120,   122,   123,
     127,   129,   130,   133,   135,   137,   138,   145,   146,   153,
     154,   159,   164,   168,   170,   174,   176,   179,   181,   185,
     187,   191,   195,   199,   203,   205,   210,   212,   214,   218,
     220,   224,   228,   231,   235,   239,   240,   243,   244,   248,
     250,   254,   258,   263,   265,   267,   269,   273,   278,   280,
     284,   286,   290,   294,   297,   299,   302,   303,   306,   308,
     310,   311,   314,   315,   318,   322,   324,   325,   328,   330,
     332,   334,   335,   338,   340,   341,   344,   346,   350,   352,
     356,   360,   363,   365,   368,   369,   372,   375,   376,   381,
     384,   386,   390,   392,   396,   400,   403,   405,   407,   409,
     412,   414,   419,   428,   430,   433,   434,   443,   445,   447,
     451,   453,   456,   457,   463,   465,   469,   472,   474,   476,
     477,   481,   484,   486,   490,   492,   496,   500,   503,   509,
     510,   511,   519,   520,   525,   526,   527,   538,   539,   540,
     551,   552,   563,   569,   576,   583,   587,   591,   593,   597,
     601,   605,   608,   612,   614,   617,   618,   621,   623,   626,
     628,   631,   634,   636,   638,   640,   642,   644,   647,   651,
     655,   657,   661,   663,   667,   671,   678,   680,   685,   689,
     690,   695,   699,   701,   703,   707,   709,   713,   717,   720,
     722,   724,   726,   727,   730,   738,   740,   743,   745,   749,
     753,   757,   760,   765,   766,   772,   776,   780,   782,   784,
     786,   790,   794,   796,   799,   805,   807,   809,   811,   815,
     819,   821,   825,   829,   833,   836,   840,   845,   848,   851,
     854,   858,   860,   862,   864,   867,   868,   873,   875,   879,
     883,   885,   887,   889,   892,   894,   896,   899,   903,   908,
     912,   913,   920,   924,   928,   930,   933,   935,   937,   939,
     941,   943,   946,   949,   951,   953,   955,   959,   963,   964,
     965,   975,   977,   979,   983,   984,   991,   992,   999,  1005,
    1006,  1015,  1021,  1027,  1029,  1031,  1035,  1038,  1042,  1043,
    1050,  1057,  1064,  1068,  1071,  1074,  1076,  1080,  1084,  1089,
    1091,  1095,  1097,  1099,  1101,  1105,  1110,  1117,  1119,  1121,
    1123,  1125,  1127,  1130,  1132,  1133,  1136,  1138,  1141,  1145,
    1149,  1155,  1159,  1161,  1165,  1169,  1173,  1177,  1182,  1187,
    1193,  1197,  1201,  1202,  1209,  1211,  1214,  1216,  1218,  1221,
    1223,  1224,  1226,  1228,  1229,  1232,  1234,  1236,  1238,  1242,
    1244,  1246,  1253,  1261,  1263,  1267,  1271,  1275,  1281,  1285,
    1287,  1289,  1295,  1297,  1301,  1302,  1304,  1305,  1306,  1312,
    1314,  1316,  1317,  1318,  1321,  1323,  1326,  1328,  1330,  1332,
    1333,  1338,  1340,  1343,  1345,  1350,  1355,  1362,  1364,  1371,
    1373,  1374,  1381,  1382,  1383,  1392,  1393,  1394,  1395,  1405,
    1406,  1407,  1416,  1417,  1429,  1430,  1440,  1443,  1446,  1448,
    1452,  1454,  1458,  1462,  1464,  1468,  1469,  1477,  1478,  1483,
    1485,  1487,  1488,  1491,  1493,  1497,  1499,  1503,  1507,  1508,
    1515,  1517,  1521,  1525,  1529,  1532,  1534,  1538,  1542,  1546,
    1548,  1550,  1552,  1554,  1557,  1559,  1561,  1564,  1566,  1571,
    1576,  1583,  1591,  1597,  1605,  1615,  1627,  1628,  1630,  1632,
    1634,  1636,  1640,  1645,  1647,  1651,  1653,  1655,  1659,  1661,
    1664,  1668,  1672,  1673,  1678,  1680,  1684,  1688,  1689,  1694,
    1696,  1700,  1704,  1708,  1712,  1716,  1719,  1722,  1724,  1726,
    1728,  1730,  1732,  1734,  1736,  1738,  1740,  1742,  1744,  1746,
    1749,  1751,  1753,  1756,  1758,  1760,  1762,  1764,  1766,  1768,
    1770,  1772,  1774,  1776,  1778,  1780,  1782,  1784,  1786,  1788,
    1790,  1792,  1794,  1796,  1798,  1802,  1805,  1807,  1809,  1811,
    1815,  1819,  1822,  1827,  1832,  1836,  1842,  1845,  1850,  1855,
    1861,  1866,  1871,  1878,  1886,  1888,  1893,  1898,  1899,  1901,
    1905,  1907,  1911,  1913,  1917,  1921,  1925,  1927,  1931,  1937,
    1939,  1942,  1946,  1950,  1952,  1954,  1956,  1960,  1964,  1966,
    1973,  1978,  1983,  1987,  1989,  1992,  1996,  2000,  2004,  2006,
    2010,  2014,  2016,  2018,  2022,  2024,  2026,  2030,  2032,  2036,
    2040,  2042,  2044,  2048,  2051,  2055,  2057,  2061,  2065,  2069,
    2071,  2075,  2077,  2079,  2081,  2083,  2085,  2087,  2089,  2091,
    2093,  2095,  2097,  2099,  2101,  2103,  2105,  2107,  2109,  2111,
    2113,  2115,  2117,  2119,  2121,  2123,  2125,  2128,  2130,  2132,
    2134,  2137,  2139,  2141,  2143,  2145,  2147,  2149,  2151,  2153,
    2155,  2157,  2159,  2161,  2163,  2165,  2167,  2169,  2171,  2173,
    2175,  2177,  2179,  2181,  2183,  2185,  2187,  2189,  2191,  2193,
    2195,  2197,  2199,  2201,  2203,  2205,  2207,  2209,  2211,  2213,
    2215,  2217,  2219,  2221,  2223,  2225,  2227,  2231,  2235,  2239,
    2242,  2244,  2248,  2250,  2254,  2256,  2258,  2260,  2262,  2264,
    2266,  2268,  2270,  2272,  2274,  2276,  2278,  2280,  2282,  2284,
    2286,  2288,  2290,  2292,  2294,  2296,  2298,  2300,  2302,  2304,
    2306,  2308,  2310,  2312,  2314,  2316,  2318,  2320,  2322,  2324,
    2326,  2328,  2330,  2332,  2334,  2336,  2338,  2340,  2342,  2344,
    2346,  2348,  2350,  2352,  2354,  2356,  2358,  2360,  2362,  2364,
    2366,  2368,  2369,  2370,  2371,  2373,  2375,  2377,  2378,  2380,
    2382,  2384,  2386,  2388,  2390,  2392,  2394,  2395
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const short int yyrhs[] =
{
     140,     0,    -1,    -1,   141,    -1,    -1,    -1,   173,   176,
     142,   183,   193,   143,   315,   430,    -1,   144,    -1,    -1,
      -1,    71,   416,   120,   176,    97,   145,   183,   198,   146,
     161,    15,   430,    -1,   151,    -1,   156,    -1,    -1,   151,
     147,   156,    -1,    -1,    -1,   426,   416,   174,   148,   154,
     120,   149,   158,   430,    -1,    -1,   426,   416,   174,   150,
     158,   430,    -1,    -1,    -1,   426,   416,    97,   152,   174,
     153,   154,   430,    -1,    -1,    97,   155,   177,   120,   183,
     198,    15,    -1,    -1,   426,   416,    55,   120,   157,   158,
     430,    -1,    -1,    -1,   159,   185,   200,   160,   168,    15,
      -1,    -1,    55,   185,   193,   162,    -1,    -1,    10,   163,
     167,    -1,   165,    -1,    -1,   165,    53,   164,   316,    -1,
     168,    -1,    -1,    58,   166,   167,    -1,   316,    -1,    -1,
     169,   171,    -1,   169,    -1,   171,    -1,    -1,    30,    10,
      13,   170,   320,   120,    -1,    -1,    30,    15,    13,   172,
     320,   120,    -1,    -1,    31,   416,   175,   120,    -1,    31,
       1,   175,   120,    -1,   175,   120,   176,    -1,   431,    -1,
     121,   412,   122,    -1,   431,    -1,   290,   120,    -1,   178,
      -1,   177,   120,   178,    -1,     1,    -1,   177,     1,   178,
      -1,   177,   120,     1,    -1,   416,   429,   179,    -1,   121,
     181,   122,    -1,   180,    -1,   180,   121,   181,   122,    -1,
      97,    -1,   182,    -1,   181,   123,   182,    -1,     1,    -1,
     181,     1,   182,    -1,   181,   123,     1,    -1,   415,   192,
      -1,   415,   102,   415,    -1,   425,   415,   192,    -1,    -1,
     184,   185,    -1,    -1,    56,   186,   120,    -1,   187,    -1,
     186,   120,   187,    -1,   186,     1,   187,    -1,   416,   188,
     189,   206,    -1,   431,    -1,    67,    -1,   431,    -1,   121,
     190,   122,    -1,    62,   121,   190,   122,    -1,   191,    -1,
     190,   123,   191,    -1,     1,    -1,   190,     1,   191,    -1,
     190,   123,     1,    -1,   416,   192,    -1,   431,    -1,   101,
     416,    -1,    -1,   193,   194,    -1,   203,    -1,   196,    -1,
      -1,   195,   196,    -1,    -1,   197,   207,    -1,    22,   211,
     120,    -1,   276,    -1,    -1,   198,   199,    -1,   203,    -1,
     207,    -1,   275,    -1,    -1,   200,   201,    -1,   203,    -1,
      -1,   202,   207,    -1,   276,    -1,     6,   204,   120,    -1,
     205,    -1,   204,   123,   205,    -1,   204,     1,   205,    -1,
     416,   206,    -1,   431,    -1,    21,   360,    -1,    -1,   208,
     209,    -1,    48,   213,    -1,    -1,    36,   210,   225,   120,
      -1,    38,   215,    -1,   212,    -1,   211,   123,   212,    -1,
       1,    -1,   211,     1,   212,    -1,   211,   123,     1,    -1,
     211,     1,    -1,   411,    -1,   416,    -1,   214,    -1,   213,
     214,    -1,     1,    -1,   416,   429,   359,   120,    -1,   416,
     423,   124,   238,   104,   390,   221,   120,    -1,   216,    -1,
     215,   216,    -1,    -1,   414,   423,   124,   238,   217,   223,
     218,   120,    -1,     1,    -1,   431,    -1,   218,   120,   219,
      -1,   222,    -1,    51,   368,    -1,    -1,    51,   368,    97,
     220,   360,    -1,   431,    -1,   221,   120,   222,    -1,    75,
     360,    -1,   290,    -1,   273,    -1,    -1,    41,   224,   360,
      -1,    41,     1,    -1,   226,    -1,   225,   120,   226,    -1,
       1,    -1,   225,     1,   226,    -1,   225,   120,     1,    -1,
     225,     1,    -1,   416,   423,   429,   238,   273,    -1,    -1,
      -1,   416,   227,   235,   429,   228,   238,   273,    -1,    -1,
     416,   229,   235,     1,    -1,    -1,    -1,   416,   423,   429,
     230,   268,    61,   267,   231,   269,    15,    -1,    -1,    -1,
     416,   423,   429,   232,   268,    78,   267,   233,   269,    15,
      -1,    -1,   416,   423,   429,    81,    26,   374,   267,   234,
     269,    15,    -1,   416,   423,   429,    78,   267,    -1,   416,
     423,   429,    78,   102,    15,    -1,   416,   423,   429,    61,
     120,    54,    -1,   121,   236,   122,    -1,   121,     1,   122,
      -1,   237,    -1,   236,   120,   237,    -1,   236,     1,   237,
      -1,   236,   120,     1,    -1,   236,     1,    -1,   412,   124,
     374,    -1,   239,    -1,   238,   290,    -1,    -1,   240,   241,
      -1,   242,    -1,    47,   242,    -1,   373,    -1,    68,   373,
      -1,   374,   243,    -1,   308,    -1,   259,    -1,   263,    -1,
     265,    -1,   245,    -1,   424,   245,    -1,   121,   244,   122,
      -1,   125,   360,   126,    -1,   360,    -1,   244,   123,   360,
      -1,     1,    -1,   244,     1,   360,    -1,   244,   123,     1,
      -1,     9,   125,   248,   126,    26,   239,    -1,   383,    -1,
      16,   247,    26,   239,    -1,    34,    26,   239,    -1,    -1,
      32,   246,   250,    15,    -1,    32,     1,    15,    -1,   432,
      -1,   431,    -1,   125,   249,   126,    -1,   249,    -1,   248,
     123,   249,    -1,   248,     1,   249,    -1,   248,     1,    -1,
       1,    -1,   259,    -1,   374,    -1,    -1,   252,   427,    -1,
     251,    11,   255,    26,   256,   427,   254,    -1,   431,    -1,
     252,   120,    -1,   253,    -1,   252,   120,   253,    -1,   252,
       1,   253,    -1,   252,   120,     1,    -1,   252,     1,    -1,
     412,   124,   239,   273,    -1,    -1,   343,   121,   250,   122,
     427,    -1,   416,   124,   374,    -1,   416,   124,   258,    -1,
     419,    -1,   258,    -1,   257,    -1,   256,   120,   257,    -1,
     256,     1,   257,    -1,     1,    -1,   256,     1,    -1,   348,
     124,   121,   250,   122,    -1,   259,    -1,   260,    -1,   262,
      -1,   121,   261,   122,    -1,   121,     1,   122,    -1,   416,
      -1,   261,   123,   416,    -1,   261,     1,   416,    -1,   261,
     123,     1,    -1,   261,     1,    -1,   360,   102,   360,    -1,
     424,   360,   102,   360,    -1,   127,   264,    -1,   128,   264,
      -1,    98,   264,    -1,   428,    48,   264,    -1,   416,    -1,
     265,    -1,   383,    -1,    29,   296,    -1,    -1,    18,   296,
     266,   302,    -1,   431,    -1,   121,   374,   122,    -1,   121,
       1,   122,    -1,   431,    -1,    42,    -1,   270,    -1,   270,
     271,    -1,     1,    -1,   431,    -1,   270,    97,    -1,   270,
     271,   120,    -1,   412,   124,   239,   273,    -1,    29,   416,
     296,    -1,    -1,    18,   416,   296,   303,   272,   302,    -1,
      49,   416,   296,    -1,    50,   416,   296,    -1,    73,    -1,
      73,   360,    -1,    79,    -1,    80,    -1,    42,    -1,   290,
      -1,   431,    -1,   274,   390,    -1,   274,     1,    -1,    72,
      -1,   100,    -1,   104,    -1,   280,   120,   285,    -1,   279,
     120,   286,    -1,    -1,    -1,   279,   120,   289,   277,   185,
     195,   278,   315,   120,    -1,   280,    -1,   283,    -1,    29,
     416,   296,    -1,    -1,    18,   416,   296,   303,   281,   302,
      -1,    -1,    63,   294,   296,   295,   282,   302,    -1,    29,
     416,   129,   416,   296,    -1,    -1,    18,   416,   129,   416,
     296,   303,   284,   302,    -1,    49,   416,   129,   416,   296,
      -1,    50,   416,   129,   416,   296,    -1,   289,    -1,   286,
      -1,   289,   287,   289,    -1,    54,   120,    -1,    51,   368,
     120,    -1,    -1,    51,   368,    97,   288,   360,   120,    -1,
      51,   368,   120,    75,   360,   120,    -1,    75,   360,   120,
      51,   368,   120,    -1,    75,   360,   120,    -1,    76,   120,
      -1,    77,   120,    -1,   431,    -1,   289,   290,   120,    -1,
     289,   293,   120,    -1,    46,   121,   291,   122,    -1,   292,
      -1,   291,   123,   292,    -1,   431,    -1,    48,    -1,   416,
      -1,   416,   429,   360,    -1,   416,   121,   360,   122,    -1,
     416,   121,   419,   123,   360,   122,    -1,    52,    -1,    60,
      -1,   416,    -1,   407,    -1,   416,    -1,   429,   416,    -1,
     431,    -1,    -1,   297,   298,    -1,   431,    -1,   121,   122,
      -1,   121,   299,   122,    -1,   121,   103,   122,    -1,   121,
     299,   120,   103,   122,    -1,   121,     1,   122,    -1,   300,
      -1,   299,   120,   300,    -1,   299,     1,   300,    -1,   299,
     120,     1,    -1,   412,   124,   307,    -1,   425,   412,   124,
     307,    -1,   305,    38,   412,   306,    -1,    48,    38,   412,
     124,   307,    -1,    48,   412,   306,    -1,    29,   416,   296,
      -1,    -1,    18,   416,   296,   303,   301,   302,    -1,   321,
      -1,   124,   373,    -1,   432,    -1,   431,    -1,   304,   416,
      -1,   429,    -1,    -1,   431,    -1,   425,    -1,    -1,   124,
     307,    -1,   309,    -1,   308,    -1,   313,    -1,    36,    26,
     360,    -1,   314,    -1,   310,    -1,     9,   125,   311,   126,
      26,   309,    -1,   424,     9,   125,   312,   126,    26,   374,
      -1,   312,    -1,   311,   120,   312,    -1,   311,     1,   312,
      -1,   311,   120,     1,    -1,   416,   102,   416,   124,   374,
      -1,     9,    26,   314,    -1,   374,    -1,   383,    -1,    10,
     421,   316,   422,    15,    -1,   317,    -1,   316,   120,   317,
      -1,    -1,   322,    -1,    -1,    -1,    38,   318,   216,   319,
     317,    -1,   321,    -1,   322,    -1,    -1,    -1,   323,   324,
      -1,   337,    -1,   337,   325,    -1,   325,    -1,   315,    -1,
     351,    -1,    -1,   351,   326,   352,   360,    -1,    88,    -1,
      88,   360,    -1,    85,    -1,    85,   121,    31,   122,    -1,
      85,   121,   419,   122,    -1,    85,   121,   419,   129,   419,
     122,    -1,   353,    -1,    40,   338,    13,   421,   320,   422,
      -1,   340,    -1,    -1,   340,     7,   327,   421,   320,   422,
      -1,    -1,    -1,    11,   360,    26,   328,   344,   329,   342,
      15,    -1,    -1,    -1,    -1,    33,   330,   421,   316,    37,
     331,   360,   332,   422,    -1,    -1,    -1,    39,   333,   421,
     360,   334,    13,   320,   422,    -1,    -1,    17,   376,   352,
     360,   350,   360,   335,    13,   421,   320,   422,    -1,    -1,
      17,   376,    21,   360,   336,    13,   421,   320,   422,    -1,
      19,   410,    -1,   410,   124,    -1,   339,    -1,   338,   123,
     339,    -1,     1,    -1,   338,     1,   339,    -1,   338,   123,
       1,    -1,   360,    -1,   360,   124,   416,    -1,    -1,    20,
     360,    35,   341,   421,   320,   422,    -1,    -1,   343,   421,
     316,   422,    -1,     7,    -1,    64,    -1,    -1,   345,   427,
      -1,   346,    -1,   345,   120,   346,    -1,     1,    -1,   345,
       1,   346,    -1,   345,   120,     1,    -1,    -1,   348,   124,
     347,   421,   320,   422,    -1,   349,    -1,   348,   123,   349,
      -1,   348,   123,     1,    -1,   348,     1,   349,    -1,   348,
       1,    -1,   359,    -1,   359,   102,   359,    -1,   359,     1,
     359,    -1,   359,   102,     1,    -1,    30,    -1,    14,    -1,
       1,    -1,   376,    -1,   127,   376,    -1,   100,    -1,   429,
      -1,   406,   378,    -1,    95,    -1,    95,   121,   381,   122,
      -1,    84,   121,   360,   122,    -1,    84,   121,   360,   123,
     380,   122,    -1,    84,   121,   360,   123,   416,   378,   122,
      -1,    45,   354,   121,   370,   122,    -1,    45,   354,   121,
     370,   124,   355,   122,    -1,    45,   354,   121,   370,   124,
     355,   124,   355,   122,    -1,    45,   354,   121,   370,   124,
     355,   124,   355,   124,   358,   122,    -1,    -1,    97,    -1,
     431,    -1,   356,    -1,   357,    -1,   356,   123,   357,    -1,
     369,   121,   360,   122,    -1,   369,    -1,   358,   123,   369,
      -1,   360,    -1,   361,    -1,   361,   401,   361,    -1,   363,
      -1,   399,   363,    -1,   361,   402,   363,    -1,   361,   408,
     363,    -1,    -1,   361,   404,   362,   363,    -1,   365,    -1,
     363,   403,   365,    -1,   363,   409,   365,    -1,    -1,   363,
     405,   364,   365,    -1,   366,    -1,   365,   419,   366,    -1,
     366,    66,   366,    -1,   366,   109,   366,    -1,   365,    59,
     374,    -1,   365,    44,   374,    -1,   400,   366,    -1,   127,
     366,    -1,   369,    -1,   367,    -1,    24,    -1,   396,    -1,
     376,    -1,    90,    -1,    91,    -1,    93,    -1,   431,    -1,
     369,    -1,   370,    -1,   371,    -1,   370,   371,    -1,    92,
      -1,    98,    -1,   128,   372,    -1,    99,    -1,   123,    -1,
     129,    -1,   124,    -1,   120,    -1,   121,    -1,   122,    -1,
     125,    -1,   126,    -1,   130,    -1,   131,    -1,   132,    -1,
     133,    -1,   134,    -1,   135,    -1,   136,    -1,   127,    -1,
     128,    -1,   374,    -1,   375,    -1,   419,    -1,   419,   129,
     419,    -1,    96,   378,    -1,   377,    -1,   418,    -1,   383,
      -1,   121,   360,   122,    -1,   376,   129,   416,    -1,   376,
     428,    -1,   376,   125,   394,   126,    -1,   376,   125,   384,
     126,    -1,   377,   121,   122,    -1,   377,   121,   379,   380,
     122,    -1,    57,   416,    -1,    86,   121,   381,   122,    -1,
      89,   121,   381,   122,    -1,    83,   121,   379,   360,   122,
      -1,    82,   121,   376,   122,    -1,    87,   121,   376,   122,
      -1,    87,   121,   376,   123,   380,   122,    -1,    87,   121,
     376,   123,   416,   378,   122,    -1,   431,    -1,   121,   379,
     380,   122,    -1,   121,   379,   376,   122,    -1,    -1,   360,
      -1,   380,   123,   360,    -1,     1,    -1,   380,   123,     1,
      -1,   382,    -1,   381,   123,   382,    -1,   381,     1,   382,
      -1,   381,   123,     1,    -1,   360,    -1,   360,   124,   360,
      -1,   360,   124,   360,   124,   360,    -1,    16,    -1,   385,
     427,    -1,   385,   120,   387,    -1,   385,   427,   389,    -1,
     387,    -1,   389,    -1,   386,    -1,   385,   120,   386,    -1,
     394,   124,   390,    -1,   390,    -1,    11,   416,   124,   360,
      26,   388,    -1,    11,   360,    26,   388,    -1,   125,   384,
     126,   427,    -1,    64,   390,   427,    -1,   360,    -1,   121,
     122,    -1,   121,   391,   122,    -1,   125,   384,   126,    -1,
     125,     1,   126,    -1,   393,    -1,   391,   392,   393,    -1,
     391,     1,   393,    -1,   120,    -1,   123,    -1,   395,   124,
     390,    -1,   390,    -1,   395,    -1,   394,   123,   395,    -1,
       1,    -1,   394,     1,   395,    -1,   394,   123,     1,    -1,
     416,    -1,   360,    -1,   360,   102,   360,    -1,   125,   126,
      -1,   125,   397,   126,    -1,   398,    -1,   397,   123,   398,
      -1,   397,     1,   398,    -1,   397,   123,     1,    -1,   360,
      -1,   360,   102,   360,    -1,   130,    -1,   131,    -1,   110,
      -1,   111,    -1,    25,    -1,   106,    -1,   108,    -1,   107,
      -1,   135,    -1,   134,    -1,   136,    -1,    21,    -1,   130,
      -1,   110,    -1,   131,    -1,   111,    -1,    74,    -1,   105,
      -1,   132,    -1,   133,    -1,    12,    -1,    23,    -1,    69,
      -1,    70,    -1,    27,    -1,    27,     7,    -1,    65,    -1,
     137,    -1,     8,    -1,     8,    35,    -1,    43,    -1,   138,
      -1,    94,    -1,     8,    -1,    27,    -1,    25,    -1,    74,
      -1,    69,    -1,    70,    -1,   130,    -1,   110,    -1,   131,
      -1,   111,    -1,   132,    -1,   133,    -1,    12,    -1,    23,
      -1,   109,    -1,    21,    -1,   134,    -1,   429,    -1,   136,
      -1,   106,    -1,   107,    -1,   108,    -1,     8,    -1,   138,
      -1,    27,    -1,   137,    -1,   105,    -1,   409,    -1,   408,
      -1,   112,    -1,   113,    -1,   114,    -1,   115,    -1,   116,
      -1,   117,    -1,   118,    -1,   119,    -1,   411,    -1,   419,
      -1,    90,    -1,   413,    -1,   416,    -1,   413,   123,   416,
      -1,   413,     1,   416,    -1,   413,   123,     1,    -1,   413,
       1,    -1,   416,    -1,   414,   123,   416,    -1,   416,    -1,
     416,   129,   416,    -1,   417,    -1,   419,    -1,    94,    -1,
      95,    -1,    96,    -1,    88,    -1,    85,    -1,    82,    -1,
      83,    -1,    87,    -1,    84,    -1,    86,    -1,    41,    -1,
      42,    -1,    43,    -1,    44,    -1,    45,    -1,    75,    -1,
      46,    -1,    47,    -1,    76,    -1,    77,    -1,    78,    -1,
      49,    -1,    50,    -1,    51,    -1,    53,    -1,    55,    -1,
      56,    -1,    57,    -1,    58,    -1,    59,    -1,    61,    -1,
      62,    -1,    63,    -1,    65,    -1,    64,    -1,    66,    -1,
      67,    -1,    68,    -1,    69,    -1,    70,    -1,    71,    -1,
       6,    -1,    72,    -1,    81,    -1,    74,    -1,   419,    -1,
      97,    -1,   420,    -1,    52,    -1,    54,    -1,    60,    -1,
      79,    -1,    80,    -1,    73,    -1,    99,    -1,    -1,    -1,
      -1,    28,    -1,    97,    -1,    97,    -1,    -1,   120,    -1,
     128,    -1,    98,    -1,   127,    -1,   135,    -1,   104,    -1,
     129,    -1,     1,    -1,    -1,     1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   223,   223,   224,   236,   238,   235,   241,   247,   249,
     246,   252,   253,   255,   254,   263,   265,   262,   271,   270,
     277,   279,   276,   286,   285,   293,   292,   298,   300,   298,
     305,   306,   311,   310,   313,   315,   314,   318,   323,   322,
     328,   332,   334,   335,   336,   341,   340,   348,   347,   355,
     356,   358,   363,   368,   369,   374,   375,   379,   380,   382,
     384,   386,   391,   396,   398,   399,   404,   409,   410,   412,
     414,   416,   421,   423,   425,   430,   430,   434,   436,   440,
     441,   442,   447,   452,   453,   457,   458,   460,   465,   466,
     468,   470,   472,   477,   482,   483,   489,   490,   495,   496,
     501,   502,   507,   507,   510,   512,   518,   519,   524,   525,
     526,   532,   533,   538,   539,   539,   542,   547,   552,   553,
     554,   559,   564,   565,   570,   570,   586,   589,   588,   592,
     599,   601,   603,   605,   607,   609,   613,   614,   619,   620,
     621,   625,   627,   636,   637,   642,   641,   666,   671,   672,
     677,   678,   681,   680,   687,   688,   693,   695,   700,   702,
     701,   709,   714,   715,   717,   718,   720,   722,   726,   737,
     739,   736,   753,   752,   759,   761,   758,   771,   773,   770,
     783,   782,   791,   798,   804,   813,   815,   820,   821,   823,
     825,   827,   831,   836,   837,   843,   843,   859,   860,   865,
     866,   868,   870,   871,   872,   873,   875,   876,   881,   883,
     891,   894,   896,   898,   900,   905,   907,   908,   910,   912,
     912,   914,   916,   920,   921,   926,   927,   929,   931,   933,
     938,   940,   946,   947,   949,   954,   955,   959,   960,   962,
     964,   966,   970,   976,   977,   982,   984,   986,   988,   993,
     994,   996,   998,  1000,  1004,  1009,  1014,  1015,  1019,  1021,
    1026,  1028,  1030,  1032,  1034,  1038,  1040,  1049,  1051,  1053,
    1055,  1060,  1062,  1068,  1072,  1078,  1077,  1084,  1085,  1087,
    1092,  1093,  1097,  1098,  1099,  1104,  1105,  1107,  1112,  1114,
    1121,  1120,  1124,  1130,  1136,  1138,  1140,  1142,  1144,  1146,
    1150,  1151,  1153,  1158,  1159,  1161,  1168,  1179,  1182,  1184,
    1181,  1193,  1194,  1198,  1205,  1204,  1209,  1208,  1220,  1227,
    1226,  1230,  1236,  1245,  1246,  1250,  1255,  1257,  1260,  1259,
    1263,  1265,  1267,  1269,  1271,  1276,  1277,  1279,  1284,  1289,
    1290,  1295,  1296,  1298,  1300,  1302,  1304,  1309,  1310,  1314,
    1315,  1319,  1320,  1322,  1327,  1327,  1330,  1331,  1333,  1335,
    1337,  1339,  1344,  1345,  1347,  1349,  1353,  1355,  1357,  1359,
    1361,  1363,  1370,  1369,  1376,  1378,  1380,  1384,  1385,  1390,
    1392,  1396,  1397,  1402,  1403,  1408,  1409,  1410,  1414,  1419,
    1420,  1424,  1426,  1435,  1436,  1438,  1440,  1444,  1449,  1454,
    1455,  1461,  1466,  1467,  1471,  1473,  1475,  1477,  1474,  1482,
    1484,  1489,  1493,  1493,  1499,  1500,  1501,  1508,  1509,  1512,
    1511,  1515,  1517,  1519,  1521,  1523,  1525,  1527,  1528,  1530,
    1533,  1532,  1541,  1543,  1540,  1562,  1564,  1566,  1561,  1570,
    1572,  1569,  1576,  1575,  1580,  1579,  1583,  1588,  1593,  1594,
    1596,  1598,  1600,  1605,  1607,  1613,  1612,  1623,  1630,  1635,
    1637,  1642,  1643,  1648,  1649,  1651,  1653,  1655,  1661,  1660,
    1667,  1668,  1670,  1672,  1674,  1678,  1680,  1682,  1684,  1689,
    1691,  1693,  1698,  1699,  1704,  1705,  1710,  1712,  1714,  1716,
    1718,  1720,  1722,  1724,  1726,  1728,  1734,  1735,  1740,  1741,
    1745,  1746,  1751,  1756,  1758,  1765,  1778,  1780,  1785,  1786,
    1788,  1790,  1793,  1792,  1799,  1800,  1802,  1805,  1804,  1811,
    1812,  1814,  1816,  1818,  1820,  1825,  1827,  1829,  1830,  1831,
    1833,  1834,  1839,  1840,  1841,  1845,  1846,  1850,  1855,  1857,
    1862,  1863,  1864,  1869,  1870,  1870,  1870,  1870,  1870,  1870,
    1870,  1870,  1871,  1871,  1871,  1871,  1871,  1871,  1871,  1871,
    1871,  1875,  1887,  1901,  1902,  1907,  1909,  1913,  1914,  1916,
    1918,  1920,  1922,  1924,  1926,  1928,  1930,  1932,  1934,  1936,
    1938,  1940,  1942,  1944,  1949,  1950,  1952,  1961,  1965,  1967,
    1969,  1971,  1976,  1977,  1979,  1981,  1987,  1989,  1991,  1996,
    2001,  2002,  2004,  2006,  2007,  2011,  2012,  2017,  2019,  2024,
    2026,  2031,  2036,  2041,  2043,  2045,  2047,  2049,  2054,  2055,
    2057,  2062,  2063,  2068,  2070,  2075,  2076,  2078,  2080,  2082,
    2087,  2089,  2091,  2096,  2098,  2103,  2104,  2106,  2108,  2113,
    2115,  2122,  2123,  2127,  2128,  2129,  2133,  2134,  2135,  2136,
    2137,  2138,  2139,  2143,  2144,  2145,  2146,  2147,  2148,  2152,
    2153,  2154,  2155,  2156,  2157,  2161,  2162,  2163,  2164,  2168,
    2169,  2170,  2171,  2175,  2178,  2179,  2180,  2181,  2182,  2183,
    2189,  2190,  2191,  2192,  2193,  2194,  2195,  2196,  2197,  2198,
    2199,  2200,  2201,  2202,  2203,  2204,  2205,  2206,  2207,  2208,
    2209,  2210,  2211,  2215,  2216,  2217,  2218,  2222,  2223,  2224,
    2225,  2231,  2232,  2236,  2241,  2246,  2248,  2250,  2256,  2258,
    2262,  2264,  2269,  2270,  2275,  2280,  2281,  2282,  2283,  2284,
    2285,  2286,  2287,  2288,  2289,  2290,  2291,  2292,  2293,  2294,
    2295,  2296,  2297,  2298,  2299,  2300,  2301,  2302,  2303,  2304,
    2305,  2306,  2307,  2308,  2309,  2310,  2311,  2312,  2313,  2314,
    2315,  2316,  2317,  2318,  2319,  2320,  2321,  2322,  2323,  2324,
    2325,  2329,  2334,  2335,  2336,  2337,  2338,  2340,  2341,  2342,
    2346,  2354,  2359,  2364,  2368,  2373,  2378,  2384,  2385,  2390,
    2391,  2392,  2396,  2397,  2401,  2402,  2408,  2412
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "prec_lower_than_error", "prec_if",
  "prec_import", "p_uses", "p_else", "p_and", "p_array", "p_begin",
  "p_case", "p_div", "p_do", "p_downto", "p_end", "p_file", "p_for",
  "p_function", "p_goto", "p_if", "p_in", "p_label", "p_mod", "p_nil",
  "p_not", "p_of", "p_or", "p_packed", "p_procedure", "p_to", "p_program",
  "p_record", "p_repeat", "p_set", "p_then", "p_type", "p_until", "p_var",
  "p_while", "p_with", "p_absolute", "p_abstract", "p_and_then", "p_as",
  "p_asm", "p_attribute", "p_bindable", "p_const", "p_constructor",
  "p_destructor", "p_external", "p_far", "p_finalization", "p_forward",
  "p_implementation", "p_import", "p_inherited", "p_initialization",
  "p_is", "p_near", "p_object", "p_only", "p_operator", "p_otherwise",
  "p_or_else", "p_pow", "p_qualified", "p_restricted", "p_shl", "p_shr",
  "p_unit", "p_value", "p_virtual", "p_xor", "p_asmname", "p_c",
  "p_c_language", "p_class", "p_override", "p_reintroduce", "p_view",
  "p_Addr", "p_Assigned", "p_Dispose", "p_Exit", "p_FormatString", "p_New",
  "p_Return", "p_StringOf", "LEX_INTCONST", "LEX_INTCONST_BASE",
  "LEX_STRCONST", "LEX_REALCONST", "LEX_BUILTIN_PROCEDURE",
  "LEX_BUILTIN_PROCEDURE_WRITE", "LEX_BUILTIN_FUNCTION", "LEX_ID",
  "LEX_CARET_WHITE", "LEX_CARET_LETTER", "LEX_ASSIGN", "LEX_RENAME",
  "LEX_RANGE", "LEX_ELLIPSIS", "LEX_CONST_EQUAL", "LEX_SYMDIFF", "LEX_NE",
  "LEX_GE", "LEX_LE", "LEX_POWER", "LEX_BPPLUS", "LEX_BPMINUS",
  "LEX_CEIL_PLUS", "LEX_CEIL_MINUS", "LEX_FLOOR_PLUS", "LEX_FLOOR_MINUS",
  "LEX_CEIL_MULT", "LEX_CEIL_DIV", "LEX_FLOOR_MULT", "LEX_FLOOR_DIV",
  "';'", "'('", "')'", "','", "':'", "'['", "']'", "'@@'", "'^'", "'.'",
  "'+'", "'-'", "'*'", "'/'", "'<'", "'='", "'>'", "'|'", "'&'", "$accept",
  "program_component", "program_component_1", "@@1", "@@2",
  "module_declaration", "@@3", "@@4", "@@5", "@@6", "@@7", "@@8",
  "interface_module", "@@9", "@@10", "module_interface", "@@11",
  "implementatation_module", "@@12", "module_block", "@@13", "@@14",
  "optional_unit_implementation", "optional_unit_init_and_final_part",
  "@@15", "@@16", "unit_initialization", "@@17", "rest_of_unit_constructor",
  "optional_init_and_final_part", "module_constructor", "@@18",
  "module_destructor", "@@19", "optional_program_heading",
  "optional_module_parameters", "optional_par_id_list",
  "optional_module_attributes", "export_part_list", "export_part",
  "export_list_or_all", "export_all", "export_list", "export_list_item",
  "optional_import_part", "@@20", "optional_import_part1",
  "import_specification_list", "import_specification",
  "optional_qualified", "optional_import_qualifier", "import_clause_list",
  "import_clause", "optional_rename", "declarations_and_uses",
  "declaration_or_uses", "any_declaration_part", "any_decl", "@@21",
  "interface_decl_part", "interface_decl", "implementation_decls",
  "implementation_decl", "@@22", "uses_part", "uses_list",
  "uses_specification", "optional_unit_filename", "simple_decl", "@@23",
  "simple_decl_1", "@@24", "label_list", "new_label",
  "constant_definition_list", "constant_definition",
  "variable_declaration_list", "variable_declaration", "@@25",
  "optional_variable_directive_list", "variable_directive", "@@26",
  "optional_variable_directive_list_no_external",
  "variable_directive_no_external", "absolute_or_value_specification",
  "@@27", "type_definition_list", "type_definition", "@@28", "@@29", "@@30",
  "@@31", "@@32", "@@33", "@@34", "@@35", "formal_schema_discriminants",
  "discriminant_specification_list", "discriminant_specification",
  "type_denoter_with_attributes", "type_denoter", "@@36", "type_denoter_1",
  "type_denoter_0", "actual_schema_discriminants",
  "discriminant_expression_list", "unpacked_structured_type", "@@37",
  "direct_access_index_type", "array_index_list", "ordinal_index_type",
  "record_field_list", "optional_fixed_part", "fixed_part",
  "record_section", "rest_of_variant", "variant_selector", "variant_list",
  "variant", "new_ordinal_type_non_iso", "new_ordinal_type",
  "enumerated_type", "enum_list", "subrange_type", "new_pointer_type",
  "pointer_domain_type", "new_procedural_type", "@@38", "object_parent",
  "optional_abstract", "object_field_list", "object_field_list_1",
  "object_section", "@@39", "optional_value_specification", "var_init",
  "routine_interface_decl", "routine_declaration", "@@40", "@@41",
  "routine_or_method_heading", "routine_heading", "@@42", "@@43",
  "method_heading", "@@44", "optional_routine_interface_directive_list",
  "remote_directive_list", "remote_directive", "@@45",
  "optional_routine_directive_list", "attributes", "attribute_list",
  "attrib", "bp_directive", "operator_identifier", "operator_result_def",
  "optional_formal_parameter_list", "@@46",
  "optional_formal_parameter_list0", "formal_parameter_list",
  "formal_parameter", "@@47", "resulttype", "optional_result_def",
  "optional_result_equals", "optional_protected",
  "optional_parameter_form", "parameter_form", "type_inquiry",
  "typename_or_conformant_array", "conformant_array",
  "index_type_specification_list", "index_type_specification",
  "open_array", "typename_or_untyped_file", "compound_statement",
  "statement_sequence", "optional_statement_vd", "@@48", "@@49",
  "optional_statement", "empty_lte", "statement", "@@50", "statement_1",
  "unlabelled_statement", "@@51", "@@52", "@@53", "@@54", "@@55", "@@56", "@@57",
  "@@58", "@@59", "@@60", "@@61", "set_label", "with_list", "with_variable",
  "if_then", "@@62", "optional_case_completer", "otherwise",
  "optional_case_element_list", "case_element_list", "case_element", "@@63",
  "case_constant_list", "one_case_constant", "for_direction",
  "start_of_assignment_or_call", "assign", "builtin_procedure_statement",
  "asm_qualifier", "asm_operands", "nonempty_asm_operands", "asm_operand",
  "asm_clobbers", "static_expression", "expression", "simple_expression",
  "@@64", "term", "@@65", "factor", "primary", "unsigned_number",
  "optional_combined_string", "combined_string", "string_constants",
  "string_constant", "caret_chars", "typename_or_string255", "typename",
  "typename_1", "variable_or_routine_access",
  "variable_or_routine_access_no_builtin_function",
  "builtin_actual_parameter_list", "disable_function_calls",
  "actual_parameter_list", "write_actual_parameter_list",
  "write_actual_parameter", "untyped_file", "structured_constructor_list",
  "field_value_list", "field_value", "variant_part_value",
  "variant_part_value0", "array_value_completer", "component_value",
  "bp_constructor_list", "initializer_separator", "bp_field_value",
  "index_expression_list", "index_expression_item", "set_constructor",
  "set_constructor_element_list", "member_designator", "sign",
  "unary_operator", "relational_operator", "adding_operator",
  "multiplying_operator", "or_operator", "and_operator", "builtin_proc",
  "operator_symbol", "pxsc_adding_operator", "pxsc_multiplying_operator",
  "label", "num_label", "id_list", "id_list1", "id_list_limited",
  "new_quid", "new_identifier", "new_identifier_1", "identifier", "id",
  "caret_letter", "pushlevel", "poplevel", "enable_lce", "packed",
  "i_protected", "module", "optional_semicolon", "pointer_char", "equals",
  "dot_or_error", "null", "err", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short int yyr1[] =
{
       0,   139,   140,   140,   142,   143,   141,   141,   145,   146,
     144,   144,   144,   147,   144,   148,   149,   144,   150,   144,
     152,   153,   151,   155,   154,   157,   156,   159,   160,   158,
     161,   161,   163,   162,   162,   164,   162,   162,   166,   165,
     167,   168,   168,   168,   168,   170,   169,   172,   171,   173,
     173,   173,   174,   175,   175,   176,   176,   177,   177,   177,
     177,   177,   178,   179,   179,   179,   180,   181,   181,   181,
     181,   181,   182,   182,   182,   184,   183,   185,   185,   186,
     186,   186,   187,   188,   188,   189,   189,   189,   190,   190,
     190,   190,   190,   191,   192,   192,   193,   193,   194,   194,
     195,   195,   197,   196,   196,   196,   198,   198,   199,   199,
     199,   200,   200,   201,   202,   201,   201,   203,   204,   204,
     204,   205,   206,   206,   208,   207,   209,   210,   209,   209,
     211,   211,   211,   211,   211,   211,   212,   212,   213,   213,
     213,   214,   214,   215,   215,   217,   216,   216,   218,   218,
     219,   219,   220,   219,   221,   221,   222,   222,   223,   224,
     223,   223,   225,   225,   225,   225,   225,   225,   226,   227,
     228,   226,   229,   226,   230,   231,   226,   232,   233,   226,
     234,   226,   226,   226,   226,   235,   235,   236,   236,   236,
     236,   236,   237,   238,   238,   240,   239,   241,   241,   242,
     242,   242,   242,   242,   242,   242,   242,   242,   243,   243,
     244,   244,   244,   244,   244,   245,   245,   245,   245,   246,
     245,   245,   245,   247,   247,   248,   248,   248,   248,   248,
     249,   249,   250,   250,   250,   251,   251,   252,   252,   252,
     252,   252,   253,   254,   254,   255,   255,   255,   255,   256,
     256,   256,   256,   256,   257,   258,   259,   259,   260,   260,
     261,   261,   261,   261,   261,   262,   262,   263,   263,   263,
     263,   264,   264,   264,   265,   266,   265,   267,   267,   267,
     268,   268,   269,   269,   269,   270,   270,   270,   271,   271,
     272,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     273,   273,   273,   274,   274,   274,   275,   276,   277,   278,
     276,   279,   279,   280,   281,   280,   282,   280,   283,   284,
     283,   283,   283,   285,   285,   286,   287,   287,   288,   287,
     287,   287,   287,   287,   287,   289,   289,   289,   290,   291,
     291,   292,   292,   292,   292,   292,   292,   293,   293,   294,
     294,   295,   295,   295,   297,   296,   298,   298,   298,   298,
     298,   298,   299,   299,   299,   299,   300,   300,   300,   300,
     300,   300,   301,   300,   302,   302,   302,   303,   303,   304,
     304,   305,   305,   306,   306,   307,   307,   307,   308,   309,
     309,   310,   310,   311,   311,   311,   311,   312,   313,   314,
     314,   315,   316,   316,   317,   317,   318,   319,   317,   320,
     320,   321,   323,   322,   324,   324,   324,   325,   325,   326,
     325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
     327,   325,   328,   329,   325,   330,   331,   332,   325,   333,
     334,   325,   335,   325,   336,   325,   325,   337,   338,   338,
     338,   338,   338,   339,   339,   341,   340,   342,   342,   343,
     343,   344,   344,   345,   345,   345,   345,   345,   347,   346,
     348,   348,   348,   348,   348,   349,   349,   349,   349,   350,
     350,   350,   351,   351,   352,   352,   353,   353,   353,   353,
     353,   353,   353,   353,   353,   353,   354,   354,   355,   355,
     356,   356,   357,   358,   358,   359,   360,   360,   361,   361,
     361,   361,   362,   361,   363,   363,   363,   364,   363,   365,
     365,   365,   365,   365,   365,   366,   366,   366,   366,   366,
     366,   366,   367,   367,   367,   368,   368,   369,   370,   370,
     371,   371,   371,   372,   372,   372,   372,   372,   372,   372,
     372,   372,   372,   372,   372,   372,   372,   372,   372,   372,
     372,   373,   374,   375,   375,   376,   376,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   378,   378,   378,   379,   380,   380,
     380,   380,   381,   381,   381,   381,   382,   382,   382,   383,
     384,   384,   384,   384,   384,   385,   385,   386,   386,   387,
     387,   388,   389,   390,   390,   390,   390,   390,   391,   391,
     391,   392,   392,   393,   393,   394,   394,   394,   394,   394,
     395,   395,   395,   396,   396,   397,   397,   397,   397,   398,
     398,   399,   399,   400,   400,   400,   401,   401,   401,   401,
     401,   401,   401,   402,   402,   402,   402,   402,   402,   403,
     403,   403,   403,   403,   403,   404,   404,   404,   404,   405,
     405,   405,   405,   406,   406,   406,   406,   406,   406,   406,
     407,   407,   407,   407,   407,   407,   407,   407,   407,   407,
     407,   407,   407,   407,   407,   407,   407,   407,   407,   407,
     407,   407,   407,   408,   408,   408,   408,   409,   409,   409,
     409,   410,   410,   411,   412,   413,   413,   413,   413,   413,
     414,   414,   415,   415,   416,   417,   417,   417,   417,   417,
     417,   417,   417,   417,   417,   417,   417,   417,   417,   417,
     417,   417,   417,   417,   417,   417,   417,   417,   417,   417,
     417,   417,   417,   417,   417,   417,   417,   417,   417,   417,
     417,   417,   417,   417,   417,   417,   417,   417,   417,   417,
     417,   418,   419,   419,   419,   419,   419,   419,   419,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   427,   428,
     428,   428,   429,   429,   430,   430,   431,   432
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     0,     1,     0,     0,     8,     1,     0,     0,
      12,     1,     1,     0,     3,     0,     0,     9,     0,     6,
       0,     0,     8,     0,     7,     0,     7,     0,     0,     6,
       0,     4,     0,     3,     1,     0,     4,     1,     0,     3,
       1,     0,     2,     1,     1,     0,     6,     0,     6,     0,
       4,     4,     3,     1,     3,     1,     2,     1,     3,     1,
       3,     3,     3,     3,     1,     4,     1,     1,     3,     1,
       3,     3,     2,     3,     3,     0,     2,     0,     3,     1,
       3,     3,     4,     1,     1,     1,     3,     4,     1,     3,
       1,     3,     3,     2,     1,     2,     0,     2,     1,     1,
       0,     2,     0,     2,     3,     1,     0,     2,     1,     1,
       1,     0,     2,     1,     0,     2,     1,     3,     1,     3,
       3,     2,     1,     2,     0,     2,     2,     0,     4,     2,
       1,     3,     1,     3,     3,     2,     1,     1,     1,     2,
       1,     4,     8,     1,     2,     0,     8,     1,     1,     3,
       1,     2,     0,     5,     1,     3,     2,     1,     1,     0,
       3,     2,     1,     3,     1,     3,     3,     2,     5,     0,
       0,     7,     0,     4,     0,     0,    10,     0,     0,    10,
       0,    10,     5,     6,     6,     3,     3,     1,     3,     3,
       3,     2,     3,     1,     2,     0,     2,     1,     2,     1,
       2,     2,     1,     1,     1,     1,     1,     2,     3,     3,
       1,     3,     1,     3,     3,     6,     1,     4,     3,     0,
       4,     3,     1,     1,     3,     1,     3,     3,     2,     1,
       1,     1,     0,     2,     7,     1,     2,     1,     3,     3,
       3,     2,     4,     0,     5,     3,     3,     1,     1,     1,
       3,     3,     1,     2,     5,     1,     1,     1,     3,     3,
       1,     3,     3,     3,     2,     3,     4,     2,     2,     2,
       3,     1,     1,     1,     2,     0,     4,     1,     3,     3,
       1,     1,     1,     2,     1,     1,     2,     3,     4,     3,
       0,     6,     3,     3,     1,     2,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     3,     3,     0,     0,
       9,     1,     1,     3,     0,     6,     0,     6,     5,     0,
       8,     5,     5,     1,     1,     3,     2,     3,     0,     6,
       6,     6,     3,     2,     2,     1,     3,     3,     4,     1,
       3,     1,     1,     1,     3,     4,     6,     1,     1,     1,
       1,     1,     2,     1,     0,     2,     1,     2,     3,     3,
       5,     3,     1,     3,     3,     3,     3,     4,     4,     5,
       3,     3,     0,     6,     1,     2,     1,     1,     2,     1,
       0,     1,     1,     0,     2,     1,     1,     1,     3,     1,
       1,     6,     7,     1,     3,     3,     3,     5,     3,     1,
       1,     5,     1,     3,     0,     1,     0,     0,     5,     1,
       1,     0,     0,     2,     1,     2,     1,     1,     1,     0,
       4,     1,     2,     1,     4,     4,     6,     1,     6,     1,
       0,     6,     0,     0,     8,     0,     0,     0,     9,     0,
       0,     8,     0,    11,     0,     9,     2,     2,     1,     3,
       1,     3,     3,     1,     3,     0,     7,     0,     4,     1,
       1,     0,     2,     1,     3,     1,     3,     3,     0,     6,
       1,     3,     3,     3,     2,     1,     3,     3,     3,     1,
       1,     1,     1,     2,     1,     1,     2,     1,     4,     4,
       6,     7,     5,     7,     9,    11,     0,     1,     1,     1,
       1,     3,     4,     1,     3,     1,     1,     3,     1,     2,
       3,     3,     0,     4,     1,     3,     3,     0,     4,     1,
       3,     3,     3,     3,     3,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     2,     1,     1,     1,     3,
       3,     2,     4,     4,     3,     5,     2,     4,     4,     5,
       4,     4,     6,     7,     1,     4,     4,     0,     1,     3,
       1,     3,     1,     3,     3,     3,     1,     3,     5,     1,
       2,     3,     3,     1,     1,     1,     3,     3,     1,     6,
       4,     4,     3,     1,     2,     3,     3,     3,     1,     3,
       3,     1,     1,     3,     1,     1,     3,     1,     3,     3,
       1,     1,     3,     2,     3,     1,     3,     3,     3,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     2,
       1,     3,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     0,     0,     1,     1,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1
};

/* YYDPREC[RULE-NUM] -- Dynamic precedence of rule #RULE-NUM (0 if none).  */
static const unsigned char yydprec[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     2,     0,     1,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,     2,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0
};

/* YYMERGER[RULE-NUM] -- Index of merging function for rule #RULE-NUM.  */
static const unsigned char yymerger[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error.  */
static const unsigned short int yydefact[] =
{
      49,     0,     0,   786,     0,     3,     7,    11,    12,   796,
       0,   796,   767,   736,   737,   738,   739,   740,   742,   743,
     747,   748,   749,   774,   750,   775,   751,   752,   753,   754,
     755,   776,   756,   757,   758,   760,   759,   761,   762,   763,
     764,   765,   766,   768,   779,   770,   741,   744,   745,   746,
     777,   778,   769,   731,   732,   734,   730,   735,   733,   729,
     726,   727,   728,   772,   780,   796,   724,   725,   773,     0,
       1,     0,     0,     4,     0,    55,   796,     0,     0,    53,
       0,   796,    14,     0,   796,    75,    56,     0,    20,    18,
       0,     0,     0,   715,    51,    50,     0,     0,   342,     0,
     339,   343,   341,    96,    77,    25,   796,     0,    27,   796,
      54,   719,     0,     8,   338,   796,   793,     0,   792,     0,
     102,     0,    76,    27,    21,    23,     0,     0,    77,    52,
     717,   718,   716,    75,   340,   599,   529,   645,     0,     0,
       0,     0,     0,     0,   532,   533,   540,   534,   796,   541,
     643,   644,     0,     0,     0,     0,   641,   642,     0,   506,
     508,   514,   519,   528,   527,   537,   538,   531,   566,   568,
     530,     0,     0,   567,   771,   344,   771,     0,     0,     0,
       0,     0,     0,     0,     0,    97,    99,   124,    98,   105,
       0,   311,   312,     0,    79,   796,     0,     0,     0,    16,
     795,   794,    19,   111,   106,   576,     0,   587,     0,     0,
       0,   587,   565,   584,     0,   633,   639,     0,   635,   526,
     543,   547,   548,   549,   544,   546,   550,   551,   559,   560,
     545,   552,   553,   554,   555,   556,   557,   558,   542,   345,
     652,   665,   667,   657,   658,   646,   648,   647,   654,   656,
     703,   704,   705,   706,   653,   655,   650,   649,   651,   668,
       0,     0,   512,     0,   669,   661,   662,   671,   663,   664,
     707,   708,   709,   710,   659,   660,   672,     0,   517,     0,
       0,     0,     0,     0,     0,   539,   790,     0,   791,   789,
       0,   571,   587,   509,   525,     0,     0,   118,   796,   354,
     132,   713,     0,   130,   136,   137,   354,     0,     0,   696,
     686,   689,   687,   698,   700,   693,   694,   695,   688,   681,
     683,   680,   682,   684,   685,   690,   692,   699,   697,   354,
     350,   702,   701,   349,   691,   781,     0,   103,     0,   796,
       0,    78,    84,   796,    83,    26,     0,    59,     0,    57,
       0,    27,   114,   124,     0,     0,   596,     0,   592,     0,
       0,     0,   569,     0,     0,     0,   634,   666,   507,   510,
       0,   511,   670,   515,     0,   516,   524,   562,   563,   523,
     520,   521,   522,   627,     0,   753,   760,   731,   732,   735,
     733,   796,     0,     0,   613,     0,   787,   605,   603,   604,
     608,     0,   625,   630,   771,   570,   574,     0,     0,     0,
     117,     0,     0,   121,   122,     0,   380,   796,   135,   104,
       0,     0,   313,     0,     0,   796,   412,     6,   127,     0,
       0,   125,   307,   308,   335,    81,    80,     0,     0,   796,
      85,    22,     0,     0,     0,     0,    41,   112,   124,   113,
     116,     0,     0,    30,   107,   108,   109,   110,     0,   580,
       0,     0,     0,   577,     0,   581,     0,   578,   590,   588,
     531,     0,   640,   637,   638,   636,   513,   518,     0,     0,
       0,   613,   787,   614,   613,   624,     0,   618,     0,   627,
     613,     0,     0,     0,   573,     0,   600,     0,     0,     0,
     572,     0,   346,   120,   119,   123,   354,   314,     0,   379,
     377,     0,   355,   356,   133,   134,   131,   354,   354,   354,
     316,   351,     0,   353,   406,   782,   402,   405,     0,     0,
     147,     0,   143,   783,   720,   140,   126,   138,   783,   796,
     347,     0,   348,     0,     0,     0,    77,   796,     0,     0,
       0,    90,     0,    88,   796,    82,    60,    61,    58,   106,
      66,     0,    62,    64,    17,     0,     0,    43,    44,   115,
     354,   354,    77,     0,   796,   579,   597,   594,   595,   593,
       0,   796,   586,   585,     0,   564,     0,     0,   788,   612,
       0,   621,   615,   622,     0,     0,   617,     0,   616,   632,
     606,   601,     0,   602,   631,   628,   629,   626,   607,   575,
     380,     0,   378,     0,     0,     0,     0,   785,     0,   357,
       0,   362,     0,     0,   382,   381,   318,   321,   322,     0,
     352,     0,   412,     0,   674,     0,     0,     0,     0,   676,
     675,   435,   439,     0,   496,   678,   679,   677,     0,   423,
     421,   673,   487,     0,   417,   413,   416,   414,   429,   418,
     427,   482,   796,     0,   711,   771,   164,     0,   162,   783,
     144,     0,     0,   139,     0,     0,     0,   536,   535,   326,
       0,   333,   334,   100,   325,   336,   337,     0,     0,    86,
       0,     0,    93,    94,   124,    69,     0,    67,   796,   722,
       0,     0,     0,     0,    29,     0,    42,    96,     0,   306,
     324,   323,     0,   582,     0,   591,   589,     0,   610,     0,
     620,   619,   623,   632,   319,   797,     0,   315,   374,   376,
     361,   354,   354,     0,   383,   359,   796,     0,   358,     0,
       0,     0,   317,   407,   403,   401,     0,     0,   446,   712,
       0,   781,   781,   450,     0,   448,   453,   497,     0,     0,
       0,   422,     0,   483,   415,   430,     0,   486,   447,   167,
       0,     0,     0,     0,   721,   195,   195,     0,   505,   328,
     327,   332,   102,    87,    91,    92,    89,    95,    24,     0,
      63,     0,     0,    72,     0,   796,     0,    45,    47,   102,
      10,   598,   583,     0,     0,     0,   375,   561,   380,   371,
       0,     0,   370,   364,   365,     0,   363,   383,     0,   784,
       0,   366,   386,   385,   390,   387,   389,   399,   400,     0,
       0,   412,   432,     0,   484,     0,   485,   455,   412,     0,
       0,   781,     0,     0,     0,     0,     0,     0,     0,   781,
       0,   165,   166,   163,     0,     0,     0,   195,   145,   193,
       0,     0,   141,     0,     0,   796,   101,     0,    70,    71,
      68,    73,   723,    74,    65,   412,   412,    32,    38,    31,
      34,    37,   787,   609,   320,   372,     0,   384,   360,   368,
       0,     0,     0,     0,   367,   408,     0,   444,     0,   781,
       0,   440,   451,   412,   452,   449,   454,     0,   489,     0,
     424,   425,     0,   488,   412,   420,     0,     0,   187,     0,
     170,   173,     0,   796,     0,   796,   796,   796,   796,   194,
       0,   599,   354,   354,     0,     0,     0,     0,   541,     0,
     791,   789,   196,   197,   206,   203,   256,   257,   204,   205,
     202,     0,   199,   561,   568,   771,     0,     0,   222,     0,
       0,     0,     0,     0,     0,   409,   410,     0,   412,   412,
      35,   611,     0,   369,   398,     0,   393,     0,   388,     0,
     465,   433,     0,   463,     0,   470,     0,     0,   481,   480,
     479,     0,   412,   436,     0,   782,   492,   796,     0,   796,
       0,   782,   186,   191,     0,   185,     0,   195,     0,     0,
       0,   182,   277,     0,   281,     0,   280,     0,   303,   304,
     305,   168,     0,   300,     0,   796,   158,     0,     0,     0,
     223,   275,   274,     0,   232,   195,   198,   200,   269,   272,
     273,   271,     0,     0,   260,   267,   568,   543,   268,     0,
       0,     0,   201,   207,     0,     0,   796,   329,   330,   331,
     310,    46,    48,    33,    40,    39,   412,   373,     0,     0,
       0,     0,     0,   457,     0,     0,   462,   474,     0,   468,
       0,     0,   781,   442,   782,     0,   412,   428,     0,   499,
     500,     0,   498,   490,     0,   426,   431,   189,   190,   188,
     192,   796,   184,   183,     0,     0,   796,   796,   796,   302,
     301,   161,     0,     0,   148,   229,     0,   225,   230,   231,
       0,     0,   195,     0,   221,     0,     0,     0,   237,     0,
     235,   218,   259,   264,   258,     0,   265,   212,     0,   210,
       0,     0,   270,     0,   154,    36,   395,   396,   394,     0,
       0,     0,   459,   460,     0,   781,   466,   467,   464,   473,
     472,   471,   781,   477,   478,   476,   412,     0,   456,   437,
     782,   493,   796,     0,     0,   491,   171,   279,   278,   180,
     175,   178,   160,   146,   228,     0,     0,   224,   217,   276,
     220,     0,   241,     0,   233,   195,   262,   263,   261,     0,
     208,     0,   209,   266,   142,     0,   391,     0,     0,   434,
     412,   412,   782,   781,   782,   441,     0,   501,     0,     0,
       0,     0,   796,     0,   149,   150,   157,   227,   226,   195,
       0,   248,   255,     0,   771,   239,   240,   238,   796,   213,
     214,   211,   155,   397,   392,   782,   782,   445,   412,   438,
     494,     0,   502,   284,     0,   282,   285,     0,     0,   151,
     156,   215,     0,     0,   242,   458,   469,   782,     0,   503,
     181,     0,     0,   737,   742,   747,   748,   779,   777,   778,
     286,   283,   299,     0,   176,   179,   152,   252,     0,   249,
       0,   246,   245,   443,   495,     0,   354,   354,   354,   354,
     295,   287,   195,     0,   253,   788,   243,     0,   504,   380,
     289,   292,   293,   796,   153,   251,   250,   234,     0,   232,
     290,   288,   232,     0,     0,     0,   254,   291,   787,   244
};

/* YYPDEFGOTO[NTERM-NUM].  */
static const short int yydefgoto[] =
{
      -1,     4,     5,    85,   184,     6,   133,   453,    71,   107,
     351,   108,     7,   106,   197,   126,   198,     8,   123,   127,
     128,   446,   573,   879,   968,  1066,   880,   969,  1063,   566,
     567,   875,   568,   876,     9,    89,    90,    73,   348,   349,
     562,   563,   696,   697,   103,   104,   122,   193,   194,   343,
     439,   552,   553,   692,   120,   185,   782,   186,   187,   353,
     454,   352,   447,   448,   188,   296,   297,   413,   456,   338,
     431,   529,   302,   303,   536,   537,   531,   532,   928,  1113,
    1224,  1303,  1143,  1225,  1025,  1112,   667,   668,   771,  1007,
     772,   925,  1220,   926,  1221,  1219,   855,   917,   918,   858,
     859,   860,   942,   943,  1052,  1138,   944,  1034,  1029,  1116,
    1117,  1125,  1126,  1127,  1128,  1317,  1230,  1288,  1289,  1231,
    1118,   946,  1043,   947,   948,  1038,  1039,  1123,  1011,  1015,
    1254,  1255,  1281,  1324,  1021,  1022,   457,   189,   546,   867,
     190,   191,   611,   629,   192,   805,   709,   432,   547,   863,
     433,   929,    99,   100,   549,   329,   520,   416,   417,   512,
     620,   621,   972,   727,   507,   508,   622,   812,   821,   822,
     823,   824,   975,   976,   825,   826,   654,  1064,   526,   631,
     831,   964,   965,   966,   528,   655,   656,   766,   849,   896,
    1073,   751,  1085,  1214,   752,   994,  1167,   987,   657,   754,
     755,   658,   899,  1154,  1155,   981,   982,   983,  1162,   984,
     985,   991,   659,   835,   660,   758,  1088,  1089,  1090,  1268,
     986,   778,   159,   370,   160,   374,   161,   162,   163,   676,
     164,   165,   166,   238,   952,   827,   377,   167,   168,   212,
     355,   471,   357,   358,   169,   395,   396,   397,   398,   718,
     399,   400,   486,   594,   487,   492,   402,   170,   217,   218,
     171,   172,   260,   261,   277,   262,   278,   662,   330,   263,
     279,   663,   304,  1129,    92,   533,   698,    93,    66,   173,
      67,    68,   426,   633,   672,  1120,   700,    10,   496,   291,
     509,   202,   213,   729
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1003
static const short int yypact[] =
{
     469,  6430,  8379, -1003,   304, -1003, -1003,   199, -1003,    43,
    8379,   228, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003,   228, -1003, -1003, -1003,   236,
   -1003,   269,   248, -1003,   270, -1003,    29,  8379,   280, -1003,
     309,    43, -1003,  8379,  8043, -1003, -1003,   414, -1003,   440,
     442,   456,   103, -1003, -1003, -1003,   488,   542, -1003,   259,
   -1003,   576, -1003, -1003,   551, -1003,   228,   529, -1003,    43,
   -1003,  8379,  6522, -1003, -1003,  8043, -1003,  5480, -1003,  5480,
     696,  8379, -1003, -1003, -1003, -1003,   535,    45,   551, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,  8379,   539,
     570,   579,   605,   613, -1003, -1003, -1003, -1003,   620, -1003,
   -1003, -1003,  5480,  5360,  5600,  1421, -1003, -1003,   622,  1267,
     410,  1286,    16, -1003, -1003,     0, -1003,   756,   627, -1003,
   -1003,  5600,  5600, -1003,   634, -1003, -1003,  8379,  8379,  6246,
    8379,  8379,  8379,  2367,   752, -1003, -1003, -1003, -1003, -1003,
     645, -1003, -1003,   161, -1003,   703,    45,   529,  6614, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003,  1120, -1003,  5480,  1120,
    5480, -1003, -1003, -1003,   657, -1003,   680,    84, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003,   781, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
    5480,  5600, -1003,  5600,   758, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003,  5600, -1003,  5600,
    1166,  1166,  5600,  5600,  5600, -1003, -1003,  2849, -1003, -1003,
    8379, -1003,   675,   410, -1003,  5480,   147, -1003,   784,   673,
   -1003, -1003,   255, -1003, -1003, -1003,   691,   694,   700, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003,    45, -1003,   463, -1003,
    8379,  8462, -1003,    19, -1003, -1003,    45, -1003,   193, -1003,
     -17, -1003,  1407,   669,   536,  5480,   685,   257, -1003,   846,
     279,  3389, -1003,  5480,  5480,  3449, -1003, -1003,  1003,   410,
    5600,   410, -1003,  1286,  5600,  1286, -1003, -1003,   711, -1003,
   -1003, -1003, -1003, -1003,  4640,  8545,  5540,   704,   721,   724,
     732,   495,  4434,  2505,   122,   729,   737, -1003, -1003, -1003,
   -1003,   140, -1003, -1003,   692, -1003, -1003,  3389,   741,  8379,
   -1003,  8379,  5480, -1003, -1003,  8379,    57,   746,  8126, -1003,
    6338,  8379, -1003,  8379,  8379,  4347,   335, -1003, -1003,  6706,
    6798, -1003, -1003,   990, -1003, -1003, -1003,   767,  6890,   784,
   -1003, -1003,  8379,  5970,    -6,    45,   849, -1003, -1003, -1003,
   -1003,  8379,  8379,   839, -1003, -1003, -1003, -1003,   785, -1003,
     786,  5480,  5480, -1003,  3533, -1003,  2948, -1003, -1003, -1003,
     649,   361, -1003, -1003, -1003, -1003,   410,  1286,  1166,   875,
     796, -1003,   803, -1003,   577, -1003,   276, -1003,   800,   799,
     174,   805,    98,  5480, -1003,  2613,   868,  4640,  3047,  5540,
   -1003,   391, -1003, -1003, -1003, -1003, -1003, -1003,  8379, -1003,
   -1003,  4946, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003,  8379, -1003, -1003,   813, -1003, -1003,  5135,  6982,
   -1003,  5786, -1003,   814, -1003, -1003,  8628, -1003,   -17,     0,
   -1003,   816, -1003,  5480,   822,   827,   551, -1003,   828,   829,
    6890, -1003,   289, -1003,   850, -1003, -1003, -1003, -1003, -1003,
   -1003,  7074, -1003,   833, -1003,   483,   940,   926, -1003, -1003,
   -1003, -1003,   551,   942, -1003, -1003,   835, -1003, -1003, -1003,
     489,   620, -1003, -1003,  3593, -1003,   837,  5480, -1003, -1003,
    4738, -1003, -1003, -1003,  4738,  5540, -1003,  5480, -1003, -1003,
   -1003, -1003,  5540, -1003,   862, -1003, -1003, -1003, -1003, -1003,
      57,   171, -1003,   841,  8379,  8379,  8209,   192,   843, -1003,
     403, -1003,   928,   852,  8379, -1003, -1003, -1003, -1003,   171,
   -1003,  6706,    56,   952, -1003,  5480,  1120,  1381,  5480, -1003,
   -1003, -1003, -1003,  3677,   873, -1003, -1003, -1003,   856,   857,
    5480, -1003,   858,  1120, -1003, -1003, -1003,  5225,   978,     7,
   -1003,   756,   620,   863, -1003,   865, -1003,   277, -1003,   879,
   -1003,  8379,   870, -1003,   878,  5480,   354, -1003, -1003, -1003,
     884, -1003, -1003, -1003,   610, -1003, -1003,   325,  8379, -1003,
    7166,  8379, -1003, -1003,    90, -1003,   334, -1003,   611,   876,
    8379,  7074,   994,   997, -1003,   996, -1003, -1003,    45, -1003,
   -1003,   990,  5480, -1003,   891, -1003, -1003,  2849, -1003,   988,
   -1003, -1003, -1003,    89, -1003, -1003,  1166, -1003, -1003, -1003,
   -1003, -1003, -1003,  8379,   894, -1003,  7793,  5694, -1003,  8379,
    1206,   895, -1003, -1003, -1003, -1003,   989,   656, -1003, -1003,
     985, -1003, -1003, -1003,    47, -1003,   899, -1003,   903,  5480,
     861, -1003,  5480,   756, -1003, -1003,   494, -1003, -1003,  8379,
    5878,   906,   906,   -17, -1003, -1003, -1003,   912, -1003, -1003,
     958,   987,   686, -1003, -1003, -1003, -1003, -1003, -1003,  8711,
   -1003,  7258,  8379, -1003,  8379,   850,   364, -1003, -1003,  1477,
   -1003, -1003, -1003,   913,   837,   171, -1003, -1003,    76, -1003,
     916,  1206, -1003, -1003, -1003,   923, -1003,   894,    26, -1003,
    1023, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,  1050,
    1206,    56, -1003,  5480, -1003,  5480, -1003, -1003,   290,  5480,
    5480, -1003,  3737,  8379,     0,   515,   938,    -2,   366, -1003,
    5480, -1003, -1003, -1003,  7350,   -17,  1061,   549,    43, -1003,
    2083,   285, -1003,  5480,  5480,     0, -1003,   752, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003,   943,   943, -1003, -1003, -1003,
    1011, -1003,   803, -1003, -1003, -1003,  1206, -1003, -1003, -1003,
    1072,  8379,  5480,   945, -1003, -1003,  3245, -1003,   643, -1003,
     275, -1003, -1003,   572, -1003, -1003, -1003,   702, -1003,  2948,
   -1003, -1003,  1166, -1003,   572, -1003,   950,   441, -1003,   954,
   -1003, -1003,   953,   227,  1048,  1034,  1034,   524,   548, -1003,
     956,   266, -1003, -1003,  6154,  1053,  2233,  1166,  7710,  3146,
    4846,  2713, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003,   981, -1003,   450,   531,   980,  1975,  1037, -1003,  5540,
     962,   966,   967,   969,   970, -1003, -1003,   974,   335,   308,
   -1003, -1003,   164, -1003, -1003,    69, -1003,   993, -1003,  8379,
   -1003, -1003,   575, -1003,   159, -1003,   201,  1083, -1003, -1003,
   -1003,  5480,   572, -1003,  1091, -1003, -1003,     0,   594,   620,
    1000, -1003, -1003,  8379,  7442, -1003,  1166, -1003,  1056,  1096,
     949, -1003, -1003,  1166, -1003,  1051, -1003,  1041, -1003, -1003,
   -1003, -1003,  3821, -1003,  3881, -1003, -1003,   779,  5420,  1099,
   -1003, -1003, -1003,  1112,  8296, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003,  1006,   384, -1003, -1003,   760,   971, -1003,  5480,
    3965,  5480, -1003, -1003,  1028,  7877, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003,   813, -1003,   335, -1003,  8379,  7534,
    1105,  8379,  1015,    79,  5480,  3305, -1003,  5480,  4025, -1003,
    5480,  4109, -1003, -1003, -1003,  5480,   572, -1003,   -12,  1019,
   -1003,  1022, -1003, -1003,  1024, -1003, -1003, -1003, -1003, -1003,
   -1003,   524, -1003, -1003,  1031,  1032,  1029,  1029,  1029, -1003,
   -1003, -1003,  5480,  1035, -1003, -1003,   113, -1003, -1003, -1003,
    5480,  1030, -1003,   264, -1003,  1142,  1148,   340, -1003,  1038,
   -1003, -1003, -1003,  8379, -1003,  7626, -1003, -1003,   393, -1003,
    1039,  5480, -1003,  1044, -1003,   813, -1003, -1003, -1003,  1335,
    1046,  1135, -1003, -1003,  1153, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003,   572,  1160, -1003, -1003,
   -1003, -1003,     0,     0,  5480, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003,   518,  5420,  5420,  1150, -1003, -1003, -1003,
   -1003,  4542,  8379,  5045, -1003, -1003, -1003, -1003, -1003,  5480,
   -1003,  4169, -1003, -1003,    42,  1054, -1003,  1166,  1166, -1003,
     335,   585, -1003, -1003, -1003, -1003,   431, -1003,  1060,  6062,
    6062,  6062,     0,  5480, -1003, -1003, -1003, -1003, -1003, -1003,
    1152, -1003, -1003,  1059,   296, -1003, -1003, -1003,   480, -1003,
   -1003, -1003, -1003, -1003, -1003,   813, -1003, -1003,   572, -1003,
   -1003,     0, -1003, -1003,  1169,  7960, -1003,  1173,  1174,  1094,
   -1003, -1003,  4253,  5420, -1003, -1003, -1003, -1003,   598, -1003,
   -1003,  8379,  8379,   286,   248,  8379,  8379,  5276,   329,   338,
     184,  1074, -1003,  1068, -1003, -1003, -1003, -1003,   402, -1003,
     239, -1003, -1003, -1003, -1003,     0, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003,  5480,  5480,  5480,    79,  1076, -1003,    64,
   -1003, -1003, -1003,   480, -1003, -1003, -1003, -1003,  1077,  8296,
   -1003, -1003,  8296,  1073,   182,  1079, -1003, -1003,   803, -1003
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003,  1007, -1003,  1134, -1003,   -82,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,   245,   409,
   -1003, -1003,   658, -1003, -1003,  1118,    72,   411, -1003,   385,
   -1003, -1003,   526,  -144,   -96, -1003,  -108, -1003,   497, -1003,
   -1003,   678,    49,  -341,   523, -1003, -1003,   449, -1003,   674,
   -1003, -1003, -1003, -1003,  -318, -1003,   357,   793,  -149, -1003,
   -1003, -1003, -1003,   268, -1003,   701, -1003,  -465, -1003, -1003,
   -1003, -1003, -1003,    40, -1003, -1003, -1003,    65, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003,   476, -1003,  -156,  -733,
    -991, -1003, -1003,   313, -1003, -1003,   294, -1003, -1003, -1003,
    -971, -1002, -1003, -1003,  -319, -1003, -1003, -1003,  -455,   -10,
    -820, -1003, -1003, -1003, -1003,  -802,  -501, -1003,  -377,   328,
    -334, -1003, -1003, -1003,  -900, -1003, -1003,   907, -1003, -1003,
   -1003,  -322, -1003, -1003, -1003, -1003, -1003,   681, -1003, -1003,
    -418,    -8, -1003,  1146, -1003, -1003, -1003,  -300, -1003, -1003,
   -1003,   160, -1003,  -614,  -600, -1003, -1003,   445,  -272,  -401,
     115, -1003, -1003,  -446, -1003,   378,  -173,  -423,  -587, -1003,
   -1003,  -834,  -602,  -412, -1003, -1003,   617, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
     -32, -1003, -1003, -1003,   -36, -1003, -1003,  -176, -1003,  -953,
    -175, -1003, -1003,   509, -1003, -1003,   104, -1003,   105, -1003,
    -657,  1104,  1017, -1003,  -116, -1003,    66,  -150, -1003,  -835,
    -532,   436,  -157, -1003,  -676,  -255, -1003,  -145, -1003,  -560,
    -148,  -390,  -194,   355,  -681,  -357, -1003,   787,   788,   477,
     791,  -353, -1003, -1003,    14,  1002,  -343, -1003, -1003,   547,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,  1101,
    1107,   654,  -450,   -65, -1003, -1003,  -248,    52, -1003, -1003,
     774, -1003,  -728,  -927,  -487,  -708,  -464,  1221,  -477,  -382,
     -88,  -177,    -9,  -439
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -797
static const short int yytable[] =
{
      75,    74,    79,   525,   219,   589,   422,   677,   285,   728,
     724,   336,    91,   119,   527,   742,   360,   501,   777,   345,
     203,   714,   294,   838,   839,   376,   379,   728,  1026,   425,
     962,   458,   829,   482,   449,   455,   491,   204,   337,   485,
     945,   196,   967,   861,  1131,   744,   200,   624,   840,   488,
     806,   674,   890,    65,    69,   293,    79,  1121,  -796,   828,
     841,   354,    76,   361,   359,  -796,   670,    79,  1087,   995,
    1068,  -404,    75,    74,  1096,   102,   580,  -796,   664,  -796,
    1001,   437,   283,    78,    87,   364,  1152,   116,    72,    72,
    -632,   560,   146,  -404,   524,   334,   177,    79,   149,   497,
      75,    74,   767,   829,   111,   788,   102,  -419,   451,  -404,
    1171,  -419,  1172,   903,  1184,   561,   945,  1223,   118,   452,
     911,   914,   829,  -613,   927,   284,    88,   912,   155,   684,
     828,  1188,   380,   381,   382,    97,   101,    80,  1045,  1048,
     438,   497,  -419,  1153,   407,   369,   608,   371,   409,   828,
      77,   891,   956,   183,   605,   607,   711,  1168,  1084,   427,
    1077,   116,   340,   130,   132,   725,   743,   101,   116,   441,
     842,   992,   725,   195,   201,  -631,  -404,  -796,   829,   954,
     116,  -796,   773,   725,  -796,  -772,   344,   664,  -796,  1069,
     205,   884,   118,  -772,   442,  1070,  -796,  -411,  -796,   118,
    -796,  1176,  1080,   728,  1238,   828,   610,   365,   885,   828,
     366,   118,  -632,  1227,  1228,  -640,   470,   626,   627,   628,
     527,   498,   499,  -714,   493,  -714,   112,  -714,   956,   298,
     299,   305,   306,   307,   308,   333,  1185,   485,  1261,  1186,
    1077,   485,   722,  1215,   895,  -613,  -631,   488,  -613,   482,
     350,   488,  1170,  1142,   476,   954,   418,  1040,   462,  1046,
    1040,  1037,   444,   498,   499,   725,   500,   410,   564,   445,
     411,   422,   624,   624,  1101,   954,   597,   590,   769,  -411,
     462,   341,  1078,  1079,  -411,  1247,  -411,  1249,   726,   414,
     688,  -411,  -796,  -772,  -772,   726,   -13,  -631,  -631,   569,
    -613,  -298,  -411,  1081,    70,  -411,   726,  -772,  -772,  1290,
    -411,  1313,   993,   443,  -772,  -772,  -772,  1323,  1265,  1266,
    1325,  -772,  -247,  -404,  -475,  -475,   688,  -404,   524,  1009,
     434,    72,  1212,   677,   440,   789,  -411,   522,  1264,   403,
    1293,  1192,   405,   373,  -296,   375,   524,   559,  1010,    77,
    -404,  1290,  1290,  -297,  1166,  -787,    81,   793,  1067,   949,
     803,  -404,  1078,  1307,  -411,   789,     3,   462,  -411,    84,
     728,  1232,   458,   524,  1040,   419,   455,  1246,   420,   463,
     464,   114,   115,   661,  -411,  1133,  -411,  1259,   726,   959,
      86,  1028,   195,   195,  1199,   632,   591,   770,   592,   593,
      94,   467,   464,  1304,   736,   971,  -298,   510,   513,  -787,
    -404,   689,   690,  1321,  1267,   900,   523,  -787,   264,   527,
    -725,   958,   265,  1163,  1165,   548,   527,  1210,  -404,    95,
     414,   808,   809,   266,  1211,   949,   480,   205,   683,  1094,
     477,   829,  1003,  1232,   403,   403,   623,   783,   690,  -296,
     675,   779,   795,   267,   873,  -404,   790,   791,  -297,   950,
    1193,   298,  -787,   298,   707,  1091,  -787,   506,   828,    -2,
     305,   807,   305,   517,   780,   518,   519,   521,   957,   268,
     269,   534,   538,   583,   584,  1248,   874,   791,   913,   464,
     554,   747,    96,   702,   350,   350,  -728,   958,   703,   428,
       1,   429,   625,   570,   571,  1076,  1134,  1135,   763,  1189,
    -728,   430,   661,   609,   584,  1200,  1201,   958,   581,   998,
     129,   728,  1305,   737,  -787,   738,   270,   271,   272,   273,
     678,   800,  -216,  1072,   105,   950,  -728,   -15,   434,   887,
       2,  -728,   274,   275,   871,   693,  -216,   403,   276,   403,
     403,   734,  1018,  1250,   957,  1251,   527,   527,   894,   741,
     612,  1004,   109,  1005,    72,   434,     3,  -728,   848,  1222,
      72,  1050,  -216,  -411,   630,  1051,  1074,  -216,   110,  -411,
    1019,   669,  -787,   534,  1020,   113,  -411,  -411,   538,  1024,
    -787,  -174,  -411,  1223,   834,  -728,  1018,    87,   116,  -728,
    -411,   510,   554,  -216,   720,   953,  1056,   121,   721,  -411,
     922,   713,   584,   699,   973,  -728,   211,  -728,  -728,  -728,
    1018,  -728,  1146,  1148,  1019,  -411,   125,   923,  1020,   118,
     924,  -216,  1031,  1032,   286,  -216,  -411,   908,   909,  -787,
    1091,  1091,   403,  1145,   988,   868,   403,   870,  1019,  -411,
    1194,  -216,  1020,  -216,   527,   199,    72,   989,   459,   836,
     206,   287,   540,   288,   289,   290,   731,   732,   810,  1110,
     542,   623,   623,   990,   817,   177,   548,   833,   836,   493,
     116,   953,   807,   534,    -9,   857,   514,   451,   516,   693,
     677,   207,  -411,  -725,   963,  1075,  -309,   117,   452,   362,
     208,  -631,   177,   548,   178,  -411,    -5,  -725,   179,  1320,
    1327,   118,   691,   792,   178,   180,  1093,   584,   179,  1269,
    1294,  1295,   728,   774,    -9,   180,   209,   625,   625,  1179,
    1180,  1181,   183,  -725,   210,   181,   182,   784,  -725,   786,
     554,   211,   554,   787,   239,   181,   182,   286,   292,   183,
     285,  1100,   699,   699,   286,  1105,   834,   295,  1106,   183,
     116,  -273,   335,  1308,  -725,   339,   503,   920,   504,   403,
     342,   582,  1119,  1119,   287,  -273,   288,   289,   290,   362,
    1115,   287,   363,   288,   289,   290,   693,  1245,   367,   919,
     219,   118,  -725,   372,   146,   135,  -725,   406,   527,   510,
     149,  -273,   415,   136,   137,   412,  -273,   819,   902,   461,
     905,  1306,  -725,  -725,  -725,  -725,  -725,   577,  -725,   579,
     421,   669,   669,   423,   996,   206,   997,   556,   558,   424,
     155,    23,  -273,    25,   851,   853,   138,   435,   436,    31,
     478,   699,   207,   699,   699,   208,   872,  1097,  1099,  1315,
    1316,  1329,    44,   209,   286,   494,   678,   495,    50,    51,
    -273,   139,   140,   502,  -273,   141,   142,   511,   143,   144,
     145,   146,   147,  1235,  1237,   148,    63,   149,    64,   565,
    -273,   287,  -273,   288,   289,   290,  1257,  1258,   550,   150,
     151,   174,   846,   176,   572,   906,   813,   816,  1156,  1158,
     939,   586,  1159,  1161,   153,   574,   154,   155,   575,   156,
     157,   473,   475,    23,  1012,    25,  1016,  1016,  1023,  1023,
     587,    31,  1030,   588,   595,   596,   176,   176,   176,  1119,
    1119,   598,   602,   632,    44,   282,   679,   671,   919,   919,
      50,    51,   681,   977,   286,   176,   176,   682,   685,   686,
    1104,   691,  1243,  1244,   701,   704,   705,   708,    63,   712,
      64,   999,   717,   730,   493,   735,   739,   745,   465,   466,
     757,   287,  -780,   288,   289,   290,   740,   759,   760,   762,
     176,  -563,   176,   176,   176,   765,  -780,   768,  1092,  -712,
    1041,  1044,  1041,  1041,   775,  -563,  1309,  1310,  1311,  1312,
    -169,    23,   776,    25,   781,   794,  -563,   797,  1292,    31,
     798,   703,  -780,   802,   804,   832,  1114,  -780,   811,   830,
     837,  -563,    44,   843,   844,  1130,  -563,   854,    50,    51,
     241,   977,   862,   864,   176,   176,    72,   176,   865,   882,
     886,   539,   540,  -780,   541,   888,    63,  1144,    64,   892,
     542,   176,  -563,   176,   378,   378,   176,   176,   176,   893,
     910,   404,   921,  -411,   970,   543,   544,   545,   242,   176,
     979,  -780,  1002,  1008,  1013,  -780,  1014,   243,  1006,  1035,
    -563,  1027,  1057,  1049,  -563,  1055,  1058,  1059,   135,  1060,
    1061,  -780,  1023,  -780,  1062,  1071,  1082,  1012,  1012,  1012,
    -563,  -563,  -563,  -563,  1086,  -563,  -563,  1041,   244,   478,
    1102,  1103,  1107,   248,   249,   250,   251,   252,   253,  1108,
     977,   977,  1095,  1150,    23,  1122,    25,  1124,  1132,   176,
    1141,  1149,    31,   254,   255,   176,   135,   176,   176,   176,
     259,  1151,  1173,  1174,   176,    44,  1175,   282,   176,   282,
    1010,    50,    51,  1177,  1178,  1183,  1187,  1190,   404,  1191,
     176,  1208,  1195,  1092,  1204,  1202,   404,   404,  1209,    63,
    1207,    64,    23,  1213,    25,  1226,  1229,   138,  1262,   891,
      31,   176,  1252,  1263,  1270,  1196,   176,  1198,  1284,  1285,
    1283,  1286,  1302,    44,  1301,  1326,  1226,  1319,  1322,    50,
      51,  1328,   139,   140,   346,    82,   141,   142,   881,   143,
    1256,  1256,  1256,   678,  1065,   818,   148,    63,    23,    64,
      25,   158,   135,   175,   124,   706,    31,   796,   687,  1023,
     799,   866,   555,   694,   819,   176,   176,   673,   176,    44,
     404,   152,   820,  1233,  1242,    50,    51,  1282,   856,  1036,
    1053,   282,   585,  1291,  1017,   710,   214,   216,    23,   450,
      25,   134,   889,    63,  1206,    64,    31,   176,   974,   404,
    1318,   404,   404,   176,   764,   850,  1216,   368,  1217,    44,
     907,   883,   600,   601,   331,    50,    51,   603,   240,   401,
     332,   748,    83,     0,   241,     0,     0,     0,     0,     0,
     510,     0,   665,    63,  1023,    64,     0,     0,     0,     0,
    1130,     0,   356,  1130,   356,     0,     0,   176,     0,     0,
       0,     0,     0,  1296,  1297,     0,     0,  1298,  1299,     0,
     280,     0,   242,     0,     0,     0,     0,     0,    23,     0,
      25,   243,     0,     0,  1205,   281,    31,     0,     0,     0,
       0,   135,     0,     0,     0,     0,     0,     0,   176,    44,
       0,   176,     0,   819,   404,    50,    51,     0,   404,   176,
       0,   176,   244,   245,   246,   247,   176,   248,   249,   250,
     251,   252,   253,    63,     0,    64,     0,    23,     0,    25,
       0,   394,     0,     0,     0,    31,     0,   254,   255,   408,
       0,   256,   257,   258,   259,     0,     0,     0,    44,   176,
     176,   749,   176,   177,    50,    51,     0,   176,     0,     0,
       0,     0,   -28,     0,   176,   178,     0,   176,     0,     0,
       0,   176,    63,    23,    64,    25,   180,   -28,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,   176,
       0,     0,     0,     0,    44,     0,   181,   182,     0,   460,
      50,    51,     0,     0,     0,   469,     0,   472,   216,   216,
     183,   301,     0,     0,     0,     0,     0,     0,    63,     0,
      64,     0,     0,   177,     0,     0,   176,   877,   479,     0,
     481,   404,   -41,     0,     0,   178,   484,   490,     0,   179,
     378,     0,     0,     0,     0,     0,   180,   565,     0,     0,
       0,   469,     0,     0,   378,     0,   505,     0,     0,     0,
     220,     0,     0,     0,     0,     0,   181,   182,     0,     0,
       0,     0,     0,   176,   847,   878,   176,     0,     0,     0,
     183,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,     0,     0,
       0,     0,     0,     0,     0,   576,   356,     0,   356,     0,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   378,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   599,     0,   394,
       0,   604,   604,   481,   378,     0,     0,   176,     0,   176,
       0,     0,     0,   176,   176,     0,   176,     0,     0,     0,
       0,     0,     0,     0,   176,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   955,     0,     0,   176,   176,     0,
       0,     0,     0,     0,     0,     0,     0,   680,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     378,     0,     0,     0,   378,     0,   176,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   404,     0,     0,  1000,     0,   716,     0,
       0,   719,     0,     0,   394,     0,     0,     0,   394,   481,
       0,   723,     0,     0,     0,     0,   481,     0,     0,     0,
     955,   378,     0,   404,   404,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,   176,     0,     0,     0,     0,     0,   746,
       0,     0,   750,     0,     0,     0,     0,   756,     0,     0,
       0,     0,     0,     0,   761,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     378,     0,     0,     0,   378,     0,     0,   378,     0,     0,
       0,     0,     0,     0,     0,     0,   176,     0,     0,     0,
       0,   955,   955,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   801,     0,     0,     0,
       0,   394,     0,   176,   176,   176,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   176,   176,
       0,   176,   176,     0,   176,   176,     0,     0,     0,   176,
       0,     0,     0,   845,     0,     0,   356,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   176,     0,     0,     0,
       0,     0,     0,     0,   176,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,     0,   378,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   897,     0,   898,
       0,     0,     0,   901,   756,     0,   756,     0,   176,     0,
       0,     0,     0,     0,   915,     0,     0,     0,   955,   955,
       0,     0,     0,     0,   951,  1234,     0,   960,   961,     0,
       0,     0,     0,   176,     0,   176,   725,     0,     0,     0,
       0,   378,   378,     0,   930,     0,     0,     0,     0,     0,
       0,   931,     0,     0,     0,     0,   978,   176,     0,   136,
     137,     0,     0,     0,     0,     0,     0,   934,     0,   935,
       0,     0,     0,   469,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   138,     0,     0,    31,   176,   955,     0,     0,
     951,     0,     0,   214,     0,     0,     0,     0,    44,     0,
       0,   176,     0,     0,    50,    51,     0,   139,   140,     0,
    1054,   141,   142,   481,   143,   144,   145,   146,   147,     0,
       0,   148,    63,   149,    64,     0,     0,   176,   176,   176,
       0,     0,     0,     0,   725,   150,   151,     0,     0,     0,
       0,     0,   930,     0,     0,  1083,   152,     0,     0,   931,
     153,   932,   154,   155,     0,   156,   157,   136,   137,     0,
       0,   819,   933,     0,     0,   934,     0,   935,     0,   820,
       0,     0,     0,     0,     0,     0,   481,     0,     0,     0,
     936,   951,   951,     0,     0,    23,     0,    25,     0,     0,
     138,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,   937,     0,  1136,  1139,  1140,    44,     0,     0,     0,
       0,     0,    50,    51,     0,   139,   140,     0,     0,   141,
     142,     0,   143,   144,   145,   146,   147,     0,     0,   148,
      63,   938,    64,     0,     0,     0,     0,     0,     0,  1169,
       0,     0,     0,   150,   151,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   939,     0,     0,     0,   153,     0,
     940,   941,     0,   156,   157,     0,  1182,     0,     0,     0,
       0,     0,     0,     0,  1054,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   725,     0,     0,     0,     0,     0,
       0,     0,   930,     0,     0,  1203,     0,     0,     0,   931,
       0,   932,     0,     0,     0,     0,     0,   136,   137,     0,
       0,   819,   933,     0,     0,   934,     0,   935,     0,   820,
       0,     0,     0,     0,     0,     0,     0,     0,  1218,     0,
       0,     0,     0,     0,     0,    23,     0,    25,   951,   951,
     138,     0,     0,    31,     0,   951,     0,     0,     0,     0,
       0,   937,     0,  1239,     0,  1241,    44,     0,     0,     0,
       0,     0,    50,    51,     0,   139,   140,     0,     0,   141,
     142,     0,   143,   144,   145,   146,   147,  1260,     0,   148,
      63,   938,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   939,     0,     0,     0,   153,     0,
     940,   941,     0,   156,   157,     0,     0,   951,     0,     0,
       0,     0,     0,    12,     0,   309,     0,     0,     0,   310,
       0,  1300,     0,     0,     0,     0,     0,     0,   311,     0,
     312,     0,     0,     0,   313,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1314,    13,    14,
      15,    16,    17,    18,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,     0,     0,     0,     0,
       0,    60,    61,    62,    63,     0,    64,     0,     0,     0,
       0,   116,   314,   315,   316,   317,   318,   319,   320,   250,
     251,   252,   253,   270,   271,   272,   273,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,   325,   118,   326,   327,   328,   489,     0,     0,     0,
       0,    12,     0,     0,     0,     0,   384,     0,     0,     0,
       0,   135,     0,     0,     0,     0,     0,     0,     0,   136,
     137,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
      17,    18,    19,     0,    20,    21,    22,    23,    24,    25,
      26,    27,   385,    29,    30,    31,    32,    33,    34,   386,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,   387,   388,    55,
      56,   389,   390,    59,   143,   144,   145,   146,   147,    60,
      61,   391,    63,   149,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   150,   151,     0,     0,    12,
       0,     0,     0,     0,   384,     0,   392,     0,     0,   135,
     393,   215,   154,   155,     0,   156,   157,   136,   137,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
      19,     0,    20,    21,    22,    23,    24,    25,    26,    27,
     385,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,   387,   388,    55,    56,   389,
     390,    59,   143,   144,   145,   146,   147,    60,    61,   391,
      63,   149,    64,     0,     0,     0,     0,     0,     0,    12,
       0,     0,     0,   150,   151,     0,     0,     0,     0,   135,
       0,   932,     0,     0,   392,     0,     0,     0,   393,  -788,
     154,   155,   933,   156,   157,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
      19,     0,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,     0,     0,     0,     0,     0,    60,    61,    62,
      63,     0,  1047,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     383,     0,     0,     0,     0,    12,     0,     0,     0,     0,
     384,     0,     0,     0,     0,   135,     0,     0,     0,     0,
       0,     0,     0,   136,   137,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,    14,    15,    16,    17,    18,    19,     0,    20,    21,
      22,    23,    24,    25,    26,    27,   385,    29,    30,    31,
      32,    33,    34,   386,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,   387,   388,    55,    56,   389,   390,    59,   143,   144,
     145,   146,   147,    60,    61,   391,    63,   149,    64,   468,
       0,     0,     0,     0,    12,     0,     0,     0,     0,   150,
     151,     0,     0,     0,   135,     0,     0,     0,     0,     0,
     392,     0,   136,   137,   393,     0,   154,   155,     0,   156,
     157,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,   385,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
     387,   388,    55,    56,   389,   390,    59,   143,   144,   145,
     146,   147,    60,    61,   391,    63,   149,    64,   606,     0,
       0,     0,     0,    12,     0,     0,     0,     0,   150,   151,
       0,     0,     0,   135,     0,     0,     0,     0,     0,   152,
       0,   136,   137,   153,     0,   154,   155,     0,   156,   157,
       0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
      15,    16,    17,    18,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,   385,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,   387,
     388,    55,    56,   389,   390,    59,   143,   144,   145,   146,
     147,    60,    61,   391,    63,   149,    64,  1042,     0,     0,
       0,     0,    12,     0,     0,     0,     0,   150,   151,     0,
       0,     0,   135,     0,     0,     0,     0,     0,   152,     0,
     136,   137,   153,     0,   154,   155,     0,   156,   157,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,   385,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,   387,   388,
      55,    56,   389,   390,    59,   143,   144,   145,   146,   147,
      60,    61,   391,    63,   149,    64,   980,     0,     0,     0,
       0,     0,  -461,     0,     0,     0,   150,   151,     0,     0,
    -461,   135,     0,     0,     0,     0,     0,   152,     0,   136,
     137,   153,     0,   154,   155,     0,   156,   157,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   138,     0,     0,    31,  1157,     0,     0,  -461,
       0,     0,  -788,     0,     0,     0,     0,     0,    44,     0,
    -788,   135,     0,     0,    50,    51,     0,   139,   140,   136,
     137,   141,   142,     0,   143,   144,   145,   146,   147,     0,
       0,   148,    63,   149,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,    23,     0,    25,
       0,     0,   138,     0,     0,    31,   152,     0,     0,  -788,
     153,     0,   154,   155,     0,   156,   157,     0,    44,     0,
       0,     0,     0,     0,    50,    51,     0,   139,   140,     0,
     468,   141,   142,     0,   143,   144,   145,   146,   147,     0,
       0,   148,    63,   149,    64,   135,     0,     0,     0,     0,
       0,     0,     0,   136,   137,   150,   151,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   152,     0,     0,     0,
     153,     0,   154,   155,     0,   156,   157,     0,     0,     0,
       0,    23,     0,    25,     0,     0,   138,     0,     0,    31,
     474,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,     0,     0,   135,     0,     0,    50,    51,
       0,   139,   140,   136,   137,   141,   142,     0,   143,   144,
     145,   146,   147,     0,     0,   148,    63,   149,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,    23,     0,    25,     0,     0,   138,     0,     0,    31,
     152,     0,     0,     0,   153,     0,   154,   155,     0,   156,
     157,     0,    44,     0,     0,     0,     0,     0,    50,    51,
       0,   139,   140,     0,   578,   141,   142,     0,   143,   144,
     145,   146,   147,     0,     0,   148,    63,   149,    64,   135,
       0,     0,     0,     0,     0,     0,     0,   136,   137,   150,
     151,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     152,     0,     0,     0,   153,     0,   154,   155,     0,   156,
     157,     0,     0,     0,     0,    23,     0,    25,     0,     0,
     138,     0,     0,    31,   715,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,     0,   135,
       0,     0,    50,    51,     0,   139,   140,   136,   137,   141,
     142,     0,   143,   144,   145,   146,   147,     0,     0,   148,
      63,   149,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,    23,     0,    25,     0,     0,
     138,     0,     0,    31,   152,     0,     0,     0,   153,     0,
     154,   155,     0,   156,   157,     0,    44,     0,     0,     0,
       0,     0,    50,    51,     0,   139,   140,     0,   753,   141,
     142,     0,   143,   144,   145,   146,   147,     0,     0,   148,
      63,   149,    64,   135,     0,     0,     0,     0,     0,     0,
       0,   136,   137,   150,   151,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   152,     0,     0,     0,   153,     0,
     154,   155,     0,   156,   157,     0,     0,     0,     0,    23,
       0,    25,     0,     0,   138,     0,     0,    31,   904,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,   135,     0,     0,    50,    51,     0,   139,
     140,   136,   137,   141,   142,     0,   143,   144,   145,   146,
     147,     0,     0,   148,    63,   149,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   150,   151,    23,
       0,    25,     0,     0,   138,     0,     0,    31,   152,     0,
       0,     0,   153,     0,   154,   155,     0,   156,   157,     0,
      44,     0,     0,     0,     0,     0,    50,    51,     0,   139,
     140,     0,  1109,   141,   142,     0,   143,   144,   145,   146,
     147,     0,     0,   148,    63,   149,    64,   135,     0,     0,
       0,     0,     0,     0,     0,   136,   137,   150,   151,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   152,     0,
       0,     0,   153,     0,   154,   155,     0,   156,   157,     0,
       0,     0,     0,    23,     0,    25,     0,     0,   138,     0,
       0,    31,  1111,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,  -159,     0,     0,
      50,    51,     0,   139,   140,  -159,  -159,   141,   142,     0,
     143,   144,   145,   146,   147,     0,     0,   148,    63,   149,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   150,   151,  -159,     0,  -159,     0,     0,  -159,     0,
       0,  -159,   392,     0,     0,     0,   393,     0,   154,   155,
       0,   156,   157,     0,  -159,     0,     0,     0,     0,     0,
    -159,  -159,     0,  -159,  -159,     0,  1137,  -159,  -159,     0,
    -159,  -159,  -159,  -159,  -159,     0,     0,  -159,  -159,  -159,
    -159,   135,     0,     0,     0,     0,     0,     0,     0,   136,
     137,  -159,  -159,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -159,     0,     0,     0,  -159,     0,  -159,  -159,
       0,  -159,  -159,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   138,     0,     0,    31,  1160,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
       0,   135,     0,     0,    50,    51,     0,   139,   140,   136,
     137,   141,   142,     0,   143,   144,   145,   146,   147,     0,
       0,   148,    63,   149,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,    23,     0,    25,
       0,     0,   138,     0,     0,    31,   152,     0,     0,     0,
     153,     0,   154,   155,     0,   156,   157,     0,    44,     0,
       0,     0,     0,     0,    50,    51,     0,   139,   140,     0,
    1164,   141,   142,     0,   143,   144,   145,   146,   147,     0,
       0,   148,    63,   149,    64,   135,     0,     0,     0,     0,
       0,     0,     0,   136,   137,   150,   151,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   152,     0,     0,     0,
     153,     0,   154,   155,     0,   156,   157,     0,     0,     0,
       0,    23,     0,    25,     0,     0,   138,     0,     0,    31,
    1240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,     0,     0,   135,     0,     0,    50,    51,
       0,   139,   140,   136,   137,   141,   142,     0,   143,   144,
     145,   146,   147,     0,     0,   148,    63,   149,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,    23,     0,    25,     0,     0,   138,     0,     0,    31,
     152,     0,     0,     0,   153,     0,   154,   155,     0,   156,
     157,     0,    44,     0,     0,     0,     0,     0,    50,    51,
       0,   139,   140,     0,  1287,   141,   142,     0,   143,   144,
     145,   146,   147,     0,     0,   148,    63,   149,    64,   135,
       0,     0,     0,     0,     0,     0,     0,   136,   137,   150,
     151,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     152,     0,     0,     0,   153,     0,   154,   155,     0,   156,
     157,     0,     0,     0,     0,    23,     0,    25,     0,     0,
     138,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,     0,     0,
       0,     0,    50,    51,     0,   139,   140,     0,     0,   141,
     142,     0,   143,   144,   145,   146,   147,     0,     0,   148,
      63,   149,    64,    12,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   152,     0,     0,     0,   153,     0,
     154,   155,     0,   156,   157,     0,     0,     0,    13,    14,
      15,    16,    17,    18,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,     0,     0,     0,     0,
      12,    60,    61,    62,    63,     0,    64,     0,     0,     0,
     135,   116,     0,     0,     0,     0,     0,     0,   136,   137,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,   118,    20,    21,    22,    23,    24,    25,    26,
      27,   385,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,   387,   388,    55,    56,
     389,   390,    59,   143,   144,   145,   146,   147,    60,    61,
     391,    63,   149,    64,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,   151,     0,     0,    12,     0,
       0,     0,     0,     0,     0,   392,   483,     0,   135,   393,
       0,   154,   155,     0,   156,   157,   136,   137,     0,     0,
     819,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,   385,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,   387,   388,    55,    56,   389,   390,
      59,   143,   144,   145,   146,   147,    60,    61,   391,    63,
     149,    64,     0,     0,     0,     0,    12,     0,     0,     0,
       0,     0,   150,   151,     0,     0,   135,     0,     0,     0,
       0,     0,     0,   939,   136,   137,     0,   153,     0,   154,
     155,     0,   156,   157,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,    17,    18,    19,     0,    20,
      21,    22,    23,    24,    25,    26,    27,   385,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,   387,   388,    55,    56,   389,   390,    59,   143,
     144,   145,   146,   147,    60,    61,   391,    63,   149,    64,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
     150,   151,     0,     0,   135,     0,     0,     0,     0,     0,
       0,   152,   136,   137,     0,   153,     0,   154,   155,     0,
     156,   157,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,   385,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
     387,   388,    55,    56,   389,   390,    59,   143,   144,   145,
     146,   147,    60,    61,   391,    63,   149,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,   151,
       0,     0,    12,     0,     0,     0,     0,     0,     0,   392,
       0,     0,   135,   393,   932,   154,   155,     0,   156,   157,
     136,   137,     0,     0,     0,   933,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,   385,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,   387,   388,
      55,    56,   389,   390,    59,   143,   144,   145,   146,   147,
      60,    61,   391,    63,   149,    64,     0,   613,     0,     0,
       0,     0,    12,     0,     0,     0,   150,   151,     0,     0,
       0,     0,     0,     0,   614,     0,     0,   152,     0,     0,
       0,   153,     0,   154,   155,   615,     0,     0,     0,     0,
       0,     0,     0,     0,  -796,     0,     0,    13,    14,    15,
      16,    17,    18,    19,   616,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,     0,     0,     0,     0,     0,
      60,    61,    62,   617,     0,    64,  1236,     0,     0,   618,
       0,    12,     0,     0,     0,     0,  -236,     0,     0,     0,
    -788,     0,     0,     0,     0,     0,     0,     0,   619,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
      17,    18,    19,     0,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,     0,     0,     0,     0,     0,    60,
      61,    62,    63,   634,    64,   335,   635,     0,     0,     0,
       0,   135,   636,     0,   637,   638,     0,     0,     0,     0,
     639,     0,   640,     0,     0,     0,     0,  -788,   641,     0,
       0,     0,     0,     0,   642,   643,     0,     0,     0,     0,
     644,     0,     0,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   138,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,   645,   646,     0,     0,    44,   647,
       0,     0,     0,     0,    50,    51,     0,   139,   140,   648,
     649,   141,   142,   650,   143,   301,     0,     0,     0,   651,
     652,   148,    63,   634,    64,   335,   635,     0,     0,     0,
       0,   135,   636,     0,   637,   638,     0,     0,     0,     0,
     639,     0,   640,     0,     0,     0,   152,     0,   641,     0,
       0,     0,   653,     0,   642,   643,     0,     0,     0,     0,
     644,     0,     0,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   138,     0,     0,    31,     0,     0,     0,     0,
       0,  -294,   135,     0,   645,   646,     0,     0,    44,   647,
     136,   137,     0,     0,    50,    51,     0,   139,   140,   648,
     649,   141,   142,   650,   143,     0,     0,     0,     0,   651,
     652,   148,    63,     0,    64,     0,     0,     0,    23,     0,
      25,     0,     0,   138,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   152,     0,     0,    44,
       0,     0,   653,     0,     0,    50,    51,     0,   139,   140,
       0,     0,   141,   142,     0,   143,   144,   145,   146,   147,
       0,     0,   148,    63,   149,    64,   135,     0,     0,     0,
       0,     0,     0,     0,   136,   137,   150,   151,     0,     0,
       0,     0,     0,     0,     0,     0,  -294,   152,     0,     0,
       0,   153,     0,   154,   155,     0,   156,   157,     0,     0,
       0,     0,    23,     0,    25,     0,     0,   138,     0,     0,
      31,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,     0,     0,   135,     0,     0,    50,
      51,     0,   139,   140,   136,   137,   141,   142,   819,   143,
     144,   145,   146,   147,     0,     0,   148,    63,   149,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,    23,     0,    25,     0,     0,   138,     0,     0,
      31,   152,     0,     0,     0,   153,   215,   154,   155,     0,
     156,   157,     0,    44,     0,     0,   135,     0,     0,    50,
      51,     0,   139,   140,   136,   137,   141,   142,     0,   143,
     144,   145,   146,   147,     0,     0,   148,    63,   149,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,    23,     0,    25,     0,     0,   138,     0,     0,
      31,   939,     0,     0,     0,   153,     0,   154,   155,     0,
     156,   157,     0,    44,     0,     0,   135,     0,     0,    50,
      51,     0,   139,   140,   136,   137,   141,   142,     0,   143,
     144,   145,   146,   147,     0,     0,   148,    63,   149,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,    23,     0,    25,     0,     0,   138,     0,     0,
      31,   152,     0,     0,     0,   153,     0,   154,   155,     0,
     156,   157,     0,    44,     0,     0,   135,     0,     0,    50,
      51,     0,   139,   140,   136,   137,   141,   142,     0,   143,
     144,   145,   146,   147,     0,     0,   148,    63,   149,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,    23,     0,    25,     0,     0,   138,     0,     0,
      31,   392,     0,     0,     0,   393,     0,   154,   155,     0,
     156,   157,     0,    44,     0,     0,     0,     0,     0,    50,
      51,     0,   139,   140,     0,     0,   141,   142,     0,   143,
     144,   145,   146,   147,     0,   814,   148,    63,   149,    64,
      12,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,   614,     0,     0,     0,     0,     0,     0,     0,
       0,   152,     0,   615,     0,   153,     0,   154,   155,     0,
       0,     0,  -796,     0,     0,    13,    14,    15,    16,    17,
      18,    19,   616,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,     0,     0,     0,     0,   530,    60,    61,
      62,   617,    12,    64,     0,     0,  -129,   815,     0,     0,
       0,  -129,     0,     0,  -129,     0,     0,     0,  -129,     0,
       0,     0,     0,     0,     0,  -129,  -129,     0,     0,     0,
       0,     0,  -129,     0,  -129,     0,     0,    13,    14,    15,
      16,    17,    18,    19,  -129,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,     0,     0,     0,     0,   852,
      60,    61,    62,    63,    12,    64,     0,     0,  -128,     0,
       0,     0,     0,  -128,     0,     0,  -128,     0,     0,     0,
    -128,     0,     0,     0,     0,     0,     0,  -128,  -128,     0,
       0,     0,     0,     0,  -128,     0,  -128,     0,     0,    13,
      14,    15,    16,    17,    18,    19,  -128,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,     0,     0,     0,
       0,   557,    60,    61,    62,    63,    12,    64,     0,     0,
       0,     0,     0,     0,     0,   -75,     0,     0,   -75,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -75,
       0,     0,     0,     0,     0,     0,   -75,     0,   -75,     0,
       0,    13,    14,    15,    16,    17,    18,    19,   -75,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,     0,
       0,     0,     0,  1253,    60,    61,    62,    63,  -796,    64,
       0,     0,     0,     0,     0,     0,     0,  -796,     0,     0,
    -796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -796,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -796,  -796,  -796,  -796,  -796,  -796,  -796,
       0,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,
    -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,
    -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,
    -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,
    -796,     0,     0,     0,     0,  1033,  -796,  -796,  -796,  -796,
    -219,  -796,     0,     0,     0,  -219,     0,     0,     0,  -219,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -219,  -219,  -219,  -219,  -219,
    -219,  -219,     0,  -219,  -219,  -219,  -219,  -219,  -219,  -219,
    -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,
    -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,
    -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,
    -219,  -219,  -219,     0,     0,     0,     0,   300,  -219,  -219,
    -219,  -219,    12,  -219,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,     0,   301,     0,     0,   515,
      60,    61,    62,    63,    12,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,     0,   301,     0,
       0,    11,    60,    61,    62,    63,    12,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,    17,    18,    19,     0,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,     0,
       0,     0,     0,   131,    60,    61,    62,    63,    12,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,     0,     0,     0,     0,   347,    60,    61,    62,    63,
      12,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,     0,     0,     0,     0,   530,    60,    61,
      62,    63,    12,    64,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,     0,     0,     0,     0,   535,
      60,    61,    62,    63,    12,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,     0,     0,     0,
       0,   551,    60,    61,    62,    63,    12,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,    17,    18,    19,     0,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,     0,
       0,     0,     0,   666,    60,    61,    62,    63,    12,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,     0,     0,     0,     0,   695,    60,    61,    62,    63,
      12,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,     0,     0,     0,     0,   785,    60,    61,
      62,   617,    12,    64,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,     0,     0,     0,     0,   869,
      60,    61,    62,    63,    12,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,     0,     0,     0,
       0,   916,    60,    61,    62,   617,    12,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,    17,    18,    19,     0,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,     0,
       0,     0,     0,  1098,    60,    61,    62,    63,    12,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,     0,     0,     0,     0,  1147,    60,    61,    62,    63,
      12,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,     0,     0,     0,     0,  1197,    60,    61,
      62,    63,    12,    64,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,     0,    12,     0,     0,     0,
      60,    61,    62,    63,     0,    64,   135,     0,   932,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   933,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,    17,    18,    19,  -790,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    12,
       0,     0,     0,     0,    60,    61,    62,    63,     0,    64,
       0,   614,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   615,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
      19,   616,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,     0,    12,     0,     0,     0,    60,    61,    62,
     617,     0,    64,   135,     0,   932,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   933,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
      15,    16,    17,    18,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    12,     0,     0,     0,
       0,    60,    61,    62,    63,     0,    64,     0,  1271,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1272,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,  1273,    15,    16,    17,  1274,    19,     0,  1275,
    1276,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,  1277,    45,    46,    47,    48,    49,  1278,
    1279,    52,    53,    54,    55,    56,    57,    58,    59,    12,
       0,     0,     0,     0,    60,    61,    62,  1280,     0,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
      19,    98,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    12,     0,     0,     0,     0,    60,    61,    62,
      63,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    12,   301,     0,     0,     0,
      60,    61,    62,    63,     0,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   733,     0,     0,
      13,    14,    15,    16,    17,    18,    19,     0,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,     0,     0,
       0,     0,    12,    60,    61,    62,    63,  -796,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    12,     0,     0,     0,     0,
      60,    61,    62,    63,     0,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,    14,    15,    16,    17,    18,    19,     0,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    12,     0,
       0,     0,     0,    60,    61,    62,    63,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    12,     0,     0,     0,     0,    60,    61,    62,    63,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
      17,    18,    19,     0,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    12,     0,     0,     0,     0,    60,
      61,    62,    63,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    12,     0,     0,
       0,     0,    60,    61,    62,    63,     0,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    13,    14,    15,    16,    17,    18,    19,     0,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
       0,     0,     0,     0,     0,    60,    61,    62,   617,     0,
      64
};

/* YYCONFLP[YYPACT[STATE-NUM]] -- Pointer into YYCONFL of start of
   list of conflicting reductions corresponding to action entry for
   state STATE-NUM in yytable.  0 means no conflicts.  The list in
   yyconfl is terminated by a rule number of 0.  */
static const unsigned char yyconflp[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   171,     0,
     103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   173,     0,     0,
       0,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    69,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   105,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    71,     0,     0,
      73,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   165,     0,     0,     0,     0,   167,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,     0,   169,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,     0,     0,     0,     0,    27,    29,    31,    33,    35,
       0,    37,     0,     0,     0,     0,     0,   123,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,     0,     0,     0,     0,     0,    67,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    65,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    47,    49,    51,    53,    55,     0,    57,     0,
       0,     0,     0,     0,     0,    17,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    19,     0,     0,    21,     0,     0,     0,     0,
       0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   159,     0,     0,     0,   161,     0,     0,     0,   163,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    75,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    77,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    79,    81,     0,     0,     0,
       0,    83,     0,     0,    85,     0,     0,     0,     0,    87,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   107,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   109,   111,     0,
       0,     0,     0,   113,     0,     0,   115,     0,     0,     0,
       0,   117,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    59,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    61,     0,     0,     0,
       0,     0,     0,    63,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   127,   129,     0,     0,     0,     0,     0,
       0,     0,   131,     0,   133,     0,     0,     0,     0,   135,
     137,     0,     0,     0,     0,   139,   141,     0,     0,   143,
     145,     0,     0,   147,   149,     0,     0,     0,     0,   151,
     153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   155,     0,   157,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     3,     0,     0,     0,     0,     5,     0,     0,
       7,     0,     0,     0,     0,     9,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    11,     0,     0,     0,
       0,    13,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    15,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    89,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    91,    93,     0,
       0,     0,     0,    95,     0,     0,    97,     0,     0,     0,
       0,    99,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0
};

/* YYCONFL[I] -- lists of conflicting rule numbers, each terminated by
   0, pointed into by YYCONFLP.  */
static const short int yyconfl[] =
{
       0,    78,     0,    78,     0,    78,     0,    78,     0,    78,
       0,   753,     0,   753,     0,   753,     0,   731,     0,   732,
       0,   735,     0,   733,     0,   796,     0,   796,     0,   728,
       0,   796,     0,   796,     0,   796,     0,   796,     0,   631,
       0,   631,     0,   631,     0,   771,     0,   771,     0,   771,
       0,   771,     0,   771,     0,   771,     0,   771,     0,    75,
       0,    75,     0,    75,     0,   531,     0,   613,     0,   639,
       0,   639,     0,   639,     0,   788,     0,   129,     0,   129,
       0,   129,     0,   129,     0,   129,     0,   129,     0,   126,
       0,   126,     0,   126,     0,   126,     0,   126,     0,   126,
       0,   172,     0,   640,     0,   640,     0,   128,     0,   128,
       0,   128,     0,   128,     0,   128,     0,   128,     0,   177,
       0,   174,     0,   177,     0,   599,     0,   541,     0,   541,
       0,   541,     0,   541,     0,   541,     0,   541,     0,   541,
       0,   541,     0,   541,     0,   541,     0,   541,     0,   541,
       0,   541,     0,   541,     0,   541,     0,   541,     0,   771,
       0,   771,     0,   771,     0,   146,     0,   146,     0,   146,
       0,   142,     0,   142,     0
};

static const short int yycheck[] =
{
       9,     9,    11,   426,   154,   482,   306,   539,   165,   611,
     610,   184,    77,   101,   426,   629,   210,   407,   675,   196,
     128,   581,   172,   751,   752,   280,   281,   629,   928,   329,
     865,   353,   740,   386,   352,   353,   393,   133,   187,   392,
     860,   123,   876,   776,  1035,   632,     1,   511,     1,   392,
     726,   538,    26,     1,     2,   171,    65,  1028,     1,   740,
      13,   206,    10,   211,   209,     1,   531,    76,   995,   903,
       1,    15,    81,    81,  1001,    84,   466,     1,   528,    15,
     914,    62,    66,    11,    55,     1,     7,   104,    46,    46,
       1,    97,    92,    37,    38,   183,     6,   106,    98,     1,
     109,   109,   662,   811,     1,    15,   115,   100,    18,    53,
     122,   104,   124,   841,     1,   121,   936,    75,   135,    29,
     122,   849,   830,     1,   857,   109,    97,   129,   128,   547,
     811,  1122,   282,   283,   284,    83,    84,    65,   940,   941,
     121,     1,   135,    64,   292,   261,   499,   263,     1,   830,
     121,   125,   860,    63,   497,   498,   574,  1084,   992,   336,
       1,   104,     1,   111,   112,     1,   631,   115,   104,   346,
     123,   899,     1,   121,   129,     1,   120,   120,   886,   860,
     104,   124,   669,     1,   120,     1,   195,   637,   124,   120,
     138,   805,   135,     1,     1,   126,   120,    15,   122,   135,
     124,  1101,     1,   805,  1195,   886,   506,   123,   808,   890,
     126,   135,   123,  1184,  1185,   126,   361,   517,   518,   519,
     632,   123,   124,   120,   102,   122,   123,   124,   936,   177,
     178,   179,   180,   181,   182,   183,   123,   590,  1229,   126,
       1,   594,   595,  1170,   831,   123,   124,   590,   126,   602,
     198,   594,  1086,  1055,   370,   936,     1,   938,     1,   940,
     941,   937,   350,   123,   124,     1,   126,   120,   445,   351,
     123,   571,   736,   737,  1007,   956,   102,     1,     1,    15,
       1,   120,   123,   124,   120,  1212,   122,  1214,   124,   298,
       1,   120,    26,   101,   102,   124,    97,   123,   124,   448,
     126,    15,   120,   102,     0,    41,   124,   123,   124,  1262,
      46,  1302,    37,   120,   122,   123,   124,  1319,  1245,  1246,
    1322,   129,    26,    15,   123,   124,     1,    37,    38,   102,
     339,    46,  1166,   865,   343,     1,    72,   425,  1238,   287,
    1267,     1,   290,   277,    15,   279,    38,   443,   121,   121,
      15,  1304,  1305,    15,  1082,    15,   120,   698,   972,   860,
     717,    53,   123,   124,   100,     1,    97,     1,   104,   121,
     972,  1191,   694,    38,  1055,   120,   694,  1211,   123,   122,
     123,   122,   123,   528,   120,     1,   122,  1222,   124,   104,
     120,   125,   340,   341,     1,   120,   120,   120,   122,   123,
     120,   122,   123,     1,     1,   882,   120,   416,   417,     7,
     120,   122,   123,  1313,  1248,   838,   425,    15,     8,   831,
     124,   860,    12,  1080,  1081,   433,   838,  1155,   120,   120,
     439,   731,   732,    23,  1162,   936,   384,   385,   546,   999,
     374,  1149,     1,  1263,   392,   393,   511,   122,   123,   120,
     538,    97,   700,    43,   795,   120,   122,   123,   120,   860,
     120,   409,   122,   411,   572,   997,    64,   415,  1149,     0,
     418,   726,   420,   421,   120,   423,   424,   425,   860,    69,
      70,   429,   430,   122,   123,  1213,   122,   123,   122,   123,
     438,   636,    81,    10,   442,   443,     1,   936,    15,    36,
      31,    38,   511,   451,   452,   982,   122,   123,   653,  1123,
      15,    48,   657,   122,   123,   122,   123,   956,   466,   909,
     109,  1123,   120,   120,   122,   122,   116,   117,   118,   119,
     539,   708,     1,   979,   120,   936,    41,    97,   547,   811,
      71,    46,   132,   133,   792,   554,    15,   495,   138,   497,
     498,   616,    72,   122,   936,   124,   968,   969,   830,   624,
     508,   120,   120,   122,    46,   574,    97,    72,   762,    51,
      46,   121,    41,     1,   522,   125,     1,    46,   122,     7,
     100,   529,     7,   531,   104,    97,     1,    15,   536,    41,
      15,    42,     7,    75,   100,   100,    72,    55,   104,   104,
      15,   610,   550,    72,   590,   860,   959,    56,   594,    37,
      61,   122,   123,   561,   886,   120,   121,   122,   123,   124,
      72,   126,  1068,  1069,   100,    53,    97,    78,   104,   135,
      81,   100,   932,   933,    98,   104,    64,   122,   123,    64,
    1172,  1173,   590,  1066,     1,   789,   594,   791,   100,    64,
    1127,   120,   104,   122,  1066,   120,    46,    14,   122,   747,
     121,   125,    52,   127,   128,   129,   614,   615,   733,  1022,
      60,   736,   737,    30,   739,     6,   684,    21,   766,   102,
     104,   936,   937,   631,    15,   773,   418,    18,   420,   698,
    1222,   121,   120,     1,   867,   120,    10,   121,    29,   122,
     121,   124,     6,   711,    18,   120,    10,    15,    22,  1309,
    1324,   135,   101,   102,    18,    29,   122,   123,    22,  1251,
     122,   123,  1324,   671,    55,    29,   121,   736,   737,  1106,
    1107,  1108,    63,    41,   121,    49,    50,   688,    46,   690,
     688,   121,   690,   691,   122,    49,    50,    98,   121,    63,
     907,  1006,   700,   701,    98,  1010,   100,   123,  1013,    63,
     104,     1,    10,  1295,    72,   120,   409,   855,   411,   717,
      67,   122,  1027,  1028,   125,    15,   127,   128,   129,   122,
       1,   125,   102,   127,   128,   129,   795,  1210,     7,   854,
     940,   135,   100,    35,    92,    16,   104,   122,  1210,   808,
      98,    41,   129,    24,    25,    21,    46,    28,   840,   124,
     842,  1288,   120,   121,   122,   123,   124,   462,   126,   464,
     129,   769,   770,   129,   122,   121,   124,   442,   443,   129,
     128,    52,    72,    54,   769,   770,    57,   340,   341,    60,
     129,   789,   121,   791,   792,   121,   794,  1003,  1004,  1304,
    1305,  1328,    73,   121,    98,   126,   865,   120,    79,    80,
     100,    82,    83,   122,   104,    86,    87,   121,    89,    90,
      91,    92,    93,  1192,  1193,    96,    97,    98,    99,    30,
     120,   125,   122,   127,   128,   129,  1220,  1221,   121,   110,
     111,   117,    31,   119,    55,   843,   736,   737,  1074,  1075,
     121,    26,  1077,  1078,   125,   120,   127,   128,   122,   130,
     131,   364,   365,    52,   923,    54,   925,   926,   927,   928,
     124,    60,   931,   120,   124,   126,   152,   153,   154,  1184,
    1185,   126,    64,   120,    73,   161,   120,   123,  1003,  1004,
      79,    80,   120,   891,    98,   171,   172,   120,   120,   120,
       1,   101,  1207,  1208,   121,    15,    30,    15,    97,   124,
      99,   909,   125,   122,   102,   122,    38,    15,   122,   123,
      97,   125,     1,   127,   128,   129,   124,   121,   121,   121,
     206,     1,   208,   209,   210,     7,    15,   124,   997,   124,
     938,   939,   940,   941,   124,    15,  1296,  1297,  1298,  1299,
     121,    52,   124,    54,   120,   129,    26,    13,  1263,    60,
      13,    15,    41,   122,    26,    26,  1025,    46,   124,   124,
      35,    41,    73,   124,   121,  1034,    46,   121,    79,    80,
      27,   979,   120,    75,   260,   261,    46,   263,    51,   126,
     124,    51,    52,    72,    54,   122,    97,  1056,    99,    26,
      60,   277,    72,   279,   280,   281,   282,   283,   284,     9,
     122,   287,     1,   120,    53,    75,    76,    77,    65,   295,
     125,   100,   122,   120,    26,   104,    42,    74,   124,    26,
     100,   125,   120,   102,   104,    48,   120,   120,    16,   120,
     120,   120,  1101,   122,   120,   102,    13,  1106,  1107,  1108,
     120,   121,   122,   123,    13,   125,   126,  1055,   105,   129,
      54,    15,    61,   110,   111,   112,   113,   114,   115,    78,
    1068,  1069,   122,  1071,    52,    26,    54,    15,   122,   355,
     102,    26,    60,   130,   131,   361,    16,   363,   364,   365,
     137,   126,   123,   121,   370,    73,   122,   373,   374,   375,
     121,    79,    80,   122,   122,   120,   126,    15,   384,    11,
     386,    26,   124,  1172,   120,   126,   392,   393,    15,    97,
     124,    99,    52,    13,    54,  1183,    26,    57,    26,   125,
      60,   407,   122,   124,    15,  1133,   412,  1135,    15,    15,
    1255,    97,   124,    73,   120,   122,  1204,   121,   121,    79,
      80,   122,    82,    83,   197,    71,    86,    87,   799,    89,
    1219,  1220,  1221,  1222,   969,     9,    96,    97,    52,    99,
      54,   117,    16,   119,   106,   567,    60,   701,   550,  1238,
     707,   782,   439,   559,    28,   461,   462,   536,   464,    73,
     466,   121,    36,  1191,  1204,    79,    80,  1255,   772,   936,
     956,   477,   478,  1263,   926,   574,   152,   153,    52,   352,
      54,   115,   817,    97,  1149,    99,    60,   493,   890,   495,
    1306,   497,   498,   499,   657,   766,  1172,   260,  1173,    73,
     844,   804,   495,   495,   183,    79,    80,   496,    21,   287,
     183,   637,    71,    -1,    27,    -1,    -1,    -1,    -1,    -1,
    1309,    -1,   528,    97,  1313,    99,    -1,    -1,    -1,    -1,
    1319,    -1,   208,  1322,   210,    -1,    -1,   543,    -1,    -1,
      -1,    -1,    -1,  1271,  1272,    -1,    -1,  1275,  1276,    -1,
      44,    -1,    65,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      54,    74,    -1,    -1,     9,    59,    60,    -1,    -1,    -1,
      -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,   584,    73,
      -1,   587,    -1,    28,   590,    79,    80,    -1,   594,   595,
      -1,   597,   105,   106,   107,   108,   602,   110,   111,   112,
     113,   114,   115,    97,    -1,    99,    -1,    52,    -1,    54,
      -1,   287,    -1,    -1,    -1,    60,    -1,   130,   131,   295,
      -1,   134,   135,   136,   137,    -1,    -1,    -1,    73,   635,
     636,   637,   638,     6,    79,    80,    -1,   643,    -1,    -1,
      -1,    -1,    15,    -1,   650,    18,    -1,   653,    -1,    -1,
      -1,   657,    97,    52,    99,    54,    29,    30,    -1,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   675,
      -1,    -1,    -1,    -1,    73,    -1,    49,    50,    -1,   355,
      79,    80,    -1,    -1,    -1,   361,    -1,   363,   364,   365,
      63,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    -1,
      99,    -1,    -1,     6,    -1,    -1,   712,    10,   384,    -1,
     386,   717,    15,    -1,    -1,    18,   392,   393,    -1,    22,
     726,    -1,    -1,    -1,    -1,    -1,    29,    30,    -1,    -1,
      -1,   407,    -1,    -1,   740,    -1,   412,    -1,    -1,    -1,
      99,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    -1,
      -1,    -1,    -1,   759,   760,    58,   762,    -1,    -1,    -1,
      63,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
     466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   811,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   493,    -1,   495,
      -1,   497,   498,   499,   830,    -1,    -1,   833,    -1,   835,
      -1,    -1,    -1,   839,   840,    -1,   842,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   850,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   860,    -1,    -1,   863,   864,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   543,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     886,    -1,    -1,    -1,   890,    -1,   892,    -1,    -1,    -1,
     896,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   909,    -1,    -1,   912,    -1,   584,    -1,
      -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,
      -1,   597,    -1,    -1,    -1,    -1,   602,    -1,    -1,    -1,
     936,   937,    -1,   939,   940,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     956,    -1,    -1,   959,    -1,    -1,    -1,    -1,    -1,   635,
      -1,    -1,   638,    -1,    -1,    -1,    -1,   643,    -1,    -1,
      -1,    -1,    -1,    -1,   650,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   991,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1006,    -1,    -1,    -1,  1010,    -1,    -1,  1013,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1022,    -1,    -1,    -1,
      -1,  1027,  1028,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   712,    -1,    -1,    -1,
      -1,   717,    -1,  1049,  1050,  1051,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1074,  1075,
      -1,  1077,  1078,    -1,  1080,  1081,    -1,    -1,    -1,  1085,
      -1,    -1,    -1,   759,    -1,    -1,   762,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1112,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1141,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1149,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   833,    -1,   835,
      -1,    -1,    -1,   839,   840,    -1,   842,    -1,  1174,    -1,
      -1,    -1,    -1,    -1,   850,    -1,    -1,    -1,  1184,  1185,
      -1,    -1,    -1,    -1,   860,  1191,    -1,   863,   864,    -1,
      -1,    -1,    -1,  1199,    -1,  1201,     1,    -1,    -1,    -1,
      -1,  1207,  1208,    -1,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    16,    -1,    -1,    -1,    -1,   892,  1223,    -1,    24,
      25,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,
      -1,    -1,    -1,   909,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,  1262,  1263,    -1,    -1,
     936,    -1,    -1,   939,    -1,    -1,    -1,    -1,    73,    -1,
      -1,  1277,    -1,    -1,    79,    80,    -1,    82,    83,    -1,
     956,    86,    87,   959,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,    -1,  1303,  1304,  1305,
      -1,    -1,    -1,    -1,     1,   110,   111,    -1,    -1,    -1,
      -1,    -1,     9,    -1,    -1,   991,   121,    -1,    -1,    16,
     125,    18,   127,   128,    -1,   130,   131,    24,    25,    -1,
      -1,    28,    29,    -1,    -1,    32,    -1,    34,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,  1022,    -1,    -1,    -1,
      47,  1027,  1028,    -1,    -1,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,  1049,  1050,  1051,    73,    -1,    -1,    -1,
      -1,    -1,    79,    80,    -1,    82,    83,    -1,    -1,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,  1085,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,   125,    -1,
     127,   128,    -1,   130,   131,    -1,  1112,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     9,    -1,    -1,  1141,    -1,    -1,    -1,    16,
      -1,    18,    -1,    -1,    -1,    -1,    -1,    24,    25,    -1,
      -1,    28,    29,    -1,    -1,    32,    -1,    34,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1174,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    -1,    54,  1184,  1185,
      57,    -1,    -1,    60,    -1,  1191,    -1,    -1,    -1,    -1,
      -1,    68,    -1,  1199,    -1,  1201,    73,    -1,    -1,    -1,
      -1,    -1,    79,    80,    -1,    82,    83,    -1,    -1,    86,
      87,    -1,    89,    90,    91,    92,    93,  1223,    -1,    96,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,   125,    -1,
     127,   128,    -1,   130,   131,    -1,    -1,  1263,    -1,    -1,
      -1,    -1,    -1,     6,    -1,     8,    -1,    -1,    -1,    12,
      -1,  1277,    -1,    -1,    -1,    -1,    -1,    -1,    21,    -1,
      23,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1303,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    94,    95,    96,    97,    -1,    99,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,   134,   135,   136,   137,   138,     1,    -1,    -1,    -1,
      -1,     6,    -1,    -1,    -1,    -1,    11,    -1,    -1,    -1,
      -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,   110,   111,    -1,    -1,     6,
      -1,    -1,    -1,    -1,    11,    -1,   121,    -1,    -1,    16,
     125,   126,   127,   128,    -1,   130,   131,    24,    25,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,     6,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    16,
      -1,    18,    -1,    -1,   121,    -1,    -1,    -1,   125,   126,
     127,   128,    29,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,
      97,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,     1,
      -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,
     121,    -1,    24,    25,   125,    -1,   127,   128,    -1,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,     1,    -1,
      -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,   121,
      -1,    24,    25,   125,    -1,   127,   128,    -1,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,     1,    -1,    -1,
      -1,    -1,     6,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,   121,    -1,
      24,    25,   125,    -1,   127,   128,    -1,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,     1,    -1,    -1,    -1,
      -1,    -1,     7,    -1,    -1,    -1,   110,   111,    -1,    -1,
      15,    16,    -1,    -1,    -1,    -1,    -1,   121,    -1,    24,
      25,   125,    -1,   127,   128,    -1,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,     1,    -1,    -1,    64,
      -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      15,    16,    -1,    -1,    79,    80,    -1,    82,    83,    24,
      25,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,   121,    -1,    -1,    64,
     125,    -1,   127,   128,    -1,   130,   131,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    79,    80,    -1,    82,    83,    -1,
       1,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,
     125,    -1,   127,   128,    -1,   130,   131,    -1,    -1,    -1,
      -1,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,
       1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,    80,
      -1,    82,    83,    24,    25,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,
     121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,   130,
     131,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
      -1,    82,    83,    -1,     1,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,   130,
     131,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    16,
      -1,    -1,    79,    80,    -1,    82,    83,    24,    25,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,   121,    -1,    -1,    -1,   125,    -1,
     127,   128,    -1,   130,   131,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    79,    80,    -1,    82,    83,    -1,     1,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    24,    25,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,   125,    -1,
     127,   128,    -1,   130,   131,    -1,    -1,    -1,    -1,    52,
      -1,    54,    -1,    -1,    57,    -1,    -1,    60,     1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    16,    -1,    -1,    79,    80,    -1,    82,
      83,    24,    25,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    52,
      -1,    54,    -1,    -1,    57,    -1,    -1,    60,   121,    -1,
      -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,    -1,
      73,    -1,    -1,    -1,    -1,    -1,    79,    80,    -1,    82,
      83,    -1,     1,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    99,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    24,    25,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,
      -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,    -1,
      -1,    -1,    -1,    52,    -1,    54,    -1,    -1,    57,    -1,
      -1,    60,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    16,    -1,    -1,
      79,    80,    -1,    82,    83,    24,    25,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    52,    -1,    54,    -1,    -1,    57,    -1,
      -1,    60,   121,    -1,    -1,    -1,   125,    -1,   127,   128,
      -1,   130,   131,    -1,    73,    -1,    -1,    -1,    -1,    -1,
      79,    80,    -1,    82,    83,    -1,     1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      99,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      25,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    -1,    -1,    -1,   125,    -1,   127,   128,
      -1,   130,   131,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,     1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,    16,    -1,    -1,    79,    80,    -1,    82,    83,    24,
      25,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,   121,    -1,    -1,    -1,
     125,    -1,   127,   128,    -1,   130,   131,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    79,    80,    -1,    82,    83,    -1,
       1,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,
     125,    -1,   127,   128,    -1,   130,   131,    -1,    -1,    -1,
      -1,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,
       1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,    80,
      -1,    82,    83,    24,    25,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,
     121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,   130,
     131,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
      -1,    82,    83,    -1,     1,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,   130,
     131,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    79,    80,    -1,    82,    83,    -1,    -1,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,     6,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,   125,    -1,
     127,   128,    -1,   130,   131,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,
       6,    94,    95,    96,    97,    -1,    99,    -1,    -1,    -1,
      16,   104,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,   135,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,     6,    -1,
      -1,    -1,    -1,    -1,    -1,   121,   122,    -1,    16,   125,
      -1,   127,   128,    -1,   130,   131,    24,    25,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    16,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    24,    25,    -1,   125,    -1,   127,
     128,    -1,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    24,    25,    -1,   125,    -1,   127,   128,    -1,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      -1,    -1,    16,   125,    18,   127,   128,    -1,   130,   131,
      24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,    -1,     1,    -1,    -1,
      -1,    -1,     6,    -1,    -1,    -1,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    18,    -1,    -1,   121,    -1,    -1,
      -1,   125,    -1,   127,   128,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      94,    95,    96,    97,    -1,    99,     1,    -1,    -1,   103,
      -1,     6,    -1,    -1,    -1,    -1,    11,    -1,    -1,    -1,
      15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    94,
      95,    96,    97,     8,    99,    10,    11,    -1,    -1,    -1,
      -1,    16,    17,    -1,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    27,    -1,    -1,    -1,    -1,   122,    33,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    70,    -1,    -1,    73,    74,
      -1,    -1,    -1,    -1,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    -1,    -1,    94,
      95,    96,    97,     8,    99,    10,    11,    -1,    -1,    -1,
      -1,    16,    17,    -1,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    27,    -1,    -1,    -1,   121,    -1,    33,    -1,
      -1,    -1,   127,    -1,    39,    40,    -1,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    15,    16,    -1,    69,    70,    -1,    -1,    73,    74,
      24,    25,    -1,    -1,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    -1,    94,
      95,    96,    97,    -1,    99,    -1,    -1,    -1,    52,    -1,
      54,    -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,    -1,    73,
      -1,    -1,   127,    -1,    -1,    79,    80,    -1,    82,    83,
      -1,    -1,    86,    87,    -1,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    99,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    24,    25,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,   127,   128,    -1,   130,   131,    -1,    -1,
      -1,    -1,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,
      80,    -1,    82,    83,    24,    25,    86,    87,    28,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,
      60,   121,    -1,    -1,    -1,   125,   126,   127,   128,    -1,
     130,   131,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,
      80,    -1,    82,    83,    24,    25,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,
      60,   121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,
      80,    -1,    82,    83,    24,    25,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,
      60,   121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,
      80,    -1,    82,    83,    24,    25,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,
      60,   121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,
      80,    -1,    82,    83,    -1,    -1,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,     1,    96,    97,    98,    99,
       6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,    29,    -1,   125,    -1,   127,   128,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,     1,    94,    95,
      96,    97,     6,    99,    -1,    -1,    10,   103,    -1,    -1,
      -1,    15,    -1,    -1,    18,    -1,    -1,    -1,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    30,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    38,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,     1,
      94,    95,    96,    97,     6,    99,    -1,    -1,    10,    -1,
      -1,    -1,    -1,    15,    -1,    -1,    18,    -1,    -1,    -1,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    29,    30,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    38,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,     1,    94,    95,    96,    97,     6,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    15,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,     1,    94,    95,    96,    97,     6,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,     1,    94,    95,    96,    97,
       6,    99,    -1,    -1,    -1,    11,    -1,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,     1,    94,    95,
      96,    97,     6,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    -1,    -1,     1,
      94,    95,    96,    97,     6,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    -1,
      -1,     1,    94,    95,    96,    97,     6,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,     1,    94,    95,    96,    97,     6,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,     1,    94,    95,    96,    97,
       6,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,     1,    94,    95,
      96,    97,     6,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,     1,
      94,    95,    96,    97,     6,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,     1,    94,    95,    96,    97,     6,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,     1,    94,    95,    96,    97,     6,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,     1,    94,    95,    96,    97,
       6,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,     1,    94,    95,
      96,    97,     6,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,     1,
      94,    95,    96,    97,     6,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,     1,    94,    95,    96,    97,     6,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,     1,    94,    95,    96,    97,     6,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,     1,    94,    95,    96,    97,
       6,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,     1,    94,    95,
      96,    97,     6,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,     6,    -1,    -1,    -1,
      94,    95,    96,    97,    -1,    99,    16,    -1,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,     6,
      -1,    -1,    -1,    -1,    94,    95,    96,    97,    -1,    99,
      -1,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,     6,    -1,    -1,    -1,    94,    95,    96,
      97,    -1,    99,    16,    -1,    18,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,     6,    -1,    -1,    -1,
      -1,    94,    95,    96,    97,    -1,    99,    -1,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,     6,
      -1,    -1,    -1,    -1,    94,    95,    96,    97,    -1,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,     6,    -1,    -1,    -1,    -1,    94,    95,    96,
      97,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,     6,    90,    -1,    -1,    -1,
      94,    95,    96,    97,    -1,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    -1,
      -1,    -1,     6,    94,    95,    96,    97,    11,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,     6,    -1,    -1,    -1,    -1,
      94,    95,    96,    97,    -1,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,     6,    -1,
      -1,    -1,    -1,    94,    95,    96,    97,    -1,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,     6,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
      -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,     6,    -1,    -1,    -1,    -1,    94,
      95,    96,    97,    -1,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,     6,    -1,    -1,
      -1,    -1,    94,    95,    96,    97,    -1,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,    -1,
      99
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short int yystos[] =
{
       0,    31,    71,    97,   140,   141,   144,   151,   156,   173,
     426,     1,     6,    41,    42,    43,    44,    45,    46,    47,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      94,    95,    96,    97,    99,   416,   417,   419,   420,   416,
       0,   147,    46,   176,   290,   431,   416,   121,   175,   431,
     175,   120,   156,   426,   121,   142,   120,    55,    97,   174,
     175,   412,   413,   416,   120,   120,   176,   416,    48,   291,
     292,   416,   431,   183,   184,   120,   152,   148,   150,   120,
     122,     1,   123,    97,   122,   123,   104,   121,   135,   429,
     193,    56,   185,   157,   174,    97,   154,   158,   159,   176,
     416,     1,   416,   145,   292,    16,    24,    25,    57,    82,
      83,    86,    87,    89,    90,    91,    92,    93,    96,    98,
     110,   111,   121,   125,   127,   128,   130,   131,   360,   361,
     363,   365,   366,   367,   369,   370,   371,   376,   377,   383,
     396,   399,   400,   418,   419,   360,   419,     6,    18,    22,
      29,    49,    50,    63,   143,   194,   196,   197,   203,   276,
     279,   280,   283,   186,   187,   416,   158,   153,   155,   120,
       1,   129,   430,   185,   183,   416,   121,   121,   121,   121,
     121,   121,   378,   431,   360,   126,   360,   397,   398,   366,
      99,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   372,   122,
      21,    27,    65,    74,   105,   106,   107,   108,   110,   111,
     112,   113,   114,   115,   130,   131,   134,   135,   136,   137,
     401,   402,   404,   408,     8,    12,    23,    43,    69,    70,
     116,   117,   118,   119,   132,   133,   138,   403,   405,   409,
      44,    59,   419,    66,   109,   371,    98,   125,   127,   128,
     129,   428,   121,   363,   366,   123,   204,   205,   416,   416,
       1,    90,   211,   212,   411,   416,   416,   416,   416,     8,
      12,    21,    23,    27,   105,   106,   107,   108,   109,   110,
     111,   130,   131,   132,   133,   134,   136,   137,   138,   294,
     407,   408,   409,   416,   429,    10,   315,   207,   208,   120,
       1,   120,    67,   188,   431,   430,   154,     1,   177,   178,
     416,   149,   200,   198,   376,   379,   360,   381,   382,   376,
     381,   379,   122,   102,     1,   123,   126,     7,   361,   363,
     362,   363,    35,   365,   364,   365,   374,   375,   419,   374,
     366,   366,   366,     1,    11,    57,    64,    82,    83,    86,
      87,    96,   121,   125,   360,   384,   385,   386,   387,   389,
     390,   394,   395,   416,   419,   416,   122,   379,   360,     1,
     120,   123,    21,   206,   431,   129,   296,   297,     1,   120,
     123,   129,   296,   129,   129,   296,   421,   430,    36,    38,
      48,   209,   286,   289,   431,   187,   187,    62,   121,   189,
     431,   430,     1,   120,   429,   158,   160,   201,   202,   203,
     276,    18,    29,   146,   199,   203,   207,   275,   280,   122,
     360,   124,     1,   122,   123,   122,   123,   122,     1,   360,
     376,   380,   360,   398,     1,   398,   363,   365,   129,   360,
     416,   360,   390,   122,   360,   390,   391,   393,   395,     1,
     360,   384,   394,   102,   126,   120,   427,     1,   123,   124,
     126,   380,   122,   205,   205,   360,   416,   303,   304,   429,
     431,   121,   298,   431,   212,     1,   212,   416,   416,   416,
     295,   416,   429,   431,    38,   316,   317,   322,   323,   210,
       1,   215,   216,   414,   416,     1,   213,   214,   416,    51,
      52,    54,    60,    75,    76,    77,   277,   287,   290,   293,
     121,     1,   190,   191,   416,   206,   178,     1,   178,   183,
      97,   121,   179,   180,   430,    30,   168,   169,   171,   207,
     416,   416,    55,   161,   120,   122,   360,   382,     1,   382,
     380,   416,   122,   122,   123,   419,    26,   124,   120,   427,
       1,   120,   122,   123,   392,   124,   126,   102,   126,   360,
     386,   387,    64,   389,   360,   395,     1,   395,   390,   122,
     296,   281,   416,     1,    18,    29,    48,    97,   103,   122,
     299,   300,   305,   412,   425,   431,   296,   296,   296,   282,
     416,   318,   120,   422,     8,    11,    17,    19,    20,    25,
      27,    33,    39,    40,    45,    69,    70,    74,    84,    85,
      88,    94,    95,   127,   315,   324,   325,   337,   340,   351,
     353,   376,   406,   410,   411,   419,     1,   225,   226,   416,
     216,   123,   423,   214,   423,   429,   368,   369,   431,   120,
     360,   120,   120,   185,   289,   120,   120,   190,     1,   122,
     123,   101,   192,   431,   198,     1,   181,   182,   415,   416,
     425,   121,    10,    15,    15,    30,   171,   185,    15,   285,
     286,   289,   124,   122,   378,     1,   360,   125,   388,   360,
     393,   393,   390,   360,   303,     1,   124,   302,   321,   432,
     122,   416,   416,    38,   412,   122,     1,   120,   122,    38,
     124,   412,   302,   216,   317,    15,   360,   376,   410,   419,
     360,   330,   333,     1,   338,   339,   360,    97,   354,   121,
     121,   360,   121,   376,   325,     7,   326,   378,   124,     1,
     120,   227,   229,   423,   416,   124,   124,   359,   360,    97,
     120,   120,   195,   122,   191,     1,   191,   416,    15,     1,
     122,   123,   102,   192,   129,   415,   181,    13,    13,   193,
     430,   360,   122,   384,    26,   284,   373,   374,   296,   296,
     412,   124,   306,   300,     1,   103,   300,   412,     9,    28,
      36,   307,   308,   309,   310,   313,   314,   374,   383,   424,
     124,   319,    26,    21,   100,   352,   429,    35,   421,   421,
       1,    13,   123,   124,   121,   360,    31,   419,   381,   327,
     352,   226,     1,   226,   121,   235,   235,   429,   238,   239,
     240,   238,   120,   288,    75,    51,   196,   278,   182,     1,
     182,   415,   416,   192,   122,   170,   172,    10,    58,   162,
     165,   168,   126,   388,   302,   303,   124,   307,   122,   306,
      26,   125,    26,     9,   307,   317,   328,   360,   360,   341,
     316,   360,   339,   421,     1,   339,   416,   370,   122,   123,
     122,   122,   129,   122,   421,   360,     1,   236,   237,   412,
     429,     1,    61,    78,    81,   230,   232,   238,   217,   290,
       9,    16,    18,    29,    32,    34,    47,    68,    98,   121,
     127,   128,   241,   242,   245,   259,   260,   262,   263,   265,
     308,   360,   373,   374,   383,   419,   424,   428,   432,   104,
     360,   360,   368,   315,   320,   321,   322,   320,   163,   166,
      53,   427,   301,   307,   314,   311,   312,   416,   360,   125,
       1,   344,   345,   346,   348,   349,   359,   336,     1,    14,
      30,   350,   421,    37,   334,   320,   122,   124,   380,   416,
     419,   320,   122,     1,   120,   122,   124,   228,   120,   102,
     121,   267,   431,    26,    42,   268,   431,   268,    72,   100,
     104,   273,   274,   431,    41,   223,   273,   125,   125,   247,
     431,   296,   296,     1,   246,    26,   242,   373,   264,   265,
     383,   416,     1,   261,   416,   264,   383,    99,   264,   102,
     121,   125,   243,   245,   360,    48,   390,   120,   120,   120,
     120,   120,   120,   167,   316,   167,   164,   302,     1,   120,
     126,   102,   312,   329,     1,   120,   427,     1,   123,   124,
       1,   102,    13,   360,   320,   331,    13,   422,   355,   356,
     357,   369,   431,   122,   378,   122,   422,   237,     1,   237,
     374,   238,    54,    15,     1,   374,   374,    61,    78,     1,
     390,     1,   224,   218,   431,     1,   248,   249,   259,   374,
     424,   249,    26,   266,    15,   250,   251,   252,   253,   412,
     431,   239,   122,     1,   122,   123,   360,     1,   244,   360,
     360,   102,   264,   221,   431,   316,   312,     1,   312,    26,
     416,   126,     7,    64,   342,   343,   346,     1,   346,   349,
       1,   349,   347,   359,     1,   359,   421,   335,   422,   360,
     320,   122,   124,   123,   121,   122,   273,   122,   122,   267,
     267,   267,   360,   120,     1,   123,   126,   126,   239,   302,
      15,    11,     1,   120,   427,   124,   416,     1,   416,     1,
     122,   123,   126,   360,   120,     9,   309,   124,    26,    15,
     421,   421,   320,    13,   332,   422,   355,   357,   360,   234,
     231,   233,    51,    75,   219,   222,   290,   249,   249,    26,
     255,   258,   259,   416,   419,   253,     1,   253,   239,   360,
       1,   360,   222,   374,   374,   316,   320,   422,   421,   422,
     122,   124,   122,     1,   269,   270,   431,   269,   269,   368,
     360,   239,    26,   124,   273,   422,   422,   320,   358,   369,
      15,    18,    29,    42,    46,    49,    50,    73,    79,    80,
      97,   271,   290,   412,    15,    15,    97,     1,   256,   257,
     348,   258,   374,   422,   122,   123,   416,   416,   416,   416,
     360,   120,   124,   220,     1,   120,   427,   124,   369,   296,
     296,   296,   296,   239,   360,   257,   257,   254,   343,   121,
     303,   273,   121,   250,   272,   250,   122,   302,   122,   427
};


/* Prevent warning if -Wmissing-prototypes.  */
int yyparse (void);

/* Error token number */
#define YYTERROR 1

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */


#define YYRHSLOC(Rhs, K) ((Rhs)[K].yystate.yyloc)
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))							\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))

/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# define YY_LOCATION_PRINT(File, Loc)			\
    fprintf (File, "%d.%d-%d.%d",			\
	     (Loc).first_line, (Loc).first_column,	\
	     (Loc).last_line,  (Loc).last_column)
#endif


#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#define YYLEX yylex ()

YYSTYPE yylval;

YYLTYPE yylloc;

int yynerrs;
int yychar;

static const int YYEOF = 0;
static const int YYEMPTY = -2;

typedef enum { yyok, yyaccept, yyabort, yyerr } YYRESULTTAG;

#define YYCHK(YYE)							     \
   do { YYRESULTTAG yyflag = YYE; if (yyflag != yyok) return yyflag; }	     \
   while (YYID (0))

#if YYDEBUG

# ifndef YYFPRINTF
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			    \
do {									    \
  if (yydebug)								    \
    {									    \
      YYFPRINTF (stderr, "%s ", Title);					    \
      yy_symbol_print (stderr, Type,					    \
		       Value, Location);  \
      YYFPRINTF (stderr, "\n");						    \
    }									    \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;

#else /* !YYDEBUG */

# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)

#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYMAXDEPTH * sizeof (GLRStackItem)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

/* Minimum number of free items on the stack allowed after an
   allocation.  This is to allow allocation and initialization
   to be completed by functions that call yyexpandGLRStack before the
   stack is expanded, thus insuring that all necessary pointers get
   properly redirected to new data.  */
#define YYHEADROOM 2

#ifndef YYSTACKEXPANDABLE
# if (! defined __cplusplus \
      || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	  && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL))
#  define YYSTACKEXPANDABLE 1
# else
#  define YYSTACKEXPANDABLE 0
# endif
#endif

#if YYSTACKEXPANDABLE
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyexpandGLRStack (Yystack);			\
  } while (YYID (0))
#else
# define YY_RESERVE_GLRSTACK(Yystack)			\
  do {							\
    if (Yystack->yyspaceLeft < YYHEADROOM)		\
      yyMemoryExhausted (Yystack);			\
  } while (YYID (0))
#endif


#if YYERROR_VERBOSE

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static size_t
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return strlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* !YYERROR_VERBOSE */

/** State numbers, as in LALR(1) machine */
typedef int yyStateNum;

/** Rule numbers, as in LALR(1) machine */
typedef int yyRuleNum;

/** Grammar symbol */
typedef short int yySymbol;

/** Item references, as in LALR(1) machine */
typedef short int yyItemNum;

typedef struct yyGLRState yyGLRState;
typedef struct yyGLRStateSet yyGLRStateSet;
typedef struct yySemanticOption yySemanticOption;
typedef union yyGLRStackItem yyGLRStackItem;
typedef struct yyGLRStack yyGLRStack;

struct yyGLRState {
  /** Type tag: always true.  */
  yybool yyisState;
  /** Type tag for yysemantics.  If true, yysval applies, otherwise
   *  yyfirstVal applies.  */
  yybool yyresolved;
  /** Number of corresponding LALR(1) machine state.  */
  yyStateNum yylrState;
  /** Preceding state in this stack */
  yyGLRState* yypred;
  /** Source position of the first token produced by my symbol */
  size_t yyposn;
  union {
    /** First in a chain of alternative reductions producing the
     *  non-terminal corresponding to this state, threaded through
     *  yynext.  */
    yySemanticOption* yyfirstVal;
    /** Semantic value for this state.  */
    YYSTYPE yysval;
  } yysemantics;
  /** Source location for this state.  */
  YYLTYPE yyloc;
};

struct yyGLRStateSet {
  yyGLRState** yystates;
  /** During nondeterministic operation, yylookaheadNeeds tracks which
   *  stacks have actually needed the current lookahead.  During deterministic
   *  operation, yylookaheadNeeds[0] is not maintained since it would merely
   *  duplicate yychar != YYEMPTY.  */
  yybool* yylookaheadNeeds;
  size_t yysize, yycapacity;
};

struct yySemanticOption {
  /** Type tag: always false.  */
  yybool yyisState;
  /** Rule number for this reduction */
  yyRuleNum yyrule;
  /** The last RHS state in the list of states to be reduced.  */
  yyGLRState* yystate;
  /** The lookahead for this reduction.  */
  int yyrawchar;
  YYSTYPE yyval;
  YYLTYPE yyloc;
  /** Next sibling in chain of options.  To facilitate merging,
   *  options are chained in decreasing order by address.  */
  yySemanticOption* yynext;
};

/** Type of the items in the GLR stack.  The yyisState field
 *  indicates which item of the union is valid.  */
union yyGLRStackItem {
  yyGLRState yystate;
  yySemanticOption yyoption;
};

struct yyGLRStack {
  int yyerrState;
  /* To compute the location of the error token.  */
  yyGLRStackItem yyerror_range[3];

  YYJMP_BUF yyexception_buffer;
  yyGLRStackItem* yyitems;
  yyGLRStackItem* yynextFree;
  size_t yyspaceLeft;
  yyGLRState* yysplitPoint;
  yyGLRState* yylastDeleted;
  yyGLRStateSet yytops;
};

#if YYSTACKEXPANDABLE
static void yyexpandGLRStack (yyGLRStack* yystackp);
#endif

static void yyFail (yyGLRStack* yystackp, const char* yymsg)
  __attribute__ ((__noreturn__));
static void
yyFail (yyGLRStack* yystackp, const char* yymsg)
{
  if (yymsg != NULL)
    yyerror (yymsg);
  YYLONGJMP (yystackp->yyexception_buffer, 1);
}

static void yyMemoryExhausted (yyGLRStack* yystackp)
  __attribute__ ((__noreturn__));
static void
yyMemoryExhausted (yyGLRStack* yystackp)
{
  YYLONGJMP (yystackp->yyexception_buffer, 2);
}

#if YYDEBUG || YYERROR_VERBOSE
/** A printable representation of TOKEN.  */
static inline const char*
yytokenName (yySymbol yytoken)
{
  if (yytoken == YYEMPTY)
    return "";

  return yytname[yytoken];
}
#endif

/** Fill in YYVSP[YYLOW1 .. YYLOW0-1] from the chain of states starting
 *  at YYVSP[YYLOW0].yystate.yypred.  Leaves YYVSP[YYLOW1].yystate.yypred
 *  containing the pointer to the next state in the chain.  */
static void yyfillin (yyGLRStackItem *, int, int) __attribute__ ((__unused__));
static void
yyfillin (yyGLRStackItem *yyvsp, int yylow0, int yylow1)
{
  yyGLRState* s;
  int i;
  s = yyvsp[yylow0].yystate.yypred;
  for (i = yylow0-1; i >= yylow1; i -= 1)
    {
      YYASSERT (s->yyresolved);
      yyvsp[i].yystate.yyresolved = yytrue;
      yyvsp[i].yystate.yysemantics.yysval = s->yysemantics.yysval;
      yyvsp[i].yystate.yyloc = s->yyloc;
      s = yyvsp[i].yystate.yypred = s->yypred;
    }
}

/* Do nothing if YYNORMAL or if *YYLOW <= YYLOW1.  Otherwise, fill in
 * YYVSP[YYLOW1 .. *YYLOW-1] as in yyfillin and set *YYLOW = YYLOW1.
 * For convenience, always return YYLOW1.  */
static inline int yyfill (yyGLRStackItem *, int *, int, yybool)
     __attribute__ ((__unused__));
static inline int
yyfill (yyGLRStackItem *yyvsp, int *yylow, int yylow1, yybool yynormal)
{
  if (!yynormal && yylow1 < *yylow)
    {
      yyfillin (yyvsp, *yylow, yylow1);
      *yylow = yylow1;
    }
  return yylow1;
}

/** Perform user action for rule number YYN, with RHS length YYRHSLEN,
 *  and top stack item YYVSP.  YYLVALP points to place to put semantic
 *  value ($$), and yylocp points to place for location information
 *  (@@$).  Returns yyok for normal return, yyaccept for YYACCEPT,
 *  yyerr for YYERROR, yyabort for YYABORT.  */
/*ARGSUSED*/ static YYRESULTTAG
yyuserAction (yyRuleNum yyn, int yyrhslen, yyGLRStackItem* yyvsp,
	      YYSTYPE* yyvalp,
	      YYLTYPE* YYOPTIONAL_LOC (yylocp),
	      yyGLRStack* yystackp
	      )
{
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  int yylow;
# undef yyerrok
# define yyerrok (yystackp->yyerrState = 0)
# undef YYACCEPT
# define YYACCEPT return yyaccept
# undef YYABORT
# define YYABORT return yyabort
# undef YYERROR
# define YYERROR return yyerrok, yyerr
# undef YYRECOVERING
# define YYRECOVERING() (yystackp->yyerrState != 0)
# undef yyclearin
# define yyclearin (yychar = YYEMPTY)
# undef YYFILL
# define YYFILL(N) yyfill (yyvsp, &yylow, N, yynormal)
# undef YYBACKUP
# define YYBACKUP(Token, Value)						     \
  return yyerror (YY_("syntax error: cannot back up")),     \
	 yyerrok, yyerr

  yylow = 1;
  if (yyrhslen == 0)
    *yyvalp = yyval_default;
  else
    *yyvalp = yyvsp[YYFILL (1-yyrhslen)].yystate.yysemantics.yysval;
  YYLLOC_DEFAULT ((*yylocp), (yyvsp - yyrhslen), yyrhslen);
  yystackp->yyerror_range[1].yystate.yyloc = *yylocp;

  switch (yyn)
    {
        case 2:
#line 223 "parse.y"
    { error ("empty input file"); ;}
    break;

  case 3:
#line 225 "parse.y"
    {
        if (co->ignore_garbage_after_dot)
          {
            discard_input ();
            YYACCEPT;
          }
      ;}
    break;

  case 4:
#line 236 "parse.y"
    { initialize_module (TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype)), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype) ? TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)) : NULL_TREE, TREE_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype))), 0); ;}
    break;

  case 5:
#line 238 "parse.y"
    { start_main_program (); ;}
    break;

  case 6:
#line 240 "parse.y"
    { finish_main_program (); ;}
    break;

  case 7:
#line 242 "parse.y"
    { finalize_module (0); ;}
    break;

  case 8:
#line 247 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yyloc), p_interface); initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ttype), 1); ;}
    break;

  case 9:
#line 249 "parse.y"
    { start_unit_implementation (); ;}
    break;

  case 10:
#line 251 "parse.y"
    { check_forward_decls (1); ;}
    break;

  case 13:
#line 255 "parse.y"
    { ((*yyvalp).ttype) = current_module->name; finalize_module (1); ;}
    break;

  case 14:
#line 257 "parse.y"
    {
        if ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype) && current_module->name != (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype))
          error ("implementation of module `%s' following interface of module `%s'",
                 IDENTIFIER_NAME (current_module->name), IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)));
      ;}
    break;

  case 15:
#line 263 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 2); ;}
    break;

  case 16:
#line 265 "parse.y"
    {
        if (co->interface_only)
          exit_compilation ();
      ;}
    break;

  case 18:
#line 271 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 4); ;}
    break;

  case 20:
#line 277 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yyloc), p_interface); ;}
    break;

  case 21:
#line 279 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype), 2); ;}
    break;

  case 22:
#line 281 "parse.y"
    { clear_forward_decls ();  /* don't complain in poplevel */ ;}
    break;

  case 23:
#line 286 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yyloc), p_export); start_module_interface (); ;}
    break;

  case 24:
#line 288 "parse.y"
    { create_gpi_files (); ;}
    break;

  case 25:
#line 293 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ttype), NULL_TREE, 3); ;}
    break;

  case 27:
#line 298 "parse.y"
    { current_module->implementation = 1; ;}
    break;

  case 28:
#line 300 "parse.y"
    { check_forward_decls (1); ;}
    break;

  case 30:
#line 305 "parse.y"
    { chk_dialect ("units without `implementation' part are", U_M_PASCAL); ;}
    break;

  case 32:
#line 311 "parse.y"
    { start_constructor (0); ;}
    break;

  case 35:
#line 315 "parse.y"
    { start_destructor (); ;}
    break;

  case 36:
#line 317 "parse.y"
    { finish_destructor (); ;}
    break;

  case 38:
#line 323 "parse.y"
    { start_constructor (0); ;}
    break;

  case 40:
#line 329 "parse.y"
    { finish_constructor (); ;}
    break;

  case 45:
#line 341 "parse.y"
    { chk_dialect_name ("to begin do", E_O_PASCAL); start_constructor (0); ;}
    break;

  case 46:
#line 343 "parse.y"
    { finish_constructor (); ;}
    break;

  case 47:
#line 348 "parse.y"
    { chk_dialect_name ("to end do", E_O_PASCAL); start_destructor (); ;}
    break;

  case 48:
#line 350 "parse.y"
    { finish_destructor (); ;}
    break;

  case 49:
#line 355 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE); ;}
    break;

  case 50:
#line 357 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 51:
#line 359 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 52:
#line 364 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype) ? TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)) : NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 54:
#line 370 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 58:
#line 381 "parse.y"
    { yyerrok; ;}
    break;

  case 59:
#line 383 "parse.y"
    { error ("module specifications need an export part"); ;}
    break;

  case 60:
#line 385 "parse.y"
    { warning ("missing semicolon"); yyerrok; ;}
    break;

  case 61:
#line 387 "parse.y"
    { error ("extra semicolon"); ;}
    break;

  case 62:
#line 392 "parse.y"
    { export_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 63:
#line 397 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 65:
#line 400 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 66:
#line 405 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yyloc), p_all); ((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE); ;}
    break;

  case 68:
#line 411 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 69:
#line 413 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 70:
#line 415 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 71:
#line 417 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 72:
#line 422 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 73:
#line 424 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 74:
#line 426 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)); TREE_READONLY (((*yyvalp).ttype)) = 1; ;}
    break;

  case 75:
#line 430 "parse.y"
    { do_extra_import (); ;}
    break;

  case 81:
#line 443 "parse.y"
    { warning ("missing semicolon"); yyerrok; ;}
    break;

  case 82:
#line 448 "parse.y"
    { import_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ttype) ? IMPORT_QUALIFIED : IMPORT_ISO, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 86:
#line 459 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 87:
#line 461 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 89:
#line 467 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 90:
#line 469 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 91:
#line 471 "parse.y"
    { error ("missing comma"); ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 92:
#line 473 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 93:
#line 478 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 95:
#line 484 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 96:
#line 489 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
    break;

  case 97:
#line 491 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 100:
#line 501 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
    break;

  case 101:
#line 503 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 102:
#line 507 "parse.y"
    { check_forward_decls (0); ;}
    break;

  case 103:
#line 509 "parse.y"
    { ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.itype); ;}
    break;

  case 104:
#line 511 "parse.y"
    { ((*yyvalp).itype) = od_label; ;}
    break;

  case 105:
#line 513 "parse.y"
    { ((*yyvalp).itype) = od_routine; ;}
    break;

  case 106:
#line 518 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
    break;

  case 107:
#line 520 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 110:
#line 527 "parse.y"
    { ((*yyvalp).itype) = od_routine; ;}
    break;

  case 111:
#line 532 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
    break;

  case 112:
#line 534 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 114:
#line 539 "parse.y"
    { check_forward_decls (0); ;}
    break;

  case 115:
#line 541 "parse.y"
    { ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.itype); ;}
    break;

  case 116:
#line 543 "parse.y"
    { ((*yyvalp).itype) = od_routine; ;}
    break;

  case 117:
#line 548 "parse.y"
    { ((*yyvalp).itype) = od_uses; ;}
    break;

  case 120:
#line 555 "parse.y"
    { warning ("missing comma"); yyerrok; ;}
    break;

  case 121:
#line 560 "parse.y"
    { import_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype), NULL_TREE, IMPORT_USES, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 123:
#line 566 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype); chk_dialect ("file name specification with `in' is", BORLAND_DELPHI); ;}
    break;

  case 124:
#line 570 "parse.y"
    {
#ifndef EGCS97
        push_obstacks_nochange ();
        end_temporary_allocation ();
#endif
      ;}
    break;

  case 125:
#line 577 "parse.y"
    {
#ifndef EGCS97
        pop_obstacks ();
#endif
        ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.itype);
      ;}
    break;

  case 126:
#line 587 "parse.y"
    { ((*yyvalp).itype) = od_const; ;}
    break;

  case 127:
#line 589 "parse.y"
    { current_type_list = build_tree_list (NULL_TREE, NULL_TREE); ;}
    break;

  case 128:
#line 591 "parse.y"
    { declare_types (); ((*yyvalp).itype) = od_type; ;}
    break;

  case 129:
#line 593 "parse.y"
    { ((*yyvalp).itype) = od_var; ;}
    break;

  case 130:
#line 600 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 131:
#line 602 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 132:
#line 604 "parse.y"
    { error ("non-label in label_list"); ;}
    break;

  case 133:
#line 606 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 134:
#line 608 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 137:
#line 615 "parse.y"
    { chk_dialect ("non-numeric labels are", B_D_M_PASCAL); ;}
    break;

  case 141:
#line 626 "parse.y"
    { declare_constant ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 142:
#line 629 "parse.y"
    {
        lex_const_equal = -1;
        declare_variables (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (8))].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (8))].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (8))].yystate.yysemantics.yysval.ttype)), VQ_BP_CONST, (((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (8))].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 145:
#line 642 "parse.y"
    {
        tree t, ids = ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype));
        if ((TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE || TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE)
            && TREE_CODE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype))) == FUNCTION_TYPE)
          TREE_PRIVATE (ids) = !!allow_function_calls (0);  /* kludge */
        /* With `begin var Foo: Integer; Foo := ...' where `Foo'
           is a built-in identifier, parser look-ahead would already get
           its special meaning before we get to declaring the variables.
           So mark the identifiers. (fjf791.pas) */
        for (t = ids; t; t = TREE_CHAIN (t))
          PASCAL_PENDING_DECLARATION (TREE_VALUE (t)) = 1;
      ;}
    break;

  case 146:
#line 655 "parse.y"
    {
        tree t, ids = (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (8))].yystate.yysemantics.yysval.ttype);
        for (t = ids; t; t = TREE_CHAIN (t))
          PASCAL_PENDING_DECLARATION (TREE_VALUE (t)) = 0;
        lex_const_equal = -1;
        ((*yyvalp).ttype) = declare_variables (ids, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (8))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (8))].yystate.yysemantics.yysval.ttype), 0, (((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (8))].yystate.yysemantics.yysval.ttype));
        if ((TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (8))].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE || TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (8))].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE)
            && TREE_CODE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (8))].yystate.yysemantics.yysval.ttype))) == FUNCTION_TYPE)
          allow_function_calls (TREE_PRIVATE (ids));
        yyerrok;
      ;}
    break;

  case 147:
#line 667 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; lex_const_equal = -1; ;}
    break;

  case 149:
#line 673 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 151:
#line 679 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 152:
#line 681 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yyloc), p_name); ;}
    break;

  case 153:
#line 683 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 155:
#line 689 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 156:
#line 694 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 157:
#line 696 "parse.y"
    { ((*yyvalp).ttype) = TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 159:
#line 702 "parse.y"
    { ((*yyvalp).itype) = allow_function_calls (0); lex_const_equal = -1; ;}
    break;

  case 160:
#line 704 "parse.y"
    {
        allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.itype));
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype));
        PASCAL_ABSOLUTE_CLAUSE (((*yyvalp).ttype)) = 1;
      ;}
    break;

  case 161:
#line 710 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 163:
#line 716 "parse.y"
    { yyerrok; ;}
    break;

  case 165:
#line 719 "parse.y"
    { error ("missing semicolon"); yyerrok; ;}
    break;

  case 166:
#line 721 "parse.y"
    { error ("extra semicolon"); ;}
    break;

  case 168:
#line 727 "parse.y"
    {
        lex_const_equal = -1;
        if (!EM ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ttype)))
          {
            if (PASCAL_TYPE_UNDISCRIMINATED_SCHEMA ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ttype)))
              chk_dialect ("undiscriminated schemata on the right side of a type definition are", GNU_PASCAL);
            build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype));
          }
      ;}
    break;

  case 169:
#line 737 "parse.y"
    { current_schema = start_struct (RECORD_TYPE); ;}
    break;

  case 170:
#line 739 "parse.y"
    {
        ((*yyvalp).itype) = immediate_size_expand;
        immediate_size_expand = 0;
        size_volatile++;
      ;}
    break;

  case 171:
#line 745 "parse.y"
    {
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.ttype), build_schema_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (7))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (7))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (7))].yystate.yysemantics.yysval.ttype), current_schema), 
                          NULL_TREE);
        immediate_size_expand = (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (7))].yystate.yysemantics.yysval.itype);
        size_volatile--;
        current_schema = NULL_TREE;
      ;}
    break;

  case 172:
#line 753 "parse.y"
    { current_schema = start_struct (RECORD_TYPE); ;}
    break;

  case 173:
#line 755 "parse.y"
    { build_schema_type (error_mark_node, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), NULL_TREE, current_schema);
        current_schema = NULL_TREE;
      ;}
    break;

  case 174:
#line 759 "parse.y"
    { ((*yyvalp).ttype) = start_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 175:
#line 761 "parse.y"
    { push_scope (); ;}
    break;

  case 176:
#line 763 "parse.y"
    {
        lex_const_equal = -1;
        finish_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (10))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (10))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((9) - (10))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (10))].yystate.yysemantics.yysval.ttype) != NULL_TREE);
        pop_record_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (10))].yystate.yysemantics.yysval.ttype));
        yyerrok;
      ;}
    break;

  case 177:
#line 771 "parse.y"
    { ((*yyvalp).ttype) = start_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), 1); ;}
    break;

  case 178:
#line 773 "parse.y"
    { push_scope (); ;}
    break;

  case 179:
#line 775 "parse.y"
    {
        lex_const_equal = -1;
        finish_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (10))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (10))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((9) - (10))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (10))].yystate.yysemantics.yysval.ttype) != NULL_TREE);
        pop_record_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (10))].yystate.yysemantics.yysval.ttype));
        yyerrok;
      ;}
    break;

  case 180:
#line 783 "parse.y"
    { push_scope (); ;}
    break;

  case 181:
#line 785 "parse.y"
    {
        lex_const_equal = -1;
        finish_view_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (10))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (10))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (10))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((9) - (10))].yystate.yysemantics.yysval.ttype));
        pop_record_level (NULL_TREE);
        yyerrok;
      ;}
    break;

  case 182:
#line 792 "parse.y"
    {
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
        PASCAL_TYPE_CLASS (t) = 1;
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ttype), t, NULL_TREE);
        warning("ignored parent in Delphi forward class declaration");
      ;}
    break;

  case 183:
#line 799 "parse.y"
    {
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
	PASCAL_TYPE_CLASS (t) = 1;
	build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ttype), t, NULL_TREE); 
      ;}
    break;

  case 184:
#line 805 "parse.y"
    {
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
        PASCAL_TYPE_CLASS (t) = 1;
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ttype), t, NULL_TREE);
      ;}
    break;

  case 185:
#line 814 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 186:
#line 816 "parse.y"
    { error ("invalid schema discriminants"); ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 188:
#line 822 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 189:
#line 824 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
    break;

  case 190:
#line 826 "parse.y"
    { error ("extra semicolon"); ;}
    break;

  case 192:
#line 832 "parse.y"
    { ((*yyvalp).ttype) = build_discriminants ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), current_schema); ;}
    break;

  case 194:
#line 838 "parse.y"
    { type_attributes (&((*yyvalp).ttype), TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 195:
#line 843 "parse.y"
    {
#ifndef EGCS97
        push_obstacks_nochange ();
        end_temporary_allocation ();
#endif
      ;}
    break;

  case 196:
#line 850 "parse.y"
    {
#ifndef EGCS97
        pop_obstacks ();
#endif
        ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype);
      ;}
    break;

  case 198:
#line 861 "parse.y"
    { ((*yyvalp).ttype) = pascal_type_variant ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype), TYPE_QUALIFIER_BINDABLE); ;}
    break;

  case 200:
#line 867 "parse.y"
    { ((*yyvalp).ttype) = pascal_type_variant ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype), TYPE_QUALIFIER_RESTRICTED); ;}
    break;

  case 201:
#line 869 "parse.y"
    { ((*yyvalp).ttype) = build_discriminated_schema_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 205:
#line 874 "parse.y"
    { chk_dialect ("procedural variables and types are", B_D_M_PASCAL); ;}
    break;

  case 207:
#line 877 "parse.y"
    { defining_packed_type -= (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.itype); ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.itype) ? pack_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)) : (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 208:
#line 882 "parse.y"
    { chk_dialect ("schema/string discriminants are", E_O_M_PASCAL); ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 209:
#line 884 "parse.y"
    {
        chk_dialect ("string capacity in brackets is", U_B_D_M_PASCAL);
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), 0)));
      ;}
    break;

  case 210:
#line 893 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), 0))); ;}
    break;

  case 211:
#line 895 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 0)))); yyerrok; ;}
    break;

  case 212:
#line 897 "parse.y"
    { error ("missing expression"); ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 213:
#line 899 "parse.y"
    { error ("missing comma"); ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 0)))); yyerrok; ;}
    break;

  case 214:
#line 901 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 215:
#line 906 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_array_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 217:
#line 909 "parse.y"
    { ((*yyvalp).ttype) = build_file_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 218:
#line 911 "parse.y"
    { ((*yyvalp).ttype) = build_set_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 219:
#line 912 "parse.y"
    { push_scope (); ;}
    break;

  case 220:
#line 913 "parse.y"
    { pop_record_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 221:
#line 915 "parse.y"
    { ((*yyvalp).ttype) = build_record (NULL_TREE, NULL_TREE, NULL_TREE); ;}
    break;

  case 224:
#line 922 "parse.y"
    { ((*yyvalp).ttype) = TREE_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 226:
#line 928 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 227:
#line 930 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 228:
#line 932 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (error_mark_node, error_mark_node); ;}
    break;

  case 229:
#line 934 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (error_mark_node, error_mark_node); ;}
    break;

  case 230:
#line 939 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 231:
#line 941 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 232:
#line 946 "parse.y"
    { ((*yyvalp).ttype) = build_record (NULL_TREE, NULL_TREE, NULL_TREE); ;}
    break;

  case 233:
#line 948 "parse.y"
    { ((*yyvalp).ttype) = build_record ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE); ;}
    break;

  case 234:
#line 950 "parse.y"
    { ((*yyvalp).ttype) = build_record ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (7))].yystate.yysemantics.yysval.ttype), chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (7))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (7))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 238:
#line 961 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 239:
#line 963 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
    break;

  case 240:
#line 965 "parse.y"
    { error ("extra semicolon"); ;}
    break;

  case 242:
#line 971 "parse.y"
    { ((*yyvalp).ttype) = build_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 243:
#line 976 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 244:
#line 978 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, build_field (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 245:
#line 983 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), build_field ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 246:
#line 985 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), build_field ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 247:
#line 987 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 248:
#line 989 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 250:
#line 995 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 251:
#line 997 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
    break;

  case 252:
#line 999 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 254:
#line 1005 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ttype), build_field (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 255:
#line 1010 "parse.y"
    { chk_dialect ("type denoters (no identifiers) as variant tag type are", U_B_D_M_PASCAL); ;}
    break;

  case 258:
#line 1020 "parse.y"
    { ((*yyvalp).ttype) = build_enum_type (nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 259:
#line 1022 "parse.y"
    { ((*yyvalp).ttype) = error_mark_node; ;}
    break;

  case 260:
#line 1027 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 261:
#line 1029 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 262:
#line 1031 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 263:
#line 1033 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 265:
#line 1039 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_subrange_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 266:
#line 1041 "parse.y"
    {
        defining_packed_type -= (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.itype);
        chk_dialect ("packed subrange types are", B_D_PASCAL);
        ((*yyvalp).ttype) = build_pascal_subrange_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.itype));
      ;}
    break;

  case 267:
#line 1050 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 268:
#line 1052 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 269:
#line 1054 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 270:
#line 1056 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type (p_build_type_variant ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 1, TYPE_VOLATILE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)))); ;}
    break;

  case 271:
#line 1061 "parse.y"
    { ((*yyvalp).ttype) = get_pointer_domain_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 272:
#line 1063 "parse.y"
    {
        chk_dialect ("pointers to routines are", GNU_PASCAL);
        gcc_assert (EM ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)) || (TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE && TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype))));
        ((*yyvalp).ttype) = TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 274:
#line 1073 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_procedural_type (void_type_node, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 275:
#line 1078 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 276:
#line 1080 "parse.y"
    { ((*yyvalp).ttype) = build_procedural_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 278:
#line 1086 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 279:
#line 1088 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 282:
#line 1097 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 283:
#line 1098 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 284:
#line 1100 "parse.y"
    { ((*yyvalp).ttype) = error_mark_node; ;}
    break;

  case 286:
#line 1106 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype), build_tree_list (void_type_node, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 287:
#line 1108 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 288:
#line 1113 "parse.y"
    { ((*yyvalp).ttype) = build_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 289:
#line 1115 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 0);
      ;}
    break;

  case 290:
#line 1121 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 291:
#line 1123 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 292:
#line 1125 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      boolean_type_node, 1);
      ;}
    break;

  case 293:
#line 1131 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 1);
      ;}
    break;

  case 294:
#line 1137 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 295:
#line 1139 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 296:
#line 1141 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 297:
#line 1143 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 298:
#line 1145 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 301:
#line 1152 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 302:
#line 1154 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 303:
#line 1158 "parse.y"
    { lex_const_equal = -1; ;}
    break;

  case 304:
#line 1160 "parse.y"
    { chk_dialect ("initialization with `:=' is", VAX_PASCAL|SUN_PASCAL); ;}
    break;

  case 305:
#line 1162 "parse.y"
    { chk_dialect ("initialization with `=' is", BORLAND_DELPHI); ;}
    break;

  case 306:
#line 1169 "parse.y"
    { declare_routine ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 1); ;}
    break;

  case 307:
#line 1180 "parse.y"
    { declare_routine ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 308:
#line 1182 "parse.y"
    { ((*yyvalp).ttype) = start_routine ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 309:
#line 1184 "parse.y"
    {
        do_setjmp ();
        un_initialize_block (getdecls (), 0, 0);
      ;}
    break;

  case 310:
#line 1189 "parse.y"
    { finish_routine ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (9))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 313:
#line 1199 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 0);
      ;}
    break;

  case 314:
#line 1205 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 315:
#line 1207 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 316:
#line 1209 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 317:
#line 1211 "parse.y"
    { ((*yyvalp).ttype) = build_operator_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 318:
#line 1221 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 0);
      ;}
    break;

  case 319:
#line 1227 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 320:
#line 1229 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (8))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (8))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (8))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (8))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((8) - (8))].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 321:
#line 1231 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      boolean_type_node, 1);
      ;}
    break;

  case 322:
#line 1237 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 1);
      ;}
    break;

  case 325:
#line 1251 "parse.y"
    { ((*yyvalp).ttype) = chainon (chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 326:
#line 1256 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 327:
#line 1258 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 328:
#line 1260 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yyloc), p_name); ;}
    break;

  case 329:
#line 1262 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ttype), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 330:
#line 1264 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ttype), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 331:
#line 1266 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ttype), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 332:
#line 1268 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 333:
#line 1270 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 334:
#line 1272 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 336:
#line 1278 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 337:
#line 1280 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 338:
#line 1285 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 340:
#line 1291 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 342:
#line 1297 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 343:
#line 1299 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 344:
#line 1301 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 345:
#line 1303 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 346:
#line 1305 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (6))].yystate.yysemantics.yysval.ttype), tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 352:
#line 1321 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype); chk_dialect ("operator result variables with `=' are", GNU_PASCAL); ;}
    break;

  case 353:
#line 1323 "parse.y"
    { error ("missing operator result variable"); ;}
    break;

  case 354:
#line 1327 "parse.y"
    { push_scope (); ;}
    break;

  case 355:
#line 1327 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 357:
#line 1332 "parse.y"
    { chk_dialect ("empty parentheses are", BORLAND_DELPHI); ((*yyvalp).ttype) = void_list_node; ;}
    break;

  case 358:
#line 1334 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 359:
#line 1336 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE); ;}
    break;

  case 360:
#line 1338 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, NULL_TREE)); ;}
    break;

  case 361:
#line 1340 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 363:
#line 1346 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 364:
#line 1348 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
    break;

  case 366:
#line 1354 "parse.y"
    { ((*yyvalp).ttype) = build_formal_param ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 0, 0); ;}
    break;

  case 367:
#line 1356 "parse.y"
    { ((*yyvalp).ttype) = build_formal_param ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype), 0, 1); ;}
    break;

  case 368:
#line 1358 "parse.y"
    { ((*yyvalp).ttype) = build_formal_param ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype), 1, !!(((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 369:
#line 1360 "parse.y"
    { ((*yyvalp).ttype) = build_formal_param ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype), 3, 1); ;}
    break;

  case 370:
#line 1362 "parse.y"
    { ((*yyvalp).ttype) = build_formal_param ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 2, 1); ;}
    break;

  case 371:
#line 1364 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE); 
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 0);
      ;}
    break;

  case 372:
#line 1370 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 373:
#line 1372 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 374:
#line 1377 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 375:
#line 1379 "parse.y"
    { ((*yyvalp).ttype) = check_result_type ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 378:
#line 1386 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype); chk_dialect ("function result variable specifications are", E_O_PASCAL); ;}
    break;

  case 380:
#line 1392 "parse.y"
    { chk_dialect ("function result variables without `=' are", GNU_PASCAL); ;}
    break;

  case 383:
#line 1402 "parse.y"
    { ((*yyvalp).ttype) = void_type_node; chk_dialect ("untyped parameters are", U_B_D_M_PASCAL); ;}
    break;

  case 384:
#line 1404 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 388:
#line 1415 "parse.y"
    { ((*yyvalp).ttype) = build_type_of ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 391:
#line 1425 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 392:
#line 1427 "parse.y"
    {
        defining_packed_type -= (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.itype);
        PASCAL_TREE_PACKED ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (7))].yystate.yysemantics.yysval.ttype)) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (7))].yystate.yysemantics.yysval.itype);
        ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (7))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (7))].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 394:
#line 1437 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 395:
#line 1439 "parse.y"
    { error ("missing semicolon"); yyerrok; ;}
    break;

  case 397:
#line 1445 "parse.y"
    { TREE_TYPE ((((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ttype)))) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 398:
#line 1450 "parse.y"
    { TREE_TYPE ((((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE))) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 401:
#line 1462 "parse.y"
    { yyerrok; ;}
    break;

  case 403:
#line 1468 "parse.y"
    { yyerrok; ;}
    break;

  case 406:
#line 1475 "parse.y"
    { chk_dialect ("variable declarations in the statement part are", GNU_PASCAL); pushlevel_expand (1); ;}
    break;

  case 407:
#line 1477 "parse.y"
    { un_initialize_block ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 0, 0); ;}
    break;

  case 409:
#line 1483 "parse.y"
    { ((*yyvalp).itype) = 0; ;}
    break;

  case 410:
#line 1485 "parse.y"
    { ((*yyvalp).itype) = 1; ;}
    break;

  case 412:
#line 1493 "parse.y"
    { mark_temporary_levels (); ;}
    break;

  case 413:
#line 1495 "parse.y"
    { release_temporary_levels (); ;}
    break;

  case 418:
#line 1510 "parse.y"
    { expand_call_statement ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 419:
#line 1512 "parse.y"
    { ((*yyvalp).itype) = allow_function_calls (!PASCAL_PROCEDURAL_TYPE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)))); ;}
    break;

  case 420:
#line 1514 "parse.y"
    { expand_pascal_assignment ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype)); allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 421:
#line 1516 "parse.y"
    { build_predef_call (p_Return, NULL_TREE); ;}
    break;

  case 422:
#line 1518 "parse.y"
    { build_predef_call (p_Return, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 423:
#line 1520 "parse.y"
    { build_predef_call (p_Exit, NULL_TREE); ;}
    break;

  case 424:
#line 1522 "parse.y"
    { build_predef_call (p_Exit, build_tree_list (NULL_TREE, void_type_node)); ;}
    break;

  case 425:
#line 1524 "parse.y"
    { build_predef_call (p_Exit, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 426:
#line 1526 "parse.y"
    { build_predef_call (p_Exit, build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 428:
#line 1529 "parse.y"
    { restore_identifiers ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 429:
#line 1531 "parse.y"
    { expand_end_cond (); ;}
    break;

  case 430:
#line 1533 "parse.y"
    { expand_start_else (); ;}
    break;

  case 431:
#line 1535 "parse.y"
    {
        if (!(((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.itype) && extra_warnings)
          warning ("empty statement after `else'");
        expand_end_cond ();
      ;}
    break;

  case 432:
#line 1541 "parse.y"
    { ((*yyvalp).ttype) = pascal_expand_start_case ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 433:
#line 1543 "parse.y"
    {
        if (!EM (current_case_values))
          {
            tree duplicate;
            int res = pushcase (NULL_TREE, NULL, build_decl (LABEL_DECL, NULL_TREE, NULL_TREE), &duplicate);
            gcc_assert (!res);
          }
      ;}
    break;

  case 434:
#line 1552 "parse.y"
    {
        if (!(((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (8))].yystate.yysemantics.yysval.itype) && !(((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (8))].yystate.yysemantics.yysval.itype))
          chk_dialect ("empty `case' statements are", MAC_PASCAL);
        expand_exit_something ();
        if (!EM (current_case_values))
          expand_end_case ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (8))].yystate.yysemantics.yysval.ttype));
        current_case_values = (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (8))].yystate.yysemantics.yysval.ttype);
        yyerrok;
      ;}
    break;

  case 435:
#line 1562 "parse.y"
    { emit_nop (); expand_start_loop_continue_elsewhere (1); ;}
    break;

  case 436:
#line 1564 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yyloc)); expand_loop_continue_here (); ;}
    break;

  case 437:
#line 1566 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (7))].yystate.yyloc)); expand_exit_loop_if_false (0, build_pascal_unary_op (TRUTH_NOT_EXPR, check_boolean ((((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (7))].yystate.yysemantics.yysval.ttype)))); ;}
    break;

  case 438:
#line 1568 "parse.y"
    { expand_end_loop (); ;}
    break;

  case 439:
#line 1570 "parse.y"
    { expand_start_loop (1); ;}
    break;

  case 440:
#line 1572 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yyloc)); expand_exit_loop_if_false (0, check_boolean ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 441:
#line 1574 "parse.y"
    { expand_end_loop (); ;}
    break;

  case 442:
#line 1576 "parse.y"
    { ((*yyvalp).ttype) = start_for_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.code)); ;}
    break;

  case 443:
#line 1578 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (11))].yystate.yyloc)); finish_for_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL ((7) - (11))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (11))].yystate.yysemantics.yysval.code)); ;}
    break;

  case 444:
#line 1580 "parse.y"
    { ((*yyvalp).ttype) = start_for_set_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 445:
#line 1582 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (9))].yystate.yyloc)); finish_for_set_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (9))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (9))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 446:
#line 1584 "parse.y"
    { pascal_expand_goto ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 447:
#line 1589 "parse.y"
    { set_label ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 449:
#line 1595 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 450:
#line 1597 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 451:
#line 1599 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 452:
#line 1601 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 453:
#line 1606 "parse.y"
    { ((*yyvalp).ttype) = pascal_shadow_record_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 454:
#line 1608 "parse.y"
    { ((*yyvalp).ttype) = pascal_shadow_record_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 455:
#line 1613 "parse.y"
    { expand_start_cond (check_boolean ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)), 0); ;}
    break;

  case 456:
#line 1615 "parse.y"
    {
        if (!(((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (7))].yystate.yysemantics.yysval.itype) && extra_warnings)
          warning ("empty statement after `then'");
      ;}
    break;

  case 457:
#line 1623 "parse.y"
    {
        /* Create an implicit `otherwise' (in the rule above) to avoid warnings
           about unhandled cases. In ISO Pascal, this is a run-time error. */
        if (co->case_value_checking)
          build_predef_call (p_CaseNoMatchError, NULL_TREE);
        ((*yyvalp).itype) = 0;
      ;}
    break;

  case 458:
#line 1631 "parse.y"
    { ((*yyvalp).itype) = 1; ;}
    break;

  case 459:
#line 1636 "parse.y"
    { chk_dialect ("`else' in `case' statements is", B_D_M_PASCAL); ;}
    break;

  case 461:
#line 1642 "parse.y"
    { ((*yyvalp).itype) = 0; ;}
    break;

  case 462:
#line 1644 "parse.y"
    { ((*yyvalp).itype) = 1; ;}
    break;

  case 464:
#line 1650 "parse.y"
    { yyerrok; ;}
    break;

  case 465:
#line 1652 "parse.y"
    { error ("case element expected"); ;}
    break;

  case 466:
#line 1654 "parse.y"
    { error ("missing semicolon"); yyerrok; ;}
    break;

  case 467:
#line 1656 "parse.y"
    { error ("extra semicolon"); ;}
    break;

  case 468:
#line 1661 "parse.y"
    { pascal_pushcase ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 469:
#line 1663 "parse.y"
    { expand_exit_something (); ;}
    break;

  case 471:
#line 1669 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 472:
#line 1671 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 473:
#line 1673 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 475:
#line 1679 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 476:
#line 1681 "parse.y"
    { chk_dialect ("`case' ranges are", NOT_CLASSIC_PASCAL); ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 477:
#line 1683 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing `..'"); yyerrok; ;}
    break;

  case 478:
#line 1685 "parse.y"
    { error ("extra `..'"); ((*yyvalp).ttype) = build_tree_list (NULL_TREE, string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), 0)); ;}
    break;

  case 479:
#line 1690 "parse.y"
    { ((*yyvalp).code) = LE_EXPR; ;}
    break;

  case 480:
#line 1692 "parse.y"
    { ((*yyvalp).code) = GE_EXPR; ;}
    break;

  case 481:
#line 1694 "parse.y"
    { error ("missing `to' or `downto'"); ((*yyvalp).code) = LE_EXPR; ;}
    break;

  case 483:
#line 1700 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_lvalue_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 485:
#line 1706 "parse.y"
    { error ("using `=' instead of `:=' in assignment"); ;}
    break;

  case 486:
#line 1711 "parse.y"
    { build_predef_call ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 487:
#line 1713 "parse.y"
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype))->symbol, NULL_TREE); ;}
    break;

  case 488:
#line 1715 "parse.y"
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype))->symbol, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 489:
#line 1717 "parse.y"
    { build_new_dispose (p_Dispose, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE); ;}
    break;

  case 490:
#line 1719 "parse.y"
    { build_new_dispose (p_Dispose, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 491:
#line 1721 "parse.y"
    { build_new_dispose (p_Dispose, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (7))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (7))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (7))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 492:
#line 1723 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE, NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 493:
#line 1725 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (7))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (7))].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (7))].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 494:
#line 1727 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (9))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (9))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((8) - (9))].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (9))].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 495:
#line 1729 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (11))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (11))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((8) - (11))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((10) - (11))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (11))].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 496:
#line 1734 "parse.y"
    { ((*yyvalp).itype) = 0; ;}
    break;

  case 497:
#line 1736 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yyloc), p_volatile); ((*yyvalp).itype) = 1; ;}
    break;

  case 501:
#line 1747 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 502:
#line 1752 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 503:
#line 1757 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 504:
#line 1759 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 505:
#line 1766 "parse.y"
    {
        ((*yyvalp).ttype) = string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), 0);
        if (PEDANTIC (NOT_CLASSIC_PASCAL)
            && ( PASCAL_CST_PARENTHESES (((*yyvalp).ttype))
                 || !(TREE_CODE (((*yyvalp).ttype)) == STRING_CST
                      || (TREE_CODE_CLASS (TREE_CODE (((*yyvalp).ttype))) == tcc_constant
                          && PASCAL_CST_FRESH (((*yyvalp).ttype))))))
          error ("ISO 7185 Pascal allows only simple constants");
      ;}
    break;

  case 506:
#line 1779 "parse.y"
    { ((*yyvalp).ttype) = fold ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 507:
#line 1781 "parse.y"
    { ((*yyvalp).ttype) = fold (parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 509:
#line 1787 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_unary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 510:
#line 1789 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 511:
#line 1791 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 1); ;}
    break;

  case 512:
#line 1793 "parse.y"
    { ((*yyvalp).ttype) = start_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 513:
#line 1795 "parse.y"
    { if ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)) LOCATION_NOTE (COPYLOC ((*yylocp), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yyloc))); ((*yyvalp).ttype) = finish_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 515:
#line 1801 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 516:
#line 1803 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 1); ;}
    break;

  case 517:
#line 1805 "parse.y"
    { ((*yyvalp).ttype) = start_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 518:
#line 1807 "parse.y"
    { if ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)) LOCATION_NOTE (COPYLOC ((*yylocp), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yyloc))); ((*yyvalp).ttype) = finish_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 520:
#line 1813 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 521:
#line 1815 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op (POW_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 522:
#line 1817 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op (POWER_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 523:
#line 1819 "parse.y"
    { ((*yyvalp).ttype) = build_is_as ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), p_is); ;}
    break;

  case 524:
#line 1821 "parse.y"
    { ((*yyvalp).ttype) = build_is_as ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), p_as); ;}
    break;

  case 525:
#line 1826 "parse.y"
    { ((*yyvalp).ttype) = set_exp_original_code (build_pascal_unary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.code)); ;}
    break;

  case 526:
#line 1828 "parse.y"
    { chk_dialect ("the address operator is", B_D_M_PASCAL); ((*yyvalp).ttype) = build_pascal_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype), !co->typed_address); ;}
    break;

  case 529:
#line 1832 "parse.y"
    { ((*yyvalp).ttype) = null_pointer_node; ;}
    break;

  case 531:
#line 1835 "parse.y"
    { ((*yyvalp).ttype) = build_variable_or_routine_access ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 537:
#line 1851 "parse.y"
    { ((*yyvalp).ttype) = combine_strings ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), 1); ;}
    break;

  case 538:
#line 1856 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 539:
#line 1858 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 542:
#line 1865 "parse.y"
    { ((*yyvalp).ttype) = build_caret_string_constant ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 561:
#line 1876 "parse.y"
    {
        if (PASCAL_TYPE_UNDISCRIMINATED_STRING (((*yyvalp).ttype)))
          {
            if (!(co->pascal_dialect & B_D_M_PASCAL))
              error_or_warning (co->pascal_dialect & E_O_PASCAL, "missing string capacity -- assuming 255");
            ((*yyvalp).ttype) = string255_type_node;
          }
      ;}
    break;

  case 562:
#line 1888 "parse.y"
    {
        tree decl = lookup_name ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype));
        ((*yyvalp).ttype) = error_mark_node;
        if (!decl)
          error ("unknown identifier `%s'", IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)));
        else if (TREE_CODE (decl) != TYPE_DECL)
          error ("type name expected, `%s' given", IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)));
        else
          ((*yyvalp).ttype) = TREE_TYPE (decl);
      ;}
    break;

  case 564:
#line 1903 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_id ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 565:
#line 1908 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype))->symbol, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 568:
#line 1915 "parse.y"
    { ((*yyvalp).ttype) = TYPE_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 569:
#line 1917 "parse.y"
    { ((*yyvalp).ttype) = set_exp_original_code ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype), NOP_EXPR); ;}
    break;

  case 570:
#line 1919 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_or_component_access ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 571:
#line 1921 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_pointer_reference ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 572:
#line 1923 "parse.y"
    { ((*yyvalp).ttype) = build_array_ref_or_constructor ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 573:
#line 1925 "parse.y"
    { ((*yyvalp).ttype) = build_iso_constructor ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.ttype), nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 574:
#line 1927 "parse.y"
    { chk_dialect ("empty parentheses are", BORLAND_DELPHI | MAC_PASCAL); ((*yyvalp).ttype) = build_call_or_cast ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 575:
#line 1929 "parse.y"
    { allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.itype)); ((*yyvalp).ttype) = build_call_or_cast ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 576:
#line 1931 "parse.y"
    { ((*yyvalp).ttype) = build_inherited_method ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (2))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 577:
#line 1933 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_FormatString, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 578:
#line 1935 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_StringOf, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 579:
#line 1937 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_Assigned, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (5))].yystate.yysemantics.yysval.ttype))); allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (5))].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 580:
#line 1939 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), co->pascal_dialect & B_D_M_PASCAL); ;}
    break;

  case 581:
#line 1941 "parse.y"
    { ((*yyvalp).ttype) = build_new_dispose (p_New, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE); ;}
    break;

  case 582:
#line 1943 "parse.y"
    { ((*yyvalp).ttype) = build_new_dispose (p_New, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (6))].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (6))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 583:
#line 1945 "parse.y"
    { ((*yyvalp).ttype) = build_new_dispose (p_New, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (7))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (7))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (7))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 585:
#line 1951 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype); allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.itype)); yyerrok; ;}
    break;

  case 586:
#line 1953 "parse.y"
    {
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)) == TYPE_DECL ? (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype) : build_variable_or_routine_access ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (4))].yystate.yysemantics.yysval.ttype)));
        allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (4))].yystate.yysemantics.yysval.itype));
        yyerrok;
      ;}
    break;

  case 587:
#line 1961 "parse.y"
    { ((*yyvalp).itype) = allow_function_calls (0); ;}
    break;

  case 588:
#line 1966 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 589:
#line 1968 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))); yyerrok; ;}
    break;

  case 590:
#line 1970 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, error_mark_node); ;}
    break;

  case 591:
#line 1972 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, error_mark_node); error ("extra comma"); ;}
    break;

  case 593:
#line 1978 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 594:
#line 1980 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 595:
#line 1982 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 596:
#line 1988 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 597:
#line 1990 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 598:
#line 1992 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((5) - (5))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (5))].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (5))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 599:
#line 1997 "parse.y"
    { chk_dialect ("untyped files are", U_B_D_M_PASCAL); ((*yyvalp).ttype) = untyped_file_type_node; ;}
    break;

  case 601:
#line 2003 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 602:
#line 2005 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 606:
#line 2013 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 607:
#line 2018 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 608:
#line 2020 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 609:
#line 2025 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((6) - (6))].yystate.yysemantics.yysval.ttype), build_tree_list (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (6))].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (6))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 610:
#line 2027 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((4) - (4))].yystate.yysemantics.yysval.ttype), build_tree_list (build_tree_list (NULL_TREE, integer_zero_node), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 611:
#line 2032 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (4))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 612:
#line 2037 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list (NULL_TREE, NULL_TREE), (((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 613:
#line 2042 "parse.y"
    { ((*yyvalp).ttype) = maybe_schema_discriminant ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 614:
#line 2044 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 615:
#line 2046 "parse.y"
    { PASCAL_BP_INITIALIZER_LIST ((((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)))) = 1; ;}
    break;

  case 616:
#line 2048 "parse.y"
    { ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 617:
#line 2050 "parse.y"
    { error ("invalid component value"); ((*yyvalp).ttype) = error_mark_node; ;}
    break;

  case 619:
#line 2056 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 620:
#line 2058 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype); error ("missing separator"); ;}
    break;

  case 622:
#line 2064 "parse.y"
    { chk_dialect ("initializers separated with `,' are", B_D_M_PASCAL); ;}
    break;

  case 623:
#line 2069 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 624:
#line 2071 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 626:
#line 2077 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 627:
#line 2079 "parse.y"
    { error ("missing index expression"); ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 628:
#line 2081 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 629:
#line 2083 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 630:
#line 2088 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 631:
#line 2090 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), 1), NULL_TREE); ;}
    break;

  case 632:
#line 2092 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), 1), string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), 1)); ;}
    break;

  case 633:
#line 2097 "parse.y"
    { ((*yyvalp).ttype) = build_set_constructor (NULL_TREE); ;}
    break;

  case 634:
#line 2099 "parse.y"
    { ((*yyvalp).ttype) = build_set_constructor (nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL ((2) - (3))].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 636:
#line 2105 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 637:
#line 2107 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
    break;

  case 638:
#line 2109 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 639:
#line 2114 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 640:
#line 2116 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 641:
#line 2122 "parse.y"
    { ((*yyvalp).code) = CONVERT_EXPR; ;}
    break;

  case 642:
#line 2123 "parse.y"
    { ((*yyvalp).code) = NEGATE_EXPR; ;}
    break;

  case 643:
#line 2127 "parse.y"
    { ((*yyvalp).code) = CONVERT_EXPR; ;}
    break;

  case 644:
#line 2128 "parse.y"
    { ((*yyvalp).code) = NEGATE_EXPR; ;}
    break;

  case 645:
#line 2129 "parse.y"
    { ((*yyvalp).code) = TRUTH_NOT_EXPR; ;}
    break;

  case 646:
#line 2133 "parse.y"
    { ((*yyvalp).code) = NE_EXPR; ;}
    break;

  case 647:
#line 2134 "parse.y"
    { ((*yyvalp).code) = LE_EXPR; ;}
    break;

  case 648:
#line 2135 "parse.y"
    { ((*yyvalp).code) = GE_EXPR; ;}
    break;

  case 649:
#line 2136 "parse.y"
    { ((*yyvalp).code) = EQ_EXPR; ;}
    break;

  case 650:
#line 2137 "parse.y"
    { ((*yyvalp).code) = LT_EXPR; ;}
    break;

  case 651:
#line 2138 "parse.y"
    { ((*yyvalp).code) = GT_EXPR; ;}
    break;

  case 652:
#line 2139 "parse.y"
    { ((*yyvalp).code) = IN_EXPR; ;}
    break;

  case 653:
#line 2143 "parse.y"
    { ((*yyvalp).code) = PLUS_EXPR; ;}
    break;

  case 654:
#line 2144 "parse.y"
    { ((*yyvalp).code) = PLUS_EXPR; ;}
    break;

  case 655:
#line 2145 "parse.y"
    { ((*yyvalp).code) = MINUS_EXPR; ;}
    break;

  case 656:
#line 2146 "parse.y"
    { ((*yyvalp).code) = MINUS_EXPR; ;}
    break;

  case 657:
#line 2147 "parse.y"
    { ((*yyvalp).code) = TRUTH_XOR_EXPR; ;}
    break;

  case 658:
#line 2148 "parse.y"
    { ((*yyvalp).code) = SYMDIFF_EXPR; ;}
    break;

  case 659:
#line 2152 "parse.y"
    { ((*yyvalp).code) = MULT_EXPR; ;}
    break;

  case 660:
#line 2153 "parse.y"
    { ((*yyvalp).code) = RDIV_EXPR; ;}
    break;

  case 661:
#line 2154 "parse.y"
    { ((*yyvalp).code) = TRUNC_DIV_EXPR; ;}
    break;

  case 662:
#line 2155 "parse.y"
    { ((*yyvalp).code) = (co->pascal_dialect & B_D_M_PASCAL) ? TRUNC_MOD_EXPR : FLOOR_MOD_EXPR; ;}
    break;

  case 663:
#line 2156 "parse.y"
    { ((*yyvalp).code) = LSHIFT_EXPR; ;}
    break;

  case 664:
#line 2157 "parse.y"
    { ((*yyvalp).code) = RSHIFT_EXPR; ;}
    break;

  case 665:
#line 2161 "parse.y"
    { ((*yyvalp).code) = TRUTH_OR_EXPR; ;}
    break;

  case 666:
#line 2162 "parse.y"
    { ((*yyvalp).code) = TRUTH_ORIF_EXPR; chk_dialect ("`or else' (without underscore) is", GNU_PASCAL); ;}
    break;

  case 667:
#line 2163 "parse.y"
    { ((*yyvalp).code) = TRUTH_ORIF_EXPR; ;}
    break;

  case 668:
#line 2164 "parse.y"
    { ((*yyvalp).code) = TRUTH_ORIF_EXPR; chk_dialect ("`|' is", MAC_PASCAL); ;}
    break;

  case 669:
#line 2168 "parse.y"
    { ((*yyvalp).code) = TRUTH_AND_EXPR; ;}
    break;

  case 670:
#line 2169 "parse.y"
    { ((*yyvalp).code) = TRUTH_ANDIF_EXPR; chk_dialect ("`and then' (without underscore) is", GNU_PASCAL); ;}
    break;

  case 671:
#line 2170 "parse.y"
    { ((*yyvalp).code) = TRUTH_ANDIF_EXPR; ;}
    break;

  case 672:
#line 2171 "parse.y"
    { ((*yyvalp).code) = TRUTH_ANDIF_EXPR; chk_dialect ("`&' is", MAC_PASCAL); ;}
    break;

  case 673:
#line 2176 "parse.y"
    { ((*yyvalp).itype) = IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype))->symbol; ;}
    break;

  case 674:
#line 2178 "parse.y"
    { ((*yyvalp).itype) = p_and; ;}
    break;

  case 675:
#line 2179 "parse.y"
    { ((*yyvalp).itype) = p_or; ;}
    break;

  case 676:
#line 2180 "parse.y"
    { ((*yyvalp).itype) = p_not; ;}
    break;

  case 677:
#line 2181 "parse.y"
    { ((*yyvalp).itype) = p_xor; ;}
    break;

  case 678:
#line 2182 "parse.y"
    { ((*yyvalp).itype) = p_shl; ;}
    break;

  case 679:
#line 2183 "parse.y"
    { ((*yyvalp).itype) = p_shr; ;}
    break;

  case 680:
#line 2189 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BPlus", "+"); ;}
    break;

  case 681:
#line 2190 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BPlus", "+"); ;}
    break;

  case 682:
#line 2191 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BMinus", "-"); ;}
    break;

  case 683:
#line 2192 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BMinus", "-"); ;}
    break;

  case 684:
#line 2193 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BMult", "*"); ;}
    break;

  case 685:
#line 2194 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("RDiv", "/"); ;}
    break;

  case 686:
#line 2195 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("Div"); ;}
    break;

  case 687:
#line 2196 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("Mod"); ;}
    break;

  case 688:
#line 2197 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("RPower", "**"); ;}
    break;

  case 689:
#line 2198 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("In"); ;}
    break;

  case 690:
#line 2199 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("LT", "<"); ;}
    break;

  case 691:
#line 2200 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("EQ", "="); ;}
    break;

  case 692:
#line 2201 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("GT", ">"); ;}
    break;

  case 693:
#line 2202 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("NE", "<>"); ;}
    break;

  case 694:
#line 2203 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("GE", ">="); ;}
    break;

  case 695:
#line 2204 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("LE", "<="); ;}
    break;

  case 696:
#line 2205 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("And"); ;}
    break;

  case 697:
#line 2206 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("SAnd", "&"); ;}
    break;

  case 698:
#line 2207 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("Or"); ;}
    break;

  case 699:
#line 2208 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("SOr", "|"); ;}
    break;

  case 700:
#line 2209 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("SymDiff", "<>"); ;}
    break;

  case 703:
#line 2215 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilPlus", "+>"); ;}
    break;

  case 704:
#line 2216 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilMinus", "->"); ;}
    break;

  case 705:
#line 2217 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorPlus", "+<"); ;}
    break;

  case 706:
#line 2218 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorMinus", "-<"); ;}
    break;

  case 707:
#line 2222 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilMult", "*>"); ;}
    break;

  case 708:
#line 2223 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilRDiv", "/>"); ;}
    break;

  case 709:
#line 2224 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorMult", "*<"); ;}
    break;

  case 710:
#line 2225 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorRDiv", "/<"); ;}
    break;

  case 713:
#line 2237 "parse.y"
    { ((*yyvalp).ttype) = numeric_label ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 714:
#line 2242 "parse.y"
    { ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 715:
#line 2247 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 716:
#line 2249 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 717:
#line 2251 "parse.y"
    {
        ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype));
        error ("comma missing after `%s'", IDENTIFIER_NAME (TREE_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype))));
        yyerrok;
      ;}
    break;

  case 718:
#line 2257 "parse.y"
    { error ("extra comma following identifier list"); ;}
    break;

  case 720:
#line 2263 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 721:
#line 2265 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 723:
#line 2271 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_id ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (3))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((3) - (3))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 724:
#line 2276 "parse.y"
    { warn_about_keyword_redeclaration (((*yyvalp).ttype), 1); ;}
    break;

  case 771:
#line 2330 "parse.y"
    { ((*yyvalp).ttype) = check_identifier ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 780:
#line 2347 "parse.y"
    { char c = (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.itype); ((*yyvalp).ttype) = make_identifier (&c, 1); ;}
    break;

  case 781:
#line 2354 "parse.y"
    { pushlevel_expand (0); ;}
    break;

  case 782:
#line 2359 "parse.y"
    { poplevel_expand (0, 1); ;}
    break;

  case 783:
#line 2364 "parse.y"
    { lex_const_equal = 0; ;}
    break;

  case 784:
#line 2369 "parse.y"
    { defining_packed_type += ((*yyvalp).itype) = !co->ignore_packed;  /* can be nested */ ;}
    break;

  case 785:
#line 2374 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yyloc), p_protected); ;}
    break;

  case 786:
#line 2379 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL ((1) - (1))].yystate.yyloc), p_module); ;}
    break;

  case 787:
#line 2384 "parse.y"
    { yyerrok; ;}
    break;

  case 788:
#line 2386 "parse.y"
    { yyerrok; ;}
    break;

  case 795:
#line 2403 "parse.y"
    { warning ("missing `.' at the end of program/unit/module"); ;}
    break;

  case 796:
#line 2408 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 797:
#line 2413 "parse.y"
    { ((*yyvalp).ttype) = error_mark_node; ;}
    break;


/* Line 930 of glr.c.  */
#line 7778 "parse.c"
      default: break;
    }

  return yyok;
# undef yyerrok
# undef YYABORT
# undef YYACCEPT
# undef YYERROR
# undef YYBACKUP
# undef yyclearin
# undef YYRECOVERING
}


/*ARGSUSED*/ static void
yyuserMerge (int yyn, YYSTYPE* yy0, YYSTYPE* yy1)
{
  YYUSE (yy0);
  YYUSE (yy1);

  switch (yyn)
    {
      
      default: break;
    }
}

			      /* Bison grammar-table manipulation.  */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/** Number of symbols composing the right hand side of rule #RULE.  */
static inline int
yyrhsLength (yyRuleNum yyrule)
{
  return yyr2[yyrule];
}

static void
yydestroyGLRState (char const *yymsg, yyGLRState *yys)
{
  if (yys->yyresolved)
    yydestruct (yymsg, yystos[yys->yylrState],
		&yys->yysemantics.yysval, &yys->yyloc);
  else
    {
#if YYDEBUG
      if (yydebug)
	{
	  if (yys->yysemantics.yyfirstVal)
	    YYFPRINTF (stderr, "%s unresolved ", yymsg);
	  else
	    YYFPRINTF (stderr, "%s incomplete ", yymsg);
	  yy_symbol_print (stderr, yystos[yys->yylrState],
			   NULL, &yys->yyloc);
	  YYFPRINTF (stderr, "\n");
	}
#endif

      if (yys->yysemantics.yyfirstVal)
	{
	  yySemanticOption *yyoption = yys->yysemantics.yyfirstVal;
	  yyGLRState *yyrh;
	  int yyn;
	  for (yyrh = yyoption->yystate, yyn = yyrhsLength (yyoption->yyrule);
	       yyn > 0;
	       yyrh = yyrh->yypred, yyn -= 1)
	    yydestroyGLRState (yymsg, yyrh);
	}
    }
}

/** Left-hand-side symbol for rule #RULE.  */
static inline yySymbol
yylhsNonterm (yyRuleNum yyrule)
{
  return yyr1[yyrule];
}

#define yyis_pact_ninf(yystate) \
  ((yystate) == YYPACT_NINF)

/** True iff LR state STATE has only a default reduction (regardless
 *  of token).  */
static inline yybool
yyisDefaultedState (yyStateNum yystate)
{
  return yyis_pact_ninf (yypact[yystate]);
}

/** The default reduction for STATE, assuming it has one.  */
static inline yyRuleNum
yydefaultAction (yyStateNum yystate)
{
  return yydefact[yystate];
}

#define yyis_table_ninf(yytable_value) \
  YYID (0)

/** Set *YYACTION to the action to take in YYSTATE on seeing YYTOKEN.
 *  Result R means
 *    R < 0:  Reduce on rule -R.
 *    R = 0:  Error.
 *    R > 0:  Shift to state R.
 *  Set *CONFLICTS to a pointer into yyconfl to 0-terminated list of
 *  conflicting reductions.
 */
static inline void
yygetLRActions (yyStateNum yystate, int yytoken,
		int* yyaction, const short int** yyconflicts)
{
  int yyindex = yypact[yystate] + yytoken;
  if (yyindex < 0 || YYLAST < yyindex || yycheck[yyindex] != yytoken)
    {
      *yyaction = -yydefact[yystate];
      *yyconflicts = yyconfl;
    }
  else if (! yyis_table_ninf (yytable[yyindex]))
    {
      *yyaction = yytable[yyindex];
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
  else
    {
      *yyaction = 0;
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
}

static inline yyStateNum
yyLRgotoState (yyStateNum yystate, yySymbol yylhs)
{
  int yyr;
  yyr = yypgoto[yylhs - YYNTOKENS] + yystate;
  if (0 <= yyr && yyr <= YYLAST && yycheck[yyr] == yystate)
    return yytable[yyr];
  else
    return yydefgoto[yylhs - YYNTOKENS];
}

static inline yybool
yyisShiftAction (int yyaction)
{
  return 0 < yyaction;
}

static inline yybool
yyisErrorAction (int yyaction)
{
  return yyaction == 0;
}

				/* GLRStates */

/** Return a fresh GLRStackItem.  Callers should call
 * YY_RESERVE_GLRSTACK afterwards to make sure there is sufficient
 * headroom.  */

static inline yyGLRStackItem*
yynewGLRStackItem (yyGLRStack* yystackp, yybool yyisState)
{
  yyGLRStackItem* yynewItem = yystackp->yynextFree;
  yystackp->yyspaceLeft -= 1;
  yystackp->yynextFree += 1;
  yynewItem->yystate.yyisState = yyisState;
  return yynewItem;
}

/** Add a new semantic action that will execute the action for rule
 *  RULENUM on the semantic values in RHS to the list of
 *  alternative actions for STATE.  Assumes that RHS comes from
 *  stack #K of *STACKP. */
static void
yyaddDeferredAction (yyGLRStack* yystackp, size_t yyk, yyGLRState* yystate,
		     yyGLRState* rhs, yyRuleNum yyrule)
{
  yySemanticOption* yynewOption =
    &yynewGLRStackItem (yystackp, yyfalse)->yyoption;
  yynewOption->yystate = rhs;
  yynewOption->yyrule = yyrule;
  if (yystackp->yytops.yylookaheadNeeds[yyk])
    {
      yynewOption->yyrawchar = yychar;
      yynewOption->yyval = yylval;
      yynewOption->yyloc = yylloc;
    }
  else
    yynewOption->yyrawchar = YYEMPTY;
  yynewOption->yynext = yystate->yysemantics.yyfirstVal;
  yystate->yysemantics.yyfirstVal = yynewOption;

  YY_RESERVE_GLRSTACK (yystackp);
}

				/* GLRStacks */

/** Initialize SET to a singleton set containing an empty stack.  */
static yybool
yyinitStateSet (yyGLRStateSet* yyset)
{
  yyset->yysize = 1;
  yyset->yycapacity = 16;
  yyset->yystates = (yyGLRState**) YYMALLOC (16 * sizeof yyset->yystates[0]);
  if (! yyset->yystates)
    return yyfalse;
  yyset->yystates[0] = NULL;
  yyset->yylookaheadNeeds =
    (yybool*) YYMALLOC (16 * sizeof yyset->yylookaheadNeeds[0]);
  if (! yyset->yylookaheadNeeds)
    {
      YYFREE (yyset->yystates);
      return yyfalse;
    }
  return yytrue;
}

static void yyfreeStateSet (yyGLRStateSet* yyset)
{
  YYFREE (yyset->yystates);
  YYFREE (yyset->yylookaheadNeeds);
}

/** Initialize STACK to a single empty stack, with total maximum
 *  capacity for all stacks of SIZE.  */
static yybool
yyinitGLRStack (yyGLRStack* yystackp, size_t yysize)
{
  yystackp->yyerrState = 0;
  yynerrs = 0;
  yystackp->yyspaceLeft = yysize;
  yystackp->yyitems =
    (yyGLRStackItem*) YYMALLOC (yysize * sizeof yystackp->yynextFree[0]);
  if (!yystackp->yyitems)
    return yyfalse;
  yystackp->yynextFree = yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;
  return yyinitStateSet (&yystackp->yytops);
}


#if YYSTACKEXPANDABLE
# define YYRELOC(YYFROMITEMS,YYTOITEMS,YYX,YYTYPE) \
  &((YYTOITEMS) - ((YYFROMITEMS) - (yyGLRStackItem*) (YYX)))->YYTYPE

/** If STACK is expandable, extend it.  WARNING: Pointers into the
    stack from outside should be considered invalid after this call.
    We always expand when there are 1 or fewer items left AFTER an
    allocation, so that we can avoid having external pointers exist
    across an allocation.  */
static void
yyexpandGLRStack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yynewItems;
  yyGLRStackItem* yyp0, *yyp1;
  size_t yysize, yynewSize;
  size_t yyn;
  yysize = yystackp->yynextFree - yystackp->yyitems;
  if (YYMAXDEPTH - YYHEADROOM < yysize)
    yyMemoryExhausted (yystackp);
  yynewSize = 2*yysize;
  if (YYMAXDEPTH < yynewSize)
    yynewSize = YYMAXDEPTH;
  yynewItems = (yyGLRStackItem*) YYMALLOC (yynewSize * sizeof yynewItems[0]);
  if (! yynewItems)
    yyMemoryExhausted (yystackp);
  for (yyp0 = yystackp->yyitems, yyp1 = yynewItems, yyn = yysize;
       0 < yyn;
       yyn -= 1, yyp0 += 1, yyp1 += 1)
    {
      *yyp1 = *yyp0;
      if (*(yybool *) yyp0)
	{
	  yyGLRState* yys0 = &yyp0->yystate;
	  yyGLRState* yys1 = &yyp1->yystate;
	  if (yys0->yypred != NULL)
	    yys1->yypred =
	      YYRELOC (yyp0, yyp1, yys0->yypred, yystate);
	  if (! yys0->yyresolved && yys0->yysemantics.yyfirstVal != NULL)
	    yys1->yysemantics.yyfirstVal =
	      YYRELOC(yyp0, yyp1, yys0->yysemantics.yyfirstVal, yyoption);
	}
      else
	{
	  yySemanticOption* yyv0 = &yyp0->yyoption;
	  yySemanticOption* yyv1 = &yyp1->yyoption;
	  if (yyv0->yystate != NULL)
	    yyv1->yystate = YYRELOC (yyp0, yyp1, yyv0->yystate, yystate);
	  if (yyv0->yynext != NULL)
	    yyv1->yynext = YYRELOC (yyp0, yyp1, yyv0->yynext, yyoption);
	}
    }
  if (yystackp->yysplitPoint != NULL)
    yystackp->yysplitPoint = YYRELOC (yystackp->yyitems, yynewItems,
				 yystackp->yysplitPoint, yystate);

  for (yyn = 0; yyn < yystackp->yytops.yysize; yyn += 1)
    if (yystackp->yytops.yystates[yyn] != NULL)
      yystackp->yytops.yystates[yyn] =
	YYRELOC (yystackp->yyitems, yynewItems,
		 yystackp->yytops.yystates[yyn], yystate);
  YYFREE (yystackp->yyitems);
  yystackp->yyitems = yynewItems;
  yystackp->yynextFree = yynewItems + yysize;
  yystackp->yyspaceLeft = yynewSize - yysize;
}
#endif

static void
yyfreeGLRStack (yyGLRStack* yystackp)
{
  YYFREE (yystackp->yyitems);
  yyfreeStateSet (&yystackp->yytops);
}

/** Assuming that S is a GLRState somewhere on STACK, update the
 *  splitpoint of STACK, if needed, so that it is at least as deep as
 *  S.  */
static inline void
yyupdateSplit (yyGLRStack* yystackp, yyGLRState* yys)
{
  if (yystackp->yysplitPoint != NULL && yystackp->yysplitPoint > yys)
    yystackp->yysplitPoint = yys;
}

/** Invalidate stack #K in STACK.  */
static inline void
yymarkStackDeleted (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yytops.yystates[yyk] != NULL)
    yystackp->yylastDeleted = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yystates[yyk] = NULL;
}

/** Undelete the last stack that was marked as deleted.  Can only be
    done once after a deletion, and only when all other stacks have
    been deleted.  */
static void
yyundeleteLastStack (yyGLRStack* yystackp)
{
  if (yystackp->yylastDeleted == NULL || yystackp->yytops.yysize != 0)
    return;
  yystackp->yytops.yystates[0] = yystackp->yylastDeleted;
  yystackp->yytops.yysize = 1;
  YYDPRINTF ((stderr, "Restoring last deleted stack as stack #0.\n"));
  yystackp->yylastDeleted = NULL;
}

static inline void
yyremoveDeletes (yyGLRStack* yystackp)
{
  size_t yyi, yyj;
  yyi = yyj = 0;
  while (yyj < yystackp->yytops.yysize)
    {
      if (yystackp->yytops.yystates[yyi] == NULL)
	{
	  if (yyi == yyj)
	    {
	      YYDPRINTF ((stderr, "Removing dead stacks.\n"));
	    }
	  yystackp->yytops.yysize -= 1;
	}
      else
	{
	  yystackp->yytops.yystates[yyj] = yystackp->yytops.yystates[yyi];
	  /* In the current implementation, it's unnecessary to copy
	     yystackp->yytops.yylookaheadNeeds[yyi] since, after
	     yyremoveDeletes returns, the parser immediately either enters
	     deterministic operation or shifts a token.  However, it doesn't
	     hurt, and the code might evolve to need it.  */
	  yystackp->yytops.yylookaheadNeeds[yyj] =
	    yystackp->yytops.yylookaheadNeeds[yyi];
	  if (yyj != yyi)
	    {
	      YYDPRINTF ((stderr, "Rename stack %lu -> %lu.\n",
			  (unsigned long int) yyi, (unsigned long int) yyj));
	    }
	  yyj += 1;
	}
      yyi += 1;
    }
}

/** Shift to a new state on stack #K of STACK, corresponding to LR state
 * LRSTATE, at input position POSN, with (resolved) semantic value SVAL.  */
static inline void
yyglrShift (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
	    size_t yyposn,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yytrue;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yysval = *yyvalp;
  yynewState->yyloc = *yylocp;
  yystackp->yytops.yystates[yyk] = yynewState;

  YY_RESERVE_GLRSTACK (yystackp);
}

/** Shift stack #K of YYSTACK, to a new state corresponding to LR
 *  state YYLRSTATE, at input position YYPOSN, with the (unresolved)
 *  semantic value of YYRHS under the action for YYRULE.  */
static inline void
yyglrShiftDefer (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
		 size_t yyposn, yyGLRState* rhs, yyRuleNum yyrule)
{
  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;

  yynewState->yylrState = yylrState;
  yynewState->yyposn = yyposn;
  yynewState->yyresolved = yyfalse;
  yynewState->yypred = yystackp->yytops.yystates[yyk];
  yynewState->yysemantics.yyfirstVal = NULL;
  yystackp->yytops.yystates[yyk] = yynewState;

  /* Invokes YY_RESERVE_GLRSTACK.  */
  yyaddDeferredAction (yystackp, yyk, yynewState, rhs, yyrule);
}

/** Pop the symbols consumed by reduction #RULE from the top of stack
 *  #K of STACK, and perform the appropriate semantic action on their
 *  semantic values.  Assumes that all ambiguities in semantic values
 *  have been previously resolved.  Set *VALP to the resulting value,
 *  and *LOCP to the computed location (if any).  Return value is as
 *  for userAction.  */
static inline YYRESULTTAG
yydoAction (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  int yynrhs = yyrhsLength (yyrule);

  if (yystackp->yysplitPoint == NULL)
    {
      /* Standard special case: single stack.  */
      yyGLRStackItem* rhs = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
      YYASSERT (yyk == 0);
      yystackp->yynextFree -= yynrhs;
      yystackp->yyspaceLeft += yynrhs;
      yystackp->yytops.yystates[0] = & yystackp->yynextFree[-1].yystate;
      return yyuserAction (yyrule, yynrhs, rhs,
			   yyvalp, yylocp, yystackp);
    }
  else
    {
      /* At present, doAction is never called in nondeterministic
       * mode, so this branch is never taken.  It is here in
       * anticipation of a future feature that will allow immediate
       * evaluation of selected actions in nondeterministic mode.  */
      int yyi;
      yyGLRState* yys;
      yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
      yys = yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred
	= yystackp->yytops.yystates[yyk];
      if (yynrhs == 0)
	/* Set default location.  */
	yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yys->yyloc;
      for (yyi = 0; yyi < yynrhs; yyi += 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yystackp->yytops.yystates[yyk] = yys;
      return yyuserAction (yyrule, yynrhs, yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp);
    }
}

#if !YYDEBUG
# define YY_REDUCE_PRINT(Args)
#else
# define YY_REDUCE_PRINT(Args)		\
do {					\
  if (yydebug)				\
    yy_reduce_print Args;		\
} while (YYID (0))

/*----------------------------------------------------------.
| Report that the RULE is going to be reduced on stack #K.  |
`----------------------------------------------------------*/

/*ARGSUSED*/ static inline void
yy_reduce_print (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  int yynrhs = yyrhsLength (yyrule);
  yybool yynormal __attribute__ ((__unused__)) =
    (yystackp->yysplitPoint == NULL);
  yyGLRStackItem* yyvsp = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
  int yylow = 1;
  int yyi;
  YYUSE (yyvalp);
  YYUSE (yylocp);
  YYFPRINTF (stderr, "Reducing stack %lu by rule %d (line %lu):\n",
	     (unsigned long int) yyk, yyrule - 1,
	     (unsigned long int) yyrline[yyrule]);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yysemantics.yysval)
		       , &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yyloc)		       );
      fprintf (stderr, "\n");
    }
}
#endif

/** Pop items off stack #K of STACK according to grammar rule RULE,
 *  and push back on the resulting nonterminal symbol.  Perform the
 *  semantic action associated with RULE and store its value with the
 *  newly pushed state, if FORCEEVAL or if STACK is currently
 *  unambiguous.  Otherwise, store the deferred semantic action with
 *  the new state.  If the new state would have an identical input
 *  position, LR state, and predecessor to an existing state on the stack,
 *  it is identified with that existing state, eliminating stack #K from
 *  the STACK.  In this case, the (necessarily deferred) semantic value is
 *  added to the options for the existing state's semantic value.
 */
static inline YYRESULTTAG
yyglrReduce (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
	     yybool yyforceEval)
{
  size_t yyposn = yystackp->yytops.yystates[yyk]->yyposn;

  if (yyforceEval || yystackp->yysplitPoint == NULL)
    {
      YYSTYPE yysval;
      YYLTYPE yyloc;

      YY_REDUCE_PRINT ((yystackp, yyk, yyrule, &yysval, &yyloc));
      YYCHK (yydoAction (yystackp, yyk, yyrule, &yysval,
			 &yyloc));
      YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyrule], &yysval, &yyloc);
      yyglrShift (yystackp, yyk,
		  yyLRgotoState (yystackp->yytops.yystates[yyk]->yylrState,
				 yylhsNonterm (yyrule)),
		  yyposn, &yysval, &yyloc);
    }
  else
    {
      size_t yyi;
      int yyn;
      yyGLRState* yys, *yys0 = yystackp->yytops.yystates[yyk];
      yyStateNum yynewLRState;

      for (yys = yystackp->yytops.yystates[yyk], yyn = yyrhsLength (yyrule);
	   0 < yyn; yyn -= 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystackp, yys);
      yynewLRState = yyLRgotoState (yys->yylrState, yylhsNonterm (yyrule));
      YYDPRINTF ((stderr,
		  "Reduced stack %lu by rule #%d; action deferred.  Now in state %d.\n",
		  (unsigned long int) yyk, yyrule - 1, yynewLRState));
      for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
	if (yyi != yyk && yystackp->yytops.yystates[yyi] != NULL)
	  {
	    yyGLRState* yyp, *yysplit = yystackp->yysplitPoint;
	    yyp = yystackp->yytops.yystates[yyi];
	    while (yyp != yys && yyp != yysplit && yyp->yyposn >= yyposn)
	      {
		if (yyp->yylrState == yynewLRState && yyp->yypred == yys)
		  {
		    yyaddDeferredAction (yystackp, yyk, yyp, yys0, yyrule);
		    yymarkStackDeleted (yystackp, yyk);
		    YYDPRINTF ((stderr, "Merging stack %lu into stack %lu.\n",
				(unsigned long int) yyk,
				(unsigned long int) yyi));
		    return yyok;
		  }
		yyp = yyp->yypred;
	      }
	  }
      yystackp->yytops.yystates[yyk] = yys;
      yyglrShiftDefer (yystackp, yyk, yynewLRState, yyposn, yys0, yyrule);
    }
  return yyok;
}

static size_t
yysplitStack (yyGLRStack* yystackp, size_t yyk)
{
  if (yystackp->yysplitPoint == NULL)
    {
      YYASSERT (yyk == 0);
      yystackp->yysplitPoint = yystackp->yytops.yystates[yyk];
    }
  if (yystackp->yytops.yysize >= yystackp->yytops.yycapacity)
    {
      yyGLRState** yynewStates;
      yybool* yynewLookaheadNeeds;

      yynewStates = NULL;

      if (yystackp->yytops.yycapacity
	  > (YYSIZEMAX / (2 * sizeof yynewStates[0])))
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yycapacity *= 2;

      yynewStates =
	(yyGLRState**) YYREALLOC (yystackp->yytops.yystates,
				  (yystackp->yytops.yycapacity
				   * sizeof yynewStates[0]));
      if (yynewStates == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yystates = yynewStates;

      yynewLookaheadNeeds =
	(yybool*) YYREALLOC (yystackp->yytops.yylookaheadNeeds,
			     (yystackp->yytops.yycapacity
			      * sizeof yynewLookaheadNeeds[0]));
      if (yynewLookaheadNeeds == NULL)
	yyMemoryExhausted (yystackp);
      yystackp->yytops.yylookaheadNeeds = yynewLookaheadNeeds;
    }
  yystackp->yytops.yystates[yystackp->yytops.yysize]
    = yystackp->yytops.yystates[yyk];
  yystackp->yytops.yylookaheadNeeds[yystackp->yytops.yysize]
    = yystackp->yytops.yylookaheadNeeds[yyk];
  yystackp->yytops.yysize += 1;
  return yystackp->yytops.yysize-1;
}

/** True iff Y0 and Y1 represent identical options at the top level.
 *  That is, they represent the same rule applied to RHS symbols
 *  that produce the same terminal symbols.  */
static yybool
yyidenticalOptions (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  if (yyy0->yyrule == yyy1->yyrule)
    {
      yyGLRState *yys0, *yys1;
      int yyn;
      for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
	   yyn = yyrhsLength (yyy0->yyrule);
	   yyn > 0;
	   yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
	if (yys0->yyposn != yys1->yyposn)
	  return yyfalse;
      return yytrue;
    }
  else
    return yyfalse;
}

/** Assuming identicalOptions (Y0,Y1), destructively merge the
 *  alternative semantic values for the RHS-symbols of Y1 and Y0.  */
static void
yymergeOptionSets (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  yyGLRState *yys0, *yys1;
  int yyn;
  for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
       yyn = yyrhsLength (yyy0->yyrule);
       yyn > 0;
       yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
    {
      if (yys0 == yys1)
	break;
      else if (yys0->yyresolved)
	{
	  yys1->yyresolved = yytrue;
	  yys1->yysemantics.yysval = yys0->yysemantics.yysval;
	}
      else if (yys1->yyresolved)
	{
	  yys0->yyresolved = yytrue;
	  yys0->yysemantics.yysval = yys1->yysemantics.yysval;
	}
      else
	{
	  yySemanticOption** yyz0p;
	  yySemanticOption* yyz1;
	  yyz0p = &yys0->yysemantics.yyfirstVal;
	  yyz1 = yys1->yysemantics.yyfirstVal;
	  while (YYID (yytrue))
	    {
	      if (yyz1 == *yyz0p || yyz1 == NULL)
		break;
	      else if (*yyz0p == NULL)
		{
		  *yyz0p = yyz1;
		  break;
		}
	      else if (*yyz0p < yyz1)
		{
		  yySemanticOption* yyz = *yyz0p;
		  *yyz0p = yyz1;
		  yyz1 = yyz1->yynext;
		  (*yyz0p)->yynext = yyz;
		}
	      yyz0p = &(*yyz0p)->yynext;
	    }
	  yys1->yysemantics.yyfirstVal = yys0->yysemantics.yyfirstVal;
	}
    }
}

/** Y0 and Y1 represent two possible actions to take in a given
 *  parsing state; return 0 if no combination is possible,
 *  1 if user-mergeable, 2 if Y0 is preferred, 3 if Y1 is preferred.  */
static int
yypreference (yySemanticOption* y0, yySemanticOption* y1)
{
  yyRuleNum r0 = y0->yyrule, r1 = y1->yyrule;
  int p0 = yydprec[r0], p1 = yydprec[r1];

  if (p0 == p1)
    {
      if (yymerger[r0] == 0 || yymerger[r0] != yymerger[r1])
	return 0;
      else
	return 1;
    }
  if (p0 == 0 || p1 == 0)
    return 0;
  if (p0 < p1)
    return 3;
  if (p1 < p0)
    return 2;
  return 0;
}

static YYRESULTTAG yyresolveValue (yyGLRState* yys,
				   yyGLRStack* yystackp);


/** Resolve the previous N states starting at and including state S.  If result
 *  != yyok, some states may have been left unresolved possibly with empty
 *  semantic option chains.  Regardless of whether result = yyok, each state
 *  has been left with consistent data so that yydestroyGLRState can be invoked
 *  if necessary.  */
static YYRESULTTAG
yyresolveStates (yyGLRState* yys, int yyn,
		 yyGLRStack* yystackp)
{
  if (0 < yyn)
    {
      YYASSERT (yys->yypred);
      YYCHK (yyresolveStates (yys->yypred, yyn-1, yystackp));
      if (! yys->yyresolved)
	YYCHK (yyresolveValue (yys, yystackp));
    }
  return yyok;
}

/** Resolve the states for the RHS of OPT, perform its user action, and return
 *  the semantic value and location.  Regardless of whether result = yyok, all
 *  RHS states have been destroyed (assuming the user action destroys all RHS
 *  semantic values if invoked).  */
static YYRESULTTAG
yyresolveAction (yySemanticOption* yyopt, yyGLRStack* yystackp,
		 YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
  int yynrhs;
  int yychar_current;
  YYSTYPE yylval_current;
  YYLTYPE yylloc_current;
  YYRESULTTAG yyflag;

  yynrhs = yyrhsLength (yyopt->yyrule);
  yyflag = yyresolveStates (yyopt->yystate, yynrhs, yystackp);
  if (yyflag != yyok)
    {
      yyGLRState *yys;
      for (yys = yyopt->yystate; yynrhs > 0; yys = yys->yypred, yynrhs -= 1)
	yydestroyGLRState ("Cleanup: popping", yys);
      return yyflag;
    }

  yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred = yyopt->yystate;
  if (yynrhs == 0)
    /* Set default location.  */
    yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yyopt->yystate->yyloc;
  yychar_current = yychar;
  yylval_current = yylval;
  yylloc_current = yylloc;
  yychar = yyopt->yyrawchar;
  yylval = yyopt->yyval;
  yylloc = yyopt->yyloc;
  yyflag = yyuserAction (yyopt->yyrule, yynrhs,
			   yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystackp);
  yychar = yychar_current;
  yylval = yylval_current;
  yylloc = yylloc_current;
  return yyflag;
}

#if YYDEBUG
static void
yyreportTree (yySemanticOption* yyx, int yyindent)
{
  int yynrhs = yyrhsLength (yyx->yyrule);
  int yyi;
  yyGLRState* yys;
  yyGLRState* yystates[1 + YYMAXRHS];
  yyGLRState yyleftmost_state;

  for (yyi = yynrhs, yys = yyx->yystate; 0 < yyi; yyi -= 1, yys = yys->yypred)
    yystates[yyi] = yys;
  if (yys == NULL)
    {
      yyleftmost_state.yyposn = 0;
      yystates[0] = &yyleftmost_state;
    }
  else
    yystates[0] = yys;

  if (yyx->yystate->yyposn < yys->yyposn + 1)
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, empty>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1);
  else
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, tokens %lu .. %lu>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule - 1, (unsigned long int) (yys->yyposn + 1),
	       (unsigned long int) yyx->yystate->yyposn);
  for (yyi = 1; yyi <= yynrhs; yyi += 1)
    {
      if (yystates[yyi]->yyresolved)
	{
	  if (yystates[yyi-1]->yyposn+1 > yystates[yyi]->yyposn)
	    YYFPRINTF (stderr, "%*s%s <empty>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]));
	  else
	    YYFPRINTF (stderr, "%*s%s <tokens %lu .. %lu>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]),
		       (unsigned long int) (yystates[yyi - 1]->yyposn + 1),
		       (unsigned long int) yystates[yyi]->yyposn);
	}
      else
	yyreportTree (yystates[yyi]->yysemantics.yyfirstVal, yyindent+2);
    }
}
#endif

/*ARGSUSED*/ static YYRESULTTAG
yyreportAmbiguity (yySemanticOption* yyx0,
		   yySemanticOption* yyx1)
{
  YYUSE (yyx0);
  YYUSE (yyx1);

#if YYDEBUG
  YYFPRINTF (stderr, "Ambiguity detected.\n");
  YYFPRINTF (stderr, "Option 1,\n");
  yyreportTree (yyx0, 2);
  YYFPRINTF (stderr, "\nOption 2,\n");
  yyreportTree (yyx1, 2);
  YYFPRINTF (stderr, "\n");
#endif

  yyerror (YY_("syntax is ambiguous"));
  return yyabort;
}

/** Starting at and including state S1, resolve the location for each of the
 *  previous N1 states that is unresolved.  The first semantic option of a state
 *  is always chosen.  */
static void
yyresolveLocations (yyGLRState* yys1, int yyn1,
		    yyGLRStack *yystackp)
{
  if (0 < yyn1)
    {
      yyresolveLocations (yys1->yypred, yyn1 - 1, yystackp);
      if (!yys1->yyresolved)
	{
	  yySemanticOption *yyoption;
	  yyGLRStackItem yyrhsloc[1 + YYMAXRHS];
	  int yynrhs;
	  int yychar_current;
	  YYSTYPE yylval_current;
	  YYLTYPE yylloc_current;
	  yyoption = yys1->yysemantics.yyfirstVal;
	  YYASSERT (yyoption != NULL);
	  yynrhs = yyrhsLength (yyoption->yyrule);
	  if (yynrhs > 0)
	    {
	      yyGLRState *yys;
	      int yyn;
	      yyresolveLocations (yyoption->yystate, yynrhs,
				  yystackp);
	      for (yys = yyoption->yystate, yyn = yynrhs;
		   yyn > 0;
		   yys = yys->yypred, yyn -= 1)
		yyrhsloc[yyn].yystate.yyloc = yys->yyloc;
	    }
	  else
	    {
	      /* Both yyresolveAction and yyresolveLocations traverse the GSS
		 in reverse rightmost order.  It is only necessary to invoke
		 yyresolveLocations on a subforest for which yyresolveAction
		 would have been invoked next had an ambiguity not been
		 detected.  Thus the location of the previous state (but not
		 necessarily the previous state itself) is guaranteed to be
		 resolved already.  */
	      yyGLRState *yyprevious = yyoption->yystate;
	      yyrhsloc[0].yystate.yyloc = yyprevious->yyloc;
	    }
	  yychar_current = yychar;
	  yylval_current = yylval;
	  yylloc_current = yylloc;
	  yychar = yyoption->yyrawchar;
	  yylval = yyoption->yyval;
	  yylloc = yyoption->yyloc;
	  YYLLOC_DEFAULT ((yys1->yyloc), yyrhsloc, yynrhs);
	  yychar = yychar_current;
	  yylval = yylval_current;
	  yylloc = yylloc_current;
	}
    }
}

/** Resolve the ambiguity represented in state S, perform the indicated
 *  actions, and set the semantic value of S.  If result != yyok, the chain of
 *  semantic options in S has been cleared instead or it has been left
 *  unmodified except that redundant options may have been removed.  Regardless
 *  of whether result = yyok, S has been left with consistent data so that
 *  yydestroyGLRState can be invoked if necessary.  */
static YYRESULTTAG
yyresolveValue (yyGLRState* yys, yyGLRStack* yystackp)
{
  yySemanticOption* yyoptionList = yys->yysemantics.yyfirstVal;
  yySemanticOption* yybest;
  yySemanticOption** yypp;
  yybool yymerge;
  YYSTYPE yysval;
  YYRESULTTAG yyflag;
  YYLTYPE *yylocp = &yys->yyloc;

  yybest = yyoptionList;
  yymerge = yyfalse;
  for (yypp = &yyoptionList->yynext; *yypp != NULL; )
    {
      yySemanticOption* yyp = *yypp;

      if (yyidenticalOptions (yybest, yyp))
	{
	  yymergeOptionSets (yybest, yyp);
	  *yypp = yyp->yynext;
	}
      else
	{
	  switch (yypreference (yybest, yyp))
	    {
	    case 0:
	      yyresolveLocations (yys, 1, yystackp);
	      return yyreportAmbiguity (yybest, yyp);
	      break;
	    case 1:
	      yymerge = yytrue;
	      break;
	    case 2:
	      break;
	    case 3:
	      yybest = yyp;
	      yymerge = yyfalse;
	      break;
	    default:
	      /* This cannot happen so it is not worth a YYASSERT (yyfalse),
		 but some compilers complain if the default case is
		 omitted.  */
	      break;
	    }
	  yypp = &yyp->yynext;
	}
    }

  if (yymerge)
    {
      yySemanticOption* yyp;
      int yyprec = yydprec[yybest->yyrule];
      yyflag = yyresolveAction (yybest, yystackp, &yysval,
				yylocp);
      if (yyflag == yyok)
	for (yyp = yybest->yynext; yyp != NULL; yyp = yyp->yynext)
	  {
	    if (yyprec == yydprec[yyp->yyrule])
	      {
		YYSTYPE yysval_other;
		YYLTYPE yydummy;
		yyflag = yyresolveAction (yyp, yystackp, &yysval_other,
					  &yydummy);
		if (yyflag != yyok)
		  {
		    yydestruct ("Cleanup: discarding incompletely merged value for",
				yystos[yys->yylrState],
				&yysval, yylocp);
		    break;
		  }
		yyuserMerge (yymerger[yyp->yyrule], &yysval, &yysval_other);
	      }
	  }
    }
  else
    yyflag = yyresolveAction (yybest, yystackp, &yysval, yylocp);

  if (yyflag == yyok)
    {
      yys->yyresolved = yytrue;
      yys->yysemantics.yysval = yysval;
    }
  else
    yys->yysemantics.yyfirstVal = NULL;
  return yyflag;
}

static YYRESULTTAG
yyresolveStack (yyGLRStack* yystackp)
{
  if (yystackp->yysplitPoint != NULL)
    {
      yyGLRState* yys;
      int yyn;

      for (yyn = 0, yys = yystackp->yytops.yystates[0];
	   yys != yystackp->yysplitPoint;
	   yys = yys->yypred, yyn += 1)
	continue;
      YYCHK (yyresolveStates (yystackp->yytops.yystates[0], yyn, yystackp
			     ));
    }
  return yyok;
}

static void
yycompressStack (yyGLRStack* yystackp)
{
  yyGLRState* yyp, *yyq, *yyr;

  if (yystackp->yytops.yysize != 1 || yystackp->yysplitPoint == NULL)
    return;

  for (yyp = yystackp->yytops.yystates[0], yyq = yyp->yypred, yyr = NULL;
       yyp != yystackp->yysplitPoint;
       yyr = yyp, yyp = yyq, yyq = yyp->yypred)
    yyp->yypred = yyr;

  yystackp->yyspaceLeft += yystackp->yynextFree - yystackp->yyitems;
  yystackp->yynextFree = ((yyGLRStackItem*) yystackp->yysplitPoint) + 1;
  yystackp->yyspaceLeft -= yystackp->yynextFree - yystackp->yyitems;
  yystackp->yysplitPoint = NULL;
  yystackp->yylastDeleted = NULL;

  while (yyr != NULL)
    {
      yystackp->yynextFree->yystate = *yyr;
      yyr = yyr->yypred;
      yystackp->yynextFree->yystate.yypred = &yystackp->yynextFree[-1].yystate;
      yystackp->yytops.yystates[0] = &yystackp->yynextFree->yystate;
      yystackp->yynextFree += 1;
      yystackp->yyspaceLeft -= 1;
    }
}

static YYRESULTTAG
yyprocessOneStack (yyGLRStack* yystackp, size_t yyk,
		   size_t yyposn)
{
  int yyaction;
  const short int* yyconflicts;
  yyRuleNum yyrule;

  while (yystackp->yytops.yystates[yyk] != NULL)
    {
      yyStateNum yystate = yystackp->yytops.yystates[yyk]->yylrState;
      YYDPRINTF ((stderr, "Stack %lu Entering state %d\n",
		  (unsigned long int) yyk, yystate));

      YYASSERT (yystate != YYFINAL);

      if (yyisDefaultedState (yystate))
	{
	  yyrule = yydefaultAction (yystate);
	  if (yyrule == 0)
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      return yyok;
	    }
	  YYCHK (yyglrReduce (yystackp, yyk, yyrule, yyfalse));
	}
      else
	{
	  yySymbol yytoken;
	  yystackp->yytops.yylookaheadNeeds[yyk] = yytrue;
	  if (yychar == YYEMPTY)
	    {
	      YYDPRINTF ((stderr, "Reading a token: "));
	      yychar = YYLEX;
	      yytoken = YYTRANSLATE (yychar);
	      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	    }
	  else
	    yytoken = YYTRANSLATE (yychar);
	  yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);

	  while (*yyconflicts != 0)
	    {
	      size_t yynewStack = yysplitStack (yystackp, yyk);
	      YYDPRINTF ((stderr, "Splitting off stack %lu from %lu.\n",
			  (unsigned long int) yynewStack,
			  (unsigned long int) yyk));
	      YYCHK (yyglrReduce (yystackp, yynewStack,
				  *yyconflicts, yyfalse));
	      YYCHK (yyprocessOneStack (yystackp, yynewStack,
					yyposn));
	      yyconflicts += 1;
	    }

	  if (yyisShiftAction (yyaction))
	    break;
	  else if (yyisErrorAction (yyaction))
	    {
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
	      yymarkStackDeleted (yystackp, yyk);
	      break;
	    }
	  else
	    YYCHK (yyglrReduce (yystackp, yyk, -yyaction,
				yyfalse));
	}
    }
  return yyok;
}

/*ARGSUSED*/ static void
yyreportSyntaxError (yyGLRStack* yystackp)
{
  if (yystackp->yyerrState == 0)
    {
#if YYERROR_VERBOSE
      int yyn;
      yyn = yypact[yystackp->yytops.yystates[0]->yylrState];
      if (YYPACT_NINF < yyn && yyn <= YYLAST)
	{
	  yySymbol yytoken = YYTRANSLATE (yychar);
	  size_t yysize0 = yytnamerr (NULL, yytokenName (yytoken));
	  size_t yysize = yysize0;
	  size_t yysize1;
	  yybool yysize_overflow = yyfalse;
	  char* yymsg = NULL;
	  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
	  int yyx;
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn + 1;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 1;

	  yyarg[0] = yytokenName (yytoken);
	  yyfmt = yystpcpy (yyformat, yyunexpected);

	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
		  {
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
		    break;
		  }
		yyarg[yycount++] = yytokenName (yyx);
		yysize1 = yysize + yytnamerr (NULL, yytokenName (yyx));
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
	      }

	  yyf = YY_(yyformat);
	  yysize1 = yysize + strlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow)
	    yymsg = (char *) YYMALLOC (yysize);

	  if (yymsg)
	    {
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
		{
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
		}
	      yyerror (yymsg);
	      YYFREE (yymsg);
	    }
	  else
	    {
	      yyerror (YY_("syntax error"));
	      yyMemoryExhausted (yystackp);
	    }
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (YY_("syntax error"));
      yynerrs += 1;
    }
}

/* Recover from a syntax error on *YYSTACKP, assuming that *YYSTACKP->YYTOKENP,
   yylval, and yylloc are the syntactic category, semantic value, and location
   of the look-ahead.  */
/*ARGSUSED*/ static void
yyrecoverSyntaxError (yyGLRStack* yystackp)
{
  size_t yyk;
  int yyj;

  if (yystackp->yyerrState == 3)
    /* We just shifted the error token and (perhaps) took some
       reductions.  Skip tokens until we can proceed.  */
    while (YYID (yytrue))
      {
	yySymbol yytoken;
	if (yychar == YYEOF)
	  yyFail (yystackp, NULL);
	if (yychar != YYEMPTY)
	  {
	    /* We throw away the lookahead, but the error range
	       of the shifted error token must take it into account.  */
	    yyGLRState *yys = yystackp->yytops.yystates[0];
	    yyGLRStackItem yyerror_range[3];
	    yyerror_range[1].yystate.yyloc = yys->yyloc;
	    yyerror_range[2].yystate.yyloc = yylloc;
	    YYLLOC_DEFAULT ((yys->yyloc), yyerror_range, 2);
	    yytoken = YYTRANSLATE (yychar);
	    yydestruct ("Error: discarding",
			yytoken, &yylval, &yylloc);
	  }
	YYDPRINTF ((stderr, "Reading a token: "));
	yychar = YYLEX;
	yytoken = YYTRANSLATE (yychar);
	YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
	yyj = yypact[yystackp->yytops.yystates[0]->yylrState];
	if (yyis_pact_ninf (yyj))
	  return;
	yyj += yytoken;
	if (yyj < 0 || YYLAST < yyj || yycheck[yyj] != yytoken)
	  {
	    if (yydefact[yystackp->yytops.yystates[0]->yylrState] != 0)
	      return;
	  }
	else if (yytable[yyj] != 0 && ! yyis_table_ninf (yytable[yyj]))
	  return;
      }

  /* Reduce to one stack.  */
  for (yyk = 0; yyk < yystackp->yytops.yysize; yyk += 1)
    if (yystackp->yytops.yystates[yyk] != NULL)
      break;
  if (yyk >= yystackp->yytops.yysize)
    yyFail (yystackp, NULL);
  for (yyk += 1; yyk < yystackp->yytops.yysize; yyk += 1)
    yymarkStackDeleted (yystackp, yyk);
  yyremoveDeletes (yystackp);
  yycompressStack (yystackp);

  /* Now pop stack until we find a state that shifts the error token.  */
  yystackp->yyerrState = 3;
  while (yystackp->yytops.yystates[0] != NULL)
    {
      yyGLRState *yys = yystackp->yytops.yystates[0];
      yyj = yypact[yys->yylrState];
      if (! yyis_pact_ninf (yyj))
	{
	  yyj += YYTERROR;
	  if (0 <= yyj && yyj <= YYLAST && yycheck[yyj] == YYTERROR
	      && yyisShiftAction (yytable[yyj]))
	    {
	      /* Shift the error token having adjusted its location.  */
	      YYLTYPE yyerrloc;
	      yystackp->yyerror_range[2].yystate.yyloc = yylloc;
	      YYLLOC_DEFAULT (yyerrloc, (yystackp->yyerror_range), 2);
	      YY_SYMBOL_PRINT ("Shifting", yystos[yytable[yyj]],
			       &yylval, &yyerrloc);
	      yyglrShift (yystackp, 0, yytable[yyj],
			  yys->yyposn, &yylval, &yyerrloc);
	      yys = yystackp->yytops.yystates[0];
	      break;
	    }
	}
      yystackp->yyerror_range[1].yystate.yyloc = yys->yyloc;
      yydestroyGLRState ("Error: popping", yys);
      yystackp->yytops.yystates[0] = yys->yypred;
      yystackp->yynextFree -= 1;
      yystackp->yyspaceLeft += 1;
    }
  if (yystackp->yytops.yystates[0] == NULL)
    yyFail (yystackp, NULL);
}

#define YYCHK1(YYE)							     \
  do {									     \
    switch (YYE) {							     \
    case yyok:								     \
      break;								     \
    case yyabort:							     \
      goto yyabortlab;							     \
    case yyaccept:							     \
      goto yyacceptlab;							     \
    case yyerr:								     \
      goto yyuser_error;						     \
    default:								     \
      goto yybuglab;							     \
    }									     \
  } while (YYID (0))


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
  int yyresult;
  yyGLRStack yystack;
  yyGLRStack* const yystackp = &yystack;
  size_t yyposn;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY;
  yylval = yyval_default;

#if YYLTYPE_IS_TRIVIAL
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 0;
#endif


  if (! yyinitGLRStack (yystackp, YYINITDEPTH))
    goto yyexhaustedlab;
  switch (YYSETJMP (yystack.yyexception_buffer))
    {
    case 0: break;
    case 1: goto yyabortlab;
    case 2: goto yyexhaustedlab;
    default: goto yybuglab;
    }
  yyglrShift (&yystack, 0, 0, 0, &yylval, &yylloc);
  yyposn = 0;

  while (YYID (yytrue))
    {
      /* For efficiency, we have two loops, the first of which is
	 specialized to deterministic operation (single stack, no
	 potential ambiguity).  */
      /* Standard mode */
      while (YYID (yytrue))
	{
	  yyRuleNum yyrule;
	  int yyaction;
	  const short int* yyconflicts;

	  yyStateNum yystate = yystack.yytops.yystates[0]->yylrState;
	  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
	  if (yystate == YYFINAL)
	    goto yyacceptlab;
	  if (yyisDefaultedState (yystate))
	    {
	      yyrule = yydefaultAction (yystate);
	      if (yyrule == 0)
		{
		  yystack.yyerror_range[1].yystate.yyloc = yylloc;
		  yyreportSyntaxError (&yystack);
		  goto yyuser_error;
		}
	      YYCHK1 (yyglrReduce (&yystack, 0, yyrule, yytrue));
	    }
	  else
	    {
	      yySymbol yytoken;
	      if (yychar == YYEMPTY)
		{
		  YYDPRINTF ((stderr, "Reading a token: "));
		  yychar = YYLEX;
		  yytoken = YYTRANSLATE (yychar);
		  YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
		}
	      else
		yytoken = YYTRANSLATE (yychar);
	      yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);
	      if (*yyconflicts != 0)
		break;
	      if (yyisShiftAction (yyaction))
		{
		  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
		  if (yychar != YYEOF)
		    yychar = YYEMPTY;
		  yyposn += 1;
		  yyglrShift (&yystack, 0, yyaction, yyposn, &yylval, &yylloc);
		  if (0 < yystack.yyerrState)
		    yystack.yyerrState -= 1;
		}
	      else if (yyisErrorAction (yyaction))
		{
		  yystack.yyerror_range[1].yystate.yyloc = yylloc;
		  yyreportSyntaxError (&yystack);
		  goto yyuser_error;
		}
	      else
		YYCHK1 (yyglrReduce (&yystack, 0, -yyaction, yytrue));
	    }
	}

      while (YYID (yytrue))
	{
	  yySymbol yytoken_to_shift;
	  size_t yys;

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    yystackp->yytops.yylookaheadNeeds[yys] = yychar != YYEMPTY;

	  /* yyprocessOneStack returns one of three things:

	      - An error flag.  If the caller is yyprocessOneStack, it
		immediately returns as well.  When the caller is finally
		yyparse, it jumps to an error label via YYCHK1.

	      - yyok, but yyprocessOneStack has invoked yymarkStackDeleted
		(&yystack, yys), which sets the top state of yys to NULL.  Thus,
		yyparse's following invocation of yyremoveDeletes will remove
		the stack.

	      - yyok, when ready to shift a token.

	     Except in the first case, yyparse will invoke yyremoveDeletes and
	     then shift the next token onto all remaining stacks.  This
	     synchronization of the shift (that is, after all preceding
	     reductions on all stacks) helps prevent double destructor calls
	     on yylval in the event of memory exhaustion.  */

	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    YYCHK1 (yyprocessOneStack (&yystack, yys, yyposn));
	  yyremoveDeletes (&yystack);
	  if (yystack.yytops.yysize == 0)
	    {
	      yyundeleteLastStack (&yystack);
	      if (yystack.yytops.yysize == 0)
		yyFail (&yystack, YY_("syntax error"));
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yystack.yyerror_range[1].yystate.yyloc = yylloc;
	      yyreportSyntaxError (&yystack);
	      goto yyuser_error;
	    }

	  /* If any yyglrShift call fails, it will fail after shifting.  Thus,
	     a copy of yylval will already be on stack 0 in the event of a
	     failure in the following loop.  Thus, yychar is set to YYEMPTY
	     before the loop to make sure the user destructor for yylval isn't
	     called twice.  */
	  yytoken_to_shift = YYTRANSLATE (yychar);
	  yychar = YYEMPTY;
	  yyposn += 1;
	  for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
	    {
	      int yyaction;
	      const short int* yyconflicts;
	      yyStateNum yystate = yystack.yytops.yystates[yys]->yylrState;
	      yygetLRActions (yystate, yytoken_to_shift, &yyaction,
			      &yyconflicts);
	      /* Note that yyconflicts were handled by yyprocessOneStack.  */
	      YYDPRINTF ((stderr, "On stack %lu, ", (unsigned long int) yys));
	      YY_SYMBOL_PRINT ("shifting", yytoken_to_shift, &yylval, &yylloc);
	      yyglrShift (&yystack, yys, yyaction, yyposn,
			  &yylval, &yylloc);
	      YYDPRINTF ((stderr, "Stack %lu now in state #%d\n",
			  (unsigned long int) yys,
			  yystack.yytops.yystates[yys]->yylrState));
	    }

	  if (yystack.yytops.yysize == 1)
	    {
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yycompressStack (&yystack);
	      break;
	    }
	}
      continue;
    yyuser_error:
      yyrecoverSyntaxError (&yystack);
      yyposn = yystack.yytops.yystates[0]->yyposn;
    }

 yyacceptlab:
  yyresult = 0;
  goto yyreturn;

 yybuglab:
  YYASSERT (yyfalse);
  goto yyabortlab;

 yyabortlab:
  yyresult = 1;
  goto yyreturn;

 yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturn;

 yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
    yydestruct ("Cleanup: discarding lookahead",
		YYTRANSLATE (yychar),
		&yylval, &yylloc);

  /* If the stack is well-formed, pop the stack until it is empty,
     destroying its entries as we go.  But free the stack regardless
     of whether it is well-formed.  */
  if (yystack.yyitems)
    {
      yyGLRState** yystates = yystack.yytops.yystates;
      if (yystates)
	{
	  size_t yysize = yystack.yytops.yysize;
	  size_t yyk;
	  for (yyk = 0; yyk < yysize; yyk += 1)
	    if (yystates[yyk])
	      {
		while (yystates[yyk])
		  {
		    yyGLRState *yys = yystates[yyk];
		    yystack.yyerror_range[1].yystate.yyloc = yys->yyloc;
		    yydestroyGLRState ("Cleanup: popping", yys);
		    yystates[yyk] = yys->yypred;
		    yystack.yynextFree -= 1;
		    yystack.yyspaceLeft += 1;
		  }
		break;
	      }
	}
      yyfreeGLRStack (&yystack);
    }

  /* Make sure YYID is used.  */
  return YYID (yyresult);
}

/* DEBUGGING ONLY */
#ifdef YYDEBUG
static void yypstack (yyGLRStack* yystackp, size_t yyk)
  __attribute__ ((__unused__));
static void yypdumpstack (yyGLRStack* yystackp) __attribute__ ((__unused__));

static void
yy_yypstack (yyGLRState* yys)
{
  if (yys->yypred)
    {
      yy_yypstack (yys->yypred);
      fprintf (stderr, " -> ");
    }
  fprintf (stderr, "%d@@%lu", yys->yylrState, (unsigned long int) yys->yyposn);
}

static void
yypstates (yyGLRState* yyst)
{
  if (yyst == NULL)
    fprintf (stderr, "<null>");
  else
    yy_yypstack (yyst);
  fprintf (stderr, "\n");
}

static void
yypstack (yyGLRStack* yystackp, size_t yyk)
{
  yypstates (yystackp->yytops.yystates[yyk]);
}

#define YYINDEX(YYX)							     \
    ((YYX) == NULL ? -1 : (yyGLRStackItem*) (YYX) - yystackp->yyitems)


static void
yypdumpstack (yyGLRStack* yystackp)
{
  yyGLRStackItem* yyp;
  size_t yyi;
  for (yyp = yystackp->yyitems; yyp < yystackp->yynextFree; yyp += 1)
    {
      fprintf (stderr, "%3lu. ", (unsigned long int) (yyp - yystackp->yyitems));
      if (*(yybool *) yyp)
	{
	  fprintf (stderr, "Res: %d, LR State: %d, posn: %lu, pred: %ld",
		   yyp->yystate.yyresolved, yyp->yystate.yylrState,
		   (unsigned long int) yyp->yystate.yyposn,
		   (long int) YYINDEX (yyp->yystate.yypred));
	  if (! yyp->yystate.yyresolved)
	    fprintf (stderr, ", firstVal: %ld",
		     (long int) YYINDEX (yyp->yystate.yysemantics.yyfirstVal));
	}
      else
	{
	  fprintf (stderr, "Option. rule: %d, state: %ld, next: %ld",
		   yyp->yyoption.yyrule - 1,
		   (long int) YYINDEX (yyp->yyoption.yystate),
		   (long int) YYINDEX (yyp->yyoption.yynext));
	}
      fprintf (stderr, "\n");
    }
  fprintf (stderr, "Tops:");
  for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
    fprintf (stderr, "%lu: %ld; ", (unsigned long int) yyi,
	     (long int) YYINDEX (yystackp->yytops.yystates[yyi]));
  fprintf (stderr, "\n");
}
#endif


#line 2416 "parse.y"


/* Check the order of declarations for various standards */
static int
check_decl_order (int prev, int new)
{
  int prev_decl_order = prev / 2, prev_import = prev & 1;
  if (new == od_none)
    return prev;
  if (new <= prev_decl_order && new < od_routine)
    chk_dialect ("mixed order of declaration parts is", NOT_CLASSIC_PASCAL);
  if (new == od_uses)
    {
      if (prev_import)
        chk_dialect ("multiple `uses' parts are", GNU_PASCAL);
      if (prev_decl_order > od_uses)
        chk_dialect ("`uses' after other declarations is", GNU_PASCAL);
      prev_import = 1;
    }
  return (2 * new) | prev_import;
}

static void
locations (YYLTYPE *dest, const /*YYLTYPE*/ union yyGLRStackItem *src, int n)
{
  int i;
  for (i = n; i > 0 && !YYRHSLOC (src, i).first_line; i--) ;
  if (i == 0)
    {
      input_filename = compiler_filename;
      lineno = compiler_lineno;
      column = compiler_column;
      dest->first_file = dest->last_file = NULL;
      dest->first_line = dest->last_line = dest->first_column = dest->last_column = 0;
    }
  else
    {
      input_filename = compiler_filename = dest->last_file = YYRHSLOC (src, i).last_file;
      lineno = compiler_lineno = dest->last_line = YYRHSLOC (src, i).last_line;
      column = compiler_column = dest->last_column = YYRHSLOC (src, i).last_column;
      for (i = 1; i <= n && !YYRHSLOC (src, i).first_line; i++) ;
      dest->first_file = YYRHSLOC (src, i).first_file;
      dest->first_line = YYRHSLOC (src, i).first_line;
      dest->first_column = YYRHSLOC (src, i).first_column;
      /* This does emit a few line notes too many. But putting line notes in the
         parser in the right places causes some conflicts (especially
         assignments with nontrivial expressions on their left side are
         problematic). A better solution might be possible when we don't emit
         things so early. */
      if (current_function_decl)
#ifndef GCC_3_4
        emit_line_note (dest->first_file, dest->first_line);
#else
        {
          location_t loc_aux;
          loc_aux.file = dest->first_file;
          loc_aux.line = dest->first_line;
          emit_line_note (loc_aux);
        }
#endif
    }
  dest->option_id = 0;
  for (i = 1; i <= n; i++)
    while (YYRHSLOC (src, i).option_id > compiler_options->counter)
      {
        struct options *tmp = compiler_options;
        compiler_options = tmp->next;
        free (tmp);
      }
  if (compiler_options != co)
    activate_options (compiler_options, 0);
}

/* Set the value of the 'yydebug' variable to VALUE. This is a function
   so we don't have to have YYDEBUG defined in order to build the compiler. */
void
set_yydebug (int value)
{
#if YYDEBUG != 0
  yydebug = value;
#else
  warning ("YYDEBUG not defined.");
#endif
}

#undef yyparse
int
yyparse (void)
{
  int res;
  init_predef ();
  res = main_yyparse ();
#ifdef GCC_4_0
  /* @@@@@@@@@@ cgraphunit do not notice if address of a routine is
     referenced from static global variable */
  {
    tree decl = getdecls();
    while (decl) 
      {
        if (TREE_CODE (decl) == FUNCTION_DECL && TREE_ADDRESSABLE (decl))
          mark_decl_referenced (decl);
        decl = TREE_CHAIN (decl);
      }
  }
  cgraph_finalize_compilation_unit ();
  cgraph_optimize ();
#endif
  return res;
}

@


1.4
log
@That's what I get for running an alpha version of GNU pascal...
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.1.  */
d3 3
a5 2
/* Skeleton parser for GLR parsing with Bison,
   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
d22 14
a35 1
/* This is the parser code for GLR (Generalized LR) parser. */
d41 1
a41 1
#define YYBISON_VERSION "2.1"
a53 267
/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     prec_lower_than_error = 258,
     prec_if = 259,
     prec_import = 260,
     p_uses = 261,
     p_else = 262,
     p_and = 263,
     p_array = 264,
     p_begin = 265,
     p_case = 266,
     p_div = 267,
     p_do = 268,
     p_downto = 269,
     p_end = 270,
     p_file = 271,
     p_for = 272,
     p_function = 273,
     p_goto = 274,
     p_if = 275,
     p_in = 276,
     p_label = 277,
     p_mod = 278,
     p_nil = 279,
     p_not = 280,
     p_of = 281,
     p_or = 282,
     p_packed = 283,
     p_procedure = 284,
     p_to = 285,
     p_program = 286,
     p_record = 287,
     p_repeat = 288,
     p_set = 289,
     p_then = 290,
     p_type = 291,
     p_until = 292,
     p_var = 293,
     p_while = 294,
     p_with = 295,
     p_absolute = 296,
     p_abstract = 297,
     p_and_then = 298,
     p_as = 299,
     p_asm = 300,
     p_attribute = 301,
     p_bindable = 302,
     p_const = 303,
     p_constructor = 304,
     p_destructor = 305,
     p_external = 306,
     p_far = 307,
     p_finalization = 308,
     p_forward = 309,
     p_implementation = 310,
     p_import = 311,
     p_inherited = 312,
     p_initialization = 313,
     p_is = 314,
     p_near = 315,
     p_object = 316,
     p_only = 317,
     p_operator = 318,
     p_otherwise = 319,
     p_or_else = 320,
     p_pow = 321,
     p_qualified = 322,
     p_restricted = 323,
     p_shl = 324,
     p_shr = 325,
     p_unit = 326,
     p_value = 327,
     p_virtual = 328,
     p_xor = 329,
     p_asmname = 330,
     p_c = 331,
     p_c_language = 332,
     p_class = 333,
     p_override = 334,
     p_reintroduce = 335,
     p_view = 336,
     p_Addr = 337,
     p_Assigned = 338,
     p_Dispose = 339,
     p_Exit = 340,
     p_FormatString = 341,
     p_New = 342,
     p_Return = 343,
     p_StringOf = 344,
     LEX_INTCONST = 345,
     LEX_INTCONST_BASE = 346,
     LEX_STRCONST = 347,
     LEX_REALCONST = 348,
     LEX_BUILTIN_PROCEDURE = 349,
     LEX_BUILTIN_PROCEDURE_WRITE = 350,
     LEX_BUILTIN_FUNCTION = 351,
     LEX_ID = 352,
     LEX_CARET_WHITE = 353,
     LEX_CARET_LETTER = 354,
     LEX_ASSIGN = 355,
     LEX_RENAME = 356,
     LEX_RANGE = 357,
     LEX_ELLIPSIS = 358,
     LEX_CONST_EQUAL = 359,
     LEX_SYMDIFF = 360,
     LEX_NE = 361,
     LEX_GE = 362,
     LEX_LE = 363,
     LEX_POWER = 364,
     LEX_BPPLUS = 365,
     LEX_BPMINUS = 366,
     LEX_CEIL_PLUS = 367,
     LEX_CEIL_MINUS = 368,
     LEX_FLOOR_PLUS = 369,
     LEX_FLOOR_MINUS = 370,
     LEX_CEIL_MULT = 371,
     LEX_CEIL_DIV = 372,
     LEX_FLOOR_MULT = 373,
     LEX_FLOOR_DIV = 374
   };
#endif
/* Tokens.  */
#define prec_lower_than_error 258
#define prec_if 259
#define prec_import 260
#define p_uses 261
#define p_else 262
#define p_and 263
#define p_array 264
#define p_begin 265
#define p_case 266
#define p_div 267
#define p_do 268
#define p_downto 269
#define p_end 270
#define p_file 271
#define p_for 272
#define p_function 273
#define p_goto 274
#define p_if 275
#define p_in 276
#define p_label 277
#define p_mod 278
#define p_nil 279
#define p_not 280
#define p_of 281
#define p_or 282
#define p_packed 283
#define p_procedure 284
#define p_to 285
#define p_program 286
#define p_record 287
#define p_repeat 288
#define p_set 289
#define p_then 290
#define p_type 291
#define p_until 292
#define p_var 293
#define p_while 294
#define p_with 295
#define p_absolute 296
#define p_abstract 297
#define p_and_then 298
#define p_as 299
#define p_asm 300
#define p_attribute 301
#define p_bindable 302
#define p_const 303
#define p_constructor 304
#define p_destructor 305
#define p_external 306
#define p_far 307
#define p_finalization 308
#define p_forward 309
#define p_implementation 310
#define p_import 311
#define p_inherited 312
#define p_initialization 313
#define p_is 314
#define p_near 315
#define p_object 316
#define p_only 317
#define p_operator 318
#define p_otherwise 319
#define p_or_else 320
#define p_pow 321
#define p_qualified 322
#define p_restricted 323
#define p_shl 324
#define p_shr 325
#define p_unit 326
#define p_value 327
#define p_virtual 328
#define p_xor 329
#define p_asmname 330
#define p_c 331
#define p_c_language 332
#define p_class 333
#define p_override 334
#define p_reintroduce 335
#define p_view 336
#define p_Addr 337
#define p_Assigned 338
#define p_Dispose 339
#define p_Exit 340
#define p_FormatString 341
#define p_New 342
#define p_Return 343
#define p_StringOf 344
#define LEX_INTCONST 345
#define LEX_INTCONST_BASE 346
#define LEX_STRCONST 347
#define LEX_REALCONST 348
#define LEX_BUILTIN_PROCEDURE 349
#define LEX_BUILTIN_PROCEDURE_WRITE 350
#define LEX_BUILTIN_FUNCTION 351
#define LEX_ID 352
#define LEX_CARET_WHITE 353
#define LEX_CARET_LETTER 354
#define LEX_ASSIGN 355
#define LEX_RENAME 356
#define LEX_RANGE 357
#define LEX_ELLIPSIS 358
#define LEX_CONST_EQUAL 359
#define LEX_SYMDIFF 360
#define LEX_NE 361
#define LEX_GE 362
#define LEX_LE 363
#define LEX_POWER 364
#define LEX_BPPLUS 365
#define LEX_BPMINUS 366
#define LEX_CEIL_PLUS 367
#define LEX_CEIL_MINUS 368
#define LEX_FLOOR_PLUS 369
#define LEX_FLOOR_MINUS 370
#define LEX_CEIL_MULT 371
#define LEX_CEIL_DIV 372
#define LEX_FLOOR_MULT 373
#define LEX_FLOOR_DIV 374




/* Copy the first part of user declarations.  */
#line 63 "parse.y"

#define YYMAXDEPTH 200000
#include "gpc.h"
#ifdef GCC_4_0
#include "cgraph.h"
#endif

/* A few keywords of some dialects can be parsed as regular identifiers
   and checked from the parser actions => fewer special tokens. */
#define ASSERT_ID(id, location, pseudo_keyword) \
  do if (!IDENTIFIER_IS_BUILT_IN (id, pseudo_keyword) || !PD_ACTIVE (IDENTIFIER_BUILT_IN_VALUE (id))) \
    { yyerror_id (id, &location); YYERROR; } while (0)

enum { od_none, od_uses, od_label, od_const, od_type, od_var, od_routine };
static int check_decl_order (int, int);

extern int main_yyparse (void);
#define yyparse main_yyparse
a54 15
union yyGLRStackItem;
static void locations (YYLTYPE *, const union yyGLRStackItem *, int);
#define YYLLOC_DEFAULT(DEST, SRC, N) locations (&DEST, SRC, N)
#ifndef GCC_3_4
#define LOCATION_NOTE(LOC) if (current_function_decl) emit_line_note ((LOC).first_file, (LOC).first_line)
#else
#define LOCATION_NOTE(LOC) if (current_function_decl) \
  { \
    location_t loc_aux; \
    loc_aux.file = (LOC).first_file; \
    loc_aux.line = (LOC).first_line; \
    emit_line_note (loc_aux); \
  }
#endif
#define COPYLOC(D, S) /* @@@@ ? (* (YYLTYPE *) memcpy (&(D), &(S), sizeof (YYLTYPE))) */ (S)
a55 3
#define YYASSERT gcc_assert
#define YYMALLOC (void *) xmalloc
#define YYREALLOC (void *) xrealloc
d57 1
a76 27
#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 112 "parse.y"
typedef union YYSTYPE {
  enum tree_code code;
  long itype;
  tree ttype;
} YYSTYPE;
/* Line 186 of glr.c.  */
#line 356 "parse.c"
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

#if ! defined (YYLTYPE) && ! defined (YYLTYPE_IS_DECLARED)
typedef struct YYLTYPE
{

  int first_line;
  int first_column;
  int last_line;
  int last_column;

} YYLTYPE;
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif

d81 1
a81 1
   technically correct. */
d85 8
d95 2
a96 2
/* Line 217 of glr.c.  */
#line 386 "parse.c"
d115 25
d173 1
a173 1
# if (!defined (__GNUC__) || __GNUC__ < 2 \
d185 1
a185 1
/* YYFINAL -- State number of the termination state. */
d190 1
a190 1
/* YYNTOKENS -- Number of terminals. */
d192 1
a192 1
/* YYNNTS -- Number of nonterminals. */
d194 1
a194 1
/* YYNRULES -- Number of rules. */
d196 1
a196 1
/* YYNRULES -- Number of states. */
d198 1
a198 1
/* YYMAXRHS -- Maximum number of symbols on right-hand side of rule. */
d201 1
a201 1
   accessed by $0, $-1, etc., in any rule. */
d342 1
a342 1
/* YYRHS -- A `-1'-separated list of the rules' RHS. */
d590 80
a669 80
       0,   216,   216,   217,   229,   231,   228,   234,   240,   242,
     239,   245,   246,   248,   247,   256,   258,   255,   264,   263,
     270,   272,   269,   279,   278,   286,   285,   291,   293,   291,
     298,   299,   304,   303,   306,   308,   307,   311,   316,   315,
     321,   325,   327,   328,   329,   334,   333,   341,   340,   348,
     349,   351,   356,   361,   362,   367,   368,   372,   373,   375,
     377,   379,   384,   389,   391,   392,   397,   402,   403,   405,
     407,   409,   414,   416,   418,   423,   423,   427,   429,   433,
     434,   435,   440,   445,   446,   450,   451,   453,   458,   459,
     461,   463,   465,   470,   475,   476,   482,   483,   488,   489,
     494,   495,   500,   500,   503,   505,   511,   512,   517,   518,
     519,   525,   526,   531,   532,   532,   535,   540,   545,   546,
     547,   552,   557,   558,   563,   563,   579,   582,   581,   585,
     592,   594,   596,   598,   600,   602,   606,   607,   612,   613,
     614,   618,   620,   629,   630,   635,   634,   659,   664,   665,
     670,   671,   674,   673,   680,   681,   686,   688,   693,   695,
     694,   702,   707,   708,   710,   711,   713,   715,   719,   730,
     732,   729,   746,   745,   752,   754,   751,   764,   766,   763,
     776,   775,   784,   791,   797,   806,   808,   813,   814,   816,
     818,   820,   824,   829,   830,   836,   836,   852,   853,   858,
     859,   861,   863,   864,   865,   866,   868,   869,   874,   876,
     884,   887,   889,   891,   893,   898,   900,   901,   903,   905,
     905,   907,   909,   913,   914,   919,   920,   922,   924,   926,
     931,   933,   939,   940,   942,   947,   948,   952,   953,   955,
     957,   959,   963,   969,   970,   975,   977,   979,   981,   986,
     987,   989,   991,   993,   997,  1002,  1007,  1008,  1012,  1014,
    1019,  1021,  1023,  1025,  1027,  1031,  1033,  1042,  1044,  1046,
    1048,  1053,  1055,  1061,  1065,  1071,  1070,  1077,  1078,  1080,
    1085,  1086,  1090,  1091,  1092,  1097,  1098,  1100,  1105,  1107,
    1114,  1113,  1117,  1123,  1129,  1131,  1133,  1135,  1137,  1139,
    1143,  1144,  1146,  1151,  1152,  1154,  1161,  1172,  1175,  1177,
    1174,  1186,  1187,  1191,  1198,  1197,  1202,  1201,  1213,  1220,
    1219,  1223,  1229,  1238,  1239,  1243,  1248,  1250,  1253,  1252,
    1256,  1258,  1260,  1262,  1264,  1269,  1270,  1272,  1277,  1282,
    1283,  1288,  1289,  1291,  1293,  1295,  1297,  1302,  1303,  1307,
    1308,  1312,  1313,  1315,  1320,  1320,  1323,  1324,  1326,  1328,
    1330,  1332,  1337,  1338,  1340,  1342,  1346,  1348,  1350,  1352,
    1354,  1356,  1363,  1362,  1369,  1371,  1373,  1377,  1378,  1383,
    1385,  1389,  1390,  1395,  1396,  1401,  1402,  1403,  1407,  1412,
    1413,  1417,  1419,  1428,  1429,  1431,  1433,  1437,  1442,  1447,
    1448,  1454,  1459,  1460,  1464,  1466,  1468,  1470,  1467,  1475,
    1477,  1482,  1486,  1486,  1492,  1493,  1494,  1501,  1502,  1505,
    1504,  1508,  1510,  1512,  1514,  1516,  1518,  1520,  1521,  1523,
    1526,  1525,  1534,  1536,  1533,  1555,  1557,  1559,  1554,  1563,
    1565,  1562,  1569,  1568,  1573,  1572,  1576,  1581,  1586,  1587,
    1589,  1591,  1593,  1598,  1600,  1606,  1605,  1616,  1623,  1628,
    1630,  1635,  1636,  1641,  1642,  1644,  1646,  1648,  1654,  1653,
    1660,  1661,  1663,  1665,  1667,  1671,  1673,  1675,  1677,  1682,
    1684,  1686,  1691,  1692,  1697,  1698,  1703,  1705,  1707,  1709,
    1711,  1713,  1715,  1717,  1719,  1721,  1727,  1728,  1733,  1734,
    1738,  1739,  1744,  1749,  1751,  1758,  1771,  1773,  1778,  1779,
    1781,  1783,  1786,  1785,  1792,  1793,  1795,  1798,  1797,  1804,
    1805,  1807,  1809,  1811,  1813,  1818,  1820,  1822,  1823,  1824,
    1826,  1827,  1832,  1833,  1834,  1838,  1839,  1843,  1848,  1850,
    1855,  1856,  1857,  1862,  1863,  1863,  1863,  1863,  1863,  1863,
    1863,  1863,  1864,  1864,  1864,  1864,  1864,  1864,  1864,  1864,
    1864,  1868,  1880,  1894,  1895,  1900,  1902,  1906,  1907,  1909,
    1911,  1913,  1915,  1917,  1919,  1921,  1923,  1925,  1927,  1929,
    1931,  1933,  1935,  1937,  1942,  1943,  1945,  1954,  1958,  1960,
    1962,  1964,  1969,  1970,  1972,  1974,  1980,  1982,  1984,  1989,
    1994,  1995,  1997,  1999,  2000,  2004,  2005,  2010,  2012,  2017,
    2019,  2024,  2029,  2034,  2036,  2038,  2040,  2042,  2047,  2048,
    2050,  2055,  2056,  2061,  2063,  2068,  2069,  2071,  2073,  2075,
    2080,  2082,  2084,  2089,  2091,  2096,  2097,  2099,  2101,  2106,
    2108,  2115,  2116,  2120,  2121,  2122,  2126,  2127,  2128,  2129,
    2130,  2131,  2132,  2136,  2137,  2138,  2139,  2140,  2141,  2145,
    2146,  2147,  2148,  2149,  2150,  2154,  2155,  2156,  2157,  2161,
    2162,  2163,  2164,  2168,  2171,  2172,  2173,  2174,  2175,  2176,
    2182,  2183,  2184,  2185,  2186,  2187,  2188,  2189,  2190,  2191,
    2192,  2193,  2194,  2195,  2196,  2197,  2198,  2199,  2200,  2201,
    2202,  2203,  2204,  2208,  2209,  2210,  2211,  2215,  2216,  2217,
    2218,  2224,  2225,  2229,  2234,  2239,  2241,  2243,  2249,  2251,
    2255,  2257,  2262,  2263,  2268,  2273,  2274,  2275,  2276,  2277,
    2278,  2279,  2280,  2281,  2282,  2283,  2284,  2285,  2286,  2287,
    2288,  2289,  2290,  2291,  2292,  2293,  2294,  2295,  2296,  2297,
    2298,  2299,  2300,  2301,  2302,  2303,  2304,  2305,  2306,  2307,
    2308,  2309,  2310,  2311,  2312,  2313,  2314,  2315,  2316,  2317,
    2318,  2322,  2327,  2328,  2329,  2330,  2331,  2333,  2334,  2335,
    2339,  2347,  2352,  2357,  2361,  2366,  2371,  2377,  2378,  2383,
    2384,  2385,  2389,  2390,  2394,  2395,  2401,  2405
d675 1
a675 1
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
d960 1
a960 1
/* YYDPREC[RULE-NUM] -- Dynamic precedence of rule #RULE-NUM (0 if none). */
d1045 1
a1045 1
/* YYMERGER[RULE-NUM] -- Index of merging function for rule #RULE-NUM. */
d1270 1
a1270 1
/* YYPDEFGOTO[NTERM-NUM]. */
d4326 1
a4326 1
      if (N)								\
d4340 1
a4340 1
    while (0)
d4348 2
a4349 2
             (Loc).first_line, (Loc).first_column,	\
             (Loc).last_line,  (Loc).last_column)
d4375 1
a4375 1
   while (0)
d4379 1
a4379 1
#if ! defined (YYFPRINTF)
d4381 1
a4381 1
#endif
d4387 2
a4388 1
} while (0)
d4394 1
d4396 1
a4396 1
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
d4398 15
a4412 3
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;
  (void) yylocationp;
d4414 8
d4429 1
a4429 10

# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  switch (yytype)
    {
      default:
        break;
    }
d4433 10
a4442 11

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr,					\
                  Type, Value, Location);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)
d4475 1
a4475 1
   properly redirected to new data. */
d4479 3
a4481 3
# if (! defined (__cplusplus) \
      || (defined (YYLTYPE_IS_TRIVIAL) && YYLTYPE_IS_TRIVIAL \
	  && defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL))
d4488 15
d4506 1
a4506 1
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
d4588 1
a4591 1
typedef struct yyGLRStateSet yyGLRStateSet;
d4594 1
a4594 1
  /** Type tag: always true. */
d4596 2
a4597 2
  /** Type tag for yysemantics. If true, yysval applies, otherwise
   *  yyfirstVal applies. */
d4599 1
a4599 1
  /** Number of corresponding LALR(1) machine state. */
d4608 1
a4608 1
     *  yynext. */
d4610 1
a4610 1
    /** Semantic value for this state. */
d4613 1
a4613 1
  /** Source location for this state. */
d4619 5
d4628 1
a4628 1
  /** Type tag: always false. */
d4632 1
a4632 1
  /** The last RHS state in the list of states to be reduced. */
d4634 6
a4639 2
  /** Next sibling in chain of options. To facilitate merging,
   *  options are chained in decreasing order by address. */
d4643 2
a4644 2
/** Type of the items in the GLR stack. The yyisState field
 *  indicates which item of the union is valid. */
a4654 1
  yySymbol* yytokenp;
d4664 3
a4666 1
static void yyexpandGLRStack (yyGLRStack* yystack);
d4668 1
a4668 1
static void yyFail (yyGLRStack* yystack, const char* yymsg)
d4671 1
a4671 1
yyFail (yyGLRStack* yystack, const char* yymsg)
d4675 1
a4675 1
  YYLONGJMP (yystack->yyexception_buffer, 1);
d4678 1
a4678 1
static void yyMemoryExhausted (yyGLRStack* yystack)
d4681 1
a4681 1
yyMemoryExhausted (yyGLRStack* yystack)
d4683 1
a4683 1
  YYLONGJMP (yystack->yyexception_buffer, 2);
d4700 1
a4700 2
 *  containing the pointer to the next state in the chain. Assumes
 *  YYLOW1 < YYLOW0.  */
d4719 2
a4720 2
   YYVSP[YYLOW1 .. *YYLOW-1] as in yyfillin and set *YYLOW = YYLOW1.
   For convenience, always return YYLOW1.  */
d4737 3
a4739 3
 *  (@@$). Returns yyok for normal return, yyaccept for YYACCEPT,
 *  yyerr for YYERROR, yyabort for YYABORT. */
static YYRESULTTAG
d4743 2
a4744 2
	      yyGLRStack* yystack
              )
d4747 1
a4747 1
    (yystack->yysplitPoint == NULL);
a4748 1

d4750 1
a4750 1
# define yyerrok (yystack->yyerrState = 0)
d4758 1
a4758 1
# define YYRECOVERING (yystack->yyerrState != 0)
d4760 1
a4760 1
# define yyclearin (yychar = *(yystack->yytokenp) = YYEMPTY)
d4773 2
a4774 2
  YYLLOC_DEFAULT (*yylocp, yyvsp - yyrhslen, yyrhslen);
  yystack->yyerror_range[1].yystate.yyloc = *yylocp;
d4779 1
a4779 1
#line 216 "parse.y"
d4784 1
a4784 1
#line 218 "parse.y"
d4795 2
a4796 2
#line 229 "parse.y"
    { initialize_module (TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) : NULL_TREE, TREE_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))), 0); ;}
d4800 1
a4800 1
#line 231 "parse.y"
d4805 1
a4805 1
#line 233 "parse.y"
d4810 1
a4810 1
#line 235 "parse.y"
d4815 2
a4816 2
#line 240 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_interface); initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), 1); ;}
d4820 1
a4820 1
#line 242 "parse.y"
d4825 1
a4825 1
#line 244 "parse.y"
d4830 1
a4830 1
#line 248 "parse.y"
d4835 1
a4835 1
#line 250 "parse.y"
d4837 1
a4837 1
        if ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype) && current_module->name != (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))
d4839 1
a4839 1
                 IDENTIFIER_NAME (current_module->name), IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)));
d4844 2
a4845 2
#line 256 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 2); ;}
d4849 1
a4849 1
#line 258 "parse.y"
d4857 2
a4858 2
#line 264 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 4); ;}
d4862 2
a4863 2
#line 270 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_interface); ;}
d4867 2
a4868 2
#line 272 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 2); ;}
d4872 1
a4872 1
#line 274 "parse.y"
d4877 2
a4878 2
#line 279 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_export); start_module_interface (); ;}
d4882 1
a4882 1
#line 281 "parse.y"
d4887 2
a4888 2
#line 286 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), NULL_TREE, 3); ;}
d4892 1
a4892 1
#line 291 "parse.y"
d4897 1
a4897 1
#line 293 "parse.y"
d4902 1
a4902 1
#line 298 "parse.y"
d4907 1
a4907 1
#line 304 "parse.y"
d4912 1
a4912 1
#line 308 "parse.y"
d4917 1
a4917 1
#line 310 "parse.y"
d4922 1
a4922 1
#line 316 "parse.y"
d4927 1
a4927 1
#line 322 "parse.y"
d4932 1
a4932 1
#line 334 "parse.y"
d4937 1
a4937 1
#line 336 "parse.y"
d4942 1
a4942 1
#line 341 "parse.y"
d4947 1
a4947 1
#line 343 "parse.y"
d4952 1
a4952 1
#line 348 "parse.y"
d4957 2
a4958 2
#line 350 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d4962 2
a4963 2
#line 352 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d4967 2
a4968 2
#line 357 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) : NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d4972 2
a4973 2
#line 363 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d4977 1
a4977 1
#line 374 "parse.y"
d4982 1
a4982 1
#line 376 "parse.y"
d4987 1
a4987 1
#line 378 "parse.y"
d4992 1
a4992 1
#line 380 "parse.y"
d4997 2
a4998 2
#line 385 "parse.y"
    { export_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5002 2
a5003 2
#line 390 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5007 2
a5008 2
#line 393 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5012 2
a5013 2
#line 398 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_all); ((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE); ;}
d5017 2
a5018 2
#line 404 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5022 1
a5022 1
#line 406 "parse.y"
d5027 1
a5027 1
#line 408 "parse.y"
d5032 1
a5032 1
#line 410 "parse.y"
d5037 2
a5038 2
#line 415 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5042 2
a5043 2
#line 417 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5047 2
a5048 2
#line 419 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); TREE_READONLY (((*yyvalp).ttype)) = 1; ;}
d5052 1
a5052 1
#line 423 "parse.y"
d5057 1
a5057 1
#line 436 "parse.y"
d5062 2
a5063 2
#line 441 "parse.y"
    { import_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype) ? IMPORT_QUALIFIED : IMPORT_ISO, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5067 2
a5068 2
#line 452 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5072 2
a5073 2
#line 454 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5077 2
a5078 2
#line 460 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5082 1
a5082 1
#line 462 "parse.y"
d5087 2
a5088 2
#line 464 "parse.y"
    { error ("missing comma"); ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5092 1
a5092 1
#line 466 "parse.y"
d5097 2
a5098 2
#line 471 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5102 2
a5103 2
#line 477 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5107 1
a5107 1
#line 482 "parse.y"
d5112 2
a5113 2
#line 484 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d5117 1
a5117 1
#line 494 "parse.y"
d5122 2
a5123 2
#line 496 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d5127 1
a5127 1
#line 500 "parse.y"
d5132 2
a5133 2
#line 502 "parse.y"
    { ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
d5137 1
a5137 1
#line 504 "parse.y"
d5142 1
a5142 1
#line 506 "parse.y"
d5147 1
a5147 1
#line 511 "parse.y"
d5152 2
a5153 2
#line 513 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d5157 1
a5157 1
#line 520 "parse.y"
d5162 1
a5162 1
#line 525 "parse.y"
d5167 2
a5168 2
#line 527 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d5172 1
a5172 1
#line 532 "parse.y"
d5177 2
a5178 2
#line 534 "parse.y"
    { ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
d5182 1
a5182 1
#line 536 "parse.y"
d5187 1
a5187 1
#line 541 "parse.y"
d5192 1
a5192 1
#line 548 "parse.y"
d5197 2
a5198 2
#line 553 "parse.y"
    { import_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, IMPORT_USES, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5202 2
a5203 2
#line 559 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); chk_dialect ("file name specification with `in' is", BORLAND_DELPHI); ;}
d5207 1
a5207 1
#line 563 "parse.y"
d5217 1
a5217 1
#line 570 "parse.y"
d5222 1
a5222 1
        ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype);
d5227 1
a5227 1
#line 580 "parse.y"
d5232 1
a5232 1
#line 582 "parse.y"
d5237 1
a5237 1
#line 584 "parse.y"
d5242 1
a5242 1
#line 586 "parse.y"
d5247 2
a5248 2
#line 593 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5252 2
a5253 2
#line 595 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5257 1
a5257 1
#line 597 "parse.y"
d5262 2
a5263 2
#line 599 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d5267 1
a5267 1
#line 601 "parse.y"
d5272 1
a5272 1
#line 608 "parse.y"
d5277 2
a5278 2
#line 619 "parse.y"
    { declare_constant ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5282 1
a5282 1
#line 622 "parse.y"
d5285 1
a5285 1
        declare_variables (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)), VQ_BP_CONST, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d5290 1
a5290 1
#line 635 "parse.y"
d5292 3
a5294 3
        tree t, ids = ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype));
        if ((TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE || TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE)
            && TREE_CODE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) == FUNCTION_TYPE)
d5306 1
a5306 1
#line 648 "parse.y"
d5308 1
a5308 1
        tree t, ids = (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype);
d5312 3
a5314 3
        ((*yyvalp).ttype) = declare_variables (ids, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
        if ((TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE || TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE)
            && TREE_CODE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype))) == FUNCTION_TYPE)
d5321 1
a5321 1
#line 660 "parse.y"
d5326 2
a5327 2
#line 666 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5331 2
a5332 2
#line 672 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5336 2
a5337 2
#line 674 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_name); ;}
d5341 2
a5342 2
#line 676 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype))); ;}
d5346 2
a5347 2
#line 682 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5351 2
a5352 2
#line 687 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5356 2
a5357 2
#line 689 "parse.y"
    { ((*yyvalp).ttype) = TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5361 1
a5361 1
#line 695 "parse.y"
d5366 1
a5366 1
#line 697 "parse.y"
d5368 2
a5369 2
        allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype));
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
d5375 1
a5375 1
#line 703 "parse.y"
d5380 1
a5380 1
#line 709 "parse.y"
d5385 1
a5385 1
#line 712 "parse.y"
d5390 1
a5390 1
#line 714 "parse.y"
d5395 1
a5395 1
#line 720 "parse.y"
d5398 1
a5398 1
        if (!EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)))
d5400 1
a5400 1
            if (PASCAL_TYPE_UNDISCRIMINATED_SCHEMA ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)))
d5402 1
a5402 1
            build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
d5408 1
a5408 1
#line 730 "parse.y"
d5413 1
a5413 1
#line 732 "parse.y"
d5422 1
a5422 1
#line 738 "parse.y"
d5424 1
a5424 1
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype), build_schema_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), current_schema), 
d5426 1
a5426 1
        immediate_size_expand = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.itype);
d5433 1
a5433 1
#line 746 "parse.y"
d5438 2
a5439 2
#line 748 "parse.y"
    { build_schema_type (error_mark_node, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, current_schema);
d5445 2
a5446 2
#line 752 "parse.y"
    { ((*yyvalp).ttype) = start_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0); ;}
d5450 1
a5450 1
#line 754 "parse.y"
d5455 1
a5455 1
#line 756 "parse.y"
d5458 2
a5459 2
        finish_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype) != NULL_TREE);
        pop_record_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype));
d5465 2
a5466 2
#line 764 "parse.y"
    { ((*yyvalp).ttype) = start_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 1); ;}
d5470 1
a5470 1
#line 766 "parse.y"
d5475 1
a5475 1
#line 768 "parse.y"
d5478 2
a5479 2
        finish_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype) != NULL_TREE);
        pop_record_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype));
d5485 1
a5485 1
#line 776 "parse.y"
d5490 1
a5490 1
#line 778 "parse.y"
d5493 1
a5493 1
        finish_view_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-9)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d5500 1
a5500 1
#line 785 "parse.y"
d5504 1
a5504 1
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), t, NULL_TREE);
d5510 1
a5510 1
#line 792 "parse.y"
d5514 1
a5514 1
	build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), t, NULL_TREE); 
d5519 1
a5519 1
#line 798 "parse.y"
d5523 1
a5523 1
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), t, NULL_TREE);
d5528 2
a5529 2
#line 807 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5533 1
a5533 1
#line 809 "parse.y"
d5538 2
a5539 2
#line 815 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5543 2
a5544 2
#line 817 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
d5548 1
a5548 1
#line 819 "parse.y"
d5553 2
a5554 2
#line 825 "parse.y"
    { ((*yyvalp).ttype) = build_discriminants ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), current_schema); ;}
d5558 2
a5559 2
#line 831 "parse.y"
    { type_attributes (&((*yyvalp).ttype), TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5563 1
a5563 1
#line 836 "parse.y"
d5573 1
a5573 1
#line 843 "parse.y"
d5578 1
a5578 1
        ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype);
d5583 2
a5584 2
#line 854 "parse.y"
    { ((*yyvalp).ttype) = pascal_type_variant ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), TYPE_QUALIFIER_BINDABLE); ;}
d5588 2
a5589 2
#line 860 "parse.y"
    { ((*yyvalp).ttype) = pascal_type_variant ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), TYPE_QUALIFIER_RESTRICTED); ;}
d5593 2
a5594 2
#line 862 "parse.y"
    { ((*yyvalp).ttype) = build_discriminated_schema_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d5598 1
a5598 1
#line 867 "parse.y"
d5603 2
a5604 2
#line 870 "parse.y"
    { defining_packed_type -= (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype); ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype) ? pack_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) : (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5608 2
a5609 2
#line 875 "parse.y"
    { chk_dialect ("schema/string discriminants are", E_O_M_PASCAL); ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5613 1
a5613 1
#line 877 "parse.y"
d5616 1
a5616 1
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), 0)));
d5621 2
a5622 2
#line 886 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0))); ;}
d5626 2
a5627 2
#line 888 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0)))); yyerrok; ;}
d5631 1
a5631 1
#line 890 "parse.y"
d5636 2
a5637 2
#line 892 "parse.y"
    { error ("missing comma"); ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0)))); yyerrok; ;}
d5641 1
a5641 1
#line 894 "parse.y"
d5646 2
a5647 2
#line 899 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_array_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype)); ;}
d5651 2
a5652 2
#line 902 "parse.y"
    { ((*yyvalp).ttype) = build_file_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0); ;}
d5656 2
a5657 2
#line 904 "parse.y"
    { ((*yyvalp).ttype) = build_set_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5661 1
a5661 1
#line 905 "parse.y"
d5666 2
a5667 2
#line 906 "parse.y"
    { pop_record_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5671 1
a5671 1
#line 908 "parse.y"
d5676 2
a5677 2
#line 915 "parse.y"
    { ((*yyvalp).ttype) = TREE_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5681 2
a5682 2
#line 921 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5686 2
a5687 2
#line 923 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d5691 1
a5691 1
#line 925 "parse.y"
d5696 1
a5696 1
#line 927 "parse.y"
d5701 2
a5702 2
#line 932 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5706 2
a5707 2
#line 934 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5711 1
a5711 1
#line 939 "parse.y"
d5716 2
a5717 2
#line 941 "parse.y"
    { ((*yyvalp).ttype) = build_record ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE); ;}
d5721 2
a5722 2
#line 943 "parse.y"
    { ((*yyvalp).ttype) = build_record ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5726 2
a5727 2
#line 954 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5731 2
a5732 2
#line 956 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
d5736 1
a5736 1
#line 958 "parse.y"
d5741 2
a5742 2
#line 964 "parse.y"
    { ((*yyvalp).ttype) = build_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5746 1
a5746 1
#line 969 "parse.y"
d5751 2
a5752 2
#line 971 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, build_field (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))); ;}
d5756 2
a5757 2
#line 976 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_field ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5761 2
a5762 2
#line 978 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_field ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5766 2
a5767 2
#line 980 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d5771 2
a5772 2
#line 982 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d5776 2
a5777 2
#line 988 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5781 2
a5782 2
#line 990 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
d5786 1
a5786 1
#line 992 "parse.y"
d5791 2
a5792 2
#line 998 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), build_field (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d5796 1
a5796 1
#line 1003 "parse.y"
d5801 2
a5802 2
#line 1013 "parse.y"
    { ((*yyvalp).ttype) = build_enum_type (nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d5806 1
a5806 1
#line 1015 "parse.y"
d5811 2
a5812 2
#line 1020 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d5816 2
a5817 2
#line 1022 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5821 2
a5822 2
#line 1024 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d5826 1
a5826 1
#line 1026 "parse.y"
d5831 2
a5832 2
#line 1032 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_subrange_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d5836 1
a5836 1
#line 1034 "parse.y"
d5838 1
a5838 1
        defining_packed_type -= (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype);
d5840 1
a5840 1
        ((*yyvalp).ttype) = build_pascal_subrange_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype));
d5845 2
a5846 2
#line 1043 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5850 2
a5851 2
#line 1045 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5855 2
a5856 2
#line 1047 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5860 2
a5861 2
#line 1049 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type (p_build_type_variant ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1, TYPE_VOLATILE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)))); ;}
d5865 2
a5866 2
#line 1054 "parse.y"
    { ((*yyvalp).ttype) = get_pointer_domain_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5870 1
a5870 1
#line 1056 "parse.y"
d5873 2
a5874 2
        gcc_assert (EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) || (TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE && TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))));
        ((*yyvalp).ttype) = TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
d5879 1
a5879 1
#line 1066 "parse.y"
d5881 2
a5882 2
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_procedural_type (void_type_node, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
d5887 2
a5888 2
#line 1071 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d5892 2
a5893 2
#line 1073 "parse.y"
    { ((*yyvalp).ttype) = build_procedural_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d5897 2
a5898 2
#line 1079 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5902 1
a5902 1
#line 1081 "parse.y"
d5907 2
a5908 2
#line 1090 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5912 2
a5913 2
#line 1091 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5917 1
a5917 1
#line 1093 "parse.y"
d5922 2
a5923 2
#line 1099 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), build_tree_list (void_type_node, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5927 2
a5928 2
#line 1101 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5932 2
a5933 2
#line 1106 "parse.y"
    { ((*yyvalp).ttype) = build_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5937 1
a5937 1
#line 1108 "parse.y"
d5939 2
a5940 2
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
d5946 2
a5947 2
#line 1114 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5951 2
a5952 2
#line 1116 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d5956 1
a5956 1
#line 1118 "parse.y"
d5958 2
a5959 2
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
d5965 1
a5965 1
#line 1124 "parse.y"
d5967 2
a5968 2
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
d5974 2
a5975 2
#line 1130 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5979 2
a5980 2
#line 1132 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5984 2
a5985 2
#line 1134 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5989 2
a5990 2
#line 1136 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5994 2
a5995 2
#line 1138 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5999 2
a6000 2
#line 1145 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6004 1
a6004 1
#line 1147 "parse.y"
d6009 1
a6009 1
#line 1151 "parse.y"
d6014 1
a6014 1
#line 1153 "parse.y"
d6019 1
a6019 1
#line 1155 "parse.y"
d6024 2
a6025 2
#line 1162 "parse.y"
    { declare_routine ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1); ;}
d6029 2
a6030 2
#line 1173 "parse.y"
    { declare_routine ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6034 2
a6035 2
#line 1175 "parse.y"
    { ((*yyvalp).ttype) = start_routine ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6039 1
a6039 1
#line 1177 "parse.y"
d6047 2
a6048 2
#line 1182 "parse.y"
    { finish_routine ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype)); ;}
d6052 1
a6052 1
#line 1192 "parse.y"
d6054 2
a6055 2
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
d6061 2
a6062 2
#line 1198 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6066 2
a6067 2
#line 1200 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6071 2
a6072 2
#line 1202 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6076 2
a6077 2
#line 1204 "parse.y"
    { ((*yyvalp).ttype) = build_operator_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6081 1
a6081 1
#line 1214 "parse.y"
d6083 2
a6084 2
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
d6090 2
a6091 2
#line 1220 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6095 2
a6096 2
#line 1222 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6100 1
a6100 1
#line 1224 "parse.y"
d6102 2
a6103 2
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
d6109 1
a6109 1
#line 1230 "parse.y"
d6111 2
a6112 2
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
d6118 2
a6119 2
#line 1244 "parse.y"
    { ((*yyvalp).ttype) = chainon (chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6123 2
a6124 2
#line 1249 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6128 2
a6129 2
#line 1251 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6133 2
a6134 2
#line 1253 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_name); ;}
d6138 2
a6139 2
#line 1255 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype))); ;}
d6143 2
a6144 2
#line 1257 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype))); ;}
d6148 2
a6149 2
#line 1259 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))); ;}
d6153 2
a6154 2
#line 1261 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6158 2
a6159 2
#line 1263 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6163 2
a6164 2
#line 1265 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6168 2
a6169 2
#line 1271 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6173 2
a6174 2
#line 1273 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6178 2
a6179 2
#line 1278 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype)); ;}
d6183 2
a6184 2
#line 1284 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6188 2
a6189 2
#line 1290 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d6193 2
a6194 2
#line 1292 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d6198 2
a6199 2
#line 1294 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d6203 2
a6204 2
#line 1296 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d6208 2
a6209 2
#line 1298 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d6213 2
a6214 2
#line 1314 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); chk_dialect ("operator result variables with `=' are", GNU_PASCAL); ;}
d6218 1
a6218 1
#line 1316 "parse.y"
d6223 1
a6223 1
#line 1320 "parse.y"
d6228 2
a6229 2
#line 1320 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6233 1
a6233 1
#line 1325 "parse.y"
d6238 2
a6239 2
#line 1327 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d6243 1
a6243 1
#line 1329 "parse.y"
d6248 2
a6249 2
#line 1331 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, NULL_TREE)); ;}
d6253 1
a6253 1
#line 1333 "parse.y"
d6258 2
a6259 2
#line 1339 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6263 2
a6264 2
#line 1341 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
d6268 2
a6269 2
#line 1347 "parse.y"
    { ((*yyvalp).ttype) = build_formal_param ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0, 0); ;}
d6273 2
a6274 2
#line 1349 "parse.y"
    { ((*yyvalp).ttype) = build_formal_param ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0, 1); ;}
d6278 2
a6279 2
#line 1351 "parse.y"
    { ((*yyvalp).ttype) = build_formal_param ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1, !!(((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype)); ;}
d6283 2
a6284 2
#line 1353 "parse.y"
    { ((*yyvalp).ttype) = build_formal_param ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 3, 1); ;}
d6288 2
a6289 2
#line 1355 "parse.y"
    { ((*yyvalp).ttype) = build_formal_param ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 2, 1); ;}
d6293 1
a6293 1
#line 1357 "parse.y"
d6295 2
a6296 2
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); 
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
d6302 2
a6303 2
#line 1363 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6307 2
a6308 2
#line 1365 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6312 1
a6312 1
#line 1370 "parse.y"
d6317 2
a6318 2
#line 1372 "parse.y"
    { ((*yyvalp).ttype) = check_result_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6322 2
a6323 2
#line 1379 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); chk_dialect ("function result variable specifications are", E_O_PASCAL); ;}
d6327 1
a6327 1
#line 1385 "parse.y"
d6332 1
a6332 1
#line 1395 "parse.y"
d6337 2
a6338 2
#line 1397 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6342 2
a6343 2
#line 1408 "parse.y"
    { ((*yyvalp).ttype) = build_type_of ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6347 2
a6348 2
#line 1418 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6352 1
a6352 1
#line 1420 "parse.y"
d6354 3
a6356 3
        defining_packed_type -= (((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.itype);
        PASCAL_TREE_PACKED ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype)) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.itype);
        ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
d6361 2
a6362 2
#line 1430 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6366 1
a6366 1
#line 1432 "parse.y"
d6371 2
a6372 2
#line 1438 "parse.y"
    { TREE_TYPE ((((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6376 2
a6377 2
#line 1443 "parse.y"
    { TREE_TYPE ((((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6381 1
a6381 1
#line 1455 "parse.y"
d6386 1
a6386 1
#line 1461 "parse.y"
d6391 1
a6391 1
#line 1468 "parse.y"
d6396 2
a6397 2
#line 1470 "parse.y"
    { un_initialize_block ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0, 0); ;}
d6401 1
a6401 1
#line 1476 "parse.y"
d6406 1
a6406 1
#line 1478 "parse.y"
d6411 1
a6411 1
#line 1486 "parse.y"
d6416 1
a6416 1
#line 1488 "parse.y"
d6421 2
a6422 2
#line 1503 "parse.y"
    { expand_call_statement ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6426 2
a6427 2
#line 1505 "parse.y"
    { ((*yyvalp).itype) = allow_function_calls (!PASCAL_PROCEDURAL_TYPE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)))); ;}
d6431 2
a6432 2
#line 1507 "parse.y"
    { expand_pascal_assignment ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.itype)); ;}
d6436 1
a6436 1
#line 1509 "parse.y"
d6441 2
a6442 2
#line 1511 "parse.y"
    { build_predef_call (p_Return, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d6446 1
a6446 1
#line 1513 "parse.y"
d6451 1
a6451 1
#line 1515 "parse.y"
d6456 2
a6457 2
#line 1517 "parse.y"
    { build_predef_call (p_Exit, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d6461 2
a6462 2
#line 1519 "parse.y"
    { build_predef_call (p_Exit, build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d6466 2
a6467 2
#line 1522 "parse.y"
    { restore_identifiers ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)); ;}
d6471 1
a6471 1
#line 1524 "parse.y"
d6476 1
a6476 1
#line 1526 "parse.y"
d6481 1
a6481 1
#line 1528 "parse.y"
d6483 1
a6483 1
        if (!(((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype) && extra_warnings)
d6490 2
a6491 2
#line 1534 "parse.y"
    { ((*yyvalp).ttype) = pascal_expand_start_case ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6495 1
a6495 1
#line 1536 "parse.y"
d6507 1
a6507 1
#line 1545 "parse.y"
d6509 1
a6509 1
        if (!(((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype) && !(((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype))
d6513 2
a6514 2
          expand_end_case ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype));
        current_case_values = (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype);
d6520 1
a6520 1
#line 1555 "parse.y"
d6525 2
a6526 2
#line 1557 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc)); expand_loop_continue_here (); ;}
d6530 2
a6531 2
#line 1559 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc)); expand_exit_loop_if_false (0, build_pascal_unary_op (TRUTH_NOT_EXPR, check_boolean ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)))); ;}
d6535 1
a6535 1
#line 1561 "parse.y"
d6540 1
a6540 1
#line 1563 "parse.y"
d6545 2
a6546 2
#line 1565 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc)); expand_exit_loop_if_false (0, check_boolean ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d6550 1
a6550 1
#line 1567 "parse.y"
d6555 2
a6556 2
#line 1569 "parse.y"
    { ((*yyvalp).ttype) = start_for_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code)); ;}
d6560 2
a6561 2
#line 1571 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yyloc)); finish_for_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.code)); ;}
d6565 2
a6566 2
#line 1573 "parse.y"
    { ((*yyvalp).ttype) = start_for_set_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6570 2
a6571 2
#line 1575 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yyloc)); finish_for_set_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)); ;}
d6575 2
a6576 2
#line 1577 "parse.y"
    { pascal_expand_goto ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6580 2
a6581 2
#line 1582 "parse.y"
    { set_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6585 2
a6586 2
#line 1588 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6590 1
a6590 1
#line 1590 "parse.y"
d6595 2
a6596 2
#line 1592 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d6600 1
a6600 1
#line 1594 "parse.y"
d6605 2
a6606 2
#line 1599 "parse.y"
    { ((*yyvalp).ttype) = pascal_shadow_record_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d6610 2
a6611 2
#line 1601 "parse.y"
    { ((*yyvalp).ttype) = pascal_shadow_record_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6615 2
a6616 2
#line 1606 "parse.y"
    { expand_start_cond (check_boolean ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)), 0); ;}
d6620 1
a6620 1
#line 1608 "parse.y"
d6622 1
a6622 1
        if (!(((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype) && extra_warnings)
d6628 1
a6628 1
#line 1616 "parse.y"
d6639 1
a6639 1
#line 1624 "parse.y"
d6644 1
a6644 1
#line 1629 "parse.y"
d6649 1
a6649 1
#line 1635 "parse.y"
d6654 1
a6654 1
#line 1637 "parse.y"
d6659 1
a6659 1
#line 1643 "parse.y"
d6664 1
a6664 1
#line 1645 "parse.y"
d6669 1
a6669 1
#line 1647 "parse.y"
d6674 1
a6674 1
#line 1649 "parse.y"
d6679 2
a6680 2
#line 1654 "parse.y"
    { pascal_pushcase ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6684 1
a6684 1
#line 1656 "parse.y"
d6689 2
a6690 2
#line 1662 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6694 1
a6694 1
#line 1664 "parse.y"
d6699 2
a6700 2
#line 1666 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d6704 2
a6705 2
#line 1672 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6709 2
a6710 2
#line 1674 "parse.y"
    { chk_dialect ("`case' ranges are", NOT_CLASSIC_PASCAL); ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6714 2
a6715 2
#line 1676 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); error ("missing `..'"); yyerrok; ;}
d6719 2
a6720 2
#line 1678 "parse.y"
    { error ("extra `..'"); ((*yyvalp).ttype) = build_tree_list (NULL_TREE, string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0)); ;}
d6724 1
a6724 1
#line 1683 "parse.y"
d6729 1
a6729 1
#line 1685 "parse.y"
d6734 1
a6734 1
#line 1687 "parse.y"
d6739 2
a6740 2
#line 1693 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_lvalue_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6744 1
a6744 1
#line 1699 "parse.y"
d6749 2
a6750 2
#line 1704 "parse.y"
    { build_predef_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6754 2
a6755 2
#line 1706 "parse.y"
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))->symbol, NULL_TREE); ;}
d6759 2
a6760 2
#line 1708 "parse.y"
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype))->symbol, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6764 2
a6765 2
#line 1710 "parse.y"
    { build_new_dispose (p_Dispose, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE); ;}
d6769 2
a6770 2
#line 1712 "parse.y"
    { build_new_dispose (p_Dispose, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6774 2
a6775 2
#line 1714 "parse.y"
    { build_new_dispose (p_Dispose, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6779 2
a6780 2
#line 1716 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE, NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype)); ;}
d6784 2
a6785 2
#line 1718 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.itype)); ;}
d6789 2
a6790 2
#line 1720 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.itype)); ;}
d6794 2
a6795 2
#line 1722 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-9)].yystate.yysemantics.yysval.itype)); ;}
d6799 1
a6799 1
#line 1727 "parse.y"
d6804 2
a6805 2
#line 1729 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_volatile); ((*yyvalp).itype) = 1; ;}
d6809 2
a6810 2
#line 1740 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6814 2
a6815 2
#line 1745 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6819 2
a6820 2
#line 1750 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6824 2
a6825 2
#line 1752 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6829 1
a6829 1
#line 1759 "parse.y"
d6831 1
a6831 1
        ((*yyvalp).ttype) = string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0);
d6842 2
a6843 2
#line 1772 "parse.y"
    { ((*yyvalp).ttype) = fold ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6847 2
a6848 2
#line 1774 "parse.y"
    { ((*yyvalp).ttype) = fold (parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d6852 2
a6853 2
#line 1780 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_unary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6857 2
a6858 2
#line 1782 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6862 2
a6863 2
#line 1784 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1); ;}
d6867 2
a6868 2
#line 1786 "parse.y"
    { ((*yyvalp).ttype) = start_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6872 2
a6873 2
#line 1788 "parse.y"
    { if ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) LOCATION_NOTE (COPYLOC ((*yylocp), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc))); ((*yyvalp).ttype) = finish_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6877 2
a6878 2
#line 1794 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6882 2
a6883 2
#line 1796 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1); ;}
d6887 2
a6888 2
#line 1798 "parse.y"
    { ((*yyvalp).ttype) = start_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6892 2
a6893 2
#line 1800 "parse.y"
    { if ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) LOCATION_NOTE (COPYLOC ((*yylocp), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc))); ((*yyvalp).ttype) = finish_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6897 2
a6898 2
#line 1806 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6902 2
a6903 2
#line 1808 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op (POW_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6907 2
a6908 2
#line 1810 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op (POWER_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6912 2
a6913 2
#line 1812 "parse.y"
    { ((*yyvalp).ttype) = build_is_as ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), p_is); ;}
d6917 2
a6918 2
#line 1814 "parse.y"
    { ((*yyvalp).ttype) = build_is_as ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), p_as); ;}
d6922 2
a6923 2
#line 1819 "parse.y"
    { ((*yyvalp).ttype) = set_exp_original_code (build_pascal_unary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code)); ;}
d6927 2
a6928 2
#line 1821 "parse.y"
    { chk_dialect ("the address operator is", B_D_M_PASCAL); ((*yyvalp).ttype) = build_pascal_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), !co->typed_address); ;}
d6932 1
a6932 1
#line 1825 "parse.y"
d6937 2
a6938 2
#line 1828 "parse.y"
    { ((*yyvalp).ttype) = build_variable_or_routine_access ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6942 2
a6943 2
#line 1844 "parse.y"
    { ((*yyvalp).ttype) = combine_strings ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1); ;}
d6947 2
a6948 2
#line 1849 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6952 2
a6953 2
#line 1851 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d6957 2
a6958 2
#line 1858 "parse.y"
    { ((*yyvalp).ttype) = build_caret_string_constant ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d6962 1
a6962 1
#line 1869 "parse.y"
d6974 1
a6974 1
#line 1881 "parse.y"
d6976 1
a6976 1
        tree decl = lookup_name ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
d6979 1
a6979 1
          error ("unknown identifier `%s'", IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)));
d6981 1
a6981 1
          error ("type name expected, `%s' given", IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)));
d6988 2
a6989 2
#line 1896 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_id ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6993 2
a6994 2
#line 1901 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))->symbol, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6998 2
a6999 2
#line 1908 "parse.y"
    { ((*yyvalp).ttype) = TYPE_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7003 2
a7004 2
#line 1910 "parse.y"
    { ((*yyvalp).ttype) = set_exp_original_code ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NOP_EXPR); ;}
d7008 2
a7009 2
#line 1912 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_or_component_access ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7013 2
a7014 2
#line 1914 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_pointer_reference ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7018 2
a7019 2
#line 1916 "parse.y"
    { ((*yyvalp).ttype) = build_array_ref_or_constructor ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7023 2
a7024 2
#line 1918 "parse.y"
    { ((*yyvalp).ttype) = build_iso_constructor ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d7028 2
a7029 2
#line 1920 "parse.y"
    { chk_dialect ("empty parentheses are", BORLAND_DELPHI | MAC_PASCAL); ((*yyvalp).ttype) = build_call_or_cast ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d7033 2
a7034 2
#line 1922 "parse.y"
    { allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.itype)); ((*yyvalp).ttype) = build_call_or_cast ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7038 2
a7039 2
#line 1924 "parse.y"
    { ((*yyvalp).ttype) = build_inherited_method ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7043 2
a7044 2
#line 1926 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_FormatString, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7048 2
a7049 2
#line 1928 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_StringOf, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7053 2
a7054 2
#line 1930 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_Assigned, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype)); ;}
d7058 2
a7059 2
#line 1932 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), co->pascal_dialect & B_D_M_PASCAL); ;}
d7063 2
a7064 2
#line 1934 "parse.y"
    { ((*yyvalp).ttype) = build_new_dispose (p_New, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE); ;}
d7068 2
a7069 2
#line 1936 "parse.y"
    { ((*yyvalp).ttype) = build_new_dispose (p_New, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7073 2
a7074 2
#line 1938 "parse.y"
    { ((*yyvalp).ttype) = build_new_dispose (p_New, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7078 2
a7079 2
#line 1944 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype)); yyerrok; ;}
d7083 1
a7083 1
#line 1946 "parse.y"
d7085 2
a7086 2
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) == TYPE_DECL ? (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype) : build_variable_or_routine_access ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)));
        allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype));
d7092 1
a7092 1
#line 1954 "parse.y"
d7097 2
a7098 2
#line 1959 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7102 2
a7103 2
#line 1961 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); yyerrok; ;}
d7107 1
a7107 1
#line 1963 "parse.y"
d7112 1
a7112 1
#line 1965 "parse.y"
d7117 2
a7118 2
#line 1971 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d7122 2
a7123 2
#line 1973 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d7127 1
a7127 1
#line 1975 "parse.y"
d7132 2
a7133 2
#line 1981 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7137 2
a7138 2
#line 1983 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d7142 2
a7143 2
#line 1985 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)); ;}
d7147 1
a7147 1
#line 1990 "parse.y"
d7152 2
a7153 2
#line 1996 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d7157 2
a7158 2
#line 1998 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d7162 2
a7163 2
#line 2006 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d7167 2
a7168 2
#line 2011 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7172 2
a7173 2
#line 2013 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7177 2
a7178 2
#line 2018 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_tree_list (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))); ;}
d7182 2
a7183 2
#line 2020 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_tree_list (build_tree_list (NULL_TREE, integer_zero_node), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))); ;}
d7187 2
a7188 2
#line 2025 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d7192 2
a7193 2
#line 2030 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list (NULL_TREE, NULL_TREE), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7197 2
a7198 2
#line 2035 "parse.y"
    { ((*yyvalp).ttype) = maybe_schema_discriminant ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7202 1
a7202 1
#line 2037 "parse.y"
d7207 2
a7208 2
#line 2039 "parse.y"
    { PASCAL_BP_INITIALIZER_LIST ((((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)))) = 1; ;}
d7212 2
a7213 2
#line 2041 "parse.y"
    { ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7217 1
a7217 1
#line 2043 "parse.y"
d7222 2
a7223 2
#line 2049 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d7227 2
a7228 2
#line 2051 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); error ("missing separator"); ;}
d7232 1
a7232 1
#line 2057 "parse.y"
d7237 2
a7238 2
#line 2062 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7242 2
a7243 2
#line 2064 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7247 2
a7248 2
#line 2070 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d7252 1
a7252 1
#line 2072 "parse.y"
d7257 2
a7258 2
#line 2074 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d7262 1
a7262 1
#line 2076 "parse.y"
d7267 2
a7268 2
#line 2081 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d7272 2
a7273 2
#line 2083 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1), NULL_TREE); ;}
d7277 2
a7278 2
#line 2085 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 1), string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1)); ;}
d7282 1
a7282 1
#line 2090 "parse.y"
d7287 2
a7288 2
#line 2092 "parse.y"
    { ((*yyvalp).ttype) = build_set_constructor (nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d7292 2
a7293 2
#line 2098 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d7297 2
a7298 2
#line 2100 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d7302 1
a7302 1
#line 2102 "parse.y"
d7307 2
a7308 2
#line 2107 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d7312 2
a7313 2
#line 2109 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7317 1
a7317 1
#line 2115 "parse.y"
d7322 1
a7322 1
#line 2116 "parse.y"
d7327 1
a7327 1
#line 2120 "parse.y"
d7332 1
a7332 1
#line 2121 "parse.y"
d7337 1
a7337 1
#line 2122 "parse.y"
d7342 1
a7342 1
#line 2126 "parse.y"
d7347 1
a7347 1
#line 2127 "parse.y"
d7352 1
a7352 1
#line 2128 "parse.y"
d7357 1
a7357 1
#line 2129 "parse.y"
d7362 1
a7362 1
#line 2130 "parse.y"
d7367 1
a7367 1
#line 2131 "parse.y"
d7372 1
a7372 1
#line 2132 "parse.y"
d7377 1
a7377 1
#line 2136 "parse.y"
d7382 1
a7382 1
#line 2137 "parse.y"
d7387 1
a7387 1
#line 2138 "parse.y"
d7392 1
a7392 1
#line 2139 "parse.y"
d7397 1
a7397 1
#line 2140 "parse.y"
d7402 1
a7402 1
#line 2141 "parse.y"
d7407 1
a7407 1
#line 2145 "parse.y"
d7412 1
a7412 1
#line 2146 "parse.y"
d7417 1
a7417 1
#line 2147 "parse.y"
d7422 1
a7422 1
#line 2148 "parse.y"
d7427 1
a7427 1
#line 2149 "parse.y"
d7432 1
a7432 1
#line 2150 "parse.y"
d7437 1
a7437 1
#line 2154 "parse.y"
d7442 1
a7442 1
#line 2155 "parse.y"
d7447 1
a7447 1
#line 2156 "parse.y"
d7452 1
a7452 1
#line 2157 "parse.y"
d7457 1
a7457 1
#line 2161 "parse.y"
d7462 1
a7462 1
#line 2162 "parse.y"
d7467 1
a7467 1
#line 2163 "parse.y"
d7472 1
a7472 1
#line 2164 "parse.y"
d7477 2
a7478 2
#line 2169 "parse.y"
    { ((*yyvalp).itype) = IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))->symbol; ;}
d7482 1
a7482 1
#line 2171 "parse.y"
d7487 1
a7487 1
#line 2172 "parse.y"
d7492 1
a7492 1
#line 2173 "parse.y"
d7497 1
a7497 1
#line 2174 "parse.y"
d7502 1
a7502 1
#line 2175 "parse.y"
d7507 1
a7507 1
#line 2176 "parse.y"
d7512 1
a7512 1
#line 2182 "parse.y"
d7517 1
a7517 1
#line 2183 "parse.y"
d7522 1
a7522 1
#line 2184 "parse.y"
d7527 1
a7527 1
#line 2185 "parse.y"
d7532 1
a7532 1
#line 2186 "parse.y"
d7537 1
a7537 1
#line 2187 "parse.y"
d7542 1
a7542 1
#line 2188 "parse.y"
d7547 1
a7547 1
#line 2189 "parse.y"
d7552 1
a7552 1
#line 2190 "parse.y"
d7557 1
a7557 1
#line 2191 "parse.y"
d7562 1
a7562 1
#line 2192 "parse.y"
d7567 1
a7567 1
#line 2193 "parse.y"
d7572 1
a7572 1
#line 2194 "parse.y"
d7577 1
a7577 1
#line 2195 "parse.y"
d7582 1
a7582 1
#line 2196 "parse.y"
d7587 1
a7587 1
#line 2197 "parse.y"
d7592 1
a7592 1
#line 2198 "parse.y"
d7597 1
a7597 1
#line 2199 "parse.y"
d7602 1
a7602 1
#line 2200 "parse.y"
d7607 1
a7607 1
#line 2201 "parse.y"
d7612 1
a7612 1
#line 2202 "parse.y"
d7617 1
a7617 1
#line 2208 "parse.y"
d7622 1
a7622 1
#line 2209 "parse.y"
d7627 1
a7627 1
#line 2210 "parse.y"
d7632 1
a7632 1
#line 2211 "parse.y"
d7637 1
a7637 1
#line 2215 "parse.y"
d7642 1
a7642 1
#line 2216 "parse.y"
d7647 1
a7647 1
#line 2217 "parse.y"
d7652 1
a7652 1
#line 2218 "parse.y"
d7657 2
a7658 2
#line 2230 "parse.y"
    { ((*yyvalp).ttype) = numeric_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7662 2
a7663 2
#line 2235 "parse.y"
    { ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7667 2
a7668 2
#line 2240 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7672 2
a7673 2
#line 2242 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d7677 1
a7677 1
#line 2244 "parse.y"
d7679 2
a7680 2
        ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype));
        error ("comma missing after `%s'", IDENTIFIER_NAME (TREE_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))));
d7686 1
a7686 1
#line 2250 "parse.y"
d7691 2
a7692 2
#line 2256 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7696 2
a7697 2
#line 2258 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d7701 2
a7702 2
#line 2264 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_id ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7706 1
a7706 1
#line 2269 "parse.y"
d7711 2
a7712 2
#line 2323 "parse.y"
    { ((*yyvalp).ttype) = check_identifier ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7716 2
a7717 2
#line 2340 "parse.y"
    { char c = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype); ((*yyvalp).ttype) = make_identifier (&c, 1); ;}
d7721 1
a7721 1
#line 2347 "parse.y"
d7726 1
a7726 1
#line 2352 "parse.y"
d7731 1
a7731 1
#line 2357 "parse.y"
d7736 1
a7736 1
#line 2362 "parse.y"
d7741 2
a7742 2
#line 2367 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_protected); ;}
d7746 2
a7747 2
#line 2372 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_module); ;}
d7751 1
a7751 1
#line 2377 "parse.y"
d7756 1
a7756 1
#line 2379 "parse.y"
d7761 1
a7761 1
#line 2396 "parse.y"
d7766 1
a7766 1
#line 2401 "parse.y"
d7771 1
a7771 1
#line 2406 "parse.y"
d7776 2
a7788 2
/* Line 872 of glr.c.  */
#line 8018 "parse.c"
d7792 1
a7792 1
static void
d7795 2
a7796 3
  /* `Use' the arguments.  */
  (void) yy0;
  (void) yy1;
d7811 1
d7815 2
a7816 3
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;
  (void) yylocationp;
d7826 1
a7826 1
        break;
d7848 6
a7853 3
	  YYFPRINTF (stderr, "%s unresolved ", yymsg);
	  yysymprint (stderr, yystos[yys->yylrState],
		      &yys->yysemantics.yysval, &yys->yyloc);
d7859 9
a7867 9
        {
          yySemanticOption *yyoption = yys->yysemantics.yyfirstVal;
          yyGLRState *yyrh;
          int yyn;
          for (yyrh = yyoption->yystate, yyn = yyrhsLength (yyoption->yyrule);
               yyn > 0;
               yyrh = yyrh->yypred, yyn -= 1)
            yydestroyGLRState (yymsg, yyrh);
        }
d7871 1
a7871 1
/** Left-hand-side symbol for rule #RULE. */
d7882 1
a7882 1
 *  of token). */
d7889 1
a7889 1
/** The default reduction for STATE, assuming it has one. */
d7897 1
a7897 1
  0
d7909 1
a7909 1
	        int* yyaction, const short int** yyconflicts)
d7954 18
d7973 1
a7973 1
yyaddDeferredAction (yyGLRStack* yystack, yyGLRState* yystate,
d7976 16
a7991 11
  yySemanticOption* yynewItem;
  yynewItem = &yystack->yynextFree->yyoption;
  yystack->yyspaceLeft -= 1;
  yystack->yynextFree += 1;
  yynewItem->yyisState = yyfalse;
  yynewItem->yystate = rhs;
  yynewItem->yyrule = yyrule;
  yynewItem->yynext = yystate->yysemantics.yyfirstVal;
  yystate->yysemantics.yyfirstVal = yynewItem;
  if (yystack->yyspaceLeft < YYHEADROOM)
    yyexpandGLRStack (yystack);
d7996 1
a7996 1
/** Initialize SET to a singleton set containing an empty stack. */
d8006 7
d8019 1
d8023 1
a8023 1
 *  capacity for all stacks of SIZE. */
d8025 1
a8025 1
yyinitGLRStack (yyGLRStack* yystack, size_t yysize)
d8027 1
a8027 1
  yystack->yyerrState = 0;
d8029 4
a8032 4
  yystack->yyspaceLeft = yysize;
  yystack->yyitems =
    (yyGLRStackItem*) YYMALLOC (yysize * sizeof yystack->yynextFree[0]);
  if (!yystack->yyitems)
d8034 4
a8037 4
  yystack->yynextFree = yystack->yyitems;
  yystack->yysplitPoint = NULL;
  yystack->yylastDeleted = NULL;
  return yyinitStateSet (&yystack->yytops);
d8040 3
a8042 1
#define YYRELOC(YYFROMITEMS,YYTOITEMS,YYX,YYTYPE) \
d8049 1
a8049 1
    across an allocation. */
d8051 1
a8051 1
yyexpandGLRStack (yyGLRStack* yystack)
a8052 1
#if YYSTACKEXPANDABLE
d8057 3
a8059 3
  yysize = yystack->yynextFree - yystack->yyitems;
  if (YYMAXDEPTH < yysize + YYHEADROOM)
    yyMemoryExhausted (yystack);
d8065 2
a8066 2
    yyMemoryExhausted (yystack);
  for (yyp0 = yystack->yyitems, yyp1 = yynewItems, yyn = yysize;
d8092 14
a8105 16
  if (yystack->yysplitPoint != NULL)
    yystack->yysplitPoint = YYRELOC (yystack->yyitems, yynewItems,
				 yystack->yysplitPoint, yystate);

  for (yyn = 0; yyn < yystack->yytops.yysize; yyn += 1)
    if (yystack->yytops.yystates[yyn] != NULL)
      yystack->yytops.yystates[yyn] =
	YYRELOC (yystack->yyitems, yynewItems,
		 yystack->yytops.yystates[yyn], yystate);
  YYFREE (yystack->yyitems);
  yystack->yyitems = yynewItems;
  yystack->yynextFree = yynewItems + yysize;
  yystack->yyspaceLeft = yynewSize - yysize;

#else
  yyMemoryExhausted (yystack);
a8106 1
}
d8109 1
a8109 1
yyfreeGLRStack (yyGLRStack* yystack)
d8111 2
a8112 2
  YYFREE (yystack->yyitems);
  yyfreeStateSet (&yystack->yytops);
d8117 1
a8117 1
 *  S. */
d8119 1
a8119 1
yyupdateSplit (yyGLRStack* yystack, yyGLRState* yys)
d8121 2
a8122 2
  if (yystack->yysplitPoint != NULL && yystack->yysplitPoint > yys)
    yystack->yysplitPoint = yys;
d8125 1
a8125 1
/** Invalidate stack #K in STACK. */
d8127 1
a8127 1
yymarkStackDeleted (yyGLRStack* yystack, size_t yyk)
d8129 3
a8131 3
  if (yystack->yytops.yystates[yyk] != NULL)
    yystack->yylastDeleted = yystack->yytops.yystates[yyk];
  yystack->yytops.yystates[yyk] = NULL;
d8136 1
a8136 1
    been deleted. */
d8138 1
a8138 1
yyundeleteLastStack (yyGLRStack* yystack)
d8140 1
a8140 1
  if (yystack->yylastDeleted == NULL || yystack->yytops.yysize != 0)
d8142 2
a8143 2
  yystack->yytops.yystates[0] = yystack->yylastDeleted;
  yystack->yytops.yysize = 1;
d8145 1
a8145 1
  yystack->yylastDeleted = NULL;
d8149 1
a8149 1
yyremoveDeletes (yyGLRStack* yystack)
d8153 1
a8153 1
  while (yyj < yystack->yytops.yysize)
d8155 1
a8155 1
      if (yystack->yytops.yystates[yyi] == NULL)
d8161 1
a8161 1
	  yystack->yytops.yysize -= 1;
d8165 8
a8172 1
	  yystack->yytops.yystates[yyj] = yystack->yytops.yystates[yyi];
d8185 1
a8185 1
 * LRSTATE, at input position POSN, with (resolved) semantic value SVAL. */
d8187 1
a8187 1
yyglrShift (yyGLRStack* yystack, size_t yyk, yyStateNum yylrState,
d8189 1
a8189 1
	    YYSTYPE yysval, YYLTYPE* yylocp)
d8191 9
a8199 1
  yyGLRStackItem* yynewItem;
d8201 1
a8201 13
  yynewItem = yystack->yynextFree;
  yystack->yynextFree += 1;
  yystack->yyspaceLeft -= 1;
  yynewItem->yystate.yyisState = yytrue;
  yynewItem->yystate.yylrState = yylrState;
  yynewItem->yystate.yyposn = yyposn;
  yynewItem->yystate.yyresolved = yytrue;
  yynewItem->yystate.yypred = yystack->yytops.yystates[yyk];
  yystack->yytops.yystates[yyk] = &yynewItem->yystate;
  yynewItem->yystate.yysemantics.yysval = yysval;
  yynewItem->yystate.yyloc = *yylocp;
  if (yystack->yyspaceLeft < YYHEADROOM)
    yyexpandGLRStack (yystack);
d8206 1
a8206 1
 *  semantic value of YYRHS under the action for YYRULE. */
d8208 1
a8208 1
yyglrShiftDefer (yyGLRStack* yystack, size_t yyk, yyStateNum yylrState,
d8211 1
a8211 1
  yyGLRStackItem* yynewItem;
d8213 9
a8221 11
  yynewItem = yystack->yynextFree;
  yynewItem->yystate.yyisState = yytrue;
  yynewItem->yystate.yylrState = yylrState;
  yynewItem->yystate.yyposn = yyposn;
  yynewItem->yystate.yyresolved = yyfalse;
  yynewItem->yystate.yypred = yystack->yytops.yystates[yyk];
  yynewItem->yystate.yysemantics.yyfirstVal = NULL;
  yystack->yytops.yystates[yyk] = &yynewItem->yystate;
  yystack->yynextFree += 1;
  yystack->yyspaceLeft -= 1;
  yyaddDeferredAction (yystack, &yynewItem->yystate, rhs, yyrule);
d8227 1
a8227 1
 *  have been previously resolved. Set *VALP to the resulting value,
d8229 1
a8229 1
 *  for userAction. */
d8231 1
a8231 1
yydoAction (yyGLRStack* yystack, size_t yyk, yyRuleNum yyrule,
d8236 1
a8236 1
  if (yystack->yysplitPoint == NULL)
d8238 2
a8239 2
      /* Standard special case: single stack. */
      yyGLRStackItem* rhs = (yyGLRStackItem*) yystack->yytops.yystates[yyk];
d8241 3
a8243 3
      yystack->yynextFree -= yynrhs;
      yystack->yyspaceLeft += yynrhs;
      yystack->yytops.yystates[0] = & yystack->yynextFree[-1].yystate;
d8245 1
a8245 1
			   yyvalp, yylocp, yystack);
d8249 4
d8257 4
a8260 1
	= yystack->yytops.yystates[yyk];
d8266 2
a8267 2
      yyupdateSplit (yystack, yys);
      yystack->yytops.yystates[yyk] = yys;
d8269 1
a8269 1
			   yyvalp, yylocp, yystack);
d8274 1
a8274 1
# define YY_REDUCE_PRINT(K, Rule)
d8276 1
a8276 1
# define YY_REDUCE_PRINT(K, Rule)	\
d8279 2
a8280 2
    yy_reduce_print (K, Rule);		\
} while (0)
d8286 3
a8288 2
static inline void
yy_reduce_print (size_t yyk, yyRuleNum yyrule)
d8290 5
d8296 3
a8298 1
  YYFPRINTF (stderr, "Reducing stack %lu by rule %d (line %lu), ",
d8301 9
a8309 4
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytokenName (yyrhs[yyi]));
  YYFPRINTF (stderr, "-> %s\n", yytokenName (yyr1[yyrule]));
d8321 1
a8321 1
 *  the STACK. In this case, the (necessarily deferred) semantic value is
d8325 2
a8326 2
yyglrReduce (yyGLRStack* yystack, size_t yyk, yyRuleNum yyrule,
             yybool yyforceEval)
d8328 1
a8328 1
  size_t yyposn = yystack->yytops.yystates[yyk]->yyposn;
d8330 1
a8330 1
  if (yyforceEval || yystack->yysplitPoint == NULL)
d8335 6
a8340 4
      YY_REDUCE_PRINT (yyk, yyrule);
      YYCHK (yydoAction (yystack, yyk, yyrule, &yysval, &yyloc));
      yyglrShift (yystack, yyk,
		  yyLRgotoState (yystack->yytops.yystates[yyk]->yylrState,
d8342 1
a8342 1
		  yyposn, yysval, &yyloc);
d8348 1
a8348 1
      yyGLRState* yys, *yys0 = yystack->yytops.yystates[yyk];
d8351 1
a8351 1
      for (yys = yystack->yytops.yystates[yyk], yyn = yyrhsLength (yyrule);
d8357 1
a8357 1
      yyupdateSplit (yystack, yys);
d8360 1
a8360 1
		  "Reduced stack %lu by rule #%d; action deferred. Now in state %d.\n",
d8362 2
a8363 2
      for (yyi = 0; yyi < yystack->yytops.yysize; yyi += 1)
	if (yyi != yyk && yystack->yytops.yystates[yyi] != NULL)
d8365 2
a8366 2
	    yyGLRState* yyp, *yysplit = yystack->yysplitPoint;
	    yyp = yystack->yytops.yystates[yyi];
d8371 2
a8372 2
		    yyaddDeferredAction (yystack, yyp, yys0, yyrule);
		    yymarkStackDeleted (yystack, yyk);
d8381 2
a8382 2
      yystack->yytops.yystates[yyk] = yys;
      yyglrShiftDefer (yystack, yyk, yynewLRState, yyposn, yys0, yyrule);
d8388 1
a8388 1
yysplitStack (yyGLRStack* yystack, size_t yyk)
d8390 1
a8390 1
  if (yystack->yysplitPoint == NULL)
d8393 1
a8393 1
      yystack->yysplitPoint = yystack->yytops.yystates[yyk];
d8395 1
a8395 1
  if (yystack->yytops.yysize >= yystack->yytops.yycapacity)
d8397 32
a8428 14
      yyGLRState** yynewStates = NULL;
      if (! ((yystack->yytops.yycapacity
	      <= (YYSIZEMAX / (2 * sizeof yynewStates[0])))
	     && (yynewStates =
		 (yyGLRState**) YYREALLOC (yystack->yytops.yystates,
					   ((yystack->yytops.yycapacity *= 2)
					    * sizeof yynewStates[0])))))
	yyMemoryExhausted (yystack);
      yystack->yytops.yystates = yynewStates;
    }
  yystack->yytops.yystates[yystack->yytops.yysize]
    = yystack->yytops.yystates[yyk];
  yystack->yytops.yysize += 1;
  return yystack->yytops.yysize-1;
d8433 1
a8433 1
 *  that produce the same terminal symbols. */
d8454 1
a8454 1
 *  alternative semantic values for the RHS-symbols of Y1 and Y0. */
d8483 1
a8483 1
	  while (yytrue)
d8508 1
a8508 1
 *  1 if user-mergeable, 2 if Y0 is preferred, 3 if Y1 is preferred. */
d8531 3
a8533 3
static YYRESULTTAG yyresolveValue (yySemanticOption* yyoptionList,
				   yyGLRStack* yystack, YYSTYPE* yyvalp,
				   YYLTYPE* yylocp);
d8535 5
d8541 2
a8542 1
yyresolveStates (yyGLRState* yys, int yyn, yyGLRStack* yystack)
a8543 1
  YYRESULTTAG yyflag;
d8547 1
a8547 3
      yyflag = yyresolveStates (yys->yypred, yyn-1, yystack);
      if (yyflag != yyok)
	return yyflag;
d8549 1
a8549 8
	{
	  yyflag = yyresolveValue (yys->yysemantics.yyfirstVal, yystack,
				   &yys->yysemantics.yysval, &yys->yyloc
				  );
	  if (yyflag != yyok)
	    return yyflag;
	  yys->yyresolved = yytrue;
	}
d8554 4
d8559 2
a8560 2
yyresolveAction (yySemanticOption* yyopt, yyGLRStack* yystack,
	         YYSTYPE* yyvalp, YYLTYPE* yylocp)
d8564 4
d8570 9
a8578 1
  YYCHK (yyresolveStates (yyopt->yystate, yynrhs, yystack));
d8580 16
a8595 3
  return yyuserAction (yyopt->yyrule, yynrhs,
		       yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
		       yyvalp, yylocp, yystack);
d8605 1
a8605 1
  yyGLRState* yystates[YYMAXRHS];
d8621 1
a8621 1
	       yyx->yyrule);
d8625 1
a8625 1
	       yyx->yyrule, (unsigned long int) (yys->yyposn + 1),
d8646 3
a8648 6
static void yyreportAmbiguity (yySemanticOption* yyx0, yySemanticOption* yyx1,
			       yyGLRStack* yystack)
  __attribute__ ((__noreturn__));
static void
yyreportAmbiguity (yySemanticOption* yyx0, yySemanticOption* yyx1,
		   yyGLRStack* yystack)
d8650 2
a8651 3
  /* `Unused' warnings.  */
  (void) yyx0;
  (void) yyx1;
d8661 3
a8663 1
  yyFail (yystack, YY_("syntax is ambiguous"));
d8666 57
d8724 6
a8729 2
/** Resolve the ambiguity represented by OPTIONLIST, perform the indicated
 *  actions, and return the result. */
d8731 1
a8731 2
yyresolveValue (yySemanticOption* yyoptionList, yyGLRStack* yystack,
		YYSTYPE* yyvalp, YYLTYPE* yylocp)
d8733 1
d8737 3
d8757 2
a8758 1
	      yyreportAmbiguity (yybest, yyp, yystack);
d8771 1
a8771 1
	         but some compilers complain if the default case is
d8783 29
a8811 12
      YYCHK (yyresolveAction (yybest, yystack, yyvalp, yylocp));
      for (yyp = yybest->yynext; yyp != NULL; yyp = yyp->yynext)
	{
	  if (yyprec == yydprec[yyp->yyrule])
	    {
	      YYSTYPE yyval1;
	      YYLTYPE yydummy;
	      YYCHK (yyresolveAction (yyp, yystack, &yyval1, &yydummy));
	      yyuserMerge (yymerger[yyp->yyrule], yyvalp, &yyval1);
	    }
	}
      return yyok;
d8814 2
a8815 1
    return yyresolveAction (yybest, yystack, yyvalp, yylocp);
d8819 1
a8819 1
yyresolveStack (yyGLRStack* yystack)
d8821 1
a8821 1
  if (yystack->yysplitPoint != NULL)
d8826 2
a8827 2
      for (yyn = 0, yys = yystack->yytops.yystates[0];
	   yys != yystack->yysplitPoint;
d8830 1
a8830 1
      YYCHK (yyresolveStates (yystack->yytops.yystates[0], yyn, yystack
d8837 1
a8837 1
yycompressStack (yyGLRStack* yystack)
d8841 1
a8841 1
  if (yystack->yytops.yysize != 1 || yystack->yysplitPoint == NULL)
d8844 2
a8845 2
  for (yyp = yystack->yytops.yystates[0], yyq = yyp->yypred, yyr = NULL;
       yyp != yystack->yysplitPoint;
d8849 5
a8853 5
  yystack->yyspaceLeft += yystack->yynextFree - yystack->yyitems;
  yystack->yynextFree = ((yyGLRStackItem*) yystack->yysplitPoint) + 1;
  yystack->yyspaceLeft -= yystack->yynextFree - yystack->yyitems;
  yystack->yysplitPoint = NULL;
  yystack->yylastDeleted = NULL;
d8857 1
a8857 1
      yystack->yynextFree->yystate = *yyr;
d8859 4
a8862 4
      yystack->yynextFree->yystate.yypred = & yystack->yynextFree[-1].yystate;
      yystack->yytops.yystates[0] = &yystack->yynextFree->yystate;
      yystack->yynextFree += 1;
      yystack->yyspaceLeft -= 1;
d8867 2
a8868 3
yyprocessOneStack (yyGLRStack* yystack, size_t yyk,
	           size_t yyposn, YYSTYPE* yylvalp, YYLTYPE* yyllocp
		  )
a8872 1
  yySymbol* const yytokenp = yystack->yytokenp;
d8874 1
a8874 1
  while (yystack->yytops.yystates[yyk] != NULL)
d8876 1
a8876 1
      yyStateNum yystate = yystack->yytops.yystates[yyk]->yylrState;
d8889 1
a8889 1
	      yymarkStackDeleted (yystack, yyk);
d8892 1
a8892 1
	  YYCHK (yyglrReduce (yystack, yyk, yyrule, yyfalse));
d8896 3
a8898 1
	  if (*yytokenp == YYEMPTY)
d8902 2
a8903 2
	      *yytokenp = YYTRANSLATE (yychar);
	      YY_SYMBOL_PRINT ("Next token is", *yytokenp, yylvalp, yyllocp);
d8905 3
a8907 1
	  yygetLRActions (yystate, *yytokenp, &yyaction, &yyconflicts);
d8911 1
a8911 1
	      size_t yynewStack = yysplitStack (yystack, yyk);
d8915 1
a8915 1
	      YYCHK (yyglrReduce (yystack, yynewStack,
d8917 2
a8918 2
	      YYCHK (yyprocessOneStack (yystack, yynewStack, yyposn,
					yylvalp, yyllocp));
d8923 1
a8923 10
	    {
	      YYDPRINTF ((stderr, "On stack %lu, ", (unsigned long int) yyk));
	      YY_SYMBOL_PRINT ("shifting", *yytokenp, yylvalp, yyllocp);
	      yyglrShift (yystack, yyk, yyaction, yyposn+1,
			  *yylvalp, yyllocp);
	      YYDPRINTF ((stderr, "Stack %lu now in state #%d\n",
			  (unsigned long int) yyk,
			  yystack->yytops.yystates[yyk]->yylrState));
	      break;
	    }
d8928 1
a8928 1
	      yymarkStackDeleted (yystack, yyk);
d8932 2
a8933 1
	    YYCHK (yyglrReduce (yystack, yyk, -yyaction, yyfalse));
d8939 2
a8940 3
static void
yyreportSyntaxError (yyGLRStack* yystack,
		     YYSTYPE* yylvalp, YYLTYPE* yyllocp)
d8942 1
a8942 5
  /* `Unused' warnings. */
  (void) yylvalp;
  (void) yyllocp;

  if (yystack->yyerrState == 0)
a8944 1
      yySymbol* const yytokenp = yystack->yytokenp;
d8946 2
a8947 2
      yyn = yypact[yystack->yytops.yystates[0]->yylrState];
      if (YYPACT_NINF < yyn && yyn < YYLAST)
d8949 2
a8950 1
	  size_t yysize0 = yytnamerr (NULL, yytokenName (*yytokenp));
d8974 1
a8974 1
	  int yychecklim = YYLAST - yyn;
d8978 1
a8978 1
	  yyarg[0] = yytokenName (*yytokenp);
d9030 1
a9030 1
	      yyMemoryExhausted (yystack);
d9040 5
a9044 8
/* Recover from a syntax error on YYSTACK, assuming that YYTOKENP,
   YYLVALP, and YYLLOCP point to the syntactic category, semantic
   value, and location of the look-ahead.  */
static void
yyrecoverSyntaxError (yyGLRStack* yystack,
		      YYSTYPE* yylvalp,
		      YYLTYPE* YYOPTIONAL_LOC (yyllocp)
		      )
a9045 1
  yySymbol* const yytokenp = yystack->yytokenp;
d9049 1
a9049 1
  if (yystack->yyerrState == 3)
d9052 1
a9052 1
    while (yytrue)
d9054 4
a9057 3
	if (*yytokenp == YYEOF)
	  yyFail (yystack, NULL);
	if (*yytokenp != YYEMPTY)
d9060 2
a9061 2
	       of the shifted error token must take it into account. */
	    yyGLRState *yys = yystack->yytops.yystates[0];
d9064 3
a9066 2
	    yyerror_range[2].yystate.yyloc = *yyllocp;
	    YYLLOC_DEFAULT (yys->yyloc, yyerror_range, 2);
d9068 1
a9068 1
			*yytokenp, yylvalp, yyllocp);
d9072 3
a9074 3
	*yytokenp = YYTRANSLATE (yychar);
	YY_SYMBOL_PRINT ("Next token is", *yytokenp, yylvalp, yyllocp);
	yyj = yypact[yystack->yytops.yystates[0]->yylrState];
d9077 2
a9078 2
	yyj += *yytokenp;
	if (yyj < 0 || YYLAST < yyj || yycheck[yyj] != *yytokenp)
d9080 1
a9080 1
	    if (yydefact[yystack->yytops.yystates[0]->yylrState] != 0)
d9088 2
a9089 2
  for (yyk = 0; yyk < yystack->yytops.yysize; yyk += 1)
    if (yystack->yytops.yystates[yyk] != NULL)
d9091 10
a9100 10
  if (yyk >= yystack->yytops.yysize)
    yyFail (yystack, NULL);
  for (yyk += 1; yyk < yystack->yytops.yysize; yyk += 1)
    yymarkStackDeleted (yystack, yyk);
  yyremoveDeletes (yystack);
  yycompressStack (yystack);

  /* Now pop stack until we find a state that shifts the error token. */
  yystack->yyerrState = 3;
  while (yystack->yytops.yystates[0] != NULL)
d9102 1
a9102 1
      yyGLRState *yys = yystack->yytops.yystates[0];
d9112 2
a9113 2
	      yystack->yyerror_range[2].yystate.yyloc = *yyllocp;
	      YYLLOC_DEFAULT (yyerrloc, yystack->yyerror_range, 2);
d9115 4
a9118 4
			       yylvalp, &yyerrloc);
	      yyglrShift (yystack, 0, yytable[yyj],
			  yys->yyposn, *yylvalp, &yyerrloc);
	      yys = yystack->yytops.yystates[0];
d9122 1
a9122 1
      yystack->yyerror_range[1].yystate.yyloc = yys->yyloc;
d9124 3
a9126 3
      yystack->yytops.yystates[0] = yys->yypred;
      yystack->yynextFree -= 1;
      yystack->yyspaceLeft += 1;
d9128 2
a9129 2
  if (yystack->yytops.yystates[0] == NULL)
    yyFail (yystack, NULL);
d9146 1
a9146 1
  } while (0)
a9156 1
  yySymbol yytoken;
d9158 1
a9160 4

  YYSTYPE* const yylvalp = &yylval;
  YYLTYPE* const yyllocp = &yylloc;

d9163 1
a9163 1
  yytoken = YYEMPTY;
d9172 1
a9172 1
  if (! yyinitGLRStack (&yystack, YYINITDEPTH))
d9181 1
a9181 2
  yystack.yytokenp = &yytoken;
  yyglrShift (&yystack, 0, 0, 0, yylval, &yylloc);
d9184 1
a9184 1
  while (yytrue)
d9190 1
a9190 1
      while (yytrue)
d9197 1
a9197 1
          YYDPRINTF ((stderr, "Entering state %d\n", yystate));
d9205 2
a9206 2
		  yystack.yyerror_range[1].yystate.yyloc = *yyllocp;
		  yyreportSyntaxError (&yystack, yylvalp, yyllocp);
d9213 2
a9214 1
	      if (yytoken == YYEMPTY)
d9219 1
a9219 1
                  YY_SYMBOL_PRINT ("Next token is", yytoken, yylvalp, yyllocp);
d9221 2
d9228 3
a9230 3
		  YY_SYMBOL_PRINT ("Shifting", yytoken, yylvalp, yyllocp);
		  if (yytoken != YYEOF)
		    yytoken = YYEMPTY;
d9232 1
a9232 1
		  yyglrShift (&yystack, 0, yyaction, yyposn, yylval, yyllocp);
d9238 2
a9239 2
		  yystack.yyerror_range[1].yystate.yyloc = *yyllocp;
		  yyreportSyntaxError (&yystack, yylvalp, yyllocp);
d9247 1
a9247 1
      while (yytrue)
d9249 1
d9251 25
a9275 6
	  size_t yyn = yystack.yytops.yysize;
	  for (yys = 0; yys < yyn; yys += 1)
	    YYCHK1 (yyprocessOneStack (&yystack, yys, yyposn,
				       yylvalp, yyllocp));
	  yytoken = YYEMPTY;
	  yyposn += 1;
d9284 2
a9285 2
	      yystack.yyerror_range[1].yystate.yyloc = *yyllocp;
	      yyreportSyntaxError (&yystack, yylvalp, yyllocp);
d9288 27
a9314 1
	  else if (yystack.yytops.yysize == 1)
d9324 1
a9324 1
      yyrecoverSyntaxError (&yystack, yylvalp, yyllocp);
d9334 1
a9334 1
  /* Fall through.  */
d9343 1
a9343 1
  /* Fall through.  */
d9346 1
a9346 1
  if (yytoken != YYEOF && yytoken != YYEMPTY)
d9348 2
a9349 1
                yytoken, yylvalp, yyllocp);
d9358 18
a9375 9
	while (yystates[0])
	  {
	    yyGLRState *yys = yystates[0];
	  yystack.yyerror_range[1].yystate.yyloc = yys->yyloc;
	    yydestroyGLRState ("Cleanup: popping", yys);
	    yystates[0] = yys->yypred;
	    yystack.yynextFree -= 1;
	    yystack.yyspaceLeft += 1;
	  }
d9379 2
a9380 1
  return yyresult;
d9385 3
d9400 16
d9417 1
a9417 1
    ((YYX) == NULL ? -1 : (yyGLRStackItem*) (YYX) - yystack->yyitems)
d9420 33
d9456 1
a9456 1
#line 2409 "parse.y"
@


1.3
log
@merge
@
text
@d8572 1
a8572 1
      yyGLRState** yynewStates;
a9393 3
static void yypstack (yyGLRStack* yystack, size_t yyk)
  __attribute__ ((__unused__));
static void yypdumpstack (yyGLRStack* yystack) __attribute__ ((__unused__));
a9405 16
static void
yypstates (yyGLRState* yyst)
{
  if (yyst == NULL)
    fprintf (stderr, "<null>");
  else
    yy_yypstack (yyst);
  fprintf (stderr, "\n");
}

static void
yypstack (yyGLRStack* yystack, size_t yyk)
{
  yypstates (yystack->yytops.yystates[yyk]);
}

a9409 33
static void
yypdumpstack (yyGLRStack* yystack)
{
  yyGLRStackItem* yyp;
  size_t yyi;
  for (yyp = yystack->yyitems; yyp < yystack->yynextFree; yyp += 1)
    {
      fprintf (stderr, "%3lu. ", (unsigned long int) (yyp - yystack->yyitems));
      if (*(yybool *) yyp)
	{
	  fprintf (stderr, "Res: %d, LR State: %d, posn: %lu, pred: %ld",
		   yyp->yystate.yyresolved, yyp->yystate.yylrState,
		   (unsigned long int) yyp->yystate.yyposn,
		   (long int) YYINDEX (yyp->yystate.yypred));
	  if (! yyp->yystate.yyresolved)
	    fprintf (stderr, ", firstVal: %ld",
		     (long int) YYINDEX (yyp->yystate.yysemantics.yyfirstVal));
	}
      else
	{
	  fprintf (stderr, "Option. rule: %d, state: %ld, next: %ld",
		   yyp->yyoption.yyrule,
		   (long int) YYINDEX (yyp->yyoption.yystate),
		   (long int) YYINDEX (yyp->yyoption.yynext));
	}
      fprintf (stderr, "\n");
    }
  fprintf (stderr, "Tops:");
  for (yyi = 0; yyi < yystack->yytops.yysize; yyi += 1)
    fprintf (stderr, "%lu: %ld; ", (unsigned long int) yyi,
	     (long int) YYINDEX (yystack->yytops.yystates[yyi]));
  fprintf (stderr, "\n");
}
@


1.2
log
@these files are generated and thusly part of our new gpc vendor branch
(except gpc-lex.c whose diff is no longer needed either now)
@
text
@d124 39
a162 37
     p_Addr = 336,
     p_Assigned = 337,
     p_Dispose = 338,
     p_Exit = 339,
     p_FormatString = 340,
     p_New = 341,
     p_Return = 342,
     LEX_INTCONST = 343,
     LEX_INTCONST_BASE = 344,
     LEX_STRCONST = 345,
     LEX_REALCONST = 346,
     LEX_BUILTIN_PROCEDURE = 347,
     LEX_BUILTIN_PROCEDURE_WRITE = 348,
     LEX_BUILTIN_FUNCTION = 349,
     LEX_ID = 350,
     LEX_CARET_WHITE = 351,
     LEX_CARET_LETTER = 352,
     LEX_ASSIGN = 353,
     LEX_RENAME = 354,
     LEX_RANGE = 355,
     LEX_ELLIPSIS = 356,
     LEX_CONST_EQUAL = 357,
     LEX_SYMDIFF = 358,
     LEX_NE = 359,
     LEX_GE = 360,
     LEX_LE = 361,
     LEX_POWER = 362,
     LEX_BPPLUS = 363,
     LEX_BPMINUS = 364,
     LEX_CEIL_PLUS = 365,
     LEX_CEIL_MINUS = 366,
     LEX_FLOOR_PLUS = 367,
     LEX_FLOOR_MINUS = 368,
     LEX_CEIL_MULT = 369,
     LEX_CEIL_DIV = 370,
     LEX_FLOOR_MULT = 371,
     LEX_FLOOR_DIV = 372
d244 39
a282 37
#define p_Addr 336
#define p_Assigned 337
#define p_Dispose 338
#define p_Exit 339
#define p_FormatString 340
#define p_New 341
#define p_Return 342
#define LEX_INTCONST 343
#define LEX_INTCONST_BASE 344
#define LEX_STRCONST 345
#define LEX_REALCONST 346
#define LEX_BUILTIN_PROCEDURE 347
#define LEX_BUILTIN_PROCEDURE_WRITE 348
#define LEX_BUILTIN_FUNCTION 349
#define LEX_ID 350
#define LEX_CARET_WHITE 351
#define LEX_CARET_LETTER 352
#define LEX_ASSIGN 353
#define LEX_RENAME 354
#define LEX_RANGE 355
#define LEX_ELLIPSIS 356
#define LEX_CONST_EQUAL 357
#define LEX_SYMDIFF 358
#define LEX_NE 359
#define LEX_GE 360
#define LEX_LE 361
#define LEX_POWER 362
#define LEX_BPPLUS 363
#define LEX_BPMINUS 364
#define LEX_CEIL_PLUS 365
#define LEX_CEIL_MINUS 366
#define LEX_FLOOR_PLUS 367
#define LEX_FLOOR_MINUS 368
#define LEX_CEIL_MULT 369
#define LEX_CEIL_DIV 370
#define LEX_FLOOR_MULT 371
#define LEX_FLOOR_DIV 372
d290 1
d292 3
d348 1
a348 1
#line 108 "parse.y"
d355 1
a355 1
#line 348 "parse.c"
d385 1
a385 1
#line 378 "parse.c"
d450 1
a450 1
#define YYFINAL  69
d452 1
a452 1
#define YYLAST   8828
d455 1
a455 1
#define YYNTOKENS  137
d457 1
a457 1
#define YYNNTS  280
d459 1
a459 1
#define YYNRULES  778
d461 1
a461 1
#define YYNSTATES  1297
d470 1
a470 1
#define YYMAXUTOK   372
d482 4
a485 4
       2,     2,     2,     2,     2,     2,     2,     2,   136,     2,
     119,   120,   130,   128,   121,   129,   127,   131,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   122,   118,
     132,   133,   134,     2,   125,     2,     2,     2,     2,     2,
d488 1
a488 1
       2,   123,     2,   124,   126,     2,     2,     2,     2,     2,
d491 1
a491 1
       2,     2,     2,     2,   135,     2,     2,     2,     2,     2,
d516 1
a516 1
     115,   116,   117
d541 56
a596 57
     510,   517,   521,   522,   532,   533,   543,   549,   556,   563,
     567,   571,   573,   577,   581,   585,   588,   592,   594,   597,
     598,   601,   603,   606,   608,   611,   614,   616,   618,   620,
     622,   624,   627,   631,   635,   637,   641,   643,   647,   651,
     658,   660,   665,   669,   673,   677,   679,   681,   685,   687,
     691,   695,   698,   700,   702,   704,   705,   708,   716,   718,
     721,   723,   727,   731,   735,   738,   743,   744,   750,   754,
     758,   760,   762,   764,   768,   772,   774,   777,   783,   785,
     787,   789,   793,   797,   799,   803,   807,   811,   814,   818,
     823,   826,   829,   832,   836,   838,   840,   842,   845,   849,
     851,   855,   859,   861,   863,   865,   868,   870,   872,   875,
     879,   884,   888,   894,   898,   902,   904,   907,   909,   911,
     913,   915,   917,   920,   923,   925,   927,   929,   933,   937,
     938,   939,   949,   951,   953,   957,   963,   969,   975,   983,
     989,   995,   997,   999,  1003,  1006,  1010,  1011,  1018,  1025,
    1032,  1036,  1039,  1042,  1044,  1048,  1052,  1057,  1059,  1063,
    1065,  1067,  1069,  1073,  1078,  1085,  1087,  1089,  1091,  1093,
    1095,  1098,  1100,  1102,  1105,  1109,  1113,  1119,  1123,  1125,
    1129,  1133,  1137,  1141,  1146,  1151,  1155,  1159,  1165,  1167,
    1170,  1172,  1174,  1177,  1179,  1180,  1182,  1184,  1185,  1188,
    1190,  1192,  1194,  1198,  1200,  1202,  1209,  1217,  1219,  1223,
    1227,  1231,  1237,  1241,  1243,  1245,  1251,  1253,  1257,  1258,
    1260,  1261,  1262,  1268,  1270,  1272,  1273,  1274,  1277,  1279,
    1282,  1284,  1286,  1288,  1289,  1294,  1296,  1299,  1301,  1306,
    1311,  1313,  1320,  1322,  1323,  1330,  1331,  1332,  1341,  1342,
    1343,  1344,  1354,  1355,  1356,  1365,  1366,  1378,  1379,  1389,
    1392,  1395,  1397,  1401,  1403,  1407,  1411,  1413,  1417,  1418,
    1426,  1427,  1432,  1434,  1436,  1437,  1440,  1442,  1446,  1448,
    1452,  1456,  1457,  1464,  1466,  1470,  1474,  1478,  1481,  1483,
    1487,  1491,  1495,  1497,  1499,  1501,  1503,  1506,  1508,  1510,
    1513,  1515,  1520,  1525,  1532,  1540,  1546,  1554,  1564,  1576,
    1577,  1579,  1581,  1583,  1585,  1589,  1594,  1596,  1600,  1602,
    1604,  1608,  1610,  1613,  1617,  1621,  1622,  1627,  1629,  1633,
    1637,  1638,  1643,  1645,  1649,  1653,  1657,  1661,  1665,  1668,
    1671,  1673,  1675,  1677,  1679,  1681,  1683,  1685,  1687,  1689,
    1691,  1693,  1695,  1698,  1700,  1702,  1705,  1707,  1709,  1711,
    1713,  1715,  1717,  1719,  1721,  1723,  1725,  1727,  1729,  1731,
    1733,  1735,  1737,  1739,  1741,  1743,  1745,  1747,  1751,  1754,
    1756,  1758,  1760,  1764,  1768,  1771,  1776,  1781,  1785,  1791,
    1794,  1799,  1805,  1810,  1815,  1822,  1830,  1832,  1837,  1842,
    1843,  1845,  1849,  1851,  1855,  1857,  1861,  1865,  1869,  1871,
    1875,  1881,  1883,  1886,  1890,  1894,  1896,  1898,  1900,  1904,
    1908,  1910,  1917,  1922,  1927,  1931,  1933,  1936,  1940,  1944,
    1948,  1950,  1954,  1958,  1960,  1962,  1966,  1968,  1970,  1974,
    1976,  1980,  1984,  1986,  1988,  1992,  1995,  1999,  2001,  2005,
    2009,  2013,  2015,  2019,  2021,  2023,  2025,  2027,  2029,  2031,
    2033,  2035,  2037,  2039,  2041,  2043,  2045,  2047,  2049,  2051,
    2053,  2055,  2057,  2059,  2061,  2063,  2065,  2067,  2069,  2072,
    2074,  2076,  2078,  2081,  2083,  2085,  2087,  2089,  2091,  2093,
    2095,  2097,  2099,  2101,  2103,  2105,  2107,  2109,  2111,  2113,
    2115,  2117,  2119,  2121,  2123,  2125,  2127,  2129,  2131,  2133,
    2135,  2137,  2139,  2141,  2143,  2145,  2147,  2149,  2151,  2153,
    2155,  2157,  2159,  2161,  2163,  2165,  2167,  2169,  2171,  2175,
    2179,  2183,  2186,  2188,  2192,  2194,  2198,  2200,  2202,  2204,
    2206,  2208,  2210,  2212,  2214,  2216,  2218,  2220,  2222,  2224,
    2226,  2228,  2230,  2232,  2234,  2236,  2238,  2240,  2242,  2244,
    2246,  2248,  2250,  2252,  2254,  2256,  2258,  2260,  2262,  2264,
d599 5
a603 2
    2306,  2308,  2310,  2311,  2312,  2313,  2315,  2317,  2319,  2320,
    2322,  2324,  2326,  2328,  2330,  2332,  2334,  2336,  2337
d609 240
a848 234
     138,     0,    -1,    -1,   139,    -1,    -1,    -1,   171,   174,
     140,   181,   191,   141,   299,   414,    -1,   142,    -1,    -1,
      -1,    71,   400,   118,   174,    95,   143,   181,   196,   144,
     159,    15,   414,    -1,   149,    -1,   154,    -1,    -1,   149,
     145,   154,    -1,    -1,    -1,   410,   400,   172,   146,   152,
     118,   147,   156,   414,    -1,    -1,   410,   400,   172,   148,
     156,   414,    -1,    -1,    -1,   410,   400,    95,   150,   172,
     151,   152,   414,    -1,    -1,    95,   153,   175,   118,   181,
     196,    15,    -1,    -1,   410,   400,    55,   118,   155,   156,
     414,    -1,    -1,    -1,   157,   183,   198,   158,   166,    15,
      -1,    -1,    55,   183,   191,   160,    -1,    -1,    10,   161,
     165,    -1,   163,    -1,    -1,   163,    53,   162,   300,    -1,
     166,    -1,    -1,    58,   164,   165,    -1,   300,    -1,    -1,
     167,   169,    -1,   167,    -1,   169,    -1,    -1,    30,    10,
      13,   168,   304,   118,    -1,    -1,    30,    15,    13,   170,
     304,   118,    -1,    -1,    31,   400,   173,   118,    -1,    31,
       1,   173,   118,    -1,   173,   118,   174,    -1,   415,    -1,
     119,   396,   120,    -1,   415,    -1,   277,   118,    -1,   176,
      -1,   175,   118,   176,    -1,     1,    -1,   175,     1,   176,
      -1,   175,   118,     1,    -1,   400,   413,   177,    -1,   119,
     179,   120,    -1,   178,    -1,   178,   119,   179,   120,    -1,
      95,    -1,   180,    -1,   179,   121,   180,    -1,     1,    -1,
     179,     1,   180,    -1,   179,   121,     1,    -1,   399,   190,
      -1,   399,   100,   399,    -1,   409,   399,   190,    -1,    -1,
     182,   183,    -1,    -1,    56,   184,   118,    -1,   185,    -1,
     184,   118,   185,    -1,   184,     1,   185,    -1,   400,   186,
     187,   204,    -1,   415,    -1,    67,    -1,   415,    -1,   119,
     188,   120,    -1,    62,   119,   188,   120,    -1,   189,    -1,
     188,   121,   189,    -1,     1,    -1,   188,     1,   189,    -1,
     188,   121,     1,    -1,   400,   190,    -1,   415,    -1,    99,
     400,    -1,    -1,   191,   192,    -1,   201,    -1,   194,    -1,
      -1,   193,   194,    -1,    -1,   195,   205,    -1,    22,   209,
     118,    -1,   266,    -1,    -1,   196,   197,    -1,   201,    -1,
     205,    -1,   265,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   200,   205,    -1,   266,    -1,     6,   202,   118,    -1,
     203,    -1,   202,   121,   203,    -1,   202,     1,   203,    -1,
     400,   204,    -1,   415,    -1,    21,   344,    -1,    -1,   206,
     207,    -1,    48,   211,    -1,    -1,    36,   208,   223,   118,
      -1,    38,   213,    -1,   210,    -1,   209,   121,   210,    -1,
       1,    -1,   209,     1,   210,    -1,   209,   121,     1,    -1,
     209,     1,    -1,   395,    -1,   400,    -1,   212,    -1,   211,
     212,    -1,     1,    -1,   400,   413,   343,   118,    -1,   400,
     407,   122,   231,   102,   374,   219,   118,    -1,   214,    -1,
     213,   214,    -1,    -1,   398,   407,   122,   231,   215,   221,
     216,   118,    -1,     1,    -1,   415,    -1,   216,   118,   217,
      -1,   220,    -1,    51,   352,    -1,    -1,    51,   352,    95,
     218,   344,    -1,   415,    -1,   219,   118,   220,    -1,    75,
     344,    -1,   277,    -1,   263,    -1,    -1,    41,   222,   344,
      -1,    41,     1,    -1,   224,    -1,   223,   118,   224,    -1,
       1,    -1,   223,     1,   224,    -1,   223,   118,     1,    -1,
     223,     1,    -1,   400,   407,   413,   231,   263,    -1,    -1,
     400,   228,   413,   225,   231,   263,    -1,   400,   228,     1,
      -1,    -1,   400,   407,   413,   226,   259,    61,   258,   260,
      15,    -1,    -1,   400,   407,   413,   227,   259,    78,   258,
     260,    15,    -1,   400,   407,   413,    78,   258,    -1,   400,
     407,   413,    78,   100,    15,    -1,   400,   407,   413,    61,
     118,    54,    -1,   119,   229,   120,    -1,   119,     1,   120,
      -1,   230,    -1,   229,   118,   230,    -1,   229,     1,   230,
      -1,   229,   118,     1,    -1,   229,     1,    -1,   396,   122,
     358,    -1,   232,    -1,   231,   277,    -1,    -1,   233,   234,
      -1,   235,    -1,    47,   235,    -1,   357,    -1,    68,   357,
      -1,   358,   236,    -1,   292,    -1,   251,    -1,   255,    -1,
     257,    -1,   238,    -1,   408,   238,    -1,   119,   237,   120,
      -1,   123,   344,   124,    -1,   344,    -1,   237,   121,   344,
      -1,     1,    -1,   237,     1,   344,    -1,   237,   121,     1,
      -1,     9,   123,   240,   124,    26,   232,    -1,   367,    -1,
      16,   239,    26,   232,    -1,    34,    26,   232,    -1,    32,
     242,    15,    -1,    32,     1,    15,    -1,   416,    -1,   415,
      -1,   123,   241,   124,    -1,   241,    -1,   240,   121,   241,
      -1,   240,     1,   241,    -1,   240,     1,    -1,     1,    -1,
     251,    -1,   358,    -1,    -1,   244,   411,    -1,   243,    11,
     247,    26,   248,   411,   246,    -1,   415,    -1,   244,   118,
      -1,   245,    -1,   244,   118,   245,    -1,   244,     1,   245,
      -1,   244,   118,     1,    -1,   244,     1,    -1,   396,   122,
     232,   263,    -1,    -1,   327,   119,   242,   120,   411,    -1,
     400,   122,   358,    -1,   400,   122,   250,    -1,   403,    -1,
     250,    -1,   249,    -1,   248,   118,   249,    -1,   248,     1,
     249,    -1,     1,    -1,   248,     1,    -1,   332,   122,   119,
     242,   120,    -1,   251,    -1,   252,    -1,   254,    -1,   119,
     253,   120,    -1,   119,     1,   120,    -1,   400,    -1,   253,
     121,   400,    -1,   253,     1,   400,    -1,   253,   121,     1,
      -1,   253,     1,    -1,   344,   100,   344,    -1,   408,   344,
     100,   344,    -1,   125,   256,    -1,   126,   256,    -1,    96,
     256,    -1,   412,    48,   256,    -1,   400,    -1,   257,    -1,
     367,    -1,    29,   283,    -1,    18,   283,   286,    -1,   415,
      -1,   119,   358,   120,    -1,   119,     1,   120,    -1,   415,
      -1,    42,    -1,   261,    -1,   261,   262,    -1,     1,    -1,
     415,    -1,   261,    95,    -1,   261,   262,   118,    -1,   396,
     122,   232,   263,    -1,    29,   400,   283,    -1,    18,   400,
     283,   287,   286,    -1,    49,   400,   283,    -1,    50,   400,
     283,    -1,    73,    -1,    73,   344,    -1,    79,    -1,    80,
      -1,    42,    -1,   277,    -1,   415,    -1,   264,   374,    -1,
     264,     1,    -1,    72,    -1,    98,    -1,   102,    -1,   270,
     118,   272,    -1,   269,   118,   273,    -1,    -1,    -1,   269,
     118,   276,   267,   183,   193,   268,   299,   118,    -1,   270,
      -1,   271,    -1,    29,   400,   283,    -1,    18,   400,   283,
     287,   286,    -1,    63,   281,   283,   282,   286,    -1,    29,
     400,   127,   400,   283,    -1,    18,   400,   127,   400,   283,
     287,   286,    -1,    49,   400,   127,   400,   283,    -1,    50,
     400,   127,   400,   283,    -1,   276,    -1,   273,    -1,   276,
     274,   276,    -1,    54,   118,    -1,    51,   352,   118,    -1,
      -1,    51,   352,    95,   275,   344,   118,    -1,    51,   352,
     118,    75,   344,   118,    -1,    75,   344,   118,    51,   352,
     118,    -1,    75,   344,   118,    -1,    76,   118,    -1,    77,
     118,    -1,   415,    -1,   276,   277,   118,    -1,   276,   280,
     118,    -1,    46,   119,   278,   120,    -1,   279,    -1,   278,
     121,   279,    -1,   415,    -1,    48,    -1,   400,    -1,   400,
     413,   344,    -1,   400,   119,   344,   120,    -1,   400,   119,
     403,   121,   344,   120,    -1,    52,    -1,    60,    -1,   400,
      -1,   391,    -1,   400,    -1,   413,   400,    -1,   415,    -1,
     415,    -1,   119,   120,    -1,   119,   284,   120,    -1,   119,
     101,   120,    -1,   119,   284,   118,   101,   120,    -1,   119,
       1,   120,    -1,   285,    -1,   284,   118,   285,    -1,   284,
       1,   285,    -1,   284,   118,     1,    -1,   396,   122,   291,
      -1,   409,   396,   122,   291,    -1,   289,    38,   396,   290,
      -1,    48,   396,   290,    -1,    29,   400,   283,    -1,    18,
     400,   283,   287,   286,    -1,   305,    -1,   122,   357,    -1,
     416,    -1,   415,    -1,   288,   400,    -1,   413,    -1,    -1,
     415,    -1,   409,    -1,    -1,   122,   291,    -1,   293,    -1,
     292,    -1,   297,    -1,    36,    26,   344,    -1,   298,    -1,
     294,    -1,     9,   123,   295,   124,    26,   293,    -1,   408,
       9,   123,   296,   124,    26,   358,    -1,   296,    -1,   295,
     118,   296,    -1,   295,     1,   296,    -1,   295,   118,     1,
      -1,   400,   100,   400,   122,   358,    -1,     9,    26,   298,
      -1,   358,    -1,   367,    -1,    10,   405,   300,   406,    15,
      -1,   301,    -1,   300,   118,   301,    -1,    -1,   306,    -1,
      -1,    -1,    38,   302,   214,   303,   301,    -1,   305,    -1,
     306,    -1,    -1,    -1,   307,   308,    -1,   321,    -1,   321,
     309,    -1,   309,    -1,   299,    -1,   335,    -1,    -1,   335,
     310,   336,   344,    -1,    87,    -1,    87,   344,    -1,    84,
      -1,    84,   119,    31,   120,    -1,    84,   119,   403,   120,
      -1,   337,    -1,    40,   322,    13,   405,   304,   406,    -1,
     324,    -1,    -1,   324,     7,   311,   405,   304,   406,    -1,
      -1,    -1,    11,   344,    26,   312,   328,   313,   326,    15,
      -1,    -1,    -1,    -1,    33,   314,   405,   300,    37,   315,
     344,   316,   406,    -1,    -1,    -1,    39,   317,   405,   344,
     318,    13,   304,   406,    -1,    -1,    17,   360,   336,   344,
     334,   344,   319,    13,   405,   304,   406,    -1,    -1,    17,
     360,    21,   344,   320,    13,   405,   304,   406,    -1,    19,
     394,    -1,   394,   122,    -1,   323,    -1,   322,   121,   323,
      -1,     1,    -1,   322,     1,   323,    -1,   322,   121,     1,
      -1,   344,    -1,   344,   122,   400,    -1,    -1,    20,   344,
      35,   325,   405,   304,   406,    -1,    -1,   327,   405,   300,
     406,    -1,     7,    -1,    64,    -1,    -1,   329,   411,    -1,
     330,    -1,   329,   118,   330,    -1,     1,    -1,   329,     1,
     330,    -1,   329,   118,     1,    -1,    -1,   332,   122,   331,
     405,   304,   406,    -1,   333,    -1,   332,   121,   333,    -1,
     332,   121,     1,    -1,   332,     1,   333,    -1,   332,     1,
      -1,   343,    -1,   343,   100,   343,    -1,   343,     1,   343,
      -1,   343,   100,     1,    -1,    30,    -1,    14,    -1,     1,
      -1,   360,    -1,   125,   360,    -1,    98,    -1,   413,    -1,
     390,   362,    -1,    93,    -1,    93,   119,   365,   120,    -1,
      83,   119,   344,   120,    -1,    83,   119,   344,   121,   364,
     120,    -1,    83,   119,   344,   121,   400,   362,   120,    -1,
      45,   338,   119,   354,   120,    -1,    45,   338,   119,   354,
     122,   339,   120,    -1,    45,   338,   119,   354,   122,   339,
     122,   339,   120,    -1,    45,   338,   119,   354,   122,   339,
     122,   339,   122,   342,   120,    -1,    -1,    95,    -1,   415,
      -1,   340,    -1,   341,    -1,   340,   121,   341,    -1,   353,
     119,   344,   120,    -1,   353,    -1,   342,   121,   353,    -1,
     344,    -1,   345,    -1,   345,   385,   345,    -1,   347,    -1,
     383,   347,    -1,   345,   386,   347,    -1,   345,   392,   347,
      -1,    -1,   345,   388,   346,   347,    -1,   349,    -1,   347,
     387,   349,    -1,   347,   393,   349,    -1,    -1,   347,   389,
     348,   349,    -1,   350,    -1,   349,   403,   350,    -1,   350,
      66,   350,    -1,   350,   107,   350,    -1,   349,    59,   358,
      -1,   349,    44,   358,    -1,   384,   350,    -1,   125,   350,
      -1,   353,    -1,   351,    -1,    24,    -1,   380,    -1,   360,
      -1,    88,    -1,    89,    -1,    91,    -1,   415,    -1,   353,
      -1,   354,    -1,   355,    -1,   354,   355,    -1,    90,    -1,
      96,    -1,   126,   356,    -1,    97,    -1,   121,    -1,   127,
      -1,   122,    -1,   118,    -1,   119,    -1,   120,    -1,   123,
      -1,   124,    -1,   128,    -1,   129,    -1,   130,    -1,   131,
      -1,   132,    -1,   133,    -1,   134,    -1,   125,    -1,   126,
      -1,   358,    -1,   359,    -1,   403,    -1,   403,   127,   403,
      -1,    94,   362,    -1,   361,    -1,   402,    -1,   367,    -1,
     119,   344,   120,    -1,   360,   127,   400,    -1,   360,   412,
      -1,   360,   123,   378,   124,    -1,   360,   123,   368,   124,
      -1,   361,   119,   120,    -1,   361,   119,   363,   364,   120,
      -1,    57,   400,    -1,    85,   119,   365,   120,    -1,    82,
     119,   363,   344,   120,    -1,    81,   119,   360,   120,    -1,
      86,   119,   360,   120,    -1,    86,   119,   360,   121,   364,
     120,    -1,    86,   119,   360,   121,   400,   362,   120,    -1,
     415,    -1,   119,   363,   364,   120,    -1,   119,   363,   360,
     120,    -1,    -1,   344,    -1,   364,   121,   344,    -1,     1,
      -1,   364,   121,     1,    -1,   366,    -1,   365,   121,   366,
      -1,   365,     1,   366,    -1,   365,   121,     1,    -1,   344,
      -1,   344,   122,   344,    -1,   344,   122,   344,   122,   344,
      -1,    16,    -1,   369,   411,    -1,   369,   118,   371,    -1,
     369,   411,   373,    -1,   371,    -1,   373,    -1,   370,    -1,
     369,   118,   370,    -1,   378,   122,   374,    -1,   374,    -1,
      11,   400,   122,   344,    26,   372,    -1,    11,   344,    26,
     372,    -1,   123,   368,   124,   411,    -1,    64,   374,   411,
      -1,   344,    -1,   119,   120,    -1,   119,   375,   120,    -1,
     123,   368,   124,    -1,   123,     1,   124,    -1,   377,    -1,
     375,   376,   377,    -1,   375,     1,   377,    -1,   118,    -1,
     121,    -1,   379,   122,   374,    -1,   374,    -1,   379,    -1,
     378,   121,   379,    -1,     1,    -1,   378,     1,   379,    -1,
     378,   121,     1,    -1,   400,    -1,   344,    -1,   344,   100,
     344,    -1,   123,   124,    -1,   123,   381,   124,    -1,   382,
      -1,   381,   121,   382,    -1,   381,     1,   382,    -1,   381,
     121,     1,    -1,   344,    -1,   344,   100,   344,    -1,   128,
      -1,   129,    -1,   108,    -1,   109,    -1,    25,    -1,   104,
      -1,   106,    -1,   105,    -1,   133,    -1,   132,    -1,   134,
      -1,    21,    -1,   128,    -1,   108,    -1,   129,    -1,   109,
      -1,    74,    -1,   103,    -1,   130,    -1,   131,    -1,    12,
      -1,    23,    -1,    69,    -1,    70,    -1,    27,    -1,    27,
       7,    -1,    65,    -1,   135,    -1,     8,    -1,     8,    35,
      -1,    43,    -1,   136,    -1,    92,    -1,     8,    -1,    27,
      -1,    25,    -1,    74,    -1,    69,    -1,    70,    -1,   128,
      -1,   108,    -1,   129,    -1,   109,    -1,   130,    -1,   131,
      -1,    12,    -1,    23,    -1,   107,    -1,    21,    -1,   132,
      -1,   413,    -1,   134,    -1,   104,    -1,   105,    -1,   106,
      -1,     8,    -1,   136,    -1,    27,    -1,   135,    -1,   103,
      -1,   393,    -1,   392,    -1,   110,    -1,   111,    -1,   112,
      -1,   113,    -1,   114,    -1,   115,    -1,   116,    -1,   117,
      -1,   395,    -1,   403,    -1,    88,    -1,   397,    -1,   400,
      -1,   397,   121,   400,    -1,   397,     1,   400,    -1,   397,
     121,     1,    -1,   397,     1,    -1,   400,    -1,   398,   121,
     400,    -1,   400,    -1,   400,   127,   400,    -1,   401,    -1,
     403,    -1,    92,    -1,    93,    -1,    94,    -1,    87,    -1,
      84,    -1,    81,    -1,    82,    -1,    86,    -1,    83,    -1,
      85,    -1,    41,    -1,    42,    -1,    43,    -1,    44,    -1,
      45,    -1,    75,    -1,    46,    -1,    47,    -1,    76,    -1,
      77,    -1,    78,    -1,    49,    -1,    50,    -1,    51,    -1,
      53,    -1,    55,    -1,    56,    -1,    57,    -1,    58,    -1,
      59,    -1,    61,    -1,    62,    -1,    63,    -1,    65,    -1,
      64,    -1,    66,    -1,    67,    -1,    68,    -1,    69,    -1,
      70,    -1,    71,    -1,     6,    -1,    72,    -1,    74,    -1,
     403,    -1,    95,    -1,   404,    -1,    52,    -1,    54,    -1,
      60,    -1,    79,    -1,    80,    -1,    73,    -1,    97,    -1,
      -1,    -1,    -1,    28,    -1,    95,    -1,    95,    -1,    -1,
     118,    -1,   126,    -1,    96,    -1,   125,    -1,   133,    -1,
     102,    -1,   127,    -1,     1,    -1,    -1,     1,    -1
d854 80
a933 78
       0,   212,   212,   213,   225,   227,   224,   230,   236,   238,
     235,   241,   242,   244,   243,   252,   254,   251,   260,   259,
     266,   268,   265,   275,   274,   282,   281,   287,   289,   287,
     294,   295,   300,   299,   302,   304,   303,   307,   312,   311,
     317,   321,   323,   324,   325,   330,   329,   337,   336,   344,
     345,   347,   352,   357,   358,   363,   364,   368,   369,   371,
     373,   375,   380,   385,   387,   388,   393,   398,   399,   401,
     403,   405,   410,   412,   414,   419,   419,   423,   425,   429,
     430,   431,   436,   441,   442,   446,   447,   449,   454,   455,
     457,   459,   461,   466,   471,   472,   478,   479,   484,   485,
     490,   491,   496,   496,   499,   501,   507,   508,   513,   514,
     515,   521,   522,   527,   528,   528,   531,   536,   541,   542,
     543,   548,   553,   554,   559,   559,   575,   578,   577,   581,
     588,   590,   592,   594,   596,   598,   602,   603,   608,   609,
     610,   614,   616,   625,   626,   631,   630,   655,   660,   661,
     666,   667,   670,   669,   676,   677,   682,   684,   689,   691,
     690,   698,   703,   704,   706,   707,   709,   711,   715,   726,
     725,   737,   740,   739,   744,   743,   751,   758,   764,   773,
     775,   780,   781,   783,   785,   787,   791,   796,   797,   803,
     803,   819,   820,   825,   826,   828,   830,   831,   832,   833,
     835,   836,   841,   843,   851,   854,   856,   858,   860,   865,
     867,   868,   870,   872,   874,   876,   880,   881,   886,   887,
     889,   891,   893,   898,   900,   906,   907,   909,   914,   915,
     919,   920,   922,   924,   926,   930,   936,   937,   942,   944,
     946,   948,   953,   954,   956,   958,   960,   964,   969,   974,
     975,   979,   981,   986,   988,   990,   992,   994,   998,  1000,
    1009,  1011,  1013,  1015,  1020,  1022,  1028,  1032,  1034,  1039,
    1040,  1042,  1047,  1048,  1052,  1053,  1055,  1060,  1061,  1063,
    1068,  1070,  1072,  1074,  1076,  1078,  1080,  1082,  1084,  1086,
    1088,  1092,  1093,  1095,  1100,  1101,  1103,  1110,  1121,  1124,
    1126,  1123,  1135,  1136,  1140,  1142,  1144,  1154,  1156,  1158,
    1160,  1165,  1166,  1170,  1175,  1177,  1180,  1179,  1183,  1185,
    1187,  1189,  1191,  1196,  1197,  1199,  1204,  1209,  1210,  1215,
    1216,  1218,  1220,  1222,  1224,  1229,  1230,  1234,  1235,  1239,
    1240,  1242,  1247,  1248,  1250,  1252,  1254,  1256,  1261,  1262,
    1264,  1266,  1270,  1272,  1274,  1276,  1278,  1280,  1285,  1287,
    1289,  1293,  1294,  1299,  1301,  1305,  1306,  1311,  1312,  1317,
    1318,  1319,  1323,  1328,  1329,  1333,  1335,  1344,  1345,  1347,
    1349,  1353,  1358,  1363,  1364,  1370,  1375,  1376,  1380,  1382,
    1384,  1386,  1383,  1391,  1393,  1398,  1402,  1402,  1408,  1409,
    1410,  1417,  1418,  1421,  1420,  1424,  1426,  1428,  1430,  1432,
    1434,  1435,  1437,  1440,  1439,  1448,  1450,  1447,  1469,  1471,
    1473,  1468,  1477,  1479,  1476,  1483,  1482,  1487,  1486,  1490,
    1495,  1500,  1501,  1503,  1505,  1507,  1512,  1514,  1520,  1519,
    1530,  1537,  1542,  1544,  1549,  1550,  1555,  1556,  1558,  1560,
    1562,  1568,  1567,  1574,  1575,  1577,  1579,  1581,  1585,  1587,
    1589,  1591,  1596,  1598,  1600,  1605,  1606,  1611,  1612,  1617,
    1619,  1621,  1623,  1625,  1627,  1629,  1631,  1633,  1635,  1641,
    1642,  1647,  1648,  1652,  1653,  1658,  1663,  1665,  1672,  1685,
    1687,  1692,  1693,  1695,  1697,  1700,  1699,  1706,  1707,  1709,
    1712,  1711,  1718,  1719,  1721,  1723,  1725,  1727,  1732,  1734,
    1736,  1737,  1738,  1740,  1741,  1746,  1747,  1748,  1752,  1753,
    1757,  1762,  1764,  1769,  1770,  1771,  1776,  1777,  1777,  1777,
    1777,  1777,  1777,  1777,  1777,  1778,  1778,  1778,  1778,  1778,
    1778,  1778,  1778,  1778,  1782,  1794,  1808,  1809,  1814,  1816,
    1820,  1821,  1823,  1825,  1827,  1829,  1831,  1833,  1835,  1837,
    1839,  1841,  1843,  1845,  1847,  1849,  1854,  1855,  1857,  1866,
    1870,  1872,  1874,  1876,  1881,  1882,  1884,  1886,  1892,  1894,
    1896,  1901,  1906,  1907,  1909,  1911,  1912,  1916,  1917,  1922,
    1924,  1929,  1931,  1936,  1941,  1946,  1948,  1950,  1952,  1954,
    1959,  1960,  1962,  1967,  1968,  1973,  1975,  1980,  1981,  1983,
    1985,  1987,  1992,  1994,  1996,  2001,  2003,  2008,  2009,  2011,
    2013,  2018,  2020,  2027,  2028,  2032,  2033,  2034,  2038,  2039,
    2040,  2041,  2042,  2043,  2044,  2048,  2049,  2050,  2051,  2052,
    2053,  2057,  2058,  2059,  2060,  2061,  2062,  2066,  2067,  2068,
    2069,  2073,  2074,  2075,  2076,  2080,  2083,  2084,  2085,  2086,
    2087,  2088,  2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,
    2102,  2103,  2104,  2105,  2106,  2107,  2108,  2109,  2110,  2111,
    2112,  2113,  2114,  2115,  2116,  2120,  2121,  2122,  2123,  2127,
    2128,  2129,  2130,  2136,  2137,  2141,  2146,  2151,  2153,  2155,
    2161,  2163,  2167,  2169,  2174,  2175,  2180,  2185,  2186,  2187,
    2188,  2189,  2190,  2191,  2192,  2193,  2194,  2195,  2196,  2197,
    2198,  2199,  2200,  2201,  2202,  2203,  2204,  2205,  2206,  2207,
    2208,  2209,  2210,  2211,  2212,  2213,  2214,  2215,  2216,  2217,
    2218,  2219,  2220,  2221,  2222,  2223,  2224,  2225,  2226,  2227,
    2228,  2229,  2233,  2238,  2239,  2240,  2241,  2242,  2244,  2245,
    2246,  2250,  2258,  2263,  2268,  2272,  2277,  2282,  2288,  2289,
    2294,  2295,  2296,  2300,  2301,  2305,  2306,  2312,  2316
d955 32
a986 31
  "p_c_language", "p_class", "p_override", "p_reintroduce", "p_Addr",
  "p_Assigned", "p_Dispose", "p_Exit", "p_FormatString", "p_New",
  "p_Return", "LEX_INTCONST", "LEX_INTCONST_BASE", "LEX_STRCONST",
  "LEX_REALCONST", "LEX_BUILTIN_PROCEDURE", "LEX_BUILTIN_PROCEDURE_WRITE",
  "LEX_BUILTIN_FUNCTION", "LEX_ID", "LEX_CARET_WHITE", "LEX_CARET_LETTER",
  "LEX_ASSIGN", "LEX_RENAME", "LEX_RANGE", "LEX_ELLIPSIS",
  "LEX_CONST_EQUAL", "LEX_SYMDIFF", "LEX_NE", "LEX_GE", "LEX_LE",
  "LEX_POWER", "LEX_BPPLUS", "LEX_BPMINUS", "LEX_CEIL_PLUS",
  "LEX_CEIL_MINUS", "LEX_FLOOR_PLUS", "LEX_FLOOR_MINUS", "LEX_CEIL_MULT",
  "LEX_CEIL_DIV", "LEX_FLOOR_MULT", "LEX_FLOOR_DIV", "';'", "'('", "')'",
  "','", "':'", "'['", "']'", "'@@'", "'^'", "'.'", "'+'", "'-'", "'*'",
  "'/'", "'<'", "'='", "'>'", "'|'", "'&'", "$accept", "program_component",
  "program_component_1", "@@1", "@@2", "module_declaration", "@@3", "@@4",
  "@@5", "@@6", "@@7", "@@8", "interface_module", "@@9", "@@10",
  "module_interface", "@@11", "implementatation_module", "@@12",
  "module_block", "@@13", "@@14", "optional_unit_implementation",
  "optional_unit_init_and_final_part", "@@15", "@@16", "unit_initialization",
  "@@17", "rest_of_unit_constructor", "optional_init_and_final_part",
  "module_constructor", "@@18", "module_destructor", "@@19",
  "optional_program_heading", "optional_module_parameters",
  "optional_par_id_list", "optional_module_attributes", "export_part_list",
  "export_part", "export_list_or_all", "export_all", "export_list",
  "export_list_item", "optional_import_part", "@@20",
  "optional_import_part1", "import_specification_list",
  "import_specification", "optional_qualified",
  "optional_import_qualifier", "import_clause_list", "import_clause",
  "optional_rename", "declarations_and_uses", "declaration_or_uses",
  "any_declaration_part", "any_decl", "@@21", "interface_decl_part",
  "interface_decl", "implementation_decls", "implementation_decl", "@@22",
  "uses_part", "uses_list", "uses_specification", "optional_unit_filename",
  "simple_decl", "@@23", "simple_decl_1", "@@24", "label_list", "new_label",
d993 22
a1014 21
  "formal_schema_discriminants", "discriminant_specification_list",
  "discriminant_specification", "type_denoter_with_attributes",
  "type_denoter", "@@31", "type_denoter_1", "type_denoter_0",
  "actual_schema_discriminants", "discriminant_expression_list",
  "unpacked_structured_type", "direct_access_index_type",
  "array_index_list", "ordinal_index_type", "record_field_list",
  "optional_fixed_part", "fixed_part", "record_section", "rest_of_variant",
  "variant_selector", "variant_list", "variant",
  "new_ordinal_type_non_iso", "new_ordinal_type", "enumerated_type",
  "enum_list", "subrange_type", "new_pointer_type", "pointer_domain_type",
  "new_procedural_type", "object_parent", "optional_abstract",
  "object_field_list", "object_field_list_1", "object_section",
  "optional_value_specification", "var_init", "routine_interface_decl",
  "routine_declaration", "@@32", "@@33", "routine_or_method_heading",
  "routine_heading", "method_heading",
  "optional_routine_interface_directive_list", "remote_directive_list",
  "remote_directive", "@@34", "optional_routine_directive_list",
  "attributes", "attribute_list", "attrib", "bp_directive",
  "operator_identifier", "operator_result_def",
  "optional_formal_parameter_list", "formal_parameter_list",
  "formal_parameter", "resulttype", "optional_result_def",
d1020 6
a1025 6
  "statement_sequence", "optional_statement_vd", "@@35", "@@36",
  "optional_statement", "empty_lte", "statement", "@@37", "statement_1",
  "unlabelled_statement", "@@38", "@@39", "@@40", "@@41", "@@42", "@@43", "@@44",
  "@@45", "@@46", "@@47", "@@48", "set_label", "with_list", "with_variable",
  "if_then", "@@49", "optional_case_completer", "otherwise",
  "optional_case_element_list", "case_element_list", "case_element", "@@50",
d1030 1
a1030 1
  "@@51", "term", "@@52", "factor", "primary", "unsigned_number",
d1057 80
a1136 78
       0,   137,   138,   138,   140,   141,   139,   139,   143,   144,
     142,   142,   142,   145,   142,   146,   147,   142,   148,   142,
     150,   151,   149,   153,   152,   155,   154,   157,   158,   156,
     159,   159,   161,   160,   160,   162,   160,   160,   164,   163,
     165,   166,   166,   166,   166,   168,   167,   170,   169,   171,
     171,   171,   172,   173,   173,   174,   174,   175,   175,   175,
     175,   175,   176,   177,   177,   177,   178,   179,   179,   179,
     179,   179,   180,   180,   180,   182,   181,   183,   183,   184,
     184,   184,   185,   186,   186,   187,   187,   187,   188,   188,
     188,   188,   188,   189,   190,   190,   191,   191,   192,   192,
     193,   193,   195,   194,   194,   194,   196,   196,   197,   197,
     197,   198,   198,   199,   200,   199,   199,   201,   202,   202,
     202,   203,   204,   204,   206,   205,   207,   208,   207,   207,
     209,   209,   209,   209,   209,   209,   210,   210,   211,   211,
     211,   212,   212,   213,   213,   215,   214,   214,   216,   216,
     217,   217,   218,   217,   219,   219,   220,   220,   221,   222,
     221,   221,   223,   223,   223,   223,   223,   223,   224,   225,
     224,   224,   226,   224,   227,   224,   224,   224,   224,   228,
     228,   229,   229,   229,   229,   229,   230,   231,   231,   233,
     232,   234,   234,   235,   235,   235,   235,   235,   235,   235,
     235,   235,   236,   236,   237,   237,   237,   237,   237,   238,
     238,   238,   238,   238,   238,   238,   239,   239,   240,   240,
     240,   240,   240,   241,   241,   242,   242,   242,   243,   243,
     244,   244,   244,   244,   244,   245,   246,   246,   247,   247,
     247,   247,   248,   248,   248,   248,   248,   249,   250,   251,
     251,   252,   252,   253,   253,   253,   253,   253,   254,   254,
     255,   255,   255,   255,   256,   256,   256,   257,   257,   258,
     258,   258,   259,   259,   260,   260,   260,   261,   261,   261,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   263,   263,   263,   264,   264,   264,   265,   266,   267,
     268,   266,   269,   269,   270,   270,   270,   271,   271,   271,
     271,   272,   272,   273,   274,   274,   275,   274,   274,   274,
     274,   274,   274,   276,   276,   276,   277,   278,   278,   279,
     279,   279,   279,   279,   279,   280,   280,   281,   281,   282,
     282,   282,   283,   283,   283,   283,   283,   283,   284,   284,
     284,   284,   285,   285,   285,   285,   285,   285,   286,   286,
     286,   287,   287,   288,   288,   289,   289,   290,   290,   291,
     291,   291,   292,   293,   293,   294,   294,   295,   295,   295,
     295,   296,   297,   298,   298,   299,   300,   300,   301,   301,
     302,   303,   301,   304,   304,   305,   307,   306,   308,   308,
     308,   309,   309,   310,   309,   309,   309,   309,   309,   309,
     309,   309,   309,   311,   309,   312,   313,   309,   314,   315,
     316,   309,   317,   318,   309,   319,   309,   320,   309,   309,
     321,   322,   322,   322,   322,   322,   323,   323,   325,   324,
     326,   326,   327,   327,   328,   328,   329,   329,   329,   329,
     329,   331,   330,   332,   332,   332,   332,   332,   333,   333,
     333,   333,   334,   334,   334,   335,   335,   336,   336,   337,
     337,   337,   337,   337,   337,   337,   337,   337,   337,   338,
     338,   339,   339,   340,   340,   341,   342,   342,   343,   344,
     344,   345,   345,   345,   345,   346,   345,   347,   347,   347,
     348,   347,   349,   349,   349,   349,   349,   349,   350,   350,
     350,   350,   350,   350,   350,   351,   351,   351,   352,   352,
     353,   354,   354,   355,   355,   355,   356,   356,   356,   356,
     356,   356,   356,   356,   356,   356,   356,   356,   356,   356,
     356,   356,   356,   356,   357,   358,   359,   359,   360,   360,
     361,   361,   361,   361,   361,   361,   361,   361,   361,   361,
     361,   361,   361,   361,   361,   361,   362,   362,   362,   363,
     364,   364,   364,   364,   365,   365,   365,   365,   366,   366,
     366,   367,   368,   368,   368,   368,   368,   369,   369,   370,
     370,   371,   371,   372,   373,   374,   374,   374,   374,   374,
     375,   375,   375,   376,   376,   377,   377,   378,   378,   378,
     378,   378,   379,   379,   379,   380,   380,   381,   381,   381,
     381,   382,   382,   383,   383,   384,   384,   384,   385,   385,
     385,   385,   385,   385,   385,   386,   386,   386,   386,   386,
     386,   387,   387,   387,   387,   387,   387,   388,   388,   388,
     388,   389,   389,   389,   389,   390,   390,   390,   390,   390,
     390,   390,   391,   391,   391,   391,   391,   391,   391,   391,
     391,   391,   391,   391,   391,   391,   391,   391,   391,   391,
     391,   391,   391,   391,   391,   392,   392,   392,   392,   393,
     393,   393,   393,   394,   394,   395,   396,   397,   397,   397,
     397,   397,   398,   398,   399,   399,   400,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   402,   403,   403,   403,   403,   403,   403,   403,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   411,
     412,   412,   412,   413,   413,   414,   414,   415,   416
d1159 38
a1196 34
       6,     3,     0,     9,     0,     9,     5,     6,     6,     3,
       3,     1,     3,     3,     3,     2,     3,     1,     2,     0,
       2,     1,     2,     1,     2,     2,     1,     1,     1,     1,
       1,     2,     3,     3,     1,     3,     1,     3,     3,     6,
       1,     4,     3,     3,     3,     1,     1,     3,     1,     3,
       3,     2,     1,     1,     1,     0,     2,     7,     1,     2,
       1,     3,     3,     3,     2,     4,     0,     5,     3,     3,
       1,     1,     1,     3,     3,     1,     2,     5,     1,     1,
       1,     3,     3,     1,     3,     3,     3,     2,     3,     4,
       2,     2,     2,     3,     1,     1,     1,     2,     3,     1,
       3,     3,     1,     1,     1,     2,     1,     1,     2,     3,
       4,     3,     5,     3,     3,     1,     2,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     3,     3,     0,
       0,     9,     1,     1,     3,     5,     5,     5,     7,     5,
       5,     1,     1,     3,     2,     3,     0,     6,     6,     6,
       3,     2,     2,     1,     3,     3,     4,     1,     3,     1,
       1,     1,     3,     4,     6,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     3,     3,     5,     3,     1,     3,
       3,     3,     3,     4,     4,     3,     3,     5,     1,     2,
       1,     1,     2,     1,     0,     1,     1,     0,     2,     1,
       1,     1,     3,     1,     1,     6,     7,     1,     3,     3,
       3,     5,     3,     1,     1,     5,     1,     3,     0,     1,
       0,     0,     5,     1,     1,     0,     0,     2,     1,     2,
       1,     1,     1,     0,     4,     1,     2,     1,     4,     4,
       1,     6,     1,     0,     6,     0,     0,     8,     0,     0,
       0,     9,     0,     0,     8,     0,    11,     0,     9,     2,
       2,     1,     3,     1,     3,     3,     1,     3,     0,     7,
       0,     4,     1,     1,     0,     2,     1,     3,     1,     3,
       3,     0,     6,     1,     3,     3,     3,     2,     1,     3,
       3,     3,     1,     1,     1,     1,     2,     1,     1,     2,
       1,     4,     4,     6,     7,     5,     7,     9,    11,     0,
       1,     1,     1,     1,     3,     4,     1,     3,     1,     1,
       3,     1,     2,     3,     3,     0,     4,     1,     3,     3,
       0,     4,     1,     3,     3,     3,     3,     3,     2,     2,
d1198 9
a1206 1
       1,     1,     2,     1,     1,     2,     1,     1,     1,     1,
d1208 2
a1209 12
       1,     1,     1,     1,     1,     1,     1,     3,     2,     1,
       1,     1,     3,     3,     2,     4,     4,     3,     5,     2,
       4,     5,     4,     4,     6,     7,     1,     4,     4,     0,
       1,     3,     1,     3,     1,     3,     3,     3,     1,     3,
       5,     1,     2,     3,     3,     1,     1,     1,     3,     3,
       1,     6,     4,     4,     3,     1,     2,     3,     3,     3,
       1,     3,     3,     1,     1,     3,     1,     1,     3,     1,
       3,     3,     1,     1,     3,     2,     3,     1,     3,     3,
       3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
d1213 2
a1214 2
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     2,     1,     3,     1,     3,     1,     1,     1,     1,
d1220 2
a1221 2
       1,     1,     0,     0,     0,     1,     1,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1
a1273 1
       0,     0,     0,     1,     2,     0,     0,     0,     0,     0,
d1276 1
a1281 2
       0,     0,     0,     0,     0,     1,     2,     0,     0,     0,
       0,     0,     0,     0,     1,     2,     0,     1,     2,     0,
d1284 2
a1285 1
       0,     0,     0,     0,     0,     1,     0,     2,     2,     0,
a1286 1
       0,     0,     2,     1,     0,     0,     0,     0,     0,     0,
d1288 1
d1290 1
d1304 3
a1306 1
       0,     0,     0,     0,     0,     0,     0,     0,     0
d1389 3
a1391 1
       0,     0,     0,     0,     0,     0,     0,     0,     0
d1399 133
a1531 130
      49,     0,     0,   767,     0,     3,     7,    11,    12,   777,
       0,   777,   749,   718,   719,   720,   721,   722,   724,   725,
     729,   730,   731,   755,   732,   756,   733,   734,   735,   736,
     737,   757,   738,   739,   740,   742,   741,   743,   744,   745,
     746,   747,   748,   750,   760,   751,   723,   726,   727,   728,
     758,   759,   713,   714,   716,   712,   717,   715,   711,   708,
     709,   710,   753,   761,   777,   706,   707,   754,     0,     1,
       0,     0,     4,     0,    55,   777,     0,     0,    53,     0,
     777,    14,     0,   777,    75,    56,     0,    20,    18,     0,
       0,     0,   697,    51,    50,     0,     0,   330,     0,   327,
     331,   329,    96,    77,    25,   777,     0,    27,   777,    54,
     701,     0,     8,   326,   777,   774,     0,   773,     0,   102,
       0,    76,    27,    21,    23,     0,     0,    77,    52,   699,
     700,   698,    75,   328,   581,   512,   627,     0,     0,     0,
       0,     0,   515,   516,   523,   517,   777,   524,   625,   626,
       0,     0,     0,     0,   623,   624,     0,   489,   491,   497,
     502,   511,   510,   520,   521,   514,   549,   551,   513,     0,
       0,   550,   752,   332,   752,     0,     0,     0,     0,     0,
       0,     0,     0,    97,    99,   124,    98,   105,     0,   302,
     303,     0,    79,   777,     0,     0,     0,    16,   776,   775,
      19,   111,   106,   559,     0,   569,     0,     0,   569,   548,
     566,     0,   615,   621,     0,   617,   509,   526,   530,   531,
     532,   527,   529,   533,   534,   542,   543,   528,   535,   536,
     537,   538,   539,   540,   541,   525,   333,   634,   647,   649,
     639,   640,   628,   630,   629,   636,   638,   685,   686,   687,
     688,   635,   637,   632,   631,   633,   650,     0,     0,   495,
       0,   651,   643,   644,   653,   645,   646,   689,   690,   691,
     692,   641,   642,   654,     0,   500,     0,     0,     0,     0,
       0,     0,   522,   771,     0,   772,   770,     0,   554,   569,
     492,   508,     0,     0,   118,   777,   777,   132,   695,     0,
     130,   136,   137,   777,     0,     0,   678,   668,   671,   669,
     680,   682,   675,   676,   677,   670,   663,   665,   662,   664,
     666,   667,   672,   674,   681,   679,   777,   338,   684,   683,
     337,   673,   762,     0,   103,     0,   777,     0,    78,    84,
     777,    83,    26,     0,    59,     0,    57,     0,    27,   114,
     124,     0,     0,   578,     0,   574,     0,     0,   552,     0,
       0,     0,   616,   648,   490,   493,     0,   494,   652,   498,
       0,   499,   507,   545,   546,   506,   503,   504,   505,   609,
       0,   735,   742,   713,   714,   717,   715,   777,     0,     0,
     595,     0,   768,   587,   585,   586,   590,     0,   607,   612,
     752,   553,   557,     0,     0,     0,   117,     0,     0,   121,
     122,     0,     0,   364,   342,   135,   104,     0,     0,   304,
       0,     0,   777,   396,     6,   127,     0,     0,   125,   298,
     299,   323,    81,    80,     0,     0,   777,    85,    22,     0,
       0,     0,     0,    41,   112,   124,   113,   116,     0,     0,
      30,   107,   108,   109,   110,     0,   562,     0,     0,     0,
     560,     0,   563,     0,   572,   570,   514,     0,   622,   619,
     620,   618,   496,   501,     0,     0,     0,   595,   768,   596,
     595,   606,     0,   600,     0,   609,   595,     0,     0,     0,
     556,     0,   582,     0,     0,     0,   555,     0,   334,   120,
     119,   123,     0,     0,     0,     0,   766,     0,   343,     0,
     348,     0,     0,   366,   365,   777,     0,     0,   363,   361,
     133,   134,   131,   777,   777,   777,     0,   339,     0,   341,
     390,   763,   386,   389,     0,     0,   147,     0,   143,   764,
     702,   140,   126,   138,   764,   777,   335,     0,   336,     0,
       0,     0,    77,   777,     0,     0,     0,    90,     0,    88,
     777,    82,    60,    61,    58,   106,    66,     0,    62,    64,
      17,     0,     0,    43,    44,   115,   777,   777,    77,     0,
     777,   561,   579,   576,   577,   575,     0,   777,   568,   567,
       0,   547,     0,     0,   769,   594,     0,   603,   597,   604,
       0,     0,   599,     0,   598,   614,   588,   583,     0,   584,
     613,   610,   611,   608,   589,   558,   347,   777,   777,   367,
     345,   777,     0,   344,     0,     0,     0,   364,   778,     0,
     305,   358,   360,   362,   307,   309,   310,   306,   340,     0,
     396,     0,   656,     0,     0,     0,     0,   658,   657,   418,
     422,     0,   479,   660,   661,   659,     0,   407,   405,   655,
     470,     0,   401,   397,   400,   398,   412,   402,   410,   465,
     777,     0,   693,   752,   164,     0,   162,   764,   144,     0,
       0,   139,     0,     0,     0,   519,   518,   314,     0,   321,
     322,   100,   313,   324,   325,     0,     0,    86,     0,     0,
      93,    94,   124,    69,     0,    67,   777,   704,     0,     0,
       0,     0,    29,     0,    42,    96,     0,   297,   312,   311,
       0,   564,     0,   573,   571,     0,   592,     0,   602,   601,
     605,   614,   364,   356,     0,   355,   350,   351,     0,   349,
     367,     0,   765,     0,   352,   370,   369,   374,   371,   373,
     383,   384,     0,     0,     0,   359,   544,   391,   387,   385,
       0,     0,   429,   694,     0,   762,   762,   433,     0,   431,
     436,   480,     0,     0,     0,   406,     0,   466,   399,   413,
       0,   469,   430,   167,     0,     0,     0,     0,   703,   189,
     189,     0,   488,   316,   315,   320,   102,    87,    91,    92,
      89,    95,    24,     0,    63,     0,     0,    72,     0,   777,
       0,    45,    47,   102,    10,   580,   565,     0,     0,     0,
     368,   346,   354,     0,     0,     0,     0,   353,   308,   396,
     415,     0,   467,     0,   468,   438,   396,     0,     0,   762,
       0,     0,     0,     0,     0,     0,     0,   762,     0,   165,
     166,   163,     0,     0,   181,     0,   171,   169,   189,   145,
     187,     0,     0,   141,     0,     0,   777,   101,     0,    70,
      71,    68,    73,   705,    74,    65,   396,   396,    32,    38,
      31,    34,    37,   768,   591,   357,   382,     0,   377,     0,
     372,     0,   392,     0,   427,     0,   762,     0,   423,   434,
     396,   435,   432,   437,     0,   472,     0,   408,   409,   471,
     396,   404,   180,   185,     0,   179,     0,   189,     0,   777,
     777,   777,   777,   777,   188,     0,   581,   777,   777,     0,
       0,     0,     0,   524,     0,   772,   770,   190,   191,   200,
     197,   249,   250,   198,   199,   196,     0,   193,   544,   551,
     752,     0,     0,   215,     0,     0,     0,     0,     0,     0,
     393,   394,     0,   396,   396,    35,   593,     0,     0,     0,
       0,     0,   448,   416,     0,   446,     0,   453,     0,     0,
     464,   463,   462,     0,   396,   419,     0,   763,   475,   777,
       0,   777,   763,   183,   184,   182,   186,   777,     0,     0,
       0,   176,   269,   273,     0,   272,     0,   294,   295,   296,
     168,     0,   291,     0,   777,   158,     0,     0,     0,   216,
       0,   267,     0,     0,     0,     0,   230,     0,   228,   189,
     192,   194,   262,   265,   266,   264,     0,     0,   253,   260,
     551,   526,   261,     0,     0,     0,   195,   201,     0,     0,
     777,   317,   318,   319,   301,    46,    48,    33,    40,    39,
     396,   379,   380,   378,     0,     0,     0,   440,     0,     0,
     445,   457,     0,   451,     0,     0,   762,   425,   763,     0,
     396,   411,     0,   482,   483,     0,   481,   473,     0,   414,
     170,   178,   177,     0,     0,   777,   777,   293,   292,   161,
       0,     0,   148,   222,     0,   218,   223,   224,     0,     0,
     189,   268,   214,   213,     0,   234,     0,   226,   189,   212,
     252,   257,   251,     0,   258,   206,     0,   204,     0,     0,
     263,     0,   154,    36,     0,   375,     0,     0,   442,   443,
       0,   762,   449,   450,   447,   456,   455,   454,   762,   460,
     461,   459,   396,     0,   439,   420,   763,   476,   777,     0,
       0,   474,   271,   270,     0,     0,   160,   146,   221,     0,
       0,   217,   211,     0,   241,   248,     0,   752,   232,   233,
     231,   777,   255,   256,   254,     0,   202,     0,   203,   259,
     142,   381,   376,   417,   396,   396,   763,   762,   763,   424,
       0,   484,     0,   276,     0,   274,   277,     0,   777,     0,
     149,   150,   157,   220,   219,   189,     0,     0,   235,   207,
     208,   205,   155,   763,   763,   428,   396,   421,   477,     0,
     485,   173,     0,     0,   719,   724,   729,   730,   760,   758,
     759,   278,   275,   290,     0,   175,   151,   156,   209,   245,
       0,   242,     0,   239,   238,   441,   452,   763,     0,   486,
     777,   777,   777,   777,   286,   279,   189,   152,   246,   769,
     236,     0,   426,   478,     0,   364,   281,   283,   284,   777,
       0,   244,   243,   227,     0,   225,   487,     0,   280,   153,
     225,     0,   282,     0,   247,   768,   237
d1537 30
a1566 28
      -1,     4,     5,    84,   182,     6,   132,   450,    70,   106,
     348,   107,     7,   105,   195,   125,   196,     8,   122,   126,
     127,   443,   579,   880,   963,  1060,   881,   964,  1057,   572,
     573,   876,   574,   877,     9,    88,    89,    72,   345,   346,
     568,   569,   704,   705,   102,   103,   121,   191,   192,   340,
     436,   558,   559,   700,   119,   183,   796,   184,   185,   350,
     451,   349,   444,   445,   186,   293,   294,   409,   453,   335,
     428,   535,   299,   300,   542,   543,   537,   538,   923,  1101,
    1210,  1280,  1131,  1211,  1014,  1100,   675,   676,   917,   920,
     921,   786,   853,   854,   859,   860,   861,   937,   938,  1046,
    1126,   939,  1018,  1104,  1105,  1023,  1024,  1025,  1026,  1283,
    1173,  1250,  1251,  1174,  1106,   941,  1037,   942,   943,  1032,
    1033,  1001,  1004,  1204,  1205,  1242,  1010,  1011,   454,   187,
     552,   868,   188,   189,   190,   717,   429,   553,   864,   430,
     924,    98,    99,   555,   326,   526,   413,   509,   510,   630,
     516,   517,   511,   735,   744,   745,   746,   747,   887,   888,
     748,   749,   662,  1058,   532,   639,   829,   959,   960,   961,
     534,   663,   664,   780,   847,   893,  1067,   765,  1079,  1198,
     766,   986,  1153,   979,   665,   768,   769,   666,   896,  1140,
    1141,   973,   974,   975,  1148,   976,   977,   983,   667,   833,
     668,   772,  1082,  1083,  1084,  1258,   978,   792,   157,   366,
     158,   370,   159,   160,   161,   684,   162,   163,   164,   235,
     947,   750,   373,   165,   166,   209,   352,   467,   354,   355,
     167,   391,   392,   393,   394,   726,   395,   396,   482,   600,
     483,   488,   398,   168,   214,   215,   169,   170,   257,   258,
     274,   259,   275,   670,   327,   260,   276,   671,   301,  1027,
      91,   539,   706,    92,    65,   171,    66,    67,   423,   641,
     680,  1108,   708,    10,   492,   288,   518,   200,   414,   632
d1571 1
a1571 1
#define YYPACT_NINF -1200
d1574 133
a1706 130
     490,  6574,  8403, -1200,   298, -1200, -1200,   267, -1200,   278,
    8403,   290, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200,   290, -1200, -1200, -1200,   303, -1200,
     329,   325, -1200,   332, -1200,   224,  8403,   336, -1200,   349,
     278, -1200,  8403,  8154, -1200, -1200,   392, -1200,   431,   423,
     440,   133, -1200, -1200, -1200,   472,   533, -1200,   454, -1200,
     359, -1200, -1200,   536, -1200,   290,   502, -1200,   278, -1200,
    8403,  6664, -1200, -1200,  8154, -1200,  5604, -1200,  5604,   811,
    8403, -1200, -1200, -1200, -1200,   524,    67,   536, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200,  8403,   527,   534,
     544,   559, -1200, -1200, -1200, -1200,   566, -1200, -1200, -1200,
    5604,  5440,  5768,  1663, -1200, -1200,   595,  1219,   578,  1071,
      21, -1200, -1200,   309, -1200,   609,   600, -1200, -1200,  5768,
    5768, -1200,   601, -1200, -1200,  8403,  8403,  6394,  8403,  8403,
    8403,  2602,   736, -1200, -1200, -1200, -1200, -1200,   631, -1200,
   -1200,    78, -1200,   692,    67,   502,  6754, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200,  1613, -1200,  5604,  1613, -1200, -1200,
   -1200,   645, -1200,   667,    76, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,   765, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200,  5604,  5768, -1200,
    5768,   739, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200,  5768, -1200,  5768,  1361,  1361,  5768,
    5768,  5768, -1200, -1200,  3069, -1200, -1200,  8403, -1200,   656,
     578, -1200,  5604,    55, -1200,   757,   -11, -1200, -1200,   103,
   -1200, -1200, -1200,   369,   653,   658, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200,   668, -1200, -1200, -1200,
   -1200, -1200, -1200,    67, -1200,   607, -1200,  8403,  8485, -1200,
       8, -1200, -1200,    67, -1200,   119, -1200,   -21, -1200,   900,
     610,   497,  5604,   669,   216, -1200,   637,  2415, -1200,  5604,
    5604,  3457, -1200, -1200,   964,   578,  5768,   578, -1200,  1071,
    5768,  1071, -1200, -1200,   695, -1200, -1200, -1200, -1200, -1200,
    4738,  8567,  5686,   705,   709,   716,   719,   760,  4536,  2857,
     169,   723,   725, -1200, -1200, -1200, -1200,   128, -1200, -1200,
    1019, -1200, -1200,  2415,   734,  8403, -1200,  8403,  5604, -1200,
   -1200,  5038,  8403,    60, -1200,  8236, -1200,  6484,  8403, -1200,
    8403,  8403,  4451,    77, -1200, -1200,  6844,  6934, -1200, -1200,
     666, -1200, -1200, -1200,   731,  7024,   757, -1200, -1200,  8403,
    6124,   225,    67,   826, -1200, -1200, -1200, -1200,  8403,  8403,
     813, -1200, -1200, -1200, -1200,   776, -1200,   785,  5604,  5604,
   -1200,  3539, -1200,  3166, -1200, -1200,   693,   461, -1200, -1200,
   -1200, -1200,   578,  1071,  1361,   881,   786, -1200,   791, -1200,
     442, -1200,   238, -1200,   794,   800,   184,   802,    82,  5604,
   -1200,  2963,   859,  4738,  3263,  5686, -1200,   484, -1200, -1200,
   -1200, -1200,   807,  8403,  8403,  8403,   276,   812, -1200,   179,
   -1200,   893,   816,  8403, -1200,   668,   160,  8403, -1200, -1200,
   -1200, -1200, -1200,   668,   668,   668,   160, -1200,  8403, -1200,
   -1200,   815, -1200, -1200,  5223,  7114, -1200,  5944, -1200,   814,
   -1200, -1200,  8649, -1200,   -21,   309, -1200,   821, -1200,  5604,
     823,   828,   536, -1200,   829,   830,  7024, -1200,   308, -1200,
     835, -1200, -1200, -1200, -1200, -1200, -1200,  7204, -1200,   825,
   -1200,   499,   938,   924, -1200, -1200,   668,   668,   536,   940,
   -1200, -1200,   834, -1200, -1200, -1200,   509,   566, -1200, -1200,
    3621, -1200,   837,  5604, -1200, -1200,  4834, -1200, -1200, -1200,
    4834,  5686, -1200,  5604, -1200, -1200, -1200, -1200,  5686, -1200,
     857, -1200, -1200, -1200, -1200, -1200, -1200,   668,   668,   836,
   -1200,  7908,  5854, -1200,  8403,  1164,   840,    60, -1200,  1361,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,  6844,
     422,   957, -1200,  5604,  1613,  1314,  5604, -1200, -1200, -1200,
   -1200,  3703,   878, -1200, -1200, -1200,   858,   866,  5604, -1200,
     867,  1613, -1200, -1200, -1200,  5311,   971,   430, -1200,   609,
     566,   868, -1200,   870, -1200,   170, -1200,   876, -1200,  8403,
     874, -1200,   875,  5604,   228, -1200, -1200, -1200,   871, -1200,
   -1200, -1200,   623, -1200, -1200,   352,  8403, -1200,  7294,  8403,
   -1200, -1200,   662, -1200,   364, -1200,   558,   877,  8403,  7204,
     989,   990, -1200,   995, -1200, -1200,    67, -1200, -1200,   666,
    5604, -1200,   891, -1200, -1200,  3069, -1200,   988, -1200, -1200,
   -1200,   101,    57, -1200,  1164, -1200, -1200, -1200,   899, -1200,
     836,   263, -1200,   999, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200,  1017,  1164,   160, -1200, -1200, -1200, -1200, -1200,
    1001,   750, -1200, -1200,   997, -1200, -1200, -1200,   135, -1200,
     911, -1200,   918,  5604,  1260, -1200,  5604,   609, -1200, -1200,
     504, -1200, -1200,  8403,  6034,  7384,    50,   -21, -1200, -1200,
   -1200,   921, -1200, -1200,   965,   991,   841, -1200, -1200, -1200,
   -1200, -1200, -1200,  8731, -1200,  7474,  8403, -1200,  8403,   835,
     366, -1200, -1200,  1442, -1200, -1200, -1200,   919,   837,   139,
   -1200, -1200, -1200,  1155,  8403,  5604,   922, -1200, -1200,   422,
   -1200,  5604, -1200,  5604, -1200, -1200,    47,  5604,  5604, -1200,
    3785,  8403,   309,   617,   928,   929,   379, -1200,  5604, -1200,
   -1200, -1200,   931,   327, -1200,   925, -1200, -1200,   530,   278,
   -1200,  1493,   286, -1200,  5604,  5604,   309, -1200,   736, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200,   926,   926, -1200, -1200,
   -1200,  1004, -1200,   791, -1200, -1200, -1200,    81, -1200,   954,
   -1200,  8403, -1200,  2151, -1200,   468, -1200,   229, -1200, -1200,
     501, -1200, -1200, -1200,   799, -1200,  3166, -1200, -1200, -1200,
     501, -1200, -1200,  8403,  7564, -1200,  1361, -1200,   941,   245,
    1016,  1016,   481,   505, -1200,   939,   266,   668,   668,  6304,
    1035,  2021,  1361,  7826,  3360,  4940,  2723, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200,   963, -1200,     2,   554,
     675,   927,  1018, -1200,  5686,   946,   950,   951,   952,   953,
   -1200, -1200,   960,    77,   561, -1200, -1200,  8403,  7654,  1053,
    8403,   959, -1200, -1200,   516, -1200,    94, -1200,    66,  1072,
   -1200, -1200, -1200,  5604,   501, -1200,  1075, -1200, -1200,   309,
     649,   566, -1200, -1200, -1200, -1200, -1200,   481,  1036,  1074,
     730, -1200, -1200, -1200,  1033, -1200,  1028, -1200, -1200, -1200,
   -1200,  3867, -1200,  3949, -1200, -1200,  1310,  5522,  1069, -1200,
     393, -1200,  1081,  1082,  1096,   400, -1200,   987, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200,   992,   383, -1200, -1200,
     569,   751, -1200,  5604,  4031,  5604, -1200, -1200,  1010,  7990,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,   815, -1200,
      77, -1200, -1200, -1200,  1623,   996,  1085,    83,  5604,  2274,
   -1200,  5604,  4113, -1200,  5604,  4195, -1200, -1200, -1200,  5604,
     501, -1200,   251,   993, -1200,   994, -1200, -1200,  1000, -1200,
   -1200, -1200, -1200,  1002,  1006,  1005,  1005, -1200, -1200, -1200,
    5604,  1009, -1200, -1200,   123, -1200, -1200, -1200,  5604,  1008,
   -1200, -1200, -1200, -1200,  4642,  8403,  5135, -1200, -1200, -1200,
   -1200,  8403, -1200,  7744, -1200, -1200,   386, -1200,  1011,  5604,
   -1200,  1024, -1200,   815,  1013, -1200,  1361,  1361, -1200, -1200,
    1104, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200,   501,  1115, -1200, -1200, -1200, -1200,   309,   309,
    5604, -1200, -1200, -1200,  6214,  6214, -1200,    43,  5522,  5522,
    1103, -1200, -1200,  1108, -1200, -1200,  1025,    34, -1200, -1200,
   -1200,   652, -1200, -1200, -1200,  5604, -1200,  4277, -1200, -1200,
     255, -1200, -1200, -1200,    77,   532, -1200, -1200, -1200, -1200,
     489, -1200,  1026, -1200,  1133,  8072, -1200,  1138,   309,  5604,
   -1200, -1200, -1200, -1200, -1200, -1200,  4359,  5522, -1200, -1200,
   -1200, -1200, -1200,   815, -1200, -1200,   501, -1200, -1200,   309,
   -1200, -1200,  8403,  8403,    73,   325,  8403,  8403,  5358,   102,
     204,   191,  1039, -1200,  1038, -1200,  1063, -1200, -1200, -1200,
     425, -1200,   212, -1200, -1200, -1200, -1200, -1200,   684, -1200,
     668,   668,   668,   668, -1200, -1200, -1200, -1200,  5604,  5604,
      83,  1042, -1200, -1200,   309,    96, -1200, -1200, -1200,   652,
    5604, -1200, -1200, -1200,  1043,  8321, -1200,   108, -1200, -1200,
    8321,  1044, -1200,  1045, -1200,   791, -1200
d1712 30
a1741 28
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200,   968, -1200,  1097, -1200,   -74,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,   205,   357,
   -1200, -1200,   602, -1200, -1200,  1073,    69,   230, -1200,   368,
   -1200, -1200,   465,  -165,   -89, -1200,   -97, -1200,   474, -1200,
   -1200,   621,   -32,  -448,   464, -1200, -1200,   390, -1200,   622,
   -1200, -1200, -1200, -1200,  -312, -1200,   281,   752,  -138, -1200,
   -1200, -1200, -1200,   287, -1200,   647, -1200,  -377, -1200, -1200,
   -1200, -1200, -1200,     1, -1200, -1200, -1200,    61, -1200, -1200,
   -1200, -1200, -1200,   -83,  -736,  -972, -1200, -1200,   265, -1200,
   -1200,   247, -1200, -1200,  -967, -1199, -1200, -1200,  -249, -1200,
   -1200, -1200,  -383,   -16,  -838, -1200, -1200, -1200, -1200,  -633,
    -792,  -208,   282,    37, -1200, -1200,  -894, -1200, -1200,   856,
   -1200, -1200, -1200,  -319, -1200, -1200,   628, -1200, -1200,  -232,
      -8, -1200,  1100, -1200, -1200, -1200,  -292, -1200,   271,  -519,
    -613, -1200, -1200,   470,  -627,  -788,   147, -1200, -1200,  -575,
   -1200,   394,  -169,  -411,  -591, -1200, -1200,  -835,  -508,  -406,
   -1200, -1200,   555, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200,  -142, -1200, -1200, -1200,
     -51, -1200, -1200,  -170, -1200,  -739,  -171, -1200, -1200,   441,
   -1200, -1200,    64, -1200,    70, -1200,  -657,  1362,   966, -1200,
     -91, -1200,     7,  -149, -1200,  -826,  -526,   384,  -153, -1200,
    -583,  -272, -1200,  -168, -1200,  -560,   106,  -387,   449,   294,
    -581,  -344, -1200,   740,   742,   412,   744,  -360, -1200, -1200,
    -190,   955,  -336, -1200, -1200,   542, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200,  1057,  1060,   597,  -471,   -72,
   -1200, -1200,  -443,    31, -1200, -1200,   824, -1200,  -741,  -928,
    -491,  -590,  -349,  1175,  -469,  -557,   -80,  -179,    -9,  -489
d1748 1
a1748 1
#define YYTABLE_NINF -778
d1751 264
a2014 242
      74,    73,    78,   216,    90,   372,   375,   637,   631,   595,
     282,   419,   531,   333,   754,   342,   497,   533,   631,   685,
     118,   291,   478,   940,   836,   837,   791,   722,   481,  1015,
     201,   455,    64,    68,   422,   752,   351,   446,   452,   356,
     957,    75,   962,   202,   751,   487,   755,   334,   194,   758,
    1109,   856,   484,   682,   862,    78,   405,  1119,  -777,  1081,
    -240,  -777,   513,   672,  1089,   987,    78,  1074,   198,   944,
     434,    74,    73,   945,   101,   992,   586,   360,   290,   337,
      77,   115,   967,   493,  -388,   530,  1291,   280,  -289,    71,
    1138,  1293,  -388,   940,  1208,  1071,    78,  -777,   900,    74,
      73,   331,  -614,  1090,   415,   101,   910,   820,   411,   628,
     781,  -777,   117,    96,   100,   530,   412,  -287,  1209,   819,
     439,  1044,   922,  -395,  1168,  1045,   827,   435,   281,   493,
     376,   377,   378,    79,   110,   614,   838,   210,  1172,   944,
     628,   129,   131,   945,   752,   100,  1181,  1139,   839,  1078,
    1154,   193,   115,   751,   424,   984,  -707,   611,   613,   115,
     678,   628,   115,   752,   438,  -388,  1075,   365,   203,   367,
    -595,   783,   751,   406,   672,  -777,   407,  -777,  -777,  -777,
     621,   997,  -777,   117,   341,  -613,   787,  -458,  -458,   466,
     117,  -289,  -753,   117,   199,  -388,   338,   361,   115,   968,
     362,  1213,  1214,   494,   495,   969,   295,   296,   302,   303,
     304,   305,   330,  1071,  -777,  1072,  1073,   459,  -777,  -288,
    -287,   416,  -614,   627,   417,  -622,  -395,   347,  1199,   117,
     629,   634,   635,   636,   533,   828,   481,   440,   892,   596,
     481,   730,   751,  1248,  1169,  1156,   631,  1170,   478,   494,
     495,  -696,   496,  -696,   111,  -696,   840,  -395,   807,  -395,
     484,   629,   757,   570,   484,   809,   985,   441,  1225,   489,
    1227,   951,   513,   513,   442,   472,  1175,  -753,  -395,    86,
     949,   369,   629,   371,   603,   419,   410,  1218,   784,   823,
    -595,  -613,  -777,  -595,  1279,  1255,  1256,   622,    69,   623,
     885,    71,  1039,  1042,   952,  -613,  -613,   575,  -595,   696,
      95,   631,  -753,  -753,   357,   399,   971,  1196,   401,    87,
     566,   692,  -288,   793,    71,   732,   733,   431,   913,  1272,
    1209,   437,    71,  1072,  1271,  1152,   460,   461,   128,   512,
     685,   951,   528,    76,   567,   999,   794,   640,   719,  1031,
     949,   565,  1034,   696,  1040,  1034,   597,   756,   598,   599,
    1224,   874,   -13,   872,  1000,   803,   669,   803,   193,   193,
     949,  1157,   953,  1158,   952,  -753,  -753,   473,   210,  1175,
     459,   817,  1246,   455,  1121,  1288,   824,  1185,   954,  1017,
     452,  1257,  1061,  1063,   628,   403,  -753,  -753,  -753,   144,
    1194,  1115,   514,  -753,   519,   147,   728,  1195,  -395,    76,
     729,   476,   203,   529,   966,  -768,  1130,  1149,  1151,   399,
     399,    80,   554,   533,     3,   897,  1268,   410,   697,   698,
     533,  1088,  -768,   619,  -395,   153,   295,  -388,   295,  -395,
    -768,   626,   953,   515,    83,   914,   302,   915,   302,   523,
      85,   524,   525,   527,    93,   691,  1226,   540,   544,  -388,
     530,   115,   953,  1085,   683,  -395,   560,    94,  1034,   980,
     347,   347,   797,   698,   752,  -388,   761,  1252,   116,   576,
     577,   715,   981,   751,   804,   805,   875,   805,   411,  -768,
      -2,  -395,   117,   777,   587,  -395,   418,   669,   982,   909,
     461,  1111,  -395,  1122,  1123,  1070,  1186,  1187,  -395,   710,
     104,  -395,   631,  -395,   711,   629,  -395,  1068,  1116,   990,
    -768,     1,   399,  -768,   399,   399,   -15,    71,  -403,  1252,
    1252,  -768,  -403,  -395,   617,   618,   686,   814,  -395,  -395,
    -388,   108,   489,  1269,   431,  -768,  1013,  -395,   633,   512,
     512,   701,   740,  1007,  -395,  -210,  1117,   533,   533,   638,
     109,     2,   358,  -403,  -613,  -395,   677,   112,   540,  -210,
    -266,   431,  -172,   544,   113,   114,  -388,  1007,   210,  1008,
    -768,   589,   590,  1009,  -266,     3,   261,   560,    86,   948,
     262,   918,   120,   283,  1050,  -210,  -395,   124,   707,   530,
    -210,   263,   832,  1008,   615,   590,   115,  1009,   919,  1228,
    -266,  1229,   514,   514,  -388,  -266,   175,   456,   519,  -395,
     284,   264,   285,   286,   287,    -9,  -210,   399,   448,   721,
     590,   399,  1085,  1085,  1069,  1020,  1021,   117,   869,   449,
     871,  -266,   197,   425,   996,   426,   204,   265,   266,  1133,
    -395,  1098,  -210,   205,   533,   427,  -210,   699,   806,   948,
     756,   210,  1287,   206,   798,    -9,   800,  -266,   175,    71,
     540,  -266,  -210,   181,  -210,   546,  -546,   802,   207,  -388,
     448,   834,   685,   548,   554,   208,   499,  -266,   500,  -266,
    -546,   449,   267,   268,   269,   270,   899,   701,   902,   958,
     834,  -546,   520,  1259,   522,   283,   857,   858,   271,   272,
     788,   554,    71,   855,   273,   236,  -546,   545,   546,   289,
     547,  -546,   292,   519,  1007,   181,   548,   560,  1094,   560,
     801,  1093,   284,   283,   285,   286,   287,   905,   906,   707,
     707,   549,   550,   551,  1107,  1107,   332,  -546,  1286,   336,
    1008,   282,  -761,   583,  1009,   585,   399,   462,   463,   339,
     284,  -710,   285,   286,   287,   358,  -761,   359,  1292,  1087,
     590,   831,   363,  -546,   368,  -710,   402,  -546,   408,   631,
     420,  1270,    23,  1223,    25,   421,   216,   411,   533,   283,
      31,   458,  -761,  -546,  -546,  -546,  -546,  -761,  -546,  -546,
     701,  -710,   474,    44,  1273,  1274,  -710,   562,   564,    50,
      51,   432,   433,   588,   677,   677,   284,   175,   285,   286,
     287,    -5,   474,  -761,   204,    62,  1296,    63,   205,   176,
     993,   995,  -710,   177,   707,   206,   707,   707,   207,   873,
     178,   855,   855,   491,   849,   851,   283,   490,   832,  -761,
     556,  -300,   115,  -761,   498,   889,   571,   686,  -710,   176,
     179,   180,  -710,   177,  1191,  1192,  1178,  1180,   578,  -761,
     178,  -761,   903,   284,   181,   285,   286,   287,  -710,   208,
    -710,  -710,  -710,   117,  -710,  1281,  1282,  1164,  1165,   144,
     179,   180,   736,   739,   580,   147,  1107,  1107,  1142,  1144,
    1145,  1147,   469,   471,   181,   581,   175,   592,   593,   594,
    1002,  1005,  1005,  1012,  1012,   -28,   601,  1019,   176,   988,
    1028,   989,   889,   608,   602,   153,   604,   616,   628,   178,
     -28,   624,   620,   640,   699,   679,   925,   991,   625,   687,
     172,   689,   174,   926,   709,  1254,   690,   693,   694,   179,
     180,   135,   136,   712,   713,   716,   720,   489,   734,   929,
     725,   930,   753,   181,  1035,  1038,  1035,  1035,  1275,  1276,
    1277,  1278,   759,   771,   174,   174,   174,   773,   779,    23,
    1086,    25,   210,   279,   137,   774,   776,    31,  1012,   795,
     782,   238,  -694,   174,   174,   785,   789,   790,   889,   889,
      44,  1065,   811,   812,   808,  1102,    50,    51,   138,   139,
     711,   816,   140,   141,   818,   142,   143,   144,   145,   821,
    -707,   146,    62,   147,    63,   825,   826,   830,   174,   239,
     174,   174,   835,   841,  -707,   148,   149,   842,   240,   863,
     865,  1132,   866,   883,  -395,   891,   150,   916,   907,   908,
     151,   912,   152,   153,   970,   154,   155,   965,  1003,   998,
    -707,  1029,  1016,  1043,  1051,  -707,  1049,   241,  1052,  1053,
    1054,  1055,   245,   246,   247,   248,   249,   250,  1056,  1064,
    1035,   174,   174,  1066,   174,  1076,  1002,  1002,  1080,  1092,
    1091,  -707,   251,   252,  1095,  1110,  1112,  1113,   174,   256,
     174,   374,   374,   174,   174,   174,  1096,  1114,   400,  1118,
    1129,  1137,  1120,  1160,  1159,   277,   174,  -707,  1136,  1193,
    1161,  -707,  1162,    23,  1000,    25,  1163,  1167,  1197,  1215,
     278,    31,  1171,  1244,  1216,  1188,   824,  -707,  -707,  -707,
    -707,  -707,  1190,  -707,    44,  1176,  1230,  1217,  1231,  1086,
      50,    51,  1182,  1245,  1184,  1206,  1206,  1265,  1267,  1212,
    1266,  1285,  1290,   343,  1294,  1295,    62,    81,    63,  1059,
     882,   134,  1012,   741,   810,   714,   174,   695,   123,   813,
     134,   174,  1212,   174,   174,   174,   867,   702,   561,   681,
     174,  1222,   742,   279,   174,   279,  1030,  1243,  1047,   686,
     743,  1253,  1207,  1006,   400,   447,   174,    23,   718,    25,
     822,  1135,   400,   400,   133,    31,    23,   886,    25,  1284,
     778,   848,  1200,   364,    31,   846,   904,   174,    44,  1201,
     884,   606,   174,   607,    50,    51,   609,    44,   328,   397,
     237,   329,   762,    50,    51,    82,   238,     0,     0,     0,
      62,     0,    63,     0,     0,     0,     0,     0,     0,    62,
       0,    63,     0,  1260,  1261,     0,   519,  1262,  1263,     0,
    1012,     0,     0,     0,     0,     0,  1028,     0,     0,     0,
       0,  1028,   174,   174,   239,   174,     0,   400,     0,     0,
       0,   844,     0,   240,     0,     0,     0,   279,   591,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1103,    23,   174,    25,   400,     0,   400,   400,   174,
      31,     0,   241,   242,   243,   244,   134,   245,   246,   247,
     248,   249,   250,    44,   135,   136,     0,     0,   742,    50,
      51,     0,     0,     0,     0,     0,     0,   251,   252,     0,
       0,   253,   254,   255,   256,    62,     0,    63,   673,     0,
       0,     0,    23,     0,    25,     0,    23,   137,    25,     0,
      31,     0,     0,   174,    31,     0,     0,     0,     0,     0,
       0,     0,     0,    44,     0,     0,     0,    44,     0,    50,
      51,   138,   139,    50,    51,   140,   141,     0,   142,   143,
     144,   145,   298,     0,   146,    62,   147,    63,     0,    62,
       0,    63,     0,    23,   174,    25,     0,   174,   148,   149,
     400,    31,     0,     0,   400,   174,     0,   174,     0,   934,
       0,     0,   174,   151,    44,   152,   153,     0,   154,   155,
      50,    51,     0,     0,     0,     0,     0,     0,   175,   374,
       0,     0,   878,   374,     0,     0,    62,   -41,    63,     0,
     176,     0,     0,     0,   177,     0,     0,   174,   174,   763,
     174,   178,   571,     0,     0,   174,     0,     0,   156,     0,
     173,     0,   174,     0,     0,   174,     0,     0,     0,   174,
       0,   179,   180,     0,   628,     0,     0,     0,     0,     0,
     879,     0,   925,     0,     0,   181,     0,   174,     0,   926,
       0,   927,   211,   213,     0,     0,     0,   135,   136,     0,
       0,   742,   928,     0,     0,   929,     0,   930,     0,   743,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     931,     0,     0,     0,   174,    23,     0,    25,     0,   400,
     137,     0,     0,    31,     0,     0,     0,     0,   374,     0,
       0,   932,     0,     0,     0,     0,    44,     0,   353,     0,
       0,     0,    50,    51,   138,   139,     0,   374,   140,   141,
       0,   142,   143,   144,   145,     0,     0,   146,    62,   933,
      63,     0,     0,     0,     0,     0,     0,   174,   845,     0,
     174,   148,   149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   934,     0,     0,     0,   151,     0,   935,   936,
       0,   154,   155,     0,     0,     0,     0,     0,     0,   134,
       0,     0,  1134,     0,     0,     0,     0,     0,     0,   134,
       0,     0,     0,     0,     0,     0,   390,   374,     0,   174,
       0,   742,     0,     0,   404,   174,     0,   174,     0,     0,
       0,   174,   174,     0,   174,    23,     0,    25,     0,     0,
     137,     0,   174,    31,     0,    23,     0,    25,     0,     0,
       0,     0,     0,    31,     0,   950,    44,     0,   174,   174,
       0,     0,    50,    51,   138,   139,    44,     0,   140,   141,
       0,     0,    50,    51,     0,     0,     0,   146,    62,     0,
      63,     0,     0,     0,   457,     0,     0,   174,    62,   465,
      63,   468,   213,   213,     0,     0,     0,     0,     0,     0,
     400,     0,   150,     0,     0,     0,     0,     0,     0,     0,
     374,     0,   475,     0,   477,     0,     0,     0,     0,     0,
     480,   486,     0,     0,     0,   950,   374,     0,   400,   400,
     217,     0,     0,     0,     0,   465,     0,     0,     0,     0,
     501,     0,     0,     0,     0,   174,     0,     0,   174,     0,
       0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   174,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     582,   353,     0,   353,   374,   465,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   174,     0,     0,     0,     0,
     950,   950,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   605,     0,   390,     0,   610,   610,   477,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   174,   174,   174,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   374,     0,
       0,     0,   174,   174,     0,   174,   174,     0,   174,   174,
       0,     0,     0,   174,     0,     0,     0,     0,     0,     0,
       0,   688,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   174,     0,     0,     0,     0,     0,
       0,     0,   174,     0,     0,     0,     0,     0,  1177,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   724,   174,     0,   727,     0,     0,   390,     0,
     374,   374,   390,   477,     0,   731,     0,     0,     0,     0,
     477,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   174,     0,     0,     0,     0,     0,
       0,     0,   950,   950,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   760,     0,     0,   764,   174,
       0,   174,     0,   770,     0,     0,     0,     0,     0,     0,
     775,     0,   628,     0,     0,     0,     0,     0,     0,     0,
     925,     0,     0,   174,     0,     0,     0,   926,     0,   927,
     174,   950,     0,     0,     0,   135,   136,     0,     0,   742,
     928,     0,     0,   929,     0,   930,     0,   743,     0,     0,
       0,     0,   174,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,     0,    25,     0,     0,   137,     0,
       0,    31,   815,     0,     0,     0,     0,   390,     0,   932,
       0,     0,   174,   174,    44,     0,     0,     0,     0,     0,
      50,    51,   138,   139,   174,     0,   140,   141,     0,   142,
     143,   144,   145,     0,     0,   146,    62,   933,    63,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   148,
     149,     0,     0,     0,     0,   843,     0,     0,   353,     0,
     934,     0,     0,     0,   151,     0,   935,   936,     0,   154,
     155,     0,   972,     0,     0,     0,     0,     0,  -444,     0,
       0,     0,     0,     0,     0,     0,  -444,   134,     0,     0,
       0,     0,     0,     0,     0,   135,   136,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   890,     0,     0,
       0,     0,     0,   894,     0,   895,     0,     0,     0,   898,
     770,     0,   770,    23,     0,    25,     0,     0,   137,     0,
     911,    31,     0,     0,     0,  -444,     0,     0,     0,     0,
       0,     0,     0,   946,    44,     0,   955,   956,     0,     0,
      50,    51,   138,   139,     0,     0,   140,   141,     0,   142,
     143,   144,   145,     0,     0,   146,    62,   147,    63,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   148,
     149,     0,     0,     0,     0,     0,     0,     0,   465,     0,
     150,     0,     0,     0,   151,  1143,   152,   153,     0,   154,
     155,  -769,     0,     0,     0,     0,     0,     0,     0,  -769,
     134,     0,     0,   946,     0,     0,   211,     0,   135,   136,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1048,     0,     0,   477,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    23,     0,    25,     0,
       0,   137,     0,     0,    31,     0,     0,     0,  -769,     0,
       0,     0,     0,     0,     0,  1077,     0,    44,     0,     0,
       0,     0,     0,    50,    51,   138,   139,     0,     0,   140,
     141,     0,   142,   143,   144,   145,     0,     0,   146,    62,
     147,    63,     0,   477,     0,     0,     0,     0,   946,   946,
       0,     0,   148,   149,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,     0,     0,     0,   151,     0,   152,
     153,     0,   154,   155,     0,  1124,  1127,  1128,     0,     0,
       0,     0,     0,     0,     0,     0,   464,     0,     0,     0,
d2016 10
a2025 33
       0,   134,     0,     0,     0,     0,     0,     0,     0,   135,
     136,  1155,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1166,     0,     0,     0,     0,    23,     0,    25,
    1048,     0,   137,     0,     0,    31,   946,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
       0,  1189,     0,     0,    50,    51,   138,   139,     0,     0,
     140,   141,     0,   142,   143,   144,   145,     0,     0,   146,
      62,   147,    63,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1202,   148,   149,     0,     0,     0,     0,     0,
     946,   946,     0,     0,   150,     0,     0,     0,   151,     0,
     152,   153,     0,   154,   155,     0,     0,  1219,     0,  1221,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1247,     0,     0,     0,     0,     0,     0,     0,   946,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1264,     0,     0,     0,     0,     0,     0,     0,    12,     0,
     306,     0,     0,     0,   307,     0,     0,     0,     0,     0,
       0,     0,     0,   308,     0,   309,     0,     0,     0,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1289,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
       0,     0,     0,     0,    59,    60,    61,    62,     0,    63,
       0,     0,     0,     0,   115,   311,   312,   313,   314,   315,
     316,   317,   247,   248,   249,   250,   267,   268,   269,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    12,
     318,   319,   320,   321,   322,   117,   323,   324,   325,   134,
       0,   927,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   928,     0,     0,     0,     0,     0,     0,     0,
d2031 2
a2032 18
      58,     0,     0,     0,     0,    59,    60,    61,    62,     0,
    1041,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   485,     0,
       0,     0,     0,    12,     0,     0,     0,     0,   380,     0,
       0,     0,     0,   134,     0,     0,     0,     0,     0,     0,
       0,   135,   136,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
      15,    16,    17,    18,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,   381,    29,    30,    31,    32,    33,
      34,   382,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,   383,   384,
      54,    55,   385,   386,    58,   142,   143,   144,   145,    59,
      60,   387,    62,   147,    63,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   379,   148,   149,     0,     0,    12,
       0,     0,     0,     0,   380,     0,   388,     0,     0,   134,
     389,   212,   152,   153,     0,   154,   155,   135,   136,     0,
d2034 5
a2038 10
       0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
      19,     0,    20,    21,    22,    23,    24,    25,    26,    27,
     381,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,   383,   384,    54,    55,   385,   386,
      58,   142,   143,   144,   145,    59,    60,   387,    62,   147,
      63,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     379,   148,   149,     0,     0,    12,     0,     0,     0,     0,
     380,     0,   388,     0,     0,   134,   389,  -769,   152,   153,
       0,   154,   155,   135,   136,     0,     0,     0,     0,     0,
d2041 2
a2042 2
      22,    23,    24,    25,    26,    27,   381,    29,    30,    31,
      32,    33,    34,   382,    36,    37,    38,    39,    40,    41,
d2044 25
a2068 5
     383,   384,    54,    55,   385,   386,    58,   142,   143,   144,
     145,    59,    60,   387,    62,   147,    63,   464,     0,     0,
       0,     0,    12,     0,     0,     0,     0,   148,   149,     0,
       0,     0,   134,     0,     0,     0,     0,     0,   388,     0,
     135,   136,   389,     0,   152,   153,     0,   154,   155,     0,
d2071 1
a2071 1
      25,    26,    27,   381,    29,    30,    31,    32,    33,    34,
d2073 81
a2153 61
      45,    46,    47,    48,    49,    50,    51,   383,   384,    54,
      55,   385,   386,    58,   142,   143,   144,   145,    59,    60,
     387,    62,   147,    63,   612,     0,     0,     0,     0,    12,
       0,     0,     0,     0,   148,   149,     0,     0,     0,   134,
       0,     0,     0,     0,     0,   150,     0,   135,   136,   151,
       0,   152,   153,     0,   154,   155,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
      19,     0,    20,    21,    22,    23,    24,    25,    26,    27,
     381,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,   383,   384,    54,    55,   385,   386,
      58,   142,   143,   144,   145,    59,    60,   387,    62,   147,
      63,  1036,     0,     0,     0,     0,    12,     0,     0,     0,
       0,   148,   149,     0,     0,     0,   134,     0,     0,     0,
       0,     0,   150,     0,   135,   136,   151,     0,   152,   153,
       0,   154,   155,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,    17,    18,    19,     0,    20,
      21,    22,    23,    24,    25,    26,    27,   381,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,   383,   384,    54,    55,   385,   386,    58,   142,   143,
     144,   145,    59,    60,   387,    62,   147,    63,   470,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   148,   149,
       0,     0,     0,   134,     0,     0,     0,     0,     0,   150,
       0,   135,   136,   151,     0,   152,   153,     0,   154,   155,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    23,
       0,    25,     0,     0,   137,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,     0,    50,    51,   138,   139,
     584,     0,   140,   141,     0,   142,   143,   144,   145,     0,
       0,   146,    62,   147,    63,   134,     0,     0,     0,     0,
       0,     0,     0,   135,   136,   148,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   150,     0,     0,     0,
     151,     0,   152,   153,     0,   154,   155,     0,     0,     0,
       0,    23,     0,    25,     0,     0,   137,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,     0,     0,     0,     0,     0,    50,    51,
     138,   139,   723,     0,   140,   141,     0,   142,   143,   144,
     145,     0,     0,   146,    62,   147,    63,   134,     0,     0,
       0,     0,     0,     0,     0,   135,   136,   148,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,     0,
       0,     0,   151,     0,   152,   153,     0,   154,   155,     0,
       0,     0,     0,    23,     0,    25,     0,     0,   137,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
      50,    51,   138,   139,   767,     0,   140,   141,     0,   142,
     143,   144,   145,     0,     0,   146,    62,   147,    63,   134,
       0,     0,     0,     0,     0,     0,     0,   135,   136,   148,
     149,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,     0,     0,     0,   151,     0,   152,   153,     0,   154,
     155,     0,     0,     0,     0,    23,     0,    25,     0,     0,
     137,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,     0,     0,
       0,     0,    50,    51,   138,   139,   901,     0,   140,   141,
       0,   142,   143,   144,   145,     0,     0,   146,    62,   147,
      63,   134,     0,     0,     0,     0,     0,     0,     0,   135,
     136,   148,   149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   150,     0,     0,     0,   151,     0,   152,   153,
       0,   154,   155,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   137,     0,     0,    31,     0,     0,     0,     0,
d2155 28
a2182 32
       0,     0,     0,     0,    50,    51,   138,   139,  1097,     0,
     140,   141,     0,   142,   143,   144,   145,     0,     0,   146,
      62,   147,    63,   134,     0,     0,     0,     0,     0,     0,
       0,   135,   136,   148,   149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,     0,     0,     0,   151,     0,
     152,   153,     0,   154,   155,     0,     0,     0,     0,    23,
       0,    25,     0,     0,   137,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,     0,    50,    51,   138,   139,
    1099,     0,   140,   141,     0,   142,   143,   144,   145,     0,
       0,   146,    62,   147,    63,  -159,     0,     0,     0,     0,
       0,     0,     0,  -159,  -159,   148,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   388,     0,     0,     0,
     389,     0,   152,   153,     0,   154,   155,     0,     0,     0,
       0,  -159,     0,  -159,     0,     0,  -159,     0,     0,  -159,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -159,     0,     0,     0,     0,     0,  -159,  -159,
    -159,  -159,  1125,     0,  -159,  -159,     0,  -159,  -159,  -159,
    -159,     0,     0,  -159,  -159,  -159,  -159,   134,     0,     0,
       0,     0,     0,     0,     0,   135,   136,  -159,  -159,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -159,     0,
       0,     0,  -159,     0,  -159,  -159,     0,  -159,  -159,     0,
       0,     0,     0,    23,     0,    25,     0,     0,   137,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
      50,    51,   138,   139,  1146,     0,   140,   141,     0,   142,
     143,   144,   145,     0,     0,   146,    62,   147,    63,   134,
       0,     0,     0,     0,     0,     0,     0,   135,   136,   148,
     149,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,     0,     0,     0,   151,     0,   152,   153,     0,   154,
     155,     0,     0,     0,     0,    23,     0,    25,     0,     0,
     137,     0,     0,    31,     0,     0,     0,     0,     0,     0,
d2184 25
a2208 49
       0,     0,    50,    51,   138,   139,  1150,     0,   140,   141,
       0,   142,   143,   144,   145,     0,     0,   146,    62,   147,
      63,   134,     0,     0,     0,     0,     0,     0,     0,   135,
     136,   148,   149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   150,     0,     0,     0,   151,     0,   152,   153,
       0,   154,   155,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   137,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
       0,     0,     0,     0,    50,    51,   138,   139,  1220,     0,
     140,   141,     0,   142,   143,   144,   145,     0,     0,   146,
      62,   147,    63,   134,     0,     0,     0,     0,     0,     0,
       0,   135,   136,   148,   149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,     0,     0,     0,   151,     0,
     152,   153,     0,   154,   155,     0,     0,     0,     0,    23,
       0,    25,     0,     0,   137,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,     0,    50,    51,   138,   139,
    1249,     0,   140,   141,     0,   142,   143,   144,   145,     0,
       0,   146,    62,   147,    63,   134,     0,     0,     0,     0,
       0,     0,     0,   135,   136,   148,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   150,     0,     0,     0,
     151,     0,   152,   153,     0,   154,   155,     0,     0,     0,
       0,    23,     0,    25,     0,     0,   137,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,     0,     0,     0,     0,     0,    50,    51,
     138,   139,     0,     0,   140,   141,     0,   142,   143,   144,
     145,     0,     0,   146,    62,   147,    63,    12,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   148,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,     0,
       0,     0,   151,     0,   152,   153,     0,   154,   155,     0,
       0,     0,    13,    14,    15,    16,    17,    18,    19,     0,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,     0,
       0,     0,    12,    59,    60,    61,    62,     0,    63,     0,
       0,     0,   134,   115,     0,     0,     0,     0,     0,     0,
     135,   136,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,   117,    20,    21,    22,    23,    24,
      25,    26,    27,   381,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,   383,   384,    54,
      55,   385,   386,    58,   142,   143,   144,   145,    59,    60,
     387,    62,   147,    63,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   148,   149,     0,     0,    12,     0,
       0,     0,     0,     0,     0,   388,   479,     0,   134,   389,
       0,   152,   153,     0,   154,   155,   135,   136,     0,     0,
     742,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2210 1
a2210 1
       0,    20,    21,    22,    23,    24,    25,    26,    27,   381,
d2213 6
a2218 26
      49,    50,    51,   383,   384,    54,    55,   385,   386,    58,
     142,   143,   144,   145,    59,    60,   387,    62,   147,    63,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
     148,   149,     0,     0,   134,     0,     0,     0,     0,     0,
       0,   934,   135,   136,     0,   151,     0,   152,   153,     0,
     154,   155,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,   381,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,   383,
     384,    54,    55,   385,   386,    58,   142,   143,   144,   145,
      59,    60,   387,    62,   147,    63,     0,     0,     0,     0,
      12,     0,     0,     0,     0,     0,   148,   149,     0,     0,
     134,     0,     0,     0,     0,     0,     0,   150,   135,   136,
       0,   151,     0,   152,   153,     0,   154,   155,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,   381,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,   383,   384,    54,    55,   385,
     386,    58,   142,   143,   144,   145,    59,    60,   387,    62,
     147,    63,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   148,   149,     0,     0,    12,     0,     0,     0,
       0,     0,     0,   388,     0,     0,   134,   389,   927,   152,
     153,     0,   154,   155,   135,   136,     0,     0,     0,   928,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2220 1
a2220 1
      21,    22,    23,    24,    25,    26,    27,   381,    29,    30,
d2223 8
a2230 8
      51,   383,   384,    54,    55,   385,   386,    58,   142,   143,
     144,   145,    59,    60,   387,    62,   147,    63,     0,   502,
       0,     0,     0,     0,    12,     0,     0,     0,   148,   149,
       0,     0,     0,     0,     0,     0,   503,     0,     0,   150,
       0,     0,     0,   151,     0,   152,   153,   504,     0,     0,
       0,     0,     0,     0,     0,     0,  -777,     0,     0,    13,
      14,    15,    16,    17,    18,    19,   505,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
d2233 25
a2257 4
      53,    54,    55,    56,    57,    58,     0,     0,     0,     0,
      59,    60,    61,   506,     0,    63,  1179,     0,     0,   507,
       0,    12,     0,     0,     0,     0,  -229,     0,     0,     0,
    -769,     0,     0,     0,     0,     0,     0,     0,   508,     0,
d2264 29
a2292 28
      56,    57,    58,     0,     0,     0,     0,    59,    60,    61,
      62,   642,    63,   332,   643,     0,     0,     0,     0,   134,
     644,     0,   645,   646,     0,     0,     0,     0,   647,     0,
     648,     0,     0,     0,     0,  -769,   649,     0,     0,     0,
       0,     0,   650,   651,     0,     0,     0,     0,   652,     0,
       0,     0,     0,     0,     0,    23,     0,    25,     0,     0,
     137,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,   653,   654,     0,     0,    44,   655,     0,     0,
       0,     0,    50,    51,   138,   139,   656,   657,   140,   141,
     658,   298,     0,     0,     0,   659,   660,   146,    62,   642,
      63,   332,   643,     0,     0,     0,     0,   134,   644,     0,
     645,   646,     0,     0,     0,     0,   647,     0,   648,     0,
       0,     0,   150,     0,   649,     0,     0,     0,   661,     0,
     650,   651,     0,     0,     0,     0,   652,     0,     0,     0,
       0,     0,     0,    23,     0,    25,     0,     0,   137,     0,
       0,    31,     0,  -285,   134,     0,     0,     0,     0,     0,
     653,   654,   135,   136,    44,   655,     0,     0,     0,     0,
      50,    51,   138,   139,   656,   657,   140,   141,   658,     0,
       0,     0,     0,   659,   660,   146,    62,     0,    63,     0,
      23,     0,    25,     0,     0,   137,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,    44,     0,     0,     0,     0,   661,    50,    51,   138,
     139,     0,     0,   140,   141,     0,   142,   143,   144,   145,
       0,     0,   146,    62,   147,    63,   134,     0,     0,     0,
       0,     0,     0,     0,   135,   136,   148,   149,     0,     0,
       0,     0,     0,     0,     0,     0,  -285,   150,     0,     0,
       0,   151,     0,   152,   153,     0,   154,   155,     0,     0,
       0,     0,    23,     0,    25,     0,     0,   137,     0,     0,
d2294 32
a2325 40
       0,     0,     0,    44,     0,     0,     0,     0,     0,    50,
      51,   138,   139,     0,     0,   140,   141,     0,   142,   143,
     144,   145,     0,     0,   146,    62,   147,    63,   134,     0,
       0,     0,     0,     0,     0,     0,   135,   136,   148,   149,
     742,     0,     0,     0,     0,     0,     0,     0,     0,   150,
       0,     0,     0,   151,   212,   152,   153,     0,   154,   155,
       0,     0,     0,     0,    23,     0,    25,     0,     0,   137,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,     0,     0,     0,     0,
       0,    50,    51,   138,   139,     0,     0,   140,   141,     0,
     142,   143,   144,   145,     0,     0,   146,    62,   147,    63,
     134,     0,     0,     0,     0,     0,     0,     0,   135,   136,
     148,   149,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   934,     0,     0,     0,   151,     0,   152,   153,     0,
     154,   155,     0,     0,     0,     0,    23,     0,    25,     0,
       0,   137,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,     0,     0,
       0,     0,     0,    50,    51,   138,   139,     0,     0,   140,
     141,     0,   142,   143,   144,   145,     0,     0,   146,    62,
     147,    63,   134,     0,     0,     0,     0,     0,     0,     0,
     135,   136,   148,   149,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,     0,     0,     0,   151,     0,   152,
     153,     0,   154,   155,     0,     0,     0,     0,    23,     0,
      25,     0,     0,   137,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
       0,     0,     0,     0,     0,    50,    51,   138,   139,     0,
       0,   140,   141,     0,   142,   143,   144,   145,     0,     0,
     146,    62,   147,    63,   134,     0,     0,     0,     0,     0,
       0,     0,   135,   136,   148,   149,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   388,     0,     0,     0,   389,
       0,   152,   153,     0,   154,   155,     0,     0,     0,     0,
      23,     0,    25,     0,     0,   137,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,     0,     0,     0,     0,     0,    50,    51,   138,
     139,     0,     0,   140,   141,   737,   142,   143,   144,   145,
      12,     0,   146,    62,   147,    63,     0,     0,     0,     0,
       0,     0,   503,     0,     0,     0,   148,   149,     0,     0,
       0,     0,     0,   504,     0,     0,     0,   150,     0,     0,
       0,   151,  -777,   152,   153,    13,    14,    15,    16,    17,
      18,    19,   505,    20,    21,    22,    23,    24,    25,    26,
d2329 48
a2376 38
      57,    58,     0,     0,     0,   536,    59,    60,    61,   506,
      12,    63,     0,     0,  -129,   738,     0,     0,     0,  -129,
       0,     0,  -129,     0,     0,     0,  -129,     0,     0,     0,
       0,     0,     0,  -129,  -129,     0,     0,     0,     0,     0,
    -129,     0,  -129,     0,     0,    13,    14,    15,    16,    17,
      18,    19,  -129,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   850,    59,    60,    61,    62,
      12,    63,     0,     0,  -128,     0,     0,     0,     0,  -128,
       0,     0,  -128,     0,     0,     0,  -128,     0,     0,     0,
       0,     0,     0,  -128,  -128,     0,     0,     0,     0,     0,
    -128,     0,  -128,     0,     0,    13,    14,    15,    16,    17,
      18,    19,  -128,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   563,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,   -75,
       0,     0,   -75,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   -75,     0,     0,     0,     0,     0,     0,
     -75,     0,   -75,     0,     0,    13,    14,    15,    16,    17,
      18,    19,   -75,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,  1203,    59,    60,    61,    62,
    -777,    63,     0,     0,     0,     0,     0,     0,     0,  -777,
       0,     0,  -777,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -777,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -777,  -777,  -777,  -777,  -777,
    -777,  -777,     0,  -777,  -777,  -777,  -777,  -777,  -777,  -777,
    -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,
    -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,
    -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,
    -777,  -777,     0,     0,     0,  1022,  -777,  -777,  -777,  -777,
      12,  -777,     0,     0,     0,  -777,     0,     0,     0,  -225,
d2379 7
a2385 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   297,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2388 7
a2394 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,   298,     0,     0,   521,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
a2396 16
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,   298,     0,     0,    11,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   130,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2398 6
a2404 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   344,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2407 7
a2413 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   536,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2421 2
a2422 2
      57,    58,     0,     0,     0,   541,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2425 7
a2431 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   557,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2434 7
a2440 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   674,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
a2442 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   703,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2444 6
a2450 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   799,    59,    60,    61,   506,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2453 7
a2459 34
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   852,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   870,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   994,    59,    60,    61,   506,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,  1062,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2467 2
a2468 2
      57,    58,     0,     0,     0,  1183,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
a2470 8
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    12,     0,     0,     0,    59,    60,    61,    62,
       0,    63,   134,     0,   927,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   928,     0,     0,     0,     0,
d2472 1
a2472 1
      16,    17,    18,    19,  -771,    20,    21,    22,    23,    24,
d2476 4
a2479 3
      55,    56,    57,    58,    12,     0,     0,     0,    59,    60,
      61,    62,     0,    63,     0,     0,   503,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   504,     0,     0,
d2481 1
a2481 1
      14,    15,    16,    17,    18,    19,   505,    20,    21,    22,
d2485 4
a2488 3
      53,    54,    55,    56,    57,    58,    12,     0,     0,     0,
      59,    60,    61,   506,     0,    63,   134,     0,   927,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   928,
d2494 7
a2500 6
      51,    52,    53,    54,    55,    56,    57,    58,    12,     0,
       0,     0,    59,    60,    61,    62,     0,    63,     0,     0,
    1232,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1233,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,  1234,    15,    16,    17,  1235,    19,
       0,  1236,  1237,    22,    23,    24,    25,    26,    27,    28,
d2502 4
a2505 3
      39,    40,    41,    42,    43,  1238,    45,    46,    47,    48,
      49,  1239,  1240,    52,    53,    54,    55,    56,    57,    58,
      12,     0,     0,     0,    59,    60,    61,  1241,     0,    63,
d2509 1
a2509 1
      18,    19,    97,    20,    21,    22,    23,    24,    25,    26,
d2513 3
a2515 2
      57,    58,    12,     0,     0,     0,    59,    60,    61,    62,
       0,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2522 3
a2524 11
      55,    56,    57,    58,   298,     0,     0,    12,    59,    60,
      61,    62,  -777,    63,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    13,    14,    15,    16,    17,    18,    19,     0,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    12,
       0,     0,     0,    59,    60,    61,    62,     0,    63,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2526 8
d2535 1
a2535 1
      19,     0,    20,    21,    22,    23,    24,    25,    26,    27,
d2539 3
a2541 11
      58,    12,     0,     0,     0,    59,    60,    61,    62,     0,
      63,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
      17,    18,    19,     0,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    12,     0,     0,     0,    59,    60,    61,
      62,     0,    63,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2547 3
a2549 2
      54,    55,    56,    57,    58,    12,     0,     0,     0,    59,
      60,    61,    62,     0,    63,     0,     0,     0,     0,     0,
d2551 6
d2558 66
a2623 6
      13,    14,    15,    16,    17,    18,    19,     0,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    12,     0,     0,
       0,    59,    60,    61,    62,     0,    63,     0,     0,     0,
d2630 3
a2632 2
      50,    51,    52,    53,    54,    55,    56,    57,    58,     0,
       0,     0,     0,    59,    60,    61,   506,     0,    63
d2649 2
a2650 4
       0,     0,     0,     0,     0,     0,     0,     0,     0,   163,
       0,     0,     0,     0,   165,     0,     0,     0,     0,     0,
       0,     0,   101,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   167,     0,
d2652 2
a2657 1
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2662 1
a2662 1
       0,     0,   103,     0,     0,     0,     0,     0,     0,     0,
d2665 1
d2670 2
a2671 2
      41,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,   169,     0,     0,     0,    71,     0,     0,    73,     0,
a2673 1
     171,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a2677 1
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
d2680 1
d2690 1
d2697 1
a2697 2
       0,     0,    67,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   117,     0,     0,     0,     0,     0,     0,     0,
a2698 2
       0,   119,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,     0,
d2700 1
d2702 2
d2710 1
d2718 1
a2718 1
       0,    25,     0,     0,     0,     0,     0,     0,     0,     0,
a2720 5
       0,     0,     0,     0,   157,     0,     0,     0,   159,     0,
       0,     0,   161,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    65,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    17,     0,     0,     0,    19,     0,
       0,     0,     0,     0,     0,    21,     0,     0,    23,     0,
d2722 2
d2725 2
a2727 2
       0,     0,     0,     0,     0,     0,     0,     0,    27,    29,
      31,    33,    35,     0,    37,     0,     0,     0,     0,     0,
d2741 1
a2741 1
      45,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2751 1
a2752 2
       0,     0,     0,     0,     0,     0,     0,    47,    49,    51,
      53,    55,     0,    57,     0,     0,     0,     0,     0,     0,
d2908 1
a2940 1
       0,     0,     0,     0,     0,     0,     0,    75,     0,     0,
d3220 1
d3224 2
d3229 1
d3233 3
d3238 1
a3240 1
      77,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d3243 2
a3245 2
       0,     0,     0,    79,    81,     0,     0,     0,     0,    83,
       0,     0,    85,     0,     0,     0,     0,    87,     0,     0,
a3248 1
     105,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a3251 2
       0,     0,     0,   107,   109,     0,     0,     0,     0,   111,
       0,     0,   113,     0,     0,     0,     0,   115,     0,     0,
a3254 1
      59,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a3258 1
      61,     0,     0,     0,     0,     0,     0,    63,     0,     0,
d3416 6
a3431 5
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     127,     0,     0,     0,     0,     0,     0,     0,   129,     0,
     131,     0,     0,     0,     0,   133,   135,     0,     0,     0,
       0,   137,   139,     0,     0,   141,   143,     0,     0,   145,
     147,     0,     0,     0,     0,   149,   151,     0,     0,     0,
a3432 1
       0,   153,     0,   155,     0,     0,     0,     0,     0,     0,
d3492 2
a3494 2
       0,     0,     0,     0,     1,     3,     0,     0,     0,     0,
       5,     0,     0,     7,     0,     0,     0,     0,     9,     0,
d3499 2
d3502 1
a3502 2
       0,     0,     0,     0,     0,     0,     0,     0,    11,     0,
       0,     0,     0,    13,     0,     0,     0,     0,     0,     0,
d3504 1
a3504 1
       0,     0,     0,     0,     0,     0,     0,     0,     0,    15,
a3505 1
       0,     0,     0,     0,     0,    89,     0,     0,     0,     0,
d3508 3
a3511 3
       0,     0,     0,     0,     0,     0,     0,     0,    91,    93,
       0,     0,     0,     0,    95,     0,     0,    97,     0,     0,
       0,     0,    99,     0,     0,     0,     0,     0,     0,     0,
d3522 1
a3522 1
       0,     0,     0,     0,     0,     0,     0,     0,     0
d3530 7
a3536 7
       0,   735,     0,   735,     0,   735,     0,   713,     0,   714,
       0,   717,     0,   715,     0,   777,     0,   777,     0,   710,
       0,   777,     0,   777,     0,   777,     0,   777,     0,   613,
       0,   613,     0,   613,     0,   752,     0,   752,     0,   752,
       0,   752,     0,   752,     0,   752,     0,   752,     0,    75,
       0,    75,     0,    75,     0,   514,     0,   595,     0,   621,
       0,   621,     0,   621,     0,   769,     0,   129,     0,   129,
d3539 8
a3546 8
       0,   622,     0,   622,     0,   128,     0,   128,     0,   128,
       0,   128,     0,   128,     0,   128,     0,   174,     0,   172,
       0,   174,     0,   581,     0,   524,     0,   524,     0,   524,
       0,   524,     0,   524,     0,   524,     0,   524,     0,   524,
       0,   524,     0,   524,     0,   524,     0,   524,     0,   524,
       0,   524,     0,   524,     0,   524,     0,   752,     0,   752,
       0,   752,     0,   146,     0,   146,     0,   146,     0,   142,
       0,   142,     0
d3551 226
a3776 152
       9,     9,    11,   152,    76,   277,   278,   526,   516,   478,
     163,   303,   423,   182,   627,   194,   403,   423,   526,   545,
     100,   170,   382,   861,   765,   766,   683,   587,   388,   923,
     127,   350,     1,     2,   326,   625,   204,   349,   350,   207,
     866,    10,   877,   132,   625,   389,   629,   185,   122,   640,
    1017,     1,   388,   544,   790,    64,     1,  1029,     1,   987,
      26,     1,   411,   534,   992,   900,    75,     1,     1,   861,
      62,    80,    80,   861,    83,   910,   463,     1,   169,     1,
      11,   102,     1,     1,    37,    38,  1285,    66,    15,    46,
       7,  1290,    15,   931,    51,     1,   105,     1,   839,   108,
     108,   181,     1,   997,     1,   114,   847,   734,   119,     1,
     670,    15,   133,    82,    83,    38,   127,    15,    75,   732,
       1,   119,   858,    15,     1,   123,   753,   119,   107,     1,
     279,   280,   281,    64,     1,   495,     1,   146,  1110,   931,
       1,   110,   111,   931,   734,   114,  1118,    64,    13,   984,
    1078,   120,   102,   734,   333,   896,   122,   493,   494,   102,
     537,     1,   102,   753,   343,   118,   100,   258,   137,   260,
       1,     1,   753,   118,   645,   118,   121,   120,   118,   122,
       1,   917,   122,   133,   193,     1,   677,   121,   122,   357,
     133,   118,     1,   133,   127,   118,   118,   121,   102,   118,
     124,  1168,  1169,   121,   122,   124,   175,   176,   177,   178,
     179,   180,   181,     1,   118,   121,   122,     1,   122,    15,
     118,   118,   121,   515,   121,   124,   118,   196,  1156,   133,
     122,   523,   524,   525,   640,   754,   596,   118,   829,     1,
     600,   601,   823,  1215,   121,  1080,   754,   124,   608,   121,
     122,   118,   124,   120,   121,   122,   121,   118,   706,   120,
     596,   122,   639,   442,   600,   708,    37,   347,  1196,   100,
    1198,   861,   621,   622,   348,   366,  1114,     1,   118,    55,
     861,   274,   122,   276,   100,   577,   295,  1181,   118,    26,
     121,   122,    26,   124,  1266,  1223,  1224,   118,     0,   120,
     819,    46,   935,   936,   861,   121,   122,   445,   124,     1,
      80,   819,   121,   122,   208,   284,   891,  1152,   287,    95,
      95,   553,   118,    95,    46,   617,   618,   336,     1,  1257,
      75,   340,    46,   121,   122,  1076,   120,   121,   108,   411,
     866,   931,   422,   119,   119,   100,   118,   118,   580,   932,
     931,   440,   933,     1,   935,   936,   118,   629,   120,   121,
    1195,   809,    95,   806,   119,     1,   534,     1,   337,   338,
     951,   120,   861,   122,   931,    99,   100,   370,   387,  1217,
       1,   725,  1208,   702,     1,  1279,   123,     1,   102,   123,
     702,  1226,   967,   968,     1,   289,   120,   121,   122,    90,
    1141,     1,   411,   127,   413,    96,   596,  1148,    15,   119,
     600,   380,   381,   422,   883,    15,  1049,  1074,  1075,   388,
     389,   118,   430,   829,    95,   836,     1,   436,   120,   121,
     836,   991,     7,   505,    41,   126,   405,    15,   407,    46,
      15,   513,   931,   412,   119,   118,   415,   120,   417,   418,
     118,   420,   421,   422,   118,   552,  1197,   426,   427,    37,
      38,   102,   951,   989,   544,    72,   435,   118,  1049,     1,
     439,   440,   120,   121,  1064,    53,   644,  1216,   119,   448,
     449,   578,    14,  1064,   120,   121,   120,   121,   119,    64,
       0,    98,   133,   661,   463,   102,   127,   665,    30,   120,
     121,  1020,     1,   120,   121,   974,   120,   121,     7,    10,
     118,   118,  1020,   120,    15,   122,    15,     1,   118,   906,
     120,    31,   491,     7,   493,   494,    95,    46,    98,  1268,
    1269,    15,   102,     1,   503,   504,   545,   716,    37,     7,
     118,   118,   100,   118,   553,   120,    41,    15,   517,   621,
     622,   560,   624,    72,    53,     1,  1025,   963,   964,   528,
     120,    71,   120,   133,   122,    64,   535,    95,   537,    15,
       1,   580,    42,   542,   120,   121,    15,    72,   587,    98,
      64,   120,   121,   102,    15,    95,     8,   556,    55,   861,
      12,    61,    56,    96,   954,    41,    64,    95,   567,    38,
      46,    23,    98,    98,   120,   121,   102,   102,    78,   120,
      41,   122,   621,   622,    53,    46,     6,   120,   627,   118,
     123,    43,   125,   126,   127,    15,    72,   596,    18,   120,
     121,   600,  1158,  1159,   118,   927,   928,   133,   803,    29,
     805,    72,   118,    36,   916,    38,   119,    69,    70,  1060,
     118,  1011,    98,   119,  1060,    48,   102,    99,   100,   931,
     932,   670,  1275,   119,   696,    55,   698,    98,     6,    46,
     639,   102,   118,    63,   120,    52,     1,    15,   119,   118,
      18,   761,  1208,    60,   692,   119,   405,   118,   407,   120,
      15,    29,   114,   115,   116,   117,   838,   706,   840,   868,
     780,    26,   415,  1229,   417,    96,   786,   787,   130,   131,
     679,   719,    46,   785,   136,   120,    41,    51,    52,   119,
      54,    46,   121,   732,    72,    63,    60,   696,  1000,   698,
     699,     1,   123,    96,   125,   126,   127,   120,   121,   708,
     709,    75,    76,    77,  1016,  1017,    10,    72,  1274,   118,
      98,   904,     1,   459,   102,   461,   725,   120,   121,    67,
     123,     1,   125,   126,   127,   120,    15,   100,  1287,   120,
     121,    21,     7,    98,    35,    15,   120,   102,    21,  1287,
     127,  1250,    52,  1194,    54,   127,   935,   119,  1194,    96,
      60,   122,    41,   118,   119,   120,   121,    46,   123,   124,
     809,    41,   127,    73,   120,   121,    46,   439,   440,    79,
      80,   337,   338,   120,   783,   784,   123,     6,   125,   126,
     127,    10,   127,    72,   119,    95,  1295,    97,   119,    18,
     913,   914,    72,    22,   803,   119,   805,   806,   119,   808,
      29,   913,   914,   118,   783,   784,    96,   124,    98,    98,
     119,    10,   102,   102,   120,   824,    30,   866,    98,    18,
      49,    50,   102,    22,  1136,  1137,  1115,  1116,    55,   118,
      29,   120,   841,   123,    63,   125,   126,   127,   118,   119,
     120,   121,   122,   133,   124,  1268,  1269,  1095,  1096,    90,
      49,    50,   621,   622,   118,    96,  1168,  1169,  1068,  1069,
    1071,  1072,   360,   361,    63,   120,     6,    26,   122,   118,
     919,   920,   921,   922,   923,    15,   122,   926,    18,   120,
     929,   122,   891,    64,   124,   126,   124,   120,     1,    29,
      30,    38,   120,   118,    99,   121,     9,   906,   122,   118,
     116,   118,   118,    16,   119,  1217,   118,   118,   118,    49,
      50,    24,    25,    15,    30,    15,   122,   100,   122,    32,
     123,    34,   122,    63,   933,   934,   935,   936,  1260,  1261,
    1262,  1263,    15,    95,   150,   151,   152,   119,     7,    52,
     989,    54,   991,   159,    57,   119,   119,    60,   997,   118,
     122,    27,   122,   169,   170,   119,   122,   122,   967,   968,
      73,   970,    13,    13,   127,  1014,    79,    80,    81,    82,
      15,   120,    85,    86,    26,    88,    89,    90,    91,   120,
       1,    94,    95,    96,    97,    26,     9,    26,   204,    65,
     206,   207,    35,   122,    15,   108,   109,   119,    74,   118,
      75,  1050,    51,   124,   118,   123,   119,   122,   120,   120,
     123,   120,   125,   126,   100,   128,   129,    53,    42,   118,
      41,    26,   123,   100,   118,    46,    48,   103,   118,   118,
     118,   118,   108,   109,   110,   111,   112,   113,   118,    26,
    1049,   257,   258,   124,   260,    13,  1095,  1096,    13,    15,
      54,    72,   128,   129,    61,    26,    15,    15,   274,   135,
     276,   277,   278,   279,   280,   281,    78,    11,   284,   122,
     100,    26,   120,   119,   121,    44,   292,    98,   122,    15,
     120,   102,   120,    52,   119,    54,   120,   118,    13,    26,
      59,    60,   124,  1205,    26,   124,   123,   118,   119,   120,
     121,   122,   118,   124,    73,  1114,   120,   122,    15,  1158,
      79,    80,  1121,    15,  1123,  1164,  1165,   118,    95,  1167,
     122,   119,   119,   195,   120,   120,    95,    70,    97,   964,
     813,    16,  1181,     9,   709,   573,   352,   556,   105,   715,
      16,   357,  1190,   359,   360,   361,   796,   565,   436,   542,
     366,  1190,    28,   369,   370,   371,   931,  1205,   951,  1208,
      36,  1217,  1165,   921,   380,   349,   382,    52,   580,    54,
     740,  1064,   388,   389,   114,    60,    52,   823,    54,  1270,
     665,   780,  1158,   257,    60,   776,   842,   403,    73,  1159,
     818,   491,   408,   491,    79,    80,   492,    73,   181,   284,
      21,   181,   645,    79,    80,    70,    27,    -1,    -1,    -1,
      95,    -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    95,
      -1,    97,    -1,  1232,  1233,    -1,  1275,  1236,  1237,    -1,
    1279,    -1,    -1,    -1,    -1,    -1,  1285,    -1,    -1,    -1,
      -1,  1290,   458,   459,    65,   461,    -1,   463,    -1,    -1,
      -1,    31,    -1,    74,    -1,    -1,    -1,   473,   474,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    52,   489,    54,   491,    -1,   493,   494,   495,
      60,    -1,   103,   104,   105,   106,    16,   108,   109,   110,
     111,   112,   113,    73,    24,    25,    -1,    -1,    28,    79,
      80,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,   132,   133,   134,   135,    95,    -1,    97,   534,    -1,
      -1,    -1,    52,    -1,    54,    -1,    52,    57,    54,    -1,
      60,    -1,    -1,   549,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    -1,    -1,    73,    -1,    79,
      80,    81,    82,    79,    80,    85,    86,    -1,    88,    89,
      90,    91,    88,    -1,    94,    95,    96,    97,    -1,    95,
      -1,    97,    -1,    52,   590,    54,    -1,   593,   108,   109,
     596,    60,    -1,    -1,   600,   601,    -1,   603,    -1,   119,
      -1,    -1,   608,   123,    73,   125,   126,    -1,   128,   129,
      79,    80,    -1,    -1,    -1,    -1,    -1,    -1,     6,   625,
      -1,    -1,    10,   629,    -1,    -1,    95,    15,    97,    -1,
      18,    -1,    -1,    -1,    22,    -1,    -1,   643,   644,   645,
     646,    29,    30,    -1,    -1,   651,    -1,    -1,   116,    -1,
     118,    -1,   658,    -1,    -1,   661,    -1,    -1,    -1,   665,
      -1,    49,    50,    -1,     1,    -1,    -1,    -1,    -1,    -1,
      58,    -1,     9,    -1,    -1,    63,    -1,   683,    -1,    16,
      -1,    18,   150,   151,    -1,    -1,    -1,    24,    25,    -1,
d3778 25
a3802 90
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      47,    -1,    -1,    -1,   720,    52,    -1,    54,    -1,   725,
      57,    -1,    -1,    60,    -1,    -1,    -1,    -1,   734,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    -1,   206,    -1,
      -1,    -1,    79,    80,    81,    82,    -1,   753,    85,    86,
      -1,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,   773,   774,    -1,
     776,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,    -1,    -1,    -1,   123,    -1,   125,   126,
      -1,   128,   129,    -1,    -1,    -1,    -1,    -1,    -1,    16,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    16,
      -1,    -1,    -1,    -1,    -1,    -1,   284,   823,    -1,   825,
      -1,    28,    -1,    -1,   292,   831,    -1,   833,    -1,    -1,
      -1,   837,   838,    -1,   840,    52,    -1,    54,    -1,    -1,
      57,    -1,   848,    60,    -1,    52,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    60,    -1,   861,    73,    -1,   864,   865,
      -1,    -1,    79,    80,    81,    82,    73,    -1,    85,    86,
      -1,    -1,    79,    80,    -1,    -1,    -1,    94,    95,    -1,
      97,    -1,    -1,    -1,   352,    -1,    -1,   893,    95,   357,
      97,   359,   360,   361,    -1,    -1,    -1,    -1,    -1,    -1,
     906,    -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     916,    -1,   380,    -1,   382,    -1,    -1,    -1,    -1,    -1,
     388,   389,    -1,    -1,    -1,   931,   932,    -1,   934,   935,
      97,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,    -1,    -1,    -1,    -1,   951,    -1,    -1,   954,    -1,
      -1,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   983,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     458,   459,    -1,   461,  1000,   463,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1011,    -1,    -1,    -1,    -1,
    1016,  1017,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   489,    -1,   491,    -1,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1043,  1044,  1045,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1064,    -1,
      -1,    -1,  1068,  1069,    -1,  1071,  1072,    -1,  1074,  1075,
      -1,    -1,    -1,  1079,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   549,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1108,    -1,    -1,    -1,    -1,    -1,  1114,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   590,  1129,    -1,   593,    -1,    -1,   596,    -1,
    1136,  1137,   600,   601,    -1,   603,    -1,    -1,    -1,    -1,
     608,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1160,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1168,  1169,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   643,    -1,    -1,   646,  1185,
      -1,  1187,    -1,   651,    -1,    -1,    -1,    -1,    -1,    -1,
     658,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       9,    -1,    -1,  1209,    -1,    -1,    -1,    16,    -1,    18,
    1216,  1217,    -1,    -1,    -1,    24,    25,    -1,    -1,    28,
      29,    -1,    -1,    32,    -1,    34,    -1,    36,    -1,    -1,
      -1,    -1,  1238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    54,    -1,    -1,    57,    -1,
      -1,    60,   720,    -1,    -1,    -1,    -1,   725,    -1,    68,
      -1,    -1,  1268,  1269,    73,    -1,    -1,    -1,    -1,    -1,
      79,    80,    81,    82,  1280,    -1,    85,    86,    -1,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   773,    -1,    -1,   776,    -1,
     119,    -1,    -1,    -1,   123,    -1,   125,   126,    -1,   128,
     129,    -1,     1,    -1,    -1,    -1,    -1,    -1,     7,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    15,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    24,    25,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   825,    -1,    -1,
      -1,    -1,    -1,   831,    -1,   833,    -1,    -1,    -1,   837,
     838,    -1,   840,    52,    -1,    54,    -1,    -1,    57,    -1,
     848,    60,    -1,    -1,    -1,    64,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   861,    73,    -1,   864,   865,    -1,    -1,
      79,    80,    81,    82,    -1,    -1,    85,    86,    -1,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   906,    -1,
     119,    -1,    -1,    -1,   123,     1,   125,   126,    -1,   128,
     129,     7,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
      16,    -1,    -1,   931,    -1,    -1,   934,    -1,    24,    25,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   951,    -1,    -1,   954,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,
      -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    64,    -1,
      -1,    -1,    -1,    -1,    -1,   983,    -1,    73,    -1,    -1,
      -1,    -1,    -1,    79,    80,    81,    82,    -1,    -1,    85,
      86,    -1,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    97,    -1,  1011,    -1,    -1,    -1,    -1,  1016,  1017,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,   123,    -1,   125,
     126,    -1,   128,   129,    -1,  1043,  1044,  1045,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d3804 11
a3814 19
      25,  1079,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1100,    -1,    -1,    -1,    -1,    52,    -1,    54,
    1108,    -1,    57,    -1,    -1,    60,  1114,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,  1129,    -1,    -1,    79,    80,    81,    82,    -1,    -1,
      85,    86,    -1,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1160,   108,   109,    -1,    -1,    -1,    -1,    -1,
    1168,  1169,    -1,    -1,   119,    -1,    -1,    -1,   123,    -1,
     125,   126,    -1,   128,   129,    -1,    -1,  1185,    -1,  1187,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1217,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,
       8,    -1,    -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    -1,    23,    -1,    -1,    -1,    27,
a3815 12
      -1,    -1,  1280,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,
     128,   129,   130,   131,   132,   133,   134,   135,   136,    16,
      -1,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d3821 5
a3825 19
      87,    -1,    -1,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,     1,    -1,
      -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    11,    -1,
      -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    24,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,   108,   109,    -1,    -1,     6,
      -1,    -1,    -1,    -1,    11,    -1,   119,    -1,    -1,    16,
     123,   124,   125,   126,    -1,   128,   129,    24,    25,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d3831 8
a3838 5
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,   108,   109,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      11,    -1,   119,    -1,    -1,    16,   123,   124,   125,   126,
      -1,   128,   129,    24,    25,    -1,    -1,    -1,    -1,    -1,
d3845 24
a3868 4
      91,    92,    93,    94,    95,    96,    97,     1,    -1,    -1,
      -1,    -1,     6,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,   119,    -1,
      24,    25,   123,    -1,   125,   126,    -1,   128,   129,    -1,
d3875 20
a3894 33
      94,    95,    96,    97,     1,    -1,    -1,    -1,    -1,     6,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    16,
      -1,    -1,    -1,    -1,    -1,   119,    -1,    24,    25,   123,
      -1,   125,   126,    -1,   128,   129,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,     1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,    16,    -1,    -1,    -1,
      -1,    -1,   119,    -1,    24,    25,   123,    -1,   125,   126,
      -1,   128,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,     1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,   119,
      -1,    24,    25,   123,    -1,   125,   126,    -1,   128,   129,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
      -1,    54,    -1,    -1,    57,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
       1,    -1,    85,    86,    -1,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    97,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
     123,    -1,   125,   126,    -1,   128,   129,    -1,    -1,    -1,
d3896 42
a3937 7
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
      81,    82,     1,    -1,    85,    86,    -1,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    97,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    24,    25,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
      -1,    -1,   123,    -1,   125,   126,    -1,   128,   129,    -1,
d3939 15
a3953 17
      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
      79,    80,    81,    82,     1,    -1,    85,    86,    -1,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    97,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,   123,    -1,   125,   126,    -1,   128,
     129,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    79,    80,    81,    82,     1,    -1,    85,    86,
      -1,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      97,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      25,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,    -1,    -1,    -1,   123,    -1,   125,   126,
      -1,   128,   129,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    -1,
d3955 12
a3966 14
      -1,    -1,    -1,    -1,    79,    80,    81,    82,     1,    -1,
      85,    86,    -1,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    97,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    24,    25,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,   123,    -1,
     125,   126,    -1,   128,   129,    -1,    -1,    -1,    -1,    52,
      -1,    54,    -1,    -1,    57,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
       1,    -1,    85,    86,    -1,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    97,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
     123,    -1,   125,   126,    -1,   128,   129,    -1,    -1,    -1,
d3968 14
a3981 16
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
      81,    82,     1,    -1,    85,    86,    -1,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    97,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    24,    25,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
      -1,    -1,   123,    -1,   125,   126,    -1,   128,   129,    -1,
      -1,    -1,    -1,    52,    -1,    54,    -1,    -1,    57,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
      79,    80,    81,    82,     1,    -1,    85,    86,    -1,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    97,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,   123,    -1,   125,   126,    -1,   128,
     129,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,
d3984 13
a3996 23
      -1,    -1,    79,    80,    81,    82,     1,    -1,    85,    86,
      -1,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      97,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      25,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,    -1,    -1,    -1,   123,    -1,   125,   126,
      -1,   128,   129,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    79,    80,    81,    82,     1,    -1,
      85,    86,    -1,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    97,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    24,    25,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,   123,    -1,
     125,   126,    -1,   128,   129,    -1,    -1,    -1,    -1,    52,
      -1,    54,    -1,    -1,    57,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
       1,    -1,    85,    86,    -1,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    97,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
     123,    -1,   125,   126,    -1,   128,   129,    -1,    -1,    -1,
      -1,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,
d3998 10
a4007 24
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
      81,    82,    -1,    -1,    85,    86,    -1,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    97,     6,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
      -1,    -1,   123,    -1,   125,   126,    -1,   128,   129,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,     6,    92,    93,    94,    95,    -1,    97,    -1,
      -1,    -1,    16,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      24,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,   133,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,     6,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,    -1,    16,   123,
      -1,   125,   126,    -1,   128,   129,    24,    25,    -1,    -1,
d4015 4
a4018 24
      -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
     108,   109,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,
      -1,   119,    24,    25,    -1,   123,    -1,   125,   126,    -1,
     128,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,
       6,    -1,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      16,    -1,    -1,    -1,    -1,    -1,    -1,   119,    24,    25,
      -1,   123,    -1,   125,   126,    -1,   128,   129,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,     6,    -1,    -1,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    16,   123,    18,   125,
     126,    -1,   128,   129,    24,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4024 6
a4029 6
      90,    91,    92,    93,    94,    95,    96,    97,    -1,     1,
      -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    18,    -1,    -1,   119,
      -1,    -1,    -1,   123,    -1,   125,   126,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
d4033 23
a4055 2
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      92,    93,    94,    95,    -1,    97,     1,    -1,    -1,   101,
d4057 1
a4057 1
      15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,
d4064 28
a4091 27
      85,    86,    87,    -1,    -1,    -1,    -1,    92,    93,    94,
      95,     8,    97,    10,    11,    -1,    -1,    -1,    -1,    16,
      17,    -1,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      27,    -1,    -1,    -1,    -1,   120,    33,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    -1,    -1,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    70,    -1,    -1,    73,    74,    -1,    -1,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    -1,    -1,    92,    93,    94,    95,     8,
      97,    10,    11,    -1,    -1,    -1,    -1,    16,    17,    -1,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    27,    -1,
      -1,    -1,   119,    -1,    33,    -1,    -1,    -1,   125,    -1,
      39,    40,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    54,    -1,    -1,    57,    -1,
      -1,    60,    -1,    15,    16,    -1,    -1,    -1,    -1,    -1,
      69,    70,    24,    25,    73,    74,    -1,    -1,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,    73,    -1,    -1,    -1,    -1,   125,    79,    80,    81,
      82,    -1,    -1,    85,    86,    -1,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    97,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    24,    25,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,
      -1,   123,    -1,   125,   126,    -1,   128,   129,    -1,    -1,
d4094 31
a4124 39
      -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,
      80,    81,    82,    -1,    -1,    85,    86,    -1,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    97,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    24,    25,   108,   109,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
      -1,    -1,    -1,   123,   124,   125,   126,    -1,   128,   129,
      -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,    57,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
      -1,    79,    80,    81,    82,    -1,    -1,    85,    86,    -1,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    97,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,    -1,    -1,    -1,   123,    -1,   125,   126,    -1,
     128,   129,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,
      -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    -1,    -1,    79,    80,    81,    82,    -1,    -1,    85,
      86,    -1,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    97,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      24,    25,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,   123,    -1,   125,
     126,    -1,   128,   129,    -1,    -1,    -1,    -1,    52,    -1,
      54,    -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,
      -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,    -1,
      -1,    85,    86,    -1,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    97,    16,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    24,    25,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,    -1,    -1,    -1,    -1,
      52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,
      82,    -1,    -1,    85,    86,     1,    88,    89,    90,    91,
       6,    -1,    94,    95,    96,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    18,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    -1,   119,    -1,    -1,
      -1,   123,    38,   125,   126,    41,    42,    43,    44,    45,
d4129 39
a4167 38
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    10,   101,    -1,    -1,    -1,    15,
      -1,    -1,    18,    -1,    -1,    -1,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    38,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    10,    -1,    -1,    -1,    -1,    15,
      -1,    -1,    18,    -1,    -1,    -1,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    38,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    38,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    11,    -1,    -1,    -1,    15,
d4175 2
a4176 2
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4179 7
a4185 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4188 7
a4194 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a4196 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4198 6
a4204 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4207 7
a4213 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4221 2
a4222 2
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4225 7
a4231 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4234 7
a4240 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a4242 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4244 6
a4250 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4253 7
a4259 34
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4267 2
a4268 2
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a4270 8
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,     6,    -1,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    16,    -1,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
d4272 1
a4272 1
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
d4276 4
a4279 3
      84,    85,    86,    87,     6,    -1,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,
d4281 1
a4281 1
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
d4285 4
a4288 3
      82,    83,    84,    85,    86,    87,     6,    -1,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    16,    -1,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
d4294 5
a4298 4
      80,    81,    82,    83,    84,    85,    86,    87,     6,    -1,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4304 2
a4305 1
       6,    -1,    -1,    -1,    92,    93,    94,    95,    -1,    97,
d4309 1
a4309 1
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
d4313 3
a4315 2
      86,    87,     6,    -1,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4322 3
a4324 2
      84,    85,    86,    87,    88,    -1,    -1,     6,    92,    93,
      94,    95,    11,    97,    -1,    -1,    -1,    -1,    -1,    -1,
d4326 24
d4351 6
a4356 6
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,     6,
      -1,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
d4360 1
a4360 1
      47,    -1,    49,    50,    51,    52,    53,    54,    55,    56,
d4364 18
a4381 2
      87,     6,    -1,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a4382 7
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,     6,    -1,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4384 7
a4390 7
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,     6,    -1,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    -1,    -1,    -1,    -1,
d4397 27
a4423 2
      81,    82,    83,    84,    85,    86,    87,     6,    -1,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    -1,    -1,
d4430 3
a4432 2
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    92,    93,    94,    95,    -1,    97
d4439 2
a4440 2
       0,    31,    71,    95,   138,   139,   142,   149,   154,   171,
     410,     1,     6,    41,    42,    43,    44,    45,    46,    47,
d4444 128
a4571 125
      79,    80,    81,    82,    83,    84,    85,    86,    87,    92,
      93,    94,    95,    97,   400,   401,   403,   404,   400,     0,
     145,    46,   174,   277,   415,   400,   119,   173,   415,   173,
     118,   154,   410,   119,   140,   118,    55,    95,   172,   173,
     396,   397,   400,   118,   118,   174,   400,    48,   278,   279,
     400,   415,   181,   182,   118,   150,   146,   148,   118,   120,
       1,   121,    95,   120,   121,   102,   119,   133,   413,   191,
      56,   183,   155,   172,    95,   152,   156,   157,   174,   400,
       1,   400,   143,   279,    16,    24,    25,    57,    81,    82,
      85,    86,    88,    89,    90,    91,    94,    96,   108,   109,
     119,   123,   125,   126,   128,   129,   344,   345,   347,   349,
     350,   351,   353,   354,   355,   360,   361,   367,   380,   383,
     384,   402,   403,   344,   403,     6,    18,    22,    29,    49,
      50,    63,   141,   192,   194,   195,   201,   266,   269,   270,
     271,   184,   185,   400,   156,   151,   153,   118,     1,   127,
     414,   183,   181,   400,   119,   119,   119,   119,   119,   362,
     415,   344,   124,   344,   381,   382,   350,    97,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   356,   120,    21,    27,    65,
      74,   103,   104,   105,   106,   108,   109,   110,   111,   112,
     113,   128,   129,   132,   133,   134,   135,   385,   386,   388,
     392,     8,    12,    23,    43,    69,    70,   114,   115,   116,
     117,   130,   131,   136,   387,   389,   393,    44,    59,   403,
      66,   107,   355,    96,   123,   125,   126,   127,   412,   119,
     347,   350,   121,   202,   203,   400,   400,     1,    88,   209,
     210,   395,   400,   400,   400,   400,     8,    12,    21,    23,
      27,   103,   104,   105,   106,   107,   108,   109,   128,   129,
     130,   131,   132,   134,   135,   136,   281,   391,   392,   393,
     400,   413,    10,   299,   205,   206,   118,     1,   118,    67,
     186,   415,   414,   152,     1,   175,   176,   400,   147,   198,
     196,   360,   363,   344,   365,   366,   360,   363,   120,   100,
       1,   121,   124,     7,   345,   347,   346,   347,    35,   349,
     348,   349,   358,   359,   403,   358,   350,   350,   350,     1,
      11,    57,    64,    81,    82,    85,    86,    94,   119,   123,
     344,   368,   369,   370,   371,   373,   374,   378,   379,   400,
     403,   400,   120,   363,   344,     1,   118,   121,    21,   204,
     415,   119,   127,   283,   415,     1,   118,   121,   127,   283,
     127,   127,   283,   405,   414,    36,    38,    48,   207,   273,
     276,   415,   185,   185,    62,   119,   187,   415,   414,     1,
     118,   413,   156,   158,   199,   200,   201,   266,    18,    29,
     144,   197,   201,   205,   265,   270,   120,   344,   122,     1,
     120,   121,   120,   121,     1,   344,   360,   364,   344,   382,
       1,   382,   347,   349,   127,   344,   400,   344,   374,   120,
     344,   374,   375,   377,   379,     1,   344,   368,   378,   100,
     124,   118,   411,     1,   121,   122,   124,   364,   120,   203,
     203,   344,     1,    18,    29,    48,    95,   101,   120,   284,
     285,   289,   396,   409,   415,   400,   287,   288,   413,   415,
     210,     1,   210,   400,   400,   400,   282,   400,   413,   415,
      38,   300,   301,   306,   307,   208,     1,   213,   214,   398,
     400,     1,   211,   212,   400,    51,    52,    54,    60,    75,
      76,    77,   267,   274,   277,   280,   119,     1,   188,   189,
     400,   204,   176,     1,   176,   181,    95,   119,   177,   178,
     414,    30,   166,   167,   169,   205,   400,   400,    55,   159,
     118,   120,   344,   366,     1,   366,   364,   400,   120,   120,
     121,   403,    26,   122,   118,   411,     1,   118,   120,   121,
     376,   122,   124,   100,   124,   344,   370,   371,    64,   373,
     344,   379,     1,   379,   374,   120,   120,   400,   400,   396,
     120,     1,   118,   120,    38,   122,   396,   283,     1,   122,
     286,   305,   416,   400,   283,   283,   283,   286,   400,   302,
     118,   406,     8,    11,    17,    19,    20,    25,    27,    33,
      39,    40,    45,    69,    70,    74,    83,    84,    87,    92,
      93,   125,   299,   308,   309,   321,   324,   335,   337,   360,
     390,   394,   395,   403,     1,   223,   224,   400,   214,   121,
     407,   212,   407,   413,   352,   353,   415,   118,   344,   118,
     118,   183,   276,   118,   118,   188,     1,   120,   121,    99,
     190,   415,   196,     1,   179,   180,   399,   400,   409,   119,
      10,    15,    15,    30,   169,   183,    15,   272,   273,   276,
     122,   120,   362,     1,   344,   123,   372,   344,   377,   377,
     374,   344,   283,   283,   122,   290,   285,     1,   101,   285,
     396,     9,    28,    36,   291,   292,   293,   294,   297,   298,
     358,   367,   408,   122,   287,   357,   358,   214,   301,    15,
     344,   360,   394,   403,   344,   314,   317,     1,   322,   323,
     344,    95,   338,   119,   119,   344,   119,   360,   309,     7,
     310,   362,   122,     1,   118,   119,   228,   407,   400,   122,
     122,   343,   344,    95,   118,   118,   193,   120,   189,     1,
     189,   400,    15,     1,   120,   121,   100,   190,   127,   399,
     179,    13,    13,   191,   414,   344,   120,   368,    26,   287,
     291,   120,   290,    26,   123,    26,     9,   291,   286,   303,
      26,    21,    98,   336,   413,    35,   405,   405,     1,    13,
     121,   122,   119,   344,    31,   403,   365,   311,   336,   224,
       1,   224,     1,   229,   230,   396,     1,   413,   413,   231,
     232,   233,   231,   118,   275,    75,    51,   194,   268,   180,
       1,   180,   399,   400,   190,   120,   168,   170,    10,    58,
     160,   163,   166,   124,   372,   286,   298,   295,   296,   400,
     344,   123,   301,   312,   344,   344,   325,   300,   344,   323,
     405,     1,   323,   400,   354,   120,   121,   120,   120,   120,
     405,   344,   120,     1,   118,   120,   122,   225,    61,    78,
     226,   227,   231,   215,   277,     9,    16,    18,    29,    32,
      34,    47,    68,    96,   119,   125,   126,   234,   235,   238,
     251,   252,   254,   255,   257,   292,   344,   357,   358,   367,
     403,   408,   412,   416,   102,   344,   344,   352,   299,   304,
     305,   306,   304,   161,   164,    53,   411,     1,   118,   124,
     100,   296,     1,   328,   329,   330,   332,   333,   343,   320,
       1,    14,    30,   334,   405,    37,   318,   304,   120,   122,
     364,   400,   304,   230,     1,   230,   358,   231,   118,   100,
     119,   258,   415,    42,   259,   415,   259,    72,    98,   102,
     263,   264,   415,    41,   221,   263,   123,   123,   239,   415,
     283,   283,     1,   242,   243,   244,   245,   396,   415,    26,
     235,   357,   256,   257,   367,   400,     1,   253,   400,   256,
     367,    97,   256,   100,   119,   123,   236,   238,   344,    48,
     374,   118,   118,   118,   118,   118,   118,   165,   300,   165,
     162,   296,     1,   296,    26,   400,   124,   313,     1,   118,
     411,     1,   121,   122,     1,   100,    13,   344,   304,   315,
      13,   406,   339,   340,   341,   353,   415,   120,   362,   406,
     263,    54,    15,     1,   358,    61,    78,     1,   374,     1,
     222,   216,   415,     1,   240,   241,   251,   358,   408,   241,
      26,   286,    15,    15,    11,     1,   118,   411,   122,   232,
     120,     1,   120,   121,   344,     1,   237,   344,   344,   100,
     256,   219,   415,   300,     9,   293,   122,    26,     7,    64,
     326,   327,   330,     1,   330,   333,     1,   333,   331,   343,
       1,   343,   405,   319,   406,   344,   304,   120,   122,   121,
     119,   120,   120,   120,   258,   258,   344,   118,     1,   121,
     124,   124,   232,   247,   250,   251,   400,   403,   245,     1,
     245,   232,   400,     1,   400,     1,   120,   121,   124,   344,
     118,   358,   358,    15,   405,   405,   304,    13,   316,   406,
     339,   341,   344,     1,   260,   261,   415,   260,    51,    75,
     217,   220,   277,   241,   241,    26,    26,   122,   263,   344,
       1,   344,   220,   300,   304,   406,   405,   406,   120,   122,
     120,    15,    18,    29,    42,    46,    49,    50,    73,    79,
      80,    95,   262,   277,   396,    15,   352,   344,   232,     1,
     248,   249,   332,   250,   358,   406,   406,   304,   342,   353,
     400,   400,   400,   400,   344,   118,   122,    95,     1,   118,
     411,   122,   406,   120,   121,   283,   283,   283,   283,   232,
     218,   249,   249,   246,   327,   119,   353,   287,   263,   344,
     119,   242,   286,   242,   120,   120,   411
d5008 1
a5008 1
#line 212 "parse.y"
d5013 1
a5013 1
#line 214 "parse.y"
d5024 1
a5024 1
#line 225 "parse.y"
d5029 1
a5029 1
#line 227 "parse.y"
d5034 1
a5034 1
#line 229 "parse.y"
d5039 1
a5039 1
#line 231 "parse.y"
d5044 1
a5044 1
#line 236 "parse.y"
d5049 1
a5049 1
#line 238 "parse.y"
d5054 1
a5054 1
#line 240 "parse.y"
d5059 1
a5059 1
#line 244 "parse.y"
d5064 1
a5064 1
#line 246 "parse.y"
d5073 1
a5073 1
#line 252 "parse.y"
d5078 1
a5078 1
#line 254 "parse.y"
d5086 1
a5086 1
#line 260 "parse.y"
d5091 1
a5091 1
#line 266 "parse.y"
d5096 1
a5096 1
#line 268 "parse.y"
d5101 1
a5101 1
#line 270 "parse.y"
d5106 1
a5106 1
#line 275 "parse.y"
d5111 1
a5111 1
#line 277 "parse.y"
d5116 1
a5116 1
#line 282 "parse.y"
d5121 1
a5121 1
#line 287 "parse.y"
d5126 1
a5126 1
#line 289 "parse.y"
d5131 1
a5131 1
#line 294 "parse.y"
d5136 1
a5136 1
#line 300 "parse.y"
d5141 1
a5141 1
#line 304 "parse.y"
d5146 1
a5146 1
#line 306 "parse.y"
d5151 1
a5151 1
#line 312 "parse.y"
d5156 1
a5156 1
#line 318 "parse.y"
d5161 1
a5161 1
#line 330 "parse.y"
d5166 1
a5166 1
#line 332 "parse.y"
d5171 1
a5171 1
#line 337 "parse.y"
d5176 1
a5176 1
#line 339 "parse.y"
d5181 1
a5181 1
#line 344 "parse.y"
d5186 1
a5186 1
#line 346 "parse.y"
d5191 1
a5191 1
#line 348 "parse.y"
d5196 1
a5196 1
#line 353 "parse.y"
d5201 1
a5201 1
#line 359 "parse.y"
d5206 1
a5206 1
#line 370 "parse.y"
d5211 1
a5211 1
#line 372 "parse.y"
d5216 1
a5216 1
#line 374 "parse.y"
d5221 1
a5221 1
#line 376 "parse.y"
d5226 1
a5226 1
#line 381 "parse.y"
d5231 1
a5231 1
#line 386 "parse.y"
d5236 1
a5236 1
#line 389 "parse.y"
d5241 1
a5241 1
#line 394 "parse.y"
d5246 1
a5246 1
#line 400 "parse.y"
d5251 1
a5251 1
#line 402 "parse.y"
d5256 1
a5256 1
#line 404 "parse.y"
d5261 1
a5261 1
#line 406 "parse.y"
d5266 1
a5266 1
#line 411 "parse.y"
d5271 1
a5271 1
#line 413 "parse.y"
d5276 1
a5276 1
#line 415 "parse.y"
d5281 1
a5281 1
#line 419 "parse.y"
d5286 1
a5286 1
#line 432 "parse.y"
d5291 1
a5291 1
#line 437 "parse.y"
d5296 1
a5296 1
#line 448 "parse.y"
d5301 1
a5301 1
#line 450 "parse.y"
d5306 1
a5306 1
#line 456 "parse.y"
d5311 1
a5311 1
#line 458 "parse.y"
d5316 1
a5316 1
#line 460 "parse.y"
d5321 1
a5321 1
#line 462 "parse.y"
d5326 1
a5326 1
#line 467 "parse.y"
d5331 1
a5331 1
#line 473 "parse.y"
d5336 1
a5336 1
#line 478 "parse.y"
d5341 1
a5341 1
#line 480 "parse.y"
d5346 1
a5346 1
#line 490 "parse.y"
d5351 1
a5351 1
#line 492 "parse.y"
d5356 1
a5356 1
#line 496 "parse.y"
d5361 1
a5361 1
#line 498 "parse.y"
d5366 1
a5366 1
#line 500 "parse.y"
d5371 1
a5371 1
#line 502 "parse.y"
d5376 1
a5376 1
#line 507 "parse.y"
d5381 1
a5381 1
#line 509 "parse.y"
d5386 1
a5386 1
#line 516 "parse.y"
d5391 1
a5391 1
#line 521 "parse.y"
d5396 1
a5396 1
#line 523 "parse.y"
d5401 1
a5401 1
#line 528 "parse.y"
d5406 1
a5406 1
#line 530 "parse.y"
d5411 1
a5411 1
#line 532 "parse.y"
d5416 1
a5416 1
#line 537 "parse.y"
d5421 1
a5421 1
#line 544 "parse.y"
d5426 1
a5426 1
#line 549 "parse.y"
d5431 1
a5431 1
#line 555 "parse.y"
d5436 1
a5436 1
#line 559 "parse.y"
d5446 1
a5446 1
#line 566 "parse.y"
d5456 1
a5456 1
#line 576 "parse.y"
d5461 1
a5461 1
#line 578 "parse.y"
d5466 1
a5466 1
#line 580 "parse.y"
d5471 1
a5471 1
#line 582 "parse.y"
d5476 1
a5476 1
#line 589 "parse.y"
d5481 1
a5481 1
#line 591 "parse.y"
d5486 1
a5486 1
#line 593 "parse.y"
d5491 1
a5491 1
#line 595 "parse.y"
d5496 1
a5496 1
#line 597 "parse.y"
d5501 1
a5501 1
#line 604 "parse.y"
d5506 1
a5506 1
#line 615 "parse.y"
d5511 1
a5511 1
#line 618 "parse.y"
d5519 1
a5519 1
#line 631 "parse.y"
d5535 1
a5535 1
#line 644 "parse.y"
d5550 1
a5550 1
#line 656 "parse.y"
d5555 1
a5555 1
#line 662 "parse.y"
d5560 1
a5560 1
#line 668 "parse.y"
d5565 1
a5565 1
#line 670 "parse.y"
d5570 1
a5570 1
#line 672 "parse.y"
d5575 1
a5575 1
#line 678 "parse.y"
d5580 1
a5580 1
#line 683 "parse.y"
d5585 1
a5585 1
#line 685 "parse.y"
d5590 1
a5590 1
#line 691 "parse.y"
d5595 1
a5595 1
#line 693 "parse.y"
d5604 1
a5604 1
#line 699 "parse.y"
d5609 1
a5609 1
#line 705 "parse.y"
d5614 1
a5614 1
#line 708 "parse.y"
d5619 1
a5619 1
#line 710 "parse.y"
d5624 1
a5624 1
#line 716 "parse.y"
d5637 6
a5642 1
#line 726 "parse.y"
d5650 2
a5651 2
  case 170:
#line 732 "parse.y"
d5653 2
a5654 1
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), build_schema_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)), NULL_TREE);
d5657 1
a5660 5
  case 171:
#line 738 "parse.y"
    { build_schema_type (error_mark_node, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

d5662 2
a5663 2
#line 740 "parse.y"
    { ((*yyvalp).ttype) = start_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0); ;}
d5667 4
a5670 2
#line 742 "parse.y"
    { lex_const_equal = -1; finish_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype) != NULL_TREE); yyerrok; ;}
d5674 2
a5675 2
#line 744 "parse.y"
    { ((*yyvalp).ttype) = start_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 1); ;}
d5679 2
a5680 6
#line 746 "parse.y"
    {
        lex_const_equal = -1;
        finish_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype) != NULL_TREE);
        yyerrok;
      ;}
d5684 1
a5684 1
#line 752 "parse.y"
d5686 4
a5689 4
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
        PASCAL_TYPE_CLASS (t) = 1;
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), t, NULL_TREE);
        warning("ignored parent in Delphi forward class declaration");
d5694 2
a5695 6
#line 759 "parse.y"
    {
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
	PASCAL_TYPE_CLASS (t) = 1;
	build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), t, NULL_TREE); 
      ;}
d5699 2
a5700 6
#line 765 "parse.y"
    {
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
        PASCAL_TYPE_CLASS (t) = 1;
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), t, NULL_TREE);
      ;}
d5704 7
a5710 2
#line 774 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5715 11
a5725 1
    { error ("invalid schema discriminants"); ((*yyvalp).ttype) = NULL_TREE; ;}
d5729 7
a5735 2
#line 782 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5739 6
a5744 2
#line 784 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
d5748 11
a5758 2
#line 786 "parse.y"
    { error ("extra semicolon"); ;}
d5762 2
a5763 2
#line 792 "parse.y"
    { ((*yyvalp).ttype) = build_discriminants ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5767 21
a5787 1
#line 798 "parse.y"
d5791 2
a5792 2
  case 189:
#line 803 "parse.y"
d5801 2
a5802 2
  case 190:
#line 810 "parse.y"
d5811 2
a5812 2
  case 192:
#line 821 "parse.y"
d5816 2
a5817 2
  case 194:
#line 827 "parse.y"
d5821 2
a5822 2
  case 195:
#line 829 "parse.y"
d5826 2
a5827 2
  case 199:
#line 834 "parse.y"
d5831 2
a5832 2
  case 201:
#line 837 "parse.y"
d5836 2
a5837 2
  case 202:
#line 842 "parse.y"
d5841 2
a5842 2
  case 203:
#line 844 "parse.y"
d5849 2
a5850 2
  case 204:
#line 853 "parse.y"
d5854 2
a5855 2
  case 205:
#line 855 "parse.y"
d5859 2
a5860 2
  case 206:
#line 857 "parse.y"
d5864 2
a5865 2
  case 207:
#line 859 "parse.y"
d5869 2
a5870 2
  case 208:
#line 861 "parse.y"
d5874 2
a5875 2
  case 209:
#line 866 "parse.y"
d5879 2
a5880 2
  case 211:
#line 869 "parse.y"
d5884 2
a5885 2
  case 212:
#line 871 "parse.y"
d5889 8
a5896 3
  case 213:
#line 873 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5899 2
a5900 2
  case 214:
#line 875 "parse.y"
d5904 2
a5905 2
  case 217:
#line 882 "parse.y"
d5909 2
a5910 2
  case 219:
#line 888 "parse.y"
d5914 2
a5915 2
  case 220:
#line 890 "parse.y"
d5919 2
a5920 2
  case 221:
#line 892 "parse.y"
d5924 2
a5925 2
  case 222:
#line 894 "parse.y"
d5929 2
a5930 2
  case 223:
#line 899 "parse.y"
d5934 2
a5935 2
  case 224:
#line 901 "parse.y"
d5939 2
a5940 2
  case 225:
#line 906 "parse.y"
d5944 2
a5945 2
  case 226:
#line 908 "parse.y"
d5949 2
a5950 2
  case 227:
#line 910 "parse.y"
d5954 2
a5955 2
  case 231:
#line 921 "parse.y"
d5959 2
a5960 2
  case 232:
#line 923 "parse.y"
d5964 2
a5965 2
  case 233:
#line 925 "parse.y"
d5969 2
a5970 2
  case 235:
#line 931 "parse.y"
d5974 2
a5975 2
  case 236:
#line 936 "parse.y"
d5979 2
a5980 2
  case 237:
#line 938 "parse.y"
d5984 2
a5985 2
  case 238:
#line 943 "parse.y"
d5989 2
a5990 2
  case 239:
#line 945 "parse.y"
d5994 2
a5995 2
  case 240:
#line 947 "parse.y"
d5999 2
a6000 2
  case 241:
#line 949 "parse.y"
d6004 2
a6005 2
  case 243:
#line 955 "parse.y"
d6009 2
a6010 2
  case 244:
#line 957 "parse.y"
d6014 2
a6015 2
  case 245:
#line 959 "parse.y"
d6019 2
a6020 2
  case 247:
#line 965 "parse.y"
d6024 2
a6025 2
  case 248:
#line 970 "parse.y"
d6029 2
a6030 2
  case 251:
#line 980 "parse.y"
d6034 2
a6035 2
  case 252:
#line 982 "parse.y"
d6039 2
a6040 2
  case 253:
#line 987 "parse.y"
d6044 2
a6045 2
  case 254:
#line 989 "parse.y"
d6049 2
a6050 2
  case 255:
#line 991 "parse.y"
d6054 2
a6055 2
  case 256:
#line 993 "parse.y"
d6059 2
a6060 2
  case 258:
#line 999 "parse.y"
d6064 2
a6065 2
  case 259:
#line 1001 "parse.y"
d6073 2
a6074 2
  case 260:
#line 1010 "parse.y"
d6078 2
a6079 2
  case 261:
#line 1012 "parse.y"
d6083 2
a6084 2
  case 262:
#line 1014 "parse.y"
d6088 2
a6089 2
  case 263:
#line 1016 "parse.y"
d6093 2
a6094 2
  case 264:
#line 1021 "parse.y"
d6098 2
a6099 2
  case 265:
#line 1023 "parse.y"
d6107 11
a6117 3
  case 267:
#line 1033 "parse.y"
    { ((*yyvalp).ttype) = build_procedural_type (void_type_node, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6120 3
a6122 3
  case 268:
#line 1035 "parse.y"
    { ((*yyvalp).ttype) = build_procedural_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6125 2
a6126 2
  case 270:
#line 1041 "parse.y"
d6130 2
a6131 2
  case 271:
#line 1043 "parse.y"
d6135 7
a6141 2
  case 275:
#line 1054 "parse.y"
d6145 2
a6146 2
  case 276:
#line 1056 "parse.y"
d6150 2
a6151 2
  case 278:
#line 1062 "parse.y"
d6155 2
a6156 2
  case 279:
#line 1064 "parse.y"
d6160 2
a6161 2
  case 280:
#line 1069 "parse.y"
d6165 12
a6176 3
  case 281:
#line 1071 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, void_type_node, 0); ;}
d6179 3
a6181 3
  case 282:
#line 1073 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6184 7
a6190 3
  case 283:
#line 1075 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, boolean_type_node, 1); ;}
d6193 7
a6199 3
  case 284:
#line 1077 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, void_type_node, 1); ;}
d6202 2
a6203 2
  case 285:
#line 1079 "parse.y"
d6207 2
a6208 2
  case 286:
#line 1081 "parse.y"
d6212 2
a6213 2
  case 287:
#line 1083 "parse.y"
d6217 2
a6218 2
  case 288:
#line 1085 "parse.y"
d6222 2
a6223 2
  case 289:
#line 1087 "parse.y"
d6227 2
a6228 2
  case 292:
#line 1094 "parse.y"
d6232 2
a6233 2
  case 293:
#line 1096 "parse.y"
d6237 2
a6238 2
  case 294:
#line 1100 "parse.y"
d6242 3
a6244 3
  case 295:
#line 1102 "parse.y"
    { chk_dialect ("initialization with `:=' is", VAX_PASCAL); ;}
d6247 2
a6248 2
  case 296:
#line 1104 "parse.y"
d6252 2
a6253 2
  case 297:
#line 1111 "parse.y"
d6257 2
a6258 2
  case 298:
#line 1122 "parse.y"
d6262 2
a6263 2
  case 299:
#line 1124 "parse.y"
d6267 2
a6268 2
  case 300:
#line 1126 "parse.y"
d6275 2
a6276 2
  case 301:
#line 1131 "parse.y"
d6280 22
a6301 3
  case 304:
#line 1141 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, void_type_node, 0); ;}
d6304 3
a6306 3
  case 305:
#line 1143 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6309 7
a6315 3
  case 306:
#line 1145 "parse.y"
    { ((*yyvalp).ttype) = build_operator_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6318 3
a6320 3
  case 307:
#line 1155 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, void_type_node, 0); ;}
d6323 3
a6325 3
  case 308:
#line 1157 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6328 7
a6334 3
  case 309:
#line 1159 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, boolean_type_node, 1); ;}
d6337 7
a6343 3
  case 310:
#line 1161 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, void_type_node, 1); ;}
d6346 2
a6347 2
  case 313:
#line 1171 "parse.y"
d6351 2
a6352 2
  case 314:
#line 1176 "parse.y"
d6356 2
a6357 2
  case 315:
#line 1178 "parse.y"
d6361 2
a6362 2
  case 316:
#line 1180 "parse.y"
d6366 2
a6367 2
  case 317:
#line 1182 "parse.y"
d6371 2
a6372 2
  case 318:
#line 1184 "parse.y"
d6376 2
a6377 2
  case 319:
#line 1186 "parse.y"
d6381 2
a6382 2
  case 320:
#line 1188 "parse.y"
d6386 2
a6387 2
  case 321:
#line 1190 "parse.y"
d6391 2
a6392 2
  case 322:
#line 1192 "parse.y"
d6396 2
a6397 2
  case 324:
#line 1198 "parse.y"
d6401 2
a6402 2
  case 325:
#line 1200 "parse.y"
d6406 2
a6407 2
  case 326:
#line 1205 "parse.y"
d6411 2
a6412 2
  case 328:
#line 1211 "parse.y"
d6416 2
a6417 2
  case 330:
#line 1217 "parse.y"
d6421 2
a6422 2
  case 331:
#line 1219 "parse.y"
d6426 2
a6427 2
  case 332:
#line 1221 "parse.y"
d6431 2
a6432 2
  case 333:
#line 1223 "parse.y"
d6436 2
a6437 2
  case 334:
#line 1225 "parse.y"
d6441 2
a6442 2
  case 340:
#line 1241 "parse.y"
d6446 2
a6447 2
  case 341:
#line 1243 "parse.y"
d6451 12
a6462 2
  case 343:
#line 1249 "parse.y"
d6466 2
a6467 2
  case 344:
#line 1251 "parse.y"
d6471 2
a6472 2
  case 345:
#line 1253 "parse.y"
d6476 2
a6477 2
  case 346:
#line 1255 "parse.y"
d6481 2
a6482 2
  case 347:
#line 1257 "parse.y"
d6486 2
a6487 2
  case 349:
#line 1263 "parse.y"
d6491 2
a6492 2
  case 350:
#line 1265 "parse.y"
d6496 2
a6497 2
  case 352:
#line 1271 "parse.y"
d6501 2
a6502 2
  case 353:
#line 1273 "parse.y"
d6506 2
a6507 2
  case 354:
#line 1275 "parse.y"
d6511 7
a6517 2
  case 355:
#line 1277 "parse.y"
d6521 7
a6527 3
  case 356:
#line 1279 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, void_type_node, 0); ;}
d6530 8
a6537 3
  case 357:
#line 1281 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6540 2
a6541 2
  case 358:
#line 1286 "parse.y"
d6545 2
a6546 2
  case 359:
#line 1288 "parse.y"
d6550 2
a6551 2
  case 362:
#line 1295 "parse.y"
d6555 2
a6556 2
  case 364:
#line 1301 "parse.y"
d6560 2
a6561 2
  case 367:
#line 1311 "parse.y"
d6565 2
a6566 2
  case 368:
#line 1313 "parse.y"
d6570 2
a6571 2
  case 372:
#line 1324 "parse.y"
d6575 2
a6576 2
  case 375:
#line 1334 "parse.y"
d6580 2
a6581 2
  case 376:
#line 1336 "parse.y"
d6589 2
a6590 2
  case 378:
#line 1346 "parse.y"
d6594 2
a6595 2
  case 379:
#line 1348 "parse.y"
d6599 2
a6600 2
  case 381:
#line 1354 "parse.y"
d6604 2
a6605 2
  case 382:
#line 1359 "parse.y"
d6609 2
a6610 2
  case 385:
#line 1371 "parse.y"
d6614 2
a6615 2
  case 387:
#line 1377 "parse.y"
d6619 2
a6620 2
  case 390:
#line 1384 "parse.y"
d6624 2
a6625 2
  case 391:
#line 1386 "parse.y"
d6629 2
a6630 2
  case 393:
#line 1392 "parse.y"
d6634 2
a6635 2
  case 394:
#line 1394 "parse.y"
d6639 2
a6640 2
  case 396:
#line 1402 "parse.y"
d6644 2
a6645 2
  case 397:
#line 1404 "parse.y"
d6649 2
a6650 2
  case 402:
#line 1419 "parse.y"
d6654 2
a6655 2
  case 403:
#line 1421 "parse.y"
d6659 2
a6660 2
  case 404:
#line 1423 "parse.y"
d6664 2
a6665 2
  case 405:
#line 1425 "parse.y"
d6669 2
a6670 2
  case 406:
#line 1427 "parse.y"
d6674 2
a6675 2
  case 407:
#line 1429 "parse.y"
d6679 2
a6680 2
  case 408:
#line 1431 "parse.y"
d6684 2
a6685 2
  case 409:
#line 1433 "parse.y"
d6689 7
a6695 2
  case 411:
#line 1436 "parse.y"
d6699 2
a6700 2
  case 412:
#line 1438 "parse.y"
d6704 2
a6705 2
  case 413:
#line 1440 "parse.y"
d6709 2
a6710 2
  case 414:
#line 1442 "parse.y"
d6718 2
a6719 2
  case 415:
#line 1448 "parse.y"
d6723 2
a6724 2
  case 416:
#line 1450 "parse.y"
d6735 2
a6736 2
  case 417:
#line 1459 "parse.y"
d6748 2
a6749 2
  case 418:
#line 1469 "parse.y"
d6753 2
a6754 2
  case 419:
#line 1471 "parse.y"
d6758 2
a6759 2
  case 420:
#line 1473 "parse.y"
d6763 2
a6764 2
  case 421:
#line 1475 "parse.y"
d6768 2
a6769 2
  case 422:
#line 1477 "parse.y"
d6773 2
a6774 2
  case 423:
#line 1479 "parse.y"
d6778 2
a6779 2
  case 424:
#line 1481 "parse.y"
d6783 2
a6784 2
  case 425:
#line 1483 "parse.y"
d6788 2
a6789 2
  case 426:
#line 1485 "parse.y"
d6793 2
a6794 2
  case 427:
#line 1487 "parse.y"
d6798 2
a6799 2
  case 428:
#line 1489 "parse.y"
d6803 2
a6804 2
  case 429:
#line 1491 "parse.y"
d6808 2
a6809 2
  case 430:
#line 1496 "parse.y"
d6813 2
a6814 2
  case 432:
#line 1502 "parse.y"
d6818 2
a6819 2
  case 433:
#line 1504 "parse.y"
d6823 2
a6824 2
  case 434:
#line 1506 "parse.y"
d6828 2
a6829 2
  case 435:
#line 1508 "parse.y"
d6833 2
a6834 2
  case 436:
#line 1513 "parse.y"
d6838 2
a6839 2
  case 437:
#line 1515 "parse.y"
d6843 2
a6844 2
  case 438:
#line 1520 "parse.y"
d6848 2
a6849 2
  case 439:
#line 1522 "parse.y"
d6856 2
a6857 2
  case 440:
#line 1530 "parse.y"
d6867 2
a6868 2
  case 441:
#line 1538 "parse.y"
d6872 2
a6873 2
  case 442:
#line 1543 "parse.y"
d6877 2
a6878 2
  case 444:
#line 1549 "parse.y"
d6882 2
a6883 2
  case 445:
#line 1551 "parse.y"
d6887 2
a6888 2
  case 447:
#line 1557 "parse.y"
d6892 2
a6893 2
  case 448:
#line 1559 "parse.y"
d6897 2
a6898 2
  case 449:
#line 1561 "parse.y"
d6902 2
a6903 2
  case 450:
#line 1563 "parse.y"
d6907 2
a6908 2
  case 451:
#line 1568 "parse.y"
d6912 2
a6913 2
  case 452:
#line 1570 "parse.y"
d6917 2
a6918 2
  case 454:
#line 1576 "parse.y"
d6922 2
a6923 2
  case 455:
#line 1578 "parse.y"
d6927 2
a6928 2
  case 456:
#line 1580 "parse.y"
d6932 2
a6933 2
  case 458:
#line 1586 "parse.y"
d6937 2
a6938 2
  case 459:
#line 1588 "parse.y"
d6942 2
a6943 2
  case 460:
#line 1590 "parse.y"
d6947 2
a6948 2
  case 461:
#line 1592 "parse.y"
d6952 2
a6953 2
  case 462:
#line 1597 "parse.y"
d6957 2
a6958 2
  case 463:
#line 1599 "parse.y"
d6962 2
a6963 2
  case 464:
#line 1601 "parse.y"
d6967 2
a6968 2
  case 466:
#line 1607 "parse.y"
d6972 2
a6973 2
  case 468:
#line 1613 "parse.y"
d6977 2
a6978 2
  case 469:
#line 1618 "parse.y"
d6982 2
a6983 2
  case 470:
#line 1620 "parse.y"
d6987 2
a6988 2
  case 471:
#line 1622 "parse.y"
d6992 2
a6993 2
  case 472:
#line 1624 "parse.y"
d6997 2
a6998 2
  case 473:
#line 1626 "parse.y"
d7002 2
a7003 2
  case 474:
#line 1628 "parse.y"
d7007 2
a7008 2
  case 475:
#line 1630 "parse.y"
d7012 2
a7013 2
  case 476:
#line 1632 "parse.y"
d7017 2
a7018 2
  case 477:
#line 1634 "parse.y"
d7022 2
a7023 2
  case 478:
#line 1636 "parse.y"
d7027 2
a7028 2
  case 479:
#line 1641 "parse.y"
d7032 2
a7033 2
  case 480:
#line 1643 "parse.y"
d7037 2
a7038 2
  case 484:
#line 1654 "parse.y"
d7042 2
a7043 2
  case 485:
#line 1659 "parse.y"
d7047 2
a7048 2
  case 486:
#line 1664 "parse.y"
d7052 2
a7053 2
  case 487:
#line 1666 "parse.y"
d7057 2
a7058 2
  case 488:
#line 1673 "parse.y"
d7062 4
a7065 4
            && (TREE_CODE_CLASS (TREE_CODE (((*yyvalp).ttype))) != 'c'
                || TREE_CODE (((*yyvalp).ttype)) == STRING_CST
                || !PASCAL_CST_FRESH (((*yyvalp).ttype))
                || PASCAL_CST_PARENTHESES (((*yyvalp).ttype))))
d7070 2
a7071 2
  case 489:
#line 1686 "parse.y"
d7075 2
a7076 2
  case 490:
#line 1688 "parse.y"
d7080 2
a7081 2
  case 492:
#line 1694 "parse.y"
d7085 2
a7086 2
  case 493:
#line 1696 "parse.y"
d7090 2
a7091 2
  case 494:
#line 1698 "parse.y"
d7095 2
a7096 2
  case 495:
#line 1700 "parse.y"
d7100 2
a7101 2
  case 496:
#line 1702 "parse.y"
d7105 2
a7106 2
  case 498:
#line 1708 "parse.y"
d7110 2
a7111 2
  case 499:
#line 1710 "parse.y"
d7115 2
a7116 2
  case 500:
#line 1712 "parse.y"
d7120 2
a7121 2
  case 501:
#line 1714 "parse.y"
d7125 2
a7126 2
  case 503:
#line 1720 "parse.y"
d7130 2
a7131 2
  case 504:
#line 1722 "parse.y"
d7135 2
a7136 2
  case 505:
#line 1724 "parse.y"
d7140 2
a7141 2
  case 506:
#line 1726 "parse.y"
d7145 2
a7146 2
  case 507:
#line 1728 "parse.y"
d7150 2
a7151 2
  case 508:
#line 1733 "parse.y"
d7155 2
a7156 2
  case 509:
#line 1735 "parse.y"
d7160 2
a7161 2
  case 512:
#line 1739 "parse.y"
d7165 2
a7166 2
  case 514:
#line 1742 "parse.y"
d7170 2
a7171 2
  case 520:
#line 1758 "parse.y"
d7175 2
a7176 2
  case 521:
#line 1763 "parse.y"
d7180 2
a7181 2
  case 522:
#line 1765 "parse.y"
d7185 2
a7186 2
  case 525:
#line 1772 "parse.y"
d7190 2
a7191 2
  case 544:
#line 1783 "parse.y"
d7202 2
a7203 2
  case 545:
#line 1795 "parse.y"
d7216 2
a7217 2
  case 547:
#line 1810 "parse.y"
d7221 2
a7222 2
  case 548:
#line 1815 "parse.y"
d7226 2
a7227 2
  case 551:
#line 1822 "parse.y"
d7231 2
a7232 2
  case 552:
#line 1824 "parse.y"
d7236 2
a7237 2
  case 553:
#line 1826 "parse.y"
d7241 2
a7242 2
  case 554:
#line 1828 "parse.y"
d7246 2
a7247 2
  case 555:
#line 1830 "parse.y"
d7251 2
a7252 2
  case 556:
#line 1832 "parse.y"
d7256 2
a7257 2
  case 557:
#line 1834 "parse.y"
d7261 2
a7262 2
  case 558:
#line 1836 "parse.y"
d7266 2
a7267 2
  case 559:
#line 1838 "parse.y"
d7271 2
a7272 2
  case 560:
#line 1840 "parse.y"
d7276 7
a7282 2
  case 561:
#line 1842 "parse.y"
d7286 2
a7287 2
  case 562:
#line 1844 "parse.y"
d7291 2
a7292 2
  case 563:
#line 1846 "parse.y"
d7296 2
a7297 2
  case 564:
#line 1848 "parse.y"
d7301 2
a7302 2
  case 565:
#line 1850 "parse.y"
d7306 2
a7307 2
  case 567:
#line 1856 "parse.y"
d7311 2
a7312 2
  case 568:
#line 1858 "parse.y"
d7320 2
a7321 2
  case 569:
#line 1866 "parse.y"
d7325 2
a7326 2
  case 570:
#line 1871 "parse.y"
d7330 2
a7331 2
  case 571:
#line 1873 "parse.y"
d7335 2
a7336 2
  case 572:
#line 1875 "parse.y"
d7340 2
a7341 2
  case 573:
#line 1877 "parse.y"
d7345 2
a7346 2
  case 575:
#line 1883 "parse.y"
d7350 2
a7351 2
  case 576:
#line 1885 "parse.y"
d7355 2
a7356 2
  case 577:
#line 1887 "parse.y"
d7360 2
a7361 2
  case 578:
#line 1893 "parse.y"
d7365 2
a7366 2
  case 579:
#line 1895 "parse.y"
d7370 2
a7371 2
  case 580:
#line 1897 "parse.y"
d7375 2
a7376 2
  case 581:
#line 1902 "parse.y"
d7380 2
a7381 2
  case 583:
#line 1908 "parse.y"
d7385 2
a7386 2
  case 584:
#line 1910 "parse.y"
d7390 2
a7391 2
  case 588:
#line 1918 "parse.y"
d7395 2
a7396 2
  case 589:
#line 1923 "parse.y"
d7400 2
a7401 2
  case 590:
#line 1925 "parse.y"
d7405 2
a7406 2
  case 591:
#line 1930 "parse.y"
d7410 2
a7411 2
  case 592:
#line 1932 "parse.y"
d7415 2
a7416 2
  case 593:
#line 1937 "parse.y"
d7420 2
a7421 2
  case 594:
#line 1942 "parse.y"
d7425 2
a7426 2
  case 595:
#line 1947 "parse.y"
d7430 2
a7431 2
  case 596:
#line 1949 "parse.y"
d7435 2
a7436 2
  case 597:
#line 1951 "parse.y"
d7440 2
a7441 2
  case 598:
#line 1953 "parse.y"
d7445 2
a7446 2
  case 599:
#line 1955 "parse.y"
d7450 2
a7451 2
  case 601:
#line 1961 "parse.y"
d7455 2
a7456 2
  case 602:
#line 1963 "parse.y"
d7460 2
a7461 2
  case 604:
#line 1969 "parse.y"
d7465 2
a7466 2
  case 605:
#line 1974 "parse.y"
d7470 2
a7471 2
  case 606:
#line 1976 "parse.y"
d7475 2
a7476 2
  case 608:
#line 1982 "parse.y"
d7480 2
a7481 2
  case 609:
#line 1984 "parse.y"
d7485 2
a7486 2
  case 610:
#line 1986 "parse.y"
d7490 2
a7491 2
  case 611:
#line 1988 "parse.y"
d7495 2
a7496 2
  case 612:
#line 1993 "parse.y"
d7500 2
a7501 2
  case 613:
#line 1995 "parse.y"
d7505 2
a7506 2
  case 614:
#line 1997 "parse.y"
d7510 2
a7511 2
  case 615:
#line 2002 "parse.y"
d7515 2
a7516 2
  case 616:
#line 2004 "parse.y"
d7520 2
a7521 2
  case 618:
#line 2010 "parse.y"
d7525 2
a7526 2
  case 619:
#line 2012 "parse.y"
d7530 2
a7531 2
  case 620:
#line 2014 "parse.y"
d7535 2
a7536 2
  case 621:
#line 2019 "parse.y"
d7540 2
a7541 2
  case 622:
#line 2021 "parse.y"
d7545 2
a7546 2
  case 623:
#line 2027 "parse.y"
d7550 2
a7551 2
  case 624:
#line 2028 "parse.y"
d7555 2
a7556 2
  case 625:
#line 2032 "parse.y"
d7560 2
a7561 2
  case 626:
#line 2033 "parse.y"
d7565 2
a7566 2
  case 627:
#line 2034 "parse.y"
d7570 2
a7571 2
  case 628:
#line 2038 "parse.y"
d7575 2
a7576 2
  case 629:
#line 2039 "parse.y"
d7580 2
a7581 2
  case 630:
#line 2040 "parse.y"
d7585 2
a7586 2
  case 631:
#line 2041 "parse.y"
d7590 2
a7591 2
  case 632:
#line 2042 "parse.y"
d7595 2
a7596 2
  case 633:
#line 2043 "parse.y"
d7600 2
a7601 2
  case 634:
#line 2044 "parse.y"
d7605 2
a7606 2
  case 635:
#line 2048 "parse.y"
d7610 2
a7611 2
  case 636:
#line 2049 "parse.y"
d7615 2
a7616 2
  case 637:
#line 2050 "parse.y"
d7620 2
a7621 2
  case 638:
#line 2051 "parse.y"
d7625 2
a7626 2
  case 639:
#line 2052 "parse.y"
d7630 2
a7631 2
  case 640:
#line 2053 "parse.y"
d7635 2
a7636 2
  case 641:
#line 2057 "parse.y"
d7640 2
a7641 2
  case 642:
#line 2058 "parse.y"
d7645 2
a7646 2
  case 643:
#line 2059 "parse.y"
d7650 2
a7651 2
  case 644:
#line 2060 "parse.y"
d7655 2
a7656 2
  case 645:
#line 2061 "parse.y"
d7660 2
a7661 2
  case 646:
#line 2062 "parse.y"
d7665 2
a7666 2
  case 647:
#line 2066 "parse.y"
d7670 2
a7671 2
  case 648:
#line 2067 "parse.y"
d7675 2
a7676 2
  case 649:
#line 2068 "parse.y"
d7680 2
a7681 2
  case 650:
#line 2069 "parse.y"
d7685 2
a7686 2
  case 651:
#line 2073 "parse.y"
d7690 2
a7691 2
  case 652:
#line 2074 "parse.y"
d7695 2
a7696 2
  case 653:
#line 2075 "parse.y"
d7700 2
a7701 2
  case 654:
#line 2076 "parse.y"
d7705 2
a7706 2
  case 655:
#line 2081 "parse.y"
d7710 2
a7711 2
  case 656:
#line 2083 "parse.y"
d7715 2
a7716 2
  case 657:
#line 2084 "parse.y"
d7720 2
a7721 2
  case 658:
#line 2085 "parse.y"
d7725 2
a7726 2
  case 659:
#line 2086 "parse.y"
d7730 2
a7731 2
  case 660:
#line 2087 "parse.y"
d7735 2
a7736 2
  case 661:
#line 2088 "parse.y"
d7740 2
a7741 2
  case 662:
#line 2094 "parse.y"
d7745 2
a7746 2
  case 663:
#line 2095 "parse.y"
d7750 2
a7751 2
  case 664:
#line 2096 "parse.y"
d7755 2
a7756 2
  case 665:
#line 2097 "parse.y"
d7760 2
a7761 2
  case 666:
#line 2098 "parse.y"
d7765 2
a7766 2
  case 667:
#line 2099 "parse.y"
d7770 2
a7771 2
  case 668:
#line 2100 "parse.y"
d7775 2
a7776 2
  case 669:
#line 2101 "parse.y"
d7780 2
a7781 2
  case 670:
#line 2102 "parse.y"
d7785 2
a7786 2
  case 671:
#line 2103 "parse.y"
d7790 2
a7791 2
  case 672:
#line 2104 "parse.y"
d7795 2
a7796 2
  case 673:
#line 2105 "parse.y"
d7800 2
a7801 2
  case 674:
#line 2106 "parse.y"
d7805 2
a7806 2
  case 675:
#line 2107 "parse.y"
d7810 2
a7811 2
  case 676:
#line 2108 "parse.y"
d7815 2
a7816 2
  case 677:
#line 2109 "parse.y"
d7820 2
a7821 2
  case 678:
#line 2110 "parse.y"
d7825 2
a7826 2
  case 679:
#line 2111 "parse.y"
d7830 2
a7831 2
  case 680:
#line 2112 "parse.y"
d7835 2
a7836 2
  case 681:
#line 2113 "parse.y"
d7840 2
a7841 2
  case 682:
#line 2114 "parse.y"
d7845 2
a7846 2
  case 685:
#line 2120 "parse.y"
d7850 2
a7851 2
  case 686:
#line 2121 "parse.y"
d7855 2
a7856 2
  case 687:
#line 2122 "parse.y"
d7860 2
a7861 2
  case 688:
#line 2123 "parse.y"
d7865 2
a7866 2
  case 689:
#line 2127 "parse.y"
d7870 2
a7871 2
  case 690:
#line 2128 "parse.y"
d7875 2
a7876 2
  case 691:
#line 2129 "parse.y"
d7880 2
a7881 2
  case 692:
#line 2130 "parse.y"
d7885 2
a7886 2
  case 695:
#line 2142 "parse.y"
d7890 2
a7891 2
  case 696:
#line 2147 "parse.y"
d7895 2
a7896 2
  case 697:
#line 2152 "parse.y"
d7900 2
a7901 2
  case 698:
#line 2154 "parse.y"
d7905 2
a7906 2
  case 699:
#line 2156 "parse.y"
d7914 2
a7915 2
  case 700:
#line 2162 "parse.y"
d7919 2
a7920 2
  case 702:
#line 2168 "parse.y"
d7924 2
a7925 2
  case 703:
#line 2170 "parse.y"
d7929 2
a7930 2
  case 705:
#line 2176 "parse.y"
d7934 2
a7935 2
  case 706:
#line 2181 "parse.y"
d7939 2
a7940 2
  case 752:
#line 2234 "parse.y"
d7944 2
a7945 2
  case 761:
#line 2251 "parse.y"
d7949 2
a7950 2
  case 762:
#line 2258 "parse.y"
d7954 2
a7955 2
  case 763:
#line 2263 "parse.y"
d7959 2
a7960 2
  case 764:
#line 2268 "parse.y"
d7964 2
a7965 2
  case 765:
#line 2273 "parse.y"
d7969 2
a7970 2
  case 766:
#line 2278 "parse.y"
d7974 2
a7975 2
  case 767:
#line 2283 "parse.y"
d7979 2
a7980 2
  case 768:
#line 2288 "parse.y"
d7984 2
a7985 2
  case 769:
#line 2290 "parse.y"
d7989 2
a7990 2
  case 776:
#line 2307 "parse.y"
d7994 2
a7995 2
  case 777:
#line 2312 "parse.y"
d7999 2
a8000 2
  case 778:
#line 2317 "parse.y"
d8017 1
a8017 1
#line 7835 "parse.c"
d8253 1
a8253 1
  if (YYMAXDEPTH <= yysize)
d9465 1
a9465 1
#line 2320 "parse.y"
d9555 1
d9557 17
a9573 1
  return main_yyparse ();
@


1.1
log
@pregenerate some files
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.0.  */
d4 1
a4 1
   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.
d18 2
a19 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
a22 6
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <setjmp.h>

d26 3
d46 1
a46 1
     prec_id = 258,
d48 63
a110 63
     prec_lower_than_error = 260,
     prec_import = 261,
     p_operator = 262,
     p_destructor = 263,
     p_constructor = 264,
     p_implementation = 265,
     p_initialization = 266,
     p_uses = 267,
     p_else = 268,
     p_and = 269,
     p_array = 270,
     p_begin = 271,
     p_case = 272,
     p_div = 273,
     p_do = 274,
     p_downto = 275,
     p_end = 276,
     p_file = 277,
     p_for = 278,
     p_function = 279,
     p_goto = 280,
     p_if = 281,
     p_in = 282,
     p_label = 283,
     p_mod = 284,
     p_nil = 285,
     p_not = 286,
     p_of = 287,
     p_or = 288,
     p_packed = 289,
     p_procedure = 290,
     p_to = 291,
     p_program = 292,
     p_record = 293,
     p_repeat = 294,
     p_set = 295,
     p_then = 296,
     p_type = 297,
     p_until = 298,
     p_var = 299,
     p_while = 300,
     p_with = 301,
     p_absolute = 302,
     p_abstract = 303,
     p_and_then = 304,
     p_as = 305,
     p_asm = 306,
     p_attribute = 307,
     p_bindable = 308,
     p_const = 309,
     p_external = 310,
     p_far = 311,
     p_finalization = 312,
     p_forward = 313,
     p_import = 314,
     p_inherited = 315,
     p_is = 316,
     p_near = 317,
     p_object = 318,
     p_only = 319,
     p_otherwise = 320,
     p_or_else = 321,
     p_pow = 322,
d121 6
a126 6
     p_Addr = 333,
     p_Assigned = 334,
     p_Dispose = 335,
     p_FormatString = 336,
     p_New = 337,
     p_Return = 338,
d128 12
a139 12
     LEX_ID = 340,
     LEX_BUILTIN_PROCEDURE = 341,
     LEX_BUILTIN_PROCEDURE_WRITE = 342,
     LEX_BUILTIN_FUNCTION = 343,
     LEX_BUILTIN_FUNCTION_VT = 344,
     LEX_BUILTIN_VARIABLE = 345,
     LEX_INTCONST = 346,
     LEX_INTCONST_BASE = 347,
     LEX_STRCONST = 348,
     LEX_REALCONST = 349,
     LEX_CARET_WHITE = 350,
     LEX_STRUCTOR = 351,
d141 12
a152 12
     LEX_CONST_EQUAL = 353,
     LEX_BPPLUS = 354,
     LEX_BPMINUS = 355,
     LEX_RANGE = 356,
     LEX_ELLIPSIS = 357,
     LEX_RENAME = 358,
     LEX_SYMDIFF = 359,
     LEX_ASSIGN = 360,
     LEX_NE = 361,
     LEX_GE = 362,
     LEX_LE = 363,
     LEX_POWER = 364,
d163 2
a164 1
#define prec_id 258
d166 63
a228 63
#define prec_lower_than_error 260
#define prec_import 261
#define p_operator 262
#define p_destructor 263
#define p_constructor 264
#define p_implementation 265
#define p_initialization 266
#define p_uses 267
#define p_else 268
#define p_and 269
#define p_array 270
#define p_begin 271
#define p_case 272
#define p_div 273
#define p_do 274
#define p_downto 275
#define p_end 276
#define p_file 277
#define p_for 278
#define p_function 279
#define p_goto 280
#define p_if 281
#define p_in 282
#define p_label 283
#define p_mod 284
#define p_nil 285
#define p_not 286
#define p_of 287
#define p_or 288
#define p_packed 289
#define p_procedure 290
#define p_to 291
#define p_program 292
#define p_record 293
#define p_repeat 294
#define p_set 295
#define p_then 296
#define p_type 297
#define p_until 298
#define p_var 299
#define p_while 300
#define p_with 301
#define p_absolute 302
#define p_abstract 303
#define p_and_then 304
#define p_as 305
#define p_asm 306
#define p_attribute 307
#define p_bindable 308
#define p_const 309
#define p_external 310
#define p_far 311
#define p_finalization 312
#define p_forward 313
#define p_import 314
#define p_inherited 315
#define p_is 316
#define p_near 317
#define p_object 318
#define p_only 319
#define p_otherwise 320
#define p_or_else 321
#define p_pow 322
d239 6
a244 6
#define p_Addr 333
#define p_Assigned 334
#define p_Dispose 335
#define p_FormatString 336
#define p_New 337
#define p_Return 338
d246 12
a257 12
#define LEX_ID 340
#define LEX_BUILTIN_PROCEDURE 341
#define LEX_BUILTIN_PROCEDURE_WRITE 342
#define LEX_BUILTIN_FUNCTION 343
#define LEX_BUILTIN_FUNCTION_VT 344
#define LEX_BUILTIN_VARIABLE 345
#define LEX_INTCONST 346
#define LEX_INTCONST_BASE 347
#define LEX_STRCONST 348
#define LEX_REALCONST 349
#define LEX_CARET_WHITE 350
#define LEX_STRUCTOR 351
d259 12
a270 12
#define LEX_CONST_EQUAL 353
#define LEX_BPPLUS 354
#define LEX_BPMINUS 355
#define LEX_RANGE 356
#define LEX_ELLIPSIS 357
#define LEX_RENAME 358
#define LEX_SYMDIFF 359
#define LEX_ASSIGN 360
#define LEX_NE 361
#define LEX_GE 362
#define LEX_LE 363
#define LEX_POWER 364
d284 1
a284 1
#line 69 "parse.y"
a293 4
/* Keep track of parenthesized expressions in case they're actually
   structured initializers. */
static tree iso_no_parentheses PARAMS ((tree));

d295 1
a295 1
static int check_decl_order PARAMS ((int, int));
d297 1
a297 1
extern int main_yyparse PARAMS ((void));
d301 1
a301 1
static void locations PARAMS ((YYLTYPE *, const union yyGLRStackItem *, int));
d316 1
a316 1
#define YYASSERT assert
d334 5
d340 1
a340 1
#line 118 "parse.y"
d347 1
a347 1
#line 349 "parse.c"
d377 18
a394 1
#line 379 "parse.c"
d406 2
d416 7
d429 2
a430 2
# if !defined (__GNUC__) || __GNUC__ < 2 || \
(__GNUC__ == 2 && __GNUC_MINOR__ < 5) || __STRICT_ANSI__
d435 2
a440 4
#ifndef ATTRIBUTE_UNUSED
# define ATTRIBUTE_UNUSED __attribute__ ((__unused__))
#endif

d444 1
a444 1
#define YYLAST   8414
d449 1
a449 1
#define YYNNTS  289
d451 1
a451 1
#define YYNRULES  788
d453 1
a453 1
#define YYNSTATES  1305
d475 3
a477 3
     120,   122,   130,   128,   121,   129,     4,   131,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   123,   119,
     132,   133,   134,     2,   126,     2,     2,     2,     2,     2,
d480 1
a480 1
       2,   124,     2,   125,   127,     2,     2,     2,     2,     2,
d496 13
a508 13
       2,     2,     2,     2,     2,     2,     1,     2,     3,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118
d517 77
a593 78
      25,    30,    31,    34,    36,    38,    39,    42,    43,    46,
      50,    52,    55,    58,    59,    64,    67,    68,    69,    82,
      84,    86,    87,    91,    92,    93,   103,   104,   111,   112,
     113,   122,   123,   131,   132,   140,   141,   146,   148,   152,
     154,   157,   158,   161,   163,   165,   167,   168,   171,   173,
     174,   177,   179,   180,   181,   188,   189,   192,   194,   196,
     197,   204,   205,   212,   214,   215,   219,   220,   224,   226,
     227,   232,   234,   236,   240,   242,   244,   248,   252,   256,
     259,   261,   265,   267,   271,   273,   277,   281,   285,   286,
     288,   292,   294,   299,   301,   303,   307,   309,   313,   317,
     320,   324,   328,   330,   334,   336,   339,   340,   341,   345,
     348,   350,   354,   358,   363,   365,   367,   369,   373,   378,
     382,   384,   388,   392,   395,   397,   400,   402,   406,   408,
     412,   416,   419,   421,   425,   427,   431,   435,   438,   440,
     442,   444,   446,   448,   450,   453,   455,   460,   469,   471,
     475,   477,   481,   485,   488,   494,   495,   502,   506,   507,
     517,   521,   525,   527,   531,   535,   539,   542,   546,   548,
     551,   554,   556,   559,   561,   564,   567,   569,   571,   573,
     575,   577,   580,   582,   584,   586,   588,   592,   596,   600,
     602,   606,   608,   612,   616,   618,   620,   624,   628,   630,
     634,   638,   642,   645,   649,   654,   657,   660,   663,   667,
     669,   671,   673,   676,   680,   687,   689,   694,   698,   702,
     706,   708,   710,   714,   718,   721,   723,   725,   727,   729,
     733,   735,   736,   739,   747,   749,   752,   754,   758,   762,
     766,   769,   774,   778,   782,   784,   786,   788,   789,   795,
     797,   801,   805,   807,   810,   816,   818,   822,   826,   830,
     833,   835,   839,   843,   847,   851,   853,   855,   857,   861,
     865,   867,   870,   872,   874,   877,   881,   886,   890,   896,
     900,   904,   906,   909,   911,   913,   915,   918,   919,   928,
     930,   932,   936,   938,   941,   942,   948,   950,   954,   957,
     959,   964,   966,   970,   972,   974,   976,   980,   985,   992,
     994,   996,   998,  1000,  1003,  1006,  1008,  1009,  1013,  1016,
    1020,  1024,  1025,  1026,  1036,  1038,  1040,  1044,  1050,  1056,
    1062,  1070,  1076,  1082,  1084,  1086,  1090,  1093,  1097,  1098,
    1105,  1112,  1119,  1123,  1126,  1129,  1131,  1135,  1139,  1141,
    1143,  1145,  1147,  1149,  1152,  1154,  1155,  1157,  1160,  1162,
    1164,  1167,  1169,  1171,  1174,  1178,  1182,  1188,  1192,  1194,
    1198,  1202,  1206,  1210,  1215,  1220,  1224,  1228,  1234,  1236,
    1238,  1239,  1242,  1244,  1246,  1248,  1250,  1257,  1265,  1267,
    1269,  1271,  1275,  1279,  1283,  1289,  1293,  1295,  1297,  1303,
    1305,  1309,  1310,  1312,  1313,  1318,  1319,  1321,  1323,  1325,
    1328,  1330,  1332,  1334,  1335,  1340,  1342,  1345,  1347,  1352,
    1357,  1359,  1364,  1366,  1367,  1372,  1373,  1374,  1383,  1384,
    1385,  1386,  1396,  1397,  1398,  1407,  1408,  1420,  1421,  1431,
    1434,  1437,  1439,  1443,  1445,  1449,  1453,  1455,  1459,  1460,
    1466,  1467,  1472,  1474,  1476,  1477,  1480,  1482,  1486,  1488,
    1492,  1496,  1497,  1504,  1506,  1508,  1510,  1512,  1515,  1517,
    1519,  1522,  1524,  1529,  1532,  1537,  1543,  1549,  1557,  1567,
    1579,  1583,  1585,  1586,  1591,  1593,  1597,  1599,  1603,  1605,
    1609,  1613,  1617,  1619,  1623,  1629,  1630,  1632,  1634,  1636,
    1638,  1642,  1647,  1649,  1653,  1655,  1657,  1659,  1663,  1665,
    1667,  1670,  1674,  1678,  1679,  1684,  1686,  1690,  1694,  1695,
    1700,  1702,  1706,  1710,  1714,  1718,  1722,  1725,  1728,  1730,
    1732,  1734,  1736,  1738,  1740,  1742,  1744,  1746,  1748,  1750,
    1752,  1754,  1757,  1759,  1761,  1763,  1765,  1767,  1769,  1771,
    1773,  1775,  1777,  1779,  1781,  1783,  1785,  1787,  1789,  1791,
    1793,  1795,  1798,  1800,  1803,  1805,  1807,  1809,  1812,  1816,
    1820,  1823,  1828,  1833,  1837,  1838,  1844,  1849,  1854,  1855,
    1861,  1866,  1871,  1874,  1879,  1885,  1889,  1891,  1893,  1896,
    1900,  1904,  1906,  1908,  1910,  1914,  1918,  1920,  1927,  1932,
    1937,  1941,  1943,  1946,  1950,  1954,  1958,  1960,  1964,  1968,
    1970,  1972,  1976,  1978,  1980,  1984,  1986,  1990,  1994,  1996,
    1998,  2002,  2005,  2009,  2011,  2015,  2019,  2023,  2025,  2029,
    2031,  2033,  2035,  2037,  2039,  2041,  2043,  2045,  2047,  2049,
    2051,  2053,  2055,  2057,  2059,  2061,  2063,  2065,  2067,  2069,
    2071,  2073,  2075,  2077,  2079,  2082,  2084,  2086,  2088,  2091,
    2093,  2095,  2097,  2099,  2101,  2103,  2105,  2107,  2109,  2111,
    2113,  2115,  2117,  2119,  2121,  2123,  2125,  2127,  2129,  2131,
    2133,  2135,  2137,  2139,  2141,  2143,  2145,  2147,  2149,  2151,
    2153,  2155,  2157,  2159,  2161,  2163,  2165,  2167,  2169,  2171,
    2173,  2175,  2177,  2179,  2181,  2183,  2185,  2187,  2189,  2191,
    2193,  2195,  2197,  2199,  2201,  2203,  2205,  2207,  2209,  2211,
    2213,  2215,  2217,  2219,  2221,  2223,  2225,  2227,  2229,  2231,
    2233,  2235,  2237,  2239,  2241,  2243,  2245,  2247,  2249,  2251,
    2253,  2255,  2257,  2259,  2261,  2263,  2265,  2267,  2269,  2271,
    2273,  2275,  2277,  2279,  2281,  2283,  2285,  2287,  2289,  2291,
    2293,  2295,  2296,  2297,  2298,  2299,  2301,  2302,  2304,  2306,
    2308,  2310,  2312,  2314,  2316,  2318,  2320,  2322,  2323
d599 234
a832 233
     138,     0,    -1,    -1,   139,    -1,    -1,    -1,   142,   168,
     140,   203,   143,   141,   311,   423,    -1,   151,    -1,    -1,
      38,   405,   188,   119,    -1,    38,     1,   188,   119,    -1,
      -1,   143,   144,    -1,   208,    -1,   146,    -1,    -1,   145,
     146,    -1,    -1,   147,   148,    -1,    29,   214,   119,    -1,
     282,    -1,   416,   149,    -1,    55,   218,    -1,    -1,    43,
     150,   220,   119,    -1,    45,   266,    -1,    -1,    -1,    72,
     405,   119,   168,    86,   152,   203,   169,   153,   165,    22,
     423,    -1,   158,    -1,   163,    -1,    -1,   158,   154,   163,
      -1,    -1,    -1,   166,   405,   167,   155,   161,   119,   156,
     174,   423,    -1,    -1,   166,   405,   167,   157,   174,   423,
      -1,    -1,    -1,   166,   405,    86,   159,   167,   160,   161,
     423,    -1,    -1,    86,   162,   192,   119,   203,   169,    22,
      -1,    -1,   166,   405,    11,   119,   164,   174,   423,    -1,
      -1,    11,   202,   143,   185,    -1,    86,    -1,   188,   119,
     168,    -1,   424,    -1,   274,   119,    -1,    -1,   169,   170,
      -1,   208,    -1,   148,    -1,   281,    -1,    -1,   171,   172,
      -1,   208,    -1,    -1,   173,   148,    -1,   282,    -1,    -1,
      -1,   175,   203,   171,   176,   177,    22,    -1,    -1,   178,
     180,    -1,   178,    -1,   180,    -1,    -1,    37,    17,    20,
     179,   316,   119,    -1,    -1,    37,    22,    20,   181,   316,
     119,    -1,   312,    -1,    -1,    12,   184,   182,    -1,    -1,
      17,   186,   182,    -1,   183,    -1,    -1,   183,    58,   187,
     312,    -1,   177,    -1,   424,    -1,   120,   189,   422,    -1,
     190,    -1,   405,    -1,   190,   121,   405,    -1,   190,     1,
     405,    -1,   190,   121,     1,    -1,   190,     1,    -1,   409,
      -1,   191,   121,   409,    -1,   193,    -1,   192,   119,   193,
      -1,     1,    -1,   192,     1,   193,    -1,   192,   119,     1,
      -1,   409,   194,   195,    -1,    -1,   421,    -1,   120,   197,
     122,    -1,   196,    -1,   196,   120,   197,   122,    -1,    86,
      -1,   198,    -1,   197,   121,   198,    -1,     1,    -1,   197,
       1,   198,    -1,   197,   121,     1,    -1,   199,   200,    -1,
     199,   102,   199,    -1,   418,   199,   200,    -1,   405,    -1,
     405,     4,   405,    -1,   424,    -1,   104,   405,    -1,    -1,
      -1,    60,   204,   119,    -1,   201,   202,    -1,   205,    -1,
     204,   119,   205,    -1,   204,     1,   205,    -1,   405,   206,
     207,   211,    -1,   424,    -1,    86,    -1,   424,    -1,   120,
     212,   122,    -1,    65,   120,   212,   122,    -1,    13,   209,
     119,    -1,   210,    -1,   209,   121,   210,    -1,   209,     1,
     210,    -1,   405,   211,    -1,   424,    -1,    28,   359,    -1,
     213,    -1,   212,   121,   213,    -1,     1,    -1,   212,     1,
     213,    -1,   212,   121,     1,    -1,   405,   200,    -1,   215,
      -1,   214,   121,   215,    -1,     1,    -1,   214,     1,   215,
      -1,   214,   121,     1,    -1,   214,     1,    -1,   217,    -1,
     405,    -1,   217,    -1,   412,    -1,    92,    -1,   219,    -1,
     218,   219,    -1,     1,    -1,   409,   421,   356,   119,    -1,
     409,   417,   123,   227,    99,   385,   272,   119,    -1,   221,
      -1,   220,   119,   221,    -1,     1,    -1,   220,     1,   221,
      -1,   220,   119,     1,    -1,   220,     1,    -1,   409,   417,
     421,   227,   278,    -1,    -1,   407,   224,   421,   222,   227,
     278,    -1,   407,   224,     1,    -1,    -1,   409,   417,   421,
     223,   261,    64,   262,   263,    22,    -1,   120,   225,   122,
      -1,   120,     1,   122,    -1,   226,    -1,   225,   119,   226,
      -1,   225,     1,   226,    -1,   225,   119,     1,    -1,   225,
       1,    -1,   189,   123,   233,    -1,   228,    -1,   227,   274,
      -1,   416,   229,    -1,   230,    -1,    54,   230,    -1,   232,
      -1,    69,   232,    -1,   233,   235,    -1,   260,    -1,   237,
      -1,   241,    -1,   243,    -1,   244,    -1,   231,   244,    -1,
      35,    -1,   233,    -1,   234,    -1,   412,    -1,   412,     4,
     412,    -1,   120,   236,   122,    -1,   124,   359,   125,    -1,
     359,    -1,   236,   121,   359,    -1,     1,    -1,   236,     1,
     359,    -1,   236,   121,     1,    -1,   238,    -1,   240,    -1,
     120,   239,   122,    -1,   120,     1,   122,    -1,   405,    -1,
     239,   121,   405,    -1,   239,     1,   405,    -1,   239,   121,
       1,    -1,   239,     1,    -1,   359,   102,   359,    -1,   231,
     359,   102,   359,    -1,   126,   242,    -1,   127,   242,    -1,
      96,   242,    -1,   420,    55,   242,    -1,   405,    -1,   243,
      -1,   248,    -1,    36,   299,    -1,    25,   299,   298,    -1,
      16,   124,   245,   125,    33,   228,    -1,   248,    -1,    23,
     247,    33,   228,    -1,    41,    33,   228,    -1,    39,   249,
      22,    -1,    39,     1,    22,    -1,   425,    -1,   246,    -1,
     245,   121,   246,    -1,   245,     1,   246,    -1,   245,     1,
      -1,     1,    -1,   237,    -1,   233,    -1,   424,    -1,   124,
     246,   125,    -1,    23,    -1,    -1,   251,   419,    -1,   250,
      18,   253,    33,   256,   419,   255,    -1,   424,    -1,   251,
     119,    -1,   252,    -1,   251,   119,   252,    -1,   251,     1,
     252,    -1,   251,   119,     1,    -1,   251,     1,    -1,   189,
     123,   228,   278,    -1,   405,   123,   233,    -1,   405,   123,
     254,    -1,   412,    -1,   254,    -1,   237,    -1,    -1,   336,
     120,   249,   122,   419,    -1,   257,    -1,   256,   119,   257,
      -1,   256,     1,   257,    -1,     1,    -1,   256,     1,    -1,
     258,   123,   120,   249,   122,    -1,   259,    -1,   258,   121,
     259,    -1,   258,   121,     1,    -1,   258,     1,   259,    -1,
     258,     1,    -1,   356,    -1,   356,   102,   356,    -1,   356,
       1,   356,    -1,   356,   102,     1,    -1,    43,    33,   359,
      -1,   424,    -1,    49,    -1,   424,    -1,   120,   233,   122,
      -1,   120,     1,   122,    -1,   264,    -1,   264,   265,    -1,
       1,    -1,   424,    -1,   264,    86,    -1,   264,   265,   119,
      -1,   189,   123,   228,   278,    -1,    36,   405,   299,    -1,
      25,   405,   299,   295,   298,    -1,    10,   405,   299,    -1,
       9,   405,   299,    -1,    74,    -1,    74,   359,    -1,    49,
      -1,   274,    -1,   267,    -1,   266,   267,    -1,    -1,   191,
     417,   123,   227,   268,   279,   269,   119,    -1,     1,    -1,
     424,    -1,   269,   119,   270,    -1,   273,    -1,    56,   368,
      -1,    -1,    56,   368,    86,   271,   359,    -1,   424,    -1,
     272,   119,   273,    -1,    76,   359,    -1,   274,    -1,    53,
     120,   275,   122,    -1,   276,    -1,   275,   121,   276,    -1,
     424,    -1,    55,    -1,   405,    -1,   405,   421,   359,    -1,
     405,   120,   359,   122,    -1,   405,   120,   412,   121,   359,
     122,    -1,    73,    -1,   106,    -1,    99,    -1,   424,    -1,
     277,   385,    -1,   277,     1,    -1,   278,    -1,    -1,    48,
     280,   359,    -1,    48,     1,    -1,   286,   119,   288,    -1,
     285,   119,   289,    -1,    -1,    -1,   285,   119,   292,   283,
     202,   145,   284,   311,   119,    -1,   286,    -1,   287,    -1,
      36,   405,   299,    -1,    25,   405,   299,   295,   298,    -1,
       8,   294,   299,   297,   298,    -1,    36,   405,     4,   405,
     299,    -1,    25,   405,     4,   405,   299,   295,   298,    -1,
      10,   405,     4,   405,   299,    -1,     9,   405,     4,   405,
     299,    -1,   292,    -1,   289,    -1,   292,   290,   292,    -1,
      59,   119,    -1,    56,   368,   119,    -1,    -1,    56,   368,
      86,   291,   359,   119,    -1,    56,   368,   119,    76,   359,
     119,    -1,    76,   359,   119,    56,   368,   119,    -1,    76,
     359,   119,    -1,    77,   119,    -1,    78,   119,    -1,   424,
      -1,   292,   274,   119,    -1,   292,   293,   119,    -1,    57,
      -1,    63,    -1,   405,    -1,   404,    -1,   424,    -1,   296,
     405,    -1,   421,    -1,    -1,   405,    -1,   421,   405,    -1,
     424,    -1,   315,    -1,   123,   232,    -1,   425,    -1,   424,
      -1,   120,   122,    -1,   120,   300,   122,    -1,   120,   103,
     122,    -1,   120,   300,   119,   103,   122,    -1,   120,     1,
     122,    -1,   301,    -1,   300,   119,   301,    -1,   300,     1,
     301,    -1,   300,   119,     1,    -1,   189,   123,   304,    -1,
     418,   189,   123,   304,    -1,   302,    45,   189,   303,    -1,
      55,   189,   303,    -1,    36,   405,   299,    -1,    25,   405,
     299,   295,   298,    -1,   424,    -1,   418,    -1,    -1,   123,
     304,    -1,   310,    -1,   260,    -1,   305,    -1,   309,    -1,
      16,   124,   307,   125,    33,   306,    -1,   231,    16,   124,
     308,   125,    33,   233,    -1,   233,    -1,   305,    -1,   308,
      -1,   307,   119,   308,    -1,   307,     1,   308,    -1,   307,
     119,     1,    -1,   405,   102,   405,   123,   233,    -1,    16,
      33,   310,    -1,   233,    -1,   248,    -1,    17,   414,   312,
     415,    22,    -1,   313,    -1,   312,   119,   313,    -1,    -1,
     317,    -1,    -1,    45,   267,   314,   313,    -1,    -1,   315,
      -1,   317,    -1,   330,    -1,   330,   318,    -1,   318,    -1,
     311,    -1,   342,    -1,    -1,   342,   319,   343,   359,    -1,
      84,    -1,    84,   359,    -1,    85,    -1,    85,   120,    38,
     122,    -1,    85,   120,    86,   122,    -1,   344,    -1,    47,
     331,    20,   316,    -1,   333,    -1,    -1,   333,    14,   320,
     316,    -1,    -1,    -1,    18,   359,    33,   321,   337,   322,
     335,    22,    -1,    -1,    -1,    -1,    40,   323,   414,   312,
      44,   324,   357,   325,   415,    -1,    -1,    -1,    46,   326,
     414,   357,   327,    20,   316,   415,    -1,    -1,    24,   372,
     343,   359,   341,   359,   328,    20,   414,   316,   415,    -1,
      -1,    24,   372,    28,   359,   329,    20,   414,   316,   415,
      -1,    26,   216,    -1,   216,   123,    -1,   332,    -1,   331,
     121,   332,    -1,     1,    -1,   331,     1,   332,    -1,   331,
     121,     1,    -1,   358,    -1,   358,   123,   405,    -1,    -1,
      27,   357,    42,   334,   316,    -1,    -1,   336,   414,   312,
     415,    -1,    14,    -1,    66,    -1,    -1,   338,   419,    -1,
     339,    -1,   338,   119,   339,    -1,     1,    -1,   338,     1,
     339,    -1,   338,   119,     1,    -1,    -1,   258,   123,   340,
     414,   316,   415,    -1,    37,    -1,    21,    -1,     1,    -1,
     373,    -1,   126,   373,    -1,   106,    -1,   421,    -1,   403,
     346,    -1,    88,    -1,    88,   120,   349,   422,    -1,   345,
     422,    -1,   345,   121,   348,   422,    -1,   345,   121,    97,
     346,   422,    -1,    52,   351,   120,   371,   122,    -1,    52,
     351,   120,   371,   123,   352,   122,    -1,    52,   351,   120,
     371,   123,   352,   123,   352,   122,    -1,    52,   351,   120,
     371,   123,   352,   123,   352,   123,   355,   122,    -1,    81,
     120,   359,    -1,   424,    -1,    -1,   347,   120,   348,   422,
      -1,   359,    -1,   348,   121,   359,    -1,     1,    -1,   348,
     121,     1,    -1,   350,    -1,   349,   121,   350,    -1,   349,
       1,   350,    -1,   349,   121,     1,    -1,   359,    -1,   359,
     123,   359,    -1,   359,   123,   359,   123,   359,    -1,    -1,
      86,    -1,   424,    -1,   353,    -1,   354,    -1,   353,   121,
     354,    -1,   367,   120,   359,   122,    -1,   367,    -1,   355,
     121,   367,    -1,   359,    -1,   359,    -1,   359,    -1,   360,
     396,   360,    -1,   360,    -1,   362,    -1,   394,   362,    -1,
     360,   397,   362,    -1,   360,   401,   362,    -1,    -1,   360,
     399,   361,   362,    -1,   364,    -1,   362,   398,   364,    -1,
     362,   402,   364,    -1,    -1,   362,   400,   363,   364,    -1,
     365,    -1,   364,   412,   365,    -1,   365,    68,   365,    -1,
     365,   110,   365,    -1,   364,    62,   233,    -1,   364,    51,
     233,    -1,   395,   365,    -1,   126,   365,    -1,   367,    -1,
     366,    -1,    31,    -1,   391,    -1,   373,    -1,    92,    -1,
      93,    -1,    95,    -1,   371,    -1,   424,    -1,   367,    -1,
      94,    -1,    96,    -1,   127,   370,    -1,    98,    -1,   121,
      -1,     4,    -1,   123,    -1,   119,    -1,   120,    -1,   122,
      -1,   124,    -1,   125,    -1,   128,    -1,   129,    -1,   130,
      -1,   131,    -1,   132,    -1,   133,    -1,   134,    -1,   126,
      -1,   127,    -1,   369,    -1,   371,   369,    -1,   373,    -1,
      89,   346,    -1,    91,    -1,   374,    -1,   411,    -1,    61,
     405,    -1,   372,     4,   405,    -1,   120,   359,   122,    -1,
     372,   420,    -1,   372,   124,   389,   125,    -1,   372,   124,
     379,   125,    -1,   374,   120,   122,    -1,    -1,   374,   120,
     375,   348,   422,    -1,   248,   120,   359,   122,    -1,    82,
     120,   349,   122,    -1,    -1,    80,   376,   120,   359,   122,
      -1,    79,   120,   373,   122,    -1,    90,   120,   378,   122,
      -1,   377,   122,    -1,   377,   121,   348,   122,    -1,   377,
     121,    97,   346,   122,    -1,    83,   120,   378,    -1,   373,
      -1,   248,    -1,   380,   419,    -1,   380,   119,   382,    -1,
     380,   419,   384,    -1,   382,    -1,   384,    -1,   381,    -1,
     380,   119,   381,    -1,   389,   123,   385,    -1,   385,    -1,
      18,   405,   123,   359,    33,   383,    -1,    18,   359,    33,
     383,    -1,   124,   379,   125,   419,    -1,    66,   385,   419,
      -1,   359,    -1,   120,   122,    -1,   120,   386,   122,    -1,
     124,   379,   125,    -1,   124,     1,   125,    -1,   388,    -1,
     386,   387,   388,    -1,   386,     1,   388,    -1,   119,    -1,
     121,    -1,   390,   123,   385,    -1,   385,    -1,   390,    -1,
     389,   121,   390,    -1,     1,    -1,   389,     1,   390,    -1,
     389,   121,     1,    -1,   405,    -1,   359,    -1,   359,   102,
     359,    -1,   124,   125,    -1,   124,   392,   125,    -1,   393,
      -1,   392,   121,   393,    -1,   392,     1,   393,    -1,   392,
     121,     1,    -1,   359,    -1,   359,   102,   359,    -1,   128,
      -1,   129,    -1,   100,    -1,   101,    -1,    32,    -1,   107,
      -1,   109,    -1,   108,    -1,   133,    -1,   132,    -1,   134,
      -1,    28,    -1,   128,    -1,   100,    -1,   129,    -1,   101,
      -1,    75,    -1,   105,    -1,   130,    -1,   131,    -1,    19,
      -1,    30,    -1,    70,    -1,    71,    -1,    34,    -1,    34,
      14,    -1,    67,    -1,   135,    -1,    15,    -1,    15,    42,
      -1,    50,    -1,   136,    -1,   111,    -1,   112,    -1,   113,
      -1,   114,    -1,   115,    -1,   116,    -1,   117,    -1,   118,
      -1,    87,    -1,    15,    -1,    34,    -1,    32,    -1,    75,
      -1,    70,    -1,    71,    -1,   128,    -1,   100,    -1,   129,
      -1,   101,    -1,   130,    -1,   131,    -1,    19,    -1,    30,
      -1,   110,    -1,    28,    -1,   132,    -1,   421,    -1,   134,
      -1,   107,    -1,   108,    -1,   109,    -1,    15,    -1,   136,
      -1,    34,    -1,   135,    -1,   105,    -1,   402,    -1,   401,
      -1,   406,    -1,   408,    -1,    10,    -1,     9,    -1,    56,
      -1,    11,    -1,    60,    -1,    12,    -1,     8,    -1,    13,
      -1,   408,    -1,   409,    -1,    76,    -1,    53,    -1,   410,
      -1,    86,    -1,   413,    -1,    57,    -1,    59,    -1,    63,
      -1,    89,    -1,    91,    -1,    87,    -1,    88,    -1,    90,
      -1,    84,    -1,    85,    -1,    79,    -1,    80,    -1,    83,
      -1,    81,    -1,    82,    -1,    48,    -1,    49,    -1,    50,
      -1,    51,    -1,    52,    -1,    54,    -1,    77,    -1,    78,
      -1,    58,    -1,    61,    -1,    62,    -1,    64,    -1,    65,
      -1,    67,    -1,    66,    -1,    68,    -1,    69,    -1,    70,
      -1,    71,    -1,    72,    -1,    73,    -1,    74,    -1,    75,
      -1,   412,    -1,    86,    -1,   413,    -1,    57,    -1,    59,
      -1,    63,    -1,    98,    -1,    -1,    -1,    -1,    -1,    86,
      -1,    -1,   119,    -1,   127,    -1,    96,    -1,   126,    -1,
     133,    -1,    99,    -1,   122,    -1,     1,    -1,     4,    -1,
       1,    -1,    -1,     1,    -1
d838 78
a915 79
       0,   245,   245,   246,   258,   260,   257,   263,   269,   270,
     272,   278,   279,   284,   285,   290,   291,   296,   296,   299,
     301,   306,   316,   319,   318,   322,   328,   330,   327,   333,
     334,   336,   335,   344,   346,   343,   352,   351,   358,   360,
     357,   367,   366,   374,   373,   379,   380,   384,   389,   394,
     395,   400,   401,   406,   407,   408,   414,   415,   420,   421,
     421,   424,   429,   431,   429,   435,   437,   438,   439,   444,
     443,   451,   450,   457,   463,   462,   469,   468,   471,   473,
     472,   476,   480,   481,   486,   491,   493,   495,   501,   503,
     507,   509,   514,   515,   517,   519,   521,   526,   532,   533,
     537,   539,   540,   545,   550,   551,   553,   555,   557,   562,
     564,   566,   571,   572,   577,   578,   585,   588,   590,   594,
     598,   599,   600,   605,   610,   611,   616,   617,   619,   624,
     629,   630,   631,   636,   641,   642,   647,   648,   650,   652,
     654,   659,   666,   668,   670,   672,   674,   676,   680,   681,
     688,   689,   693,   700,   701,   702,   706,   708,   719,   720,
     722,   723,   725,   727,   731,   742,   741,   753,   756,   755,
     766,   768,   773,   774,   776,   778,   780,   784,   789,   790,
     797,   807,   808,   813,   814,   816,   818,   819,   820,   821,
     823,   824,   829,   834,   846,   860,   861,   866,   868,   876,
     881,   886,   888,   894,   901,   902,   906,   908,   913,   915,
     917,   919,   921,   925,   927,   937,   939,   941,   943,   951,
     953,   959,   965,   967,   972,   974,   975,   977,   979,   981,
     983,   987,   988,   990,   992,   994,   999,  1001,  1006,  1007,
    1012,  1018,  1019,  1021,  1026,  1027,  1031,  1032,  1034,  1036,
    1038,  1042,  1047,  1049,  1051,  1053,  1058,  1064,  1065,  1070,
    1071,  1073,  1075,  1077,  1081,  1086,  1087,  1089,  1091,  1093,
    1097,  1099,  1104,  1110,  1115,  1122,  1123,  1127,  1128,  1130,
    1135,  1136,  1138,  1143,  1144,  1146,  1151,  1153,  1155,  1157,
    1159,  1161,  1163,  1165,  1167,  1173,  1174,  1179,  1178,  1203,
    1208,  1209,  1214,  1215,  1218,  1217,  1224,  1225,  1230,  1232,
    1237,  1242,  1243,  1248,  1249,  1251,  1253,  1255,  1257,  1262,
    1263,  1265,  1270,  1271,  1273,  1278,  1280,  1279,  1287,  1294,
    1305,  1308,  1311,  1307,  1323,  1324,  1328,  1330,  1332,  1342,
    1344,  1346,  1348,  1353,  1354,  1358,  1363,  1365,  1368,  1367,
    1371,  1373,  1375,  1377,  1379,  1384,  1385,  1387,  1395,  1396,
    1400,  1401,  1405,  1406,  1411,  1413,  1417,  1418,  1420,  1425,
    1427,  1429,  1433,  1434,  1439,  1441,  1443,  1445,  1450,  1451,
    1453,  1455,  1459,  1461,  1463,  1465,  1467,  1469,  1474,  1475,
    1480,  1481,  1486,  1487,  1488,  1489,  1493,  1495,  1504,  1505,
    1509,  1510,  1512,  1514,  1518,  1526,  1534,  1535,  1541,  1546,
    1547,  1551,  1553,  1555,  1554,  1560,  1564,  1566,  1571,  1572,
    1573,  1580,  1581,  1584,  1583,  1587,  1589,  1591,  1593,  1595,
    1597,  1598,  1600,  1603,  1602,  1611,  1616,  1610,  1632,  1634,
    1636,  1631,  1640,  1642,  1639,  1646,  1645,  1650,  1649,  1653,
    1658,  1663,  1664,  1666,  1668,  1670,  1675,  1677,  1683,  1682,
    1693,  1700,  1705,  1707,  1712,  1713,  1718,  1719,  1721,  1723,
    1725,  1731,  1730,  1737,  1739,  1741,  1746,  1747,  1752,  1753,
    1758,  1760,  1762,  1764,  1766,  1774,  1776,  1778,  1780,  1782,
    1787,  1792,  1793,  1793,  1799,  1801,  1803,  1805,  1810,  1811,
    1813,  1815,  1821,  1823,  1825,  1831,  1832,  1837,  1838,  1842,
    1843,  1848,  1853,  1855,  1862,  1879,  1890,  1895,  1897,  1902,
    1903,  1905,  1907,  1910,  1909,  1916,  1917,  1919,  1922,  1921,
    1928,  1929,  1931,  1933,  1935,  1937,  1942,  1944,  1949,  1950,
    1951,  1953,  1954,  1969,  1970,  1971,  1975,  1980,  1981,  1985,
    1986,  1987,  1992,  1993,  1993,  1993,  1993,  1993,  1993,  1993,
    1993,  1994,  1994,  1994,  1994,  1994,  1994,  1994,  1994,  1994,
    1998,  2000,  2005,  2010,  2012,  2014,  2018,  2019,  2021,  2023,
    2025,  2027,  2029,  2031,  2034,  2033,  2040,  2042,  2045,  2044,
    2051,  2053,  2055,  2057,  2068,  2073,  2078,  2079,  2084,  2085,
    2087,  2089,  2090,  2094,  2095,  2100,  2102,  2107,  2109,  2114,
    2119,  2124,  2126,  2128,  2130,  2132,  2137,  2138,  2140,  2145,
    2146,  2151,  2153,  2158,  2159,  2161,  2163,  2165,  2170,  2172,
    2174,  2179,  2181,  2186,  2187,  2189,  2191,  2196,  2198,  2205,
    2206,  2210,  2211,  2212,  2216,  2217,  2218,  2219,  2220,  2221,
    2222,  2226,  2227,  2228,  2229,  2230,  2231,  2235,  2236,  2237,
    2238,  2239,  2240,  2244,  2245,  2246,  2247,  2251,  2252,  2253,
    2254,  2258,  2259,  2260,  2261,  2265,  2266,  2267,  2268,  2274,
    2277,  2278,  2279,  2280,  2281,  2282,  2288,  2289,  2290,  2291,
    2292,  2293,  2294,  2295,  2296,  2297,  2298,  2299,  2300,  2301,
    2302,  2303,  2304,  2305,  2306,  2307,  2308,  2309,  2310,  2314,
    2319,  2320,  2321,  2322,  2323,  2324,  2325,  2326,  2327,  2332,
    2337,  2338,  2339,  2344,  2349,  2350,  2351,  2352,  2353,  2354,
    2355,  2356,  2357,  2358,  2359,  2360,  2361,  2362,  2363,  2364,
    2365,  2366,  2367,  2368,  2369,  2370,  2371,  2372,  2373,  2374,
    2375,  2376,  2377,  2378,  2379,  2380,  2381,  2382,  2383,  2384,
    2385,  2386,  2387,  2388,  2392,  2397,  2398,  2399,  2400,  2401,
    2405,  2413,  2418,  2423,  2433,  2437,  2443,  2444,  2449,  2450,
    2451,  2455,  2456,  2460,  2461,  2466,  2467,  2473,  2477
d919 2
a920 2
#if (YYDEBUG) || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
d924 21
a944 21
  "$end", "error", "$undefined", "prec_id", "'.'", "prec_if",
  "prec_lower_than_error", "prec_import", "p_operator", "p_destructor",
  "p_constructor", "p_implementation", "p_initialization", "p_uses",
  "p_else", "p_and", "p_array", "p_begin", "p_case", "p_div", "p_do",
  "p_downto", "p_end", "p_file", "p_for", "p_function", "p_goto", "p_if",
  "p_in", "p_label", "p_mod", "p_nil", "p_not", "p_of", "p_or", "p_packed",
  "p_procedure", "p_to", "p_program", "p_record", "p_repeat", "p_set",
  "p_then", "p_type", "p_until", "p_var", "p_while", "p_with",
  "p_absolute", "p_abstract", "p_and_then", "p_as", "p_asm", "p_attribute",
  "p_bindable", "p_const", "p_external", "p_far", "p_finalization",
  "p_forward", "p_import", "p_inherited", "p_is", "p_near", "p_object",
  "p_only", "p_otherwise", "p_or_else", "p_pow", "p_restricted", "p_shl",
  "p_shr", "p_unit", "p_value", "p_virtual", "p_xor", "p_asmname", "p_c",
  "p_c_language", "p_Addr", "p_Assigned", "p_Dispose", "p_FormatString",
  "p_New", "p_Return", "p_Exit", "LEX_ID", "LEX_BUILTIN_PROCEDURE",
  "LEX_BUILTIN_PROCEDURE_WRITE", "LEX_BUILTIN_FUNCTION",
  "LEX_BUILTIN_FUNCTION_VT", "LEX_BUILTIN_VARIABLE", "LEX_INTCONST",
  "LEX_INTCONST_BASE", "LEX_STRCONST", "LEX_REALCONST", "LEX_CARET_WHITE",
  "LEX_STRUCTOR", "LEX_CARET_LETTER", "LEX_CONST_EQUAL", "LEX_BPPLUS",
  "LEX_BPMINUS", "LEX_RANGE", "LEX_ELLIPSIS", "LEX_RENAME", "LEX_SYMDIFF",
  "LEX_ASSIGN", "LEX_NE", "LEX_GE", "LEX_LE", "LEX_POWER", "LEX_CEIL_PLUS",
d946 28
a973 26
  "LEX_CEIL_DIV", "LEX_FLOOR_MULT", "LEX_FLOOR_DIV", "';'", "'('", "','",
  "')'", "':'", "'['", "']'", "'@@'", "'^'", "'+'", "'-'", "'*'", "'/'",
  "'<'", "'='", "'>'", "'|'", "'&'", "$accept", "program_component",
  "program_component_1", "@@1", "@@2", "optional_program_heading",
  "declarations_and_uses", "declaration_or_uses", "any_declaration_part",
  "any_decl", "@@3", "simple_decl", "simple_decl_1", "@@4",
  "module_declaration", "@@5", "@@6", "@@7", "@@8", "@@9", "@@10",
  "interface_module", "@@11", "@@12", "module_interface", "@@13",
  "implementatation_module", "@@14", "optional_unit_implementation",
  "module", "optional_module_parameters", "optional_module_attributes",
  "interface_decl_part", "interface_decl", "implementation_decls",
  "implementation_decl", "@@15", "module_block", "@@16", "@@17",
  "optional_init_and_final_part", "module_constructor", "@@18",
  "module_destructor", "@@19", "rest_of_unit_constructor",
  "unit_initialization", "@@20", "optional_unit_init_and_final_part", "@@21",
  "@@22", "optional_par_id_list", "id_list", "id_list1", "id_list_limited",
  "export_part_list", "export_part", "equals_or_error",
  "export_list_or_all", "export_all", "export_list", "export_list_item",
  "new_quid", "optional_rename", "extra_import_part",
  "optional_import_part1", "optional_import_part",
  "import_specification_list", "import_specification",
  "optional_qualified", "optional_import_qualifier", "uses_part",
  "uses_list", "uses_specification", "optional_unit_filename",
  "import_clause_list", "import_clause", "label_list", "new_label",
  "label", "num_label", "constant_definition_list", "constant_definition",
  "type_definition_list", "type_definition", "@@23", "@@24",
d976 1
a976 2
  "type_denoter", "type_denoter_1", "type_denoter_0", "packed",
  "typename_or_string255", "typename", "typename_1",
d978 7
a984 8
  "new_ordinal_type", "enumerated_type", "enum_list", "subrange_type",
  "new_pointer_type", "pointer_domain_type", "new_procedural_type",
  "unpacked_structured_type", "array_index_list", "ordinal_index_type",
  "direct_access_index_type", "untyped_file", "record_field_list",
  "optional_fixed_part", "fixed_part", "record_section",
  "variant_selector", "new_ordinal_type_non_iso", "rest_of_variant",
  "variant_list", "variant", "case_constant_list", "one_case_constant",
  "type_inquiry", "optional_abstract", "object_parent",
d986 2
a987 7
  "variable_declaration_list", "variable_declaration", "@@25",
  "optional_variable_directive_list", "variable_directive", "@@26",
  "optional_variable_directive_list_no_external",
  "variable_directive_no_external", "attributes", "attribute_list",
  "attrib", "var_init", "optional_value_specification",
  "absolute_or_value_specification", "@@27", "routine_interface_decl",
  "routine_declaration", "@@28", "@@29", "routine_or_method_heading",
d990 3
a992 3
  "remote_directive", "@@30", "optional_routine_directive_list",
  "bp_directive", "operator_identifier", "optional_result_def",
  "optional_result_equals", "operator_result_def", "resulttype",
d994 4
a997 2
  "formal_parameter", "optional_protected", "optional_parameter_form",
  "parameter_form", "conformant_array", "typename_or_conformant_array",
d1000 7
a1006 6
  "statement_sequence", "optional_statement_vd", "@@31", "empty_lte",
  "optional_statement", "statement", "unlabelled_statement", "@@32", "@@33",
  "@@34", "@@35", "@@36", "@@37", "@@38", "@@39", "@@40", "@@41", "@@42",
  "set_label", "with_list", "with_variable", "if_then", "@@43",
  "optional_case_completer", "otherwise", "optional_case_element_list",
  "case_element_list", "case_element", "@@44", "for_direction",
d1008 8
a1015 1
  "start_of_dispose", "optional_actual_parameter_list", "@@45",
d1017 1
a1017 10
  "write_actual_parameter", "asm_qualifier", "asm_operands",
  "nonempty_asm_operands", "asm_operand", "asm_clobbers",
  "static_expression", "boolean_expression", "expression_no_par",
  "expression", "simple_expression", "@@46", "term", "@@47", "factor",
  "primary", "unsigned_number", "combined_string",
  "optional_combined_string", "string_constant", "caret_chars",
  "string_constants", "variable_or_routine_access_no_parentheses",
  "variable_or_routine_access",
  "variable_or_routine_access_no_builtin_function", "@@48", "@@49",
  "start_of_new", "variable_or_typename", "structured_constructor_list",
d1024 7
a1030 8
  "multiplying_operator", "or_operator", "and_operator",
  "pxsc_adding_operator", "pxsc_multiplying_operator", "builtin_proc",
  "operator_symbol", "new_identifier", "new_identifier_1",
  "new_identifier_limited_par", "new_identifier_limited_par_1",
  "new_identifier_limited", "new_identifier_limited_1", "identifier", "id",
  "caret_letter", "pushlevel", "poplevel", "setspecs", "enable_lce",
  "i_protected", "optional_semicolon", "pointer_char", "equals",
  "rpar_or_error", "dot_or_error", "null", "err", 0
d1037 78
a1114 79
       0,   137,   138,   138,   140,   141,   139,   139,   142,   142,
     142,   143,   143,   144,   144,   145,   145,   147,   146,   146,
     146,   148,   149,   150,   149,   149,   152,   153,   151,   151,
     151,   154,   151,   155,   156,   151,   157,   151,   159,   160,
     158,   162,   161,   164,   163,   165,   165,   166,   167,   168,
     168,   169,   169,   170,   170,   170,   171,   171,   172,   173,
     172,   172,   175,   176,   174,   177,   177,   177,   177,   179,
     178,   181,   180,   182,   184,   183,   186,   185,   185,   187,
     185,   185,   188,   188,   189,   190,   190,   190,   190,   190,
     191,   191,   192,   192,   192,   192,   192,   193,   194,   194,
     195,   195,   195,   196,   197,   197,   197,   197,   197,   198,
     198,   198,   199,   199,   200,   200,   201,   202,   202,   203,
     204,   204,   204,   205,   206,   206,   207,   207,   207,   208,
     209,   209,   209,   210,   211,   211,   212,   212,   212,   212,
     212,   213,   214,   214,   214,   214,   214,   214,   215,   215,
     216,   216,   217,   218,   218,   218,   219,   219,   220,   220,
     220,   220,   220,   220,   221,   222,   221,   221,   223,   221,
     224,   224,   225,   225,   225,   225,   225,   226,   227,   227,
     228,   229,   229,   230,   230,   230,   230,   230,   230,   230,
     230,   230,   231,   232,   233,   234,   234,   235,   235,   236,
     236,   236,   236,   236,   237,   237,   238,   238,   239,   239,
     239,   239,   239,   240,   240,   241,   241,   241,   241,   242,
     242,   242,   243,   243,   244,   244,   244,   244,   244,   244,
     244,   245,   245,   245,   245,   245,   246,   246,   247,   247,
     248,   249,   249,   249,   250,   250,   251,   251,   251,   251,
     251,   252,   253,   253,   253,   253,   254,   255,   255,   256,
     256,   256,   256,   256,   257,   258,   258,   258,   258,   258,
     259,   259,   259,   259,   260,   261,   261,   262,   262,   262,
     263,   263,   263,   264,   264,   264,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   266,   266,   268,   267,   267,
     269,   269,   270,   270,   271,   270,   272,   272,   273,   273,
     274,   275,   275,   276,   276,   276,   276,   276,   276,   277,
     277,   277,   278,   278,   278,   279,   280,   279,   279,   281,
     282,   283,   284,   282,   285,   285,   286,   286,   286,   287,
     287,   287,   287,   288,   288,   289,   290,   290,   291,   290,
     290,   290,   290,   290,   290,   292,   292,   292,   293,   293,
     294,   294,   295,   295,   296,   296,   297,   297,   297,   298,
     298,   298,   299,   299,   299,   299,   299,   299,   300,   300,
     300,   300,   301,   301,   301,   301,   301,   301,   302,   302,
     303,   303,   304,   304,   304,   304,   305,   305,   306,   306,
     307,   307,   307,   307,   308,   309,   310,   310,   311,   312,
     312,   313,   313,   314,   313,   315,   316,   316,   317,   317,
     317,   318,   318,   319,   318,   318,   318,   318,   318,   318,
     318,   318,   318,   320,   318,   321,   322,   318,   323,   324,
     325,   318,   326,   327,   318,   328,   318,   329,   318,   318,
     330,   331,   331,   331,   331,   331,   332,   332,   334,   333,
     335,   335,   336,   336,   337,   337,   338,   338,   338,   338,
     338,   340,   339,   341,   341,   341,   342,   342,   343,   343,
     344,   344,   344,   344,   344,   344,   344,   344,   344,   344,
     345,   346,   347,   346,   348,   348,   348,   348,   349,   349,
     349,   349,   350,   350,   350,   351,   351,   352,   352,   353,
     353,   354,   355,   355,   356,   357,   358,   359,   359,   360,
     360,   360,   360,   361,   360,   362,   362,   362,   363,   362,
     364,   364,   364,   364,   364,   364,   365,   365,   365,   365,
     365,   365,   365,   366,   366,   366,   367,   368,   368,   369,
     369,   369,   370,   370,   370,   370,   370,   370,   370,   370,
     370,   370,   370,   370,   370,   370,   370,   370,   370,   370,
     371,   371,   372,   373,   373,   373,   374,   374,   374,   374,
     374,   374,   374,   374,   375,   374,   374,   374,   376,   374,
     374,   374,   374,   374,   374,   377,   378,   378,   379,   379,
     379,   379,   379,   380,   380,   381,   381,   382,   382,   383,
     384,   385,   385,   385,   385,   385,   386,   386,   386,   387,
     387,   388,   388,   389,   389,   389,   389,   389,   390,   390,
     390,   391,   391,   392,   392,   392,   392,   393,   393,   394,
     394,   395,   395,   395,   396,   396,   396,   396,   396,   396,
     396,   397,   397,   397,   397,   397,   397,   398,   398,   398,
     398,   398,   398,   399,   399,   399,   399,   400,   400,   400,
     400,   401,   401,   401,   401,   402,   402,   402,   402,   403,
     403,   403,   403,   403,   403,   403,   404,   404,   404,   404,
     404,   404,   404,   404,   404,   404,   404,   404,   404,   404,
     404,   404,   404,   404,   404,   404,   404,   404,   404,   405,
     406,   406,   406,   406,   406,   406,   406,   406,   406,   407,
     408,   408,   408,   409,   410,   410,   410,   410,   410,   410,
     410,   410,   410,   410,   410,   410,   410,   410,   410,   410,
     410,   410,   410,   410,   410,   410,   410,   410,   410,   410,
     410,   410,   410,   410,   410,   410,   410,   410,   410,   410,
     410,   410,   410,   410,   411,   412,   412,   412,   412,   412,
     413,   414,   415,   416,   417,   418,   419,   419,   420,   420,
     420,   421,   421,   422,   422,   423,   423,   424,   425
d1120 19
a1138 18
       0,     2,     0,     1,     0,     0,     8,     1,     0,     4,
       4,     0,     2,     1,     1,     0,     2,     0,     2,     3,
       1,     2,     2,     0,     4,     2,     0,     0,    12,     1,
       1,     0,     3,     0,     0,     9,     0,     6,     0,     0,
       8,     0,     7,     0,     7,     0,     4,     1,     3,     1,
       2,     0,     2,     1,     1,     1,     0,     2,     1,     0,
       2,     1,     0,     0,     6,     0,     2,     1,     1,     0,
       6,     0,     6,     1,     0,     3,     0,     3,     1,     0,
       4,     1,     1,     3,     1,     1,     3,     3,     3,     2,
       1,     3,     1,     3,     1,     3,     3,     3,     0,     1,
       3,     1,     4,     1,     1,     3,     1,     3,     3,     2,
       3,     3,     1,     3,     1,     2,     0,     0,     3,     2,
       1,     3,     3,     4,     1,     1,     1,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     1,     3,     1,     3,
       3,     2,     1,     3,     1,     3,     3,     2,     1,     1,
       1,     1,     1,     1,     2,     1,     4,     8,     1,     3,
       1,     3,     3,     2,     5,     0,     6,     3,     0,     9,
       3,     3,     1,     3,     3,     3,     2,     3,     1,     2,
d1140 14
a1153 18
       1,     2,     1,     1,     1,     1,     3,     3,     3,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     2,     3,     4,     2,     2,     2,     3,     1,
       1,     1,     2,     3,     6,     1,     4,     3,     3,     3,
       1,     1,     3,     3,     2,     1,     1,     1,     1,     3,
       1,     0,     2,     7,     1,     2,     1,     3,     3,     3,
       2,     4,     3,     3,     1,     1,     1,     0,     5,     1,
       3,     3,     1,     2,     5,     1,     3,     3,     3,     2,
       1,     3,     3,     3,     3,     1,     1,     1,     3,     3,
       1,     2,     1,     1,     2,     3,     4,     3,     5,     3,
       3,     1,     2,     1,     1,     1,     2,     0,     8,     1,
       1,     3,     1,     2,     0,     5,     1,     3,     2,     1,
       4,     1,     3,     1,     1,     1,     3,     4,     6,     1,
       1,     1,     1,     2,     2,     1,     0,     3,     2,     3,
       3,     0,     0,     9,     1,     1,     3,     5,     5,     5,
       7,     5,     5,     1,     1,     3,     2,     3,     0,     6,
       6,     6,     3,     2,     2,     1,     3,     3,     1,     1,
       1,     1,     1,     2,     1,     0,     1,     2,     1,     1,
d1155 5
a1159 4
       3,     3,     3,     4,     4,     3,     3,     5,     1,     1,
       0,     2,     1,     1,     1,     1,     6,     7,     1,     1,
       1,     3,     3,     3,     5,     3,     1,     1,     5,     1,
       3,     0,     1,     0,     4,     0,     1,     1,     1,     2,
d1161 1
a1161 1
       1,     4,     1,     0,     4,     0,     0,     8,     0,     0,
d1163 1
a1163 1
       2,     1,     3,     1,     3,     3,     1,     3,     0,     5,
d1165 6
a1170 7
       3,     0,     6,     1,     1,     1,     1,     2,     1,     1,
       2,     1,     4,     2,     4,     5,     5,     7,     9,    11,
       3,     1,     0,     4,     1,     3,     1,     3,     1,     3,
       3,     3,     1,     3,     5,     0,     1,     1,     1,     1,
       3,     4,     1,     3,     1,     1,     1,     3,     1,     1,
       2,     3,     3,     0,     4,     1,     3,     3,     0,     4,
       1,     3,     3,     3,     3,     3,     2,     2,     1,     1,
d1172 1
a1172 1
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
d1174 9
a1182 7
       1,     2,     1,     2,     1,     1,     1,     2,     3,     3,
       2,     4,     4,     3,     0,     5,     4,     4,     0,     5,
       4,     4,     2,     4,     5,     3,     1,     1,     2,     3,
       3,     1,     1,     1,     3,     3,     1,     6,     4,     4,
       3,     1,     2,     3,     3,     3,     1,     3,     3,     1,
       1,     3,     1,     1,     3,     1,     3,     3,     1,     1,
       3,     2,     3,     1,     3,     3,     3,     1,     3,     1,
d1184 2
a1186 1
       1,     1,     1,     1,     2,     1,     1,     1,     2,     1,
d1189 2
d1196 1
a1196 4
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     0,     0,     0,     1,     0,     1,     1,     1,
d1250 1
d1258 2
d1262 1
d1264 1
a1264 6
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     3,     3,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     1,
a1362 1
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d1371 130
a1500 131
       8,     0,     0,    47,     0,     3,   787,     7,    29,    30,
       0,   787,   717,   712,   711,   714,   716,   718,   741,   742,
     743,   744,   745,   722,   746,   713,   726,   749,   727,   715,
     750,   751,   728,   752,   753,   755,   754,   756,   757,   758,
     759,   760,   761,   762,   763,   721,   747,   748,   736,   737,
     739,   740,   738,   734,   735,   724,   731,   732,   729,   733,
     730,   770,   787,   709,   710,   720,   723,   725,     0,     1,
       0,     4,     0,    49,     0,   787,     0,     0,    82,     0,
     787,   787,   116,    50,    32,     0,     0,    38,    36,     0,
       0,     0,    85,    10,     9,     0,   314,     0,   311,   315,
     313,   117,    11,     0,    43,   787,     0,    62,   787,   784,
     783,    83,    89,     0,    26,   787,   310,   782,     0,   781,
       0,     0,   119,    17,    62,    39,    41,     0,     0,   116,
      48,    87,    88,    86,   116,   312,   240,   540,   643,   767,
     768,     0,   769,     0,   588,     0,     0,   765,   787,     0,
     574,   543,   544,   549,   545,   550,   641,   642,     0,     0,
       0,     0,   639,   640,     0,     0,   518,   519,   525,   530,
     539,   538,   570,   546,     0,   542,   575,     0,   541,     0,
       0,   576,   764,   766,   316,   764,     0,   120,   787,     0,
       0,     0,     0,     0,     0,     0,     0,    12,    14,   773,
      13,    20,     0,   334,   335,     0,     0,     0,    34,   786,
     785,    37,    56,    51,   577,     0,     0,     0,     0,   573,
       0,   491,     0,     0,   631,   637,     0,   633,   537,   554,
     552,   556,   557,   553,   558,   555,   559,   560,   568,   569,
     561,   562,   563,   564,   565,   566,   567,   551,     0,   317,
     650,   663,   665,   655,   652,   654,   656,   644,   646,   645,
     671,   672,   673,   674,   651,   653,   648,   647,   649,   666,
       0,     0,   523,     0,   667,   659,   660,   669,   661,   662,
     675,   676,   677,   678,   657,   658,   670,     0,   528,     0,
       0,     0,     0,     0,     0,   571,     0,   779,     0,   780,
     778,   580,   584,     0,   592,   520,   536,     0,     0,   118,
     125,   787,   124,   702,   692,   695,   693,   704,   687,   689,
     706,   699,   700,   701,   694,   686,   688,   690,   691,   696,
     698,   705,   703,   787,   708,   707,   361,   360,   697,     0,
       0,     0,   130,   787,   787,   144,   152,     0,   142,   148,
     149,   787,   771,     0,    18,     0,   787,    44,     0,    94,
       0,    92,    98,    62,    59,   773,   572,     0,     0,   498,
     502,   597,   572,   595,     0,     0,   579,     0,     0,     0,
     632,     0,   664,   517,   521,     0,   522,   668,   526,     0,
     527,   535,   194,   195,   534,   531,   532,   533,   578,   625,
       0,   767,   768,   750,   769,   755,   736,   737,   740,   738,
     765,   787,   733,   574,     0,     0,   611,     0,   776,   603,
     601,   602,   606,     0,   623,   628,   766,   583,     0,   496,
     492,     0,   494,     0,   122,   121,     0,     0,   787,   126,
       0,   787,   372,     0,     0,     0,   129,     0,     0,   133,
     134,     0,   365,   147,    19,     0,     0,   336,   411,     6,
      23,     0,     0,    21,   330,   331,   355,    40,     0,     0,
       0,    99,     0,    57,   773,    65,    58,    61,     0,     0,
      54,    45,    52,    53,    55,     0,   590,     0,     0,     0,
     587,     0,     0,   591,   638,   635,   636,   634,   586,   524,
     529,     0,     0,     0,   611,   776,   612,   611,   622,     0,
     616,     0,   625,   611,     0,     0,     0,   582,     0,   598,
       0,     0,     0,   581,     0,     0,     0,   593,   318,     0,
     138,     0,   136,   787,   123,     0,     0,     0,     0,   775,
       0,   373,     0,     0,   378,     0,   389,   388,     0,   366,
       0,   368,   787,   787,   132,   131,   135,   787,     0,     0,
     364,   362,   145,   146,   143,   787,   680,     0,     0,     0,
       0,   682,   681,   438,     0,   442,     0,   505,   684,   685,
     683,     0,   425,   427,   679,   481,     0,     0,   150,   421,
     772,   409,   412,   420,   418,   432,   422,   430,     0,   476,
     787,   764,     0,   299,   774,     0,   295,    90,   155,    22,
     153,   774,   787,   358,     0,   359,     0,     0,     0,     0,
     117,   787,     0,    95,    96,    93,    51,   103,     0,    97,
     101,    35,    60,     0,     0,    67,    68,   787,   787,   117,
       0,   787,   589,   500,   501,   499,   503,   493,   196,     0,
       0,   777,   610,     0,   619,   620,   613,     0,     0,   615,
       0,   614,   630,   604,   599,     0,   600,   629,   626,   627,
     624,   605,   585,   594,   497,   495,     0,     0,     0,   127,
       0,   141,   114,   377,   787,   787,   390,   375,     0,   787,
       0,   374,     0,     0,   788,     0,   338,   369,   371,   367,
     342,   341,   365,   337,   363,   339,     0,     0,   572,   449,
     151,     0,   515,   771,   413,   771,   453,     0,   451,   456,
     516,   506,     0,     0,   426,     0,     0,   477,   450,   411,
       0,   419,   433,     0,     0,   483,   480,   160,     0,   158,
       0,   719,   774,     0,     0,   296,   154,     0,     0,   548,
       0,   547,   346,     0,   353,   354,   356,    15,   345,   357,
     773,   106,     0,   104,   787,   112,     0,     0,     0,     0,
      64,     0,    66,    11,     0,   329,   344,   343,     0,     0,
     608,     0,   618,   617,   621,   630,   128,   139,   140,   137,
     115,   365,   386,     0,   385,     0,   192,     0,     0,   406,
     407,   393,   382,   394,   395,   392,   380,   381,     0,   379,
     390,     0,   370,   193,     0,   435,     0,   478,     0,   479,
     458,   411,   411,     0,     0,   415,     0,     0,     0,   490,
       0,     0,     0,   410,   408,   415,     0,   787,     0,   163,
       0,     0,     0,     0,    91,   773,   773,     0,   514,   348,
     347,   352,    17,    42,     0,     0,   100,     0,   109,     0,
     787,     0,    69,    71,    17,    28,   504,     0,     0,     0,
     391,     0,     0,     0,     0,   376,   384,   383,   340,     0,
     447,     0,   415,     0,   414,   443,   454,   416,   431,   417,
     455,   452,   457,     0,   428,   429,   784,   482,   434,   424,
       0,   484,   161,   162,   159,     0,     0,     0,   172,   167,
     165,   773,   297,   178,     0,     0,   156,     0,     0,   787,
      16,     0,   107,   108,   105,   110,   113,   111,   102,   415,
     415,    74,    76,    81,    78,    46,   776,   607,   387,   405,
       0,   400,     0,   274,     0,   468,     0,   265,   436,     0,
     466,     0,     0,   475,   474,   473,     0,   459,   439,     0,
     486,   787,   485,   171,     0,   176,     0,   170,   773,   787,
     787,   787,   179,     0,   240,   787,   787,     0,     0,     0,
       0,   550,     0,   780,   778,   180,   181,     0,   183,   193,
     187,   204,   205,   188,   189,   190,   225,   186,     0,   764,
       0,   230,     0,     0,     0,     0,     0,     0,     0,   411,
     411,    79,   609,     0,     0,     0,     0,     0,   269,     0,
     471,   460,     0,     0,   465,     0,     0,   771,   445,     0,
     415,     0,   508,   509,     0,   507,   177,   174,   175,   173,
     787,   276,     0,   275,   319,   321,   320,     0,   164,   322,
       0,   325,   787,     0,     0,     0,   238,     0,   222,     0,
       0,     0,     0,     0,   246,   244,   773,   182,   184,   217,
     220,   221,   219,     0,     0,   208,   215,   221,   552,   216,
     191,     0,     0,     0,   185,     0,     0,   787,   349,   350,
     351,   333,    70,    72,    75,    73,    77,   411,   402,   403,
     401,     0,     0,     0,   268,   267,   266,   771,   462,   463,
       0,   771,   469,   470,   467,   272,   273,   271,   415,     0,
     440,   772,   487,   787,     0,     0,   166,   787,   324,   323,
     328,     0,     0,   300,   235,     0,   237,   236,     0,   231,
       0,   773,   223,   229,   773,   228,     0,   250,     0,   242,
     227,   207,   212,     0,   206,     0,   201,     0,   199,     0,
     213,   218,     0,   306,    80,     0,   398,   399,   396,     0,
       0,   415,   437,   411,   772,   771,   772,   444,     0,   510,
       0,     0,     0,   277,   327,   298,   234,     0,     0,   239,
     226,   787,   256,     0,   255,     0,   764,   248,   249,   247,
     210,   211,   209,   214,     0,     0,   197,   198,   157,   404,
     397,   772,   772,   448,   415,   441,   488,     0,   511,     0,
       0,   282,     0,   280,   283,   787,     0,   301,   302,   309,
     233,   232,   773,   251,     0,     0,   202,   203,   200,   307,
     472,   461,   772,     0,   512,   279,   278,   169,   712,   711,
       0,     0,   742,   722,   762,   284,     0,   281,   294,   303,
     308,   224,   262,     0,   259,     0,   252,   253,   446,     0,
     489,   787,   787,   787,   787,   292,   773,   285,   304,   263,
     777,   257,     0,   513,   290,   289,   365,   287,   787,     0,
     261,   260,   243,     0,   241,     0,   286,   305,   241,     0,
     288,     0,   264,   776,   258
d1506 28
a1533 29
      -1,     4,     5,    82,   196,     6,   123,   197,   852,   198,
     199,   480,   463,   602,     7,   134,   481,    74,   106,   363,
     107,     8,   105,   206,   127,   207,     9,   124,   640,    10,
      88,    71,   365,   482,   364,   473,   474,   128,   129,   475,
     634,   635,   929,   636,   930,  1094,   934,  1009,   935,  1010,
    1097,    89,  1060,    91,   604,   360,   361,   470,   629,   630,
     762,   763,   764,   681,   101,   122,   102,   186,   187,   311,
     438,   200,   341,   342,   449,   531,   532,   347,   348,   587,
     588,   609,   610,   738,   739,   968,   969,   842,   907,   908,
     912,   913,   985,   986,  1135,   988,   799,   392,  1084,  1157,
    1137,   991,  1074,   992,   993,  1069,  1070,   995,  1138,  1139,
    1055,   164,  1061,  1062,  1063,  1064,  1193,  1194,  1292,  1263,
    1264,   946,   947,   801,  1042,  1182,  1222,  1223,  1257,   605,
     606,   971,  1132,  1227,  1289,  1162,  1228,   972,    97,    98,
    1047,  1048,  1052,  1131,   484,   201,   620,   921,   202,   203,
     204,   775,   464,   621,   917,   465,   622,   333,   558,   559,
     548,   696,   452,   543,   544,   545,   794,   802,   803,  1168,
     940,   941,   804,   805,   589,  1095,   591,   822,   887,   888,
     889,   593,   733,   835,   879,  1021,   713,  1029,  1176,   715,
     959,  1119,   952,   594,   717,   718,   595,   882,  1110,  1111,
     948,   949,   950,  1107,   956,   596,   818,   597,   598,   219,
     220,   431,   368,   369,   722,  1031,  1032,  1033,  1243,   951,
     711,   719,   848,   166,   385,   167,   389,   168,   169,   170,
     171,   750,   172,   247,   173,   174,   175,   176,   428,   216,
     177,   373,   417,   418,   419,   420,   780,   421,   422,   509,
     657,   510,   515,   424,   178,   226,   227,   179,   180,   270,
     271,   287,   272,   288,   273,   289,   600,   336,    92,    63,
     740,    64,    65,    66,   181,   185,   183,   458,   730,   914,
     744,   766,   519,   301,   560,   111,   211,   442,   698
d1538 1
a1538 1
#define YYPACT_NINF -1126
d1541 130
a1670 131
     493,  6258,  8052, -1126,   159, -1126,   227, -1126,    83, -1126,
    8052,   173, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126,   173, -1126, -1126, -1126, -1126, -1126,   211, -1126,
     300, -1126,   356, -1126,   310,   384,  8052,   378, -1126,   407,
     227,  7793, -1126, -1126, -1126,  8052,   425, -1126,   346,   450,
      75,   226, -1126, -1126, -1126,   426, -1126,   327, -1126,   422,
   -1126,   494, -1126,   564, -1126,   173,   502, -1126,   227, -1126,
   -1126, -1126,  8052,  6349, -1126,  7793, -1126, -1126,  5391, -1126,
    5391,  8052, -1126,  1152, -1126, -1126, -1126,   518,   483, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126,  8052, -1126,   497, -1126,   508,   520, -1126,   522,   533,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,  5391,  5264,
    5518,   754, -1126, -1126,   548,   535,  1709,  1100,   621,    23,
   -1126, -1126, -1126,   162,   213,   264,   562,   461, -1126,  5518,
    5518, -1126,   523, -1126, -1126, -1126,   115, -1126,   612,  2338,
    8052,  8052,  8052,  8052,  6074,  8052,   689, -1126, -1126, -1126,
   -1126, -1126,   614, -1126, -1126,   483,   502,  7274, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126,  1953,   615,  5391,  1953, -1126,
     618, -1126,  1953,   603, -1126,   639,    97, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,  5391, -1126,
   -1126,   736, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
    5391,  5518, -1126,  5518,   712, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126,  5518, -1126,  5518,
     638,   638,  5518,  5518,  5518, -1126,  8052, -1126,  2718, -1126,
   -1126, -1126,   642,  3265, -1126,  1100, -1126,  5391,  8052,  8052,
   -1126,     8, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126,   651, -1126, -1126, -1126, -1126, -1126,   769,
     778,   429, -1126,   758,    57, -1126, -1126,   440, -1126, -1126,
   -1126,   222, -1126,   483, -1126,   382, -1126, -1126,   483, -1126,
     116, -1126,    -2, -1126,   809,   885,   669,  5391,   120, -1126,
     670,   548,   498, -1126,  3447,   679, -1126,  5391,  5391,  3523,
   -1126,   681, -1126,   861,  1100,  5518,  1100, -1126,   621,  5518,
     621, -1126, -1126,   805, -1126, -1126, -1126, -1126, -1126, -1126,
    4606,   956,  1085,  8136,  1173,  5444,   497,   691,   508,   520,
    1218,   819,   533,  1277,  4407,  2474,    58,   688,   697, -1126,
   -1126, -1126, -1126,    87, -1126, -1126,  1402, -1126,  3447, -1126,
     699,   509, -1126,   705, -1126, -1126,   708,  6440,   758, -1126,
    4801,  4315, -1126,  8052,  8052,  8052, -1126,  8052,  5391, -1126,
   -1126,  8052,   114,  7877, -1126,  6166,  8052, -1126,  5070, -1126,
   -1126,  7319,  7373, -1126, -1126,  1359, -1126, -1126,  8316,  7168,
      27, -1126,   483, -1126, -1126,   795, -1126, -1126,  8052,  8052,
   -1126,   822, -1126, -1126, -1126,   716, -1126,   714,  5391,  3576,
   -1126,  5391,   295, -1126, -1126, -1126, -1126, -1126, -1126,  1100,
     621,   638,   810,   724, -1126,   729, -1126,     0, -1126,   302,
   -1126,   726,   725,   128,   730,   129,  5391, -1126,  2596,   785,
    4606,  2820,  5444, -1126,   295,   735,  3652, -1126, -1126,  6440,
   -1126,   313, -1126,   755, -1126,   738,  8052,  8052,  8052,   367,
     739, -1126,   740,   144, -1126,   817,  8052, -1126,   106, -1126,
    8052, -1126,   651,   651, -1126, -1126, -1126,   651,   106,  8052,
   -1126, -1126, -1126, -1126, -1126,   651, -1126,  5391,  1953,   607,
    5391, -1126, -1126, -1126,  7319, -1126,  3705,   779, -1126, -1126,
   -1126,   744,  5391,   746, -1126,   748,  1953,   747, -1126, -1126,
     750, -1126, -1126, -1126,  1599,   875,   515, -1126,   343,   264,
     522,   767,  7220, -1126,   770,  5801, -1126, -1126, -1126,  8316,
   -1126,    -2,   162, -1126,   775, -1126,  5391,   783,   789,   793,
     494, -1126,   796, -1126, -1126, -1126, -1126, -1126,  6531, -1126,
     777, -1126, -1126,   530,   898,   887, -1126,   651,   651,   494,
     904, -1126, -1126, -1126, -1126, -1126,   804, -1126, -1126,   806,
    5391, -1126, -1126,  4705, -1126, -1126, -1126,  4705,  5444, -1126,
    5391, -1126, -1126, -1126, -1126,  5444, -1126,   827, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126,   352,  8052,  6622, -1126,
    8052, -1126, -1126, -1126,   651,   651,   811, -1126,  1008,  7541,
    5614, -1126,  8052,   812, -1126,   638, -1126, -1126, -1126, -1126,
   -1126, -1126,   114, -1126, -1126, -1126,   900,   277, -1126, -1126,
   -1126,   903, -1126, -1126, -1126, -1126, -1126,    66, -1126,   823,
   -1126, -1126,   829,  5391, -1126,    32,  5391,   264, -1126,  5070,
     925, -1126, -1126,   650,  3318, -1126, -1126, -1126,   157, -1126,
     834, -1126,   835,  8316,   833, -1126, -1126,   836,  5391, -1126,
      13, -1126, -1126,   839, -1126, -1126, -1126, -1126,   470, -1126,
    1165, -1126,   364, -1126,    22,   963,  8052,  6531,   940,   949,
   -1126,   957, -1126, -1126,   483, -1126, -1126,  1359,  5391,  2718,
   -1126,   937, -1126, -1126, -1126,   103, -1126, -1126, -1126, -1126,
   -1126,    81, -1126,  1008, -1126,    50, -1126,   951,   970, -1126,
   -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,   869, -1126,
     811,  1008, -1126, -1126,   106, -1126,  5391, -1126,  5391, -1126,
   -1126,  5070,  5070,  5391,  5391,  5148,  3781,  8052,   162, -1126,
     870,   871,   379, -1126, -1126,  5148,  5391,   522,   295,  8271,
    5710,  6713,    65,    -2, -1126, -1126, -1126,   876, -1126, -1126,
     918,   941,  1349, -1126,  8220,  6804, -1126,  8052, -1126,  8052,
     755,   388, -1126, -1126,  1298, -1126, -1126,   873,   806,   152,
   -1126,   606,  8052,  5391,   877, -1126, -1126, -1126, -1126,  1482,
   -1126,   481,  5148,    37, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126,   657, -1126, -1126,  5391, -1126, -1126, -1126,
      75, -1126, -1126, -1126, -1126,   880,   883,   253, -1126, -1126,
   -1126,   417,   227, -1126,  3029,    42, -1126,  5391,  5391,   162,
   -1126,   689, -1126, -1126, -1126, -1126, -1126, -1126, -1126,  5148,
    5148, -1126, -1126, -1126,   945, -1126,   729, -1126, -1126, -1126,
      59, -1126,   897, -1126,  8052, -1126,   138, -1126, -1126,   524,
   -1126,   305,   987, -1126, -1126, -1126,  5391, -1126, -1126,   990,
   -1126,   162, -1126, -1126,   638,  8052,  6895, -1126, -1126,   962,
     503,   512, -1126,   892,    52,   651,   651,  5983,   984,  3136,
     638,  7457,  2922,  4981,  2211, -1126, -1126,  1891, -1126,   246,
   -1126, -1126, -1126, -1126, -1126, -1126,   548, -1126,   916,   915,
     967, -1126,  5444,   906,   907,   908,   911,   913,   914,  5070,
    5070, -1126, -1126,  8052,  6986,  1005,  8052,   919,  5391,  3834,
   -1126,   319,  5391,  3189, -1126,  5391,  3910, -1126, -1126,  5391,
    5148,   537,   902, -1126,   921, -1126, -1126, -1126, -1126, -1126,
     503, -1126,   981, -1126, -1126, -1126, -1126,  3963, -1126, -1126,
    4039, -1126, -1126,  3394,  5317,  1014, -1126,   552, -1126,  1031,
     931,  1042,  1045,   164, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126,   946,   393, -1126, -1126,   548,   686, -1126,
   -1126,   968,  4092,  5391, -1126,  5391,  7625, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126,   750, -1126,  5070, -1126, -1126,
   -1126,  1041,   950,  1036, -1126, -1126, -1126, -1126, -1126, -1126,
    1050, -1126, -1126, -1126, -1126, -1126, -1126, -1126,  5148,  1054,
   -1126, -1126, -1126,   162,   162,  5391, -1126,   960, -1126, -1126,
   -1126,  5391,   969, -1126, -1126,  5391, -1126, -1126,   118, -1126,
     964, -1126, -1126, -1126, -1126, -1126,  4507,  8052,  4897, -1126,
   -1126, -1126,  8052,  7077, -1126,  5391, -1126,   408, -1126,   965,
   -1126, -1126,   972, -1126,   750,   958, -1126, -1126, -1126,   638,
     638,  5148, -1126,  5070, -1126, -1126, -1126, -1126,   539, -1126,
     971,   505,  5892, -1126, -1126,   510,  5317,  5317,  1059, -1126,
   -1126,   435, -1126,  1063, -1126,   976,  1069, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126,  5391,  4168, -1126, -1126,   276, -1126,
   -1126, -1126,   750, -1126,  5148, -1126, -1126,   162, -1126,   983,
     986, -1126,  1065,  7709, -1126,   162,  5391, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126,  4221,  5317, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126,   525, -1126, -1126, -1126, -1126,  8052,  8052,
    8052,  8052,    56,   300,  5190,   169,   980,   993, -1126,  1027,
   -1126, -1126, -1126,   491, -1126,   215, -1126, -1126, -1126,   162,
   -1126,   651,   651,   651,   651, -1126, -1126, -1126, -1126,  5391,
    5391,   319,   998, -1126, -1126, -1126,    86, -1126,   435,  5391,
   -1126, -1126, -1126,  1000,  7968,    88, -1126, -1126,  7968,   999,
   -1126,  1002, -1126,   729, -1126
d1676 28
a1703 29
   -1126, -1126, -1126, -1126, -1126, -1126,   349, -1126, -1126,   279,
   -1126,  -149, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126,   922, -1126,  1055, -1126, -1126,  1058,
    1032,   235,   514, -1126, -1126, -1126, -1126,   -76, -1126, -1126,
     280, -1126, -1126,   513, -1126,   133, -1126, -1126, -1126, -1126,
   -1126,    82,   -66, -1126, -1126, -1126,   234, -1126, -1126, -1126,
     386,  -145,  -445,  -591, -1126,  -144,   -85, -1126,   403, -1126,
   -1126,  -307, -1126,   142,   711,   625,    36, -1126,   143,   587,
    -143, -1126,   550, -1126,  -117, -1126, -1126, -1126, -1126,  -234,
    -745,  -992, -1126,   184,  -668,  -648,  -264, -1126, -1126, -1126,
    -876, -1126, -1126, -1126, -1126,  -919,  -822,   179, -1126,  -991,
   -1126,  -177,  -795, -1126, -1126,  -385, -1126,   -68, -1126, -1126,
    -512, -1125,  -249,  -598, -1126, -1126, -1126, -1126, -1126, -1126,
    -212, -1126, -1126, -1126, -1126, -1126,   -40,    -3, -1126,  1057,
   -1126,  -934, -1126, -1126, -1126,   815, -1126, -1126, -1126,  -341,
   -1126, -1126,   534, -1126, -1126,  -223, -1126, -1126,  -691, -1126,
   -1126,  -550,  -321, -1126,    98, -1126,   366,  -489,    84, -1126,
   -1126,  -557, -1126,   312,  -191,  -452,  -650, -1126,  -535,  -792,
    -416,   592, -1126, -1126, -1126, -1126, -1126, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126, -1126,  -227, -1126, -1126, -1126,   -92,
   -1126, -1126,  -246, -1126, -1126, -1126,   460, -1126, -1126,  -399,
   -1126,  -356,   471,  -449, -1126,    73, -1126,    74, -1126,  -702,
    -769, -1126,   977,   929, -1126,  -123, -1126,  -218,  -158, -1126,
    -584,  -884,  -166, -1126,   372,   634,  -186, -1126, -1126, -1126,
   -1126,   989,  -382, -1126,   685,   694,   341,   695,  -380, -1126,
   -1126,   -86,   926,  -359, -1126, -1126,   436, -1126, -1126, -1126,
   -1126, -1126, -1126, -1126,  1024,  1034, -1126, -1126,   605, -1126,
   -1126,  -540,  -111, -1126, -1126,   948,    -1,  -696,  -856,  -183,
    -543,  -388,  -491,  -587,   -95,  -471,  -190,   140,  -455
d1710 1
a1710 1
#define YYTABLE_NINF -788
d1713 278
a1990 227
      67,    67,   228,    72,   120,   353,   590,   295,   703,    67,
      90,   814,   441,   697,   652,   357,   355,   821,   492,   823,
     798,   647,   306,   697,   485,   505,   391,   394,   749,   366,
     457,   525,   372,   514,   508,  1005,   372,  1051,   990,   643,
     645,   371,   592,   898,   212,   371,   847,   812,   205,   213,
     354,   349,   546,   672,   885,   511,   305,   476,   483,  -611,
    1013,   451,   741,  1140,  1076,  1079,   909,   824,   747,   388,
     830,   390,   524,   436,  1150,    67,   109,    72,  -293,   833,
      67,   958,  -787,   871,    67,  -787,   825,  -787,   520,   694,
     957,   293,   994,    77,   338,    70,   362,   117,   378,   849,
     869,   915,   516,   990,  -630,    72,  1126,   694,  -787,  1265,
    -415,    67,    67,   627,    67,  -787,   308,   468,   831,  1186,
      67,   488,   376,  -629,   857,   798,   680,   735,   437,  -629,
     520,   119,   850,   294,   395,   396,   397,  1007,  1008,  1018,
      67,  1002,   671,   798,    79,   689,    73,   628,   384,  1190,
     386,    78,  1191,   694,  1265,  1265,   729,   994,   839,    69,
     516,   668,   670,   459,   117,  1147,   970,  1161,   467,   -31,
    -724,   500,   884,   858,   872,  -293,  1054,   440,  1014,  -611,
     117,  -629,   355,  -611,  1015,   117,  -776,   826,    67,    67,
      67,    67,    67,    67,    67,  1230,  1231,   110,   119,   843,
    -787,   736,    78,  -787,  -787,  -787,    67,  -415,   521,  -787,
     522,   695,   523,   117,   119,    78,  1018,   296,   379,   119,
      73,   100,   380,  1040,  -630,  -415,   456,   112,  -638,   695,
     660,   700,   701,  -787,   309,   469,   702,  -787,  1121,  1187,
    1261,   489,   490,  1188,   705,    78,   987,   119,    73,  -629,
     521,  -629,   522,  -611,   965,   100,   153,  1233,   155,  1019,
    1120,  1020,   499,   690,   878,  1177,   691,   471,  -572,   927,
    1192,  -415,   599,   508,  -415,   695,   840,   508,   784,   697,
      70,   296,   631,  1148,  1288,   505,  -776,   472,   221,   161,
    -724,   355,  -724,    76,   511,    67,   109,   426,   511,   741,
     741,   546,   546,   653,   870,   816,  1025,    67,    67,   297,
     349,   987,   349,   592,   677,    95,   997,   457,  1213,   938,
    1215,   860,   877,  1115,  1117,   632,  1174,  1000,   312,    70,
      80,  1118,  1068,  1108,   697,   749,  1019,   298,  1282,   299,
     300,  1259,   440,   130,   109,   -84,   550,   113,   -84,   -84,
     607,   611,  1226,   677,  1296,  1240,  1241,   362,   362,  1192,
    -572,   897,   714,   791,   792,   854,  1082,   901,  -724,   883,
    1083,  -724,   966,   297,   542,   967,   117,  1034,   838,  1211,
     896,   997,   708,   817,   626,  1109,  1268,  1017,  -572,   854,
    -572,  -572,  1000,   745,  1152,    86,     3,   867,   758,   426,
     727,   298,    67,   299,   300,   592,   592,  1026,   599,  1204,
     119,  1171,   925,   426,   426,  1173,   526,   110,   777,   485,
      81,   654,  1242,   655,   656,   460,  -270,   461,  -270,   962,
     445,   813,   -33,   798,   678,   679,    67,   462,   900,    67,
      67,   453,    67,    67,    67,  1012,    67,   643,   115,   116,
      67,   439,    67,   483,    67,    67,  1098,  1100,  1024,  1001,
      67,    67,   619,   607,   734,   110,  -168,    67,    67,  -724,
      87,  -724,   686,   678,   786,    83,   757,    67,    67,  1214,
     693,  -168,   953,   450,   209,   855,   856,   210,  -724,  -724,
    -724,   742,  1279,    -2,   607,   773,   466,    93,   611,  1299,
     489,   110,   954,  1301,    76,  -776,  1219,  1142,  1044,   855,
     928,   800,   114,  -776,  1153,  1154,   748,   426,   955,   426,
     426,   117,   697,    70,  1001,  1022,    94,   613,    67,  1205,
    1206,     1,  1001,   615,  1045,    67,    67,    67,  -776,  1034,
    1034,  1046,   118,   599,   104,    67,  -776,   768,   446,    67,
     447,   221,   769,   694,   121,   119,    70,  -776,    67,   454,
    1050,   455,   139,    70,   140,     2,  1225,   782,   142,   108,
     221,   783,  1149,    67,  -415,    86,  1044,   355,   450,     3,
     547,   551,   303,   304,   865,  1044,  1226,   554,   126,   555,
    -776,   147,   561,   592,   592,  1295,   562,   886,   564,   891,
    -415,    67,  1045,    61,    67,  -415,    62,    68,    67,  1046,
    1280,  1045,   819,  -776,  -423,    75,   800,   215,  1046,  -596,
    -596,  -423,  1087,   542,   542,  -415,   810,    67,   217,   136,
     526,   527,   844,  1244,   800,   599,   599,   208,   819,   599,
     218,   749,  -492,  1023,   307,  1164,  1269,  1270,  -423,   599,
     989,  -415,   426,   222,  1057,  1058,   426,   249,  -415,  1122,
    1123,  1216,  1217,   139,   139,   140,   140,  1129,   248,   142,
     142,  -415,   290,   682,  -415,   695,    67,    67,   139,    67,
     140,   592,   302,   291,   142,  1283,    99,  -770,    67,    67,
     103,    67,   147,   147,   800,   139,   599,   140,   310,   346,
    1036,   142,   623,   625,    61,    61,   352,   147,  -770,   922,
     924,   434,   435,   787,   789,   989,   813,   131,   133,    61,
      99,  1212,   902,   904,   147,   376,   188,   295,   742,   742,
    1006,  1037,  1039,   356,  -770,   367,    61,   996,   374,  -770,
     221,   377,    67,   599,   599,  1300,   214,   910,   911,   117,
     382,   153,   751,   155,   387,   619,   817,   592,   229,  -770,
     697,   466,  1197,  1199,   427,    67,    67,  1290,  1291,  1104,
    1106,   440,  1281,   443,   619,   906,  1112,  1114,   426,   960,
     961,   466,   444,   119,   161,  -770,   448,   806,   809,  1136,
    1136,   486,  -770,   491,   337,   339,   340,   343,   344,   350,
     351,   493,   996,   498,  1071,  -770,  1077,  1071,  -770,   501,
     996,  -588,  1304,   517,   495,   497,   518,   189,   190,   191,
    -729,  -787,   192,   599,   599,   228,    67,   528,   529,   547,
     547,   -63,   633,   639,   193,   641,   642,  1166,    67,    67,
      67,  -729,   561,   649,   599,   195,   -63,   650,   651,   658,
     659,   665,   230,    67,    67,   661,    67,   673,    67,   680,
     683,   687,   692,   688,   723,   721,   725,  -729,   726,   729,
     728,    67,  -729,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   732,
    -151,   743,  -729,   189,   752,   251,   -27,   767,   192,   906,
     906,   398,   754,   425,   682,  1209,  1210,   -27,   755,  1071,
     478,   599,   756,   188,   188,   759,  -195,  1220,  -729,   501,
     770,   479,  1136,  1136,   771,  -729,   774,   778,   252,   516,
     779,   561,   599,   815,   793,   811,   253,  -195,  -729,  -492,
    -729,  -729,  -729,    67,  -729,   820,   827,   834,  -195,   828,
    1284,  1285,  1286,  1287,   841,  -720,   845,  -726,   851,   846,
     862,   254,   255,  -195,    67,    67,   256,   859,  -195,   863,
     868,  1266,   260,   261,   262,   263,    67,   221,  -726,   769,
      67,   426,   426,    67,   873,   599,   874,   599,  -195,   264,
     265,   875,   894,   895,   918,   916,   269,   919,   936,  1016,
     682,   944,   963,  1011,  -726,   503,   964,  1027,   214,  -726,
    1030,  1041,    67,    67,  -195,    67,  1053,  1066,  1085,   425,
     425,  -195,  1086,  1124,   795,  1088,  1089,  1090,   599,  -726,
    1091,   136,  1092,  1093,  -195,  -195,  -195,  -195,  1101,  -195,
    -195,  1125,   533,   796,  1103,  1127,   549,  1141,   552,   553,
     343,   797,   343,  1143,  1144,  -726,   557,  1165,   350,   751,
     350,   565,  -726,  1146,  1145,   139,   182,   140,  1151,  1170,
    1155,   142,  1172,  1169,  1175,  -726,   796,  -726,  -726,  -726,
    1181,  -726,   872,   637,   638,    67,  -727,  1247,  1185,  1189,
    1207,  1208,  1232,  1218,   147,   165,  1234,   184,   139,  1235,
     140,  1035,  -254,  1276,   142,  1245,    61,  -727,  1246,  1043,
    1049,  1049,  1277,  1278,  1056,   274,   292,  1065,  1294,   275,
    1298,  1302,   864,   425,  1303,   425,   425,   147,   358,    84,
     276,   920,    85,  -727,   533,   223,   225,   125,  -727,    61,
     760,   684,   685,  1096,   933,   426,    67,    67,   772,   534,
     277,    67,    67,   861,   676,   699,   709,  1256,  -727,   746,
     189,   190,   191,  1067,   704,   192,  1080,  1267,  1239,    -5,
     278,   279,   135,   189,  -728,   776,   876,   193,   192,   477,
    1049,   194,  1229,   939,  -727,  1167,   731,   853,   195,  1293,
     478,  -727,  1133,   836,   370,  -728,  1178,   832,  1179,   383,
     893,   479,   707,   663,  -727,  1229,  -727,  -727,  -727,   937,
    -727,   375,   664,   334,   666,   280,   281,   282,   283,  -724,
    1258,  -728,    67,   335,   423,   381,  -728,  1163,     0,     0,
     284,   285,     0,   765,     0,     0,   286,     0,   393,   393,
    -724,     0,     0,     0,     0,     0,  -728,    67,    67,    67,
      67,     0,     0,     0,     0,     0,     0,     0,   425,     0,
       0,     0,   425,  1035,     0,     0,  -724,  1183,     0,     0,
       0,  -724,  -728,     0,     0,   416,     0,     0,  -574,  -728,
     432,     0,   533,   533,   433,   790,     0,     0,     0,     0,
       0,  -724,  -728,    67,  -728,  -728,  -728,    67,  -728,  -730,
       0,     0,     0,     0,     0,     0,   189,   190,   191,     0,
     931,   192,     0,     0,     0,   932,     0,  -724,     0,     0,
     -65,     0,  1224,   193,  -724,  -730,     0,   194,     0,     0,
    -730,  1049,     0,     0,   195,   633,   292,  -724,   292,  -724,
    -724,  -724,     0,  -724,   487,     0,     0,     0,     0,     0,
    -730,   432,     0,     0,   494,   225,   225,   189,   190,   191,
       0,     0,     0,     0,     0,   751,  -332,     0,     0,     0,
       0,   765,   765,     0,   193,     0,  -730,   502,   194,     0,
       0,     0,   504,  -730,   425,   195,     0,     0,     0,     0,
       0,   507,   513,     0,     0,     0,  -574,     0,  -574,  -574,
    -574,     0,  -574,  -725,     0,   432,   601,     0,     0,     0,
       0,     0,    70,     0,     0,   612,   613,     0,   614,     0,
       0,     0,   615,     0,  -725,   556,   561,     0,  1049,     0,
       0,     0,   892,     0,  1065,   616,   617,   618,  1065,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   292,   648,
    -725,     0,     0,     0,     0,  -725,     0,     0,     0,   765,
     765,     0,   765,     0,   926,   370,   370,     0,   646,     0,
       0,     0,     0,     0,     0,  -725,     0,   942,     0,     0,
       0,     0,     0,   945,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   662,     0,   416,  -464,   667,   667,   504,
       0,  -725,     0,   675,  -464,   136,     0,     0,  -725,     0,
       0,     0,     0,   137,   138,     0,     0,   710,     0,     0,
       0,  -725,     0,  -725,  -725,  -725,     0,  -725,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
       0,   140,     0,   141,   706,   142,     0,   712,  -464,   942,
       0,     0,     0,   720,     0,     0,     0,     0,     0,   724,
       0,   143,   144,     0,   145,   146,     0,     0,   147,     0,
       0,   148,   149,   150,   151,   152,   153,   154,   155,     0,
      61,     0,   156,   157,     0,     0,  1072,  1075,  1072,  1072,
       0,     0,     0,   753,     0,     0,     0,     0,     0,     0,
       0,     0,   158,     0,     0,     0,   159,     0,   160,   161,
     162,   163,     0,     0,   566,     0,   352,   567,   942,   942,
       0,  1102,   136,   568,     0,   569,   570,   781,     0,     0,
     416,   571,     0,   572,   416,   504,   393,   785,     0,   573,
       0,     0,   504,   393,     0,   575,   576,     0,     0,     0,
       0,   577,     0,     0,     0,     0,   139,     0,   140,     0,
     141,     0,   142,     0,     0,     0,     0,     0,     0,   578,
     579,     0,     0,     0,   580,     0,     0,   601,   143,   144,
     581,   145,   146,   582,   583,   147,   584,   585,   148,   149,
     150,  1072,     0,     0,     0,     0,     0,    61,     0,     0,
     829,     0,     0,   370,     0,     0,     0,     0,     0,     0,
       0,   432,     0,     0,     0,     0,     0,     0,     0,   158,
       0,     0,     0,     0,     0,   586,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   250,     0,     0,
       0,   393,     0,   251,     0,     0,     0,     0,     0,     0,
       0,  1195,     0,     0,     0,   866,   416,  1200,  1202,   393,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   601,
     601,     0,     0,   601,     0,     0,   252,     0,     0,     0,
       0,     0,     0,   601,   253,     0,     0,     0,     0,     0,
       0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
     712,   720,     0,   720,     0,     0,     0,     0,     0,   254,
     255,     0,     0,   899,   256,     0,   257,   258,   259,   393,
     260,   261,   262,   263,     0,     0,     0,     0,     0,     0,
     601,     0,     0,     0,     0,     0,     0,   264,   265,     0,
       0,   266,   267,   268,   269,     0,     0,     0,     0,     0,
     943,     0,     0,  1271,  1272,  1273,  1274,     0,     0,     0,
       0,     0,   999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   370,     0,     0,     0,   601,   601,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   998,   694,     0,  1003,  1004,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   973,     0,     0,
       0,     0,   393,     0,   974,     0,     0,     0,     0,     0,
       0,     0,   137,   138,     0,     0,     0,   999,   393,     0,
     977,     0,   978,  1028,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   139,     0,
     140,     0,   141,     0,   142,     0,   998,   601,   601,   223,
       0,     0,     0,     0,  1081,     0,     0,     0,     0,     0,
     143,   144,     0,   145,   146,     0,   136,   147,   601,   504,
     148,   149,   150,   151,   152,   153,   154,   155,     0,    61,
       0,   156,   157,     0,     0,     0,     0,     0,     0,     0,
       0,   999,   999,     0,     0,     0,   712,     0,     0,     0,
     139,   158,   140,     0,   141,   159,   142,   160,   161,   162,
     163,     0,     0,     0,   504,     0,     0,     0,     0,     0,
     998,   998,   143,   144,     0,   145,   146,     0,     0,   147,
       0,     0,   148,   149,   150,   601,     0,     0,     0,   393,
       0,    61,     0,     0,     0,     0,     0,     0,     0,  1158,
    1159,     0,  1160,     0,     0,     0,   601,     0,     0,     0,
       0,     0,     0,   158,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1196,     0,     0,     0,     0,     0,
       0,     0,  1180,     0,     0,     0,     0,     0,  1184,     0,
       0,     0,  1081,     0,     0,     0,     0,   393,   393,   601,
       0,   601,     0,   998,     0,     0,     0,     0,     0,   393,
       0,     0,  1203,     0,   999,   999,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   601,   998,   998,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1236,  1238,   999,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1260,     0,     0,     0,     0,     0,     0,
       0,     0,   998,     0,     0,   229,     0,     0,     0,    12,
      13,    14,    15,    16,    17,     0,     0,     0,     0,     0,
       0,  1275,     0,     0,   136,     0,   975,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   976,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
      19,    20,    21,    22,    23,    24,  1297,    25,    26,    27,
d1994 2
a1995 1
      58,    59,    60,     0,     0,     0,     0,     0,     0,  1078,
d1997 213
d2211 2
a2212 7
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,    12,    13,    14,    15,
      16,    17,     0,   313,     0,     0,     0,   314,     0,     0,
       0,     0,     0,     0,     0,     0,   315,     0,   316,     0,
       0,     0,   317,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    18,    19,    20,    21,
      22,    23,    24,     0,    25,    26,    27,    28,    29,    30,
d2215 8
a2222 24
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
       0,     0,     0,     0,     0,     0,    61,   117,   318,   319,
       0,     0,     0,   320,     0,   321,   322,   323,   324,   260,
     261,   262,   263,   280,   281,   282,   283,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   119,   330,   331,   332,   512,     0,     0,     0,     0,
       0,     0,    12,    13,    14,    15,    16,    17,     0,     0,
       0,     0,   400,     0,     0,     0,     0,   136,     0,     0,
       0,     0,     0,     0,     0,   137,   138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    18,    19,    20,    21,    22,    23,    24,     0,
      25,   401,    27,   402,    29,   403,    31,   404,    33,    34,
     405,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,   406,   407,    50,   408,   409,    53,    54,
     410,    56,    57,   411,   412,   413,   151,   152,   153,   154,
     155,     0,    61,     0,   156,   157,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   414,     0,     0,   399,   415,   224,
     160,   161,   162,   163,    12,    13,    14,    15,    16,    17,
       0,     0,     0,     0,   400,     0,     0,     0,     0,   136,
       0,     0,     0,     0,     0,     0,     0,   137,   138,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    18,    19,    20,    21,    22,    23,
      24,     0,    25,   401,    27,   402,    29,   403,    31,   404,
d2224 5
a2228 29
      43,    44,    45,    46,    47,   406,   407,    50,   408,   409,
      53,    54,   410,    56,    57,   411,   412,   413,   151,   152,
     153,   154,   155,     0,    61,     0,   156,   157,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   414,     0,     0,   399,
     415,  -777,   160,   161,   162,   163,    12,    13,    14,    15,
      16,    17,     0,     0,     0,     0,   400,     0,     0,     0,
       0,   136,     0,     0,     0,     0,     0,     0,     0,   137,
     138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    18,    19,    20,    21,
      22,    23,    24,     0,    25,   401,    27,   402,    29,   403,
      31,   404,    33,    34,   405,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,   406,   407,    50,
     408,   409,    53,    54,   410,    56,    57,   411,   412,   413,
     151,   152,   153,   154,   155,     0,    61,     0,   156,   157,
       0,   669,     0,     0,     0,     0,     0,     0,    12,    13,
      14,    15,    16,    17,     0,     0,     0,     0,   414,     0,
       0,     0,   415,   136,   160,   161,   162,   163,     0,     0,
       0,   137,   138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    18,    19,
      20,    21,    22,    23,    24,     0,    25,   401,    27,   402,
      29,   403,    31,   404,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,   406,
     407,    50,   408,   409,    53,    54,   410,    56,    57,   411,
     412,   413,   151,   152,   153,   154,   155,     0,    61,     0,
     156,   157,     0,  1073,     0,     0,     0,     0,     0,     0,
      12,    13,    14,    15,    16,    17,     0,     0,     0,     0,
     158,     0,     0,     0,   159,   136,   160,   161,   162,   163,
       0,     0,     0,   137,   138,     0,     0,     0,     0,     0,
d2230 102
a2331 2
      18,    19,    20,    21,    22,    23,    24,     0,    25,   401,
      27,   402,    29,   403,    31,   404,    33,    34,    35,    36,
d2333 12
a2344 164
      47,   406,   407,    50,   408,   409,    53,    54,   410,    56,
      57,   411,   412,   413,   151,   152,   153,   154,   155,     0,
      61,     0,   156,   157,     0,     0,     0,     0,     0,     0,
     694,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   158,     0,     0,   973,   159,     0,   160,   161,
     162,   163,   974,     0,   975,     0,     0,     0,     0,     0,
     137,   138,     0,     0,   796,   976,     0,     0,   977,     0,
     978,     0,   797,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   979,     0,     0,   139,     0,   140,     0,
     141,     0,   142,     0,     0,     0,     0,     0,   980,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   143,   144,
       0,   145,   146,     0,     0,   147,     0,     0,   148,   149,
     150,   151,   152,   153,   154,   981,     0,    61,     0,   156,
     157,     0,     0,     0,     0,     0,     0,   694,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   982,
       0,     0,   973,   159,     0,   983,   984,   162,   163,   974,
       0,   975,     0,     0,     0,     0,     0,   137,   138,     0,
       0,   796,   976,     0,     0,   977,     0,   978,     0,   797,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1113,     0,     0,   139,     0,   140,     0,   141,     0,   142,
       0,     0,     0,  -777,     0,   980,     0,     0,     0,     0,
       0,  -777,   136,     0,     0,   143,   144,     0,   145,   146,
     137,   138,   147,     0,     0,   148,   149,   150,   151,   152,
     153,   154,   981,     0,    61,     0,   156,   157,     0,     0,
       0,     0,     0,     0,     0,     0,   139,     0,   140,     0,
     141,     0,   142,     0,     0,  -777,   982,     0,     0,     0,
     159,     0,   983,   984,   162,   163,   429,     0,   143,   144,
       0,   145,   146,     0,     0,   147,     0,     0,   148,   149,
     150,   151,   152,   153,   154,   155,     0,    61,   136,   156,
     157,     0,     0,     0,     0,     0,   137,   138,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   158,
       0,     0,     0,   159,     0,   160,   161,   162,   163,   429,
       0,     0,   139,     0,   140,     0,   141,     0,   142,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   136,     0,     0,   143,   144,     0,   145,   146,   137,
     138,   147,     0,     0,   148,   149,   150,   151,   152,   153,
     154,   155,   430,    61,     0,   156,   157,     0,     0,     0,
       0,     0,     0,     0,     0,   139,     0,   140,     0,   141,
       0,   142,     0,     0,     0,   158,     0,     0,     0,   159,
       0,   160,   161,   162,   163,  1134,     0,   143,   144,     0,
     145,   146,     0,     0,   147,     0,     0,   148,   149,   150,
     151,   152,   153,   154,   155,   837,    61,   136,   156,   157,
       0,     0,     0,     0,     0,   137,   138,     0,     0,   796,
       0,     0,     0,     0,     0,     0,     0,     0,   158,     0,
       0,     0,   159,     0,   160,   161,   162,   163,   429,     0,
       0,   139,     0,   140,     0,   141,     0,   142,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     136,     0,     0,   143,   144,     0,   145,   146,   137,   138,
     147,     0,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,    61,     0,   156,   157,     0,     0,     0,     0,
       0,     0,     0,     0,   139,     0,   140,     0,   141,     0,
     142,     0,     0,     0,   982,     0,     0,     0,   159,     0,
     160,   161,   162,   163,   496,     0,   143,   144,     0,   145,
     146,     0,     0,   147,     0,     0,   148,   149,   150,   151,
     152,   153,   154,   155,     0,    61,   136,   156,   157,     0,
       0,     0,     0,     0,   137,   138,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   158,     0,     0,
       0,   159,     0,   160,   161,   162,   163,   644,     0,     0,
     139,     0,   140,     0,   141,     0,   142,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   136,
       0,     0,   143,   144,     0,   145,   146,   137,   138,   147,
       0,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,    61,     0,   156,   157,     0,     0,     0,     0,     0,
       0,     0,     0,   139,     0,   140,     0,   141,     0,   142,
       0,     0,     0,   158,     0,     0,     0,   159,     0,   160,
     161,   162,   163,   674,     0,   143,   144,     0,   145,   146,
       0,     0,   147,     0,     0,   148,   149,   150,   151,   152,
     153,   154,   155,     0,    61,   136,   156,   157,     0,     0,
       0,     0,     0,   137,   138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   158,     0,     0,     0,
     159,     0,   160,   161,   162,   163,   716,     0,     0,   139,
       0,   140,     0,   141,     0,   142,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   136,     0,
       0,   143,   144,     0,   145,   146,   137,   138,   147,     0,
       0,   148,   149,   150,   151,   152,   153,   154,   155,     0,
      61,     0,   156,   157,     0,     0,     0,     0,     0,     0,
       0,     0,   139,     0,   140,     0,   141,     0,   142,     0,
       0,     0,   158,     0,     0,     0,   159,     0,   160,   161,
     162,   163,   890,     0,   143,   144,     0,   145,   146,     0,
       0,   147,     0,     0,   148,   149,   150,   151,   152,   153,
     154,   155,     0,    61,   136,   156,   157,     0,     0,     0,
       0,     0,   137,   138,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   158,     0,     0,     0,   159,
       0,   160,   161,   162,   163,  1105,     0,     0,   139,     0,
     140,     0,   141,     0,   142,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   136,     0,     0,
     143,   144,     0,   145,   146,   137,   138,   147,     0,     0,
     148,   149,   150,   151,   152,   153,   154,   155,     0,    61,
       0,   156,   157,     0,     0,     0,     0,     0,     0,     0,
       0,   139,     0,   140,     0,   141,     0,   142,     0,     0,
       0,   158,     0,     0,     0,   159,     0,   160,   161,   162,
     163,  1116,     0,   143,   144,     0,   145,   146,     0,     0,
     147,     0,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,    61,   136,   156,   157,     0,     0,     0,     0,
       0,   137,   138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   158,     0,     0,     0,   159,     0,
     160,   161,   162,   163,  1128,     0,     0,   139,     0,   140,
       0,   141,     0,   142,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   136,     0,     0,   143,
     144,     0,   145,   146,   137,   138,   147,     0,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,    61,     0,
     156,   157,     0,     0,     0,     0,     0,     0,     0,     0,
     139,     0,   140,     0,   141,     0,   142,     0,     0,     0,
     158,     0,     0,     0,   159,     0,   160,   161,   162,   163,
    1130,     0,   143,   144,     0,   145,   146,     0,     0,   147,
       0,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,    61,  -326,   156,   157,     0,     0,     0,     0,     0,
    -326,  -326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   414,     0,     0,     0,   415,     0,   160,
     161,   162,   163,  1156,     0,     0,  -326,     0,  -326,     0,
    -326,     0,  -326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   136,     0,     0,  -326,  -326,
       0,  -326,  -326,   137,   138,  -326,     0,     0,  -326,  -326,
    -326,  -326,  -326,  -326,  -326,  -326,     0,  -326,     0,  -326,
    -326,     0,     0,     0,     0,     0,     0,     0,     0,   139,
       0,   140,     0,   141,     0,   142,     0,     0,     0,  -326,
       0,     0,     0,  -326,     0,  -326,  -326,  -326,  -326,  1237,
       0,   143,   144,     0,   145,   146,     0,     0,   147,     0,
       0,   148,   149,   150,   151,   152,   153,   154,   155,     0,
      61,   136,   156,   157,     0,     0,     0,     0,     0,   137,
     138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   158,     0,     0,     0,   159,     0,   160,   161,
     162,   163,  1262,     0,     0,   139,     0,   140,     0,   141,
       0,   142,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   136,     0,     0,   143,   144,     0,
     145,   146,   137,   138,   147,     0,     0,   148,   149,   150,
     151,   152,   153,   154,   155,     0,    61,     0,   156,   157,
       0,     0,     0,     0,     0,     0,     0,     0,   139,     0,
     140,     0,   141,     0,   142,     0,     0,     0,   158,     0,
       0,     0,   159,     0,   160,   161,   162,   163,     0,     0,
     143,   144,     0,   145,   146,     0,     0,   147,     0,     0,
     148,   149,   150,   151,   152,   153,   154,   155,     0,    61,
       0,   156,   157,    12,    13,    14,    15,    16,    17,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   158,     0,     0,     0,   159,     0,   160,   161,   162,
     163,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    18,    19,    20,    21,    22,    23,    24,
       0,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,     0,     0,     0,
       0,     0,     0,    61,   117,    12,    13,    14,    15,    16,
      17,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     136,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,     0,     0,     0,     0,     0,   119,     0,
       0,     0,     0,     0,     0,    18,    19,    20,    21,    22,
      23,    24,     0,    25,   401,    27,   402,    29,   403,    31,
     404,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,   406,   407,    50,   408,
     409,    53,    54,   410,    56,    57,   411,   412,   413,   151,
     152,   153,   154,   155,     0,    61,     0,   156,   157,     0,
       0,     0,     0,     0,     0,    12,    13,    14,    15,    16,
      17,     0,     0,     0,     0,     0,     0,   414,     0,   506,
     136,   415,     0,   160,   161,   162,   163,     0,   137,   138,
       0,     0,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    18,    19,    20,    21,    22,
      23,    24,     0,    25,   401,    27,   402,    29,   403,    31,
     404,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,   406,   407,    50,   408,
     409,    53,    54,   410,    56,    57,   411,   412,   413,   151,
     152,   153,   154,   155,     0,    61,     0,   156,   157,     0,
       0,     0,     0,     0,    12,    13,    14,    15,    16,    17,
       0,     0,     0,     0,     0,     0,     0,   982,     0,   136,
       0,   159,     0,   160,   161,   162,   163,   137,   138,     0,
a2345 9
       0,     0,     0,     0,    18,    19,    20,    21,    22,    23,
      24,     0,    25,   401,    27,   402,    29,   403,    31,   404,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,   406,   407,    50,   408,   409,
      53,    54,   410,    56,    57,   411,   412,   413,   151,   152,
     153,   154,   155,     0,    61,     0,   156,   157,     0,     0,
       0,     0,     0,    12,    13,    14,    15,    16,    17,     0,
       0,     0,     0,     0,     0,     0,   158,     0,   136,     0,
     159,     0,   160,   161,   162,   163,   137,   138,     0,     0,
d2347 7
a2353 18
       0,     0,     0,    18,    19,    20,    21,    22,    23,    24,
       0,    25,   401,    27,   402,    29,   403,    31,   404,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,   406,   407,    50,   408,   409,    53,
      54,   410,    56,    57,   411,   412,   413,   151,   152,   153,
     154,   155,   535,    61,     0,   156,   157,     0,     0,    12,
      13,    14,    15,    16,    17,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   414,   536,     0,     0,   415,
       0,   160,   161,   162,   163,     0,     0,   537,     0,     0,
       0,     0,     0,     0,     0,     0,  -787,     0,     0,    18,
      19,    20,    21,    22,    23,    24,   538,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,   539,    56,    57,
      58,    59,    60,     0,     0,     0,     0,     0,  1198,    61,
       0,     0,     0,     0,   540,    12,    13,    14,    15,    16,
      17,     0,     0,     0,     0,  -245,     0,     0,     0,  -777,
       0,     0,     0,   541,     0,     0,     0,     0,     0,     0,
a2354 107
       0,     0,     0,     0,     0,    18,    19,    20,    21,    22,
      23,    24,     0,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    12,
      13,    14,    15,    16,    17,    61,     0,     0,     0,     0,
       0,     0,     0,     0,   136,     0,   975,     0,     0,     0,
       0,     0,   137,   138,     0,     0,     0,   976,     0,  -777,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
      19,    20,    21,    22,    23,    24,     0,    25,   401,    27,
     402,    29,   403,    31,   404,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
     406,   407,    50,   408,   409,    53,    54,   410,    56,    57,
     411,   412,   413,   151,   152,   153,   154,   155,     0,    61,
       0,   156,   157,     0,     0,   566,     0,   352,   567,     0,
       0,     0,     0,   136,   568,     0,   569,   570,     0,     0,
       0,   158,   571,     0,   572,   159,     0,   160,   161,     0,
     573,     0,     0,     0,     0,   574,   575,   576,     0,     0,
       0,     0,   577,     0,     0,     0,     0,   139,     0,   140,
       0,   141,     0,   142,     0,     0,     0,     0,     0,     0,
     578,   579,     0,     0,     0,   580,     0,     0,     0,   143,
     144,   581,   145,   146,   582,   583,   147,   584,   585,   148,
     149,   150,   346,   566,     0,   352,   567,     0,    61,     0,
       0,   136,   568,     0,   569,   570,     0,     0,     0,     0,
     571,     0,   572,     0,     0,     0,     0,     0,   573,     0,
     158,     0,     0,     0,   575,   576,   586,     0,     0,     0,
     577,     0,     0,     0,     0,   139,     0,   140,     0,   141,
       0,   142,  -291,   136,     0,     0,     0,     0,   578,   579,
       0,   137,   138,   580,     0,     0,     0,   143,   144,   581,
     145,   146,   582,   583,   147,   584,   585,   148,   149,   150,
     346,     0,     0,     0,     0,     0,    61,   139,     0,   140,
       0,   141,     0,   142,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   158,   143,
     144,     0,   145,   146,   586,     0,   147,     0,     0,   148,
     149,   150,   151,   152,   153,   154,   155,   136,    61,     0,
     156,   157,     0,     0,     0,   137,   138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -291,
     158,     0,     0,     0,   159,     0,   160,   161,   162,   163,
       0,   139,     0,   140,     0,   141,     0,   142,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     136,     0,     0,   143,   144,     0,   145,   146,   137,   138,
     147,     0,   796,   148,   149,   150,   151,   152,   153,   154,
     155,     0,    61,     0,   156,   157,     0,     0,     0,     0,
       0,     0,     0,     0,   139,     0,   140,     0,   141,     0,
     142,     0,     0,     0,   158,     0,     0,     0,   159,   224,
     160,   161,   162,   163,     0,     0,   143,   144,     0,   145,
     146,     0,     0,   147,     0,     0,   148,   149,   150,   151,
     152,   153,   154,   155,   136,    61,     0,   156,   157,     0,
       0,     0,   137,   138,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   982,     0,     0,
       0,   159,     0,   160,   161,   162,   163,     0,   139,     0,
     140,     0,   141,     0,   142,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   136,     0,     0,
     143,   144,     0,   145,   146,   137,   138,   147,     0,     0,
     148,   149,   150,   151,   152,   153,   154,   155,     0,    61,
       0,   156,   157,     0,     0,     0,     0,     0,     0,     0,
       0,   139,     0,   140,     0,   141,     0,   142,     0,     0,
       0,   158,     0,     0,     0,   159,     0,   160,   161,   162,
     163,     0,     0,   143,   144,     0,   145,   146,     0,     0,
     147,     0,     0,   148,   149,   150,   151,   152,   153,   154,
     155,   136,    61,     0,   156,   157,     0,     0,     0,   137,
     138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   414,     0,     0,     0,   415,     0,
     160,   161,   162,   163,     0,   139,     0,   140,     0,   141,
       0,   142,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   143,   144,     0,
     145,   146,     0,     0,   147,     0,     0,   148,   149,   150,
     151,   152,   153,   154,   155,   807,    61,     0,   156,   157,
       0,     0,    12,    13,    14,    15,    16,    17,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   158,   536,
       0,     0,   159,     0,   160,   161,     0,     0,     0,     0,
     537,     0,     0,     0,     0,     0,     0,     0,     0,  -787,
       0,     0,    18,    19,    20,    21,    22,    23,    24,   538,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
     539,    56,    57,    58,    59,    60,     0,     0,     0,     0,
       0,   903,    61,     0,     0,     0,     0,   808,   -24,   -24,
     -24,   -24,   -24,   -24,     0,     0,     0,   -24,     0,     0,
       0,     0,   -24,     0,     0,   -24,     0,     0,     0,   -24,
       0,     0,     0,     0,     0,     0,   -24,   -24,     0,     0,
       0,     0,     0,   -24,     0,   -24,     0,     0,    18,    19,
      20,    21,    22,    23,    24,   -24,     0,    26,    27,    28,
       0,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,   603,     0,     0,     0,     0,     0,    61,   -25,
     -25,   -25,   -25,   -25,   -25,     0,     0,     0,   -25,     0,
       0,     0,     0,   -25,     0,     0,   -25,     0,     0,     0,
     -25,     0,     0,     0,     0,     0,     0,   -25,   -25,     0,
       0,     0,     0,     0,   -25,     0,   -25,     0,     0,    18,
      19,    20,    21,    22,     0,    24,   -25,     0,    26,    27,
      28,     0,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,     0,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,  1221,     0,     0,     0,     0,     0,    61,
    -787,  -787,  -787,  -787,  -787,  -787,     0,     0,     0,     0,
       0,     0,     0,     0,  -787,     0,     0,  -787,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -787,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -787,  -787,  -787,  -787,  -787,  -787,  -787,     0,  -787,  -787,
    -787,  -787,  -787,  -787,  -787,  -787,  -787,  -787,  -787,  -787,
    -787,  -787,  -787,  -787,  -787,  -787,  -787,  -787,  -787,  -787,
    -787,  -787,  -787,  -787,  -787,  -787,  -787,  -787,  -787,  -787,
    -787,  -787,  -787,  -787,  1059,     0,     0,     0,     0,     0,
    -787,    12,    13,    14,    15,    16,    17,     0,     0,     0,
       0,  -787,     0,     0,     0,  -241,     0,     0,     0,     0,
d2356 7
a2363 6
       0,    18,    19,    20,    21,    22,    23,    24,     0,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,   345,     0,     0,     0,     0,
       0,    61,    12,    13,    14,    15,    16,    17,     0,     0,
d2365 7
d2374 7
a2380 6
       0,     0,    18,    19,    20,    21,    22,    23,    24,     0,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,   346,   563,     0,     0,
       0,     0,    61,     0,    12,    13,    14,    15,    16,    17,
d2383 7
a2390 7
       0,     0,     0,     0,    18,    19,    20,    21,    22,    23,
      24,     0,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,   346,    11,
       0,     0,     0,     0,    61,     0,    12,    13,    14,    15,
      16,    17,     0,     0,     0,     0,     0,     0,     0,     0,
d2392 7
a2399 7
       0,     0,     0,     0,     0,     0,    18,    19,    20,    21,
      22,    23,    24,     0,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
     132,     0,     0,     0,     0,     0,    61,    12,    13,    14,
      15,    16,    17,     0,     0,     0,     0,     0,     0,     0,
d2401 7
a2408 7
       0,     0,     0,     0,     0,     0,     0,    18,    19,    20,
      21,    22,    23,    24,     0,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,   530,     0,     0,     0,     0,     0,    61,    12,    13,
      14,    15,    16,    17,     0,     0,     0,     0,     0,     0,
d2410 7
a2417 7
       0,     0,     0,     0,     0,     0,     0,     0,    18,    19,
      20,    21,    22,    23,    24,     0,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,   761,     0,     0,     0,     0,     0,    61,    12,
      13,    14,    15,    16,    17,     0,     0,     0,     0,     0,
d2419 7
a2426 7
       0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
      19,    20,    21,    22,    23,    24,     0,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,   539,    56,    57,
      58,    59,    60,   788,     0,     0,     0,     0,     0,    61,
      12,    13,    14,    15,    16,    17,     0,     0,     0,     0,
d2428 7
d2437 2
a2438 1
      18,    19,    20,    21,    22,    23,    24,     0,    25,    26,
d2442 2
a2443 2
      57,    58,    59,    60,   905,     0,     0,     0,     0,     0,
      61,    12,    13,    14,    15,    16,    17,     0,     0,     0,
d2446 7
a2453 6
       0,    18,    19,    20,    21,    22,    23,    24,     0,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,   923,     0,     0,     0,     0,
       0,    61,    12,    13,    14,    15,    16,    17,     0,     0,
d2455 7
d2464 7
a2470 6
       0,     0,    18,    19,    20,    21,    22,    23,    24,     0,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
     539,    56,    57,    58,    59,    60,  1038,     0,     0,     0,
       0,     0,    61,    12,    13,    14,    15,    16,    17,     0,
d2473 7
a2480 6
       0,     0,     0,    18,    19,    20,    21,    22,    23,    24,
       0,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,  1099,     0,     0,
       0,     0,     0,    61,    12,    13,    14,    15,    16,    17,
d2482 7
d2491 19
a2509 2
       0,     0,     0,     0,    18,    19,    20,    21,    22,    23,
      24,     0,    25,    26,    27,    28,    29,    30,    31,    32,
d2512 18
a2529 3
      53,    54,    55,    56,    57,    58,    59,    60,  1201,     0,
       0,     0,     0,     0,    61,    12,    13,    14,    15,    16,
      17,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2532 11
a2542 22
       0,     0,     0,     0,     0,    18,    19,    20,    21,    22,
      23,    24,     0,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,   624,
       0,     0,     0,     0,     0,    61,  -116,     0,     0,     0,
       0,  -116,     0,     0,     0,     0,     0,     0,     0,     0,
    -116,     0,     0,  -116,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -116,     0,     0,     0,     0,     0,
       0,  -116,     0,  -116,     0,     0,    18,    19,    20,    21,
      22,   737,    24,  -116,     0,    26,    27,    28,  -116,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,     0,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
       0,     0,     0,     0,     0,     0,    61,     0,    18,    19,
      20,    21,    22,    23,    24,   359,     0,    26,    27,    28,
       0,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,     0,     0,     0,     0,     0,     0,    61,     0,
     603,     0,    18,    19,    20,    21,    22,     0,    24,     0,
       0,    26,    27,    28,     0,    30,    31,    32,    33,    34,
d2544 7
a2550 3
       0,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,     0,    18,    19,    20,
      21,    22,    61,    24,   608,     0,    26,    27,    28,     0,
d2552 7
a2558 21
      40,    41,    42,    43,    44,     0,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,     0,     0,     0,     0,     0,     0,    61,     0,     0,
       0,    18,    19,    20,    21,    22,     0,    24,     0,     0,
      26,    27,    28,     0,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,     0,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    12,    13,    14,    15,    16,
      17,    61,     0,     0,     0,     0,     0,     0,     0,     0,
     136,     0,   975,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   976,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    18,    19,    20,    21,    22,
      23,    24,  -779,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    12,
      13,    14,    15,    16,    17,    61,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   536,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   537,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
      19,    20,    21,    22,    23,    24,   538,    25,    26,    27,
d2561 3
a2563 20
      48,    49,    50,    51,    52,    53,    54,   539,    56,    57,
      58,    59,    60,    12,    13,    14,    15,    16,    17,    61,
       0,     0,     0,     0,     0,     0,     0,     0,   136,     0,
     975,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   976,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    18,    19,    20,    21,    22,    23,    24,
       0,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    12,  1248,  1249,
      15,    16,    17,    61,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1250,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1251,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    18,  1252,    20,
      21,    22,  1253,    24,     0,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,  1254,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,  1255,    56,    57,    58,    59,
      60,    12,    13,    14,    15,    16,    17,    61,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2565 2
a2566 2
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    18,    19,    20,    21,    22,    23,    24,    96,    25,
d2570 10
a2579 2
      56,    57,    58,    59,    60,    12,    13,    14,    15,    16,
      17,    61,     0,     0,     0,     0,     0,     0,     0,     0,
d2582 2
a2583 2
       0,     0,     0,     0,     0,    18,    19,    20,    21,    22,
      23,    24,     0,    25,    26,    27,    28,    29,    30,    31,
d2586 2
a2587 3
      52,    53,    54,    55,    56,    57,    58,    59,    60,   346,
       0,     0,     0,     0,     0,    61,    12,    13,    14,    15,
      16,    17,     0,     0,     0,     0,  -787,     0,     0,     0,
d2590 6
a2595 41
       0,     0,     0,     0,     0,     0,    18,    19,    20,    21,
      22,    23,    24,     0,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      12,    13,    14,    15,    16,    17,    61,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      18,    19,    20,    21,    22,    23,    24,     0,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    12,    13,    14,    15,    16,    17,
      61,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    18,    19,    20,    21,    22,    23,
      24,     0,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    12,    13,
      14,    15,    16,    17,    61,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    18,    19,
      20,    21,    22,    23,    24,     0,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,   539,    56,    57,    58,
      59,    60,     0,     0,     0,     0,     0,     0,    61,    18,
      19,    20,    21,    22,    23,    24,     0,     0,    26,    27,
      28,     0,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,     0,    18,    19,    20,    21,    22,    61,
      24,     0,     0,    26,    27,    28,     0,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,     0,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,     0,     0,
       0,     0,     0,     0,    61
a2608 1
       0,     0,     0,     0,     0,     0,     0,     0,     0,    79,
d2612 33
a2645 1
       0,     0,     0,     0,   107,     0,     0,     0,     0,     0,
a2646 1
       0,     0,    97,     0,     0,     0,     0,     0,     0,    99,
a2650 2
       0,     0,     0,     0,     0,     0,     0,     0,     0,    81,
       0,     0,     0,    83,     0,     0,     0,     0,     0,     0,
a2653 1
       0,     0,     0,     0,   109,     0,     0,     0,     0,     0,
a2654 2
       0,     0,     0,     0,     0,     0,     0,     0,     0,   101,
       0,     0,     0,   103,     0,     0,     0,     0,     0,     0,
d2660 2
d2663 2
d2680 1
d2683 5
d2691 2
d2706 1
d2717 2
a2725 1
      55,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a2735 3
       0,     0,     0,     0,     0,     0,     0,     0,    57,     0,
      59,    61,    63,     0,    65,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,     0,     0,
a2742 1
       0,     0,     0,     0,     0,   137,     0,     0,     0,   139,
a2745 2
       0,     0,     0,     0,     0,     3,     0,     5,     7,     9,
       0,    11,     0,     0,     0,     0,    13,     0,     0,     0,
a2753 1
       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
a2755 2
       0,     0,     0,     0,    15,     0,    17,    19,    21,     0,
      23,     0,     0,     0,     0,     0,     0,     0,     0,    43,
a2760 1
       0,     0,     0,     0,     0,     0,     0,     0,    67,     0,
a2761 1
       0,     0,    33,     0,    35,    37,    39,     0,    41,     0,
a2764 2
       0,     0,     0,     0,     0,     0,     0,    45,     0,    47,
      49,    51,     0,    53,     0,     0,     0,     0,     0,     0,
a2768 2
       0,     0,     0,     0,     0,     0,    69,     0,    71,    73,
      75,     0,    77,    85,     0,     0,     0,     0,     0,     0,
a2779 1
       0,    87,     0,    89,    91,    93,     0,    95,     0,     0,
a2892 1
       0,     0,   105,     0,     0,     0,     0,     0,     0,     0,
d2906 1
d3199 1
d3203 2
d3208 1
d3212 2
d3217 1
d3222 1
a3384 6
       0,     0,     0,     0,     0,     0,     0,   111,   113,     0,
       0,     0,     0,     0,   115,     0,   117,     0,     0,   119,
     121,     0,     0,     0,   123,   125,     0,   127,   129,     0,
       0,     0,   131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   133,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   135,     0,     0,     0,     0,
d3390 5
d3396 1
a3452 1
       0,     0,     0,     0,    25,     0,     0,     0,     0,    27,
a3453 1
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
d3457 2
d3464 2
d3467 1
d3469 1
d3473 3
d3483 4
a3486 1
       0,     0,     0,     0,     0
d3493 18
a3510 15
       0,   767,     0,   767,     0,   767,     0,   767,     0,   767,
       0,   767,     0,   768,     0,   768,     0,   768,     0,   768,
       0,   768,     0,   768,     0,   750,     0,   750,     0,   750,
       0,   769,     0,   769,     0,   769,     0,   769,     0,   769,
       0,   769,     0,   765,     0,   765,     0,   765,     0,   765,
       0,   765,     0,   765,     0,   787,     0,   787,     0,   787,
       0,   787,     0,   787,     0,   787,     0,   730,     0,   730,
       0,   730,     0,   730,     0,   730,     0,   730,     0,   629,
       0,   629,     0,   629,     0,   766,     0,   766,     0,   766,
       0,   766,     0,   766,     0,   766,     0,   611,     0,   637,
       0,   637,     0,   637,     0,   777,     0,   638,     0,   638,
       0,   550,     0,   550,     0,   550,     0,   550,     0,   550,
       0,   550,     0,   550,     0,   550,     0,   550,     0,   550,
       0,   550,     0,   550,     0,   550,     0,   764,     0,   764,
       0
d3515 315
a3829 168
       1,     2,   160,     6,    99,   196,   458,   173,   558,    10,
      76,   702,   333,   548,   505,   205,   199,   713,   374,   715,
     688,   492,   180,   558,   365,   405,   290,   291,   612,   215,
     351,   430,   218,   415,   414,   919,   222,   971,   914,   488,
     489,   218,   458,   835,   129,   222,   748,   695,   124,   134,
     199,   194,   440,   524,   823,   414,   179,   364,   365,     1,
       1,     4,   602,  1054,   983,   984,     1,     1,   611,   287,
      38,   289,   428,    65,  1066,    76,     1,    80,    22,   729,
      81,    44,     1,    33,    85,    33,    20,     1,     1,     1,
     882,    68,   914,    11,   189,    53,   207,    99,     1,    86,
     791,   846,   102,   979,     1,   108,  1040,     1,    22,  1234,
      22,   112,   113,    86,   115,     1,     1,     1,    86,     1,
     121,     1,   122,   123,   102,   793,   104,   598,   120,     1,
       1,   133,   119,   110,   292,   293,   294,   929,   930,     1,
     141,    99,   522,   811,    62,     1,     6,   120,   271,  1141,
     273,    11,  1144,     1,  1279,  1280,   119,   979,     1,     0,
     102,   520,   521,   353,    99,     1,   911,  1086,   358,    86,
       1,   389,   822,   764,   124,   119,   124,   120,   119,   121,
      99,   123,   365,   125,   125,    99,    22,   121,   189,   190,
     191,   192,   193,   194,   195,  1186,  1187,   122,   133,   742,
     119,   600,    62,   122,   123,   119,   207,   119,   121,   123,
     123,   123,   125,    99,   133,    75,     1,     4,   121,   133,
      80,    81,   125,   968,   121,   119,     4,     1,   125,   123,
     102,   552,   553,   119,   119,   119,   557,   123,  1030,   121,
    1232,   121,   122,   125,   565,   105,   914,   133,   108,   121,
     121,   123,   123,   125,     1,   115,    94,  1191,    96,   121,
    1029,   123,   385,   119,   814,  1121,   122,   362,     4,   860,
    1146,   119,   458,   653,   122,   123,   119,   657,   658,   814,
      53,     4,   472,   119,  1276,   665,   122,   363,   148,   127,
     121,   474,   123,   120,   653,   296,     1,   298,   657,   839,
     840,   689,   690,     1,   793,    28,     1,   308,   309,    96,
     453,   979,   455,   729,     1,    80,   914,   638,  1174,   869,
    1176,   766,   811,  1025,  1026,   474,  1118,   914,   188,    53,
     119,  1027,   980,    14,   869,   919,   121,   124,   123,   126,
     127,  1225,   120,   108,     1,   119,   441,   121,   122,   123,
     461,   462,    76,     1,  1288,  1211,  1212,   468,   469,  1235,
      96,   832,   574,   684,   685,     1,   120,   838,     1,   821,
     124,     4,   119,    96,   440,   122,    99,   961,   734,  1171,
       1,   979,   568,   106,   469,    66,  1242,   944,   124,     1,
     126,   127,   979,   605,     1,    11,    86,   779,   621,   400,
     586,   124,   403,   126,   127,   821,   822,   102,   594,     1,
     133,  1107,   857,   414,   415,  1111,   121,   122,   641,   760,
     120,   119,  1214,   121,   122,    43,   121,    45,   123,   900,
       1,   695,    86,  1101,   121,   122,   437,    55,   837,   440,
     441,     1,   443,   444,   445,   936,   447,   896,   121,   122,
     451,   311,   453,   760,   455,   456,  1013,  1014,   949,   914,
     461,   462,   465,   574,   121,   122,    49,   468,   469,   102,
      86,   104,   538,   121,   122,   119,   620,   478,   479,  1175,
     546,    64,     1,   343,     1,   121,   122,     4,   121,   122,
     123,   602,     1,     0,   605,   639,   356,   119,   609,  1294,
     121,   122,    21,  1298,   120,    14,     1,  1057,    73,   121,
     122,   688,    86,    22,   121,   122,   611,   518,    37,   520,
     521,    99,  1057,    53,   979,     1,   119,    57,   529,   121,
     122,    38,   987,    63,    99,   536,   537,   538,    14,  1123,
    1124,   106,   120,   729,   119,   546,    22,    17,   119,   550,
     121,   411,    22,     1,    60,   133,    53,    66,   559,   119,
      48,   121,    57,    53,    59,    72,    56,   653,    63,   119,
     430,   657,  1063,   574,    22,    11,    73,   760,   438,    86,
     440,   441,   121,   122,   774,    73,    76,   445,    86,   447,
      66,    86,   452,  1009,  1010,  1286,   453,   824,   455,   826,
      48,   602,    99,    98,   605,    53,     1,     2,   609,   106,
     119,    99,   707,   122,    99,    10,   793,   120,   106,   121,
     122,   106,  1002,   689,   690,    73,   692,   628,   120,    23,
     121,   122,   743,  1217,   811,   821,   822,   119,   733,   825,
     120,  1225,   120,   119,   121,  1097,   121,   122,   133,   835,
     914,    99,   653,   120,   975,   976,   657,   122,   106,   122,
     123,   122,   123,    57,    57,    59,    59,  1047,   120,    63,
      63,   119,    51,   533,   122,   123,   677,   678,    57,   680,
      59,  1097,   120,    62,    63,  1269,    81,     1,   689,   690,
      85,   692,    86,    86,   871,    57,   882,    59,    86,    92,
     964,    63,   468,   469,    98,    98,    17,    86,    22,   854,
     855,   308,   309,   677,   678,   979,   980,   112,   113,    98,
     115,  1173,   839,   840,    86,   122,   121,   893,   839,   840,
     921,   965,   966,   119,    48,   120,    98,   914,   120,    53,
     600,   102,   743,   929,   930,  1295,   141,   842,   843,    99,
      14,    94,   612,    96,    42,   758,   106,  1173,     4,    73,
    1295,   621,  1147,  1148,   122,   766,   767,  1279,  1280,  1018,
    1019,   120,  1263,     4,   777,   841,  1022,  1023,   779,   122,
     123,   641,     4,   133,   127,    99,    28,   689,   690,  1053,
    1054,   122,   106,   123,   189,   190,   191,   192,   193,   194,
     195,   122,   979,   122,   981,   119,   983,   984,   122,     4,
     987,   120,  1303,   125,   378,   379,   119,     8,     9,    10,
       1,   122,    13,  1009,  1010,   983,   827,   122,   120,   689,
     690,    22,    37,    11,    25,   119,   122,  1101,   839,   840,
     841,    22,   702,    33,  1030,    36,    37,   123,   119,   123,
     125,    66,    98,   854,   855,   125,   857,   122,   859,   104,
     122,   122,    45,   123,   120,    86,   120,    48,   120,   119,
     123,   872,    53,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,    14,
     123,   121,    73,     8,   119,    34,    11,   120,    13,   965,
     966,   296,   119,   298,   764,  1169,  1170,    22,   119,  1086,
      25,  1097,   119,   308,   309,   119,     1,  1181,    99,     4,
      22,    36,  1186,  1187,    37,   106,    22,   123,    67,   102,
     124,   791,  1118,    33,   123,   123,    75,    22,   119,   120,
     121,   122,   123,   944,   125,    42,   123,    22,    33,   120,
    1271,  1272,  1273,  1274,   120,   120,   123,     1,   119,   123,
      20,   100,   101,    48,   965,   966,   105,     4,    53,    20,
      33,  1235,   111,   112,   113,   114,   977,   837,    22,    22,
     981,   982,   983,   984,    33,  1171,    16,  1173,    73,   128,
     129,   122,   122,   122,    76,   119,   135,    56,   125,   102,
     860,   124,   122,    58,    48,   400,   123,    20,   403,    53,
      20,    49,  1013,  1014,    99,  1016,   124,    33,   102,   414,
     415,   106,    55,   121,    16,   119,   119,   119,  1214,    73,
     119,    23,   119,   119,   119,   120,   121,   122,    33,   124,
     125,   120,   437,    35,   125,    64,   441,    33,   443,   444,
     445,    43,   447,    22,   123,    99,   451,    16,   453,   919,
     455,   456,   106,    18,    22,    57,   118,    59,   122,    33,
     102,    63,    22,   123,    20,   119,    35,   121,   122,   123,
     120,   125,   124,   478,   479,  1086,     1,    22,   119,   125,
     125,   119,    33,   122,    86,   118,    33,   120,    57,   123,
      59,   961,    33,   123,    63,   122,    98,    22,   122,   969,
     970,   971,   119,    86,   974,    15,   168,   977,   120,    19,
     120,   122,   773,   518,   122,   520,   521,    86,   206,    74,
      30,   852,    74,    48,   529,   158,   159,   105,    53,    98,
     626,   536,   537,  1010,   864,  1146,  1147,  1148,   635,   438,
      50,  1152,  1153,   767,   529,   550,   569,  1223,    73,   609,
       8,     9,    10,   979,   559,    13,   987,  1235,  1208,    17,
      70,    71,   115,     8,     1,   641,   810,    25,    13,   364,
    1040,    29,  1185,   871,    99,  1101,   594,    22,    36,  1281,
      25,   106,  1052,   733,   217,    22,  1123,   726,  1124,   270,
     828,    36,   568,   518,   119,  1208,   121,   122,   123,   868,
     125,   222,   518,   189,   519,   115,   116,   117,   118,     1,
    1223,    48,  1223,   189,   298,   248,    53,  1087,    -1,    -1,
     130,   131,    -1,   628,    -1,    -1,   136,    -1,   290,   291,
      22,    -1,    -1,    -1,    -1,    -1,    73,  1248,  1249,  1250,
    1251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   653,    -1,
      -1,    -1,   657,  1123,    -1,    -1,    48,  1127,    -1,    -1,
      -1,    53,    99,    -1,    -1,   298,    -1,    -1,     1,   106,
     303,    -1,   677,   678,   307,   680,    -1,    -1,    -1,    -1,
      -1,    73,   119,  1294,   121,   122,   123,  1298,   125,    22,
      -1,    -1,    -1,    -1,    -1,    -1,     8,     9,    10,    -1,
      12,    13,    -1,    -1,    -1,    17,    -1,    99,    -1,    -1,
      22,    -1,  1182,    25,   106,    48,    -1,    29,    -1,    -1,
      53,  1191,    -1,    -1,    36,    37,   388,   119,   390,   121,
     122,   123,    -1,   125,   367,    -1,    -1,    -1,    -1,    -1,
      73,   374,    -1,    -1,   377,   378,   379,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,  1225,    17,    -1,    -1,    -1,
      -1,   766,   767,    -1,    25,    -1,    99,   400,    29,    -1,
      -1,    -1,   405,   106,   779,    36,    -1,    -1,    -1,    -1,
      -1,   414,   415,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,    -1,   125,     1,    -1,   428,   458,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    -1,
      -1,    -1,    63,    -1,    22,   448,  1286,    -1,  1288,    -1,
      -1,    -1,   827,    -1,  1294,    76,    77,    78,  1298,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      48,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,   854,
     855,    -1,   857,    -1,   859,   488,   489,    -1,   491,    -1,
      -1,    -1,    -1,    -1,    -1,    73,    -1,   872,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   516,    -1,   518,    14,   520,   521,   522,
      -1,    99,    -1,   526,    22,    23,    -1,    -1,   106,    -1,
      -1,    -1,    -1,    31,    32,    -1,    -1,   569,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,    -1,   125,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,
      -1,    59,    -1,    61,   567,    63,    -1,   570,    66,   944,
      -1,    -1,    -1,   576,    -1,    -1,    -1,    -1,    -1,   582,
      -1,    79,    80,    -1,    82,    83,    -1,    -1,    86,    -1,
      -1,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,    -1,    -1,   981,   982,   983,   984,
      -1,    -1,    -1,   616,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,    -1,    -1,    -1,   124,    -1,   126,   127,
     128,   129,    -1,    -1,    15,    -1,    17,    18,  1013,  1014,
      -1,  1016,    23,    24,    -1,    26,    27,   650,    -1,    -1,
     653,    32,    -1,    34,   657,   658,   688,   660,    -1,    40,
      -1,    -1,   665,   695,    -1,    46,    47,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,    -1,    57,    -1,    59,    -1,
      61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      71,    -1,    -1,    -1,    75,    -1,    -1,   729,    79,    80,
d3831 135
a3965 58
      91,  1086,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
     723,    -1,    -1,   726,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   734,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
      -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,   793,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1146,    -1,    -1,    -1,   778,   779,  1152,  1153,   811,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   821,
     822,    -1,    -1,   825,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    -1,    -1,   835,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   816,    -1,   818,    -1,    -1,    -1,    -1,
     823,   824,    -1,   826,    -1,    -1,    -1,    -1,    -1,   100,
     101,    -1,    -1,   836,   105,    -1,   107,   108,   109,   871,
     111,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,
     882,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,   132,   133,   134,   135,    -1,    -1,    -1,    -1,    -1,
     873,    -1,    -1,  1248,  1249,  1250,  1251,    -1,    -1,    -1,
      -1,    -1,   914,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   896,    -1,    -1,    -1,   929,   930,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   914,     1,    -1,   917,   918,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    16,    -1,    -1,
      -1,    -1,   964,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    32,    -1,    -1,    -1,   979,   980,    -1,
      39,    -1,    41,   956,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,    -1,
      59,    -1,    61,    -1,    63,    -1,   979,  1009,  1010,   982,
      -1,    -1,    -1,    -1,   987,    -1,    -1,    -1,    -1,    -1,
      79,    80,    -1,    82,    83,    -1,    23,    86,  1030,  1002,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1053,  1054,    -1,    -1,    -1,  1029,    -1,    -1,    -1,
      57,   120,    59,    -1,    61,   124,    63,   126,   127,   128,
     129,    -1,    -1,    -1,  1047,    -1,    -1,    -1,    -1,    -1,
    1053,  1054,    79,    80,    -1,    82,    83,    -1,    -1,    86,
      -1,    -1,    89,    90,    91,  1097,    -1,    -1,    -1,  1101,
      -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1082,
    1083,    -1,  1085,    -1,    -1,    -1,  1118,    -1,    -1,    -1,
      -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1146,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1125,    -1,    -1,    -1,    -1,    -1,  1131,    -1,
      -1,    -1,  1135,    -1,    -1,    -1,    -1,  1169,  1170,  1171,
      -1,  1173,    -1,  1146,    -1,    -1,    -1,    -1,    -1,  1181,
      -1,    -1,  1155,    -1,  1186,  1187,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1214,  1186,  1187,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1204,  1205,  1235,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1226,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1235,    -1,    -1,     4,    -1,    -1,    -1,     8,
       9,    10,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,
      -1,  1254,    -1,    -1,    23,    -1,    25,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      49,    50,    51,    52,    53,    54,  1289,    56,    57,    58,
d3968 27
a3994 11
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,     8,     9,    10,    11,
      12,    13,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
d3998 6
a4003 10
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,   101,
      -1,    -1,    -1,   105,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,     9,    10,    11,    12,    13,    -1,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    49,    50,    51,    52,    53,    54,    -1,
d4008 4
a4011 1
      96,    -1,    98,    -1,   100,   101,    -1,    -1,    -1,    -1,
d4013 2
a4014 29
      -1,    -1,    -1,    -1,   120,    -1,    -1,     1,   124,   125,
     126,   127,   128,   129,     8,     9,    10,    11,    12,    13,
      -1,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,     1,
     124,   125,   126,   127,   128,   129,     8,     9,    10,    11,
      12,    13,    -1,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
      -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     8,     9,
      10,    11,    12,    13,    -1,    -1,    -1,    -1,   120,    -1,
      -1,    -1,   124,    23,   126,   127,   128,   129,    -1,    -1,
      -1,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
d4018 17
a4034 147
      90,    91,    92,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,     9,    10,    11,    12,    13,    -1,    -1,    -1,    -1,
     120,    -1,    -1,    -1,   124,    23,   126,   127,   128,   129,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,    -1,    -1,    16,   124,    -1,   126,   127,
     128,   129,    23,    -1,    25,    -1,    -1,    -1,    -1,    -1,
      31,    32,    -1,    -1,    35,    36,    -1,    -1,    39,    -1,
      41,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    54,    -1,    -1,    57,    -1,    59,    -1,
      61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,
      -1,    82,    83,    -1,    -1,    86,    -1,    -1,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
      -1,    -1,    16,   124,    -1,   126,   127,   128,   129,    23,
      -1,    25,    -1,    -1,    -1,    -1,    -1,    31,    32,    -1,
      -1,    35,    36,    -1,    -1,    39,    -1,    41,    -1,    43,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,    -1,    57,    -1,    59,    -1,    61,    -1,    63,
      -1,    -1,    -1,    14,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    22,    23,    -1,    -1,    79,    80,    -1,    82,    83,
      31,    32,    86,    -1,    -1,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    57,    -1,    59,    -1,
      61,    -1,    63,    -1,    -1,    66,   120,    -1,    -1,    -1,
     124,    -1,   126,   127,   128,   129,     1,    -1,    79,    80,
      -1,    82,    83,    -1,    -1,    86,    -1,    -1,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    23,   100,
     101,    -1,    -1,    -1,    -1,    -1,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
      -1,    -1,    -1,   124,    -1,   126,   127,   128,   129,     1,
      -1,    -1,    57,    -1,    59,    -1,    61,    -1,    63,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    -1,    -1,    79,    80,    -1,    82,    83,    31,
      32,    86,    -1,    -1,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    57,    -1,    59,    -1,    61,
      -1,    63,    -1,    -1,    -1,   120,    -1,    -1,    -1,   124,
      -1,   126,   127,   128,   129,     1,    -1,    79,    80,    -1,
      82,    83,    -1,    -1,    86,    -1,    -1,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    23,   100,   101,
      -1,    -1,    -1,    -1,    -1,    31,    32,    -1,    -1,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,
      -1,    -1,   124,    -1,   126,   127,   128,   129,     1,    -1,
      -1,    57,    -1,    59,    -1,    61,    -1,    63,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    -1,    -1,    79,    80,    -1,    82,    83,    31,    32,
      86,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    57,    -1,    59,    -1,    61,    -1,
      63,    -1,    -1,    -1,   120,    -1,    -1,    -1,   124,    -1,
     126,   127,   128,   129,     1,    -1,    79,    80,    -1,    82,
      83,    -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    23,   100,   101,    -1,
      -1,    -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
      -1,   124,    -1,   126,   127,   128,   129,     1,    -1,    -1,
      57,    -1,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      -1,    -1,    79,    80,    -1,    82,    83,    31,    32,    86,
      -1,    -1,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    57,    -1,    59,    -1,    61,    -1,    63,
      -1,    -1,    -1,   120,    -1,    -1,    -1,   124,    -1,   126,
     127,   128,   129,     1,    -1,    79,    80,    -1,    82,    83,
      -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    23,   100,   101,    -1,    -1,
      -1,    -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,
     124,    -1,   126,   127,   128,   129,     1,    -1,    -1,    57,
      -1,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    -1,
      -1,    79,    80,    -1,    82,    83,    31,    32,    86,    -1,
      -1,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    57,    -1,    59,    -1,    61,    -1,    63,    -1,
      -1,    -1,   120,    -1,    -1,    -1,   124,    -1,   126,   127,
     128,   129,     1,    -1,    79,    80,    -1,    82,    83,    -1,
      -1,    86,    -1,    -1,    89,    90,    91,    92,    93,    94,
      95,    96,    -1,    98,    23,   100,   101,    -1,    -1,    -1,
      -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,   124,
      -1,   126,   127,   128,   129,     1,    -1,    -1,    57,    -1,
      59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    -1,    -1,
      79,    80,    -1,    82,    83,    31,    32,    86,    -1,    -1,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    57,    -1,    59,    -1,    61,    -1,    63,    -1,    -1,
      -1,   120,    -1,    -1,    -1,   124,    -1,   126,   127,   128,
     129,     1,    -1,    79,    80,    -1,    82,    83,    -1,    -1,
      86,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    23,   100,   101,    -1,    -1,    -1,    -1,
      -1,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,   124,    -1,
     126,   127,   128,   129,     1,    -1,    -1,    57,    -1,    59,
      -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    -1,    -1,    79,
      80,    -1,    82,    83,    31,    32,    86,    -1,    -1,    89,
      90,    91,    92,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      57,    -1,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,
     120,    -1,    -1,    -1,   124,    -1,   126,   127,   128,   129,
       1,    -1,    79,    80,    -1,    82,    83,    -1,    -1,    86,
      -1,    -1,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    23,   100,   101,    -1,    -1,    -1,    -1,    -1,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,    -1,    -1,    -1,   124,    -1,   126,
     127,   128,   129,     1,    -1,    -1,    57,    -1,    59,    -1,
      61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    -1,    -1,    79,    80,
      -1,    82,    83,    31,    32,    86,    -1,    -1,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,
      -1,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,   120,
      -1,    -1,    -1,   124,    -1,   126,   127,   128,   129,     1,
      -1,    79,    80,    -1,    82,    83,    -1,    -1,    86,    -1,
      -1,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
      98,    23,   100,   101,    -1,    -1,    -1,    -1,    -1,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,    -1,    -1,    -1,   124,    -1,   126,   127,
     128,   129,     1,    -1,    -1,    57,    -1,    59,    -1,    61,
      -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    -1,    -1,    79,    80,    -1,
      82,    83,    31,    32,    86,    -1,    -1,    89,    90,    91,
      92,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,    -1,
      59,    -1,    61,    -1,    63,    -1,    -1,    -1,   120,    -1,
      -1,    -1,   124,    -1,   126,   127,   128,   129,    -1,    -1,
      79,    80,    -1,    82,    83,    -1,    -1,    86,    -1,    -1,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,     8,     9,    10,    11,    12,    13,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,    -1,    -1,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
d4037 120
a4156 24
      85,    86,    87,    88,    89,    90,    91,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,     8,     9,    10,    11,    12,
      13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,     8,     9,    10,    11,    12,
      13,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,
      23,   124,    -1,   126,   127,   128,   129,    -1,    31,    32,
      -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,    -1,
      -1,    -1,    -1,    -1,     8,     9,    10,    11,    12,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    23,
      -1,   124,    -1,   126,   127,   128,   129,    31,    32,    -1,
d4158 7
a4164 9
      -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,    -1,    -1,
      -1,    -1,    -1,     8,     9,    10,    11,    12,    13,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    23,    -1,
     124,    -1,   126,   127,   128,   129,    31,    32,    -1,    -1,
a4165 18
      -1,    -1,    -1,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,     1,    98,    -1,   100,   101,    -1,    -1,     8,
       9,    10,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,    25,    -1,    -1,   124,
      -1,   126,   127,   128,   129,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,     1,    98,
      -1,    -1,    -1,    -1,   103,     8,     9,    10,    11,    12,
      13,    -1,    -1,    -1,    -1,    18,    -1,    -1,    -1,    22,
      -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,
d4167 2
a4168 73
      -1,    -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,     8,
       9,    10,    11,    12,    13,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    -1,    25,    -1,    -1,    -1,
      -1,    -1,    31,    32,    -1,    -1,    -1,    36,    -1,   122,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,    -1,    -1,    15,    -1,    17,    18,    -1,
      -1,    -1,    -1,    23,    24,    -1,    26,    27,    -1,    -1,
      -1,   120,    32,    -1,    34,   124,    -1,   126,   127,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    47,    -1,    -1,
      -1,    -1,    52,    -1,    -1,    -1,    -1,    57,    -1,    59,
      -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    75,    -1,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    15,    -1,    17,    18,    -1,    98,    -1,
      -1,    23,    24,    -1,    26,    27,    -1,    -1,    -1,    -1,
      32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
     120,    -1,    -1,    -1,    46,    47,   126,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    -1,    57,    -1,    59,    -1,    61,
      -1,    63,    22,    23,    -1,    -1,    -1,    -1,    70,    71,
      -1,    31,    32,    75,    -1,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    -1,    -1,    -1,    -1,    98,    57,    -1,    59,
      -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    79,
      80,    -1,    82,    83,   126,    -1,    86,    -1,    -1,    89,
      90,    91,    92,    93,    94,    95,    96,    23,    98,    -1,
     100,   101,    -1,    -1,    -1,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,    -1,    -1,    -1,   124,    -1,   126,   127,   128,   129,
      -1,    57,    -1,    59,    -1,    61,    -1,    63,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    -1,    -1,    79,    80,    -1,    82,    83,    31,    32,
      86,    -1,    35,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    57,    -1,    59,    -1,    61,    -1,
      63,    -1,    -1,    -1,   120,    -1,    -1,    -1,   124,   125,
     126,   127,   128,   129,    -1,    -1,    79,    80,    -1,    82,
      83,    -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,
      93,    94,    95,    96,    23,    98,    -1,   100,   101,    -1,
      -1,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
      -1,   124,    -1,   126,   127,   128,   129,    -1,    57,    -1,
      59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    -1,    -1,
      79,    80,    -1,    82,    83,    31,    32,    86,    -1,    -1,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    57,    -1,    59,    -1,    61,    -1,    63,    -1,    -1,
      -1,   120,    -1,    -1,    -1,   124,    -1,   126,   127,   128,
     129,    -1,    -1,    79,    80,    -1,    82,    83,    -1,    -1,
      86,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
      96,    23,    98,    -1,   100,   101,    -1,    -1,    -1,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,   124,    -1,
     126,   127,   128,   129,    -1,    57,    -1,    59,    -1,    61,
      -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,    -1,
      82,    83,    -1,    -1,    86,    -1,    -1,    89,    90,    91,
      92,    93,    94,    95,    96,     1,    98,    -1,   100,   101,
      -1,    -1,     8,     9,    10,    11,    12,    13,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    25,
      -1,    -1,   124,    -1,   126,   127,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      -1,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
d4172 2
a4173 23
      86,    87,    88,    89,    90,    91,    -1,    -1,    -1,    -1,
      -1,     1,    98,    -1,    -1,    -1,    -1,   103,     8,     9,
      10,    11,    12,    13,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    -1,    -1,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    37,    -1,    -1,
      -1,    -1,    -1,    43,    -1,    45,    -1,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,     1,    -1,    -1,    -1,    -1,    -1,    98,     8,
       9,    10,    11,    12,    13,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    -1,    -1,    25,    -1,    -1,    -1,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    36,    37,    -1,
      -1,    -1,    -1,    -1,    43,    -1,    45,    -1,    -1,    48,
      49,    50,    51,    52,    -1,    54,    55,    -1,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,     1,    -1,    -1,    -1,    -1,    -1,    98,
       8,     9,    10,    11,    12,    13,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    -1,    -1,    25,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
a4174 7
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,     1,    -1,    -1,    -1,    -1,    -1,
      98,     8,     9,    10,    11,    12,    13,    -1,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    22,    -1,    -1,    -1,    -1,
d4176 7
a4183 6
      -1,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,     1,    -1,    -1,    -1,    -1,
      -1,    98,     8,     9,    10,    11,    12,    13,    -1,    -1,
d4185 7
d4194 2
a4195 1
      -1,    -1,    48,    49,    50,    51,    52,    53,    54,    -1,
d4199 2
a4200 2
      86,    87,    88,    89,    90,    91,    92,     1,    -1,    -1,
      -1,    -1,    98,    -1,     8,     9,    10,    11,    12,    13,
d4203 7
a4210 7
      -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,     1,
      -1,    -1,    -1,    -1,    98,    -1,     8,     9,    10,    11,
      12,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4212 7
a4219 7
      -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
       1,    -1,    -1,    -1,    -1,    -1,    98,     8,     9,    10,
      11,    12,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4221 7
a4228 7
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,     1,    -1,    -1,    -1,    -1,    -1,    98,     8,     9,
      10,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,    -1,
d4230 7
a4237 7
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,     1,    -1,    -1,    -1,    -1,    -1,    98,     8,
       9,    10,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,
d4239 7
a4246 7
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,     1,    -1,    -1,    -1,    -1,    -1,    98,
       8,     9,    10,    11,    12,    13,    -1,    -1,    -1,    -1,
d4248 7
d4257 7
a4263 6
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,     1,    -1,    -1,    -1,    -1,    -1,
      98,     8,     9,    10,    11,    12,    13,    -1,    -1,    -1,
d4266 7
a4273 6
      -1,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,     1,    -1,    -1,    -1,    -1,
      -1,    98,     8,     9,    10,    11,    12,    13,    -1,    -1,
d4275 7
d4284 2
a4285 1
      -1,    -1,    48,    49,    50,    51,    52,    53,    54,    -1,
d4289 2
a4290 2
      86,    87,    88,    89,    90,    91,     1,    -1,    -1,    -1,
      -1,    -1,    98,     8,     9,    10,    11,    12,    13,    -1,
d4293 24
d4318 14
a4331 6
      -1,    -1,    -1,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,     1,    -1,    -1,
      -1,    -1,    -1,    98,     8,     9,    10,    11,    12,    13,
d4334 7
d4342 3
a4344 2
      -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
d4347 2
a4348 3
      84,    85,    86,    87,    88,    89,    90,    91,     1,    -1,
      -1,    -1,    -1,    -1,    98,     8,     9,    10,    11,    12,
      13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4351 1
a4351 47
      -1,    -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,     1,
      -1,    -1,    -1,    -1,    -1,    98,     8,    -1,    -1,    -1,
      -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    -1,    45,    -1,    -1,    48,    49,    50,    51,
      52,     1,    54,    55,    -1,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    48,    49,
      50,    51,    52,    53,    54,     1,    -1,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
       1,    -1,    48,    49,    50,    51,    52,    -1,    54,    -1,
      -1,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    48,    49,    50,
      51,    52,    98,    54,     1,    -1,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      -1,    48,    49,    50,    51,    52,    -1,    54,    -1,    -1,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,     8,     9,    10,    11,    12,
      13,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,     8,
       9,    10,    11,    12,    13,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
d4355 2
a4356 19
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,     8,     9,    10,    11,    12,    13,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    -1,
      25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,     8,     9,    10,
      11,    12,    13,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,     8,     9,    10,    11,    12,    13,    98,    -1,    -1,
d4359 2
a4360 2
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
d4364 2
a4365 2
      87,    88,    89,    90,    91,     8,     9,    10,    11,    12,
      13,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4367 7
d4375 3
a4377 2
      -1,    -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
d4380 2
a4381 3
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    -1,    -1,    -1,    -1,    98,     8,     9,    10,    11,
      12,    13,    -1,    -1,    -1,    -1,    18,    -1,    -1,    -1,
d4384 6
a4389 6
      -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
       8,     9,    10,    11,    12,    13,    98,    -1,    -1,    -1,
d4392 3
a4394 25
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,     8,     9,    10,    11,    12,    13,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,     8,     9,
      10,    11,    12,    13,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    98,    48,
      49,    50,    51,    52,    53,    54,    -1,    -1,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
d4396 2
a4397 7
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    -1,    48,    49,    50,    51,    52,    98,
      54,    -1,    -1,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    -1,    -1,
      -1,    -1,    -1,    -1,    98
d4404 130
a4533 131
       0,    38,    72,    86,   138,   139,   142,   151,   158,   163,
     166,     1,     8,     9,    10,    11,    12,    13,    48,    49,
      50,    51,    52,    53,    54,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    98,   405,   406,   408,   409,   410,   413,   405,     0,
      53,   168,   274,   424,   154,   405,   120,   188,   424,   188,
     119,   120,   140,   119,   163,   166,    11,    86,   167,   188,
     189,   190,   405,   119,   119,   168,    55,   275,   276,   405,
     424,   201,   203,   405,   119,   159,   155,   157,   119,     1,
     122,   422,     1,   121,    86,   121,   122,    99,   120,   133,
     421,    60,   202,   143,   164,   167,    86,   161,   174,   175,
     168,   405,     1,   405,   152,   276,    23,    31,    32,    57,
      59,    61,    63,    79,    80,    82,    83,    86,    89,    90,
      91,    92,    93,    94,    95,    96,   100,   101,   120,   124,
     126,   127,   128,   129,   248,   359,   360,   362,   364,   365,
     366,   367,   369,   371,   372,   373,   374,   377,   391,   394,
     395,   411,   412,   413,   359,   412,   204,   205,   405,     8,
       9,    10,    13,    25,    29,    36,   141,   144,   146,   147,
     208,   282,   285,   286,   287,   174,   160,   162,   119,     1,
       4,   423,   203,   203,   405,   120,   376,   120,   120,   346,
     347,   424,   120,   359,   125,   359,   392,   393,   365,     4,
      98,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   370,   120,   122,
      28,    34,    67,    75,   100,   101,   105,   107,   108,   109,
     111,   112,   113,   114,   128,   129,   132,   133,   134,   135,
     396,   397,   399,   401,    15,    19,    30,    50,    70,    71,
     115,   116,   117,   118,   130,   131,   136,   398,   400,   402,
      51,    62,   412,    68,   110,   369,     4,    96,   124,   126,
     127,   420,   120,   121,   122,   362,   365,   121,     1,   119,
      86,   206,   424,    15,    19,    28,    30,    34,   100,   101,
     105,   107,   108,   109,   110,   128,   129,   130,   131,   132,
     134,   135,   136,   294,   401,   402,   404,   405,   421,   405,
     405,   209,   210,   405,   405,     1,    92,   214,   215,   217,
     405,   405,    17,   311,   148,   416,   119,   423,   161,     1,
     192,   193,   409,   156,   171,   169,   373,   120,   349,   350,
     359,   248,   373,   378,   120,   378,   122,   102,     1,   121,
     125,   359,    14,   360,   362,   361,   362,    42,   364,   363,
     364,   233,   234,   412,   233,   365,   365,   365,   405,     1,
      18,    57,    59,    61,    63,    66,    79,    80,    82,    83,
      86,    89,    90,    91,   120,   124,   359,   379,   380,   381,
     382,   384,   385,   389,   390,   405,   413,   122,   375,     1,
      97,   348,   359,   359,   205,   205,    65,   120,   207,   424,
     120,   299,   424,     4,     4,     1,   119,   121,    28,   211,
     424,     4,   299,     1,   119,   121,     4,   299,   414,   423,
      43,    45,    55,   149,   289,   292,   424,   423,     1,   119,
     194,   421,   174,   172,   173,   176,   208,   282,    25,    36,
     148,   153,   170,   208,   281,   286,   122,   359,     1,   121,
     122,   123,   348,   122,   359,   393,     1,   393,   122,   362,
     364,     4,   359,   405,   359,   385,   122,   359,   385,   386,
     388,   390,     1,   359,   379,   389,   102,   125,   119,   419,
       1,   121,   123,   125,   348,   346,   121,   122,   122,   120,
       1,   212,   213,   405,   211,     1,    25,    36,    55,    86,
     103,   122,   189,   300,   301,   302,   418,   424,   297,   405,
     421,   424,   405,   405,   210,   210,   359,   405,   295,   296,
     421,   424,   215,     1,   215,   405,    15,    18,    24,    26,
      27,    32,    34,    40,    45,    46,    47,    52,    70,    71,
      75,    81,    84,    85,    87,    88,   126,   216,   217,   311,
     312,   313,   317,   318,   330,   333,   342,   344,   345,   373,
     403,   412,   150,     1,   191,   266,   267,   409,     1,   218,
     219,   409,    56,    57,    59,    63,    76,    77,    78,   274,
     283,   290,   293,   193,     1,   193,   203,    86,   120,   195,
     196,   423,   148,    37,   177,   178,   180,   405,   405,    11,
     165,   119,   122,   350,     1,   350,   359,   422,   412,    33,
     123,   119,   419,     1,   119,   121,   122,   387,   123,   125,
     102,   125,   359,   381,   382,    66,   384,   359,   390,     1,
     390,   385,   422,   122,     1,   359,   212,     1,   121,   122,
     104,   200,   424,   122,   405,   405,   189,   122,   123,     1,
     119,   122,    45,   189,     1,   123,   298,   315,   425,   405,
     299,   299,   299,   298,   405,   299,   359,   372,   373,   216,
     412,   357,   359,   323,   267,   326,     1,   331,   332,   358,
     359,    86,   351,   120,   359,   120,   120,   373,   123,   119,
     415,   318,    14,   319,   121,   422,   346,     1,   220,   221,
     407,   408,   409,   121,   417,   267,   219,   417,   421,   367,
     368,   424,   119,   359,   119,   119,   119,   202,   292,   119,
     169,     1,   197,   198,   199,   405,   418,   120,    17,    22,
      22,    37,   180,   202,    22,   288,   289,   292,   123,   124,
     383,   359,   388,   388,   385,   359,   122,   213,     1,   213,
     405,   299,   299,   123,   303,    16,    35,    43,   231,   233,
     248,   260,   304,   305,   309,   310,   301,     1,   103,   301,
     189,   123,   232,   233,   295,    33,    28,   106,   343,   421,
      42,   414,   314,   414,     1,    20,   121,   123,   120,   359,
      38,    86,   349,   313,    22,   320,   343,    97,   348,     1,
     119,   120,   224,   417,   409,   123,   123,   356,   359,    86,
     119,   119,   145,    22,     1,   121,   122,   102,   200,     4,
     199,   197,    20,    20,   143,   423,   359,   379,    33,   295,
     304,    33,   124,    33,    16,   122,   303,   304,   298,   321,
     359,   359,   334,   312,   313,   357,   332,   315,   316,   317,
       1,   332,   405,   371,   122,   122,     1,   422,   316,   359,
     346,   422,   221,     1,   221,     1,   189,   225,   226,     1,
     421,   421,   227,   228,   416,   227,   119,   291,    76,    56,
     146,   284,   198,     1,   198,   199,   405,   200,   122,   179,
     181,    12,    17,   177,   183,   185,   125,   383,   298,   310,
     307,   308,   405,   359,   124,     1,   258,   259,   337,   338,
     339,   356,   329,     1,    21,    37,   341,   316,    44,   327,
     122,   123,   422,   122,   123,     1,   119,   122,   222,   223,
     227,   268,   274,    16,    23,    25,    36,    39,    41,    54,
      69,    96,   120,   126,   127,   229,   230,   231,   232,   233,
     237,   238,   240,   241,   243,   244,   248,   260,   359,   412,
     420,   425,    99,   359,   359,   368,   311,   316,   316,   184,
     186,    58,   419,     1,   119,   125,   102,   308,     1,   121,
     123,   322,     1,   119,   419,     1,   102,    20,   359,   324,
      20,   352,   353,   354,   367,   424,   233,   226,     1,   226,
     227,    49,   261,   424,    73,    99,   106,   277,   278,   424,
      48,   278,   279,   124,   124,   247,   424,   299,   299,     1,
     189,   249,   250,   251,   252,   424,    33,   230,   232,   242,
     243,   248,   405,     1,   239,   405,   242,   248,    98,   242,
     244,   359,   120,   124,   235,   102,    55,   385,   119,   119,
     119,   119,   119,   119,   182,   312,   182,   187,   308,     1,
     308,    33,   405,   125,   259,     1,   259,   340,    14,    66,
     335,   336,   339,     1,   339,   356,     1,   356,   414,   328,
     357,   316,   122,   123,   121,   120,   278,    64,     1,   385,
       1,   280,   269,   424,     1,   231,   233,   237,   245,   246,
     246,    33,   298,    22,   123,    22,    18,     1,   119,   419,
     228,   122,     1,   121,   122,   102,     1,   236,   359,   359,
     359,   242,   272,   424,   312,    16,   233,   305,   306,   123,
      33,   414,    22,   414,   316,    20,   325,   415,   352,   354,
     359,   120,   262,   424,   359,   119,     1,   121,   125,   125,
     228,   228,   237,   253,   254,   405,   412,   252,     1,   252,
     405,     1,   405,   359,     1,   121,   122,   125,   119,   233,
     233,   316,   312,   415,   414,   415,   122,   123,   122,     1,
     233,     1,   263,   264,   424,    56,    76,   270,   273,   274,
     246,   246,    33,   278,    33,   123,   359,     1,   359,   273,
     415,   415,   316,   355,   367,   122,   122,    22,     9,    10,
      25,    36,    49,    53,    74,    86,   189,   265,   274,   368,
     359,   228,     1,   256,   257,   258,   233,   254,   415,   121,
     122,   405,   405,   405,   405,   359,   123,   119,    86,     1,
     119,   419,   123,   367,   299,   299,   299,   299,   228,   271,
     257,   257,   255,   336,   120,   295,   278,   359,   120,   249,
     298,   249,   122,   122,   419
d4632 1
a4632 1
  fprintf (yyoutput, ": ");
d4687 1
a4687 1
   to be completed by functions that call expandGLRStack before the
d4692 8
a4699 7
#if (! defined (YYSTACKEXPANDABLE) \
     && (! defined (__cplusplus) \
	 || (defined (YYLTYPE_IS_TRIVIAL) && YYLTYPE_IS_TRIVIAL \
	     && defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))
#define YYSTACKEXPANDABLE 1
#else
#define YYSTACKEXPANDABLE 0
d4702 1
a4702 2
/** State numbers, as in LALR(1) machine */
typedef int yyStateNum;
d4704 11
a4714 2
/** Rule numbers, as in LALR(1) machine */
typedef int yyRuleNum;
d4716 2
a4717 2
/** Grammar symbol */
typedef short int yySymbol;
d4719 66
a4784 2
/** Item references, as in LALR(1) machine */
typedef short int yyItemNum;
d4793 1
d4795 2
d4798 1
d4800 1
d4802 1
d4805 3
d4809 1
d4812 1
d4822 1
d4824 1
d4826 1
d4828 2
d4833 2
a4840 1
  int yyerrflag;
d4846 1
a4846 1
  jmp_buf yyexception_buffer;
d4849 1
a4849 1
  int yyspaceLeft;
a4854 1
static void yyinitGLRStack (yyGLRStack* yystack, size_t yysize);
a4855 1
static void yyfreeGLRStack (yyGLRStack* yystack);
d4857 2
d4860 1
a4860 1
yyFail (yyGLRStack* yystack, const char* yyformat, ...)
d4862 11
a4872 10
  yystack->yyerrflag = 1;
  if (yyformat != NULL)
    {
      char yymsg[256];
      va_list yyap;
      va_start (yyap, yyformat);
      vsprintf (yymsg, yyformat, yyap);
      yyerror (yymsg);
    }
  longjmp (yystack->yyexception_buffer, 1);
d4876 1
a4876 2
/** A printable representation of TOKEN.  Valid until next call to
 *  tokenName. */
d4891 1
a4891 1
static void yyfillin (yyGLRStackItem *, int, int) ATTRIBUTE_UNUSED;
d4912 1
a4912 1
     ATTRIBUTE_UNUSED;
d4932 1
a4932 1
	      YYLTYPE* yylocp,
d4936 2
a4937 1
  yybool yynormal ATTRIBUTE_UNUSED = (yystack->yysplitPoint == NULL);
d4956 1
a4956 1
  return yyerror ("syntax error: cannot back up"),	     \
d4965 1
d4970 1
a4970 1
#line 245 "parse.y"
d4975 1
a4975 1
#line 247 "parse.y"
d4986 1
a4986 1
#line 258 "parse.y"
d4991 1
a4991 1
#line 260 "parse.y"
d4996 1
a4996 1
#line 262 "parse.y"
d5001 1
a5001 1
#line 264 "parse.y"
d5006 2
a5007 2
#line 269 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE); ;}
d5011 2
a5012 2
#line 271 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5016 2
a5017 2
#line 273 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5020 3
a5022 3
  case 11:
#line 278 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
d5025 7
a5031 3
  case 12:
#line 280 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d5035 2
a5036 2
#line 290 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
d5040 5
a5044 7
#line 292 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 17:
#line 296 "parse.y"
    { check_forward_decls (0); ;}
d5048 2
a5049 7
#line 298 "parse.y"
    { ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
    break;

  case 19:
#line 300 "parse.y"
    { ((*yyvalp).itype) = od_label; ;}
d5053 2
a5054 2
#line 302 "parse.y"
    { ((*yyvalp).itype) = od_routine; ;}
d5058 2
a5059 7
#line 307 "parse.y"
    {
#ifndef EGCS97
        pop_obstacks ();
#endif
        ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype);
      ;}
d5063 2
a5064 2
#line 317 "parse.y"
    { ((*yyvalp).itype) = od_const; ;}
d5068 2
a5069 2
#line 319 "parse.y"
    { current_type_list = build_tree_list (NULL_TREE, NULL_TREE); ;}
d5073 2
a5074 2
#line 321 "parse.y"
    { declare_types (); ((*yyvalp).itype) = od_type; ;}
d5078 2
a5079 7
#line 323 "parse.y"
    { ((*yyvalp).itype) = od_var; ;}
    break;

  case 26:
#line 328 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_interface); initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), 1); ;}
d5083 2
a5084 2
#line 330 "parse.y"
    { start_unit_implementation (); ;}
d5088 1
a5088 1
#line 332 "parse.y"
d5092 3
a5094 3
  case 31:
#line 336 "parse.y"
    { ((*yyvalp).ttype) = current_module->name; finalize_module (1); ;}
d5098 2
a5099 6
#line 338 "parse.y"
    {
        if ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype) && current_module->name != (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))
          error ("implementation of module `%s' following interface of module `%s'",
                 IDENTIFIER_NAME (current_module->name), IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)));
      ;}
d5102 3
a5104 11
  case 33:
#line 344 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 2); ;}
    break;

  case 34:
#line 346 "parse.y"
    {
        if (co->interface_only)
          exit_compilation ();
      ;}
d5108 2
a5109 2
#line 352 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 4); ;}
d5113 2
a5114 7
#line 358 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_interface); ;}
    break;

  case 39:
#line 360 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 2); ;}
d5118 2
a5119 2
#line 362 "parse.y"
    { clear_forward_decls ();  /* don't complain in poplevel */ ;}
d5122 3
a5124 3
  case 41:
#line 367 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_export); start_module_interface (); ;}
d5127 3
a5129 3
  case 42:
#line 369 "parse.y"
    { create_gpi_files (); ;}
d5132 3
a5134 3
  case 43:
#line 374 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), NULL_TREE, 3); ;}
d5137 3
a5139 3
  case 45:
#line 379 "parse.y"
    { chk_dialect ("units without `implementation' part are", U_M_PASCAL); ;}
d5142 3
a5144 3
  case 47:
#line 385 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_module); ;}
d5147 3
a5149 3
  case 48:
#line 390 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) : NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d5153 2
a5154 2
#line 400 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
d5158 2
a5159 2
#line 402 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d5162 3
a5164 3
  case 55:
#line 409 "parse.y"
    { ((*yyvalp).itype) = od_routine; ;}
d5167 3
a5169 8
  case 56:
#line 414 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
    break;

  case 57:
#line 416 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d5173 2
a5174 2
#line 421 "parse.y"
    { check_forward_decls (0); ;}
d5178 2
a5179 2
#line 423 "parse.y"
    { ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
d5183 2
a5184 2
#line 425 "parse.y"
    { ((*yyvalp).itype) = od_routine; ;}
d5188 2
a5189 2
#line 429 "parse.y"
    { current_module->implementation = 1; ;}
d5193 17
a5209 2
#line 431 "parse.y"
    { check_forward_decls (1); ;}
d5213 2
a5214 2
#line 444 "parse.y"
    { chk_dialect_name ("to begin do", E_O_PASCAL); start_constructor (0); ;}
d5218 2
a5219 2
#line 446 "parse.y"
    { finish_constructor (); ;}
d5223 2
a5224 2
#line 451 "parse.y"
    { chk_dialect_name ("to end do", E_O_PASCAL); start_destructor (); ;}
d5228 2
a5229 2
#line 453 "parse.y"
    { finish_destructor (); ;}
d5233 2
a5234 2
#line 458 "parse.y"
    { finish_constructor (); ;}
d5238 2
a5239 2
#line 463 "parse.y"
    { start_constructor (0); ;}
d5242 3
a5244 3
  case 76:
#line 469 "parse.y"
    { start_constructor (0); ;}
d5247 3
a5249 3
  case 79:
#line 473 "parse.y"
    { start_destructor (); ;}
d5252 3
a5254 18
  case 80:
#line 475 "parse.y"
    { finish_destructor (); ;}
    break;

  case 83:
#line 482 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 84:
#line 487 "parse.y"
    { ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 85:
#line 492 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5258 2
a5259 2
#line 494 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d5263 2
a5264 6
#line 496 "parse.y"
    {
        ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype));
        error ("comma missing after `%s'", IDENTIFIER_NAME (TREE_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))));
        yyerrok;
      ;}
d5267 3
a5269 3
  case 88:
#line 502 "parse.y"
    { error ("extra comma following identifier list"); ;}
d5273 2
a5274 2
#line 508 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5278 2
a5279 2
#line 510 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d5282 3
a5284 3
  case 93:
#line 516 "parse.y"
    { yyerrok; ;}
d5287 3
a5289 3
  case 94:
#line 518 "parse.y"
    { error ("module specifications need an export part"); ;}
d5293 2
a5294 2
#line 520 "parse.y"
    { warning ("missing semicolon"); yyerrok; ;}
d5298 2
a5299 2
#line 522 "parse.y"
    { error ("extra semicolon"); ;}
d5303 2
a5304 2
#line 527 "parse.y"
    { export_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5307 3
a5309 3
  case 98:
#line 532 "parse.y"
    { error ("missing `='"); ;}
d5312 3
a5314 3
  case 100:
#line 538 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5318 2
a5319 2
#line 541 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5323 7
a5329 2
#line 546 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_all); ((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE); ;}
d5333 2
a5334 2
#line 552 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5338 2
a5339 2
#line 554 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5343 2
a5344 2
#line 556 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5347 8
a5354 3
  case 108:
#line 558 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5357 3
a5359 3
  case 109:
#line 563 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5362 3
a5364 3
  case 110:
#line 565 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5367 3
a5369 3
  case 111:
#line 567 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); TREE_READONLY (((*yyvalp).ttype)) = 1; ;}
d5372 3
a5374 3
  case 113:
#line 573 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_id ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5377 3
a5379 3
  case 115:
#line 579 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5382 3
a5384 3
  case 116:
#line 585 "parse.y"
    { do_extra_import (); ;}
d5387 3
a5389 3
  case 122:
#line 601 "parse.y"
    { warning ("missing semicolon"); yyerrok; ;}
d5393 12
a5404 2
#line 606 "parse.y"
    { import_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype) ? IMPORT_QUALIFIED : IMPORT_ISO, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5408 12
a5419 2
#line 612 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_qualified); ;}
d5423 2
a5424 2
#line 618 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5428 2
a5429 2
#line 620 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5433 12
a5444 2
#line 625 "parse.y"
    { ((*yyvalp).itype) = od_uses; ;}
d5448 2
a5449 2
#line 632 "parse.y"
    { warning ("missing comma"); yyerrok; ;}
d5453 2
a5454 2
#line 637 "parse.y"
    { import_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, IMPORT_USES, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5457 3
a5459 3
  case 135:
#line 643 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); chk_dialect ("file name specification with `in' is", BORLAND_DELPHI); ;}
d5463 7
a5469 2
#line 649 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5472 6
a5477 3
  case 138:
#line 651 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5480 14
a5493 3
  case 139:
#line 653 "parse.y"
    { error ("missing comma"); ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5496 13
a5508 3
  case 140:
#line 655 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5511 3
a5513 3
  case 141:
#line 660 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5516 3
a5518 3
  case 142:
#line 667 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5521 3
a5523 3
  case 143:
#line 669 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5526 3
a5528 3
  case 144:
#line 671 "parse.y"
    { error ("non-label in label_list"); ;}
d5531 3
a5533 3
  case 145:
#line 673 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d5536 3
a5538 3
  case 146:
#line 675 "parse.y"
    { error ("extra comma"); ;}
d5541 3
a5543 3
  case 149:
#line 682 "parse.y"
    { chk_dialect ("non-numeric labels are", B_D_M_PASCAL); ;}
d5546 3
a5548 3
  case 152:
#line 694 "parse.y"
    { ((*yyvalp).ttype) = numeric_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5551 3
a5553 3
  case 156:
#line 707 "parse.y"
    { declare_constant ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5556 2
a5557 2
  case 157:
#line 710 "parse.y"
d5559 3
a5561 2
        lex_const_equal = -1;
        declare_variables (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)), VQ_BP_CONST, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d5565 7
a5571 2
  case 159:
#line 721 "parse.y"
d5575 2
a5576 2
  case 161:
#line 724 "parse.y"
d5580 2
a5581 2
  case 162:
#line 726 "parse.y"
d5585 2
a5586 2
  case 164:
#line 732 "parse.y"
d5598 2
a5599 2
  case 165:
#line 742 "parse.y"
d5607 2
a5608 2
  case 166:
#line 748 "parse.y"
d5616 2
a5617 2
  case 167:
#line 754 "parse.y"
d5621 13
a5633 3
  case 168:
#line 756 "parse.y"
    { ((*yyvalp).ttype) = start_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d5636 2
a5637 2
  case 169:
#line 758 "parse.y"
d5645 30
a5674 2
  case 170:
#line 767 "parse.y"
d5678 2
a5679 2
  case 171:
#line 769 "parse.y"
d5683 2
a5684 2
  case 173:
#line 775 "parse.y"
d5688 2
a5689 2
  case 174:
#line 777 "parse.y"
d5693 2
a5694 2
  case 175:
#line 779 "parse.y"
d5698 2
a5699 2
  case 177:
#line 785 "parse.y"
d5703 2
a5704 2
  case 179:
#line 791 "parse.y"
d5708 12
a5719 2
  case 180:
#line 798 "parse.y"
d5728 2
a5729 2
  case 182:
#line 809 "parse.y"
d5733 2
a5734 2
  case 184:
#line 815 "parse.y"
d5738 3
a5740 3
  case 185:
#line 817 "parse.y"
    { ((*yyvalp).ttype) = build_discriminated_schema_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1); ;}
d5743 2
a5744 2
  case 189:
#line 822 "parse.y"
d5748 2
a5749 2
  case 191:
#line 825 "parse.y"
d5753 3
a5755 3
  case 192:
#line 830 "parse.y"
    { defining_packed_type += ((*yyvalp).itype) = !co->ignore_packed;  /* can be nested */ ;}
d5758 2
a5759 2
  case 193:
#line 835 "parse.y"
d5761 2
a5762 6
        if (PASCAL_TYPE_UNDISCRIMINATED_STRING (((*yyvalp).ttype)))
          {
            if (!(co->pascal_dialect & B_D_M_PASCAL))
              error_or_warning (co->pascal_dialect & E_O_PASCAL, "missing string capacity -- assuming 255");
            ((*yyvalp).ttype) = string255_type_node;
          }
d5766 3
a5768 12
  case 194:
#line 847 "parse.y"
    {
        tree decl = lookup_name ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
        ((*yyvalp).ttype) = error_mark_node;
        if (!decl)
          error ("unknown identifier `%s'", IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)));
        else if (TREE_CODE (decl) != TYPE_DECL)
          error ("type name expected, `%s' given", IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)));
        else
          ((*yyvalp).ttype) = TREE_TYPE (decl);
      ;}
d5771 3
a5773 3
  case 196:
#line 862 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_id ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5776 3
a5778 3
  case 197:
#line 867 "parse.y"
    { chk_dialect ("schema/string discriminants are", E_O_M_PASCAL); ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5781 3
a5783 6
  case 198:
#line 869 "parse.y"
    {
        chk_dialect ("string capacity in brackets is", U_B_D_M_PASCAL);
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), 0)));
      ;}
d5786 3
a5788 6
  case 199:
#line 877 "parse.y"
    {
        /* This expression might be a discriminant of another schema. */
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0)));
      ;}
d5791 3
a5793 6
  case 200:
#line 882 "parse.y"
    {
        ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0))));
        yyerrok;
      ;}
d5796 3
a5798 3
  case 201:
#line 887 "parse.y"
    { error ("missing expression"); ((*yyvalp).ttype) = NULL_TREE; ;}
d5801 3
a5803 42
  case 202:
#line 889 "parse.y"
    {
        error ("missing comma");
        ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0))));
        yyerrok;
      ;}
    break;

  case 203:
#line 895 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 206:
#line 907 "parse.y"
    { ((*yyvalp).ttype) = build_enum_type (nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 207:
#line 909 "parse.y"
    { ((*yyvalp).ttype) = error_mark_node; ;}
    break;

  case 208:
#line 914 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 209:
#line 916 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 210:
#line 918 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 211:
#line 920 "parse.y"
    { error ("extra comma"); ;}
d5807 2
a5808 2
#line 926 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_subrange_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d5812 2
a5813 16
#line 928 "parse.y"
    {
        defining_packed_type -= (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype);
        chk_dialect ("packed subrange types are", B_D_PASCAL);
        ((*yyvalp).ttype) = build_pascal_subrange_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype));
      ;}
    break;

  case 215:
#line 938 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 216:
#line 940 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5817 2
a5818 2
#line 942 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5821 3
a5823 6
  case 218:
#line 944 "parse.y"
    {
        chk_dialect ("pointers to `const' types are", GNU_PASCAL);
        ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type (p_build_type_variant ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1, TYPE_VOLATILE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))));
      ;}
d5826 3
a5828 3
  case 219:
#line 952 "parse.y"
    { ((*yyvalp).ttype) = get_pointer_domain_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5831 3
a5833 7
  case 220:
#line 954 "parse.y"
    {
        chk_dialect ("pointers to routines are", GNU_PASCAL);
        assert (EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) || (TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE && TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))));
        ((*yyvalp).ttype) = TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
      ;}
d5837 2
a5838 2
#line 966 "parse.y"
    { ((*yyvalp).ttype) = build_procedural_type (void_type_node, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5842 2
a5843 2
#line 968 "parse.y"
    { ((*yyvalp).ttype) = build_procedural_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5847 7
a5853 2
#line 973 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_array_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype)); ;}
d5857 2
a5858 2
#line 976 "parse.y"
    { ((*yyvalp).ttype) = build_file_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0); ;}
d5862 2
a5863 2
#line 978 "parse.y"
    { ((*yyvalp).ttype) = build_set_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5866 3
a5868 8
  case 228:
#line 980 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 229:
#line 982 "parse.y"
    { ((*yyvalp).ttype) = build_record (NULL_TREE, NULL_TREE, NULL_TREE); ;}
d5872 2
a5873 2
#line 989 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5877 2
a5878 7
#line 991 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 234:
#line 993 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (error_mark_node, error_mark_node); ;}
d5882 2
a5883 2
#line 995 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (error_mark_node, error_mark_node); ;}
d5887 2
a5888 2
#line 1000 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5892 7
a5898 2
#line 1002 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5902 2
a5903 2
#line 1008 "parse.y"
    { ((*yyvalp).ttype) = TREE_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5907 2
a5908 2
#line 1013 "parse.y"
    { chk_dialect ("untyped files are", U_B_D_M_PASCAL); ((*yyvalp).ttype) = untyped_file_type_node; ;}
d5912 7
a5918 2
#line 1018 "parse.y"
    { ((*yyvalp).ttype) = build_record (NULL_TREE, NULL_TREE, NULL_TREE); ;}
d5921 3
a5923 3
  case 242:
#line 1020 "parse.y"
    { ((*yyvalp).ttype) = build_record ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE); ;}
d5926 3
a5928 3
  case 243:
#line 1022 "parse.y"
    { ((*yyvalp).ttype) = build_record ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5932 2
a5933 2
#line 1033 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5937 2
a5938 7
#line 1035 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
    break;

  case 249:
#line 1037 "parse.y"
    { error ("extra semicolon"); ;}
d5942 2
a5943 2
#line 1043 "parse.y"
    { ((*yyvalp).ttype) = build_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5947 2
a5948 2
#line 1048 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_field ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5952 2
a5953 2
#line 1050 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_field ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5957 2
a5958 2
#line 1052 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d5962 2
a5963 2
#line 1054 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d5967 2
a5968 2
#line 1059 "parse.y"
    { chk_dialect ("type denoters (no identifiers) as variant tag type are", U_B_D_M_PASCAL); ;}
d5971 3
a5973 3
  case 257:
#line 1064 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5976 7
a5982 3
  case 258:
#line 1066 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, build_field (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))); ;}
d5986 2
a5987 2
#line 1072 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5991 2
a5992 2
#line 1074 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
d5996 7
a6002 2
#line 1076 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d6006 2
a6007 2
#line 1082 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), build_field (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d6010 7
a6016 3
  case 266:
#line 1088 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6020 2
a6021 2
#line 1090 "parse.y"
    { error ("extra comma"); ;}
d6025 2
a6026 2
#line 1092 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d6030 2
a6031 2
#line 1098 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0)); ;}
d6035 1
a6035 33
#line 1100 "parse.y"
    {
        chk_dialect ("`case' ranges are", NOT_CLASSIC_PASCAL);
        ((*yyvalp).ttype) = build_tree_list (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0), string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0));
      ;}
    break;

  case 272:
#line 1105 "parse.y"
    {
        ((*yyvalp).ttype) = build_tree_list (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0), string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0));
        error ("missing `..'");
        yyerrok;
      ;}
    break;

  case 273:
#line 1111 "parse.y"
    { error ("extra `..'"); ((*yyvalp).ttype) = build_tree_list (NULL_TREE, string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0)); ;}
    break;

  case 274:
#line 1116 "parse.y"
    { ((*yyvalp).ttype) = build_type_of ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 278:
#line 1129 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 279:
#line 1131 "parse.y"
d6039 2
a6040 2
  case 281:
#line 1137 "parse.y"
d6044 2
a6045 2
  case 282:
#line 1139 "parse.y"
d6049 2
a6050 2
  case 284:
#line 1145 "parse.y"
d6054 2
a6055 2
  case 285:
#line 1147 "parse.y"
d6059 2
a6060 2
  case 286:
#line 1152 "parse.y"
d6064 2
a6065 2
  case 287:
#line 1154 "parse.y"
d6069 2
a6070 2
  case 288:
#line 1156 "parse.y"
d6074 2
a6075 2
  case 289:
#line 1158 "parse.y"
d6079 2
a6080 2
  case 290:
#line 1160 "parse.y"
d6084 2
a6085 2
  case 291:
#line 1162 "parse.y"
d6089 2
a6090 2
  case 292:
#line 1164 "parse.y"
d6094 2
a6095 2
  case 293:
#line 1166 "parse.y"
d6099 3
a6101 14
  case 297:
#line 1179 "parse.y"
    {
        tree t, ids = ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype));
        if ((TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE || TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE)
            && TREE_CODE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) == FUNCTION_TYPE)
          TREE_PRIVATE (ids) = !!allow_function_calls (0);  /* kludge */
        /* With `begin var Result: Integer; Result := ...' where `Result'
           is a built-in identifier, parser look-ahead would already get
           its special meaning before we get to declaring the variables.
           So mark the identifiers. (fjf791.pas) */
        for (t = ids; t; t = TREE_CHAIN (t))
          PASCAL_PENDING_DECLARATION (TREE_VALUE (t)) = 1;
      ;}
d6104 3
a6106 13
  case 298:
#line 1192 "parse.y"
    {
        tree t, ids = (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype);
        for (t = ids; t; t = TREE_CHAIN (t))
          PASCAL_PENDING_DECLARATION (TREE_VALUE (t)) = 0;
        lex_const_equal = -1;
        ((*yyvalp).ttype) = declare_variables (ids, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
        if ((TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE || TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE)
            && TREE_CODE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype))) == FUNCTION_TYPE)
          allow_function_calls (TREE_PRIVATE (ids));
        yyerrok;
      ;}
d6109 3
a6111 3
  case 299:
#line 1204 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; lex_const_equal = -1; ;}
d6114 3
a6116 3
  case 301:
#line 1210 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6119 2
a6120 67
  case 303:
#line 1216 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 304:
#line 1218 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_name); ;}
    break;

  case 305:
#line 1220 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 307:
#line 1226 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 308:
#line 1231 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 309:
#line 1233 "parse.y"
    { ((*yyvalp).ttype) = TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 310:
#line 1238 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 312:
#line 1244 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 314:
#line 1250 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 315:
#line 1252 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 316:
#line 1254 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 317:
#line 1256 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 318:
#line 1258 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 319:
#line 1262 "parse.y"
d6124 2
a6125 2
  case 320:
#line 1264 "parse.y"
d6129 2
a6130 2
  case 321:
#line 1266 "parse.y"
d6134 2
a6135 31
  case 323:
#line 1272 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 324:
#line 1274 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 326:
#line 1280 "parse.y"
    { ((*yyvalp).itype) = allow_function_calls (0); lex_const_equal = -1; ;}
    break;

  case 327:
#line 1282 "parse.y"
    {
        allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype));
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
        PASCAL_ABSOLUTE_CLAUSE (((*yyvalp).ttype)) = 1;
      ;}
    break;

  case 328:
#line 1288 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 329:
#line 1295 "parse.y"
d6139 2
a6140 2
  case 330:
#line 1306 "parse.y"
d6144 2
a6145 2
  case 331:
#line 1308 "parse.y"
d6149 2
a6150 2
  case 332:
#line 1311 "parse.y"
d6157 3
a6159 6
  case 333:
#line 1316 "parse.y"
    {
        finish_routine ();
        restore_identifiers ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype));
      ;}
d6162 2
a6163 2
  case 336:
#line 1329 "parse.y"
d6167 2
a6168 2
  case 337:
#line 1331 "parse.y"
d6172 2
a6173 2
  case 338:
#line 1333 "parse.y"
d6177 2
a6178 2
  case 339:
#line 1343 "parse.y"
d6182 2
a6183 2
  case 340:
#line 1345 "parse.y"
d6187 2
a6188 2
  case 341:
#line 1347 "parse.y"
d6192 2
a6193 2
  case 342:
#line 1349 "parse.y"
d6197 2
a6198 2
  case 345:
#line 1359 "parse.y"
d6202 2
a6203 2
  case 346:
#line 1364 "parse.y"
d6207 2
a6208 2
  case 347:
#line 1366 "parse.y"
d6212 2
a6213 2
  case 348:
#line 1368 "parse.y"
d6217 2
a6218 2
  case 349:
#line 1370 "parse.y"
d6222 2
a6223 2
  case 350:
#line 1372 "parse.y"
d6227 2
a6228 2
  case 351:
#line 1374 "parse.y"
d6232 2
a6233 2
  case 352:
#line 1376 "parse.y"
d6237 2
a6238 2
  case 353:
#line 1378 "parse.y"
d6242 2
a6243 2
  case 354:
#line 1380 "parse.y"
d6247 2
a6248 2
  case 356:
#line 1386 "parse.y"
d6252 18
a6269 6
  case 357:
#line 1388 "parse.y"
    {
        if (co->warn_near_far)
          warning ("`%s' directive ignored because of flat memory model", IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)));
      ;}
d6272 3
a6274 3
  case 363:
#line 1407 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); chk_dialect ("function result variable specifications are", E_O_PASCAL); ;}
d6277 3
a6279 3
  case 365:
#line 1413 "parse.y"
    { chk_dialect ("function result variables without `=' are", GNU_PASCAL); ;}
d6282 3
a6284 3
  case 367:
#line 1419 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); chk_dialect ("operator result variables with `=' are", GNU_PASCAL); ;}
d6287 3
a6289 3
  case 368:
#line 1421 "parse.y"
    { error ("missing operator result variable"); ;}
d6292 3
a6294 3
  case 369:
#line 1426 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d6297 3
a6299 3
  case 370:
#line 1428 "parse.y"
    { ((*yyvalp).ttype) = check_result_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6302 3
a6304 6
  case 373:
#line 1435 "parse.y"
    {
        chk_dialect ("empty parentheses are", BORLAND_DELPHI);
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, void_type_node);
      ;}
d6307 2
a6308 2
  case 374:
#line 1440 "parse.y"
d6312 2
a6313 2
  case 375:
#line 1442 "parse.y"
d6317 2
a6318 2
  case 376:
#line 1444 "parse.y"
d6322 2
a6323 2
  case 377:
#line 1446 "parse.y"
d6327 2
a6328 2
  case 379:
#line 1452 "parse.y"
d6332 2
a6333 2
  case 380:
#line 1454 "parse.y"
d6337 2
a6338 2
  case 382:
#line 1460 "parse.y"
d6342 2
a6343 2
  case 383:
#line 1462 "parse.y"
d6347 2
a6348 2
  case 384:
#line 1464 "parse.y"
d6352 2
a6353 2
  case 385:
#line 1466 "parse.y"
d6357 2
a6358 2
  case 386:
#line 1468 "parse.y"
d6362 2
a6363 2
  case 387:
#line 1470 "parse.y"
d6367 22
a6388 2
  case 390:
#line 1480 "parse.y"
d6392 2
a6393 2
  case 391:
#line 1482 "parse.y"
d6397 7
a6403 2
  case 396:
#line 1494 "parse.y"
d6407 2
a6408 2
  case 397:
#line 1496 "parse.y"
d6416 2
a6417 2
  case 401:
#line 1511 "parse.y"
d6421 2
a6422 2
  case 402:
#line 1513 "parse.y"
d6426 3
a6428 6
  case 404:
#line 1519 "parse.y"
    {
        ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype));
        TREE_TYPE (((*yyvalp).ttype)) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype);
      ;}
d6431 3
a6433 6
  case 405:
#line 1527 "parse.y"
    {
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE);
        TREE_TYPE (((*yyvalp).ttype)) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype);
      ;}
d6436 2
a6437 2
  case 408:
#line 1542 "parse.y"
d6441 2
a6442 2
  case 410:
#line 1548 "parse.y"
d6446 8
a6453 3
  case 413:
#line 1555 "parse.y"
    { chk_dialect ("variable declarations in the statement part are", GNU_PASCAL); un_initialize_block ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0, 0); ;}
d6456 2
a6457 2
  case 416:
#line 1565 "parse.y"
d6461 2
a6462 2
  case 417:
#line 1567 "parse.y"
d6466 12
a6477 2
  case 422:
#line 1582 "parse.y"
d6481 2
a6482 2
  case 423:
#line 1584 "parse.y"
d6486 2
a6487 2
  case 424:
#line 1586 "parse.y"
d6491 2
a6492 2
  case 425:
#line 1588 "parse.y"
d6496 2
a6497 2
  case 426:
#line 1590 "parse.y"
d6501 2
a6502 2
  case 427:
#line 1592 "parse.y"
d6506 3
a6508 3
  case 428:
#line 1594 "parse.y"
    { build_predef_call (p_Halt, NULL_TREE); ;}
d6511 3
a6513 3
  case 429:
#line 1596 "parse.y"
    { build_exit_statement ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6516 3
a6518 3
  case 431:
#line 1599 "parse.y"
    { restore_identifiers ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6521 2
a6522 2
  case 432:
#line 1601 "parse.y"
d6526 2
a6527 2
  case 433:
#line 1603 "parse.y"
d6531 2
a6532 2
  case 434:
#line 1605 "parse.y"
d6534 1
a6534 1
        if (!(((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype) && extra_warnings)
d6540 3
a6542 6
  case 435:
#line 1611 "parse.y"
    {
        ((*yyvalp).ttype) = current_case_expression;
        current_case_expression = pascal_expand_start_case ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
      ;}
d6545 2
a6546 2
  case 436:
#line 1616 "parse.y"
d6548 6
a6553 3
        tree duplicate;
        if (!EM (current_case_expression))
          assert (!pushcase (NULL_TREE, 0, build_decl (LABEL_DECL, NULL_TREE, NULL_TREE), &duplicate));
d6557 2
a6558 2
  case 437:
#line 1622 "parse.y"
d6563 1
a6563 1
        if (!EM (current_case_expression))
d6565 1
a6565 1
        current_case_expression = (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype);
d6570 95
d6666 2
a6667 2
#line 1632 "parse.y"
    { emit_nop (); expand_start_loop_continue_elsewhere (1); ;}
d6671 16
a6686 7
#line 1634 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc)); expand_loop_continue_here (); ;}
    break;

  case 440:
#line 1636 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc)); expand_exit_loop_if_false (0, build_pascal_unary_op (TRUTH_NOT_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d6690 2
a6691 2
#line 1638 "parse.y"
    { expand_end_loop (); ;}
d6695 2
a6696 7
#line 1640 "parse.y"
    { expand_start_loop (1); ;}
    break;

  case 443:
#line 1642 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc)); expand_exit_loop_if_false (0, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6700 2
a6701 2
#line 1644 "parse.y"
    { expand_end_loop (); ;}
d6705 2
a6706 7
#line 1646 "parse.y"
    { ((*yyvalp).ttype) = start_for_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code)); ;}
    break;

  case 446:
#line 1648 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yyloc)); finish_for_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.code)); ;}
d6710 2
a6711 2
#line 1650 "parse.y"
    { ((*yyvalp).ttype) = start_for_set_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6715 2
a6716 2
#line 1652 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yyloc)); finish_for_set_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)); ;}
d6720 2
a6721 2
#line 1654 "parse.y"
    { pascal_expand_goto ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6725 2
a6726 2
#line 1659 "parse.y"
    { set_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6729 3
a6731 3
  case 452:
#line 1665 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6734 3
a6736 3
  case 453:
#line 1667 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d6740 2
a6741 2
#line 1669 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d6745 1
a6745 1
#line 1671 "parse.y"
d6750 2
a6751 7
#line 1676 "parse.y"
    { ((*yyvalp).ttype) = pascal_shadow_record_fields (undo_schema_dereference ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)), NULL_TREE); ;}
    break;

  case 457:
#line 1678 "parse.y"
    { ((*yyvalp).ttype) = pascal_shadow_record_fields (undo_schema_dereference ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6755 2
a6756 2
#line 1683 "parse.y"
    { expand_start_cond ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), 0); ;}
d6760 2
a6761 5
#line 1685 "parse.y"
    {
        if (!(((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype) && extra_warnings)
          warning ("empty statement after `then'");
      ;}
d6765 2
a6766 8
#line 1693 "parse.y"
    {
        /* Create an implicit `otherwise' (in the rule above) to avoid warnings
           about unhandled cases. In ISO Pascal, this is a run-time error. */
        if (co->case_value_checking)
          build_predef_call (p_CaseNoMatchError, NULL_TREE);
        ((*yyvalp).itype) = 0;
      ;}
d6770 2
a6771 2
#line 1701 "parse.y"
    { ((*yyvalp).itype) = 1; ;}
d6775 2
a6776 2
#line 1706 "parse.y"
    { chk_dialect ("`else' in `case' statements is", B_D_M_PASCAL); ;}
d6779 3
a6781 3
  case 464:
#line 1712 "parse.y"
    { ((*yyvalp).itype) = 0; ;}
d6784 3
a6786 3
  case 465:
#line 1714 "parse.y"
    { ((*yyvalp).itype) = 1; ;}
d6789 3
a6791 3
  case 467:
#line 1720 "parse.y"
    { yyerrok; ;}
d6795 2
a6796 2
#line 1722 "parse.y"
    { error ("case element expected"); ;}
d6800 2
a6801 2
#line 1724 "parse.y"
    { error ("missing semicolon"); yyerrok; ;}
d6805 2
a6806 2
#line 1726 "parse.y"
    { error ("extra semicolon"); ;}
d6810 2
a6811 2
#line 1731 "parse.y"
    { pascal_pushcase ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6815 2
a6816 2
#line 1733 "parse.y"
    { expand_exit_something (); ;}
d6820 2
a6821 2
#line 1738 "parse.y"
    { ((*yyvalp).code) = LE_EXPR; ;}
d6825 2
a6826 2
#line 1740 "parse.y"
    { ((*yyvalp).code) = GE_EXPR; ;}
d6830 2
a6831 2
#line 1742 "parse.y"
    { error ("missing `to' or `downto'"); ((*yyvalp).code) = LE_EXPR; ;}
d6834 3
a6836 3
  case 477:
#line 1748 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_lvalue_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6839 3
a6841 3
  case 479:
#line 1754 "parse.y"
    { error ("using `=' instead of `:=' in assignment"); ;}
d6844 3
a6846 3
  case 480:
#line 1759 "parse.y"
    { build_predef_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6849 3
a6851 3
  case 481:
#line 1761 "parse.y"
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))->symbol, NULL_TREE); ;}
d6854 3
a6856 8
  case 482:
#line 1763 "parse.y"
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype))->symbol, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 483:
#line 1765 "parse.y"
    { build_predef_call (p_Dispose, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d6860 2
a6861 8
#line 1767 "parse.y"
    {
        current_structor_object_type = NULL_TREE;
        if (TREE_CODE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype))) == POINTER_TYPE && PASCAL_TYPE_OBJECT (TREE_TYPE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype)))))
          error ("invalid arguments to object `Dispose'");
        else
          build_predef_call (p_Dispose, tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)));
      ;}
d6865 2
a6866 2
#line 1775 "parse.y"
    { build_predef_call (p_Dispose, tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, call_method ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))))); ;}
d6870 2
a6871 2
#line 1777 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE, NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype)); ;}
d6875 2
a6876 2
#line 1779 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.itype)); ;}
d6880 10
a6889 2
#line 1781 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.itype)); ;}
d6893 2
a6894 2
#line 1783 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-9)].yystate.yysemantics.yysval.itype)); ;}
d6898 2
a6899 2
#line 1788 "parse.y"
    { ((*yyvalp).ttype) = set_structor_object ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6903 2
a6904 2
#line 1793 "parse.y"
    { ((*yyvalp).itype) = allow_function_calls (0); ;}
d6908 2
a6909 2
#line 1795 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype)); yyerrok; ;}
d6913 2
a6914 2
#line 1800 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6918 2
a6919 2
#line 1802 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); yyerrok; ;}
d6923 2
a6924 2
#line 1804 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, error_mark_node); ;}
d6927 3
a6929 3
  case 497:
#line 1806 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, error_mark_node); error ("extra comma"); ;}
d6933 2
a6934 2
#line 1812 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6938 2
a6939 2
#line 1814 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d6943 2
a6944 7
#line 1816 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 502:
#line 1822 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6948 2
a6949 2
#line 1824 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6953 2
a6954 2
#line 1826 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)); ;}
d6958 2
a6959 2
#line 1831 "parse.y"
    { ((*yyvalp).itype) = 0; ;}
d6963 7
a6969 2
#line 1833 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_volatile); ((*yyvalp).itype) = 1; ;}
d6972 3
a6974 3
  case 510:
#line 1844 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6977 3
a6979 3
  case 511:
#line 1849 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6983 16
a6998 1
#line 1854 "parse.y"
d7002 8
a7009 3
  case 513:
#line 1856 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d7012 2
a7013 2
  case 514:
#line 1863 "parse.y"
d7015 1
a7015 1
        if (PEDANTIC (NOT_CLASSIC_PASCAL))
d7017 3
a7019 8
            tree t = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype);
            STRIP_TYPE_NOPS (t);
            if (TREE_CODE (t) == CONVERT_EXPR || TREE_CODE (t) == NEGATE_EXPR)
              t = TREE_OPERAND (t, 0);
            if (last_parenthesized_expression == (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)
                || last_parenthesized_expression == t
                || !(TREE_CODE_CLASS (TREE_CODE (t)) == 'c' && PASCAL_TREE_FRESH_CST (t)))
              error ("ISO 7185 Pascal allows only simple constants");
d7024 2
a7025 2
  case 515:
#line 1880 "parse.y"
d7027 8
a7034 5
        if (!EM (TREE_TYPE (((*yyvalp).ttype))) && TREE_CODE (TREE_TYPE (((*yyvalp).ttype))) != BOOLEAN_TYPE)
          {
            error ("condition must be of Boolean type");
            ((*yyvalp).ttype) = error_mark_node;
          }
d7038 3
a7040 3
  case 516:
#line 1891 "parse.y"
    { ((*yyvalp).ttype) = iso_no_parentheses ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7043 3
a7045 3
  case 517:
#line 1896 "parse.y"
    { ((*yyvalp).ttype) = fold (parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d7048 3
a7050 3
  case 518:
#line 1898 "parse.y"
    { ((*yyvalp).ttype) = fold ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7053 3
a7055 3
  case 520:
#line 1904 "parse.y"
    { ((*yyvalp).ttype) = set_exp_original_code (build_pascal_unary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code)); ;}
d7058 3
a7060 3
  case 521:
#line 1906 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7063 3
a7065 3
  case 522:
#line 1908 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1); ;}
d7068 3
a7070 3
  case 523:
#line 1910 "parse.y"
    { ((*yyvalp).ttype) = start_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7073 3
a7075 3
  case 524:
#line 1912 "parse.y"
    { if ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) LOCATION_NOTE (COPYLOC ((*yylocp), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc))); ((*yyvalp).ttype) = finish_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7078 3
a7080 3
  case 526:
#line 1918 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7083 3
a7085 3
  case 527:
#line 1920 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1); ;}
d7088 3
a7090 3
  case 528:
#line 1922 "parse.y"
    { ((*yyvalp).ttype) = start_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7093 3
a7095 3
  case 529:
#line 1924 "parse.y"
    { if ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) LOCATION_NOTE (COPYLOC ((*yylocp), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc))); ((*yyvalp).ttype) = finish_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7098 3
a7100 3
  case 531:
#line 1930 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d7103 3
a7105 13
  case 532:
#line 1932 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op (POW_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 533:
#line 1934 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op (POWER_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 534:
#line 1936 "parse.y"
    { ((*yyvalp).ttype) = build_is_as ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), p_is); ;}
d7108 3
a7110 3
  case 535:
#line 1938 "parse.y"
    { ((*yyvalp).ttype) = build_is_as ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), p_as); ;}
d7113 3
a7115 3
  case 536:
#line 1943 "parse.y"
    { ((*yyvalp).ttype) = set_exp_original_code (build_pascal_unary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code)); ;}
d7118 3
a7120 6
  case 537:
#line 1945 "parse.y"
    {
        chk_dialect ("the address operator is", B_D_M_PASCAL);
        ((*yyvalp).ttype) = build_pascal_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), !co->typed_address);
      ;}
d7123 3
a7125 3
  case 540:
#line 1952 "parse.y"
    { ((*yyvalp).ttype) = null_pointer_node; ;}
d7128 2
a7129 2
  case 542:
#line 1955 "parse.y"
d7131 3
a7133 9
        if (TREE_CODE (((*yyvalp).ttype)) == TYPE_DECL)
          {
            error ("variable access expected -- type name given");
            ((*yyvalp).ttype) = error_mark_node;
          }
        else if (MAYBE_CALL_FUNCTION (((*yyvalp).ttype)) && TREE_CODE (function_result_type (((*yyvalp).ttype))) != VOID_TYPE)
          ((*yyvalp).ttype) = maybe_call_function (((*yyvalp).ttype), 0);
        else if (CALL_METHOD (((*yyvalp).ttype)))
          ((*yyvalp).ttype) = call_method (((*yyvalp).ttype), NULL_TREE);
d7137 3
a7139 8
  case 546:
#line 1976 "parse.y"
    { ((*yyvalp).ttype) = combine_strings ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1); ;}
    break;

  case 551:
#line 1988 "parse.y"
    { ((*yyvalp).ttype) = build_caret_string_constant ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d7143 1
a7143 1
#line 1999 "parse.y"
d7148 2
a7149 2
#line 2001 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d7153 2
a7154 2
#line 2006 "parse.y"
    { ((*yyvalp).ttype) = iso_no_parentheses ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7158 7
a7164 2
#line 2011 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))->symbol, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7167 3
a7169 3
  case 574:
#line 2013 "parse.y"
    { ((*yyvalp).ttype) = get_builtin_variable ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7173 2
a7174 2
#line 2020 "parse.y"
    { ((*yyvalp).ttype) = build_inherited_method ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7178 2
a7179 2
#line 2022 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_or_component_access ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7183 2
a7184 2
#line 2024 "parse.y"
    { ((*yyvalp).ttype) = last_parenthesized_expression = set_exp_original_code ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NOP_EXPR); ;}
d7188 2
a7189 2
#line 2026 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_pointer_reference ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7193 2
a7194 7
#line 2028 "parse.y"
    { ((*yyvalp).ttype) = build_array_ref_or_constructor ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 582:
#line 2030 "parse.y"
    { ((*yyvalp).ttype) = build_iso_constructor ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d7198 2
a7199 2
#line 2032 "parse.y"
    { chk_dialect ("empty parentheses are", BORLAND_DELPHI | MAC_PASCAL); ((*yyvalp).ttype) = build_call_or_cast ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d7203 2
a7204 20
#line 2034 "parse.y"
    { ((*yyvalp).itype) = allow_function_calls (0); ;}
    break;

  case 585:
#line 2036 "parse.y"
    {
        allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.itype));
        ((*yyvalp).ttype) = build_call_or_cast ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 586:
#line 2041 "parse.y"
    { chk_dialect ("type casts are", B_D_M_PASCAL); ((*yyvalp).ttype) = build_type_cast ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 587:
#line 2043 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_FormatString, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7208 2
a7209 2
#line 2045 "parse.y"
    { ((*yyvalp).itype) = allow_function_calls (0); ;}
d7213 2
a7214 5
#line 2047 "parse.y"
    {
        ((*yyvalp).ttype) = build_predef_call (p_Assigned, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)));
        allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype));
      ;}
d7218 2
a7219 2
#line 2052 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), co->pascal_dialect & B_D_M_PASCAL); ;}
d7223 2
a7224 2
#line 2054 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype))->symbol, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d7228 2
a7229 2
#line 2056 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_New, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d7233 2
a7234 11
#line 2058 "parse.y"
    {
        current_structor_object_type = NULL_TREE;
        if (TREE_CODE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype))) == POINTER_TYPE && PASCAL_TYPE_OBJECT (TREE_TYPE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype)))))
          {
            error ("invalid arguments to object `New'");
            ((*yyvalp).ttype) = error_mark_node;
          }
        else
          ((*yyvalp).ttype) = build_predef_call (p_New, tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)));
      ;}
d7238 2
a7239 2
#line 2069 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_New, tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)))); ;}
d7243 7
a7249 2
#line 2074 "parse.y"
    { ((*yyvalp).ttype) = set_structor_object (iso_no_parentheses ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)), 1); ;}
d7253 7
a7259 2
#line 2080 "parse.y"
    { ((*yyvalp).ttype) = TYPE_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7263 2
a7264 2
#line 2086 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d7267 2
a7268 2
  case 600:
#line 2088 "parse.y"
d7272 5
d7278 2
a7279 2
#line 2096 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d7283 1
a7283 1
#line 2101 "parse.y"
d7288 1
a7288 1
#line 2103 "parse.y"
a7291 5
  case 607:
#line 2108 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_tree_list (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))); ;}
    break;

d7293 2
a7294 2
#line 2110 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_tree_list (build_tree_list (NULL_TREE, integer_zero_node), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))); ;}
d7298 2
a7299 2
#line 2115 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d7303 2
a7304 2
#line 2120 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list (NULL_TREE, NULL_TREE) /* not just NULL_TREE to avoid confusion with BP initializers */, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7308 2
a7309 2
#line 2125 "parse.y"
    { ((*yyvalp).ttype) = maybe_schema_discriminant ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7313 2
a7314 2
#line 2127 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d7318 2
a7319 2
#line 2129 "parse.y"
    { PASCAL_BP_INITIALIZER_LIST ((((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)))) = 1; ;}
d7323 2
a7324 2
#line 2131 "parse.y"
    { chk_dialect ("constructors in `[]' are", E_O_PASCAL); ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7328 2
a7329 2
#line 2133 "parse.y"
    { error ("invalid component value"); ((*yyvalp).ttype) = error_mark_node; ;}
d7332 3
a7334 3
  case 617:
#line 2139 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d7338 7
a7344 2
#line 2141 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); error ("missing separator"); ;}
d7348 2
a7349 2
#line 2147 "parse.y"
    { chk_dialect ("initializers separated with `,' are", B_D_M_PASCAL); ;}
d7353 6
a7358 1
#line 2152 "parse.y"
d7362 3
a7364 3
  case 622:
#line 2154 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7368 2
a7369 2
#line 2160 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d7373 2
a7374 2
#line 2162 "parse.y"
    { error ("missing index expression"); ((*yyvalp).ttype) = NULL_TREE; ;}
d7378 2
a7379 2
#line 2164 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d7383 2
a7384 2
#line 2166 "parse.y"
    { error ("extra comma"); ;}
d7388 2
a7389 2
#line 2171 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d7393 2
a7394 2
#line 2173 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1), NULL_TREE); ;}
d7398 2
a7399 2
#line 2175 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 1), string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1)); ;}
d7403 2
a7404 2
#line 2180 "parse.y"
    { ((*yyvalp).ttype) = build_set_constructor (NULL_TREE); ;}
d7408 7
a7414 2
#line 2182 "parse.y"
    { ((*yyvalp).ttype) = build_set_constructor (nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d7418 2
a7419 2
#line 2188 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d7423 2
a7424 2
#line 2190 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d7428 2
a7429 2
#line 2192 "parse.y"
    { error ("extra comma"); ;}
d7433 2
a7434 2
#line 2197 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d7438 2
a7439 2
#line 2199 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7443 2
a7444 2
#line 2205 "parse.y"
    { ((*yyvalp).code) = CONVERT_EXPR; ;}
d7448 2
a7449 2
#line 2206 "parse.y"
    { ((*yyvalp).code) = NEGATE_EXPR; ;}
d7453 2
a7454 2
#line 2210 "parse.y"
    { ((*yyvalp).code) = CONVERT_EXPR; ;}
d7458 2
a7459 2
#line 2211 "parse.y"
    { ((*yyvalp).code) = NEGATE_EXPR; ;}
d7463 2
a7464 2
#line 2212 "parse.y"
    { ((*yyvalp).code) = TRUTH_NOT_EXPR; ;}
d7468 2
a7469 2
#line 2216 "parse.y"
    { ((*yyvalp).code) = NE_EXPR; ;}
d7473 2
a7474 2
#line 2217 "parse.y"
    { ((*yyvalp).code) = LE_EXPR; ;}
d7478 2
a7479 2
#line 2218 "parse.y"
    { ((*yyvalp).code) = GE_EXPR; ;}
d7483 2
a7484 2
#line 2219 "parse.y"
    { ((*yyvalp).code) = EQ_EXPR; ;}
d7488 2
a7489 2
#line 2220 "parse.y"
    { ((*yyvalp).code) = LT_EXPR; ;}
d7493 2
a7494 2
#line 2221 "parse.y"
    { ((*yyvalp).code) = GT_EXPR; ;}
d7498 2
a7499 2
#line 2222 "parse.y"
    { ((*yyvalp).code) = IN_EXPR; ;}
d7503 2
a7504 2
#line 2226 "parse.y"
    { ((*yyvalp).code) = PLUS_EXPR; ;}
d7508 2
a7509 2
#line 2227 "parse.y"
    { ((*yyvalp).code) = PLUS_EXPR; ;}
d7513 2
a7514 2
#line 2228 "parse.y"
    { ((*yyvalp).code) = MINUS_EXPR; ;}
d7518 2
a7519 2
#line 2229 "parse.y"
    { ((*yyvalp).code) = MINUS_EXPR; ;}
d7523 2
a7524 2
#line 2230 "parse.y"
    { ((*yyvalp).code) = TRUTH_XOR_EXPR; ;}
d7528 2
a7529 2
#line 2231 "parse.y"
    { ((*yyvalp).code) = SYMDIFF_EXPR; ;}
d7533 2
a7534 2
#line 2235 "parse.y"
    { ((*yyvalp).code) = MULT_EXPR; ;}
d7538 2
a7539 2
#line 2236 "parse.y"
    { ((*yyvalp).code) = RDIV_EXPR; ;}
d7543 2
a7544 2
#line 2237 "parse.y"
    { ((*yyvalp).code) = TRUNC_DIV_EXPR; ;}
d7548 2
a7549 2
#line 2238 "parse.y"
    { ((*yyvalp).code) = (co->pascal_dialect & B_D_M_PASCAL) ? TRUNC_MOD_EXPR : FLOOR_MOD_EXPR; ;}
d7553 2
a7554 2
#line 2239 "parse.y"
    { ((*yyvalp).code) = LSHIFT_EXPR; ;}
d7558 2
a7559 2
#line 2240 "parse.y"
    { ((*yyvalp).code) = RSHIFT_EXPR; ;}
d7563 2
a7564 2
#line 2244 "parse.y"
    { ((*yyvalp).code) = TRUTH_OR_EXPR; ;}
d7568 2
a7569 2
#line 2245 "parse.y"
    { ((*yyvalp).code) = TRUTH_ORIF_EXPR; chk_dialect ("`or else' (without underscore) is", GNU_PASCAL); ;}
d7573 2
a7574 2
#line 2246 "parse.y"
    { ((*yyvalp).code) = TRUTH_ORIF_EXPR; ;}
d7578 2
a7579 2
#line 2247 "parse.y"
    { ((*yyvalp).code) = TRUTH_ORIF_EXPR; chk_dialect ("`|' is", MAC_PASCAL); ;}
d7583 2
a7584 2
#line 2251 "parse.y"
    { ((*yyvalp).code) = TRUTH_AND_EXPR; ;}
d7588 2
a7589 2
#line 2252 "parse.y"
    { ((*yyvalp).code) = TRUTH_ANDIF_EXPR; chk_dialect ("`and then' (without underscore) is", GNU_PASCAL); ;}
d7593 2
a7594 2
#line 2253 "parse.y"
    { ((*yyvalp).code) = TRUTH_ANDIF_EXPR; ;}
d7598 2
a7599 2
#line 2254 "parse.y"
    { ((*yyvalp).code) = TRUTH_ANDIF_EXPR; chk_dialect ("`&' is", MAC_PASCAL); ;}
d7603 2
a7604 2
#line 2258 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilPlus", "+>"); ;}
d7608 2
a7609 2
#line 2259 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilMinus", "->"); ;}
d7613 2
a7614 2
#line 2260 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorPlus", "+<"); ;}
d7618 2
a7619 2
#line 2261 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorMinus", "-<"); ;}
d7623 2
a7624 2
#line 2265 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilMult", "*>"); ;}
d7628 2
a7629 2
#line 2266 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilRDiv", "/>"); ;}
d7633 2
a7634 2
#line 2267 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorMult", "*<"); ;}
d7638 2
a7639 2
#line 2268 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorRDiv", "/<"); ;}
d7643 2
a7644 2
#line 2275 "parse.y"
    { ((*yyvalp).itype) = IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))->symbol; ;}
d7648 2
a7649 2
#line 2277 "parse.y"
    { ((*yyvalp).itype) = p_and; ;}
d7653 2
a7654 2
#line 2278 "parse.y"
    { ((*yyvalp).itype) = p_or; ;}
d7658 2
a7659 12
#line 2279 "parse.y"
    { ((*yyvalp).itype) = p_not; ;}
    break;

  case 683:
#line 2280 "parse.y"
    { ((*yyvalp).itype) = p_xor; ;}
    break;

  case 684:
#line 2281 "parse.y"
    { ((*yyvalp).itype) = p_shl; ;}
d7663 2
a7664 2
#line 2282 "parse.y"
    { ((*yyvalp).itype) = p_shr; ;}
d7668 2
a7669 2
#line 2288 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BPlus", "+"); ;}
d7673 2
a7674 2
#line 2289 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BPlus", "+"); ;}
d7678 2
a7679 2
#line 2290 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BMinus", "-"); ;}
d7683 2
a7684 2
#line 2291 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BMinus", "-"); ;}
d7688 2
a7689 2
#line 2292 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BMult", "*"); ;}
d7693 2
a7694 2
#line 2293 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("RDiv", "/"); ;}
d7698 2
a7699 12
#line 2294 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("Div"); ;}
    break;

  case 693:
#line 2295 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("Mod"); ;}
    break;

  case 694:
#line 2296 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("RPower", "**"); ;}
d7703 2
a7704 2
#line 2297 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("In"); ;}
d7708 2
a7709 2
#line 2298 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("LT", "<"); ;}
d7713 2
a7714 2
#line 2299 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("EQ", "="); ;}
d7718 2
a7719 2
#line 2300 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("GT", ">"); ;}
d7723 6
a7728 2
#line 2301 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("NE", "<>"); ;}
d7732 2
a7733 7
#line 2302 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("GE", ">="); ;}
    break;

  case 701:
#line 2303 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("LE", "<="); ;}
d7737 2
a7738 2
#line 2304 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("And"); ;}
d7742 2
a7743 7
#line 2305 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("SAnd", "&"); ;}
    break;

  case 704:
#line 2306 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("Or"); ;}
d7747 2
a7748 2
#line 2307 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("SOr", "|"); ;}
d7752 1
a7752 16
#line 2308 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("SymDiff", "<>"); ;}
    break;

  case 709:
#line 2315 "parse.y"
    { warn_about_keyword_redeclaration (((*yyvalp).ttype), 1); ;}
    break;

  case 719:
#line 2333 "parse.y"
    { warn_about_keyword_redeclaration (((*yyvalp).ttype), 1); ;}
    break;

  case 723:
#line 2345 "parse.y"
d7756 2
a7757 2
  case 764:
#line 2393 "parse.y"
d7761 2
a7762 2
  case 770:
#line 2406 "parse.y"
d7766 3
a7768 3
  case 771:
#line 2413 "parse.y"
    { pushlevel_expand (); ;}
d7771 2
a7772 2
  case 772:
#line 2418 "parse.y"
d7776 3
a7778 8
  case 773:
#line 2423 "parse.y"
    {
#ifndef EGCS97
        push_obstacks_nochange ();
        end_temporary_allocation ();
#endif
      ;}
d7781 3
a7783 3
  case 774:
#line 2433 "parse.y"
    { lex_const_equal = 0; ;}
d7786 2
a7787 2
  case 775:
#line 2438 "parse.y"
d7791 3
a7793 3
  case 776:
#line 2443 "parse.y"
    { yyerrok; ;}
d7796 2
a7797 2
  case 777:
#line 2445 "parse.y"
d7801 3
a7803 3
  case 784:
#line 2462 "parse.y"
    { error ("missing `)'"); ;}
d7806 2
a7807 2
  case 786:
#line 2468 "parse.y"
d7811 2
a7812 2
  case 787:
#line 2473 "parse.y"
d7816 2
a7817 2
  case 788:
#line 2478 "parse.y"
d7822 1
d7833 2
a7834 2
/* Line 750 of glr.c.  */
#line 7680 "parse.c"
d7848 1
d7877 1
a7877 1
/** Number of symbols composing the right hand side of rule #RULE. */
d7884 31
d8018 1
a8018 1
static void
d8024 2
d8027 1
d8037 1
a8037 1
static void
a8039 1
  yystack->yyerrflag = 0;
d8043 1
a8043 1
  yystack->yynextFree = yystack->yyitems =
d8045 3
d8050 1
a8050 1
  yyinitStateSet (&yystack->yytops);
d8065 1
a8065 1
  yyGLRStack yynewStack;
d8071 1
a8071 1
    yyFail (yystack, "parser stack overflow");
d8075 4
a8078 2
  yyinitGLRStack (&yynewStack, yynewSize);
  for (yyp0 = yystack->yyitems, yyp1 = yynewStack.yyitems, yyn = yysize;
d8105 1
a8105 1
    yystack->yysplitPoint = YYRELOC (yystack->yyitems, yynewStack.yyitems,
d8111 1
a8111 1
	YYRELOC (yystack->yyitems, yynewStack.yyitems,
d8114 3
a8116 3
  yystack->yyitems = yynewStack.yyitems;
  yystack->yynextFree = yynewStack.yynextFree + yysize;
  yystack->yyspaceLeft = yynewStack.yyspaceLeft - yysize;
d8119 1
a8119 2

  yyFail (yystack, "parser stack overflow");
d8142 1
a8142 1
yymarkStackDeleted (yyGLRStack* yystack, int yyk)
d8195 2
a8196 1
yyglrShift (yyGLRStack* yystack, int yyk, yyStateNum yylrState, size_t yyposn,
d8220 1
a8220 1
yyglrShiftDefer (yyGLRStack* yystack, int yyk, yyStateNum yylrState,
d8245 1
a8245 1
yydoAction (yyGLRStack* yystack, int yyk, yyRuleNum yyrule,
d8379 2
a8380 2
static int
yysplitStack (yyGLRStack* yystack, int yyk)
d8389 9
a8397 5
      yystack->yytops.yycapacity *= 2;
      yystack->yytops.yystates =
	(yyGLRState**) YYREALLOC (yystack->yytops.yystates,
				  (yystack->yytops.yycapacity
				   * sizeof yystack->yytops.yystates[0]));
d8427 2
a8428 3
/** Assuming identicalOptions (Y0,Y1), (destructively) merge the
 *  alternative semantic values for the RHS-symbols of Y1 into the
 *  corresponding semantic value sets of the symbols of Y0. */
d8438 40
a8477 10
    if (yys0 == yys1)
      break;
    else if (! yys0->yyresolved && ! yys1->yyresolved)
      {
	yySemanticOption* yyz;
	for (yyz = yys0->yysemantics.yyfirstVal; yyz->yynext != NULL;
	     yyz = yyz->yynext)
	  continue;
	yyz->yynext = yys1->yysemantics.yyfirstVal;
      }
d8595 3
d8614 1
a8614 1
  yyFail (yystack, "ambiguity detected");
d8625 2
a8626 2
  yySemanticOption* yyp;
  int yymerge;
d8629 2
a8630 2
  yymerge = 0;
  for (yyp = yyoptionList->yynext; yyp != NULL; yyp = yyp->yynext)
d8632 2
d8635 4
a8638 1
	yymergeOptionSets (yybest, yyp);
d8640 23
a8662 15
	switch (yypreference (yybest, yyp))
	  {
	  case 0:
	    yyreportAmbiguity (yybest, yyp, yystack);
	    break;
	  case 1:
	    yymerge = 1;
	    break;
	  case 2:
	    break;
	  case 3:
	    yybest = yyp;
	    yymerge = 0;
	    break;
	  }
d8667 1
d8735 1
a8735 1
yyprocessOneStack (yyGLRStack* yystack, int yyk,
d8747 2
a8748 1
      YYDPRINTF ((stderr, "Stack %d Entering state %d\n", yyk, yystate));
d8757 2
a8758 1
	      YYDPRINTF ((stderr, "Stack %d dies.\n", yyk));
d8777 4
a8780 3
	      int yynewStack = yysplitStack (yystack, yyk);
	      YYDPRINTF ((stderr, "Splitting off stack %d from %d.\n",
			  yynewStack, yyk));
d8790 1
a8790 1
	      YYDPRINTF ((stderr, "On stack %d, ", yyk));
d8794 2
a8795 1
	      YYDPRINTF ((stderr, ", now in state #%d\n",
d8801 2
a8802 1
	      YYDPRINTF ((stderr, "Stack %d dies.\n", yyk));
d8829 7
a8835 3
	  size_t yysize = 0;
	  const char* yyprefix;
	  char* yymsg;
d8837 10
d8855 4
a8858 1
	  int yycount = 0;
a8859 1
	  yyprefix = ", expecting ";
d8863 1
a8863 3
		yysize += strlen (yyprefix) + strlen (yytokenName (yyx));
		yycount += 1;
		if (yycount == 5)
d8865 3
a8867 1
		    yysize = 0;
d8870 6
a8875 1
		yyprefix = " or ";
d8877 10
a8886 4
	  yysize += (sizeof ("syntax error, unexpected ")
		     + strlen (yytokenName (*yytokenp)));
	  yymsg = (char*) YYMALLOC (yysize);
	  if (yymsg != 0)
d8888 3
a8890 6
	      char* yyp = yymsg;
	      sprintf (yyp, "syntax error%s%s",
		       (*yytokenp == YYEMPTY ? "" : ", unexpected "),
		       yytokenName (*yytokenp));
	      yyp += strlen (yyp);
	      if (yycount < 5)
d8892 10
a8901 8
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			sprintf (yyp, "%s%s", yyprefix, yytokenName (yyx));
			yyp += strlen (yyp);
			yyprefix = " or ";
		      }
d8907 4
a8910 1
	    yyerror ("syntax error; also virtual memory exhausted");
d8914 1
a8914 1
	yyerror ("syntax error");
d8925 1
a8925 1
		      YYLTYPE* yyllocp
d8938 1
a8938 15
	  {
	    /* Now pop stack until empty and fail. */
	    while (yystack->yytops.yystates[0] != NULL)
	      {
		yyGLRState *yys = yystack->yytops.yystates[0];
		yystack->yyerror_range[1].yystate.yyloc = yys->yyloc;
		yydestruct ("Error: popping",
                            yystos[yys->yylrState],
			    &yys->yysemantics.yysval, &yys->yyloc);
		yystack->yytops.yystates[0] = yys->yypred;
		yystack->yynextFree -= 1;
		yystack->yyspaceLeft += 1;
	      }
	    yyFail (yystack, NULL);
	  }
d9004 1
a9004 3
      yydestruct ("Error: popping",
		  yystos[yys->yylrState],
	          &yys->yysemantics.yysval, &yys->yyloc);
d9016 1
a9016 1
    default:								     \
d9019 1
a9019 2
      yystack.yyerrflag = 1;						     \
      goto yyDone;							     \
d9021 1
a9021 2
      yystack.yyerrflag = 0;						     \
      goto yyDone;							     \
d9024 2
d9037 1
a9045 3
  yyinitGLRStack (&yystack, YYINITDEPTH);
  yystack.yytokenp = &yytoken;

d9048 1
a9048 3
  if (setjmp (yystack.yyexception_buffer) != 0)
    goto yyDone;

d9057 10
a9067 1
  yytoken = YYEMPTY;
d9085 1
a9085 1
	    goto yyDone;
d9115 1
a9115 2
		  yyglrShift (&yystack, 0, yyaction, yyposn,
		              yylval, yyllocp);
d9132 2
a9133 2
	  int yys;
	  int yyn = yystack.yytops.yysize;
d9144 1
a9144 1
		yyFail (&yystack, "syntax error");
d9164 21
a9184 4
 yyDone:
  /* On YYABORT, free the lookahead. */
  if (yystack.yyerrflag == 1 && yytoken != YYEMPTY)
    yydestruct ("Error: discarding lookahead",
d9187 20
a9206 2
  yyfreeGLRStack (&yystack);
  return yystack.yyerrflag;
d9211 3
a9213 2
static void yypstack (yyGLRStack* yystack, int yyk) ATTRIBUTE_UNUSED;
static void yypdumpstack (yyGLRStack* yystack) ATTRIBUTE_UNUSED;
d9237 1
a9237 1
yypstack (yyGLRStack* yystack, int yyk)
d9282 1
a9282 1
#line 2481 "parse.y"
a9284 4
/* Lexical analyzer moved to gpc-lex.c */

/* Parser auxiliary routines */

d9287 1
a9287 2
check_decl_order (prev, new)
     int prev, new;
a9304 30
static tree
iso_no_parentheses (t)
     tree t;
{
  if (last_parenthesized_expression == t)
    chk_dialect ("superfluous parentheses in this place are", B_D_M_PASCAL);
  return t;
}

/* Sets the value of the 'yydebug' variable to VALUE. This is a function
   so we don't have to have YYDEBUG defined in order to build the compiler. */
void
set_yydebug (value)
     int value;
{
#if YYDEBUG != 0
  yydebug = value;
#else
  warning ("YYDEBUG not defined.");
#endif
}

#undef yyparse
int
yyparse ()
{
  init_predef ();
  return main_yyparse ();
}

d9306 1
a9306 4
locations (dest, src, n)
     YYLTYPE *dest;
     const /*YYLTYPE*/ union yyGLRStackItem *src;
     int n;
d9356 20
@


1.1.111.1
log
@Update to gpc-20051116 with the following diffs applied:
Message-ID: <E1EcXkX-0004mi-00@@hera.math.uni.wroc.pl>
Message-ID: <E1Ed6ro-00056J-00@@hera.math.uni.wroc.pl>
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.1.  */
d4 1
a4 1
   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
d18 2
a19 2
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
d23 6
a31 3
/* Bison version.  */
#define YYBISON_VERSION "2.1"

d49 1
a49 1
     prec_lower_than_error = 258,
d51 63
a113 63
     prec_import = 260,
     p_uses = 261,
     p_else = 262,
     p_and = 263,
     p_array = 264,
     p_begin = 265,
     p_case = 266,
     p_div = 267,
     p_do = 268,
     p_downto = 269,
     p_end = 270,
     p_file = 271,
     p_for = 272,
     p_function = 273,
     p_goto = 274,
     p_if = 275,
     p_in = 276,
     p_label = 277,
     p_mod = 278,
     p_nil = 279,
     p_not = 280,
     p_of = 281,
     p_or = 282,
     p_packed = 283,
     p_procedure = 284,
     p_to = 285,
     p_program = 286,
     p_record = 287,
     p_repeat = 288,
     p_set = 289,
     p_then = 290,
     p_type = 291,
     p_until = 292,
     p_var = 293,
     p_while = 294,
     p_with = 295,
     p_absolute = 296,
     p_abstract = 297,
     p_and_then = 298,
     p_as = 299,
     p_asm = 300,
     p_attribute = 301,
     p_bindable = 302,
     p_const = 303,
     p_constructor = 304,
     p_destructor = 305,
     p_external = 306,
     p_far = 307,
     p_finalization = 308,
     p_forward = 309,
     p_implementation = 310,
     p_import = 311,
     p_inherited = 312,
     p_initialization = 313,
     p_is = 314,
     p_near = 315,
     p_object = 316,
     p_only = 317,
     p_operator = 318,
     p_otherwise = 319,
     p_or_else = 320,
     p_pow = 321,
     p_qualified = 322,
d124 6
a129 6
     p_class = 333,
     p_override = 334,
     p_reintroduce = 335,
     p_Addr = 336,
     p_Assigned = 337,
     p_Dispose = 338,
d131 12
a142 12
     p_FormatString = 340,
     p_New = 341,
     p_Return = 342,
     LEX_INTCONST = 343,
     LEX_INTCONST_BASE = 344,
     LEX_STRCONST = 345,
     LEX_REALCONST = 346,
     LEX_BUILTIN_PROCEDURE = 347,
     LEX_BUILTIN_PROCEDURE_WRITE = 348,
     LEX_BUILTIN_FUNCTION = 349,
     LEX_ID = 350,
     LEX_CARET_WHITE = 351,
d144 12
a155 12
     LEX_ASSIGN = 353,
     LEX_RENAME = 354,
     LEX_RANGE = 355,
     LEX_ELLIPSIS = 356,
     LEX_CONST_EQUAL = 357,
     LEX_SYMDIFF = 358,
     LEX_NE = 359,
     LEX_GE = 360,
     LEX_LE = 361,
     LEX_POWER = 362,
     LEX_BPPLUS = 363,
     LEX_BPMINUS = 364,
d166 1
a166 2
/* Tokens.  */
#define prec_lower_than_error 258
d168 63
a230 63
#define prec_import 260
#define p_uses 261
#define p_else 262
#define p_and 263
#define p_array 264
#define p_begin 265
#define p_case 266
#define p_div 267
#define p_do 268
#define p_downto 269
#define p_end 270
#define p_file 271
#define p_for 272
#define p_function 273
#define p_goto 274
#define p_if 275
#define p_in 276
#define p_label 277
#define p_mod 278
#define p_nil 279
#define p_not 280
#define p_of 281
#define p_or 282
#define p_packed 283
#define p_procedure 284
#define p_to 285
#define p_program 286
#define p_record 287
#define p_repeat 288
#define p_set 289
#define p_then 290
#define p_type 291
#define p_until 292
#define p_var 293
#define p_while 294
#define p_with 295
#define p_absolute 296
#define p_abstract 297
#define p_and_then 298
#define p_as 299
#define p_asm 300
#define p_attribute 301
#define p_bindable 302
#define p_const 303
#define p_constructor 304
#define p_destructor 305
#define p_external 306
#define p_far 307
#define p_finalization 308
#define p_forward 309
#define p_implementation 310
#define p_import 311
#define p_inherited 312
#define p_initialization 313
#define p_is 314
#define p_near 315
#define p_object 316
#define p_only 317
#define p_operator 318
#define p_otherwise 319
#define p_or_else 320
#define p_pow 321
#define p_qualified 322
d241 6
a246 6
#define p_class 333
#define p_override 334
#define p_reintroduce 335
#define p_Addr 336
#define p_Assigned 337
#define p_Dispose 338
d248 12
a259 12
#define p_FormatString 340
#define p_New 341
#define p_Return 342
#define LEX_INTCONST 343
#define LEX_INTCONST_BASE 344
#define LEX_STRCONST 345
#define LEX_REALCONST 346
#define LEX_BUILTIN_PROCEDURE 347
#define LEX_BUILTIN_PROCEDURE_WRITE 348
#define LEX_BUILTIN_FUNCTION 349
#define LEX_ID 350
#define LEX_CARET_WHITE 351
d261 12
a272 12
#define LEX_ASSIGN 353
#define LEX_RENAME 354
#define LEX_RANGE 355
#define LEX_ELLIPSIS 356
#define LEX_CONST_EQUAL 357
#define LEX_SYMDIFF 358
#define LEX_NE 359
#define LEX_GE 360
#define LEX_LE 361
#define LEX_POWER 362
#define LEX_BPPLUS 363
#define LEX_BPMINUS 364
d286 1
a286 1
#line 63 "parse.y"
d296 4
d301 1
a301 1
static int check_decl_order (int, int);
d303 1
a303 1
extern int main_yyparse (void);
d307 1
a307 1
static void locations (YYLTYPE *, const union yyGLRStackItem *, int);
d322 1
a322 1
#define YYASSERT gcc_assert
a339 5
/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

d341 1
a341 1
#line 108 "parse.y"
d348 1
a348 1
#line 348 "parse.c"
d378 1
a378 18
#line 378 "parse.c"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif
a389 2
#define YYSIZEMAX ((size_t) -1)

a397 7
#ifndef YYSETJMP
# include <setjmp.h>
# define YYJMP_BUF jmp_buf
# define YYSETJMP(env) setjmp (env)
# define YYLONGJMP(env, val) longjmp (env, val)
#endif

d404 2
a405 2
# if (!defined (__GNUC__) || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5) || __STRICT_ANSI__)
a409 2
#define YYOPTIONAL_LOC(Name) Name

d414 4
d421 1
a421 1
#define YYLAST   8828
d426 1
a426 1
#define YYNNTS  280
d428 1
a428 1
#define YYNRULES  778
d430 1
a430 1
#define YYNSTATES  1297
d452 3
a454 3
     119,   120,   130,   128,   121,   129,   127,   131,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   122,   118,
     132,   133,   134,     2,   125,     2,     2,     2,     2,     2,
d457 1
a457 1
       2,   123,     2,   124,   126,     2,     2,     2,     2,     2,
d473 13
a485 13
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117
d494 78
a571 77
      21,    34,    36,    38,    39,    43,    44,    45,    55,    56,
      63,    64,    65,    74,    75,    83,    84,    92,    93,    94,
     101,   102,   107,   108,   112,   114,   115,   120,   122,   123,
     127,   129,   130,   133,   135,   137,   138,   145,   146,   153,
     154,   159,   164,   168,   170,   174,   176,   179,   181,   185,
     187,   191,   195,   199,   203,   205,   210,   212,   214,   218,
     220,   224,   228,   231,   235,   239,   240,   243,   244,   248,
     250,   254,   258,   263,   265,   267,   269,   273,   278,   280,
     284,   286,   290,   294,   297,   299,   302,   303,   306,   308,
     310,   311,   314,   315,   318,   322,   324,   325,   328,   330,
     332,   334,   335,   338,   340,   341,   344,   346,   350,   352,
     356,   360,   363,   365,   368,   369,   372,   375,   376,   381,
     384,   386,   390,   392,   396,   400,   403,   405,   407,   409,
     412,   414,   419,   428,   430,   433,   434,   443,   445,   447,
     451,   453,   456,   457,   463,   465,   469,   472,   474,   476,
     477,   481,   484,   486,   490,   492,   496,   500,   503,   509,
     510,   517,   521,   522,   532,   533,   543,   549,   556,   563,
     567,   571,   573,   577,   581,   585,   588,   592,   594,   597,
     598,   601,   603,   606,   608,   611,   614,   616,   618,   620,
     622,   624,   627,   631,   635,   637,   641,   643,   647,   651,
     658,   660,   665,   669,   673,   677,   679,   681,   685,   687,
     691,   695,   698,   700,   702,   704,   705,   708,   716,   718,
     721,   723,   727,   731,   735,   738,   743,   744,   750,   754,
     758,   760,   762,   764,   768,   772,   774,   777,   783,   785,
     787,   789,   793,   797,   799,   803,   807,   811,   814,   818,
     823,   826,   829,   832,   836,   838,   840,   842,   845,   849,
     851,   855,   859,   861,   863,   865,   868,   870,   872,   875,
     879,   884,   888,   894,   898,   902,   904,   907,   909,   911,
     913,   915,   917,   920,   923,   925,   927,   929,   933,   937,
     938,   939,   949,   951,   953,   957,   963,   969,   975,   983,
     989,   995,   997,   999,  1003,  1006,  1010,  1011,  1018,  1025,
    1032,  1036,  1039,  1042,  1044,  1048,  1052,  1057,  1059,  1063,
    1065,  1067,  1069,  1073,  1078,  1085,  1087,  1089,  1091,  1093,
    1095,  1098,  1100,  1102,  1105,  1109,  1113,  1119,  1123,  1125,
    1129,  1133,  1137,  1141,  1146,  1151,  1155,  1159,  1165,  1167,
    1170,  1172,  1174,  1177,  1179,  1180,  1182,  1184,  1185,  1188,
    1190,  1192,  1194,  1198,  1200,  1202,  1209,  1217,  1219,  1223,
    1227,  1231,  1237,  1241,  1243,  1245,  1251,  1253,  1257,  1258,
    1260,  1261,  1262,  1268,  1270,  1272,  1273,  1274,  1277,  1279,
    1282,  1284,  1286,  1288,  1289,  1294,  1296,  1299,  1301,  1306,
    1311,  1313,  1320,  1322,  1323,  1330,  1331,  1332,  1341,  1342,
    1343,  1344,  1354,  1355,  1356,  1365,  1366,  1378,  1379,  1389,
    1392,  1395,  1397,  1401,  1403,  1407,  1411,  1413,  1417,  1418,
    1426,  1427,  1432,  1434,  1436,  1437,  1440,  1442,  1446,  1448,
    1452,  1456,  1457,  1464,  1466,  1470,  1474,  1478,  1481,  1483,
    1487,  1491,  1495,  1497,  1499,  1501,  1503,  1506,  1508,  1510,
    1513,  1515,  1520,  1525,  1532,  1540,  1546,  1554,  1564,  1576,
    1577,  1579,  1581,  1583,  1585,  1589,  1594,  1596,  1600,  1602,
    1604,  1608,  1610,  1613,  1617,  1621,  1622,  1627,  1629,  1633,
    1637,  1638,  1643,  1645,  1649,  1653,  1657,  1661,  1665,  1668,
    1671,  1673,  1675,  1677,  1679,  1681,  1683,  1685,  1687,  1689,
    1691,  1693,  1695,  1698,  1700,  1702,  1705,  1707,  1709,  1711,
    1713,  1715,  1717,  1719,  1721,  1723,  1725,  1727,  1729,  1731,
    1733,  1735,  1737,  1739,  1741,  1743,  1745,  1747,  1751,  1754,
    1756,  1758,  1760,  1764,  1768,  1771,  1776,  1781,  1785,  1791,
    1794,  1799,  1805,  1810,  1815,  1822,  1830,  1832,  1837,  1842,
    1843,  1845,  1849,  1851,  1855,  1857,  1861,  1865,  1869,  1871,
    1875,  1881,  1883,  1886,  1890,  1894,  1896,  1898,  1900,  1904,
    1908,  1910,  1917,  1922,  1927,  1931,  1933,  1936,  1940,  1944,
    1948,  1950,  1954,  1958,  1960,  1962,  1966,  1968,  1970,  1974,
    1976,  1980,  1984,  1986,  1988,  1992,  1995,  1999,  2001,  2005,
    2009,  2013,  2015,  2019,  2021,  2023,  2025,  2027,  2029,  2031,
    2033,  2035,  2037,  2039,  2041,  2043,  2045,  2047,  2049,  2051,
    2053,  2055,  2057,  2059,  2061,  2063,  2065,  2067,  2069,  2072,
    2074,  2076,  2078,  2081,  2083,  2085,  2087,  2089,  2091,  2093,
    2095,  2097,  2099,  2101,  2103,  2105,  2107,  2109,  2111,  2113,
    2115,  2117,  2119,  2121,  2123,  2125,  2127,  2129,  2131,  2133,
    2135,  2137,  2139,  2141,  2143,  2145,  2147,  2149,  2151,  2153,
    2155,  2157,  2159,  2161,  2163,  2165,  2167,  2169,  2171,  2175,
    2179,  2183,  2186,  2188,  2192,  2194,  2198,  2200,  2202,  2204,
    2206,  2208,  2210,  2212,  2214,  2216,  2218,  2220,  2222,  2224,
    2226,  2228,  2230,  2232,  2234,  2236,  2238,  2240,  2242,  2244,
    2246,  2248,  2250,  2252,  2254,  2256,  2258,  2260,  2262,  2264,
    2266,  2268,  2270,  2272,  2274,  2276,  2278,  2280,  2282,  2284,
    2286,  2288,  2290,  2292,  2294,  2296,  2298,  2300,  2302,  2304,
    2306,  2308,  2310,  2311,  2312,  2313,  2315,  2317,  2319,  2320,
    2322,  2324,  2326,  2328,  2330,  2332,  2334,  2336,  2337
d577 233
a809 234
     138,     0,    -1,    -1,   139,    -1,    -1,    -1,   171,   174,
     140,   181,   191,   141,   299,   414,    -1,   142,    -1,    -1,
      -1,    71,   400,   118,   174,    95,   143,   181,   196,   144,
     159,    15,   414,    -1,   149,    -1,   154,    -1,    -1,   149,
     145,   154,    -1,    -1,    -1,   410,   400,   172,   146,   152,
     118,   147,   156,   414,    -1,    -1,   410,   400,   172,   148,
     156,   414,    -1,    -1,    -1,   410,   400,    95,   150,   172,
     151,   152,   414,    -1,    -1,    95,   153,   175,   118,   181,
     196,    15,    -1,    -1,   410,   400,    55,   118,   155,   156,
     414,    -1,    -1,    -1,   157,   183,   198,   158,   166,    15,
      -1,    -1,    55,   183,   191,   160,    -1,    -1,    10,   161,
     165,    -1,   163,    -1,    -1,   163,    53,   162,   300,    -1,
     166,    -1,    -1,    58,   164,   165,    -1,   300,    -1,    -1,
     167,   169,    -1,   167,    -1,   169,    -1,    -1,    30,    10,
      13,   168,   304,   118,    -1,    -1,    30,    15,    13,   170,
     304,   118,    -1,    -1,    31,   400,   173,   118,    -1,    31,
       1,   173,   118,    -1,   173,   118,   174,    -1,   415,    -1,
     119,   396,   120,    -1,   415,    -1,   277,   118,    -1,   176,
      -1,   175,   118,   176,    -1,     1,    -1,   175,     1,   176,
      -1,   175,   118,     1,    -1,   400,   413,   177,    -1,   119,
     179,   120,    -1,   178,    -1,   178,   119,   179,   120,    -1,
      95,    -1,   180,    -1,   179,   121,   180,    -1,     1,    -1,
     179,     1,   180,    -1,   179,   121,     1,    -1,   399,   190,
      -1,   399,   100,   399,    -1,   409,   399,   190,    -1,    -1,
     182,   183,    -1,    -1,    56,   184,   118,    -1,   185,    -1,
     184,   118,   185,    -1,   184,     1,   185,    -1,   400,   186,
     187,   204,    -1,   415,    -1,    67,    -1,   415,    -1,   119,
     188,   120,    -1,    62,   119,   188,   120,    -1,   189,    -1,
     188,   121,   189,    -1,     1,    -1,   188,     1,   189,    -1,
     188,   121,     1,    -1,   400,   190,    -1,   415,    -1,    99,
     400,    -1,    -1,   191,   192,    -1,   201,    -1,   194,    -1,
      -1,   193,   194,    -1,    -1,   195,   205,    -1,    22,   209,
     118,    -1,   266,    -1,    -1,   196,   197,    -1,   201,    -1,
     205,    -1,   265,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   200,   205,    -1,   266,    -1,     6,   202,   118,    -1,
     203,    -1,   202,   121,   203,    -1,   202,     1,   203,    -1,
     400,   204,    -1,   415,    -1,    21,   344,    -1,    -1,   206,
     207,    -1,    48,   211,    -1,    -1,    36,   208,   223,   118,
      -1,    38,   213,    -1,   210,    -1,   209,   121,   210,    -1,
       1,    -1,   209,     1,   210,    -1,   209,   121,     1,    -1,
     209,     1,    -1,   395,    -1,   400,    -1,   212,    -1,   211,
     212,    -1,     1,    -1,   400,   413,   343,   118,    -1,   400,
     407,   122,   231,   102,   374,   219,   118,    -1,   214,    -1,
     213,   214,    -1,    -1,   398,   407,   122,   231,   215,   221,
     216,   118,    -1,     1,    -1,   415,    -1,   216,   118,   217,
      -1,   220,    -1,    51,   352,    -1,    -1,    51,   352,    95,
     218,   344,    -1,   415,    -1,   219,   118,   220,    -1,    75,
     344,    -1,   277,    -1,   263,    -1,    -1,    41,   222,   344,
      -1,    41,     1,    -1,   224,    -1,   223,   118,   224,    -1,
       1,    -1,   223,     1,   224,    -1,   223,   118,     1,    -1,
     223,     1,    -1,   400,   407,   413,   231,   263,    -1,    -1,
     400,   228,   413,   225,   231,   263,    -1,   400,   228,     1,
      -1,    -1,   400,   407,   413,   226,   259,    61,   258,   260,
      15,    -1,    -1,   400,   407,   413,   227,   259,    78,   258,
     260,    15,    -1,   400,   407,   413,    78,   258,    -1,   400,
     407,   413,    78,   100,    15,    -1,   400,   407,   413,    61,
     118,    54,    -1,   119,   229,   120,    -1,   119,     1,   120,
      -1,   230,    -1,   229,   118,   230,    -1,   229,     1,   230,
      -1,   229,   118,     1,    -1,   229,     1,    -1,   396,   122,
     358,    -1,   232,    -1,   231,   277,    -1,    -1,   233,   234,
      -1,   235,    -1,    47,   235,    -1,   357,    -1,    68,   357,
      -1,   358,   236,    -1,   292,    -1,   251,    -1,   255,    -1,
     257,    -1,   238,    -1,   408,   238,    -1,   119,   237,   120,
      -1,   123,   344,   124,    -1,   344,    -1,   237,   121,   344,
      -1,     1,    -1,   237,     1,   344,    -1,   237,   121,     1,
      -1,     9,   123,   240,   124,    26,   232,    -1,   367,    -1,
      16,   239,    26,   232,    -1,    34,    26,   232,    -1,    32,
     242,    15,    -1,    32,     1,    15,    -1,   416,    -1,   415,
      -1,   123,   241,   124,    -1,   241,    -1,   240,   121,   241,
      -1,   240,     1,   241,    -1,   240,     1,    -1,     1,    -1,
     251,    -1,   358,    -1,    -1,   244,   411,    -1,   243,    11,
     247,    26,   248,   411,   246,    -1,   415,    -1,   244,   118,
      -1,   245,    -1,   244,   118,   245,    -1,   244,     1,   245,
      -1,   244,   118,     1,    -1,   244,     1,    -1,   396,   122,
     232,   263,    -1,    -1,   327,   119,   242,   120,   411,    -1,
     400,   122,   358,    -1,   400,   122,   250,    -1,   403,    -1,
     250,    -1,   249,    -1,   248,   118,   249,    -1,   248,     1,
     249,    -1,     1,    -1,   248,     1,    -1,   332,   122,   119,
     242,   120,    -1,   251,    -1,   252,    -1,   254,    -1,   119,
     253,   120,    -1,   119,     1,   120,    -1,   400,    -1,   253,
     121,   400,    -1,   253,     1,   400,    -1,   253,   121,     1,
      -1,   253,     1,    -1,   344,   100,   344,    -1,   408,   344,
     100,   344,    -1,   125,   256,    -1,   126,   256,    -1,    96,
     256,    -1,   412,    48,   256,    -1,   400,    -1,   257,    -1,
     367,    -1,    29,   283,    -1,    18,   283,   286,    -1,   415,
      -1,   119,   358,   120,    -1,   119,     1,   120,    -1,   415,
      -1,    42,    -1,   261,    -1,   261,   262,    -1,     1,    -1,
     415,    -1,   261,    95,    -1,   261,   262,   118,    -1,   396,
     122,   232,   263,    -1,    29,   400,   283,    -1,    18,   400,
     283,   287,   286,    -1,    49,   400,   283,    -1,    50,   400,
     283,    -1,    73,    -1,    73,   344,    -1,    79,    -1,    80,
      -1,    42,    -1,   277,    -1,   415,    -1,   264,   374,    -1,
     264,     1,    -1,    72,    -1,    98,    -1,   102,    -1,   270,
     118,   272,    -1,   269,   118,   273,    -1,    -1,    -1,   269,
     118,   276,   267,   183,   193,   268,   299,   118,    -1,   270,
      -1,   271,    -1,    29,   400,   283,    -1,    18,   400,   283,
     287,   286,    -1,    63,   281,   283,   282,   286,    -1,    29,
     400,   127,   400,   283,    -1,    18,   400,   127,   400,   283,
     287,   286,    -1,    49,   400,   127,   400,   283,    -1,    50,
     400,   127,   400,   283,    -1,   276,    -1,   273,    -1,   276,
     274,   276,    -1,    54,   118,    -1,    51,   352,   118,    -1,
      -1,    51,   352,    95,   275,   344,   118,    -1,    51,   352,
     118,    75,   344,   118,    -1,    75,   344,   118,    51,   352,
     118,    -1,    75,   344,   118,    -1,    76,   118,    -1,    77,
     118,    -1,   415,    -1,   276,   277,   118,    -1,   276,   280,
     118,    -1,    46,   119,   278,   120,    -1,   279,    -1,   278,
     121,   279,    -1,   415,    -1,    48,    -1,   400,    -1,   400,
     413,   344,    -1,   400,   119,   344,   120,    -1,   400,   119,
     403,   121,   344,   120,    -1,    52,    -1,    60,    -1,   400,
      -1,   391,    -1,   400,    -1,   413,   400,    -1,   415,    -1,
     415,    -1,   119,   120,    -1,   119,   284,   120,    -1,   119,
     101,   120,    -1,   119,   284,   118,   101,   120,    -1,   119,
       1,   120,    -1,   285,    -1,   284,   118,   285,    -1,   284,
       1,   285,    -1,   284,   118,     1,    -1,   396,   122,   291,
      -1,   409,   396,   122,   291,    -1,   289,    38,   396,   290,
      -1,    48,   396,   290,    -1,    29,   400,   283,    -1,    18,
     400,   283,   287,   286,    -1,   305,    -1,   122,   357,    -1,
     416,    -1,   415,    -1,   288,   400,    -1,   413,    -1,    -1,
     415,    -1,   409,    -1,    -1,   122,   291,    -1,   293,    -1,
     292,    -1,   297,    -1,    36,    26,   344,    -1,   298,    -1,
     294,    -1,     9,   123,   295,   124,    26,   293,    -1,   408,
       9,   123,   296,   124,    26,   358,    -1,   296,    -1,   295,
     118,   296,    -1,   295,     1,   296,    -1,   295,   118,     1,
      -1,   400,   100,   400,   122,   358,    -1,     9,    26,   298,
      -1,   358,    -1,   367,    -1,    10,   405,   300,   406,    15,
      -1,   301,    -1,   300,   118,   301,    -1,    -1,   306,    -1,
      -1,    -1,    38,   302,   214,   303,   301,    -1,   305,    -1,
     306,    -1,    -1,    -1,   307,   308,    -1,   321,    -1,   321,
     309,    -1,   309,    -1,   299,    -1,   335,    -1,    -1,   335,
     310,   336,   344,    -1,    87,    -1,    87,   344,    -1,    84,
      -1,    84,   119,    31,   120,    -1,    84,   119,   403,   120,
      -1,   337,    -1,    40,   322,    13,   405,   304,   406,    -1,
     324,    -1,    -1,   324,     7,   311,   405,   304,   406,    -1,
      -1,    -1,    11,   344,    26,   312,   328,   313,   326,    15,
      -1,    -1,    -1,    -1,    33,   314,   405,   300,    37,   315,
     344,   316,   406,    -1,    -1,    -1,    39,   317,   405,   344,
     318,    13,   304,   406,    -1,    -1,    17,   360,   336,   344,
     334,   344,   319,    13,   405,   304,   406,    -1,    -1,    17,
     360,    21,   344,   320,    13,   405,   304,   406,    -1,    19,
     394,    -1,   394,   122,    -1,   323,    -1,   322,   121,   323,
      -1,     1,    -1,   322,     1,   323,    -1,   322,   121,     1,
      -1,   344,    -1,   344,   122,   400,    -1,    -1,    20,   344,
      35,   325,   405,   304,   406,    -1,    -1,   327,   405,   300,
     406,    -1,     7,    -1,    64,    -1,    -1,   329,   411,    -1,
     330,    -1,   329,   118,   330,    -1,     1,    -1,   329,     1,
     330,    -1,   329,   118,     1,    -1,    -1,   332,   122,   331,
     405,   304,   406,    -1,   333,    -1,   332,   121,   333,    -1,
     332,   121,     1,    -1,   332,     1,   333,    -1,   332,     1,
      -1,   343,    -1,   343,   100,   343,    -1,   343,     1,   343,
      -1,   343,   100,     1,    -1,    30,    -1,    14,    -1,     1,
      -1,   360,    -1,   125,   360,    -1,    98,    -1,   413,    -1,
     390,   362,    -1,    93,    -1,    93,   119,   365,   120,    -1,
      83,   119,   344,   120,    -1,    83,   119,   344,   121,   364,
     120,    -1,    83,   119,   344,   121,   400,   362,   120,    -1,
      45,   338,   119,   354,   120,    -1,    45,   338,   119,   354,
     122,   339,   120,    -1,    45,   338,   119,   354,   122,   339,
     122,   339,   120,    -1,    45,   338,   119,   354,   122,   339,
     122,   339,   122,   342,   120,    -1,    -1,    95,    -1,   415,
      -1,   340,    -1,   341,    -1,   340,   121,   341,    -1,   353,
     119,   344,   120,    -1,   353,    -1,   342,   121,   353,    -1,
     344,    -1,   345,    -1,   345,   385,   345,    -1,   347,    -1,
     383,   347,    -1,   345,   386,   347,    -1,   345,   392,   347,
      -1,    -1,   345,   388,   346,   347,    -1,   349,    -1,   347,
     387,   349,    -1,   347,   393,   349,    -1,    -1,   347,   389,
     348,   349,    -1,   350,    -1,   349,   403,   350,    -1,   350,
      66,   350,    -1,   350,   107,   350,    -1,   349,    59,   358,
      -1,   349,    44,   358,    -1,   384,   350,    -1,   125,   350,
      -1,   353,    -1,   351,    -1,    24,    -1,   380,    -1,   360,
      -1,    88,    -1,    89,    -1,    91,    -1,   415,    -1,   353,
      -1,   354,    -1,   355,    -1,   354,   355,    -1,    90,    -1,
      96,    -1,   126,   356,    -1,    97,    -1,   121,    -1,   127,
      -1,   122,    -1,   118,    -1,   119,    -1,   120,    -1,   123,
      -1,   124,    -1,   128,    -1,   129,    -1,   130,    -1,   131,
      -1,   132,    -1,   133,    -1,   134,    -1,   125,    -1,   126,
      -1,   358,    -1,   359,    -1,   403,    -1,   403,   127,   403,
      -1,    94,   362,    -1,   361,    -1,   402,    -1,   367,    -1,
     119,   344,   120,    -1,   360,   127,   400,    -1,   360,   412,
      -1,   360,   123,   378,   124,    -1,   360,   123,   368,   124,
      -1,   361,   119,   120,    -1,   361,   119,   363,   364,   120,
      -1,    57,   400,    -1,    85,   119,   365,   120,    -1,    82,
     119,   363,   344,   120,    -1,    81,   119,   360,   120,    -1,
      86,   119,   360,   120,    -1,    86,   119,   360,   121,   364,
     120,    -1,    86,   119,   360,   121,   400,   362,   120,    -1,
     415,    -1,   119,   363,   364,   120,    -1,   119,   363,   360,
     120,    -1,    -1,   344,    -1,   364,   121,   344,    -1,     1,
      -1,   364,   121,     1,    -1,   366,    -1,   365,   121,   366,
      -1,   365,     1,   366,    -1,   365,   121,     1,    -1,   344,
      -1,   344,   122,   344,    -1,   344,   122,   344,   122,   344,
      -1,    16,    -1,   369,   411,    -1,   369,   118,   371,    -1,
     369,   411,   373,    -1,   371,    -1,   373,    -1,   370,    -1,
     369,   118,   370,    -1,   378,   122,   374,    -1,   374,    -1,
      11,   400,   122,   344,    26,   372,    -1,    11,   344,    26,
     372,    -1,   123,   368,   124,   411,    -1,    64,   374,   411,
      -1,   344,    -1,   119,   120,    -1,   119,   375,   120,    -1,
     123,   368,   124,    -1,   123,     1,   124,    -1,   377,    -1,
     375,   376,   377,    -1,   375,     1,   377,    -1,   118,    -1,
     121,    -1,   379,   122,   374,    -1,   374,    -1,   379,    -1,
     378,   121,   379,    -1,     1,    -1,   378,     1,   379,    -1,
     378,   121,     1,    -1,   400,    -1,   344,    -1,   344,   100,
     344,    -1,   123,   124,    -1,   123,   381,   124,    -1,   382,
      -1,   381,   121,   382,    -1,   381,     1,   382,    -1,   381,
     121,     1,    -1,   344,    -1,   344,   100,   344,    -1,   128,
      -1,   129,    -1,   108,    -1,   109,    -1,    25,    -1,   104,
      -1,   106,    -1,   105,    -1,   133,    -1,   132,    -1,   134,
      -1,    21,    -1,   128,    -1,   108,    -1,   129,    -1,   109,
      -1,    74,    -1,   103,    -1,   130,    -1,   131,    -1,    12,
      -1,    23,    -1,    69,    -1,    70,    -1,    27,    -1,    27,
       7,    -1,    65,    -1,   135,    -1,     8,    -1,     8,    35,
      -1,    43,    -1,   136,    -1,    92,    -1,     8,    -1,    27,
      -1,    25,    -1,    74,    -1,    69,    -1,    70,    -1,   128,
      -1,   108,    -1,   129,    -1,   109,    -1,   130,    -1,   131,
      -1,    12,    -1,    23,    -1,   107,    -1,    21,    -1,   132,
      -1,   413,    -1,   134,    -1,   104,    -1,   105,    -1,   106,
      -1,     8,    -1,   136,    -1,    27,    -1,   135,    -1,   103,
      -1,   393,    -1,   392,    -1,   110,    -1,   111,    -1,   112,
      -1,   113,    -1,   114,    -1,   115,    -1,   116,    -1,   117,
      -1,   395,    -1,   403,    -1,    88,    -1,   397,    -1,   400,
      -1,   397,   121,   400,    -1,   397,     1,   400,    -1,   397,
     121,     1,    -1,   397,     1,    -1,   400,    -1,   398,   121,
     400,    -1,   400,    -1,   400,   127,   400,    -1,   401,    -1,
     403,    -1,    92,    -1,    93,    -1,    94,    -1,    87,    -1,
      84,    -1,    81,    -1,    82,    -1,    86,    -1,    83,    -1,
      85,    -1,    41,    -1,    42,    -1,    43,    -1,    44,    -1,
      45,    -1,    75,    -1,    46,    -1,    47,    -1,    76,    -1,
      77,    -1,    78,    -1,    49,    -1,    50,    -1,    51,    -1,
      53,    -1,    55,    -1,    56,    -1,    57,    -1,    58,    -1,
      59,    -1,    61,    -1,    62,    -1,    63,    -1,    65,    -1,
      64,    -1,    66,    -1,    67,    -1,    68,    -1,    69,    -1,
      70,    -1,    71,    -1,     6,    -1,    72,    -1,    74,    -1,
     403,    -1,    95,    -1,   404,    -1,    52,    -1,    54,    -1,
      60,    -1,    79,    -1,    80,    -1,    73,    -1,    97,    -1,
      -1,    -1,    -1,    28,    -1,    95,    -1,    95,    -1,    -1,
     118,    -1,   126,    -1,    96,    -1,   125,    -1,   133,    -1,
     102,    -1,   127,    -1,     1,    -1,    -1,     1,    -1
d815 79
a893 78
       0,   212,   212,   213,   225,   227,   224,   230,   236,   238,
     235,   241,   242,   244,   243,   252,   254,   251,   260,   259,
     266,   268,   265,   275,   274,   282,   281,   287,   289,   287,
     294,   295,   300,   299,   302,   304,   303,   307,   312,   311,
     317,   321,   323,   324,   325,   330,   329,   337,   336,   344,
     345,   347,   352,   357,   358,   363,   364,   368,   369,   371,
     373,   375,   380,   385,   387,   388,   393,   398,   399,   401,
     403,   405,   410,   412,   414,   419,   419,   423,   425,   429,
     430,   431,   436,   441,   442,   446,   447,   449,   454,   455,
     457,   459,   461,   466,   471,   472,   478,   479,   484,   485,
     490,   491,   496,   496,   499,   501,   507,   508,   513,   514,
     515,   521,   522,   527,   528,   528,   531,   536,   541,   542,
     543,   548,   553,   554,   559,   559,   575,   578,   577,   581,
     588,   590,   592,   594,   596,   598,   602,   603,   608,   609,
     610,   614,   616,   625,   626,   631,   630,   655,   660,   661,
     666,   667,   670,   669,   676,   677,   682,   684,   689,   691,
     690,   698,   703,   704,   706,   707,   709,   711,   715,   726,
     725,   737,   740,   739,   744,   743,   751,   758,   764,   773,
     775,   780,   781,   783,   785,   787,   791,   796,   797,   803,
     803,   819,   820,   825,   826,   828,   830,   831,   832,   833,
     835,   836,   841,   843,   851,   854,   856,   858,   860,   865,
     867,   868,   870,   872,   874,   876,   880,   881,   886,   887,
     889,   891,   893,   898,   900,   906,   907,   909,   914,   915,
     919,   920,   922,   924,   926,   930,   936,   937,   942,   944,
     946,   948,   953,   954,   956,   958,   960,   964,   969,   974,
     975,   979,   981,   986,   988,   990,   992,   994,   998,  1000,
    1009,  1011,  1013,  1015,  1020,  1022,  1028,  1032,  1034,  1039,
    1040,  1042,  1047,  1048,  1052,  1053,  1055,  1060,  1061,  1063,
    1068,  1070,  1072,  1074,  1076,  1078,  1080,  1082,  1084,  1086,
    1088,  1092,  1093,  1095,  1100,  1101,  1103,  1110,  1121,  1124,
    1126,  1123,  1135,  1136,  1140,  1142,  1144,  1154,  1156,  1158,
    1160,  1165,  1166,  1170,  1175,  1177,  1180,  1179,  1183,  1185,
    1187,  1189,  1191,  1196,  1197,  1199,  1204,  1209,  1210,  1215,
    1216,  1218,  1220,  1222,  1224,  1229,  1230,  1234,  1235,  1239,
    1240,  1242,  1247,  1248,  1250,  1252,  1254,  1256,  1261,  1262,
    1264,  1266,  1270,  1272,  1274,  1276,  1278,  1280,  1285,  1287,
    1289,  1293,  1294,  1299,  1301,  1305,  1306,  1311,  1312,  1317,
    1318,  1319,  1323,  1328,  1329,  1333,  1335,  1344,  1345,  1347,
    1349,  1353,  1358,  1363,  1364,  1370,  1375,  1376,  1380,  1382,
    1384,  1386,  1383,  1391,  1393,  1398,  1402,  1402,  1408,  1409,
    1410,  1417,  1418,  1421,  1420,  1424,  1426,  1428,  1430,  1432,
    1434,  1435,  1437,  1440,  1439,  1448,  1450,  1447,  1469,  1471,
    1473,  1468,  1477,  1479,  1476,  1483,  1482,  1487,  1486,  1490,
    1495,  1500,  1501,  1503,  1505,  1507,  1512,  1514,  1520,  1519,
    1530,  1537,  1542,  1544,  1549,  1550,  1555,  1556,  1558,  1560,
    1562,  1568,  1567,  1574,  1575,  1577,  1579,  1581,  1585,  1587,
    1589,  1591,  1596,  1598,  1600,  1605,  1606,  1611,  1612,  1617,
    1619,  1621,  1623,  1625,  1627,  1629,  1631,  1633,  1635,  1641,
    1642,  1647,  1648,  1652,  1653,  1658,  1663,  1665,  1672,  1685,
    1687,  1692,  1693,  1695,  1697,  1700,  1699,  1706,  1707,  1709,
    1712,  1711,  1718,  1719,  1721,  1723,  1725,  1727,  1732,  1734,
    1736,  1737,  1738,  1740,  1741,  1746,  1747,  1748,  1752,  1753,
    1757,  1762,  1764,  1769,  1770,  1771,  1776,  1777,  1777,  1777,
    1777,  1777,  1777,  1777,  1777,  1778,  1778,  1778,  1778,  1778,
    1778,  1778,  1778,  1778,  1782,  1794,  1808,  1809,  1814,  1816,
    1820,  1821,  1823,  1825,  1827,  1829,  1831,  1833,  1835,  1837,
    1839,  1841,  1843,  1845,  1847,  1849,  1854,  1855,  1857,  1866,
    1870,  1872,  1874,  1876,  1881,  1882,  1884,  1886,  1892,  1894,
    1896,  1901,  1906,  1907,  1909,  1911,  1912,  1916,  1917,  1922,
    1924,  1929,  1931,  1936,  1941,  1946,  1948,  1950,  1952,  1954,
    1959,  1960,  1962,  1967,  1968,  1973,  1975,  1980,  1981,  1983,
    1985,  1987,  1992,  1994,  1996,  2001,  2003,  2008,  2009,  2011,
    2013,  2018,  2020,  2027,  2028,  2032,  2033,  2034,  2038,  2039,
    2040,  2041,  2042,  2043,  2044,  2048,  2049,  2050,  2051,  2052,
    2053,  2057,  2058,  2059,  2060,  2061,  2062,  2066,  2067,  2068,
    2069,  2073,  2074,  2075,  2076,  2080,  2083,  2084,  2085,  2086,
    2087,  2088,  2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,
    2102,  2103,  2104,  2105,  2106,  2107,  2108,  2109,  2110,  2111,
    2112,  2113,  2114,  2115,  2116,  2120,  2121,  2122,  2123,  2127,
    2128,  2129,  2130,  2136,  2137,  2141,  2146,  2151,  2153,  2155,
    2161,  2163,  2167,  2169,  2174,  2175,  2180,  2185,  2186,  2187,
    2188,  2189,  2190,  2191,  2192,  2193,  2194,  2195,  2196,  2197,
    2198,  2199,  2200,  2201,  2202,  2203,  2204,  2205,  2206,  2207,
    2208,  2209,  2210,  2211,  2212,  2213,  2214,  2215,  2216,  2217,
    2218,  2219,  2220,  2221,  2222,  2223,  2224,  2225,  2226,  2227,
    2228,  2229,  2233,  2238,  2239,  2240,  2241,  2242,  2244,  2245,
    2246,  2250,  2258,  2263,  2268,  2272,  2277,  2282,  2288,  2289,
    2294,  2295,  2296,  2300,  2301,  2305,  2306,  2312,  2316
d897 2
a898 2
#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
d902 21
a922 21
  "$end", "error", "$undefined", "prec_lower_than_error", "prec_if",
  "prec_import", "p_uses", "p_else", "p_and", "p_array", "p_begin",
  "p_case", "p_div", "p_do", "p_downto", "p_end", "p_file", "p_for",
  "p_function", "p_goto", "p_if", "p_in", "p_label", "p_mod", "p_nil",
  "p_not", "p_of", "p_or", "p_packed", "p_procedure", "p_to", "p_program",
  "p_record", "p_repeat", "p_set", "p_then", "p_type", "p_until", "p_var",
  "p_while", "p_with", "p_absolute", "p_abstract", "p_and_then", "p_as",
  "p_asm", "p_attribute", "p_bindable", "p_const", "p_constructor",
  "p_destructor", "p_external", "p_far", "p_finalization", "p_forward",
  "p_implementation", "p_import", "p_inherited", "p_initialization",
  "p_is", "p_near", "p_object", "p_only", "p_operator", "p_otherwise",
  "p_or_else", "p_pow", "p_qualified", "p_restricted", "p_shl", "p_shr",
  "p_unit", "p_value", "p_virtual", "p_xor", "p_asmname", "p_c",
  "p_c_language", "p_class", "p_override", "p_reintroduce", "p_Addr",
  "p_Assigned", "p_Dispose", "p_Exit", "p_FormatString", "p_New",
  "p_Return", "LEX_INTCONST", "LEX_INTCONST_BASE", "LEX_STRCONST",
  "LEX_REALCONST", "LEX_BUILTIN_PROCEDURE", "LEX_BUILTIN_PROCEDURE_WRITE",
  "LEX_BUILTIN_FUNCTION", "LEX_ID", "LEX_CARET_WHITE", "LEX_CARET_LETTER",
  "LEX_ASSIGN", "LEX_RENAME", "LEX_RANGE", "LEX_ELLIPSIS",
  "LEX_CONST_EQUAL", "LEX_SYMDIFF", "LEX_NE", "LEX_GE", "LEX_LE",
  "LEX_POWER", "LEX_BPPLUS", "LEX_BPMINUS", "LEX_CEIL_PLUS",
d924 26
a949 28
  "LEX_CEIL_DIV", "LEX_FLOOR_MULT", "LEX_FLOOR_DIV", "';'", "'('", "')'",
  "','", "':'", "'['", "']'", "'@@'", "'^'", "'.'", "'+'", "'-'", "'*'",
  "'/'", "'<'", "'='", "'>'", "'|'", "'&'", "$accept", "program_component",
  "program_component_1", "@@1", "@@2", "module_declaration", "@@3", "@@4",
  "@@5", "@@6", "@@7", "@@8", "interface_module", "@@9", "@@10",
  "module_interface", "@@11", "implementatation_module", "@@12",
  "module_block", "@@13", "@@14", "optional_unit_implementation",
  "optional_unit_init_and_final_part", "@@15", "@@16", "unit_initialization",
  "@@17", "rest_of_unit_constructor", "optional_init_and_final_part",
  "module_constructor", "@@18", "module_destructor", "@@19",
  "optional_program_heading", "optional_module_parameters",
  "optional_par_id_list", "optional_module_attributes", "export_part_list",
  "export_part", "export_list_or_all", "export_all", "export_list",
  "export_list_item", "optional_import_part", "@@20",
  "optional_import_part1", "import_specification_list",
  "import_specification", "optional_qualified",
  "optional_import_qualifier", "import_clause_list", "import_clause",
  "optional_rename", "declarations_and_uses", "declaration_or_uses",
  "any_declaration_part", "any_decl", "@@21", "interface_decl_part",
  "interface_decl", "implementation_decls", "implementation_decl", "@@22",
  "uses_part", "uses_list", "uses_specification", "optional_unit_filename",
  "simple_decl", "@@23", "simple_decl_1", "@@24", "label_list", "new_label",
  "constant_definition_list", "constant_definition",
  "variable_declaration_list", "variable_declaration", "@@25",
  "optional_variable_directive_list", "variable_directive", "@@26",
  "optional_variable_directive_list_no_external",
  "variable_directive_no_external", "absolute_or_value_specification",
  "@@27", "type_definition_list", "type_definition", "@@28", "@@29", "@@30",
d952 2
a953 1
  "type_denoter", "@@31", "type_denoter_1", "type_denoter_0",
d955 8
a962 7
  "unpacked_structured_type", "direct_access_index_type",
  "array_index_list", "ordinal_index_type", "record_field_list",
  "optional_fixed_part", "fixed_part", "record_section", "rest_of_variant",
  "variant_selector", "variant_list", "variant",
  "new_ordinal_type_non_iso", "new_ordinal_type", "enumerated_type",
  "enum_list", "subrange_type", "new_pointer_type", "pointer_domain_type",
  "new_procedural_type", "object_parent", "optional_abstract",
d964 7
a970 2
  "optional_value_specification", "var_init", "routine_interface_decl",
  "routine_declaration", "@@32", "@@33", "routine_or_method_heading",
d973 3
a975 3
  "remote_directive", "@@34", "optional_routine_directive_list",
  "attributes", "attribute_list", "attrib", "bp_directive",
  "operator_identifier", "operator_result_def",
d977 2
a978 4
  "formal_parameter", "resulttype", "optional_result_def",
  "optional_result_equals", "optional_protected",
  "optional_parameter_form", "parameter_form", "type_inquiry",
  "typename_or_conformant_array", "conformant_array",
d981 6
a986 7
  "statement_sequence", "optional_statement_vd", "@@35", "@@36",
  "optional_statement", "empty_lte", "statement", "@@37", "statement_1",
  "unlabelled_statement", "@@38", "@@39", "@@40", "@@41", "@@42", "@@43", "@@44",
  "@@45", "@@46", "@@47", "@@48", "set_label", "with_list", "with_variable",
  "if_then", "@@49", "optional_case_completer", "otherwise",
  "optional_case_element_list", "case_element_list", "case_element", "@@50",
  "case_constant_list", "one_case_constant", "for_direction",
d988 1
a988 8
  "asm_qualifier", "asm_operands", "nonempty_asm_operands", "asm_operand",
  "asm_clobbers", "static_expression", "expression", "simple_expression",
  "@@51", "term", "@@52", "factor", "primary", "unsigned_number",
  "optional_combined_string", "combined_string", "string_constants",
  "string_constant", "caret_chars", "typename_or_string255", "typename",
  "typename_1", "variable_or_routine_access",
  "variable_or_routine_access_no_builtin_function",
  "builtin_actual_parameter_list", "disable_function_calls",
d990 10
a999 1
  "write_actual_parameter", "untyped_file", "structured_constructor_list",
d1006 8
a1013 7
  "multiplying_operator", "or_operator", "and_operator", "builtin_proc",
  "operator_symbol", "pxsc_adding_operator", "pxsc_multiplying_operator",
  "label", "num_label", "id_list", "id_list1", "id_list_limited",
  "new_quid", "new_identifier", "new_identifier_1", "identifier", "id",
  "caret_letter", "pushlevel", "poplevel", "enable_lce", "packed",
  "i_protected", "module", "optional_semicolon", "pointer_char", "equals",
  "dot_or_error", "null", "err", 0
d1020 79
a1098 78
       0,   137,   138,   138,   140,   141,   139,   139,   143,   144,
     142,   142,   142,   145,   142,   146,   147,   142,   148,   142,
     150,   151,   149,   153,   152,   155,   154,   157,   158,   156,
     159,   159,   161,   160,   160,   162,   160,   160,   164,   163,
     165,   166,   166,   166,   166,   168,   167,   170,   169,   171,
     171,   171,   172,   173,   173,   174,   174,   175,   175,   175,
     175,   175,   176,   177,   177,   177,   178,   179,   179,   179,
     179,   179,   180,   180,   180,   182,   181,   183,   183,   184,
     184,   184,   185,   186,   186,   187,   187,   187,   188,   188,
     188,   188,   188,   189,   190,   190,   191,   191,   192,   192,
     193,   193,   195,   194,   194,   194,   196,   196,   197,   197,
     197,   198,   198,   199,   200,   199,   199,   201,   202,   202,
     202,   203,   204,   204,   206,   205,   207,   208,   207,   207,
     209,   209,   209,   209,   209,   209,   210,   210,   211,   211,
     211,   212,   212,   213,   213,   215,   214,   214,   216,   216,
     217,   217,   218,   217,   219,   219,   220,   220,   221,   222,
     221,   221,   223,   223,   223,   223,   223,   223,   224,   225,
     224,   224,   226,   224,   227,   224,   224,   224,   224,   228,
     228,   229,   229,   229,   229,   229,   230,   231,   231,   233,
     232,   234,   234,   235,   235,   235,   235,   235,   235,   235,
     235,   235,   236,   236,   237,   237,   237,   237,   237,   238,
     238,   238,   238,   238,   238,   238,   239,   239,   240,   240,
     240,   240,   240,   241,   241,   242,   242,   242,   243,   243,
     244,   244,   244,   244,   244,   245,   246,   246,   247,   247,
     247,   247,   248,   248,   248,   248,   248,   249,   250,   251,
     251,   252,   252,   253,   253,   253,   253,   253,   254,   254,
     255,   255,   255,   255,   256,   256,   256,   257,   257,   258,
     258,   258,   259,   259,   260,   260,   260,   261,   261,   261,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   263,   263,   263,   264,   264,   264,   265,   266,   267,
     268,   266,   269,   269,   270,   270,   270,   271,   271,   271,
     271,   272,   272,   273,   274,   274,   275,   274,   274,   274,
     274,   274,   274,   276,   276,   276,   277,   278,   278,   279,
     279,   279,   279,   279,   279,   280,   280,   281,   281,   282,
     282,   282,   283,   283,   283,   283,   283,   283,   284,   284,
     284,   284,   285,   285,   285,   285,   285,   285,   286,   286,
     286,   287,   287,   288,   288,   289,   289,   290,   290,   291,
     291,   291,   292,   293,   293,   294,   294,   295,   295,   295,
     295,   296,   297,   298,   298,   299,   300,   300,   301,   301,
     302,   303,   301,   304,   304,   305,   307,   306,   308,   308,
     308,   309,   309,   310,   309,   309,   309,   309,   309,   309,
     309,   309,   309,   311,   309,   312,   313,   309,   314,   315,
     316,   309,   317,   318,   309,   319,   309,   320,   309,   309,
     321,   322,   322,   322,   322,   322,   323,   323,   325,   324,
     326,   326,   327,   327,   328,   328,   329,   329,   329,   329,
     329,   331,   330,   332,   332,   332,   332,   332,   333,   333,
     333,   333,   334,   334,   334,   335,   335,   336,   336,   337,
     337,   337,   337,   337,   337,   337,   337,   337,   337,   338,
     338,   339,   339,   340,   340,   341,   342,   342,   343,   344,
     344,   345,   345,   345,   345,   346,   345,   347,   347,   347,
     348,   347,   349,   349,   349,   349,   349,   349,   350,   350,
     350,   350,   350,   350,   350,   351,   351,   351,   352,   352,
     353,   354,   354,   355,   355,   355,   356,   356,   356,   356,
     356,   356,   356,   356,   356,   356,   356,   356,   356,   356,
     356,   356,   356,   356,   357,   358,   359,   359,   360,   360,
     361,   361,   361,   361,   361,   361,   361,   361,   361,   361,
     361,   361,   361,   361,   361,   361,   362,   362,   362,   363,
     364,   364,   364,   364,   365,   365,   365,   365,   366,   366,
     366,   367,   368,   368,   368,   368,   368,   369,   369,   370,
     370,   371,   371,   372,   373,   374,   374,   374,   374,   374,
     375,   375,   375,   376,   376,   377,   377,   378,   378,   378,
     378,   378,   379,   379,   379,   380,   380,   381,   381,   381,
     381,   382,   382,   383,   383,   384,   384,   384,   385,   385,
     385,   385,   385,   385,   385,   386,   386,   386,   386,   386,
     386,   387,   387,   387,   387,   387,   387,   388,   388,   388,
     388,   389,   389,   389,   389,   390,   390,   390,   390,   390,
     390,   390,   391,   391,   391,   391,   391,   391,   391,   391,
     391,   391,   391,   391,   391,   391,   391,   391,   391,   391,
     391,   391,   391,   391,   391,   392,   392,   392,   392,   393,
     393,   393,   393,   394,   394,   395,   396,   397,   397,   397,
     397,   397,   398,   398,   399,   399,   400,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   402,   403,   403,   403,   403,   403,   403,   403,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   411,
     412,   412,   412,   413,   413,   414,   414,   415,   416
d1104 18
a1121 19
       0,     2,     0,     1,     0,     0,     8,     1,     0,     0,
      12,     1,     1,     0,     3,     0,     0,     9,     0,     6,
       0,     0,     8,     0,     7,     0,     7,     0,     0,     6,
       0,     4,     0,     3,     1,     0,     4,     1,     0,     3,
       1,     0,     2,     1,     1,     0,     6,     0,     6,     0,
       4,     4,     3,     1,     3,     1,     2,     1,     3,     1,
       3,     3,     3,     3,     1,     4,     1,     1,     3,     1,
       3,     3,     2,     3,     3,     0,     2,     0,     3,     1,
       3,     3,     4,     1,     1,     1,     3,     4,     1,     3,
       1,     3,     3,     2,     1,     2,     0,     2,     1,     1,
       0,     2,     0,     2,     3,     1,     0,     2,     1,     1,
       1,     0,     2,     1,     0,     2,     1,     3,     1,     3,
       3,     2,     1,     2,     0,     2,     2,     0,     4,     2,
       1,     3,     1,     3,     3,     2,     1,     1,     1,     2,
       1,     4,     8,     1,     2,     0,     8,     1,     1,     3,
       1,     2,     0,     5,     1,     3,     2,     1,     1,     0,
       3,     2,     1,     3,     1,     3,     3,     2,     5,     0,
       6,     3,     0,     9,     0,     9,     5,     6,     6,     3,
       3,     1,     3,     3,     3,     2,     3,     1,     2,     0,
d1123 18
a1140 14
       1,     2,     3,     3,     1,     3,     1,     3,     3,     6,
       1,     4,     3,     3,     3,     1,     1,     3,     1,     3,
       3,     2,     1,     1,     1,     0,     2,     7,     1,     2,
       1,     3,     3,     3,     2,     4,     0,     5,     3,     3,
       1,     1,     1,     3,     3,     1,     2,     5,     1,     1,
       1,     3,     3,     1,     3,     3,     3,     2,     3,     4,
       2,     2,     2,     3,     1,     1,     1,     2,     3,     1,
       3,     3,     1,     1,     1,     2,     1,     1,     2,     3,
       4,     3,     5,     3,     3,     1,     2,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     3,     3,     0,
       0,     9,     1,     1,     3,     5,     5,     5,     7,     5,
       5,     1,     1,     3,     2,     3,     0,     6,     6,     6,
       3,     2,     2,     1,     3,     3,     4,     1,     3,     1,
       1,     1,     3,     4,     6,     1,     1,     1,     1,     1,
d1142 4
a1145 5
       3,     3,     3,     4,     4,     3,     3,     5,     1,     2,
       1,     1,     2,     1,     0,     1,     1,     0,     2,     1,
       1,     1,     3,     1,     1,     6,     7,     1,     3,     3,
       3,     5,     3,     1,     1,     5,     1,     3,     0,     1,
       0,     0,     5,     1,     1,     0,     0,     2,     1,     2,
d1147 1
a1147 1
       1,     6,     1,     0,     6,     0,     0,     8,     0,     0,
d1149 1
a1149 1
       2,     1,     3,     1,     3,     3,     1,     3,     0,     7,
d1151 7
a1157 6
       3,     0,     6,     1,     3,     3,     3,     2,     1,     3,
       3,     3,     1,     1,     1,     1,     2,     1,     1,     2,
       1,     4,     4,     6,     7,     5,     7,     9,    11,     0,
       1,     1,     1,     1,     3,     4,     1,     3,     1,     1,
       3,     1,     2,     3,     3,     0,     4,     1,     3,     3,
       0,     4,     1,     3,     3,     3,     3,     3,     2,     2,
d1159 1
a1159 1
       1,     1,     2,     1,     1,     2,     1,     1,     1,     1,
d1161 7
a1167 9
       1,     1,     1,     1,     1,     1,     1,     3,     2,     1,
       1,     1,     3,     3,     2,     4,     4,     3,     5,     2,
       4,     5,     4,     4,     6,     7,     1,     4,     4,     0,
       1,     3,     1,     3,     1,     3,     3,     3,     1,     3,
       5,     1,     2,     3,     3,     1,     1,     1,     3,     3,
       1,     6,     4,     4,     3,     1,     2,     3,     3,     3,
       1,     3,     3,     1,     1,     3,     1,     1,     3,     1,
       3,     3,     1,     1,     3,     2,     3,     1,     3,     3,
       3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
a1168 2
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
d1170 1
a1172 2
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     2,     1,     3,     1,     3,     1,     1,     1,     1,
d1178 4
a1181 1
       1,     1,     0,     0,     0,     1,     1,     1,     0,     1,
a1234 1
       0,     0,     0,     1,     2,     0,     0,     0,     0,     0,
a1241 2
       0,     0,     0,     0,     0,     1,     2,     0,     0,     0,
       0,     0,     0,     0,     1,     2,     0,     1,     2,     0,
a1243 1
       0,     0,     0,     0,     0,     1,     0,     2,     2,     0,
d1245 6
a1250 1
       0,     0,     2,     1,     0,     0,     0,     0,     0,     0,
d1349 1
d1358 131
a1488 130
      49,     0,     0,   767,     0,     3,     7,    11,    12,   777,
       0,   777,   749,   718,   719,   720,   721,   722,   724,   725,
     729,   730,   731,   755,   732,   756,   733,   734,   735,   736,
     737,   757,   738,   739,   740,   742,   741,   743,   744,   745,
     746,   747,   748,   750,   760,   751,   723,   726,   727,   728,
     758,   759,   713,   714,   716,   712,   717,   715,   711,   708,
     709,   710,   753,   761,   777,   706,   707,   754,     0,     1,
       0,     0,     4,     0,    55,   777,     0,     0,    53,     0,
     777,    14,     0,   777,    75,    56,     0,    20,    18,     0,
       0,     0,   697,    51,    50,     0,     0,   330,     0,   327,
     331,   329,    96,    77,    25,   777,     0,    27,   777,    54,
     701,     0,     8,   326,   777,   774,     0,   773,     0,   102,
       0,    76,    27,    21,    23,     0,     0,    77,    52,   699,
     700,   698,    75,   328,   581,   512,   627,     0,     0,     0,
       0,     0,   515,   516,   523,   517,   777,   524,   625,   626,
       0,     0,     0,     0,   623,   624,     0,   489,   491,   497,
     502,   511,   510,   520,   521,   514,   549,   551,   513,     0,
       0,   550,   752,   332,   752,     0,     0,     0,     0,     0,
       0,     0,     0,    97,    99,   124,    98,   105,     0,   302,
     303,     0,    79,   777,     0,     0,     0,    16,   776,   775,
      19,   111,   106,   559,     0,   569,     0,     0,   569,   548,
     566,     0,   615,   621,     0,   617,   509,   526,   530,   531,
     532,   527,   529,   533,   534,   542,   543,   528,   535,   536,
     537,   538,   539,   540,   541,   525,   333,   634,   647,   649,
     639,   640,   628,   630,   629,   636,   638,   685,   686,   687,
     688,   635,   637,   632,   631,   633,   650,     0,     0,   495,
       0,   651,   643,   644,   653,   645,   646,   689,   690,   691,
     692,   641,   642,   654,     0,   500,     0,     0,     0,     0,
       0,     0,   522,   771,     0,   772,   770,     0,   554,   569,
     492,   508,     0,     0,   118,   777,   777,   132,   695,     0,
     130,   136,   137,   777,     0,     0,   678,   668,   671,   669,
     680,   682,   675,   676,   677,   670,   663,   665,   662,   664,
     666,   667,   672,   674,   681,   679,   777,   338,   684,   683,
     337,   673,   762,     0,   103,     0,   777,     0,    78,    84,
     777,    83,    26,     0,    59,     0,    57,     0,    27,   114,
     124,     0,     0,   578,     0,   574,     0,     0,   552,     0,
       0,     0,   616,   648,   490,   493,     0,   494,   652,   498,
       0,   499,   507,   545,   546,   506,   503,   504,   505,   609,
       0,   735,   742,   713,   714,   717,   715,   777,     0,     0,
     595,     0,   768,   587,   585,   586,   590,     0,   607,   612,
     752,   553,   557,     0,     0,     0,   117,     0,     0,   121,
     122,     0,     0,   364,   342,   135,   104,     0,     0,   304,
       0,     0,   777,   396,     6,   127,     0,     0,   125,   298,
     299,   323,    81,    80,     0,     0,   777,    85,    22,     0,
       0,     0,     0,    41,   112,   124,   113,   116,     0,     0,
      30,   107,   108,   109,   110,     0,   562,     0,     0,     0,
     560,     0,   563,     0,   572,   570,   514,     0,   622,   619,
     620,   618,   496,   501,     0,     0,     0,   595,   768,   596,
     595,   606,     0,   600,     0,   609,   595,     0,     0,     0,
     556,     0,   582,     0,     0,     0,   555,     0,   334,   120,
     119,   123,     0,     0,     0,     0,   766,     0,   343,     0,
     348,     0,     0,   366,   365,   777,     0,     0,   363,   361,
     133,   134,   131,   777,   777,   777,     0,   339,     0,   341,
     390,   763,   386,   389,     0,     0,   147,     0,   143,   764,
     702,   140,   126,   138,   764,   777,   335,     0,   336,     0,
       0,     0,    77,   777,     0,     0,     0,    90,     0,    88,
     777,    82,    60,    61,    58,   106,    66,     0,    62,    64,
      17,     0,     0,    43,    44,   115,   777,   777,    77,     0,
     777,   561,   579,   576,   577,   575,     0,   777,   568,   567,
       0,   547,     0,     0,   769,   594,     0,   603,   597,   604,
       0,     0,   599,     0,   598,   614,   588,   583,     0,   584,
     613,   610,   611,   608,   589,   558,   347,   777,   777,   367,
     345,   777,     0,   344,     0,     0,     0,   364,   778,     0,
     305,   358,   360,   362,   307,   309,   310,   306,   340,     0,
     396,     0,   656,     0,     0,     0,     0,   658,   657,   418,
     422,     0,   479,   660,   661,   659,     0,   407,   405,   655,
     470,     0,   401,   397,   400,   398,   412,   402,   410,   465,
     777,     0,   693,   752,   164,     0,   162,   764,   144,     0,
       0,   139,     0,     0,     0,   519,   518,   314,     0,   321,
     322,   100,   313,   324,   325,     0,     0,    86,     0,     0,
      93,    94,   124,    69,     0,    67,   777,   704,     0,     0,
       0,     0,    29,     0,    42,    96,     0,   297,   312,   311,
       0,   564,     0,   573,   571,     0,   592,     0,   602,   601,
     605,   614,   364,   356,     0,   355,   350,   351,     0,   349,
     367,     0,   765,     0,   352,   370,   369,   374,   371,   373,
     383,   384,     0,     0,     0,   359,   544,   391,   387,   385,
       0,     0,   429,   694,     0,   762,   762,   433,     0,   431,
     436,   480,     0,     0,     0,   406,     0,   466,   399,   413,
       0,   469,   430,   167,     0,     0,     0,     0,   703,   189,
     189,     0,   488,   316,   315,   320,   102,    87,    91,    92,
      89,    95,    24,     0,    63,     0,     0,    72,     0,   777,
       0,    45,    47,   102,    10,   580,   565,     0,     0,     0,
     368,   346,   354,     0,     0,     0,     0,   353,   308,   396,
     415,     0,   467,     0,   468,   438,   396,     0,     0,   762,
       0,     0,     0,     0,     0,     0,     0,   762,     0,   165,
     166,   163,     0,     0,   181,     0,   171,   169,   189,   145,
     187,     0,     0,   141,     0,     0,   777,   101,     0,    70,
      71,    68,    73,   705,    74,    65,   396,   396,    32,    38,
      31,    34,    37,   768,   591,   357,   382,     0,   377,     0,
     372,     0,   392,     0,   427,     0,   762,     0,   423,   434,
     396,   435,   432,   437,     0,   472,     0,   408,   409,   471,
     396,   404,   180,   185,     0,   179,     0,   189,     0,   777,
     777,   777,   777,   777,   188,     0,   581,   777,   777,     0,
       0,     0,     0,   524,     0,   772,   770,   190,   191,   200,
     197,   249,   250,   198,   199,   196,     0,   193,   544,   551,
     752,     0,     0,   215,     0,     0,     0,     0,     0,     0,
     393,   394,     0,   396,   396,    35,   593,     0,     0,     0,
       0,     0,   448,   416,     0,   446,     0,   453,     0,     0,
     464,   463,   462,     0,   396,   419,     0,   763,   475,   777,
       0,   777,   763,   183,   184,   182,   186,   777,     0,     0,
       0,   176,   269,   273,     0,   272,     0,   294,   295,   296,
     168,     0,   291,     0,   777,   158,     0,     0,     0,   216,
       0,   267,     0,     0,     0,     0,   230,     0,   228,   189,
     192,   194,   262,   265,   266,   264,     0,     0,   253,   260,
     551,   526,   261,     0,     0,     0,   195,   201,     0,     0,
     777,   317,   318,   319,   301,    46,    48,    33,    40,    39,
     396,   379,   380,   378,     0,     0,     0,   440,     0,     0,
     445,   457,     0,   451,     0,     0,   762,   425,   763,     0,
     396,   411,     0,   482,   483,     0,   481,   473,     0,   414,
     170,   178,   177,     0,     0,   777,   777,   293,   292,   161,
       0,     0,   148,   222,     0,   218,   223,   224,     0,     0,
     189,   268,   214,   213,     0,   234,     0,   226,   189,   212,
     252,   257,   251,     0,   258,   206,     0,   204,     0,     0,
     263,     0,   154,    36,     0,   375,     0,     0,   442,   443,
       0,   762,   449,   450,   447,   456,   455,   454,   762,   460,
     461,   459,   396,     0,   439,   420,   763,   476,   777,     0,
       0,   474,   271,   270,     0,     0,   160,   146,   221,     0,
       0,   217,   211,     0,   241,   248,     0,   752,   232,   233,
     231,   777,   255,   256,   254,     0,   202,     0,   203,   259,
     142,   381,   376,   417,   396,   396,   763,   762,   763,   424,
       0,   484,     0,   276,     0,   274,   277,     0,   777,     0,
     149,   150,   157,   220,   219,   189,     0,     0,   235,   207,
     208,   205,   155,   763,   763,   428,   396,   421,   477,     0,
     485,   173,     0,     0,   719,   724,   729,   730,   760,   758,
     759,   278,   275,   290,     0,   175,   151,   156,   209,   245,
       0,   242,     0,   239,   238,   441,   452,   763,     0,   486,
     777,   777,   777,   777,   286,   279,   189,   152,   246,   769,
     236,     0,   426,   478,     0,   364,   281,   283,   284,   777,
       0,   244,   243,   227,     0,   225,   487,     0,   280,   153,
     225,     0,   282,     0,   247,   768,   237
d1494 29
a1522 28
      -1,     4,     5,    84,   182,     6,   132,   450,    70,   106,
     348,   107,     7,   105,   195,   125,   196,     8,   122,   126,
     127,   443,   579,   880,   963,  1060,   881,   964,  1057,   572,
     573,   876,   574,   877,     9,    88,    89,    72,   345,   346,
     568,   569,   704,   705,   102,   103,   121,   191,   192,   340,
     436,   558,   559,   700,   119,   183,   796,   184,   185,   350,
     451,   349,   444,   445,   186,   293,   294,   409,   453,   335,
     428,   535,   299,   300,   542,   543,   537,   538,   923,  1101,
    1210,  1280,  1131,  1211,  1014,  1100,   675,   676,   917,   920,
     921,   786,   853,   854,   859,   860,   861,   937,   938,  1046,
    1126,   939,  1018,  1104,  1105,  1023,  1024,  1025,  1026,  1283,
    1173,  1250,  1251,  1174,  1106,   941,  1037,   942,   943,  1032,
    1033,  1001,  1004,  1204,  1205,  1242,  1010,  1011,   454,   187,
     552,   868,   188,   189,   190,   717,   429,   553,   864,   430,
     924,    98,    99,   555,   326,   526,   413,   509,   510,   630,
     516,   517,   511,   735,   744,   745,   746,   747,   887,   888,
     748,   749,   662,  1058,   532,   639,   829,   959,   960,   961,
     534,   663,   664,   780,   847,   893,  1067,   765,  1079,  1198,
     766,   986,  1153,   979,   665,   768,   769,   666,   896,  1140,
    1141,   973,   974,   975,  1148,   976,   977,   983,   667,   833,
     668,   772,  1082,  1083,  1084,  1258,   978,   792,   157,   366,
     158,   370,   159,   160,   161,   684,   162,   163,   164,   235,
     947,   750,   373,   165,   166,   209,   352,   467,   354,   355,
     167,   391,   392,   393,   394,   726,   395,   396,   482,   600,
     483,   488,   398,   168,   214,   215,   169,   170,   257,   258,
     274,   259,   275,   670,   327,   260,   276,   671,   301,  1027,
      91,   539,   706,    92,    65,   171,    66,    67,   423,   641,
     680,  1108,   708,    10,   492,   288,   518,   200,   414,   632
d1527 1
a1527 1
#define YYPACT_NINF -1200
d1530 131
a1660 130
     490,  6574,  8403, -1200,   298, -1200, -1200,   267, -1200,   278,
    8403,   290, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200,   290, -1200, -1200, -1200,   303, -1200,
     329,   325, -1200,   332, -1200,   224,  8403,   336, -1200,   349,
     278, -1200,  8403,  8154, -1200, -1200,   392, -1200,   431,   423,
     440,   133, -1200, -1200, -1200,   472,   533, -1200,   454, -1200,
     359, -1200, -1200,   536, -1200,   290,   502, -1200,   278, -1200,
    8403,  6664, -1200, -1200,  8154, -1200,  5604, -1200,  5604,   811,
    8403, -1200, -1200, -1200, -1200,   524,    67,   536, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200,  8403,   527,   534,
     544,   559, -1200, -1200, -1200, -1200,   566, -1200, -1200, -1200,
    5604,  5440,  5768,  1663, -1200, -1200,   595,  1219,   578,  1071,
      21, -1200, -1200,   309, -1200,   609,   600, -1200, -1200,  5768,
    5768, -1200,   601, -1200, -1200,  8403,  8403,  6394,  8403,  8403,
    8403,  2602,   736, -1200, -1200, -1200, -1200, -1200,   631, -1200,
   -1200,    78, -1200,   692,    67,   502,  6754, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200,  1613, -1200,  5604,  1613, -1200, -1200,
   -1200,   645, -1200,   667,    76, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,   765, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200,  5604,  5768, -1200,
    5768,   739, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200,  5768, -1200,  5768,  1361,  1361,  5768,
    5768,  5768, -1200, -1200,  3069, -1200, -1200,  8403, -1200,   656,
     578, -1200,  5604,    55, -1200,   757,   -11, -1200, -1200,   103,
   -1200, -1200, -1200,   369,   653,   658, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200,   668, -1200, -1200, -1200,
   -1200, -1200, -1200,    67, -1200,   607, -1200,  8403,  8485, -1200,
       8, -1200, -1200,    67, -1200,   119, -1200,   -21, -1200,   900,
     610,   497,  5604,   669,   216, -1200,   637,  2415, -1200,  5604,
    5604,  3457, -1200, -1200,   964,   578,  5768,   578, -1200,  1071,
    5768,  1071, -1200, -1200,   695, -1200, -1200, -1200, -1200, -1200,
    4738,  8567,  5686,   705,   709,   716,   719,   760,  4536,  2857,
     169,   723,   725, -1200, -1200, -1200, -1200,   128, -1200, -1200,
    1019, -1200, -1200,  2415,   734,  8403, -1200,  8403,  5604, -1200,
   -1200,  5038,  8403,    60, -1200,  8236, -1200,  6484,  8403, -1200,
    8403,  8403,  4451,    77, -1200, -1200,  6844,  6934, -1200, -1200,
     666, -1200, -1200, -1200,   731,  7024,   757, -1200, -1200,  8403,
    6124,   225,    67,   826, -1200, -1200, -1200, -1200,  8403,  8403,
     813, -1200, -1200, -1200, -1200,   776, -1200,   785,  5604,  5604,
   -1200,  3539, -1200,  3166, -1200, -1200,   693,   461, -1200, -1200,
   -1200, -1200,   578,  1071,  1361,   881,   786, -1200,   791, -1200,
     442, -1200,   238, -1200,   794,   800,   184,   802,    82,  5604,
   -1200,  2963,   859,  4738,  3263,  5686, -1200,   484, -1200, -1200,
   -1200, -1200,   807,  8403,  8403,  8403,   276,   812, -1200,   179,
   -1200,   893,   816,  8403, -1200,   668,   160,  8403, -1200, -1200,
   -1200, -1200, -1200,   668,   668,   668,   160, -1200,  8403, -1200,
   -1200,   815, -1200, -1200,  5223,  7114, -1200,  5944, -1200,   814,
   -1200, -1200,  8649, -1200,   -21,   309, -1200,   821, -1200,  5604,
     823,   828,   536, -1200,   829,   830,  7024, -1200,   308, -1200,
     835, -1200, -1200, -1200, -1200, -1200, -1200,  7204, -1200,   825,
   -1200,   499,   938,   924, -1200, -1200,   668,   668,   536,   940,
   -1200, -1200,   834, -1200, -1200, -1200,   509,   566, -1200, -1200,
    3621, -1200,   837,  5604, -1200, -1200,  4834, -1200, -1200, -1200,
    4834,  5686, -1200,  5604, -1200, -1200, -1200, -1200,  5686, -1200,
     857, -1200, -1200, -1200, -1200, -1200, -1200,   668,   668,   836,
   -1200,  7908,  5854, -1200,  8403,  1164,   840,    60, -1200,  1361,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,  6844,
     422,   957, -1200,  5604,  1613,  1314,  5604, -1200, -1200, -1200,
   -1200,  3703,   878, -1200, -1200, -1200,   858,   866,  5604, -1200,
     867,  1613, -1200, -1200, -1200,  5311,   971,   430, -1200,   609,
     566,   868, -1200,   870, -1200,   170, -1200,   876, -1200,  8403,
     874, -1200,   875,  5604,   228, -1200, -1200, -1200,   871, -1200,
   -1200, -1200,   623, -1200, -1200,   352,  8403, -1200,  7294,  8403,
   -1200, -1200,   662, -1200,   364, -1200,   558,   877,  8403,  7204,
     989,   990, -1200,   995, -1200, -1200,    67, -1200, -1200,   666,
    5604, -1200,   891, -1200, -1200,  3069, -1200,   988, -1200, -1200,
   -1200,   101,    57, -1200,  1164, -1200, -1200, -1200,   899, -1200,
     836,   263, -1200,   999, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200,  1017,  1164,   160, -1200, -1200, -1200, -1200, -1200,
    1001,   750, -1200, -1200,   997, -1200, -1200, -1200,   135, -1200,
     911, -1200,   918,  5604,  1260, -1200,  5604,   609, -1200, -1200,
     504, -1200, -1200,  8403,  6034,  7384,    50,   -21, -1200, -1200,
   -1200,   921, -1200, -1200,   965,   991,   841, -1200, -1200, -1200,
   -1200, -1200, -1200,  8731, -1200,  7474,  8403, -1200,  8403,   835,
     366, -1200, -1200,  1442, -1200, -1200, -1200,   919,   837,   139,
   -1200, -1200, -1200,  1155,  8403,  5604,   922, -1200, -1200,   422,
   -1200,  5604, -1200,  5604, -1200, -1200,    47,  5604,  5604, -1200,
    3785,  8403,   309,   617,   928,   929,   379, -1200,  5604, -1200,
   -1200, -1200,   931,   327, -1200,   925, -1200, -1200,   530,   278,
   -1200,  1493,   286, -1200,  5604,  5604,   309, -1200,   736, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200,   926,   926, -1200, -1200,
   -1200,  1004, -1200,   791, -1200, -1200, -1200,    81, -1200,   954,
   -1200,  8403, -1200,  2151, -1200,   468, -1200,   229, -1200, -1200,
     501, -1200, -1200, -1200,   799, -1200,  3166, -1200, -1200, -1200,
     501, -1200, -1200,  8403,  7564, -1200,  1361, -1200,   941,   245,
    1016,  1016,   481,   505, -1200,   939,   266,   668,   668,  6304,
    1035,  2021,  1361,  7826,  3360,  4940,  2723, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200,   963, -1200,     2,   554,
     675,   927,  1018, -1200,  5686,   946,   950,   951,   952,   953,
   -1200, -1200,   960,    77,   561, -1200, -1200,  8403,  7654,  1053,
    8403,   959, -1200, -1200,   516, -1200,    94, -1200,    66,  1072,
   -1200, -1200, -1200,  5604,   501, -1200,  1075, -1200, -1200,   309,
     649,   566, -1200, -1200, -1200, -1200, -1200,   481,  1036,  1074,
     730, -1200, -1200, -1200,  1033, -1200,  1028, -1200, -1200, -1200,
   -1200,  3867, -1200,  3949, -1200, -1200,  1310,  5522,  1069, -1200,
     393, -1200,  1081,  1082,  1096,   400, -1200,   987, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200,   992,   383, -1200, -1200,
     569,   751, -1200,  5604,  4031,  5604, -1200, -1200,  1010,  7990,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,   815, -1200,
      77, -1200, -1200, -1200,  1623,   996,  1085,    83,  5604,  2274,
   -1200,  5604,  4113, -1200,  5604,  4195, -1200, -1200, -1200,  5604,
     501, -1200,   251,   993, -1200,   994, -1200, -1200,  1000, -1200,
   -1200, -1200, -1200,  1002,  1006,  1005,  1005, -1200, -1200, -1200,
    5604,  1009, -1200, -1200,   123, -1200, -1200, -1200,  5604,  1008,
   -1200, -1200, -1200, -1200,  4642,  8403,  5135, -1200, -1200, -1200,
   -1200,  8403, -1200,  7744, -1200, -1200,   386, -1200,  1011,  5604,
   -1200,  1024, -1200,   815,  1013, -1200,  1361,  1361, -1200, -1200,
    1104, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200,   501,  1115, -1200, -1200, -1200, -1200,   309,   309,
    5604, -1200, -1200, -1200,  6214,  6214, -1200,    43,  5522,  5522,
    1103, -1200, -1200,  1108, -1200, -1200,  1025,    34, -1200, -1200,
   -1200,   652, -1200, -1200, -1200,  5604, -1200,  4277, -1200, -1200,
     255, -1200, -1200, -1200,    77,   532, -1200, -1200, -1200, -1200,
     489, -1200,  1026, -1200,  1133,  8072, -1200,  1138,   309,  5604,
   -1200, -1200, -1200, -1200, -1200, -1200,  4359,  5522, -1200, -1200,
   -1200, -1200, -1200,   815, -1200, -1200,   501, -1200, -1200,   309,
   -1200, -1200,  8403,  8403,    73,   325,  8403,  8403,  5358,   102,
     204,   191,  1039, -1200,  1038, -1200,  1063, -1200, -1200, -1200,
     425, -1200,   212, -1200, -1200, -1200, -1200, -1200,   684, -1200,
     668,   668,   668,   668, -1200, -1200, -1200, -1200,  5604,  5604,
      83,  1042, -1200, -1200,   309,    96, -1200, -1200, -1200,   652,
    5604, -1200, -1200, -1200,  1043,  8321, -1200,   108, -1200, -1200,
    8321,  1044, -1200,  1045, -1200,   791, -1200
d1666 29
a1694 28
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200,   968, -1200,  1097, -1200,   -74,
   -1200, -1200, -1200, -1200, -1200, -1200, -1200, -1200,   205,   357,
   -1200, -1200,   602, -1200, -1200,  1073,    69,   230, -1200,   368,
   -1200, -1200,   465,  -165,   -89, -1200,   -97, -1200,   474, -1200,
   -1200,   621,   -32,  -448,   464, -1200, -1200,   390, -1200,   622,
   -1200, -1200, -1200, -1200,  -312, -1200,   281,   752,  -138, -1200,
   -1200, -1200, -1200,   287, -1200,   647, -1200,  -377, -1200, -1200,
   -1200, -1200, -1200,     1, -1200, -1200, -1200,    61, -1200, -1200,
   -1200, -1200, -1200,   -83,  -736,  -972, -1200, -1200,   265, -1200,
   -1200,   247, -1200, -1200,  -967, -1199, -1200, -1200,  -249, -1200,
   -1200, -1200,  -383,   -16,  -838, -1200, -1200, -1200, -1200,  -633,
    -792,  -208,   282,    37, -1200, -1200,  -894, -1200, -1200,   856,
   -1200, -1200, -1200,  -319, -1200, -1200,   628, -1200, -1200,  -232,
      -8, -1200,  1100, -1200, -1200, -1200,  -292, -1200,   271,  -519,
    -613, -1200, -1200,   470,  -627,  -788,   147, -1200, -1200,  -575,
   -1200,   394,  -169,  -411,  -591, -1200, -1200,  -835,  -508,  -406,
   -1200, -1200,   555, -1200, -1200, -1200, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200, -1200,  -142, -1200, -1200, -1200,
     -51, -1200, -1200,  -170, -1200,  -739,  -171, -1200, -1200,   441,
   -1200, -1200,    64, -1200,    70, -1200,  -657,  1362,   966, -1200,
     -91, -1200,     7,  -149, -1200,  -826,  -526,   384,  -153, -1200,
    -583,  -272, -1200,  -168, -1200,  -560,   106,  -387,   449,   294,
    -581,  -344, -1200,   740,   742,   412,   744,  -360, -1200, -1200,
    -190,   955,  -336, -1200, -1200,   542, -1200, -1200, -1200, -1200,
   -1200, -1200, -1200, -1200, -1200,  1057,  1060,   597,  -471,   -72,
   -1200, -1200,  -443,    31, -1200, -1200,   824, -1200,  -741,  -928,
    -491,  -590,  -349,  1175,  -469,  -557,   -80,  -179,    -9,  -489
d1701 1
a1701 1
#define YYTABLE_NINF -778
d1704 227
a1930 278
      74,    73,    78,   216,    90,   372,   375,   637,   631,   595,
     282,   419,   531,   333,   754,   342,   497,   533,   631,   685,
     118,   291,   478,   940,   836,   837,   791,   722,   481,  1015,
     201,   455,    64,    68,   422,   752,   351,   446,   452,   356,
     957,    75,   962,   202,   751,   487,   755,   334,   194,   758,
    1109,   856,   484,   682,   862,    78,   405,  1119,  -777,  1081,
    -240,  -777,   513,   672,  1089,   987,    78,  1074,   198,   944,
     434,    74,    73,   945,   101,   992,   586,   360,   290,   337,
      77,   115,   967,   493,  -388,   530,  1291,   280,  -289,    71,
    1138,  1293,  -388,   940,  1208,  1071,    78,  -777,   900,    74,
      73,   331,  -614,  1090,   415,   101,   910,   820,   411,   628,
     781,  -777,   117,    96,   100,   530,   412,  -287,  1209,   819,
     439,  1044,   922,  -395,  1168,  1045,   827,   435,   281,   493,
     376,   377,   378,    79,   110,   614,   838,   210,  1172,   944,
     628,   129,   131,   945,   752,   100,  1181,  1139,   839,  1078,
    1154,   193,   115,   751,   424,   984,  -707,   611,   613,   115,
     678,   628,   115,   752,   438,  -388,  1075,   365,   203,   367,
    -595,   783,   751,   406,   672,  -777,   407,  -777,  -777,  -777,
     621,   997,  -777,   117,   341,  -613,   787,  -458,  -458,   466,
     117,  -289,  -753,   117,   199,  -388,   338,   361,   115,   968,
     362,  1213,  1214,   494,   495,   969,   295,   296,   302,   303,
     304,   305,   330,  1071,  -777,  1072,  1073,   459,  -777,  -288,
    -287,   416,  -614,   627,   417,  -622,  -395,   347,  1199,   117,
     629,   634,   635,   636,   533,   828,   481,   440,   892,   596,
     481,   730,   751,  1248,  1169,  1156,   631,  1170,   478,   494,
     495,  -696,   496,  -696,   111,  -696,   840,  -395,   807,  -395,
     484,   629,   757,   570,   484,   809,   985,   441,  1225,   489,
    1227,   951,   513,   513,   442,   472,  1175,  -753,  -395,    86,
     949,   369,   629,   371,   603,   419,   410,  1218,   784,   823,
    -595,  -613,  -777,  -595,  1279,  1255,  1256,   622,    69,   623,
     885,    71,  1039,  1042,   952,  -613,  -613,   575,  -595,   696,
      95,   631,  -753,  -753,   357,   399,   971,  1196,   401,    87,
     566,   692,  -288,   793,    71,   732,   733,   431,   913,  1272,
    1209,   437,    71,  1072,  1271,  1152,   460,   461,   128,   512,
     685,   951,   528,    76,   567,   999,   794,   640,   719,  1031,
     949,   565,  1034,   696,  1040,  1034,   597,   756,   598,   599,
    1224,   874,   -13,   872,  1000,   803,   669,   803,   193,   193,
     949,  1157,   953,  1158,   952,  -753,  -753,   473,   210,  1175,
     459,   817,  1246,   455,  1121,  1288,   824,  1185,   954,  1017,
     452,  1257,  1061,  1063,   628,   403,  -753,  -753,  -753,   144,
    1194,  1115,   514,  -753,   519,   147,   728,  1195,  -395,    76,
     729,   476,   203,   529,   966,  -768,  1130,  1149,  1151,   399,
     399,    80,   554,   533,     3,   897,  1268,   410,   697,   698,
     533,  1088,  -768,   619,  -395,   153,   295,  -388,   295,  -395,
    -768,   626,   953,   515,    83,   914,   302,   915,   302,   523,
      85,   524,   525,   527,    93,   691,  1226,   540,   544,  -388,
     530,   115,   953,  1085,   683,  -395,   560,    94,  1034,   980,
     347,   347,   797,   698,   752,  -388,   761,  1252,   116,   576,
     577,   715,   981,   751,   804,   805,   875,   805,   411,  -768,
      -2,  -395,   117,   777,   587,  -395,   418,   669,   982,   909,
     461,  1111,  -395,  1122,  1123,  1070,  1186,  1187,  -395,   710,
     104,  -395,   631,  -395,   711,   629,  -395,  1068,  1116,   990,
    -768,     1,   399,  -768,   399,   399,   -15,    71,  -403,  1252,
    1252,  -768,  -403,  -395,   617,   618,   686,   814,  -395,  -395,
    -388,   108,   489,  1269,   431,  -768,  1013,  -395,   633,   512,
     512,   701,   740,  1007,  -395,  -210,  1117,   533,   533,   638,
     109,     2,   358,  -403,  -613,  -395,   677,   112,   540,  -210,
    -266,   431,  -172,   544,   113,   114,  -388,  1007,   210,  1008,
    -768,   589,   590,  1009,  -266,     3,   261,   560,    86,   948,
     262,   918,   120,   283,  1050,  -210,  -395,   124,   707,   530,
    -210,   263,   832,  1008,   615,   590,   115,  1009,   919,  1228,
    -266,  1229,   514,   514,  -388,  -266,   175,   456,   519,  -395,
     284,   264,   285,   286,   287,    -9,  -210,   399,   448,   721,
     590,   399,  1085,  1085,  1069,  1020,  1021,   117,   869,   449,
     871,  -266,   197,   425,   996,   426,   204,   265,   266,  1133,
    -395,  1098,  -210,   205,   533,   427,  -210,   699,   806,   948,
     756,   210,  1287,   206,   798,    -9,   800,  -266,   175,    71,
     540,  -266,  -210,   181,  -210,   546,  -546,   802,   207,  -388,
     448,   834,   685,   548,   554,   208,   499,  -266,   500,  -266,
    -546,   449,   267,   268,   269,   270,   899,   701,   902,   958,
     834,  -546,   520,  1259,   522,   283,   857,   858,   271,   272,
     788,   554,    71,   855,   273,   236,  -546,   545,   546,   289,
     547,  -546,   292,   519,  1007,   181,   548,   560,  1094,   560,
     801,  1093,   284,   283,   285,   286,   287,   905,   906,   707,
     707,   549,   550,   551,  1107,  1107,   332,  -546,  1286,   336,
    1008,   282,  -761,   583,  1009,   585,   399,   462,   463,   339,
     284,  -710,   285,   286,   287,   358,  -761,   359,  1292,  1087,
     590,   831,   363,  -546,   368,  -710,   402,  -546,   408,   631,
     420,  1270,    23,  1223,    25,   421,   216,   411,   533,   283,
      31,   458,  -761,  -546,  -546,  -546,  -546,  -761,  -546,  -546,
     701,  -710,   474,    44,  1273,  1274,  -710,   562,   564,    50,
      51,   432,   433,   588,   677,   677,   284,   175,   285,   286,
     287,    -5,   474,  -761,   204,    62,  1296,    63,   205,   176,
     993,   995,  -710,   177,   707,   206,   707,   707,   207,   873,
     178,   855,   855,   491,   849,   851,   283,   490,   832,  -761,
     556,  -300,   115,  -761,   498,   889,   571,   686,  -710,   176,
     179,   180,  -710,   177,  1191,  1192,  1178,  1180,   578,  -761,
     178,  -761,   903,   284,   181,   285,   286,   287,  -710,   208,
    -710,  -710,  -710,   117,  -710,  1281,  1282,  1164,  1165,   144,
     179,   180,   736,   739,   580,   147,  1107,  1107,  1142,  1144,
    1145,  1147,   469,   471,   181,   581,   175,   592,   593,   594,
    1002,  1005,  1005,  1012,  1012,   -28,   601,  1019,   176,   988,
    1028,   989,   889,   608,   602,   153,   604,   616,   628,   178,
     -28,   624,   620,   640,   699,   679,   925,   991,   625,   687,
     172,   689,   174,   926,   709,  1254,   690,   693,   694,   179,
     180,   135,   136,   712,   713,   716,   720,   489,   734,   929,
     725,   930,   753,   181,  1035,  1038,  1035,  1035,  1275,  1276,
    1277,  1278,   759,   771,   174,   174,   174,   773,   779,    23,
    1086,    25,   210,   279,   137,   774,   776,    31,  1012,   795,
     782,   238,  -694,   174,   174,   785,   789,   790,   889,   889,
      44,  1065,   811,   812,   808,  1102,    50,    51,   138,   139,
     711,   816,   140,   141,   818,   142,   143,   144,   145,   821,
    -707,   146,    62,   147,    63,   825,   826,   830,   174,   239,
     174,   174,   835,   841,  -707,   148,   149,   842,   240,   863,
     865,  1132,   866,   883,  -395,   891,   150,   916,   907,   908,
     151,   912,   152,   153,   970,   154,   155,   965,  1003,   998,
    -707,  1029,  1016,  1043,  1051,  -707,  1049,   241,  1052,  1053,
    1054,  1055,   245,   246,   247,   248,   249,   250,  1056,  1064,
    1035,   174,   174,  1066,   174,  1076,  1002,  1002,  1080,  1092,
    1091,  -707,   251,   252,  1095,  1110,  1112,  1113,   174,   256,
     174,   374,   374,   174,   174,   174,  1096,  1114,   400,  1118,
    1129,  1137,  1120,  1160,  1159,   277,   174,  -707,  1136,  1193,
    1161,  -707,  1162,    23,  1000,    25,  1163,  1167,  1197,  1215,
     278,    31,  1171,  1244,  1216,  1188,   824,  -707,  -707,  -707,
    -707,  -707,  1190,  -707,    44,  1176,  1230,  1217,  1231,  1086,
      50,    51,  1182,  1245,  1184,  1206,  1206,  1265,  1267,  1212,
    1266,  1285,  1290,   343,  1294,  1295,    62,    81,    63,  1059,
     882,   134,  1012,   741,   810,   714,   174,   695,   123,   813,
     134,   174,  1212,   174,   174,   174,   867,   702,   561,   681,
     174,  1222,   742,   279,   174,   279,  1030,  1243,  1047,   686,
     743,  1253,  1207,  1006,   400,   447,   174,    23,   718,    25,
     822,  1135,   400,   400,   133,    31,    23,   886,    25,  1284,
     778,   848,  1200,   364,    31,   846,   904,   174,    44,  1201,
     884,   606,   174,   607,    50,    51,   609,    44,   328,   397,
     237,   329,   762,    50,    51,    82,   238,     0,     0,     0,
      62,     0,    63,     0,     0,     0,     0,     0,     0,    62,
       0,    63,     0,  1260,  1261,     0,   519,  1262,  1263,     0,
    1012,     0,     0,     0,     0,     0,  1028,     0,     0,     0,
       0,  1028,   174,   174,   239,   174,     0,   400,     0,     0,
       0,   844,     0,   240,     0,     0,     0,   279,   591,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1103,    23,   174,    25,   400,     0,   400,   400,   174,
      31,     0,   241,   242,   243,   244,   134,   245,   246,   247,
     248,   249,   250,    44,   135,   136,     0,     0,   742,    50,
      51,     0,     0,     0,     0,     0,     0,   251,   252,     0,
       0,   253,   254,   255,   256,    62,     0,    63,   673,     0,
       0,     0,    23,     0,    25,     0,    23,   137,    25,     0,
      31,     0,     0,   174,    31,     0,     0,     0,     0,     0,
       0,     0,     0,    44,     0,     0,     0,    44,     0,    50,
      51,   138,   139,    50,    51,   140,   141,     0,   142,   143,
     144,   145,   298,     0,   146,    62,   147,    63,     0,    62,
       0,    63,     0,    23,   174,    25,     0,   174,   148,   149,
     400,    31,     0,     0,   400,   174,     0,   174,     0,   934,
       0,     0,   174,   151,    44,   152,   153,     0,   154,   155,
      50,    51,     0,     0,     0,     0,     0,     0,   175,   374,
       0,     0,   878,   374,     0,     0,    62,   -41,    63,     0,
     176,     0,     0,     0,   177,     0,     0,   174,   174,   763,
     174,   178,   571,     0,     0,   174,     0,     0,   156,     0,
     173,     0,   174,     0,     0,   174,     0,     0,     0,   174,
       0,   179,   180,     0,   628,     0,     0,     0,     0,     0,
     879,     0,   925,     0,     0,   181,     0,   174,     0,   926,
       0,   927,   211,   213,     0,     0,     0,   135,   136,     0,
       0,   742,   928,     0,     0,   929,     0,   930,     0,   743,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     931,     0,     0,     0,   174,    23,     0,    25,     0,   400,
     137,     0,     0,    31,     0,     0,     0,     0,   374,     0,
       0,   932,     0,     0,     0,     0,    44,     0,   353,     0,
       0,     0,    50,    51,   138,   139,     0,   374,   140,   141,
       0,   142,   143,   144,   145,     0,     0,   146,    62,   933,
      63,     0,     0,     0,     0,     0,     0,   174,   845,     0,
     174,   148,   149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   934,     0,     0,     0,   151,     0,   935,   936,
       0,   154,   155,     0,     0,     0,     0,     0,     0,   134,
       0,     0,  1134,     0,     0,     0,     0,     0,     0,   134,
       0,     0,     0,     0,     0,     0,   390,   374,     0,   174,
       0,   742,     0,     0,   404,   174,     0,   174,     0,     0,
       0,   174,   174,     0,   174,    23,     0,    25,     0,     0,
     137,     0,   174,    31,     0,    23,     0,    25,     0,     0,
       0,     0,     0,    31,     0,   950,    44,     0,   174,   174,
       0,     0,    50,    51,   138,   139,    44,     0,   140,   141,
       0,     0,    50,    51,     0,     0,     0,   146,    62,     0,
      63,     0,     0,     0,   457,     0,     0,   174,    62,   465,
      63,   468,   213,   213,     0,     0,     0,     0,     0,     0,
     400,     0,   150,     0,     0,     0,     0,     0,     0,     0,
     374,     0,   475,     0,   477,     0,     0,     0,     0,     0,
     480,   486,     0,     0,     0,   950,   374,     0,   400,   400,
     217,     0,     0,     0,     0,   465,     0,     0,     0,     0,
     501,     0,     0,     0,     0,   174,     0,     0,   174,     0,
       0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   174,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     582,   353,     0,   353,   374,   465,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   174,     0,     0,     0,     0,
     950,   950,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   605,     0,   390,     0,   610,   610,   477,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   174,   174,   174,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   374,     0,
       0,     0,   174,   174,     0,   174,   174,     0,   174,   174,
       0,     0,     0,   174,     0,     0,     0,     0,     0,     0,
       0,   688,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   174,     0,     0,     0,     0,     0,
       0,     0,   174,     0,     0,     0,     0,     0,  1177,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   724,   174,     0,   727,     0,     0,   390,     0,
     374,   374,   390,   477,     0,   731,     0,     0,     0,     0,
     477,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   174,     0,     0,     0,     0,     0,
       0,     0,   950,   950,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   760,     0,     0,   764,   174,
       0,   174,     0,   770,     0,     0,     0,     0,     0,     0,
     775,     0,   628,     0,     0,     0,     0,     0,     0,     0,
     925,     0,     0,   174,     0,     0,     0,   926,     0,   927,
     174,   950,     0,     0,     0,   135,   136,     0,     0,   742,
     928,     0,     0,   929,     0,   930,     0,   743,     0,     0,
       0,     0,   174,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    23,     0,    25,     0,     0,   137,     0,
       0,    31,   815,     0,     0,     0,     0,   390,     0,   932,
       0,     0,   174,   174,    44,     0,     0,     0,     0,     0,
      50,    51,   138,   139,   174,     0,   140,   141,     0,   142,
     143,   144,   145,     0,     0,   146,    62,   933,    63,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   148,
     149,     0,     0,     0,     0,   843,     0,     0,   353,     0,
     934,     0,     0,     0,   151,     0,   935,   936,     0,   154,
     155,     0,   972,     0,     0,     0,     0,     0,  -444,     0,
       0,     0,     0,     0,     0,     0,  -444,   134,     0,     0,
       0,     0,     0,     0,     0,   135,   136,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   890,     0,     0,
       0,     0,     0,   894,     0,   895,     0,     0,     0,   898,
     770,     0,   770,    23,     0,    25,     0,     0,   137,     0,
     911,    31,     0,     0,     0,  -444,     0,     0,     0,     0,
       0,     0,     0,   946,    44,     0,   955,   956,     0,     0,
      50,    51,   138,   139,     0,     0,   140,   141,     0,   142,
     143,   144,   145,     0,     0,   146,    62,   147,    63,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   148,
     149,     0,     0,     0,     0,     0,     0,     0,   465,     0,
     150,     0,     0,     0,   151,  1143,   152,   153,     0,   154,
     155,  -769,     0,     0,     0,     0,     0,     0,     0,  -769,
     134,     0,     0,   946,     0,     0,   211,     0,   135,   136,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1048,     0,     0,   477,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    23,     0,    25,     0,
       0,   137,     0,     0,    31,     0,     0,     0,  -769,     0,
       0,     0,     0,     0,     0,  1077,     0,    44,     0,     0,
       0,     0,     0,    50,    51,   138,   139,     0,     0,   140,
     141,     0,   142,   143,   144,   145,     0,     0,   146,    62,
     147,    63,     0,   477,     0,     0,     0,     0,   946,   946,
       0,     0,   148,   149,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,     0,     0,     0,   151,     0,   152,
     153,     0,   154,   155,     0,  1124,  1127,  1128,     0,     0,
       0,     0,     0,     0,     0,     0,   464,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   134,     0,     0,     0,     0,     0,     0,     0,   135,
     136,  1155,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1166,     0,     0,     0,     0,    23,     0,    25,
    1048,     0,   137,     0,     0,    31,   946,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
       0,  1189,     0,     0,    50,    51,   138,   139,     0,     0,
     140,   141,     0,   142,   143,   144,   145,     0,     0,   146,
      62,   147,    63,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1202,   148,   149,     0,     0,     0,     0,     0,
     946,   946,     0,     0,   150,     0,     0,     0,   151,     0,
     152,   153,     0,   154,   155,     0,     0,  1219,     0,  1221,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1247,     0,     0,     0,     0,     0,     0,     0,   946,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1264,     0,     0,     0,     0,     0,     0,     0,    12,     0,
     306,     0,     0,     0,   307,     0,     0,     0,     0,     0,
       0,     0,     0,   308,     0,   309,     0,     0,     0,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1289,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
       0,     0,     0,     0,    59,    60,    61,    62,     0,    63,
       0,     0,     0,     0,   115,   311,   312,   313,   314,   315,
     316,   317,   247,   248,   249,   250,   267,   268,   269,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    12,
     318,   319,   320,   321,   322,   117,   323,   324,   325,   134,
       0,   927,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   928,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
      19,     0,    20,    21,    22,    23,    24,    25,    26,    27,
d1934 244
a2177 2
      58,     0,     0,     0,     0,    59,    60,    61,    62,     0,
    1041,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2179 12
a2190 19
       0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   485,     0,
       0,     0,     0,    12,     0,     0,     0,     0,   380,     0,
       0,     0,     0,   134,     0,     0,     0,     0,     0,     0,
       0,   135,   136,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
      15,    16,    17,    18,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,   381,    29,    30,    31,    32,    33,
      34,   382,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,   383,   384,
      54,    55,   385,   386,    58,   142,   143,   144,   145,    59,
      60,   387,    62,   147,    63,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   379,   148,   149,     0,     0,    12,
       0,     0,     0,     0,   380,     0,   388,     0,     0,   134,
     389,   212,   152,   153,     0,   154,   155,   135,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
      19,     0,    20,    21,    22,    23,    24,    25,    26,    27,
     381,    29,    30,    31,    32,    33,    34,    35,    36,    37,
d2192 9
a2200 10
      48,    49,    50,    51,   383,   384,    54,    55,   385,   386,
      58,   142,   143,   144,   145,    59,    60,   387,    62,   147,
      63,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     379,   148,   149,     0,     0,    12,     0,     0,     0,     0,
     380,     0,   388,     0,     0,   134,   389,  -769,   152,   153,
       0,   154,   155,   135,   136,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,    14,    15,    16,    17,    18,    19,     0,    20,    21,
      22,    23,    24,    25,    26,    27,   381,    29,    30,    31,
      32,    33,    34,   382,    36,    37,    38,    39,    40,    41,
d2202 7
a2208 18
     383,   384,    54,    55,   385,   386,    58,   142,   143,   144,
     145,    59,    60,   387,    62,   147,    63,   464,     0,     0,
       0,     0,    12,     0,     0,     0,     0,   148,   149,     0,
       0,     0,   134,     0,     0,     0,     0,     0,   388,     0,
     135,   136,   389,     0,   152,   153,     0,   154,   155,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,   381,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,   383,   384,    54,
      55,   385,   386,    58,   142,   143,   144,   145,    59,    60,
     387,    62,   147,    63,   612,     0,     0,     0,     0,    12,
       0,     0,     0,     0,   148,   149,     0,     0,     0,   134,
       0,     0,     0,     0,     0,   150,     0,   135,   136,   151,
       0,   152,   153,     0,   154,   155,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
      19,     0,    20,    21,    22,    23,    24,    25,    26,    27,
     381,    29,    30,    31,    32,    33,    34,    35,    36,    37,
d2210 62
a2271 126
      48,    49,    50,    51,   383,   384,    54,    55,   385,   386,
      58,   142,   143,   144,   145,    59,    60,   387,    62,   147,
      63,  1036,     0,     0,     0,     0,    12,     0,     0,     0,
       0,   148,   149,     0,     0,     0,   134,     0,     0,     0,
       0,     0,   150,     0,   135,   136,   151,     0,   152,   153,
       0,   154,   155,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,    17,    18,    19,     0,    20,
      21,    22,    23,    24,    25,    26,    27,   381,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,   383,   384,    54,    55,   385,   386,    58,   142,   143,
     144,   145,    59,    60,   387,    62,   147,    63,   470,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   148,   149,
       0,     0,     0,   134,     0,     0,     0,     0,     0,   150,
       0,   135,   136,   151,     0,   152,   153,     0,   154,   155,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    23,
       0,    25,     0,     0,   137,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,     0,    50,    51,   138,   139,
     584,     0,   140,   141,     0,   142,   143,   144,   145,     0,
       0,   146,    62,   147,    63,   134,     0,     0,     0,     0,
       0,     0,     0,   135,   136,   148,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   150,     0,     0,     0,
     151,     0,   152,   153,     0,   154,   155,     0,     0,     0,
       0,    23,     0,    25,     0,     0,   137,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,     0,     0,     0,     0,     0,    50,    51,
     138,   139,   723,     0,   140,   141,     0,   142,   143,   144,
     145,     0,     0,   146,    62,   147,    63,   134,     0,     0,
       0,     0,     0,     0,     0,   135,   136,   148,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,     0,
       0,     0,   151,     0,   152,   153,     0,   154,   155,     0,
       0,     0,     0,    23,     0,    25,     0,     0,   137,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
      50,    51,   138,   139,   767,     0,   140,   141,     0,   142,
     143,   144,   145,     0,     0,   146,    62,   147,    63,   134,
       0,     0,     0,     0,     0,     0,     0,   135,   136,   148,
     149,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,     0,     0,     0,   151,     0,   152,   153,     0,   154,
     155,     0,     0,     0,     0,    23,     0,    25,     0,     0,
     137,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,     0,     0,
       0,     0,    50,    51,   138,   139,   901,     0,   140,   141,
       0,   142,   143,   144,   145,     0,     0,   146,    62,   147,
      63,   134,     0,     0,     0,     0,     0,     0,     0,   135,
     136,   148,   149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   150,     0,     0,     0,   151,     0,   152,   153,
       0,   154,   155,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   137,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
       0,     0,     0,     0,    50,    51,   138,   139,  1097,     0,
     140,   141,     0,   142,   143,   144,   145,     0,     0,   146,
      62,   147,    63,   134,     0,     0,     0,     0,     0,     0,
       0,   135,   136,   148,   149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,     0,     0,     0,   151,     0,
     152,   153,     0,   154,   155,     0,     0,     0,     0,    23,
       0,    25,     0,     0,   137,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,     0,    50,    51,   138,   139,
    1099,     0,   140,   141,     0,   142,   143,   144,   145,     0,
       0,   146,    62,   147,    63,  -159,     0,     0,     0,     0,
       0,     0,     0,  -159,  -159,   148,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   388,     0,     0,     0,
     389,     0,   152,   153,     0,   154,   155,     0,     0,     0,
       0,  -159,     0,  -159,     0,     0,  -159,     0,     0,  -159,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -159,     0,     0,     0,     0,     0,  -159,  -159,
    -159,  -159,  1125,     0,  -159,  -159,     0,  -159,  -159,  -159,
    -159,     0,     0,  -159,  -159,  -159,  -159,   134,     0,     0,
       0,     0,     0,     0,     0,   135,   136,  -159,  -159,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -159,     0,
       0,     0,  -159,     0,  -159,  -159,     0,  -159,  -159,     0,
       0,     0,     0,    23,     0,    25,     0,     0,   137,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
      50,    51,   138,   139,  1146,     0,   140,   141,     0,   142,
     143,   144,   145,     0,     0,   146,    62,   147,    63,   134,
       0,     0,     0,     0,     0,     0,     0,   135,   136,   148,
     149,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,     0,     0,     0,   151,     0,   152,   153,     0,   154,
     155,     0,     0,     0,     0,    23,     0,    25,     0,     0,
     137,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,     0,     0,
       0,     0,    50,    51,   138,   139,  1150,     0,   140,   141,
       0,   142,   143,   144,   145,     0,     0,   146,    62,   147,
      63,   134,     0,     0,     0,     0,     0,     0,     0,   135,
     136,   148,   149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   150,     0,     0,     0,   151,     0,   152,   153,
       0,   154,   155,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   137,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
       0,     0,     0,     0,    50,    51,   138,   139,  1220,     0,
     140,   141,     0,   142,   143,   144,   145,     0,     0,   146,
      62,   147,    63,   134,     0,     0,     0,     0,     0,     0,
       0,   135,   136,   148,   149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,     0,     0,     0,   151,     0,
     152,   153,     0,   154,   155,     0,     0,     0,     0,    23,
       0,    25,     0,     0,   137,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,     0,    50,    51,   138,   139,
    1249,     0,   140,   141,     0,   142,   143,   144,   145,     0,
       0,   146,    62,   147,    63,   134,     0,     0,     0,     0,
       0,     0,     0,   135,   136,   148,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   150,     0,     0,     0,
     151,     0,   152,   153,     0,   154,   155,     0,     0,     0,
       0,    23,     0,    25,     0,     0,   137,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,     0,     0,     0,     0,     0,    50,    51,
     138,   139,     0,     0,   140,   141,     0,   142,   143,   144,
     145,     0,     0,   146,    62,   147,    63,    12,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   148,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,     0,
       0,     0,   151,     0,   152,   153,     0,   154,   155,     0,
       0,     0,    13,    14,    15,    16,    17,    18,    19,     0,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,     0,
       0,     0,    12,    59,    60,    61,    62,     0,    63,     0,
       0,     0,   134,   115,     0,     0,     0,     0,     0,     0,
     135,   136,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,   117,    20,    21,    22,    23,    24,
      25,    26,    27,   381,    29,    30,    31,    32,    33,    34,
d2273 9
a2281 10
      45,    46,    47,    48,    49,    50,    51,   383,   384,    54,
      55,   385,   386,    58,   142,   143,   144,   145,    59,    60,
     387,    62,   147,    63,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   148,   149,     0,     0,    12,     0,
       0,     0,     0,     0,     0,   388,   479,     0,   134,   389,
       0,   152,   153,     0,   154,   155,   135,   136,     0,     0,
     742,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,   381,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
d2283 22
a2304 25
      49,    50,    51,   383,   384,    54,    55,   385,   386,    58,
     142,   143,   144,   145,    59,    60,   387,    62,   147,    63,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
     148,   149,     0,     0,   134,     0,     0,     0,     0,     0,
       0,   934,   135,   136,     0,   151,     0,   152,   153,     0,
     154,   155,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,   381,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,   383,
     384,    54,    55,   385,   386,    58,   142,   143,   144,   145,
      59,    60,   387,    62,   147,    63,     0,     0,     0,     0,
      12,     0,     0,     0,     0,     0,   148,   149,     0,     0,
     134,     0,     0,     0,     0,     0,     0,   150,   135,   136,
       0,   151,     0,   152,   153,     0,   154,   155,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,   381,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,   383,   384,    54,    55,   385,
     386,    58,   142,   143,   144,   145,    59,    60,   387,    62,
     147,    63,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   148,   149,     0,     0,    12,     0,     0,     0,
       0,     0,     0,   388,     0,     0,   134,   389,   927,   152,
     153,     0,   154,   155,   135,   136,     0,     0,     0,   928,
a2305 18
       0,    13,    14,    15,    16,    17,    18,    19,     0,    20,
      21,    22,    23,    24,    25,    26,    27,   381,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,   383,   384,    54,    55,   385,   386,    58,   142,   143,
     144,   145,    59,    60,   387,    62,   147,    63,     0,   502,
       0,     0,     0,     0,    12,     0,     0,     0,   148,   149,
       0,     0,     0,     0,     0,     0,   503,     0,     0,   150,
       0,     0,     0,   151,     0,   152,   153,   504,     0,     0,
       0,     0,     0,     0,     0,     0,  -777,     0,     0,    13,
      14,    15,    16,    17,    18,    19,   505,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,     0,     0,     0,     0,
      59,    60,    61,   506,     0,    63,  1179,     0,     0,   507,
       0,    12,     0,     0,     0,     0,  -229,     0,     0,     0,
    -769,     0,     0,     0,     0,     0,     0,     0,   508,     0,
d2307 1
a2307 2
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
      17,    18,    19,     0,    20,    21,    22,    23,    24,    25,
d2311 11
a2321 110
      56,    57,    58,     0,     0,     0,     0,    59,    60,    61,
      62,   642,    63,   332,   643,     0,     0,     0,     0,   134,
     644,     0,   645,   646,     0,     0,     0,     0,   647,     0,
     648,     0,     0,     0,     0,  -769,   649,     0,     0,     0,
       0,     0,   650,   651,     0,     0,     0,     0,   652,     0,
       0,     0,     0,     0,     0,    23,     0,    25,     0,     0,
     137,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,   653,   654,     0,     0,    44,   655,     0,     0,
       0,     0,    50,    51,   138,   139,   656,   657,   140,   141,
     658,   298,     0,     0,     0,   659,   660,   146,    62,   642,
      63,   332,   643,     0,     0,     0,     0,   134,   644,     0,
     645,   646,     0,     0,     0,     0,   647,     0,   648,     0,
       0,     0,   150,     0,   649,     0,     0,     0,   661,     0,
     650,   651,     0,     0,     0,     0,   652,     0,     0,     0,
       0,     0,     0,    23,     0,    25,     0,     0,   137,     0,
       0,    31,     0,  -285,   134,     0,     0,     0,     0,     0,
     653,   654,   135,   136,    44,   655,     0,     0,     0,     0,
      50,    51,   138,   139,   656,   657,   140,   141,   658,     0,
       0,     0,     0,   659,   660,   146,    62,     0,    63,     0,
      23,     0,    25,     0,     0,   137,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,    44,     0,     0,     0,     0,   661,    50,    51,   138,
     139,     0,     0,   140,   141,     0,   142,   143,   144,   145,
       0,     0,   146,    62,   147,    63,   134,     0,     0,     0,
       0,     0,     0,     0,   135,   136,   148,   149,     0,     0,
       0,     0,     0,     0,     0,     0,  -285,   150,     0,     0,
       0,   151,     0,   152,   153,     0,   154,   155,     0,     0,
       0,     0,    23,     0,    25,     0,     0,   137,     0,     0,
      31,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,     0,     0,     0,     0,     0,    50,
      51,   138,   139,     0,     0,   140,   141,     0,   142,   143,
     144,   145,     0,     0,   146,    62,   147,    63,   134,     0,
       0,     0,     0,     0,     0,     0,   135,   136,   148,   149,
     742,     0,     0,     0,     0,     0,     0,     0,     0,   150,
       0,     0,     0,   151,   212,   152,   153,     0,   154,   155,
       0,     0,     0,     0,    23,     0,    25,     0,     0,   137,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,     0,     0,     0,     0,
       0,    50,    51,   138,   139,     0,     0,   140,   141,     0,
     142,   143,   144,   145,     0,     0,   146,    62,   147,    63,
     134,     0,     0,     0,     0,     0,     0,     0,   135,   136,
     148,   149,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   934,     0,     0,     0,   151,     0,   152,   153,     0,
     154,   155,     0,     0,     0,     0,    23,     0,    25,     0,
       0,   137,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,     0,     0,
       0,     0,     0,    50,    51,   138,   139,     0,     0,   140,
     141,     0,   142,   143,   144,   145,     0,     0,   146,    62,
     147,    63,   134,     0,     0,     0,     0,     0,     0,     0,
     135,   136,   148,   149,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,     0,     0,     0,   151,     0,   152,
     153,     0,   154,   155,     0,     0,     0,     0,    23,     0,
      25,     0,     0,   137,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
       0,     0,     0,     0,     0,    50,    51,   138,   139,     0,
       0,   140,   141,     0,   142,   143,   144,   145,     0,     0,
     146,    62,   147,    63,   134,     0,     0,     0,     0,     0,
       0,     0,   135,   136,   148,   149,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   388,     0,     0,     0,   389,
       0,   152,   153,     0,   154,   155,     0,     0,     0,     0,
      23,     0,    25,     0,     0,   137,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,     0,     0,     0,     0,     0,    50,    51,   138,
     139,     0,     0,   140,   141,   737,   142,   143,   144,   145,
      12,     0,   146,    62,   147,    63,     0,     0,     0,     0,
       0,     0,   503,     0,     0,     0,   148,   149,     0,     0,
       0,     0,     0,   504,     0,     0,     0,   150,     0,     0,
       0,   151,  -777,   152,   153,    13,    14,    15,    16,    17,
      18,    19,   505,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   536,    59,    60,    61,   506,
      12,    63,     0,     0,  -129,   738,     0,     0,     0,  -129,
       0,     0,  -129,     0,     0,     0,  -129,     0,     0,     0,
       0,     0,     0,  -129,  -129,     0,     0,     0,     0,     0,
    -129,     0,  -129,     0,     0,    13,    14,    15,    16,    17,
      18,    19,  -129,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   850,    59,    60,    61,    62,
      12,    63,     0,     0,  -128,     0,     0,     0,     0,  -128,
       0,     0,  -128,     0,     0,     0,  -128,     0,     0,     0,
       0,     0,     0,  -128,  -128,     0,     0,     0,     0,     0,
    -128,     0,  -128,     0,     0,    13,    14,    15,    16,    17,
      18,    19,  -128,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   563,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,   -75,
       0,     0,   -75,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   -75,     0,     0,     0,     0,     0,     0,
     -75,     0,   -75,     0,     0,    13,    14,    15,    16,    17,
      18,    19,   -75,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,  1203,    59,    60,    61,    62,
    -777,    63,     0,     0,     0,     0,     0,     0,     0,  -777,
       0,     0,  -777,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -777,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -777,  -777,  -777,  -777,  -777,
    -777,  -777,     0,  -777,  -777,  -777,  -777,  -777,  -777,  -777,
    -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,
    -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,
    -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,  -777,
    -777,  -777,     0,     0,     0,  1022,  -777,  -777,  -777,  -777,
      12,  -777,     0,     0,     0,  -777,     0,     0,     0,  -225,
a2323 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   297,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2325 7
a2332 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,   298,     0,     0,   521,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2334 7
a2341 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,   298,     0,     0,    11,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2343 7
a2350 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   130,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2352 7
a2359 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   344,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2361 7
a2368 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   536,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2371 1
a2371 2
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
d2375 2
a2376 2
      57,    58,     0,     0,     0,   541,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
a2378 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   557,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2380 6
a2386 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   674,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2389 6
a2394 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   703,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
a2396 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   799,    59,    60,    61,   506,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2398 6
a2404 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   852,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2407 7
a2413 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   870,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2416 69
a2484 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,   994,    59,    60,    61,   506,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
a2486 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,  1062,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2488 6
a2494 7
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,     0,     0,  1183,    59,    60,    61,    62,
      12,    63,     0,     0,     0,     0,     0,     0,     0,     0,
d2496 7
a2503 24
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    12,     0,     0,     0,    59,    60,    61,    62,
       0,    63,   134,     0,   927,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   928,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,  -771,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    12,     0,     0,     0,    59,    60,
      61,    62,     0,    63,     0,     0,   503,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   504,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,   505,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    12,     0,     0,     0,
      59,    60,    61,   506,     0,    63,   134,     0,   927,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   928,
d2505 2
a2506 2
       0,    13,    14,    15,    16,    17,    18,    19,     0,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
d2509 3
a2511 10
      51,    52,    53,    54,    55,    56,    57,    58,    12,     0,
       0,     0,    59,    60,    61,    62,     0,    63,     0,     0,
    1232,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1233,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,  1234,    15,    16,    17,  1235,    19,
       0,  1236,  1237,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,  1238,    45,    46,    47,    48,
      49,  1239,  1240,    52,    53,    54,    55,    56,    57,    58,
      12,     0,     0,     0,    59,    60,    61,  1241,     0,    63,
d2514 1
a2514 2
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,    97,    20,    21,    22,    23,    24,    25,    26,
d2518 2
a2519 10
      57,    58,    12,     0,     0,     0,    59,    60,    61,    62,
       0,    63,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,   298,     0,     0,    12,    59,    60,
      61,    62,  -777,    63,     0,     0,     0,     0,     0,     0,
d2522 6
a2527 6
       0,     0,    13,    14,    15,    16,    17,    18,    19,     0,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    12,
       0,     0,     0,    59,    60,    61,    62,     0,    63,     0,
d2530 8
a2537 3
       0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
      19,     0,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
d2540 6
a2545 34
      58,    12,     0,     0,     0,    59,    60,    61,    62,     0,
      63,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
      17,    18,    19,     0,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    12,     0,     0,     0,    59,    60,    61,
      62,     0,    63,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
      15,    16,    17,    18,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    12,     0,     0,     0,    59,
      60,    61,    62,     0,    63,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,    14,    15,    16,    17,    18,    19,     0,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    12,     0,     0,
       0,    59,    60,    61,    62,     0,    63,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    13,    14,    15,    16,    17,    18,    19,     0,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,     0,
       0,     0,     0,    59,    60,    61,   506,     0,    63
d2559 1
a2562 4
       0,     0,     0,     0,     0,     0,     0,     0,     0,   163,
       0,     0,     0,     0,   165,     0,     0,     0,     0,     0,
       0,     0,   101,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   167,     0,
d2564 1
d2566 1
a2569 2
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    69,     0,     0,     0,     0,
d2571 2
a2574 1
       0,     0,   103,     0,     0,     0,     0,     0,     0,     0,
d2576 1
d2578 2
a2583 2
      41,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,   169,     0,     0,     0,    71,     0,     0,    73,     0,
a2585 1
     171,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a2589 1
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
a2606 2
       0,     0,    67,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   117,     0,     0,     0,     0,     0,     0,     0,
a2607 2
       0,   119,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,     0,
a2622 1
       0,    25,     0,     0,     0,     0,     0,     0,     0,     0,
a2624 5
       0,     0,     0,     0,   157,     0,     0,     0,   159,     0,
       0,     0,   161,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    65,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    17,     0,     0,     0,    19,     0,
       0,     0,     0,     0,     0,    21,     0,     0,    23,     0,
a2627 2
       0,     0,     0,     0,     0,     0,     0,     0,    27,    29,
      31,    33,    35,     0,    37,     0,     0,     0,     0,     0,
d2636 1
a2641 1
      45,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2647 3
a2654 2
       0,     0,     0,     0,     0,     0,     0,    47,    49,    51,
      53,    55,     0,    57,     0,     0,     0,     0,     0,     0,
d2657 1
d2661 2
d2671 1
d2674 2
d2681 1
d2683 1
d2687 2
d2693 2
d2706 1
d2820 1
a2855 1
       0,     0,     0,     0,     0,     0,     0,    75,     0,     0,
a3147 1
      77,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a3150 2
       0,     0,     0,    79,    81,     0,     0,     0,     0,    83,
       0,     0,    85,     0,     0,     0,     0,    87,     0,     0,
a3153 1
     105,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a3156 2
       0,     0,     0,   107,   109,     0,     0,     0,     0,   111,
       0,     0,   113,     0,     0,     0,     0,   115,     0,     0,
a3159 1
      59,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a3163 1
      61,     0,     0,     0,     0,     0,     0,    63,     0,     0,
d3304 6
a3336 5
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     127,     0,     0,     0,     0,     0,     0,     0,   129,     0,
     131,     0,     0,     0,     0,   133,   135,     0,     0,     0,
       0,   137,   139,     0,     0,   141,   143,     0,     0,   145,
     147,     0,     0,     0,     0,   149,   151,     0,     0,     0,
a3337 1
       0,   153,     0,   155,     0,     0,     0,     0,     0,     0,
d3372 1
d3374 1
d3395 322
a3716 326
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     3,     0,     0,     0,     0,
       5,     0,     0,     7,     0,     0,     0,     0,     9,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    11,     0,
       0,     0,     0,    13,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    15,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    91,    93,
       0,     0,     0,     0,    95,     0,     0,    97,     0,     0,
       0,     0,    99,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0
};

/* YYCONFL[I] -- lists of conflicting rule numbers, each terminated by
   0, pointed into by YYCONFLP.  */
static const short int yyconfl[] =
{
       0,    78,     0,    78,     0,    78,     0,    78,     0,    78,
       0,   735,     0,   735,     0,   735,     0,   713,     0,   714,
       0,   717,     0,   715,     0,   777,     0,   777,     0,   710,
       0,   777,     0,   777,     0,   777,     0,   777,     0,   613,
       0,   613,     0,   613,     0,   752,     0,   752,     0,   752,
       0,   752,     0,   752,     0,   752,     0,   752,     0,    75,
       0,    75,     0,    75,     0,   514,     0,   595,     0,   621,
       0,   621,     0,   621,     0,   769,     0,   129,     0,   129,
       0,   129,     0,   129,     0,   129,     0,   129,     0,   126,
       0,   126,     0,   126,     0,   126,     0,   126,     0,   126,
       0,   622,     0,   622,     0,   128,     0,   128,     0,   128,
       0,   128,     0,   128,     0,   128,     0,   174,     0,   172,
       0,   174,     0,   581,     0,   524,     0,   524,     0,   524,
       0,   524,     0,   524,     0,   524,     0,   524,     0,   524,
       0,   524,     0,   524,     0,   524,     0,   524,     0,   524,
       0,   524,     0,   524,     0,   524,     0,   752,     0,   752,
       0,   752,     0,   146,     0,   146,     0,   146,     0,   142,
       0,   142,     0
};

static const short int yycheck[] =
{
       9,     9,    11,   152,    76,   277,   278,   526,   516,   478,
     163,   303,   423,   182,   627,   194,   403,   423,   526,   545,
     100,   170,   382,   861,   765,   766,   683,   587,   388,   923,
     127,   350,     1,     2,   326,   625,   204,   349,   350,   207,
     866,    10,   877,   132,   625,   389,   629,   185,   122,   640,
    1017,     1,   388,   544,   790,    64,     1,  1029,     1,   987,
      26,     1,   411,   534,   992,   900,    75,     1,     1,   861,
      62,    80,    80,   861,    83,   910,   463,     1,   169,     1,
      11,   102,     1,     1,    37,    38,  1285,    66,    15,    46,
       7,  1290,    15,   931,    51,     1,   105,     1,   839,   108,
     108,   181,     1,   997,     1,   114,   847,   734,   119,     1,
     670,    15,   133,    82,    83,    38,   127,    15,    75,   732,
       1,   119,   858,    15,     1,   123,   753,   119,   107,     1,
     279,   280,   281,    64,     1,   495,     1,   146,  1110,   931,
       1,   110,   111,   931,   734,   114,  1118,    64,    13,   984,
    1078,   120,   102,   734,   333,   896,   122,   493,   494,   102,
     537,     1,   102,   753,   343,   118,   100,   258,   137,   260,
       1,     1,   753,   118,   645,   118,   121,   120,   118,   122,
       1,   917,   122,   133,   193,     1,   677,   121,   122,   357,
     133,   118,     1,   133,   127,   118,   118,   121,   102,   118,
     124,  1168,  1169,   121,   122,   124,   175,   176,   177,   178,
     179,   180,   181,     1,   118,   121,   122,     1,   122,    15,
     118,   118,   121,   515,   121,   124,   118,   196,  1156,   133,
     122,   523,   524,   525,   640,   754,   596,   118,   829,     1,
     600,   601,   823,  1215,   121,  1080,   754,   124,   608,   121,
     122,   118,   124,   120,   121,   122,   121,   118,   706,   120,
     596,   122,   639,   442,   600,   708,    37,   347,  1196,   100,
    1198,   861,   621,   622,   348,   366,  1114,     1,   118,    55,
     861,   274,   122,   276,   100,   577,   295,  1181,   118,    26,
     121,   122,    26,   124,  1266,  1223,  1224,   118,     0,   120,
     819,    46,   935,   936,   861,   121,   122,   445,   124,     1,
      80,   819,   121,   122,   208,   284,   891,  1152,   287,    95,
      95,   553,   118,    95,    46,   617,   618,   336,     1,  1257,
      75,   340,    46,   121,   122,  1076,   120,   121,   108,   411,
     866,   931,   422,   119,   119,   100,   118,   118,   580,   932,
     931,   440,   933,     1,   935,   936,   118,   629,   120,   121,
    1195,   809,    95,   806,   119,     1,   534,     1,   337,   338,
     951,   120,   861,   122,   931,    99,   100,   370,   387,  1217,
       1,   725,  1208,   702,     1,  1279,   123,     1,   102,   123,
     702,  1226,   967,   968,     1,   289,   120,   121,   122,    90,
    1141,     1,   411,   127,   413,    96,   596,  1148,    15,   119,
     600,   380,   381,   422,   883,    15,  1049,  1074,  1075,   388,
     389,   118,   430,   829,    95,   836,     1,   436,   120,   121,
     836,   991,     7,   505,    41,   126,   405,    15,   407,    46,
      15,   513,   931,   412,   119,   118,   415,   120,   417,   418,
     118,   420,   421,   422,   118,   552,  1197,   426,   427,    37,
      38,   102,   951,   989,   544,    72,   435,   118,  1049,     1,
     439,   440,   120,   121,  1064,    53,   644,  1216,   119,   448,
     449,   578,    14,  1064,   120,   121,   120,   121,   119,    64,
       0,    98,   133,   661,   463,   102,   127,   665,    30,   120,
     121,  1020,     1,   120,   121,   974,   120,   121,     7,    10,
     118,   118,  1020,   120,    15,   122,    15,     1,   118,   906,
     120,    31,   491,     7,   493,   494,    95,    46,    98,  1268,
    1269,    15,   102,     1,   503,   504,   545,   716,    37,     7,
     118,   118,   100,   118,   553,   120,    41,    15,   517,   621,
     622,   560,   624,    72,    53,     1,  1025,   963,   964,   528,
     120,    71,   120,   133,   122,    64,   535,    95,   537,    15,
       1,   580,    42,   542,   120,   121,    15,    72,   587,    98,
      64,   120,   121,   102,    15,    95,     8,   556,    55,   861,
      12,    61,    56,    96,   954,    41,    64,    95,   567,    38,
      46,    23,    98,    98,   120,   121,   102,   102,    78,   120,
      41,   122,   621,   622,    53,    46,     6,   120,   627,   118,
     123,    43,   125,   126,   127,    15,    72,   596,    18,   120,
     121,   600,  1158,  1159,   118,   927,   928,   133,   803,    29,
     805,    72,   118,    36,   916,    38,   119,    69,    70,  1060,
     118,  1011,    98,   119,  1060,    48,   102,    99,   100,   931,
     932,   670,  1275,   119,   696,    55,   698,    98,     6,    46,
     639,   102,   118,    63,   120,    52,     1,    15,   119,   118,
      18,   761,  1208,    60,   692,   119,   405,   118,   407,   120,
      15,    29,   114,   115,   116,   117,   838,   706,   840,   868,
     780,    26,   415,  1229,   417,    96,   786,   787,   130,   131,
     679,   719,    46,   785,   136,   120,    41,    51,    52,   119,
      54,    46,   121,   732,    72,    63,    60,   696,  1000,   698,
     699,     1,   123,    96,   125,   126,   127,   120,   121,   708,
     709,    75,    76,    77,  1016,  1017,    10,    72,  1274,   118,
      98,   904,     1,   459,   102,   461,   725,   120,   121,    67,
     123,     1,   125,   126,   127,   120,    15,   100,  1287,   120,
     121,    21,     7,    98,    35,    15,   120,   102,    21,  1287,
     127,  1250,    52,  1194,    54,   127,   935,   119,  1194,    96,
      60,   122,    41,   118,   119,   120,   121,    46,   123,   124,
     809,    41,   127,    73,   120,   121,    46,   439,   440,    79,
      80,   337,   338,   120,   783,   784,   123,     6,   125,   126,
     127,    10,   127,    72,   119,    95,  1295,    97,   119,    18,
     913,   914,    72,    22,   803,   119,   805,   806,   119,   808,
      29,   913,   914,   118,   783,   784,    96,   124,    98,    98,
     119,    10,   102,   102,   120,   824,    30,   866,    98,    18,
      49,    50,   102,    22,  1136,  1137,  1115,  1116,    55,   118,
      29,   120,   841,   123,    63,   125,   126,   127,   118,   119,
     120,   121,   122,   133,   124,  1268,  1269,  1095,  1096,    90,
      49,    50,   621,   622,   118,    96,  1168,  1169,  1068,  1069,
    1071,  1072,   360,   361,    63,   120,     6,    26,   122,   118,
     919,   920,   921,   922,   923,    15,   122,   926,    18,   120,
     929,   122,   891,    64,   124,   126,   124,   120,     1,    29,
      30,    38,   120,   118,    99,   121,     9,   906,   122,   118,
     116,   118,   118,    16,   119,  1217,   118,   118,   118,    49,
      50,    24,    25,    15,    30,    15,   122,   100,   122,    32,
     123,    34,   122,    63,   933,   934,   935,   936,  1260,  1261,
    1262,  1263,    15,    95,   150,   151,   152,   119,     7,    52,
     989,    54,   991,   159,    57,   119,   119,    60,   997,   118,
     122,    27,   122,   169,   170,   119,   122,   122,   967,   968,
      73,   970,    13,    13,   127,  1014,    79,    80,    81,    82,
      15,   120,    85,    86,    26,    88,    89,    90,    91,   120,
       1,    94,    95,    96,    97,    26,     9,    26,   204,    65,
     206,   207,    35,   122,    15,   108,   109,   119,    74,   118,
      75,  1050,    51,   124,   118,   123,   119,   122,   120,   120,
     123,   120,   125,   126,   100,   128,   129,    53,    42,   118,
      41,    26,   123,   100,   118,    46,    48,   103,   118,   118,
     118,   118,   108,   109,   110,   111,   112,   113,   118,    26,
    1049,   257,   258,   124,   260,    13,  1095,  1096,    13,    15,
      54,    72,   128,   129,    61,    26,    15,    15,   274,   135,
     276,   277,   278,   279,   280,   281,    78,    11,   284,   122,
     100,    26,   120,   119,   121,    44,   292,    98,   122,    15,
     120,   102,   120,    52,   119,    54,   120,   118,    13,    26,
      59,    60,   124,  1205,    26,   124,   123,   118,   119,   120,
     121,   122,   118,   124,    73,  1114,   120,   122,    15,  1158,
      79,    80,  1121,    15,  1123,  1164,  1165,   118,    95,  1167,
     122,   119,   119,   195,   120,   120,    95,    70,    97,   964,
     813,    16,  1181,     9,   709,   573,   352,   556,   105,   715,
      16,   357,  1190,   359,   360,   361,   796,   565,   436,   542,
     366,  1190,    28,   369,   370,   371,   931,  1205,   951,  1208,
      36,  1217,  1165,   921,   380,   349,   382,    52,   580,    54,
     740,  1064,   388,   389,   114,    60,    52,   823,    54,  1270,
     665,   780,  1158,   257,    60,   776,   842,   403,    73,  1159,
     818,   491,   408,   491,    79,    80,   492,    73,   181,   284,
      21,   181,   645,    79,    80,    70,    27,    -1,    -1,    -1,
      95,    -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    95,
      -1,    97,    -1,  1232,  1233,    -1,  1275,  1236,  1237,    -1,
    1279,    -1,    -1,    -1,    -1,    -1,  1285,    -1,    -1,    -1,
      -1,  1290,   458,   459,    65,   461,    -1,   463,    -1,    -1,
      -1,    31,    -1,    74,    -1,    -1,    -1,   473,   474,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    52,   489,    54,   491,    -1,   493,   494,   495,
      60,    -1,   103,   104,   105,   106,    16,   108,   109,   110,
     111,   112,   113,    73,    24,    25,    -1,    -1,    28,    79,
      80,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,   132,   133,   134,   135,    95,    -1,    97,   534,    -1,
      -1,    -1,    52,    -1,    54,    -1,    52,    57,    54,    -1,
      60,    -1,    -1,   549,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    -1,    -1,    73,    -1,    79,
      80,    81,    82,    79,    80,    85,    86,    -1,    88,    89,
      90,    91,    88,    -1,    94,    95,    96,    97,    -1,    95,
      -1,    97,    -1,    52,   590,    54,    -1,   593,   108,   109,
     596,    60,    -1,    -1,   600,   601,    -1,   603,    -1,   119,
      -1,    -1,   608,   123,    73,   125,   126,    -1,   128,   129,
      79,    80,    -1,    -1,    -1,    -1,    -1,    -1,     6,   625,
      -1,    -1,    10,   629,    -1,    -1,    95,    15,    97,    -1,
      18,    -1,    -1,    -1,    22,    -1,    -1,   643,   644,   645,
     646,    29,    30,    -1,    -1,   651,    -1,    -1,   116,    -1,
     118,    -1,   658,    -1,    -1,   661,    -1,    -1,    -1,   665,
      -1,    49,    50,    -1,     1,    -1,    -1,    -1,    -1,    -1,
      58,    -1,     9,    -1,    -1,    63,    -1,   683,    -1,    16,
      -1,    18,   150,   151,    -1,    -1,    -1,    24,    25,    -1,
      -1,    28,    29,    -1,    -1,    32,    -1,    34,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      47,    -1,    -1,    -1,   720,    52,    -1,    54,    -1,   725,
      57,    -1,    -1,    60,    -1,    -1,    -1,    -1,   734,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    -1,   206,    -1,
      -1,    -1,    79,    80,    81,    82,    -1,   753,    85,    86,
      -1,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,   773,   774,    -1,
     776,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,    -1,    -1,    -1,   123,    -1,   125,   126,
      -1,   128,   129,    -1,    -1,    -1,    -1,    -1,    -1,    16,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    16,
      -1,    -1,    -1,    -1,    -1,    -1,   284,   823,    -1,   825,
      -1,    28,    -1,    -1,   292,   831,    -1,   833,    -1,    -1,
      -1,   837,   838,    -1,   840,    52,    -1,    54,    -1,    -1,
      57,    -1,   848,    60,    -1,    52,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    60,    -1,   861,    73,    -1,   864,   865,
      -1,    -1,    79,    80,    81,    82,    73,    -1,    85,    86,
      -1,    -1,    79,    80,    -1,    -1,    -1,    94,    95,    -1,
      97,    -1,    -1,    -1,   352,    -1,    -1,   893,    95,   357,
      97,   359,   360,   361,    -1,    -1,    -1,    -1,    -1,    -1,
     906,    -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     916,    -1,   380,    -1,   382,    -1,    -1,    -1,    -1,    -1,
     388,   389,    -1,    -1,    -1,   931,   932,    -1,   934,   935,
      97,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     408,    -1,    -1,    -1,    -1,   951,    -1,    -1,   954,    -1,
      -1,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   983,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     458,   459,    -1,   461,  1000,   463,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1011,    -1,    -1,    -1,    -1,
    1016,  1017,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   489,    -1,   491,    -1,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1043,  1044,  1045,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1064,    -1,
      -1,    -1,  1068,  1069,    -1,  1071,  1072,    -1,  1074,  1075,
      -1,    -1,    -1,  1079,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   549,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1108,    -1,    -1,    -1,    -1,    -1,  1114,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   590,  1129,    -1,   593,    -1,    -1,   596,    -1,
    1136,  1137,   600,   601,    -1,   603,    -1,    -1,    -1,    -1,
     608,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1160,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1168,  1169,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   643,    -1,    -1,   646,  1185,
      -1,  1187,    -1,   651,    -1,    -1,    -1,    -1,    -1,    -1,
     658,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       9,    -1,    -1,  1209,    -1,    -1,    -1,    16,    -1,    18,
    1216,  1217,    -1,    -1,    -1,    24,    25,    -1,    -1,    28,
      29,    -1,    -1,    32,    -1,    34,    -1,    36,    -1,    -1,
      -1,    -1,  1238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    54,    -1,    -1,    57,    -1,
      -1,    60,   720,    -1,    -1,    -1,    -1,   725,    -1,    68,
      -1,    -1,  1268,  1269,    73,    -1,    -1,    -1,    -1,    -1,
      79,    80,    81,    82,  1280,    -1,    85,    86,    -1,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,   773,    -1,    -1,   776,    -1,
     119,    -1,    -1,    -1,   123,    -1,   125,   126,    -1,   128,
     129,    -1,     1,    -1,    -1,    -1,    -1,    -1,     7,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    15,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    24,    25,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   825,    -1,    -1,
      -1,    -1,    -1,   831,    -1,   833,    -1,    -1,    -1,   837,
     838,    -1,   840,    52,    -1,    54,    -1,    -1,    57,    -1,
     848,    60,    -1,    -1,    -1,    64,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   861,    73,    -1,   864,   865,    -1,    -1,
      79,    80,    81,    82,    -1,    -1,    85,    86,    -1,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   906,    -1,
     119,    -1,    -1,    -1,   123,     1,   125,   126,    -1,   128,
     129,     7,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
      16,    -1,    -1,   931,    -1,    -1,   934,    -1,    24,    25,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   951,    -1,    -1,   954,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,
      -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    64,    -1,
      -1,    -1,    -1,    -1,    -1,   983,    -1,    73,    -1,    -1,
      -1,    -1,    -1,    79,    80,    81,    82,    -1,    -1,    85,
      86,    -1,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    97,    -1,  1011,    -1,    -1,    -1,    -1,  1016,  1017,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,   123,    -1,   125,
     126,    -1,   128,   129,    -1,  1043,  1044,  1045,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      25,  1079,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1100,    -1,    -1,    -1,    -1,    52,    -1,    54,
    1108,    -1,    57,    -1,    -1,    60,  1114,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,  1129,    -1,    -1,    79,    80,    81,    82,    -1,    -1,
      85,    86,    -1,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1160,   108,   109,    -1,    -1,    -1,    -1,    -1,
    1168,  1169,    -1,    -1,   119,    -1,    -1,    -1,   123,    -1,
     125,   126,    -1,   128,   129,    -1,    -1,  1185,    -1,  1187,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1217,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,
       8,    -1,    -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    -1,    23,    -1,    -1,    -1,    27,
d3718 1
a3718 2
      -1,    -1,  1280,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
d3722 156
a3877 23
      -1,    -1,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,
     128,   129,   130,   131,   132,   133,   134,   135,   136,    16,
      -1,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,     1,    -1,
      -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    11,    -1,
      -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    24,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
d3881 4
a3884 4
      93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,   108,   109,    -1,    -1,     6,
      -1,    -1,    -1,    -1,    11,    -1,   119,    -1,    -1,    16,
     123,   124,   125,   126,    -1,   128,   129,    24,    25,    -1,
d3886 2
a3887 23
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,   108,   109,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      11,    -1,   119,    -1,    -1,    16,   123,   124,   125,   126,
      -1,   128,   129,    24,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,     1,    -1,    -1,
      -1,    -1,     6,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,   119,    -1,
      24,    25,   123,    -1,   125,   126,    -1,   128,   129,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
d3891 15
a3905 124
      94,    95,    96,    97,     1,    -1,    -1,    -1,    -1,     6,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,    16,
      -1,    -1,    -1,    -1,    -1,   119,    -1,    24,    25,   123,
      -1,   125,   126,    -1,   128,   129,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,     1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
      -1,   108,   109,    -1,    -1,    -1,    16,    -1,    -1,    -1,
      -1,    -1,   119,    -1,    24,    25,   123,    -1,   125,   126,
      -1,   128,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,     1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,   119,
      -1,    24,    25,   123,    -1,   125,   126,    -1,   128,   129,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
      -1,    54,    -1,    -1,    57,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
       1,    -1,    85,    86,    -1,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    97,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
     123,    -1,   125,   126,    -1,   128,   129,    -1,    -1,    -1,
      -1,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
      81,    82,     1,    -1,    85,    86,    -1,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    97,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    24,    25,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
      -1,    -1,   123,    -1,   125,   126,    -1,   128,   129,    -1,
      -1,    -1,    -1,    52,    -1,    54,    -1,    -1,    57,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
      79,    80,    81,    82,     1,    -1,    85,    86,    -1,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    97,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,   123,    -1,   125,   126,    -1,   128,
     129,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    79,    80,    81,    82,     1,    -1,    85,    86,
      -1,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      97,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      25,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,    -1,    -1,    -1,   123,    -1,   125,   126,
      -1,   128,   129,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    79,    80,    81,    82,     1,    -1,
      85,    86,    -1,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    97,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    24,    25,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,   123,    -1,
     125,   126,    -1,   128,   129,    -1,    -1,    -1,    -1,    52,
      -1,    54,    -1,    -1,    57,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
       1,    -1,    85,    86,    -1,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    97,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
     123,    -1,   125,   126,    -1,   128,   129,    -1,    -1,    -1,
      -1,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
      81,    82,     1,    -1,    85,    86,    -1,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    97,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    24,    25,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
      -1,    -1,   123,    -1,   125,   126,    -1,   128,   129,    -1,
      -1,    -1,    -1,    52,    -1,    54,    -1,    -1,    57,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
      79,    80,    81,    82,     1,    -1,    85,    86,    -1,    88,
      89,    90,    91,    -1,    -1,    94,    95,    96,    97,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,   123,    -1,   125,   126,    -1,   128,
     129,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    79,    80,    81,    82,     1,    -1,    85,    86,
      -1,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
      97,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      25,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,    -1,    -1,    -1,   123,    -1,   125,   126,
      -1,   128,   129,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    79,    80,    81,    82,     1,    -1,
      85,    86,    -1,    88,    89,    90,    91,    -1,    -1,    94,
      95,    96,    97,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    24,    25,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,   123,    -1,
     125,   126,    -1,   128,   129,    -1,    -1,    -1,    -1,    52,
      -1,    54,    -1,    -1,    57,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
       1,    -1,    85,    86,    -1,    88,    89,    90,    91,    -1,
      -1,    94,    95,    96,    97,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
     123,    -1,   125,   126,    -1,   128,   129,    -1,    -1,    -1,
      -1,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
      81,    82,    -1,    -1,    85,    86,    -1,    88,    89,    90,
      91,    -1,    -1,    94,    95,    96,    97,     6,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
      -1,    -1,   123,    -1,   125,   126,    -1,   128,   129,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    -1,
d3909 35
a3943 29
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,     6,    92,    93,    94,    95,    -1,    97,    -1,
      -1,    -1,    16,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      24,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,   133,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   108,   109,    -1,    -1,     6,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,    -1,    16,   123,
      -1,   125,   126,    -1,   128,   129,    24,    25,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
     108,   109,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,
      -1,   119,    24,    25,    -1,   123,    -1,   125,   126,    -1,
     128,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
d3945 43
a3987 6
      92,    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,
       6,    -1,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,
      16,    -1,    -1,    -1,    -1,    -1,    -1,   119,    24,    25,
      -1,   123,    -1,   125,   126,    -1,   128,   129,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
d3991 8
a3998 9
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,   109,    -1,    -1,     6,    -1,    -1,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    16,   123,    18,   125,
     126,    -1,   128,   129,    24,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
d4001 13
a4013 129
      90,    91,    92,    93,    94,    95,    96,    97,    -1,     1,
      -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    18,    -1,    -1,   119,
      -1,    -1,    -1,   123,    -1,   125,   126,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      92,    93,    94,    95,    -1,    97,     1,    -1,    -1,   101,
      -1,     6,    -1,    -1,    -1,    -1,    11,    -1,    -1,    -1,
      15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    92,    93,    94,
      95,     8,    97,    10,    11,    -1,    -1,    -1,    -1,    16,
      17,    -1,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
      27,    -1,    -1,    -1,    -1,   120,    33,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    -1,    -1,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    70,    -1,    -1,    73,    74,    -1,    -1,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    -1,    -1,    92,    93,    94,    95,     8,
      97,    10,    11,    -1,    -1,    -1,    -1,    16,    17,    -1,
      19,    20,    -1,    -1,    -1,    -1,    25,    -1,    27,    -1,
      -1,    -1,   119,    -1,    33,    -1,    -1,    -1,   125,    -1,
      39,    40,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    54,    -1,    -1,    57,    -1,
      -1,    60,    -1,    15,    16,    -1,    -1,    -1,    -1,    -1,
      69,    70,    24,    25,    73,    74,    -1,    -1,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,    73,    -1,    -1,    -1,    -1,   125,    79,    80,    81,
      82,    -1,    -1,    85,    86,    -1,    88,    89,    90,    91,
      -1,    -1,    94,    95,    96,    97,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    24,    25,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,
      -1,   123,    -1,   125,   126,    -1,   128,   129,    -1,    -1,
      -1,    -1,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,
      80,    81,    82,    -1,    -1,    85,    86,    -1,    88,    89,
      90,    91,    -1,    -1,    94,    95,    96,    97,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    24,    25,   108,   109,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
      -1,    -1,    -1,   123,   124,   125,   126,    -1,   128,   129,
      -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,    57,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
      -1,    79,    80,    81,    82,    -1,    -1,    85,    86,    -1,
      88,    89,    90,    91,    -1,    -1,    94,    95,    96,    97,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,    -1,    -1,    -1,   123,    -1,   125,   126,    -1,
     128,   129,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,
      -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    -1,    -1,    79,    80,    81,    82,    -1,    -1,    85,
      86,    -1,    88,    89,    90,    91,    -1,    -1,    94,    95,
      96,    97,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      24,    25,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,   123,    -1,   125,
     126,    -1,   128,   129,    -1,    -1,    -1,    -1,    52,    -1,
      54,    -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,
      -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,    -1,
      -1,    85,    86,    -1,    88,    89,    90,    91,    -1,    -1,
      94,    95,    96,    97,    16,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    24,    25,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,    -1,    -1,    -1,    -1,
      52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,
      82,    -1,    -1,    85,    86,     1,    88,    89,    90,    91,
       6,    -1,    94,    95,    96,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    18,    -1,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    -1,   119,    -1,    -1,
      -1,   123,    38,   125,   126,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    10,   101,    -1,    -1,    -1,    15,
      -1,    -1,    18,    -1,    -1,    -1,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    38,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    10,    -1,    -1,    -1,    -1,    15,
      -1,    -1,    18,    -1,    -1,    -1,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    38,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    38,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    11,    -1,    -1,    -1,    15,
d4015 7
a4022 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4024 6
a4030 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4033 1
a4033 2
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
d4037 2
a4038 2
      86,    87,    88,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a4040 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4042 7
a4049 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4051 7
a4058 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4060 7
a4067 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4069 7
a4076 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4078 7
a4085 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4088 6
a4093 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a4095 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4097 6
a4103 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4106 1
a4106 2
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
d4110 2
a4111 2
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a4113 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4115 6
a4121 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4124 7
a4130 7
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,     1,    92,    93,    94,    95,
       6,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4133 11
a4143 19
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,     6,    -1,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    16,    -1,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,     6,    -1,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
d4145 5
a4149 8
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,     6,    -1,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    16,    -1,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
d4151 4
a4154 15
      80,    81,    82,    83,    84,    85,    86,    87,     6,    -1,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
       6,    -1,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
d4156 24
a4179 14
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,     6,    -1,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,     6,    92,    93,
      94,    95,    11,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    -1,
d4183 20
a4202 2
      79,    80,    81,    82,    83,    84,    85,    86,    87,     6,
      -1,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
d4205 1
a4205 2
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    -1,    49,    50,    51,    52,    53,    54,    55,    56,
d4209 2
a4210 2
      87,     6,    -1,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
a4211 7
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,     6,    -1,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4213 2
a4214 3
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
d4217 20
a4236 2
      83,    84,    85,    86,    87,     6,    -1,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    -1,    -1,    -1,    -1,
d4239 6
a4244 6
      41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,     6,    -1,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    -1,    -1,
d4247 8
a4254 3
      -1,    -1,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
d4256 7
a4262 2
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    92,    93,    94,    95,    -1,    97
d4269 131
a4399 130
       0,    31,    71,    95,   138,   139,   142,   149,   154,   171,
     410,     1,     6,    41,    42,    43,    44,    45,    46,    47,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    92,
      93,    94,    95,    97,   400,   401,   403,   404,   400,     0,
     145,    46,   174,   277,   415,   400,   119,   173,   415,   173,
     118,   154,   410,   119,   140,   118,    55,    95,   172,   173,
     396,   397,   400,   118,   118,   174,   400,    48,   278,   279,
     400,   415,   181,   182,   118,   150,   146,   148,   118,   120,
       1,   121,    95,   120,   121,   102,   119,   133,   413,   191,
      56,   183,   155,   172,    95,   152,   156,   157,   174,   400,
       1,   400,   143,   279,    16,    24,    25,    57,    81,    82,
      85,    86,    88,    89,    90,    91,    94,    96,   108,   109,
     119,   123,   125,   126,   128,   129,   344,   345,   347,   349,
     350,   351,   353,   354,   355,   360,   361,   367,   380,   383,
     384,   402,   403,   344,   403,     6,    18,    22,    29,    49,
      50,    63,   141,   192,   194,   195,   201,   266,   269,   270,
     271,   184,   185,   400,   156,   151,   153,   118,     1,   127,
     414,   183,   181,   400,   119,   119,   119,   119,   119,   362,
     415,   344,   124,   344,   381,   382,   350,    97,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   356,   120,    21,    27,    65,
      74,   103,   104,   105,   106,   108,   109,   110,   111,   112,
     113,   128,   129,   132,   133,   134,   135,   385,   386,   388,
     392,     8,    12,    23,    43,    69,    70,   114,   115,   116,
     117,   130,   131,   136,   387,   389,   393,    44,    59,   403,
      66,   107,   355,    96,   123,   125,   126,   127,   412,   119,
     347,   350,   121,   202,   203,   400,   400,     1,    88,   209,
     210,   395,   400,   400,   400,   400,     8,    12,    21,    23,
      27,   103,   104,   105,   106,   107,   108,   109,   128,   129,
     130,   131,   132,   134,   135,   136,   281,   391,   392,   393,
     400,   413,    10,   299,   205,   206,   118,     1,   118,    67,
     186,   415,   414,   152,     1,   175,   176,   400,   147,   198,
     196,   360,   363,   344,   365,   366,   360,   363,   120,   100,
       1,   121,   124,     7,   345,   347,   346,   347,    35,   349,
     348,   349,   358,   359,   403,   358,   350,   350,   350,     1,
      11,    57,    64,    81,    82,    85,    86,    94,   119,   123,
     344,   368,   369,   370,   371,   373,   374,   378,   379,   400,
     403,   400,   120,   363,   344,     1,   118,   121,    21,   204,
     415,   119,   127,   283,   415,     1,   118,   121,   127,   283,
     127,   127,   283,   405,   414,    36,    38,    48,   207,   273,
     276,   415,   185,   185,    62,   119,   187,   415,   414,     1,
     118,   413,   156,   158,   199,   200,   201,   266,    18,    29,
     144,   197,   201,   205,   265,   270,   120,   344,   122,     1,
     120,   121,   120,   121,     1,   344,   360,   364,   344,   382,
       1,   382,   347,   349,   127,   344,   400,   344,   374,   120,
     344,   374,   375,   377,   379,     1,   344,   368,   378,   100,
     124,   118,   411,     1,   121,   122,   124,   364,   120,   203,
     203,   344,     1,    18,    29,    48,    95,   101,   120,   284,
     285,   289,   396,   409,   415,   400,   287,   288,   413,   415,
     210,     1,   210,   400,   400,   400,   282,   400,   413,   415,
      38,   300,   301,   306,   307,   208,     1,   213,   214,   398,
     400,     1,   211,   212,   400,    51,    52,    54,    60,    75,
      76,    77,   267,   274,   277,   280,   119,     1,   188,   189,
     400,   204,   176,     1,   176,   181,    95,   119,   177,   178,
     414,    30,   166,   167,   169,   205,   400,   400,    55,   159,
     118,   120,   344,   366,     1,   366,   364,   400,   120,   120,
     121,   403,    26,   122,   118,   411,     1,   118,   120,   121,
     376,   122,   124,   100,   124,   344,   370,   371,    64,   373,
     344,   379,     1,   379,   374,   120,   120,   400,   400,   396,
     120,     1,   118,   120,    38,   122,   396,   283,     1,   122,
     286,   305,   416,   400,   283,   283,   283,   286,   400,   302,
     118,   406,     8,    11,    17,    19,    20,    25,    27,    33,
      39,    40,    45,    69,    70,    74,    83,    84,    87,    92,
      93,   125,   299,   308,   309,   321,   324,   335,   337,   360,
     390,   394,   395,   403,     1,   223,   224,   400,   214,   121,
     407,   212,   407,   413,   352,   353,   415,   118,   344,   118,
     118,   183,   276,   118,   118,   188,     1,   120,   121,    99,
     190,   415,   196,     1,   179,   180,   399,   400,   409,   119,
      10,    15,    15,    30,   169,   183,    15,   272,   273,   276,
     122,   120,   362,     1,   344,   123,   372,   344,   377,   377,
     374,   344,   283,   283,   122,   290,   285,     1,   101,   285,
     396,     9,    28,    36,   291,   292,   293,   294,   297,   298,
     358,   367,   408,   122,   287,   357,   358,   214,   301,    15,
     344,   360,   394,   403,   344,   314,   317,     1,   322,   323,
     344,    95,   338,   119,   119,   344,   119,   360,   309,     7,
     310,   362,   122,     1,   118,   119,   228,   407,   400,   122,
     122,   343,   344,    95,   118,   118,   193,   120,   189,     1,
     189,   400,    15,     1,   120,   121,   100,   190,   127,   399,
     179,    13,    13,   191,   414,   344,   120,   368,    26,   287,
     291,   120,   290,    26,   123,    26,     9,   291,   286,   303,
      26,    21,    98,   336,   413,    35,   405,   405,     1,    13,
     121,   122,   119,   344,    31,   403,   365,   311,   336,   224,
       1,   224,     1,   229,   230,   396,     1,   413,   413,   231,
     232,   233,   231,   118,   275,    75,    51,   194,   268,   180,
       1,   180,   399,   400,   190,   120,   168,   170,    10,    58,
     160,   163,   166,   124,   372,   286,   298,   295,   296,   400,
     344,   123,   301,   312,   344,   344,   325,   300,   344,   323,
     405,     1,   323,   400,   354,   120,   121,   120,   120,   120,
     405,   344,   120,     1,   118,   120,   122,   225,    61,    78,
     226,   227,   231,   215,   277,     9,    16,    18,    29,    32,
      34,    47,    68,    96,   119,   125,   126,   234,   235,   238,
     251,   252,   254,   255,   257,   292,   344,   357,   358,   367,
     403,   408,   412,   416,   102,   344,   344,   352,   299,   304,
     305,   306,   304,   161,   164,    53,   411,     1,   118,   124,
     100,   296,     1,   328,   329,   330,   332,   333,   343,   320,
       1,    14,    30,   334,   405,    37,   318,   304,   120,   122,
     364,   400,   304,   230,     1,   230,   358,   231,   118,   100,
     119,   258,   415,    42,   259,   415,   259,    72,    98,   102,
     263,   264,   415,    41,   221,   263,   123,   123,   239,   415,
     283,   283,     1,   242,   243,   244,   245,   396,   415,    26,
     235,   357,   256,   257,   367,   400,     1,   253,   400,   256,
     367,    97,   256,   100,   119,   123,   236,   238,   344,    48,
     374,   118,   118,   118,   118,   118,   118,   165,   300,   165,
     162,   296,     1,   296,    26,   400,   124,   313,     1,   118,
     411,     1,   121,   122,     1,   100,    13,   344,   304,   315,
      13,   406,   339,   340,   341,   353,   415,   120,   362,   406,
     263,    54,    15,     1,   358,    61,    78,     1,   374,     1,
     222,   216,   415,     1,   240,   241,   251,   358,   408,   241,
      26,   286,    15,    15,    11,     1,   118,   411,   122,   232,
     120,     1,   120,   121,   344,     1,   237,   344,   344,   100,
     256,   219,   415,   300,     9,   293,   122,    26,     7,    64,
     326,   327,   330,     1,   330,   333,     1,   333,   331,   343,
       1,   343,   405,   319,   406,   344,   304,   120,   122,   121,
     119,   120,   120,   120,   258,   258,   344,   118,     1,   121,
     124,   124,   232,   247,   250,   251,   400,   403,   245,     1,
     245,   232,   400,     1,   400,     1,   120,   121,   124,   344,
     118,   358,   358,    15,   405,   405,   304,    13,   316,   406,
     339,   341,   344,     1,   260,   261,   415,   260,    51,    75,
     217,   220,   277,   241,   241,    26,    26,   122,   263,   344,
       1,   344,   220,   300,   304,   406,   405,   406,   120,   122,
     120,    15,    18,    29,    42,    46,    49,    50,    73,    79,
      80,    95,   262,   277,   396,    15,   352,   344,   232,     1,
     248,   249,   332,   250,   358,   406,   406,   304,   342,   353,
     400,   400,   400,   400,   344,   118,   122,    95,     1,   118,
     411,   122,   406,   120,   121,   283,   283,   283,   283,   232,
     218,   249,   249,   246,   327,   119,   353,   287,   263,   344,
     119,   242,   286,   242,   120,   120,   411
d4498 1
a4498 1
  YYFPRINTF (yyoutput, ": ");
d4553 1
a4553 1
   to be completed by functions that call yyexpandGLRStack before the
d4558 7
a4564 8
#ifndef YYSTACKEXPANDABLE
# if (! defined (__cplusplus) \
      || (defined (YYLTYPE_IS_TRIVIAL) && YYLTYPE_IS_TRIVIAL \
	  && defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL))
#  define YYSTACKEXPANDABLE 1
# else
#  define YYSTACKEXPANDABLE 0
# endif
a4566 72
#if YYERROR_VERBOSE

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static size_t
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return strlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* !YYERROR_VERBOSE */

a4585 1
  /** Type tag: always true. */
a4586 2
  /** Type tag for yysemantics. If true, yysval applies, otherwise
   *  yyfirstVal applies. */
a4587 1
  /** Number of corresponding LALR(1) machine state. */
a4588 1
  /** Preceding state in this stack */
a4589 1
  /** Source position of the first token produced by my symbol */
a4591 3
    /** First in a chain of alternative reductions producing the
     *  non-terminal corresponding to this state, threaded through
     *  yynext. */
a4592 1
    /** Semantic value for this state. */
a4594 1
  /** Source location for this state. */
a4603 1
  /** Type tag: always false. */
a4604 1
  /** Rule number for this reduction */
a4605 1
  /** The last RHS state in the list of states to be reduced. */
a4606 2
  /** Next sibling in chain of options. To facilitate merging,
   *  options are chained in decreasing order by address. */
a4609 2
/** Type of the items in the GLR stack. The yyisState field
 *  indicates which item of the union is valid. */
d4616 1
d4622 1
a4622 1
  YYJMP_BUF yyexception_buffer;
d4625 1
a4625 1
  size_t yyspaceLeft;
d4631 1
d4633 1
a4634 2
static void yyFail (yyGLRStack* yystack, const char* yymsg)
  __attribute__ ((__noreturn__));
d4636 1
a4636 1
yyFail (yyGLRStack* yystack, const char* yymsg)
d4638 10
a4647 11
  if (yymsg != NULL)
    yyerror (yymsg);
  YYLONGJMP (yystack->yyexception_buffer, 1);
}

static void yyMemoryExhausted (yyGLRStack* yystack)
  __attribute__ ((__noreturn__));
static void
yyMemoryExhausted (yyGLRStack* yystack)
{
  YYLONGJMP (yystack->yyexception_buffer, 2);
d4651 2
a4652 1
/** A printable representation of TOKEN.  */
d4667 1
a4667 1
static void yyfillin (yyGLRStackItem *, int, int) __attribute__ ((__unused__));
d4688 1
a4688 1
     __attribute__ ((__unused__));
d4708 1
a4708 1
	      YYLTYPE* YYOPTIONAL_LOC (yylocp),
d4712 1
a4712 2
  yybool yynormal __attribute__ ((__unused__)) =
    (yystack->yysplitPoint == NULL);
d4731 1
a4731 1
  return yyerror (YY_("syntax error: cannot back up")),     \
a4739 1
  yystack->yyerror_range[1].yystate.yyloc = *yylocp;
d4744 1
a4744 1
#line 212 "parse.y"
d4749 1
a4749 1
#line 214 "parse.y"
d4760 1
a4760 1
#line 225 "parse.y"
d4765 1
a4765 1
#line 227 "parse.y"
d4770 1
a4770 1
#line 229 "parse.y"
d4775 1
a4775 1
#line 231 "parse.y"
d4780 2
a4781 2
#line 236 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_interface); initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), 1); ;}
d4785 2
a4786 2
#line 238 "parse.y"
    { start_unit_implementation (); ;}
d4790 2
a4791 2
#line 240 "parse.y"
    { check_forward_decls (1); ;}
d4794 3
a4796 3
  case 13:
#line 244 "parse.y"
    { ((*yyvalp).ttype) = current_module->name; finalize_module (1); ;}
d4799 3
a4801 7
  case 14:
#line 246 "parse.y"
    {
        if ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype) && current_module->name != (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))
          error ("implementation of module `%s' following interface of module `%s'",
                 IDENTIFIER_NAME (current_module->name), IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)));
      ;}
d4805 2
a4806 2
#line 252 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 2); ;}
d4810 7
a4816 5
#line 254 "parse.y"
    {
        if (co->interface_only)
          exit_compilation ();
      ;}
d4820 7
a4826 2
#line 260 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 4); ;}
d4830 2
a4831 2
#line 266 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_interface); ;}
d4835 7
a4841 2
#line 268 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 2); ;}
d4845 2
a4846 2
#line 270 "parse.y"
    { clear_forward_decls ();  /* don't complain in poplevel */ ;}
d4850 2
a4851 2
#line 275 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_export); start_module_interface (); ;}
d4855 2
a4856 2
#line 277 "parse.y"
    { create_gpi_files (); ;}
d4860 7
a4866 2
#line 282 "parse.y"
    { initialize_module ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), NULL_TREE, 3); ;}
d4870 2
a4871 2
#line 287 "parse.y"
    { current_module->implementation = 1; ;}
d4875 1
a4875 1
#line 289 "parse.y"
d4879 3
a4881 3
  case 30:
#line 294 "parse.y"
    { chk_dialect ("units without `implementation' part are", U_M_PASCAL); ;}
d4885 11
a4895 2
#line 300 "parse.y"
    { start_constructor (0); ;}
d4898 6
a4903 3
  case 35:
#line 304 "parse.y"
    { start_destructor (); ;}
d4907 2
a4908 2
#line 306 "parse.y"
    { finish_destructor (); ;}
d4912 7
a4918 2
#line 312 "parse.y"
    { start_constructor (0); ;}
d4922 2
a4923 2
#line 318 "parse.y"
    { finish_constructor (); ;}
d4926 3
a4928 3
  case 45:
#line 330 "parse.y"
    { chk_dialect_name ("to begin do", E_O_PASCAL); start_constructor (0); ;}
d4931 3
a4933 3
  case 46:
#line 332 "parse.y"
    { finish_constructor (); ;}
d4936 3
a4938 3
  case 47:
#line 337 "parse.y"
    { chk_dialect_name ("to end do", E_O_PASCAL); start_destructor (); ;}
d4941 3
a4943 3
  case 48:
#line 339 "parse.y"
    { finish_destructor (); ;}
d4946 3
a4948 3
  case 49:
#line 344 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE); ;}
d4951 3
a4953 3
  case 50:
#line 346 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d4957 2
a4958 2
#line 348 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d4962 7
a4968 2
#line 353 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) : NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d4971 3
a4973 3
  case 54:
#line 359 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d4976 3
a4978 3
  case 58:
#line 370 "parse.y"
    { yyerrok; ;}
d4982 2
a4983 2
#line 372 "parse.y"
    { error ("module specifications need an export part"); ;}
d4987 2
a4988 2
#line 374 "parse.y"
    { warning ("missing semicolon"); yyerrok; ;}
d4992 2
a4993 2
#line 376 "parse.y"
    { error ("extra semicolon"); ;}
d4997 2
a4998 2
#line 381 "parse.y"
    { export_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5002 2
a5003 2
#line 386 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5006 3
a5008 3
  case 65:
#line 389 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5011 3
a5013 3
  case 66:
#line 394 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_all); ((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE); ;}
d5016 3
a5018 3
  case 68:
#line 400 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5021 3
a5023 3
  case 69:
#line 402 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5026 3
a5028 3
  case 70:
#line 404 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5031 3
a5033 3
  case 71:
#line 406 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5036 3
a5038 3
  case 72:
#line 411 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5041 3
a5043 3
  case 73:
#line 413 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5046 3
a5048 3
  case 74:
#line 415 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); TREE_READONLY (((*yyvalp).ttype)) = 1; ;}
d5051 3
a5053 3
  case 75:
#line 419 "parse.y"
    { do_extra_import (); ;}
d5056 3
a5058 3
  case 81:
#line 432 "parse.y"
    { warning ("missing semicolon"); yyerrok; ;}
d5061 3
a5063 3
  case 82:
#line 437 "parse.y"
    { import_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype) ? IMPORT_QUALIFIED : IMPORT_ISO, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5067 2
a5068 2
#line 448 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5072 6
a5077 2
#line 450 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5080 3
a5082 3
  case 89:
#line 456 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5086 2
a5087 2
#line 458 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5091 2
a5092 2
#line 460 "parse.y"
    { error ("missing comma"); ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5095 3
a5097 3
  case 92:
#line 462 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5100 3
a5102 3
  case 93:
#line 467 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5106 2
a5107 2
#line 473 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5111 2
a5112 2
#line 478 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
d5116 2
a5117 2
#line 480 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d5120 3
a5122 3
  case 100:
#line 490 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
d5125 3
a5127 3
  case 101:
#line 492 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d5131 2
a5132 2
#line 496 "parse.y"
    { check_forward_decls (0); ;}
d5136 2
a5137 7
#line 498 "parse.y"
    { ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
    break;

  case 104:
#line 500 "parse.y"
    { ((*yyvalp).itype) = od_label; ;}
d5141 2
a5142 2
#line 502 "parse.y"
    { ((*yyvalp).itype) = od_routine; ;}
d5146 2
a5147 2
#line 507 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
d5151 12
a5162 2
#line 509 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d5166 2
a5167 2
#line 516 "parse.y"
    { ((*yyvalp).itype) = od_routine; ;}
d5171 2
a5172 2
#line 521 "parse.y"
    { ((*yyvalp).itype) = 2 * od_none; ;}
d5175 3
a5177 8
  case 112:
#line 523 "parse.y"
    { ((*yyvalp).itype) = check_decl_order ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
    break;

  case 114:
#line 528 "parse.y"
    { check_forward_decls (0); ;}
d5181 2
a5182 2
#line 530 "parse.y"
    { ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
d5186 2
a5187 2
#line 532 "parse.y"
    { ((*yyvalp).itype) = od_routine; ;}
d5190 3
a5192 13
  case 117:
#line 537 "parse.y"
    { ((*yyvalp).itype) = od_uses; ;}
    break;

  case 120:
#line 544 "parse.y"
    { warning ("missing comma"); yyerrok; ;}
    break;

  case 121:
#line 549 "parse.y"
    { import_interface ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, IMPORT_USES, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5196 2
a5197 12
#line 555 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); chk_dialect ("file name specification with `in' is", BORLAND_DELPHI); ;}
    break;

  case 124:
#line 559 "parse.y"
    {
#ifndef EGCS97
        push_obstacks_nochange ();
        end_temporary_allocation ();
#endif
      ;}
d5201 2
a5202 12
#line 566 "parse.y"
    {
#ifndef EGCS97
        pop_obstacks ();
#endif
        ((*yyvalp).itype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype);
      ;}
    break;

  case 126:
#line 576 "parse.y"
    { ((*yyvalp).itype) = od_const; ;}
d5206 2
a5207 2
#line 578 "parse.y"
    { current_type_list = build_tree_list (NULL_TREE, NULL_TREE); ;}
d5211 2
a5212 2
#line 580 "parse.y"
    { declare_types (); ((*yyvalp).itype) = od_type; ;}
d5216 2
a5217 12
#line 582 "parse.y"
    { ((*yyvalp).itype) = od_var; ;}
    break;

  case 130:
#line 589 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 131:
#line 591 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5221 2
a5222 2
#line 593 "parse.y"
    { error ("non-label in label_list"); ;}
d5226 2
a5227 56
#line 595 "parse.y"
    { declare_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 134:
#line 597 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 137:
#line 604 "parse.y"
    { chk_dialect ("non-numeric labels are", B_D_M_PASCAL); ;}
    break;

  case 141:
#line 615 "parse.y"
    { declare_constant ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 142:
#line 618 "parse.y"
    {
        lex_const_equal = -1;
        declare_variables (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)), VQ_BP_CONST, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 145:
#line 631 "parse.y"
    {
        tree t, ids = ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype));
        if ((TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE || TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE)
            && TREE_CODE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) == FUNCTION_TYPE)
          TREE_PRIVATE (ids) = !!allow_function_calls (0);  /* kludge */
        /* With `begin var Foo: Integer; Foo := ...' where `Foo'
           is a built-in identifier, parser look-ahead would already get
           its special meaning before we get to declaring the variables.
           So mark the identifiers. (fjf791.pas) */
        for (t = ids; t; t = TREE_CHAIN (t))
          PASCAL_PENDING_DECLARATION (TREE_VALUE (t)) = 1;
      ;}
    break;

  case 146:
#line 644 "parse.y"
    {
        tree t, ids = (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype);
        for (t = ids; t; t = TREE_CHAIN (t))
          PASCAL_PENDING_DECLARATION (TREE_VALUE (t)) = 0;
        lex_const_equal = -1;
        ((*yyvalp).ttype) = declare_variables (ids, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
        if ((TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE || TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE)
            && TREE_CODE (TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype))) == FUNCTION_TYPE)
          allow_function_calls (TREE_PRIVATE (ids));
        yyerrok;
      ;}
d5230 3
a5232 3
  case 147:
#line 656 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; lex_const_equal = -1; ;}
d5235 2
a5236 2
  case 149:
#line 662 "parse.y"
d5240 17
a5256 2
  case 151:
#line 668 "parse.y"
d5260 13
a5272 3
  case 152:
#line 670 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_name); ;}
d5275 3
a5277 3
  case 153:
#line 672 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype))); ;}
d5280 3
a5282 3
  case 155:
#line 678 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5285 3
a5287 3
  case 156:
#line 683 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5290 3
a5292 3
  case 157:
#line 685 "parse.y"
    { ((*yyvalp).ttype) = TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5295 3
a5297 3
  case 159:
#line 691 "parse.y"
    { ((*yyvalp).itype) = allow_function_calls (0); lex_const_equal = -1; ;}
d5300 2
a5301 2
  case 160:
#line 693 "parse.y"
d5303 2
a5304 3
        allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype));
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
        PASCAL_ABSOLUTE_CLAUSE (((*yyvalp).ttype)) = 1;
d5308 2
a5309 7
  case 161:
#line 699 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 163:
#line 705 "parse.y"
d5313 2
a5314 2
  case 165:
#line 708 "parse.y"
d5318 2
a5319 2
  case 166:
#line 710 "parse.y"
d5323 2
a5324 2
  case 168:
#line 716 "parse.y"
d5336 2
a5337 2
  case 169:
#line 726 "parse.y"
d5345 2
a5346 2
  case 170:
#line 732 "parse.y"
d5354 2
a5355 2
  case 171:
#line 738 "parse.y"
d5359 3
a5361 3
  case 172:
#line 740 "parse.y"
    { ((*yyvalp).ttype) = start_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0); ;}
d5364 2
a5365 12
  case 173:
#line 742 "parse.y"
    { lex_const_equal = -1; finish_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype) != NULL_TREE); yyerrok; ;}
    break;

  case 174:
#line 744 "parse.y"
    { ((*yyvalp).ttype) = start_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 1); ;}
    break;

  case 175:
#line 746 "parse.y"
d5373 2
a5374 30
  case 176:
#line 752 "parse.y"
    {
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
        PASCAL_TYPE_CLASS (t) = 1;
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), t, NULL_TREE);
        warning("ignored parent in Delphi forward class declaration");
      ;}
    break;

  case 177:
#line 759 "parse.y"
    {
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
	PASCAL_TYPE_CLASS (t) = 1;
	build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), t, NULL_TREE); 
      ;}
    break;

  case 178:
#line 765 "parse.y"
    {
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
        PASCAL_TYPE_CLASS (t) = 1;
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), t, NULL_TREE);
      ;}
    break;

  case 179:
#line 774 "parse.y"
d5378 2
a5379 2
  case 180:
#line 776 "parse.y"
d5383 2
a5384 2
  case 182:
#line 782 "parse.y"
d5388 2
a5389 2
  case 183:
#line 784 "parse.y"
d5393 2
a5394 2
  case 184:
#line 786 "parse.y"
d5398 2
a5399 2
  case 186:
#line 792 "parse.y"
d5403 2
a5404 2
  case 188:
#line 798 "parse.y"
d5408 2
a5409 12
  case 189:
#line 803 "parse.y"
    {
#ifndef EGCS97
        push_obstacks_nochange ();
        end_temporary_allocation ();
#endif
      ;}
    break;

  case 190:
#line 810 "parse.y"
d5418 2
a5419 2
  case 192:
#line 821 "parse.y"
d5423 2
a5424 2
  case 194:
#line 827 "parse.y"
d5428 3
a5430 3
  case 195:
#line 829 "parse.y"
    { ((*yyvalp).ttype) = build_discriminated_schema_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d5433 2
a5434 2
  case 199:
#line 834 "parse.y"
d5438 2
a5439 2
  case 201:
#line 837 "parse.y"
d5443 38
a5480 2
  case 202:
#line 842 "parse.y"
d5484 2
a5485 2
  case 203:
#line 844 "parse.y"
d5492 19
a5510 3
  case 204:
#line 853 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0))); ;}
d5513 12
a5524 3
  case 205:
#line 855 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0)))); yyerrok; ;}
d5528 2
a5529 2
#line 857 "parse.y"
    { error ("missing expression"); ((*yyvalp).ttype) = NULL_TREE; ;}
d5533 2
a5534 2
#line 859 "parse.y"
    { error ("missing comma"); ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0)))); yyerrok; ;}
d5538 2
a5539 2
#line 861 "parse.y"
    { error ("extra comma"); ;}
d5543 2
a5544 2
#line 866 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_array_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype)); ;}
d5547 3
a5549 3
  case 211:
#line 869 "parse.y"
    { ((*yyvalp).ttype) = build_file_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0); ;}
d5552 3
a5554 3
  case 212:
#line 871 "parse.y"
    { ((*yyvalp).ttype) = build_set_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5558 2
a5559 2
#line 873 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5563 16
a5578 2
#line 875 "parse.y"
    { ((*yyvalp).ttype) = build_record (NULL_TREE, NULL_TREE, NULL_TREE); ;}
d5582 10
a5591 2
#line 882 "parse.y"
    { ((*yyvalp).ttype) = TREE_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5595 2
a5596 2
#line 888 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5600 6
a5605 7
#line 890 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 221:
#line 892 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (error_mark_node, error_mark_node); ;}
d5609 2
a5610 2
#line 894 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (error_mark_node, error_mark_node); ;}
d5614 2
a5615 2
#line 899 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5619 2
a5620 2
#line 901 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5623 3
a5625 3
  case 225:
#line 906 "parse.y"
    { ((*yyvalp).ttype) = build_record (NULL_TREE, NULL_TREE, NULL_TREE); ;}
d5628 3
a5630 3
  case 226:
#line 908 "parse.y"
    { ((*yyvalp).ttype) = build_record ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE); ;}
d5633 3
a5635 3
  case 227:
#line 910 "parse.y"
    { ((*yyvalp).ttype) = build_record ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5638 3
a5640 3
  case 231:
#line 921 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5644 2
a5645 2
#line 923 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
d5649 7
a5655 2
#line 925 "parse.y"
    { error ("extra semicolon"); ;}
d5659 2
a5660 2
#line 931 "parse.y"
    { ((*yyvalp).ttype) = build_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5664 2
a5665 2
#line 936 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5669 2
a5670 7
#line 938 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, build_field (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 238:
#line 943 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_field ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5674 2
a5675 2
#line 945 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_field ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d5679 2
a5680 2
#line 947 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d5684 2
a5685 2
#line 949 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d5688 3
a5690 3
  case 243:
#line 955 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5693 3
a5695 3
  case 244:
#line 957 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
d5698 3
a5700 3
  case 245:
#line 959 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5703 3
a5705 3
  case 247:
#line 965 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), build_field (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d5708 3
a5710 3
  case 248:
#line 970 "parse.y"
    { chk_dialect ("type denoters (no identifiers) as variant tag type are", U_B_D_M_PASCAL); ;}
d5714 2
a5715 2
#line 980 "parse.y"
    { ((*yyvalp).ttype) = build_enum_type (nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d5719 2
a5720 2
#line 982 "parse.y"
    { ((*yyvalp).ttype) = error_mark_node; ;}
d5724 2
a5725 2
#line 987 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d5729 2
a5730 2
#line 989 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d5734 2
a5735 2
#line 991 "parse.y"
    { ((*yyvalp).ttype) = tree_cons ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d5739 2
a5740 2
#line 993 "parse.y"
    { error ("extra comma"); ;}
d5743 3
a5745 3
  case 258:
#line 999 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_subrange_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d5748 3
a5750 7
  case 259:
#line 1001 "parse.y"
    {
        defining_packed_type -= (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype);
        chk_dialect ("packed subrange types are", B_D_PASCAL);
        ((*yyvalp).ttype) = build_pascal_subrange_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype));
      ;}
d5754 2
a5755 2
#line 1010 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5759 2
a5760 2
#line 1012 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5764 22
a5785 2
#line 1014 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5788 3
a5790 3
  case 263:
#line 1016 "parse.y"
    { ((*yyvalp).ttype) = EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) ? error_mark_node : build_pascal_pointer_type (p_build_type_variant ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1, TYPE_VOLATILE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)))); ;}
d5793 6
a5798 3
  case 264:
#line 1021 "parse.y"
    { ((*yyvalp).ttype) = get_pointer_domain_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5801 2
a5802 2
  case 265:
#line 1023 "parse.y"
d5804 3
a5806 3
        chk_dialect ("pointers to routines are", GNU_PASCAL);
        gcc_assert (EM ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) || (TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)) == REFERENCE_TYPE && TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))));
        ((*yyvalp).ttype) = TREE_TYPE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
d5810 3
a5812 3
  case 267:
#line 1033 "parse.y"
    { ((*yyvalp).ttype) = build_procedural_type (void_type_node, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5815 3
a5817 3
  case 268:
#line 1035 "parse.y"
    { ((*yyvalp).ttype) = build_procedural_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5820 2
a5821 2
  case 270:
#line 1041 "parse.y"
d5825 2
a5826 2
  case 271:
#line 1043 "parse.y"
d5830 2
a5831 2
  case 275:
#line 1054 "parse.y"
d5835 2
a5836 2
  case 276:
#line 1056 "parse.y"
d5840 2
a5841 2
  case 278:
#line 1062 "parse.y"
d5845 2
a5846 2
  case 279:
#line 1064 "parse.y"
d5850 2
a5851 2
  case 280:
#line 1069 "parse.y"
d5855 2
a5856 2
  case 281:
#line 1071 "parse.y"
d5860 2
a5861 2
  case 282:
#line 1073 "parse.y"
d5865 2
a5866 2
  case 283:
#line 1075 "parse.y"
d5870 2
a5871 2
  case 284:
#line 1077 "parse.y"
d5875 2
a5876 2
  case 285:
#line 1079 "parse.y"
d5880 2
a5881 2
  case 286:
#line 1081 "parse.y"
d5885 2
a5886 2
  case 287:
#line 1083 "parse.y"
d5890 89
a5978 3
  case 288:
#line 1085 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5981 3
a5983 3
  case 289:
#line 1087 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5986 3
a5988 3
  case 292:
#line 1094 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5991 3
a5993 3
  case 293:
#line 1096 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d5996 2
a5997 2
  case 294:
#line 1100 "parse.y"
d6001 2
a6002 2
  case 295:
#line 1102 "parse.y"
d6006 2
a6007 2
  case 296:
#line 1104 "parse.y"
d6011 31
a6041 2
  case 297:
#line 1111 "parse.y"
d6045 2
a6046 2
  case 298:
#line 1122 "parse.y"
d6050 2
a6051 2
  case 299:
#line 1124 "parse.y"
d6055 2
a6056 2
  case 300:
#line 1126 "parse.y"
d6063 6
a6068 3
  case 301:
#line 1131 "parse.y"
    { finish_routine ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype)); ;}
d6071 2
a6072 2
  case 304:
#line 1141 "parse.y"
d6076 2
a6077 2
  case 305:
#line 1143 "parse.y"
d6081 2
a6082 2
  case 306:
#line 1145 "parse.y"
d6086 2
a6087 2
  case 307:
#line 1155 "parse.y"
d6091 2
a6092 2
  case 308:
#line 1157 "parse.y"
d6096 2
a6097 2
  case 309:
#line 1159 "parse.y"
d6101 2
a6102 2
  case 310:
#line 1161 "parse.y"
d6106 2
a6107 2
  case 313:
#line 1171 "parse.y"
d6111 2
a6112 2
  case 314:
#line 1176 "parse.y"
d6116 2
a6117 2
  case 315:
#line 1178 "parse.y"
d6121 2
a6122 2
  case 316:
#line 1180 "parse.y"
d6126 2
a6127 2
  case 317:
#line 1182 "parse.y"
d6131 2
a6132 2
  case 318:
#line 1184 "parse.y"
d6136 2
a6137 2
  case 319:
#line 1186 "parse.y"
d6141 2
a6142 2
  case 320:
#line 1188 "parse.y"
d6146 2
a6147 2
  case 321:
#line 1190 "parse.y"
d6151 2
a6152 2
  case 322:
#line 1192 "parse.y"
d6156 2
a6157 2
  case 324:
#line 1198 "parse.y"
d6161 6
a6166 3
  case 325:
#line 1200 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6169 3
a6171 3
  case 326:
#line 1205 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype)); ;}
d6174 3
a6176 3
  case 328:
#line 1211 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6179 3
a6181 3
  case 330:
#line 1217 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d6184 3
a6186 3
  case 331:
#line 1219 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d6189 3
a6191 3
  case 332:
#line 1221 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d6194 3
a6196 3
  case 333:
#line 1223 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d6199 6
a6204 3
  case 334:
#line 1225 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d6207 2
a6208 17
  case 340:
#line 1241 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); chk_dialect ("operator result variables with `=' are", GNU_PASCAL); ;}
    break;

  case 341:
#line 1243 "parse.y"
    { error ("missing operator result variable"); ;}
    break;

  case 343:
#line 1249 "parse.y"
    { chk_dialect ("empty parentheses are", BORLAND_DELPHI); ((*yyvalp).ttype) = void_list_node; ;}
    break;

  case 344:
#line 1251 "parse.y"
d6212 2
a6213 2
  case 345:
#line 1253 "parse.y"
d6217 2
a6218 2
  case 346:
#line 1255 "parse.y"
d6222 2
a6223 2
  case 347:
#line 1257 "parse.y"
d6227 2
a6228 2
  case 349:
#line 1263 "parse.y"
d6232 2
a6233 2
  case 350:
#line 1265 "parse.y"
d6237 2
a6238 2
  case 352:
#line 1271 "parse.y"
d6242 2
a6243 2
  case 353:
#line 1273 "parse.y"
d6247 2
a6248 2
  case 354:
#line 1275 "parse.y"
d6252 2
a6253 2
  case 355:
#line 1277 "parse.y"
d6257 2
a6258 2
  case 356:
#line 1279 "parse.y"
d6262 2
a6263 2
  case 357:
#line 1281 "parse.y"
d6267 2
a6268 22
  case 358:
#line 1286 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 359:
#line 1288 "parse.y"
    { ((*yyvalp).ttype) = check_result_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 362:
#line 1295 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); chk_dialect ("function result variable specifications are", E_O_PASCAL); ;}
    break;

  case 364:
#line 1301 "parse.y"
    { chk_dialect ("function result variables without `=' are", GNU_PASCAL); ;}
    break;

  case 367:
#line 1311 "parse.y"
d6272 2
a6273 2
  case 368:
#line 1313 "parse.y"
d6277 2
a6278 7
  case 372:
#line 1324 "parse.y"
    { ((*yyvalp).ttype) = build_type_of ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 375:
#line 1334 "parse.y"
d6282 2
a6283 2
  case 376:
#line 1336 "parse.y"
d6291 2
a6292 2
  case 378:
#line 1346 "parse.y"
d6296 2
a6297 2
  case 379:
#line 1348 "parse.y"
d6301 6
a6306 3
  case 381:
#line 1354 "parse.y"
    { TREE_TYPE ((((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6309 6
a6314 3
  case 382:
#line 1359 "parse.y"
    { TREE_TYPE ((((*yyvalp).ttype) = build_tree_list (NULL_TREE, NULL_TREE))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6317 2
a6318 2
  case 385:
#line 1371 "parse.y"
d6322 2
a6323 2
  case 387:
#line 1377 "parse.y"
d6327 3
a6329 3
  case 390:
#line 1384 "parse.y"
    { chk_dialect ("variable declarations in the statement part are", GNU_PASCAL); pushlevel_expand (1); ;}
d6332 2
a6333 7
  case 391:
#line 1386 "parse.y"
    { un_initialize_block ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0, 0); ;}
    break;

  case 393:
#line 1392 "parse.y"
d6337 2
a6338 2
  case 394:
#line 1394 "parse.y"
d6342 2
a6343 12
  case 396:
#line 1402 "parse.y"
    { mark_temporary_levels (); ;}
    break;

  case 397:
#line 1404 "parse.y"
    { release_temporary_levels (); ;}
    break;

  case 402:
#line 1419 "parse.y"
d6347 2
a6348 2
  case 403:
#line 1421 "parse.y"
d6352 2
a6353 2
  case 404:
#line 1423 "parse.y"
d6357 2
a6358 2
  case 405:
#line 1425 "parse.y"
d6362 2
a6363 2
  case 406:
#line 1427 "parse.y"
d6367 2
a6368 2
  case 407:
#line 1429 "parse.y"
d6372 3
a6374 3
  case 408:
#line 1431 "parse.y"
    { build_predef_call (p_Exit, build_tree_list (NULL_TREE, void_type_node)); ;}
d6377 3
a6379 3
  case 409:
#line 1433 "parse.y"
    { build_predef_call (p_Exit, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d6382 3
a6384 3
  case 411:
#line 1436 "parse.y"
    { restore_identifiers ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)); ;}
d6387 2
a6388 2
  case 412:
#line 1438 "parse.y"
d6392 2
a6393 2
  case 413:
#line 1440 "parse.y"
d6397 2
a6398 2
  case 414:
#line 1442 "parse.y"
d6400 1
a6400 1
        if (!(((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype) && extra_warnings)
d6406 6
a6411 3
  case 415:
#line 1448 "parse.y"
    { ((*yyvalp).ttype) = pascal_expand_start_case ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6414 2
a6415 2
  case 416:
#line 1450 "parse.y"
d6417 3
a6419 6
        if (!EM (current_case_values))
          {
            tree duplicate;
            int res = pushcase (NULL_TREE, NULL, build_decl (LABEL_DECL, NULL_TREE, NULL_TREE), &duplicate);
            gcc_assert (!res);
          }
d6423 2
a6424 2
  case 417:
#line 1459 "parse.y"
d6429 1
a6429 1
        if (!EM (current_case_values))
d6431 1
a6431 1
        current_case_values = (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype);
d6436 2
a6437 2
  case 418:
#line 1469 "parse.y"
d6441 2
a6442 2
  case 419:
#line 1471 "parse.y"
a6445 98
  case 420:
#line 1473 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc)); expand_exit_loop_if_false (0, build_pascal_unary_op (TRUTH_NOT_EXPR, check_boolean ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)))); ;}
    break;

  case 421:
#line 1475 "parse.y"
    { expand_end_loop (); ;}
    break;

  case 422:
#line 1477 "parse.y"
    { expand_start_loop (1); ;}
    break;

  case 423:
#line 1479 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc)); expand_exit_loop_if_false (0, check_boolean ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 424:
#line 1481 "parse.y"
    { expand_end_loop (); ;}
    break;

  case 425:
#line 1483 "parse.y"
    { ((*yyvalp).ttype) = start_for_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code)); ;}
    break;

  case 426:
#line 1485 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yyloc)); finish_for_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.code)); ;}
    break;

  case 427:
#line 1487 "parse.y"
    { ((*yyvalp).ttype) = start_for_set_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 428:
#line 1489 "parse.y"
    { LOCATION_NOTE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yyloc)); finish_for_set_loop ((((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 429:
#line 1491 "parse.y"
    { pascal_expand_goto ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 430:
#line 1496 "parse.y"
    { set_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 432:
#line 1502 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 433:
#line 1504 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
    break;

  case 434:
#line 1506 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
    break;

  case 435:
#line 1508 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 436:
#line 1513 "parse.y"
    { ((*yyvalp).ttype) = pascal_shadow_record_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
    break;

  case 437:
#line 1515 "parse.y"
    { ((*yyvalp).ttype) = pascal_shadow_record_fields ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 438:
#line 1520 "parse.y"
    { expand_start_cond (check_boolean ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)), 0); ;}
    break;

  case 439:
#line 1522 "parse.y"
    {
        if (!(((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype) && extra_warnings)
          warning ("empty statement after `then'");
      ;}
    break;

d6447 2
a6448 8
#line 1530 "parse.y"
    {
        /* Create an implicit `otherwise' (in the rule above) to avoid warnings
           about unhandled cases. In ISO Pascal, this is a run-time error. */
        if (co->case_value_checking)
          build_predef_call (p_CaseNoMatchError, NULL_TREE);
        ((*yyvalp).itype) = 0;
      ;}
d6452 2
a6453 2
#line 1538 "parse.y"
    { ((*yyvalp).itype) = 1; ;}
d6457 7
a6463 2
#line 1543 "parse.y"
    { chk_dialect ("`else' in `case' statements is", B_D_M_PASCAL); ;}
d6467 2
a6468 2
#line 1549 "parse.y"
    { ((*yyvalp).itype) = 0; ;}
d6472 7
a6478 2
#line 1551 "parse.y"
    { ((*yyvalp).itype) = 1; ;}
d6482 2
a6483 2
#line 1557 "parse.y"
    { yyerrok; ;}
d6487 2
a6488 2
#line 1559 "parse.y"
    { error ("case element expected"); ;}
d6492 2
a6493 2
#line 1561 "parse.y"
    { error ("missing semicolon"); yyerrok; ;}
d6497 2
a6498 2
#line 1563 "parse.y"
    { error ("extra semicolon"); ;}
d6501 3
a6503 3
  case 451:
#line 1568 "parse.y"
    { pascal_pushcase ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6506 3
a6508 3
  case 452:
#line 1570 "parse.y"
    { expand_exit_something (); ;}
d6512 2
a6513 2
#line 1576 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6517 1
a6517 1
#line 1578 "parse.y"
d6522 7
a6528 2
#line 1580 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d6532 2
a6533 2
#line 1586 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6537 5
a6541 2
#line 1588 "parse.y"
    { chk_dialect ("`case' ranges are", NOT_CLASSIC_PASCAL); ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6545 8
a6552 2
#line 1590 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); error ("missing `..'"); yyerrok; ;}
d6556 2
a6557 2
#line 1592 "parse.y"
    { error ("extra `..'"); ((*yyvalp).ttype) = build_tree_list (NULL_TREE, string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0)); ;}
d6561 2
a6562 2
#line 1597 "parse.y"
    { ((*yyvalp).code) = LE_EXPR; ;}
d6565 3
a6567 3
  case 463:
#line 1599 "parse.y"
    { ((*yyvalp).code) = GE_EXPR; ;}
d6570 3
a6572 3
  case 464:
#line 1601 "parse.y"
    { error ("missing `to' or `downto'"); ((*yyvalp).code) = LE_EXPR; ;}
d6575 3
a6577 3
  case 466:
#line 1607 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_lvalue_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6581 2
a6582 2
#line 1613 "parse.y"
    { error ("using `=' instead of `:=' in assignment"); ;}
d6586 2
a6587 2
#line 1618 "parse.y"
    { build_predef_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.itype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6591 2
a6592 2
#line 1620 "parse.y"
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))->symbol, NULL_TREE); ;}
d6596 2
a6597 2
#line 1622 "parse.y"
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype))->symbol, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6601 2
a6602 2
#line 1624 "parse.y"
    { build_new_dispose (p_Dispose, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE); ;}
d6606 2
a6607 2
#line 1626 "parse.y"
    { build_new_dispose (p_Dispose, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6611 2
a6612 2
#line 1628 "parse.y"
    { build_new_dispose (p_Dispose, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6616 7
a6622 2
#line 1630 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE, NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype)); ;}
d6625 3
a6627 3
  case 476:
#line 1632 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.itype)); ;}
d6630 3
a6632 3
  case 477:
#line 1634 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.itype)); ;}
d6635 3
a6637 3
  case 478:
#line 1636 "parse.y"
    { pascal_expand_asm_operands ((((yyGLRStackItem const *)yyvsp)[YYFILL (-7)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-9)].yystate.yysemantics.yysval.itype)); ;}
d6640 3
a6642 3
  case 479:
#line 1641 "parse.y"
    { ((*yyvalp).itype) = 0; ;}
d6645 3
a6647 3
  case 480:
#line 1643 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_volatile); ((*yyvalp).itype) = 1; ;}
d6651 8
a6658 2
#line 1654 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6662 2
a6663 2
#line 1659 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6667 2
a6668 2
#line 1664 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6672 2
a6673 2
#line 1666 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6677 2
a6678 10
#line 1673 "parse.y"
    {
        ((*yyvalp).ttype) = string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0);
        if (PEDANTIC (NOT_CLASSIC_PASCAL)
            && (TREE_CODE_CLASS (TREE_CODE (((*yyvalp).ttype))) != 'c'
                || TREE_CODE (((*yyvalp).ttype)) == STRING_CST
                || !PASCAL_CST_FRESH (((*yyvalp).ttype))
                || PASCAL_CST_PARENTHESES (((*yyvalp).ttype))))
          error ("ISO 7185 Pascal allows only simple constants");
      ;}
d6682 2
a6683 2
#line 1686 "parse.y"
    { ((*yyvalp).ttype) = fold ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6687 2
a6688 2
#line 1688 "parse.y"
    { ((*yyvalp).ttype) = fold (parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d6692 2
a6693 2
#line 1694 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_unary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6697 2
a6698 2
#line 1696 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6702 2
a6703 2
#line 1698 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1); ;}
d6707 2
a6708 2
#line 1700 "parse.y"
    { ((*yyvalp).ttype) = start_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6712 2
a6713 2
#line 1702 "parse.y"
    { if ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) LOCATION_NOTE (COPYLOC ((*yylocp), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc))); ((*yyvalp).ttype) = finish_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6716 3
a6718 3
  case 498:
#line 1708 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6722 2
a6723 2
#line 1710 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1); ;}
d6727 2
a6728 2
#line 1712 "parse.y"
    { ((*yyvalp).ttype) = start_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6732 7
a6738 2
#line 1714 "parse.y"
    { if ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) LOCATION_NOTE (COPYLOC ((*yylocp), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc))); ((*yyvalp).ttype) = finish_boolean_binary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6742 2
a6743 2
#line 1720 "parse.y"
    { ((*yyvalp).ttype) = build_operator_call ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6747 2
a6748 2
#line 1722 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op (POW_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6752 2
a6753 2
#line 1724 "parse.y"
    { ((*yyvalp).ttype) = parser_build_binary_op (POWER_EXPR, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6757 2
a6758 2
#line 1726 "parse.y"
    { ((*yyvalp).ttype) = build_is_as ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), p_is); ;}
d6761 3
a6763 3
  case 507:
#line 1728 "parse.y"
    { ((*yyvalp).ttype) = build_is_as ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), p_as); ;}
d6766 3
a6768 8
  case 508:
#line 1733 "parse.y"
    { ((*yyvalp).ttype) = set_exp_original_code (build_pascal_unary_op ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.code)); ;}
    break;

  case 509:
#line 1735 "parse.y"
    { chk_dialect ("the address operator is", B_D_M_PASCAL); ((*yyvalp).ttype) = build_pascal_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), !co->typed_address); ;}
d6772 1
a6772 16
#line 1739 "parse.y"
    { ((*yyvalp).ttype) = null_pointer_node; ;}
    break;

  case 514:
#line 1742 "parse.y"
    { ((*yyvalp).ttype) = build_variable_or_routine_access ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 520:
#line 1758 "parse.y"
    { ((*yyvalp).ttype) = combine_strings ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1); ;}
    break;

  case 521:
#line 1763 "parse.y"
d6776 3
a6778 3
  case 522:
#line 1765 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d6781 15
a6795 3
  case 525:
#line 1772 "parse.y"
    { ((*yyvalp).ttype) = build_caret_string_constant ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.itype)); ;}
d6798 2
a6799 2
  case 544:
#line 1783 "parse.y"
d6801 1
a6801 1
        if (PASCAL_TYPE_UNDISCRIMINATED_STRING (((*yyvalp).ttype)))
d6803 2
a6804 3
            if (!(co->pascal_dialect & B_D_M_PASCAL))
              error_or_warning (co->pascal_dialect & E_O_PASCAL, "missing string capacity -- assuming 255");
            ((*yyvalp).ttype) = string255_type_node;
d6809 8
a6816 12
  case 545:
#line 1795 "parse.y"
    {
        tree decl = lookup_name ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
        ((*yyvalp).ttype) = error_mark_node;
        if (!decl)
          error ("unknown identifier `%s'", IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)));
        else if (TREE_CODE (decl) != TYPE_DECL)
          error ("type name expected, `%s' given", IDENTIFIER_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)));
        else
          ((*yyvalp).ttype) = TREE_TYPE (decl);
      ;}
d6819 3
a6821 3
  case 547:
#line 1810 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_id ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6824 3
a6826 3
  case 548:
#line 1815 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))->symbol, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6829 3
a6831 3
  case 551:
#line 1822 "parse.y"
    { ((*yyvalp).ttype) = TYPE_NAME ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6834 3
a6836 3
  case 552:
#line 1824 "parse.y"
    { ((*yyvalp).ttype) = set_exp_original_code ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NOP_EXPR); ;}
d6839 3
a6841 3
  case 553:
#line 1826 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_or_component_access ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6844 3
a6846 3
  case 554:
#line 1828 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_pointer_reference ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6849 3
a6851 3
  case 555:
#line 1830 "parse.y"
    { ((*yyvalp).ttype) = build_array_ref_or_constructor ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6854 3
a6856 3
  case 556:
#line 1832 "parse.y"
    { ((*yyvalp).ttype) = build_iso_constructor ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d6859 3
a6861 3
  case 557:
#line 1834 "parse.y"
    { chk_dialect ("empty parentheses are", BORLAND_DELPHI | MAC_PASCAL); ((*yyvalp).ttype) = build_call_or_cast ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d6864 3
a6866 3
  case 558:
#line 1836 "parse.y"
    { allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.itype)); ((*yyvalp).ttype) = build_call_or_cast ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6869 3
a6871 3
  case 559:
#line 1838 "parse.y"
    { ((*yyvalp).ttype) = build_inherited_method ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6874 3
a6876 3
  case 560:
#line 1840 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_FormatString, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6879 3
a6881 3
  case 561:
#line 1842 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_Assigned, build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype)); ;}
d6884 3
a6886 3
  case 562:
#line 1844 "parse.y"
    { ((*yyvalp).ttype) = build_pascal_address_expression ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), co->pascal_dialect & B_D_M_PASCAL); ;}
d6889 3
a6891 3
  case 563:
#line 1846 "parse.y"
    { ((*yyvalp).ttype) = build_new_dispose (p_New, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, NULL_TREE); ;}
d6894 3
a6896 3
  case 564:
#line 1848 "parse.y"
    { ((*yyvalp).ttype) = build_new_dispose (p_New, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6899 6
a6904 3
  case 565:
#line 1850 "parse.y"
    { ((*yyvalp).ttype) = build_new_dispose (p_New, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6907 3
a6909 3
  case 567:
#line 1856 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype)); yyerrok; ;}
d6912 2
a6913 2
  case 568:
#line 1858 "parse.y"
d6915 9
a6923 3
        ((*yyvalp).ttype) = build_tree_list (NULL_TREE, TREE_CODE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) == TYPE_DECL ? (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype) : build_variable_or_routine_access ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)));
        allow_function_calls ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.itype));
        yyerrok;
d6927 8
a6934 3
  case 569:
#line 1866 "parse.y"
    { ((*yyvalp).itype) = allow_function_calls (0); ;}
d6938 1
a6938 1
#line 1871 "parse.y"
d6943 2
a6944 2
#line 1873 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); yyerrok; ;}
d6948 2
a6949 2
#line 1875 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, error_mark_node); ;}
d6953 2
a6954 7
#line 1877 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, error_mark_node); error ("extra comma"); ;}
    break;

  case 575:
#line 1883 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6957 3
a6959 3
  case 576:
#line 1885 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d6963 2
a6964 2
#line 1887 "parse.y"
    { error ("extra comma"); ;}
d6968 2
a6969 2
#line 1893 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6973 2
a6974 2
#line 1895 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6978 2
a6979 2
#line 1897 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)); ;}
d6983 7
a6989 2
#line 1902 "parse.y"
    { chk_dialect ("untyped files are", U_B_D_M_PASCAL); ((*yyvalp).ttype) = untyped_file_type_node; ;}
d6993 2
a6994 2
#line 1908 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6998 20
a7017 2
#line 1910 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d7021 2
a7022 2
#line 1918 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d7026 5
a7030 2
#line 1923 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7034 2
a7035 2
#line 1925 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7039 2
a7040 2
#line 1930 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_tree_list (build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))); ;}
d7044 2
a7045 2
#line 1932 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), build_tree_list (build_tree_list (NULL_TREE, integer_zero_node), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))); ;}
d7049 11
a7059 2
#line 1937 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d7063 2
a7064 2
#line 1942 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (build_tree_list (NULL_TREE, NULL_TREE), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7068 2
a7069 7
#line 1947 "parse.y"
    { ((*yyvalp).ttype) = maybe_schema_discriminant ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 596:
#line 1949 "parse.y"
    { ((*yyvalp).ttype) = NULL_TREE; ;}
d7073 2
a7074 7
#line 1951 "parse.y"
    { PASCAL_BP_INITIALIZER_LIST ((((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)))) = 1; ;}
    break;

  case 598:
#line 1953 "parse.y"
    { ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7078 2
a7079 2
#line 1955 "parse.y"
    { error ("invalid component value"); ((*yyvalp).ttype) = error_mark_node; ;}
d7082 2
a7083 2
  case 601:
#line 1961 "parse.y"
a7086 5
  case 602:
#line 1963 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); error ("missing separator"); ;}
    break;

d7088 2
a7089 2
#line 1969 "parse.y"
    { chk_dialect ("initializers separated with `,' are", B_D_M_PASCAL); ;}
d7093 1
a7093 1
#line 1974 "parse.y"
d7098 1
a7098 1
#line 1976 "parse.y"
d7102 5
d7108 2
a7109 2
#line 1982 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d7113 2
a7114 2
#line 1984 "parse.y"
    { error ("missing index expression"); ((*yyvalp).ttype) = NULL_TREE; ;}
d7118 2
a7119 2
#line 1986 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing comma"); yyerrok; ;}
d7123 2
a7124 2
#line 1988 "parse.y"
    { error ("extra comma"); ;}
d7128 2
a7129 2
#line 1993 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d7133 2
a7134 2
#line 1995 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1), NULL_TREE); ;}
d7138 2
a7139 2
#line 1997 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 1), string_may_be_char ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 1)); ;}
d7143 2
a7144 2
#line 2002 "parse.y"
    { ((*yyvalp).ttype) = build_set_constructor (NULL_TREE); ;}
d7147 3
a7149 3
  case 616:
#line 2004 "parse.y"
    { ((*yyvalp).ttype) = build_set_constructor (nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
d7153 2
a7154 7
#line 2010 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 619:
#line 2012 "parse.y"
    { TREE_CHAIN ((((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d7158 2
a7159 2
#line 2014 "parse.y"
    { error ("extra comma"); ;}
d7163 2
a7164 2
#line 2019 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d7168 2
a7169 7
#line 2021 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 623:
#line 2027 "parse.y"
    { ((*yyvalp).code) = CONVERT_EXPR; ;}
d7173 2
a7174 2
#line 2028 "parse.y"
    { ((*yyvalp).code) = NEGATE_EXPR; ;}
d7178 2
a7179 2
#line 2032 "parse.y"
    { ((*yyvalp).code) = CONVERT_EXPR; ;}
d7183 2
a7184 2
#line 2033 "parse.y"
    { ((*yyvalp).code) = NEGATE_EXPR; ;}
d7188 2
a7189 2
#line 2034 "parse.y"
    { ((*yyvalp).code) = TRUTH_NOT_EXPR; ;}
d7193 2
a7194 2
#line 2038 "parse.y"
    { ((*yyvalp).code) = NE_EXPR; ;}
d7198 2
a7199 2
#line 2039 "parse.y"
    { ((*yyvalp).code) = LE_EXPR; ;}
d7203 2
a7204 2
#line 2040 "parse.y"
    { ((*yyvalp).code) = GE_EXPR; ;}
d7208 2
a7209 2
#line 2041 "parse.y"
    { ((*yyvalp).code) = EQ_EXPR; ;}
d7213 2
a7214 7
#line 2042 "parse.y"
    { ((*yyvalp).code) = LT_EXPR; ;}
    break;

  case 633:
#line 2043 "parse.y"
    { ((*yyvalp).code) = GT_EXPR; ;}
d7218 2
a7219 2
#line 2044 "parse.y"
    { ((*yyvalp).code) = IN_EXPR; ;}
d7223 2
a7224 2
#line 2048 "parse.y"
    { ((*yyvalp).code) = PLUS_EXPR; ;}
d7228 2
a7229 2
#line 2049 "parse.y"
    { ((*yyvalp).code) = PLUS_EXPR; ;}
d7233 2
a7234 2
#line 2050 "parse.y"
    { ((*yyvalp).code) = MINUS_EXPR; ;}
d7238 2
a7239 2
#line 2051 "parse.y"
    { ((*yyvalp).code) = MINUS_EXPR; ;}
d7243 2
a7244 2
#line 2052 "parse.y"
    { ((*yyvalp).code) = TRUTH_XOR_EXPR; ;}
d7248 2
a7249 2
#line 2053 "parse.y"
    { ((*yyvalp).code) = SYMDIFF_EXPR; ;}
d7253 2
a7254 2
#line 2057 "parse.y"
    { ((*yyvalp).code) = MULT_EXPR; ;}
d7258 2
a7259 2
#line 2058 "parse.y"
    { ((*yyvalp).code) = RDIV_EXPR; ;}
d7263 2
a7264 2
#line 2059 "parse.y"
    { ((*yyvalp).code) = TRUNC_DIV_EXPR; ;}
d7268 2
a7269 2
#line 2060 "parse.y"
    { ((*yyvalp).code) = (co->pascal_dialect & B_D_M_PASCAL) ? TRUNC_MOD_EXPR : FLOOR_MOD_EXPR; ;}
d7273 2
a7274 2
#line 2061 "parse.y"
    { ((*yyvalp).code) = LSHIFT_EXPR; ;}
d7278 2
a7279 2
#line 2062 "parse.y"
    { ((*yyvalp).code) = RSHIFT_EXPR; ;}
d7283 2
a7284 2
#line 2066 "parse.y"
    { ((*yyvalp).code) = TRUTH_OR_EXPR; ;}
d7288 2
a7289 2
#line 2067 "parse.y"
    { ((*yyvalp).code) = TRUTH_ORIF_EXPR; chk_dialect ("`or else' (without underscore) is", GNU_PASCAL); ;}
d7293 2
a7294 2
#line 2068 "parse.y"
    { ((*yyvalp).code) = TRUTH_ORIF_EXPR; ;}
d7298 2
a7299 2
#line 2069 "parse.y"
    { ((*yyvalp).code) = TRUTH_ORIF_EXPR; chk_dialect ("`|' is", MAC_PASCAL); ;}
d7303 2
a7304 2
#line 2073 "parse.y"
    { ((*yyvalp).code) = TRUTH_AND_EXPR; ;}
d7308 2
a7309 2
#line 2074 "parse.y"
    { ((*yyvalp).code) = TRUTH_ANDIF_EXPR; chk_dialect ("`and then' (without underscore) is", GNU_PASCAL); ;}
d7313 2
a7314 2
#line 2075 "parse.y"
    { ((*yyvalp).code) = TRUTH_ANDIF_EXPR; ;}
d7318 2
a7319 2
#line 2076 "parse.y"
    { ((*yyvalp).code) = TRUTH_ANDIF_EXPR; chk_dialect ("`&' is", MAC_PASCAL); ;}
d7323 2
a7324 2
#line 2081 "parse.y"
    { ((*yyvalp).itype) = IDENTIFIER_BUILT_IN_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))->symbol; ;}
d7328 2
a7329 2
#line 2083 "parse.y"
    { ((*yyvalp).itype) = p_and; ;}
d7333 2
a7334 2
#line 2084 "parse.y"
    { ((*yyvalp).itype) = p_or; ;}
d7338 2
a7339 2
#line 2085 "parse.y"
    { ((*yyvalp).itype) = p_not; ;}
d7343 2
a7344 2
#line 2086 "parse.y"
    { ((*yyvalp).itype) = p_xor; ;}
d7348 2
a7349 2
#line 2087 "parse.y"
    { ((*yyvalp).itype) = p_shl; ;}
d7353 2
a7354 2
#line 2088 "parse.y"
    { ((*yyvalp).itype) = p_shr; ;}
d7358 2
a7359 2
#line 2094 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BPlus", "+"); ;}
d7363 2
a7364 2
#line 2095 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BPlus", "+"); ;}
d7368 2
a7369 2
#line 2096 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BMinus", "-"); ;}
d7373 2
a7374 2
#line 2097 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BMinus", "-"); ;}
d7378 2
a7379 2
#line 2098 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("BMult", "*"); ;}
d7383 2
a7384 2
#line 2099 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("RDiv", "/"); ;}
d7388 2
a7389 2
#line 2100 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("Div"); ;}
d7393 2
a7394 2
#line 2101 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("Mod"); ;}
d7398 2
a7399 2
#line 2102 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("RPower", "**"); ;}
d7403 2
a7404 2
#line 2103 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("In"); ;}
d7408 2
a7409 2
#line 2104 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("LT", "<"); ;}
d7413 2
a7414 2
#line 2105 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("EQ", "="); ;}
d7418 2
a7419 2
#line 2106 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("GT", ">"); ;}
d7423 2
a7424 2
#line 2107 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("NE", "<>"); ;}
d7428 2
a7429 2
#line 2108 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("GE", ">="); ;}
d7433 2
a7434 2
#line 2109 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("LE", "<="); ;}
d7438 2
a7439 2
#line 2110 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("And"); ;}
d7443 2
a7444 2
#line 2111 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("SAnd", "&"); ;}
d7448 2
a7449 2
#line 2112 "parse.y"
    { ((*yyvalp).ttype) = get_identifier ("Or"); ;}
d7453 2
a7454 2
#line 2113 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("SOr", "|"); ;}
d7458 12
a7469 2
#line 2114 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("SymDiff", "<>"); ;}
d7473 2
a7474 2
#line 2120 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilPlus", "+>"); ;}
d7478 2
a7479 2
#line 2121 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilMinus", "->"); ;}
d7483 2
a7484 2
#line 2122 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorPlus", "+<"); ;}
d7488 2
a7489 2
#line 2123 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorMinus", "-<"); ;}
d7493 2
a7494 2
#line 2127 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilMult", "*>"); ;}
d7498 2
a7499 2
#line 2128 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("CeilRDiv", "/>"); ;}
d7503 2
a7504 2
#line 2129 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorMult", "*<"); ;}
d7508 12
a7519 2
#line 2130 "parse.y"
    { ((*yyvalp).ttype) = get_identifier_with_spelling ("FloorRDiv", "/<"); ;}
d7523 2
a7524 2
#line 2142 "parse.y"
    { ((*yyvalp).ttype) = numeric_label ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7528 2
a7529 2
#line 2147 "parse.y"
    { ((*yyvalp).ttype) = nreverse ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7533 2
a7534 2
#line 2152 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7538 2
a7539 2
#line 2154 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d7543 2
a7544 6
#line 2156 "parse.y"
    {
        ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype));
        error ("comma missing after `%s'", IDENTIFIER_NAME (TREE_VALUE ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype))));
        yyerrok;
      ;}
d7548 7
a7554 2
#line 2162 "parse.y"
    { error ("extra comma following identifier list"); ;}
d7558 2
a7559 2
#line 2168 "parse.y"
    { ((*yyvalp).ttype) = build_tree_list (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7563 7
a7569 2
#line 2170 "parse.y"
    { ((*yyvalp).ttype) = tree_cons (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d7573 2
a7574 2
#line 2176 "parse.y"
    { ((*yyvalp).ttype) = build_qualified_id ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7578 16
a7593 1
#line 2181 "parse.y"
d7597 2
a7598 2
  case 752:
#line 2234 "parse.y"
d7602 2
a7603 2
  case 761:
#line 2251 "parse.y"
d7607 3
a7609 3
  case 762:
#line 2258 "parse.y"
    { pushlevel_expand (0); ;}
d7612 2
a7613 2
  case 763:
#line 2263 "parse.y"
d7617 8
a7624 3
  case 764:
#line 2268 "parse.y"
    { lex_const_equal = 0; ;}
d7627 3
a7629 3
  case 765:
#line 2273 "parse.y"
    { defining_packed_type += ((*yyvalp).itype) = !co->ignore_packed;  /* can be nested */ ;}
d7632 2
a7633 2
  case 766:
#line 2278 "parse.y"
d7637 3
a7639 3
  case 767:
#line 2283 "parse.y"
    { ASSERT_ID ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), p_module); ;}
d7642 2
a7643 2
  case 768:
#line 2288 "parse.y"
d7647 3
a7649 3
  case 769:
#line 2290 "parse.y"
    { yyerrok; ;}
d7652 2
a7653 2
  case 776:
#line 2307 "parse.y"
d7657 2
a7658 2
  case 777:
#line 2312 "parse.y"
d7662 2
a7663 2
  case 778:
#line 2317 "parse.y"
a7667 1
      default: break;
d7678 2
a7679 2
/* Line 872 of glr.c.  */
#line 7835 "parse.c"
a7692 1
      default: break;
d7721 1
a7721 1
/** Number of symbols composing the right hand side of rule #RULE.  */
a7727 31
static void
yydestroyGLRState (char const *yymsg, yyGLRState *yys)
{
  if (yys->yyresolved)
    yydestruct (yymsg, yystos[yys->yylrState],
		&yys->yysemantics.yysval, &yys->yyloc);
  else
    {
#if YYDEBUG
      if (yydebug)
	{
	  YYFPRINTF (stderr, "%s unresolved ", yymsg);
	  yysymprint (stderr, yystos[yys->yylrState],
		      &yys->yysemantics.yysval, &yys->yyloc);
	  YYFPRINTF (stderr, "\n");
	}
#endif

      if (yys->yysemantics.yyfirstVal)
        {
          yySemanticOption *yyoption = yys->yysemantics.yyfirstVal;
          yyGLRState *yyrh;
          int yyn;
          for (yyrh = yyoption->yystate, yyn = yyrhsLength (yyoption->yyrule);
               yyn > 0;
               yyrh = yyrh->yypred, yyn -= 1)
            yydestroyGLRState (yymsg, yyrh);
        }
    }
}

d7831 1
a7831 1
static yybool
a7836 2
  if (! yyset->yystates)
    return yyfalse;
a7837 1
  return yytrue;
d7847 1
a7847 1
static yybool
d7850 1
d7854 1
a7854 1
  yystack->yyitems =
a7855 3
  if (!yystack->yyitems)
    return yyfalse;
  yystack->yynextFree = yystack->yyitems;
d7858 1
a7858 1
  return yyinitStateSet (&yystack->yytops);
d7873 1
a7873 1
  yyGLRStackItem* yynewItems;
d7879 1
a7879 1
    yyMemoryExhausted (yystack);
d7883 2
a7884 4
  yynewItems = (yyGLRStackItem*) YYMALLOC (yynewSize * sizeof yynewItems[0]);
  if (! yynewItems)
    yyMemoryExhausted (yystack);
  for (yyp0 = yystack->yyitems, yyp1 = yynewItems, yyn = yysize;
d7911 1
a7911 1
    yystack->yysplitPoint = YYRELOC (yystack->yyitems, yynewItems,
d7917 1
a7917 1
	YYRELOC (yystack->yyitems, yynewItems,
d7920 3
a7922 3
  yystack->yyitems = yynewItems;
  yystack->yynextFree = yynewItems + yysize;
  yystack->yyspaceLeft = yynewSize - yysize;
d7925 2
a7926 1
  yyMemoryExhausted (yystack);
d7949 1
a7949 1
yymarkStackDeleted (yyGLRStack* yystack, size_t yyk)
d8002 1
a8002 2
yyglrShift (yyGLRStack* yystack, size_t yyk, yyStateNum yylrState,
	    size_t yyposn,
d8026 1
a8026 1
yyglrShiftDefer (yyGLRStack* yystack, size_t yyk, yyStateNum yylrState,
d8051 1
a8051 1
yydoAction (yyGLRStack* yystack, size_t yyk, yyRuleNum yyrule,
d8185 2
a8186 2
static size_t
yysplitStack (yyGLRStack* yystack, size_t yyk)
d8195 5
a8199 9
      yyGLRState** yynewStates;
      if (! ((yystack->yytops.yycapacity
	      <= (YYSIZEMAX / (2 * sizeof yynewStates[0])))
	     && (yynewStates =
		 (yyGLRState**) YYREALLOC (yystack->yytops.yystates,
					   ((yystack->yytops.yycapacity *= 2)
					    * sizeof yynewStates[0])))))
	yyMemoryExhausted (yystack);
      yystack->yytops.yystates = yynewStates;
d8229 3
a8231 2
/** Assuming identicalOptions (Y0,Y1), destructively merge the
 *  alternative semantic values for the RHS-symbols of Y1 and Y0. */
d8241 10
a8250 40
    {
      if (yys0 == yys1)
	break;
      else if (yys0->yyresolved)
	{
	  yys1->yyresolved = yytrue;
	  yys1->yysemantics.yysval = yys0->yysemantics.yysval;
	}
      else if (yys1->yyresolved)
	{
	  yys0->yyresolved = yytrue;
	  yys0->yysemantics.yysval = yys1->yysemantics.yysval;
	}
      else
	{
	  yySemanticOption** yyz0p;
	  yySemanticOption* yyz1;
	  yyz0p = &yys0->yysemantics.yyfirstVal;
	  yyz1 = yys1->yysemantics.yyfirstVal;
	  while (yytrue)
	    {
	      if (yyz1 == *yyz0p || yyz1 == NULL)
		break;
	      else if (*yyz0p == NULL)
		{
		  *yyz0p = yyz1;
		  break;
		}
	      else if (*yyz0p < yyz1)
		{
		  yySemanticOption* yyz = *yyz0p;
		  *yyz0p = yyz1;
		  yyz1 = yyz1->yynext;
		  (*yyz0p)->yynext = yyz;
		}
	      yyz0p = &(*yyz0p)->yynext;
	    }
	  yys1->yysemantics.yyfirstVal = yys0->yysemantics.yyfirstVal;
	}
    }
a8367 3
static void yyreportAmbiguity (yySemanticOption* yyx0, yySemanticOption* yyx1,
			       yyGLRStack* yystack)
  __attribute__ ((__noreturn__));
d8384 1
a8384 1
  yyFail (yystack, YY_("syntax is ambiguous"));
d8395 2
a8396 2
  yySemanticOption** yypp;
  yybool yymerge;
d8399 2
a8400 2
  yymerge = yyfalse;
  for (yypp = &yyoptionList->yynext; *yypp != NULL; )
a8401 2
      yySemanticOption* yyp = *yypp;

d8403 1
a8403 4
	{
	  yymergeOptionSets (yybest, yyp);
	  *yypp = yyp->yynext;
	}
d8405 15
a8419 23
	{
	  switch (yypreference (yybest, yyp))
	    {
	    case 0:
	      yyreportAmbiguity (yybest, yyp, yystack);
	      break;
	    case 1:
	      yymerge = yytrue;
	      break;
	    case 2:
	      break;
	    case 3:
	      yybest = yyp;
	      yymerge = yyfalse;
	      break;
	    default:
	      /* This cannot happen so it is not worth a YYASSERT (yyfalse),
	         but some compilers complain if the default case is
		 omitted.  */
	      break;
	    }
	  yypp = &yyp->yynext;
	}
a8423 1
      yySemanticOption* yyp;
d8491 1
a8491 1
yyprocessOneStack (yyGLRStack* yystack, size_t yyk,
d8503 1
a8503 2
      YYDPRINTF ((stderr, "Stack %lu Entering state %d\n",
		  (unsigned long int) yyk, yystate));
d8512 1
a8512 2
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
d8531 3
a8533 4
	      size_t yynewStack = yysplitStack (yystack, yyk);
	      YYDPRINTF ((stderr, "Splitting off stack %lu from %lu.\n",
			  (unsigned long int) yynewStack,
			  (unsigned long int) yyk));
d8543 1
a8543 1
	      YYDPRINTF ((stderr, "On stack %lu, ", (unsigned long int) yyk));
d8547 1
a8547 2
	      YYDPRINTF ((stderr, "Stack %lu now in state #%d\n",
			  (unsigned long int) yyk,
d8553 1
a8553 2
	      YYDPRINTF ((stderr, "Stack %lu dies.\n",
			  (unsigned long int) yyk));
d8580 3
a8582 7
	  size_t yysize0 = yytnamerr (NULL, yytokenName (*yytokenp));
	  size_t yysize = yysize0;
	  size_t yysize1;
	  yybool yysize_overflow = yyfalse;
	  char* yymsg = NULL;
	  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
a8583 10
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;
d8592 1
a8592 4
	  int yycount = 1;

	  yyarg[0] = yytokenName (*yytokenp);
	  yyfmt = yystpcpy (yyformat, yyunexpected);
d8594 1
d8598 3
a8600 1
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
d8602 1
a8602 3
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
d8605 1
a8605 6
		yyarg[yycount++] = yytokenName (yyx);
		yysize1 = yysize + yytnamerr (NULL, yytokenName (yyx));
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
d8607 4
a8610 10

	  yyf = YY_(yyformat);
	  yysize1 = yysize + strlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow)
	    yymsg = (char *) YYMALLOC (yysize);

	  if (yymsg)
d8612 6
a8617 3
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
d8619 8
a8626 10
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
d8632 1
a8632 4
	    {
	      yyerror (YY_("syntax error"));
	      yyMemoryExhausted (yystack);
	    }
d8636 1
a8636 1
	yyerror (YY_("syntax error"));
d8647 1
a8647 1
		      YYLTYPE* YYOPTIONAL_LOC (yyllocp)
d8660 15
a8674 1
	  yyFail (yystack, NULL);
d8740 3
a8742 1
      yydestroyGLRState ("Error: popping", yys);
d8754 1
a8754 1
    case yyok:								     \
d8757 2
a8758 1
      goto yyabortlab;							     \
d8760 2
a8761 1
      goto yyacceptlab;							     \
a8763 2
    default:								     \
      goto yybuglab;							     \
a8774 1
  int yyresult;
d8783 3
d8788 3
a8790 1
  yytoken = YYEMPTY;
a8798 10
  if (! yyinitGLRStack (&yystack, YYINITDEPTH))
    goto yyexhaustedlab;
  switch (YYSETJMP (yystack.yyexception_buffer))
    {
    case 0: break;
    case 1: goto yyabortlab;
    case 2: goto yyexhaustedlab;
    default: goto yybuglab;
    }
  yystack.yytokenp = &yytoken;
d8800 1
d8818 1
a8818 1
	    goto yyacceptlab;
d8848 2
a8849 1
		  yyglrShift (&yystack, 0, yyaction, yyposn, yylval, yyllocp);
d8866 2
a8867 2
	  size_t yys;
	  size_t yyn = yystack.yytops.yysize;
d8878 1
a8878 1
		yyFail (&yystack, YY_("syntax error"));
d8898 4
a8901 21

 yyacceptlab:
  yyresult = 0;
  goto yyreturn;

 yybuglab:
  YYASSERT (yyfalse);
  /* Fall through.  */

 yyabortlab:
  yyresult = 1;
  goto yyreturn;

 yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */

 yyreturn:
  if (yytoken != YYEOF && yytoken != YYEMPTY)
    yydestruct ("Cleanup: discarding lookahead",
d8904 2
a8905 20
  /* If the stack is well-formed, pop the stack until it is empty,
     destroying its entries as we go.  But free the stack regardless
     of whether it is well-formed.  */
  if (yystack.yyitems)
    {
      yyGLRState** yystates = yystack.yytops.yystates;
      if (yystates)
	while (yystates[0])
	  {
	    yyGLRState *yys = yystates[0];
	  yystack.yyerror_range[1].yystate.yyloc = yys->yyloc;
	    yydestroyGLRState ("Cleanup: popping", yys);
	    yystates[0] = yys->yypred;
	    yystack.yynextFree -= 1;
	    yystack.yyspaceLeft += 1;
	  }
      yyfreeGLRStack (&yystack);
    }

  return yyresult;
d8910 2
a8911 3
static void yypstack (yyGLRStack* yystack, size_t yyk)
  __attribute__ ((__unused__));
static void yypdumpstack (yyGLRStack* yystack) __attribute__ ((__unused__));
d8935 1
a8935 1
yypstack (yyGLRStack* yystack, size_t yyk)
d8980 1
a8980 1
#line 2320 "parse.y"
d8983 4
d8989 2
a8990 1
check_decl_order (int prev, int new)
d9008 30
d9039 4
a9042 1
locations (YYLTYPE *dest, const /*YYLTYPE*/ union yyGLRStackItem *src, int n)
a9091 20
/* Set the value of the 'yydebug' variable to VALUE. This is a function
   so we don't have to have YYDEBUG defined in order to build the compiler. */
void
set_yydebug (int value)
{
#if YYDEBUG != 0
  yydebug = value;
#else
  warning ("YYDEBUG not defined.");
#endif
}

#undef yyparse
int
yyparse (void)
{
  init_predef ();
  return main_yyparse ();
}

@


1.1.111.2
log
@Update gcc/p/ to gpc-20060325
@
text
@d124 37
a160 39
     p_view = 336,
     p_Addr = 337,
     p_Assigned = 338,
     p_Dispose = 339,
     p_Exit = 340,
     p_FormatString = 341,
     p_New = 342,
     p_Return = 343,
     p_StringOf = 344,
     LEX_INTCONST = 345,
     LEX_INTCONST_BASE = 346,
     LEX_STRCONST = 347,
     LEX_REALCONST = 348,
     LEX_BUILTIN_PROCEDURE = 349,
     LEX_BUILTIN_PROCEDURE_WRITE = 350,
     LEX_BUILTIN_FUNCTION = 351,
     LEX_ID = 352,
     LEX_CARET_WHITE = 353,
     LEX_CARET_LETTER = 354,
     LEX_ASSIGN = 355,
     LEX_RENAME = 356,
     LEX_RANGE = 357,
     LEX_ELLIPSIS = 358,
     LEX_CONST_EQUAL = 359,
     LEX_SYMDIFF = 360,
     LEX_NE = 361,
     LEX_GE = 362,
     LEX_LE = 363,
     LEX_POWER = 364,
     LEX_BPPLUS = 365,
     LEX_BPMINUS = 366,
     LEX_CEIL_PLUS = 367,
     LEX_CEIL_MINUS = 368,
     LEX_FLOOR_PLUS = 369,
     LEX_FLOOR_MINUS = 370,
     LEX_CEIL_MULT = 371,
     LEX_CEIL_DIV = 372,
     LEX_FLOOR_MULT = 373,
     LEX_FLOOR_DIV = 374
d242 37
a278 39
#define p_view 336
#define p_Addr 337
#define p_Assigned 338
#define p_Dispose 339
#define p_Exit 340
#define p_FormatString 341
#define p_New 342
#define p_Return 343
#define p_StringOf 344
#define LEX_INTCONST 345
#define LEX_INTCONST_BASE 346
#define LEX_STRCONST 347
#define LEX_REALCONST 348
#define LEX_BUILTIN_PROCEDURE 349
#define LEX_BUILTIN_PROCEDURE_WRITE 350
#define LEX_BUILTIN_FUNCTION 351
#define LEX_ID 352
#define LEX_CARET_WHITE 353
#define LEX_CARET_LETTER 354
#define LEX_ASSIGN 355
#define LEX_RENAME 356
#define LEX_RANGE 357
#define LEX_ELLIPSIS 358
#define LEX_CONST_EQUAL 359
#define LEX_SYMDIFF 360
#define LEX_NE 361
#define LEX_GE 362
#define LEX_LE 363
#define LEX_POWER 364
#define LEX_BPPLUS 365
#define LEX_BPMINUS 366
#define LEX_CEIL_PLUS 367
#define LEX_CEIL_MINUS 368
#define LEX_FLOOR_PLUS 369
#define LEX_FLOOR_MINUS 370
#define LEX_CEIL_MULT 371
#define LEX_CEIL_DIV 372
#define LEX_FLOOR_MULT 373
#define LEX_FLOOR_DIV 374
a285 1
#define YYMAXDEPTH 200000
a286 3
#ifdef GCC_4_0
#include "cgraph.h"
#endif
d340 1
a340 1
#line 112 "parse.y"
d347 1
a347 1
#line 356 "parse.c"
d377 1
a377 1
#line 386 "parse.c"
d442 1
a442 1
#define YYFINAL  70
d444 1
a444 1
#define YYLAST   8810
d447 1
a447 1
#define YYNTOKENS  139
d449 1
a449 1
#define YYNNTS  294
d451 1
a451 1
#define YYNRULES  797
d453 1
a453 1
#define YYNSTATES  1330
d462 1
a462 1
#define YYMAXUTOK   374
d474 4
a477 4
       2,     2,     2,     2,     2,     2,     2,     2,   138,     2,
     121,   122,   132,   130,   123,   131,   129,   133,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   124,   120,
     134,   135,   136,     2,   127,     2,     2,     2,     2,     2,
d480 1
a480 1
       2,   125,     2,   126,   128,     2,     2,     2,     2,     2,
d483 1
a483 1
       2,     2,     2,     2,   137,     2,     2,     2,     2,     2,
d508 1
a508 1
     115,   116,   117,   118,   119
d533 57
a589 56
     510,   511,   519,   520,   525,   526,   527,   538,   539,   540,
     551,   552,   563,   569,   576,   583,   587,   591,   593,   597,
     601,   605,   608,   612,   614,   617,   618,   621,   623,   626,
     628,   631,   634,   636,   638,   640,   642,   644,   647,   651,
     655,   657,   661,   663,   667,   671,   678,   680,   685,   689,
     690,   695,   699,   701,   703,   707,   709,   713,   717,   720,
     722,   724,   726,   727,   730,   738,   740,   743,   745,   749,
     753,   757,   760,   765,   766,   772,   776,   780,   782,   784,
     786,   790,   794,   796,   799,   805,   807,   809,   811,   815,
     819,   821,   825,   829,   833,   836,   840,   845,   848,   851,
     854,   858,   860,   862,   864,   867,   868,   873,   875,   879,
     883,   885,   887,   889,   892,   894,   896,   899,   903,   908,
     912,   913,   920,   924,   928,   930,   933,   935,   937,   939,
     941,   943,   946,   949,   951,   953,   955,   959,   963,   964,
     965,   975,   977,   979,   983,   984,   991,   992,   999,  1005,
    1006,  1015,  1021,  1027,  1029,  1031,  1035,  1038,  1042,  1043,
    1050,  1057,  1064,  1068,  1071,  1074,  1076,  1080,  1084,  1089,
    1091,  1095,  1097,  1099,  1101,  1105,  1110,  1117,  1119,  1121,
    1123,  1125,  1127,  1130,  1132,  1133,  1136,  1138,  1141,  1145,
    1149,  1155,  1159,  1161,  1165,  1169,  1173,  1177,  1182,  1187,
    1193,  1197,  1201,  1202,  1209,  1211,  1214,  1216,  1218,  1221,
    1223,  1224,  1226,  1228,  1229,  1232,  1234,  1236,  1238,  1242,
    1244,  1246,  1253,  1261,  1263,  1267,  1271,  1275,  1281,  1285,
    1287,  1289,  1295,  1297,  1301,  1302,  1304,  1305,  1306,  1312,
    1314,  1316,  1317,  1318,  1321,  1323,  1326,  1328,  1330,  1332,
    1333,  1338,  1340,  1343,  1345,  1350,  1355,  1362,  1364,  1371,
    1373,  1374,  1381,  1382,  1383,  1392,  1393,  1394,  1395,  1405,
    1406,  1407,  1416,  1417,  1429,  1430,  1440,  1443,  1446,  1448,
    1452,  1454,  1458,  1462,  1464,  1468,  1469,  1477,  1478,  1483,
    1485,  1487,  1488,  1491,  1493,  1497,  1499,  1503,  1507,  1508,
    1515,  1517,  1521,  1525,  1529,  1532,  1534,  1538,  1542,  1546,
    1548,  1550,  1552,  1554,  1557,  1559,  1561,  1564,  1566,  1571,
    1576,  1583,  1591,  1597,  1605,  1615,  1627,  1628,  1630,  1632,
    1634,  1636,  1640,  1645,  1647,  1651,  1653,  1655,  1659,  1661,
    1664,  1668,  1672,  1673,  1678,  1680,  1684,  1688,  1689,  1694,
    1696,  1700,  1704,  1708,  1712,  1716,  1719,  1722,  1724,  1726,
    1728,  1730,  1732,  1734,  1736,  1738,  1740,  1742,  1744,  1746,
    1749,  1751,  1753,  1756,  1758,  1760,  1762,  1764,  1766,  1768,
    1770,  1772,  1774,  1776,  1778,  1780,  1782,  1784,  1786,  1788,
    1790,  1792,  1794,  1796,  1798,  1802,  1805,  1807,  1809,  1811,
    1815,  1819,  1822,  1827,  1832,  1836,  1842,  1845,  1850,  1855,
    1861,  1866,  1871,  1878,  1886,  1888,  1893,  1898,  1899,  1901,
    1905,  1907,  1911,  1913,  1917,  1921,  1925,  1927,  1931,  1937,
    1939,  1942,  1946,  1950,  1952,  1954,  1956,  1960,  1964,  1966,
    1973,  1978,  1983,  1987,  1989,  1992,  1996,  2000,  2004,  2006,
    2010,  2014,  2016,  2018,  2022,  2024,  2026,  2030,  2032,  2036,
    2040,  2042,  2044,  2048,  2051,  2055,  2057,  2061,  2065,  2069,
    2071,  2075,  2077,  2079,  2081,  2083,  2085,  2087,  2089,  2091,
    2093,  2095,  2097,  2099,  2101,  2103,  2105,  2107,  2109,  2111,
    2113,  2115,  2117,  2119,  2121,  2123,  2125,  2128,  2130,  2132,
    2134,  2137,  2139,  2141,  2143,  2145,  2147,  2149,  2151,  2153,
    2155,  2157,  2159,  2161,  2163,  2165,  2167,  2169,  2171,  2173,
    2175,  2177,  2179,  2181,  2183,  2185,  2187,  2189,  2191,  2193,
    2195,  2197,  2199,  2201,  2203,  2205,  2207,  2209,  2211,  2213,
    2215,  2217,  2219,  2221,  2223,  2225,  2227,  2231,  2235,  2239,
    2242,  2244,  2248,  2250,  2254,  2256,  2258,  2260,  2262,  2264,
d592 2
a593 5
    2306,  2308,  2310,  2312,  2314,  2316,  2318,  2320,  2322,  2324,
    2326,  2328,  2330,  2332,  2334,  2336,  2338,  2340,  2342,  2344,
    2346,  2348,  2350,  2352,  2354,  2356,  2358,  2360,  2362,  2364,
    2366,  2368,  2369,  2370,  2371,  2373,  2375,  2377,  2378,  2380,
    2382,  2384,  2386,  2388,  2390,  2392,  2394,  2395
d599 234
a832 240
     140,     0,    -1,    -1,   141,    -1,    -1,    -1,   173,   176,
     142,   183,   193,   143,   315,   430,    -1,   144,    -1,    -1,
      -1,    71,   416,   120,   176,    97,   145,   183,   198,   146,
     161,    15,   430,    -1,   151,    -1,   156,    -1,    -1,   151,
     147,   156,    -1,    -1,    -1,   426,   416,   174,   148,   154,
     120,   149,   158,   430,    -1,    -1,   426,   416,   174,   150,
     158,   430,    -1,    -1,    -1,   426,   416,    97,   152,   174,
     153,   154,   430,    -1,    -1,    97,   155,   177,   120,   183,
     198,    15,    -1,    -1,   426,   416,    55,   120,   157,   158,
     430,    -1,    -1,    -1,   159,   185,   200,   160,   168,    15,
      -1,    -1,    55,   185,   193,   162,    -1,    -1,    10,   163,
     167,    -1,   165,    -1,    -1,   165,    53,   164,   316,    -1,
     168,    -1,    -1,    58,   166,   167,    -1,   316,    -1,    -1,
     169,   171,    -1,   169,    -1,   171,    -1,    -1,    30,    10,
      13,   170,   320,   120,    -1,    -1,    30,    15,    13,   172,
     320,   120,    -1,    -1,    31,   416,   175,   120,    -1,    31,
       1,   175,   120,    -1,   175,   120,   176,    -1,   431,    -1,
     121,   412,   122,    -1,   431,    -1,   290,   120,    -1,   178,
      -1,   177,   120,   178,    -1,     1,    -1,   177,     1,   178,
      -1,   177,   120,     1,    -1,   416,   429,   179,    -1,   121,
     181,   122,    -1,   180,    -1,   180,   121,   181,   122,    -1,
      97,    -1,   182,    -1,   181,   123,   182,    -1,     1,    -1,
     181,     1,   182,    -1,   181,   123,     1,    -1,   415,   192,
      -1,   415,   102,   415,    -1,   425,   415,   192,    -1,    -1,
     184,   185,    -1,    -1,    56,   186,   120,    -1,   187,    -1,
     186,   120,   187,    -1,   186,     1,   187,    -1,   416,   188,
     189,   206,    -1,   431,    -1,    67,    -1,   431,    -1,   121,
     190,   122,    -1,    62,   121,   190,   122,    -1,   191,    -1,
     190,   123,   191,    -1,     1,    -1,   190,     1,   191,    -1,
     190,   123,     1,    -1,   416,   192,    -1,   431,    -1,   101,
     416,    -1,    -1,   193,   194,    -1,   203,    -1,   196,    -1,
      -1,   195,   196,    -1,    -1,   197,   207,    -1,    22,   211,
     120,    -1,   276,    -1,    -1,   198,   199,    -1,   203,    -1,
     207,    -1,   275,    -1,    -1,   200,   201,    -1,   203,    -1,
      -1,   202,   207,    -1,   276,    -1,     6,   204,   120,    -1,
     205,    -1,   204,   123,   205,    -1,   204,     1,   205,    -1,
     416,   206,    -1,   431,    -1,    21,   360,    -1,    -1,   208,
     209,    -1,    48,   213,    -1,    -1,    36,   210,   225,   120,
      -1,    38,   215,    -1,   212,    -1,   211,   123,   212,    -1,
       1,    -1,   211,     1,   212,    -1,   211,   123,     1,    -1,
     211,     1,    -1,   411,    -1,   416,    -1,   214,    -1,   213,
     214,    -1,     1,    -1,   416,   429,   359,   120,    -1,   416,
     423,   124,   238,   104,   390,   221,   120,    -1,   216,    -1,
     215,   216,    -1,    -1,   414,   423,   124,   238,   217,   223,
     218,   120,    -1,     1,    -1,   431,    -1,   218,   120,   219,
      -1,   222,    -1,    51,   368,    -1,    -1,    51,   368,    97,
     220,   360,    -1,   431,    -1,   221,   120,   222,    -1,    75,
     360,    -1,   290,    -1,   273,    -1,    -1,    41,   224,   360,
      -1,    41,     1,    -1,   226,    -1,   225,   120,   226,    -1,
       1,    -1,   225,     1,   226,    -1,   225,   120,     1,    -1,
     225,     1,    -1,   416,   423,   429,   238,   273,    -1,    -1,
      -1,   416,   227,   235,   429,   228,   238,   273,    -1,    -1,
     416,   229,   235,     1,    -1,    -1,    -1,   416,   423,   429,
     230,   268,    61,   267,   231,   269,    15,    -1,    -1,    -1,
     416,   423,   429,   232,   268,    78,   267,   233,   269,    15,
      -1,    -1,   416,   423,   429,    81,    26,   374,   267,   234,
     269,    15,    -1,   416,   423,   429,    78,   267,    -1,   416,
     423,   429,    78,   102,    15,    -1,   416,   423,   429,    61,
     120,    54,    -1,   121,   236,   122,    -1,   121,     1,   122,
      -1,   237,    -1,   236,   120,   237,    -1,   236,     1,   237,
      -1,   236,   120,     1,    -1,   236,     1,    -1,   412,   124,
     374,    -1,   239,    -1,   238,   290,    -1,    -1,   240,   241,
      -1,   242,    -1,    47,   242,    -1,   373,    -1,    68,   373,
      -1,   374,   243,    -1,   308,    -1,   259,    -1,   263,    -1,
     265,    -1,   245,    -1,   424,   245,    -1,   121,   244,   122,
      -1,   125,   360,   126,    -1,   360,    -1,   244,   123,   360,
      -1,     1,    -1,   244,     1,   360,    -1,   244,   123,     1,
      -1,     9,   125,   248,   126,    26,   239,    -1,   383,    -1,
      16,   247,    26,   239,    -1,    34,    26,   239,    -1,    -1,
      32,   246,   250,    15,    -1,    32,     1,    15,    -1,   432,
      -1,   431,    -1,   125,   249,   126,    -1,   249,    -1,   248,
     123,   249,    -1,   248,     1,   249,    -1,   248,     1,    -1,
       1,    -1,   259,    -1,   374,    -1,    -1,   252,   427,    -1,
     251,    11,   255,    26,   256,   427,   254,    -1,   431,    -1,
     252,   120,    -1,   253,    -1,   252,   120,   253,    -1,   252,
       1,   253,    -1,   252,   120,     1,    -1,   252,     1,    -1,
     412,   124,   239,   273,    -1,    -1,   343,   121,   250,   122,
     427,    -1,   416,   124,   374,    -1,   416,   124,   258,    -1,
     419,    -1,   258,    -1,   257,    -1,   256,   120,   257,    -1,
     256,     1,   257,    -1,     1,    -1,   256,     1,    -1,   348,
     124,   121,   250,   122,    -1,   259,    -1,   260,    -1,   262,
      -1,   121,   261,   122,    -1,   121,     1,   122,    -1,   416,
      -1,   261,   123,   416,    -1,   261,     1,   416,    -1,   261,
     123,     1,    -1,   261,     1,    -1,   360,   102,   360,    -1,
     424,   360,   102,   360,    -1,   127,   264,    -1,   128,   264,
      -1,    98,   264,    -1,   428,    48,   264,    -1,   416,    -1,
     265,    -1,   383,    -1,    29,   296,    -1,    -1,    18,   296,
     266,   302,    -1,   431,    -1,   121,   374,   122,    -1,   121,
       1,   122,    -1,   431,    -1,    42,    -1,   270,    -1,   270,
     271,    -1,     1,    -1,   431,    -1,   270,    97,    -1,   270,
     271,   120,    -1,   412,   124,   239,   273,    -1,    29,   416,
     296,    -1,    -1,    18,   416,   296,   303,   272,   302,    -1,
      49,   416,   296,    -1,    50,   416,   296,    -1,    73,    -1,
      73,   360,    -1,    79,    -1,    80,    -1,    42,    -1,   290,
      -1,   431,    -1,   274,   390,    -1,   274,     1,    -1,    72,
      -1,   100,    -1,   104,    -1,   280,   120,   285,    -1,   279,
     120,   286,    -1,    -1,    -1,   279,   120,   289,   277,   185,
     195,   278,   315,   120,    -1,   280,    -1,   283,    -1,    29,
     416,   296,    -1,    -1,    18,   416,   296,   303,   281,   302,
      -1,    -1,    63,   294,   296,   295,   282,   302,    -1,    29,
     416,   129,   416,   296,    -1,    -1,    18,   416,   129,   416,
     296,   303,   284,   302,    -1,    49,   416,   129,   416,   296,
      -1,    50,   416,   129,   416,   296,    -1,   289,    -1,   286,
      -1,   289,   287,   289,    -1,    54,   120,    -1,    51,   368,
     120,    -1,    -1,    51,   368,    97,   288,   360,   120,    -1,
      51,   368,   120,    75,   360,   120,    -1,    75,   360,   120,
      51,   368,   120,    -1,    75,   360,   120,    -1,    76,   120,
      -1,    77,   120,    -1,   431,    -1,   289,   290,   120,    -1,
     289,   293,   120,    -1,    46,   121,   291,   122,    -1,   292,
      -1,   291,   123,   292,    -1,   431,    -1,    48,    -1,   416,
      -1,   416,   429,   360,    -1,   416,   121,   360,   122,    -1,
     416,   121,   419,   123,   360,   122,    -1,    52,    -1,    60,
      -1,   416,    -1,   407,    -1,   416,    -1,   429,   416,    -1,
     431,    -1,    -1,   297,   298,    -1,   431,    -1,   121,   122,
      -1,   121,   299,   122,    -1,   121,   103,   122,    -1,   121,
     299,   120,   103,   122,    -1,   121,     1,   122,    -1,   300,
      -1,   299,   120,   300,    -1,   299,     1,   300,    -1,   299,
     120,     1,    -1,   412,   124,   307,    -1,   425,   412,   124,
     307,    -1,   305,    38,   412,   306,    -1,    48,    38,   412,
     124,   307,    -1,    48,   412,   306,    -1,    29,   416,   296,
      -1,    -1,    18,   416,   296,   303,   301,   302,    -1,   321,
      -1,   124,   373,    -1,   432,    -1,   431,    -1,   304,   416,
      -1,   429,    -1,    -1,   431,    -1,   425,    -1,    -1,   124,
     307,    -1,   309,    -1,   308,    -1,   313,    -1,    36,    26,
     360,    -1,   314,    -1,   310,    -1,     9,   125,   311,   126,
      26,   309,    -1,   424,     9,   125,   312,   126,    26,   374,
      -1,   312,    -1,   311,   120,   312,    -1,   311,     1,   312,
      -1,   311,   120,     1,    -1,   416,   102,   416,   124,   374,
      -1,     9,    26,   314,    -1,   374,    -1,   383,    -1,    10,
     421,   316,   422,    15,    -1,   317,    -1,   316,   120,   317,
      -1,    -1,   322,    -1,    -1,    -1,    38,   318,   216,   319,
     317,    -1,   321,    -1,   322,    -1,    -1,    -1,   323,   324,
      -1,   337,    -1,   337,   325,    -1,   325,    -1,   315,    -1,
     351,    -1,    -1,   351,   326,   352,   360,    -1,    88,    -1,
      88,   360,    -1,    85,    -1,    85,   121,    31,   122,    -1,
      85,   121,   419,   122,    -1,    85,   121,   419,   129,   419,
     122,    -1,   353,    -1,    40,   338,    13,   421,   320,   422,
      -1,   340,    -1,    -1,   340,     7,   327,   421,   320,   422,
      -1,    -1,    -1,    11,   360,    26,   328,   344,   329,   342,
      15,    -1,    -1,    -1,    -1,    33,   330,   421,   316,    37,
     331,   360,   332,   422,    -1,    -1,    -1,    39,   333,   421,
     360,   334,    13,   320,   422,    -1,    -1,    17,   376,   352,
     360,   350,   360,   335,    13,   421,   320,   422,    -1,    -1,
      17,   376,    21,   360,   336,    13,   421,   320,   422,    -1,
      19,   410,    -1,   410,   124,    -1,   339,    -1,   338,   123,
     339,    -1,     1,    -1,   338,     1,   339,    -1,   338,   123,
       1,    -1,   360,    -1,   360,   124,   416,    -1,    -1,    20,
     360,    35,   341,   421,   320,   422,    -1,    -1,   343,   421,
     316,   422,    -1,     7,    -1,    64,    -1,    -1,   345,   427,
      -1,   346,    -1,   345,   120,   346,    -1,     1,    -1,   345,
       1,   346,    -1,   345,   120,     1,    -1,    -1,   348,   124,
     347,   421,   320,   422,    -1,   349,    -1,   348,   123,   349,
      -1,   348,   123,     1,    -1,   348,     1,   349,    -1,   348,
       1,    -1,   359,    -1,   359,   102,   359,    -1,   359,     1,
     359,    -1,   359,   102,     1,    -1,    30,    -1,    14,    -1,
       1,    -1,   376,    -1,   127,   376,    -1,   100,    -1,   429,
      -1,   406,   378,    -1,    95,    -1,    95,   121,   381,   122,
      -1,    84,   121,   360,   122,    -1,    84,   121,   360,   123,
     380,   122,    -1,    84,   121,   360,   123,   416,   378,   122,
      -1,    45,   354,   121,   370,   122,    -1,    45,   354,   121,
     370,   124,   355,   122,    -1,    45,   354,   121,   370,   124,
     355,   124,   355,   122,    -1,    45,   354,   121,   370,   124,
     355,   124,   355,   124,   358,   122,    -1,    -1,    97,    -1,
     431,    -1,   356,    -1,   357,    -1,   356,   123,   357,    -1,
     369,   121,   360,   122,    -1,   369,    -1,   358,   123,   369,
      -1,   360,    -1,   361,    -1,   361,   401,   361,    -1,   363,
      -1,   399,   363,    -1,   361,   402,   363,    -1,   361,   408,
     363,    -1,    -1,   361,   404,   362,   363,    -1,   365,    -1,
     363,   403,   365,    -1,   363,   409,   365,    -1,    -1,   363,
     405,   364,   365,    -1,   366,    -1,   365,   419,   366,    -1,
     366,    66,   366,    -1,   366,   109,   366,    -1,   365,    59,
     374,    -1,   365,    44,   374,    -1,   400,   366,    -1,   127,
     366,    -1,   369,    -1,   367,    -1,    24,    -1,   396,    -1,
     376,    -1,    90,    -1,    91,    -1,    93,    -1,   431,    -1,
     369,    -1,   370,    -1,   371,    -1,   370,   371,    -1,    92,
      -1,    98,    -1,   128,   372,    -1,    99,    -1,   123,    -1,
     129,    -1,   124,    -1,   120,    -1,   121,    -1,   122,    -1,
     125,    -1,   126,    -1,   130,    -1,   131,    -1,   132,    -1,
     133,    -1,   134,    -1,   135,    -1,   136,    -1,   127,    -1,
     128,    -1,   374,    -1,   375,    -1,   419,    -1,   419,   129,
     419,    -1,    96,   378,    -1,   377,    -1,   418,    -1,   383,
      -1,   121,   360,   122,    -1,   376,   129,   416,    -1,   376,
     428,    -1,   376,   125,   394,   126,    -1,   376,   125,   384,
     126,    -1,   377,   121,   122,    -1,   377,   121,   379,   380,
     122,    -1,    57,   416,    -1,    86,   121,   381,   122,    -1,
      89,   121,   381,   122,    -1,    83,   121,   379,   360,   122,
      -1,    82,   121,   376,   122,    -1,    87,   121,   376,   122,
      -1,    87,   121,   376,   123,   380,   122,    -1,    87,   121,
     376,   123,   416,   378,   122,    -1,   431,    -1,   121,   379,
     380,   122,    -1,   121,   379,   376,   122,    -1,    -1,   360,
      -1,   380,   123,   360,    -1,     1,    -1,   380,   123,     1,
      -1,   382,    -1,   381,   123,   382,    -1,   381,     1,   382,
      -1,   381,   123,     1,    -1,   360,    -1,   360,   124,   360,
      -1,   360,   124,   360,   124,   360,    -1,    16,    -1,   385,
     427,    -1,   385,   120,   387,    -1,   385,   427,   389,    -1,
     387,    -1,   389,    -1,   386,    -1,   385,   120,   386,    -1,
     394,   124,   390,    -1,   390,    -1,    11,   416,   124,   360,
      26,   388,    -1,    11,   360,    26,   388,    -1,   125,   384,
     126,   427,    -1,    64,   390,   427,    -1,   360,    -1,   121,
     122,    -1,   121,   391,   122,    -1,   125,   384,   126,    -1,
     125,     1,   126,    -1,   393,    -1,   391,   392,   393,    -1,
     391,     1,   393,    -1,   120,    -1,   123,    -1,   395,   124,
     390,    -1,   390,    -1,   395,    -1,   394,   123,   395,    -1,
       1,    -1,   394,     1,   395,    -1,   394,   123,     1,    -1,
     416,    -1,   360,    -1,   360,   102,   360,    -1,   125,   126,
      -1,   125,   397,   126,    -1,   398,    -1,   397,   123,   398,
      -1,   397,     1,   398,    -1,   397,   123,     1,    -1,   360,
      -1,   360,   102,   360,    -1,   130,    -1,   131,    -1,   110,
      -1,   111,    -1,    25,    -1,   106,    -1,   108,    -1,   107,
      -1,   135,    -1,   134,    -1,   136,    -1,    21,    -1,   130,
      -1,   110,    -1,   131,    -1,   111,    -1,    74,    -1,   105,
      -1,   132,    -1,   133,    -1,    12,    -1,    23,    -1,    69,
      -1,    70,    -1,    27,    -1,    27,     7,    -1,    65,    -1,
     137,    -1,     8,    -1,     8,    35,    -1,    43,    -1,   138,
      -1,    94,    -1,     8,    -1,    27,    -1,    25,    -1,    74,
      -1,    69,    -1,    70,    -1,   130,    -1,   110,    -1,   131,
      -1,   111,    -1,   132,    -1,   133,    -1,    12,    -1,    23,
      -1,   109,    -1,    21,    -1,   134,    -1,   429,    -1,   136,
      -1,   106,    -1,   107,    -1,   108,    -1,     8,    -1,   138,
      -1,    27,    -1,   137,    -1,   105,    -1,   409,    -1,   408,
      -1,   112,    -1,   113,    -1,   114,    -1,   115,    -1,   116,
      -1,   117,    -1,   118,    -1,   119,    -1,   411,    -1,   419,
      -1,    90,    -1,   413,    -1,   416,    -1,   413,   123,   416,
      -1,   413,     1,   416,    -1,   413,   123,     1,    -1,   413,
       1,    -1,   416,    -1,   414,   123,   416,    -1,   416,    -1,
     416,   129,   416,    -1,   417,    -1,   419,    -1,    94,    -1,
      95,    -1,    96,    -1,    88,    -1,    85,    -1,    82,    -1,
      83,    -1,    87,    -1,    84,    -1,    86,    -1,    41,    -1,
      42,    -1,    43,    -1,    44,    -1,    45,    -1,    75,    -1,
      46,    -1,    47,    -1,    76,    -1,    77,    -1,    78,    -1,
      49,    -1,    50,    -1,    51,    -1,    53,    -1,    55,    -1,
      56,    -1,    57,    -1,    58,    -1,    59,    -1,    61,    -1,
      62,    -1,    63,    -1,    65,    -1,    64,    -1,    66,    -1,
      67,    -1,    68,    -1,    69,    -1,    70,    -1,    71,    -1,
       6,    -1,    72,    -1,    81,    -1,    74,    -1,   419,    -1,
      97,    -1,   420,    -1,    52,    -1,    54,    -1,    60,    -1,
      79,    -1,    80,    -1,    73,    -1,    99,    -1,    -1,    -1,
      -1,    28,    -1,    97,    -1,    97,    -1,    -1,   120,    -1,
     128,    -1,    98,    -1,   127,    -1,   135,    -1,   104,    -1,
     129,    -1,     1,    -1,    -1,     1,    -1
d838 78
a915 80
       0,   216,   216,   217,   229,   231,   228,   234,   240,   242,
     239,   245,   246,   248,   247,   256,   258,   255,   264,   263,
     270,   272,   269,   279,   278,   286,   285,   291,   293,   291,
     298,   299,   304,   303,   306,   308,   307,   311,   316,   315,
     321,   325,   327,   328,   329,   334,   333,   341,   340,   348,
     349,   351,   356,   361,   362,   367,   368,   372,   373,   375,
     377,   379,   384,   389,   391,   392,   397,   402,   403,   405,
     407,   409,   414,   416,   418,   423,   423,   427,   429,   433,
     434,   435,   440,   445,   446,   450,   451,   453,   458,   459,
     461,   463,   465,   470,   475,   476,   482,   483,   488,   489,
     494,   495,   500,   500,   503,   505,   511,   512,   517,   518,
     519,   525,   526,   531,   532,   532,   535,   540,   545,   546,
     547,   552,   557,   558,   563,   563,   579,   582,   581,   585,
     592,   594,   596,   598,   600,   602,   606,   607,   612,   613,
     614,   618,   620,   629,   630,   635,   634,   659,   664,   665,
     670,   671,   674,   673,   680,   681,   686,   688,   693,   695,
     694,   702,   707,   708,   710,   711,   713,   715,   719,   730,
     732,   729,   746,   745,   752,   754,   751,   764,   766,   763,
     776,   775,   784,   791,   797,   806,   808,   813,   814,   816,
     818,   820,   824,   829,   830,   836,   836,   852,   853,   858,
     859,   861,   863,   864,   865,   866,   868,   869,   874,   876,
     884,   887,   889,   891,   893,   898,   900,   901,   903,   905,
     905,   907,   909,   913,   914,   919,   920,   922,   924,   926,
     931,   933,   939,   940,   942,   947,   948,   952,   953,   955,
     957,   959,   963,   969,   970,   975,   977,   979,   981,   986,
     987,   989,   991,   993,   997,  1002,  1007,  1008,  1012,  1014,
    1019,  1021,  1023,  1025,  1027,  1031,  1033,  1042,  1044,  1046,
    1048,  1053,  1055,  1061,  1065,  1071,  1070,  1077,  1078,  1080,
    1085,  1086,  1090,  1091,  1092,  1097,  1098,  1100,  1105,  1107,
    1114,  1113,  1117,  1123,  1129,  1131,  1133,  1135,  1137,  1139,
    1143,  1144,  1146,  1151,  1152,  1154,  1161,  1172,  1175,  1177,
    1174,  1186,  1187,  1191,  1198,  1197,  1202,  1201,  1213,  1220,
    1219,  1223,  1229,  1238,  1239,  1243,  1248,  1250,  1253,  1252,
    1256,  1258,  1260,  1262,  1264,  1269,  1270,  1272,  1277,  1282,
    1283,  1288,  1289,  1291,  1293,  1295,  1297,  1302,  1303,  1307,
    1308,  1312,  1313,  1315,  1320,  1320,  1323,  1324,  1326,  1328,
    1330,  1332,  1337,  1338,  1340,  1342,  1346,  1348,  1350,  1352,
    1354,  1356,  1363,  1362,  1369,  1371,  1373,  1377,  1378,  1383,
    1385,  1389,  1390,  1395,  1396,  1401,  1402,  1403,  1407,  1412,
    1413,  1417,  1419,  1428,  1429,  1431,  1433,  1437,  1442,  1447,
    1448,  1454,  1459,  1460,  1464,  1466,  1468,  1470,  1467,  1475,
    1477,  1482,  1486,  1486,  1492,  1493,  1494,  1501,  1502,  1505,
    1504,  1508,  1510,  1512,  1514,  1516,  1518,  1520,  1521,  1523,
    1526,  1525,  1534,  1536,  1533,  1555,  1557,  1559,  1554,  1563,
    1565,  1562,  1569,  1568,  1573,  1572,  1576,  1581,  1586,  1587,
    1589,  1591,  1593,  1598,  1600,  1606,  1605,  1616,  1623,  1628,
    1630,  1635,  1636,  1641,  1642,  1644,  1646,  1648,  1654,  1653,
    1660,  1661,  1663,  1665,  1667,  1671,  1673,  1675,  1677,  1682,
    1684,  1686,  1691,  1692,  1697,  1698,  1703,  1705,  1707,  1709,
    1711,  1713,  1715,  1717,  1719,  1721,  1727,  1728,  1733,  1734,
    1738,  1739,  1744,  1749,  1751,  1758,  1771,  1773,  1778,  1779,
    1781,  1783,  1786,  1785,  1792,  1793,  1795,  1798,  1797,  1804,
    1805,  1807,  1809,  1811,  1813,  1818,  1820,  1822,  1823,  1824,
    1826,  1827,  1832,  1833,  1834,  1838,  1839,  1843,  1848,  1850,
    1855,  1856,  1857,  1862,  1863,  1863,  1863,  1863,  1863,  1863,
    1863,  1863,  1864,  1864,  1864,  1864,  1864,  1864,  1864,  1864,
    1864,  1868,  1880,  1894,  1895,  1900,  1902,  1906,  1907,  1909,
    1911,  1913,  1915,  1917,  1919,  1921,  1923,  1925,  1927,  1929,
    1931,  1933,  1935,  1937,  1942,  1943,  1945,  1954,  1958,  1960,
    1962,  1964,  1969,  1970,  1972,  1974,  1980,  1982,  1984,  1989,
    1994,  1995,  1997,  1999,  2000,  2004,  2005,  2010,  2012,  2017,
    2019,  2024,  2029,  2034,  2036,  2038,  2040,  2042,  2047,  2048,
    2050,  2055,  2056,  2061,  2063,  2068,  2069,  2071,  2073,  2075,
    2080,  2082,  2084,  2089,  2091,  2096,  2097,  2099,  2101,  2106,
    2108,  2115,  2116,  2120,  2121,  2122,  2126,  2127,  2128,  2129,
    2130,  2131,  2132,  2136,  2137,  2138,  2139,  2140,  2141,  2145,
    2146,  2147,  2148,  2149,  2150,  2154,  2155,  2156,  2157,  2161,
    2162,  2163,  2164,  2168,  2171,  2172,  2173,  2174,  2175,  2176,
    2182,  2183,  2184,  2185,  2186,  2187,  2188,  2189,  2190,  2191,
    2192,  2193,  2194,  2195,  2196,  2197,  2198,  2199,  2200,  2201,
    2202,  2203,  2204,  2208,  2209,  2210,  2211,  2215,  2216,  2217,
    2218,  2224,  2225,  2229,  2234,  2239,  2241,  2243,  2249,  2251,
    2255,  2257,  2262,  2263,  2268,  2273,  2274,  2275,  2276,  2277,
    2278,  2279,  2280,  2281,  2282,  2283,  2284,  2285,  2286,  2287,
    2288,  2289,  2290,  2291,  2292,  2293,  2294,  2295,  2296,  2297,
    2298,  2299,  2300,  2301,  2302,  2303,  2304,  2305,  2306,  2307,
    2308,  2309,  2310,  2311,  2312,  2313,  2314,  2315,  2316,  2317,
    2318,  2322,  2327,  2328,  2329,  2330,  2331,  2333,  2334,  2335,
    2339,  2347,  2352,  2357,  2361,  2366,  2371,  2377,  2378,  2383,
    2384,  2385,  2389,  2390,  2394,  2395,  2401,  2405
d937 31
a967 32
  "p_c_language", "p_class", "p_override", "p_reintroduce", "p_view",
  "p_Addr", "p_Assigned", "p_Dispose", "p_Exit", "p_FormatString", "p_New",
  "p_Return", "p_StringOf", "LEX_INTCONST", "LEX_INTCONST_BASE",
  "LEX_STRCONST", "LEX_REALCONST", "LEX_BUILTIN_PROCEDURE",
  "LEX_BUILTIN_PROCEDURE_WRITE", "LEX_BUILTIN_FUNCTION", "LEX_ID",
  "LEX_CARET_WHITE", "LEX_CARET_LETTER", "LEX_ASSIGN", "LEX_RENAME",
  "LEX_RANGE", "LEX_ELLIPSIS", "LEX_CONST_EQUAL", "LEX_SYMDIFF", "LEX_NE",
  "LEX_GE", "LEX_LE", "LEX_POWER", "LEX_BPPLUS", "LEX_BPMINUS",
  "LEX_CEIL_PLUS", "LEX_CEIL_MINUS", "LEX_FLOOR_PLUS", "LEX_FLOOR_MINUS",
  "LEX_CEIL_MULT", "LEX_CEIL_DIV", "LEX_FLOOR_MULT", "LEX_FLOOR_DIV",
  "';'", "'('", "')'", "','", "':'", "'['", "']'", "'@@'", "'^'", "'.'",
  "'+'", "'-'", "'*'", "'/'", "'<'", "'='", "'>'", "'|'", "'&'", "$accept",
  "program_component", "program_component_1", "@@1", "@@2",
  "module_declaration", "@@3", "@@4", "@@5", "@@6", "@@7", "@@8",
  "interface_module", "@@9", "@@10", "module_interface", "@@11",
  "implementatation_module", "@@12", "module_block", "@@13", "@@14",
  "optional_unit_implementation", "optional_unit_init_and_final_part",
  "@@15", "@@16", "unit_initialization", "@@17", "rest_of_unit_constructor",
  "optional_init_and_final_part", "module_constructor", "@@18",
  "module_destructor", "@@19", "optional_program_heading",
  "optional_module_parameters", "optional_par_id_list",
  "optional_module_attributes", "export_part_list", "export_part",
  "export_list_or_all", "export_all", "export_list", "export_list_item",
  "optional_import_part", "@@20", "optional_import_part1",
  "import_specification_list", "import_specification",
  "optional_qualified", "optional_import_qualifier", "import_clause_list",
  "import_clause", "optional_rename", "declarations_and_uses",
  "declaration_or_uses", "any_declaration_part", "any_decl", "@@21",
  "interface_decl_part", "interface_decl", "implementation_decls",
  "implementation_decl", "@@22", "uses_part", "uses_list",
  "uses_specification", "optional_unit_filename", "simple_decl", "@@23",
  "simple_decl_1", "@@24", "label_list", "new_label",
d974 21
a994 22
  "@@31", "@@32", "@@33", "@@34", "@@35", "formal_schema_discriminants",
  "discriminant_specification_list", "discriminant_specification",
  "type_denoter_with_attributes", "type_denoter", "@@36", "type_denoter_1",
  "type_denoter_0", "actual_schema_discriminants",
  "discriminant_expression_list", "unpacked_structured_type", "@@37",
  "direct_access_index_type", "array_index_list", "ordinal_index_type",
  "record_field_list", "optional_fixed_part", "fixed_part",
  "record_section", "rest_of_variant", "variant_selector", "variant_list",
  "variant", "new_ordinal_type_non_iso", "new_ordinal_type",
  "enumerated_type", "enum_list", "subrange_type", "new_pointer_type",
  "pointer_domain_type", "new_procedural_type", "@@38", "object_parent",
  "optional_abstract", "object_field_list", "object_field_list_1",
  "object_section", "@@39", "optional_value_specification", "var_init",
  "routine_interface_decl", "routine_declaration", "@@40", "@@41",
  "routine_or_method_heading", "routine_heading", "@@42", "@@43",
  "method_heading", "@@44", "optional_routine_interface_directive_list",
  "remote_directive_list", "remote_directive", "@@45",
  "optional_routine_directive_list", "attributes", "attribute_list",
  "attrib", "bp_directive", "operator_identifier", "operator_result_def",
  "optional_formal_parameter_list", "@@46",
  "optional_formal_parameter_list0", "formal_parameter_list",
  "formal_parameter", "@@47", "resulttype", "optional_result_def",
d1000 6
a1005 6
  "statement_sequence", "optional_statement_vd", "@@48", "@@49",
  "optional_statement", "empty_lte", "statement", "@@50", "statement_1",
  "unlabelled_statement", "@@51", "@@52", "@@53", "@@54", "@@55", "@@56", "@@57",
  "@@58", "@@59", "@@60", "@@61", "set_label", "with_list", "with_variable",
  "if_then", "@@62", "optional_case_completer", "otherwise",
  "optional_case_element_list", "case_element_list", "case_element", "@@63",
d1010 1
a1010 1
  "@@64", "term", "@@65", "factor", "primary", "unsigned_number",
d1037 78
a1114 80
       0,   139,   140,   140,   142,   143,   141,   141,   145,   146,
     144,   144,   144,   147,   144,   148,   149,   144,   150,   144,
     152,   153,   151,   155,   154,   157,   156,   159,   160,   158,
     161,   161,   163,   162,   162,   164,   162,   162,   166,   165,
     167,   168,   168,   168,   168,   170,   169,   172,   171,   173,
     173,   173,   174,   175,   175,   176,   176,   177,   177,   177,
     177,   177,   178,   179,   179,   179,   180,   181,   181,   181,
     181,   181,   182,   182,   182,   184,   183,   185,   185,   186,
     186,   186,   187,   188,   188,   189,   189,   189,   190,   190,
     190,   190,   190,   191,   192,   192,   193,   193,   194,   194,
     195,   195,   197,   196,   196,   196,   198,   198,   199,   199,
     199,   200,   200,   201,   202,   201,   201,   203,   204,   204,
     204,   205,   206,   206,   208,   207,   209,   210,   209,   209,
     211,   211,   211,   211,   211,   211,   212,   212,   213,   213,
     213,   214,   214,   215,   215,   217,   216,   216,   218,   218,
     219,   219,   220,   219,   221,   221,   222,   222,   223,   224,
     223,   223,   225,   225,   225,   225,   225,   225,   226,   227,
     228,   226,   229,   226,   230,   231,   226,   232,   233,   226,
     234,   226,   226,   226,   226,   235,   235,   236,   236,   236,
     236,   236,   237,   238,   238,   240,   239,   241,   241,   242,
     242,   242,   242,   242,   242,   242,   242,   242,   243,   243,
     244,   244,   244,   244,   244,   245,   245,   245,   245,   246,
     245,   245,   245,   247,   247,   248,   248,   248,   248,   248,
     249,   249,   250,   250,   250,   251,   251,   252,   252,   252,
     252,   252,   253,   254,   254,   255,   255,   255,   255,   256,
     256,   256,   256,   256,   257,   258,   259,   259,   260,   260,
     261,   261,   261,   261,   261,   262,   262,   263,   263,   263,
     263,   264,   264,   264,   265,   266,   265,   267,   267,   267,
     268,   268,   269,   269,   269,   270,   270,   270,   271,   271,
     272,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     273,   273,   273,   274,   274,   274,   275,   276,   277,   278,
     276,   279,   279,   280,   281,   280,   282,   280,   283,   284,
     283,   283,   283,   285,   285,   286,   287,   287,   288,   287,
     287,   287,   287,   287,   287,   289,   289,   289,   290,   291,
     291,   292,   292,   292,   292,   292,   292,   293,   293,   294,
     294,   295,   295,   295,   297,   296,   298,   298,   298,   298,
     298,   298,   299,   299,   299,   299,   300,   300,   300,   300,
     300,   300,   301,   300,   302,   302,   302,   303,   303,   304,
     304,   305,   305,   306,   306,   307,   307,   307,   308,   309,
     309,   310,   310,   311,   311,   311,   311,   312,   313,   314,
     314,   315,   316,   316,   317,   317,   318,   319,   317,   320,
     320,   321,   323,   322,   324,   324,   324,   325,   325,   326,
     325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
     327,   325,   328,   329,   325,   330,   331,   332,   325,   333,
     334,   325,   335,   325,   336,   325,   325,   337,   338,   338,
     338,   338,   338,   339,   339,   341,   340,   342,   342,   343,
     343,   344,   344,   345,   345,   345,   345,   345,   347,   346,
     348,   348,   348,   348,   348,   349,   349,   349,   349,   350,
     350,   350,   351,   351,   352,   352,   353,   353,   353,   353,
     353,   353,   353,   353,   353,   353,   354,   354,   355,   355,
     356,   356,   357,   358,   358,   359,   360,   360,   361,   361,
     361,   361,   362,   361,   363,   363,   363,   364,   363,   365,
     365,   365,   365,   365,   365,   366,   366,   366,   366,   366,
     366,   366,   367,   367,   367,   368,   368,   369,   370,   370,
     371,   371,   371,   372,   372,   372,   372,   372,   372,   372,
     372,   372,   372,   372,   372,   372,   372,   372,   372,   372,
     372,   373,   374,   375,   375,   376,   376,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   378,   378,   378,   379,   380,   380,
     380,   380,   381,   381,   381,   381,   382,   382,   382,   383,
     384,   384,   384,   384,   384,   385,   385,   386,   386,   387,
     387,   388,   389,   390,   390,   390,   390,   390,   391,   391,
     391,   392,   392,   393,   393,   394,   394,   394,   394,   394,
     395,   395,   395,   396,   396,   397,   397,   397,   397,   398,
     398,   399,   399,   400,   400,   400,   401,   401,   401,   401,
     401,   401,   401,   402,   402,   402,   402,   402,   402,   403,
     403,   403,   403,   403,   403,   404,   404,   404,   404,   405,
     405,   405,   405,   406,   406,   406,   406,   406,   406,   406,
     407,   407,   407,   407,   407,   407,   407,   407,   407,   407,
     407,   407,   407,   407,   407,   407,   407,   407,   407,   407,
     407,   407,   407,   408,   408,   408,   408,   409,   409,   409,
     409,   410,   410,   411,   412,   413,   413,   413,   413,   413,
     414,   414,   415,   415,   416,   417,   417,   417,   417,   417,
     417,   417,   417,   417,   417,   417,   417,   417,   417,   417,
     417,   417,   417,   417,   417,   417,   417,   417,   417,   417,
     417,   417,   417,   417,   417,   417,   417,   417,   417,   417,
     417,   417,   417,   417,   417,   417,   417,   417,   417,   417,
     417,   418,   419,   419,   419,   419,   419,   419,   419,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   427,   428,
     428,   428,   429,   429,   430,   430,   431,   432
d1137 36
a1172 38
       0,     7,     0,     4,     0,     0,    10,     0,     0,    10,
       0,    10,     5,     6,     6,     3,     3,     1,     3,     3,
       3,     2,     3,     1,     2,     0,     2,     1,     2,     1,
       2,     2,     1,     1,     1,     1,     1,     2,     3,     3,
       1,     3,     1,     3,     3,     6,     1,     4,     3,     0,
       4,     3,     1,     1,     3,     1,     3,     3,     2,     1,
       1,     1,     0,     2,     7,     1,     2,     1,     3,     3,
       3,     2,     4,     0,     5,     3,     3,     1,     1,     1,
       3,     3,     1,     2,     5,     1,     1,     1,     3,     3,
       1,     3,     3,     3,     2,     3,     4,     2,     2,     2,
       3,     1,     1,     1,     2,     0,     4,     1,     3,     3,
       1,     1,     1,     2,     1,     1,     2,     3,     4,     3,
       0,     6,     3,     3,     1,     2,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     3,     3,     0,     0,
       9,     1,     1,     3,     0,     6,     0,     6,     5,     0,
       8,     5,     5,     1,     1,     3,     2,     3,     0,     6,
       6,     6,     3,     2,     2,     1,     3,     3,     4,     1,
       3,     1,     1,     1,     3,     4,     6,     1,     1,     1,
       1,     1,     2,     1,     0,     2,     1,     2,     3,     3,
       5,     3,     1,     3,     3,     3,     3,     4,     4,     5,
       3,     3,     0,     6,     1,     2,     1,     1,     2,     1,
       0,     1,     1,     0,     2,     1,     1,     1,     3,     1,
       1,     6,     7,     1,     3,     3,     3,     5,     3,     1,
       1,     5,     1,     3,     0,     1,     0,     0,     5,     1,
       1,     0,     0,     2,     1,     2,     1,     1,     1,     0,
       4,     1,     2,     1,     4,     4,     6,     1,     6,     1,
       0,     6,     0,     0,     8,     0,     0,     0,     9,     0,
       0,     8,     0,    11,     0,     9,     2,     2,     1,     3,
       1,     3,     3,     1,     3,     0,     7,     0,     4,     1,
       1,     0,     2,     1,     3,     1,     3,     3,     0,     6,
       1,     3,     3,     3,     2,     1,     3,     3,     3,     1,
       1,     1,     1,     2,     1,     1,     2,     1,     4,     4,
       6,     7,     5,     7,     9,    11,     0,     1,     1,     1,
       1,     3,     4,     1,     3,     1,     1,     3,     1,     2,
       3,     3,     0,     4,     1,     3,     3,     0,     4,     1,
       3,     3,     3,     3,     3,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
d1174 9
a1182 9
       1,     1,     1,     1,     3,     2,     1,     1,     1,     3,
       3,     2,     4,     4,     3,     5,     2,     4,     4,     5,
       4,     4,     6,     7,     1,     4,     4,     0,     1,     3,
       1,     3,     1,     3,     3,     3,     1,     3,     5,     1,
       2,     3,     3,     1,     1,     1,     3,     3,     1,     6,
       4,     4,     3,     1,     2,     3,     3,     3,     1,     3,
       3,     1,     1,     3,     1,     1,     3,     1,     3,     3,
       1,     1,     3,     2,     3,     1,     3,     3,     3,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
d1184 2
a1185 2
       1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
d1189 2
a1190 2
       1,     1,     1,     1,     1,     1,     3,     3,     3,     2,
       1,     3,     1,     3,     1,     1,     1,     1,     1,     1,
d1196 2
a1197 2
       1,     0,     0,     0,     1,     1,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1
d1250 1
a1252 1
       1,     2,     0,     0,     0,     0,     0,     0,     0,     0,
d1258 2
d1262 1
a1262 2
       0,     0,     1,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     2,     0,     1,     2,     0,     0,     0,
d1264 1
a1265 1
       0,     0,     0,     1,     0,     2,     2,     0,     0,     0,
a1266 1
       2,     1,     0,     0,     0,     0,     0,     0,     0,     0,
d1280 1
a1280 3
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0
d1363 1
a1363 3
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0
d1371 130
a1500 133
      49,     0,     0,   786,     0,     3,     7,    11,    12,   796,
       0,   796,   767,   736,   737,   738,   739,   740,   742,   743,
     747,   748,   749,   774,   750,   775,   751,   752,   753,   754,
     755,   776,   756,   757,   758,   760,   759,   761,   762,   763,
     764,   765,   766,   768,   779,   770,   741,   744,   745,   746,
     777,   778,   769,   731,   732,   734,   730,   735,   733,   729,
     726,   727,   728,   772,   780,   796,   724,   725,   773,     0,
       1,     0,     0,     4,     0,    55,   796,     0,     0,    53,
       0,   796,    14,     0,   796,    75,    56,     0,    20,    18,
       0,     0,     0,   715,    51,    50,     0,     0,   342,     0,
     339,   343,   341,    96,    77,    25,   796,     0,    27,   796,
      54,   719,     0,     8,   338,   796,   793,     0,   792,     0,
     102,     0,    76,    27,    21,    23,     0,     0,    77,    52,
     717,   718,   716,    75,   340,   599,   529,   645,     0,     0,
       0,     0,     0,     0,   532,   533,   540,   534,   796,   541,
     643,   644,     0,     0,     0,     0,   641,   642,     0,   506,
     508,   514,   519,   528,   527,   537,   538,   531,   566,   568,
     530,     0,     0,   567,   771,   344,   771,     0,     0,     0,
       0,     0,     0,     0,     0,    97,    99,   124,    98,   105,
       0,   311,   312,     0,    79,   796,     0,     0,     0,    16,
     795,   794,    19,   111,   106,   576,     0,   587,     0,     0,
       0,   587,   565,   584,     0,   633,   639,     0,   635,   526,
     543,   547,   548,   549,   544,   546,   550,   551,   559,   560,
     545,   552,   553,   554,   555,   556,   557,   558,   542,   345,
     652,   665,   667,   657,   658,   646,   648,   647,   654,   656,
     703,   704,   705,   706,   653,   655,   650,   649,   651,   668,
       0,     0,   512,     0,   669,   661,   662,   671,   663,   664,
     707,   708,   709,   710,   659,   660,   672,     0,   517,     0,
       0,     0,     0,     0,     0,   539,   790,     0,   791,   789,
       0,   571,   587,   509,   525,     0,     0,   118,   796,   354,
     132,   713,     0,   130,   136,   137,   354,     0,     0,   696,
     686,   689,   687,   698,   700,   693,   694,   695,   688,   681,
     683,   680,   682,   684,   685,   690,   692,   699,   697,   354,
     350,   702,   701,   349,   691,   781,     0,   103,     0,   796,
       0,    78,    84,   796,    83,    26,     0,    59,     0,    57,
       0,    27,   114,   124,     0,     0,   596,     0,   592,     0,
       0,     0,   569,     0,     0,     0,   634,   666,   507,   510,
       0,   511,   670,   515,     0,   516,   524,   562,   563,   523,
     520,   521,   522,   627,     0,   753,   760,   731,   732,   735,
     733,   796,     0,     0,   613,     0,   787,   605,   603,   604,
     608,     0,   625,   630,   771,   570,   574,     0,     0,     0,
     117,     0,     0,   121,   122,     0,   380,   796,   135,   104,
       0,     0,   313,     0,     0,   796,   412,     6,   127,     0,
       0,   125,   307,   308,   335,    81,    80,     0,     0,   796,
      85,    22,     0,     0,     0,     0,    41,   112,   124,   113,
     116,     0,     0,    30,   107,   108,   109,   110,     0,   580,
       0,     0,     0,   577,     0,   581,     0,   578,   590,   588,
     531,     0,   640,   637,   638,   636,   513,   518,     0,     0,
       0,   613,   787,   614,   613,   624,     0,   618,     0,   627,
     613,     0,     0,     0,   573,     0,   600,     0,     0,     0,
     572,     0,   346,   120,   119,   123,   354,   314,     0,   379,
     377,     0,   355,   356,   133,   134,   131,   354,   354,   354,
     316,   351,     0,   353,   406,   782,   402,   405,     0,     0,
     147,     0,   143,   783,   720,   140,   126,   138,   783,   796,
     347,     0,   348,     0,     0,     0,    77,   796,     0,     0,
       0,    90,     0,    88,   796,    82,    60,    61,    58,   106,
      66,     0,    62,    64,    17,     0,     0,    43,    44,   115,
     354,   354,    77,     0,   796,   579,   597,   594,   595,   593,
       0,   796,   586,   585,     0,   564,     0,     0,   788,   612,
       0,   621,   615,   622,     0,     0,   617,     0,   616,   632,
     606,   601,     0,   602,   631,   628,   629,   626,   607,   575,
     380,     0,   378,     0,     0,     0,     0,   785,     0,   357,
       0,   362,     0,     0,   382,   381,   318,   321,   322,     0,
     352,     0,   412,     0,   674,     0,     0,     0,     0,   676,
     675,   435,   439,     0,   496,   678,   679,   677,     0,   423,
     421,   673,   487,     0,   417,   413,   416,   414,   429,   418,
     427,   482,   796,     0,   711,   771,   164,     0,   162,   783,
     144,     0,     0,   139,     0,     0,     0,   536,   535,   326,
       0,   333,   334,   100,   325,   336,   337,     0,     0,    86,
       0,     0,    93,    94,   124,    69,     0,    67,   796,   722,
       0,     0,     0,     0,    29,     0,    42,    96,     0,   306,
     324,   323,     0,   582,     0,   591,   589,     0,   610,     0,
     620,   619,   623,   632,   319,   797,     0,   315,   374,   376,
     361,   354,   354,     0,   383,   359,   796,     0,   358,     0,
       0,     0,   317,   407,   403,   401,     0,     0,   446,   712,
       0,   781,   781,   450,     0,   448,   453,   497,     0,     0,
       0,   422,     0,   483,   415,   430,     0,   486,   447,   167,
       0,     0,     0,     0,   721,   195,   195,     0,   505,   328,
     327,   332,   102,    87,    91,    92,    89,    95,    24,     0,
      63,     0,     0,    72,     0,   796,     0,    45,    47,   102,
      10,   598,   583,     0,     0,     0,   375,   561,   380,   371,
       0,     0,   370,   364,   365,     0,   363,   383,     0,   784,
       0,   366,   386,   385,   390,   387,   389,   399,   400,     0,
       0,   412,   432,     0,   484,     0,   485,   455,   412,     0,
       0,   781,     0,     0,     0,     0,     0,     0,     0,   781,
       0,   165,   166,   163,     0,     0,     0,   195,   145,   193,
       0,     0,   141,     0,     0,   796,   101,     0,    70,    71,
      68,    73,   723,    74,    65,   412,   412,    32,    38,    31,
      34,    37,   787,   609,   320,   372,     0,   384,   360,   368,
       0,     0,     0,     0,   367,   408,     0,   444,     0,   781,
       0,   440,   451,   412,   452,   449,   454,     0,   489,     0,
     424,   425,     0,   488,   412,   420,     0,     0,   187,     0,
     170,   173,     0,   796,     0,   796,   796,   796,   796,   194,
       0,   599,   354,   354,     0,     0,     0,     0,   541,     0,
     791,   789,   196,   197,   206,   203,   256,   257,   204,   205,
     202,     0,   199,   561,   568,   771,     0,     0,   222,     0,
       0,     0,     0,     0,     0,   409,   410,     0,   412,   412,
      35,   611,     0,   369,   398,     0,   393,     0,   388,     0,
     465,   433,     0,   463,     0,   470,     0,     0,   481,   480,
     479,     0,   412,   436,     0,   782,   492,   796,     0,   796,
       0,   782,   186,   191,     0,   185,     0,   195,     0,     0,
       0,   182,   277,     0,   281,     0,   280,     0,   303,   304,
     305,   168,     0,   300,     0,   796,   158,     0,     0,     0,
     223,   275,   274,     0,   232,   195,   198,   200,   269,   272,
     273,   271,     0,     0,   260,   267,   568,   543,   268,     0,
       0,     0,   201,   207,     0,     0,   796,   329,   330,   331,
     310,    46,    48,    33,    40,    39,   412,   373,     0,     0,
       0,     0,     0,   457,     0,     0,   462,   474,     0,   468,
       0,     0,   781,   442,   782,     0,   412,   428,     0,   499,
     500,     0,   498,   490,     0,   426,   431,   189,   190,   188,
     192,   796,   184,   183,     0,     0,   796,   796,   796,   302,
     301,   161,     0,     0,   148,   229,     0,   225,   230,   231,
       0,     0,   195,     0,   221,     0,     0,     0,   237,     0,
     235,   218,   259,   264,   258,     0,   265,   212,     0,   210,
       0,     0,   270,     0,   154,    36,   395,   396,   394,     0,
       0,     0,   459,   460,     0,   781,   466,   467,   464,   473,
     472,   471,   781,   477,   478,   476,   412,     0,   456,   437,
     782,   493,   796,     0,     0,   491,   171,   279,   278,   180,
     175,   178,   160,   146,   228,     0,     0,   224,   217,   276,
     220,     0,   241,     0,   233,   195,   262,   263,   261,     0,
     208,     0,   209,   266,   142,     0,   391,     0,     0,   434,
     412,   412,   782,   781,   782,   441,     0,   501,     0,     0,
       0,     0,   796,     0,   149,   150,   157,   227,   226,   195,
       0,   248,   255,     0,   771,   239,   240,   238,   796,   213,
     214,   211,   155,   397,   392,   782,   782,   445,   412,   438,
     494,     0,   502,   284,     0,   282,   285,     0,     0,   151,
     156,   215,     0,     0,   242,   458,   469,   782,     0,   503,
     181,     0,     0,   737,   742,   747,   748,   779,   777,   778,
     286,   283,   299,     0,   176,   179,   152,   252,     0,   249,
       0,   246,   245,   443,   495,     0,   354,   354,   354,   354,
     295,   287,   195,     0,   253,   788,   243,     0,   504,   380,
     289,   292,   293,   796,   153,   251,   250,   234,     0,   232,
     290,   288,   232,     0,     0,     0,   254,   291,   787,   244
d1506 28
a1533 30
      -1,     4,     5,    85,   184,     6,   133,   453,    71,   107,
     351,   108,     7,   106,   197,   126,   198,     8,   123,   127,
     128,   446,   573,   879,   968,  1066,   880,   969,  1063,   566,
     567,   875,   568,   876,     9,    89,    90,    73,   348,   349,
     562,   563,   696,   697,   103,   104,   122,   193,   194,   343,
     439,   552,   553,   692,   120,   185,   782,   186,   187,   353,
     454,   352,   447,   448,   188,   296,   297,   413,   456,   338,
     431,   529,   302,   303,   536,   537,   531,   532,   928,  1113,
    1224,  1303,  1143,  1225,  1025,  1112,   667,   668,   771,  1007,
     772,   925,  1220,   926,  1221,  1219,   855,   917,   918,   858,
     859,   860,   942,   943,  1052,  1138,   944,  1034,  1029,  1116,
    1117,  1125,  1126,  1127,  1128,  1317,  1230,  1288,  1289,  1231,
    1118,   946,  1043,   947,   948,  1038,  1039,  1123,  1011,  1015,
    1254,  1255,  1281,  1324,  1021,  1022,   457,   189,   546,   867,
     190,   191,   611,   629,   192,   805,   709,   432,   547,   863,
     433,   929,    99,   100,   549,   329,   520,   416,   417,   512,
     620,   621,   972,   727,   507,   508,   622,   812,   821,   822,
     823,   824,   975,   976,   825,   826,   654,  1064,   526,   631,
     831,   964,   965,   966,   528,   655,   656,   766,   849,   896,
    1073,   751,  1085,  1214,   752,   994,  1167,   987,   657,   754,
     755,   658,   899,  1154,  1155,   981,   982,   983,  1162,   984,
     985,   991,   659,   835,   660,   758,  1088,  1089,  1090,  1268,
     986,   778,   159,   370,   160,   374,   161,   162,   163,   676,
     164,   165,   166,   238,   952,   827,   377,   167,   168,   212,
     355,   471,   357,   358,   169,   395,   396,   397,   398,   718,
     399,   400,   486,   594,   487,   492,   402,   170,   217,   218,
     171,   172,   260,   261,   277,   262,   278,   662,   330,   263,
     279,   663,   304,  1129,    92,   533,   698,    93,    66,   173,
      67,    68,   426,   633,   672,  1120,   700,    10,   496,   291,
     509,   202,   213,   729
d1538 1
a1538 1
#define YYPACT_NINF -1003
d1541 130
a1670 133
     469,  6430,  8379, -1003,   304, -1003, -1003,   199, -1003,    43,
    8379,   228, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003,   228, -1003, -1003, -1003,   236,
   -1003,   269,   248, -1003,   270, -1003,    29,  8379,   280, -1003,
     309,    43, -1003,  8379,  8043, -1003, -1003,   414, -1003,   440,
     442,   456,   103, -1003, -1003, -1003,   488,   542, -1003,   259,
   -1003,   576, -1003, -1003,   551, -1003,   228,   529, -1003,    43,
   -1003,  8379,  6522, -1003, -1003,  8043, -1003,  5480, -1003,  5480,
     696,  8379, -1003, -1003, -1003, -1003,   535,    45,   551, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,  8379,   539,
     570,   579,   605,   613, -1003, -1003, -1003, -1003,   620, -1003,
   -1003, -1003,  5480,  5360,  5600,  1421, -1003, -1003,   622,  1267,
     410,  1286,    16, -1003, -1003,     0, -1003,   756,   627, -1003,
   -1003,  5600,  5600, -1003,   634, -1003, -1003,  8379,  8379,  6246,
    8379,  8379,  8379,  2367,   752, -1003, -1003, -1003, -1003, -1003,
     645, -1003, -1003,   161, -1003,   703,    45,   529,  6614, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003,  1120, -1003,  5480,  1120,
    5480, -1003, -1003, -1003,   657, -1003,   680,    84, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003,   781, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
    5480,  5600, -1003,  5600,   758, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003,  5600, -1003,  5600,
    1166,  1166,  5600,  5600,  5600, -1003, -1003,  2849, -1003, -1003,
    8379, -1003,   675,   410, -1003,  5480,   147, -1003,   784,   673,
   -1003, -1003,   255, -1003, -1003, -1003,   691,   694,   700, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003,    45, -1003,   463, -1003,
    8379,  8462, -1003,    19, -1003, -1003,    45, -1003,   193, -1003,
     -17, -1003,  1407,   669,   536,  5480,   685,   257, -1003,   846,
     279,  3389, -1003,  5480,  5480,  3449, -1003, -1003,  1003,   410,
    5600,   410, -1003,  1286,  5600,  1286, -1003, -1003,   711, -1003,
   -1003, -1003, -1003, -1003,  4640,  8545,  5540,   704,   721,   724,
     732,   495,  4434,  2505,   122,   729,   737, -1003, -1003, -1003,
   -1003,   140, -1003, -1003,   692, -1003, -1003,  3389,   741,  8379,
   -1003,  8379,  5480, -1003, -1003,  8379,    57,   746,  8126, -1003,
    6338,  8379, -1003,  8379,  8379,  4347,   335, -1003, -1003,  6706,
    6798, -1003, -1003,   990, -1003, -1003, -1003,   767,  6890,   784,
   -1003, -1003,  8379,  5970,    -6,    45,   849, -1003, -1003, -1003,
   -1003,  8379,  8379,   839, -1003, -1003, -1003, -1003,   785, -1003,
     786,  5480,  5480, -1003,  3533, -1003,  2948, -1003, -1003, -1003,
     649,   361, -1003, -1003, -1003, -1003,   410,  1286,  1166,   875,
     796, -1003,   803, -1003,   577, -1003,   276, -1003,   800,   799,
     174,   805,    98,  5480, -1003,  2613,   868,  4640,  3047,  5540,
   -1003,   391, -1003, -1003, -1003, -1003, -1003, -1003,  8379, -1003,
   -1003,  4946, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003,  8379, -1003, -1003,   813, -1003, -1003,  5135,  6982,
   -1003,  5786, -1003,   814, -1003, -1003,  8628, -1003,   -17,     0,
   -1003,   816, -1003,  5480,   822,   827,   551, -1003,   828,   829,
    6890, -1003,   289, -1003,   850, -1003, -1003, -1003, -1003, -1003,
   -1003,  7074, -1003,   833, -1003,   483,   940,   926, -1003, -1003,
   -1003, -1003,   551,   942, -1003, -1003,   835, -1003, -1003, -1003,
     489,   620, -1003, -1003,  3593, -1003,   837,  5480, -1003, -1003,
    4738, -1003, -1003, -1003,  4738,  5540, -1003,  5480, -1003, -1003,
   -1003, -1003,  5540, -1003,   862, -1003, -1003, -1003, -1003, -1003,
      57,   171, -1003,   841,  8379,  8379,  8209,   192,   843, -1003,
     403, -1003,   928,   852,  8379, -1003, -1003, -1003, -1003,   171,
   -1003,  6706,    56,   952, -1003,  5480,  1120,  1381,  5480, -1003,
   -1003, -1003, -1003,  3677,   873, -1003, -1003, -1003,   856,   857,
    5480, -1003,   858,  1120, -1003, -1003, -1003,  5225,   978,     7,
   -1003,   756,   620,   863, -1003,   865, -1003,   277, -1003,   879,
   -1003,  8379,   870, -1003,   878,  5480,   354, -1003, -1003, -1003,
     884, -1003, -1003, -1003,   610, -1003, -1003,   325,  8379, -1003,
    7166,  8379, -1003, -1003,    90, -1003,   334, -1003,   611,   876,
    8379,  7074,   994,   997, -1003,   996, -1003, -1003,    45, -1003,
   -1003,   990,  5480, -1003,   891, -1003, -1003,  2849, -1003,   988,
   -1003, -1003, -1003,    89, -1003, -1003,  1166, -1003, -1003, -1003,
   -1003, -1003, -1003,  8379,   894, -1003,  7793,  5694, -1003,  8379,
    1206,   895, -1003, -1003, -1003, -1003,   989,   656, -1003, -1003,
     985, -1003, -1003, -1003,    47, -1003,   899, -1003,   903,  5480,
     861, -1003,  5480,   756, -1003, -1003,   494, -1003, -1003,  8379,
    5878,   906,   906,   -17, -1003, -1003, -1003,   912, -1003, -1003,
     958,   987,   686, -1003, -1003, -1003, -1003, -1003, -1003,  8711,
   -1003,  7258,  8379, -1003,  8379,   850,   364, -1003, -1003,  1477,
   -1003, -1003, -1003,   913,   837,   171, -1003, -1003,    76, -1003,
     916,  1206, -1003, -1003, -1003,   923, -1003,   894,    26, -1003,
    1023, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,  1050,
    1206,    56, -1003,  5480, -1003,  5480, -1003, -1003,   290,  5480,
    5480, -1003,  3737,  8379,     0,   515,   938,    -2,   366, -1003,
    5480, -1003, -1003, -1003,  7350,   -17,  1061,   549,    43, -1003,
    2083,   285, -1003,  5480,  5480,     0, -1003,   752, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003,   943,   943, -1003, -1003, -1003,
    1011, -1003,   803, -1003, -1003, -1003,  1206, -1003, -1003, -1003,
    1072,  8379,  5480,   945, -1003, -1003,  3245, -1003,   643, -1003,
     275, -1003, -1003,   572, -1003, -1003, -1003,   702, -1003,  2948,
   -1003, -1003,  1166, -1003,   572, -1003,   950,   441, -1003,   954,
   -1003, -1003,   953,   227,  1048,  1034,  1034,   524,   548, -1003,
     956,   266, -1003, -1003,  6154,  1053,  2233,  1166,  7710,  3146,
    4846,  2713, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003,   981, -1003,   450,   531,   980,  1975,  1037, -1003,  5540,
     962,   966,   967,   969,   970, -1003, -1003,   974,   335,   308,
   -1003, -1003,   164, -1003, -1003,    69, -1003,   993, -1003,  8379,
   -1003, -1003,   575, -1003,   159, -1003,   201,  1083, -1003, -1003,
   -1003,  5480,   572, -1003,  1091, -1003, -1003,     0,   594,   620,
    1000, -1003, -1003,  8379,  7442, -1003,  1166, -1003,  1056,  1096,
     949, -1003, -1003,  1166, -1003,  1051, -1003,  1041, -1003, -1003,
   -1003, -1003,  3821, -1003,  3881, -1003, -1003,   779,  5420,  1099,
   -1003, -1003, -1003,  1112,  8296, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003,  1006,   384, -1003, -1003,   760,   971, -1003,  5480,
    3965,  5480, -1003, -1003,  1028,  7877, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003,   813, -1003,   335, -1003,  8379,  7534,
    1105,  8379,  1015,    79,  5480,  3305, -1003,  5480,  4025, -1003,
    5480,  4109, -1003, -1003, -1003,  5480,   572, -1003,   -12,  1019,
   -1003,  1022, -1003, -1003,  1024, -1003, -1003, -1003, -1003, -1003,
   -1003,   524, -1003, -1003,  1031,  1032,  1029,  1029,  1029, -1003,
   -1003, -1003,  5480,  1035, -1003, -1003,   113, -1003, -1003, -1003,
    5480,  1030, -1003,   264, -1003,  1142,  1148,   340, -1003,  1038,
   -1003, -1003, -1003,  8379, -1003,  7626, -1003, -1003,   393, -1003,
    1039,  5480, -1003,  1044, -1003,   813, -1003, -1003, -1003,  1335,
    1046,  1135, -1003, -1003,  1153, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003,   572,  1160, -1003, -1003,
   -1003, -1003,     0,     0,  5480, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003,   518,  5420,  5420,  1150, -1003, -1003, -1003,
   -1003,  4542,  8379,  5045, -1003, -1003, -1003, -1003, -1003,  5480,
   -1003,  4169, -1003, -1003,    42,  1054, -1003,  1166,  1166, -1003,
     335,   585, -1003, -1003, -1003, -1003,   431, -1003,  1060,  6062,
    6062,  6062,     0,  5480, -1003, -1003, -1003, -1003, -1003, -1003,
    1152, -1003, -1003,  1059,   296, -1003, -1003, -1003,   480, -1003,
   -1003, -1003, -1003, -1003, -1003,   813, -1003, -1003,   572, -1003,
   -1003,     0, -1003, -1003,  1169,  7960, -1003,  1173,  1174,  1094,
   -1003, -1003,  4253,  5420, -1003, -1003, -1003, -1003,   598, -1003,
   -1003,  8379,  8379,   286,   248,  8379,  8379,  5276,   329,   338,
     184,  1074, -1003,  1068, -1003, -1003, -1003, -1003,   402, -1003,
     239, -1003, -1003, -1003, -1003,     0, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003,  5480,  5480,  5480,    79,  1076, -1003,    64,
   -1003, -1003, -1003,   480, -1003, -1003, -1003, -1003,  1077,  8296,
   -1003, -1003,  8296,  1073,   182,  1079, -1003, -1003,   803, -1003
d1676 28
a1703 30
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003,  1007, -1003,  1134, -1003,   -82,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,   245,   409,
   -1003, -1003,   658, -1003, -1003,  1118,    72,   411, -1003,   385,
   -1003, -1003,   526,  -144,   -96, -1003,  -108, -1003,   497, -1003,
   -1003,   678,    49,  -341,   523, -1003, -1003,   449, -1003,   674,
   -1003, -1003, -1003, -1003,  -318, -1003,   357,   793,  -149, -1003,
   -1003, -1003, -1003,   268, -1003,   701, -1003,  -465, -1003, -1003,
   -1003, -1003, -1003,    40, -1003, -1003, -1003,    65, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003,   476, -1003,  -156,  -733,
    -991, -1003, -1003,   313, -1003, -1003,   294, -1003, -1003, -1003,
    -971, -1002, -1003, -1003,  -319, -1003, -1003, -1003,  -455,   -10,
    -820, -1003, -1003, -1003, -1003,  -802,  -501, -1003,  -377,   328,
    -334, -1003, -1003, -1003,  -900, -1003, -1003,   907, -1003, -1003,
   -1003,  -322, -1003, -1003, -1003, -1003, -1003,   681, -1003, -1003,
    -418,    -8, -1003,  1146, -1003, -1003, -1003,  -300, -1003, -1003,
   -1003,   160, -1003,  -614,  -600, -1003, -1003,   445,  -272,  -401,
     115, -1003, -1003,  -446, -1003,   378,  -173,  -423,  -587, -1003,
   -1003,  -834,  -602,  -412, -1003, -1003,   617, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
     -32, -1003, -1003, -1003,   -36, -1003, -1003,  -176, -1003,  -953,
    -175, -1003, -1003,   509, -1003, -1003,   104, -1003,   105, -1003,
    -657,  1104,  1017, -1003,  -116, -1003,    66,  -150, -1003,  -835,
    -532,   436,  -157, -1003,  -676,  -255, -1003,  -145, -1003,  -560,
    -148,  -390,  -194,   355,  -681,  -357, -1003,   787,   788,   477,
     791,  -353, -1003, -1003,    14,  1002,  -343, -1003, -1003,   547,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,  1101,
    1107,   654,  -450,   -65, -1003, -1003,  -248,    52, -1003, -1003,
     774, -1003,  -728,  -927,  -487,  -708,  -464,  1221,  -477,  -382,
     -88,  -177,    -9,  -439
d1710 1
a1710 1
#define YYTABLE_NINF -797
d1713 263
a1975 264
      75,    74,    79,   525,   219,   589,   422,   677,   285,   728,
     724,   336,    91,   119,   527,   742,   360,   501,   777,   345,
     203,   714,   294,   838,   839,   376,   379,   728,  1026,   425,
     962,   458,   829,   482,   449,   455,   491,   204,   337,   485,
     945,   196,   967,   861,  1131,   744,   200,   624,   840,   488,
     806,   674,   890,    65,    69,   293,    79,  1121,  -796,   828,
     841,   354,    76,   361,   359,  -796,   670,    79,  1087,   995,
    1068,  -404,    75,    74,  1096,   102,   580,  -796,   664,  -796,
    1001,   437,   283,    78,    87,   364,  1152,   116,    72,    72,
    -632,   560,   146,  -404,   524,   334,   177,    79,   149,   497,
      75,    74,   767,   829,   111,   788,   102,  -419,   451,  -404,
    1171,  -419,  1172,   903,  1184,   561,   945,  1223,   118,   452,
     911,   914,   829,  -613,   927,   284,    88,   912,   155,   684,
     828,  1188,   380,   381,   382,    97,   101,    80,  1045,  1048,
     438,   497,  -419,  1153,   407,   369,   608,   371,   409,   828,
      77,   891,   956,   183,   605,   607,   711,  1168,  1084,   427,
    1077,   116,   340,   130,   132,   725,   743,   101,   116,   441,
     842,   992,   725,   195,   201,  -631,  -404,  -796,   829,   954,
     116,  -796,   773,   725,  -796,  -772,   344,   664,  -796,  1069,
     205,   884,   118,  -772,   442,  1070,  -796,  -411,  -796,   118,
    -796,  1176,  1080,   728,  1238,   828,   610,   365,   885,   828,
     366,   118,  -632,  1227,  1228,  -640,   470,   626,   627,   628,
     527,   498,   499,  -714,   493,  -714,   112,  -714,   956,   298,
     299,   305,   306,   307,   308,   333,  1185,   485,  1261,  1186,
    1077,   485,   722,  1215,   895,  -613,  -631,   488,  -613,   482,
     350,   488,  1170,  1142,   476,   954,   418,  1040,   462,  1046,
    1040,  1037,   444,   498,   499,   725,   500,   410,   564,   445,
     411,   422,   624,   624,  1101,   954,   597,   590,   769,  -411,
     462,   341,  1078,  1079,  -411,  1247,  -411,  1249,   726,   414,
     688,  -411,  -796,  -772,  -772,   726,   -13,  -631,  -631,   569,
    -613,  -298,  -411,  1081,    70,  -411,   726,  -772,  -772,  1290,
    -411,  1313,   993,   443,  -772,  -772,  -772,  1323,  1265,  1266,
    1325,  -772,  -247,  -404,  -475,  -475,   688,  -404,   524,  1009,
     434,    72,  1212,   677,   440,   789,  -411,   522,  1264,   403,
    1293,  1192,   405,   373,  -296,   375,   524,   559,  1010,    77,
    -404,  1290,  1290,  -297,  1166,  -787,    81,   793,  1067,   949,
     803,  -404,  1078,  1307,  -411,   789,     3,   462,  -411,    84,
     728,  1232,   458,   524,  1040,   419,   455,  1246,   420,   463,
     464,   114,   115,   661,  -411,  1133,  -411,  1259,   726,   959,
      86,  1028,   195,   195,  1199,   632,   591,   770,   592,   593,
      94,   467,   464,  1304,   736,   971,  -298,   510,   513,  -787,
    -404,   689,   690,  1321,  1267,   900,   523,  -787,   264,   527,
    -725,   958,   265,  1163,  1165,   548,   527,  1210,  -404,    95,
     414,   808,   809,   266,  1211,   949,   480,   205,   683,  1094,
     477,   829,  1003,  1232,   403,   403,   623,   783,   690,  -296,
     675,   779,   795,   267,   873,  -404,   790,   791,  -297,   950,
    1193,   298,  -787,   298,   707,  1091,  -787,   506,   828,    -2,
     305,   807,   305,   517,   780,   518,   519,   521,   957,   268,
     269,   534,   538,   583,   584,  1248,   874,   791,   913,   464,
     554,   747,    96,   702,   350,   350,  -728,   958,   703,   428,
       1,   429,   625,   570,   571,  1076,  1134,  1135,   763,  1189,
    -728,   430,   661,   609,   584,  1200,  1201,   958,   581,   998,
     129,   728,  1305,   737,  -787,   738,   270,   271,   272,   273,
     678,   800,  -216,  1072,   105,   950,  -728,   -15,   434,   887,
       2,  -728,   274,   275,   871,   693,  -216,   403,   276,   403,
     403,   734,  1018,  1250,   957,  1251,   527,   527,   894,   741,
     612,  1004,   109,  1005,    72,   434,     3,  -728,   848,  1222,
      72,  1050,  -216,  -411,   630,  1051,  1074,  -216,   110,  -411,
    1019,   669,  -787,   534,  1020,   113,  -411,  -411,   538,  1024,
    -787,  -174,  -411,  1223,   834,  -728,  1018,    87,   116,  -728,
    -411,   510,   554,  -216,   720,   953,  1056,   121,   721,  -411,
     922,   713,   584,   699,   973,  -728,   211,  -728,  -728,  -728,
    1018,  -728,  1146,  1148,  1019,  -411,   125,   923,  1020,   118,
     924,  -216,  1031,  1032,   286,  -216,  -411,   908,   909,  -787,
    1091,  1091,   403,  1145,   988,   868,   403,   870,  1019,  -411,
    1194,  -216,  1020,  -216,   527,   199,    72,   989,   459,   836,
     206,   287,   540,   288,   289,   290,   731,   732,   810,  1110,
     542,   623,   623,   990,   817,   177,   548,   833,   836,   493,
     116,   953,   807,   534,    -9,   857,   514,   451,   516,   693,
     677,   207,  -411,  -725,   963,  1075,  -309,   117,   452,   362,
     208,  -631,   177,   548,   178,  -411,    -5,  -725,   179,  1320,
    1327,   118,   691,   792,   178,   180,  1093,   584,   179,  1269,
    1294,  1295,   728,   774,    -9,   180,   209,   625,   625,  1179,
    1180,  1181,   183,  -725,   210,   181,   182,   784,  -725,   786,
     554,   211,   554,   787,   239,   181,   182,   286,   292,   183,
     285,  1100,   699,   699,   286,  1105,   834,   295,  1106,   183,
     116,  -273,   335,  1308,  -725,   339,   503,   920,   504,   403,
     342,   582,  1119,  1119,   287,  -273,   288,   289,   290,   362,
    1115,   287,   363,   288,   289,   290,   693,  1245,   367,   919,
     219,   118,  -725,   372,   146,   135,  -725,   406,   527,   510,
     149,  -273,   415,   136,   137,   412,  -273,   819,   902,   461,
     905,  1306,  -725,  -725,  -725,  -725,  -725,   577,  -725,   579,
     421,   669,   669,   423,   996,   206,   997,   556,   558,   424,
     155,    23,  -273,    25,   851,   853,   138,   435,   436,    31,
     478,   699,   207,   699,   699,   208,   872,  1097,  1099,  1315,
    1316,  1329,    44,   209,   286,   494,   678,   495,    50,    51,
    -273,   139,   140,   502,  -273,   141,   142,   511,   143,   144,
     145,   146,   147,  1235,  1237,   148,    63,   149,    64,   565,
    -273,   287,  -273,   288,   289,   290,  1257,  1258,   550,   150,
     151,   174,   846,   176,   572,   906,   813,   816,  1156,  1158,
     939,   586,  1159,  1161,   153,   574,   154,   155,   575,   156,
     157,   473,   475,    23,  1012,    25,  1016,  1016,  1023,  1023,
     587,    31,  1030,   588,   595,   596,   176,   176,   176,  1119,
    1119,   598,   602,   632,    44,   282,   679,   671,   919,   919,
      50,    51,   681,   977,   286,   176,   176,   682,   685,   686,
    1104,   691,  1243,  1244,   701,   704,   705,   708,    63,   712,
      64,   999,   717,   730,   493,   735,   739,   745,   465,   466,
     757,   287,  -780,   288,   289,   290,   740,   759,   760,   762,
     176,  -563,   176,   176,   176,   765,  -780,   768,  1092,  -712,
    1041,  1044,  1041,  1041,   775,  -563,  1309,  1310,  1311,  1312,
    -169,    23,   776,    25,   781,   794,  -563,   797,  1292,    31,
     798,   703,  -780,   802,   804,   832,  1114,  -780,   811,   830,
     837,  -563,    44,   843,   844,  1130,  -563,   854,    50,    51,
     241,   977,   862,   864,   176,   176,    72,   176,   865,   882,
     886,   539,   540,  -780,   541,   888,    63,  1144,    64,   892,
     542,   176,  -563,   176,   378,   378,   176,   176,   176,   893,
     910,   404,   921,  -411,   970,   543,   544,   545,   242,   176,
     979,  -780,  1002,  1008,  1013,  -780,  1014,   243,  1006,  1035,
    -563,  1027,  1057,  1049,  -563,  1055,  1058,  1059,   135,  1060,
    1061,  -780,  1023,  -780,  1062,  1071,  1082,  1012,  1012,  1012,
    -563,  -563,  -563,  -563,  1086,  -563,  -563,  1041,   244,   478,
    1102,  1103,  1107,   248,   249,   250,   251,   252,   253,  1108,
     977,   977,  1095,  1150,    23,  1122,    25,  1124,  1132,   176,
    1141,  1149,    31,   254,   255,   176,   135,   176,   176,   176,
     259,  1151,  1173,  1174,   176,    44,  1175,   282,   176,   282,
    1010,    50,    51,  1177,  1178,  1183,  1187,  1190,   404,  1191,
     176,  1208,  1195,  1092,  1204,  1202,   404,   404,  1209,    63,
    1207,    64,    23,  1213,    25,  1226,  1229,   138,  1262,   891,
      31,   176,  1252,  1263,  1270,  1196,   176,  1198,  1284,  1285,
    1283,  1286,  1302,    44,  1301,  1326,  1226,  1319,  1322,    50,
      51,  1328,   139,   140,   346,    82,   141,   142,   881,   143,
    1256,  1256,  1256,   678,  1065,   818,   148,    63,    23,    64,
      25,   158,   135,   175,   124,   706,    31,   796,   687,  1023,
     799,   866,   555,   694,   819,   176,   176,   673,   176,    44,
     404,   152,   820,  1233,  1242,    50,    51,  1282,   856,  1036,
    1053,   282,   585,  1291,  1017,   710,   214,   216,    23,   450,
      25,   134,   889,    63,  1206,    64,    31,   176,   974,   404,
    1318,   404,   404,   176,   764,   850,  1216,   368,  1217,    44,
     907,   883,   600,   601,   331,    50,    51,   603,   240,   401,
     332,   748,    83,     0,   241,     0,     0,     0,     0,     0,
     510,     0,   665,    63,  1023,    64,     0,     0,     0,     0,
    1130,     0,   356,  1130,   356,     0,     0,   176,     0,     0,
       0,     0,     0,  1296,  1297,     0,     0,  1298,  1299,     0,
     280,     0,   242,     0,     0,     0,     0,     0,    23,     0,
      25,   243,     0,     0,  1205,   281,    31,     0,     0,     0,
       0,   135,     0,     0,     0,     0,     0,     0,   176,    44,
       0,   176,     0,   819,   404,    50,    51,     0,   404,   176,
       0,   176,   244,   245,   246,   247,   176,   248,   249,   250,
     251,   252,   253,    63,     0,    64,     0,    23,     0,    25,
       0,   394,     0,     0,     0,    31,     0,   254,   255,   408,
       0,   256,   257,   258,   259,     0,     0,     0,    44,   176,
     176,   749,   176,   177,    50,    51,     0,   176,     0,     0,
       0,     0,   -28,     0,   176,   178,     0,   176,     0,     0,
       0,   176,    63,    23,    64,    25,   180,   -28,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,   176,
       0,     0,     0,     0,    44,     0,   181,   182,     0,   460,
      50,    51,     0,     0,     0,   469,     0,   472,   216,   216,
     183,   301,     0,     0,     0,     0,     0,     0,    63,     0,
      64,     0,     0,   177,     0,     0,   176,   877,   479,     0,
     481,   404,   -41,     0,     0,   178,   484,   490,     0,   179,
     378,     0,     0,     0,     0,     0,   180,   565,     0,     0,
       0,   469,     0,     0,   378,     0,   505,     0,     0,     0,
     220,     0,     0,     0,     0,     0,   181,   182,     0,     0,
       0,     0,     0,   176,   847,   878,   176,     0,     0,     0,
     183,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,     0,     0,
       0,     0,     0,     0,     0,   576,   356,     0,   356,     0,
     469,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   378,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   599,     0,   394,
       0,   604,   604,   481,   378,     0,     0,   176,     0,   176,
       0,     0,     0,   176,   176,     0,   176,     0,     0,     0,
       0,     0,     0,     0,   176,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   955,     0,     0,   176,   176,     0,
       0,     0,     0,     0,     0,     0,     0,   680,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     378,     0,     0,     0,   378,     0,   176,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   404,     0,     0,  1000,     0,   716,     0,
       0,   719,     0,     0,   394,     0,     0,     0,   394,   481,
       0,   723,     0,     0,     0,     0,   481,     0,     0,     0,
     955,   378,     0,   404,   404,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,   176,     0,     0,     0,     0,     0,   746,
       0,     0,   750,     0,     0,     0,     0,   756,     0,     0,
       0,     0,     0,     0,   761,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     378,     0,     0,     0,   378,     0,     0,   378,     0,     0,
       0,     0,     0,     0,     0,     0,   176,     0,     0,     0,
       0,   955,   955,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   801,     0,     0,     0,
       0,   394,     0,   176,   176,   176,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   176,   176,
       0,   176,   176,     0,   176,   176,     0,     0,     0,   176,
       0,     0,     0,   845,     0,     0,   356,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   176,     0,     0,     0,
       0,     0,     0,     0,   176,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,     0,   378,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   897,     0,   898,
       0,     0,     0,   901,   756,     0,   756,     0,   176,     0,
       0,     0,     0,     0,   915,     0,     0,     0,   955,   955,
       0,     0,     0,     0,   951,  1234,     0,   960,   961,     0,
       0,     0,     0,   176,     0,   176,   725,     0,     0,     0,
       0,   378,   378,     0,   930,     0,     0,     0,     0,     0,
       0,   931,     0,     0,     0,     0,   978,   176,     0,   136,
     137,     0,     0,     0,     0,     0,     0,   934,     0,   935,
       0,     0,     0,   469,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   138,     0,     0,    31,   176,   955,     0,     0,
     951,     0,     0,   214,     0,     0,     0,     0,    44,     0,
       0,   176,     0,     0,    50,    51,     0,   139,   140,     0,
    1054,   141,   142,   481,   143,   144,   145,   146,   147,     0,
       0,   148,    63,   149,    64,     0,     0,   176,   176,   176,
       0,     0,     0,     0,   725,   150,   151,     0,     0,     0,
       0,     0,   930,     0,     0,  1083,   152,     0,     0,   931,
     153,   932,   154,   155,     0,   156,   157,   136,   137,     0,
       0,   819,   933,     0,     0,   934,     0,   935,     0,   820,
       0,     0,     0,     0,     0,     0,   481,     0,     0,     0,
     936,   951,   951,     0,     0,    23,     0,    25,     0,     0,
     138,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,   937,     0,  1136,  1139,  1140,    44,     0,     0,     0,
       0,     0,    50,    51,     0,   139,   140,     0,     0,   141,
     142,     0,   143,   144,   145,   146,   147,     0,     0,   148,
      63,   938,    64,     0,     0,     0,     0,     0,     0,  1169,
       0,     0,     0,   150,   151,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   939,     0,     0,     0,   153,     0,
     940,   941,     0,   156,   157,     0,  1182,     0,     0,     0,
       0,     0,     0,     0,  1054,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   725,     0,     0,     0,     0,     0,
       0,     0,   930,     0,     0,  1203,     0,     0,     0,   931,
       0,   932,     0,     0,     0,     0,     0,   136,   137,     0,
       0,   819,   933,     0,     0,   934,     0,   935,     0,   820,
       0,     0,     0,     0,     0,     0,     0,     0,  1218,     0,
       0,     0,     0,     0,     0,    23,     0,    25,   951,   951,
     138,     0,     0,    31,     0,   951,     0,     0,     0,     0,
       0,   937,     0,  1239,     0,  1241,    44,     0,     0,     0,
       0,     0,    50,    51,     0,   139,   140,     0,     0,   141,
     142,     0,   143,   144,   145,   146,   147,  1260,     0,   148,
      63,   938,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   939,     0,     0,     0,   153,     0,
     940,   941,     0,   156,   157,     0,     0,   951,     0,     0,
       0,     0,     0,    12,     0,   309,     0,     0,     0,   310,
       0,  1300,     0,     0,     0,     0,     0,     0,   311,     0,
     312,     0,     0,     0,   313,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1314,    13,    14,
      15,    16,    17,    18,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,     0,     0,     0,     0,
       0,    60,    61,    62,    63,     0,    64,     0,     0,     0,
       0,   116,   314,   315,   316,   317,   318,   319,   320,   250,
     251,   252,   253,   270,   271,   272,   273,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,   325,   118,   326,   327,   328,   489,     0,     0,     0,
       0,    12,     0,     0,     0,     0,   384,     0,     0,     0,
       0,   135,     0,     0,     0,     0,     0,     0,     0,   136,
     137,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
      17,    18,    19,     0,    20,    21,    22,    23,    24,    25,
      26,    27,   385,    29,    30,    31,    32,    33,    34,   386,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,   387,   388,    55,
      56,   389,   390,    59,   143,   144,   145,   146,   147,    60,
      61,   391,    63,   149,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   150,   151,     0,     0,    12,
       0,     0,     0,     0,   384,     0,   392,     0,     0,   135,
     393,   215,   154,   155,     0,   156,   157,   136,   137,     0,
d1977 12
d1991 1
a1991 1
     385,    29,    30,    31,    32,    33,    34,    35,    36,    37,
d1993 20
a2012 6
      48,    49,    50,    51,    52,   387,   388,    55,    56,   389,
     390,    59,   143,   144,   145,   146,   147,    60,    61,   391,
      63,   149,    64,     0,     0,     0,     0,     0,     0,    12,
       0,     0,     0,   150,   151,     0,     0,     0,     0,   135,
       0,   932,     0,     0,   392,     0,     0,     0,   393,  -788,
     154,   155,   933,   156,   157,     0,     0,     0,     0,     0,
d2015 1
a2015 1
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
d2017 6
a2022 9
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,     0,     0,     0,     0,     0,    60,    61,    62,
      63,     0,  1047,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     383,     0,     0,     0,     0,    12,     0,     0,     0,     0,
     384,     0,     0,     0,     0,   135,     0,     0,     0,     0,
       0,     0,     0,   136,   137,     0,     0,     0,     0,     0,
d2025 2
a2026 2
      22,    23,    24,    25,    26,    27,   385,    29,    30,    31,
      32,    33,    34,   386,    36,    37,    38,    39,    40,    41,
d2028 5
a2032 25
      52,   387,   388,    55,    56,   389,   390,    59,   143,   144,
     145,   146,   147,    60,    61,   391,    63,   149,    64,   468,
       0,     0,     0,     0,    12,     0,     0,     0,     0,   150,
     151,     0,     0,     0,   135,     0,     0,     0,     0,     0,
     392,     0,   136,   137,   393,     0,   154,   155,     0,   156,
     157,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,   385,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
     387,   388,    55,    56,   389,   390,    59,   143,   144,   145,
     146,   147,    60,    61,   391,    63,   149,    64,   606,     0,
       0,     0,     0,    12,     0,     0,     0,     0,   150,   151,
       0,     0,     0,   135,     0,     0,     0,     0,     0,   152,
       0,   136,   137,   153,     0,   154,   155,     0,   156,   157,
       0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
      15,    16,    17,    18,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,   385,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,   387,
     388,    55,    56,   389,   390,    59,   143,   144,   145,   146,
     147,    60,    61,   391,    63,   149,    64,  1042,     0,     0,
       0,     0,    12,     0,     0,     0,     0,   150,   151,     0,
       0,     0,   135,     0,     0,     0,     0,     0,   152,     0,
     136,   137,   153,     0,   154,   155,     0,   156,   157,     0,
d2035 1
a2035 1
      25,    26,    27,   385,    29,    30,    31,    32,    33,    34,
d2037 61
a2097 81
      45,    46,    47,    48,    49,    50,    51,    52,   387,   388,
      55,    56,   389,   390,    59,   143,   144,   145,   146,   147,
      60,    61,   391,    63,   149,    64,   980,     0,     0,     0,
       0,     0,  -461,     0,     0,     0,   150,   151,     0,     0,
    -461,   135,     0,     0,     0,     0,     0,   152,     0,   136,
     137,   153,     0,   154,   155,     0,   156,   157,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   138,     0,     0,    31,  1157,     0,     0,  -461,
       0,     0,  -788,     0,     0,     0,     0,     0,    44,     0,
    -788,   135,     0,     0,    50,    51,     0,   139,   140,   136,
     137,   141,   142,     0,   143,   144,   145,   146,   147,     0,
       0,   148,    63,   149,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,    23,     0,    25,
       0,     0,   138,     0,     0,    31,   152,     0,     0,  -788,
     153,     0,   154,   155,     0,   156,   157,     0,    44,     0,
       0,     0,     0,     0,    50,    51,     0,   139,   140,     0,
     468,   141,   142,     0,   143,   144,   145,   146,   147,     0,
       0,   148,    63,   149,    64,   135,     0,     0,     0,     0,
       0,     0,     0,   136,   137,   150,   151,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   152,     0,     0,     0,
     153,     0,   154,   155,     0,   156,   157,     0,     0,     0,
       0,    23,     0,    25,     0,     0,   138,     0,     0,    31,
     474,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,     0,     0,   135,     0,     0,    50,    51,
       0,   139,   140,   136,   137,   141,   142,     0,   143,   144,
     145,   146,   147,     0,     0,   148,    63,   149,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,    23,     0,    25,     0,     0,   138,     0,     0,    31,
     152,     0,     0,     0,   153,     0,   154,   155,     0,   156,
     157,     0,    44,     0,     0,     0,     0,     0,    50,    51,
       0,   139,   140,     0,   578,   141,   142,     0,   143,   144,
     145,   146,   147,     0,     0,   148,    63,   149,    64,   135,
       0,     0,     0,     0,     0,     0,     0,   136,   137,   150,
     151,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     152,     0,     0,     0,   153,     0,   154,   155,     0,   156,
     157,     0,     0,     0,     0,    23,     0,    25,     0,     0,
     138,     0,     0,    31,   715,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,     0,   135,
       0,     0,    50,    51,     0,   139,   140,   136,   137,   141,
     142,     0,   143,   144,   145,   146,   147,     0,     0,   148,
      63,   149,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,    23,     0,    25,     0,     0,
     138,     0,     0,    31,   152,     0,     0,     0,   153,     0,
     154,   155,     0,   156,   157,     0,    44,     0,     0,     0,
       0,     0,    50,    51,     0,   139,   140,     0,   753,   141,
     142,     0,   143,   144,   145,   146,   147,     0,     0,   148,
      63,   149,    64,   135,     0,     0,     0,     0,     0,     0,
       0,   136,   137,   150,   151,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   152,     0,     0,     0,   153,     0,
     154,   155,     0,   156,   157,     0,     0,     0,     0,    23,
       0,    25,     0,     0,   138,     0,     0,    31,   904,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,   135,     0,     0,    50,    51,     0,   139,
     140,   136,   137,   141,   142,     0,   143,   144,   145,   146,
     147,     0,     0,   148,    63,   149,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   150,   151,    23,
       0,    25,     0,     0,   138,     0,     0,    31,   152,     0,
       0,     0,   153,     0,   154,   155,     0,   156,   157,     0,
      44,     0,     0,     0,     0,     0,    50,    51,     0,   139,
     140,     0,  1109,   141,   142,     0,   143,   144,   145,   146,
     147,     0,     0,   148,    63,   149,    64,   135,     0,     0,
       0,     0,     0,     0,     0,   136,   137,   150,   151,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   152,     0,
       0,     0,   153,     0,   154,   155,     0,   156,   157,     0,
       0,     0,     0,    23,     0,    25,     0,     0,   138,     0,
       0,    31,  1111,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,  -159,     0,     0,
      50,    51,     0,   139,   140,  -159,  -159,   141,   142,     0,
     143,   144,   145,   146,   147,     0,     0,   148,    63,   149,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   150,   151,  -159,     0,  -159,     0,     0,  -159,     0,
       0,  -159,   392,     0,     0,     0,   393,     0,   154,   155,
       0,   156,   157,     0,  -159,     0,     0,     0,     0,     0,
    -159,  -159,     0,  -159,  -159,     0,  1137,  -159,  -159,     0,
    -159,  -159,  -159,  -159,  -159,     0,     0,  -159,  -159,  -159,
    -159,   135,     0,     0,     0,     0,     0,     0,     0,   136,
     137,  -159,  -159,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -159,     0,     0,     0,  -159,     0,  -159,  -159,
       0,  -159,  -159,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   138,     0,     0,    31,  1160,     0,     0,     0,
d2099 32
a2130 28
       0,   135,     0,     0,    50,    51,     0,   139,   140,   136,
     137,   141,   142,     0,   143,   144,   145,   146,   147,     0,
       0,   148,    63,   149,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,    23,     0,    25,
       0,     0,   138,     0,     0,    31,   152,     0,     0,     0,
     153,     0,   154,   155,     0,   156,   157,     0,    44,     0,
       0,     0,     0,     0,    50,    51,     0,   139,   140,     0,
    1164,   141,   142,     0,   143,   144,   145,   146,   147,     0,
       0,   148,    63,   149,    64,   135,     0,     0,     0,     0,
       0,     0,     0,   136,   137,   150,   151,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   152,     0,     0,     0,
     153,     0,   154,   155,     0,   156,   157,     0,     0,     0,
       0,    23,     0,    25,     0,     0,   138,     0,     0,    31,
    1240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,     0,     0,   135,     0,     0,    50,    51,
       0,   139,   140,   136,   137,   141,   142,     0,   143,   144,
     145,   146,   147,     0,     0,   148,    63,   149,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,    23,     0,    25,     0,     0,   138,     0,     0,    31,
     152,     0,     0,     0,   153,     0,   154,   155,     0,   156,
     157,     0,    44,     0,     0,     0,     0,     0,    50,    51,
       0,   139,   140,     0,  1287,   141,   142,     0,   143,   144,
     145,   146,   147,     0,     0,   148,    63,   149,    64,   135,
       0,     0,     0,     0,     0,     0,     0,   136,   137,   150,
     151,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     152,     0,     0,     0,   153,     0,   154,   155,     0,   156,
     157,     0,     0,     0,     0,    23,     0,    25,     0,     0,
     138,     0,     0,    31,     0,     0,     0,     0,     0,     0,
d2132 49
a2180 25
       0,     0,    50,    51,     0,   139,   140,     0,     0,   141,
     142,     0,   143,   144,   145,   146,   147,     0,     0,   148,
      63,   149,    64,    12,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   152,     0,     0,     0,   153,     0,
     154,   155,     0,   156,   157,     0,     0,     0,    13,    14,
      15,    16,    17,    18,    19,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,     0,     0,     0,     0,
      12,    60,    61,    62,    63,     0,    64,     0,     0,     0,
     135,   116,     0,     0,     0,     0,     0,     0,   136,   137,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,    17,
      18,    19,   118,    20,    21,    22,    23,    24,    25,    26,
      27,   385,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,   387,   388,    55,    56,
     389,   390,    59,   143,   144,   145,   146,   147,    60,    61,
     391,    63,   149,    64,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,   151,     0,     0,    12,     0,
       0,     0,     0,     0,     0,   392,   483,     0,   135,   393,
       0,   154,   155,     0,   156,   157,   136,   137,     0,     0,
     819,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2182 1
a2182 1
       0,    20,    21,    22,    23,    24,    25,    26,    27,   385,
d2185 26
a2210 6
      49,    50,    51,    52,   387,   388,    55,    56,   389,   390,
      59,   143,   144,   145,   146,   147,    60,    61,   391,    63,
     149,    64,     0,     0,     0,     0,    12,     0,     0,     0,
       0,     0,   150,   151,     0,     0,   135,     0,     0,     0,
       0,     0,     0,   939,   136,   137,     0,   153,     0,   154,
     155,     0,   156,   157,     0,     0,     0,     0,     0,     0,
d2212 1
a2212 1
      21,    22,    23,    24,    25,    26,    27,   385,    29,    30,
d2215 8
a2222 8
      51,    52,   387,   388,    55,    56,   389,   390,    59,   143,
     144,   145,   146,   147,    60,    61,   391,    63,   149,    64,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
     150,   151,     0,     0,   135,     0,     0,     0,     0,     0,
       0,   152,   136,   137,     0,   153,     0,   154,   155,     0,
     156,   157,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,   385,    29,    30,    31,    32,
d2225 4
a2228 25
     387,   388,    55,    56,   389,   390,    59,   143,   144,   145,
     146,   147,    60,    61,   391,    63,   149,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,   151,
       0,     0,    12,     0,     0,     0,     0,     0,     0,   392,
       0,     0,   135,   393,   932,   154,   155,     0,   156,   157,
     136,   137,     0,     0,     0,   933,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,   385,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,   387,   388,
      55,    56,   389,   390,    59,   143,   144,   145,   146,   147,
      60,    61,   391,    63,   149,    64,     0,   613,     0,     0,
       0,     0,    12,     0,     0,     0,   150,   151,     0,     0,
       0,     0,     0,     0,   614,     0,     0,   152,     0,     0,
       0,   153,     0,   154,   155,   615,     0,     0,     0,     0,
       0,     0,     0,     0,  -796,     0,     0,    13,    14,    15,
      16,    17,    18,    19,   616,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,     0,     0,     0,     0,     0,
      60,    61,    62,   617,     0,    64,  1236,     0,     0,   618,
       0,    12,     0,     0,     0,     0,  -236,     0,     0,     0,
    -788,     0,     0,     0,     0,     0,     0,     0,   619,     0,
d2235 28
a2262 29
      56,    57,    58,    59,     0,     0,     0,     0,     0,    60,
      61,    62,    63,   634,    64,   335,   635,     0,     0,     0,
       0,   135,   636,     0,   637,   638,     0,     0,     0,     0,
     639,     0,   640,     0,     0,     0,     0,  -788,   641,     0,
       0,     0,     0,     0,   642,   643,     0,     0,     0,     0,
     644,     0,     0,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   138,     0,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,   645,   646,     0,     0,    44,   647,
       0,     0,     0,     0,    50,    51,     0,   139,   140,   648,
     649,   141,   142,   650,   143,   301,     0,     0,     0,   651,
     652,   148,    63,   634,    64,   335,   635,     0,     0,     0,
       0,   135,   636,     0,   637,   638,     0,     0,     0,     0,
     639,     0,   640,     0,     0,     0,   152,     0,   641,     0,
       0,     0,   653,     0,   642,   643,     0,     0,     0,     0,
     644,     0,     0,     0,     0,     0,     0,    23,     0,    25,
       0,     0,   138,     0,     0,    31,     0,     0,     0,     0,
       0,  -294,   135,     0,   645,   646,     0,     0,    44,   647,
     136,   137,     0,     0,    50,    51,     0,   139,   140,   648,
     649,   141,   142,   650,   143,     0,     0,     0,     0,   651,
     652,   148,    63,     0,    64,     0,     0,     0,    23,     0,
      25,     0,     0,   138,     0,     0,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   152,     0,     0,    44,
       0,     0,   653,     0,     0,    50,    51,     0,   139,   140,
       0,     0,   141,   142,     0,   143,   144,   145,   146,   147,
       0,     0,   148,    63,   149,    64,   135,     0,     0,     0,
       0,     0,     0,     0,   136,   137,   150,   151,     0,     0,
       0,     0,     0,     0,     0,     0,  -294,   152,     0,     0,
       0,   153,     0,   154,   155,     0,   156,   157,     0,     0,
       0,     0,    23,     0,    25,     0,     0,   138,     0,     0,
d2264 112
a2375 32
       0,     0,     0,    44,     0,     0,   135,     0,     0,    50,
      51,     0,   139,   140,   136,   137,   141,   142,   819,   143,
     144,   145,   146,   147,     0,     0,   148,    63,   149,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,    23,     0,    25,     0,     0,   138,     0,     0,
      31,   152,     0,     0,     0,   153,   215,   154,   155,     0,
     156,   157,     0,    44,     0,     0,   135,     0,     0,    50,
      51,     0,   139,   140,   136,   137,   141,   142,     0,   143,
     144,   145,   146,   147,     0,     0,   148,    63,   149,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,    23,     0,    25,     0,     0,   138,     0,     0,
      31,   939,     0,     0,     0,   153,     0,   154,   155,     0,
     156,   157,     0,    44,     0,     0,   135,     0,     0,    50,
      51,     0,   139,   140,   136,   137,   141,   142,     0,   143,
     144,   145,   146,   147,     0,     0,   148,    63,   149,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,    23,     0,    25,     0,     0,   138,     0,     0,
      31,   152,     0,     0,     0,   153,     0,   154,   155,     0,
     156,   157,     0,    44,     0,     0,   135,     0,     0,    50,
      51,     0,   139,   140,   136,   137,   141,   142,     0,   143,
     144,   145,   146,   147,     0,     0,   148,    63,   149,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,    23,     0,    25,     0,     0,   138,     0,     0,
      31,   392,     0,     0,     0,   393,     0,   154,   155,     0,
     156,   157,     0,    44,     0,     0,     0,     0,     0,    50,
      51,     0,   139,   140,     0,     0,   141,   142,     0,   143,
     144,   145,   146,   147,     0,   814,   148,    63,   149,    64,
      12,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,   614,     0,     0,     0,     0,     0,     0,     0,
       0,   152,     0,   615,     0,   153,     0,   154,   155,     0,
       0,     0,  -796,     0,     0,    13,    14,    15,    16,    17,
      18,    19,   616,    20,    21,    22,    23,    24,    25,    26,
d2379 2
a2380 48
      57,    58,    59,     0,     0,     0,     0,   530,    60,    61,
      62,   617,    12,    64,     0,     0,  -129,   815,     0,     0,
       0,  -129,     0,     0,  -129,     0,     0,     0,  -129,     0,
       0,     0,     0,     0,     0,  -129,  -129,     0,     0,     0,
       0,     0,  -129,     0,  -129,     0,     0,    13,    14,    15,
      16,    17,    18,    19,  -129,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,     0,     0,     0,     0,   852,
      60,    61,    62,    63,    12,    64,     0,     0,  -128,     0,
       0,     0,     0,  -128,     0,     0,  -128,     0,     0,     0,
    -128,     0,     0,     0,     0,     0,     0,  -128,  -128,     0,
       0,     0,     0,     0,  -128,     0,  -128,     0,     0,    13,
      14,    15,    16,    17,    18,    19,  -128,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,     0,     0,     0,
       0,   557,    60,    61,    62,    63,    12,    64,     0,     0,
       0,     0,     0,     0,     0,   -75,     0,     0,   -75,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -75,
       0,     0,     0,     0,     0,     0,   -75,     0,   -75,     0,
       0,    13,    14,    15,    16,    17,    18,    19,   -75,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,     0,
       0,     0,     0,  1253,    60,    61,    62,    63,  -796,    64,
       0,     0,     0,     0,     0,     0,     0,  -796,     0,     0,
    -796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -796,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -796,  -796,  -796,  -796,  -796,  -796,  -796,
       0,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,
    -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,
    -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,
    -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,  -796,
    -796,     0,     0,     0,     0,  1033,  -796,  -796,  -796,  -796,
    -219,  -796,     0,     0,     0,  -219,     0,     0,     0,  -219,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -219,  -219,  -219,  -219,  -219,
    -219,  -219,     0,  -219,  -219,  -219,  -219,  -219,  -219,  -219,
    -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,
    -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,
    -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,
    -219,  -219,  -219,     0,     0,     0,     0,   300,  -219,  -219,
    -219,  -219,    12,  -219,     0,     0,     0,     0,     0,     0,
d2383 7
a2389 7
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,     0,   301,     0,     0,   515,
      60,    61,    62,    63,    12,    64,     0,     0,     0,     0,
d2392 7
a2398 7
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,     0,   301,     0,
       0,    11,    60,    61,    62,    63,    12,    64,     0,     0,
d2401 7
a2408 6
       0,    13,    14,    15,    16,    17,    18,    19,     0,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,     0,
       0,     0,     0,   131,    60,    61,    62,    63,    12,    64,
d2410 7
d2419 7
a2425 7
       0,     0,     0,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,     0,     0,     0,     0,   347,    60,    61,    62,    63,
      12,    64,     0,     0,     0,     0,     0,     0,     0,     0,
d2433 2
a2434 2
      57,    58,    59,     0,     0,     0,     0,   530,    60,    61,
      62,    63,    12,    64,     0,     0,     0,     0,     0,     0,
d2437 7
a2443 7
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,     0,     0,     0,     0,   535,
      60,    61,    62,    63,    12,    64,     0,     0,     0,     0,
d2446 7
a2452 7
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,     0,     0,     0,
       0,   551,    60,    61,    62,    63,    12,    64,     0,     0,
d2455 7
a2462 6
       0,    13,    14,    15,    16,    17,    18,    19,     0,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,     0,
       0,     0,     0,   666,    60,    61,    62,    63,    12,    64,
d2464 7
d2473 7
a2479 7
       0,     0,     0,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,     0,     0,     0,     0,   695,    60,    61,    62,    63,
      12,    64,     0,     0,     0,     0,     0,     0,     0,     0,
d2487 2
a2488 2
      57,    58,    59,     0,     0,     0,     0,   785,    60,    61,
      62,   617,    12,    64,     0,     0,     0,     0,     0,     0,
d2491 8
d2500 1
a2500 1
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
d2504 3
a2506 4
      55,    56,    57,    58,    59,     0,     0,     0,     0,   869,
      60,    61,    62,    63,    12,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2508 1
a2508 1
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
d2512 3
a2514 4
      53,    54,    55,    56,    57,    58,    59,     0,     0,     0,
       0,   916,    60,    61,    62,   617,    12,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2520 6
a2525 7
      51,    52,    53,    54,    55,    56,    57,    58,    59,     0,
       0,     0,     0,  1098,    60,    61,    62,    63,    12,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
d2527 3
a2529 4
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,     0,     0,     0,     0,  1147,    60,    61,    62,    63,
      12,    64,     0,     0,     0,     0,     0,     0,     0,     0,
d2533 1
a2533 1
      18,    19,     0,    20,    21,    22,    23,    24,    25,    26,
d2537 2
a2538 3
      57,    58,    59,     0,     0,     0,     0,  1197,    60,    61,
      62,    63,    12,    64,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2545 11
a2555 3
      55,    56,    57,    58,    59,     0,    12,     0,     0,     0,
      60,    61,    62,    63,     0,    64,   135,     0,   932,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   933,
a2556 8
       0,    13,    14,    15,    16,    17,    18,    19,  -790,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    12,
       0,     0,     0,     0,    60,    61,    62,    63,     0,    64,
       0,   614,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   615,     0,     0,     0,     0,     0,     0,     0,
d2558 1
a2558 1
      19,   616,    20,    21,    22,    23,    24,    25,    26,    27,
d2562 11
a2572 3
      58,    59,     0,    12,     0,     0,     0,    60,    61,    62,
     617,     0,    64,   135,     0,   932,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   933,     0,     0,     0,
d2578 2
a2579 3
      54,    55,    56,    57,    58,    59,    12,     0,     0,     0,
       0,    60,    61,    62,    63,     0,    64,     0,  1271,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1272,
d2581 7
a2587 73
       0,    13,  1273,    15,    16,    17,  1274,    19,     0,  1275,
    1276,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,  1277,    45,    46,    47,    48,    49,  1278,
    1279,    52,    53,    54,    55,    56,    57,    58,    59,    12,
       0,     0,     0,     0,    60,    61,    62,  1280,     0,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,    16,    17,    18,
      19,    98,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    12,     0,     0,     0,     0,    60,    61,    62,
      63,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    12,   301,     0,     0,     0,
      60,    61,    62,    63,     0,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   733,     0,     0,
      13,    14,    15,    16,    17,    18,    19,     0,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,     0,     0,
       0,     0,    12,    60,    61,    62,    63,  -796,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,    17,    18,    19,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    12,     0,     0,     0,     0,
      60,    61,    62,    63,     0,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,    14,    15,    16,    17,    18,    19,     0,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    12,     0,
       0,     0,     0,    60,    61,    62,    63,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,    14,    15,    16,    17,    18,    19,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    12,     0,     0,     0,     0,    60,    61,    62,    63,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
      17,    18,    19,     0,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    12,     0,     0,     0,     0,    60,
      61,    62,    63,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    12,     0,     0,
       0,     0,    60,    61,    62,    63,     0,    64,     0,     0,
d2594 2
a2595 3
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
       0,     0,     0,     0,     0,    60,    61,    62,   617,     0,
      64
d2612 4
a2615 2
       0,     0,     0,     0,     0,     0,     0,     0,   171,     0,
     103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a2616 2
       0,     0,     0,     0,     0,     0,     0,   173,     0,     0,
       0,     0,     0,    39,     0,     0,     0,     0,     0,     0,
d2621 1
d2626 1
a2626 1
       0,     0,   105,     0,     0,     0,     0,     0,     0,     0,
a2628 1
       0,     0,     0,     0,     0,    41,     0,     0,    43,     0,
d2633 2
a2634 2
       0,     0,     0,     0,     0,     0,     0,    71,     0,     0,
      73,     0,     0,     0,     0,     0,     0,     0,     0,     0,
d2637 1
d2642 1
a2644 1
       0,   125,     0,     0,     0,     0,     0,     0,     0,     0,
a2653 1
       0,     0,     0,     0,     0,     0,    25,     0,     0,     0,
d2660 2
a2661 1
       0,     0,     0,     0,   165,     0,     0,     0,     0,   167,
d2663 2
a2665 1
       0,   119,     0,   169,     0,     0,     0,     0,     0,     0,
a2666 2
     121,     0,     0,     0,     0,    27,    29,    31,    33,    35,
       0,    37,     0,     0,     0,     0,     0,   123,     0,     0,
a2672 1
       0,     0,     0,    45,     0,     0,     0,     0,     0,    67,
d2680 1
a2680 1
       0,    65,     0,     0,     0,     0,     0,     0,     0,     0,
d2683 5
a2688 2
       0,     0,    47,    49,    51,    53,    55,     0,    57,     0,
       0,     0,     0,     0,     0,    17,     0,     0,     0,     0,
a2689 2
       0,     0,    19,     0,     0,    21,     0,     0,     0,     0,
       0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
d2691 2
d2706 1
a2706 1
     101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
a2715 1
       0,   159,     0,     0,     0,   161,     0,     0,     0,   163,
d2717 2
a2873 1
       0,     0,     0,     0,     0,     0,     0,    75,     0,     0,
d2906 1
a3185 1
       0,     0,    77,     0,     0,     0,     0,     0,     0,     0,
a3188 2
       0,     0,     0,     0,     0,    79,    81,     0,     0,     0,
       0,    83,     0,     0,    85,     0,     0,     0,     0,    87,
a3191 1
       0,     0,     0,     0,   107,     0,     0,     0,     0,     0,
a3194 3
       0,     0,     0,     0,     0,     0,     0,   109,   111,     0,
       0,     0,     0,   113,     0,     0,   115,     0,     0,     0,
       0,   117,     0,     0,     0,     0,     0,     0,     0,     0,
a3196 1
       0,     0,     0,     0,     0,     0,    59,     0,     0,     0,
d3199 1
a3201 2
       0,     0,     0,     0,     0,     0,    61,     0,     0,     0,
       0,     0,     0,    63,     0,     0,     0,     0,     0,     0,
d3203 2
d3208 1
d3212 2
d3217 1
d3222 1
a3379 6
       0,     0,     0,   127,   129,     0,     0,     0,     0,     0,
       0,     0,   131,     0,   133,     0,     0,     0,     0,   135,
     137,     0,     0,     0,     0,   139,   141,     0,     0,   143,
     145,     0,     0,   147,   149,     0,     0,     0,     0,   151,
     153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   155,     0,   157,
d3390 5
d3396 1
a3455 2
       0,     1,     3,     0,     0,     0,     0,     5,     0,     0,
       7,     0,     0,     0,     0,     9,     0,     0,     0,     0,
d3457 2
a3462 2
       0,     0,     0,     0,     0,     0,    11,     0,     0,     0,
       0,    13,     0,     0,     0,     0,     0,     0,     0,     0,
d3464 2
a3465 1
       0,     0,     0,     0,     0,     0,     0,    15,     0,     0,
d3467 1
a3467 1
       0,     0,     0,     0,    89,     0,     0,     0,     0,     0,
d3469 1
a3471 3
       0,     0,     0,     0,     0,     0,     0,    91,    93,     0,
       0,     0,     0,    95,     0,     0,    97,     0,     0,     0,
       0,    99,     0,     0,     0,     0,     0,     0,     0,     0,
d3473 3
d3486 1
a3486 1
       0
d3494 7
a3500 7
       0,   753,     0,   753,     0,   753,     0,   731,     0,   732,
       0,   735,     0,   733,     0,   796,     0,   796,     0,   728,
       0,   796,     0,   796,     0,   796,     0,   796,     0,   631,
       0,   631,     0,   631,     0,   771,     0,   771,     0,   771,
       0,   771,     0,   771,     0,   771,     0,   771,     0,    75,
       0,    75,     0,    75,     0,   531,     0,   613,     0,   639,
       0,   639,     0,   639,     0,   788,     0,   129,     0,   129,
d3503 8
a3510 8
       0,   172,     0,   640,     0,   640,     0,   128,     0,   128,
       0,   128,     0,   128,     0,   128,     0,   128,     0,   177,
       0,   174,     0,   177,     0,   599,     0,   541,     0,   541,
       0,   541,     0,   541,     0,   541,     0,   541,     0,   541,
       0,   541,     0,   541,     0,   541,     0,   541,     0,   541,
       0,   541,     0,   541,     0,   541,     0,   541,     0,   771,
       0,   771,     0,   771,     0,   146,     0,   146,     0,   146,
       0,   142,     0,   142,     0
d3515 152
a3666 211
       9,     9,    11,   426,   154,   482,   306,   539,   165,   611,
     610,   184,    77,   101,   426,   629,   210,   407,   675,   196,
     128,   581,   172,   751,   752,   280,   281,   629,   928,   329,
     865,   353,   740,   386,   352,   353,   393,   133,   187,   392,
     860,   123,   876,   776,  1035,   632,     1,   511,     1,   392,
     726,   538,    26,     1,     2,   171,    65,  1028,     1,   740,
      13,   206,    10,   211,   209,     1,   531,    76,   995,   903,
       1,    15,    81,    81,  1001,    84,   466,     1,   528,    15,
     914,    62,    66,    11,    55,     1,     7,   104,    46,    46,
       1,    97,    92,    37,    38,   183,     6,   106,    98,     1,
     109,   109,   662,   811,     1,    15,   115,   100,    18,    53,
     122,   104,   124,   841,     1,   121,   936,    75,   135,    29,
     122,   849,   830,     1,   857,   109,    97,   129,   128,   547,
     811,  1122,   282,   283,   284,    83,    84,    65,   940,   941,
     121,     1,   135,    64,   292,   261,   499,   263,     1,   830,
     121,   125,   860,    63,   497,   498,   574,  1084,   992,   336,
       1,   104,     1,   111,   112,     1,   631,   115,   104,   346,
     123,   899,     1,   121,   129,     1,   120,   120,   886,   860,
     104,   124,   669,     1,   120,     1,   195,   637,   124,   120,
     138,   805,   135,     1,     1,   126,   120,    15,   122,   135,
     124,  1101,     1,   805,  1195,   886,   506,   123,   808,   890,
     126,   135,   123,  1184,  1185,   126,   361,   517,   518,   519,
     632,   123,   124,   120,   102,   122,   123,   124,   936,   177,
     178,   179,   180,   181,   182,   183,   123,   590,  1229,   126,
       1,   594,   595,  1170,   831,   123,   124,   590,   126,   602,
     198,   594,  1086,  1055,   370,   936,     1,   938,     1,   940,
     941,   937,   350,   123,   124,     1,   126,   120,   445,   351,
     123,   571,   736,   737,  1007,   956,   102,     1,     1,    15,
       1,   120,   123,   124,   120,  1212,   122,  1214,   124,   298,
       1,   120,    26,   101,   102,   124,    97,   123,   124,   448,
     126,    15,   120,   102,     0,    41,   124,   123,   124,  1262,
      46,  1302,    37,   120,   122,   123,   124,  1319,  1245,  1246,
    1322,   129,    26,    15,   123,   124,     1,    37,    38,   102,
     339,    46,  1166,   865,   343,     1,    72,   425,  1238,   287,
    1267,     1,   290,   277,    15,   279,    38,   443,   121,   121,
      15,  1304,  1305,    15,  1082,    15,   120,   698,   972,   860,
     717,    53,   123,   124,   100,     1,    97,     1,   104,   121,
     972,  1191,   694,    38,  1055,   120,   694,  1211,   123,   122,
     123,   122,   123,   528,   120,     1,   122,  1222,   124,   104,
     120,   125,   340,   341,     1,   120,   120,   120,   122,   123,
     120,   122,   123,     1,     1,   882,   120,   416,   417,     7,
     120,   122,   123,  1313,  1248,   838,   425,    15,     8,   831,
     124,   860,    12,  1080,  1081,   433,   838,  1155,   120,   120,
     439,   731,   732,    23,  1162,   936,   384,   385,   546,   999,
     374,  1149,     1,  1263,   392,   393,   511,   122,   123,   120,
     538,    97,   700,    43,   795,   120,   122,   123,   120,   860,
     120,   409,   122,   411,   572,   997,    64,   415,  1149,     0,
     418,   726,   420,   421,   120,   423,   424,   425,   860,    69,
      70,   429,   430,   122,   123,  1213,   122,   123,   122,   123,
     438,   636,    81,    10,   442,   443,     1,   936,    15,    36,
      31,    38,   511,   451,   452,   982,   122,   123,   653,  1123,
      15,    48,   657,   122,   123,   122,   123,   956,   466,   909,
     109,  1123,   120,   120,   122,   122,   116,   117,   118,   119,
     539,   708,     1,   979,   120,   936,    41,    97,   547,   811,
      71,    46,   132,   133,   792,   554,    15,   495,   138,   497,
     498,   616,    72,   122,   936,   124,   968,   969,   830,   624,
     508,   120,   120,   122,    46,   574,    97,    72,   762,    51,
      46,   121,    41,     1,   522,   125,     1,    46,   122,     7,
     100,   529,     7,   531,   104,    97,     1,    15,   536,    41,
      15,    42,     7,    75,   100,   100,    72,    55,   104,   104,
      15,   610,   550,    72,   590,   860,   959,    56,   594,    37,
      61,   122,   123,   561,   886,   120,   121,   122,   123,   124,
      72,   126,  1068,  1069,   100,    53,    97,    78,   104,   135,
      81,   100,   932,   933,    98,   104,    64,   122,   123,    64,
    1172,  1173,   590,  1066,     1,   789,   594,   791,   100,    64,
    1127,   120,   104,   122,  1066,   120,    46,    14,   122,   747,
     121,   125,    52,   127,   128,   129,   614,   615,   733,  1022,
      60,   736,   737,    30,   739,     6,   684,    21,   766,   102,
     104,   936,   937,   631,    15,   773,   418,    18,   420,   698,
    1222,   121,   120,     1,   867,   120,    10,   121,    29,   122,
     121,   124,     6,   711,    18,   120,    10,    15,    22,  1309,
    1324,   135,   101,   102,    18,    29,   122,   123,    22,  1251,
     122,   123,  1324,   671,    55,    29,   121,   736,   737,  1106,
    1107,  1108,    63,    41,   121,    49,    50,   688,    46,   690,
     688,   121,   690,   691,   122,    49,    50,    98,   121,    63,
     907,  1006,   700,   701,    98,  1010,   100,   123,  1013,    63,
     104,     1,    10,  1295,    72,   120,   409,   855,   411,   717,
      67,   122,  1027,  1028,   125,    15,   127,   128,   129,   122,
       1,   125,   102,   127,   128,   129,   795,  1210,     7,   854,
     940,   135,   100,    35,    92,    16,   104,   122,  1210,   808,
      98,    41,   129,    24,    25,    21,    46,    28,   840,   124,
     842,  1288,   120,   121,   122,   123,   124,   462,   126,   464,
     129,   769,   770,   129,   122,   121,   124,   442,   443,   129,
     128,    52,    72,    54,   769,   770,    57,   340,   341,    60,
     129,   789,   121,   791,   792,   121,   794,  1003,  1004,  1304,
    1305,  1328,    73,   121,    98,   126,   865,   120,    79,    80,
     100,    82,    83,   122,   104,    86,    87,   121,    89,    90,
      91,    92,    93,  1192,  1193,    96,    97,    98,    99,    30,
     120,   125,   122,   127,   128,   129,  1220,  1221,   121,   110,
     111,   117,    31,   119,    55,   843,   736,   737,  1074,  1075,
     121,    26,  1077,  1078,   125,   120,   127,   128,   122,   130,
     131,   364,   365,    52,   923,    54,   925,   926,   927,   928,
     124,    60,   931,   120,   124,   126,   152,   153,   154,  1184,
    1185,   126,    64,   120,    73,   161,   120,   123,  1003,  1004,
      79,    80,   120,   891,    98,   171,   172,   120,   120,   120,
       1,   101,  1207,  1208,   121,    15,    30,    15,    97,   124,
      99,   909,   125,   122,   102,   122,    38,    15,   122,   123,
      97,   125,     1,   127,   128,   129,   124,   121,   121,   121,
     206,     1,   208,   209,   210,     7,    15,   124,   997,   124,
     938,   939,   940,   941,   124,    15,  1296,  1297,  1298,  1299,
     121,    52,   124,    54,   120,   129,    26,    13,  1263,    60,
      13,    15,    41,   122,    26,    26,  1025,    46,   124,   124,
      35,    41,    73,   124,   121,  1034,    46,   121,    79,    80,
      27,   979,   120,    75,   260,   261,    46,   263,    51,   126,
     124,    51,    52,    72,    54,   122,    97,  1056,    99,    26,
      60,   277,    72,   279,   280,   281,   282,   283,   284,     9,
     122,   287,     1,   120,    53,    75,    76,    77,    65,   295,
     125,   100,   122,   120,    26,   104,    42,    74,   124,    26,
     100,   125,   120,   102,   104,    48,   120,   120,    16,   120,
     120,   120,  1101,   122,   120,   102,    13,  1106,  1107,  1108,
     120,   121,   122,   123,    13,   125,   126,  1055,   105,   129,
      54,    15,    61,   110,   111,   112,   113,   114,   115,    78,
    1068,  1069,   122,  1071,    52,    26,    54,    15,   122,   355,
     102,    26,    60,   130,   131,   361,    16,   363,   364,   365,
     137,   126,   123,   121,   370,    73,   122,   373,   374,   375,
     121,    79,    80,   122,   122,   120,   126,    15,   384,    11,
     386,    26,   124,  1172,   120,   126,   392,   393,    15,    97,
     124,    99,    52,    13,    54,  1183,    26,    57,    26,   125,
      60,   407,   122,   124,    15,  1133,   412,  1135,    15,    15,
    1255,    97,   124,    73,   120,   122,  1204,   121,   121,    79,
      80,   122,    82,    83,   197,    71,    86,    87,   799,    89,
    1219,  1220,  1221,  1222,   969,     9,    96,    97,    52,    99,
      54,   117,    16,   119,   106,   567,    60,   701,   550,  1238,
     707,   782,   439,   559,    28,   461,   462,   536,   464,    73,
     466,   121,    36,  1191,  1204,    79,    80,  1255,   772,   936,
     956,   477,   478,  1263,   926,   574,   152,   153,    52,   352,
      54,   115,   817,    97,  1149,    99,    60,   493,   890,   495,
    1306,   497,   498,   499,   657,   766,  1172,   260,  1173,    73,
     844,   804,   495,   495,   183,    79,    80,   496,    21,   287,
     183,   637,    71,    -1,    27,    -1,    -1,    -1,    -1,    -1,
    1309,    -1,   528,    97,  1313,    99,    -1,    -1,    -1,    -1,
    1319,    -1,   208,  1322,   210,    -1,    -1,   543,    -1,    -1,
      -1,    -1,    -1,  1271,  1272,    -1,    -1,  1275,  1276,    -1,
      44,    -1,    65,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      54,    74,    -1,    -1,     9,    59,    60,    -1,    -1,    -1,
      -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,   584,    73,
      -1,   587,    -1,    28,   590,    79,    80,    -1,   594,   595,
      -1,   597,   105,   106,   107,   108,   602,   110,   111,   112,
     113,   114,   115,    97,    -1,    99,    -1,    52,    -1,    54,
      -1,   287,    -1,    -1,    -1,    60,    -1,   130,   131,   295,
      -1,   134,   135,   136,   137,    -1,    -1,    -1,    73,   635,
     636,   637,   638,     6,    79,    80,    -1,   643,    -1,    -1,
      -1,    -1,    15,    -1,   650,    18,    -1,   653,    -1,    -1,
      -1,   657,    97,    52,    99,    54,    29,    30,    -1,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   675,
      -1,    -1,    -1,    -1,    73,    -1,    49,    50,    -1,   355,
      79,    80,    -1,    -1,    -1,   361,    -1,   363,   364,   365,
      63,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    -1,
      99,    -1,    -1,     6,    -1,    -1,   712,    10,   384,    -1,
     386,   717,    15,    -1,    -1,    18,   392,   393,    -1,    22,
     726,    -1,    -1,    -1,    -1,    -1,    29,    30,    -1,    -1,
      -1,   407,    -1,    -1,   740,    -1,   412,    -1,    -1,    -1,
      99,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    -1,
      -1,    -1,    -1,   759,   760,    58,   762,    -1,    -1,    -1,
      63,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
     466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   811,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   493,    -1,   495,
      -1,   497,   498,   499,   830,    -1,    -1,   833,    -1,   835,
      -1,    -1,    -1,   839,   840,    -1,   842,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   850,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   860,    -1,    -1,   863,   864,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   543,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     886,    -1,    -1,    -1,   890,    -1,   892,    -1,    -1,    -1,
     896,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   909,    -1,    -1,   912,    -1,   584,    -1,
      -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,
      -1,   597,    -1,    -1,    -1,    -1,   602,    -1,    -1,    -1,
     936,   937,    -1,   939,   940,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     956,    -1,    -1,   959,    -1,    -1,    -1,    -1,    -1,   635,
      -1,    -1,   638,    -1,    -1,    -1,    -1,   643,    -1,    -1,
      -1,    -1,    -1,    -1,   650,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   991,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1006,    -1,    -1,    -1,  1010,    -1,    -1,  1013,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1022,    -1,    -1,    -1,
      -1,  1027,  1028,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   712,    -1,    -1,    -1,
      -1,   717,    -1,  1049,  1050,  1051,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1074,  1075,
      -1,  1077,  1078,    -1,  1080,  1081,    -1,    -1,    -1,  1085,
      -1,    -1,    -1,   759,    -1,    -1,   762,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1112,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1141,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1149,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   833,    -1,   835,
      -1,    -1,    -1,   839,   840,    -1,   842,    -1,  1174,    -1,
      -1,    -1,    -1,    -1,   850,    -1,    -1,    -1,  1184,  1185,
      -1,    -1,    -1,    -1,   860,  1191,    -1,   863,   864,    -1,
      -1,    -1,    -1,  1199,    -1,  1201,     1,    -1,    -1,    -1,
      -1,  1207,  1208,    -1,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    16,    -1,    -1,    -1,    -1,   892,  1223,    -1,    24,
      25,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,
      -1,    -1,    -1,   909,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,  1262,  1263,    -1,    -1,
     936,    -1,    -1,   939,    -1,    -1,    -1,    -1,    73,    -1,
      -1,  1277,    -1,    -1,    79,    80,    -1,    82,    83,    -1,
     956,    86,    87,   959,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,    -1,  1303,  1304,  1305,
      -1,    -1,    -1,    -1,     1,   110,   111,    -1,    -1,    -1,
      -1,    -1,     9,    -1,    -1,   991,   121,    -1,    -1,    16,
     125,    18,   127,   128,    -1,   130,   131,    24,    25,    -1,
d3668 90
a3757 40
      -1,    -1,    -1,    -1,    -1,    -1,  1022,    -1,    -1,    -1,
      47,  1027,  1028,    -1,    -1,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,  1049,  1050,  1051,    73,    -1,    -1,    -1,
      -1,    -1,    79,    80,    -1,    82,    83,    -1,    -1,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,  1085,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,   125,    -1,
     127,   128,    -1,   130,   131,    -1,  1112,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     9,    -1,    -1,  1141,    -1,    -1,    -1,    16,
      -1,    18,    -1,    -1,    -1,    -1,    -1,    24,    25,    -1,
      -1,    28,    29,    -1,    -1,    32,    -1,    34,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1174,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    -1,    54,  1184,  1185,
      57,    -1,    -1,    60,    -1,  1191,    -1,    -1,    -1,    -1,
      -1,    68,    -1,  1199,    -1,  1201,    73,    -1,    -1,    -1,
      -1,    -1,    79,    80,    -1,    82,    83,    -1,    -1,    86,
      87,    -1,    89,    90,    91,    92,    93,  1223,    -1,    96,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,   125,    -1,
     127,   128,    -1,   130,   131,    -1,    -1,  1263,    -1,    -1,
      -1,    -1,    -1,     6,    -1,     8,    -1,    -1,    -1,    12,
      -1,  1277,    -1,    -1,    -1,    -1,    -1,    -1,    21,    -1,
      23,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1303,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    94,    95,    96,    97,    -1,    99,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,   134,   135,   136,   137,   138,     1,    -1,    -1,    -1,
      -1,     6,    -1,    -1,    -1,    -1,    11,    -1,    -1,    -1,
d3759 19
a3777 11
      25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,   110,   111,    -1,    -1,     6,
      -1,    -1,    -1,    -1,    11,    -1,   121,    -1,    -1,    16,
     125,   126,   127,   128,    -1,   130,   131,    24,    25,    -1,
d3779 12
d3796 19
a3814 5
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,     6,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    16,
      -1,    18,    -1,    -1,   121,    -1,    -1,    -1,   125,   126,
     127,   128,    29,   130,   131,    -1,    -1,    -1,    -1,    -1,
d3820 5
a3824 8
      87,    88,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,
      97,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,    -1,    -1,    -1,    -1,    -1,
d3831 4
a3834 24
      91,    92,    93,    94,    95,    96,    97,    98,    99,     1,
      -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,
     121,    -1,    24,    25,   125,    -1,   127,   128,    -1,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,     1,    -1,
      -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,   121,
      -1,    24,    25,   125,    -1,   127,   128,    -1,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,     1,    -1,    -1,
      -1,    -1,     6,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,   121,    -1,
      24,    25,   125,    -1,   127,   128,    -1,   130,   131,    -1,
d3841 33
a3873 20
      94,    95,    96,    97,    98,    99,     1,    -1,    -1,    -1,
      -1,    -1,     7,    -1,    -1,    -1,   110,   111,    -1,    -1,
      15,    16,    -1,    -1,    -1,    -1,    -1,   121,    -1,    24,
      25,   125,    -1,   127,   128,    -1,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,     1,    -1,    -1,    64,
      -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      15,    16,    -1,    -1,    79,    80,    -1,    82,    83,    24,
      25,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,   121,    -1,    -1,    64,
     125,    -1,   127,   128,    -1,   130,   131,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    79,    80,    -1,    82,    83,    -1,
       1,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,
     125,    -1,   127,   128,    -1,   130,   131,    -1,    -1,    -1,
d3875 7
a3881 42
       1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,    80,
      -1,    82,    83,    24,    25,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,
     121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,   130,
     131,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
      -1,    82,    83,    -1,     1,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,   130,
     131,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    16,
      -1,    -1,    79,    80,    -1,    82,    83,    24,    25,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    52,    -1,    54,    -1,    -1,
      57,    -1,    -1,    60,   121,    -1,    -1,    -1,   125,    -1,
     127,   128,    -1,   130,   131,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    79,    80,    -1,    82,    83,    -1,     1,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    24,    25,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,   125,    -1,
     127,   128,    -1,   130,   131,    -1,    -1,    -1,    -1,    52,
      -1,    54,    -1,    -1,    57,    -1,    -1,    60,     1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    -1,    16,    -1,    -1,    79,    80,    -1,    82,
      83,    24,    25,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    52,
      -1,    54,    -1,    -1,    57,    -1,    -1,    60,   121,    -1,
      -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,    -1,
      73,    -1,    -1,    -1,    -1,    -1,    79,    80,    -1,    82,
      83,    -1,     1,    86,    87,    -1,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    99,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    24,    25,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,
      -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,    -1,
d3883 17
a3899 15
      -1,    60,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    16,    -1,    -1,
      79,    80,    -1,    82,    83,    24,    25,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    52,    -1,    54,    -1,    -1,    57,    -1,
      -1,    60,   121,    -1,    -1,    -1,   125,    -1,   127,   128,
      -1,   130,   131,    -1,    73,    -1,    -1,    -1,    -1,    -1,
      79,    80,    -1,    82,    83,    -1,     1,    86,    87,    -1,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      99,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      25,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    -1,    -1,    -1,   125,    -1,   127,   128,
      -1,   130,   131,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,     1,    -1,    -1,    -1,
d3901 14
a3914 12
      -1,    16,    -1,    -1,    79,    80,    -1,    82,    83,    24,
      25,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,   121,    -1,    -1,    -1,
     125,    -1,   127,   128,    -1,   130,   131,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    79,    80,    -1,    82,    83,    -1,
       1,    86,    87,    -1,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    25,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,
     125,    -1,   127,   128,    -1,   130,   131,    -1,    -1,    -1,
d3916 16
a3931 14
       1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,    80,
      -1,    82,    83,    24,    25,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,    60,
     121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,   130,
     131,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
      -1,    82,    83,    -1,     1,    86,    87,    -1,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,   130,
     131,    -1,    -1,    -1,    -1,    52,    -1,    54,    -1,    -1,
d3934 23
a3956 13
      -1,    -1,    79,    80,    -1,    82,    83,    -1,    -1,    86,
      87,    -1,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,     6,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,   125,    -1,
     127,   128,    -1,   130,   131,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,
       6,    94,    95,    96,    97,    -1,    99,    -1,    -1,    -1,
      16,   104,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,
d3958 24
a3981 10
      -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,   135,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,     6,    -1,
      -1,    -1,    -1,    -1,    -1,   121,   122,    -1,    16,   125,
      -1,   127,   128,    -1,   130,   131,    24,    25,    -1,    -1,
d3989 24
a4012 4
      98,    99,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    16,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    24,    25,    -1,   125,    -1,   127,
     128,    -1,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
d4018 6
a4023 6
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    24,    25,    -1,   125,    -1,   127,   128,    -1,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
d4027 2
a4028 23
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      -1,    -1,    16,   125,    18,   127,   128,    -1,   130,   131,
      24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,    -1,     1,    -1,    -1,
      -1,    -1,     6,    -1,    -1,    -1,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    18,    -1,    -1,   121,    -1,    -1,
      -1,   125,    -1,   127,   128,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      94,    95,    96,    97,    -1,    99,     1,    -1,    -1,   103,
d4030 1
a4030 1
      15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
d4037 27
a4063 28
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    94,
      95,    96,    97,     8,    99,    10,    11,    -1,    -1,    -1,
      -1,    16,    17,    -1,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    27,    -1,    -1,    -1,    -1,   122,    33,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    70,    -1,    -1,    73,    74,
      -1,    -1,    -1,    -1,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    -1,    -1,    94,
      95,    96,    97,     8,    99,    10,    11,    -1,    -1,    -1,
      -1,    16,    17,    -1,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    27,    -1,    -1,    -1,   121,    -1,    33,    -1,
      -1,    -1,   127,    -1,    39,    40,    -1,    -1,    -1,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    54,
      -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    15,    16,    -1,    69,    70,    -1,    -1,    73,    74,
      24,    25,    -1,    -1,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    -1,    94,
      95,    96,    97,    -1,    99,    -1,    -1,    -1,    52,    -1,
      54,    -1,    -1,    57,    -1,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,    -1,    73,
      -1,    -1,   127,    -1,    -1,    79,    80,    -1,    82,    83,
      -1,    -1,    86,    87,    -1,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    99,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    24,    25,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,   127,   128,    -1,   130,   131,    -1,    -1,
d4066 66
a4131 31
      -1,    -1,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,
      80,    -1,    82,    83,    24,    25,    86,    87,    28,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,
      60,   121,    -1,    -1,    -1,   125,   126,   127,   128,    -1,
     130,   131,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,
      80,    -1,    82,    83,    24,    25,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,
      60,   121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,
      80,    -1,    82,    83,    24,    25,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,
      60,   121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,    -1,    73,    -1,    -1,    16,    -1,    -1,    79,
      80,    -1,    82,    83,    24,    25,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    52,    -1,    54,    -1,    -1,    57,    -1,    -1,
      60,   121,    -1,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,
      80,    -1,    82,    83,    -1,    -1,    86,    87,    -1,    89,
      90,    91,    92,    93,    -1,     1,    96,    97,    98,    99,
       6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,    29,    -1,   125,    -1,   127,   128,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    44,    45,
d4136 11
a4146 39
      86,    87,    88,    -1,    -1,    -1,    -1,     1,    94,    95,
      96,    97,     6,    99,    -1,    -1,    10,   103,    -1,    -1,
      -1,    15,    -1,    -1,    18,    -1,    -1,    -1,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    30,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    38,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,     1,
      94,    95,    96,    97,     6,    99,    -1,    -1,    10,    -1,
      -1,    -1,    -1,    15,    -1,    -1,    18,    -1,    -1,    -1,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    29,    30,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    38,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,     1,    94,    95,    96,    97,     6,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    15,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,     1,    94,    95,    96,    97,     6,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,     1,    94,    95,    96,    97,
       6,    99,    -1,    -1,    -1,    11,    -1,    -1,    -1,    15,
d4154 2
a4155 2
      86,    87,    88,    -1,    -1,    -1,    -1,     1,    94,    95,
      96,    97,     6,    99,    -1,    -1,    -1,    -1,    -1,    -1,
d4158 7
a4164 7
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    -1,    -1,     1,
      94,    95,    96,    97,     6,    99,    -1,    -1,    -1,    -1,
d4167 7
a4173 7
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    -1,
      -1,     1,    94,    95,    96,    97,     6,    99,    -1,    -1,
d4176 7
a4183 6
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,     1,    94,    95,    96,    97,     6,    99,
d4185 7
d4194 7
a4200 7
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,     1,    94,    95,    96,    97,
       6,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4208 2
a4209 2
      86,    87,    88,    -1,    -1,    -1,    -1,     1,    94,    95,
      96,    97,     6,    99,    -1,    -1,    -1,    -1,    -1,    -1,
d4212 34
a4245 7
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,     1,
      94,    95,    96,    97,     6,    99,    -1,    -1,    -1,    -1,
d4248 7
a4254 7
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,     1,    94,    95,    96,    97,     6,    99,    -1,    -1,
d4257 7
a4264 6
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,     1,    94,    95,    96,    97,     6,    99,
d4266 7
d4275 7
a4281 7
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,     1,    94,    95,    96,    97,
       6,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4289 2
a4290 2
      86,    87,    88,    -1,    -1,    -1,    -1,     1,    94,    95,
      96,    97,     6,    99,    -1,    -1,    -1,    -1,    -1,    -1,
d4293 8
d4302 1
a4302 1
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
d4306 3
a4308 4
      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,     1,
      94,    95,    96,    97,     6,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4310 1
a4310 1
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
d4314 3
a4316 4
      82,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,     1,    94,    95,    96,    97,     6,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4322 4
a4325 5
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,     1,    94,    95,    96,    97,     6,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4331 1
a4331 2
      88,    -1,    -1,    -1,    -1,     1,    94,    95,    96,    97,
       6,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4335 1
a4335 1
      46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
d4339 2
a4340 3
      86,    87,    88,    -1,    -1,    -1,    -1,     1,    94,    95,
      96,    97,     6,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4347 11
a4357 3
      84,    85,    86,    87,    88,    -1,     6,    -1,    -1,    -1,
      94,    95,    96,    97,    -1,    99,    16,    -1,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
a4358 8
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,     6,
      -1,    -1,    -1,    -1,    94,    95,    96,    97,    -1,    99,
      -1,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
d4360 1
a4360 1
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
d4364 11
a4374 3
      87,    88,    -1,     6,    -1,    -1,    -1,    94,    95,    96,
      97,    -1,    99,    16,    -1,    18,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
d4380 2
a4381 44
      83,    84,    85,    86,    87,    88,     6,    -1,    -1,    -1,
      -1,    94,    95,    96,    97,    -1,    99,    -1,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,     6,
      -1,    -1,    -1,    -1,    94,    95,    96,    97,    -1,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,     6,    -1,    -1,    -1,    -1,    94,    95,    96,
      97,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,     6,    90,    -1,    -1,    -1,
      94,    95,    96,    97,    -1,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    -1,
      -1,    -1,     6,    94,    95,    96,    97,    11,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,     6,    -1,    -1,    -1,    -1,
      94,    95,    96,    97,    -1,    99,    -1,    -1,    -1,    -1,
d4388 2
a4389 27
      81,    82,    83,    84,    85,    86,    87,    88,     6,    -1,
      -1,    -1,    -1,    94,    95,    96,    97,    -1,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,     6,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
      -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,     6,    -1,    -1,    -1,    -1,    94,
      95,    96,    97,    -1,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,     6,    -1,    -1,
      -1,    -1,    94,    95,    96,    97,    -1,    99,    -1,    -1,
d4396 2
a4397 3
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,    -1,
      99
d4404 2
a4405 2
       0,    31,    71,    97,   140,   141,   144,   151,   156,   173,
     426,     1,     6,    41,    42,    43,    44,    45,    46,    47,
d4409 125
a4533 128
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      94,    95,    96,    97,    99,   416,   417,   419,   420,   416,
       0,   147,    46,   176,   290,   431,   416,   121,   175,   431,
     175,   120,   156,   426,   121,   142,   120,    55,    97,   174,
     175,   412,   413,   416,   120,   120,   176,   416,    48,   291,
     292,   416,   431,   183,   184,   120,   152,   148,   150,   120,
     122,     1,   123,    97,   122,   123,   104,   121,   135,   429,
     193,    56,   185,   157,   174,    97,   154,   158,   159,   176,
     416,     1,   416,   145,   292,    16,    24,    25,    57,    82,
      83,    86,    87,    89,    90,    91,    92,    93,    96,    98,
     110,   111,   121,   125,   127,   128,   130,   131,   360,   361,
     363,   365,   366,   367,   369,   370,   371,   376,   377,   383,
     396,   399,   400,   418,   419,   360,   419,     6,    18,    22,
      29,    49,    50,    63,   143,   194,   196,   197,   203,   276,
     279,   280,   283,   186,   187,   416,   158,   153,   155,   120,
       1,   129,   430,   185,   183,   416,   121,   121,   121,   121,
     121,   121,   378,   431,   360,   126,   360,   397,   398,   366,
      99,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   372,   122,
      21,    27,    65,    74,   105,   106,   107,   108,   110,   111,
     112,   113,   114,   115,   130,   131,   134,   135,   136,   137,
     401,   402,   404,   408,     8,    12,    23,    43,    69,    70,
     116,   117,   118,   119,   132,   133,   138,   403,   405,   409,
      44,    59,   419,    66,   109,   371,    98,   125,   127,   128,
     129,   428,   121,   363,   366,   123,   204,   205,   416,   416,
       1,    90,   211,   212,   411,   416,   416,   416,   416,     8,
      12,    21,    23,    27,   105,   106,   107,   108,   109,   110,
     111,   130,   131,   132,   133,   134,   136,   137,   138,   294,
     407,   408,   409,   416,   429,    10,   315,   207,   208,   120,
       1,   120,    67,   188,   431,   430,   154,     1,   177,   178,
     416,   149,   200,   198,   376,   379,   360,   381,   382,   376,
     381,   379,   122,   102,     1,   123,   126,     7,   361,   363,
     362,   363,    35,   365,   364,   365,   374,   375,   419,   374,
     366,   366,   366,     1,    11,    57,    64,    82,    83,    86,
      87,    96,   121,   125,   360,   384,   385,   386,   387,   389,
     390,   394,   395,   416,   419,   416,   122,   379,   360,     1,
     120,   123,    21,   206,   431,   129,   296,   297,     1,   120,
     123,   129,   296,   129,   129,   296,   421,   430,    36,    38,
      48,   209,   286,   289,   431,   187,   187,    62,   121,   189,
     431,   430,     1,   120,   429,   158,   160,   201,   202,   203,
     276,    18,    29,   146,   199,   203,   207,   275,   280,   122,
     360,   124,     1,   122,   123,   122,   123,   122,     1,   360,
     376,   380,   360,   398,     1,   398,   363,   365,   129,   360,
     416,   360,   390,   122,   360,   390,   391,   393,   395,     1,
     360,   384,   394,   102,   126,   120,   427,     1,   123,   124,
     126,   380,   122,   205,   205,   360,   416,   303,   304,   429,
     431,   121,   298,   431,   212,     1,   212,   416,   416,   416,
     295,   416,   429,   431,    38,   316,   317,   322,   323,   210,
       1,   215,   216,   414,   416,     1,   213,   214,   416,    51,
      52,    54,    60,    75,    76,    77,   277,   287,   290,   293,
     121,     1,   190,   191,   416,   206,   178,     1,   178,   183,
      97,   121,   179,   180,   430,    30,   168,   169,   171,   207,
     416,   416,    55,   161,   120,   122,   360,   382,     1,   382,
     380,   416,   122,   122,   123,   419,    26,   124,   120,   427,
       1,   120,   122,   123,   392,   124,   126,   102,   126,   360,
     386,   387,    64,   389,   360,   395,     1,   395,   390,   122,
     296,   281,   416,     1,    18,    29,    48,    97,   103,   122,
     299,   300,   305,   412,   425,   431,   296,   296,   296,   282,
     416,   318,   120,   422,     8,    11,    17,    19,    20,    25,
      27,    33,    39,    40,    45,    69,    70,    74,    84,    85,
      88,    94,    95,   127,   315,   324,   325,   337,   340,   351,
     353,   376,   406,   410,   411,   419,     1,   225,   226,   416,
     216,   123,   423,   214,   423,   429,   368,   369,   431,   120,
     360,   120,   120,   185,   289,   120,   120,   190,     1,   122,
     123,   101,   192,   431,   198,     1,   181,   182,   415,   416,
     425,   121,    10,    15,    15,    30,   171,   185,    15,   285,
     286,   289,   124,   122,   378,     1,   360,   125,   388,   360,
     393,   393,   390,   360,   303,     1,   124,   302,   321,   432,
     122,   416,   416,    38,   412,   122,     1,   120,   122,    38,
     124,   412,   302,   216,   317,    15,   360,   376,   410,   419,
     360,   330,   333,     1,   338,   339,   360,    97,   354,   121,
     121,   360,   121,   376,   325,     7,   326,   378,   124,     1,
     120,   227,   229,   423,   416,   124,   124,   359,   360,    97,
     120,   120,   195,   122,   191,     1,   191,   416,    15,     1,
     122,   123,   102,   192,   129,   415,   181,    13,    13,   193,
     430,   360,   122,   384,    26,   284,   373,   374,   296,   296,
     412,   124,   306,   300,     1,   103,   300,   412,     9,    28,
      36,   307,   308,   309,   310,   313,   314,   374,   383,   424,
     124,   319,    26,    21,   100,   352,   429,    35,   421,   421,
       1,    13,   123,   124,   121,   360,    31,   419,   381,   327,
     352,   226,     1,   226,   121,   235,   235,   429,   238,   239,
     240,   238,   120,   288,    75,    51,   196,   278,   182,     1,
     182,   415,   416,   192,   122,   170,   172,    10,    58,   162,
     165,   168,   126,   388,   302,   303,   124,   307,   122,   306,
      26,   125,    26,     9,   307,   317,   328,   360,   360,   341,
     316,   360,   339,   421,     1,   339,   416,   370,   122,   123,
     122,   122,   129,   122,   421,   360,     1,   236,   237,   412,
     429,     1,    61,    78,    81,   230,   232,   238,   217,   290,
       9,    16,    18,    29,    32,    34,    47,    68,    98,   121,
     127,   128,   241,   242,   245,   259,   260,   262,   263,   265,
     308,   360,   373,   374,   383,   419,   424,   428,   432,   104,
     360,   360,   368,   315,   320,   321,   322,   320,   163,   166,
      53,   427,   301,   307,   314,   311,   312,   416,   360,   125,
       1,   344,   345,   346,   348,   349,   359,   336,     1,    14,
      30,   350,   421,    37,   334,   320,   122,   124,   380,   416,
     419,   320,   122,     1,   120,   122,   124,   228,   120,   102,
     121,   267,   431,    26,    42,   268,   431,   268,    72,   100,
     104,   273,   274,   431,    41,   223,   273,   125,   125,   247,
     431,   296,   296,     1,   246,    26,   242,   373,   264,   265,
     383,   416,     1,   261,   416,   264,   383,    99,   264,   102,
     121,   125,   243,   245,   360,    48,   390,   120,   120,   120,
     120,   120,   120,   167,   316,   167,   164,   302,     1,   120,
     126,   102,   312,   329,     1,   120,   427,     1,   123,   124,
       1,   102,    13,   360,   320,   331,    13,   422,   355,   356,
     357,   369,   431,   122,   378,   122,   422,   237,     1,   237,
     374,   238,    54,    15,     1,   374,   374,    61,    78,     1,
     390,     1,   224,   218,   431,     1,   248,   249,   259,   374,
     424,   249,    26,   266,    15,   250,   251,   252,   253,   412,
     431,   239,   122,     1,   122,   123,   360,     1,   244,   360,
     360,   102,   264,   221,   431,   316,   312,     1,   312,    26,
     416,   126,     7,    64,   342,   343,   346,     1,   346,   349,
       1,   349,   347,   359,     1,   359,   421,   335,   422,   360,
     320,   122,   124,   123,   121,   122,   273,   122,   122,   267,
     267,   267,   360,   120,     1,   123,   126,   126,   239,   302,
      15,    11,     1,   120,   427,   124,   416,     1,   416,     1,
     122,   123,   126,   360,   120,     9,   309,   124,    26,    15,
     421,   421,   320,    13,   332,   422,   355,   357,   360,   234,
     231,   233,    51,    75,   219,   222,   290,   249,   249,    26,
     255,   258,   259,   416,   419,   253,     1,   253,   239,   360,
       1,   360,   222,   374,   374,   316,   320,   422,   421,   422,
     122,   124,   122,     1,   269,   270,   431,   269,   269,   368,
     360,   239,    26,   124,   273,   422,   422,   320,   358,   369,
      15,    18,    29,    42,    46,    49,    50,    73,    79,    80,
      97,   271,   290,   412,    15,    15,    97,     1,   256,   257,
     348,   258,   374,   422,   122,   123,   416,   416,   416,   416,
     360,   120,   124,   220,     1,   120,   427,   124,   369,   296,
     296,   296,   296,   239,   360,   257,   257,   254,   343,   121,
     303,   273,   121,   250,   272,   250,   122,   302,   122,   427
d4970 1
a4970 1
#line 216 "parse.y"
d4975 1
a4975 1
#line 218 "parse.y"
d4986 1
a4986 1
#line 229 "parse.y"
d4991 1
a4991 1
#line 231 "parse.y"
d4996 1
a4996 1
#line 233 "parse.y"
d5001 1
a5001 1
#line 235 "parse.y"
d5006 1
a5006 1
#line 240 "parse.y"
d5011 1
a5011 1
#line 242 "parse.y"
d5016 1
a5016 1
#line 244 "parse.y"
d5021 1
a5021 1
#line 248 "parse.y"
d5026 1
a5026 1
#line 250 "parse.y"
d5035 1
a5035 1
#line 256 "parse.y"
d5040 1
a5040 1
#line 258 "parse.y"
d5048 1
a5048 1
#line 264 "parse.y"
d5053 1
a5053 1
#line 270 "parse.y"
d5058 1
a5058 1
#line 272 "parse.y"
d5063 1
a5063 1
#line 274 "parse.y"
d5068 1
a5068 1
#line 279 "parse.y"
d5073 1
a5073 1
#line 281 "parse.y"
d5078 1
a5078 1
#line 286 "parse.y"
d5083 1
a5083 1
#line 291 "parse.y"
d5088 1
a5088 1
#line 293 "parse.y"
d5093 1
a5093 1
#line 298 "parse.y"
d5098 1
a5098 1
#line 304 "parse.y"
d5103 1
a5103 1
#line 308 "parse.y"
d5108 1
a5108 1
#line 310 "parse.y"
d5113 1
a5113 1
#line 316 "parse.y"
d5118 1
a5118 1
#line 322 "parse.y"
d5123 1
a5123 1
#line 334 "parse.y"
d5128 1
a5128 1
#line 336 "parse.y"
d5133 1
a5133 1
#line 341 "parse.y"
d5138 1
a5138 1
#line 343 "parse.y"
d5143 1
a5143 1
#line 348 "parse.y"
d5148 1
a5148 1
#line 350 "parse.y"
d5153 1
a5153 1
#line 352 "parse.y"
d5158 1
a5158 1
#line 357 "parse.y"
d5163 1
a5163 1
#line 363 "parse.y"
d5168 1
a5168 1
#line 374 "parse.y"
d5173 1
a5173 1
#line 376 "parse.y"
d5178 1
a5178 1
#line 378 "parse.y"
d5183 1
a5183 1
#line 380 "parse.y"
d5188 1
a5188 1
#line 385 "parse.y"
d5193 1
a5193 1
#line 390 "parse.y"
d5198 1
a5198 1
#line 393 "parse.y"
d5203 1
a5203 1
#line 398 "parse.y"
d5208 1
a5208 1
#line 404 "parse.y"
d5213 1
a5213 1
#line 406 "parse.y"
d5218 1
a5218 1
#line 408 "parse.y"
d5223 1
a5223 1
#line 410 "parse.y"
d5228 1
a5228 1
#line 415 "parse.y"
d5233 1
a5233 1
#line 417 "parse.y"
d5238 1
a5238 1
#line 419 "parse.y"
d5243 1
a5243 1
#line 423 "parse.y"
d5248 1
a5248 1
#line 436 "parse.y"
d5253 1
a5253 1
#line 441 "parse.y"
d5258 1
a5258 1
#line 452 "parse.y"
d5263 1
a5263 1
#line 454 "parse.y"
d5268 1
a5268 1
#line 460 "parse.y"
d5273 1
a5273 1
#line 462 "parse.y"
d5278 1
a5278 1
#line 464 "parse.y"
d5283 1
a5283 1
#line 466 "parse.y"
d5288 1
a5288 1
#line 471 "parse.y"
d5293 1
a5293 1
#line 477 "parse.y"
d5298 1
a5298 1
#line 482 "parse.y"
d5303 1
a5303 1
#line 484 "parse.y"
d5308 1
a5308 1
#line 494 "parse.y"
d5313 1
a5313 1
#line 496 "parse.y"
d5318 1
a5318 1
#line 500 "parse.y"
d5323 1
a5323 1
#line 502 "parse.y"
d5328 1
a5328 1
#line 504 "parse.y"
d5333 1
a5333 1
#line 506 "parse.y"
d5338 1
a5338 1
#line 511 "parse.y"
d5343 1
a5343 1
#line 513 "parse.y"
d5348 1
a5348 1
#line 520 "parse.y"
d5353 1
a5353 1
#line 525 "parse.y"
d5358 1
a5358 1
#line 527 "parse.y"
d5363 1
a5363 1
#line 532 "parse.y"
d5368 1
a5368 1
#line 534 "parse.y"
d5373 1
a5373 1
#line 536 "parse.y"
d5378 1
a5378 1
#line 541 "parse.y"
d5383 1
a5383 1
#line 548 "parse.y"
d5388 1
a5388 1
#line 553 "parse.y"
d5393 1
a5393 1
#line 559 "parse.y"
d5398 1
a5398 1
#line 563 "parse.y"
d5408 1
a5408 1
#line 570 "parse.y"
d5418 1
a5418 1
#line 580 "parse.y"
d5423 1
a5423 1
#line 582 "parse.y"
d5428 1
a5428 1
#line 584 "parse.y"
d5433 1
a5433 1
#line 586 "parse.y"
d5438 1
a5438 1
#line 593 "parse.y"
d5443 1
a5443 1
#line 595 "parse.y"
d5448 1
a5448 1
#line 597 "parse.y"
d5453 1
a5453 1
#line 599 "parse.y"
d5458 1
a5458 1
#line 601 "parse.y"
d5463 1
a5463 1
#line 608 "parse.y"
d5468 1
a5468 1
#line 619 "parse.y"
d5473 1
a5473 1
#line 622 "parse.y"
d5481 1
a5481 1
#line 635 "parse.y"
d5497 1
a5497 1
#line 648 "parse.y"
d5512 1
a5512 1
#line 660 "parse.y"
d5517 1
a5517 1
#line 666 "parse.y"
d5522 1
a5522 1
#line 672 "parse.y"
d5527 1
a5527 1
#line 674 "parse.y"
d5532 1
a5532 1
#line 676 "parse.y"
d5537 1
a5537 1
#line 682 "parse.y"
d5542 1
a5542 1
#line 687 "parse.y"
d5547 1
a5547 1
#line 689 "parse.y"
d5552 1
a5552 1
#line 695 "parse.y"
d5557 1
a5557 1
#line 697 "parse.y"
d5566 1
a5566 1
#line 703 "parse.y"
d5571 1
a5571 1
#line 709 "parse.y"
d5576 1
a5576 1
#line 712 "parse.y"
d5581 1
a5581 1
#line 714 "parse.y"
d5586 1
a5586 1
#line 720 "parse.y"
d5599 1
a5599 6
#line 730 "parse.y"
    { current_schema = start_struct (RECORD_TYPE); ;}
    break;

  case 170:
#line 732 "parse.y"
d5607 2
a5608 2
  case 171:
#line 738 "parse.y"
d5610 1
a5610 2
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype), build_schema_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), current_schema), 
                          NULL_TREE);
a5612 1
        current_schema = NULL_TREE;
d5616 5
d5622 2
a5623 2
#line 746 "parse.y"
    { current_schema = start_struct (RECORD_TYPE); ;}
d5627 2
a5628 4
#line 748 "parse.y"
    { build_schema_type (error_mark_node, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), NULL_TREE, current_schema);
        current_schema = NULL_TREE;
      ;}
d5632 2
a5633 2
#line 752 "parse.y"
    { ((*yyvalp).ttype) = start_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 0); ;}
d5637 6
a5642 2
#line 754 "parse.y"
    { push_scope (); ;}
d5646 1
a5646 1
#line 756 "parse.y"
d5648 4
a5651 4
        lex_const_equal = -1;
        finish_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype) != NULL_TREE);
        pop_record_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype));
        yyerrok;
d5656 6
a5661 2
#line 764 "parse.y"
    { ((*yyvalp).ttype) = start_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), 1); ;}
d5665 6
a5670 2
#line 766 "parse.y"
    { push_scope (); ;}
d5674 2
a5675 7
#line 768 "parse.y"
    {
        lex_const_equal = -1;
        finish_object_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype) != NULL_TREE);
        pop_record_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype));
        yyerrok;
      ;}
d5680 1
a5680 1
    { push_scope (); ;}
d5683 3
a5685 18
  case 181:
#line 778 "parse.y"
    {
        lex_const_equal = -1;
        finish_view_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (-9)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
        pop_record_level (NULL_TREE);
        yyerrok;
      ;}
    break;

  case 182:
#line 785 "parse.y"
    {
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
        PASCAL_TYPE_CLASS (t) = 1;
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), t, NULL_TREE);
        warning("ignored parent in Delphi forward class declaration");
      ;}
d5689 2
a5690 6
#line 792 "parse.y"
    {
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
	PASCAL_TYPE_CLASS (t) = 1;
	build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), t, NULL_TREE); 
      ;}
d5694 2
a5695 11
#line 798 "parse.y"
    {
        tree t = build_pascal_pointer_type (make_node (LANG_TYPE));
        PASCAL_TYPE_CLASS (t) = 1;
        build_type_decl ((((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.ttype), t, NULL_TREE);
      ;}
    break;

  case 185:
#line 807 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5699 2
a5700 2
#line 809 "parse.y"
    { error ("invalid schema discriminants"); ((*yyvalp).ttype) = NULL_TREE; ;}
d5704 2
a5705 2
#line 815 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5709 1
a5709 21
#line 817 "parse.y"
    { ((*yyvalp).ttype) = chainon ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); error ("missing semicolon"); yyerrok; ;}
    break;

  case 190:
#line 819 "parse.y"
    { error ("extra semicolon"); ;}
    break;

  case 192:
#line 825 "parse.y"
    { ((*yyvalp).ttype) = build_discriminants ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), current_schema); ;}
    break;

  case 194:
#line 831 "parse.y"
    { type_attributes (&((*yyvalp).ttype), TREE_PURPOSE ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 195:
#line 836 "parse.y"
d5718 2
a5719 2
  case 196:
#line 843 "parse.y"
d5728 2
a5729 2
  case 198:
#line 854 "parse.y"
d5733 2
a5734 2
  case 200:
#line 860 "parse.y"
d5738 2
a5739 2
  case 201:
#line 862 "parse.y"
d5743 2
a5744 2
  case 205:
#line 867 "parse.y"
d5748 2
a5749 2
  case 207:
#line 870 "parse.y"
d5753 2
a5754 2
  case 208:
#line 875 "parse.y"
d5758 2
a5759 2
  case 209:
#line 877 "parse.y"
d5766 2
a5767 2
  case 210:
#line 886 "parse.y"
d5771 2
a5772 2
  case 211:
#line 888 "parse.y"
d5776 2
a5777 2
  case 212:
#line 890 "parse.y"
d5781 2
a5782 2
  case 213:
#line 892 "parse.y"
d5786 2
a5787 2
  case 214:
#line 894 "parse.y"
d5791 2
a5792 2
  case 215:
#line 899 "parse.y"
d5796 2
a5797 2
  case 217:
#line 902 "parse.y"
d5801 2
a5802 2
  case 218:
#line 904 "parse.y"
d5806 3
a5808 3
  case 219:
#line 905 "parse.y"
    { push_scope (); ;}
d5811 2
a5812 7
  case 220:
#line 906 "parse.y"
    { pop_record_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 221:
#line 908 "parse.y"
d5816 2
a5817 2
  case 224:
#line 915 "parse.y"
d5821 2
a5822 2
  case 226:
#line 921 "parse.y"
d5826 2
a5827 2
  case 227:
#line 923 "parse.y"
d5831 2
a5832 2
  case 228:
#line 925 "parse.y"
d5836 2
a5837 2
  case 229:
#line 927 "parse.y"
d5841 2
a5842 2
  case 230:
#line 932 "parse.y"
d5846 2
a5847 2
  case 231:
#line 934 "parse.y"
d5851 2
a5852 2
  case 232:
#line 939 "parse.y"
d5856 2
a5857 2
  case 233:
#line 941 "parse.y"
d5861 2
a5862 2
  case 234:
#line 943 "parse.y"
d5866 2
a5867 2
  case 238:
#line 954 "parse.y"
d5871 2
a5872 2
  case 239:
#line 956 "parse.y"
d5876 2
a5877 2
  case 240:
#line 958 "parse.y"
d5881 2
a5882 2
  case 242:
#line 964 "parse.y"
d5886 2
a5887 2
  case 243:
#line 969 "parse.y"
d5891 2
a5892 2
  case 244:
#line 971 "parse.y"
d5896 2
a5897 2
  case 245:
#line 976 "parse.y"
d5901 2
a5902 2
  case 246:
#line 978 "parse.y"
d5906 2
a5907 2
  case 247:
#line 980 "parse.y"
d5911 2
a5912 2
  case 248:
#line 982 "parse.y"
d5916 2
a5917 2
  case 250:
#line 988 "parse.y"
d5921 2
a5922 2
  case 251:
#line 990 "parse.y"
d5926 2
a5927 2
  case 252:
#line 992 "parse.y"
d5931 2
a5932 2
  case 254:
#line 998 "parse.y"
d5936 2
a5937 2
  case 255:
#line 1003 "parse.y"
d5941 2
a5942 2
  case 258:
#line 1013 "parse.y"
d5946 2
a5947 2
  case 259:
#line 1015 "parse.y"
d5951 2
a5952 2
  case 260:
#line 1020 "parse.y"
d5956 2
a5957 2
  case 261:
#line 1022 "parse.y"
d5961 2
a5962 2
  case 262:
#line 1024 "parse.y"
d5966 2
a5967 2
  case 263:
#line 1026 "parse.y"
d5971 2
a5972 2
  case 265:
#line 1032 "parse.y"
d5976 2
a5977 2
  case 266:
#line 1034 "parse.y"
d5985 2
a5986 2
  case 267:
#line 1043 "parse.y"
d5990 2
a5991 2
  case 268:
#line 1045 "parse.y"
d5995 2
a5996 2
  case 269:
#line 1047 "parse.y"
d6000 2
a6001 2
  case 270:
#line 1049 "parse.y"
d6005 2
a6006 2
  case 271:
#line 1054 "parse.y"
d6010 2
a6011 2
  case 272:
#line 1056 "parse.y"
d6019 3
a6021 6
  case 274:
#line 1066 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_procedural_type (void_type_node, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype));
      ;}
d6024 3
a6026 3
  case 275:
#line 1071 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); ;}
d6029 2
a6030 7
  case 276:
#line 1073 "parse.y"
    { ((*yyvalp).ttype) = build_procedural_type ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 278:
#line 1079 "parse.y"
d6034 2
a6035 2
  case 279:
#line 1081 "parse.y"
d6039 2
a6040 7
  case 282:
#line 1090 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 283:
#line 1091 "parse.y"
d6044 2
a6045 2
  case 284:
#line 1093 "parse.y"
d6049 2
a6050 2
  case 286:
#line 1099 "parse.y"
d6054 2
a6055 2
  case 287:
#line 1101 "parse.y"
d6059 2
a6060 2
  case 288:
#line 1106 "parse.y"
d6064 3
a6066 7
  case 289:
#line 1108 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 0);
      ;}
d6069 3
a6071 3
  case 290:
#line 1114 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6074 3
a6076 3
  case 291:
#line 1116 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6079 3
a6081 7
  case 292:
#line 1118 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      boolean_type_node, 1);
      ;}
d6084 2
a6085 11
  case 293:
#line 1124 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 1);
      ;}
    break;

  case 294:
#line 1130 "parse.y"
d6089 2
a6090 2
  case 295:
#line 1132 "parse.y"
d6094 2
a6095 2
  case 296:
#line 1134 "parse.y"
d6099 2
a6100 2
  case 297:
#line 1136 "parse.y"
d6104 2
a6105 2
  case 298:
#line 1138 "parse.y"
d6109 2
a6110 2
  case 301:
#line 1145 "parse.y"
d6114 2
a6115 2
  case 302:
#line 1147 "parse.y"
d6119 2
a6120 2
  case 303:
#line 1151 "parse.y"
d6124 3
a6126 3
  case 304:
#line 1153 "parse.y"
    { chk_dialect ("initialization with `:=' is", VAX_PASCAL|SUN_PASCAL); ;}
d6129 2
a6130 2
  case 305:
#line 1155 "parse.y"
d6134 2
a6135 2
  case 306:
#line 1162 "parse.y"
d6139 2
a6140 2
  case 307:
#line 1173 "parse.y"
d6144 2
a6145 2
  case 308:
#line 1175 "parse.y"
d6149 2
a6150 2
  case 309:
#line 1177 "parse.y"
d6157 2
a6158 2
  case 310:
#line 1182 "parse.y"
d6162 3
a6164 7
  case 313:
#line 1192 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 0);
      ;}
d6167 3
a6169 3
  case 314:
#line 1198 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6172 3
a6174 3
  case 315:
#line 1200 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
d6177 3
a6179 3
  case 316:
#line 1202 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6182 3
a6184 3
  case 317:
#line 1204 "parse.y"
    { ((*yyvalp).ttype) = build_operator_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6187 3
a6189 7
  case 318:
#line 1214 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 0);
      ;}
d6192 3
a6194 3
  case 319:
#line 1220 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6197 2
a6198 25
  case 320:
#line 1222 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 321:
#line 1224 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      boolean_type_node, 1);
      ;}
    break;

  case 322:
#line 1230 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE);
        ((*yyvalp).ttype) = build_routine_heading ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 1);
      ;}
    break;

  case 325:
#line 1244 "parse.y"
d6202 2
a6203 2
  case 326:
#line 1249 "parse.y"
d6207 2
a6208 2
  case 327:
#line 1251 "parse.y"
d6212 2
a6213 2
  case 328:
#line 1253 "parse.y"
d6217 2
a6218 2
  case 329:
#line 1255 "parse.y"
d6222 2
a6223 2
  case 330:
#line 1257 "parse.y"
d6227 2
a6228 2
  case 331:
#line 1259 "parse.y"
d6232 2
a6233 2
  case 332:
#line 1261 "parse.y"
d6237 2
a6238 2
  case 333:
#line 1263 "parse.y"
d6242 2
a6243 2
  case 334:
#line 1265 "parse.y"
d6247 2
a6248 2
  case 336:
#line 1271 "parse.y"
d6252 2
a6253 2
  case 337:
#line 1273 "parse.y"
d6257 2
a6258 2
  case 338:
#line 1278 "parse.y"
d6262 2
a6263 2
  case 340:
#line 1284 "parse.y"
d6267 2
a6268 2
  case 342:
#line 1290 "parse.y"
d6272 2
a6273 2
  case 343:
#line 1292 "parse.y"
d6277 2
a6278 2
  case 344:
#line 1294 "parse.y"
d6282 2
a6283 2
  case 345:
#line 1296 "parse.y"
d6287 2
a6288 2
  case 346:
#line 1298 "parse.y"
d6292 2
a6293 2
  case 352:
#line 1314 "parse.y"
d6297 2
a6298 2
  case 353:
#line 1316 "parse.y"
d6302 2
a6303 12
  case 354:
#line 1320 "parse.y"
    { push_scope (); ;}
    break;

  case 355:
#line 1320 "parse.y"
    { ((*yyvalp).ttype) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 357:
#line 1325 "parse.y"
d6307 2
a6308 2
  case 358:
#line 1327 "parse.y"
d6312 2
a6313 2
  case 359:
#line 1329 "parse.y"
d6317 2
a6318 2
  case 360:
#line 1331 "parse.y"
d6322 2
a6323 2
  case 361:
#line 1333 "parse.y"
d6327 2
a6328 2
  case 363:
#line 1339 "parse.y"
d6332 2
a6333 2
  case 364:
#line 1341 "parse.y"
d6337 2
a6338 2
  case 366:
#line 1347 "parse.y"
d6342 2
a6343 2
  case 367:
#line 1349 "parse.y"
d6347 2
a6348 2
  case 368:
#line 1351 "parse.y"
d6352 2
a6353 7
  case 369:
#line 1353 "parse.y"
    { ((*yyvalp).ttype) = build_formal_param ((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 3, 1); ;}
    break;

  case 370:
#line 1355 "parse.y"
d6357 3
a6359 7
  case 371:
#line 1357 "parse.y"
    { 
        pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE); 
        ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE,
                                      void_type_node, 0);
      ;}
d6362 3
a6364 3
  case 372:
#line 1363 "parse.y"
    { pop_param_level ((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6367 2
a6368 7
  case 373:
#line 1365 "parse.y"
    { ((*yyvalp).ttype) = build_routine_heading (NULL_TREE, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.ttype), 0); ;}
    break;

  case 374:
#line 1370 "parse.y"
d6372 2
a6373 2
  case 375:
#line 1372 "parse.y"
d6377 2
a6378 2
  case 378:
#line 1379 "parse.y"
d6382 2
a6383 2
  case 380:
#line 1385 "parse.y"
d6387 2
a6388 2
  case 383:
#line 1395 "parse.y"
d6392 2
a6393 2
  case 384:
#line 1397 "parse.y"
d6397 2
a6398 2
  case 388:
#line 1408 "parse.y"
d6402 2
a6403 2
  case 391:
#line 1418 "parse.y"
d6407 2
a6408 2
  case 392:
#line 1420 "parse.y"
d6416 2
a6417 2
  case 394:
#line 1430 "parse.y"
d6421 2
a6422 2
  case 395:
#line 1432 "parse.y"
d6426 2
a6427 2
  case 397:
#line 1438 "parse.y"
d6431 2
a6432 2
  case 398:
#line 1443 "parse.y"
d6436 2
a6437 2
  case 401:
#line 1455 "parse.y"
d6441 2
a6442 2
  case 403:
#line 1461 "parse.y"
d6446 2
a6447 2
  case 406:
#line 1468 "parse.y"
d6451 2
a6452 2
  case 407:
#line 1470 "parse.y"
d6456 2
a6457 2
  case 409:
#line 1476 "parse.y"
d6461 2
a6462 2
  case 410:
#line 1478 "parse.y"
d6466 2
a6467 2
  case 412:
#line 1486 "parse.y"
d6471 2
a6472 2
  case 413:
#line 1488 "parse.y"
d6476 2
a6477 2
  case 418:
#line 1503 "parse.y"
d6481 2
a6482 2
  case 419:
#line 1505 "parse.y"
d6486 2
a6487 2
  case 420:
#line 1507 "parse.y"
d6491 2
a6492 2
  case 421:
#line 1509 "parse.y"
d6496 2
a6497 2
  case 422:
#line 1511 "parse.y"
d6501 2
a6502 2
  case 423:
#line 1513 "parse.y"
d6506 2
a6507 2
  case 424:
#line 1515 "parse.y"
d6511 2
a6512 2
  case 425:
#line 1517 "parse.y"
d6516 2
a6517 7
  case 426:
#line 1519 "parse.y"
    { build_predef_call (p_Exit, build_tree_list ((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.ttype), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 428:
#line 1522 "parse.y"
d6521 2
a6522 2
  case 429:
#line 1524 "parse.y"
d6526 2
a6527 2
  case 430:
#line 1526 "parse.y"
d6531 2
a6532 2
  case 431:
#line 1528 "parse.y"
d6540 2
a6541 2
  case 432:
#line 1534 "parse.y"
d6545 2
a6546 2
  case 433:
#line 1536 "parse.y"
d6557 2
a6558 2
  case 434:
#line 1545 "parse.y"
d6570 2
a6571 2
  case 435:
#line 1555 "parse.y"
d6575 2
a6576 2
  case 436:
#line 1557 "parse.y"
d6580 2
a6581 2
  case 437:
#line 1559 "parse.y"
d6585 2
a6586 2
  case 438:
#line 1561 "parse.y"
d6590 2
a6591 2
  case 439:
#line 1563 "parse.y"
d6595 2
a6596 2
  case 440:
#line 1565 "parse.y"
d6600 2
a6601 2
  case 441:
#line 1567 "parse.y"
d6605 2
a6606 2
  case 442:
#line 1569 "parse.y"
d6610 2
a6611 2
  case 443:
#line 1571 "parse.y"
d6615 2
a6616 2
  case 444:
#line 1573 "parse.y"
d6620 2
a6621 2
  case 445:
#line 1575 "parse.y"
d6625 2
a6626 2
  case 446:
#line 1577 "parse.y"
d6630 2
a6631 2
  case 447:
#line 1582 "parse.y"
d6635 2
a6636 2
  case 449:
#line 1588 "parse.y"
d6640 2
a6641 2
  case 450:
#line 1590 "parse.y"
d6645 2
a6646 2
  case 451:
#line 1592 "parse.y"
d6650 2
a6651 2
  case 452:
#line 1594 "parse.y"
d6655 2
a6656 2
  case 453:
#line 1599 "parse.y"
d6660 2
a6661 2
  case 454:
#line 1601 "parse.y"
d6665 2
a6666 2
  case 455:
#line 1606 "parse.y"
d6670 2
a6671 2
  case 456:
#line 1608 "parse.y"
d6678 2
a6679 2
  case 457:
#line 1616 "parse.y"
d6689 2
a6690 2
  case 458:
#line 1624 "parse.y"
d6694 2
a6695 2
  case 459:
#line 1629 "parse.y"
d6699 2
a6700 2
  case 461:
#line 1635 "parse.y"
d6704 2
a6705 2
  case 462:
#line 1637 "parse.y"
d6709 2
a6710 2
  case 464:
#line 1643 "parse.y"
d6714 2
a6715 2
  case 465:
#line 1645 "parse.y"
d6719 2
a6720 2
  case 466:
#line 1647 "parse.y"
d6724 2
a6725 2
  case 467:
#line 1649 "parse.y"
d6729 2
a6730 2
  case 468:
#line 1654 "parse.y"
d6734 2
a6735 2
  case 469:
#line 1656 "parse.y"
d6739 2
a6740 2
  case 471:
#line 1662 "parse.y"
d6744 2
a6745 2
  case 472:
#line 1664 "parse.y"
d6749 2
a6750 2
  case 473:
#line 1666 "parse.y"
d6754 2
a6755 2
  case 475:
#line 1672 "parse.y"
d6759 2
a6760 2
  case 476:
#line 1674 "parse.y"
d6764 2
a6765 2
  case 477:
#line 1676 "parse.y"
d6769 2
a6770 2
  case 478:
#line 1678 "parse.y"
d6774 2
a6775 2
  case 479:
#line 1683 "parse.y"
d6779 2
a6780 2
  case 480:
#line 1685 "parse.y"
d6784 2
a6785 2
  case 481:
#line 1687 "parse.y"
d6789 2
a6790 2
  case 483:
#line 1693 "parse.y"
d6794 2
a6795 2
  case 485:
#line 1699 "parse.y"
d6799 2
a6800 2
  case 486:
#line 1704 "parse.y"
d6804 2
a6805 2
  case 487:
#line 1706 "parse.y"
d6809 2
a6810 2
  case 488:
#line 1708 "parse.y"
d6814 2
a6815 2
  case 489:
#line 1710 "parse.y"
d6819 2
a6820 2
  case 490:
#line 1712 "parse.y"
d6824 2
a6825 2
  case 491:
#line 1714 "parse.y"
d6829 2
a6830 2
  case 492:
#line 1716 "parse.y"
d6834 2
a6835 2
  case 493:
#line 1718 "parse.y"
d6839 2
a6840 2
  case 494:
#line 1720 "parse.y"
d6844 2
a6845 2
  case 495:
#line 1722 "parse.y"
d6849 2
a6850 2
  case 496:
#line 1727 "parse.y"
d6854 2
a6855 2
  case 497:
#line 1729 "parse.y"
d6859 2
a6860 2
  case 501:
#line 1740 "parse.y"
d6864 2
a6865 2
  case 502:
#line 1745 "parse.y"
d6869 2
a6870 2
  case 503:
#line 1750 "parse.y"
d6874 2
a6875 2
  case 504:
#line 1752 "parse.y"
d6879 2
a6880 2
  case 505:
#line 1759 "parse.y"
d6884 4
a6887 4
            && ( PASCAL_CST_PARENTHESES (((*yyvalp).ttype))
                 || !(TREE_CODE (((*yyvalp).ttype)) == STRING_CST
                      || (TREE_CODE_CLASS (TREE_CODE (((*yyvalp).ttype))) == tcc_constant
                          && PASCAL_CST_FRESH (((*yyvalp).ttype))))))
d6892 2
a6893 2
  case 506:
#line 1772 "parse.y"
d6897 2
a6898 2
  case 507:
#line 1774 "parse.y"
d6902 2
a6903 2
  case 509:
#line 1780 "parse.y"
d6907 2
a6908 2
  case 510:
#line 1782 "parse.y"
d6912 2
a6913 2
  case 511:
#line 1784 "parse.y"
d6917 2
a6918 2
  case 512:
#line 1786 "parse.y"
d6922 2
a6923 2
  case 513:
#line 1788 "parse.y"
d6927 2
a6928 2
  case 515:
#line 1794 "parse.y"
d6932 2
a6933 2
  case 516:
#line 1796 "parse.y"
d6937 2
a6938 2
  case 517:
#line 1798 "parse.y"
d6942 2
a6943 2
  case 518:
#line 1800 "parse.y"
d6947 2
a6948 2
  case 520:
#line 1806 "parse.y"
d6952 2
a6953 2
  case 521:
#line 1808 "parse.y"
d6957 2
a6958 2
  case 522:
#line 1810 "parse.y"
d6962 2
a6963 2
  case 523:
#line 1812 "parse.y"
d6967 2
a6968 2
  case 524:
#line 1814 "parse.y"
d6972 2
a6973 2
  case 525:
#line 1819 "parse.y"
d6977 2
a6978 2
  case 526:
#line 1821 "parse.y"
d6982 2
a6983 2
  case 529:
#line 1825 "parse.y"
d6987 2
a6988 2
  case 531:
#line 1828 "parse.y"
d6992 2
a6993 2
  case 537:
#line 1844 "parse.y"
d6997 2
a6998 2
  case 538:
#line 1849 "parse.y"
d7002 2
a7003 2
  case 539:
#line 1851 "parse.y"
d7007 2
a7008 2
  case 542:
#line 1858 "parse.y"
d7012 2
a7013 2
  case 561:
#line 1869 "parse.y"
d7024 2
a7025 2
  case 562:
#line 1881 "parse.y"
d7038 2
a7039 2
  case 564:
#line 1896 "parse.y"
d7043 2
a7044 2
  case 565:
#line 1901 "parse.y"
d7048 2
a7049 2
  case 568:
#line 1908 "parse.y"
d7053 2
a7054 2
  case 569:
#line 1910 "parse.y"
d7058 2
a7059 2
  case 570:
#line 1912 "parse.y"
d7063 2
a7064 2
  case 571:
#line 1914 "parse.y"
d7068 2
a7069 2
  case 572:
#line 1916 "parse.y"
d7073 2
a7074 2
  case 573:
#line 1918 "parse.y"
d7078 2
a7079 2
  case 574:
#line 1920 "parse.y"
d7083 2
a7084 2
  case 575:
#line 1922 "parse.y"
d7088 2
a7089 2
  case 576:
#line 1924 "parse.y"
d7093 2
a7094 2
  case 577:
#line 1926 "parse.y"
d7098 2
a7099 7
  case 578:
#line 1928 "parse.y"
    { ((*yyvalp).ttype) = build_predef_call (p_StringOf, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 579:
#line 1930 "parse.y"
d7103 2
a7104 2
  case 580:
#line 1932 "parse.y"
d7108 2
a7109 2
  case 581:
#line 1934 "parse.y"
d7113 2
a7114 2
  case 582:
#line 1936 "parse.y"
d7118 2
a7119 2
  case 583:
#line 1938 "parse.y"
d7123 2
a7124 2
  case 585:
#line 1944 "parse.y"
d7128 2
a7129 2
  case 586:
#line 1946 "parse.y"
d7137 2
a7138 2
  case 587:
#line 1954 "parse.y"
d7142 2
a7143 2
  case 588:
#line 1959 "parse.y"
d7147 2
a7148 2
  case 589:
#line 1961 "parse.y"
d7152 2
a7153 2
  case 590:
#line 1963 "parse.y"
d7157 2
a7158 2
  case 591:
#line 1965 "parse.y"
d7162 2
a7163 2
  case 593:
#line 1971 "parse.y"
d7167 2
a7168 2
  case 594:
#line 1973 "parse.y"
d7172 2
a7173 2
  case 595:
#line 1975 "parse.y"
d7177 2
a7178 2
  case 596:
#line 1981 "parse.y"
d7182 2
a7183 2
  case 597:
#line 1983 "parse.y"
d7187 2
a7188 2
  case 598:
#line 1985 "parse.y"
d7192 2
a7193 2
  case 599:
#line 1990 "parse.y"
d7197 2
a7198 2
  case 601:
#line 1996 "parse.y"
d7202 2
a7203 2
  case 602:
#line 1998 "parse.y"
d7207 2
a7208 2
  case 606:
#line 2006 "parse.y"
d7212 2
a7213 2
  case 607:
#line 2011 "parse.y"
d7217 2
a7218 2
  case 608:
#line 2013 "parse.y"
d7222 2
a7223 2
  case 609:
#line 2018 "parse.y"
d7227 2
a7228 2
  case 610:
#line 2020 "parse.y"
d7232 2
a7233 2
  case 611:
#line 2025 "parse.y"
d7237 2
a7238 2
  case 612:
#line 2030 "parse.y"
d7242 2
a7243 2
  case 613:
#line 2035 "parse.y"
d7247 2
a7248 2
  case 614:
#line 2037 "parse.y"
d7252 2
a7253 2
  case 615:
#line 2039 "parse.y"
d7257 2
a7258 2
  case 616:
#line 2041 "parse.y"
d7262 2
a7263 2
  case 617:
#line 2043 "parse.y"
d7267 2
a7268 2
  case 619:
#line 2049 "parse.y"
d7272 2
a7273 2
  case 620:
#line 2051 "parse.y"
d7277 2
a7278 2
  case 622:
#line 2057 "parse.y"
d7282 2
a7283 2
  case 623:
#line 2062 "parse.y"
d7287 2
a7288 2
  case 624:
#line 2064 "parse.y"
d7292 2
a7293 2
  case 626:
#line 2070 "parse.y"
d7297 2
a7298 2
  case 627:
#line 2072 "parse.y"
d7302 2
a7303 2
  case 628:
#line 2074 "parse.y"
d7307 2
a7308 2
  case 629:
#line 2076 "parse.y"
d7312 2
a7313 2
  case 630:
#line 2081 "parse.y"
d7317 2
a7318 2
  case 631:
#line 2083 "parse.y"
d7322 2
a7323 2
  case 632:
#line 2085 "parse.y"
d7327 2
a7328 2
  case 633:
#line 2090 "parse.y"
d7332 2
a7333 2
  case 634:
#line 2092 "parse.y"
d7337 2
a7338 2
  case 636:
#line 2098 "parse.y"
d7342 2
a7343 2
  case 637:
#line 2100 "parse.y"
d7347 2
a7348 2
  case 638:
#line 2102 "parse.y"
d7352 2
a7353 2
  case 639:
#line 2107 "parse.y"
d7357 2
a7358 2
  case 640:
#line 2109 "parse.y"
d7362 2
a7363 2
  case 641:
#line 2115 "parse.y"
d7367 2
a7368 2
  case 642:
#line 2116 "parse.y"
d7372 2
a7373 2
  case 643:
#line 2120 "parse.y"
d7377 2
a7378 2
  case 644:
#line 2121 "parse.y"
d7382 2
a7383 2
  case 645:
#line 2122 "parse.y"
d7387 2
a7388 2
  case 646:
#line 2126 "parse.y"
d7392 2
a7393 2
  case 647:
#line 2127 "parse.y"
d7397 2
a7398 2
  case 648:
#line 2128 "parse.y"
d7402 2
a7403 2
  case 649:
#line 2129 "parse.y"
d7407 2
a7408 2
  case 650:
#line 2130 "parse.y"
d7412 2
a7413 2
  case 651:
#line 2131 "parse.y"
d7417 2
a7418 2
  case 652:
#line 2132 "parse.y"
d7422 2
a7423 2
  case 653:
#line 2136 "parse.y"
d7427 2
a7428 2
  case 654:
#line 2137 "parse.y"
d7432 2
a7433 2
  case 655:
#line 2138 "parse.y"
d7437 2
a7438 2
  case 656:
#line 2139 "parse.y"
d7442 2
a7443 2
  case 657:
#line 2140 "parse.y"
d7447 2
a7448 2
  case 658:
#line 2141 "parse.y"
d7452 2
a7453 2
  case 659:
#line 2145 "parse.y"
d7457 2
a7458 2
  case 660:
#line 2146 "parse.y"
d7462 2
a7463 2
  case 661:
#line 2147 "parse.y"
d7467 2
a7468 2
  case 662:
#line 2148 "parse.y"
d7472 2
a7473 2
  case 663:
#line 2149 "parse.y"
d7477 2
a7478 2
  case 664:
#line 2150 "parse.y"
d7482 2
a7483 2
  case 665:
#line 2154 "parse.y"
d7487 2
a7488 2
  case 666:
#line 2155 "parse.y"
d7492 2
a7493 2
  case 667:
#line 2156 "parse.y"
d7497 2
a7498 2
  case 668:
#line 2157 "parse.y"
d7502 2
a7503 2
  case 669:
#line 2161 "parse.y"
d7507 2
a7508 2
  case 670:
#line 2162 "parse.y"
d7512 2
a7513 2
  case 671:
#line 2163 "parse.y"
d7517 2
a7518 2
  case 672:
#line 2164 "parse.y"
d7522 2
a7523 2
  case 673:
#line 2169 "parse.y"
d7527 2
a7528 2
  case 674:
#line 2171 "parse.y"
d7532 2
a7533 2
  case 675:
#line 2172 "parse.y"
d7537 2
a7538 2
  case 676:
#line 2173 "parse.y"
d7542 2
a7543 2
  case 677:
#line 2174 "parse.y"
d7547 2
a7548 2
  case 678:
#line 2175 "parse.y"
d7552 2
a7553 2
  case 679:
#line 2176 "parse.y"
d7557 2
a7558 2
  case 680:
#line 2182 "parse.y"
d7562 2
a7563 2
  case 681:
#line 2183 "parse.y"
d7567 2
a7568 2
  case 682:
#line 2184 "parse.y"
d7572 2
a7573 2
  case 683:
#line 2185 "parse.y"
d7577 2
a7578 2
  case 684:
#line 2186 "parse.y"
d7582 2
a7583 2
  case 685:
#line 2187 "parse.y"
d7587 2
a7588 2
  case 686:
#line 2188 "parse.y"
d7592 2
a7593 2
  case 687:
#line 2189 "parse.y"
d7597 2
a7598 2
  case 688:
#line 2190 "parse.y"
d7602 2
a7603 2
  case 689:
#line 2191 "parse.y"
d7607 2
a7608 2
  case 690:
#line 2192 "parse.y"
d7612 2
a7613 2
  case 691:
#line 2193 "parse.y"
d7617 2
a7618 2
  case 692:
#line 2194 "parse.y"
d7622 2
a7623 2
  case 693:
#line 2195 "parse.y"
d7627 2
a7628 2
  case 694:
#line 2196 "parse.y"
d7632 2
a7633 2
  case 695:
#line 2197 "parse.y"
d7637 2
a7638 2
  case 696:
#line 2198 "parse.y"
d7642 2
a7643 2
  case 697:
#line 2199 "parse.y"
d7647 2
a7648 2
  case 698:
#line 2200 "parse.y"
d7652 2
a7653 2
  case 699:
#line 2201 "parse.y"
d7657 2
a7658 2
  case 700:
#line 2202 "parse.y"
d7662 2
a7663 2
  case 703:
#line 2208 "parse.y"
d7667 2
a7668 2
  case 704:
#line 2209 "parse.y"
d7672 2
a7673 2
  case 705:
#line 2210 "parse.y"
d7677 2
a7678 2
  case 706:
#line 2211 "parse.y"
d7682 2
a7683 2
  case 707:
#line 2215 "parse.y"
d7687 2
a7688 2
  case 708:
#line 2216 "parse.y"
d7692 2
a7693 2
  case 709:
#line 2217 "parse.y"
d7697 2
a7698 2
  case 710:
#line 2218 "parse.y"
d7702 2
a7703 2
  case 713:
#line 2230 "parse.y"
d7707 2
a7708 2
  case 714:
#line 2235 "parse.y"
d7712 2
a7713 2
  case 715:
#line 2240 "parse.y"
d7717 2
a7718 2
  case 716:
#line 2242 "parse.y"
d7722 2
a7723 2
  case 717:
#line 2244 "parse.y"
d7731 2
a7732 2
  case 718:
#line 2250 "parse.y"
d7736 2
a7737 2
  case 720:
#line 2256 "parse.y"
d7741 2
a7742 2
  case 721:
#line 2258 "parse.y"
d7746 2
a7747 2
  case 723:
#line 2264 "parse.y"
d7751 2
a7752 2
  case 724:
#line 2269 "parse.y"
d7756 2
a7757 2
  case 771:
#line 2323 "parse.y"
d7761 2
a7762 2
  case 780:
#line 2340 "parse.y"
d7766 2
a7767 2
  case 781:
#line 2347 "parse.y"
d7771 2
a7772 2
  case 782:
#line 2352 "parse.y"
d7776 2
a7777 2
  case 783:
#line 2357 "parse.y"
d7781 2
a7782 2
  case 784:
#line 2362 "parse.y"
d7786 2
a7787 2
  case 785:
#line 2367 "parse.y"
d7791 2
a7792 2
  case 786:
#line 2372 "parse.y"
d7796 2
a7797 2
  case 787:
#line 2377 "parse.y"
d7801 2
a7802 2
  case 788:
#line 2379 "parse.y"
d7806 2
a7807 2
  case 795:
#line 2396 "parse.y"
d7811 2
a7812 2
  case 796:
#line 2401 "parse.y"
d7816 2
a7817 2
  case 797:
#line 2406 "parse.y"
d7834 1
a7834 1
#line 8018 "parse.c"
d8070 1
a8070 1
  if (YYMAXDEPTH < yysize + YYHEADROOM)
d9282 1
a9282 1
#line 2409 "parse.y"
a9371 1
  int res;
d9373 1
a9373 17
  res = main_yyparse ();
#ifdef GCC_4_0
  /* @@@@@@@@@@ cgraphunit do not notice if address of a routine is
     referenced from static global variable */
  {
    tree decl = getdecls();
    while (decl) 
      {
        if (TREE_CODE (decl) == FUNCTION_DECL && TREE_ADDRESSABLE (decl))
          mark_decl_referenced (decl);
        decl = TREE_CHAIN (decl);
      }
  }
  cgraph_finalize_compilation_unit ();
  cgraph_optimize ();
#endif
  return res;
@


