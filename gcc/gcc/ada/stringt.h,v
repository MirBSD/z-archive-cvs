head	1.1;
branch	1.1.101;
access;
symbols
	MIRBSD_10_BASE:1.1.101.1
	MIRBSD_9_BASE:1.1.101.1
	gcc-3_4_6:1.1.101.1
	MIRBSD_8:1.1.101.1.0.2
	MIRBSD_8_BASE:1.1.101.1
	gcc-3_4-20051206:1.1.101.1
	gcc-3_4-20051115:1.1.101.1
	gcc-3_4-20050823:1.1.101.1
	FSF:1.1.101;
locks; strict;
comment	@ * @;


1.1
date	2005.03.21.12.06.02;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.03.21.12.06.02;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/****************************************************************************
 *                                                                          *
 *                         GNAT COMPILER COMPONENTS                         *
 *                                                                          *
 *                              S T R I N G T                               *
 *                                                                          *
 *                              C Header File                               *
 *                                                                          *
 *          Copyright (C) 1992-2003 Free Software Foundation, Inc.          *
 *                                                                          *
 * GNAT is free software;  you can  redistribute it  and/or modify it under *
 * terms of the  GNU General Public License as published  by the Free Soft- *
 * ware  Foundation;  either version 2,  or (at your option) any later ver- *
 * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *
 * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License *
 * for  more details.  You should have  received  a copy of the GNU General *
 * Public License  distributed with GNAT;  see file COPYING.  If not, write *
 * to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, *
 * MA 02111-1307, USA.                                                      *
 *                                                                          *
 * GNAT was originally developed  by the GNAT team at  New York University. *
 * Extensive contributions were provided by Ada Core Technologies Inc.      *
 *                                                                          *
 ****************************************************************************/

/* This file is the C file that corresponds to the Ada package spec
   Stringt. It was created manually from stringt.ads and stringt.adb

   Note: only the access functions are provided, since the tree transformer
   is not allowed to modify the tree or its auxiliary structures.

   This package contains routines for handling the strings table which is
   used to store string constants encountered in the source, and also those
   additional string constants generated by compile time concatenation and
   other similar processing.

   A string constant in this table consists of a series of Char_Code values,
   so that 16-bit character codes can be properly handled if this feature is
   implemented in the scanner.

   There is no guarantee that hashing is used in the implementation. This
   means that the caller cannot count on having the same Id value for two
   identical strings stored separately.

   The String_Id values reference entries in the Strings table, which
   contains String_Entry records that record the length of each stored string
   and its starting location in the String_Chars table.  */

struct String_Entry
{
  Int String_Index;
  Int Length;
};

/* Pointer to string entry vector. This pointer is passed to the tree
   transformer and stored in a global location.  */
extern struct String_Entry *Strings_Ptr;

/* Pointer to name characters table. This pointer is passed to the tree
   transformer and stored in a global location for access from here. The
   String_Index values are subscripts into this array.  */
extern Char_Code *String_Chars_Ptr;


/* String_Length returns the length of the specified string.  */
INLINE Int String_Length (String_Id);

INLINE Int
String_Length (String_Id Id)
{
  return Strings_Ptr[Id - First_String_Id].Length;
}


/* Get_String_Char obtains the specified character from a stored string.  The
   lower bound of stored strings is always 1, so the range of values is 1 to
   String_Length (Id).  */
INLINE Char_Code Get_String_Char (String_Id, Int);

INLINE Char_Code
Get_String_Char (String_Id Id, Int Index)
{
  return
    String_Chars_Ptr
      [Strings_Ptr[Id - First_String_Id].String_Index + Index - 1];
}
@


1.1.101.1
log
@Import the GNU Compiler Collection 3.4-stable
from gcc-3.4-20050318.tar.bz2 after having
* all top-level non-directories (files)
  - except config.if
and these directories completely:
* INSTALL
* boehm-gc/Mac_files
* boehm-gc/cord
* boehm-gc/doc
* boehm-gc/tests
* contrib
  - except texi2pod.pl
* gcc/f
* gcc/po
* gcc/testsuite
* gcc/treelang
* include
* intl
* libf2c
* libffi/testsuite
* libiberty
* libjava/testsuite
* libstdc++-v3/docs
* libstdc++-v3/po
* libstdc++-v3/scripts
* libstdc++-v3/testsuite
* maintainer-scripts
* zlib
removed before importing.
@
text
@@
