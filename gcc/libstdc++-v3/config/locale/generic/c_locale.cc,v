head	1.3;
access;
symbols
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.1.101.1
	gcc-3_4_6:1.1.101.1
	MIRBSD_8:1.1.101.1.0.2
	MIRBSD_8_BASE:1.1.101.1
	gcc-3_4-20051206:1.1.101.1
	gcc-3_4-20051115:1.1.101.1
	gcc-3_4-20050823:1.1.101.1
	FSF:1.1.101;
locks; strict;
comment	@// @;


1.3
date	2016.01.02.21.33.01;	author tg;	state Exp;
branches;
next	1.2;
commitid	10056884200442406AA;

1.2
date	2007.06.06.12.22.13;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004666A6F74A439B38;

1.1
date	2005.03.21.12.09.05;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.03.21.12.09.05;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove #ifndef __MirBSD__ before setlocale(); related changes
@
text
@// Wrapper for underlying C-language localization -*- C++ -*-

// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
// USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

//
// ISO C++ 14882: 22.8  Standard locale categories.
//

// Written by Benjamin Kosnik <bkoz@@redhat.com>

#include <cerrno>  // For errno
#include <cmath>  // For isinf, finite, finitef, fabs
#include <cstdlib>  // For strof, strtold
#include <locale>

#ifdef _GLIBCXX_HAVE_IEEEFP_H
#include <ieeefp.h>
#endif

namespace std 
{
  // Specializations for all types used in num_get.
  template<>
    void
    __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, 
		   const __c_locale&) 	      
    {
      if (!(__err & ios_base::failbit))
	{
	  // Assumes __s formatted for "C" locale.
	  char* __old = strdup(setlocale(LC_ALL, NULL));
	  setlocale(LC_ALL, "C");
	  char* __sanity;
	  errno = 0;
#if defined(_GLIBCXX_HAVE_STRTOF)
	  float __f = strtof(__s, &__sanity);
#else
	  double __d = strtod(__s, &__sanity);
	  float __f = static_cast<float>(__d);
#ifdef _GLIBCXX_HAVE_FINITEF
	  if (!finitef (__f))
	    errno = ERANGE;
#elif defined (_GLIBCXX_HAVE_FINITE)
	  if (!finite (static_cast<double> (__f)))
	    errno = ERANGE;
#elif defined (_GLIBCXX_HAVE_ISINF)
	  if (isinf (static_cast<double> (__f)))
	    errno = ERANGE;
#else
	  if (fabs(__d) > numeric_limits<float>::max())
	    errno = ERANGE;
#endif
#endif
          if (__sanity != __s && errno != ERANGE)
	    __v = __f;
	  else
	    __err |= ios_base::failbit;
	  setlocale(LC_ALL, __old);
	  free(__old);
	}
    }

  template<>
    void
    __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err, 
		   const __c_locale&) 
    {
      if (!(__err & ios_base::failbit))
	{
	  // Assumes __s formatted for "C" locale.
	  char* __old = strdup(setlocale(LC_ALL, NULL));
	  setlocale(LC_ALL, "C");
	  char* __sanity;
	  errno = 0;
	  double __d = strtod(__s, &__sanity);
          if (__sanity != __s && errno != ERANGE)
	    __v = __d;
	  else
	    __err |= ios_base::failbit;
	  setlocale(LC_ALL, __old);
	  free(__old);
	}
    }

  template<>
    void
    __convert_to_v(const char* __s, long double& __v, 
		   ios_base::iostate& __err, const __c_locale&) 
    {
      if (!(__err & ios_base::failbit))
	{
	  // Assumes __s formatted for "C" locale.
	  char* __old = strdup(setlocale(LC_ALL, NULL));
	  setlocale(LC_ALL, "C");
#if defined(_GLIBCXX_HAVE_STRTOLD)
	  char* __sanity;
	  errno = 0;
	  long double __ld = strtold(__s, &__sanity);
          if (__sanity != __s && errno != ERANGE)
	    __v = __ld;
#else
	  typedef char_traits<char>::int_type int_type;
	  long double __ld;
	  errno = 0;
	  int __p = sscanf(__s, "%Lf", &__ld);
	  if (errno == ERANGE)
	    __p = 0;
#ifdef _GLIBCXX_HAVE_FINITEL
	  if ((__p == 1) && !finitel (__ld))
	    __p = 0;
#endif
	  if (__p && static_cast<int_type>(__p) != char_traits<char>::eof())
	    __v = __ld;
#endif
	  else
	    __err |= ios_base::failbit;
	  setlocale(LC_ALL, __old);
	  free(__old);
	}
    }

  void
  locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s, 
				    __c_locale)
  {
    // Currently, the generic model only supports the "C" locale.
    // See http://gcc.gnu.org/ml/libstdc++/2003-02/msg00345.html
    __cloc = NULL;
    if (strcmp(__s, "C"))
      __throw_runtime_error(__N("locale::facet::_S_create_c_locale "
			    "name not valid"));
  }

  void
  locale::facet::_S_destroy_c_locale(__c_locale& __cloc)
  { __cloc = NULL; }

  __c_locale
  locale::facet::_S_clone_c_locale(__c_locale&)
  { return __c_locale(); }
} // namespace std

namespace __gnu_cxx
{
  const char* const category_names[6 + _GLIBCXX_NUM_CATEGORIES] =
    {
      "LC_CTYPE", 
      "LC_NUMERIC",
      "LC_TIME",   
      "LC_COLLATE", 
      "LC_MONETARY",
      "LC_MESSAGES"
    };
}  

namespace std
{
  const char* const* const locale::_S_categories = __gnu_cxx::category_names;
}  // namespace std
@


1.2
log
@“fix” the issue of our "C" locale having a name of "en_US.UTF-8"
@
text
@a153 1
#ifndef __MirBSD__
a156 1
#endif
@


1.1
log
@Initial revision
@
text
@d154 1
d158 1
@


1.1.101.1
log
@Import the GNU Compiler Collection 3.4-stable
from gcc-3.4-20050318.tar.bz2 after having
* all top-level non-directories (files)
  - except config.if
and these directories completely:
* INSTALL
* boehm-gc/Mac_files
* boehm-gc/cord
* boehm-gc/doc
* boehm-gc/tests
* contrib
  - except texi2pod.pl
* gcc/f
* gcc/po
* gcc/testsuite
* gcc/treelang
* include
* intl
* libf2c
* libffi/testsuite
* libiberty
* libjava/testsuite
* libstdc++-v3/docs
* libstdc++-v3/po
* libstdc++-v3/scripts
* libstdc++-v3/testsuite
* maintainer-scripts
* zlib
removed before importing.
@
text
@@
