head	1.2;
access;
symbols
	MIRBSD_10_BASE:1.1.101.1
	MIRBSD_9_BASE:1.1.101.1
	gcc-3_4_6:1.1.101.1
	MIRBSD_8:1.1.101.1.0.2
	MIRBSD_8_BASE:1.1.101.1
	gcc-3_4-20051206:1.1.101.1
	gcc-3_4-20051115:1.1.101.1
	gcc-3_4-20050823:1.1.101.1
	FSF:1.1.101;
locks; strict;
comment	@ * @;


1.2
date	2013.10.31.20.06.00;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005272B7081B0E5655;

1.1
date	2005.03.21.12.09.04;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.03.21.12.09.04;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/* $MirOS$ */

// Low-level functions for atomic operations: PA-RISC version  -*- C++ -*-

// Copyright © 2013
//	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
// Copyright (C) 2002, 2004 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
// USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

#include <bits/c++config.h>
#include <bits/atomicity.h>

namespace __gnu_cxx
{
  template<int _Inst>
    struct _Atomicity_lock
    {
      static volatile int _S_atomicity_lock;
    };
  
  template<int _Inst>
  volatile int
  _Atomicity_lock<_Inst>::_S_atomicity_lock __attribute__((__aligned__(16))) = 1;

  // Because of the lack of weak support when using the hpux som
  // linker, we explicitly instantiate the atomicity lock.
  template volatile int _Atomicity_lock<0>::_S_atomicity_lock;

  int
  __attribute__((__unused__))
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  {
    _Atomic_word result;
    int tmp;
    volatile int& lock = _Atomicity_lock<0>::_S_atomicity_lock;
    
    __asm__ __volatile__ ("ldcw 0(%1),%0\n\t"
			  "cmpib,<>,n 0,%0,.+20\n\t"
			  "ldw 0(%1),%0\n\t"
			  "cmpib,= 0,%0,.-4\n\t"
			  "nop\n\t"
			  "b,n .-20"
			  : "=&r" (tmp)
			  : "r" (&lock));
    
    result = *__mem;
    *__mem = result + __val;
    /* Reset lock with PA 2.0 "ordered" store.  */
    __asm__ __volatile__ ("stw,ma %1,0(%0)"
			  : : "r" (&lock), "r" (tmp) : "memory");
    return result;
  }
  
  void
  __attribute__((__unused__))
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  {
    int tmp;
    volatile int& lock = _Atomicity_lock<0>::_S_atomicity_lock;
    
    __asm__ __volatile__ ("ldcw 0(%1),%0\n\t"
			  "cmpib,<>,n 0,%0,.+20\n\t"
			  "ldw 0(%1),%0\n\t"
			  "cmpib,= 0,%0,.-4\n\t"
			  "nop\n\t"
			  "b,n .-20"
			  : "=&r" (tmp)
			  : "r" (&lock));
    
    *__mem += __val;
    /* Reset lock with PA 2.0 "ordered" store.  */
    __asm__ __volatile__ ("stw,ma %1,0(%0)"
			  : : "r" (&lock), "r" (tmp) : "memory");
  }
} // namespace __gnu_cxx
@


1.1
log
@Initial revision
@
text
@d1 2
d5 2
d47 1
a47 1
  _Atomicity_lock<_Inst>::_S_atomicity_lock __attribute__ ((aligned (16))) = 1;
d54 1
a54 1
  __attribute__ ((__unused__))
d79 1
a79 1
  __attribute__ ((__unused__))
@


1.1.101.1
log
@Import the GNU Compiler Collection 3.4-stable
from gcc-3.4-20050318.tar.bz2 after having
* all top-level non-directories (files)
  - except config.if
and these directories completely:
* INSTALL
* boehm-gc/Mac_files
* boehm-gc/cord
* boehm-gc/doc
* boehm-gc/tests
* contrib
  - except texi2pod.pl
* gcc/f
* gcc/po
* gcc/testsuite
* gcc/treelang
* include
* intl
* libf2c
* libffi/testsuite
* libiberty
* libjava/testsuite
* libstdc++-v3/docs
* libstdc++-v3/po
* libstdc++-v3/scripts
* libstdc++-v3/testsuite
* maintainer-scripts
* zlib
removed before importing.
@
text
@@
