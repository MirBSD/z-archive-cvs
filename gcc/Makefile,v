head	1.22;
access;
symbols
	MIRBSD_10_BASE:1.21
	MIRBSD_9_BASE:1.20
	MIRBSD_8:1.14.0.2
	MIRBSD_8_BASE:1.14;
locks; strict;
comment	@# @;


1.22
date	2008.10.05.16.26.17;	author tg;	state Exp;
branches;
next	1.21;
commitid	10048E8EA7D6EAD401E;

1.21
date	2006.07.01.00.35.00;	author tg;	state Exp;
branches;
next	1.20;
commitid	10044A5C33C5FA45C94;

1.20
date	2006.03.01.20.08.09;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004405FF327F754F6C;

1.19
date	2006.03.01.14.20.25;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004405ADAB08BEE20D;

1.18
date	2006.03.01.14.17.06;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004405ACF132DE2A87;

1.17
date	2006.03.01.14.05.15;	author tg;	state Exp;
branches;
next	1.16;
commitid	1004405AA1D0F59B97C;

1.16
date	2006.03.01.13.55.45;	author tg;	state Exp;
branches;
next	1.15;
commitid	1004405A7F41212E94D;

1.15
date	2006.02.14.20.47.52;	author tg;	state Exp;
branches;
next	1.14;
commitid	10043F2407C51151E2F;

1.14
date	2005.12.05.08.16.42;	author tg;	state Exp;
branches;
next	1.13;
commitid	aaf4393f731973c;

1.13
date	2005.11.24.22.01.21;	author tg;	state Exp;
branches;
next	1.12;
commitid	1f4f438638373b19;

1.12
date	2005.11.24.19.51.50;	author tg;	state Exp;
branches;
next	1.11;
commitid	36fa438619e593e4;

1.11
date	2005.11.23.15.42.08;	author tg;	state Exp;
branches;
next	1.10;
commitid	288743848db5bbea;

1.10
date	2005.11.23.15.39.49;	author tg;	state Exp;
branches;
next	1.9;
commitid	788f43848d1d435f;

1.9
date	2005.11.22.19.40.08;	author tg;	state Exp;
branches;
next	1.8;
commitid	63484383742d1b06;

1.8
date	2005.11.22.19.38.53;	author tg;	state Exp;
branches;
next	1.7;
commitid	788d438373cd8db7;

1.7
date	2005.11.22.17.55.18;	author tg;	state Exp;
branches;
next	1.6;
commitid	52b843835b5a18a8;

1.6
date	2005.06.13.19.51.12;	author tg;	state Exp;
branches;
next	1.5;
commitid	332342ade39c3dcb;

1.5
date	2005.04.26.21.15.29;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.19.12.53.47;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.29.00.12.15;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.25.19.43.36;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.25.18.33.12;	author tg;	state Exp;
branches;
next	;


desc
@@


1.22
log
@use mksh realpath builtin instead of readlink -f for canonicalisation

note: there’s still a readlink(1) call left in, for instance, mirmake;
this does not hurt because we initially assumed that readlink(1) does
exist anyway and bundled ours just because some do not have the ‘-f’
option for realpath(2)isation
@
text
@# $MirOS: gcc/Makefile,v 1.21 2006/07/01 00:35:00 tg Exp $

.include <bsd.own.mk>
.include "${GNUSYSTEM_AUX_DIR}/locations.mk"
.include "${BSDSRCDIR}/Makefile.inc"
.include "Makefile.inc"

_STFILE_PFX=	${DESTDIR}${GCC_PREFIX}/.policy.mk
_STCMD_PFX=	${_STCMD} -f ${_STFILE_PFX}

.if ${OStype} != "MirBSD"
GCC_NATIVE=	No
.endif
GCC_NATIVE?=	Yes

SUBOBJDIR!=	realpath ${.OBJDIR}
BSDMAKE!=	whence -p ${MAKE}
CC!=		whence -p ${CC}

IGNORE_TGTS=	obj
BUILD_TGTS=	all clean depend lint prereq tags
INSTALL_TGTS=	includes install

.ifdef _CROSSBUILD
EXTRA_ENV=	PATH=/bin:/usr/bin:/sbin:/usr/sbin:${GCC_PREFIX}/${GCC_TARGET}/bin
EXTRA_ENV+=	CROSSCFLAGS=${CROSSCFLAGS:Q}
.else
EXTRA_ENV=	PATH=/bin:/usr/bin:/sbin:/usr/sbin
.endif

.if ${GCC_NATIVE:L} != "yes"
EXTRA_ENV:=	${EXTRA_ENV:S!PATH=!PATH=${BSDMAKE:H}:${CC:H}:!}
_STCMD=
_STFILE_SUB=
_STFILE_DEST=
_STFILE_PFX=
_STCMD_SUB=
_STCMD_DEST=
_STCMD_PFX=
.endif

.MAIN: all

.for _i in ${IGNORE_TGTS}
${_i}:
	cd ${.CURDIR} && ${EXTRA_ENV} exec ${BSDMAKE} -f Makefile.sub $@@
.endfor

.for _i in ${BUILD_TGTS}
${_i}: ${_STFILE_SUB}
	ulimit -dS 245760 && cd ${.CURDIR} && ${EXTRA_ENV} exec \
	    ${_STCMD_SUB} ${BSDMAKE} -f Makefile.sub $@@
.endfor

.for _i in ${INSTALL_TGTS}
${_i}:
.  if ${GCC_NATIVE:L} == "yes"
	d="${DESTDIR}${GCC_PREFIX}"; cd $${d:-/}; [[ -n $$d ]] || d="/:/*"; \
	    env WRITEDIR="$$d" NOWRITEDIR="${SUBOBJDIR}" ${EXTRA_ENV} \
	    ${SUDO} ${SHELL} ${BSDSRCDIR}/scripts/systrace.mk ${BSDMAKE}
.  endif
	cd ${.CURDIR} && ${EXTRA_ENV} exec \
	    ${_STCMD_PFX} ${BSDMAKE} -f Makefile.sub $@@
.  if ${GCC_NATIVE:L} == "yes"
	sleep 1; ${SUDO} rm -f ${_STFILE_PFX}
.  endif
.endfor

.if ${GCC_NATIVE:L} == "yes"
${_STFILE_SUB}:
	cd ${SUBOBJDIR} && env WRITEDIR="${SUBOBJDIR}" ${EXTRA_ENV} \
	    ${SHELL} ${BSDSRCDIR}/scripts/systrace.mk ${BSDMAKE}
.endif

cleandir-recursive: ${_STFILE_SUB}
	cd ${.CURDIR} && ${EXTRA_ENV} exec \
	    ${_STCMD_SUB} ${BSDMAKE} -f Makefile.sub cleandir

cleandir: cleandir-recursive local-cleandir

local-cleandir: .PHONY
	-rm -rf ${SUBOBJDIR}/bs-{1,2}
.if ${GCC_NATIVE:L} == "yes"
	-sleep 1; rm -f ${_STFILE_SUB}
.endif

b-r: .PHONY
	# Test if the targets are mounted suitable for root (BTSTF)
.for _dir in ${BSDOBJDIR} ${BSDRELDIR}
	mkdir -p ${_dir} || ${SUDO} mkdir -p ${_dir}
	${SUDO} touch ${_dir}/permissions.test
	${SUDO} chown root:wheel ${_dir}/permissions.test
	${SUDO} rm ${_dir}/permissions.test
.endfor
	touch ${BSDOBJDIR}/permissions.test && rm ${BSDOBJDIR}/permissions.test
	cd ${.CURDIR} && exec ${BSDMAKE} obj
	cd ${.CURDIR} && exec ${BSDMAKE}
	cd ${.CURDIR} && exec ${SUDO} ${BSDMAKE} install

release: .PHONY
	mkdir -p ${BSDRELDIR}/base || ${SUDO} mkdir -p ${BSDRELDIR}/base
	cd ${BSDSRCDIR} && ${EXTRA_ENV} exec \
	    ${BSDMAKE} distrib-dirs mksystrace-dest DESTDIR=${BSDRELDIR}/base
	cd ${.CURDIR} && exec ${SUDO} ${MAKE} install DESTDIR=${BSDRELDIR}/base

bootstrapbuild: ${_STFILE_SUB}
	ulimit -dS 245760 && cd ${.CURDIR} && ${EXTRA_ENV} exec \
	    ${_STCMD_SUB} ${BSDMAKE} -f Makefile.sub all \
	    NO_CXX=Yes NO_OBJC=Yes NO_PASCAL=Yes NO_BOEHMGC=Yes

bootstrap:
	@@cd ${.CURDIR} && ${MAKE} obj && exec ${MAKE} do-bootstrap \
	    _LIBERTY_GIVEN=$$(l="${_LIBERTY}"; \
	    [[ -e $${l:-/nonexistant} ]] && print yes)

_LIBERTY_GIVEN?=No
do-bootstrap:
.if ${_LIBERTY_GIVEN} == "no"
	cd ${GNU_LIBIBERTY_SRC} && exec ${MAKE} obj
	cd ${GNU_LIBIBERTY_SRC} && exec ${MAKE} depend
	cd ${GNU_LIBIBERTY_SRC} && exec ${MAKE} all
.endif
	mkdir -p ${SUBOBJDIR}/bs-{1,2}
.if ${_LIBERTY_GIVEN} == "no"
	cd ${.CURDIR} && exec ${MAKE} bootstrapbuild COMPILER_ONLY=Yes \
	    _LIBERTY=${GNU_LIBIBERTY_SRC}/obj/libiberty.a \
	    GCC_NATIVE=no GCC_PREFIX=${SUBOBJDIR}/bs-1
	cd ${.CURDIR} && exec ${MAKE} install COMPILER_ONLY=Yes \
	    _LIBERTY=${GNU_LIBIBERTY_SRC}/obj/libiberty.a \
	    GCC_NATIVE=no GCC_PREFIX=${SUBOBJDIR}/bs-1
.else
	cd ${.CURDIR} && exec ${MAKE} bootstrapbuild COMPILER_ONLY=Yes \
	    GCC_NATIVE=no GCC_PREFIX=${SUBOBJDIR}/bs-1
	cd ${.CURDIR} && exec ${MAKE} install COMPILER_ONLY=Yes \
	    GCC_NATIVE=no GCC_PREFIX=${SUBOBJDIR}/bs-1
.endif
.if ${_LIBERTY_GIVEN} == "no"
	cd ${GNU_LIBIBERTY_SRC} && exec ${MAKE} cleandir
	cd ${GNU_LIBIBERTY_SRC} && exec ${MAKE} depend \
	    CC=${SUBOBJDIR}/bs-1/bin/mgcc CPP="${SUBOBJDIR}/bs-1/bin/mgcc -E"
	cd ${GNU_LIBIBERTY_SRC} && exec ${MAKE} all \
	    CC=${SUBOBJDIR}/bs-1/bin/mgcc CPP="${SUBOBJDIR}/bs-1/bin/mgcc -E"
.endif
	cd ${.CURDIR} && exec ${MAKE} cleandir-recursive COMPILER_ONLY=Yes
.if ${_LIBERTY_GIVEN} == "no"
	cd ${.CURDIR} && exec ${MAKE} all COMPILER_ONLY=Yes \
	    _LIBERTY=${GNU_LIBIBERTY_SRC}/obj/libiberty.a \
	    CC=${SUBOBJDIR}/bs-1/bin/mgcc \
	    GCC_NATIVE=no GCC_PREFIX=${SUBOBJDIR}/bs-2
	cd ${.CURDIR} && exec ${MAKE} install COMPILER_ONLY=Yes \
	    _LIBERTY=${GNU_LIBIBERTY_SRC}/obj/libiberty.a \
	    CC=${SUBOBJDIR}/bs-1/bin/mgcc \
	    GCC_NATIVE=no GCC_PREFIX=${SUBOBJDIR}/bs-2
.else
	cd ${.CURDIR} && exec ${MAKE} all COMPILER_ONLY=Yes \
	    CC=${SUBOBJDIR}/bs-1/bin/mgcc \
	    GCC_NATIVE=no GCC_PREFIX=${SUBOBJDIR}/bs-2
	cd ${.CURDIR} && exec ${MAKE} install COMPILER_ONLY=Yes \
	    CC=${SUBOBJDIR}/bs-1/bin/mgcc \
	    GCC_NATIVE=no GCC_PREFIX=${SUBOBJDIR}/bs-2
.endif
.if ${_LIBERTY_GIVEN} == "no"
	cd ${GNU_LIBIBERTY_SRC} && exec ${MAKE} cleandir
	cd ${GNU_LIBIBERTY_SRC} && exec ${MAKE} depend \
	    CC=${SUBOBJDIR}/bs-2/bin/mgcc CPP="${SUBOBJDIR}/bs-2/bin/mgcc -E"
	cd ${GNU_LIBIBERTY_SRC} && exec ${MAKE} all \
	    CC=${SUBOBJDIR}/bs-2/bin/mgcc CPP="${SUBOBJDIR}/bs-2/bin/mgcc -E"
.endif
	cd ${.CURDIR} && exec ${MAKE} cleandir-recursive COMPILER_ONLY=Yes
.if ${_LIBERTY_GIVEN} == "no"
	cd ${.CURDIR} && exec ${MAKE} all \
	    _LIBERTY=${GNU_LIBIBERTY_SRC}/obj/libiberty.a \
	    CC=${SUBOBJDIR}/bs-2/bin/mgcc \
	    CXX=${SUBOBJDIR}/bs-2/bin/g++
.else
	cd ${.CURDIR} && exec ${MAKE} all \
	    CC=${SUBOBJDIR}/bs-2/bin/mgcc \
	    CXX=${SUBOBJDIR}/bs-2/bin/g++
.endif
	cd ${.CURDIR} && exec ${SUDO} ${MAKE} install

.PHONY: bootstrapbuild bootstrap do-bootstrap

.include <bsd.obj.mk>
@


1.21
log
@install files to BSDRELDIR only muuuuuuuuch later
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.20 2006/03/01 20:08:09 tg Exp $
d16 1
a16 1
SUBOBJDIR!=	readlink -nf ${.OBJDIR}
@


1.20
log
@something more closely resembling a cross-built toolchain
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.19 2006/03/01 14:20:25 tg Exp $
a98 1
	cd ${.CURDIR} && exec ${BSDMAKE} release BSDRELDIR=${BSDRELDIR}
@


1.19
log
@use prefix'd systrace all over the place even for native builds
which shan't write outside ${GCC_PREFIX} (normally /usr) either
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.18 2006/03/01 14:17:06 tg Exp $
d26 1
@


1.18
log
@systrace'd cross-gcc install
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.17 2006/03/01 14:05:15 tg Exp $
d6 4
d35 1
d38 1
a56 1
.    ifdef _CROSSBUILD
a59 5
.    else
	d="${DESTDIR}"; cd $${d:-/}; [[ -n $$d ]] || d="/:/*"; \
	    env WRITEDIR="$$d" NOWRITEDIR="${SUBOBJDIR}" ${EXTRA_ENV} \
	    ${SUDO} ${SHELL} ${BSDSRCDIR}/scripts/systrace.mk ${BSDMAKE}
.    endif
d62 1
a62 1
	    ${_STCMD_DEST} ${BSDMAKE} -f Makefile.sub $@@
d64 1
a64 1
	sleep 1; ${SUDO} rm -f ${_STFILE_DEST}
@


1.17
log
@use the host-tools dir (cross/usr/TARGET/bin) instead of
the target-tools dir (cross/usr/bin) here, too
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.16 2006/03/01 13:55:45 tg Exp $
d51 5
d59 1
@


1.16
log
@find cross-tools
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.15 2006/02/14 20:47:52 tg Exp $
d21 1
a21 1
EXTRA_ENV=	PATH=/bin:/usr/bin:/sbin:/usr/sbin:${GCC_PREFIX}/bin
@


1.15
log
@restructure build system for better restartability,
move things to proper places, ensure root-only-access
to .buildnotice hack file, fix a few problems (using
${BSDMAKE} in gcc/Makefile, including wrong files),
use ${SUDO} on different places, ensure DESTDIR is
always correct on make build, move most of the former
'release' targets from src/etc/Makefile to src/Makefile
and remove associated targets in src/etc/Makefile; sync
list of phony targets in both; copy out common code in
distrib/i386/generic/Makefile, distrib/i386/common/Makefile.inc
into new distrib/i386/generic/Makefile.kernel, remove
unused target 'includes' in src/Makefile, rewrite the
distrib-dirs target, shuffle the creation and removal
of the systrace files around, build HTML manual pages
under systrace(1) control, auto-remove tmp buildhome,
check HOME makeenv/environment sync and being tmp, fix
index/checksum file generation, maybe more (read the diff)

untested
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.14 2005/12/05 08:16:42 tg Exp $
d20 3
d24 1
@


1.14
log
@make checks .if stuff always, not only if specific targets are executed, so
provide the variable with a default value and optimise the shell block
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.13 2005/11/24 22:01:21 tg Exp $
d85 4
a88 4
	cd ${.CURDIR} && exec ${MAKE} obj
	cd ${.CURDIR} && exec ${MAKE}
	cd ${.CURDIR} && exec ${SUDO} ${MAKE} install
	cd ${.CURDIR} && exec ${MAKE} release BSDRELDIR=${BSDRELDIR}
d91 1
a91 2
	mkdir -p ${BSDRELDIR}/base ${BSDRELDIR}/rel \
	    || ${SUDO} mkdir -p ${BSDRELDIR}/base ${BSDRELDIR}/rel
@


1.13
log
@do something sensible if we don't want to / can't build libiberty
(e.g. on Debian GNU/Linux)
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.12 2005/11/24 19:51:50 tg Exp $
d105 1
a105 2
	    if [[ -e $${l:-/nonexistant} ]]; then print yes; \
		else print no; fi)
d107 1
@


1.12
log
@fix _LIBERTY variable misuse
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.11 2005/11/23 15:42:08 tg Exp $
d103 4
a106 1
	@@cd ${.CURDIR} && ${MAKE} obj && exec ${MAKE} do-bootstrap
d109 1
d113 1
d115 1
d122 7
d134 1
d136 1
d145 9
d159 1
d161 1
d166 5
@


1.11
log
@add another level of make(1) indirection, so that SUBOBJDIR is
set correctly for later
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.10 2005/11/23 15:39:49 tg Exp $
d114 1
a119 1
	    _LIBERTY=${GNU_LIBIBERTY_SRC}/obj/libiberty.a \
d123 1
d127 1
@


1.10
log
@preliminary support for a bootstrap target which builds gcc thrice,
might support Ada, is yet untested, automatically re-builds libiberty
three times as well (but doesn't skip protoise and gcov on the first)
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.9 2005/11/22 19:40:08 tg Exp $
d103 3
a108 1
	cd ${.CURDIR} && exec ${MAKE} obj
d140 2
@


1.9
log
@damn, these typo
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.8 2005/11/22 19:38:53 tg Exp $
d4 1
d71 1
d97 41
@


1.8
log
@cpp(1) and GCC_NATIVE=no
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.7 2005/11/22 17:55:18 tg Exp $
d22 1
a22 1
EXTRA_ENV:=	${EXTRA_ENV:S!PATH=!PATH=${BSDMAKE:H}:${CC:H}!}
@


1.7
log
@with quite little effort the gcc module can be made portable
Initial testing on Darwin; this only removes build failures,
testing will be done later
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.6 2005/06/13 19:51:12 tg Exp $
d13 1
d22 1
a22 1
EXTRA_ENV:=	${EXTRA_ENV:S!PATH=!PATH=${BSDMAKE:H}:!}
@


1.6
log
@* as part of bsiegert@@s and my master plan, install a debugging version
  of libgcj just like the others which use <bsd.lib.mk>
* install into BSDRELDIR/base too, not BSDRELDIR/gcc
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.5 2005/04/26 21:15:29 tg Exp $
d6 7
a12 1
SUBOBJDIR!=	readlink ${.OBJDIR} || ( cd ${.OBJDIR} && pwd )
d20 9
d33 1
a33 1
	cd ${.CURDIR} && ${EXTRA_ENV} exec ${MAKE} -f Makefile.sub $@@
d39 1
a39 1
	    ${_STCMD_SUB} ${MAKE} -f Makefile.sub $@@
d44 1
d47 2
a48 1
	    ${SUDO} ${SHELL} ${BSDSRCDIR}/scripts/systrace.mk ${MAKE}
d50 2
a51 1
	    ${_STCMD_DEST} ${MAKE} -f Makefile.sub $@@
d53 1
d56 1
d59 2
a60 1
	    ${SHELL} ${BSDSRCDIR}/scripts/systrace.mk ${MAKE}
d64 1
a64 1
	    ${_STCMD_SUB} ${MAKE} -f Makefile.sub cleandir
d69 1
d71 1
d91 1
a91 1
	    ${MAKE} distrib-dirs mksystrace-dest DESTDIR=${BSDRELDIR}/base
@


1.5
log
@while not everyone building is in the group "staff",
a 240 MiB datasize ulimit for building gcc isn't far
off thoughts (and maybe this fixes the gcj problem?)
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.4 2005/04/19 12:53:47 tg Exp $
d65 2
a66 2
	mkdir -p ${BSDRELDIR}/gcc ${BSDRELDIR}/rel \
	    || ${SUDO} mkdir -p ${BSDRELDIR}/gcc ${BSDRELDIR}/rel
d68 2
a69 2
	    ${MAKE} distrib-dirs mksystrace-dest DESTDIR=${BSDRELDIR}/gcc
	cd ${.CURDIR} && exec ${SUDO} ${MAKE} install DESTDIR=${BSDRELDIR}/gcc
@


1.4
log
@make the overall build process more similar to a build.sh and have a
common framework, with ======== lines and stuff, and the checkflist
and maketars stuff only executed at the end of the whole make dist
(this means they are not built any more with a make b-r, I know).
This also unifies the set generation, runs cksum and rmd160 only
once and makes an unattended non-quiet build possible.
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.3 2005/03/29 00:12:15 tg Exp $
d23 1
a23 1
	cd ${.CURDIR} && ${EXTRA_ENV} exec \
@


1.3
log
@WAIT_CHECKFLIST => BATCH and reverse logic
default is now an interactive b-r
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.2 2005/03/25 19:43:36 tg Exp $
a58 3
	@@echo ============================================================
	@@date
	@@echo ============================================================
a69 21
	@@echo "============================================================"
	@@echo "Checking files:"
	@@echo ""
	-cd ${BSDSRCDIR}/distrib/lists/gcc && DESTDIR=${BSDRELDIR}/gcc \
	    RELEASEDIR=${BSDRELDIR}/rel ${EXTRA_ENV} ${SUDO} ${SHELL} \
	    ${BSDSRCDIR}/scripts/tarck
	@@echo "============================================================"
.ifndef BATCH
	@@read a?'Press Return to continue...'
.endif
	cd ${BSDSRCDIR}/distrib/lists/gcc && DESTDIR=${BSDRELDIR}/gcc \
	    RELEASEDIR=${BSDRELDIR}/rel ${EXTRA_ENV} ${SUDO} ${SHELL} \
	    ${BSDSRCDIR}/scripts/tarmk ${OSrev}
	-cd ${BSDRELDIR}/rel; cksum gcc*.ngz \
	    | cat - CKSUM | ${SUDO} sort -k3 -o CKSUM
	-cd ${BSDRELDIR}/rel; rmd160 gcc*.ngz \
	    | cat - RMD160 | ${SUDO} sort -o RMD160
	@@echo ============================================================
	@@echo Build and Release for the GNU Compiler Collection complete.
	@@date; uname -a
	@@echo ============================================================
@


1.2
log
@proper make obj
@
text
@d1 1
a1 1
# $MirOS: gcc/Makefile,v 1.1 2005/03/25 18:33:12 tg Exp $
d80 1
a80 1
.ifdef WAIT_CHECKFLIST
@


1.1
log
@copied from ncvs1 and slightly more adjusted
@
text
@d1 1
a1 1
# $MirOS$
d62 4
a65 4
	exec ${MAKE} obj
	exec ${MAKE}
	exec ${SUDO} ${MAKE} install
	exec ${MAKE} release BSDRELDIR=${BSDRELDIR}
@

