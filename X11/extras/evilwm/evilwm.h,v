head	1.4;
access;
symbols
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.1.201.2
	MIRBSD_8:1.1.201.2.0.2
	MIRBSD_8_BASE:1.1.201.2
	evilwm-0_99_18:1.1.201.2
	evilwm-0_99_17:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.4
date	2006.10.16.20.43.19;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004533EED23F5C770C;

1.3
date	2006.08.14.19.05.19;	author tg;	state Exp;
branches;
next	1.2;
commitid	10044E0C9850E7540C9;

1.2
date	2006.08.14.18.57.57;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044E0C7C657C8A08A;

1.1
date	2005.02.05.01.04.41;	author tg;	state Exp;
branches
	1.1.201.1;
next	;

1.1.201.1
date	2005.02.05.01.04.41;	author tg;	state Exp;
branches;
next	1.1.201.2;

1.1.201.2
date	2005.07.07.18.07.02;	author tg;	state Exp;
branches;
next	;
commitid	5f4742cd6f554c49;


desc
@@


1.4
log
@add a function to evilwm to spawn a "normal" xterm,
"C" even if evilwm was started in a utf-8 locale, and
not inheriting parent environment etc., running /bin/sh
@
text
@#ifndef EVILWM_H
#define EVILWM_H "$MirOS: X11/extras/evilwm/evilwm.h,v 1.3 2006/08/14 19:05:19 tg Exp $"

#include <X11/X.h>
#include <X11/Xlib.h>
#include <X11/Xmd.h>
#include <X11/Xutil.h>
#include <X11/keysym.h>
#ifdef SHAPE
#include <X11/extensions/shape.h>
#endif
#ifdef MWM_HINTS
#include <Xm/MwmUtil.h>
#endif

#include "keymap.h"

/* sanity on options */
#if defined(INFOBANNER_MOVERESIZE) && !defined(INFOBANNER)
# define INFOBANNER
#endif

/* default settings */

#define DEF_FONT	"variable"
#define DEF_FG		"goldenrod"
#define DEF_BG		"grey50"
#define DEF_BW		1
#define DEF_FC		"blue"
#define SPACE		3
#ifdef DEBIAN
#define DEF_TERM	"x-terminal-emulator"
#else
#define DEF_TERM	"xterm"
#endif
#define DEF_EXTERM	"/usr/X11R6/bin/xterm"

/* readability stuff */

#define STICKY 0	/* Desktop number for sticky clients */
#define KEY_TO_VDESK( key ) ( ( key ) - XK_1 + 1 )

#define RAISE		1
#define NO_RAISE	0	/* for unhide() */

/* some coding shorthand */

#define ChildMask	(SubstructureRedirectMask|SubstructureNotifyMask)
#define ButtonMask	(ButtonPressMask|ButtonReleaseMask)
#define MouseMask	(ButtonMask|PointerMotionMask)

#define grab_pointer(w, mask, curs) \
	(XGrabPointer(dpy, w, False, mask, GrabModeAsync, GrabModeAsync, \
	None, curs, CurrentTime) == GrabSuccess)
#define grab_keysym(w, mask, keysym) \
	XGrabKey(dpy, XKeysymToKeycode(dpy, keysym), mask, w, True, \
			GrabModeAsync, GrabModeAsync); \
	XGrabKey(dpy, XKeysymToKeycode(dpy, keysym), LockMask|mask, w, True, \
			GrabModeAsync, GrabModeAsync); \
	if (numlockmask) { \
		XGrabKey(dpy, XKeysymToKeycode(dpy, keysym), numlockmask|mask, \
				w, True, GrabModeAsync, GrabModeAsync); \
		XGrabKey(dpy, XKeysymToKeycode(dpy, keysym), \
				numlockmask|LockMask|mask, w, True, \
				GrabModeAsync, GrabModeAsync); \
	}
#define grab_button(w, mask, button) \
	XGrabButton(dpy, button, mask, w, False, ButtonMask, \
			GrabModeAsync, GrabModeSync, None, None); \
	XGrabButton(dpy, button, LockMask|mask, w, False, ButtonMask, \
			GrabModeAsync, GrabModeSync, None, None); \
	if (numlockmask) { \
		XGrabButton(dpy, button, numlockmask|mask, w, False, \
				ButtonMask, GrabModeAsync, GrabModeSync, \
				None, None); \
		XGrabButton(dpy, button, numlockmask|LockMask|mask, w, False, \
				ButtonMask, GrabModeAsync, GrabModeSync, \
				None, None); \
	}
#define setmouse(w, x, y) \
	XWarpPointer(dpy, None, w, 0, 0, 0, 0, x, y)
#define gravitate(c) gravitate_client(c, 1)
#define ungravitate(c) gravitate_client(c, -1)

/* screen structure */

typedef struct ScreenInfo ScreenInfo;

struct ScreenInfo {
	int screen;
	Window root;
	Colormap def_cmap;
	GC invert_gc;
#ifdef VWM
	XColor fg, bg, fc;
#else
	XColor fg, bg;
#endif
	char *display;
};

/* client structure */

typedef struct Client Client;

struct Client {
	Client	*next;
	Window	window;
	Window	parent;
	ScreenInfo	*screen;

#ifdef COLOURMAP
	Colormap	cmap;
#endif
	int		ignore_unmap;

	int		x, y, width, height;
	int		border;
	int		oldx, oldy, oldw, oldh;  /* used when maximising */

	int		min_width, min_height;
	int		max_width, max_height;
	int		width_inc, height_inc;
	int		base_width, base_height;
	int		win_gravity;
	int		old_border;
#ifdef VWM
	int		vdesk;
#endif /* def VWM */
};

typedef struct Application Application;
struct Application {
	char *res_name;
	char *res_class;
	int geometry_mask;
	int x, y;
	unsigned int width, height;
#ifdef VWM
	int vdesk;
#endif
	Application *next;
};

/* declarations for global variables in main.c */

extern Display		*dpy;
extern int		num_screens;
extern ScreenInfo	*screens;
extern ScreenInfo	*current_screen;
extern Client		*current;
extern volatile Window	initialising;
extern XFontStruct	*font;
extern Client		*head_client;
extern Application	*head_app;
extern Atom		xa_wm_state;
extern Atom		xa_wm_change_state;
extern Atom		xa_wm_protos;
extern Atom		xa_wm_delete;
extern Atom		xa_wm_cmapwins;
extern Cursor		move_curs;
extern Cursor		resize_curs;
extern const char	*opt_display;
extern const char	*opt_font;
extern const char	*opt_fg;
extern const char	*opt_bg;
extern const char	*opt_term[3];
extern const char	*sane_term[23];
extern int		opt_bw;
#ifdef VWM
extern const char	*opt_fc;
extern int		vdesk;
#endif
#ifdef SNAP
extern int		opt_snap;
#endif
#ifdef SHAPE
extern int		have_shape, shape_event;
#endif
extern int		quitting;
#ifdef MWM_HINTS
extern Atom		mwm_hints;
#endif
extern unsigned int numlockmask;
extern unsigned int grabmask2;

/* client.c */

Client *find_client(Window w);
int wm_state(Client *c);
void gravitate_client(Client *c, int sign);
void select_client(Client *c);
void remove_client(Client *c);
void send_config(Client *c);
void send_wm_delete(Client *c);
void set_wm_state(Client *c, int state);
void set_shape(Client *c);
void client_update_current(Client *c, Client *newcurrent);

/* events.c */

__dead void event_main_loop(void);

/* main.c */

int main(int argc, char *argv[]);
void scan_windows(void);

/* void do_event_loop(void); */
int handle_xerror(Display *dsply, XErrorEvent *e);
int ignore_xerror(Display *dsply, XErrorEvent *e);
void dump_clients(void);
void spawn(const char *const cmd[]);
__dead void handle_signal(int signo);
#ifdef DEBUG
void show_event(XEvent e);
#endif

/* new.c */

void make_new_client(Window w, ScreenInfo *s);
CARD32 get_wm_normal_hints(Client *c);

/* screen.c */

void drag(Client *c);
void get_mouse_position(int *x, int *y, Window root);
void moveresize(Client *c);
void recalculate_sweep(Client *c, int x1, int y1, int x2, int y2);
void maximise_vert(Client *c);
void maximise_horiz(Client *c);
void show_info(Client *c, KeySym key);
void sweep(Client *c);
void unhide(Client *c, int raise_win);
void next(void);
#ifdef VWM
void hide(Client *c);
void switch_vdesk(int v);
#endif /* def VWM */
ScreenInfo *find_screen(Window root);

#endif
@


1.3
log
@RCS IDs
@
text
@d2 1
a2 1
#define EVILWM_H "$MirOS$"
d36 1
d168 1
@


1.2
log
@sync licence, make __CRAZY clean
@
text
@d1 2
a2 1
/* $MirOS$ */
d239 2
@


1.1
log
@Initial revision
@
text
@d1 3
d5 1
d17 3
a19 4
#ifdef VWM
#ifdef VDESK
#define VDESK_BOTH 1
#endif
a29 1
#define MINSIZE		15
a36 3
#ifdef SHAPE
#include <X11/extensions/shape.h>
#endif
d80 2
a81 4
#define gravitate(c) \
	change_gravity(c, 1)
#define ungravitate(c) \
	change_gravity(c, -1)
a112 1
	XSizeHints	*size;
d116 1
d118 7
a124 1
	int		border;
d130 13
a145 9
/* extern int		screen;
extern Window		root;
extern GC		invert_gc;
#ifdef VWM
extern XColor		fg, bg, fc;
#else
extern XColor		fg, bg;
#endif
*/
d150 1
a150 1
extern Window		initialising;
d153 1
d165 1
a165 1
extern const char	**opt_term;
d182 1
d188 2
a189 1
void change_gravity(Client *c, int multiplier);
d199 1
a199 15
void handle_key_event(XKeyEvent *e);
void handle_button_event(XButtonEvent *e);
/* static void handle_client_message(XClientMessageEvent *e); */
#ifdef COLOURMAP
void handle_colormap_change(XColormapEvent *e);
#endif
void handle_configure_request(XConfigureRequestEvent *e);
void handle_enter_event(XCrossingEvent *e);
void handle_leave_event(XCrossingEvent *e);
void handle_map_request(XMapRequestEvent *e);
void handle_property_change(XPropertyEvent *e);
void handle_unmap_event(XUnmapEvent *e);
#ifdef SHAPE
void handle_shape_event(XShapeEvent *e);
#endif
a204 9
void setup_display(void);

/* misc.c */
#ifdef SANITY
void sanity_check(void);
#endif
#ifdef VDESK_BOTH
void spawn_vdesk(int todesk, Client *c);
#endif
d211 1
a211 1
void handle_signal(int signo);
a217 1
void init_position(Client *c);
d219 1
a219 1
void reparent(Client *c);
a223 1
void draw_outline(Client *c);
d225 1
a225 1
void move(Client *c, int set);
a226 1
void resize(Client *c, int set);
d231 1
a231 1
void unhide(Client *c, int raise);
a235 4
#else
# ifdef VDESK
 void hide(Client *c);
# endif
a236 3
#ifdef VDESK
void handle_client_message(XClientMessageEvent *e);
#endif
@


1.1.201.1
log
@evilwm 0.99.17
@
text
@@


1.1.201.2
log
@There is a new evilwm out there!
@
text
@a0 1
#include <X11/X.h>
a1 1
#include <X11/Xmd.h>
d13 4
a16 3
/* sanity on options */
#if defined(INFOBANNER_MOVERESIZE) && !defined(INFOBANNER)
# define INFOBANNER
d27 1
d35 3
d81 4
a84 2
#define gravitate(c) gravitate_client(c, 1)
#define ungravitate(c) gravitate_client(c, -1)
d116 1
d120 1
a121 8
	int		oldx, oldy, oldw, oldh;  /* used when maximising */

	int		min_width, min_height;
	int		max_width, max_height;
	int		width_inc, height_inc;
	int		base_width, base_height;
	int		win_gravity;
	int		old_border;
a126 13
typedef struct Application Application;
struct Application {
	char *res_name;
	char *res_class;
	int geometry_mask;
	int x, y;
	unsigned int width, height;
#ifdef VWM
	int vdesk;
#endif
	Application *next;
};

d130 9
d143 1
a143 1
extern volatile Window	initialising;
a145 1
extern Application	*head_app;
d157 1
a157 1
extern const char	*opt_term[3];
a173 1
extern unsigned int grabmask2;
d179 1
a179 2
void gravitate_client(Client *c, int sign);
void select_client(Client *c);
d189 15
a203 1
void event_main_loop(void);
d209 9
d231 1
d233 1
a233 1
CARD32 get_wm_normal_hints(Client *c);
d238 1
d240 1
a240 1
void moveresize(Client *c);
d242 1
d247 1
a247 1
void unhide(Client *c, int raise_win);
d252 4
d257 3
@

