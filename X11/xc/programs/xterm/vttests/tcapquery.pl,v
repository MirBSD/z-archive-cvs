head	1.3;
access;
symbols
	MIRBSD_10_BASE:1.3
	tg-xterm-215-based:1.2.0.2
	tg-xterm-200-based:1.1
	xterm-215:1.1.109.1
	lynx:1.1.109
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@# @;


1.3
date	2006.07.02.00.55.00;	author tg;	state Exp;
branches;
next	1.2;
commitid	10044A719405F9E103E;

1.2
date	2006.07.02.00.02.54;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A70D294F0BB63C;

1.1
date	2005.03.18.10.52.35;	author tg;	state Exp;
branches
	1.1.103.1
	1.1.109.1;
next	;

1.1.103.1
date	2005.03.18.10.52.35;	author tg;	state Exp;
branches;
next	;

1.1.109.1
date	2006.07.01.23.27.08;	author tg;	state Exp;
branches;
next	;
commitid	10044A704BD2A6243A3;


desc
@@


1.3
log
@revert to xterm-200-based (plus fix an openbsd glitch)
xterm-215-based does not work correctly:
* uxterm does not honour its class (e.g. my font is too small)
* utmp is never updated
@
text
@#!/usr/bin/perl
# $XFree86: xc/programs/xterm/vttests/tcapquery.pl,v 1.1 2004/03/04 02:21:58 dickey Exp $
#
# -- Thomas Dickey (2004/3/3)
# Test the tcap-query option of xterm.

use IO::Handle;

sub write_tty {
	open TTY, "+</dev/tty" or die("Cannot open /dev/tty\n");
	autoflush TTY 1;
	print TTY @@_;
	close TTY;
}

sub get_reply {
	open TTY, "+</dev/tty" or die("Cannot open /dev/tty\n");
	autoflush TTY 1;
	$old=`stty -g`;
	system "stty raw -echo min 0 time 5";

	print TTY @@_;
	my $reply=<TTY>;
	close TTY;
	system "stty $old";
	return $reply;
}

sub csi_field {
	my $first = @@_[0];
	my $second = @@_[1];
	$first =~ s/^[^0-9]+//;
	while ( --$second > 0 ) {
		$first =~ s/^[\d]+//;
		$first =~ s/^[^\d]+//;
	}
	$first =~ s/[^\d]+.*$//;
	return $first;
}

sub hexified {
	my $value = @@_[0];
	my $result = "";
	for ( $n = 0; $n < length($value); ++$n) {
		$result .= sprintf("%02X", ord substr($value,$n,1));
	}
	return $result;
}

sub query_tcap {
	my $tcap = @@_[0];
	my $tinfo = @@_[1];
	my $param1 = hexified($tcap);
	my $param2 = hexified($tinfo);

	#FIXME: should be able to do both at once
	#$reply=get_reply("\x1bP+q" . $param1 . ";" . $param2 . "\x1b\\");
	$reply=get_reply("\x1bP+q" . $param1 . "\x1b\\");

	if ( $reply =~ /\x1bP1\+r[[:xdigit:]]+=[[:xdigit:]]*.*/ ) {
		my $value = $reply;

		$value =~ s/^.*=//;
		$value =~ s/[^[:xdigit:]]*//;	# FIXME: should work, but doesn't
		$value =~ s/\x1b.*//;		# ...do this anyway

		my $result = "";
		for ( $n = 0; $n < length($value); $n += 2) {
			my $k = hex substr($value,$n,2);
			if ( $k == 0x1b ) {
				$result .= "\\E";
			} elsif ( $k == 0x7f ) {
				$result .= "^?";
			} elsif ( $k == 32 ) {
				$result .= "\\s";
			} elsif ( $k < 32 ) {
				$result .= sprintf("^%c", $k + 64);
			} elsif ( $k > 128 ) {
				$result .= sprintf("\\%03o", $k);
			} else {
				$result .= chr($k);
			}
		}

		printf "$tcap=$result\n";
	}
}

# See xtermcapKeycode()
query_tcap(	"#2",	"kHOM");
query_tcap(	"#4",	"kLFT");
query_tcap(	"%1",	"khlp");
query_tcap(	"%i",	"kRIT");
query_tcap(	"*6",	"kslt");
query_tcap(	"*7",	"kEND");
query_tcap(	"@@0",	"kfnd");
query_tcap(	"@@7",	"kend");
query_tcap(	"F1",	"kf11");
query_tcap(	"F2",	"kf12");
query_tcap(	"F3",	"kf13");
query_tcap(	"F4",	"kf14");
query_tcap(	"F5",	"kf15");
query_tcap(	"F6",	"kf16");
query_tcap(	"F7",	"kf17");
query_tcap(	"F8",	"kf18");
query_tcap(	"F9",	"kf19");
query_tcap(	"FA",	"kf20");
query_tcap(	"FB",	"kf21");
query_tcap(	"FC",	"kf22");
query_tcap(	"FD",	"kf23");
query_tcap(	"FE",	"kf24");
query_tcap(	"FF",	"kf25");
query_tcap(	"FG",	"kf26");
query_tcap(	"FH",	"kf27");
query_tcap(	"FI",	"kf28");
query_tcap(	"FJ",	"kf29");
query_tcap(	"FK",	"kf30");
query_tcap(	"FL",	"kf31");
query_tcap(	"FM",	"kf32");
query_tcap(	"FN",	"kf33");
query_tcap(	"FO",	"kf34");
query_tcap(	"FP",	"kf35");
query_tcap(	"FQ",	"kf36");
query_tcap(	"FR",	"kf37");
query_tcap(	"K1",	"ka1");
query_tcap(	"K4",	"kc1");
query_tcap(	"k1",	"kf1");
query_tcap(	"k2",	"kf2");
query_tcap(	"k3",	"kf3");
query_tcap(	"k4",	"kf4");
query_tcap(	"k5",	"kf5");
query_tcap(	"k6",	"kf6");
query_tcap(	"k7",	"kf7");
query_tcap(	"k8",	"kf8");
query_tcap(	"k9",	"kf9");
query_tcap(	"k;",	"kf10");
query_tcap(	"kB",	"kcbt");
query_tcap(	"kC",	"kclr");
query_tcap(	"kD",	"kdch1");
query_tcap(	"kI",	"kich1");
query_tcap(	"kN",	"knp");
query_tcap(	"kP",	"kpp");
query_tcap(	"kb",	"kbs");
query_tcap(	"kd",	"kcud1");
query_tcap(	"kh",	"khome");
query_tcap(	"kl",	"kcub1");
query_tcap(	"kr",	"kcuf1");
query_tcap(	"ku",	"kcuu1");
query_tcap(	"Co",	"colors");
@


1.2
log
@merge and go back to xterm-215
@
text
@d1 2
a2 3
#!/usr/bin/perl -w
# $XTermId: tcapquery.pl,v 1.7 2006/03/13 01:28:02 tom Exp $
# $XFree86: xc/programs/xterm/vttests/tcapquery.pl,v 1.3 2006/03/13 01:28:02 dickey Exp $
d7 1
a7 1
use strict;
d9 6
a14 1
use IO::Handle;
d16 1
a16 1
sub get_reply($) {
d19 1
a19 1
	my $old=`stty -g`;
d29 14
a42 2
sub hexified($) {
	my $value = $_[0];
a43 2
	my $n;

d50 3
a52 3
sub query_tcap($$) {
	my $tcap = $_[0];
	my $tinfo = $_[1];
d56 3
a58 3
	# uncomment one of the following lines
	my $reply=get_reply("\x1bP+q" . $param1 . ";" . $param2 . "\x1b\\");
	#my $reply=get_reply("\x1bP+q" . $param2 . "\x1b\\");
a61 1
		my $n;
d63 3
a65 2
		$value =~ s/^\x1bP1\+r//;
		$value =~ s/\x1b\\//;
d68 12
a79 6
		for ( $n = 0; $n < length($value); ) {
			my $c = substr($value,$n,1);
			# handle semicolon and equals
			if ( $c =~ /[[:punct:]]/ ) {
				$n += 1;
				$result .= $c;
d81 1
a81 16
				# handle hex-data
				my $k = hex substr($value,$n,2);
				if ( $k == 0x1b ) {
					$result .= "\\E";
				} elsif ( $k == 0x7f ) {
					$result .= "^?";
				} elsif ( $k == 32 ) {
					$result .= "\\s";
				} elsif ( $k < 32 ) {
					$result .= sprintf("^%c", $k + 64);
				} elsif ( $k > 128 ) {
					$result .= sprintf("\\%03o", $k);
				} else {
					$result .= chr($k);
				}
				$n += 2;
d85 1
a85 1
		printf "%s\n", $result;
d96 2
a97 2
query_tcap(	"\@@0",	"kfnd");
query_tcap(	"\@@7",	"kend");
@


1.1
log
@Initial revision
@
text
@d1 3
a3 2
#!/usr/bin/perl
# $XFree86: xc/programs/xterm/vttests/tcapquery.pl,v 1.1 2004/03/04 02:21:58 dickey Exp $
d8 2
d12 1
a12 1
sub write_tty {
d15 1
a15 8
	print TTY @@_;
	close TTY;
}

sub get_reply {
	open TTY, "+</dev/tty" or die("Cannot open /dev/tty\n");
	autoflush TTY 1;
	$old=`stty -g`;
d25 4
a28 11
sub csi_field {
	my $first = @@_[0];
	my $second = @@_[1];
	$first =~ s/^[^0-9]+//;
	while ( --$second > 0 ) {
		$first =~ s/^[\d]+//;
		$first =~ s/^[^\d]+//;
	}
	$first =~ s/[^\d]+.*$//;
	return $first;
}
a29 3
sub hexified {
	my $value = @@_[0];
	my $result = "";
d36 3
a38 3
sub query_tcap {
	my $tcap = @@_[0];
	my $tinfo = @@_[1];
d42 3
a44 3
	#FIXME: should be able to do both at once
	#$reply=get_reply("\x1bP+q" . $param1 . ";" . $param2 . "\x1b\\");
	$reply=get_reply("\x1bP+q" . $param1 . "\x1b\\");
d48 1
d50 2
a51 3
		$value =~ s/^.*=//;
		$value =~ s/[^[:xdigit:]]*//;	# FIXME: should work, but doesn't
		$value =~ s/\x1b.*//;		# ...do this anyway
d54 6
a59 12
		for ( $n = 0; $n < length($value); $n += 2) {
			my $k = hex substr($value,$n,2);
			if ( $k == 0x1b ) {
				$result .= "\\E";
			} elsif ( $k == 0x7f ) {
				$result .= "^?";
			} elsif ( $k == 32 ) {
				$result .= "\\s";
			} elsif ( $k < 32 ) {
				$result .= sprintf("^%c", $k + 64);
			} elsif ( $k > 128 ) {
				$result .= sprintf("\\%03o", $k);
d61 16
a76 1
				$result .= chr($k);
d80 1
a80 1
		printf "$tcap=$result\n";
d91 2
a92 2
query_tcap(	"@@0",	"kfnd");
query_tcap(	"@@7",	"kend");
@


1.1.109.1
log
@Import xterm-215 (latest from Tom Dickey)
XFree86 4.6.0 had xterm-213 with no diffs,
so we only need to care about both obsd and
mbsd local diffs
@
text
@d1 2
a2 3
#!/usr/bin/perl -w
# $XTermId: tcapquery.pl,v 1.7 2006/03/13 01:28:02 tom Exp $
# $XFree86: xc/programs/xterm/vttests/tcapquery.pl,v 1.3 2006/03/13 01:28:02 dickey Exp $
d7 1
a7 1
use strict;
d9 6
a14 1
use IO::Handle;
d16 1
a16 1
sub get_reply($) {
d19 1
a19 1
	my $old=`stty -g`;
d29 14
a42 2
sub hexified($) {
	my $value = $_[0];
a43 2
	my $n;

d50 3
a52 3
sub query_tcap($$) {
	my $tcap = $_[0];
	my $tinfo = $_[1];
d56 3
a58 3
	# uncomment one of the following lines
	my $reply=get_reply("\x1bP+q" . $param1 . ";" . $param2 . "\x1b\\");
	#my $reply=get_reply("\x1bP+q" . $param2 . "\x1b\\");
a61 1
		my $n;
d63 3
a65 2
		$value =~ s/^\x1bP1\+r//;
		$value =~ s/\x1b\\//;
d68 12
a79 6
		for ( $n = 0; $n < length($value); ) {
			my $c = substr($value,$n,1);
			# handle semicolon and equals
			if ( $c =~ /[[:punct:]]/ ) {
				$n += 1;
				$result .= $c;
d81 1
a81 16
				# handle hex-data
				my $k = hex substr($value,$n,2);
				if ( $k == 0x1b ) {
					$result .= "\\E";
				} elsif ( $k == 0x7f ) {
					$result .= "^?";
				} elsif ( $k == 32 ) {
					$result .= "\\s";
				} elsif ( $k < 32 ) {
					$result .= sprintf("^%c", $k + 64);
				} elsif ( $k > 128 ) {
					$result .= sprintf("\\%03o", $k);
				} else {
					$result .= chr($k);
				}
				$n += 2;
d85 1
a85 1
		printf "%s\n", $result;
d96 2
a97 2
query_tcap(	"\@@0",	"kfnd");
query_tcap(	"\@@7",	"kend");
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
