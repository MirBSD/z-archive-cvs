head	1.3;
access;
symbols
	MIRBSD_10_BASE:1.3
	tg-xterm-215-based:1.2.0.2
	tg-xterm-200-based:1.1
	xterm-215:1.1.109.1
	lynx:1.1.109
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.3
date	2006.07.02.00.54.54;	author tg;	state Exp;
branches;
next	1.2;
commitid	10044A719405F9E103E;

1.2
date	2006.07.02.00.02.51;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A70D294F0BB63C;

1.1
date	2005.03.18.10.52.33;	author tg;	state Exp;
branches
	1.1.103.1
	1.1.109.1;
next	;

1.1.103.1
date	2005.03.18.10.52.33;	author tg;	state Exp;
branches;
next	;

1.1.109.1
date	2006.07.01.23.27.06;	author tg;	state Exp;
branches;
next	;
commitid	10044A704BD2A6243A3;


desc
@@


1.3
log
@revert to xterm-200-based (plus fix an openbsd glitch)
xterm-215-based does not work correctly:
* uxterm does not honour its class (e.g. my font is too small)
* utmp is never updated
@
text
@/* $XTermId: xstrings.c,v 1.21 2005/01/11 00:13:47 tom Exp $ */

/* $XFree86: xc/programs/xterm/xstrings.c,v 1.9 2005/01/14 01:50:03 dickey Exp $ */

/************************************************************

Copyright 2000-2004,2005 by Thomas E. Dickey

                        All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name(s) of the above copyright
holders shall not be used in advertising or otherwise to promote the
sale, use or other dealings in this Software without prior written
authorization.

********************************************************/

#include <xterm.h>

#include <sys/types.h>
#include <string.h>
#include <ctype.h>

#include <xstrings.h>

char *
x_basename(char *name)
{
    char *cp;

    cp = strrchr(name, '/');
#ifdef __UNIXOS2__
    if (cp == 0)
	cp = strrchr(name, '\\');
#endif
    return (cp ? cp + 1 : name);
}

int
x_strcasecmp(const char *s1, const char *s2)
{
    unsigned len = strlen(s1);

    if (len != strlen(s2))
	return 1;

    while (len-- != 0) {
	int c1 = toupper(CharOf(*s1));
	int c2 = toupper(CharOf(*s2));
	if (c1 != c2)
	    return 1;
	s1++, s2++;
    }

    return 0;
}

/*
 * Allocates a copy of a string
 */
char *
x_strdup(const char *s)
{
    char *result = 0;

    if (s != 0) {
	char *t = CastMallocN(char, strlen(s));
	if (t != 0) {
	    strcpy(t, s);
	}
	result = t;
    }
    return result;
}

/*
 * Returns a pointer to the first occurrence of s2 in s1,
 * or NULL if there are none.
 */
char *
x_strindex(char *s1, char *s2)
{
    char *s3;
    size_t s2len = strlen(s2);

    while ((s3 = strchr(s1, *s2)) != NULL) {
	if (strncmp(s3, s2, s2len) == 0)
	    return (s3);
	s1 = ++s3;
    }
    return (NULL);
}

/*
 * Trims leading/trailing spaces from the string, returns a copy of it if it
 * is modified.
 */
char *
x_strtrim(char *s)
{
    char *base = s;
    char *d;

    if (s != 0 && *s != '\0') {
	char *t = x_strdup(base);
	s = t;
	d = s;
	while (isspace(CharOf(*s))) {
	    ++s;
	}
	while ((*d++ = *s++) != '\0') {
	    ;
	}
	if (*t != '\0') {
	    s = t + strlen(t);
	    while (s != t && isspace(CharOf(s[-1]))) {
		*--s = '\0';
	    }
	}
	if (!strcmp(t, base)) {
	    free(t);
	} else {
	    base = t;
	}
    }
    return base;
}
@


1.2
log
@merge and go back to xterm-215
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.25 2006/02/13 01:14:59 tom Exp $ */
d3 1
a3 1
/* $XFree86: xc/programs/xterm/xstrings.c,v 1.10 2006/02/13 01:14:59 dickey Exp $ */
d7 1
a7 1
Copyright 2000-2005,2006 by Thomas E. Dickey
a57 16
char *
x_skip_blanks(char *s)
{
    while (isspace(CharOf(*s)))
	++s;
    return s;
}

char *
x_skip_nonblanks(char *s)
{
    while (*s != '\0' && !isspace(CharOf(*s)))
	++s;
    return s;
}

d66 1
a66 7
    return x_strncasecmp(s1, s2, len);
}

int
x_strncasecmp(const char *s1, const char *s2, unsigned n)
{
    while (n-- != 0) {
a70 2
	if (c1 == 0)
	    break;
d114 2
a115 1
 * Trims leading/trailing spaces from a copy of the string.
d127 3
a129 1
	s = x_skip_blanks(s);
d139 5
a143 1
	base = t;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.21 2005/01/11 00:13:47 tom Exp $ */
d3 1
a3 1
/* $XFree86: xc/programs/xterm/xstrings.c,v 1.9 2005/01/14 01:50:03 dickey Exp $ */
d7 1
a7 1
Copyright 2000-2004,2005 by Thomas E. Dickey
d58 16
d82 7
a88 1
    while (len-- != 0) {
d93 2
d138 1
a138 2
 * Trims leading/trailing spaces from the string, returns a copy of it if it
 * is modified.
d150 1
a150 3
	while (isspace(CharOf(*s))) {
	    ++s;
	}
d160 1
a160 5
	if (!strcmp(t, base)) {
	    free(t);
	} else {
	    base = t;
	}
@


1.1.109.1
log
@Import xterm-215 (latest from Tom Dickey)
XFree86 4.6.0 had xterm-213 with no diffs,
so we only need to care about both obsd and
mbsd local diffs
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.25 2006/02/13 01:14:59 tom Exp $ */
d3 1
a3 1
/* $XFree86: xc/programs/xterm/xstrings.c,v 1.10 2006/02/13 01:14:59 dickey Exp $ */
d7 1
a7 1
Copyright 2000-2005,2006 by Thomas E. Dickey
a57 16
char *
x_skip_blanks(char *s)
{
    while (isspace(CharOf(*s)))
	++s;
    return s;
}

char *
x_skip_nonblanks(char *s)
{
    while (*s != '\0' && !isspace(CharOf(*s)))
	++s;
    return s;
}

d66 1
a66 7
    return x_strncasecmp(s1, s2, len);
}

int
x_strncasecmp(const char *s1, const char *s2, unsigned n)
{
    while (n-- != 0) {
a70 2
	if (c1 == 0)
	    break;
d114 2
a115 1
 * Trims leading/trailing spaces from a copy of the string.
d127 3
a129 1
	s = x_skip_blanks(s);
d139 5
a143 1
	base = t;
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
