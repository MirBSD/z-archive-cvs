head	1.2;
access;
symbols
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@# @;


1.2
date	2005.03.19.17.19.53;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.18.10.50.32;	author tg;	state Exp;
branches
	1.1.103.1;
next	;

1.1.103.1
date	2005.03.18.10.50.32;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge as much diff of old as possible
@
text
@XCOMM $XConsortium: Imakefile /main/16 1996/10/27 18:07:43 kaleb $




XCOMM $XFree86: xc/programs/Xserver/hw/xfree86/os-support/bus/Imakefile,v 1.33 2004/09/28 15:17:14 dawes Exp $

#include <Server.tmpl>

#if defined(LinuxArchitecture) && defined(AlphaArchitecture)

XCOMM Alpha (Linux) PCI driver

PCIDRVRSRC = axpPci.c
PCIDRVROBJ = axpPci.o

#elif defined(LinuxArchitecture) && defined(SparcArchitecture)

XCOMM Sparc SBUS driver and generic Linux PCI driver

PCIDRVRSRC = linuxPci.c
PCIDRVROBJ = linuxPci.o
SBUSDRVSRC = Sbus.c
SBUSDRVOBJ = Sbus.o

#elif defined(SunArchitecture) && defined(SparcArchitecture)

XCOMM Sparc SBUS & PCI drivers

PCIDRVRSRC = sparcPci.c
PCIDRVROBJ = sparcPci.o
SBUSDRVSRC = Sbus.c
SBUSDRVOBJ = Sbus.o

#elif defined(LinuxArchitecture) && \
      (defined(PpcArchitecture) || \
       defined(MipsArchitecture) || \
       defined(ia64Architecture) || \
       defined(Mc68020Architecture) || \
       defined(Arm32Architecture) || \
       defined(HPArchitecture) || \
       defined(s390Architecture) || \
       defined(SuperHArchitecture) || \
       defined(SuperHebArchitecture))

XCOMM generic linux PCI driver (using /proc/bus/pci, requires kernel 2.2)

PCIDRVRSRC = linuxPci.c
PCIDRVROBJ = linuxPci.o

#elif defined(OpenBSDArchitecture) && \
	(defined(Arm32Architecture) || \
	defined(PpcArchitecture) || \
	defined(AlphaArchitecture) || \
	defined(HPArchitecture) || \
	defined(SparcArchitecture) || \
	defined(Sparc64Architecture))

XCOMM OpenBSD/alpha, OpenBSD/hppa, OpenBSD/powerpc and OpenBSD/sparc64

PCIDRVRSRC = freebsdPci.c
PCIDRVROBJ = freebsdPci.o

#elif defined(NetBSDArchitecture) && defined(PpcArchitecture)

XCOMM NetBSD/powerpc

PCIDRVRSRC = netbsdPci.c
PCIDRVROBJ = netbsdPci.o

#elif defined(PpcArchitecture)

XCOMM PowerPC PCI drivers

PCIDRVRSRC = ppcPci.c
PCIDRVROBJ = ppcPci.o

#elif defined(LinuxArchitecture) && \
     (defined(i386Architecture) || defined(AMD64Architecture))

XCOMM ix86 PCI driver with OS fallback for Linux

PCIDRVRSRC = ix86Pci.c linuxPci.c
PCIDRVROBJ = ix86Pci.o linuxPci.o

#elif defined(FreeBSDArchitecture) && \
     (defined(AlphaArchitecture) || defined(AMD64Architecture))


XCOMM generic FreeBSD PCI driver (using /dev/pci)

PCIDRVRSRC = freebsdPci.c
PCIDRVROBJ = freebsdPci.o

#elif defined(FreeBSDArchitecture) && defined(Sparc64Architecture)

XCOMM Sparc SBUS & PCI drivers

PCIDRVRSRC = freebsdPci.c
PCIDRVROBJ = freebsdPci.o
SBUSDRVSRC = Sbus.c
SBUSDRVOBJ = Sbus.o

#elif defined(NetBSDArchitecture) && defined(AlphaArchitecture)

XCOMM Alpha (NetBSD) PCI driver

PCIDRVRSRC = netbsdPci.c
PCIDRVROBJ = netbsdPci.o

#elif defined(i386Architecture) || \
      defined(ia64Architecture) || \
      defined(AMD64Architecture)

XCOMM ix86 PCI driver

PCIDRVRSRC = ix86Pci.c
PCIDRVROBJ = ix86Pci.o
XCOMM PCIDRVRSRC = linuxPci.c
XCOMM PCIDRVROBJ = linuxPci.o

#else
XCOMM no PCI driver -- shouldn't get here
#endif

#if defined(SparcArchitecture)
# if !defined(SunArchitecture)
PCIARCHSRC = sparcPci.c
PCIARCHOBJ = sparcPci.o
# endif
#elif defined(ia64Architecture)
PCIARCHSRC = ia64Pci.c 460gxPCI.c e8870PCI.c zx1PCI.c
PCIARCHOBJ = ia64Pci.o 460gxPCI.o e8870PCI.o zx1PCI.o
#endif

SRCS = Pci.c $(PCIDRVRSRC) $(SBUSDRVSRC) $(PCIARCHSRC)
OBJS = Pci.o $(PCIDRVROBJ) $(SBUSDRVOBJ) $(PCIARCHOBJ)

INCLUDES = -I. -I$(XF86COMSRC) -I$(XF86OSSRC) \
	   -I$(SERVERSRC)/include -I$(XINCLUDESRC)

NormalLibraryObjectRule()
SubdirLibraryRule($(OBJS))

/*
 * egcs 1.1.2 as provided with some Linux distributions has an optimisation
 * bug that results in bad code for this file.
 */
#if Egcs112Bug
SpecialCObjectRule(Pci,NullParameter,-O0)
#endif

#if defined(SunArchitecture) && defined(SparcArchitecture)

LFS_DEFINES = `getconf LFS_CFLAGS`

SpecialCObjectRule(sparcPci,NullParameter,$(LFS_DEFINES))

#endif

DependTarget()
@


1.1
log
@Initial revision
@
text
@d52 2
a53 1
	(defined(PpcArchitecture) || \
d55 2
d59 1
a59 1
XCOMM OpenBSD/alpha, OpenBSD/powerpc and OpenBSD/sparc64
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
