head	1.1;
branch	1.1.1;
access;
symbols
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200503191540:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.03.19.15.59.24;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.03.19.15.59.24;	author tg;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#!/usr/bin/perl
# This is used if the RANDIMAGEFILE switch does not work so instead of:
# xlock -imagefile [ DIRECTORY | FILE ] [other xlock options]
# try
# randimagefile.pl [DIRECTORY | FILE] [other xlock options]
# By the way the typical other xlock options that would be used here are
# -mode [image | puzzle] -install

local($file) = shift(@@ARGV);
if ($file eq "") {
    print "\nUsage: $0 [DIRECTORY | FILE] [other xlock options]\n";
    print "\tother xlock options typically are: -mode [image | puzzle] -install\n";
    exit 1;
}

getrandfile();
#printf "xlock -imagefile $file @@ARGV\n";
system "xlock -imagefile $file @@ARGV";

sub getrandfile {
  if (-d $file) { # OK so its not really a file :)
    opendir(DIR, $file) || die "Can not open $file";
    local(@@filenames) = grep(!/^\.\.?$/, readdir(DIR)); # ls but avoid . && ..
    closedir(DIR);
    srand(time); # use time|$$ if security involved
    $file = splice(@@filenames, rand @@filenames, 1); # pick one
  }
}
@


1.1.1.1
log
@Import three helpful programmes from OpenBSD sources
@
text
@@
