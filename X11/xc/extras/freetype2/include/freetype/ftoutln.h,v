head	1.6;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.3
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.6
date	2017.04.15.19.21.03;	author tg;	state Exp;
branches;
next	1.5;
commitid	10058F2723111C7BEE2;

1.5
date	2013.08.06.19.47.19;	author tg;	state Exp;
branches;
next	1.4;
commitid	100520152445E05B912;

1.4
date	2008.06.12.20.54.20;	author bsiegert;	state Exp;
branches;
next	1.3;
commitid	10048518C1E44F62885;

1.3
date	2008.02.26.20.04.43;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10047C470A72A1E13CE;

1.2
date	2006.06.29.20.24.27;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.03;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.51.47;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.36.12;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.103.1
date	2005.03.18.10.43.03;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.34.39;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.38.39;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.18;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.41.56;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.6
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  ftoutln.h                                                              */
/*                                                                         */
/*    Support for the FT_Outline type used to store glyph shapes of        */
/*    most scalable font formats (specification).                          */
/*                                                                         */
/*  Copyright 1996-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#ifndef FTOUTLN_H_
#define FTOUTLN_H_


#include <ft2build.h>
#include FT_FREETYPE_H

#ifdef FREETYPE_H
#error "freetype.h of FreeType 1 has been loaded!"
#error "Please fix the directory search order for header files"
#error "so that freetype.h of FreeType 2 is found first."
#endif


FT_BEGIN_HEADER


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    outline_processing                                                 */
  /*                                                                       */
  /* <Title>                                                               */
  /*    Outline Processing                                                 */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    Functions to create, transform, and render vectorial glyph images. */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This section contains routines used to create and destroy scalable */
  /*    glyph images known as `outlines'.  These can also be measured,     */
  /*    transformed, and converted into bitmaps and pixmaps.               */
  /*                                                                       */
  /* <Order>                                                               */
  /*    FT_Outline                                                         */
  /*    FT_Outline_New                                                     */
  /*    FT_Outline_Done                                                    */
  /*    FT_Outline_Copy                                                    */
  /*    FT_Outline_Translate                                               */
  /*    FT_Outline_Transform                                               */
  /*    FT_Outline_Embolden                                                */
  /*    FT_Outline_EmboldenXY                                              */
  /*    FT_Outline_Reverse                                                 */
  /*    FT_Outline_Check                                                   */
  /*                                                                       */
  /*    FT_Outline_Get_CBox                                                */
  /*    FT_Outline_Get_BBox                                                */
  /*                                                                       */
  /*    FT_Outline_Get_Bitmap                                              */
  /*    FT_Outline_Render                                                  */
  /*    FT_Outline_Decompose                                               */
  /*    FT_Outline_Funcs                                                   */
  /*    FT_Outline_MoveToFunc                                              */
  /*    FT_Outline_LineToFunc                                              */
  /*    FT_Outline_ConicToFunc                                             */
  /*    FT_Outline_CubicToFunc                                             */
  /*                                                                       */
  /*    FT_Orientation                                                     */
  /*    FT_Outline_Get_Orientation                                         */
  /*                                                                       */
  /*    FT_OUTLINE_XXX                                                     */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Decompose                                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Walk over an outline's structure to decompose it into individual   */
  /*    segments and BÃ©zier arcs.  This function also emits `move to'      */
  /*    operations to indicate the start of new contours in the outline.   */
  /*                                                                       */
  /* <Input>                                                               */
  /*    outline        :: A pointer to the source target.                  */
  /*                                                                       */
  /*    func_interface :: A table of `emitters', i.e., function pointers   */
  /*                      called during decomposition to indicate path     */
  /*                      operations.                                      */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    user           :: A typeless pointer that is passed to each        */
  /*                      emitter during the decomposition.  It can be     */
  /*                      used to store the state during the               */
  /*                      decomposition.                                   */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    A contour that contains a single point only is represented by a    */
  /*    `move to' operation followed by `line to' to the same point.  In   */
  /*    most cases, it is best to filter this out before using the         */
  /*    outline for stroking purposes (otherwise it would result in a      */
  /*    visible dot when round caps are used).                             */
  /*                                                                       */
  /*    Similarly, the function returns success for an empty outline also  */
  /*    (doing nothing, this is, not calling any emitter); if necessary,   */
  /*    you should filter this out, too.                                   */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_Decompose( FT_Outline*              outline,
                        const FT_Outline_Funcs*  func_interface,
                        void*                    user );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_New                                                     */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Create a new outline of a given size.                              */
  /*                                                                       */
  /* <Input>                                                               */
  /*    library     :: A handle to the library object from where the       */
  /*                   outline is allocated.  Note however that the new    */
  /*                   outline will *not* necessarily be *freed*, when     */
  /*                   destroying the library, by @@FT_Done_FreeType.       */
  /*                                                                       */
  /*    numPoints   :: The maximum number of points within the outline.    */
  /*                   Must be smaller than or equal to 0xFFFF (65535).    */
  /*                                                                       */
  /*    numContours :: The maximum number of contours within the outline.  */
  /*                   This value must be in the range 0 to `numPoints'.   */
  /*                                                                       */
  /* <Output>                                                              */
  /*    anoutline   :: A handle to the new outline.                        */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The reason why this function takes a `library' parameter is simply */
  /*    to use the library's memory allocator.                             */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_New( FT_Library   library,
                  FT_UInt      numPoints,
                  FT_Int       numContours,
                  FT_Outline  *anoutline );


  FT_EXPORT( FT_Error )
  FT_Outline_New_Internal( FT_Memory    memory,
                           FT_UInt      numPoints,
                           FT_Int       numContours,
                           FT_Outline  *anoutline );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Done                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Destroy an outline created with @@FT_Outline_New.                   */
  /*                                                                       */
  /* <Input>                                                               */
  /*    library :: A handle of the library object used to allocate the     */
  /*               outline.                                                */
  /*                                                                       */
  /*    outline :: A pointer to the outline object to be discarded.        */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    If the outline's `owner' field is not set, only the outline        */
  /*    descriptor will be released.                                       */
  /*                                                                       */
  /*    The reason why this function takes an `library' parameter is       */
  /*    simply to use ft_mem_free().                                       */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_Done( FT_Library   library,
                   FT_Outline*  outline );


  FT_EXPORT( FT_Error )
  FT_Outline_Done_Internal( FT_Memory    memory,
                            FT_Outline*  outline );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Check                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Check the contents of an outline descriptor.                       */
  /*                                                                       */
  /* <Input>                                                               */
  /*    outline :: A handle to a source outline.                           */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    An empty outline, or an outline with a single point only is also   */
  /*    valid.                                                             */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_Check( FT_Outline*  outline );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Get_CBox                                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return an outline's `control box'.  The control box encloses all   */
  /*    the outline's points, including BÃ©zier control points.  Though it  */
  /*    coincides with the exact bounding box for most glyphs, it can be   */
  /*    slightly larger in some situations (like when rotating an outline  */
  /*    that contains BÃ©zier outside arcs).                                */
  /*                                                                       */
  /*    Computing the control box is very fast, while getting the bounding */
  /*    box can take much more time as it needs to walk over all segments  */
  /*    and arcs in the outline.  To get the latter, you can use the       */
  /*    `ftbbox' component, which is dedicated to this single task.        */
  /*                                                                       */
  /* <Input>                                                               */
  /*    outline :: A pointer to the source outline descriptor.             */
  /*                                                                       */
  /* <Output>                                                              */
  /*    acbox   :: The outline's control box.                              */
  /*                                                                       */
  /* <Note>                                                                */
  /*    See @@FT_Glyph_Get_CBox for a discussion of tricky fonts.           */
  /*                                                                       */
  FT_EXPORT( void )
  FT_Outline_Get_CBox( const FT_Outline*  outline,
                       FT_BBox           *acbox );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Translate                                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Apply a simple translation to the points of an outline.            */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    outline :: A pointer to the target outline descriptor.             */
  /*                                                                       */
  /* <Input>                                                               */
  /*    xOffset :: The horizontal offset.                                  */
  /*                                                                       */
  /*    yOffset :: The vertical offset.                                    */
  /*                                                                       */
  FT_EXPORT( void )
  FT_Outline_Translate( const FT_Outline*  outline,
                        FT_Pos             xOffset,
                        FT_Pos             yOffset );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Copy                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Copy an outline into another one.  Both objects must have the      */
  /*    same sizes (number of points & number of contours) when this       */
  /*    function is called.                                                */
  /*                                                                       */
  /* <Input>                                                               */
  /*    source :: A handle to the source outline.                          */
  /*                                                                       */
  /* <Output>                                                              */
  /*    target :: A handle to the target outline.                          */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_Copy( const FT_Outline*  source,
                   FT_Outline        *target );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Transform                                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Apply a simple 2x2 matrix to all of an outline's points.  Useful   */
  /*    for applying rotations, slanting, flipping, etc.                   */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    outline :: A pointer to the target outline descriptor.             */
  /*                                                                       */
  /* <Input>                                                               */
  /*    matrix  :: A pointer to the transformation matrix.                 */
  /*                                                                       */
  /* <Note>                                                                */
  /*    You can use @@FT_Outline_Translate if you need to translate the     */
  /*    outline's points.                                                  */
  /*                                                                       */
  FT_EXPORT( void )
  FT_Outline_Transform( const FT_Outline*  outline,
                        const FT_Matrix*   matrix );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Embolden                                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Embolden an outline.  The new outline will be at most 4~times      */
  /*    `strength' pixels wider and higher.  You may think of the left and */
  /*    bottom borders as unchanged.                                       */
  /*                                                                       */
  /*    Negative `strength' values to reduce the outline thickness are     */
  /*    possible also.                                                     */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    outline  :: A handle to the target outline.                        */
  /*                                                                       */
  /* <Input>                                                               */
  /*    strength :: How strong the glyph is emboldened.  Expressed in      */
  /*                26.6 pixel format.                                     */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The used algorithm to increase or decrease the thickness of the    */
  /*    glyph doesn't change the number of points; this means that certain */
  /*    situations like acute angles or intersections are sometimes        */
  /*    handled incorrectly.                                               */
  /*                                                                       */
  /*    If you need `better' metrics values you should call                */
  /*    @@FT_Outline_Get_CBox or @@FT_Outline_Get_BBox.                      */
  /*                                                                       */
  /*    Example call:                                                      */
  /*                                                                       */
  /*    {                                                                  */
  /*      FT_Load_Glyph( face, index, FT_LOAD_DEFAULT );                   */
  /*      if ( face->glyph->format == FT_GLYPH_FORMAT_OUTLINE )            */
  /*        FT_Outline_Embolden( &face->glyph->outline, strength );        */
  /*    }                                                                  */
  /*                                                                       */
  /*    To get meaningful results, font scaling values must be set with    */
  /*    functions like @@FT_Set_Char_Size before calling FT_Render_Glyph.   */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_Embolden( FT_Outline*  outline,
                       FT_Pos       strength );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_EmboldenXY                                              */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Embolden an outline.  The new outline will be `xstrength' pixels   */
  /*    wider and `ystrength' pixels higher.  Otherwise, it is similar to  */
  /*    @@FT_Outline_Embolden, which uses the same strength in both         */
  /*    directions.                                                        */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_EmboldenXY( FT_Outline*  outline,
                         FT_Pos       xstrength,
                         FT_Pos       ystrength );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Reverse                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Reverse the drawing direction of an outline.  This is used to      */
  /*    ensure consistent fill conventions for mirrored glyphs.            */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    outline :: A pointer to the target outline descriptor.             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    This function toggles the bit flag @@FT_OUTLINE_REVERSE_FILL in     */
  /*    the outline's `flags' field.                                       */
  /*                                                                       */
  /*    It shouldn't be used by a normal client application, unless it     */
  /*    knows what it is doing.                                            */
  /*                                                                       */
  FT_EXPORT( void )
  FT_Outline_Reverse( FT_Outline*  outline );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Get_Bitmap                                              */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Render an outline within a bitmap.  The outline's image is simply  */
  /*    OR-ed to the target bitmap.                                        */
  /*                                                                       */
  /* <Input>                                                               */
  /*    library :: A handle to a FreeType library object.                  */
  /*                                                                       */
  /*    outline :: A pointer to the source outline descriptor.             */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    abitmap :: A pointer to the target bitmap descriptor.              */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    This function does NOT CREATE the bitmap, it only renders an       */
  /*    outline image within the one you pass to it!  Consequently, the    */
  /*    various fields in `abitmap' should be set accordingly.             */
  /*                                                                       */
  /*    It will use the raster corresponding to the default glyph format.  */
  /*                                                                       */
  /*    The value of the `num_grays' field in `abitmap' is ignored.  If    */
  /*    you select the gray-level rasterizer, and you want less than 256   */
  /*    gray levels, you have to use @@FT_Outline_Render directly.          */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_Get_Bitmap( FT_Library        library,
                         FT_Outline*       outline,
                         const FT_Bitmap  *abitmap );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Render                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Render an outline within a bitmap using the current scan-convert.  */
  /*    This function uses an @@FT_Raster_Params structure as an argument,  */
  /*    allowing advanced features like direct composition, translucency,  */
  /*    etc.                                                               */
  /*                                                                       */
  /* <Input>                                                               */
  /*    library :: A handle to a FreeType library object.                  */
  /*                                                                       */
  /*    outline :: A pointer to the source outline descriptor.             */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    params  :: A pointer to an @@FT_Raster_Params structure used to     */
  /*               describe the rendering operation.                       */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    You should know what you are doing and how @@FT_Raster_Params works */
  /*    to use this function.                                              */
  /*                                                                       */
  /*    The field `params.source' will be set to `outline' before the scan */
  /*    converter is called, which means that the value you give to it is  */
  /*    actually ignored.                                                  */
  /*                                                                       */
  /*    The gray-level rasterizer always uses 256 gray levels.  If you     */
  /*    want less gray levels, you have to provide your own span callback. */
  /*    See the @@FT_RASTER_FLAG_DIRECT value of the `flags' field in the   */
  /*    @@FT_Raster_Params structure for more details.                      */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_Render( FT_Library         library,
                     FT_Outline*        outline,
                     FT_Raster_Params*  params );


 /**************************************************************************
  *
  * @@enum:
  *   FT_Orientation
  *
  * @@description:
  *   A list of values used to describe an outline's contour orientation.
  *
  *   The TrueType and PostScript specifications use different conventions
  *   to determine whether outline contours should be filled or unfilled.
  *
  * @@values:
  *   FT_ORIENTATION_TRUETYPE ::
  *     According to the TrueType specification, clockwise contours must
  *     be filled, and counter-clockwise ones must be unfilled.
  *
  *   FT_ORIENTATION_POSTSCRIPT ::
  *     According to the PostScript specification, counter-clockwise contours
  *     must be filled, and clockwise ones must be unfilled.
  *
  *   FT_ORIENTATION_FILL_RIGHT ::
  *     This is identical to @@FT_ORIENTATION_TRUETYPE, but is used to
  *     remember that in TrueType, everything that is to the right of
  *     the drawing direction of a contour must be filled.
  *
  *   FT_ORIENTATION_FILL_LEFT ::
  *     This is identical to @@FT_ORIENTATION_POSTSCRIPT, but is used to
  *     remember that in PostScript, everything that is to the left of
  *     the drawing direction of a contour must be filled.
  *
  *   FT_ORIENTATION_NONE ::
  *     The orientation cannot be determined.  That is, different parts of
  *     the glyph have different orientation.
  *
  */
  typedef enum  FT_Orientation_
  {
    FT_ORIENTATION_TRUETYPE   = 0,
    FT_ORIENTATION_POSTSCRIPT = 1,
    FT_ORIENTATION_FILL_RIGHT = FT_ORIENTATION_TRUETYPE,
    FT_ORIENTATION_FILL_LEFT  = FT_ORIENTATION_POSTSCRIPT,
    FT_ORIENTATION_NONE

  } FT_Orientation;


 /**************************************************************************
  *
  * @@function:
  *   FT_Outline_Get_Orientation
  *
  * @@description:
  *   This function analyzes a glyph outline and tries to compute its
  *   fill orientation (see @@FT_Orientation).  This is done by integrating
  *   the total area covered by the outline. The positive integral
  *   corresponds to the clockwise orientation and @@FT_ORIENTATION_POSTSCRIPT
  *   is returned. The negative integral corresponds to the counter-clockwise
  *   orientation and @@FT_ORIENTATION_TRUETYPE is returned.
  *
  *   Note that this will return @@FT_ORIENTATION_TRUETYPE for empty
  *   outlines.
  *
  * @@input:
  *   outline ::
  *     A handle to the source outline.
  *
  * @@return:
  *   The orientation.
  *
  */
  FT_EXPORT( FT_Orientation )
  FT_Outline_Get_Orientation( FT_Outline*  outline );

  /* */


FT_END_HEADER

#endif /* FTOUTLN_H_ */


/* END */


/* Local Variables: */
/* coding: utf-8    */
/* End:             */
@


1.5
log
@fastmerge
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2005, 2006, 2007, 2008, 2009, 2010 by */
d20 2
a21 2
#ifndef __FTOUTLN_H__
#define __FTOUTLN_H__
a54 1
  /*    FT_OUTLINE_FLAGS                                                   */
d61 1
a69 1
  /*                                                                       */
d72 9
a80 4
  /*    FT_Outline_MoveTo_Func                                             */
  /*    FT_Outline_LineTo_Func                                             */
  /*    FT_Outline_ConicTo_Func                                            */
  /*    FT_Outline_CubicTo_Func                                            */
d103 1
a103 1
  /*    user           :: A typeless pointer which is passed to each       */
d111 11
d142 2
a143 1
  /*    numPoints   :: The maximal number of points within the outline.    */
d145 2
a146 1
  /*    numContours :: The maximal number of contours within the outline.  */
d220 4
d238 1
a238 1
  /*    which contains BÃ©zier outside arcs).                               */
d243 1
a243 1
  /*    `ftbbox' component which is dedicated to this single task.         */
d251 3
d359 1
a359 1
  /*    @@FT_Outline_Get_CBox ot @@FT_Outline_Get_BBox.                      */
d365 2
a366 2
  /*      if ( face->slot->format == FT_GLYPH_FORMAT_OUTLINE )             */
  /*        FT_Outline_Embolden( &face->slot->outline, strength );         */
d369 3
d380 17
d549 5
a553 3
  *   fill orientation (see @@FT_Orientation).  This is done by computing
  *   the direction of each global horizontal and/or vertical extrema
  *   within the outline.
a568 1

d574 1
a574 1
#endif /* __FTOUTLN_H__ */
@


1.4
log
@Merge freetype 2.3.6
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2005, 2006, 2007, 2008 by             */
d87 3
a89 4
  /*    Walks over an outline's structure to decompose it into individual  */
  /*    segments and BÃ©zier arcs.  This function is also able to emit      */
  /*    `move to' and `close to' operations to indicate the start and end  */
  /*    of new contours in the outline.                                    */
d94 1
a94 1
  /*    func_interface :: A table of `emitters', i.e,. function pointers   */
d105 1
a105 1
  /*    FreeType error code.  0 means success.                             */
d119 1
a119 1
  /*    Creates a new outline of a given size.                             */
d132 1
a132 2
  /*    anoutline   :: A handle to the new outline.  NULL in case of       */
  /*                   error.                                              */
d135 1
a135 1
  /*    FreeType error code.  0 means success.                             */
d161 1
a161 1
  /*    Destroys an outline created with @@FT_Outline_New.                  */
d170 1
a170 1
  /*    FreeType error code.  0 means success.                             */
d201 1
a201 1
  /*    FreeType error code.  0 means success.                             */
d213 1
a213 1
  /*    Returns an outline's `control box'.  The control box encloses all  */
d241 1
a241 1
  /*    Applies a simple translation to the points of an outline.          */
d263 1
a263 1
  /*    Copies an outline into another one.  Both objects must have the    */
d274 1
a274 1
  /*    FreeType error code.  0 means success.                             */
d287 1
a287 1
  /*    Applies a simple 2x2 matrix to all of an outline's points.  Useful */
d311 1
a311 1
  /*    Emboldens an outline.  The new outline will be at most 4 times     */
d326 1
a326 1
  /*    FreeType error code.  0 means success.                             */
d334 3
d356 1
a356 1
  /*    Reverses the drawing direction of an outline.  This is used to     */
d363 1
a363 1
  /*    This functions toggles the bit flag @@FT_OUTLINE_REVERSE_FILL in    */
d379 1
a379 1
  /*    Renders an outline within a bitmap.  The outline's image is simply */
d391 1
a391 1
  /*    FreeType error code.  0 means success.                             */
d395 2
a396 1
  /*    outline image within the one you pass to it!                       */
d400 4
d416 2
a417 2
  /*    Renders an outline within a bitmap using the current scan-convert. */
  /*    This functions uses an @@FT_Raster_Params structure as an argument, */
d431 1
a431 1
  /*    FreeType error code.  0 means success.                             */
d441 5
d460 1
a460 1
  *   The TrueType and Postscript specifications use different conventions
d469 1
a469 1
  *     According to the Postscript specification, counter-clockwise contours
d479 1
a479 1
  *     remember that in Postscript, everything that is to the left of
@


1.3
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2005, 2006, 2007 by                   */
d476 1
a476 1
  typedef enum
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2005, 2006 by                         */
d106 1
a106 1
  /*    FreeType error code.  0 means sucess.                              */
d396 1
a396 1
  /*    It will use the raster correponding to the default glyph format.   */
d445 1
a445 1
  *  
d451 1
a451 1
  *   
d483 1
a483 1
  
d491 1
a491 1
  *  
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003 by                                     */
d61 1
d88 1
a88 1
  /*    segments and Bezier arcs.  This function is also able to emit      */
d125 2
a126 2
  /*                   outline will NOT necessarily be FREED, when         */
  /*                   destroying the library, by FT_Done_FreeType().      */
d163 1
a163 1
  /*    Destroys an outline created with FT_Outline_New().                 */
d179 1
a179 1
  /*    simply to use FT_Free().                                           */
d216 1
a216 1
  /*    the outline's points, including Bezier control points.  Though it  */
d219 1
a219 1
  /*    which contains Bezier outside arcs).                               */
d233 2
a234 2
  FT_Outline_Get_CBox( FT_Outline*  outline,
                       FT_BBox     *acbox );
d254 3
a256 3
  FT_Outline_Translate( FT_Outline*  outline,
                        FT_Pos       xOffset,
                        FT_Pos       yOffset );
d279 2
a280 2
  FT_Outline_Copy( FT_Outline*  source,
                   FT_Outline  *target );
d299 1
a299 1
  /*    You can use FT_Outline_Translate() if you need to translate the    */
d303 44
a346 2
  FT_Outline_Transform( FT_Outline*  outline,
                        FT_Matrix*   matrix );
d362 1
a362 1
  /*    This functions toggles the bit flag `FT_OUTLINE_REVERSE_FILL' in   */
d386 1
a386 1
  /* <Output>                                                              */
d399 3
a401 3
  FT_Outline_Get_Bitmap( FT_Library   library,
                         FT_Outline*  outline,
                         FT_Bitmap   *abitmap );
d411 1
a411 1
  /*    This functions uses an FT_Raster_Params structure as an argument,  */
d421 1
a421 1
  /*    params  :: A pointer to a FT_Raster_Params structure used to       */
d428 1
a428 1
  /*    You should know what you are doing and how FT_Raster_Params works  */
d470 5
d481 2
a482 1
    FT_ORIENTATION_FILL_LEFT  = FT_ORIENTATION_POSTSCRIPT
d522 5
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2005, 2006, 2007 by                   */
a60 1
  /*    FT_Outline_Embolden                                                */
d87 1
a87 1
  /*    segments and BÃ©zier arcs.  This function is also able to emit      */
d105 1
a105 1
  /*    FreeType error code.  0 means success.                             */
d124 2
a125 2
  /*                   outline will *not* necessarily be *freed*, when     */
  /*                   destroying the library, by @@FT_Done_FreeType.       */
d162 1
a162 1
  /*    Destroys an outline created with @@FT_Outline_New.                  */
d178 1
a178 1
  /*    simply to use ft_mem_free().                                       */
d215 1
a215 1
  /*    the outline's points, including BÃ©zier control points.  Though it  */
d218 1
a218 1
  /*    which contains BÃ©zier outside arcs).                               */
d232 2
a233 2
  FT_Outline_Get_CBox( const FT_Outline*  outline,
                       FT_BBox           *acbox );
d253 3
a255 3
  FT_Outline_Translate( const FT_Outline*  outline,
                        FT_Pos             xOffset,
                        FT_Pos             yOffset );
d278 2
a279 2
  FT_Outline_Copy( const FT_Outline*  source,
                   FT_Outline        *target );
d298 1
a298 1
  /*    You can use @@FT_Outline_Translate if you need to translate the     */
d302 2
a303 44
  FT_Outline_Transform( const FT_Outline*  outline,
                        const FT_Matrix*   matrix );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Embolden                                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Emboldens an outline.  The new outline will be at most 4 times     */
  /*    `strength' pixels wider and higher.  You may think of the left and */
  /*    bottom borders as unchanged.                                       */
  /*                                                                       */
  /*    Negative `strength' values to reduce the outline thickness are     */
  /*    possible also.                                                     */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    outline  :: A handle to the target outline.                        */
  /*                                                                       */
  /* <Input>                                                               */
  /*    strength :: How strong the glyph is emboldened.  Expressed in      */
  /*                26.6 pixel format.                                     */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The used algorithm to increase or decrease the thickness of the    */
  /*    glyph doesn't change the number of points; this means that certain */
  /*    situations like acute angles or intersections are sometimes        */
  /*    handled incorrectly.                                               */
  /*                                                                       */
  /*    Example call:                                                      */
  /*                                                                       */
  /*    {                                                                  */
  /*      FT_Load_Glyph( face, index, FT_LOAD_DEFAULT );                   */
  /*      if ( face->slot->format == FT_GLYPH_FORMAT_OUTLINE )             */
  /*        FT_Outline_Embolden( &face->slot->outline, strength );         */
  /*    }                                                                  */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_Embolden( FT_Outline*  outline,
                       FT_Pos       strength );
d319 1
a319 1
  /*    This functions toggles the bit flag @@FT_OUTLINE_REVERSE_FILL in    */
d343 1
a343 1
  /* <InOut>                                                               */
d353 1
a353 1
  /*    It will use the raster corresponding to the default glyph format.  */
d356 3
a358 3
  FT_Outline_Get_Bitmap( FT_Library        library,
                         FT_Outline*       outline,
                         const FT_Bitmap  *abitmap );
d368 1
a368 1
  /*    This functions uses an @@FT_Raster_Params structure as an argument, */
d378 1
a378 1
  /*    params  :: A pointer to an @@FT_Raster_Params structure used to     */
d385 1
a385 1
  /*    You should know what you are doing and how @@FT_Raster_Params works */
d402 1
a402 1
  *
d408 1
a408 1
  *
a426 5
  *
  *   FT_ORIENTATION_NONE ::
  *     The orientation cannot be determined.  That is, different parts of
  *     the glyph have different orientation.
  *
d433 2
a434 3
    FT_ORIENTATION_FILL_LEFT  = FT_ORIENTATION_POSTSCRIPT,
    FT_ORIENTATION_NONE

d442 1
a442 1
  *
a472 5


/* Local Variables: */
/* coding: utf-8    */
/* End:             */
@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2005, 2006, 2007, 2008 by             */
d476 1
a476 1
  typedef enum  FT_Orientation_
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2005, 2006 by                         */
a60 1
  /*    FT_Outline_Embolden                                                */
d87 1
a87 1
  /*    segments and BÃ©zier arcs.  This function is also able to emit      */
d124 2
a125 2
  /*                   outline will *not* necessarily be *freed*, when     */
  /*                   destroying the library, by @@FT_Done_FreeType.       */
d162 1
a162 1
  /*    Destroys an outline created with @@FT_Outline_New.                  */
d178 1
a178 1
  /*    simply to use ft_mem_free().                                       */
d215 1
a215 1
  /*    the outline's points, including BÃ©zier control points.  Though it  */
d218 1
a218 1
  /*    which contains BÃ©zier outside arcs).                               */
d232 2
a233 2
  FT_Outline_Get_CBox( const FT_Outline*  outline,
                       FT_BBox           *acbox );
d253 3
a255 3
  FT_Outline_Translate( const FT_Outline*  outline,
                        FT_Pos             xOffset,
                        FT_Pos             yOffset );
d278 2
a279 2
  FT_Outline_Copy( const FT_Outline*  source,
                   FT_Outline        *target );
d298 1
a298 1
  /*    You can use @@FT_Outline_Translate if you need to translate the     */
d302 2
a303 44
  FT_Outline_Transform( const FT_Outline*  outline,
                        const FT_Matrix*   matrix );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Outline_Embolden                                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Emboldens an outline.  The new outline will be at most 4 times     */
  /*    `strength' pixels wider and higher.  You may think of the left and */
  /*    bottom borders as unchanged.                                       */
  /*                                                                       */
  /*    Negative `strength' values to reduce the outline thickness are     */
  /*    possible also.                                                     */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    outline  :: A handle to the target outline.                        */
  /*                                                                       */
  /* <Input>                                                               */
  /*    strength :: How strong the glyph is emboldened.  Expressed in      */
  /*                26.6 pixel format.                                     */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The used algorithm to increase or decrease the thickness of the    */
  /*    glyph doesn't change the number of points; this means that certain */
  /*    situations like acute angles or intersections are sometimes        */
  /*    handled incorrectly.                                               */
  /*                                                                       */
  /*    Example call:                                                      */
  /*                                                                       */
  /*    {                                                                  */
  /*      FT_Load_Glyph( face, index, FT_LOAD_DEFAULT );                   */
  /*      if ( face->slot->format == FT_GLYPH_FORMAT_OUTLINE )             */
  /*        FT_Outline_Embolden( &face->slot->outline, strength );         */
  /*    }                                                                  */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_Embolden( FT_Outline*  outline,
                       FT_Pos       strength );
d319 1
a319 1
  /*    This functions toggles the bit flag @@FT_OUTLINE_REVERSE_FILL in    */
d343 1
a343 1
  /* <InOut>                                                               */
d356 3
a358 3
  FT_Outline_Get_Bitmap( FT_Library        library,
                         FT_Outline*       outline,
                         const FT_Bitmap  *abitmap );
d368 1
a368 1
  /*    This functions uses an @@FT_Raster_Params structure as an argument, */
d378 1
a378 1
  /*    params  :: A pointer to an @@FT_Raster_Params structure used to     */
d385 1
a385 1
  /*    You should know what you are doing and how @@FT_Raster_Params works */
a426 5
  *
  *   FT_ORIENTATION_NONE ::
  *     The orientation cannot be determined.  That is, different parts of
  *     the glyph have different orientation.
  *
d433 1
a433 2
    FT_ORIENTATION_FILL_LEFT  = FT_ORIENTATION_POSTSCRIPT,
    FT_ORIENTATION_NONE
a472 5


/* Local Variables: */
/* coding: utf-8    */
/* End:             */
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2005, 2006, 2007, 2008, 2009, 2010 by */
d87 4
a90 3
  /*    Walk over an outline's structure to decompose it into individual   */
  /*    segments and BÃ©zier arcs.  This function also emits `move to'      */
  /*    operations to indicate the start of new contours in the outline.   */
d95 1
a95 1
  /*    func_interface :: A table of `emitters', i.e., function pointers   */
d106 1
a106 1
  /*    FreeType error code.  0~means success.                             */
d120 1
a120 1
  /*    Create a new outline of a given size.                              */
d133 2
a134 1
  /*    anoutline   :: A handle to the new outline.                        */
d137 1
a137 1
  /*    FreeType error code.  0~means success.                             */
d163 1
a163 1
  /*    Destroy an outline created with @@FT_Outline_New.                   */
d172 1
a172 1
  /*    FreeType error code.  0~means success.                             */
d203 1
a203 1
  /*    FreeType error code.  0~means success.                             */
d215 1
a215 1
  /*    Return an outline's `control box'.  The control box encloses all   */
d243 1
a243 1
  /*    Apply a simple translation to the points of an outline.            */
d265 1
a265 1
  /*    Copy an outline into another one.  Both objects must have the      */
d276 1
a276 1
  /*    FreeType error code.  0~means success.                             */
d289 1
a289 1
  /*    Apply a simple 2x2 matrix to all of an outline's points.  Useful   */
d313 1
a313 1
  /*    Embolden an outline.  The new outline will be at most 4~times      */
d328 1
a328 1
  /*    FreeType error code.  0~means success.                             */
a335 3
  /*    If you need `better' metrics values you should call                */
  /*    @@FT_Outline_Get_CBox ot @@FT_Outline_Get_BBox.                      */
  /*                                                                       */
d355 1
a355 1
  /*    Reverse the drawing direction of an outline.  This is used to      */
d362 1
a362 1
  /*    This function toggles the bit flag @@FT_OUTLINE_REVERSE_FILL in     */
d378 1
a378 1
  /*    Render an outline within a bitmap.  The outline's image is simply  */
d390 1
a390 1
  /*    FreeType error code.  0~means success.                             */
d394 1
a394 4
  /*    outline image within the one you pass to it!  Consequently, the    */
  /*    various fields in `abitmap' should be set accordingly.             */
  /*                                                                       */
  /*    It will use the raster corresponding to the default glyph format.  */
d396 1
a396 3
  /*    The value of the `num_grays' field in `abitmap' is ignored.  If    */
  /*    you select the gray-level rasterizer, and you want less than 256   */
  /*    gray levels, you have to use @@FT_Outline_Render directly.          */
d410 2
a411 2
  /*    Render an outline within a bitmap using the current scan-convert.  */
  /*    This function uses an @@FT_Raster_Params structure as an argument,  */
d425 1
a425 1
  /*    FreeType error code.  0~means success.                             */
a434 5
  /*    The gray-level rasterizer always uses 256 gray levels.  If you     */
  /*    want less gray levels, you have to provide your own span callback. */
  /*    See the @@FT_RASTER_FLAG_DIRECT value of the `flags' field in the   */
  /*    @@FT_Raster_Params structure for more details.                      */
  /*                                                                       */
d445 1
a445 1
  *
d449 1
a449 1
  *   The TrueType and PostScript specifications use different conventions
d451 1
a451 1
  *
d458 1
a458 1
  *     According to the PostScript specification, counter-clockwise contours
d468 1
a468 1
  *     remember that in PostScript, everything that is to the left of
d476 1
a476 1
  typedef enum  FT_Orientation_
d483 1
a483 1

d491 1
a491 1
  *
@


1.1.115.4
log
@letâs see whether we canât update freetype2 as wellâ¦
@
text
@d8 1
a8 1
/*  Copyright 1996-2016 by                                                 */
d20 2
a21 2
#ifndef FTOUTLN_H_
#define FTOUTLN_H_
d55 1
a61 1
  /*    FT_Outline_EmboldenXY                                              */
d70 1
d73 4
a76 9
  /*    FT_Outline_MoveToFunc                                              */
  /*    FT_Outline_LineToFunc                                              */
  /*    FT_Outline_ConicToFunc                                             */
  /*    FT_Outline_CubicToFunc                                             */
  /*                                                                       */
  /*    FT_Orientation                                                     */
  /*    FT_Outline_Get_Orientation                                         */
  /*                                                                       */
  /*    FT_OUTLINE_XXX                                                     */
d99 1
a99 1
  /*    user           :: A typeless pointer that is passed to each        */
a106 11
  /* <Note>                                                                */
  /*    A contour that contains a single point only is represented by a    */
  /*    `move to' operation followed by `line to' to the same point.  In   */
  /*    most cases, it is best to filter this out before using the         */
  /*    outline for stroking purposes (otherwise it would result in a      */
  /*    visible dot when round caps are used).                             */
  /*                                                                       */
  /*    Similarly, the function returns success for an empty outline also  */
  /*    (doing nothing, this is, not calling any emitter); if necessary,   */
  /*    you should filter this out, too.                                   */
  /*                                                                       */
d127 1
a127 2
  /*    numPoints   :: The maximum number of points within the outline.    */
  /*                   Must be smaller than or equal to 0xFFFF (65535).    */
d129 1
a129 2
  /*    numContours :: The maximum number of contours within the outline.  */
  /*                   This value must be in the range 0 to `numPoints'.   */
a202 4
  /* <Note>                                                                */
  /*    An empty outline, or an outline with a single point only is also   */
  /*    valid.                                                             */
  /*                                                                       */
d217 1
a217 1
  /*    that contains BÃ©zier outside arcs).                                */
d222 1
a222 1
  /*    `ftbbox' component, which is dedicated to this single task.        */
a229 3
  /* <Note>                                                                */
  /*    See @@FT_Glyph_Get_CBox for a discussion of tricky fonts.           */
  /*                                                                       */
d335 1
a335 1
  /*    @@FT_Outline_Get_CBox or @@FT_Outline_Get_BBox.                      */
d341 2
a342 2
  /*      if ( face->glyph->format == FT_GLYPH_FORMAT_OUTLINE )            */
  /*        FT_Outline_Embolden( &face->glyph->outline, strength );        */
a344 3
  /*    To get meaningful results, font scaling values must be set with    */
  /*    functions like @@FT_Set_Char_Size before calling FT_Render_Glyph.   */
  /*                                                                       */
a352 17
  /*    FT_Outline_EmboldenXY                                              */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Embolden an outline.  The new outline will be `xstrength' pixels   */
  /*    wider and `ystrength' pixels higher.  Otherwise, it is similar to  */
  /*    @@FT_Outline_Embolden, which uses the same strength in both         */
  /*    directions.                                                        */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Outline_EmboldenXY( FT_Outline*  outline,
                         FT_Pos       xstrength,
                         FT_Pos       ystrength );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
d505 3
a507 5
  *   fill orientation (see @@FT_Orientation).  This is done by integrating
  *   the total area covered by the outline. The positive integral
  *   corresponds to the clockwise orientation and @@FT_ORIENTATION_POSTSCRIPT
  *   is returned. The negative integral corresponds to the counter-clockwise
  *   orientation and @@FT_ORIENTATION_TRUETYPE is returned.
d523 1
d529 1
a529 1
#endif /* FTOUTLN_H_ */
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
