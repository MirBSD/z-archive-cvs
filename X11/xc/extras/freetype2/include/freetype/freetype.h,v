head	1.6;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.3
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.6
date	2017.04.15.19.20.57;	author tg;	state Exp;
branches;
next	1.5;
commitid	10058F2723111C7BEE2;

1.5
date	2013.08.06.19.47.12;	author tg;	state Exp;
branches;
next	1.4;
commitid	100520152445E05B912;

1.4
date	2008.06.12.20.54.16;	author bsiegert;	state Exp;
branches;
next	1.3;
commitid	10048518C1E44F62885;

1.3
date	2008.02.26.20.04.41;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10047C470A72A1E13CE;

1.2
date	2006.06.29.20.24.24;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.01;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.51.49;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.36.16;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.103.1
date	2005.03.18.10.43.01;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.34.34;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.38.44;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.18;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.41.57;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.6
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  freetype.h                                                             */
/*                                                                         */
/*    FreeType high-level API and common types (specification only).       */
/*                                                                         */
/*  Copyright 1996-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#ifndef FREETYPE_H_
#define FREETYPE_H_


#ifndef FT_FREETYPE_H
#error "`ft2build.h' hasn't been included yet!"
#error "Please always use macros to include FreeType header files."
#error "Example:"
#error "  #include <ft2build.h>"
#error "  #include FT_FREETYPE_H"
#endif


#include <ft2build.h>
#include FT_CONFIG_CONFIG_H
#include FT_TYPES_H
#include FT_ERRORS_H


FT_BEGIN_HEADER



  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    header_inclusion                                                   */
  /*                                                                       */
  /* <Title>                                                               */
  /*    FreeType's header inclusion scheme                                 */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    How client applications should include FreeType header files.      */
  /*                                                                       */
  /* <Description>                                                         */
  /*    To be as flexible as possible (and for historical reasons),        */
  /*    FreeType uses a very special inclusion scheme to load header       */
  /*    files, for example                                                 */
  /*                                                                       */
  /*    {                                                                  */
  /*      #include <ft2build.h>                                            */
  /*                                                                       */
  /*      #include FT_FREETYPE_H                                           */
  /*      #include FT_OUTLINE_H                                            */
  /*    }                                                                  */
  /*                                                                       */
  /*    A compiler and its preprocessor only needs an include path to find */
  /*    the file `ft2build.h'; the exact locations and names of the other  */
  /*    FreeType header files are hidden by preprocessor macro names,      */
  /*    loaded by `ft2build.h'.  The API documentation always gives the    */
  /*    header macro name needed for a particular function.                */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    user_allocation                                                    */
  /*                                                                       */
  /* <Title>                                                               */
  /*    User allocation                                                    */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    How client applications should allocate FreeType data structures.  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    FreeType assumes that structures allocated by the user and passed  */
  /*    as arguments are zeroed out except for the actual data.  In other  */
  /*    words, it is recommended to use `calloc' (or variants of it)       */
  /*    instead of `malloc' for allocation.                                */
  /*                                                                       */
  /*************************************************************************/



  /*************************************************************************/
  /*************************************************************************/
  /*                                                                       */
  /*                        B A S I C   T Y P E S                          */
  /*                                                                       */
  /*************************************************************************/
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    base_interface                                                     */
  /*                                                                       */
  /* <Title>                                                               */
  /*    Base Interface                                                     */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    The FreeType~2 base font interface.                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This section describes the most important public high-level API    */
  /*    functions of FreeType~2.                                           */
  /*                                                                       */
  /* <Order>                                                               */
  /*    FT_Library                                                         */
  /*    FT_Face                                                            */
  /*    FT_Size                                                            */
  /*    FT_GlyphSlot                                                       */
  /*    FT_CharMap                                                         */
  /*    FT_Encoding                                                        */
  /*    FT_ENC_TAG                                                         */
  /*                                                                       */
  /*    FT_FaceRec                                                         */
  /*                                                                       */
  /*    FT_FACE_FLAG_SCALABLE                                              */
  /*    FT_FACE_FLAG_FIXED_SIZES                                           */
  /*    FT_FACE_FLAG_FIXED_WIDTH                                           */
  /*    FT_FACE_FLAG_HORIZONTAL                                            */
  /*    FT_FACE_FLAG_VERTICAL                                              */
  /*    FT_FACE_FLAG_COLOR                                                 */
  /*    FT_FACE_FLAG_SFNT                                                  */
  /*    FT_FACE_FLAG_CID_KEYED                                             */
  /*    FT_FACE_FLAG_TRICKY                                                */
  /*    FT_FACE_FLAG_KERNING                                               */
  /*    FT_FACE_FLAG_MULTIPLE_MASTERS                                      */
  /*    FT_FACE_FLAG_GLYPH_NAMES                                           */
  /*    FT_FACE_FLAG_EXTERNAL_STREAM                                       */
  /*    FT_FACE_FLAG_HINTER                                                */
  /*                                                                       */
  /*    FT_HAS_HORIZONTAL                                                  */
  /*    FT_HAS_VERTICAL                                                    */
  /*    FT_HAS_KERNING                                                     */
  /*    FT_HAS_FIXED_SIZES                                                 */
  /*    FT_HAS_GLYPH_NAMES                                                 */
  /*    FT_HAS_MULTIPLE_MASTERS                                            */
  /*    FT_HAS_COLOR                                                       */
  /*                                                                       */
  /*    FT_IS_SFNT                                                         */
  /*    FT_IS_SCALABLE                                                     */
  /*    FT_IS_FIXED_WIDTH                                                  */
  /*    FT_IS_CID_KEYED                                                    */
  /*    FT_IS_TRICKY                                                       */
  /*                                                                       */
  /*    FT_STYLE_FLAG_BOLD                                                 */
  /*    FT_STYLE_FLAG_ITALIC                                               */
  /*                                                                       */
  /*    FT_SizeRec                                                         */
  /*    FT_Size_Metrics                                                    */
  /*                                                                       */
  /*    FT_GlyphSlotRec                                                    */
  /*    FT_Glyph_Metrics                                                   */
  /*    FT_SubGlyph                                                        */
  /*                                                                       */
  /*    FT_Bitmap_Size                                                     */
  /*                                                                       */
  /*    FT_Init_FreeType                                                   */
  /*    FT_Done_FreeType                                                   */
  /*                                                                       */
  /*    FT_New_Face                                                        */
  /*    FT_Done_Face                                                       */
  /*    FT_Reference_Face                                                  */
  /*    FT_New_Memory_Face                                                 */
  /*    FT_Open_Face                                                       */
  /*    FT_Open_Args                                                       */
  /*    FT_Parameter                                                       */
  /*    FT_Attach_File                                                     */
  /*    FT_Attach_Stream                                                   */
  /*                                                                       */
  /*    FT_Set_Char_Size                                                   */
  /*    FT_Set_Pixel_Sizes                                                 */
  /*    FT_Request_Size                                                    */
  /*    FT_Select_Size                                                     */
  /*    FT_Size_Request_Type                                               */
  /*    FT_Size_RequestRec                                                 */
  /*    FT_Size_Request                                                    */
  /*    FT_Set_Transform                                                   */
  /*    FT_Load_Glyph                                                      */
  /*    FT_Get_Char_Index                                                  */
  /*    FT_Get_First_Char                                                  */
  /*    FT_Get_Next_Char                                                   */
  /*    FT_Get_Name_Index                                                  */
  /*    FT_Load_Char                                                       */
  /*                                                                       */
  /*    FT_OPEN_MEMORY                                                     */
  /*    FT_OPEN_STREAM                                                     */
  /*    FT_OPEN_PATHNAME                                                   */
  /*    FT_OPEN_DRIVER                                                     */
  /*    FT_OPEN_PARAMS                                                     */
  /*                                                                       */
  /*    FT_LOAD_DEFAULT                                                    */
  /*    FT_LOAD_RENDER                                                     */
  /*    FT_LOAD_MONOCHROME                                                 */
  /*    FT_LOAD_LINEAR_DESIGN                                              */
  /*    FT_LOAD_NO_SCALE                                                   */
  /*    FT_LOAD_NO_HINTING                                                 */
  /*    FT_LOAD_NO_BITMAP                                                  */
  /*    FT_LOAD_NO_AUTOHINT                                                */
  /*    FT_LOAD_COLOR                                                      */
  /*                                                                       */
  /*    FT_LOAD_VERTICAL_LAYOUT                                            */
  /*    FT_LOAD_IGNORE_TRANSFORM                                           */
  /*    FT_LOAD_FORCE_AUTOHINT                                             */
  /*    FT_LOAD_NO_RECURSE                                                 */
  /*    FT_LOAD_PEDANTIC                                                   */
  /*                                                                       */
  /*    FT_LOAD_TARGET_NORMAL                                              */
  /*    FT_LOAD_TARGET_LIGHT                                               */
  /*    FT_LOAD_TARGET_MONO                                                */
  /*    FT_LOAD_TARGET_LCD                                                 */
  /*    FT_LOAD_TARGET_LCD_V                                               */
  /*                                                                       */
  /*    FT_LOAD_TARGET_MODE                                                */
  /*                                                                       */
  /*    FT_Render_Glyph                                                    */
  /*    FT_Render_Mode                                                     */
  /*    FT_Get_Kerning                                                     */
  /*    FT_Kerning_Mode                                                    */
  /*    FT_Get_Track_Kerning                                               */
  /*    FT_Get_Glyph_Name                                                  */
  /*    FT_Get_Postscript_Name                                             */
  /*                                                                       */
  /*    FT_CharMapRec                                                      */
  /*    FT_Select_Charmap                                                  */
  /*    FT_Set_Charmap                                                     */
  /*    FT_Get_Charmap_Index                                               */
  /*                                                                       */
  /*    FT_Get_FSType_Flags                                                */
  /*    FT_Get_SubGlyph_Info                                               */
  /*                                                                       */
  /*    FT_Face_Internal                                                   */
  /*    FT_Size_Internal                                                   */
  /*    FT_Slot_Internal                                                   */
  /*                                                                       */
  /*    FT_FACE_FLAG_XXX                                                   */
  /*    FT_STYLE_FLAG_XXX                                                  */
  /*    FT_OPEN_XXX                                                        */
  /*    FT_LOAD_XXX                                                        */
  /*    FT_LOAD_TARGET_XXX                                                 */
  /*    FT_SUBGLYPH_FLAG_XXX                                               */
  /*    FT_FSTYPE_XXX                                                      */
  /*                                                                       */
  /*    FT_HAS_FAST_GLYPHS                                                 */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Glyph_Metrics                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A structure used to model the metrics of a single glyph.  The      */
  /*    values are expressed in 26.6 fractional pixel format; if the flag  */
  /*    @@FT_LOAD_NO_SCALE has been used while loading the glyph, values    */
  /*    are expressed in font units instead.                               */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    width ::                                                           */
  /*      The glyph's width.                                               */
  /*                                                                       */
  /*    height ::                                                          */
  /*      The glyph's height.                                              */
  /*                                                                       */
  /*    horiBearingX ::                                                    */
  /*      Left side bearing for horizontal layout.                         */
  /*                                                                       */
  /*    horiBearingY ::                                                    */
  /*      Top side bearing for horizontal layout.                          */
  /*                                                                       */
  /*    horiAdvance ::                                                     */
  /*      Advance width for horizontal layout.                             */
  /*                                                                       */
  /*    vertBearingX ::                                                    */
  /*      Left side bearing for vertical layout.                           */
  /*                                                                       */
  /*    vertBearingY ::                                                    */
  /*      Top side bearing for vertical layout.  Larger positive values    */
  /*      mean further below the vertical glyph origin.                    */
  /*                                                                       */
  /*    vertAdvance ::                                                     */
  /*      Advance height for vertical layout.  Positive values mean the    */
  /*      glyph has a positive advance downward.                           */
  /*                                                                       */
  /* <Note>                                                                */
  /*    If not disabled with @@FT_LOAD_NO_HINTING, the values represent     */
  /*    dimensions of the hinted glyph (in case hinting is applicable).    */
  /*                                                                       */
  /*    Stroking a glyph with an outside border does not increase          */
  /*    `horiAdvance' or `vertAdvance'; you have to manually adjust these  */
  /*    values to account for the added width and height.                  */
  /*                                                                       */
  typedef struct  FT_Glyph_Metrics_
  {
    FT_Pos  width;
    FT_Pos  height;

    FT_Pos  horiBearingX;
    FT_Pos  horiBearingY;
    FT_Pos  horiAdvance;

    FT_Pos  vertBearingX;
    FT_Pos  vertBearingY;
    FT_Pos  vertAdvance;

  } FT_Glyph_Metrics;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Bitmap_Size                                                     */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This structure models the metrics of a bitmap strike (i.e., a set  */
  /*    of glyphs for a given point size and resolution) in a bitmap font. */
  /*    It is used for the `available_sizes' field of @@FT_Face.            */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    height :: The vertical distance, in pixels, between two            */
  /*              consecutive baselines.  It is always positive.           */
  /*                                                                       */
  /*    width  :: The average width, in pixels, of all glyphs in the       */
  /*              strike.                                                  */
  /*                                                                       */
  /*    size   :: The nominal size of the strike in 26.6 fractional        */
  /*              points.  This field is not very useful.                  */
  /*                                                                       */
  /*    x_ppem :: The horizontal ppem (nominal width) in 26.6 fractional   */
  /*              pixels.                                                  */
  /*                                                                       */
  /*    y_ppem :: The vertical ppem (nominal height) in 26.6 fractional    */
  /*              pixels.                                                  */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Windows FNT:                                                       */
  /*      The nominal size given in a FNT font is not reliable.  Thus when */
  /*      the driver finds it incorrect, it sets `size' to some calculated */
  /*      values and sets `x_ppem' and `y_ppem' to the pixel width and     */
  /*      height given in the font, respectively.                          */
  /*                                                                       */
  /*    TrueType embedded bitmaps:                                         */
  /*      `size', `width', and `height' values are not contained in the    */
  /*      bitmap strike itself.  They are computed from the global font    */
  /*      parameters.                                                      */
  /*                                                                       */
  typedef struct  FT_Bitmap_Size_
  {
    FT_Short  height;
    FT_Short  width;

    FT_Pos    size;

    FT_Pos    x_ppem;
    FT_Pos    y_ppem;

  } FT_Bitmap_Size;


  /*************************************************************************/
  /*************************************************************************/
  /*                                                                       */
  /*                     O B J E C T   C L A S S E S                       */
  /*                                                                       */
  /*************************************************************************/
  /*************************************************************************/

  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_Library                                                         */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A handle to a FreeType library instance.  Each `library' is        */
  /*    completely independent from the others; it is the `root' of a set  */
  /*    of objects like fonts, faces, sizes, etc.                          */
  /*                                                                       */
  /*    It also embeds a memory manager (see @@FT_Memory), as well as a     */
  /*    scan-line converter object (see @@FT_Raster).                       */
  /*                                                                       */
  /*    In multi-threaded applications it is easiest to use one            */
  /*    `FT_Library' object per thread.  In case this is too cumbersome,   */
  /*    a single `FT_Library' object across threads is possible also       */
  /*    (since FreeType version 2.5.6), as long as a mutex lock is used    */
  /*    around @@FT_New_Face and @@FT_Done_Face.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Library objects are normally created by @@FT_Init_FreeType, and     */
  /*    destroyed with @@FT_Done_FreeType.  If you need reference-counting  */
  /*    (cf. @@FT_Reference_Library), use @@FT_New_Library and               */
  /*    @@FT_Done_Library.                                                  */
  /*                                                                       */
  typedef struct FT_LibraryRec_  *FT_Library;


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    module_management                                                  */
  /*                                                                       */
  /*************************************************************************/

  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_Module                                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A handle to a given FreeType module object.  Each module can be a  */
  /*    font driver, a renderer, or anything else that provides services   */
  /*    to the formers.                                                    */
  /*                                                                       */
  typedef struct FT_ModuleRec_*  FT_Module;


  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_Driver                                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A handle to a given FreeType font driver object.  Each font driver */
  /*    is a special module capable of creating faces from font files.     */
  /*                                                                       */
  typedef struct FT_DriverRec_*  FT_Driver;


  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_Renderer                                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A handle to a given FreeType renderer.  A renderer is a special    */
  /*    module in charge of converting a glyph image to a bitmap, when     */
  /*    necessary.  Each renderer supports a given glyph image format, and */
  /*    one or more target surface depths.                                 */
  /*                                                                       */
  typedef struct FT_RendererRec_*  FT_Renderer;


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    base_interface                                                     */
  /*                                                                       */
  /*************************************************************************/

  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_Face                                                            */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A handle to a given typographic face object.  A face object models */
  /*    a given typeface, in a given style.                                */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Each face object also owns a single @@FT_GlyphSlot object, as well  */
  /*    as one or more @@FT_Size objects.                                   */
  /*                                                                       */
  /*    Use @@FT_New_Face or @@FT_Open_Face to create a new face object from */
  /*    a given filepathname or a custom input stream.                     */
  /*                                                                       */
  /*    Use @@FT_Done_Face to destroy it (along with its slot and sizes).   */
  /*                                                                       */
  /*    An `FT_Face' object can only be safely used from one thread at a   */
  /*    time.  Similarly, creation and destruction of `FT_Face' with the   */
  /*    same @@FT_Library object can only be done from one thread at a      */
  /*    time.  On the other hand, functions like @@FT_Load_Glyph and its    */
  /*    siblings are thread-safe and do not need the lock to be held as    */
  /*    long as the same `FT_Face' object is not used from multiple        */
  /*    threads at the same time.                                          */
  /*                                                                       */
  /* <Also>                                                                */
  /*    See @@FT_FaceRec for the publicly accessible fields of a given face */
  /*    object.                                                            */
  /*                                                                       */
  typedef struct FT_FaceRec_*  FT_Face;


  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_Size                                                            */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A handle to an object used to model a face scaled to a given       */
  /*    character size.                                                    */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Each @@FT_Face has an _active_ @@FT_Size object that is used by      */
  /*    functions like @@FT_Load_Glyph to determine the scaling             */
  /*    transformation that in turn is used to load and hint glyphs and    */
  /*    metrics.                                                           */
  /*                                                                       */
  /*    You can use @@FT_Set_Char_Size, @@FT_Set_Pixel_Sizes,                */
  /*    @@FT_Request_Size or even @@FT_Select_Size to change the content     */
  /*    (i.e., the scaling values) of the active @@FT_Size.                 */
  /*                                                                       */
  /*    You can use @@FT_New_Size to create additional size objects for a   */
  /*    given @@FT_Face, but they won't be used by other functions until    */
  /*    you activate it through @@FT_Activate_Size.  Only one size can be   */
  /*    activated at any given time per face.                              */
  /*                                                                       */
  /* <Also>                                                                */
  /*    See @@FT_SizeRec for the publicly accessible fields of a given size */
  /*    object.                                                            */
  /*                                                                       */
  typedef struct FT_SizeRec_*  FT_Size;


  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_GlyphSlot                                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A handle to a given `glyph slot'.  A slot is a container where it  */
  /*    is possible to load any of the glyphs contained in its parent      */
  /*    face.                                                              */
  /*                                                                       */
  /*    In other words, each time you call @@FT_Load_Glyph or               */
  /*    @@FT_Load_Char, the slot's content is erased by the new glyph data, */
  /*    i.e., the glyph's metrics, its image (bitmap or outline), and      */
  /*    other control information.                                         */
  /*                                                                       */
  /* <Also>                                                                */
  /*    See @@FT_GlyphSlotRec for the publicly accessible glyph fields.     */
  /*                                                                       */
  typedef struct FT_GlyphSlotRec_*  FT_GlyphSlot;


  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_CharMap                                                         */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A handle to a given character map.  A charmap is used to translate */
  /*    character codes in a given encoding into glyph indexes for its     */
  /*    parent's face.  Some font formats may provide several charmaps per */
  /*    font.                                                              */
  /*                                                                       */
  /*    Each face object owns zero or more charmaps, but only one of them  */
  /*    can be `active' and used by @@FT_Get_Char_Index or @@FT_Load_Char.   */
  /*                                                                       */
  /*    The list of available charmaps in a face is available through the  */
  /*    `face->num_charmaps' and `face->charmaps' fields of @@FT_FaceRec.   */
  /*                                                                       */
  /*    The currently active charmap is available as `face->charmap'.      */
  /*    You should call @@FT_Set_Charmap to change it.                      */
  /*                                                                       */
  /* <Note>                                                                */
  /*    When a new face is created (either through @@FT_New_Face or         */
  /*    @@FT_Open_Face), the library looks for a Unicode charmap within     */
  /*    the list and automatically activates it.                           */
  /*                                                                       */
  /* <Also>                                                                */
  /*    See @@FT_CharMapRec for the publicly accessible fields of a given   */
  /*    character map.                                                     */
  /*                                                                       */
  typedef struct FT_CharMapRec_*  FT_CharMap;


  /*************************************************************************/
  /*                                                                       */
  /* <Macro>                                                               */
  /*    FT_ENC_TAG                                                         */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This macro converts four-letter tags into an unsigned long.  It is */
  /*    used to define `encoding' identifiers (see @@FT_Encoding).          */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Since many 16-bit compilers don't like 32-bit enumerations, you    */
  /*    should redefine this macro in case of problems to something like   */
  /*    this:                                                              */
  /*                                                                       */
  /*    {                                                                  */
  /*      #define FT_ENC_TAG( value, a, b, c, d )  value                   */
  /*    }                                                                  */
  /*                                                                       */
  /*    to get a simple enumeration without assigning special numbers.     */
  /*                                                                       */

#ifndef FT_ENC_TAG
#define FT_ENC_TAG( value, a, b, c, d )         \
          value = ( ( (FT_UInt32)(a) << 24 ) |  \
                    ( (FT_UInt32)(b) << 16 ) |  \
                    ( (FT_UInt32)(c) <<  8 ) |  \
                      (FT_UInt32)(d)         )

#endif /* FT_ENC_TAG */


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_Encoding                                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An enumeration used to specify character sets supported by         */
  /*    charmaps.  Used in the @@FT_Select_Charmap API function.            */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Despite the name, this enumeration lists specific character        */
  /*    repertories (i.e., charsets), and not text encoding methods (e.g., */
  /*    UTF-8, UTF-16, etc.).                                              */
  /*                                                                       */
  /*    Other encodings might be defined in the future.                    */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_ENCODING_NONE ::                                                */
  /*      The encoding value~0 is reserved.                                */
  /*                                                                       */
  /*    FT_ENCODING_UNICODE ::                                             */
  /*      Corresponds to the Unicode character set.  This value covers     */
  /*      all versions of the Unicode repertoire, including ASCII and      */
  /*      Latin-1.  Most fonts include a Unicode charmap, but not all      */
  /*      of them.                                                         */
  /*                                                                       */
  /*      For example, if you want to access Unicode value U+1F028 (and    */
  /*      the font contains it), use value 0x1F028 as the input value for  */
  /*      @@FT_Get_Char_Index.                                              */
  /*                                                                       */
  /*    FT_ENCODING_MS_SYMBOL ::                                           */
  /*      Corresponds to the Microsoft Symbol encoding, used to encode     */
  /*      mathematical symbols and wingdings.  For more information, see   */
  /*      `http://www.microsoft.com/typography/otspec/recom.htm',          */
  /*      `http://www.kostis.net/charsets/symbol.htm', and                 */
  /*      `http://www.kostis.net/charsets/wingding.htm'.                   */
  /*                                                                       */
  /*      This encoding uses character codes from the PUA (Private Unicode */
  /*      Area) in the range U+F020-U+F0FF.                                */
  /*                                                                       */
  /*    FT_ENCODING_SJIS ::                                                */
  /*      Corresponds to Japanese SJIS encoding.  More info at             */
  /*      `http://en.wikipedia.org/wiki/Shift_JIS'.                        */
  /*      See note on multi-byte encodings below.                          */
  /*                                                                       */
  /*    FT_ENCODING_GB2312 ::                                              */
  /*      Corresponds to an encoding system for Simplified Chinese as      */
  /*      used in mainland China.                                          */
  /*                                                                       */
  /*    FT_ENCODING_BIG5 ::                                                */
  /*      Corresponds to an encoding system for Traditional Chinese as     */
  /*      used in Taiwan and Hong Kong.                                    */
  /*                                                                       */
  /*    FT_ENCODING_WANSUNG ::                                             */
  /*      Corresponds to the Korean encoding system known as Wansung.      */
  /*      For more information see                                         */
  /*      `https://msdn.microsoft.com/en-US/goglobal/cc305154'.            */
  /*                                                                       */
  /*    FT_ENCODING_JOHAB ::                                               */
  /*      The Korean standard character set (KS~C 5601-1992), which        */
  /*      corresponds to MS Windows code page 1361.  This character set    */
  /*      includes all possible Hangeul character combinations.            */
  /*                                                                       */
  /*    FT_ENCODING_ADOBE_LATIN_1 ::                                       */
  /*      Corresponds to a Latin-1 encoding as defined in a Type~1         */
  /*      PostScript font.  It is limited to 256 character codes.          */
  /*                                                                       */
  /*    FT_ENCODING_ADOBE_STANDARD ::                                      */
  /*      Corresponds to the Adobe Standard encoding, as found in Type~1,  */
  /*      CFF, and OpenType/CFF fonts.  It is limited to 256 character     */
  /*      codes.                                                           */
  /*                                                                       */
  /*    FT_ENCODING_ADOBE_EXPERT ::                                        */
  /*      Corresponds to the Adobe Expert encoding, as found in Type~1,    */
  /*      CFF, and OpenType/CFF fonts.  It is limited to 256 character     */
  /*      codes.                                                           */
  /*                                                                       */
  /*    FT_ENCODING_ADOBE_CUSTOM ::                                        */
  /*      Corresponds to a custom encoding, as found in Type~1, CFF, and   */
  /*      OpenType/CFF fonts.  It is limited to 256 character codes.       */
  /*                                                                       */
  /*    FT_ENCODING_APPLE_ROMAN ::                                         */
  /*      Corresponds to the 8-bit Apple roman encoding.  Many TrueType    */
  /*      and OpenType fonts contain a charmap for this encoding, since    */
  /*      older versions of Mac OS are able to use it.                     */
  /*                                                                       */
  /*    FT_ENCODING_OLD_LATIN_2 ::                                         */
  /*      This value is deprecated and was never used nor reported by      */
  /*      FreeType.  Don't use or test for it.                             */
  /*                                                                       */
  /*    FT_ENCODING_MS_SJIS ::                                             */
  /*      Same as FT_ENCODING_SJIS.  Deprecated.                           */
  /*                                                                       */
  /*    FT_ENCODING_MS_GB2312 ::                                           */
  /*      Same as FT_ENCODING_GB2312.  Deprecated.                         */
  /*                                                                       */
  /*    FT_ENCODING_MS_BIG5 ::                                             */
  /*      Same as FT_ENCODING_BIG5.  Deprecated.                           */
  /*                                                                       */
  /*    FT_ENCODING_MS_WANSUNG ::                                          */
  /*      Same as FT_ENCODING_WANSUNG.  Deprecated.                        */
  /*                                                                       */
  /*    FT_ENCODING_MS_JOHAB ::                                            */
  /*      Same as FT_ENCODING_JOHAB.  Deprecated.                          */
  /*                                                                       */
  /* <Note>                                                                */
  /*    By default, FreeType automatically synthesizes a Unicode charmap   */
  /*    for PostScript fonts, using their glyph names dictionaries.        */
  /*    However, it also reports the encodings defined explicitly in the   */
  /*    font file, for the cases when they are needed, with the Adobe      */
  /*    values as well.                                                    */
  /*                                                                       */
  /*    FT_ENCODING_NONE is set by the BDF and PCF drivers if the charmap  */
  /*    is neither Unicode nor ISO-8859-1 (otherwise it is set to          */
  /*    FT_ENCODING_UNICODE).  Use @@FT_Get_BDF_Charset_ID to find out      */
  /*    which encoding is really present.  If, for example, the            */
  /*    `cs_registry' field is `KOI8' and the `cs_encoding' field is `R',  */
  /*    the font is encoded in KOI8-R.                                     */
  /*                                                                       */
  /*    FT_ENCODING_NONE is always set (with a single exception) by the    */
  /*    winfonts driver.  Use @@FT_Get_WinFNT_Header and examine the        */
  /*    `charset' field of the @@FT_WinFNT_HeaderRec structure to find out  */
  /*    which encoding is really present.  For example,                    */
  /*    @@FT_WinFNT_ID_CP1251 (204) means Windows code page 1251 (for       */
  /*    Russian).                                                          */
  /*                                                                       */
  /*    FT_ENCODING_NONE is set if `platform_id' is @@TT_PLATFORM_MACINTOSH */
  /*    and `encoding_id' is not @@TT_MAC_ID_ROMAN (otherwise it is set to  */
  /*    FT_ENCODING_APPLE_ROMAN).                                          */
  /*                                                                       */
  /*    If `platform_id' is @@TT_PLATFORM_MACINTOSH, use the function       */
  /*    @@FT_Get_CMap_Language_ID to query the Mac language ID that may     */
  /*    be needed to be able to distinguish Apple encoding variants.  See  */
  /*                                                                       */
  /*      http://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt  */
  /*                                                                       */
  /*    to get an idea how to do that.  Basically, if the language ID      */
  /*    is~0, don't use it, otherwise subtract 1 from the language ID.     */
  /*    Then examine `encoding_id'.  If, for example, `encoding_id' is     */
  /*    @@TT_MAC_ID_ROMAN and the language ID (minus~1) is                  */
  /*    `TT_MAC_LANGID_GREEK', it is the Greek encoding, not Roman.        */
  /*    @@TT_MAC_ID_ARABIC with `TT_MAC_LANGID_FARSI' means the Farsi       */
  /*    variant the Arabic encoding.                                       */
  /*                                                                       */
  typedef enum  FT_Encoding_
  {
    FT_ENC_TAG( FT_ENCODING_NONE, 0, 0, 0, 0 ),

    FT_ENC_TAG( FT_ENCODING_MS_SYMBOL, 's', 'y', 'm', 'b' ),
    FT_ENC_TAG( FT_ENCODING_UNICODE,   'u', 'n', 'i', 'c' ),

    FT_ENC_TAG( FT_ENCODING_SJIS,    's', 'j', 'i', 's' ),
    FT_ENC_TAG( FT_ENCODING_GB2312,  'g', 'b', ' ', ' ' ),
    FT_ENC_TAG( FT_ENCODING_BIG5,    'b', 'i', 'g', '5' ),
    FT_ENC_TAG( FT_ENCODING_WANSUNG, 'w', 'a', 'n', 's' ),
    FT_ENC_TAG( FT_ENCODING_JOHAB,   'j', 'o', 'h', 'a' ),

    /* for backwards compatibility */
    FT_ENCODING_MS_SJIS    = FT_ENCODING_SJIS,
    FT_ENCODING_MS_GB2312  = FT_ENCODING_GB2312,
    FT_ENCODING_MS_BIG5    = FT_ENCODING_BIG5,
    FT_ENCODING_MS_WANSUNG = FT_ENCODING_WANSUNG,
    FT_ENCODING_MS_JOHAB   = FT_ENCODING_JOHAB,

    FT_ENC_TAG( FT_ENCODING_ADOBE_STANDARD, 'A', 'D', 'O', 'B' ),
    FT_ENC_TAG( FT_ENCODING_ADOBE_EXPERT,   'A', 'D', 'B', 'E' ),
    FT_ENC_TAG( FT_ENCODING_ADOBE_CUSTOM,   'A', 'D', 'B', 'C' ),
    FT_ENC_TAG( FT_ENCODING_ADOBE_LATIN_1,  'l', 'a', 't', '1' ),

    FT_ENC_TAG( FT_ENCODING_OLD_LATIN_2, 'l', 'a', 't', '2' ),

    FT_ENC_TAG( FT_ENCODING_APPLE_ROMAN, 'a', 'r', 'm', 'n' )

  } FT_Encoding;


  /* these constants are deprecated; use the corresponding `FT_Encoding' */
  /* values instead                                                      */
#define ft_encoding_none            FT_ENCODING_NONE
#define ft_encoding_unicode         FT_ENCODING_UNICODE
#define ft_encoding_symbol          FT_ENCODING_MS_SYMBOL
#define ft_encoding_latin_1         FT_ENCODING_ADOBE_LATIN_1
#define ft_encoding_latin_2         FT_ENCODING_OLD_LATIN_2
#define ft_encoding_sjis            FT_ENCODING_SJIS
#define ft_encoding_gb2312          FT_ENCODING_GB2312
#define ft_encoding_big5            FT_ENCODING_BIG5
#define ft_encoding_wansung         FT_ENCODING_WANSUNG
#define ft_encoding_johab           FT_ENCODING_JOHAB

#define ft_encoding_adobe_standard  FT_ENCODING_ADOBE_STANDARD
#define ft_encoding_adobe_expert    FT_ENCODING_ADOBE_EXPERT
#define ft_encoding_adobe_custom    FT_ENCODING_ADOBE_CUSTOM
#define ft_encoding_apple_roman     FT_ENCODING_APPLE_ROMAN


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_CharMapRec                                                      */
  /*                                                                       */
  /* <Description>                                                         */
  /*    The base charmap structure.                                        */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    face        :: A handle to the parent face object.                 */
  /*                                                                       */
  /*    encoding    :: An @@FT_Encoding tag identifying the charmap.  Use   */
  /*                   this with @@FT_Select_Charmap.                       */
  /*                                                                       */
  /*    platform_id :: An ID number describing the platform for the        */
  /*                   following encoding ID.  This comes directly from    */
  /*                   the TrueType specification and should be emulated   */
  /*                   for other formats.                                  */
  /*                                                                       */
  /*    encoding_id :: A platform specific encoding number.  This also     */
  /*                   comes from the TrueType specification and should be */
  /*                   emulated similarly.                                 */
  /*                                                                       */
  typedef struct  FT_CharMapRec_
  {
    FT_Face      face;
    FT_Encoding  encoding;
    FT_UShort    platform_id;
    FT_UShort    encoding_id;

  } FT_CharMapRec;


  /*************************************************************************/
  /*************************************************************************/
  /*                                                                       */
  /*                 B A S E   O B J E C T   C L A S S E S                 */
  /*                                                                       */
  /*************************************************************************/
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_Face_Internal                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An opaque handle to an `FT_Face_InternalRec' structure, used to    */
  /*    model private data of a given @@FT_Face object.                     */
  /*                                                                       */
  /*    This structure might change between releases of FreeType~2 and is  */
  /*    not generally available to client applications.                    */
  /*                                                                       */
  typedef struct FT_Face_InternalRec_*  FT_Face_Internal;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_FaceRec                                                         */
  /*                                                                       */
  /* <Description>                                                         */
  /*    FreeType root face class structure.  A face object models a        */
  /*    typeface in a font file.                                           */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    num_faces           :: The number of faces in the font file.  Some */
  /*                           font formats can have multiple faces in     */
  /*                           a font file.                                */
  /*                                                                       */
  /*    face_index          :: This field holds two different values.      */
  /*                           Bits 0-15 are the index of the face in the  */
  /*                           font file (starting with value~0).  They    */
  /*                           are set to~0 if there is only one face in   */
  /*                           the font file.                              */
  /*                                                                       */
  /*                           Bits 16-30 are relevant to GX variation     */
  /*                           fonts only, holding the named instance      */
  /*                           index for the current face index (starting  */
  /*                           with value~1; value~0 indicates font access */
  /*                           without GX variation data).  For non-GX     */
  /*                           fonts, bits 16-30 are ignored.  If we have  */
  /*                           the third named instance of face~4, say,    */
  /*                           `face_index' is set to 0x00030004.          */
  /*                                                                       */
  /*                           Bit 31 is always zero (this is,             */
  /*                           `face_index' is always a positive value).   */
  /*                                                                       */
  /*    face_flags          :: A set of bit flags that give important      */
  /*                           information about the face; see             */
  /*                           @@FT_FACE_FLAG_XXX for the details.          */
  /*                                                                       */
  /*    style_flags         :: The lower 16~bits contain a set of bit      */
  /*                           flags indicating the style of the face; see */
  /*                           @@FT_STYLE_FLAG_XXX for the details.  Bits   */
  /*                           16-30 hold the number of named instances    */
  /*                           available for the current face if we have a */
  /*                           GX variation (sub)font.  Bit 31 is always   */
  /*                           zero (this is, `style_flags' is always a    */
  /*                           positive value).                            */
  /*                                                                       */
  /*    num_glyphs          :: The number of glyphs in the face.  If the   */
  /*                           face is scalable and has sbits (see         */
  /*                           `num_fixed_sizes'), it is set to the number */
  /*                           of outline glyphs.                          */
  /*                                                                       */
  /*                           For CID-keyed fonts, this value gives the   */
  /*                           highest CID used in the font.               */
  /*                                                                       */
  /*    family_name         :: The face's family name.  This is an ASCII   */
  /*                           string, usually in English, that describes  */
  /*                           the typeface's family (like `Times New      */
  /*                           Roman', `Bodoni', `Garamond', etc).  This   */
  /*                           is a least common denominator used to list  */
  /*                           fonts.  Some formats (TrueType & OpenType)  */
  /*                           provide localized and Unicode versions of   */
  /*                           this string.  Applications should use the   */
  /*                           format specific interface to access them.   */
  /*                           Can be NULL (e.g., in fonts embedded in a   */
  /*                           PDF file).                                  */
  /*                                                                       */
  /*                           In case the font doesn't provide a specific */
  /*                           family name entry, FreeType tries to        */
  /*                           synthesize one, deriving it from other name */
  /*                           entries.                                    */
  /*                                                                       */
  /*    style_name          :: The face's style name.  This is an ASCII    */
  /*                           string, usually in English, that describes  */
  /*                           the typeface's style (like `Italic',        */
  /*                           `Bold', `Condensed', etc).  Not all font    */
  /*                           formats provide a style name, so this field */
  /*                           is optional, and can be set to NULL.  As    */
  /*                           for `family_name', some formats provide     */
  /*                           localized and Unicode versions of this      */
  /*                           string.  Applications should use the format */
  /*                           specific interface to access them.          */
  /*                                                                       */
  /*    num_fixed_sizes     :: The number of bitmap strikes in the face.   */
  /*                           Even if the face is scalable, there might   */
  /*                           still be bitmap strikes, which are called   */
  /*                           `sbits' in that case.                       */
  /*                                                                       */
  /*    available_sizes     :: An array of @@FT_Bitmap_Size for all bitmap  */
  /*                           strikes in the face.  It is set to NULL if  */
  /*                           there is no bitmap strike.                  */
  /*                                                                       */
  /*                           Note that FreeType tries to sanitize the    */
  /*                           strike data since they are sometimes sloppy */
  /*                           or incorrect, but this can easily fail.     */
  /*                                                                       */
  /*    num_charmaps        :: The number of charmaps in the face.         */
  /*                                                                       */
  /*    charmaps            :: An array of the charmaps of the face.       */
  /*                                                                       */
  /*    generic             :: A field reserved for client uses.  See the  */
  /*                           @@FT_Generic type description.               */
  /*                                                                       */
  /*    bbox                :: The font bounding box.  Coordinates are     */
  /*                           expressed in font units (see                */
  /*                           `units_per_EM').  The box is large enough   */
  /*                           to contain any glyph from the font.  Thus,  */
  /*                           `bbox.yMax' can be seen as the `maximum     */
  /*                           ascender', and `bbox.yMin' as the `minimum  */
  /*                           descender'.  Only relevant for scalable     */
  /*                           formats.                                    */
  /*                                                                       */
  /*                           Note that the bounding box might be off by  */
  /*                           (at least) one pixel for hinted fonts.  See */
  /*                           @@FT_Size_Metrics for further discussion.    */
  /*                                                                       */
  /*    units_per_EM        :: The number of font units per EM square for  */
  /*                           this face.  This is typically 2048 for      */
  /*                           TrueType fonts, and 1000 for Type~1 fonts.  */
  /*                           Only relevant for scalable formats.         */
  /*                                                                       */
  /*    ascender            :: The typographic ascender of the face,       */
  /*                           expressed in font units.  For font formats  */
  /*                           not having this information, it is set to   */
  /*                           `bbox.yMax'.  Only relevant for scalable    */
  /*                           formats.                                    */
  /*                                                                       */
  /*    descender           :: The typographic descender of the face,      */
  /*                           expressed in font units.  For font formats  */
  /*                           not having this information, it is set to   */
  /*                           `bbox.yMin'.  Note that this field is       */
  /*                           usually negative.  Only relevant for        */
  /*                           scalable formats.                           */
  /*                                                                       */
  /*    height              :: This value is the vertical distance         */
  /*                           between two consecutive baselines,          */
  /*                           expressed in font units.  It is always      */
  /*                           positive.  Only relevant for scalable       */
  /*                           formats.                                    */
  /*                                                                       */
  /*                           If you want the global glyph height, use    */
  /*                           `ascender - descender'.                     */
  /*                                                                       */
  /*    max_advance_width   :: The maximum advance width, in font units,   */
  /*                           for all glyphs in this face.  This can be   */
  /*                           used to make word wrapping computations     */
  /*                           faster.  Only relevant for scalable         */
  /*                           formats.                                    */
  /*                                                                       */
  /*    max_advance_height  :: The maximum advance height, in font units,  */
  /*                           for all glyphs in this face.  This is only  */
  /*                           relevant for vertical layouts, and is set   */
  /*                           to `height' for fonts that do not provide   */
  /*                           vertical metrics.  Only relevant for        */
  /*                           scalable formats.                           */
  /*                                                                       */
  /*    underline_position  :: The position, in font units, of the         */
  /*                           underline line for this face.  It is the    */
  /*                           center of the underlining stem.  Only       */
  /*                           relevant for scalable formats.              */
  /*                                                                       */
  /*    underline_thickness :: The thickness, in font units, of the        */
  /*                           underline for this face.  Only relevant for */
  /*                           scalable formats.                           */
  /*                                                                       */
  /*    glyph               :: The face's associated glyph slot(s).        */
  /*                                                                       */
  /*    size                :: The current active size for this face.      */
  /*                                                                       */
  /*    charmap             :: The current active charmap for this face.   */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Fields may be changed after a call to @@FT_Attach_File or           */
  /*    @@FT_Attach_Stream.                                                 */
  /*                                                                       */
  typedef struct  FT_FaceRec_
  {
    FT_Long           num_faces;
    FT_Long           face_index;

    FT_Long           face_flags;
    FT_Long           style_flags;

    FT_Long           num_glyphs;

    FT_String*        family_name;
    FT_String*        style_name;

    FT_Int            num_fixed_sizes;
    FT_Bitmap_Size*   available_sizes;

    FT_Int            num_charmaps;
    FT_CharMap*       charmaps;

    FT_Generic        generic;

    /*# The following member variables (down to `underline_thickness') */
    /*# are only relevant to scalable outlines; cf. @@FT_Bitmap_Size    */
    /*# for bitmap fonts.                                              */
    FT_BBox           bbox;

    FT_UShort         units_per_EM;
    FT_Short          ascender;
    FT_Short          descender;
    FT_Short          height;

    FT_Short          max_advance_width;
    FT_Short          max_advance_height;

    FT_Short          underline_position;
    FT_Short          underline_thickness;

    FT_GlyphSlot      glyph;
    FT_Size           size;
    FT_CharMap        charmap;

    /*@@private begin */

    FT_Driver         driver;
    FT_Memory         memory;
    FT_Stream         stream;

    FT_ListRec        sizes_list;

    FT_Generic        autohint;   /* face-specific auto-hinter data */
    void*             extensions; /* unused                         */

    FT_Face_Internal  internal;

    /*@@private end */

  } FT_FaceRec;


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_FACE_FLAG_XXX                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A list of bit flags used in the `face_flags' field of the          */
  /*    @@FT_FaceRec structure.  They inform client applications of         */
  /*    properties of the corresponding face.                              */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_FACE_FLAG_SCALABLE ::                                           */
  /*      Indicates that the face contains outline glyphs.  This doesn't   */
  /*      prevent bitmap strikes, i.e., a face can have both this and      */
  /*      @@FT_FACE_FLAG_FIXED_SIZES set.                                   */
  /*                                                                       */
  /*    FT_FACE_FLAG_FIXED_SIZES ::                                        */
  /*      Indicates that the face contains bitmap strikes.  See also the   */
  /*      `num_fixed_sizes' and `available_sizes' fields of @@FT_FaceRec.   */
  /*                                                                       */
  /*    FT_FACE_FLAG_FIXED_WIDTH ::                                        */
  /*      Indicates that the face contains fixed-width characters (like    */
  /*      Courier, Lucido, MonoType, etc.).                                */
  /*                                                                       */
  /*    FT_FACE_FLAG_SFNT ::                                               */
  /*      Indicates that the face uses the `sfnt' storage scheme.  For     */
  /*      now, this means TrueType and OpenType.                           */
  /*                                                                       */
  /*    FT_FACE_FLAG_HORIZONTAL ::                                         */
  /*      Indicates that the face contains horizontal glyph metrics.  This */
  /*      should be set for all common formats.                            */
  /*                                                                       */
  /*    FT_FACE_FLAG_VERTICAL ::                                           */
  /*      Indicates that the face contains vertical glyph metrics.  This   */
  /*      is only available in some formats, not all of them.              */
  /*                                                                       */
  /*    FT_FACE_FLAG_KERNING ::                                            */
  /*      Indicates that the face contains kerning information.  If set,   */
  /*      the kerning distance can be retrieved through the function       */
  /*      @@FT_Get_Kerning.  Otherwise the function always return the       */
  /*      vector (0,0).  Note that FreeType doesn't handle kerning data    */
  /*      from the `GPOS' table (as present in some OpenType fonts).       */
  /*                                                                       */
  /*    FT_FACE_FLAG_FAST_GLYPHS ::                                        */
  /*      THIS FLAG IS DEPRECATED.  DO NOT USE OR TEST IT.                 */
  /*                                                                       */
  /*    FT_FACE_FLAG_MULTIPLE_MASTERS ::                                   */
  /*      Indicates that the font contains multiple masters and is capable */
  /*      of interpolating between them.  See the multiple-masters         */
  /*      specific API for details.                                        */
  /*                                                                       */
  /*    FT_FACE_FLAG_GLYPH_NAMES ::                                        */
  /*      Indicates that the font contains glyph names that can be         */
  /*      retrieved through @@FT_Get_Glyph_Name.  Note that some TrueType   */
  /*      fonts contain broken glyph name tables.  Use the function        */
  /*      @@FT_Has_PS_Glyph_Names when needed.                              */
  /*                                                                       */
  /*    FT_FACE_FLAG_EXTERNAL_STREAM ::                                    */
  /*      Used internally by FreeType to indicate that a face's stream was */
  /*      provided by the client application and should not be destroyed   */
  /*      when @@FT_Done_Face is called.  Don't read or test this flag.     */
  /*                                                                       */
  /*    FT_FACE_FLAG_HINTER ::                                             */
  /*      Set if the font driver has a hinting machine of its own.  For    */
  /*      example, with TrueType fonts, it makes sense to use data from    */
  /*      the SFNT `gasp' table only if the native TrueType hinting engine */
  /*      (with the bytecode interpreter) is available and active.         */
  /*                                                                       */
  /*    FT_FACE_FLAG_CID_KEYED ::                                          */
  /*      Set if the font is CID-keyed.  In that case, the font is not     */
  /*      accessed by glyph indices but by CID values.  For subsetted      */
  /*      CID-keyed fonts this has the consequence that not all index      */
  /*      values are a valid argument to FT_Load_Glyph.  Only the CID      */
  /*      values for which corresponding glyphs in the subsetted font      */
  /*      exist make FT_Load_Glyph return successfully; in all other cases */
  /*      you get an `FT_Err_Invalid_Argument' error.                      */
  /*                                                                       */
  /*      Note that CID-keyed fonts that are in an SFNT wrapper don't      */
  /*      have this flag set since the glyphs are accessed in the normal   */
  /*      way (using contiguous indices); the `CID-ness' isn't visible to  */
  /*      the application.                                                 */
  /*                                                                       */
  /*    FT_FACE_FLAG_TRICKY ::                                             */
  /*      Set if the font is `tricky', this is, it always needs the        */
  /*      font format's native hinting engine to get a reasonable result.  */
  /*      A typical example is the Chinese font `mingli.ttf' that uses     */
  /*      TrueType bytecode instructions to move and scale all of its      */
  /*      subglyphs.                                                       */
  /*                                                                       */
  /*      It is not possible to auto-hint such fonts using                 */
  /*      @@FT_LOAD_FORCE_AUTOHINT; it will also ignore                     */
  /*      @@FT_LOAD_NO_HINTING.  You have to set both @@FT_LOAD_NO_HINTING   */
  /*      and @@FT_LOAD_NO_AUTOHINT to really disable hinting; however, you */
  /*      probably never want this except for demonstration purposes.      */
  /*                                                                       */
  /*      Currently, there are about a dozen TrueType fonts in the list of */
  /*      tricky fonts; they are hard-coded in file `ttobjs.c'.            */
  /*                                                                       */
  /*    FT_FACE_FLAG_COLOR ::                                              */
  /*      Set if the font has color glyph tables.  To access color glyphs  */
  /*      use @@FT_LOAD_COLOR.                                              */
  /*                                                                       */
#define FT_FACE_FLAG_SCALABLE          ( 1L <<  0 )
#define FT_FACE_FLAG_FIXED_SIZES       ( 1L <<  1 )
#define FT_FACE_FLAG_FIXED_WIDTH       ( 1L <<  2 )
#define FT_FACE_FLAG_SFNT              ( 1L <<  3 )
#define FT_FACE_FLAG_HORIZONTAL        ( 1L <<  4 )
#define FT_FACE_FLAG_VERTICAL          ( 1L <<  5 )
#define FT_FACE_FLAG_KERNING           ( 1L <<  6 )
#define FT_FACE_FLAG_FAST_GLYPHS       ( 1L <<  7 )
#define FT_FACE_FLAG_MULTIPLE_MASTERS  ( 1L <<  8 )
#define FT_FACE_FLAG_GLYPH_NAMES       ( 1L <<  9 )
#define FT_FACE_FLAG_EXTERNAL_STREAM   ( 1L << 10 )
#define FT_FACE_FLAG_HINTER            ( 1L << 11 )
#define FT_FACE_FLAG_CID_KEYED         ( 1L << 12 )
#define FT_FACE_FLAG_TRICKY            ( 1L << 13 )
#define FT_FACE_FLAG_COLOR             ( 1L << 14 )


  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_HORIZONTAL( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains
   *   horizontal metrics (this is true for all font formats though).
   *
   * @@also:
   *   @@FT_HAS_VERTICAL can be used to check for vertical metrics.
   *
   */
#define FT_HAS_HORIZONTAL( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_HORIZONTAL )


  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_VERTICAL( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains real
   *   vertical metrics (and not only synthesized ones).
   *
   */
#define FT_HAS_VERTICAL( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_VERTICAL )


  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_KERNING( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains kerning
   *   data that can be accessed with @@FT_Get_Kerning.
   *
   */
#define FT_HAS_KERNING( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_KERNING )


  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_SCALABLE( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a scalable
   *   font face (true for TrueType, Type~1, Type~42, CID, OpenType/CFF,
   *   and PFR font formats.
   *
   */
#define FT_IS_SCALABLE( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_SCALABLE )


  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_SFNT( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a font
   *   whose format is based on the SFNT storage scheme.  This usually
   *   means: TrueType fonts, OpenType fonts, as well as SFNT-based embedded
   *   bitmap fonts.
   *
   *   If this macro is true, all functions defined in @@FT_SFNT_NAMES_H and
   *   @@FT_TRUETYPE_TABLES_H are available.
   *
   */
#define FT_IS_SFNT( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_SFNT )


  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_FIXED_WIDTH( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a font face
   *   that contains fixed-width (or `monospace', `fixed-pitch', etc.)
   *   glyphs.
   *
   */
#define FT_IS_FIXED_WIDTH( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_FIXED_WIDTH )


  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_FIXED_SIZES( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains some
   *   embedded bitmaps.  See the `available_sizes' field of the
   *   @@FT_FaceRec structure.
   *
   */
#define FT_HAS_FIXED_SIZES( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_FIXED_SIZES )


  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_FAST_GLYPHS( face )
   *
   * @@description:
   *   Deprecated.
   *
   */
#define FT_HAS_FAST_GLYPHS( face )  0


  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_GLYPH_NAMES( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains some glyph
   *   names that can be accessed through @@FT_Get_Glyph_Name.
   *
   */
#define FT_HAS_GLYPH_NAMES( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_GLYPH_NAMES )


  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_MULTIPLE_MASTERS( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains some
   *   multiple masters.  The functions provided by @@FT_MULTIPLE_MASTERS_H
   *   are then available to choose the exact design you want.
   *
   */
#define FT_HAS_MULTIPLE_MASTERS( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_MULTIPLE_MASTERS )


  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_NAMED_INSTANCE( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object is a named instance
   *   of a GX variation font.
   *
   */
#define FT_IS_NAMED_INSTANCE( face ) \
          ( (face)->face_index & 0x7FFF0000L )


  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_CID_KEYED( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a CID-keyed
   *   font.  See the discussion of @@FT_FACE_FLAG_CID_KEYED for more
   *   details.
   *
   *   If this macro is true, all functions defined in @@FT_CID_H are
   *   available.
   *
   */
#define FT_IS_CID_KEYED( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_CID_KEYED )


  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_TRICKY( face )
   *
   * @@description:
   *   A macro that returns true whenever a face represents a `tricky' font.
   *   See the discussion of @@FT_FACE_FLAG_TRICKY for more details.
   *
   */
#define FT_IS_TRICKY( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_TRICKY )


  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_COLOR( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains
   *   tables for color glyphs.
   *
   */
#define FT_HAS_COLOR( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_COLOR )


  /*************************************************************************/
  /*                                                                       */
  /* <Const>                                                               */
  /*    FT_STYLE_FLAG_XXX                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A list of bit flags used to indicate the style of a given face.    */
  /*    These are used in the `style_flags' field of @@FT_FaceRec.          */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_STYLE_FLAG_ITALIC ::                                            */
  /*      Indicates that a given face style is italic or oblique.          */
  /*                                                                       */
  /*    FT_STYLE_FLAG_BOLD ::                                              */
  /*      Indicates that a given face is bold.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The style information as provided by FreeType is very basic.  More */
  /*    details are beyond the scope and should be done on a higher level  */
  /*    (for example, by analyzing various fields of the `OS/2' table in   */
  /*    SFNT based fonts).                                                 */
  /*                                                                       */
#define FT_STYLE_FLAG_ITALIC  ( 1 << 0 )
#define FT_STYLE_FLAG_BOLD    ( 1 << 1 )


  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_Size_Internal                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An opaque handle to an `FT_Size_InternalRec' structure, used to    */
  /*    model private data of a given @@FT_Size object.                     */
  /*                                                                       */
  typedef struct FT_Size_InternalRec_*  FT_Size_Internal;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Size_Metrics                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    The size metrics structure gives the metrics of a size object.     */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    x_ppem       :: The width of the scaled EM square in pixels, hence */
  /*                    the term `ppem' (pixels per EM).  It is also       */
  /*                    referred to as `nominal width'.                    */
  /*                                                                       */
  /*    y_ppem       :: The height of the scaled EM square in pixels,      */
  /*                    hence the term `ppem' (pixels per EM).  It is also */
  /*                    referred to as `nominal height'.                   */
  /*                                                                       */
  /*    x_scale      :: A 16.16 fractional scaling value used to convert   */
  /*                    horizontal metrics from font units to 26.6         */
  /*                    fractional pixels.  Only relevant for scalable     */
  /*                    font formats.                                      */
  /*                                                                       */
  /*    y_scale      :: A 16.16 fractional scaling value used to convert   */
  /*                    vertical metrics from font units to 26.6           */
  /*                    fractional pixels.  Only relevant for scalable     */
  /*                    font formats.                                      */
  /*                                                                       */
  /*    ascender     :: The ascender in 26.6 fractional pixels.  See       */
  /*                    @@FT_FaceRec for the details.                       */
  /*                                                                       */
  /*    descender    :: The descender in 26.6 fractional pixels.  See      */
  /*                    @@FT_FaceRec for the details.                       */
  /*                                                                       */
  /*    height       :: The height in 26.6 fractional pixels.  See         */
  /*                    @@FT_FaceRec for the details.                       */
  /*                                                                       */
  /*    max_advance  :: The maximum advance width in 26.6 fractional       */
  /*                    pixels.  See @@FT_FaceRec for the details.          */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The scaling values, if relevant, are determined first during a     */
  /*    size changing operation.  The remaining fields are then set by the */
  /*    driver.  For scalable formats, they are usually set to scaled      */
  /*    values of the corresponding fields in @@FT_FaceRec.                 */
  /*                                                                       */
  /*    Note that due to glyph hinting, these values might not be exact    */
  /*    for certain fonts.  Thus they must be treated as unreliable        */
  /*    with an error margin of at least one pixel!                        */
  /*                                                                       */
  /*    Indeed, the only way to get the exact metrics is to render _all_   */
  /*    glyphs.  As this would be a definite performance hit, it is up to  */
  /*    client applications to perform such computations.                  */
  /*                                                                       */
  /*    The FT_Size_Metrics structure is valid for bitmap fonts also.      */
  /*                                                                       */
  typedef struct  FT_Size_Metrics_
  {
    FT_UShort  x_ppem;      /* horizontal pixels per EM               */
    FT_UShort  y_ppem;      /* vertical pixels per EM                 */

    FT_Fixed   x_scale;     /* scaling values used to convert font    */
    FT_Fixed   y_scale;     /* units to 26.6 fractional pixels        */

    FT_Pos     ascender;    /* ascender in 26.6 frac. pixels          */
    FT_Pos     descender;   /* descender in 26.6 frac. pixels         */
    FT_Pos     height;      /* text height in 26.6 frac. pixels       */
    FT_Pos     max_advance; /* max horizontal advance, in 26.6 pixels */

  } FT_Size_Metrics;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_SizeRec                                                         */
  /*                                                                       */
  /* <Description>                                                         */
  /*    FreeType root size class structure.  A size object models a face   */
  /*    object at a given size.                                            */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    face    :: Handle to the parent face object.                       */
  /*                                                                       */
  /*    generic :: A typeless pointer, unused by the FreeType library or   */
  /*               any of its drivers.  It can be used by client           */
  /*               applications to link their own data to each size        */
  /*               object.                                                 */
  /*                                                                       */
  /*    metrics :: Metrics for this size object.  This field is read-only. */
  /*                                                                       */
  typedef struct  FT_SizeRec_
  {
    FT_Face           face;      /* parent face object              */
    FT_Generic        generic;   /* generic pointer for client uses */
    FT_Size_Metrics   metrics;   /* size metrics                    */
    FT_Size_Internal  internal;

  } FT_SizeRec;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_SubGlyph                                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    The subglyph structure is an internal object used to describe      */
  /*    subglyphs (for example, in the case of composites).                */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The subglyph implementation is not part of the high-level API,     */
  /*    hence the forward structure declaration.                           */
  /*                                                                       */
  /*    You can however retrieve subglyph information with                 */
  /*    @@FT_Get_SubGlyph_Info.                                             */
  /*                                                                       */
  typedef struct FT_SubGlyphRec_*  FT_SubGlyph;


  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_Slot_Internal                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An opaque handle to an `FT_Slot_InternalRec' structure, used to    */
  /*    model private data of a given @@FT_GlyphSlot object.                */
  /*                                                                       */
  typedef struct FT_Slot_InternalRec_*  FT_Slot_Internal;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_GlyphSlotRec                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    FreeType root glyph slot class structure.  A glyph slot is a       */
  /*    container where individual glyphs can be loaded, be they in        */
  /*    outline or bitmap format.                                          */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    library           :: A handle to the FreeType library instance     */
  /*                         this slot belongs to.                         */
  /*                                                                       */
  /*    face              :: A handle to the parent face object.           */
  /*                                                                       */
  /*    next              :: In some cases (like some font tools), several */
  /*                         glyph slots per face object can be a good     */
  /*                         thing.  As this is rare, the glyph slots are  */
  /*                         listed through a direct, single-linked list   */
  /*                         using its `next' field.                       */
  /*                                                                       */
  /*    generic           :: A typeless pointer unused by the FreeType     */
  /*                         library or any of its drivers.  It can be     */
  /*                         used by client applications to link their own */
  /*                         data to each glyph slot object.               */
  /*                                                                       */
  /*    metrics           :: The metrics of the last loaded glyph in the   */
  /*                         slot.  The returned values depend on the last */
  /*                         load flags (see the @@FT_Load_Glyph API        */
  /*                         function) and can be expressed either in 26.6 */
  /*                         fractional pixels or font units.              */
  /*                                                                       */
  /*                         Note that even when the glyph image is        */
  /*                         transformed, the metrics are not.             */
  /*                                                                       */
  /*    linearHoriAdvance :: The advance width of the unhinted glyph.      */
  /*                         Its value is expressed in 16.16 fractional    */
  /*                         pixels, unless @@FT_LOAD_LINEAR_DESIGN is set  */
  /*                         when loading the glyph.  This field can be    */
  /*                         important to perform correct WYSIWYG layout.  */
  /*                         Only relevant for outline glyphs.             */
  /*                                                                       */
  /*    linearVertAdvance :: The advance height of the unhinted glyph.     */
  /*                         Its value is expressed in 16.16 fractional    */
  /*                         pixels, unless @@FT_LOAD_LINEAR_DESIGN is set  */
  /*                         when loading the glyph.  This field can be    */
  /*                         important to perform correct WYSIWYG layout.  */
  /*                         Only relevant for outline glyphs.             */
  /*                                                                       */
  /*    advance           :: This shorthand is, depending on               */
  /*                         @@FT_LOAD_IGNORE_TRANSFORM, the transformed    */
  /*                         (hinted) advance width for the glyph, in 26.6 */
  /*                         fractional pixel format.  As specified with   */
  /*                         @@FT_LOAD_VERTICAL_LAYOUT, it uses either the  */
  /*                         `horiAdvance' or the `vertAdvance' value of   */
  /*                         `metrics' field.                              */
  /*                                                                       */
  /*    format            :: This field indicates the format of the image  */
  /*                         contained in the glyph slot.  Typically       */
  /*                         @@FT_GLYPH_FORMAT_BITMAP,                      */
  /*                         @@FT_GLYPH_FORMAT_OUTLINE, or                  */
  /*                         @@FT_GLYPH_FORMAT_COMPOSITE, but others are    */
  /*                         possible.                                     */
  /*                                                                       */
  /*    bitmap            :: This field is used as a bitmap descriptor     */
  /*                         when the slot format is                       */
  /*                         @@FT_GLYPH_FORMAT_BITMAP.  Note that the       */
  /*                         address and content of the bitmap buffer can  */
  /*                         change between calls of @@FT_Load_Glyph and a  */
  /*                         few other functions.                          */
  /*                                                                       */
  /*    bitmap_left       :: The bitmap's left bearing expressed in        */
  /*                         integer pixels.  Only valid if the format is  */
  /*                         @@FT_GLYPH_FORMAT_BITMAP, this is, if the      */
  /*                         glyph slot contains a bitmap.                 */
  /*                                                                       */
  /*    bitmap_top        :: The bitmap's top bearing expressed in integer */
  /*                         pixels.  Remember that this is the distance   */
  /*                         from the baseline to the top-most glyph       */
  /*                         scanline, upwards y~coordinates being         */
  /*                         *positive*.                                   */
  /*                                                                       */
  /*    outline           :: The outline descriptor for the current glyph  */
  /*                         image if its format is                        */
  /*                         @@FT_GLYPH_FORMAT_OUTLINE.  Once a glyph is    */
  /*                         loaded, `outline' can be transformed,         */
  /*                         distorted, embolded, etc.  However, it must   */
  /*                         not be freed.                                 */
  /*                                                                       */
  /*    num_subglyphs     :: The number of subglyphs in a composite glyph. */
  /*                         This field is only valid for the composite    */
  /*                         glyph format that should normally only be     */
  /*                         loaded with the @@FT_LOAD_NO_RECURSE flag.     */
  /*                                                                       */
  /*    subglyphs         :: An array of subglyph descriptors for          */
  /*                         composite glyphs.  There are `num_subglyphs'  */
  /*                         elements in there.  Currently internal to     */
  /*                         FreeType.                                     */
  /*                                                                       */
  /*    control_data      :: Certain font drivers can also return the      */
  /*                         control data for a given glyph image (e.g.    */
  /*                         TrueType bytecode, Type~1 charstrings, etc.). */
  /*                         This field is a pointer to such data.         */
  /*                                                                       */
  /*    control_len       :: This is the length in bytes of the control    */
  /*                         data.                                         */
  /*                                                                       */
  /*    other             :: Really wicked formats can use this pointer to */
  /*                         present their own glyph image to client       */
  /*                         applications.  Note that the application      */
  /*                         needs to know about the image format.         */
  /*                                                                       */
  /*    lsb_delta         :: The difference between hinted and unhinted    */
  /*                         left side bearing while auto-hinting is       */
  /*                         active.  Zero otherwise.                      */
  /*                                                                       */
  /*    rsb_delta         :: The difference between hinted and unhinted    */
  /*                         right side bearing while auto-hinting is      */
  /*                         active.  Zero otherwise.                      */
  /*                                                                       */
  /* <Note>                                                                */
  /*    If @@FT_Load_Glyph is called with default flags (see                */
  /*    @@FT_LOAD_DEFAULT) the glyph image is loaded in the glyph slot in   */
  /*    its native format (e.g., an outline glyph for TrueType and Type~1  */
  /*    formats).                                                          */
  /*                                                                       */
  /*    This image can later be converted into a bitmap by calling         */
  /*    @@FT_Render_Glyph.  This function finds the current renderer for    */
  /*    the native image's format, then invokes it.                        */
  /*                                                                       */
  /*    The renderer is in charge of transforming the native image through */
  /*    the slot's face transformation fields, then converting it into a   */
  /*    bitmap that is returned in `slot->bitmap'.                         */
  /*                                                                       */
  /*    Note that `slot->bitmap_left' and `slot->bitmap_top' are also used */
  /*    to specify the position of the bitmap relative to the current pen  */
  /*    position (e.g., coordinates (0,0) on the baseline).  Of course,    */
  /*    `slot->format' is also changed to @@FT_GLYPH_FORMAT_BITMAP.         */
  /*                                                                       */
  /*    Here is a small pseudo code fragment that shows how to use         */
  /*    `lsb_delta' and `rsb_delta':                                       */
  /*                                                                       */
  /*    {                                                                  */
  /*      FT_Pos  origin_x       = 0;                                      */
  /*      FT_Pos  prev_rsb_delta = 0;                                      */
  /*                                                                       */
  /*                                                                       */
  /*      for all glyphs do                                                */
  /*        <compute kern between current and previous glyph and add it to */
  /*         `origin_x'>                                                   */
  /*                                                                       */
  /*        <load glyph with `FT_Load_Glyph'>                              */
  /*                                                                       */
  /*        if ( prev_rsb_delta - face->glyph->lsb_delta >= 32 )           */
  /*          origin_x -= 64;                                              */
  /*        else if ( prev_rsb_delta - face->glyph->lsb_delta < -32 )      */
  /*          origin_x += 64;                                              */
  /*                                                                       */
  /*        prev_rsb_delta = face->glyph->rsb_delta;                       */
  /*                                                                       */
  /*        <save glyph image, or render glyph, or ...>                    */
  /*                                                                       */
  /*        origin_x += face->glyph->advance.x;                            */
  /*      endfor                                                           */
  /*    }                                                                  */
  /*                                                                       */
  /*    If you use strong auto-hinting, you *must* apply these delta       */
  /*    values!  Otherwise you will experience far too large inter-glyph   */
  /*    spacing at small rendering sizes in most cases.  Note that it      */
  /*    doesn't harm to use the above code for other hinting modes also,   */
  /*    since the delta values are zero then.                              */
  /*                                                                       */
  typedef struct  FT_GlyphSlotRec_
  {
    FT_Library        library;
    FT_Face           face;
    FT_GlyphSlot      next;
    FT_UInt           reserved;       /* retained for binary compatibility */
    FT_Generic        generic;

    FT_Glyph_Metrics  metrics;
    FT_Fixed          linearHoriAdvance;
    FT_Fixed          linearVertAdvance;
    FT_Vector         advance;

    FT_Glyph_Format   format;

    FT_Bitmap         bitmap;
    FT_Int            bitmap_left;
    FT_Int            bitmap_top;

    FT_Outline        outline;

    FT_UInt           num_subglyphs;
    FT_SubGlyph       subglyphs;

    void*             control_data;
    long              control_len;

    FT_Pos            lsb_delta;
    FT_Pos            rsb_delta;

    void*             other;

    FT_Slot_Internal  internal;

  } FT_GlyphSlotRec;


  /*************************************************************************/
  /*************************************************************************/
  /*                                                                       */
  /*                         F U N C T I O N S                             */
  /*                                                                       */
  /*************************************************************************/
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Init_FreeType                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Initialize a new FreeType library object.  The set of modules      */
  /*    that are registered by this function is determined at build time.  */
  /*                                                                       */
  /* <Output>                                                              */
  /*    alibrary :: A handle to a new library object.                      */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    In case you want to provide your own memory allocating routines,   */
  /*    use @@FT_New_Library instead, followed by a call to                 */
  /*    @@FT_Add_Default_Modules (or a series of calls to @@FT_Add_Module).  */
  /*                                                                       */
  /*    See the documentation of @@FT_Library and @@FT_Face for              */
  /*    multi-threading issues.                                            */
  /*                                                                       */
  /*    If you need reference-counting (cf. @@FT_Reference_Library), use    */
  /*    @@FT_New_Library and @@FT_Done_Library.                              */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Init_FreeType( FT_Library  *alibrary );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Done_FreeType                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Destroy a given FreeType library object and all of its children,   */
  /*    including resources, drivers, faces, sizes, etc.                   */
  /*                                                                       */
  /* <Input>                                                               */
  /*    library :: A handle to the target library object.                  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Done_FreeType( FT_Library  library );


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_OPEN_XXX                                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A list of bit field constants used within the `flags' field of the */
  /*    @@FT_Open_Args structure.                                           */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_OPEN_MEMORY   :: This is a memory-based stream.                 */
  /*                                                                       */
  /*    FT_OPEN_STREAM   :: Copy the stream from the `stream' field.       */
  /*                                                                       */
  /*    FT_OPEN_PATHNAME :: Create a new input stream from a C~path        */
  /*                        name.                                          */
  /*                                                                       */
  /*    FT_OPEN_DRIVER   :: Use the `driver' field.                        */
  /*                                                                       */
  /*    FT_OPEN_PARAMS   :: Use the `num_params' and `params' fields.      */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The `FT_OPEN_MEMORY', `FT_OPEN_STREAM', and `FT_OPEN_PATHNAME'     */
  /*    flags are mutually exclusive.                                      */
  /*                                                                       */
#define FT_OPEN_MEMORY    0x1
#define FT_OPEN_STREAM    0x2
#define FT_OPEN_PATHNAME  0x4
#define FT_OPEN_DRIVER    0x8
#define FT_OPEN_PARAMS    0x10


  /* these constants are deprecated; use the corresponding `FT_OPEN_XXX' */
  /* values instead                                                      */
#define ft_open_memory    FT_OPEN_MEMORY
#define ft_open_stream    FT_OPEN_STREAM
#define ft_open_pathname  FT_OPEN_PATHNAME
#define ft_open_driver    FT_OPEN_DRIVER
#define ft_open_params    FT_OPEN_PARAMS


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Parameter                                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A simple structure used to pass more or less generic parameters to */
  /*    @@FT_Open_Face.                                                     */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    tag  :: A four-byte identification tag.                            */
  /*                                                                       */
  /*    data :: A pointer to the parameter data.                           */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The ID and function of parameters are driver-specific.  See the    */
  /*    various FT_PARAM_TAG_XXX flags for more information.               */
  /*                                                                       */
  typedef struct  FT_Parameter_
  {
    FT_ULong    tag;
    FT_Pointer  data;

  } FT_Parameter;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Open_Args                                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A structure used to indicate how to open a new font file or        */
  /*    stream.  A pointer to such a structure can be used as a parameter  */
  /*    for the functions @@FT_Open_Face and @@FT_Attach_Stream.             */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    flags       :: A set of bit flags indicating how to use the        */
  /*                   structure.                                          */
  /*                                                                       */
  /*    memory_base :: The first byte of the file in memory.               */
  /*                                                                       */
  /*    memory_size :: The size in bytes of the file in memory.            */
  /*                                                                       */
  /*    pathname    :: A pointer to an 8-bit file pathname.                */
  /*                                                                       */
  /*    stream      :: A handle to a source stream object.                 */
  /*                                                                       */
  /*    driver      :: This field is exclusively used by @@FT_Open_Face;    */
  /*                   it simply specifies the font driver to use to open  */
  /*                   the face.  If set to~0, FreeType tries to load the  */
  /*                   face with each one of the drivers in its list.      */
  /*                                                                       */
  /*    num_params  :: The number of extra parameters.                     */
  /*                                                                       */
  /*    params      :: Extra parameters passed to the font driver when     */
  /*                   opening a new face.                                 */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The stream type is determined by the contents of `flags' that      */
  /*    are tested in the following order by @@FT_Open_Face:                */
  /*                                                                       */
  /*    If the @@FT_OPEN_MEMORY bit is set, assume that this is a           */
  /*    memory file of `memory_size' bytes, located at `memory_address'.   */
  /*    The data are not copied, and the client is responsible for         */
  /*    releasing and destroying them _after_ the corresponding call to    */
  /*    @@FT_Done_Face.                                                     */
  /*                                                                       */
  /*    Otherwise, if the @@FT_OPEN_STREAM bit is set, assume that a        */
  /*    custom input stream `stream' is used.                              */
  /*                                                                       */
  /*    Otherwise, if the @@FT_OPEN_PATHNAME bit is set, assume that this   */
  /*    is a normal file and use `pathname' to open it.                    */
  /*                                                                       */
  /*    If the @@FT_OPEN_DRIVER bit is set, @@FT_Open_Face only tries to     */
  /*    open the file with the driver whose handler is in `driver'.        */
  /*                                                                       */
  /*    If the @@FT_OPEN_PARAMS bit is set, the parameters given by         */
  /*    `num_params' and `params' is used.  They are ignored otherwise.    */
  /*                                                                       */
  /*    Ideally, both the `pathname' and `params' fields should be tagged  */
  /*    as `const'; this is missing for API backwards compatibility.  In   */
  /*    other words, applications should treat them as read-only.          */
  /*                                                                       */
  typedef struct  FT_Open_Args_
  {
    FT_UInt         flags;
    const FT_Byte*  memory_base;
    FT_Long         memory_size;
    FT_String*      pathname;
    FT_Stream       stream;
    FT_Module       driver;
    FT_Int          num_params;
    FT_Parameter*   params;

  } FT_Open_Args;


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_New_Face                                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This function calls @@FT_Open_Face to open a font by its pathname.  */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    library    :: A handle to the library resource.                    */
  /*                                                                       */
  /* <Input>                                                               */
  /*    pathname   :: A path to the font file.                             */
  /*                                                                       */
  /*    face_index :: See @@FT_Open_Face for a detailed description of this */
  /*                  parameter.                                           */
  /*                                                                       */
  /* <Output>                                                              */
  /*    aface      :: A handle to a new face object.  If `face_index' is   */
  /*                  greater than or equal to zero, it must be non-NULL.  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Use @@FT_Done_Face to destroy the created @@FT_Face object (along    */
  /*    with its slot and sizes).                                          */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_New_Face( FT_Library   library,
               const char*  filepathname,
               FT_Long      face_index,
               FT_Face     *aface );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_New_Memory_Face                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This function calls @@FT_Open_Face to open a font that has been     */
  /*    loaded into memory.                                                */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    library    :: A handle to the library resource.                    */
  /*                                                                       */
  /* <Input>                                                               */
  /*    file_base  :: A pointer to the beginning of the font data.         */
  /*                                                                       */
  /*    file_size  :: The size of the memory chunk used by the font data.  */
  /*                                                                       */
  /*    face_index :: See @@FT_Open_Face for a detailed description of this */
  /*                  parameter.                                           */
  /*                                                                       */
  /* <Output>                                                              */
  /*    aface      :: A handle to a new face object.  If `face_index' is   */
  /*                  greater than or equal to zero, it must be non-NULL.  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    You must not deallocate the memory before calling @@FT_Done_Face.   */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_New_Memory_Face( FT_Library      library,
                      const FT_Byte*  file_base,
                      FT_Long         file_size,
                      FT_Long         face_index,
                      FT_Face        *aface );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Open_Face                                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Create a face object from a given resource described by            */
  /*    @@FT_Open_Args.                                                     */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    library    :: A handle to the library resource.                    */
  /*                                                                       */
  /* <Input>                                                               */
  /*    args       :: A pointer to an `FT_Open_Args' structure that must   */
  /*                  be filled by the caller.                             */
  /*                                                                       */
  /*    face_index :: This field holds two different values.  Bits 0-15    */
  /*                  are the index of the face in the font file (starting */
  /*                  with value~0).  Set it to~0 if there is only one     */
  /*                  face in the font file.                               */
  /*                                                                       */
  /*                  Bits 16-30 are relevant to GX variation fonts only,  */
  /*                  specifying the named instance index for the current  */
  /*                  face index (starting with value~1; value~0 makes     */
  /*                  FreeType ignore named instances).  For non-GX fonts, */
  /*                  bits 16-30 are ignored.  Assuming that you want to   */
  /*                  access the third named instance in face~4,           */
  /*                  `face_index' should be set to 0x00030004.  If you    */
  /*                  want to access face~4 without GX variation handling, */
  /*                  simply set `face_index' to value~4.                  */
  /*                                                                       */
  /*                  FT_Open_Face and its siblings can be used to quickly */
  /*                  check whether the font format of a given font        */
  /*                  resource is supported by FreeType.  In general, if   */
  /*                  the `face_index' argument is negative, the           */
  /*                  function's return value is~0 if the font format is   */
  /*                  recognized, or non-zero otherwise.  The function     */
  /*                  allocates a more or less empty face handle in        */
  /*                  `*aface' (if `aface' isn't NULL); the only two       */
  /*                  useful fields in this special case are               */
  /*                  `face->num_faces' and `face->style_flags'.  For any  */
  /*                  negative value of `face_index', `face->num_faces'    */
  /*                  gives the number of faces within the font file.  For */
  /*                  the negative value `-(N+1)' (with `N' a 16-bit       */
  /*                  value), bits 16-30 in `face->style_flags' give the   */
  /*                  number of named instances in face `N' if we have a   */
  /*                  GX variation font (or zero otherwise).  After        */
  /*                  examination, the returned @@FT_Face structure should  */
  /*                  be deallocated with a call to @@FT_Done_Face.         */
  /*                                                                       */
  /* <Output>                                                              */
  /*    aface      :: A handle to a new face object.  If `face_index' is   */
  /*                  greater than or equal to zero, it must be non-NULL.  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Unlike FreeType 1.x, this function automatically creates a glyph   */
  /*    slot for the face object that can be accessed directly through     */
  /*    `face->glyph'.                                                     */
  /*                                                                       */
  /*    Each new face object created with this function also owns a        */
  /*    default @@FT_Size object, accessible as `face->size'.               */
  /*                                                                       */
  /*    One @@FT_Library instance can have multiple face objects, this is,  */
  /*    @@FT_Open_Face and its siblings can be called multiple times using  */
  /*    the same `library' argument.                                       */
  /*                                                                       */
  /*    See the discussion of reference counters in the description of     */
  /*    @@FT_Reference_Face.                                                */
  /*                                                                       */
  /*    To loop over all faces, use code similar to the following snippet  */
  /*    (omitting the error handling).                                     */
  /*                                                                       */
  /*    {                                                                  */
  /*      ...                                                              */
  /*      FT_Face  face;                                                   */
  /*      FT_Long  i, num_faces;                                           */
  /*                                                                       */
  /*                                                                       */
  /*      error = FT_Open_Face( library, args, -1, &face );                */
  /*      if ( error ) { ... }                                             */
  /*                                                                       */
  /*      num_faces = face->num_faces;                                     */
  /*      FT_Done_Face( face );                                            */
  /*                                                                       */
  /*      for ( i = 0; i < num_faces; i++ )                                */
  /*      {                                                                */
  /*        ...                                                            */
  /*        error = FT_Open_Face( library, args, i, &face );               */
  /*        ...                                                            */
  /*        FT_Done_Face( face );                                          */
  /*        ...                                                            */
  /*      }                                                                */
  /*    }                                                                  */
  /*                                                                       */
  /*    To loop over all valid values for `face_index', use something      */
  /*    similar to the following snippet, again without error handling.    */
  /*    The code accesses all faces immediately (thus only a single call   */
  /*    of `FT_Open_Face' within the do-loop), with and without named      */
  /*    instances.                                                         */
  /*                                                                       */
  /*    {                                                                  */
  /*      ...                                                              */
  /*      FT_Face  face;                                                   */
  /*                                                                       */
  /*      FT_Long  num_faces     = 0;                                      */
  /*      FT_Long  num_instances = 0;                                      */
  /*                                                                       */
  /*      FT_Long  face_idx     = 0;                                       */
  /*      FT_Long  instance_idx = 0;                                       */
  /*                                                                       */
  /*                                                                       */
  /*      do                                                               */
  /*      {                                                                */
  /*        FT_Long  id = ( instance_idx << 16 ) + face_idx;               */
  /*                                                                       */
  /*                                                                       */
  /*        error = FT_Open_Face( library, args, id, &face );              */
  /*        if ( error ) { ... }                                           */
  /*                                                                       */
  /*        num_faces     = face->num_faces;                               */
  /*        num_instances = face->style_flags >> 16;                       */
  /*                                                                       */
  /*        ...                                                            */
  /*                                                                       */
  /*        FT_Done_Face( face );                                          */
  /*                                                                       */
  /*        if ( instance_idx < num_instances )                            */
  /*          instance_idx++;                                              */
  /*        else                                                           */
  /*        {                                                              */
  /*          face_idx++;                                                  */
  /*          instance_idx = 0;                                            */
  /*        }                                                              */
  /*                                                                       */
  /*      } while ( face_idx < num_faces )                                 */
  /*    }                                                                  */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Open_Face( FT_Library           library,
                const FT_Open_Args*  args,
                FT_Long              face_index,
                FT_Face             *aface );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Attach_File                                                     */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This function calls @@FT_Attach_Stream to attach a file.            */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face         :: The target face object.                            */
  /*                                                                       */
  /* <Input>                                                               */
  /*    filepathname :: The pathname.                                      */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Attach_File( FT_Face      face,
                  const char*  filepathname );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Attach_Stream                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    `Attach' data to a face object.  Normally, this is used to read    */
  /*    additional information for the face object.  For example, you can  */
  /*    attach an AFM file that comes with a Type~1 font to get the        */
  /*    kerning values and other metrics.                                  */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face       :: The target face object.                              */
  /*                                                                       */
  /* <Input>                                                               */
  /*    parameters :: A pointer to @@FT_Open_Args that must be filled by    */
  /*                  the caller.                                          */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The meaning of the `attach' (i.e., what really happens when the    */
  /*    new file is read) is not fixed by FreeType itself.  It really      */
  /*    depends on the font format (and thus the font driver).             */
  /*                                                                       */
  /*    Client applications are expected to know what they are doing       */
  /*    when invoking this function.  Most drivers simply do not implement */
  /*    file attachments.                                                  */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Attach_Stream( FT_Face        face,
                    FT_Open_Args*  parameters );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Reference_Face                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A counter gets initialized to~1 at the time an @@FT_Face structure  */
  /*    is created.  This function increments the counter.  @@FT_Done_Face  */
  /*    then only destroys a face if the counter is~1, otherwise it simply */
  /*    decrements the counter.                                            */
  /*                                                                       */
  /*    This function helps in managing life-cycles of structures that     */
  /*    reference @@FT_Face objects.                                        */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face :: A handle to a target face object.                          */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.4.2                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Reference_Face( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Done_Face                                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Discard a given face object, as well as all of its child slots and */
  /*    sizes.                                                             */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face :: A handle to a target face object.                          */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    See the discussion of reference counters in the description of     */
  /*    @@FT_Reference_Face.                                                */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Done_Face( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Select_Size                                                     */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Select a bitmap strike.  To be more precise, this function sets    */
  /*    the scaling factors of the active @@FT_Size object in a face so     */
  /*    that bitmaps from this particular strike are taken by              */
  /*    @@FT_Load_Glyph and friends.                                        */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face         :: A handle to a target face object.                  */
  /*                                                                       */
  /* <Input>                                                               */
  /*    strike_index :: The index of the bitmap strike in the              */
  /*                    `available_sizes' field of @@FT_FaceRec structure.  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    For bitmaps embedded in outline fonts it is common that only a     */
  /*    subset of the available glyphs at a given ppem value is available. */
  /*    FreeType silently uses outlines if there is no bitmap for a given  */
  /*    glyph index.                                                       */
  /*                                                                       */
  /*    For GX variation fonts, a bitmap strike makes sense only if the    */
  /*    default instance is active (this is, no glyph variation takes      */
  /*    place); otherwise, FreeType simply ignores bitmap strikes.  The    */
  /*    same is true for all named instances that are different from the   */
  /*    default instance.                                                  */
  /*                                                                       */
  /*    Don't use this function if you are using the FreeType cache API.   */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Select_Size( FT_Face  face,
                  FT_Int   strike_index );


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_Size_Request_Type                                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An enumeration type that lists the supported size request types,   */
  /*    i.e., what input size (in font units) maps to the requested output */
  /*    size (in pixels, as computed from the arguments of                 */
  /*    @@FT_Size_Request).                                                 */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_SIZE_REQUEST_TYPE_NOMINAL ::                                    */
  /*      The nominal size.  The `units_per_EM' field of @@FT_FaceRec is    */
  /*      used to determine both scaling values.                           */
  /*                                                                       */
  /*      This is the standard scaling found in most applications.  In     */
  /*      particular, use this size request type for TrueType fonts if     */
  /*      they provide optical scaling or something similar.  Note,        */
  /*      however, that `units_per_EM' is a rather abstract value which    */
  /*      bears no relation to the actual size of the glyphs in a font.    */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_REAL_DIM ::                                   */
  /*      The real dimension.  The sum of the `ascender' and (minus of)    */
  /*      the `descender' fields of @@FT_FaceRec are used to determine both */
  /*      scaling values.                                                  */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_BBOX ::                                       */
  /*      The font bounding box.  The width and height of the `bbox' field */
  /*      of @@FT_FaceRec are used to determine the horizontal and vertical */
  /*      scaling value, respectively.                                     */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_CELL ::                                       */
  /*      The `max_advance_width' field of @@FT_FaceRec is used to          */
  /*      determine the horizontal scaling value; the vertical scaling     */
  /*      value is determined the same way as                              */
  /*      @@FT_SIZE_REQUEST_TYPE_REAL_DIM does.  Finally, both scaling      */
  /*      values are set to the smaller one.  This type is useful if you   */
  /*      want to specify the font size for, say, a window of a given      */
  /*      dimension and 80x24 cells.                                       */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_SCALES ::                                     */
  /*      Specify the scaling values directly.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The above descriptions only apply to scalable formats.  For bitmap */
  /*    formats, the behaviour is up to the driver.                        */
  /*                                                                       */
  /*    See the note section of @@FT_Size_Metrics if you wonder how size    */
  /*    requesting relates to scaling values.                              */
  /*                                                                       */
  typedef enum  FT_Size_Request_Type_
  {
    FT_SIZE_REQUEST_TYPE_NOMINAL,
    FT_SIZE_REQUEST_TYPE_REAL_DIM,
    FT_SIZE_REQUEST_TYPE_BBOX,
    FT_SIZE_REQUEST_TYPE_CELL,
    FT_SIZE_REQUEST_TYPE_SCALES,

    FT_SIZE_REQUEST_TYPE_MAX

  } FT_Size_Request_Type;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Size_RequestRec                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A structure used to model a size request.                          */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    type           :: See @@FT_Size_Request_Type.                       */
  /*                                                                       */
  /*    width          :: The desired width, given as a 26.6 fractional    */
  /*                      point value (with 72pt = 1in).                   */
  /*                                                                       */
  /*    height         :: The desired height, given as a 26.6 fractional   */
  /*                      point value (with 72pt = 1in).                   */
  /*                                                                       */
  /*    horiResolution :: The horizontal resolution (dpi, i.e., pixels per */
  /*                      inch).  If set to zero, `width' is treated as a  */
  /*                      26.6 fractional *pixel* value.                   */
  /*                                                                       */
  /*    vertResolution :: The vertical resolution (dpi, i.e., pixels per   */
  /*                      inch).  If set to zero, `height' is treated as a */
  /*                      26.6 fractional *pixel* value.                   */
  /*                                                                       */
  /* <Note>                                                                */
  /*    If `width' is zero, then the horizontal scaling value is set equal */
  /*    to the vertical scaling value, and vice versa.                     */
  /*                                                                       */
  /*    If `type' is FT_SIZE_REQUEST_TYPE_SCALES, `width' and `height' are */
  /*    interpreted directly as 16.16 fractional scaling values, without   */
  /*    any further modification, and both `horiResolution' and            */
  /*    `vertResolution' are ignored.                                      */
  /*                                                                       */
  typedef struct  FT_Size_RequestRec_
  {
    FT_Size_Request_Type  type;
    FT_Long               width;
    FT_Long               height;
    FT_UInt               horiResolution;
    FT_UInt               vertResolution;

  } FT_Size_RequestRec;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Size_Request                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A handle to a size request structure.                              */
  /*                                                                       */
  typedef struct FT_Size_RequestRec_  *FT_Size_Request;


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Request_Size                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Resize the scale of the active @@FT_Size object in a face.          */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face :: A handle to a target face object.                          */
  /*                                                                       */
  /* <Input>                                                               */
  /*    req  :: A pointer to a @@FT_Size_RequestRec.                        */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Although drivers may select the bitmap strike matching the         */
  /*    request, you should not rely on this if you intend to select a     */
  /*    particular bitmap strike.  Use @@FT_Select_Size instead in that     */
  /*    case.                                                              */
  /*                                                                       */
  /*    The relation between the requested size and the resulting glyph    */
  /*    size is dependent entirely on how the size is defined in the       */
  /*    source face.  The font designer chooses the final size of each     */
  /*    glyph relative to this size.  For more information refer to        */
  /*    `http://www.freetype.org/freetype2/docs/glyphs/glyphs-2.html'      */
  /*                                                                       */
  /*    Don't use this function if you are using the FreeType cache API.   */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Request_Size( FT_Face          face,
                   FT_Size_Request  req );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Set_Char_Size                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This function calls @@FT_Request_Size to request the nominal size   */
  /*    (in points).                                                       */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face            :: A handle to a target face object.               */
  /*                                                                       */
  /* <Input>                                                               */
  /*    char_width      :: The nominal width, in 26.6 fractional points.   */
  /*                                                                       */
  /*    char_height     :: The nominal height, in 26.6 fractional points.  */
  /*                                                                       */
  /*    horz_resolution :: The horizontal resolution in dpi.               */
  /*                                                                       */
  /*    vert_resolution :: The vertical resolution in dpi.                 */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    If either the character width or height is zero, it is set equal   */
  /*    to the other value.                                                */
  /*                                                                       */
  /*    If either the horizontal or vertical resolution is zero, it is set */
  /*    equal to the other value.                                          */
  /*                                                                       */
  /*    A character width or height smaller than 1pt is set to 1pt; if     */
  /*    both resolution values are zero, they are set to 72dpi.            */
  /*                                                                       */
  /*    Don't use this function if you are using the FreeType cache API.   */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Set_Char_Size( FT_Face     face,
                    FT_F26Dot6  char_width,
                    FT_F26Dot6  char_height,
                    FT_UInt     horz_resolution,
                    FT_UInt     vert_resolution );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Set_Pixel_Sizes                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This function calls @@FT_Request_Size to request the nominal size   */
  /*    (in pixels).                                                       */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face         :: A handle to the target face object.                */
  /*                                                                       */
  /* <Input>                                                               */
  /*    pixel_width  :: The nominal width, in pixels.                      */
  /*                                                                       */
  /*    pixel_height :: The nominal height, in pixels.                     */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    You should not rely on the resulting glyphs matching, or being     */
  /*    constrained, to this pixel size.  Refer to @@FT_Request_Size to     */
  /*    understand how requested sizes relate to actual sizes.             */
  /*                                                                       */
  /*    Don't use this function if you are using the FreeType cache API.   */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Set_Pixel_Sizes( FT_Face  face,
                      FT_UInt  pixel_width,
                      FT_UInt  pixel_height );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Load_Glyph                                                      */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A function used to load a single glyph into the glyph slot of a    */
  /*    face object.                                                       */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face        :: A handle to the target face object where the glyph  */
  /*                   is loaded.                                          */
  /*                                                                       */
  /* <Input>                                                               */
  /*    glyph_index :: The index of the glyph in the font file.  For       */
  /*                   CID-keyed fonts (either in PS or in CFF format)     */
  /*                   this argument specifies the CID value.              */
  /*                                                                       */
  /*    load_flags  :: A flag indicating what to load for this glyph.  The */
  /*                   @@FT_LOAD_XXX constants can be used to control the   */
  /*                   glyph loading process (e.g., whether the outline    */
  /*                   should be scaled, whether to load bitmaps or not,   */
  /*                   whether to hint the outline, etc).                  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The loaded glyph may be transformed.  See @@FT_Set_Transform for    */
  /*    the details.                                                       */
  /*                                                                       */
  /*    For subsetted CID-keyed fonts, `FT_Err_Invalid_Argument' is        */
  /*    returned for invalid CID values (this is, for CID values that      */
  /*    don't have a corresponding glyph in the font).  See the discussion */
  /*    of the @@FT_FACE_FLAG_CID_KEYED flag for more details.              */
  /*                                                                       */
  /*    If you receive `FT_Err_Glyph_Too_Big', try getting the glyph       */
  /*    outline at EM size, then scale it manually and fill it as a        */
  /*    graphics operation.                                                */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Load_Glyph( FT_Face   face,
                 FT_UInt   glyph_index,
                 FT_Int32  load_flags );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Load_Char                                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A function used to load a single glyph into the glyph slot of a    */
  /*    face object, according to its character code.                      */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face        :: A handle to a target face object where the glyph    */
  /*                   is loaded.                                          */
  /*                                                                       */
  /* <Input>                                                               */
  /*    char_code   :: The glyph's character code, according to the        */
  /*                   current charmap used in the face.                   */
  /*                                                                       */
  /*    load_flags  :: A flag indicating what to load for this glyph.  The */
  /*                   @@FT_LOAD_XXX constants can be used to control the   */
  /*                   glyph loading process (e.g., whether the outline    */
  /*                   should be scaled, whether to load bitmaps or not,   */
  /*                   whether to hint the outline, etc).                  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    This function simply calls @@FT_Get_Char_Index and @@FT_Load_Glyph.  */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Load_Char( FT_Face   face,
                FT_ULong  char_code,
                FT_Int32  load_flags );


  /*************************************************************************
   *
   * @@enum:
   *   FT_LOAD_XXX
   *
   * @@description:
   *   A list of bit field constants used with @@FT_Load_Glyph to indicate
   *   what kind of operations to perform during glyph loading.
   *
   * @@values:
   *   FT_LOAD_DEFAULT ::
   *     Corresponding to~0, this value is used as the default glyph load
   *     operation.  In this case, the following happens:
   *
   *     1. FreeType looks for a bitmap for the glyph corresponding to the
   *        face's current size.  If one is found, the function returns.
   *        The bitmap data can be accessed from the glyph slot (see note
   *        below).
   *
   *     2. If no embedded bitmap is searched or found, FreeType looks for a
   *        scalable outline.  If one is found, it is loaded from the font
   *        file, scaled to device pixels, then `hinted' to the pixel grid
   *        in order to optimize it.  The outline data can be accessed from
   *        the glyph slot (see note below).
   *
   *     Note that by default, the glyph loader doesn't render outlines into
   *     bitmaps.  The following flags are used to modify this default
   *     behaviour to more specific and useful cases.
   *
   *   FT_LOAD_NO_SCALE ::
   *     Don't scale the loaded outline glyph but keep it in font units.
   *
   *     This flag implies @@FT_LOAD_NO_HINTING and @@FT_LOAD_NO_BITMAP, and
   *     unsets @@FT_LOAD_RENDER.
   *
   *     If the font is `tricky' (see @@FT_FACE_FLAG_TRICKY for more), using
   *     FT_LOAD_NO_SCALE usually yields meaningless outlines because the
   *     subglyphs must be scaled and positioned with hinting instructions.
   *     This can be solved by loading the font without FT_LOAD_NO_SCALE and
   *     setting the character size to `font->units_per_EM'.
   *
   *   FT_LOAD_NO_HINTING ::
   *     Disable hinting.  This generally generates `blurrier' bitmap glyphs
   *     when the glyph are rendered in any of the anti-aliased modes.  See
   *     also the note below.
   *
   *     This flag is implied by @@FT_LOAD_NO_SCALE.
   *
   *   FT_LOAD_RENDER ::
   *     Call @@FT_Render_Glyph after the glyph is loaded.  By default, the
   *     glyph is rendered in @@FT_RENDER_MODE_NORMAL mode.  This can be
   *     overridden by @@FT_LOAD_TARGET_XXX or @@FT_LOAD_MONOCHROME.
   *
   *     This flag is unset by @@FT_LOAD_NO_SCALE.
   *
   *   FT_LOAD_NO_BITMAP ::
   *     Ignore bitmap strikes when loading.  Bitmap-only fonts ignore this
   *     flag.
   *
   *     @@FT_LOAD_NO_SCALE always sets this flag.
   *
   *   FT_LOAD_VERTICAL_LAYOUT ::
   *     Load the glyph for vertical text layout.  In particular, the
   *     `advance' value in the @@FT_GlyphSlotRec structure is set to the
   *     `vertAdvance' value of the `metrics' field.
   *
   *     In case @@FT_HAS_VERTICAL doesn't return true, you shouldn't use
   *     this flag currently.  Reason is that in this case vertical metrics
   *     get synthesized, and those values are not always consistent across
   *     various font formats.
   *
   *   FT_LOAD_FORCE_AUTOHINT ::
   *     Indicates that the auto-hinter is preferred over the font's native
   *     hinter.  See also the note below.
   *
   *   FT_LOAD_PEDANTIC ::
   *     Indicates that the font driver should perform pedantic verifications
   *     during glyph loading.  This is mostly used to detect broken glyphs
   *     in fonts.  By default, FreeType tries to handle broken fonts also.
   *
   *     In particular, errors from the TrueType bytecode engine are not
   *     passed to the application if this flag is not set; this might
   *     result in partially hinted or distorted glyphs in case a glyph's
   *     bytecode is buggy.
   *
   *   FT_LOAD_NO_RECURSE ::
   *     Indicate that the font driver should not load composite glyphs
   *     recursively.  Instead, it should set the `num_subglyph' and
   *     `subglyphs' values of the glyph slot accordingly, and set
   *     `glyph->format' to @@FT_GLYPH_FORMAT_COMPOSITE.  The description of
   *     subglyphs can then be accessed with @@FT_Get_SubGlyph_Info.
   *
   *     This flag implies @@FT_LOAD_NO_SCALE and @@FT_LOAD_IGNORE_TRANSFORM.
   *
   *   FT_LOAD_IGNORE_TRANSFORM ::
   *     Indicates that the transform matrix set by @@FT_Set_Transform should
   *     be ignored.
   *
   *   FT_LOAD_MONOCHROME ::
   *     This flag is used with @@FT_LOAD_RENDER to indicate that you want to
   *     render an outline glyph to a 1-bit monochrome bitmap glyph, with
   *     8~pixels packed into each byte of the bitmap data.
   *
   *     Note that this has no effect on the hinting algorithm used.  You
   *     should rather use @@FT_LOAD_TARGET_MONO so that the
   *     monochrome-optimized hinting algorithm is used.
   *
   *   FT_LOAD_LINEAR_DESIGN ::
   *     Indicates that the `linearHoriAdvance' and `linearVertAdvance'
   *     fields of @@FT_GlyphSlotRec should be kept in font units.  See
   *     @@FT_GlyphSlotRec for details.
   *
   *   FT_LOAD_NO_AUTOHINT ::
   *     Disable auto-hinter.  See also the note below.
   *
   *   FT_LOAD_COLOR ::
   *     This flag is used to request loading of color embedded-bitmap
   *     images.  The resulting color bitmaps, if available, will have the
   *     @@FT_PIXEL_MODE_BGRA format.  When the flag is not used and color
   *     bitmaps are found, they will be converted to 256-level gray
   *     bitmaps transparently.  Those bitmaps will be in the
   *     @@FT_PIXEL_MODE_GRAY format.
   *
   *   FT_LOAD_COMPUTE_METRICS ::
   *     This flag sets computing glyph metrics without the use of bundled
   *     metrics tables (for example, the `hdmx' table in TrueType fonts).
   *     Well-behaving fonts have optimized bundled metrics and these should
   *     be used.  This flag is mainly used by font validating or font
   *     editing applications, which need to ignore, verify, or edit those
   *     tables.
   *
   *     Currently, this flag is only implemented for TrueType fonts.
   *
   *   FT_LOAD_BITMAP_METRICS_ONLY ::
   *     This flag is used to request loading of the metrics and bitmap
   *     image information of a (possibly embedded) bitmap glyph without
   *     allocating or copying the bitmap image data itself.  No effect if
   *     the target glyph is not a bitmap image.
   *
   *     This flag unsets @@FT_LOAD_RENDER.
   *
   *   FT_LOAD_CROP_BITMAP ::
   *     Ignored.  Deprecated.
   *
   *   FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH ::
   *     Ignored.  Deprecated.
   *
   * @@note:
   *   By default, hinting is enabled and the font's native hinter (see
   *   @@FT_FACE_FLAG_HINTER) is preferred over the auto-hinter.  You can
   *   disable hinting by setting @@FT_LOAD_NO_HINTING or change the
   *   precedence by setting @@FT_LOAD_FORCE_AUTOHINT.  You can also set
   *   @@FT_LOAD_NO_AUTOHINT in case you don't want the auto-hinter to be
   *   used at all.
   *
   *   See the description of @@FT_FACE_FLAG_TRICKY for a special exception
   *   (affecting only a handful of Asian fonts).
   *
   *   Besides deciding which hinter to use, you can also decide which
   *   hinting algorithm to use.  See @@FT_LOAD_TARGET_XXX for details.
   *
   *   Note that the auto-hinter needs a valid Unicode cmap (either a native
   *   one or synthesized by FreeType) for producing correct results.  If a
   *   font provides an incorrect mapping (for example, assigning the
   *   character code U+005A, LATIN CAPITAL LETTER Z, to a glyph depicting a
   *   mathematical integral sign), the auto-hinter might produce useless
   *   results.
   *
   */
#define FT_LOAD_DEFAULT                      0x0
#define FT_LOAD_NO_SCALE                     ( 1L << 0 )
#define FT_LOAD_NO_HINTING                   ( 1L << 1 )
#define FT_LOAD_RENDER                       ( 1L << 2 )
#define FT_LOAD_NO_BITMAP                    ( 1L << 3 )
#define FT_LOAD_VERTICAL_LAYOUT              ( 1L << 4 )
#define FT_LOAD_FORCE_AUTOHINT               ( 1L << 5 )
#define FT_LOAD_CROP_BITMAP                  ( 1L << 6 )
#define FT_LOAD_PEDANTIC                     ( 1L << 7 )
#define FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH  ( 1L << 9 )
#define FT_LOAD_NO_RECURSE                   ( 1L << 10 )
#define FT_LOAD_IGNORE_TRANSFORM             ( 1L << 11 )
#define FT_LOAD_MONOCHROME                   ( 1L << 12 )
#define FT_LOAD_LINEAR_DESIGN                ( 1L << 13 )
#define FT_LOAD_NO_AUTOHINT                  ( 1L << 15 )
  /* Bits 16..19 are used by `FT_LOAD_TARGET_' */
#define FT_LOAD_COLOR                        ( 1L << 20 )
#define FT_LOAD_COMPUTE_METRICS              ( 1L << 21 )
#define FT_LOAD_BITMAP_METRICS_ONLY          ( 1L << 22 )

  /* */

  /* used internally only by certain font drivers! */
#define FT_LOAD_ADVANCE_ONLY                 ( 1L << 8 )
#define FT_LOAD_SBITS_ONLY                   ( 1L << 14 )


  /**************************************************************************
   *
   * @@enum:
   *   FT_LOAD_TARGET_XXX
   *
   * @@description:
   *   A list of values that are used to select a specific hinting algorithm
   *   to use by the hinter.  You should OR one of these values to your
   *   `load_flags' when calling @@FT_Load_Glyph.
   *
   *   Note that font's native hinters may ignore the hinting algorithm you
   *   have specified (e.g., the TrueType bytecode interpreter).  You can set
   *   @@FT_LOAD_FORCE_AUTOHINT to ensure that the auto-hinter is used.
   *
   * @@values:
   *   FT_LOAD_TARGET_NORMAL ::
   *     This corresponds to the default hinting algorithm, optimized for
   *     standard gray-level rendering.  For monochrome output, use
   *     @@FT_LOAD_TARGET_MONO instead.
   *
   *   FT_LOAD_TARGET_LIGHT ::
   *     A lighter hinting algorithm for gray-level modes.  Many generated
   *     glyphs are fuzzier but better resemble their original shape.  This
   *     is achieved by snapping glyphs to the pixel grid only vertically
   *     (Y-axis), as is done by Microsoft's ClearType and Adobe's
   *     proprietary font renderer.  This preserves inter-glyph spacing in
   *     horizontal text.  The snapping is done either by the native font
   *     driver if the driver itself and the font support it or by the
   *     auto-hinter.
   *
   *   FT_LOAD_TARGET_MONO ::
   *     Strong hinting algorithm that should only be used for monochrome
   *     output.  The result is probably unpleasant if the glyph is rendered
   *     in non-monochrome modes.
   *
   *   FT_LOAD_TARGET_LCD ::
   *     A variant of @@FT_LOAD_TARGET_NORMAL optimized for horizontally
   *     decimated LCD displays.
   *
   *   FT_LOAD_TARGET_LCD_V ::
   *     A variant of @@FT_LOAD_TARGET_NORMAL optimized for vertically
   *     decimated LCD displays.
   *
   * @@note:
   *   You should use only _one_ of the FT_LOAD_TARGET_XXX values in your
   *   `load_flags'.  They can't be ORed.
   *
   *   If @@FT_LOAD_RENDER is also set, the glyph is rendered in the
   *   corresponding mode (i.e., the mode that matches the used algorithm
   *   best).  An exception is FT_LOAD_TARGET_MONO since it implies
   *   @@FT_LOAD_MONOCHROME.
   *
   *   You can use a hinting algorithm that doesn't correspond to the same
   *   rendering mode.  As an example, it is possible to use the `light'
   *   hinting algorithm and have the results rendered in horizontal LCD
   *   pixel mode, with code like
   *
   *     {
   *       FT_Load_Glyph( face, glyph_index,
   *                      load_flags | FT_LOAD_TARGET_LIGHT );
   *
   *       FT_Render_Glyph( face->glyph, FT_RENDER_MODE_LCD );
   *     }
   *
   */
#define FT_LOAD_TARGET_( x )   ( (FT_Int32)( (x) & 15 ) << 16 )

#define FT_LOAD_TARGET_NORMAL  FT_LOAD_TARGET_( FT_RENDER_MODE_NORMAL )
#define FT_LOAD_TARGET_LIGHT   FT_LOAD_TARGET_( FT_RENDER_MODE_LIGHT  )
#define FT_LOAD_TARGET_MONO    FT_LOAD_TARGET_( FT_RENDER_MODE_MONO   )
#define FT_LOAD_TARGET_LCD     FT_LOAD_TARGET_( FT_RENDER_MODE_LCD    )
#define FT_LOAD_TARGET_LCD_V   FT_LOAD_TARGET_( FT_RENDER_MODE_LCD_V  )


  /**************************************************************************
   *
   * @@macro:
   *   FT_LOAD_TARGET_MODE
   *
   * @@description:
   *   Return the @@FT_Render_Mode corresponding to a given
   *   @@FT_LOAD_TARGET_XXX value.
   *
   */
#define FT_LOAD_TARGET_MODE( x )  ( (FT_Render_Mode)( ( (x) >> 16 ) & 15 ) )


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Set_Transform                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A function used to set the transformation that is applied to glyph */
  /*    images when they are loaded into a glyph slot through              */
  /*    @@FT_Load_Glyph.                                                    */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face   :: A handle to the source face object.                      */
  /*                                                                       */
  /* <Input>                                                               */
  /*    matrix :: A pointer to the transformation's 2x2 matrix.  Use~0 for */
  /*              the identity matrix.                                     */
  /*    delta  :: A pointer to the translation vector.  Use~0 for the null */
  /*              vector.                                                  */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The transformation is only applied to scalable image formats after */
  /*    the glyph has been loaded.  It means that hinting is unaltered by  */
  /*    the transformation and is performed on the character size given in */
  /*    the last call to @@FT_Set_Char_Size or @@FT_Set_Pixel_Sizes.         */
  /*                                                                       */
  /*    Note that this also transforms the `face.glyph.advance' field, but */
  /*    *not* the values in `face.glyph.metrics'.                          */
  /*                                                                       */
  FT_EXPORT( void )
  FT_Set_Transform( FT_Face     face,
                    FT_Matrix*  matrix,
                    FT_Vector*  delta );


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_Render_Mode                                                     */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An enumeration type that lists the render modes supported by       */
  /*    FreeType~2.  Each mode corresponds to a specific type of scanline  */
  /*    conversion performed on the outline.                               */
  /*                                                                       */
  /*    For bitmap fonts and embedded bitmaps the `bitmap->pixel_mode'     */
  /*    field in the @@FT_GlyphSlotRec structure gives the format of the    */
  /*    returned bitmap.                                                   */
  /*                                                                       */
  /*    All modes except @@FT_RENDER_MODE_MONO use 256 levels of opacity,   */
  /*    indicating pixel coverage.  Use linear alpha blending and gamma    */
  /*    correction to correctly render non-monochrome glyph bitmaps onto a */
  /*    surface; see @@FT_Render_Glyph.                                     */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_RENDER_MODE_NORMAL ::                                           */
  /*      This is the default render mode; it corresponds to 8-bit         */
  /*      anti-aliased bitmaps.                                            */
  /*                                                                       */
  /*    FT_RENDER_MODE_LIGHT ::                                            */
  /*      This is equivalent to @@FT_RENDER_MODE_NORMAL.  It is only        */
  /*      defined as a separate value because render modes are also used   */
  /*      indirectly to define hinting algorithm selectors.  See           */
  /*      @@FT_LOAD_TARGET_XXX for details.                                 */
  /*                                                                       */
  /*    FT_RENDER_MODE_MONO ::                                             */
  /*      This mode corresponds to 1-bit bitmaps (with 2~levels of         */
  /*      opacity).                                                        */
  /*                                                                       */
  /*    FT_RENDER_MODE_LCD ::                                              */
  /*      This mode corresponds to horizontal RGB and BGR sub-pixel        */
  /*      displays like LCD screens.  It produces 8-bit bitmaps that are   */
  /*      3~times the width of the original glyph outline in pixels, and   */
  /*      which use the @@FT_PIXEL_MODE_LCD mode.                           */
  /*                                                                       */
  /*    FT_RENDER_MODE_LCD_V ::                                            */
  /*      This mode corresponds to vertical RGB and BGR sub-pixel displays */
  /*      (like PDA screens, rotated LCD displays, etc.).  It produces     */
  /*      8-bit bitmaps that are 3~times the height of the original        */
  /*      glyph outline in pixels and use the @@FT_PIXEL_MODE_LCD_V mode.   */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The LCD-optimized glyph bitmaps produced by FT_Render_Glyph can be */
  /*    filtered to reduce color-fringes by using @@FT_Library_SetLcdFilter */
  /*    (not active in the default builds).  It is up to the caller to     */
  /*    either call @@FT_Library_SetLcdFilter (if available) or do the      */
  /*    filtering itself.                                                  */
  /*                                                                       */
  /*    The selected render mode only affects vector glyphs of a font.     */
  /*    Embedded bitmaps often have a different pixel mode like            */
  /*    @@FT_PIXEL_MODE_MONO.  You can use @@FT_Bitmap_Convert to transform  */
  /*    them into 8-bit pixmaps.                                           */
  /*                                                                       */
  typedef enum  FT_Render_Mode_
  {
    FT_RENDER_MODE_NORMAL = 0,
    FT_RENDER_MODE_LIGHT,
    FT_RENDER_MODE_MONO,
    FT_RENDER_MODE_LCD,
    FT_RENDER_MODE_LCD_V,

    FT_RENDER_MODE_MAX

  } FT_Render_Mode;


  /* these constants are deprecated; use the corresponding */
  /* `FT_Render_Mode' values instead                       */
#define ft_render_mode_normal  FT_RENDER_MODE_NORMAL
#define ft_render_mode_mono    FT_RENDER_MODE_MONO


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Render_Glyph                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Convert a given glyph image to a bitmap.  It does so by inspecting */
  /*    the glyph image format, finding the relevant renderer, and         */
  /*    invoking it.                                                       */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    slot        :: A handle to the glyph slot containing the image to  */
  /*                   convert.                                            */
  /*                                                                       */
  /* <Input>                                                               */
  /*    render_mode :: This is the render mode used to render the glyph    */
  /*                   image into a bitmap.  See @@FT_Render_Mode for a     */
  /*                   list of possible values.                            */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    To get meaningful results, font scaling values must be set with    */
  /*    functions like @@FT_Set_Char_Size before calling FT_Render_Glyph.   */
  /*                                                                       */
  /*    When FreeType outputs a bitmap of a glyph, it really outputs an    */
  /*    alpha coverage map.  If a pixel is completely covered by a         */
  /*    filled-in outline, the bitmap contains 0xFF at that pixel, meaning */
  /*    that 0xFF/0xFF fraction of that pixel is covered, meaning the      */
  /*    pixel is 100% black (or 0% bright).  If a pixel is only 50%        */
  /*    covered (value 0x80), the pixel is made 50% black (50% bright or a */
  /*    middle shade of grey).  0% covered means 0% black (100% bright or  */
  /*    white).                                                            */
  /*                                                                       */
  /*    On high-DPI screens like on smartphones and tablets, the pixels    */
  /*    are so small that their chance of being completely covered and     */
  /*    therefore completely black are fairly good.  On the low-DPI        */
  /*    screens, however, the situation is different.  The pixels are too  */
  /*    large for most of the details of a glyph and shades of gray are    */
  /*    the norm rather than the exception.                                */
  /*                                                                       */
  /*    This is relevant because all our screens have a second problem:    */
  /*    they are not linear.  1~+~1 is not~2.  Twice the value does not    */
  /*    result in twice the brightness.  When a pixel is only 50% covered, */
  /*    the coverage map says 50% black, and this translates to a pixel    */
  /*    value of 128 when you use 8~bits per channel (0-255).  However,    */
  /*    this does not translate to 50% brightness for that pixel on our    */
  /*    sRGB and gamma~2.2 screens.  Due to their non-linearity, they      */
  /*    dwell longer in the darks and only a pixel value of about 186      */
  /*    results in 50% brightness – 128 ends up too dark on both bright    */
  /*    and dark backgrounds.  The net result is that dark text looks      */
  /*    burnt-out, pixely and blotchy on bright background, bright text    */
  /*    too frail on dark backgrounds, and colored text on colored         */
  /*    background (for example, red on green) seems to have dark halos or */
  /*    `dirt' around it.  The situation is especially ugly for diagonal   */
  /*    stems like in `w' glyph shapes where the quality of FreeType's     */
  /*    anti-aliasing depends on the correct display of grays.  On         */
  /*    high-DPI screens where smaller, fully black pixels reign supreme,  */
  /*    this doesn't matter, but on our low-DPI screens with all the gray  */
  /*    shades, it does.  0% and 100% brightness are the same things in    */
  /*    linear and non-linear space, just all the shades in-between        */
  /*    aren't.                                                            */
  /*                                                                       */
  /*    The blending function for placing text over a background is        */
  /*                                                                       */
  /*    {                                                                  */
  /*      dst = alpha * src + (1 - alpha) * dst    ,                       */
  /*    }                                                                  */
  /*                                                                       */
  /*    which is known as the OVER operator.                               */
  /*                                                                       */
  /*    To correctly composite an antialiased pixel of a glyph onto a      */
  /*    surface,                                                           */
  /*                                                                       */
  /*    1. take the foreground and background colors (e.g., in sRGB space) */
  /*       and apply gamma to get them in a linear space,                  */
  /*                                                                       */
  /*    2. use OVER to blend the two linear colors using the glyph pixel   */
  /*       as the alpha value (remember, the glyph bitmap is an alpha      */
  /*       coverage bitmap), and                                           */
  /*                                                                       */
  /*    3. apply inverse gamma to the blended pixel and write it back to   */
  /*       the image.                                                      */
  /*                                                                       */
  /*    Internal testing at Adobe found that a target inverse gamma of~1.8 */
  /*    for step~3 gives good results across a wide range of displays with */
  /*    an sRGB gamma curve or a similar one.                              */
  /*                                                                       */
  /*    This process can cost performance.  There is an approximation that */
  /*    does not need to know about the background color; see              */
  /*    https://bel.fi/alankila/lcd/ and                                   */
  /*    https://bel.fi/alankila/lcd/alpcor.html for details.               */
  /*                                                                       */
  /*    *ATTENTION*: Linear blending is even more important when dealing   */
  /*    with subpixel-rendered glyphs to prevent color-fringing!  A        */
  /*    subpixel-rendered glyph must first be filtered with a filter that  */
  /*    gives equal weight to the three color primaries and does not       */
  /*    exceed a sum of 0x100, see section @@lcd_filtering.  Then the       */
  /*    only difference to gray linear blending is that subpixel-rendered  */
  /*    linear blending is done 3~times per pixel: red foreground subpixel */
  /*    to red background subpixel and so on for green and blue.           */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Render_Glyph( FT_GlyphSlot    slot,
                   FT_Render_Mode  render_mode );


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_Kerning_Mode                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An enumeration used to specify which kerning values to return in   */
  /*    @@FT_Get_Kerning.                                                   */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_KERNING_DEFAULT  :: Return grid-fitted kerning distances in     */
  /*                           pixels (value is~0).  Whether they are      */
  /*                           scaled depends on @@FT_LOAD_NO_SCALE.        */
  /*                                                                       */
  /*    FT_KERNING_UNFITTED :: Return un-grid-fitted kerning distances in  */
  /*                           26.6 fractional pixels.  Whether they are   */
  /*                           scaled depends on @@FT_LOAD_NO_SCALE.        */
  /*                                                                       */
  /*    FT_KERNING_UNSCALED :: Return the kerning vector in original font  */
  /*                           units.                                      */
  /*                                                                       */
  /* <Note>                                                                */
  /*    FT_KERNING_DEFAULT returns full pixel values; it also makes        */
  /*    FreeType heuristically scale down kerning distances at small ppem  */
  /*    values so that they don't become too big.                          */
  /*                                                                       */
  typedef enum  FT_Kerning_Mode_
  {
    FT_KERNING_DEFAULT  = 0,
    FT_KERNING_UNFITTED,
    FT_KERNING_UNSCALED

  } FT_Kerning_Mode;


  /* these constants are deprecated; use the corresponding */
  /* `FT_Kerning_Mode' values instead                      */
#define ft_kerning_default   FT_KERNING_DEFAULT
#define ft_kerning_unfitted  FT_KERNING_UNFITTED
#define ft_kerning_unscaled  FT_KERNING_UNSCALED


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Get_Kerning                                                     */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the kerning vector between two glyphs of a same face.       */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face        :: A handle to a source face object.                   */
  /*                                                                       */
  /*    left_glyph  :: The index of the left glyph in the kern pair.       */
  /*                                                                       */
  /*    right_glyph :: The index of the right glyph in the kern pair.      */
  /*                                                                       */
  /*    kern_mode   :: See @@FT_Kerning_Mode for more information.          */
  /*                   Determines the scale and dimension of the returned  */
  /*                   kerning vector.                                     */
  /*                                                                       */
  /* <Output>                                                              */
  /*    akerning    :: The kerning vector.  This is either in font units,  */
  /*                   fractional pixels (26.6 format), or pixels for      */
  /*                   scalable formats, and in pixels for fixed-sizes     */
  /*                   formats.                                            */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Only horizontal layouts (left-to-right & right-to-left) are        */
  /*    supported by this method.  Other layouts, or more sophisticated    */
  /*    kernings, are out of the scope of this API function -- they can be */
  /*    implemented through format-specific interfaces.                    */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Get_Kerning( FT_Face     face,
                  FT_UInt     left_glyph,
                  FT_UInt     right_glyph,
                  FT_UInt     kern_mode,
                  FT_Vector  *akerning );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Get_Track_Kerning                                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the track kerning for a given face object at a given size.  */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face       :: A handle to a source face object.                    */
  /*                                                                       */
  /*    point_size :: The point size in 16.16 fractional points.           */
  /*                                                                       */
  /*    degree     :: The degree of tightness.  Increasingly negative      */
  /*                  values represent tighter track kerning, while        */
  /*                  increasingly positive values represent looser track  */
  /*                  kerning.  Value zero means no track kerning.         */
  /*                                                                       */
  /* <Output>                                                              */
  /*    akerning   :: The kerning in 16.16 fractional points, to be        */
  /*                  uniformly applied between all glyphs.                */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Currently, only the Type~1 font driver supports track kerning,     */
  /*    using data from AFM files (if attached with @@FT_Attach_File or     */
  /*    @@FT_Attach_Stream).                                                */
  /*                                                                       */
  /*    Only very few AFM files come with track kerning data; please refer */
  /*    to the Adobe's AFM specification for more details.                 */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Get_Track_Kerning( FT_Face    face,
                        FT_Fixed   point_size,
                        FT_Int     degree,
                        FT_Fixed*  akerning );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Get_Glyph_Name                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Retrieve the ASCII name of a given glyph in a face.  This only     */
  /*    works for those faces where @@FT_HAS_GLYPH_NAMES(face) returns~1.   */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face        :: A handle to a source face object.                   */
  /*                                                                       */
  /*    glyph_index :: The glyph index.                                    */
  /*                                                                       */
  /*    buffer_max  :: The maximum number of bytes available in the        */
  /*                   buffer.                                             */
  /*                                                                       */
  /* <Output>                                                              */
  /*    buffer      :: A pointer to a target buffer where the name is      */
  /*                   copied to.                                          */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    An error is returned if the face doesn't provide glyph names or if */
  /*    the glyph index is invalid.  In all cases of failure, the first    */
  /*    byte of `buffer' is set to~0 to indicate an empty name.            */
  /*                                                                       */
  /*    The glyph name is truncated to fit within the buffer if it is too  */
  /*    long.  The returned string is always zero-terminated.              */
  /*                                                                       */
  /*    Be aware that FreeType reorders glyph indices internally so that   */
  /*    glyph index~0 always corresponds to the `missing glyph' (called    */
  /*    `.notdef').                                                        */
  /*                                                                       */
  /*    This function always returns an error if the config macro          */
  /*    `FT_CONFIG_OPTION_NO_GLYPH_NAMES' is not defined in `ftoption.h'.  */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Get_Glyph_Name( FT_Face     face,
                     FT_UInt     glyph_index,
                     FT_Pointer  buffer,
                     FT_UInt     buffer_max );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Get_Postscript_Name                                             */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Retrieve the ASCII PostScript name of a given face, if available.  */
  /*    This only works with PostScript and TrueType fonts.                */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face :: A handle to the source face object.                        */
  /*                                                                       */
  /* <Return>                                                              */
  /*    A pointer to the face's PostScript name.  NULL if unavailable.     */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The returned pointer is owned by the face and is destroyed with    */
  /*    it.                                                                */
  /*                                                                       */
  FT_EXPORT( const char* )
  FT_Get_Postscript_Name( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Select_Charmap                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Select a given charmap by its encoding tag (as listed in           */
  /*    `freetype.h').                                                     */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face     :: A handle to the source face object.                    */
  /*                                                                       */
  /* <Input>                                                               */
  /*    encoding :: A handle to the selected encoding.                     */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    This function returns an error if no charmap in the face           */
  /*    corresponds to the encoding queried here.                          */
  /*                                                                       */
  /*    Because many fonts contain more than a single cmap for Unicode     */
  /*    encoding, this function has some special code to select the one    */
  /*    that covers Unicode best (`best' in the sense that a UCS-4 cmap is */
  /*    preferred to a UCS-2 cmap).  It is thus preferable to              */
  /*    @@FT_Set_Charmap in this case.                                      */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Select_Charmap( FT_Face      face,
                     FT_Encoding  encoding );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Set_Charmap                                                     */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Select a given charmap for character code to glyph index mapping.  */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face    :: A handle to the source face object.                     */
  /*                                                                       */
  /* <Input>                                                               */
  /*    charmap :: A handle to the selected charmap.                       */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    This function returns an error if the charmap is not part of       */
  /*    the face (i.e., if it is not listed in the `face->charmaps'        */
  /*    table).                                                            */
  /*                                                                       */
  /*    It also fails if a type~14 charmap is selected.                    */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Set_Charmap( FT_Face     face,
                  FT_CharMap  charmap );


  /*************************************************************************
   *
   * @@function:
   *   FT_Get_Charmap_Index
   *
   * @@description:
   *   Retrieve index of a given charmap.
   *
   * @@input:
   *   charmap ::
   *     A handle to a charmap.
   *
   * @@return:
   *   The index into the array of character maps within the face to which
   *   `charmap' belongs.  If an error occurs, -1 is returned.
   *
   */
  FT_EXPORT( FT_Int )
  FT_Get_Charmap_Index( FT_CharMap  charmap );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Get_Char_Index                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the glyph index of a given character code.  This function   */
  /*    uses a charmap object to do the mapping.                           */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face     :: A handle to the source face object.                    */
  /*                                                                       */
  /*    charcode :: The character code.                                    */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The glyph index.  0~means `undefined character code'.              */
  /*                                                                       */
  /* <Note>                                                                */
  /*    If you use FreeType to manipulate the contents of font files       */
  /*    directly, be aware that the glyph index returned by this function  */
  /*    doesn't always correspond to the internal indices used within the  */
  /*    file.  This is done to ensure that value~0 always corresponds to   */
  /*    the `missing glyph'.  If the first glyph is not named `.notdef',   */
  /*    then for Type~1 and Type~42 fonts, `.notdef' will be moved into    */
  /*    the glyph ID~0 position, and whatever was there will be moved to   */
  /*    the position `.notdef' had.  For Type~1 fonts, if there is no      */
  /*    `.notdef' glyph at all, then one will be created at index~0 and    */
  /*    whatever was there will be moved to the last index -- Type~42      */
  /*    fonts are considered invalid under this condition.                 */
  /*                                                                       */
  FT_EXPORT( FT_UInt )
  FT_Get_Char_Index( FT_Face   face,
                     FT_ULong  charcode );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Get_First_Char                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This function is used to return the first character code in the    */
  /*    current charmap of a given face.  It also returns the              */
  /*    corresponding glyph index.                                         */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face    :: A handle to the source face object.                     */
  /*                                                                       */
  /* <Output>                                                              */
  /*    agindex :: Glyph index of first character code.  0~if charmap is   */
  /*               empty.                                                  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The charmap's first character code.                                */
  /*                                                                       */
  /* <Note>                                                                */
  /*    You should use this function with @@FT_Get_Next_Char to be able to  */
  /*    parse all character codes available in a given charmap.  The code  */
  /*    should look like this:                                             */
  /*                                                                       */
  /*    {                                                                  */
  /*      FT_ULong  charcode;                                              */
  /*      FT_UInt   gindex;                                                */
  /*                                                                       */
  /*                                                                       */
  /*      charcode = FT_Get_First_Char( face, &gindex );                   */
  /*      while ( gindex != 0 )                                            */
  /*      {                                                                */
  /*        ... do something with (charcode,gindex) pair ...               */
  /*                                                                       */
  /*        charcode = FT_Get_Next_Char( face, charcode, &gindex );        */
  /*      }                                                                */
  /*    }                                                                  */
  /*                                                                       */
  /*    Be aware that character codes can have values up to 0xFFFFFFFF;    */
  /*    this might happen for non-Unicode or malformed cmaps.  However,    */
  /*    even with regular Unicode encoding, so-called `last resort fonts'  */
  /*    (using SFNT cmap format 13, see function @@FT_Get_CMap_Format)      */
  /*    normally have entries for all Unicode characters up to 0x1FFFFF,   */
  /*    which can cause *a lot* of iterations.                             */
  /*                                                                       */
  /*    Note that `*agindex' is set to~0 if the charmap is empty.  The     */
  /*    result itself can be~0 in two cases: if the charmap is empty or    */
  /*    if the value~0 is the first valid character code.                  */
  /*                                                                       */
  FT_EXPORT( FT_ULong )
  FT_Get_First_Char( FT_Face   face,
                     FT_UInt  *agindex );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Get_Next_Char                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This function is used to return the next character code in the     */
  /*    current charmap of a given face following the value `char_code',   */
  /*    as well as the corresponding glyph index.                          */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face      :: A handle to the source face object.                   */
  /*    char_code :: The starting character code.                          */
  /*                                                                       */
  /* <Output>                                                              */
  /*    agindex   :: Glyph index of next character code.  0~if charmap     */
  /*                 is empty.                                             */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The charmap's next character code.                                 */
  /*                                                                       */
  /* <Note>                                                                */
  /*    You should use this function with @@FT_Get_First_Char to walk       */
  /*    over all character codes available in a given charmap.  See the    */
  /*    note for this function for a simple code example.                  */
  /*                                                                       */
  /*    Note that `*agindex' is set to~0 when there are no more codes in   */
  /*    the charmap.                                                       */
  /*                                                                       */
  FT_EXPORT( FT_ULong )
  FT_Get_Next_Char( FT_Face    face,
                    FT_ULong   char_code,
                    FT_UInt   *agindex );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Get_Name_Index                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the glyph index of a given glyph name.  This function uses  */
  /*    driver specific objects to do the translation.                     */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face       :: A handle to the source face object.                  */
  /*                                                                       */
  /*    glyph_name :: The glyph name.                                      */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The glyph index.  0~means `undefined character code'.              */
  /*                                                                       */
  FT_EXPORT( FT_UInt )
  FT_Get_Name_Index( FT_Face     face,
                     FT_String*  glyph_name );


  /*************************************************************************
   *
   * @@macro:
   *   FT_SUBGLYPH_FLAG_XXX
   *
   * @@description:
   *   A list of constants used to describe subglyphs.  Please refer to the
   *   TrueType specification for the meaning of the various flags.
   *
   * @@values:
   *   FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS ::
   *   FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES ::
   *   FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID ::
   *   FT_SUBGLYPH_FLAG_SCALE ::
   *   FT_SUBGLYPH_FLAG_XY_SCALE ::
   *   FT_SUBGLYPH_FLAG_2X2 ::
   *   FT_SUBGLYPH_FLAG_USE_MY_METRICS ::
   *
   */
#define FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS          1
#define FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES      2
#define FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID        4
#define FT_SUBGLYPH_FLAG_SCALE                   8
#define FT_SUBGLYPH_FLAG_XY_SCALE             0x40
#define FT_SUBGLYPH_FLAG_2X2                  0x80
#define FT_SUBGLYPH_FLAG_USE_MY_METRICS      0x200


  /*************************************************************************
   *
   * @@func:
   *   FT_Get_SubGlyph_Info
   *
   * @@description:
   *   Retrieve a description of a given subglyph.  Only use it if
   *   `glyph->format' is @@FT_GLYPH_FORMAT_COMPOSITE; an error is
   *   returned otherwise.
   *
   * @@input:
   *   glyph ::
   *     The source glyph slot.
   *
   *   sub_index ::
   *     The index of the subglyph.  Must be less than
   *     `glyph->num_subglyphs'.
   *
   * @@output:
   *   p_index ::
   *     The glyph index of the subglyph.
   *
   *   p_flags ::
   *     The subglyph flags, see @@FT_SUBGLYPH_FLAG_XXX.
   *
   *   p_arg1 ::
   *     The subglyph's first argument (if any).
   *
   *   p_arg2 ::
   *     The subglyph's second argument (if any).
   *
   *   p_transform ::
   *     The subglyph transformation (if any).
   *
   * @@return:
   *   FreeType error code.  0~means success.
   *
   * @@note:
   *   The values of `*p_arg1', `*p_arg2', and `*p_transform' must be
   *   interpreted depending on the flags returned in `*p_flags'.  See the
   *   TrueType specification for details.
   *
   */
  FT_EXPORT( FT_Error )
  FT_Get_SubGlyph_Info( FT_GlyphSlot  glyph,
                        FT_UInt       sub_index,
                        FT_Int       *p_index,
                        FT_UInt      *p_flags,
                        FT_Int       *p_arg1,
                        FT_Int       *p_arg2,
                        FT_Matrix    *p_transform );


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_FSTYPE_XXX                                                      */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A list of bit flags used in the `fsType' field of the OS/2 table   */
  /*    in a TrueType or OpenType font and the `FSType' entry in a         */
  /*    PostScript font.  These bit flags are returned by                  */
  /*    @@FT_Get_FSType_Flags; they inform client applications of embedding */
  /*    and subsetting restrictions associated with a font.                */
  /*                                                                       */
  /*    See                                                                */
  /*    http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/FontPolicies.pdf */
  /*    for more details.                                                  */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_FSTYPE_INSTALLABLE_EMBEDDING ::                                 */
  /*      Fonts with no fsType bit set may be embedded and permanently     */
  /*      installed on the remote system by an application.                */
  /*                                                                       */
  /*    FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING ::                          */
  /*      Fonts that have only this bit set must not be modified, embedded */
  /*      or exchanged in any manner without first obtaining permission of */
  /*      the font software copyright owner.                               */
  /*                                                                       */
  /*    FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING ::                           */
  /*      If this bit is set, the font may be embedded and temporarily     */
  /*      loaded on the remote system.  Documents containing Preview &     */
  /*      Print fonts must be opened `read-only'; no edits can be applied  */
  /*      to the document.                                                 */
  /*                                                                       */
  /*    FT_FSTYPE_EDITABLE_EMBEDDING ::                                    */
  /*      If this bit is set, the font may be embedded but must only be    */
  /*      installed temporarily on other systems.  In contrast to Preview  */
  /*      & Print fonts, documents containing editable fonts may be opened */
  /*      for reading, editing is permitted, and changes may be saved.     */
  /*                                                                       */
  /*    FT_FSTYPE_NO_SUBSETTING ::                                         */
  /*      If this bit is set, the font may not be subsetted prior to       */
  /*      embedding.                                                       */
  /*                                                                       */
  /*    FT_FSTYPE_BITMAP_EMBEDDING_ONLY ::                                 */
  /*      If this bit is set, only bitmaps contained in the font may be    */
  /*      embedded; no outline data may be embedded.  If there are no      */
  /*      bitmaps available in the font, then the font is unembeddable.    */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The flags are ORed together, thus more than a single value can be  */
  /*    returned.                                                          */
  /*                                                                       */
  /*    While the fsType flags can indicate that a font may be embedded, a */
  /*    license with the font vendor may be separately required to use the */
  /*    font in this way.                                                  */
  /*                                                                       */
#define FT_FSTYPE_INSTALLABLE_EMBEDDING         0x0000
#define FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING  0x0002
#define FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING   0x0004
#define FT_FSTYPE_EDITABLE_EMBEDDING            0x0008
#define FT_FSTYPE_NO_SUBSETTING                 0x0100
#define FT_FSTYPE_BITMAP_EMBEDDING_ONLY         0x0200


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Get_FSType_Flags                                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the fsType flags for a font.                                */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face :: A handle to the source face object.                        */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The fsType flags, @@FT_FSTYPE_XXX.                                  */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Use this function rather than directly reading the `fs_type' field */
  /*    in the @@PS_FontInfoRec structure, which is only guaranteed to      */
  /*    return the correct results for Type~1 fonts.                       */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.8                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UShort )
  FT_Get_FSType_Flags( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    glyph_variants                                                     */
  /*                                                                       */
  /* <Title>                                                               */
  /*    Glyph Variants                                                     */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    The FreeType~2 interface to Unicode Ideographic Variation          */
  /*    Sequences (IVS), using the SFNT cmap format~14.                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Many CJK characters have variant forms.  They are a sort of grey   */
  /*    area somewhere between being totally irrelevant and semantically   */
  /*    distinct; for this reason, the Unicode consortium decided to       */
  /*    introduce Ideographic Variation Sequences (IVS), consisting of a   */
  /*    Unicode base character and one of 240 variant selectors            */
  /*    (U+E0100-U+E01EF), instead of further extending the already huge   */
  /*    code range for CJK characters.                                     */
  /*                                                                       */
  /*    An IVS is registered and unique; for further details please refer  */
  /*    to Unicode Technical Standard #37, the Ideographic Variation       */
  /*    Database:                                                          */
  /*                                                                       */
  /*      http://www.unicode.org/reports/tr37/                             */
  /*                                                                       */
  /*    To date (November 2014), the character with the most variants is   */
  /*    U+9089, having 32 such IVS.                                        */
  /*                                                                       */
  /*    Adobe and MS decided to support IVS with a new cmap subtable       */
  /*    (format~14).  It is an odd subtable because it is not a mapping of */
  /*    input code points to glyphs, but contains lists of all variants    */
  /*    supported by the font.                                             */
  /*                                                                       */
  /*    A variant may be either `default' or `non-default'.  A default     */
  /*    variant is the one you will get for that code point if you look it */
  /*    up in the standard Unicode cmap.  A non-default variant is a       */
  /*    different glyph.                                                   */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetCharVariantIndex                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the glyph index of a given character code as modified by    */
  /*    the variation selector.                                            */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    charcode ::                                                        */
  /*      The character code point in Unicode.                             */
  /*                                                                       */
  /*    variantSelector ::                                                 */
  /*      The Unicode code point of the variation selector.                */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The glyph index.  0~means either `undefined character code', or    */
  /*    `undefined selector code', or `no variation selector cmap          */
  /*    subtable', or `current CharMap is not Unicode'.                    */
  /*                                                                       */
  /* <Note>                                                                */
  /*    If you use FreeType to manipulate the contents of font files       */
  /*    directly, be aware that the glyph index returned by this function  */
  /*    doesn't always correspond to the internal indices used within      */
  /*    the file.  This is done to ensure that value~0 always corresponds  */
  /*    to the `missing glyph'.                                            */
  /*                                                                       */
  /*    This function is only meaningful if                                */
  /*      a) the font has a variation selector cmap sub table,             */
  /*    and                                                                */
  /*      b) the current charmap has a Unicode encoding.                   */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt )
  FT_Face_GetCharVariantIndex( FT_Face   face,
                               FT_ULong  charcode,
                               FT_ULong  variantSelector );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetCharVariantIsDefault                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Check whether this variant of this Unicode character is the one to */
  /*    be found in the `cmap'.                                            */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    charcode ::                                                        */
  /*      The character codepoint in Unicode.                              */
  /*                                                                       */
  /*    variantSelector ::                                                 */
  /*      The Unicode codepoint of the variation selector.                 */
  /*                                                                       */
  /* <Return>                                                              */
  /*    1~if found in the standard (Unicode) cmap, 0~if found in the       */
  /*    variation selector cmap, or -1 if it is not a variant.             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    This function is only meaningful if the font has a variation       */
  /*    selector cmap subtable.                                            */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Int )
  FT_Face_GetCharVariantIsDefault( FT_Face   face,
                                   FT_ULong  charcode,
                                   FT_ULong  variantSelector );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetVariantSelectors                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return a zero-terminated list of Unicode variant selectors found   */
  /*    in the font.                                                       */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /* <Return>                                                              */
  /*    A pointer to an array of selector code points, or NULL if there is */
  /*    no valid variant selector cmap subtable.                           */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The last item in the array is~0; the array is owned by the         */
  /*    @@FT_Face object but can be overwritten or released on the next     */
  /*    call to a FreeType function.                                       */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt32* )
  FT_Face_GetVariantSelectors( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetVariantsOfChar                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return a zero-terminated list of Unicode variant selectors found   */
  /*    for the specified character code.                                  */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    charcode ::                                                        */
  /*      The character codepoint in Unicode.                              */
  /*                                                                       */
  /* <Return>                                                              */
  /*    A pointer to an array of variant selector code points that are     */
  /*    active for the given character, or NULL if the corresponding list  */
  /*    is empty.                                                          */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The last item in the array is~0; the array is owned by the         */
  /*    @@FT_Face object but can be overwritten or released on the next     */
  /*    call to a FreeType function.                                       */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt32* )
  FT_Face_GetVariantsOfChar( FT_Face   face,
                             FT_ULong  charcode );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetCharsOfVariant                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return a zero-terminated list of Unicode character codes found for */
  /*    the specified variant selector.                                    */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    variantSelector ::                                                 */
  /*      The variant selector code point in Unicode.                      */
  /*                                                                       */
  /* <Return>                                                              */
  /*    A list of all the code points that are specified by this selector  */
  /*    (both default and non-default codes are returned) or NULL if there */
  /*    is no valid cmap or the variant selector is invalid.               */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The last item in the array is~0; the array is owned by the         */
  /*    @@FT_Face object but can be overwritten or released on the next     */
  /*    call to a FreeType function.                                       */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt32* )
  FT_Face_GetCharsOfVariant( FT_Face   face,
                             FT_ULong  variantSelector );


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    computations                                                       */
  /*                                                                       */
  /* <Title>                                                               */
  /*    Computations                                                       */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    Crunching fixed numbers and vectors.                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This section contains various functions used to perform            */
  /*    computations on 16.16 fixed-float numbers or 2d vectors.           */
  /*                                                                       */
  /* <Order>                                                               */
  /*    FT_MulDiv                                                          */
  /*    FT_MulFix                                                          */
  /*    FT_DivFix                                                          */
  /*    FT_RoundFix                                                        */
  /*    FT_CeilFix                                                         */
  /*    FT_FloorFix                                                        */
  /*    FT_Vector_Transform                                                */
  /*    FT_Matrix_Multiply                                                 */
  /*    FT_Matrix_Invert                                                   */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_MulDiv                                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A very simple function used to perform the computation `(a*b)/c'   */
  /*    with maximum accuracy (it uses a 64-bit intermediate integer       */
  /*    whenever necessary).                                               */
  /*                                                                       */
  /*    This function isn't necessarily as fast as some processor specific */
  /*    operations, but is at least completely portable.                   */
  /*                                                                       */
  /* <Input>                                                               */
  /*    a :: The first multiplier.                                         */
  /*    b :: The second multiplier.                                        */
  /*    c :: The divisor.                                                  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The result of `(a*b)/c'.  This function never traps when trying to */
  /*    divide by zero; it simply returns `MaxInt' or `MinInt' depending   */
  /*    on the signs of `a' and `b'.                                       */
  /*                                                                       */
  FT_EXPORT( FT_Long )
  FT_MulDiv( FT_Long  a,
             FT_Long  b,
             FT_Long  c );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_MulFix                                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A very simple function used to perform the computation             */
  /*    `(a*b)/0x10000' with maximum accuracy.  Most of the time this is   */
  /*    used to multiply a given value by a 16.16 fixed-point factor.      */
  /*                                                                       */
  /* <Input>                                                               */
  /*    a :: The first multiplier.                                         */
  /*    b :: The second multiplier.  Use a 16.16 factor here whenever      */
  /*         possible (see note below).                                    */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The result of `(a*b)/0x10000'.                                     */
  /*                                                                       */
  /* <Note>                                                                */
  /*    This function has been optimized for the case where the absolute   */
  /*    value of `a' is less than 2048, and `b' is a 16.16 scaling factor. */
  /*    As this happens mainly when scaling from notional units to         */
  /*    fractional pixels in FreeType, it resulted in noticeable speed     */
  /*    improvements between versions 2.x and 1.x.                         */
  /*                                                                       */
  /*    As a conclusion, always try to place a 16.16 factor as the         */
  /*    _second_ argument of this function; this can make a great          */
  /*    difference.                                                        */
  /*                                                                       */
  FT_EXPORT( FT_Long )
  FT_MulFix( FT_Long  a,
             FT_Long  b );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_DivFix                                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A very simple function used to perform the computation             */
  /*    `(a*0x10000)/b' with maximum accuracy.  Most of the time, this is  */
  /*    used to divide a given value by a 16.16 fixed-point factor.        */
  /*                                                                       */
  /* <Input>                                                               */
  /*    a :: The numerator.                                                */
  /*    b :: The denominator.  Use a 16.16 factor here.                    */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The result of `(a*0x10000)/b'.                                     */
  /*                                                                       */
  FT_EXPORT( FT_Long )
  FT_DivFix( FT_Long  a,
             FT_Long  b );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_RoundFix                                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A very simple function used to round a 16.16 fixed number.         */
  /*                                                                       */
  /* <Input>                                                               */
  /*    a :: The number to be rounded.                                     */
  /*                                                                       */
  /* <Return>                                                              */
  /*    `a' rounded to nearest 16.16 fixed integer, halfway cases away     */
  /*    from zero.                                                         */
  /*                                                                       */
  FT_EXPORT( FT_Fixed )
  FT_RoundFix( FT_Fixed  a );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_CeilFix                                                         */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A very simple function used to compute the ceiling function of a   */
  /*    16.16 fixed number.                                                */
  /*                                                                       */
  /* <Input>                                                               */
  /*    a :: The number for which the ceiling function is to be computed.  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    `a' rounded towards plus infinity.                                 */
  /*                                                                       */
  FT_EXPORT( FT_Fixed )
  FT_CeilFix( FT_Fixed  a );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_FloorFix                                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A very simple function used to compute the floor function of a     */
  /*    16.16 fixed number.                                                */
  /*                                                                       */
  /* <Input>                                                               */
  /*    a :: The number for which the floor function is to be computed.    */
  /*                                                                       */
  /* <Return>                                                              */
  /*    `a' rounded towards minus infinity.                                */
  /*                                                                       */
  FT_EXPORT( FT_Fixed )
  FT_FloorFix( FT_Fixed  a );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Vector_Transform                                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Transform a single vector through a 2x2 matrix.                    */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    vector :: The target vector to transform.                          */
  /*                                                                       */
  /* <Input>                                                               */
  /*    matrix :: A pointer to the source 2x2 matrix.                      */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The result is undefined if either `vector' or `matrix' is invalid. */
  /*                                                                       */
  FT_EXPORT( void )
  FT_Vector_Transform( FT_Vector*        vec,
                       const FT_Matrix*  matrix );


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    version                                                            */
  /*                                                                       */
  /* <Title>                                                               */
  /*    FreeType Version                                                   */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    Functions and macros related to FreeType versions.                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Note that those functions and macros are of limited use because    */
  /*    even a new release of FreeType with only documentation changes     */
  /*    increases the version number.                                      */
  /*                                                                       */
  /* <Order>                                                               */
  /*    FT_Library_Version                                                 */
  /*                                                                       */
  /*    FREETYPE_MAJOR                                                     */
  /*    FREETYPE_MINOR                                                     */
  /*    FREETYPE_PATCH                                                     */
  /*                                                                       */
  /*    FT_Face_CheckTrueTypePatents                                       */
  /*    FT_Face_SetUnpatentedHinting                                       */
  /*                                                                       */
  /*    FREETYPE_XXX                                                       */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************
   *
   * @@enum:
   *   FREETYPE_XXX
   *
   * @@description:
   *   These three macros identify the FreeType source code version.
   *   Use @@FT_Library_Version to access them at runtime.
   *
   * @@values:
   *   FREETYPE_MAJOR :: The major version number.
   *   FREETYPE_MINOR :: The minor version number.
   *   FREETYPE_PATCH :: The patch level.
   *
   * @@note:
   *   The version number of FreeType if built as a dynamic link library
   *   with the `libtool' package is _not_ controlled by these three
   *   macros.
   *
   */
#define FREETYPE_MAJOR  2
#define FREETYPE_MINOR  7
#define FREETYPE_PATCH  1


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Library_Version                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the version of the FreeType library being used.  This is    */
  /*    useful when dynamically linking to the library, since one cannot   */
  /*    use the macros @@FREETYPE_MAJOR, @@FREETYPE_MINOR, and               */
  /*    @@FREETYPE_PATCH.                                                   */
  /*                                                                       */
  /* <Input>                                                               */
  /*    library :: A source library handle.                                */
  /*                                                                       */
  /* <Output>                                                              */
  /*    amajor  :: The major version number.                               */
  /*                                                                       */
  /*    aminor  :: The minor version number.                               */
  /*                                                                       */
  /*    apatch  :: The patch version number.                               */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The reason why this function takes a `library' argument is because */
  /*    certain programs implement library initialization in a custom way  */
  /*    that doesn't use @@FT_Init_FreeType.                                */
  /*                                                                       */
  /*    In such cases, the library version might not be available before   */
  /*    the library object has been created.                               */
  /*                                                                       */
  FT_EXPORT( void )
  FT_Library_Version( FT_Library   library,
                      FT_Int      *amajor,
                      FT_Int      *aminor,
                      FT_Int      *apatch );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_CheckTrueTypePatents                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Deprecated, does nothing.                                          */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face :: A face handle.                                             */
  /*                                                                       */
  /* <Return>                                                              */
  /*    Always returns false.                                              */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Since May 2010, TrueType hinting is no longer patented.            */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.5                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Bool )
  FT_Face_CheckTrueTypePatents( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_SetUnpatentedHinting                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Deprecated, does nothing.                                          */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face  :: A face handle.                                            */
  /*                                                                       */
  /*    value :: New boolean setting.                                      */
  /*                                                                       */
  /* <Return>                                                              */
  /*    Always returns false.                                              */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Since May 2010, TrueType hinting is no longer patented.            */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.5                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Bool )
  FT_Face_SetUnpatentedHinting( FT_Face  face,
                                FT_Bool  value );

  /* */


FT_END_HEADER

#endif /* FREETYPE_H_ */


/* END */
@


1.5
log
@fastmerge
@
text
@d7 1
a7 2
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,   */
/*            2010 by                                                      */
d19 4
a31 4
#ifndef __FREETYPE_H__
#define __FREETYPE_H__


d34 1
a35 1
#include FT_TYPES_H
d45 32
d116 2
a117 1
  /*    This section describes the public high-level API of FreeType~2.    */
d126 1
d135 1
d137 2
a142 1
  /*    FT_FACE_FLAG_FAST_GLYPHS                                           */
d145 14
d176 1
d189 1
d194 2
d212 2
a213 1
  /*    FT_LOAD_CROP_BITMAP                                                */
a216 1
  /*    FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH                                */
d227 2
d242 2
a243 6
  /*    FT_FSTYPE_INSTALLABLE_EMBEDDING                                    */
  /*    FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING                             */
  /*    FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING                              */
  /*    FT_FSTYPE_EDITABLE_EMBEDDING                                       */
  /*    FT_FSTYPE_NO_SUBSETTING                                            */
  /*    FT_FSTYPE_BITMAP_EMBEDDING_ONLY                                    */
d245 13
a257 1
  /*    FT_Get_FSType_Flags                                                */
d293 2
a294 1
  /*      Top side bearing for vertical layout.                            */
d297 2
a298 1
  /*      Advance height for vertical layout.                              */
d304 4
d396 5
a400 2
  /*    For multi-threading applications each thread should have its own   */
  /*    FT_Library object.                                                 */
d404 3
a406 1
  /*    destroyed with @@FT_Done_FreeType.                                  */
d413 7
d459 7
d482 8
d509 2
a510 1
  /*    transformation which is used to load and hint glyphs and metrics.  */
d644 7
a650 2
  /*      mathematical symbols in the 32..255 character code range.  For   */
  /*      more information, see `http://www.ceviz.net/symbol.htm'.         */
d654 1
a654 1
  /*      at `http://langsupport.japanreference.com/encoding.shtml'.       */
d658 1
a658 1
  /*      Corresponds to an encoding system for Simplified Chinese as used */
d668 1
a668 1
  /*      `http://www.microsoft.com/typography/unicode/949.txt'.           */
d743 1
a743 1
  /*    @@FT_Get_CMap_Language_ID  to query the Mac language ID which may   */
d746 1
a746 1
  /*      http://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/README.TXT  */
d788 2
a789 9
  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    ft_encoding_xxx                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    These constants are deprecated; use the corresponding @@FT_Encoding */
  /*    values instead.                                                    */
  /*                                                                       */
d878 4
a881 2
  /*    face_index          :: The index of the face in the font file.  It */
  /*                           is set to~0 if there is only one face in    */
d884 12
d900 8
a907 3
  /*    style_flags         :: A set of bit flags indicating the style of  */
  /*                           the face; see @@FT_STYLE_FLAG_XXX for the    */
  /*                           details.                                    */
d918 1
a918 1
  /*                           string, usually in English, which describes */
d929 5
d935 1
a935 1
  /*                           string, usually in English, which describes */
d954 4
d969 2
a970 2
  /*                           `bbox.yMax' can be seen as the `maximal     */
  /*                           ascender', and `bbox.yMin' as the `minimal  */
d996 1
a996 1
  /*    height              :: The height is the vertical distance         */
d1002 4
a1005 1
  /*    max_advance_width   :: The maximal advance width, in font units,   */
d1011 1
a1011 1
  /*    max_advance_height  :: The maximal advance height, in font units,  */
d1086 2
a1087 2
    FT_Generic        autohint;
    void*             extensions;
d1110 1
a1110 1
  /*      and @@FT_FACE_FLAG_FIXED_SIZES set.                               */
d1173 1
a1173 1
  /*      Note that CID-keyed fonts which are in an SFNT wrapper don't     */
d1181 1
a1181 1
  /*      A typical example is the Chinese font `mingli.ttf' which uses    */
d1185 1
a1185 1
  /*      It is not possible to autohint such fonts using                  */
d1187 1
a1187 1
  /*      @@FT_LOAD_NO_HINTING.  You have to set both FT_LOAD_NO_HINTING    */
d1191 6
a1196 2
  /*      Currently, there are six TrueType fonts in the list of tricky    */
  /*      fonts; they are hard-coded in file `ttobjs.c'.                   */
d1212 1
d1229 1
a1229 1
          ( face->face_flags & FT_FACE_FLAG_HORIZONTAL )
d1238 2
a1239 2
   *   A macro that returns true whenever a face object contains vertical
   *   metrics.
d1243 1
a1243 1
          ( face->face_flags & FT_FACE_FLAG_VERTICAL )
d1257 1
a1257 1
          ( face->face_flags & FT_FACE_FLAG_KERNING )
d1272 1
a1272 1
          ( face->face_flags & FT_FACE_FLAG_SCALABLE )
d1291 1
a1291 1
          ( face->face_flags & FT_FACE_FLAG_SFNT )
d1306 1
a1306 1
          ( face->face_flags & FT_FACE_FLAG_FIXED_WIDTH )
d1321 1
a1321 1
          ( face->face_flags & FT_FACE_FLAG_FIXED_SIZES )
d1347 1
a1347 1
          ( face->face_flags & FT_FACE_FLAG_GLYPH_NAMES )
d1362 15
a1376 1
          ( face->face_flags & FT_FACE_FLAG_MULTIPLE_MASTERS )
d1394 1
a1394 1
          ( face->face_flags & FT_FACE_FLAG_CID_KEYED )
d1408 15
a1422 1
          ( face->face_flags & FT_FACE_FLAG_TRICKY )
d1431 1
a1431 1
  /*    A list of bit-flags used to indicate the style of a given face.    */
d1499 1
a1499 1
  /*    max_advance  :: The maximal advance width in 26.6 fractional       */
d1546 3
a1548 3
  /*    generic :: A typeless pointer, which is unused by the FreeType     */
  /*               library or any of its drivers.  It can be used by       */
  /*               client applications to link their own data to each size */
d1616 4
a1619 4
  /*    generic           :: A typeless pointer which is unused by the     */
  /*                         FreeType library or any of its drivers.  It   */
  /*                         can be used by client applications to link    */
  /*                         their own data to each glyph slot object.     */
d1646 2
a1647 2
  /*                         advance width for the glyph (in 26.6          */
  /*                         fractional pixel format).  As specified with  */
d1666 9
a1674 9
  /*    bitmap_left       :: This is the bitmap's left bearing expressed   */
  /*                         in integer pixels.  Of course, this is only   */
  /*                         valid if the format is                        */
  /*                         @@FT_GLYPH_FORMAT_BITMAP.                      */
  /*                                                                       */
  /*    bitmap_top        :: This is the bitmap's top bearing expressed in */
  /*                         integer pixels.  Remember that this is the    */
  /*                         distance from the baseline to the top-most    */
  /*                         glyph scanline, upwards y~coordinates being   */
a1687 1
  /*                         For now this is internal to FreeType.         */
d1708 1
a1708 1
  /*                         left side bearing while autohinting is        */
d1712 1
a1712 1
  /*                         right side bearing while autohinting is       */
d1734 1
a1734 2
  /* <Note>                                                                */
  /*    Here a small pseudo code fragment which shows how to use           */
d1761 6
d1833 6
d1868 1
a1868 1
  /*    A list of bit-field constants used within the `flags' field of the */
a1882 10
  /*    ft_open_memory   :: Deprecated; use @@FT_OPEN_MEMORY instead.       */
  /*                                                                       */
  /*    ft_open_stream   :: Deprecated; use @@FT_OPEN_STREAM instead.       */
  /*                                                                       */
  /*    ft_open_pathname :: Deprecated; use @@FT_OPEN_PATHNAME instead.     */
  /*                                                                       */
  /*    ft_open_driver   :: Deprecated; use @@FT_OPEN_DRIVER instead.       */
  /*                                                                       */
  /*    ft_open_params   :: Deprecated; use @@FT_OPEN_PARAMS instead.       */
  /*                                                                       */
d1893 8
a1900 5
#define ft_open_memory    FT_OPEN_MEMORY     /* deprecated */
#define ft_open_stream    FT_OPEN_STREAM     /* deprecated */
#define ft_open_pathname  FT_OPEN_PATHNAME   /* deprecated */
#define ft_open_driver    FT_OPEN_DRIVER     /* deprecated */
#define ft_open_params    FT_OPEN_PARAMS     /* deprecated */
d1962 1
a1962 1
  /*    The stream type is determined by the contents of `flags' which     */
d1965 1
a1965 1
  /*    If the `FT_OPEN_MEMORY' bit is set, assume that this is a          */
d1967 1
a1967 1
  /*    The data are are not copied, and the client is responsible for     */
d1971 1
a1971 1
  /*    Otherwise, if the `FT_OPEN_STREAM' bit is set, assume that a       */
d1974 1
a1974 1
  /*    Otherwise, if the `FT_OPEN_PATHNAME' bit is set, assume that this  */
d1977 1
a1977 1
  /*    If the `FT_OPEN_DRIVER' bit is set, @@FT_Open_Face only tries to    */
d1980 1
a1980 1
  /*    If the `FT_OPEN_PARAMS' bit is set, the parameters given by        */
d2015 2
a2016 2
  /*    face_index :: The index of the face within the font.  The first    */
  /*                  face has index~0.                                    */
a2020 1
  /*                  See @@FT_Open_Face for more details.                  */
d2025 4
d2042 1
a2042 1
  /*    This function calls @@FT_Open_Face to open a font which has been    */
d2053 2
a2054 2
  /*    face_index :: The index of the face within the font.  The first    */
  /*                  face has index~0.                                    */
a2058 1
  /*                  See @@FT_Open_Face for more details.                  */
d2087 1
a2087 1
  /*    args       :: A pointer to an `FT_Open_Args' structure which must  */
d2090 33
a2122 2
  /*    face_index :: The index of the face within the font.  The first    */
  /*                  face has index~0.                                    */
a2126 1
  /*                  See note below.                                      */
d2133 1
a2133 1
  /*    slot for the face object which can be accessed directly through    */
a2135 10
  /*    FT_Open_Face can be used to quickly check whether the font         */
  /*    format of a given font resource is supported by FreeType.  If the  */
  /*    `face_index' field is negative, the function's return value is~0   */
  /*    if the font format is recognized, or non-zero otherwise;           */
  /*    the function returns a more or less empty face handle in `*aface'  */
  /*    (if `aface' isn't NULL).  The only useful field in this special    */
  /*    case is `face->num_faces' which gives the number of faces within   */
  /*    the font file.  After examination, the returned @@FT_Face structure */
  /*    should be deallocated with a call to @@FT_Done_Face.                */
  /*                                                                       */
d2139 75
d2258 1
a2258 1
  /*    parameters :: A pointer to @@FT_Open_Args which must be filled by   */
d2281 27
d2320 4
d2334 4
a2337 1
  /*    Select a bitmap strike.                                            */
d2349 14
d2374 4
a2377 1
  /*    An enumeration type that lists the supported size request types.   */
d2384 6
d2391 3
a2393 3
  /*      The real dimension.  The sum of the the `Ascender' and (minus    */
  /*      of) the `Descender' fields of @@FT_FaceRec are used to determine  */
  /*      both scaling values.                                             */
d2443 2
a2444 1
  /*    width          :: The desired width.                               */
d2446 2
a2447 1
  /*    height         :: The desired height.                              */
d2449 7
a2455 7
  /*    horiResolution :: The horizontal resolution.  If set to zero,      */
  /*                      `width' is treated as a 26.6 fractional pixel    */
  /*                      value.                                           */
  /*                                                                       */
  /*    vertResolution :: The vertical resolution.  If set to zero,        */
  /*                      `height' is treated as a 26.6 fractional pixel   */
  /*                      value.                                           */
d2461 5
d2511 8
d2588 7
d2633 1
a2633 1
  /*    returned for invalid CID values (this is, for CID values which     */
d2637 4
d2688 1
a2688 1
   *   A list of bit-field constants used with @@FT_Load_Glyph to indicate
d2712 1
a2712 1
   *     Don't scale the outline glyph loaded, but keep it in font units.
d2717 6
d2724 2
a2725 2
   *     Disable hinting.  This generally generates `blurrier' bitmap glyph
   *     when the glyph is rendered in any of the anti-aliased modes.  See
d2744 8
a2751 2
   *     Load the glyph for vertical text layout.  _Don't_ use it as it is
   *     problematic currently.
a2756 5
   *   FT_LOAD_CROP_BITMAP ::
   *     Indicates that the font driver should crop the loaded bitmap glyph
   *     (i.e., remove all space around its black bits).  Not all drivers
   *     implement this.
   *
d2762 4
a2765 8
   *   FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH ::
   *     Indicates that the font driver should ignore the global advance
   *     width defined in the font.  By default, that value is used as the
   *     advance width for all glyphs when the face has
   *     @@FT_FACE_FLAG_FIXED_WIDTH set.
   *
   *     This flag exists for historical reasons (to support buggy CJK
   *     fonts).
d2768 5
a2772 8
   *     This flag is only used internally.  It merely indicates that the
   *     font driver should not load composite glyphs recursively.  Instead,
   *     it should set the `num_subglyph' and `subglyphs' values of the
   *     glyph slot accordingly, and set `glyph->format' to
   *     @@FT_GLYPH_FORMAT_COMPOSITE.
   *
   *     The description of sub-glyphs is not available to client
   *     applications for now.
d2797 32
d2843 7
d2852 18
a2869 14
#define FT_LOAD_NO_SCALE                     0x1
#define FT_LOAD_NO_HINTING                   0x2
#define FT_LOAD_RENDER                       0x4
#define FT_LOAD_NO_BITMAP                    0x8
#define FT_LOAD_VERTICAL_LAYOUT              0x10
#define FT_LOAD_FORCE_AUTOHINT               0x20
#define FT_LOAD_CROP_BITMAP                  0x40
#define FT_LOAD_PEDANTIC                     0x80
#define FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH  0x200
#define FT_LOAD_NO_RECURSE                   0x400
#define FT_LOAD_IGNORE_TRANSFORM             0x800
#define FT_LOAD_MONOCHROME                   0x1000
#define FT_LOAD_LINEAR_DESIGN                0x2000
#define FT_LOAD_NO_AUTOHINT                  0x8000U
d2874 2
a2875 2
#define FT_LOAD_ADVANCE_ONLY                 0x100
#define FT_LOAD_SBITS_ONLY                   0x4000
a2891 3
   *   Also note that @@FT_LOAD_TARGET_LIGHT is an exception, in that it
   *   always implies @@FT_LOAD_FORCE_AUTOHINT.
   *
d2899 8
a2906 5
   *     A lighter hinting algorithm for non-monochrome modes.  Many
   *     generated glyphs are more fuzzy but better resemble its original
   *     shape.  A bit like rendering on Mac OS~X.
   *
   *     As a special exception, this target implies @@FT_LOAD_FORCE_AUTOHINT.
d2926 3
a2928 2
   *   corresponding mode (i.e., the mode which matches the used algorithm
   *   best) unless @@FT_LOAD_MONOCHROME is set.
d3013 4
a3016 1
  /*    All modes except @@FT_RENDER_MODE_MONO use 256 levels of opacity.   */
d3070 2
a3071 13
  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    ft_render_mode_xxx                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    These constants are deprecated.  Use the corresponding             */
  /*    @@FT_Render_Mode values instead.                                    */
  /*                                                                       */
  /* <Values>                                                              */
  /*    ft_render_mode_normal :: see @@FT_RENDER_MODE_NORMAL                */
  /*    ft_render_mode_mono   :: see @@FT_RENDER_MODE_MONO                  */
  /*                                                                       */
d3098 81
d3194 7
a3200 5
  /*    FT_KERNING_DEFAULT  :: Return scaled and grid-fitted kerning       */
  /*                           distances (value is~0).                     */
  /*                                                                       */
  /*    FT_KERNING_UNFITTED :: Return scaled but un-grid-fitted kerning    */
  /*                           distances.                                  */
d3205 5
d3219 2
a3220 9
  /*************************************************************************/
  /*                                                                       */
  /* <Const>                                                               */
  /*    ft_kerning_default                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This constant is deprecated.  Please use @@FT_KERNING_DEFAULT       */
  /*    instead.                                                           */
  /*                                                                       */
a3221 11


  /*************************************************************************/
  /*                                                                       */
  /* <Const>                                                               */
  /*    ft_kerning_unfitted                                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This constant is deprecated.  Please use @@FT_KERNING_UNFITTED      */
  /*    instead.                                                           */
  /*                                                                       */
a3222 11


  /*************************************************************************/
  /*                                                                       */
  /* <Const>                                                               */
  /*    ft_kerning_unscaled                                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This constant is deprecated.  Please use @@FT_KERNING_UNSCALED      */
  /*    instead.                                                           */
  /*                                                                       */
d3246 4
a3249 3
  /*    akerning    :: The kerning vector.  This is either in font units   */
  /*                   or in pixels (26.6 format) for scalable formats,    */
  /*                   and in pixels for fixed-sizes formats.              */
d3281 4
a3284 1
  /*    degree     :: The degree of tightness.                             */
d3287 2
a3288 1
  /*    akerning   :: The kerning in 16.16 fractional points.              */
d3293 8
d3322 1
a3322 1
  /*    buffer_max  :: The maximal number of bytes available in the        */
d3340 6
a3345 3
  /*    This function is not compiled within the library if the config     */
  /*    macro `FT_CONFIG_OPTION_NO_GLYPH_NAMES' is defined in              */
  /*    `include/freetype/config/ftoptions.h'.                             */
d3401 2
a3402 2
  /*    which covers Unicode best (`best' in the sense that a UCS-4 cmap   */
  /*    is preferred to a UCS-2 cmap).  It is thus preferable to           */
d3453 1
a3453 1
   *   `charmap' belongs.
d3480 9
a3488 3
  /*    doesn't always correspond to the internal indices used within      */
  /*    the file.  This is done to ensure that value~0 always corresponds  */
  /*    to the `missing glyph'.                                            */
d3534 7
d3700 3
a3702 2
  /*    See http://www.adobe.com/devnet/acrobat/pdfs/FontPolicies.pdf for  */
  /*    more details.                                                      */
d3736 3
d3767 1
a3767 1
  /*    in the @@PS_FontInfoRec structure which is only guaranteed to       */
d3770 3
d3799 7
a3805 3
  /*    to Unicode Technical Report #37, the Ideographic Variation         */
  /*    Database.  To date (October 2007), the character with the most     */
  /*    variants is U+908A, having 8~such IVS.                             */
d3947 1
a3947 1
  /*    A pointer to an array of variant selector code points which are    */
d3981 1
a3981 1
  /*    A list of all the code points which are specified by this selector */
d4034 1
a4034 1
  /*    with maximal accuracy (it uses a 64-bit intermediate integer       */
a4055 6
  /* */

  /* The following #if 0 ... #endif is for the documentation formatter, */
  /* hiding the internal `FT_MULFIX_INLINED' macro.                     */

#if 0
d4063 2
a4064 2
  /*    `(a*b)/0x10000' with maximal accuracy.  Most of the time this is   */
  /*    used to multiply a given value by a 16.16 fixed float factor.      */
a4088 11
  /* */
#endif

#ifdef FT_MULFIX_INLINED
#define FT_MulFix( a, b )  FT_MULFIX_INLINED( a, b )
#else
  FT_EXPORT( FT_Long )
  FT_MulFix( FT_Long  a,
             FT_Long  b );
#endif

d4097 2
a4098 2
  /*    `(a*0x10000)/b' with maximal accuracy.  Most of the time, this is  */
  /*    used to divide a given value by a 16.16 fixed float factor.        */
d4101 2
a4102 3
  /*    a :: The first multiplier.                                         */
  /*    b :: The second multiplier.  Use a 16.16 factor here whenever      */
  /*         possible (see note below).                                    */
a4106 5
  /* <Note>                                                                */
  /*    The optimization for FT_DivFix() is simple: If (a~<<~16) fits in   */
  /*    32~bits, then the division is computed directly.  Otherwise, we    */
  /*    use a specialized version of @@FT_MulDiv.                           */
  /*                                                                       */
d4124 2
a4125 1
  /*    The result of `(a + 0x8000) & -0x10000'.                           */
d4144 1
a4144 1
  /*    The result of `(a + 0x10000 - 1) & -0x10000'.                      */
d4163 1
a4163 1
  /*    The result of `a & -0x10000'.                                      */
d4207 12
d4243 2
a4244 2
#define FREETYPE_MINOR  3
#define FREETYPE_PATCH  12
d4289 1
a4289 7
  /*    Parse all bytecode instructions of a TrueType font file to check   */
  /*    whether any of the patented opcodes are used.  This is only useful */
  /*    if you want to be able to use the unpatented hinter with           */
  /*    fonts that do *not* use these opcodes.                             */
  /*                                                                       */
  /*    Note that this function parses *all* glyph instructions in the     */
  /*    font file, which may be slow.                                      */
d4295 4
a4298 2
  /*    1~if this is a TrueType font that uses one of the patented         */
  /*    opcodes, 0~otherwise.                                              */
d4313 1
a4313 3
  /*    Enable or disable the unpatented hinter for a given face.          */
  /*    Only enable it if you have determined that the face doesn't        */
  /*    use any patented opcodes (see @@FT_Face_CheckTrueTypePatents).      */
d4321 4
a4324 3
  /*    The old setting value.  This will always be false if this is not   */
  /*    an SFNT font, or if the unpatented hinter is not compiled in this  */
  /*    instance of the library.                                           */
d4338 1
a4338 1
#endif /* __FREETYPE_H__ */
@


1.4
log
@Merge freetype 2.3.6
@
text
@d7 2
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 by       */
a28 8
  /*************************************************************************/
  /*                                                                       */
  /* The `raster' component duplicates some of the declarations in         */
  /* freetype.h for stand-alone use if _FREETYPE_ isn't defined.           */
  /*                                                                       */
  /*************************************************************************/


d56 2
a57 2
  /*    as arguments are zeroed out except for the actual data.  With      */
  /*    other words, it is recommended to use `calloc' (or variants of it) */
d82 1
a82 1
  /*    The FreeType 2 base font interface.                                */
d85 1
a85 1
  /*    This section describes the public high-level API of FreeType 2.    */
d187 9
d235 4
d395 2
a396 2
  /*    The @@FT_FaceRec details the publicly accessible fields of a given  */
  /*    face object.                                                       */
d425 2
a426 2
  /*    The @@FT_SizeRec structure details the publicly accessible fields   */
  /*    of a given size object.                                            */
d438 1
a438 1
  /*    is possible to load any one of the glyphs contained in its parent  */
d447 1
a447 1
  /*    @@FT_GlyphSlotRec details the publicly accessible glyph fields.     */
d478 2
a479 2
  /*    The @@FT_CharMapRec details the publicly accessible fields of a     */
  /*    given character map.                                               */
d494 1
a494 1
  /*    Since many 16bit compilers don't like 32bit enumerations, you      */
d527 1
a527 4
  /*    UTF-8, UTF-16, GB2312_EUC, etc.).                                  */
  /*                                                                       */
  /*    Because of 32-bit charcodes defined in Unicode (i.e., surrogates), */
  /*    all character codes must be expressed as FT_Longs.                 */
d532 2
a533 2
  /*   FT_ENCODING_NONE ::                                                 */
  /*     The encoding value 0 is reserved.                                 */
d535 118
a652 114
  /*   FT_ENCODING_UNICODE ::                                              */
  /*     Corresponds to the Unicode character set.  This value covers      */
  /*     all versions of the Unicode repertoire, including ASCII and       */
  /*     Latin-1.  Most fonts include a Unicode charmap, but not all       */
  /*     of them.                                                          */
  /*                                                                       */
  /*   FT_ENCODING_MS_SYMBOL ::                                            */
  /*     Corresponds to the Microsoft Symbol encoding, used to encode      */
  /*     mathematical symbols in the 32..255 character code range.  For    */
  /*     more information, see `http://www.ceviz.net/symbol.htm'.          */
  /*                                                                       */
  /*   FT_ENCODING_SJIS ::                                                 */
  /*     Corresponds to Japanese SJIS encoding.  More info at              */
  /*     at `http://langsupport.japanreference.com/encoding.shtml'.        */
  /*     See note on multi-byte encodings below.                           */
  /*                                                                       */
  /*   FT_ENCODING_GB2312 ::                                               */
  /*     Corresponds to an encoding system for Simplified Chinese as used  */
  /*     used in mainland China.                                           */
  /*                                                                       */
  /*   FT_ENCODING_BIG5 ::                                                 */
  /*     Corresponds to an encoding system for Traditional Chinese as used */
  /*     in Taiwan and Hong Kong.                                          */
  /*                                                                       */
  /*   FT_ENCODING_WANSUNG ::                                              */
  /*     Corresponds to the Korean encoding system known as Wansung.       */
  /*     For more information see                                          */
  /*     `http://www.microsoft.com/typography/unicode/949.txt'.            */
  /*                                                                       */
  /*   FT_ENCODING_JOHAB ::                                                */
  /*     The Korean standard character set (KS C-5601-1992), which         */
  /*     corresponds to MS Windows code page 1361.  This character set     */
  /*     includes all possible Hangeul character combinations.             */
  /*                                                                       */
  /*   FT_ENCODING_ADOBE_LATIN_1 ::                                        */
  /*     Corresponds to a Latin-1 encoding as defined in a Type 1          */
  /*     Postscript font.  It is limited to 256 character codes.           */
  /*                                                                       */
  /*   FT_ENCODING_ADOBE_STANDARD ::                                       */
  /*     Corresponds to the Adobe Standard encoding, as found in Type 1,   */
  /*     CFF, and OpenType/CFF fonts.  It is limited to 256 character      */
  /*     codes.                                                            */
  /*                                                                       */
  /*   FT_ENCODING_ADOBE_EXPERT ::                                         */
  /*     Corresponds to the Adobe Expert encoding, as found in Type 1,     */
  /*     CFF, and OpenType/CFF fonts.  It is limited to 256 character      */
  /*     codes.                                                            */
  /*                                                                       */
  /*   FT_ENCODING_ADOBE_CUSTOM ::                                         */
  /*     Corresponds to a custom encoding, as found in Type 1, CFF, and    */
  /*     OpenType/CFF fonts.  It is limited to 256 character codes.        */
  /*                                                                       */
  /*   FT_ENCODING_APPLE_ROMAN ::                                          */
  /*     Corresponds to the 8-bit Apple roman encoding.  Many TrueType and */
  /*     OpenType fonts contain a charmap for this encoding, since older   */
  /*     versions of Mac OS are able to use it.                            */
  /*                                                                       */
  /*   FT_ENCODING_OLD_LATIN_2 ::                                          */
  /*     This value is deprecated and was never used nor reported by       */
  /*     FreeType.  Don't use or test for it.                              */
  /*                                                                       */
  /*   FT_ENCODING_MS_SJIS ::                                              */
  /*     Same as FT_ENCODING_SJIS.  Deprecated.                            */
  /*                                                                       */
  /*   FT_ENCODING_MS_GB2312 ::                                            */
  /*     Same as FT_ENCODING_GB2312.  Deprecated.                          */
  /*                                                                       */
  /*   FT_ENCODING_MS_BIG5 ::                                              */
  /*     Same as FT_ENCODING_BIG5.  Deprecated.                            */
  /*                                                                       */
  /*   FT_ENCODING_MS_WANSUNG ::                                           */
  /*     Same as FT_ENCODING_WANSUNG.  Deprecated.                         */
  /*                                                                       */
  /*   FT_ENCODING_MS_JOHAB ::                                             */
  /*     Same as FT_ENCODING_JOHAB.  Deprecated.                           */
  /*                                                                       */
  /* <Note>                                                                */
  /*   By default, FreeType automatically synthetizes a Unicode charmap    */
  /*   for Postscript fonts, using their glyph names dictionaries.         */
  /*   However, it also reports the encodings defined explicitly in the    */
  /*   font file, for the cases when they are needed, with the Adobe       */
  /*   values as well.                                                     */
  /*                                                                       */
  /*   FT_ENCODING_NONE is set by the BDF and PCF drivers if the charmap   */
  /*   is neither Unicode nor ISO-8859-1 (otherwise it is set to           */
  /*   FT_ENCODING_UNICODE).  Use @@FT_Get_BDF_Charset_ID to find out which */
  /*   encoding is really present.  If, for example, the `cs_registry'     */
  /*   field is `KOI8' and the `cs_encoding' field is `R', the font is     */
  /*   encoded in KOI8-R.                                                  */
  /*                                                                       */
  /*   FT_ENCODING_NONE is always set (with a single exception) by the     */
  /*   winfonts driver.  Use @@FT_Get_WinFNT_Header and examine the         */
  /*   `charset' field of the @@FT_WinFNT_HeaderRec structure to find out   */
  /*   which encoding is really present.  For example,                     */
  /*   @@FT_WinFNT_ID_CP1251 (204) means Windows code page 1251 (for        */
  /*   Russian).                                                           */
  /*                                                                       */
  /*   FT_ENCODING_NONE is set if `platform_id' is @@TT_PLATFORM_MACINTOSH  */
  /*   and `encoding_id' is not @@TT_MAC_ID_ROMAN (otherwise it is set to   */
  /*   FT_ENCODING_APPLE_ROMAN).                                           */
  /*                                                                       */
  /*   If `platform_id' is @@TT_PLATFORM_MACINTOSH, use the function  c     */
  /*   @@FT_Get_CMap_Language_ID  to query the Mac language ID which may be */
  /*   needed to be able to distinguish Apple encoding variants.  See      */
  /*                                                                       */
  /*     http://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/README.TXT   */
  /*                                                                       */
  /*   to get an idea how to do that.  Basically, if the language ID is 0, */
  /*   don't use it, otherwise subtract 1 from the language ID.  Then      */
  /*   examine `encoding_id'.  If, for example, `encoding_id' is           */
  /*   @@TT_MAC_ID_ROMAN and the language ID (minus 1) is                   */
  /*   `TT_MAC_LANGID_GREEK', it is the Greek encoding, not Roman.         */
  /*   @@TT_MAC_ID_ARABIC with `TT_MAC_LANGID_FARSI' means the Farsi        */
  /*   variant the Arabic encoding.                                        */
d763 1
a763 1
  /*    This structure might change between releases of FreeType 2 and is  */
d784 1
a784 1
  /*                           is set to 0 if there is only one face in    */
d800 3
d851 4
d857 1
a857 1
  /*                           TrueType fonts, and 1000 for Type 1 fonts.  */
d893 1
a893 1
  /*                           underline line for this face.  It's the     */
d908 2
a909 2
  /*   Fields may be changed after a call to @@FT_Attach_File or            */
  /*   @@FT_Attach_Stream.                                                  */
d1047 21
d1081 1
a1081 2

  /* */
d1136 1
a1136 1
   *   font face (true for TrueType, Type 1, Type 42, CID, OpenType/CFF,
a1191 2
  /* */

d1252 14
d1268 1
a1268 1
  /* <Constant>                                                            */
d1485 7
a1491 2
  /*    advance           :: This is the transformed advance width for the */
  /*                         glyph.                                        */
d1515 1
a1515 1
  /*                         glyph scanline, upwards y-coordinates being   */
d1538 1
a1538 1
  /*                         TrueType bytecode, Type 1 charstrings, etc.). */
d1560 1
a1560 1
  /*    its native format (e.g., an outline glyph for TrueType and Type 1  */
d1565 1
a1565 1
  /*    the native image's format then invokes it.                         */
d1568 1
a1568 1
  /*    the slot's face transformation fields, then convert it into a      */
d1663 6
a1668 1
  /*    FreeType error code.  0 means success.                             */
d1687 1
a1687 1
  /*    FreeType error code.  0 means success.                             */
d1703 1
a1703 1
  /*    FT_OPEN_MEMORY      :: This is a memory-based stream.              */
d1705 1
a1705 1
  /*    FT_OPEN_STREAM      :: Copy the stream from the `stream' field.    */
d1707 2
a1708 2
  /*    FT_OPEN_PATHNAME    :: Create a new input stream from a C          */
  /*                           path name.                                  */
d1710 1
a1710 1
  /*    FT_OPEN_DRIVER      :: Use the `driver' field.                     */
d1712 1
a1712 1
  /*    FT_OPEN_PARAMS      :: Use the `num_params' and `params' fields.   */
d1714 1
a1714 1
  /*    ft_open_memory      :: Deprecated; use @@FT_OPEN_MEMORY instead.    */
d1716 1
a1716 1
  /*    ft_open_stream      :: Deprecated; use @@FT_OPEN_STREAM instead.    */
d1718 1
a1718 1
  /*    ft_open_pathname    :: Deprecated; use @@FT_OPEN_PATHNAME instead.  */
d1720 1
a1720 1
  /*    ft_open_driver      :: Deprecated; use @@FT_OPEN_DRIVER instead.    */
d1722 1
a1722 1
  /*    ft_open_params      :: Deprecated; use @@FT_OPEN_PARAMS instead.    */
d1747 2
a1748 2
  /*    A simple structure used to pass more or less generic parameters    */
  /*    to @@FT_Open_Face.                                                  */
d1756 2
a1757 1
  /*    The ID and function of parameters are driver-specific.             */
d1791 1
a1791 1
  /*                   the face.  If set to 0, FreeType tries to load the  */
d1822 1
a1822 1
  /*    as `const'; this is missing for API backwards compatibility.  With */
d1854 1
a1854 1
  /*                  face has index 0.                                    */
d1862 1
a1862 1
  /*    FreeType error code.  0 means success.                             */
d1889 1
a1889 1
  /*                  face has index 0.                                    */
d1897 1
a1897 1
  /*    FreeType error code.  0 means success.                             */
d1927 1
a1927 1
  /*                  face has index 0.                                    */
d1935 1
a1935 1
  /*    FreeType error code.  0 means success.                             */
d1944 1
a1944 1
  /*    `face_index' field is negative, the function's return value is 0   */
d1977 1
a1977 1
  /*    FreeType error code.  0 means success.                             */
d1992 1
a1992 1
  /*    attach an AFM file that comes with a Type 1 font to get the        */
d2003 1
a2003 1
  /*    FreeType error code.  0 means success.                             */
d2032 1
a2032 1
  /*    FreeType error code.  0 means success.                             */
d2054 1
a2054 1
  /*    FreeType error code.  0 means success.                             */
d2140 2
a2141 2
  /*    If `width' is zero, then the horizontal scaling value is set      */
  /*    equal to the vertical scaling value, and vice versa.               */
d2180 1
a2180 1
  /*    FreeType error code.  0 means success.                             */
d2215 1
a2215 1
  /*    FreeType error code.  0 means success.                             */
d2227 2
a2228 1

d2255 1
a2255 1
  /*    FreeType error code.  0 means success.                             */
d2288 1
a2288 1
  /*    FreeType error code.  0 means success.                             */
d2329 1
a2329 1
  /*    FreeType error code.  0 means success.                             */
d2351 1
a2351 1
   *     Corresponding to 0, this value is used as the default glyph load
d2441 1
a2441 1
   *     8 pixels packed into each byte of the bitmap data.
d2444 1
a2444 1
   *     should use @@FT_LOAD_TARGET_MONO instead so that the
d2463 3
d2468 1
a2483 1
#define FT_LOAD_SBITS_ONLY                   0x4000   /* temporary hack! */
d2488 4
d2519 1
a2519 1
   *     shape.  A bit like rendering on Mac OS X.
d2555 1
d2557 1
d2559 5
a2563 7
#define FT_LOAD_TARGET_( x )      ( (FT_Int32)( (x) & 15 ) << 16 )

#define FT_LOAD_TARGET_NORMAL     FT_LOAD_TARGET_( FT_RENDER_MODE_NORMAL )
#define FT_LOAD_TARGET_LIGHT      FT_LOAD_TARGET_( FT_RENDER_MODE_LIGHT  )
#define FT_LOAD_TARGET_MONO       FT_LOAD_TARGET_( FT_RENDER_MODE_MONO   )
#define FT_LOAD_TARGET_LCD        FT_LOAD_TARGET_( FT_RENDER_MODE_LCD    )
#define FT_LOAD_TARGET_LCD_V      FT_LOAD_TARGET_( FT_RENDER_MODE_LCD_V  )
a2575 1

d2593 1
a2593 1
  /*    matrix :: A pointer to the transformation's 2x2 matrix.  Use 0 for */
d2595 1
a2595 1
  /*    delta  :: A pointer to the translation vector.  Use 0 for the null */
d2620 1
a2620 1
  /*    FreeType 2.  Each mode corresponds to a specific type of scanline  */
d2623 5
a2627 3
  /*    For bitmap fonts the `bitmap->pixel_mode' field in the             */
  /*    @@FT_GlyphSlotRec structure gives the format of the returned        */
  /*    bitmap.                                                            */
d2632 1
a2632 1
  /*      anti-aliased bitmaps, using 256 levels of opacity.               */
d2641 2
a2642 1
  /*      This mode corresponds to 1-bit bitmaps.                          */
d2646 2
a2647 2
  /*      displays, like LCD-screens.  It produces 8-bit bitmaps that are  */
  /*      3 times the width of the original glyph outline in pixels, and   */
d2653 1
a2653 1
  /*      8-bit bitmaps that are 3 times the height of the original        */
d2657 10
a2666 5
  /*   The LCD-optimized glyph bitmaps produced by FT_Render_Glyph can be  */
  /*   filtered to reduce color-fringes by using @@FT_Library_SetLcdFilter  */
  /*   (not active in the default builds).  It is up to the caller to      */
  /*   either call @@FT_Library_SetLcdFilter (if available) or do the       */
  /*   filtering itself.                                                   */
d2691 2
a2692 2
  /*   ft_render_mode_normal :: see @@FT_RENDER_MODE_NORMAL                 */
  /*   ft_render_mode_mono   :: see @@FT_RENDER_MODE_MONO                   */
d2718 1
a2718 1
  /*    FreeType error code.  0 means success.                             */
d2736 1
a2736 1
  /*                           distances (value is 0).                     */
d2814 1
a2814 1
  /*    FreeType error code.  0 means success.                             */
d2839 1
a2839 1
  /*    face        :: A handle to a source face object.                   */
d2841 1
a2841 1
  /*    point_size  :: The point size in 16.16 fractional points.          */
d2843 1
a2843 1
  /*    degree      :: The degree of tightness.                            */
d2846 1
a2846 1
  /*    akerning    :: The kerning in 16.16 fractional points.             */
d2849 1
a2849 1
  /*    FreeType error code.  0 means success.                             */
d2865 1
a2865 1
  /*    works for those faces where @@FT_HAS_GLYPH_NAMES(face) returns 1.   */
d2880 1
a2880 1
  /*    FreeType error code.  0 means success.                             */
d2885 1
a2885 1
  /*    byte of `buffer' is set to 0 to indicate an empty name.            */
d2907 2
a2908 2
  /*    Retrieve the ASCII Postscript name of a given face, if available.  */
  /*    This only works with Postscript and TrueType fonts.                */
d2914 1
a2914 1
  /*    A pointer to the face's Postscript name.  NULL if unavailable.     */
d2940 1
a2940 1
  /*    FreeType error code.  0 means success.                             */
d2972 1
a2972 1
  /*    FreeType error code.  0 means success.                             */
d2979 1
a2979 1
  /*    It also fails if a type 14 charmap is selected.                    */
d3022 1
a3022 1
  /*    The glyph index.  0 means `undefined character code'.              */
d3028 1
a3028 1
  /*    the file.  This is done to ensure that value 0 always corresponds  */
d3050 1
a3050 1
  /*    agindex :: Glyph index of first character code.  0 if charmap is   */
d3075 3
a3077 3
  /*    Note that `*agindex' is set to 0 if the charmap is empty.  The     */
  /*    result itself can be 0 in two cases: if the charmap is empty or    */
  /*    when the value 0 is the first valid character code.                */
d3099 1
a3099 1
  /*    agindex   :: Glyph index of first character code.  0 if charmap    */
d3110 1
a3110 1
  /*    Note that `*agindex' is set to 0 when there are no more codes in   */
d3134 1
a3134 1
  /*    The glyph index.  0 means `undefined character code'.              */
d3176 2
a3177 2
   *   `glyph->format' is @@FT_GLYPH_FORMAT_COMPOSITE, or an error is
   *   returned.
d3184 2
a3185 1
   *     The index of subglyph.  Must be less than `glyph->num_subglyphs'.
d3204 1
a3204 1
   *   FreeType error code.  0 means success.
d3224 82
d3313 2
a3314 2
  /*    The FreeType 2 interface to Unicode Ideographic Variation          */
  /*    Sequences (IVS), using the SFNT cmap format 14.                    */
d3328 1
a3328 1
  /*    variants is U+908A, having 8 such IVS.                             */
d3331 1
a3331 1
  /*    (format 14).  It is an odd subtable because it is not a mapping of */
d3363 1
a3363 1
  /*    The glyph index.  0 means either `undefined character code', or    */
d3371 1
a3371 1
  /*    the file.  This is done to ensure that value 0 always corresponds  */
d3408 1
a3408 1
  /*    1 if found in the standard (Unicode) cmap, 0 if found in the       */
d3442 1
a3442 1
  /*    The last item in the array is 0; the array is owned by the         */
d3475 1
a3475 1
  /*    The last item in the array is 0; the array is owned by the         */
d3509 1
a3509 1
  /*    The last item in the array is 0; the array is owned by the         */
d3579 6
d3618 11
d3649 2
a3650 2
  /*    The optimization for FT_DivFix() is simple: If (a << 16) fits in   */
  /*    32 bits, then the division is computed directly.  Otherwise, we    */
d3757 16
a3772 2
   *  @@enum:
   *    FREETYPE_XXX
a3773 13
   *  @@description:
   *    These three macros identify the FreeType source code version.
   *    Use @@FT_Library_Version to access them at runtime.
   *
   *  @@values:
   *    FREETYPE_MAJOR :: The major version number.
   *    FREETYPE_MINOR :: The minor version number.
   *    FREETYPE_PATCH :: The patch level.
   *
   *  @@note:
   *    The version number of FreeType if built as a dynamic link library
   *    with the `libtool' package is _not_ controlled by these three
   *    macros.
d3777 1
a3777 1
#define FREETYPE_PATCH  6
d3834 2
a3835 2
  /*    1 if this is a TrueType font that uses one of the patented         */
  /*    opcodes, 0 otherwise.                                              */
d3861 1
a3861 1
  /*    a SFNT font, or if the unpatented hinter is not compiled in this   */
@


1.3
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007 by             */
d802 2
d1024 9
d1045 1
d1202 18
d1231 1
a1231 1
  /*      Indicates that a given face is italicized.                       */
d1236 6
d1253 1
a1253 1
  /*    model private data of a given FT_Size object.                      */
d1384 1
a1384 1
  /*    model private data of a given FT_GlyphSlot object.                 */
d2094 12
a2105 1
  } FT_Size_RequestRec, *FT_Size_Request;
d2236 5
d2422 1
a2422 3

  /* temporary hack! */
#define FT_LOAD_SBITS_ONLY                   0x4000
d2501 2
a2502 1
  /*
d2509 1
a2513 2
  /* */

d2590 5
a2594 3
  /*   The LCD-optimized glyph bitmaps produced by FT_Render_Glyph are     */
  /*   _not_ _filtered_ to reduce color-fringes.  It is up to the caller   */
  /*   to perform this pass.                                               */
d2876 2
a2877 1
  /*    which covers Unicode best.  It is thus preferable to               */
d2907 2
d3152 217
d3604 1
a3604 1
#define FREETYPE_PATCH  5
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006 by                   */
d640 1
a640 1
  /*   dont use it, otherwise subtract 1 from the language ID.  Then       */
d651 2
a652 2
    FT_ENC_TAG( FT_ENCODING_MS_SYMBOL,  's', 'y', 'm', 'b' ),
    FT_ENC_TAG( FT_ENCODING_UNICODE,    'u', 'n', 'i', 'c' ),
d916 3
a918 1
    /*# the following are only relevant to scalable outlines */
d1275 2
d1588 1
a1588 1
  /*    Destroy a given FreeType library object and all of its childs,     */
d1728 4
d1806 3
d2114 3
d2118 1
a2118 1
  /*    to a default value of 72dpi.                                       */
d2120 4
d2325 1
a2325 1
   *     Indicates that the tranform matrix set by @@FT_Set_Transform should
d2741 1
a2741 2
  /*    works for those faces where @@FT_HAS_GLYPH_NAMES(face) returns      */
  /*    TRUE.                                                              */
d2822 5
d3331 2
a3332 2
#define FREETYPE_MINOR  2
#define FREETYPE_PATCH  1
d3371 55
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004 by                               */
a27 4
#ifndef __FREETYPE_H__
#define __FREETYPE_H__


d33 1
d36 2
a37 9
  /*************************************************************************/
  /*                                                                       */
  /* The FREETYPE_MAJOR and FREETYPE_MINOR macros are used to version the  */
  /* new FreeType design, which is able to host several kinds of font      */
  /* drivers.  It starts at 2.0.                                           */
  /*                                                                       */
#define FREETYPE_MAJOR 2
#define FREETYPE_MINOR 1
#define FREETYPE_PATCH 8
d49 22
d115 1
a130 1
  /*    FT_Library_Version                                                 */
d143 4
d185 1
d192 1
d205 2
a206 2
  /*    FT_LOAD_NO_SCALE is used, values are returned in font units        */
  /*    instead.                                                           */
d209 2
a210 1
  /*    width        :: The glyph's width.                                 */
d212 2
a213 1
  /*    height       :: The glyph's height.                                */
d215 2
a216 1
  /*    horiBearingX :: Horizontal left side bearing.                      */
d218 2
a219 1
  /*    horiBearingY :: Horizontal top side bearing.                       */
d221 2
a222 1
  /*    horiAdvance  :: Horizontal advance width.                          */
d224 2
a225 1
  /*    vertBearingX :: Vertical left side bearing.                        */
d227 2
a228 1
  /*    vertBearingY :: Vertical top side bearing.                         */
d230 2
a231 1
  /*    vertAdvance  :: Vertical advance height.                           */
d235 2
a236 2
    FT_Pos  width;         /* glyph width  */
    FT_Pos  height;        /* glyph height */
d238 7
a244 7
    FT_Pos  horiBearingX;  /* left side bearing in horizontal layouts */
    FT_Pos  horiBearingY;  /* top side bearing in horizontal layouts  */
    FT_Pos  horiAdvance;   /* advance width for horizontal layout     */

    FT_Pos  vertBearingX;  /* left side bearing in vertical layouts */
    FT_Pos  vertBearingY;  /* top side bearing in vertical layouts  */
    FT_Pos  vertAdvance;   /* advance height for vertical layout    */
d255 3
a257 4
  /*    This structure models the size of a bitmap strike (i.e., a bitmap  */
  /*    instance of the font for a given resolution) in a fixed-size font  */
  /*    face.  It is used for the `available_sizes' field of the           */
  /*    @@FT_FaceRec structure.                                             */
d260 2
a261 3
  /*    height :: The (vertical) baseline-to-baseline distance in pixels.  */
  /*              It makes most sense to define the height of a bitmap     */
  /*              font in this way.                                        */
d263 2
a264 6
  /*    width  :: The average width of the font (in pixels).  Since the    */
  /*              algorithms to compute this value are different for the   */
  /*              various bitmap formats, it can only give an additional   */
  /*              hint if the `height' value isn't sufficient to select    */
  /*              the proper font.  For monospaced fonts the average width */
  /*              is the same as the maximum width.                        */
d266 2
a267 2
  /*    size   :: The point size in 26.6 fractional format this font shall */
  /*              represent (for a given vertical resolution).             */
d269 2
a270 1
  /*    x_ppem :: The horizontal ppem value (in 26.6 fractional format).   */
d272 2
a273 1
  /*    y_ppem :: The vertical ppem value (in 26.6 fractional format).     */
a275 10
  /*    The values in this structure are taken from the bitmap font.  If   */
  /*    the font doesn't provide a parameter it is set to zero to indicate */
  /*    that the information is not available.                             */
  /*                                                                       */
  /*    The following formula converts from dpi to ppem:                   */
  /*                                                                       */
  /*      ppem = size * dpi / 72                                           */
  /*                                                                       */
  /*    where `size' is in points.                                         */
  /*                                                                       */
d277 4
a280 4
  /*      The `size', `x_ppem', and `y_ppem' parameters are not reliable:  */
  /*      There exist fonts (e.g. app850.fon) which have a wrong size for  */
  /*      some subfonts; since FNT files don't contain ppem but dpi values */
  /*      the computed x_ppem and y_ppem numbers are thus wrong also.      */
d321 3
d401 2
a402 3
  /*    A handle to a given size object.  Such an object models the data   */
  /*    that depends on the current _resolution_ and _character size_ in a */
  /*    given @@FT_Face.                                                    */
d405 12
a416 6
  /*    Each face object owns one or more sizes.  There is however a       */
  /*    single _active_ size for the face at any time that will be used by */
  /*    functions like @@FT_Load_Glyph, @@FT_Get_Kerning, etc.               */
  /*                                                                       */
  /*    You can use the @@FT_Activate_Size API to change the current        */
  /*    active size of any given face.                                     */
d420 1
a420 1
  /*    of a given face object.                                            */
d437 1
a437 1
  /*    i.e. the glyph's metrics, its image (bitmap or outline), and       */
d458 1
a458 1
  /*    can be "active" and used by @@FT_Get_Char_Index or @@FT_Load_Char.   */
d461 1
a461 1
  /*    "face->num_charmaps" and "face->charmaps" fields of @@FT_FaceRec.   */
d463 1
a463 1
  /*    The currently active charmap is available as "face->charmap".      */
d484 2
a485 2
  /*    This macro converts four letter tags into an unsigned long.  It is */
  /*    used to define "encoding" identifiers (see @@FT_Encoding).          */
d492 1
d494 1
d515 2
a516 2
  /*    An enumeration used to specify encodings supported by charmaps.    */
  /*    Used in the @@FT_Select_Charmap API function.                       */
d519 4
a525 4
  /*    The values of this type correspond to specific character           */
  /*    repertories (i.e. charsets), and not to text encoding methods      */
  /*    (like UTF-8, UTF-16, GB2312_EUC, etc.).                            */
  /*                                                                       */
d611 2
a612 2
  /*   However, it will also report the encodings defined explicitly in    */
  /*   the font file, for the cases when they are needed, with the Adobe   */
d617 4
a620 4
  /*   FT_ENCODING_UNICODE).  Use `FT_Get_BDF_Charset_ID' to find out      */
  /*   which encoding is really present.  If, for example, the             */
  /*   `cs_registry' field is `KOI8' and the `cs_encoding' field is `R',   */
  /*   the font is encoded in KOI8-R.                                      */
d623 5
a627 4
  /*   winfonts driver.  Use `FT_Get_WinFNT_Header' and examine the        */
  /*   `charset' field of the `FT_WinFNT_HeaderRec' structure to find out  */
  /*   which encoding is really present.  For example, FT_WinFNT_ID_CP1251 */
  /*   (204) means Windows code page 1251 (for Russian).                   */
d629 2
a630 2
  /*   FT_ENCODING_NONE is set if `platform_id' is `TT_PLATFORM_MACINTOSH' */
  /*   and `encoding_id' is not `TT_MAC_ID_ROMAN' (otherwise it is set to  */
d633 2
a634 2
  /*   If `platform_id' is `TT_PLATFORM_MACINTOSH', use the function       */
  /*   `FT_Get_CMap_Language_ID' to query the Mac language ID which may be */
d642 1
a642 1
  /*   `TT_MAC_ID_ROMAN' and the language ID (minus 1) is                  */
d644 1
a644 1
  /*   `TT_MAC_ID_ARABIC' with `TT_MAC_LANGID_FARSI' means the Farsi       */
a687 18
  /* <Values>                                                              */
  /*   ft_encoding_none    :: see @@FT_ENCODING_NONE                        */
  /*   ft_encoding_unicode :: see @@FT_ENCODING_UNICODE                     */
  /*   ft_encoding_latin_2 :: see @@FT_ENCODING_OLD_LATIN_2                 */
  /*   ft_encoding_symbol  :: see @@FT_ENCODING_MS_SYMBOL                   */
  /*   ft_encoding_sjis    :: see @@FT_ENCODING_SJIS                        */
  /*   ft_encoding_gb2312  :: see @@FT_ENCODING_GB2312                      */
  /*   ft_encoding_big5    :: see @@FT_ENCODING_BIG5                        */
  /*   ft_encoding_wansung :: see @@FT_ENCODING_WANSUNG                     */
  /*   ft_encoding_johab   :: see @@FT_ENCODING_JOHAB                       */
  /*                                                                       */
  /*   ft_encoding_adobe_standard :: see @@FT_ENCODING_ADOBE_STANDARD       */
  /*   ft_encoding_adobe_expert   :: see @@FT_ENCODING_ADOBE_EXPERT         */
  /*   ft_encoding_adobe_custom   :: see @@FT_ENCODING_ADOBE_CUSTOM         */
  /*   ft_encoding_latin_1        :: see @@FT_ENCODING_ADOBE_LATIN_1        */
  /*                                                                       */
  /*   ft_encoding_apple_roman    :: see @@FT_ENCODING_APPLE_ROMAN          */
  /*                                                                       */
d753 1
a753 1
  /*    An opaque handle to an FT_Face_InternalRec structure, used to      */
d768 2
a769 2
  /*    FreeType root face class structure.  A face object models the      */
  /*    resolution and point-size independent data found in a font file.   */
d772 7
a778 12
  /*    num_faces           :: In the case where the face is located in a  */
  /*                           collection (i.e., a file which embeds       */
  /*                           several faces), this is the total number of */
  /*                           faces found in the resource.  1 by default. */
  /*                           Accessing non-existent face indices causes  */
  /*                           an error.                                   */
  /*                                                                       */
  /*    face_index          :: The index of the face in its font file.     */
  /*                           Usually, this is 0 for all normal font      */
  /*                           formats.  It can be > 0 in the case of      */
  /*                           collections (which embed several fonts in a */
  /*                           single resource/file).                      */
d781 2
a782 2
  /*                           information about the face; see the         */
  /*                           @@FT_FACE_FLAG_XXX constants for details.    */
d785 2
a786 3
  /*                           the face (i.e., italic, bold, underline,    */
  /*                           etc).  See the @@FT_STYLE_FLAG_XXX           */
  /*                           constants.                                  */
d788 4
a791 1
  /*    num_glyphs          :: The total number of glyphs in the face.     */
d810 16
a825 24
  /*                           localized/Unicode versions of this string.  */
  /*                           Applications should use the format specific */
  /*                           interface to access them.                   */
  /*                                                                       */
  /*    num_fixed_sizes     :: The number of fixed sizes available in this */
  /*                           face.  This should be set to 0 for scalable */
  /*                           fonts, unless its face includes a set of    */
  /*                           glyphs (called a `strike') for the          */
  /*                           specified sizes.                            */
  /*                                                                       */
  /*    available_sizes     :: An array of sizes specifying the available  */
  /*                           bitmap/graymap sizes that are contained in  */
  /*                           in the font face.  Should be set to NULL if */
  /*                           the field `num_fixed_sizes' is set to 0.    */
  /*                                                                       */
  /*    num_charmaps        :: The total number of character maps in the   */
  /*                           face.                                       */
  /*                                                                       */
  /*    charmaps            :: A table of pointers to the face's charmaps. */
  /*                           Used to scan the list of available charmaps */
  /*                           -- this table might change after a call to  */
  /*                           @@FT_Attach_File or @@FT_Attach_Stream (e.g.  */
  /*                           if used to hook an additional encoding or   */
  /*                           CMap to the face object).                   */
d831 7
a837 9
  /*                           expressed in font units (see units_per_EM). */
  /*                           The box is large enough to contain any      */
  /*                           glyph from the font.  Thus, bbox.yMax can   */
  /*                           be seen as the `maximal ascender',          */
  /*                           bbox.yMin as the `minimal descender', and   */
  /*                           the maximal glyph width is given by         */
  /*                           `bbox.xMax-bbox.xMin' (not to be confused   */
  /*                           with the maximal _advance_width_).  Only    */
  /*                           relevant for scalable formats.              */
d841 14
a854 3
  /*                           TrueType fonts, 1000 for Type1 fonts, and   */
  /*                           should be set to the (unrealistic) value 1  */
  /*                           for fixed-sizes fonts.  Only relevant for   */
d857 5
a861 26
  /*    ascender            :: The face's ascender is the vertical         */
  /*                           distance from the baseline to the topmost   */
  /*                           point of any glyph in the face.  This       */
  /*                           field's value is positive, expressed in     */
  /*                           font units.  Some font designs use a value  */
  /*                           different from `bbox.yMax'.  Only relevant  */
  /*                           for scalable formats.                       */
  /*                                                                       */
  /*    descender           :: The face's descender is the vertical        */
  /*                           distance from the baseline to the           */
  /*                           bottommost point of any glyph in the face.  */
  /*                           This field's value is *negative* for values */
  /*                           below the baseline.  It is expressed in     */
  /*                           font units.  Some font designs use a value  */
  /*                           different from `bbox.yMin'.  Only relevant  */
  /*                           for scalable formats.                       */
  /*                                                                       */
  /*    height              :: The face's height is the vertical distance  */
  /*                           from one baseline to the next when writing  */
  /*                           several lines of text.  Its value is always */
  /*                           positive, expressed in font units.  The     */
  /*                           value can be computed as                    */
  /*                           `ascender+descender+line_gap' where the     */
  /*                           value of `line_gap' is also called          */
  /*                           `external leading'.  Only relevant for      */
  /*                           scalable formats.                           */
d871 4
a874 4
  /*                           relevant for vertical layouts, and should   */
  /*                           be set to the `height' for fonts that do    */
  /*                           not provide vertical metrics.  Only         */
  /*                           relevant for scalable formats.              */
d885 1
a885 6
  /*    glyph               :: The face's associated glyph slot(s).  This  */
  /*                           object is created automatically with a new  */
  /*                           face object.  However, certain kinds of     */
  /*                           applications (mainly tools like converters) */
  /*                           can need more than one slot to ease their   */
  /*                           task.                                       */
d891 4
d964 3
a966 3
  /*      Indicates that the face provides vectorial outlines.  This       */
  /*      doesn't prevent embedded bitmaps, i.e., a face can have both     */
  /*      this bit and @@FT_FACE_FLAG_FIXED_SIZES set.                      */
d969 2
a970 3
  /*      Indicates that the face contains `fixed sizes', i.e., bitmap     */
  /*      strikes for some given pixel sizes.  See the `num_fixed_sizes'   */
  /*      and `available_sizes' fields of @@FT_FaceRec.                     */
d991 3
a993 2
  /*      @@FT_Get_Kerning.  Note that if unset, this function will always  */
  /*      return the vector (0,0).                                         */
d1014 6
d1031 1
d1036 13
a1048 12
  /*************************************************************************/
  /*                                                                       */
  /* @@macro:                                                               */
  /*    FT_HAS_HORIZONTAL( face )                                          */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A macro that returns true whenever a face object contains          */
  /*    horizontal metrics (this is true for all font formats though).     */
  /*                                                                       */
  /* @@also:                                                                */
  /*    @@FT_HAS_VERTICAL can be used to check for vertical metrics.        */
  /*                                                                       */
d1053 10
a1062 9
  /*************************************************************************/
  /*                                                                       */
  /* @@macro:                                                               */
  /*    FT_HAS_VERTICAL( face )                                            */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A macro that returns true whenever a face object contains vertical */
  /*    metrics.                                                           */
  /*                                                                       */
d1067 10
a1076 9
  /*************************************************************************/
  /*                                                                       */
  /* @@macro:                                                               */
  /*    FT_HAS_KERNING( face )                                             */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A macro that returns true whenever a face object contains kerning  */
  /*    data that can be accessed with @@FT_Get_Kerning.                    */
  /*                                                                       */
d1081 11
a1091 10
  /*************************************************************************/
  /*                                                                       */
  /* @@macro:                                                               */
  /*    FT_IS_SCALABLE( face )                                             */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A macro that returns true whenever a face object contains a        */
  /*    scalable font face (true for TrueType, Type 1, CID, and            */
  /*    OpenType/CFF font formats.                                         */
  /*                                                                       */
d1096 15
a1110 14
  /*************************************************************************/
  /*                                                                       */
  /* @@macro:                                                               */
  /*    FT_IS_SFNT( face )                                                 */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A macro that returns true whenever a face object contains a font   */
  /*    whose format is based on the SFNT storage scheme.  This usually    */
  /*    means: TrueType fonts, OpenType fonts, as well as SFNT-based       */
  /*    embedded bitmap fonts.                                             */
  /*                                                                       */
  /*    If this macro is true, all functions defined in @@FT_SFNT_NAMES_H   */
  /*    and @@FT_TRUETYPE_TABLES_H are available.                           */
  /*                                                                       */
d1115 11
a1125 10
  /*************************************************************************/
  /*                                                                       */
  /* @@macro:                                                               */
  /*    FT_IS_FIXED_WIDTH( face )                                          */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A macro that returns true whenever a face object contains a font   */
  /*    face that contains fixed-width (or "monospace", "fixed-pitch",     */
  /*    etc.) glyphs.                                                      */
  /*                                                                       */
d1130 11
a1140 10
  /*************************************************************************/
  /*                                                                       */
  /* @@macro:                                                               */
  /*    FT_HAS_FIXED_SIZES( face )                                         */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A macro that returns true whenever a face object contains some     */
  /*    embedded bitmaps.  See the `available_sizes' field of the          */
  /*    @@FT_FaceRec structure.                                             */
  /*                                                                       */
d1144 1
a1144 2

   /* */
d1147 22
a1168 22
  /*************************************************************************/
  /*                                                                       */
  /* @@macro:                                                               */
  /*    FT_HAS_FAST_GLYPHS( face )                                         */
  /*                                                                       */
  /* @@description:                                                         */
  /*    Deprecated; indicates that the face contains so-called "fast"      */
  /*    glyph bitmaps.                                                     */
  /*                                                                       */
#define FT_HAS_FAST_GLYPHS( face ) \
          ( face->face_flags & FT_FACE_FLAG_FAST_GLYPHS )


  /*************************************************************************/
  /*                                                                       */
  /* @@macro:                                                               */
  /*    FT_HAS_GLYPH_NAMES( face )                                         */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A macro that returns true whenever a face object contains some     */
  /*    glyph names that can be accessed through @@FT_Get_Glyph_Name.       */
  /*                                                                       */
d1173 11
a1183 11
  /*************************************************************************/
  /*                                                                       */
  /* @@macro:                                                               */
  /*    FT_HAS_MULTIPLE_MASTERS( face )                                    */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A macro that returns true whenever a face object contains some     */
  /*    multiple masters.  The functions provided by                       */
  /*    @@FT_MULTIPLE_MASTERS_H are then available to choose the exact      */
  /*    design you want.                                                   */
  /*                                                                       */
d1214 1
a1214 1
  /*    An opaque handle to an FT_Size_InternalRec structure, used to      */
d1226 1
a1226 2
  /*    The size metrics structure returned scaled important distances for */
  /*    a given size object.                                               */
d1229 3
a1231 3
  /*    x_ppem       :: The character width, expressed in integer pixels.  */
  /*                    This is the width of the EM square expressed in    */
  /*                    pixels, hence the term `ppem' (pixels per EM).     */
d1233 3
a1235 3
  /*    y_ppem       :: The character height, expressed in integer pixels. */
  /*                    This is the height of the EM square expressed in   */
  /*                    pixels, hence the term `ppem' (pixels per EM).     */
d1237 4
a1240 3
  /*    x_scale      :: A simple 16.16 fixed point format coefficient used */
  /*                    to scale horizontal distances expressed in font    */
  /*                    units to fractional (26.6) pixel coordinates.      */
d1242 4
a1245 3
  /*    y_scale      :: A simple 16.16 fixed point format coefficient used */
  /*                    to scale vertical distances expressed in font      */
  /*                    units to fractional (26.6) pixel coordinates.      */
d1247 2
a1248 3
  /*    ascender     :: The ascender, expressed in 26.6 fixed point        */
  /*                    pixels.  Positive for ascenders above the          */
  /*                    baseline.                                          */
d1250 2
a1251 3
  /*    descender    :: The descender, expressed in 26.6 fixed point       */
  /*                    pixels.  Negative for descenders below the         */
  /*                    baseline.                                          */
d1253 2
a1254 2
  /*    height       :: The text height, expressed in 26.6 fixed point     */
  /*                    pixels.  Always positive.                          */
d1256 2
a1257 2
  /*    max_advance  :: Maximum horizontal advance, expressed in 26.6      */
  /*                    fixed point pixels.  Always positive.              */
d1260 4
a1263 3
  /*    For scalable fonts, the values of `ascender', `descender', and     */
  /*    `height' are scaled versions of `face->ascender',                  */
  /*    `face->descender', and `face->height', respectively.               */
d1265 2
a1266 2
  /*    Unfortunately, due to glyph hinting, these values might not be     */
  /*    exact for certain fonts.  They thus must be treated as unreliable  */
d1269 3
a1271 4
  /*    Indeed, the only way to get the exact pixel ascender and descender */
  /*    is to render _all_ glyphs.  As this would be a definite            */
  /*    performance hit, it is up to client applications to perform such   */
  /*    computations.                                                      */
d1278 2
a1279 2
    FT_Fixed   x_scale;     /* two scales used to convert font units  */
    FT_Fixed   y_scale;     /* to 26.6 frac. pixel coordinates        */
d1295 2
a1296 2
  /*    FreeType root size class structure.  A size object models the      */
  /*    resolution and pointsize dependent data of a given face.           */
d1331 3
d1343 1
a1343 1
  /*    An opaque handle to an FT_Slot_InternalRec structure, used to      */
d1356 2
a1357 2
  /*    container where individual glyphs can be loaded, be they           */
  /*    vectorial or bitmap/graymaps.                                      */
d1385 4
a1388 4
  /*    linearHoriAdvance :: For scalable formats only, this field holds   */
  /*                         the linearly scaled horizontal advance width  */
  /*                         for the glyph (i.e. the scaled and unhinted   */
  /*                         value of the hori advance).  This can be      */
d1390 1
d1392 6
a1397 10
  /*                         Note that this value is expressed by default  */
  /*                         in 16.16 pixels. However, when the glyph is   */
  /*                         loaded with the FT_LOAD_LINEAR_DESIGN flag,   */
  /*                         this field contains simply the value of the   */
  /*                         advance in original font units.               */
  /*                                                                       */
  /*    linearVertAdvance :: For scalable formats only, this field holds   */
  /*                         the linearly scaled vertical advance height   */
  /*                         for the glyph.  See linearHoriAdvance for     */
  /*                         comments.                                     */
d1404 3
a1406 3
  /*                         FT_GLYPH_FORMAT_BITMAP,                       */
  /*                         FT_GLYPH_FORMAT_OUTLINE, and                  */
  /*                         FT_GLYPH_FORMAT_COMPOSITE, but others are     */
d1411 1
a1411 1
  /*                         FT_GLYPH_FORMAT_BITMAP.  Note that the        */
d1419 1
a1419 1
  /*                         FT_GLYPH_FORMAT_BITMAP.                       */
d1429 4
a1432 1
  /*                         FT_GLYPH_FORMAT_OUTLINE.                      */
d1454 11
a1464 3
  /*                         present their own glyph image to client apps. */
  /*                         Note that the app will need to know about the */
  /*                         image format.                                 */
d1469 2
a1470 2
  /*    its native format (e.g. a vectorial outline for TrueType and       */
  /*    Type 1 formats).                                                   */
d1482 30
a1511 2
  /*    position (e.g. coordinates [0,0] on the baseline).  Of course,     */
  /*    `slot->format' is also changed to `FT_GLYPH_FORMAT_BITMAP' .       */
d1540 3
d1565 1
a1565 1
  /*    Initializes a new FreeType library object.  The set of modules     */
a1580 36
  /*    FT_Library_Version                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the version of the FreeType library being used.  This is    */
  /*    useful when dynamically linking to the library, since one cannot   */
  /*    use the macros FT_FREETYPE_MAJOR, FT_FREETYPE_MINOR, and           */
  /*    FT_FREETYPE_PATCH.                                                 */
  /*                                                                       */
  /* <Input>                                                               */
  /*    library :: A source library handle.                                */
  /*                                                                       */
  /* <Output>                                                              */
  /*    amajor :: The major version number.                                */
  /*                                                                       */
  /*    aminor :: The minor version number.                                */
  /*                                                                       */
  /*    apatch :: The patch version number.                                */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The reason why this function takes a 'library' argument is because */
  /*    certain programs implement library initialization in a custom way  */
  /*    that doesn't use `FT_Init_FreeType'.                               */
  /*                                                                       */
  /*    In such cases, the library version might not be available before   */
  /*    the library object has been created.                               */
  /*                                                                       */
  FT_EXPORT( void )
  FT_Library_Version( FT_Library   library,
                      FT_Int      *amajor,
                      FT_Int      *aminor,
                      FT_Int      *apatch );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
d1584 1
a1584 1
  /*    Destroys a given FreeType library object and all of its childs,    */
d1616 1
a1616 1
  /*    FT_OPEN_PARAMS      :: Use the `num_params' & `params' field.      */
d1655 1
a1655 1
  /*    tag  :: A 4-byte identification tag.                               */
d1660 1
a1660 1
  /*    The id and function of parameters are driver-specific.             */
d1676 3
a1678 3
  /*    A structure used to indicate how to open a new font file/stream.   */
  /*    A pointer to such a structure can be used as a parameter for the   */
  /*    functions @@FT_Open_Face and @@FT_Attach_Stream.                     */
d1694 2
a1695 2
  /*                   the face.  If set to 0, FreeType will try to load   */
  /*                   the face with each one of the drivers in its list.  */
d1707 4
a1710 1
  /*    memory file of `memory_size' bytes,located at `memory_address'.    */
d1718 1
a1718 1
  /*    If the `FT_OPEN_DRIVER' bit is set, @@FT_Open_Face will only try to */
d1722 1
a1722 2
  /*    `num_params' and `params' will be used.  They are ignored          */
  /*    otherwise.                                                         */
d1744 1
a1744 2
  /*    Creates a new face object from a given resource and typeface index */
  /*    using a pathname to the font file.                                 */
d1752 2
a1753 2
  /*    face_index :: The index of the face within the resource.  The      */
  /*                  first face has index 0.                              */
d1756 3
a1758 1
  /*    aface      :: A handle to a new face object.                       */
a1762 14
  /* <Note>                                                                */
  /*    Unlike FreeType 1.x, this function automatically creates a glyph   */
  /*    slot for the face object which can be accessed directly through    */
  /*    `face->glyph'.                                                     */
  /*                                                                       */
  /*    @@FT_New_Face can be used to determine and/or check the font format */
  /*    of a given font resource.  If the `face_index' field is negative,  */
  /*    the function will _not_ return any face handle in `aface';  the    */
  /*    return value is 0 if the font format is recognized, or non-zero    */
  /*    otherwise.                                                         */
  /*                                                                       */
  /*    Each new face object created with this function also owns a        */
  /*    default @@FT_Size object, accessible as `face->size'.               */
  /*                                                                       */
d1776 2
a1777 2
  /*    Creates a new face object from a given resource and typeface index */
  /*    using a font file already loaded into memory.                      */
d1787 2
a1788 2
  /*    face_index :: The index of the face within the resource.  The      */
  /*                  first face has index 0.                              */
d1791 3
a1793 1
  /*    aface      :: A handle to a new face object.                       */
a1797 16
  /* <Note>                                                                */
  /*    The font data bytes are used _directly_ by the @@FT_Face object.    */
  /*    This means that they are not copied, and that the client is        */
  /*    responsible for releasing/destroying them _after_ the              */
  /*    corresponding call to @@FT_Done_Face .                              */
  /*                                                                       */
  /*    Unlike FreeType 1.x, this function automatically creates a glyph   */
  /*    slot for the face object which can be accessed directly through    */
  /*    `face->glyph'.                                                     */
  /*                                                                       */
  /*    @@FT_New_Memory_Face can be used to determine and/or check the font */
  /*    format of a given font resource.  If the `face_index' field is     */
  /*    negative, the function will _not_ return any face handle in        */
  /*    `aface'; the return value is 0 if the font format is recognized,   */
  /*    or non-zero otherwise.                                             */
  /*                                                                       */
d1812 2
a1813 3
  /*    Opens a face object from a given resource and typeface index using */
  /*    an `FT_Open_Args' structure.  If the face object doesn't exist, it */
  /*    will be created.                                                   */
d1822 2
a1823 2
  /*    face_index :: The index of the face within the resource.  The      */
  /*                  first face has index 0.                              */
d1826 3
a1828 1
  /*    aface      :: A handle to a new face object.                       */
d1838 12
a1849 5
  /*    @@FT_Open_Face can be used to determine and/or check the font       */
  /*    format of a given font resource.  If the `face_index' field is     */
  /*    negative, the function will _not_ return any face handle in        */
  /*    `*face'; the return value is 0 if the font format is recognized,   */
  /*    or non-zero otherwise.                                             */
d1864 1
a1864 4
  /*    `Attaches' a given font file to an existing face.  This is usually */
  /*    to read additional information for a single face object.  For      */
  /*    example, it is used to read the AFM files that come with Type 1    */
  /*    fonts in order to add kerning data and other metrics.              */
d1870 1
a1870 1
  /*    filepathname :: An 8-bit pathname naming the `metrics' file.       */
a1874 12
  /* <Note>                                                                */
  /*    If your font file is in memory, or if you want to provide your     */
  /*    own input stream object, use @@FT_Attach_Stream.                    */
  /*                                                                       */
  /*    The meaning of the `attach' action (i.e., what really happens when */
  /*    the new file is read) is not fixed by FreeType itself.  It really  */
  /*    depends on the font format (and thus the font driver).             */
  /*                                                                       */
  /*    Client applications are expected to know what they are doing       */
  /*    when invoking this function.  Most drivers simply do not implement */
  /*    file attachments.                                                  */
  /*                                                                       */
d1886 4
a1889 2
  /*    This function is similar to @@FT_Attach_File with the exception     */
  /*    that it reads the attachment from an arbitrary stream.             */
d1895 3
a1897 2
  /*    parameters :: A pointer to an FT_Open_Args structure used to       */
  /*                  describe the input stream to FreeType.               */
d1902 1
a1902 1
  /*    The meaning of the `attach' (i.e. what really happens when the     */
d1921 2
a1922 2
  /*    Discards a given face object, as well as all of its child slots    */
  /*    and sizes.                                                         */
d1937 144
d2084 2
a2085 7
  /*    Sets the character dimensions of a given face object.  The         */
  /*    `char_width' and `char_height' values are used for the width and   */
  /*    height, respectively, expressed in 26.6 fractional points.         */
  /*                                                                       */
  /*    If the horizontal or vertical resolution values are zero, a        */
  /*    default value of 72dpi is used.  Similarly, if one of the          */
  /*    character dimensions is zero, its value is set equal to the other. */
d2091 1
a2091 1
  /*    char_width      :: The character width, in 26.6 fractional points. */
d2093 1
a2093 2
  /*    char_height     :: The character height, in 26.6 fractional        */
  /*                       points.                                         */
d2095 1
a2095 1
  /*    horz_resolution :: The horizontal resolution.                      */
d2097 1
a2097 1
  /*    vert_resolution :: The vertical resolution.                        */
d2103 2
a2104 2
  /*    When dealing with fixed-size faces (i.e., non-scalable formats),   */
  /*    @@FT_Set_Pixel_Sizes provides a more convenient interface.          */
d2120 2
a2121 5
  /*    Sets the character dimensions of a given face object.  The width   */
  /*    and height are expressed in integer pixels.                        */
  /*                                                                       */
  /*    If one of the character dimensions is zero, its value is set equal */
  /*    to the other.                                                      */
d2127 1
a2127 1
  /*    pixel_width  :: The character width, in integer pixels.            */
d2129 1
a2129 1
  /*    pixel_height :: The character height, in integer pixels.           */
a2133 20
  /* <Note>                                                                */
  /*    The values of `pixel_width' and `pixel_height' correspond to the   */
  /*    pixel values of the _typographic_ character size, which are NOT    */
  /*    necessarily the same as the dimensions of the glyph `bitmap        */
  /*    cells'.                                                            */
  /*                                                                       */
  /*    The `character size' is really the size of an abstract square      */
  /*    called the `EM', used to design the font.  However, depending      */
  /*    on the font design, glyphs will be smaller or greater than the     */
  /*    EM.                                                                */
  /*                                                                       */
  /*    This means that setting the pixel size to, say, 8x8 doesn't        */
  /*    guarantee in any way that you will get glyph bitmaps that all fit  */
  /*    within an 8x8 cell (sometimes even far from it).                   */
  /*                                                                       */
  /*    For bitmap fonts, `pixel_height' usually is a reliable value for   */
  /*    the height of the bitmap cell.  Drivers for bitmap font formats    */
  /*    which contain a single bitmap strike only (BDF, PCF, FNT) ignore   */
  /*    `pixel_width'.                                                     */
  /*                                                                       */
d2146 2
a2147 2
  /*    A function used to load a single glyph within a given glyph slot,  */
  /*    for a given size.                                                  */
d2151 1
a2151 1
  /*                   will be loaded.                                     */
d2168 2
a2169 7
  /*    If the glyph image is not a bitmap, and if the bit flag            */
  /*    FT_LOAD_IGNORE_TRANSFORM is unset, the glyph image will be         */
  /*    transformed with the information passed to a previous call to      */
  /*    @@FT_Set_Transform.                                                 */
  /*                                                                       */
  /*    Note that this also transforms the `face.glyph.advance' field, but */
  /*    *not* the values in `face.glyph.metrics'.                          */
d2183 2
a2184 2
  /*    A function used to load a single glyph within a given glyph slot,  */
  /*    for a given size, according to its character code.                 */
d2188 1
a2188 1
  /*                   will be loaded.                                     */
d2204 1
a2204 11
  /*    If the face has no current charmap, or if the character code       */
  /*    is not defined in the charmap, this function will return an        */
  /*    error.                                                             */
  /*                                                                       */
  /*    If the glyph image is not a bitmap, and if the bit flag            */
  /*    FT_LOAD_IGNORE_TRANSFORM is unset, the glyph image will be         */
  /*    transformed with the information passed to a previous call to      */
  /*    @@FT_Set_Transform.                                                 */
  /*                                                                       */
  /*    Note that this also transforms the `face.glyph.advance' field, but */
  /*    *not* the values in `face.glyph.metrics'.                          */
d2212 126
a2337 136
 /***************************************************************************
  *
  * @@enum:
  *   FT_LOAD_XXX
  *
  * @@description:
  *   A list of bit-field constants, used with @@FT_Load_Glyph to indicate
  *   what kind of operations to perform during glyph loading.
  *
  * @@values:
  *   FT_LOAD_DEFAULT ::
  *     Corresponding to 0, this value is used a default glyph load.  In this
  *     case, the following will happen:
  *
  *     1. FreeType looks for a bitmap for the glyph corresponding to the
  *        face's current size.  If one is found, the function returns.  The
  *        bitmap data can be accessed from the glyph slot (see note below).
  *
  *     2. If no embedded bitmap is searched or found, FreeType looks for a
  *        scalable outline.  If one is found, it is loaded from the font
  *        file, scaled to device pixels, then "hinted" to the pixel grid in
  *        order to optimize it.  The outline data can be accessed from the
  *        glyph slot (see note below).
  *
  *     Note that by default, the glyph loader doesn't render outlines into
  *     bitmaps.  The following flags are used to modify this default
  *     behaviour to more specific and useful cases.
  *
  *   FT_LOAD_NO_SCALE ::
  *     Don't scale the vector outline being loaded to 26.6 fractional
  *     pixels, but kept in font units.  Note that this also disables
  *     hinting and the loading of embedded bitmaps.  You should only use it
  *     when you want to retrieve the original glyph outlines in font units.
  *
  *   FT_LOAD_NO_HINTING ::
  *     Don't hint glyph outlines after their scaling to device pixels.
  *     This generally generates "blurrier" glyphs in anti-aliased modes.
  *
  *     This flag is ignored if @@FT_LOAD_NO_SCALE is set.
  *
  *   FT_LOAD_RENDER ::
  *     Render the glyph outline immediately into a bitmap before the glyph
  *     loader returns.  By default, the glyph is rendered for the
  *     @@FT_RENDER_MODE_NORMAL mode, which corresponds to 8-bit anti-aliased
  *     bitmaps using 256 opacity levels.  You can use either
  *     @@FT_LOAD_TARGET_MONO or @@FT_LOAD_MONOCHROME to render 1-bit
  *     monochrome bitmaps.
  *
  *     This flag is ignored if @@FT_LOAD_NO_SCALE is set.
  *
  *   FT_LOAD_NO_BITMAP ::
  *     Don't look for bitmaps when loading the glyph.  Only scalable
  *     outlines will be loaded when available, and scaled, hinted, or
  *     rendered depending on other bit flags.
  *
  *     This does not prevent you from rendering outlines to bitmaps
  *     with @@FT_LOAD_RENDER, however.
  *
  *   FT_LOAD_VERTICAL_LAYOUT ::
  *     Prepare the glyph image for vertical text layout.  This basically
  *     means that `face.glyph.advance' will correspond to the vertical
  *     advance height (instead of the default horizontal advance width),
  *     and that the glyph image will be translated to match the vertical
  *     bearings positions.
  *
  *   FT_LOAD_FORCE_AUTOHINT ::
  *     Force the use of the FreeType auto-hinter when a glyph outline is
  *     loaded.  You shouldn't need this in a typical application, since it
  *     is mostly used to experiment with its algorithm.
  *
  *   FT_LOAD_CROP_BITMAP ::
  *     Indicates that the glyph loader should try to crop the bitmap (i.e.,
  *     remove all space around its black bits) when loading it.  This is
  *     only useful when loading embedded bitmaps in certain fonts, since
  *     bitmaps rendered with @@FT_LOAD_RENDER are always cropped by default.
  *
  *   FT_LOAD_PEDANTIC ::
  *     Indicates that the glyph loader should perform pedantic
  *     verifications during glyph loading, rejecting invalid fonts.  This
  *     is mostly used to detect broken glyphs in fonts.  By default,
  *     FreeType tries to handle broken fonts also.
  *
  *   FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH ::
  *     Indicates that the glyph loader should ignore the global advance
  *     width defined in the font.  As far as we know, this is only used by
  *     the X-TrueType font server, in order to deal correctly with the
  *     incorrect metrics contained in DynaLab's TrueType CJK fonts.
  *
  *   FT_LOAD_NO_RECURSE ::
  *     This flag is only used internally.  It merely indicates that the
  *     glyph loader should not load composite glyphs recursively.  Instead,
  *     it should set the `num_subglyph' and `subglyphs' values of the glyph
  *     slot accordingly, and set "glyph->format" to
  *     @@FT_GLYPH_FORMAT_COMPOSITE.
  *
  *     The description of sub-glyphs is not available to client
  *     applications for now.
  *
  *   FT_LOAD_IGNORE_TRANSFORM ::
  *     Indicates that the glyph loader should not try to transform the
  *     loaded glyph image.  This doesn't prevent scaling, hinting, or
  *     rendering.
  *
  *   FT_LOAD_MONOCHROME ::
  *     This flag is used with @@FT_LOAD_RENDER to indicate that you want
  *     to render a 1-bit monochrome glyph bitmap from a vectorial outline.
  *
  *     Note that this has no effect on the hinting algorithm used by the
  *     glyph loader.  You should better use @@FT_LOAD_TARGET_MONO if you
  *     want to render monochrome-optimized glyph images instead.
  *
  *   FT_LOAD_LINEAR_DESIGN ::
  *     Return the linearly scaled metrics expressed in original font units
  *     instead of the default 16.16 pixel values.
  *
  *   FT_LOAD_NO_AUTOHINT ::
  *     Indicates that the auto-hinter should never be used to hint glyph
  *     outlines.  This doesn't prevent native format-specific hinters from
  *     being used.  This can be important for certain fonts where unhinted
  *     output is better than auto-hinted one.
  *
  *   FT_LOAD_TARGET_NORMAL ::
  *     Use hinting for @@FT_RENDER_MODE_NORMAL.
  *
  *   FT_LOAD_TARGET_LIGHT ::
  *     Use hinting for @@FT_RENDER_MODE_LIGHT.
  *
  *   FT_LOAD_TARGET_MONO ::
  *     Use hinting for @@FT_RENDER_MODE_MONO.
  *
  *   FT_LOAD_TARGET_LCD ::
  *     Use hinting for @@FT_RENDER_MODE_LCD.
  *
  *   FT_LOAD_TARGET_LCD_V ::
  *     Use hinting for @@FT_RENDER_MODE_LCD_V.
  */
d2359 65
a2424 1
#define FT_LOAD_TARGET_MODE( x )  ( (FT_Render_Mode)( ( (x) >> 16 ) & 15 ) )
d2432 12
d2454 2
a2455 2
  /*    images just before they are converted to bitmaps in a glyph slot   */
  /*    when @@FT_Render_Glyph is called.                                   */
d2472 3
d2489 1
a2489 2
  /*    conversion performed on the outline, as well as specific           */
  /*    hinting optimizations.                                             */
d2501 4
a2504 8
  /*      This is similar to @@FT_RENDER_MODE_NORMAL -- you have to use     */
  /*      @@FT_LOAD_TARGET_LIGHT in calls to @@FT_Load_Glyph to get any      */
  /*      effect since the rendering process no longer influences the      */
  /*      positioning of glyph outlines.                                   */
  /*                                                                       */
  /*      The resulting glyph shapes are more similar to the original,     */
  /*      while being a bit more fuzzy (`better shapes' instead of `better */
  /*      contrast', so to say.                                            */
d2510 4
a2513 4
  /*      This mode corresponds to horizontal RGB/BGR sub-pixel displays,  */
  /*      like LCD-screens.  It produces 8-bit bitmaps that are 3 times    */
  /*      the width of the original glyph outline in pixels, and which use */
  /*      the @@FT_PIXEL_MODE_LCD mode.                                     */
d2516 1
a2516 1
  /*      This mode corresponds to vertical RGB/BGR sub-pixel displays     */
d2523 2
a2524 2
  /*   _not filtered_ to reduce color-fringes.  It is up to the caller to  */
  /*   perform this pass.                                                  */
d2545 1
a2545 1
  /*    These constats are deprecated.  Use the corresponding              */
d2562 3
a2564 3
  /*    Converts a given glyph image to a bitmap.  It does so by           */
  /*    inspecting the glyph image format, find the relevant renderer, and */
  /*    invoke it.                                                         */
d2572 2
a2573 2
  /*                   image into a bitmap.  See FT_Render_Mode for a list */
  /*                   of possible values.                                 */
d2653 1
a2653 1
  /*    Returns the kerning vector between two glyphs of a same face.      */
d2663 1
a2663 1
  /*                   Determines the scale/dimension of the returned      */
d2667 3
a2669 3
  /*    akerning    :: The kerning vector.  This is in font units for      */
  /*                   scalable formats, and in pixels for fixed-sizes     */
  /*                   formats.                                            */
d2691 28
d2722 3
a2724 2
  /*    Retrieves the ASCII name of a given glyph in a face.  This only    */
  /*    works for those faces where FT_HAS_GLYPH_NAME(face) returns true.  */
d2735 1
a2735 1
  /*    buffer      :: A pointer to a target buffer where the name will be */
d2744 1
a2744 1
  /*    byte of `buffer' will be set to 0 to indicate an empty name.       */
d2750 2
a2751 2
  /*    macro FT_CONFIG_OPTION_NO_GLYPH_NAMES is defined in                */
  /*    `include/freetype/config/ftoptions.h'                              */
d2766 2
a2767 2
  /*    Retrieves the ASCII Postscript name of a given face, if available. */
  /*    This should only work with Postscript and TrueType fonts.          */
d2773 1
a2773 1
  /*    A pointer to the face's Postscript name.  NULL if un-available.    */
d2776 2
a2777 2
  /*    The returned pointer is owned by the face and will be destroyed    */
  /*    with it.                                                           */
d2789 1
a2789 1
  /*    Selects a given charmap by its encoding tag (as listed in          */
d2796 1
a2796 1
  /*    encoding :: A handle to the selected charmap.                      */
d2802 1
a2802 1
  /*    This function will return an error if no charmap in the face       */
d2816 1
a2816 2
  /*    Selects a given charmap for character code to glyph index          */
  /*    decoding.                                                          */
d2828 2
a2829 2
  /*    This function will return an error if the charmap is not part of   */
  /*    the face (i.e., if it is not listed in the face->charmaps[]        */
d2837 21
d2864 2
a2865 2
  /*    Returns the glyph index of a given character code.  This function  */
  /*    uses a charmap object to do the translation.                       */
d2876 5
a2880 4
  /*    FreeType computes its own glyph indices which are not necessarily  */
  /*    the same as used in the font in case the font is based on glyph    */
  /*    indices.  Reason for this behaviour is to assure that index 0 is   */
  /*    never used, representing the missing glyph.                        */
d2894 1
a2894 1
  /*    current charmap of a given face.  It will also return the          */
d2926 3
a2928 3
  /*    Note that `*agindex' will be set to 0 if the charmap is empty.     */
  /*    The result itself can be 0 in two cases: if the charmap is empty   */
  /*    or when the value 0 is the first valid character code.             */
d2942 1
a2942 1
  /*    current charmap of a given face following the value 'char_code',   */
d2958 2
a2959 2
  /*    through all character codes available in a given charmap.  See     */
  /*    the note for this function for a simple code example.              */
d2961 2
a2962 2
  /*    Note that `*agindex' will be set to 0 when there are no more codes */
  /*    in the charmap.                                                    */
d2976 1
a2976 1
  /*    Returns the glyph index of a given glyph name.  This function uses */
d2992 79
d3081 1
a3081 1
  /*    Crunching fixed numbers and vectors                                */
d3254 1
a3254 1
  /*    Transforms a single vector through a 2x2 matrix.                   */
d3266 81
a3346 2
  FT_Vector_Transform( FT_Vector*  vec,
                       FT_Matrix*  matrix );
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007 by             */
d28 4
a36 1
  /*************************************************************************/
d39 9
a47 2
#ifndef __FREETYPE_H__
#define __FREETYPE_H__
a58 22

  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    user_allocation                                                    */
  /*                                                                       */
  /* <Title>                                                               */
  /*    User allocation                                                    */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    How client applications should allocate FreeType data structures.  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    FreeType assumes that structures allocated by the user and passed  */
  /*    as arguments are zeroed out except for the actual data.  With      */
  /*    other words, it is recommended to use `calloc' (or variants of it) */
  /*    instead of `malloc' for allocation.                                */
  /*                                                                       */
  /*************************************************************************/



a102 1
  /*    FT_FACE_FLAG_HINTER                                                */
d118 1
a130 4
  /*    FT_Request_Size                                                    */
  /*    FT_Select_Size                                                     */
  /*    FT_Size_Request_Type                                               */
  /*    FT_Size_Request                                                    */
a168 1
  /*    FT_Get_Track_Kerning                                               */
a174 1
  /*    FT_Get_Charmap_Index                                               */
d187 2
a188 2
  /*    @@FT_LOAD_NO_SCALE has been used while loading the glyph, values    */
  /*    are expressed in font units instead.                               */
d191 1
a191 2
  /*    width ::                                                           */
  /*      The glyph's width.                                               */
d193 1
a193 2
  /*    height ::                                                          */
  /*      The glyph's height.                                              */
d195 1
a195 2
  /*    horiBearingX ::                                                    */
  /*      Left side bearing for horizontal layout.                         */
d197 1
a197 2
  /*    horiBearingY ::                                                    */
  /*      Top side bearing for horizontal layout.                          */
d199 1
a199 2
  /*    horiAdvance ::                                                     */
  /*      Advance width for horizontal layout.                             */
d201 1
a201 2
  /*    vertBearingX ::                                                    */
  /*      Left side bearing for vertical layout.                           */
d203 1
a203 2
  /*    vertBearingY ::                                                    */
  /*      Top side bearing for vertical layout.                            */
d205 1
a205 2
  /*    vertAdvance ::                                                     */
  /*      Advance height for vertical layout.                              */
d209 2
a210 2
    FT_Pos  width;
    FT_Pos  height;
d212 7
a218 7
    FT_Pos  horiBearingX;
    FT_Pos  horiBearingY;
    FT_Pos  horiAdvance;

    FT_Pos  vertBearingX;
    FT_Pos  vertBearingY;
    FT_Pos  vertAdvance;
d229 4
a232 3
  /*    This structure models the metrics of a bitmap strike (i.e., a set  */
  /*    of glyphs for a given point size and resolution) in a bitmap font. */
  /*    It is used for the `available_sizes' field of @@FT_Face.            */
d235 3
a237 2
  /*    height :: The vertical distance, in pixels, between two            */
  /*              consecutive baselines.  It is always positive.           */
d239 6
a244 2
  /*    width  :: The average width, in pixels, of all glyphs in the       */
  /*              strike.                                                  */
d246 2
a247 2
  /*    size   :: The nominal size of the strike in 26.6 fractional        */
  /*              points.  This field is not very useful.                  */
d249 1
a249 2
  /*    x_ppem :: The horizontal ppem (nominal width) in 26.6 fractional   */
  /*              pixels.                                                  */
d251 1
a251 2
  /*    y_ppem :: The vertical ppem (nominal height) in 26.6 fractional    */
  /*              pixels.                                                  */
d254 10
d265 4
a268 4
  /*      The nominal size given in a FNT font is not reliable.  Thus when */
  /*      the driver finds it incorrect, it sets `size' to some calculated */
  /*      values and sets `x_ppem' and `y_ppem' to the pixel width and     */
  /*      height given in the font, respectively.                          */
a308 3
  /*    For multi-threading applications each thread should have its own   */
  /*    FT_Library object.                                                 */
  /*                                                                       */
d386 3
a388 2
  /*    A handle to an object used to model a face scaled to a given       */
  /*    character size.                                                    */
d391 6
a396 12
  /*    Each @@FT_Face has an _active_ @@FT_Size object that is used by      */
  /*    functions like @@FT_Load_Glyph to determine the scaling             */
  /*    transformation which is used to load and hint glyphs and metrics.  */
  /*                                                                       */
  /*    You can use @@FT_Set_Char_Size, @@FT_Set_Pixel_Sizes,                */
  /*    @@FT_Request_Size or even @@FT_Select_Size to change the content     */
  /*    (i.e., the scaling values) of the active @@FT_Size.                 */
  /*                                                                       */
  /*    You can use @@FT_New_Size to create additional size objects for a   */
  /*    given @@FT_Face, but they won't be used by other functions until    */
  /*    you activate it through @@FT_Activate_Size.  Only one size can be   */
  /*    activated at any given time per face.                              */
d400 1
a400 1
  /*    of a given size object.                                            */
d417 1
a417 1
  /*    i.e., the glyph's metrics, its image (bitmap or outline), and      */
d438 1
a438 1
  /*    can be `active' and used by @@FT_Get_Char_Index or @@FT_Load_Char.   */
d441 1
a441 1
  /*    `face->num_charmaps' and `face->charmaps' fields of @@FT_FaceRec.   */
d443 1
a443 1
  /*    The currently active charmap is available as `face->charmap'.      */
d464 2
a465 2
  /*    This macro converts four-letter tags into an unsigned long.  It is */
  /*    used to define `encoding' identifiers (see @@FT_Encoding).          */
a471 1
  /*    {                                                                  */
a472 1
  /*    }                                                                  */
d493 2
a494 2
  /*    An enumeration used to specify character sets supported by         */
  /*    charmaps.  Used in the @@FT_Select_Charmap API function.            */
a496 4
  /*    Despite the name, this enumeration lists specific character        */
  /*    repertories (i.e., charsets), and not text encoding methods (e.g., */
  /*    UTF-8, UTF-16, GB2312_EUC, etc.).                                  */
  /*                                                                       */
d500 4
d589 2
a590 2
  /*   However, it also reports the encodings defined explicitly in the    */
  /*   font file, for the cases when they are needed, with the Adobe       */
d595 4
a598 4
  /*   FT_ENCODING_UNICODE).  Use @@FT_Get_BDF_Charset_ID to find out which */
  /*   encoding is really present.  If, for example, the `cs_registry'     */
  /*   field is `KOI8' and the `cs_encoding' field is `R', the font is     */
  /*   encoded in KOI8-R.                                                  */
d601 4
a604 5
  /*   winfonts driver.  Use @@FT_Get_WinFNT_Header and examine the         */
  /*   `charset' field of the @@FT_WinFNT_HeaderRec structure to find out   */
  /*   which encoding is really present.  For example,                     */
  /*   @@FT_WinFNT_ID_CP1251 (204) means Windows code page 1251 (for        */
  /*   Russian).                                                           */
d606 2
a607 2
  /*   FT_ENCODING_NONE is set if `platform_id' is @@TT_PLATFORM_MACINTOSH  */
  /*   and `encoding_id' is not @@TT_MAC_ID_ROMAN (otherwise it is set to   */
d610 2
a611 2
  /*   If `platform_id' is @@TT_PLATFORM_MACINTOSH, use the function  c     */
  /*   @@FT_Get_CMap_Language_ID  to query the Mac language ID which may be */
d617 1
a617 1
  /*   don't use it, otherwise subtract 1 from the language ID.  Then      */
d619 1
a619 1
  /*   @@TT_MAC_ID_ROMAN and the language ID (minus 1) is                   */
d621 1
a621 1
  /*   @@TT_MAC_ID_ARABIC with `TT_MAC_LANGID_FARSI' means the Farsi        */
d628 2
a629 2
    FT_ENC_TAG( FT_ENCODING_MS_SYMBOL, 's', 'y', 'm', 'b' ),
    FT_ENC_TAG( FT_ENCODING_UNICODE,   'u', 'n', 'i', 'c' ),
d665 18
d748 1
a748 1
  /*    An opaque handle to an `FT_Face_InternalRec' structure, used to    */
d763 2
a764 2
  /*    FreeType root face class structure.  A face object models a        */
  /*    typeface in a font file.                                           */
d767 12
a778 7
  /*    num_faces           :: The number of faces in the font file.  Some */
  /*                           font formats can have multiple faces in     */
  /*                           a font file.                                */
  /*                                                                       */
  /*    face_index          :: The index of the face in the font file.  It */
  /*                           is set to 0 if there is only one face in    */
  /*                           the font file.                              */
d781 2
a782 2
  /*                           information about the face; see             */
  /*                           @@FT_FACE_FLAG_XXX for the details.          */
d785 3
a787 2
  /*                           the face; see @@FT_STYLE_FLAG_XXX for the    */
  /*                           details.                                    */
d789 1
a789 4
  /*    num_glyphs          :: The number of glyphs in the face.  If the   */
  /*                           face is scalable and has sbits (see         */
  /*                           `num_fixed_sizes'), it is set to the number */
  /*                           of outline glyphs.                          */
d808 24
a831 16
  /*                           localized and Unicode versions of this      */
  /*                           string.  Applications should use the format */
  /*                           specific interface to access them.          */
  /*                                                                       */
  /*    num_fixed_sizes     :: The number of bitmap strikes in the face.   */
  /*                           Even if the face is scalable, there might   */
  /*                           still be bitmap strikes, which are called   */
  /*                           `sbits' in that case.                       */
  /*                                                                       */
  /*    available_sizes     :: An array of @@FT_Bitmap_Size for all bitmap  */
  /*                           strikes in the face.  It is set to NULL if  */
  /*                           there is no bitmap strike.                  */
  /*                                                                       */
  /*    num_charmaps        :: The number of charmaps in the face.         */
  /*                                                                       */
  /*    charmaps            :: An array of the charmaps of the face.       */
d837 9
a845 7
  /*                           expressed in font units (see                */
  /*                           `units_per_EM').  The box is large enough   */
  /*                           to contain any glyph from the font.  Thus,  */
  /*                           `bbox.yMax' can be seen as the `maximal     */
  /*                           ascender', and `bbox.yMin' as the `minimal  */
  /*                           descender'.  Only relevant for scalable     */
  /*                           formats.                                    */
d849 4
a852 8
  /*                           TrueType fonts, and 1000 for Type 1 fonts.  */
  /*                           Only relevant for scalable formats.         */
  /*                                                                       */
  /*    ascender            :: The typographic ascender of the face,       */
  /*                           expressed in font units.  For font formats  */
  /*                           not having this information, it is set to   */
  /*                           `bbox.yMax'.  Only relevant for scalable    */
  /*                           formats.                                    */
d854 25
a878 5
  /*    descender           :: The typographic descender of the face,      */
  /*                           expressed in font units.  For font formats  */
  /*                           not having this information, it is set to   */
  /*                           `bbox.yMin'.  Note that this field is       */
  /*                           usually negative.  Only relevant for        */
a880 6
  /*    height              :: The height is the vertical distance         */
  /*                           between two consecutive baselines,          */
  /*                           expressed in font units.  It is always      */
  /*                           positive.  Only relevant for scalable       */
  /*                           formats.                                    */
  /*                                                                       */
d889 4
a892 4
  /*                           relevant for vertical layouts, and is set   */
  /*                           to `height' for fonts that do not provide   */
  /*                           vertical metrics.  Only relevant for        */
  /*                           scalable formats.                           */
d903 6
a908 1
  /*    glyph               :: The face's associated glyph slot(s).        */
a913 4
  /* <Note>                                                                */
  /*   Fields may be changed after a call to @@FT_Attach_File or            */
  /*   @@FT_Attach_Stream.                                                  */
  /*                                                                       */
d935 1
a935 3
    /*# The following member variables (down to `underline_thickness') */
    /*# are only relevant to scalable outlines; cf. @@FT_Bitmap_Size    */
    /*# for bitmap fonts.                                              */
d983 3
a985 3
  /*      Indicates that the face contains outline glyphs.  This doesn't   */
  /*      prevent bitmap strikes, i.e., a face can have both this and      */
  /*      and @@FT_FACE_FLAG_FIXED_SIZES set.                               */
d988 3
a990 2
  /*      Indicates that the face contains bitmap strikes.  See also the   */
  /*      `num_fixed_sizes' and `available_sizes' fields of @@FT_FaceRec.   */
d1011 2
a1012 3
  /*      @@FT_Get_Kerning.  Otherwise the function always return the       */
  /*      vector (0,0).  Note that FreeType doesn't handle kerning data    */
  /*      from the `GPOS' table (as present in some OpenType fonts).       */
a1032 6
  /*    FT_FACE_FLAG_HINTER ::                                             */
  /*      Set if the font driver has a hinting machine of its own.  For    */
  /*      example, with TrueType fonts, it makes sense to use data from    */
  /*      the SFNT `gasp' table only if the native TrueType hinting engine */
  /*      (with the bytecode interpreter) is available and active.         */
  /*                                                                       */
a1043 1
#define FT_FACE_FLAG_HINTER            ( 1L << 11 )
d1048 12
a1059 13
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_HORIZONTAL( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains
   *   horizontal metrics (this is true for all font formats though).
   *
   * @@also:
   *   @@FT_HAS_VERTICAL can be used to check for vertical metrics.
   *
   */
d1064 9
a1072 10
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_VERTICAL( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains vertical
   *   metrics.
   *
   */
d1077 9
a1085 10
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_KERNING( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains kerning
   *   data that can be accessed with @@FT_Get_Kerning.
   *
   */
d1090 10
a1099 11
  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_SCALABLE( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a scalable
   *   font face (true for TrueType, Type 1, Type 42, CID, OpenType/CFF,
   *   and PFR font formats.
   *
   */
d1104 14
a1117 15
  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_SFNT( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a font
   *   whose format is based on the SFNT storage scheme.  This usually
   *   means: TrueType fonts, OpenType fonts, as well as SFNT-based embedded
   *   bitmap fonts.
   *
   *   If this macro is true, all functions defined in @@FT_SFNT_NAMES_H and
   *   @@FT_TRUETYPE_TABLES_H are available.
   *
   */
d1122 10
a1131 11
  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_FIXED_WIDTH( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a font face
   *   that contains fixed-width (or `monospace', `fixed-pitch', etc.)
   *   glyphs.
   *
   */
d1136 10
a1145 11
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_FIXED_SIZES( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains some
   *   embedded bitmaps.  See the `available_sizes' field of the
   *   @@FT_FaceRec structure.
   *
   */
d1149 15
a1163 1
  /* */
d1166 9
a1174 22
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_FAST_GLYPHS( face )
   *
   * @@description:
   *   Deprecated.
   *
   */
#define FT_HAS_FAST_GLYPHS( face )  0


  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_GLYPH_NAMES( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains some glyph
   *   names that can be accessed through @@FT_Get_Glyph_Name.
   *
   */
d1179 11
a1189 11
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_MULTIPLE_MASTERS( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains some
   *   multiple masters.  The functions provided by @@FT_MULTIPLE_MASTERS_H
   *   are then available to choose the exact design you want.
   *
   */
d1220 1
a1220 1
  /*    An opaque handle to an `FT_Size_InternalRec' structure, used to    */
d1232 2
a1233 1
  /*    The size metrics structure gives the metrics of a size object.     */
d1236 3
a1238 3
  /*    x_ppem       :: The width of the scaled EM square in pixels, hence */
  /*                    the term `ppem' (pixels per EM).  It is also       */
  /*                    referred to as `nominal width'.                    */
d1240 3
a1242 3
  /*    y_ppem       :: The height of the scaled EM square in pixels,      */
  /*                    hence the term `ppem' (pixels per EM).  It is also */
  /*                    referred to as `nominal height'.                   */
d1244 3
a1246 4
  /*    x_scale      :: A 16.16 fractional scaling value used to convert   */
  /*                    horizontal metrics from font units to 26.6         */
  /*                    fractional pixels.  Only relevant for scalable     */
  /*                    font formats.                                      */
d1248 3
a1250 4
  /*    y_scale      :: A 16.16 fractional scaling value used to convert   */
  /*                    vertical metrics from font units to 26.6           */
  /*                    fractional pixels.  Only relevant for scalable     */
  /*                    font formats.                                      */
d1252 3
a1254 2
  /*    ascender     :: The ascender in 26.6 fractional pixels.  See       */
  /*                    @@FT_FaceRec for the details.                       */
d1256 3
a1258 2
  /*    descender    :: The descender in 26.6 fractional pixels.  See      */
  /*                    @@FT_FaceRec for the details.                       */
d1260 2
a1261 2
  /*    height       :: The height in 26.6 fractional pixels.  See         */
  /*                    @@FT_FaceRec for the details.                       */
d1263 2
a1264 2
  /*    max_advance  :: The maximal advance width in 26.6 fractional       */
  /*                    pixels.  See @@FT_FaceRec for the details.          */
d1267 3
a1269 4
  /*    The scaling values, if relevant, are determined first during a     */
  /*    size changing operation.  The remaining fields are then set by the */
  /*    driver.  For scalable formats, they are usually set to scaled      */
  /*    values of the corresponding fields in @@FT_FaceRec.                 */
d1271 2
a1272 2
  /*    Note that due to glyph hinting, these values might not be exact    */
  /*    for certain fonts.  Thus they must be treated as unreliable        */
d1275 4
a1278 5
  /*    Indeed, the only way to get the exact metrics is to render _all_   */
  /*    glyphs.  As this would be a definite performance hit, it is up to  */
  /*    client applications to perform such computations.                  */
  /*                                                                       */
  /*    The FT_Size_Metrics structure is valid for bitmap fonts also.      */
d1285 2
a1286 2
    FT_Fixed   x_scale;     /* scaling values used to convert font    */
    FT_Fixed   y_scale;     /* units to 26.6 fractional pixels        */
d1302 2
a1303 2
  /*    FreeType root size class structure.  A size object models a face   */
  /*    object at a given size.                                            */
a1337 3
  /*    You can however retrieve subglyph information with                 */
  /*    @@FT_Get_SubGlyph_Info.                                             */
  /*                                                                       */
d1347 1
a1347 1
  /*    An opaque handle to an `FT_Slot_InternalRec' structure, used to    */
d1360 2
a1361 2
  /*    container where individual glyphs can be loaded, be they in        */
  /*    outline or bitmap format.                                          */
d1389 4
a1392 4
  /*    linearHoriAdvance :: The advance width of the unhinted glyph.      */
  /*                         Its value is expressed in 16.16 fractional    */
  /*                         pixels, unless @@FT_LOAD_LINEAR_DESIGN is set  */
  /*                         when loading the glyph.  This field can be    */
a1393 1
  /*                         Only relevant for outline glyphs.             */
d1395 10
a1404 6
  /*    linearVertAdvance :: The advance height of the unhinted glyph.     */
  /*                         Its value is expressed in 16.16 fractional    */
  /*                         pixels, unless @@FT_LOAD_LINEAR_DESIGN is set  */
  /*                         when loading the glyph.  This field can be    */
  /*                         important to perform correct WYSIWYG layout.  */
  /*                         Only relevant for outline glyphs.             */
d1411 3
a1413 3
  /*                         @@FT_GLYPH_FORMAT_BITMAP,                      */
  /*                         @@FT_GLYPH_FORMAT_OUTLINE, or                  */
  /*                         @@FT_GLYPH_FORMAT_COMPOSITE, but others are    */
d1418 1
a1418 1
  /*                         @@FT_GLYPH_FORMAT_BITMAP.  Note that the       */
d1426 1
a1426 1
  /*                         @@FT_GLYPH_FORMAT_BITMAP.                      */
d1436 1
a1436 4
  /*                         @@FT_GLYPH_FORMAT_OUTLINE.  Once a glyph is    */
  /*                         loaded, `outline' can be transformed,         */
  /*                         distorted, embolded, etc.  However, it must   */
  /*                         not be freed.                                 */
d1458 3
a1460 11
  /*                         present their own glyph image to client       */
  /*                         applications.  Note that the application      */
  /*                         needs to know about the image format.         */
  /*                                                                       */
  /*    lsb_delta         :: The difference between hinted and unhinted    */
  /*                         left side bearing while autohinting is        */
  /*                         active.  Zero otherwise.                      */
  /*                                                                       */
  /*    rsb_delta         :: The difference between hinted and unhinted    */
  /*                         right side bearing while autohinting is       */
  /*                         active.  Zero otherwise.                      */
d1465 2
a1466 2
  /*    its native format (e.g., an outline glyph for TrueType and Type 1  */
  /*    formats).                                                          */
d1478 2
a1479 30
  /*    position (e.g., coordinates (0,0) on the baseline).  Of course,    */
  /*    `slot->format' is also changed to @@FT_GLYPH_FORMAT_BITMAP.         */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Here a small pseudo code fragment which shows how to use           */
  /*    `lsb_delta' and `rsb_delta':                                       */
  /*                                                                       */
  /*    {                                                                  */
  /*      FT_Pos  origin_x       = 0;                                      */
  /*      FT_Pos  prev_rsb_delta = 0;                                      */
  /*                                                                       */
  /*                                                                       */
  /*      for all glyphs do                                                */
  /*        <compute kern between current and previous glyph and add it to */
  /*         `origin_x'>                                                   */
  /*                                                                       */
  /*        <load glyph with `FT_Load_Glyph'>                              */
  /*                                                                       */
  /*        if ( prev_rsb_delta - face->glyph->lsb_delta >= 32 )           */
  /*          origin_x -= 64;                                              */
  /*        else if ( prev_rsb_delta - face->glyph->lsb_delta < -32 )      */
  /*          origin_x += 64;                                              */
  /*                                                                       */
  /*        prev_rsb_delta = face->glyph->rsb_delta;                       */
  /*                                                                       */
  /*        <save glyph image, or render glyph, or ...>                    */
  /*                                                                       */
  /*        origin_x += face->glyph->advance.x;                            */
  /*      endfor                                                           */
  /*    }                                                                  */
a1507 3
    FT_Pos            lsb_delta;
    FT_Pos            rsb_delta;

d1530 1
a1530 1
  /*    Initialize a new FreeType library object.  The set of modules      */
d1546 36
d1585 1
a1585 1
  /*    Destroy a given FreeType library object and all of its children,   */
d1617 1
a1617 1
  /*    FT_OPEN_PARAMS      :: Use the `num_params' and `params' fields.   */
d1656 1
a1656 1
  /*    tag  :: A four-byte identification tag.                            */
d1661 1
a1661 1
  /*    The ID and function of parameters are driver-specific.             */
d1677 3
a1679 3
  /*    A structure used to indicate how to open a new font file or        */
  /*    stream.  A pointer to such a structure can be used as a parameter  */
  /*    for the functions @@FT_Open_Face and @@FT_Attach_Stream.             */
d1695 2
a1696 2
  /*                   the face.  If set to 0, FreeType tries to load the  */
  /*                   face with each one of the drivers in its list.      */
d1708 1
a1708 4
  /*    memory file of `memory_size' bytes, located at `memory_address'.   */
  /*    The data are are not copied, and the client is responsible for     */
  /*    releasing and destroying them _after_ the corresponding call to    */
  /*    @@FT_Done_Face.                                                     */
d1716 1
a1716 1
  /*    If the `FT_OPEN_DRIVER' bit is set, @@FT_Open_Face only tries to    */
d1720 2
a1721 5
  /*    `num_params' and `params' is used.  They are ignored otherwise.    */
  /*                                                                       */
  /*    Ideally, both the `pathname' and `params' fields should be tagged  */
  /*    as `const'; this is missing for API backwards compatibility.  With */
  /*    other words, applications should treat them as read-only.          */
d1743 2
a1744 1
  /*    This function calls @@FT_Open_Face to open a font by its pathname.  */
d1752 2
a1753 2
  /*    face_index :: The index of the face within the font.  The first    */
  /*                  face has index 0.                                    */
d1756 1
a1756 3
  /*    aface      :: A handle to a new face object.  If `face_index' is   */
  /*                  greater than or equal to zero, it must be non-NULL.  */
  /*                  See @@FT_Open_Face for more details.                  */
d1761 14
d1788 2
a1789 2
  /*    This function calls @@FT_Open_Face to open a font which has been    */
  /*    loaded into memory.                                                */
d1799 2
a1800 2
  /*    face_index :: The index of the face within the font.  The first    */
  /*                  face has index 0.                                    */
d1803 1
a1803 3
  /*    aface      :: A handle to a new face object.  If `face_index' is   */
  /*                  greater than or equal to zero, it must be non-NULL.  */
  /*                  See @@FT_Open_Face for more details.                  */
d1809 14
a1822 1
  /*    You must not deallocate the memory before calling @@FT_Done_Face.   */
d1838 3
a1840 2
  /*    Create a face object from a given resource described by            */
  /*    @@FT_Open_Args.                                                     */
d1849 2
a1850 2
  /*    face_index :: The index of the face within the font.  The first    */
  /*                  face has index 0.                                    */
d1853 1
a1853 3
  /*    aface      :: A handle to a new face object.  If `face_index' is   */
  /*                  greater than or equal to zero, it must be non-NULL.  */
  /*                  See note below.                                      */
d1863 5
a1867 12
  /*    FT_Open_Face can be used to quickly check whether the font         */
  /*    format of a given font resource is supported by FreeType.  If the  */
  /*    `face_index' field is negative, the function's return value is 0   */
  /*    if the font format is recognized, or non-zero otherwise;           */
  /*    the function returns a more or less empty face handle in `*aface'  */
  /*    (if `aface' isn't NULL).  The only useful field in this special    */
  /*    case is `face->num_faces' which gives the number of faces within   */
  /*    the font file.  After examination, the returned @@FT_Face structure */
  /*    should be deallocated with a call to @@FT_Done_Face.                */
  /*                                                                       */
  /*    Each new face object created with this function also owns a        */
  /*    default @@FT_Size object, accessible as `face->size'.               */
d1882 4
a1885 1
  /*    This function calls @@FT_Attach_Stream to attach a file.            */
d1891 1
a1891 1
  /*    filepathname :: The pathname.                                      */
d1896 12
d1919 2
a1920 4
  /*    `Attach' data to a face object.  Normally, this is used to read    */
  /*    additional information for the face object.  For example, you can  */
  /*    attach an AFM file that comes with a Type 1 font to get the        */
  /*    kerning values and other metrics.                                  */
d1926 2
a1927 3
  /*    parameters :: A pointer to @@FT_Open_Args which must be filled by   */
  /*                  the caller.                                          */
  /*                                                                       */
d1932 1
a1932 1
  /*    The meaning of the `attach' (i.e., what really happens when the    */
d1951 2
a1952 2
  /*    Discard a given face object, as well as all of its child slots and */
  /*    sizes.                                                             */
a1966 144
  /*    FT_Select_Size                                                     */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Select a bitmap strike.                                            */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face         :: A handle to a target face object.                  */
  /*                                                                       */
  /* <Input>                                                               */
  /*    strike_index :: The index of the bitmap strike in the              */
  /*                    `available_sizes' field of @@FT_FaceRec structure.  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Select_Size( FT_Face  face,
                  FT_Int   strike_index );


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_Size_Request_Type                                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An enumeration type that lists the supported size request types.   */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_SIZE_REQUEST_TYPE_NOMINAL ::                                    */
  /*      The nominal size.  The `units_per_EM' field of @@FT_FaceRec is    */
  /*      used to determine both scaling values.                           */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_REAL_DIM ::                                   */
  /*      The real dimension.  The sum of the the `Ascender' and (minus    */
  /*      of) the `Descender' fields of @@FT_FaceRec are used to determine  */
  /*      both scaling values.                                             */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_BBOX ::                                       */
  /*      The font bounding box.  The width and height of the `bbox' field */
  /*      of @@FT_FaceRec are used to determine the horizontal and vertical */
  /*      scaling value, respectively.                                     */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_CELL ::                                       */
  /*      The `max_advance_width' field of @@FT_FaceRec is used to          */
  /*      determine the horizontal scaling value; the vertical scaling     */
  /*      value is determined the same way as                              */
  /*      @@FT_SIZE_REQUEST_TYPE_REAL_DIM does.  Finally, both scaling      */
  /*      values are set to the smaller one.  This type is useful if you   */
  /*      want to specify the font size for, say, a window of a given      */
  /*      dimension and 80x24 cells.                                       */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_SCALES ::                                     */
  /*      Specify the scaling values directly.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The above descriptions only apply to scalable formats.  For bitmap */
  /*    formats, the behaviour is up to the driver.                        */
  /*                                                                       */
  /*    See the note section of @@FT_Size_Metrics if you wonder how size    */
  /*    requesting relates to scaling values.                              */
  /*                                                                       */
  typedef enum  FT_Size_Request_Type_
  {
    FT_SIZE_REQUEST_TYPE_NOMINAL,
    FT_SIZE_REQUEST_TYPE_REAL_DIM,
    FT_SIZE_REQUEST_TYPE_BBOX,
    FT_SIZE_REQUEST_TYPE_CELL,
    FT_SIZE_REQUEST_TYPE_SCALES,

    FT_SIZE_REQUEST_TYPE_MAX

  } FT_Size_Request_Type;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Size_RequestRec                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A structure used to model a size request.                          */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    type           :: See @@FT_Size_Request_Type.                       */
  /*                                                                       */
  /*    width          :: The desired width.                               */
  /*                                                                       */
  /*    height         :: The desired height.                              */
  /*                                                                       */
  /*    horiResolution :: The horizontal resolution.  If set to zero,      */
  /*                      `width' is treated as a 26.6 fractional pixel    */
  /*                      value.                                           */
  /*                                                                       */
  /*    vertResolution :: The vertical resolution.  If set to zero,        */
  /*                      `height' is treated as a 26.6 fractional pixel   */
  /*                      value.                                           */
  /*                                                                       */
  /* <Note>                                                                */
  /*    If `width' is zero, then the horizontal scaling value is set      */
  /*    equal to the vertical scaling value, and vice versa.               */
  /*                                                                       */
  typedef struct  FT_Size_RequestRec_
  {
    FT_Size_Request_Type  type;
    FT_Long               width;
    FT_Long               height;
    FT_UInt               horiResolution;
    FT_UInt               vertResolution;

  } FT_Size_RequestRec, *FT_Size_Request;


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Request_Size                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Resize the scale of the active @@FT_Size object in a face.          */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face :: A handle to a target face object.                          */
  /*                                                                       */
  /* <Input>                                                               */
  /*    req  :: A pointer to a @@FT_Size_RequestRec.                        */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Although drivers may select the bitmap strike matching the         */
  /*    request, you should not rely on this if you intend to select a     */
  /*    particular bitmap strike.  Use @@FT_Select_Size instead in that     */
  /*    case.                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Request_Size( FT_Face          face,
                   FT_Size_Request  req );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
d1970 7
a1976 2
  /*    This function calls @@FT_Request_Size to request the nominal size   */
  /*    (in points).                                                       */
d1982 1
a1982 1
  /*    char_width      :: The nominal width, in 26.6 fractional points.   */
d1984 2
a1985 1
  /*    char_height     :: The nominal height, in 26.6 fractional points.  */
d1987 1
a1987 1
  /*    horz_resolution :: The horizontal resolution in dpi.               */
d1989 1
a1989 1
  /*    vert_resolution :: The vertical resolution in dpi.                 */
d1995 2
a1996 8
  /*    If either the character width or height is zero, it is set equal   */
  /*    to the other value.                                                */
  /*                                                                       */
  /*    If either the horizontal or vertical resolution is zero, it is set */
  /*    equal to the other value.                                          */
  /*                                                                       */
  /*    A character width or height smaller than 1pt is set to 1pt; if     */
  /*    both resolution values are zero, they are set to 72dpi.            */
a1997 1

d2012 5
a2016 2
  /*    This function calls @@FT_Request_Size to request the nominal size   */
  /*    (in pixels).                                                       */
d2022 1
a2022 1
  /*    pixel_width  :: The nominal width, in pixels.                      */
d2024 1
a2024 1
  /*    pixel_height :: The nominal height, in pixels.                     */
d2029 20
d2061 2
a2062 2
  /*    A function used to load a single glyph into the glyph slot of a    */
  /*    face object.                                                       */
d2066 1
a2066 1
  /*                   is loaded.                                          */
d2083 7
a2089 2
  /*    The loaded glyph may be transformed.  See @@FT_Set_Transform for    */
  /*    the details.                                                       */
d2103 2
a2104 2
  /*    A function used to load a single glyph into the glyph slot of a    */
  /*    face object, according to its character code.                      */
d2108 1
a2108 1
  /*                   is loaded.                                          */
d2124 11
a2134 1
  /*    This function simply calls @@FT_Get_Char_Index and @@FT_Load_Glyph.  */
d2142 136
a2277 126
  /*************************************************************************
   *
   * @@enum:
   *   FT_LOAD_XXX
   *
   * @@description:
   *   A list of bit-field constants used with @@FT_Load_Glyph to indicate
   *   what kind of operations to perform during glyph loading.
   *
   * @@values:
   *   FT_LOAD_DEFAULT ::
   *     Corresponding to 0, this value is used as the default glyph load
   *     operation.  In this case, the following happens:
   *
   *     1. FreeType looks for a bitmap for the glyph corresponding to the
   *        face's current size.  If one is found, the function returns.
   *        The bitmap data can be accessed from the glyph slot (see note
   *        below).
   *
   *     2. If no embedded bitmap is searched or found, FreeType looks for a
   *        scalable outline.  If one is found, it is loaded from the font
   *        file, scaled to device pixels, then `hinted' to the pixel grid
   *        in order to optimize it.  The outline data can be accessed from
   *        the glyph slot (see note below).
   *
   *     Note that by default, the glyph loader doesn't render outlines into
   *     bitmaps.  The following flags are used to modify this default
   *     behaviour to more specific and useful cases.
   *
   *   FT_LOAD_NO_SCALE ::
   *     Don't scale the outline glyph loaded, but keep it in font units.
   *
   *     This flag implies @@FT_LOAD_NO_HINTING and @@FT_LOAD_NO_BITMAP, and
   *     unsets @@FT_LOAD_RENDER.
   *
   *   FT_LOAD_NO_HINTING ::
   *     Disable hinting.  This generally generates `blurrier' bitmap glyph
   *     when the glyph is rendered in any of the anti-aliased modes.  See
   *     also the note below.
   *
   *     This flag is implied by @@FT_LOAD_NO_SCALE.
   *
   *   FT_LOAD_RENDER ::
   *     Call @@FT_Render_Glyph after the glyph is loaded.  By default, the
   *     glyph is rendered in @@FT_RENDER_MODE_NORMAL mode.  This can be
   *     overridden by @@FT_LOAD_TARGET_XXX or @@FT_LOAD_MONOCHROME.
   *
   *     This flag is unset by @@FT_LOAD_NO_SCALE.
   *
   *   FT_LOAD_NO_BITMAP ::
   *     Ignore bitmap strikes when loading.  Bitmap-only fonts ignore this
   *     flag.
   *
   *     @@FT_LOAD_NO_SCALE always sets this flag.
   *
   *   FT_LOAD_VERTICAL_LAYOUT ::
   *     Load the glyph for vertical text layout.  _Don't_ use it as it is
   *     problematic currently.
   *
   *   FT_LOAD_FORCE_AUTOHINT ::
   *     Indicates that the auto-hinter is preferred over the font's native
   *     hinter.  See also the note below.
   *
   *   FT_LOAD_CROP_BITMAP ::
   *     Indicates that the font driver should crop the loaded bitmap glyph
   *     (i.e., remove all space around its black bits).  Not all drivers
   *     implement this.
   *
   *   FT_LOAD_PEDANTIC ::
   *     Indicates that the font driver should perform pedantic verifications
   *     during glyph loading.  This is mostly used to detect broken glyphs
   *     in fonts.  By default, FreeType tries to handle broken fonts also.
   *
   *   FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH ::
   *     Indicates that the font driver should ignore the global advance
   *     width defined in the font.  By default, that value is used as the
   *     advance width for all glyphs when the face has
   *     @@FT_FACE_FLAG_FIXED_WIDTH set.
   *
   *     This flag exists for historical reasons (to support buggy CJK
   *     fonts).
   *
   *   FT_LOAD_NO_RECURSE ::
   *     This flag is only used internally.  It merely indicates that the
   *     font driver should not load composite glyphs recursively.  Instead,
   *     it should set the `num_subglyph' and `subglyphs' values of the
   *     glyph slot accordingly, and set `glyph->format' to
   *     @@FT_GLYPH_FORMAT_COMPOSITE.
   *
   *     The description of sub-glyphs is not available to client
   *     applications for now.
   *
   *     This flag implies @@FT_LOAD_NO_SCALE and @@FT_LOAD_IGNORE_TRANSFORM.
   *
   *   FT_LOAD_IGNORE_TRANSFORM ::
   *     Indicates that the transform matrix set by @@FT_Set_Transform should
   *     be ignored.
   *
   *   FT_LOAD_MONOCHROME ::
   *     This flag is used with @@FT_LOAD_RENDER to indicate that you want to
   *     render an outline glyph to a 1-bit monochrome bitmap glyph, with
   *     8 pixels packed into each byte of the bitmap data.
   *
   *     Note that this has no effect on the hinting algorithm used.  You
   *     should use @@FT_LOAD_TARGET_MONO instead so that the
   *     monochrome-optimized hinting algorithm is used.
   *
   *   FT_LOAD_LINEAR_DESIGN ::
   *     Indicates that the `linearHoriAdvance' and `linearVertAdvance'
   *     fields of @@FT_GlyphSlotRec should be kept in font units.  See
   *     @@FT_GlyphSlotRec for details.
   *
   *   FT_LOAD_NO_AUTOHINT ::
   *     Disable auto-hinter.  See also the note below.
   *
   * @@note:
   *   By default, hinting is enabled and the font's native hinter (see
   *   @@FT_FACE_FLAG_HINTER) is preferred over the auto-hinter.  You can
   *   disable hinting by setting @@FT_LOAD_NO_HINTING or change the
   *   precedence by setting @@FT_LOAD_FORCE_AUTOHINT.  You can also set
   *   @@FT_LOAD_NO_AUTOHINT in case you don't want the auto-hinter to be
   *   used at all.
   *
   *   Besides deciding which hinter to use, you can also decide which
   *   hinting algorithm to use.  See @@FT_LOAD_TARGET_XXX for details.
   */
a2298 65

  /**************************************************************************
   *
   * @@enum:
   *   FT_LOAD_TARGET_XXX
   *
   * @@description:
   *   A list of values that are used to select a specific hinting algorithm
   *   to use by the hinter.  You should OR one of these values to your
   *   `load_flags' when calling @@FT_Load_Glyph.
   *
   *   Note that font's native hinters may ignore the hinting algorithm you
   *   have specified (e.g., the TrueType bytecode interpreter).  You can set
   *   @@FT_LOAD_FORCE_AUTOHINT to ensure that the auto-hinter is used.
   *
   *   Also note that @@FT_LOAD_TARGET_LIGHT is an exception, in that it
   *   always implies @@FT_LOAD_FORCE_AUTOHINT.
   *
   * @@values:
   *   FT_LOAD_TARGET_NORMAL ::
   *     This corresponds to the default hinting algorithm, optimized for
   *     standard gray-level rendering.  For monochrome output, use
   *     @@FT_LOAD_TARGET_MONO instead.
   *
   *   FT_LOAD_TARGET_LIGHT ::
   *     A lighter hinting algorithm for non-monochrome modes.  Many
   *     generated glyphs are more fuzzy but better resemble its original
   *     shape.  A bit like rendering on Mac OS X.
   *
   *     As a special exception, this target implies @@FT_LOAD_FORCE_AUTOHINT.
   *
   *   FT_LOAD_TARGET_MONO ::
   *     Strong hinting algorithm that should only be used for monochrome
   *     output.  The result is probably unpleasant if the glyph is rendered
   *     in non-monochrome modes.
   *
   *   FT_LOAD_TARGET_LCD ::
   *     A variant of @@FT_LOAD_TARGET_NORMAL optimized for horizontally
   *     decimated LCD displays.
   *
   *   FT_LOAD_TARGET_LCD_V ::
   *     A variant of @@FT_LOAD_TARGET_NORMAL optimized for vertically
   *     decimated LCD displays.
   *
   * @@note:
   *   You should use only _one_ of the FT_LOAD_TARGET_XXX values in your
   *   `load_flags'.  They can't be ORed.
   *
   *   If @@FT_LOAD_RENDER is also set, the glyph is rendered in the
   *   corresponding mode (i.e., the mode which matches the used algorithm
   *   best) unless @@FT_LOAD_MONOCHROME is set.
   *
   *   You can use a hinting algorithm that doesn't correspond to the same
   *   rendering mode.  As an example, it is possible to use the `light'
   *   hinting algorithm and have the results rendered in horizontal LCD
   *   pixel mode, with code like
   *
   *     {
   *       FT_Load_Glyph( face, glyph_index,
   *                      load_flags | FT_LOAD_TARGET_LIGHT );
   *
   *       FT_Render_Glyph( face->glyph, FT_RENDER_MODE_LCD );
   *     }
   */

d2300 1
a2307 12

  /*
   * @@macro:
   *   FT_LOAD_TARGET_MODE
   *
   * @@description:
   *   Return the @@FT_Render_Mode corresponding to a given
   *   @@FT_LOAD_TARGET_XXX value.
   */

#define FT_LOAD_TARGET_MODE( x )  ( (FT_Render_Mode)( ( (x) >> 16 ) & 15 ) )

d2318 2
a2319 2
  /*    images when they are loaded into a glyph slot through              */
  /*    @@FT_Load_Glyph.                                                    */
a2335 3
  /*    Note that this also transforms the `face.glyph.advance' field, but */
  /*    *not* the values in `face.glyph.metrics'.                          */
  /*                                                                       */
d2350 2
a2351 1
  /*    conversion performed on the outline.                               */
d2363 8
a2370 4
  /*      This is equivalent to @@FT_RENDER_MODE_NORMAL.  It is only        */
  /*      defined as a separate value because render modes are also used   */
  /*      indirectly to define hinting algorithm selectors.  See           */
  /*      @@FT_LOAD_TARGET_XXX for details.                                 */
d2376 4
a2379 4
  /*      This mode corresponds to horizontal RGB and BGR sub-pixel        */
  /*      displays, like LCD-screens.  It produces 8-bit bitmaps that are  */
  /*      3 times the width of the original glyph outline in pixels, and   */
  /*      which use the @@FT_PIXEL_MODE_LCD mode.                           */
d2382 1
a2382 1
  /*      This mode corresponds to vertical RGB and BGR sub-pixel displays */
d2389 2
a2390 2
  /*   _not_ _filtered_ to reduce color-fringes.  It is up to the caller   */
  /*   to perform this pass.                                               */
d2411 1
a2411 1
  /*    These constants are deprecated.  Use the corresponding             */
d2428 3
a2430 3
  /*    Convert a given glyph image to a bitmap.  It does so by inspecting */
  /*    the glyph image format, finding the relevant renderer, and         */
  /*    invoking it.                                                       */
d2438 2
a2439 2
  /*                   image into a bitmap.  See @@FT_Render_Mode for a     */
  /*                   list of possible values.                            */
d2519 1
a2519 1
  /*    Return the kerning vector between two glyphs of a same face.       */
d2529 1
a2529 1
  /*                   Determines the scale and dimension of the returned  */
d2533 3
a2535 3
  /*    akerning    :: The kerning vector.  This is either in font units   */
  /*                   or in pixels (26.6 format) for scalable formats,    */
  /*                   and in pixels for fixed-sizes formats.              */
a2556 28
  /*    FT_Get_Track_Kerning                                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the track kerning for a given face object at a given size.  */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face        :: A handle to a source face object.                   */
  /*                                                                       */
  /*    point_size  :: The point size in 16.16 fractional points.          */
  /*                                                                       */
  /*    degree      :: The degree of tightness.                            */
  /*                                                                       */
  /* <Output>                                                              */
  /*    akerning    :: The kerning in 16.16 fractional points.             */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Get_Track_Kerning( FT_Face    face,
                        FT_Fixed   point_size,
                        FT_Int     degree,
                        FT_Fixed*  akerning );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
d2560 2
a2561 2
  /*    Retrieve the ASCII name of a given glyph in a face.  This only     */
  /*    works for those faces where @@FT_HAS_GLYPH_NAMES(face) returns 1.   */
d2572 1
a2572 1
  /*    buffer      :: A pointer to a target buffer where the name is      */
d2581 1
a2581 1
  /*    byte of `buffer' is set to 0 to indicate an empty name.            */
d2587 2
a2588 2
  /*    macro `FT_CONFIG_OPTION_NO_GLYPH_NAMES' is defined in              */
  /*    `include/freetype/config/ftoptions.h'.                             */
d2603 2
a2604 2
  /*    Retrieve the ASCII Postscript name of a given face, if available.  */
  /*    This only works with Postscript and TrueType fonts.                */
d2610 1
a2610 1
  /*    A pointer to the face's Postscript name.  NULL if unavailable.     */
d2613 2
a2614 2
  /*    The returned pointer is owned by the face and is destroyed with    */
  /*    it.                                                                */
d2626 1
a2626 1
  /*    Select a given charmap by its encoding tag (as listed in           */
d2633 1
a2633 1
  /*    encoding :: A handle to the selected encoding.                     */
d2639 1
a2639 1
  /*    This function returns an error if no charmap in the face           */
a2641 5
  /*    Because many fonts contain more than a single cmap for Unicode     */
  /*    encoding, this function has some special code to select the one    */
  /*    which covers Unicode best.  It is thus preferable to               */
  /*    @@FT_Set_Charmap in this case.                                      */
  /*                                                                       */
d2653 2
a2654 1
  /*    Select a given charmap for character code to glyph index mapping.  */
d2666 2
a2667 2
  /*    This function returns an error if the charmap is not part of       */
  /*    the face (i.e., if it is not listed in the `face->charmaps'        */
a2674 21
  /*************************************************************************
   *
   * @@function:
   *   FT_Get_Charmap_Index
   *
   * @@description:
   *   Retrieve index of a given charmap.
   *
   * @@input:
   *   charmap ::
   *     A handle to a charmap.
   *
   * @@return:
   *   The index into the array of character maps within the face to which
   *   `charmap' belongs.
   *
   */
  FT_EXPORT( FT_Int )
  FT_Get_Charmap_Index( FT_CharMap  charmap );


d2681 2
a2682 2
  /*    Return the glyph index of a given character code.  This function   */
  /*    uses a charmap object to do the mapping.                           */
d2693 4
a2696 5
  /*    If you use FreeType to manipulate the contents of font files       */
  /*    directly, be aware that the glyph index returned by this function  */
  /*    doesn't always correspond to the internal indices used within      */
  /*    the file.  This is done to ensure that value 0 always corresponds  */
  /*    to the `missing glyph'.                                            */
d2710 1
a2710 1
  /*    current charmap of a given face.  It also returns the              */
d2742 3
a2744 3
  /*    Note that `*agindex' is set to 0 if the charmap is empty.  The     */
  /*    result itself can be 0 in two cases: if the charmap is empty or    */
  /*    when the value 0 is the first valid character code.                */
d2758 1
a2758 1
  /*    current charmap of a given face following the value `char_code',   */
d2774 2
a2775 2
  /*    over all character codes available in a given charmap.  See the    */
  /*    note for this function for a simple code example.                  */
d2777 2
a2778 2
  /*    Note that `*agindex' is set to 0 when there are no more codes in   */
  /*    the charmap.                                                       */
d2792 1
a2792 1
  /*    Return the glyph index of a given glyph name.  This function uses  */
a2807 79
  /*************************************************************************
   *
   * @@macro:
   *   FT_SUBGLYPH_FLAG_XXX
   *
   * @@description:
   *   A list of constants used to describe subglyphs.  Please refer to the
   *   TrueType specification for the meaning of the various flags.
   *
   * @@values:
   *   FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS ::
   *   FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES ::
   *   FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID ::
   *   FT_SUBGLYPH_FLAG_SCALE ::
   *   FT_SUBGLYPH_FLAG_XY_SCALE ::
   *   FT_SUBGLYPH_FLAG_2X2 ::
   *   FT_SUBGLYPH_FLAG_USE_MY_METRICS ::
   *
   */
#define FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS          1
#define FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES      2
#define FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID        4
#define FT_SUBGLYPH_FLAG_SCALE                   8
#define FT_SUBGLYPH_FLAG_XY_SCALE             0x40
#define FT_SUBGLYPH_FLAG_2X2                  0x80
#define FT_SUBGLYPH_FLAG_USE_MY_METRICS      0x200


  /*************************************************************************
   *
   * @@func:
   *   FT_Get_SubGlyph_Info
   *
   * @@description:
   *   Retrieve a description of a given subglyph.  Only use it if
   *   `glyph->format' is @@FT_GLYPH_FORMAT_COMPOSITE, or an error is
   *   returned.
   *
   * @@input:
   *   glyph ::
   *     The source glyph slot.
   *
   *   sub_index ::
   *     The index of subglyph.  Must be less than `glyph->num_subglyphs'.
   *
   * @@output:
   *   p_index ::
   *     The glyph index of the subglyph.
   *
   *   p_flags ::
   *     The subglyph flags, see @@FT_SUBGLYPH_FLAG_XXX.
   *
   *   p_arg1 ::
   *     The subglyph's first argument (if any).
   *
   *   p_arg2 ::
   *     The subglyph's second argument (if any).
   *
   *   p_transform ::
   *     The subglyph transformation (if any).
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   The values of `*p_arg1', `*p_arg2', and `*p_transform' must be
   *   interpreted depending on the flags returned in `*p_flags'.  See the
   *   TrueType specification for details.
   *
   */
  FT_EXPORT( FT_Error )
  FT_Get_SubGlyph_Info( FT_GlyphSlot  glyph,
                        FT_UInt       sub_index,
                        FT_Int       *p_index,
                        FT_UInt      *p_flags,
                        FT_Int       *p_arg1,
                        FT_Int       *p_arg2,
                        FT_Matrix    *p_transform );

d2818 1
a2818 1
  /*    Crunching fixed numbers and vectors.                               */
d2991 1
a2991 1
  /*    Transform a single vector through a 2x2 matrix.                    */
d3003 2
a3004 2
  FT_Vector_Transform( FT_Vector*        vec,
                       const FT_Matrix*  matrix );
a3006 134
  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    version                                                            */
  /*                                                                       */
  /* <Title>                                                               */
  /*    FreeType Version                                                   */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    Functions and macros related to FreeType versions.                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Note that those functions and macros are of limited use because    */
  /*    even a new release of FreeType with only documentation changes     */
  /*    increases the version number.                                      */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************
   *
   *  @@enum:
   *    FREETYPE_XXX
   *
   *  @@description:
   *    These three macros identify the FreeType source code version.
   *    Use @@FT_Library_Version to access them at runtime.
   *
   *  @@values:
   *    FREETYPE_MAJOR :: The major version number.
   *    FREETYPE_MINOR :: The minor version number.
   *    FREETYPE_PATCH :: The patch level.
   *
   *  @@note:
   *    The version number of FreeType if built as a dynamic link library
   *    with the `libtool' package is _not_ controlled by these three
   *    macros.
   */
#define FREETYPE_MAJOR  2
#define FREETYPE_MINOR  3
#define FREETYPE_PATCH  5


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Library_Version                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the version of the FreeType library being used.  This is    */
  /*    useful when dynamically linking to the library, since one cannot   */
  /*    use the macros @@FREETYPE_MAJOR, @@FREETYPE_MINOR, and               */
  /*    @@FREETYPE_PATCH.                                                   */
  /*                                                                       */
  /* <Input>                                                               */
  /*    library :: A source library handle.                                */
  /*                                                                       */
  /* <Output>                                                              */
  /*    amajor  :: The major version number.                               */
  /*                                                                       */
  /*    aminor  :: The minor version number.                               */
  /*                                                                       */
  /*    apatch  :: The patch version number.                               */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The reason why this function takes a `library' argument is because */
  /*    certain programs implement library initialization in a custom way  */
  /*    that doesn't use @@FT_Init_FreeType.                                */
  /*                                                                       */
  /*    In such cases, the library version might not be available before   */
  /*    the library object has been created.                               */
  /*                                                                       */
  FT_EXPORT( void )
  FT_Library_Version( FT_Library   library,
                      FT_Int      *amajor,
                      FT_Int      *aminor,
                      FT_Int      *apatch );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_CheckTrueTypePatents                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Parse all bytecode instructions of a TrueType font file to check   */
  /*    whether any of the patented opcodes are used.  This is only useful */
  /*    if you want to be able to use the unpatented hinter with           */
  /*    fonts that do *not* use these opcodes.                             */
  /*                                                                       */
  /*    Note that this function parses *all* glyph instructions in the     */
  /*    font file, which may be slow.                                      */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face :: A face handle.                                             */
  /*                                                                       */
  /* <Return>                                                              */
  /*    1 if this is a TrueType font that uses one of the patented         */
  /*    opcodes, 0 otherwise.                                              */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.5                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Bool )
  FT_Face_CheckTrueTypePatents( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_SetUnpatentedHinting                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Enable or disable the unpatented hinter for a given face.          */
  /*    Only enable it if you have determined that the face doesn't        */
  /*    use any patented opcodes (see @@FT_Face_CheckTrueTypePatents).      */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face  :: A face handle.                                            */
  /*                                                                       */
  /*    value :: New boolean setting.                                      */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The old setting value.  This will always be false if this is not   */
  /*    a SFNT font, or if the unpatented hinter is not compiled in this   */
  /*    instance of the library.                                           */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.5                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Bool )
  FT_Face_SetUnpatentedHinting( FT_Face  face,
                                FT_Bool  value );

@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 by       */
a801 2
  /*                           Can be NULL (e.g., in fonts embedded in a   */
  /*                           PDF file).                                  */
a1021 9
  /*    FT_FACE_FLAG_CID_KEYED ::                                          */
  /*      Set if the font is CID-keyed.  In that case, the font is not     */
  /*      accessed by glyph indices but by CID values.  For subsetted      */
  /*      CID-keyed fonts this has the consequence that not all index      */
  /*      values are a valid argument to FT_Load_Glyph.  Only the CID      */
  /*      values for which corresponding glyphs in the subsetted font      */
  /*      exist make FT_Load_Glyph return successfully; in all other cases */
  /*      you get an `FT_Err_Invalid_Argument' error.                      */
  /*                                                                       */
a1033 1
#define FT_FACE_FLAG_CID_KEYED         ( 1L << 12 )
a1189 18
  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_CID_KEYED( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a CID-keyed
   *   font.  See the discussion of @@FT_FACE_FLAG_CID_KEYED for more
   *   details.
   *
   *   If this macro is true, all functions defined in @@FT_CID_H are
   *   available.
   *
   */
#define FT_IS_CID_KEYED( face ) \
          ( face->face_flags & FT_FACE_FLAG_CID_KEYED )


d1201 1
a1201 1
  /*      Indicates that a given face style is italic or oblique.          */
a1205 6
  /* <Note>                                                                */
  /*    The style information as provided by FreeType is very basic.  More */
  /*    details are beyond the scope and should be done on a higher level  */
  /*    (for example, by analyzing various fields of the `OS/2' table in   */
  /*    SFNT based fonts).                                                 */
  /*                                                                       */
d1217 1
a1217 1
  /*    model private data of a given @@FT_Size object.                     */
d1348 1
a1348 1
  /*    model private data of a given @@FT_GlyphSlot object.                */
d2058 1
a2058 12
  } FT_Size_RequestRec;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Size_Request                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A handle to a size request structure.                              */
  /*                                                                       */
  typedef struct FT_Size_RequestRec_  *FT_Size_Request;
a2188 5
  /*    For subsetted CID-keyed fonts, `FT_Err_Invalid_Argument' is        */
  /*    returned for invalid CID values (this is, for CID values which     */
  /*    don't have a corresponding glyph in the font).  See the discussion */
  /*    of the @@FT_FACE_FLAG_CID_KEYED flag for more details.              */
  /*                                                                       */
d2370 3
a2372 1
#define FT_LOAD_SBITS_ONLY                   0x4000   /* temporary hack! */
d2451 1
a2451 2
  /**************************************************************************
   *
a2457 1
   *
d2462 2
d2540 3
a2542 5
  /*   The LCD-optimized glyph bitmaps produced by FT_Render_Glyph can be  */
  /*   filtered to reduce color-fringes by using @@FT_Library_SetLcdFilter  */
  /*   (not active in the default builds).  It is up to the caller to      */
  /*   either call @@FT_Library_SetLcdFilter (if available) or do the       */
  /*   filtering itself.                                                   */
d2824 1
a2824 2
  /*    which covers Unicode best (`best' in the sense that a UCS-4 cmap   */
  /*    is preferred to a UCS-2 cmap).  It is thus preferable to           */
a2853 2
  /*    It also fails if a type 14 charmap is selected.                    */
  /*                                                                       */
a3096 217
  /*    glyph_variants                                                     */
  /*                                                                       */
  /* <Title>                                                               */
  /*    Glyph Variants                                                     */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    The FreeType 2 interface to Unicode Ideographic Variation          */
  /*    Sequences (IVS), using the SFNT cmap format 14.                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Many CJK characters have variant forms.  They are a sort of grey   */
  /*    area somewhere between being totally irrelevant and semantically   */
  /*    distinct; for this reason, the Unicode consortium decided to       */
  /*    introduce Ideographic Variation Sequences (IVS), consisting of a   */
  /*    Unicode base character and one of 240 variant selectors            */
  /*    (U+E0100-U+E01EF), instead of further extending the already huge   */
  /*    code range for CJK characters.                                     */
  /*                                                                       */
  /*    An IVS is registered and unique; for further details please refer  */
  /*    to Unicode Technical Report #37, the Ideographic Variation         */
  /*    Database.  To date (October 2007), the character with the most     */
  /*    variants is U+908A, having 8 such IVS.                             */
  /*                                                                       */
  /*    Adobe and MS decided to support IVS with a new cmap subtable       */
  /*    (format 14).  It is an odd subtable because it is not a mapping of */
  /*    input code points to glyphs, but contains lists of all variants    */
  /*    supported by the font.                                             */
  /*                                                                       */
  /*    A variant may be either `default' or `non-default'.  A default     */
  /*    variant is the one you will get for that code point if you look it */
  /*    up in the standard Unicode cmap.  A non-default variant is a       */
  /*    different glyph.                                                   */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetCharVariantIndex                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the glyph index of a given character code as modified by    */
  /*    the variation selector.                                            */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    charcode ::                                                        */
  /*      The character code point in Unicode.                             */
  /*                                                                       */
  /*    variantSelector ::                                                 */
  /*      The Unicode code point of the variation selector.                */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The glyph index.  0 means either `undefined character code', or    */
  /*    `undefined selector code', or `no variation selector cmap          */
  /*    subtable', or `current CharMap is not Unicode'.                    */
  /*                                                                       */
  /* <Note>                                                                */
  /*    If you use FreeType to manipulate the contents of font files       */
  /*    directly, be aware that the glyph index returned by this function  */
  /*    doesn't always correspond to the internal indices used within      */
  /*    the file.  This is done to ensure that value 0 always corresponds  */
  /*    to the `missing glyph'.                                            */
  /*                                                                       */
  /*    This function is only meaningful if                                */
  /*      a) the font has a variation selector cmap sub table,             */
  /*    and                                                                */
  /*      b) the current charmap has a Unicode encoding.                   */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt )
  FT_Face_GetCharVariantIndex( FT_Face   face,
                               FT_ULong  charcode,
                               FT_ULong  variantSelector );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetCharVariantIsDefault                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Check whether this variant of this Unicode character is the one to */
  /*    be found in the `cmap'.                                            */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    charcode ::                                                        */
  /*      The character codepoint in Unicode.                              */
  /*                                                                       */
  /*    variantSelector ::                                                 */
  /*      The Unicode codepoint of the variation selector.                 */
  /*                                                                       */
  /* <Return>                                                              */
  /*    1 if found in the standard (Unicode) cmap, 0 if found in the       */
  /*    variation selector cmap, or -1 if it is not a variant.             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    This function is only meaningful if the font has a variation       */
  /*    selector cmap subtable.                                            */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Int )
  FT_Face_GetCharVariantIsDefault( FT_Face   face,
                                   FT_ULong  charcode,
                                   FT_ULong  variantSelector );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetVariantSelectors                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return a zero-terminated list of Unicode variant selectors found   */
  /*    in the font.                                                       */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /* <Return>                                                              */
  /*    A pointer to an array of selector code points, or NULL if there is */
  /*    no valid variant selector cmap subtable.                           */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The last item in the array is 0; the array is owned by the         */
  /*    @@FT_Face object but can be overwritten or released on the next     */
  /*    call to a FreeType function.                                       */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt32* )
  FT_Face_GetVariantSelectors( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetVariantsOfChar                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return a zero-terminated list of Unicode variant selectors found   */
  /*    for the specified character code.                                  */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    charcode ::                                                        */
  /*      The character codepoint in Unicode.                              */
  /*                                                                       */
  /* <Return>                                                              */
  /*    A pointer to an array of variant selector code points which are    */
  /*    active for the given character, or NULL if the corresponding list  */
  /*    is empty.                                                          */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The last item in the array is 0; the array is owned by the         */
  /*    @@FT_Face object but can be overwritten or released on the next     */
  /*    call to a FreeType function.                                       */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt32* )
  FT_Face_GetVariantsOfChar( FT_Face   face,
                             FT_ULong  charcode );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetCharsOfVariant                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return a zero-terminated list of Unicode character codes found for */
  /*    the specified variant selector.                                    */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    variantSelector ::                                                 */
  /*      The variant selector code point in Unicode.                      */
  /*                                                                       */
  /* <Return>                                                              */
  /*    A list of all the code points which are specified by this selector */
  /*    (both default and non-default codes are returned) or NULL if there */
  /*    is no valid cmap or the variant selector is invalid.               */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The last item in the array is 0; the array is owned by the         */
  /*    @@FT_Face object but can be overwritten or released on the next     */
  /*    call to a FreeType function.                                       */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt32* )
  FT_Face_GetCharsOfVariant( FT_Face   face,
                             FT_ULong  variantSelector );


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
d3332 1
a3332 1
#define FREETYPE_PATCH  6
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006 by                   */
d28 4
a36 1
  /*************************************************************************/
d39 9
a47 2
#ifndef __FREETYPE_H__
#define __FREETYPE_H__
a58 22

  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    user_allocation                                                    */
  /*                                                                       */
  /* <Title>                                                               */
  /*    User allocation                                                    */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    How client applications should allocate FreeType data structures.  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    FreeType assumes that structures allocated by the user and passed  */
  /*    as arguments are zeroed out except for the actual data.  With      */
  /*    other words, it is recommended to use `calloc' (or variants of it) */
  /*    instead of `malloc' for allocation.                                */
  /*                                                                       */
  /*************************************************************************/



a102 1
  /*    FT_FACE_FLAG_HINTER                                                */
d118 1
a130 4
  /*    FT_Request_Size                                                    */
  /*    FT_Select_Size                                                     */
  /*    FT_Size_Request_Type                                               */
  /*    FT_Size_Request                                                    */
a168 1
  /*    FT_Get_Track_Kerning                                               */
a174 1
  /*    FT_Get_Charmap_Index                                               */
d187 2
a188 2
  /*    @@FT_LOAD_NO_SCALE has been used while loading the glyph, values    */
  /*    are expressed in font units instead.                               */
d191 1
a191 2
  /*    width ::                                                           */
  /*      The glyph's width.                                               */
d193 1
a193 2
  /*    height ::                                                          */
  /*      The glyph's height.                                              */
d195 1
a195 2
  /*    horiBearingX ::                                                    */
  /*      Left side bearing for horizontal layout.                         */
d197 1
a197 2
  /*    horiBearingY ::                                                    */
  /*      Top side bearing for horizontal layout.                          */
d199 1
a199 2
  /*    horiAdvance ::                                                     */
  /*      Advance width for horizontal layout.                             */
d201 1
a201 2
  /*    vertBearingX ::                                                    */
  /*      Left side bearing for vertical layout.                           */
d203 1
a203 2
  /*    vertBearingY ::                                                    */
  /*      Top side bearing for vertical layout.                            */
d205 1
a205 2
  /*    vertAdvance ::                                                     */
  /*      Advance height for vertical layout.                              */
d209 2
a210 2
    FT_Pos  width;
    FT_Pos  height;
d212 7
a218 7
    FT_Pos  horiBearingX;
    FT_Pos  horiBearingY;
    FT_Pos  horiAdvance;

    FT_Pos  vertBearingX;
    FT_Pos  vertBearingY;
    FT_Pos  vertAdvance;
d229 4
a232 3
  /*    This structure models the metrics of a bitmap strike (i.e., a set  */
  /*    of glyphs for a given point size and resolution) in a bitmap font. */
  /*    It is used for the `available_sizes' field of @@FT_Face.            */
d235 3
a237 2
  /*    height :: The vertical distance, in pixels, between two            */
  /*              consecutive baselines.  It is always positive.           */
d239 6
a244 2
  /*    width  :: The average width, in pixels, of all glyphs in the       */
  /*              strike.                                                  */
d246 2
a247 2
  /*    size   :: The nominal size of the strike in 26.6 fractional        */
  /*              points.  This field is not very useful.                  */
d249 1
a249 2
  /*    x_ppem :: The horizontal ppem (nominal width) in 26.6 fractional   */
  /*              pixels.                                                  */
d251 1
a251 2
  /*    y_ppem :: The vertical ppem (nominal height) in 26.6 fractional    */
  /*              pixels.                                                  */
d254 10
d265 4
a268 4
  /*      The nominal size given in a FNT font is not reliable.  Thus when */
  /*      the driver finds it incorrect, it sets `size' to some calculated */
  /*      values and sets `x_ppem' and `y_ppem' to the pixel width and     */
  /*      height given in the font, respectively.                          */
a308 3
  /*    For multi-threading applications each thread should have its own   */
  /*    FT_Library object.                                                 */
  /*                                                                       */
d386 3
a388 2
  /*    A handle to an object used to model a face scaled to a given       */
  /*    character size.                                                    */
d391 6
a396 12
  /*    Each @@FT_Face has an _active_ @@FT_Size object that is used by      */
  /*    functions like @@FT_Load_Glyph to determine the scaling             */
  /*    transformation which is used to load and hint glyphs and metrics.  */
  /*                                                                       */
  /*    You can use @@FT_Set_Char_Size, @@FT_Set_Pixel_Sizes,                */
  /*    @@FT_Request_Size or even @@FT_Select_Size to change the content     */
  /*    (i.e., the scaling values) of the active @@FT_Size.                 */
  /*                                                                       */
  /*    You can use @@FT_New_Size to create additional size objects for a   */
  /*    given @@FT_Face, but they won't be used by other functions until    */
  /*    you activate it through @@FT_Activate_Size.  Only one size can be   */
  /*    activated at any given time per face.                              */
d400 1
a400 1
  /*    of a given size object.                                            */
d417 1
a417 1
  /*    i.e., the glyph's metrics, its image (bitmap or outline), and      */
d438 1
a438 1
  /*    can be `active' and used by @@FT_Get_Char_Index or @@FT_Load_Char.   */
d441 1
a441 1
  /*    `face->num_charmaps' and `face->charmaps' fields of @@FT_FaceRec.   */
d443 1
a443 1
  /*    The currently active charmap is available as `face->charmap'.      */
d464 2
a465 2
  /*    This macro converts four-letter tags into an unsigned long.  It is */
  /*    used to define `encoding' identifiers (see @@FT_Encoding).          */
a471 1
  /*    {                                                                  */
a472 1
  /*    }                                                                  */
d493 2
a494 2
  /*    An enumeration used to specify character sets supported by         */
  /*    charmaps.  Used in the @@FT_Select_Charmap API function.            */
a496 4
  /*    Despite the name, this enumeration lists specific character        */
  /*    repertories (i.e., charsets), and not text encoding methods (e.g., */
  /*    UTF-8, UTF-16, GB2312_EUC, etc.).                                  */
  /*                                                                       */
d500 4
d589 2
a590 2
  /*   However, it also reports the encodings defined explicitly in the    */
  /*   font file, for the cases when they are needed, with the Adobe       */
d595 4
a598 4
  /*   FT_ENCODING_UNICODE).  Use @@FT_Get_BDF_Charset_ID to find out which */
  /*   encoding is really present.  If, for example, the `cs_registry'     */
  /*   field is `KOI8' and the `cs_encoding' field is `R', the font is     */
  /*   encoded in KOI8-R.                                                  */
d601 4
a604 5
  /*   winfonts driver.  Use @@FT_Get_WinFNT_Header and examine the         */
  /*   `charset' field of the @@FT_WinFNT_HeaderRec structure to find out   */
  /*   which encoding is really present.  For example,                     */
  /*   @@FT_WinFNT_ID_CP1251 (204) means Windows code page 1251 (for        */
  /*   Russian).                                                           */
d606 2
a607 2
  /*   FT_ENCODING_NONE is set if `platform_id' is @@TT_PLATFORM_MACINTOSH  */
  /*   and `encoding_id' is not @@TT_MAC_ID_ROMAN (otherwise it is set to   */
d610 2
a611 2
  /*   If `platform_id' is @@TT_PLATFORM_MACINTOSH, use the function  c     */
  /*   @@FT_Get_CMap_Language_ID  to query the Mac language ID which may be */
d619 1
a619 1
  /*   @@TT_MAC_ID_ROMAN and the language ID (minus 1) is                   */
d621 1
a621 1
  /*   @@TT_MAC_ID_ARABIC with `TT_MAC_LANGID_FARSI' means the Farsi        */
d665 18
d748 1
a748 1
  /*    An opaque handle to an `FT_Face_InternalRec' structure, used to    */
d763 2
a764 2
  /*    FreeType root face class structure.  A face object models a        */
  /*    typeface in a font file.                                           */
d767 12
a778 7
  /*    num_faces           :: The number of faces in the font file.  Some */
  /*                           font formats can have multiple faces in     */
  /*                           a font file.                                */
  /*                                                                       */
  /*    face_index          :: The index of the face in the font file.  It */
  /*                           is set to 0 if there is only one face in    */
  /*                           the font file.                              */
d781 2
a782 2
  /*                           information about the face; see             */
  /*                           @@FT_FACE_FLAG_XXX for the details.          */
d785 3
a787 2
  /*                           the face; see @@FT_STYLE_FLAG_XXX for the    */
  /*                           details.                                    */
d789 1
a789 4
  /*    num_glyphs          :: The number of glyphs in the face.  If the   */
  /*                           face is scalable and has sbits (see         */
  /*                           `num_fixed_sizes'), it is set to the number */
  /*                           of outline glyphs.                          */
d808 24
a831 16
  /*                           localized and Unicode versions of this      */
  /*                           string.  Applications should use the format */
  /*                           specific interface to access them.          */
  /*                                                                       */
  /*    num_fixed_sizes     :: The number of bitmap strikes in the face.   */
  /*                           Even if the face is scalable, there might   */
  /*                           still be bitmap strikes, which are called   */
  /*                           `sbits' in that case.                       */
  /*                                                                       */
  /*    available_sizes     :: An array of @@FT_Bitmap_Size for all bitmap  */
  /*                           strikes in the face.  It is set to NULL if  */
  /*                           there is no bitmap strike.                  */
  /*                                                                       */
  /*    num_charmaps        :: The number of charmaps in the face.         */
  /*                                                                       */
  /*    charmaps            :: An array of the charmaps of the face.       */
d837 9
a845 7
  /*                           expressed in font units (see                */
  /*                           `units_per_EM').  The box is large enough   */
  /*                           to contain any glyph from the font.  Thus,  */
  /*                           `bbox.yMax' can be seen as the `maximal     */
  /*                           ascender', and `bbox.yMin' as the `minimal  */
  /*                           descender'.  Only relevant for scalable     */
  /*                           formats.                                    */
d849 4
a852 2
  /*                           TrueType fonts, and 1000 for Type 1 fonts.  */
  /*                           Only relevant for scalable formats.         */
d854 25
a878 11
  /*    ascender            :: The typographic ascender of the face,       */
  /*                           expressed in font units.  For font formats  */
  /*                           not having this information, it is set to   */
  /*                           `bbox.yMax'.  Only relevant for scalable    */
  /*                           formats.                                    */
  /*                                                                       */
  /*    descender           :: The typographic descender of the face,      */
  /*                           expressed in font units.  For font formats  */
  /*                           not having this information, it is set to   */
  /*                           `bbox.yMin'.  Note that this field is       */
  /*                           usually negative.  Only relevant for        */
a880 6
  /*    height              :: The height is the vertical distance         */
  /*                           between two consecutive baselines,          */
  /*                           expressed in font units.  It is always      */
  /*                           positive.  Only relevant for scalable       */
  /*                           formats.                                    */
  /*                                                                       */
d889 4
a892 4
  /*                           relevant for vertical layouts, and is set   */
  /*                           to `height' for fonts that do not provide   */
  /*                           vertical metrics.  Only relevant for        */
  /*                           scalable formats.                           */
d903 6
a908 1
  /*    glyph               :: The face's associated glyph slot(s).        */
a913 4
  /* <Note>                                                                */
  /*   Fields may be changed after a call to @@FT_Attach_File or            */
  /*   @@FT_Attach_Stream.                                                  */
  /*                                                                       */
d983 3
a985 3
  /*      Indicates that the face contains outline glyphs.  This doesn't   */
  /*      prevent bitmap strikes, i.e., a face can have both this and      */
  /*      and @@FT_FACE_FLAG_FIXED_SIZES set.                               */
d988 3
a990 2
  /*      Indicates that the face contains bitmap strikes.  See also the   */
  /*      `num_fixed_sizes' and `available_sizes' fields of @@FT_FaceRec.   */
d1011 2
a1012 3
  /*      @@FT_Get_Kerning.  Otherwise the function always return the       */
  /*      vector (0,0).  Note that FreeType doesn't handle kerning data    */
  /*      from the `GPOS' table (as present in some OpenType fonts).       */
a1032 6
  /*    FT_FACE_FLAG_HINTER ::                                             */
  /*      Set if the font driver has a hinting machine of its own.  For    */
  /*      example, with TrueType fonts, it makes sense to use data from    */
  /*      the SFNT `gasp' table only if the native TrueType hinting engine */
  /*      (with the bytecode interpreter) is available and active.         */
  /*                                                                       */
a1043 1
#define FT_FACE_FLAG_HINTER            ( 1L << 11 )
d1048 12
a1059 13
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_HORIZONTAL( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains
   *   horizontal metrics (this is true for all font formats though).
   *
   * @@also:
   *   @@FT_HAS_VERTICAL can be used to check for vertical metrics.
   *
   */
d1064 9
a1072 10
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_VERTICAL( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains vertical
   *   metrics.
   *
   */
d1077 9
a1085 10
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_KERNING( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains kerning
   *   data that can be accessed with @@FT_Get_Kerning.
   *
   */
d1090 10
a1099 11
  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_SCALABLE( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a scalable
   *   font face (true for TrueType, Type 1, Type 42, CID, OpenType/CFF,
   *   and PFR font formats.
   *
   */
d1104 14
a1117 15
  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_SFNT( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a font
   *   whose format is based on the SFNT storage scheme.  This usually
   *   means: TrueType fonts, OpenType fonts, as well as SFNT-based embedded
   *   bitmap fonts.
   *
   *   If this macro is true, all functions defined in @@FT_SFNT_NAMES_H and
   *   @@FT_TRUETYPE_TABLES_H are available.
   *
   */
d1122 10
a1131 11
  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_FIXED_WIDTH( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a font face
   *   that contains fixed-width (or `monospace', `fixed-pitch', etc.)
   *   glyphs.
   *
   */
d1136 10
a1145 11
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_FIXED_SIZES( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains some
   *   embedded bitmaps.  See the `available_sizes' field of the
   *   @@FT_FaceRec structure.
   *
   */
d1149 15
a1163 1
  /* */
d1166 9
a1174 22
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_FAST_GLYPHS( face )
   *
   * @@description:
   *   Deprecated.
   *
   */
#define FT_HAS_FAST_GLYPHS( face )  0


  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_GLYPH_NAMES( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains some glyph
   *   names that can be accessed through @@FT_Get_Glyph_Name.
   *
   */
d1179 11
a1189 11
  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_MULTIPLE_MASTERS( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains some
   *   multiple masters.  The functions provided by @@FT_MULTIPLE_MASTERS_H
   *   are then available to choose the exact design you want.
   *
   */
d1220 1
a1220 1
  /*    An opaque handle to an `FT_Size_InternalRec' structure, used to    */
d1232 2
a1233 1
  /*    The size metrics structure gives the metrics of a size object.     */
d1236 3
a1238 3
  /*    x_ppem       :: The width of the scaled EM square in pixels, hence */
  /*                    the term `ppem' (pixels per EM).  It is also       */
  /*                    referred to as `nominal width'.                    */
d1240 3
a1242 3
  /*    y_ppem       :: The height of the scaled EM square in pixels,      */
  /*                    hence the term `ppem' (pixels per EM).  It is also */
  /*                    referred to as `nominal height'.                   */
d1244 3
a1246 4
  /*    x_scale      :: A 16.16 fractional scaling value used to convert   */
  /*                    horizontal metrics from font units to 26.6         */
  /*                    fractional pixels.  Only relevant for scalable     */
  /*                    font formats.                                      */
d1248 3
a1250 4
  /*    y_scale      :: A 16.16 fractional scaling value used to convert   */
  /*                    vertical metrics from font units to 26.6           */
  /*                    fractional pixels.  Only relevant for scalable     */
  /*                    font formats.                                      */
d1252 3
a1254 2
  /*    ascender     :: The ascender in 26.6 fractional pixels.  See       */
  /*                    @@FT_FaceRec for the details.                       */
d1256 3
a1258 2
  /*    descender    :: The descender in 26.6 fractional pixels.  See      */
  /*                    @@FT_FaceRec for the details.                       */
d1260 2
a1261 2
  /*    height       :: The height in 26.6 fractional pixels.  See         */
  /*                    @@FT_FaceRec for the details.                       */
d1263 2
a1264 2
  /*    max_advance  :: The maximal advance width in 26.6 fractional       */
  /*                    pixels.  See @@FT_FaceRec for the details.          */
d1267 3
a1269 4
  /*    The scaling values, if relevant, are determined first during a     */
  /*    size changing operation.  The remaining fields are then set by the */
  /*    driver.  For scalable formats, they are usually set to scaled      */
  /*    values of the corresponding fields in @@FT_FaceRec.                 */
d1271 2
a1272 2
  /*    Note that due to glyph hinting, these values might not be exact    */
  /*    for certain fonts.  Thus they must be treated as unreliable        */
d1275 4
a1278 3
  /*    Indeed, the only way to get the exact metrics is to render _all_   */
  /*    glyphs.  As this would be a definite performance hit, it is up to  */
  /*    client applications to perform such computations.                  */
d1285 2
a1286 2
    FT_Fixed   x_scale;     /* scaling values used to convert font    */
    FT_Fixed   y_scale;     /* units to 26.6 fractional pixels        */
d1302 2
a1303 2
  /*    FreeType root size class structure.  A size object models a face   */
  /*    object at a given size.                                            */
a1337 3
  /*    You can however retrieve subglyph information with                 */
  /*    @@FT_Get_SubGlyph_Info.                                             */
  /*                                                                       */
d1347 1
a1347 1
  /*    An opaque handle to an `FT_Slot_InternalRec' structure, used to    */
d1360 2
a1361 2
  /*    container where individual glyphs can be loaded, be they in        */
  /*    outline or bitmap format.                                          */
d1389 4
a1392 4
  /*    linearHoriAdvance :: The advance width of the unhinted glyph.      */
  /*                         Its value is expressed in 16.16 fractional    */
  /*                         pixels, unless @@FT_LOAD_LINEAR_DESIGN is set  */
  /*                         when loading the glyph.  This field can be    */
a1393 1
  /*                         Only relevant for outline glyphs.             */
d1395 10
a1404 6
  /*    linearVertAdvance :: The advance height of the unhinted glyph.     */
  /*                         Its value is expressed in 16.16 fractional    */
  /*                         pixels, unless @@FT_LOAD_LINEAR_DESIGN is set  */
  /*                         when loading the glyph.  This field can be    */
  /*                         important to perform correct WYSIWYG layout.  */
  /*                         Only relevant for outline glyphs.             */
d1411 3
a1413 3
  /*                         @@FT_GLYPH_FORMAT_BITMAP,                      */
  /*                         @@FT_GLYPH_FORMAT_OUTLINE, or                  */
  /*                         @@FT_GLYPH_FORMAT_COMPOSITE, but others are    */
d1418 1
a1418 1
  /*                         @@FT_GLYPH_FORMAT_BITMAP.  Note that the       */
d1426 1
a1426 1
  /*                         @@FT_GLYPH_FORMAT_BITMAP.                      */
d1436 1
a1436 4
  /*                         @@FT_GLYPH_FORMAT_OUTLINE.  Once a glyph is    */
  /*                         loaded, `outline' can be transformed,         */
  /*                         distorted, embolded, etc.  However, it must   */
  /*                         not be freed.                                 */
d1458 3
a1460 11
  /*                         present their own glyph image to client       */
  /*                         applications.  Note that the application      */
  /*                         needs to know about the image format.         */
  /*                                                                       */
  /*    lsb_delta         :: The difference between hinted and unhinted    */
  /*                         left side bearing while autohinting is        */
  /*                         active.  Zero otherwise.                      */
  /*                                                                       */
  /*    rsb_delta         :: The difference between hinted and unhinted    */
  /*                         right side bearing while autohinting is       */
  /*                         active.  Zero otherwise.                      */
d1465 2
a1466 2
  /*    its native format (e.g., an outline glyph for TrueType and Type 1  */
  /*    formats).                                                          */
d1478 2
a1479 30
  /*    position (e.g., coordinates (0,0) on the baseline).  Of course,    */
  /*    `slot->format' is also changed to @@FT_GLYPH_FORMAT_BITMAP.         */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Here a small pseudo code fragment which shows how to use           */
  /*    `lsb_delta' and `rsb_delta':                                       */
  /*                                                                       */
  /*    {                                                                  */
  /*      FT_Pos  origin_x       = 0;                                      */
  /*      FT_Pos  prev_rsb_delta = 0;                                      */
  /*                                                                       */
  /*                                                                       */
  /*      for all glyphs do                                                */
  /*        <compute kern between current and previous glyph and add it to */
  /*         `origin_x'>                                                   */
  /*                                                                       */
  /*        <load glyph with `FT_Load_Glyph'>                              */
  /*                                                                       */
  /*        if ( prev_rsb_delta - face->glyph->lsb_delta >= 32 )           */
  /*          origin_x -= 64;                                              */
  /*        else if ( prev_rsb_delta - face->glyph->lsb_delta < -32 )      */
  /*          origin_x += 64;                                              */
  /*                                                                       */
  /*        prev_rsb_delta = face->glyph->rsb_delta;                       */
  /*                                                                       */
  /*        <save glyph image, or render glyph, or ...>                    */
  /*                                                                       */
  /*        origin_x += face->glyph->advance.x;                            */
  /*      endfor                                                           */
  /*    }                                                                  */
a1507 3
    FT_Pos            lsb_delta;
    FT_Pos            rsb_delta;

d1530 1
a1530 1
  /*    Initialize a new FreeType library object.  The set of modules      */
d1546 36
d1585 1
a1585 1
  /*    Destroy a given FreeType library object and all of its childs,     */
d1617 1
a1617 1
  /*    FT_OPEN_PARAMS      :: Use the `num_params' and `params' fields.   */
d1656 1
a1656 1
  /*    tag  :: A four-byte identification tag.                            */
d1661 1
a1661 1
  /*    The ID and function of parameters are driver-specific.             */
d1677 3
a1679 3
  /*    A structure used to indicate how to open a new font file or        */
  /*    stream.  A pointer to such a structure can be used as a parameter  */
  /*    for the functions @@FT_Open_Face and @@FT_Attach_Stream.             */
d1695 2
a1696 2
  /*                   the face.  If set to 0, FreeType tries to load the  */
  /*                   face with each one of the drivers in its list.      */
d1708 1
a1708 4
  /*    memory file of `memory_size' bytes, located at `memory_address'.   */
  /*    The data are are not copied, and the client is responsible for     */
  /*    releasing and destroying them _after_ the corresponding call to    */
  /*    @@FT_Done_Face.                                                     */
d1716 1
a1716 1
  /*    If the `FT_OPEN_DRIVER' bit is set, @@FT_Open_Face only tries to    */
d1720 2
a1721 1
  /*    `num_params' and `params' is used.  They are ignored otherwise.    */
d1743 2
a1744 1
  /*    This function calls @@FT_Open_Face to open a font by its pathname.  */
d1752 2
a1753 2
  /*    face_index :: The index of the face within the font.  The first    */
  /*                  face has index 0.                                    */
d1756 1
a1756 3
  /*    aface      :: A handle to a new face object.  If `face_index' is   */
  /*                  greater than or equal to zero, it must be non-NULL.  */
  /*                  See @@FT_Open_Face for more details.                  */
d1761 14
d1788 2
a1789 2
  /*    This function calls @@FT_Open_Face to open a font which has been    */
  /*    loaded into memory.                                                */
d1799 2
a1800 2
  /*    face_index :: The index of the face within the font.  The first    */
  /*                  face has index 0.                                    */
d1803 1
a1803 3
  /*    aface      :: A handle to a new face object.  If `face_index' is   */
  /*                  greater than or equal to zero, it must be non-NULL.  */
  /*                  See @@FT_Open_Face for more details.                  */
d1808 16
d1838 3
a1840 2
  /*    Create a face object from a given resource described by            */
  /*    @@FT_Open_Args.                                                     */
d1849 2
a1850 2
  /*    face_index :: The index of the face within the font.  The first    */
  /*                  face has index 0.                                    */
d1853 1
a1853 3
  /*    aface      :: A handle to a new face object.  If `face_index' is   */
  /*                  greater than or equal to zero, it must be non-NULL.  */
  /*                  See note below.                                      */
d1863 5
a1867 12
  /*    FT_Open_Face can be used to quickly check whether the font         */
  /*    format of a given font resource is supported by FreeType.  If the  */
  /*    `face_index' field is negative, the function's return value is 0   */
  /*    if the font format is recognized, or non-zero otherwise;           */
  /*    the function returns a more or less empty face handle in `*aface'  */
  /*    (if `aface' isn't NULL).  The only useful field in this special    */
  /*    case is `face->num_faces' which gives the number of faces within   */
  /*    the font file.  After examination, the returned @@FT_Face structure */
  /*    should be deallocated with a call to @@FT_Done_Face.                */
  /*                                                                       */
  /*    Each new face object created with this function also owns a        */
  /*    default @@FT_Size object, accessible as `face->size'.               */
d1882 4
a1885 1
  /*    This function calls @@FT_Attach_Stream to attach a file.            */
d1891 1
a1891 1
  /*    filepathname :: The pathname.                                      */
d1896 12
d1919 2
a1920 4
  /*    `Attach' data to a face object.  Normally, this is used to read    */
  /*    additional information for the face object.  For example, you can  */
  /*    attach an AFM file that comes with a Type 1 font to get the        */
  /*    kerning values and other metrics.                                  */
d1926 2
a1927 3
  /*    parameters :: A pointer to @@FT_Open_Args which must be filled by   */
  /*                  the caller.                                          */
  /*                                                                       */
d1932 1
a1932 1
  /*    The meaning of the `attach' (i.e., what really happens when the    */
d1951 2
a1952 2
  /*    Discard a given face object, as well as all of its child slots and */
  /*    sizes.                                                             */
a1966 144
  /*    FT_Select_Size                                                     */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Select a bitmap strike.                                            */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face         :: A handle to a target face object.                  */
  /*                                                                       */
  /* <Input>                                                               */
  /*    strike_index :: The index of the bitmap strike in the              */
  /*                    `available_sizes' field of @@FT_FaceRec structure.  */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Select_Size( FT_Face  face,
                  FT_Int   strike_index );


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_Size_Request_Type                                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An enumeration type that lists the supported size request types.   */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_SIZE_REQUEST_TYPE_NOMINAL ::                                    */
  /*      The nominal size.  The `units_per_EM' field of @@FT_FaceRec is    */
  /*      used to determine both scaling values.                           */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_REAL_DIM ::                                   */
  /*      The real dimension.  The sum of the the `Ascender' and (minus    */
  /*      of) the `Descender' fields of @@FT_FaceRec are used to determine  */
  /*      both scaling values.                                             */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_BBOX ::                                       */
  /*      The font bounding box.  The width and height of the `bbox' field */
  /*      of @@FT_FaceRec are used to determine the horizontal and vertical */
  /*      scaling value, respectively.                                     */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_CELL ::                                       */
  /*      The `max_advance_width' field of @@FT_FaceRec is used to          */
  /*      determine the horizontal scaling value; the vertical scaling     */
  /*      value is determined the same way as                              */
  /*      @@FT_SIZE_REQUEST_TYPE_REAL_DIM does.  Finally, both scaling      */
  /*      values are set to the smaller one.  This type is useful if you   */
  /*      want to specify the font size for, say, a window of a given      */
  /*      dimension and 80x24 cells.                                       */
  /*                                                                       */
  /*    FT_SIZE_REQUEST_TYPE_SCALES ::                                     */
  /*      Specify the scaling values directly.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The above descriptions only apply to scalable formats.  For bitmap */
  /*    formats, the behaviour is up to the driver.                        */
  /*                                                                       */
  /*    See the note section of @@FT_Size_Metrics if you wonder how size    */
  /*    requesting relates to scaling values.                              */
  /*                                                                       */
  typedef enum  FT_Size_Request_Type_
  {
    FT_SIZE_REQUEST_TYPE_NOMINAL,
    FT_SIZE_REQUEST_TYPE_REAL_DIM,
    FT_SIZE_REQUEST_TYPE_BBOX,
    FT_SIZE_REQUEST_TYPE_CELL,
    FT_SIZE_REQUEST_TYPE_SCALES,

    FT_SIZE_REQUEST_TYPE_MAX

  } FT_Size_Request_Type;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Size_RequestRec                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A structure used to model a size request.                          */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    type           :: See @@FT_Size_Request_Type.                       */
  /*                                                                       */
  /*    width          :: The desired width.                               */
  /*                                                                       */
  /*    height         :: The desired height.                              */
  /*                                                                       */
  /*    horiResolution :: The horizontal resolution.  If set to zero,      */
  /*                      `width' is treated as a 26.6 fractional pixel    */
  /*                      value.                                           */
  /*                                                                       */
  /*    vertResolution :: The vertical resolution.  If set to zero,        */
  /*                      `height' is treated as a 26.6 fractional pixel   */
  /*                      value.                                           */
  /*                                                                       */
  /* <Note>                                                                */
  /*    If `width' is zero, then the horizontal scaling value is set      */
  /*    equal to the vertical scaling value, and vice versa.               */
  /*                                                                       */
  typedef struct  FT_Size_RequestRec_
  {
    FT_Size_Request_Type  type;
    FT_Long               width;
    FT_Long               height;
    FT_UInt               horiResolution;
    FT_UInt               vertResolution;

  } FT_Size_RequestRec, *FT_Size_Request;


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Request_Size                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Resize the scale of the active @@FT_Size object in a face.          */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face :: A handle to a target face object.                          */
  /*                                                                       */
  /* <Input>                                                               */
  /*    req  :: A pointer to a @@FT_Size_RequestRec.                        */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Although drivers may select the bitmap strike matching the         */
  /*    request, you should not rely on this if you intend to select a     */
  /*    particular bitmap strike.  Use @@FT_Select_Size instead in that     */
  /*    case.                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Request_Size( FT_Face          face,
                   FT_Size_Request  req );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
d1970 7
a1976 2
  /*    This function calls @@FT_Request_Size to request the nominal size   */
  /*    (in points).                                                       */
d1982 1
a1982 1
  /*    char_width      :: The nominal width, in 26.6 fractional points.   */
d1984 2
a1985 1
  /*    char_height     :: The nominal height, in 26.6 fractional points.  */
d1987 1
a1987 1
  /*    horz_resolution :: The horizontal resolution in dpi.               */
d1989 1
a1989 1
  /*    vert_resolution :: The vertical resolution in dpi.                 */
d1995 2
a1996 2
  /*    If either the horizontal or vertical resolution is zero, it is set */
  /*    to a default value of 72dpi.                                       */
d2012 5
a2016 2
  /*    This function calls @@FT_Request_Size to request the nominal size   */
  /*    (in pixels).                                                       */
d2022 1
a2022 1
  /*    pixel_width  :: The nominal width, in pixels.                      */
d2024 1
a2024 1
  /*    pixel_height :: The nominal height, in pixels.                     */
d2029 20
d2061 2
a2062 2
  /*    A function used to load a single glyph into the glyph slot of a    */
  /*    face object.                                                       */
d2066 1
a2066 1
  /*                   is loaded.                                          */
d2083 7
a2089 2
  /*    The loaded glyph may be transformed.  See @@FT_Set_Transform for    */
  /*    the details.                                                       */
d2103 2
a2104 2
  /*    A function used to load a single glyph into the glyph slot of a    */
  /*    face object, according to its character code.                      */
d2108 1
a2108 1
  /*                   is loaded.                                          */
d2124 11
a2134 1
  /*    This function simply calls @@FT_Get_Char_Index and @@FT_Load_Glyph.  */
d2142 136
a2277 126
  /*************************************************************************
   *
   * @@enum:
   *   FT_LOAD_XXX
   *
   * @@description:
   *   A list of bit-field constants used with @@FT_Load_Glyph to indicate
   *   what kind of operations to perform during glyph loading.
   *
   * @@values:
   *   FT_LOAD_DEFAULT ::
   *     Corresponding to 0, this value is used as the default glyph load
   *     operation.  In this case, the following happens:
   *
   *     1. FreeType looks for a bitmap for the glyph corresponding to the
   *        face's current size.  If one is found, the function returns.
   *        The bitmap data can be accessed from the glyph slot (see note
   *        below).
   *
   *     2. If no embedded bitmap is searched or found, FreeType looks for a
   *        scalable outline.  If one is found, it is loaded from the font
   *        file, scaled to device pixels, then `hinted' to the pixel grid
   *        in order to optimize it.  The outline data can be accessed from
   *        the glyph slot (see note below).
   *
   *     Note that by default, the glyph loader doesn't render outlines into
   *     bitmaps.  The following flags are used to modify this default
   *     behaviour to more specific and useful cases.
   *
   *   FT_LOAD_NO_SCALE ::
   *     Don't scale the outline glyph loaded, but keep it in font units.
   *
   *     This flag implies @@FT_LOAD_NO_HINTING and @@FT_LOAD_NO_BITMAP, and
   *     unsets @@FT_LOAD_RENDER.
   *
   *   FT_LOAD_NO_HINTING ::
   *     Disable hinting.  This generally generates `blurrier' bitmap glyph
   *     when the glyph is rendered in any of the anti-aliased modes.  See
   *     also the note below.
   *
   *     This flag is implied by @@FT_LOAD_NO_SCALE.
   *
   *   FT_LOAD_RENDER ::
   *     Call @@FT_Render_Glyph after the glyph is loaded.  By default, the
   *     glyph is rendered in @@FT_RENDER_MODE_NORMAL mode.  This can be
   *     overridden by @@FT_LOAD_TARGET_XXX or @@FT_LOAD_MONOCHROME.
   *
   *     This flag is unset by @@FT_LOAD_NO_SCALE.
   *
   *   FT_LOAD_NO_BITMAP ::
   *     Ignore bitmap strikes when loading.  Bitmap-only fonts ignore this
   *     flag.
   *
   *     @@FT_LOAD_NO_SCALE always sets this flag.
   *
   *   FT_LOAD_VERTICAL_LAYOUT ::
   *     Load the glyph for vertical text layout.  _Don't_ use it as it is
   *     problematic currently.
   *
   *   FT_LOAD_FORCE_AUTOHINT ::
   *     Indicates that the auto-hinter is preferred over the font's native
   *     hinter.  See also the note below.
   *
   *   FT_LOAD_CROP_BITMAP ::
   *     Indicates that the font driver should crop the loaded bitmap glyph
   *     (i.e., remove all space around its black bits).  Not all drivers
   *     implement this.
   *
   *   FT_LOAD_PEDANTIC ::
   *     Indicates that the font driver should perform pedantic verifications
   *     during glyph loading.  This is mostly used to detect broken glyphs
   *     in fonts.  By default, FreeType tries to handle broken fonts also.
   *
   *   FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH ::
   *     Indicates that the font driver should ignore the global advance
   *     width defined in the font.  By default, that value is used as the
   *     advance width for all glyphs when the face has
   *     @@FT_FACE_FLAG_FIXED_WIDTH set.
   *
   *     This flag exists for historical reasons (to support buggy CJK
   *     fonts).
   *
   *   FT_LOAD_NO_RECURSE ::
   *     This flag is only used internally.  It merely indicates that the
   *     font driver should not load composite glyphs recursively.  Instead,
   *     it should set the `num_subglyph' and `subglyphs' values of the
   *     glyph slot accordingly, and set `glyph->format' to
   *     @@FT_GLYPH_FORMAT_COMPOSITE.
   *
   *     The description of sub-glyphs is not available to client
   *     applications for now.
   *
   *     This flag implies @@FT_LOAD_NO_SCALE and @@FT_LOAD_IGNORE_TRANSFORM.
   *
   *   FT_LOAD_IGNORE_TRANSFORM ::
   *     Indicates that the tranform matrix set by @@FT_Set_Transform should
   *     be ignored.
   *
   *   FT_LOAD_MONOCHROME ::
   *     This flag is used with @@FT_LOAD_RENDER to indicate that you want to
   *     render an outline glyph to a 1-bit monochrome bitmap glyph, with
   *     8 pixels packed into each byte of the bitmap data.
   *
   *     Note that this has no effect on the hinting algorithm used.  You
   *     should use @@FT_LOAD_TARGET_MONO instead so that the
   *     monochrome-optimized hinting algorithm is used.
   *
   *   FT_LOAD_LINEAR_DESIGN ::
   *     Indicates that the `linearHoriAdvance' and `linearVertAdvance'
   *     fields of @@FT_GlyphSlotRec should be kept in font units.  See
   *     @@FT_GlyphSlotRec for details.
   *
   *   FT_LOAD_NO_AUTOHINT ::
   *     Disable auto-hinter.  See also the note below.
   *
   * @@note:
   *   By default, hinting is enabled and the font's native hinter (see
   *   @@FT_FACE_FLAG_HINTER) is preferred over the auto-hinter.  You can
   *   disable hinting by setting @@FT_LOAD_NO_HINTING or change the
   *   precedence by setting @@FT_LOAD_FORCE_AUTOHINT.  You can also set
   *   @@FT_LOAD_NO_AUTOHINT in case you don't want the auto-hinter to be
   *   used at all.
   *
   *   Besides deciding which hinter to use, you can also decide which
   *   hinting algorithm to use.  See @@FT_LOAD_TARGET_XXX for details.
   */
a2298 65

  /**************************************************************************
   *
   * @@enum:
   *   FT_LOAD_TARGET_XXX
   *
   * @@description:
   *   A list of values that are used to select a specific hinting algorithm
   *   to use by the hinter.  You should OR one of these values to your
   *   `load_flags' when calling @@FT_Load_Glyph.
   *
   *   Note that font's native hinters may ignore the hinting algorithm you
   *   have specified (e.g., the TrueType bytecode interpreter).  You can set
   *   @@FT_LOAD_FORCE_AUTOHINT to ensure that the auto-hinter is used.
   *
   *   Also note that @@FT_LOAD_TARGET_LIGHT is an exception, in that it
   *   always implies @@FT_LOAD_FORCE_AUTOHINT.
   *
   * @@values:
   *   FT_LOAD_TARGET_NORMAL ::
   *     This corresponds to the default hinting algorithm, optimized for
   *     standard gray-level rendering.  For monochrome output, use
   *     @@FT_LOAD_TARGET_MONO instead.
   *
   *   FT_LOAD_TARGET_LIGHT ::
   *     A lighter hinting algorithm for non-monochrome modes.  Many
   *     generated glyphs are more fuzzy but better resemble its original
   *     shape.  A bit like rendering on Mac OS X.
   *
   *     As a special exception, this target implies @@FT_LOAD_FORCE_AUTOHINT.
   *
   *   FT_LOAD_TARGET_MONO ::
   *     Strong hinting algorithm that should only be used for monochrome
   *     output.  The result is probably unpleasant if the glyph is rendered
   *     in non-monochrome modes.
   *
   *   FT_LOAD_TARGET_LCD ::
   *     A variant of @@FT_LOAD_TARGET_NORMAL optimized for horizontally
   *     decimated LCD displays.
   *
   *   FT_LOAD_TARGET_LCD_V ::
   *     A variant of @@FT_LOAD_TARGET_NORMAL optimized for vertically
   *     decimated LCD displays.
   *
   * @@note:
   *   You should use only _one_ of the FT_LOAD_TARGET_XXX values in your
   *   `load_flags'.  They can't be ORed.
   *
   *   If @@FT_LOAD_RENDER is also set, the glyph is rendered in the
   *   corresponding mode (i.e., the mode which matches the used algorithm
   *   best) unless @@FT_LOAD_MONOCHROME is set.
   *
   *   You can use a hinting algorithm that doesn't correspond to the same
   *   rendering mode.  As an example, it is possible to use the `light'
   *   hinting algorithm and have the results rendered in horizontal LCD
   *   pixel mode, with code like
   *
   *     {
   *       FT_Load_Glyph( face, glyph_index,
   *                      load_flags | FT_LOAD_TARGET_LIGHT );
   *
   *       FT_Render_Glyph( face->glyph, FT_RENDER_MODE_LCD );
   *     }
   */

d2300 1
a2307 12

  /*
   * @@macro:
   *   FT_LOAD_TARGET_MODE
   *
   * @@description:
   *   Return the @@FT_Render_Mode corresponding to a given
   *   @@FT_LOAD_TARGET_XXX value.
   */

#define FT_LOAD_TARGET_MODE( x )  ( (FT_Render_Mode)( ( (x) >> 16 ) & 15 ) )

d2318 2
a2319 2
  /*    images when they are loaded into a glyph slot through              */
  /*    @@FT_Load_Glyph.                                                    */
a2335 3
  /*    Note that this also transforms the `face.glyph.advance' field, but */
  /*    *not* the values in `face.glyph.metrics'.                          */
  /*                                                                       */
d2350 2
a2351 1
  /*    conversion performed on the outline.                               */
d2363 8
a2370 4
  /*      This is equivalent to @@FT_RENDER_MODE_NORMAL.  It is only        */
  /*      defined as a separate value because render modes are also used   */
  /*      indirectly to define hinting algorithm selectors.  See           */
  /*      @@FT_LOAD_TARGET_XXX for details.                                 */
d2376 4
a2379 4
  /*      This mode corresponds to horizontal RGB and BGR sub-pixel        */
  /*      displays, like LCD-screens.  It produces 8-bit bitmaps that are  */
  /*      3 times the width of the original glyph outline in pixels, and   */
  /*      which use the @@FT_PIXEL_MODE_LCD mode.                           */
d2382 1
a2382 1
  /*      This mode corresponds to vertical RGB and BGR sub-pixel displays */
d2389 2
a2390 2
  /*   _not_ _filtered_ to reduce color-fringes.  It is up to the caller   */
  /*   to perform this pass.                                               */
d2411 1
a2411 1
  /*    These constants are deprecated.  Use the corresponding             */
d2428 3
a2430 3
  /*    Convert a given glyph image to a bitmap.  It does so by inspecting */
  /*    the glyph image format, finding the relevant renderer, and         */
  /*    invoking it.                                                       */
d2438 2
a2439 2
  /*                   image into a bitmap.  See @@FT_Render_Mode for a     */
  /*                   list of possible values.                            */
d2519 1
a2519 1
  /*    Return the kerning vector between two glyphs of a same face.       */
d2529 1
a2529 1
  /*                   Determines the scale and dimension of the returned  */
d2533 3
a2535 3
  /*    akerning    :: The kerning vector.  This is either in font units   */
  /*                   or in pixels (26.6 format) for scalable formats,    */
  /*                   and in pixels for fixed-sizes formats.              */
a2556 28
  /*    FT_Get_Track_Kerning                                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the track kerning for a given face object at a given size.  */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face        :: A handle to a source face object.                   */
  /*                                                                       */
  /*    point_size  :: The point size in 16.16 fractional points.          */
  /*                                                                       */
  /*    degree      :: The degree of tightness.                            */
  /*                                                                       */
  /* <Output>                                                              */
  /*    akerning    :: The kerning in 16.16 fractional points.             */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Get_Track_Kerning( FT_Face    face,
                        FT_Fixed   point_size,
                        FT_Int     degree,
                        FT_Fixed*  akerning );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
d2560 2
a2561 3
  /*    Retrieve the ASCII name of a given glyph in a face.  This only     */
  /*    works for those faces where @@FT_HAS_GLYPH_NAMES(face) returns      */
  /*    TRUE.                                                              */
d2572 1
a2572 1
  /*    buffer      :: A pointer to a target buffer where the name is      */
d2581 1
a2581 1
  /*    byte of `buffer' is set to 0 to indicate an empty name.            */
d2587 2
a2588 2
  /*    macro `FT_CONFIG_OPTION_NO_GLYPH_NAMES' is defined in              */
  /*    `include/freetype/config/ftoptions.h'.                             */
d2603 2
a2604 2
  /*    Retrieve the ASCII Postscript name of a given face, if available.  */
  /*    This only works with Postscript and TrueType fonts.                */
d2610 1
a2610 1
  /*    A pointer to the face's Postscript name.  NULL if unavailable.     */
d2613 2
a2614 2
  /*    The returned pointer is owned by the face and is destroyed with    */
  /*    it.                                                                */
d2626 1
a2626 1
  /*    Select a given charmap by its encoding tag (as listed in           */
d2633 1
a2633 1
  /*    encoding :: A handle to the selected encoding.                     */
d2639 1
a2639 1
  /*    This function returns an error if no charmap in the face           */
d2653 2
a2654 1
  /*    Select a given charmap for character code to glyph index mapping.  */
d2666 2
a2667 2
  /*    This function returns an error if the charmap is not part of       */
  /*    the face (i.e., if it is not listed in the `face->charmaps'        */
a2674 21
  /*************************************************************************
   *
   * @@function:
   *   FT_Get_Charmap_Index
   *
   * @@description:
   *   Retrieve index of a given charmap.
   *
   * @@input:
   *   charmap ::
   *     A handle to a charmap.
   *
   * @@return:
   *   The index into the array of character maps within the face to which
   *   `charmap' belongs.
   *
   */
  FT_EXPORT( FT_Int )
  FT_Get_Charmap_Index( FT_CharMap  charmap );


d2681 2
a2682 2
  /*    Return the glyph index of a given character code.  This function   */
  /*    uses a charmap object to do the mapping.                           */
d2693 4
a2696 5
  /*    If you use FreeType to manipulate the contents of font files       */
  /*    directly, be aware that the glyph index returned by this function  */
  /*    doesn't always correspond to the internal indices used within      */
  /*    the file.  This is done to ensure that value 0 always corresponds  */
  /*    to the `missing glyph'.                                            */
d2710 1
a2710 1
  /*    current charmap of a given face.  It also returns the              */
d2742 3
a2744 3
  /*    Note that `*agindex' is set to 0 if the charmap is empty.  The     */
  /*    result itself can be 0 in two cases: if the charmap is empty or    */
  /*    when the value 0 is the first valid character code.                */
d2758 1
a2758 1
  /*    current charmap of a given face following the value `char_code',   */
d2774 2
a2775 2
  /*    over all character codes available in a given charmap.  See the    */
  /*    note for this function for a simple code example.                  */
d2777 2
a2778 2
  /*    Note that `*agindex' is set to 0 when there are no more codes in   */
  /*    the charmap.                                                       */
d2792 1
a2792 1
  /*    Return the glyph index of a given glyph name.  This function uses  */
a2807 79
  /*************************************************************************
   *
   * @@macro:
   *   FT_SUBGLYPH_FLAG_XXX
   *
   * @@description:
   *   A list of constants used to describe subglyphs.  Please refer to the
   *   TrueType specification for the meaning of the various flags.
   *
   * @@values:
   *   FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS ::
   *   FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES ::
   *   FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID ::
   *   FT_SUBGLYPH_FLAG_SCALE ::
   *   FT_SUBGLYPH_FLAG_XY_SCALE ::
   *   FT_SUBGLYPH_FLAG_2X2 ::
   *   FT_SUBGLYPH_FLAG_USE_MY_METRICS ::
   *
   */
#define FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS          1
#define FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES      2
#define FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID        4
#define FT_SUBGLYPH_FLAG_SCALE                   8
#define FT_SUBGLYPH_FLAG_XY_SCALE             0x40
#define FT_SUBGLYPH_FLAG_2X2                  0x80
#define FT_SUBGLYPH_FLAG_USE_MY_METRICS      0x200


  /*************************************************************************
   *
   * @@func:
   *   FT_Get_SubGlyph_Info
   *
   * @@description:
   *   Retrieve a description of a given subglyph.  Only use it if
   *   `glyph->format' is @@FT_GLYPH_FORMAT_COMPOSITE, or an error is
   *   returned.
   *
   * @@input:
   *   glyph ::
   *     The source glyph slot.
   *
   *   sub_index ::
   *     The index of subglyph.  Must be less than `glyph->num_subglyphs'.
   *
   * @@output:
   *   p_index ::
   *     The glyph index of the subglyph.
   *
   *   p_flags ::
   *     The subglyph flags, see @@FT_SUBGLYPH_FLAG_XXX.
   *
   *   p_arg1 ::
   *     The subglyph's first argument (if any).
   *
   *   p_arg2 ::
   *     The subglyph's second argument (if any).
   *
   *   p_transform ::
   *     The subglyph transformation (if any).
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   The values of `*p_arg1', `*p_arg2', and `*p_transform' must be
   *   interpreted depending on the flags returned in `*p_flags'.  See the
   *   TrueType specification for details.
   *
   */
  FT_EXPORT( FT_Error )
  FT_Get_SubGlyph_Info( FT_GlyphSlot  glyph,
                        FT_UInt       sub_index,
                        FT_Int       *p_index,
                        FT_UInt      *p_flags,
                        FT_Int       *p_arg1,
                        FT_Int       *p_arg2,
                        FT_Matrix    *p_transform );

d2818 1
a2818 1
  /*    Crunching fixed numbers and vectors.                               */
d2991 1
a2991 1
  /*    Transform a single vector through a 2x2 matrix.                    */
d3003 2
a3004 81
  FT_Vector_Transform( FT_Vector*        vec,
                       const FT_Matrix*  matrix );


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    version                                                            */
  /*                                                                       */
  /* <Title>                                                               */
  /*    FreeType Version                                                   */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    Functions and macros related to FreeType versions.                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Note that those functions and macros are of limited use because    */
  /*    even a new release of FreeType with only documentation changes     */
  /*    increases the version number.                                      */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************
   *
   *  @@enum:
   *    FREETYPE_XXX
   *
   *  @@description:
   *    These three macros identify the FreeType source code version.
   *    Use @@FT_Library_Version to access them at runtime.
   *
   *  @@values:
   *    FREETYPE_MAJOR :: The major version number.
   *    FREETYPE_MINOR :: The minor version number.
   *    FREETYPE_PATCH :: The patch level.
   *
   *  @@note:
   *    The version number of FreeType if built as a dynamic link library
   *    with the `libtool' package is _not_ controlled by these three
   *    macros.
   */
#define FREETYPE_MAJOR  2
#define FREETYPE_MINOR  2
#define FREETYPE_PATCH  1


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Library_Version                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the version of the FreeType library being used.  This is    */
  /*    useful when dynamically linking to the library, since one cannot   */
  /*    use the macros @@FREETYPE_MAJOR, @@FREETYPE_MINOR, and               */
  /*    @@FREETYPE_PATCH.                                                   */
  /*                                                                       */
  /* <Input>                                                               */
  /*    library :: A source library handle.                                */
  /*                                                                       */
  /* <Output>                                                              */
  /*    amajor  :: The major version number.                               */
  /*                                                                       */
  /*    aminor  :: The minor version number.                               */
  /*                                                                       */
  /*    apatch  :: The patch version number.                               */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The reason why this function takes a `library' argument is because */
  /*    certain programs implement library initialization in a custom way  */
  /*    that doesn't use @@FT_Init_FreeType.                                */
  /*                                                                       */
  /*    In such cases, the library version might not be available before   */
  /*    the library object has been created.                               */
  /*                                                                       */
  FT_EXPORT( void )
  FT_Library_Version( FT_Library   library,
                      FT_Int      *amajor,
                      FT_Int      *aminor,
                      FT_Int      *apatch );
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d7 1
a7 2
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,   */
/*            2010 by                                                      */
d28 8
d63 2
a64 2
  /*    as arguments are zeroed out except for the actual data.  In other  */
  /*    words, it is recommended to use `calloc' (or variants of it)       */
d89 1
a89 1
  /*    The FreeType~2 base font interface.                                */
d92 1
a92 1
  /*    This section describes the public high-level API of FreeType~2.    */
a193 9
  /*    FT_FSTYPE_INSTALLABLE_EMBEDDING                                    */
  /*    FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING                             */
  /*    FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING                              */
  /*    FT_FSTYPE_EDITABLE_EMBEDDING                                       */
  /*    FT_FSTYPE_NO_SUBSETTING                                            */
  /*    FT_FSTYPE_BITMAP_EMBEDDING_ONLY                                    */
  /*                                                                       */
  /*    FT_Get_FSType_Flags                                                */
  /*                                                                       */
a232 4
  /* <Note>                                                                */
  /*    If not disabled with @@FT_LOAD_NO_HINTING, the values represent     */
  /*    dimensions of the hinted glyph (in case hinting is applicable).    */
  /*                                                                       */
d389 2
a390 2
  /*    See @@FT_FaceRec for the publicly accessible fields of a given face */
  /*    object.                                                            */
d419 2
a420 2
  /*    See @@FT_SizeRec for the publicly accessible fields of a given size */
  /*    object.                                                            */
d432 1
a432 1
  /*    is possible to load any of the glyphs contained in its parent      */
d441 1
a441 1
  /*    See @@FT_GlyphSlotRec for the publicly accessible glyph fields.     */
d472 2
a473 2
  /*    See @@FT_CharMapRec for the publicly accessible fields of a given   */
  /*    character map.                                                     */
d488 1
a488 1
  /*    Since many 16-bit compilers don't like 32-bit enumerations, you    */
d521 4
a524 1
  /*    UTF-8, UTF-16, etc.).                                              */
d529 2
a530 2
  /*    FT_ENCODING_NONE ::                                                */
  /*      The encoding value~0 is reserved.                                */
d532 114
a645 118
  /*    FT_ENCODING_UNICODE ::                                             */
  /*      Corresponds to the Unicode character set.  This value covers     */
  /*      all versions of the Unicode repertoire, including ASCII and      */
  /*      Latin-1.  Most fonts include a Unicode charmap, but not all      */
  /*      of them.                                                         */
  /*                                                                       */
  /*      For example, if you want to access Unicode value U+1F028 (and    */
  /*      the font contains it), use value 0x1F028 as the input value for  */
  /*      @@FT_Get_Char_Index.                                              */
  /*                                                                       */
  /*    FT_ENCODING_MS_SYMBOL ::                                           */
  /*      Corresponds to the Microsoft Symbol encoding, used to encode     */
  /*      mathematical symbols in the 32..255 character code range.  For   */
  /*      more information, see `http://www.ceviz.net/symbol.htm'.         */
  /*                                                                       */
  /*    FT_ENCODING_SJIS ::                                                */
  /*      Corresponds to Japanese SJIS encoding.  More info at             */
  /*      at `http://langsupport.japanreference.com/encoding.shtml'.       */
  /*      See note on multi-byte encodings below.                          */
  /*                                                                       */
  /*    FT_ENCODING_GB2312 ::                                              */
  /*      Corresponds to an encoding system for Simplified Chinese as used */
  /*      used in mainland China.                                          */
  /*                                                                       */
  /*    FT_ENCODING_BIG5 ::                                                */
  /*      Corresponds to an encoding system for Traditional Chinese as     */
  /*      used in Taiwan and Hong Kong.                                    */
  /*                                                                       */
  /*    FT_ENCODING_WANSUNG ::                                             */
  /*      Corresponds to the Korean encoding system known as Wansung.      */
  /*      For more information see                                         */
  /*      `http://www.microsoft.com/typography/unicode/949.txt'.           */
  /*                                                                       */
  /*    FT_ENCODING_JOHAB ::                                               */
  /*      The Korean standard character set (KS~C 5601-1992), which        */
  /*      corresponds to MS Windows code page 1361.  This character set    */
  /*      includes all possible Hangeul character combinations.            */
  /*                                                                       */
  /*    FT_ENCODING_ADOBE_LATIN_1 ::                                       */
  /*      Corresponds to a Latin-1 encoding as defined in a Type~1         */
  /*      PostScript font.  It is limited to 256 character codes.          */
  /*                                                                       */
  /*    FT_ENCODING_ADOBE_STANDARD ::                                      */
  /*      Corresponds to the Adobe Standard encoding, as found in Type~1,  */
  /*      CFF, and OpenType/CFF fonts.  It is limited to 256 character     */
  /*      codes.                                                           */
  /*                                                                       */
  /*    FT_ENCODING_ADOBE_EXPERT ::                                        */
  /*      Corresponds to the Adobe Expert encoding, as found in Type~1,    */
  /*      CFF, and OpenType/CFF fonts.  It is limited to 256 character     */
  /*      codes.                                                           */
  /*                                                                       */
  /*    FT_ENCODING_ADOBE_CUSTOM ::                                        */
  /*      Corresponds to a custom encoding, as found in Type~1, CFF, and   */
  /*      OpenType/CFF fonts.  It is limited to 256 character codes.       */
  /*                                                                       */
  /*    FT_ENCODING_APPLE_ROMAN ::                                         */
  /*      Corresponds to the 8-bit Apple roman encoding.  Many TrueType    */
  /*      and OpenType fonts contain a charmap for this encoding, since    */
  /*      older versions of Mac OS are able to use it.                     */
  /*                                                                       */
  /*    FT_ENCODING_OLD_LATIN_2 ::                                         */
  /*      This value is deprecated and was never used nor reported by      */
  /*      FreeType.  Don't use or test for it.                             */
  /*                                                                       */
  /*    FT_ENCODING_MS_SJIS ::                                             */
  /*      Same as FT_ENCODING_SJIS.  Deprecated.                           */
  /*                                                                       */
  /*    FT_ENCODING_MS_GB2312 ::                                           */
  /*      Same as FT_ENCODING_GB2312.  Deprecated.                         */
  /*                                                                       */
  /*    FT_ENCODING_MS_BIG5 ::                                             */
  /*      Same as FT_ENCODING_BIG5.  Deprecated.                           */
  /*                                                                       */
  /*    FT_ENCODING_MS_WANSUNG ::                                          */
  /*      Same as FT_ENCODING_WANSUNG.  Deprecated.                        */
  /*                                                                       */
  /*    FT_ENCODING_MS_JOHAB ::                                            */
  /*      Same as FT_ENCODING_JOHAB.  Deprecated.                          */
  /*                                                                       */
  /* <Note>                                                                */
  /*    By default, FreeType automatically synthesizes a Unicode charmap   */
  /*    for PostScript fonts, using their glyph names dictionaries.        */
  /*    However, it also reports the encodings defined explicitly in the   */
  /*    font file, for the cases when they are needed, with the Adobe      */
  /*    values as well.                                                    */
  /*                                                                       */
  /*    FT_ENCODING_NONE is set by the BDF and PCF drivers if the charmap  */
  /*    is neither Unicode nor ISO-8859-1 (otherwise it is set to          */
  /*    FT_ENCODING_UNICODE).  Use @@FT_Get_BDF_Charset_ID to find out      */
  /*    which encoding is really present.  If, for example, the            */
  /*    `cs_registry' field is `KOI8' and the `cs_encoding' field is `R',  */
  /*    the font is encoded in KOI8-R.                                     */
  /*                                                                       */
  /*    FT_ENCODING_NONE is always set (with a single exception) by the    */
  /*    winfonts driver.  Use @@FT_Get_WinFNT_Header and examine the        */
  /*    `charset' field of the @@FT_WinFNT_HeaderRec structure to find out  */
  /*    which encoding is really present.  For example,                    */
  /*    @@FT_WinFNT_ID_CP1251 (204) means Windows code page 1251 (for       */
  /*    Russian).                                                          */
  /*                                                                       */
  /*    FT_ENCODING_NONE is set if `platform_id' is @@TT_PLATFORM_MACINTOSH */
  /*    and `encoding_id' is not @@TT_MAC_ID_ROMAN (otherwise it is set to  */
  /*    FT_ENCODING_APPLE_ROMAN).                                          */
  /*                                                                       */
  /*    If `platform_id' is @@TT_PLATFORM_MACINTOSH, use the function       */
  /*    @@FT_Get_CMap_Language_ID  to query the Mac language ID which may   */
  /*    be needed to be able to distinguish Apple encoding variants.  See  */
  /*                                                                       */
  /*      http://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/README.TXT  */
  /*                                                                       */
  /*    to get an idea how to do that.  Basically, if the language ID      */
  /*    is~0, don't use it, otherwise subtract 1 from the language ID.     */
  /*    Then examine `encoding_id'.  If, for example, `encoding_id' is     */
  /*    @@TT_MAC_ID_ROMAN and the language ID (minus~1) is                  */
  /*    `TT_MAC_LANGID_GREEK', it is the Greek encoding, not Roman.        */
  /*    @@TT_MAC_ID_ARABIC with `TT_MAC_LANGID_FARSI' means the Farsi       */
  /*    variant the Arabic encoding.                                       */
d651 2
a652 2
    FT_ENC_TAG( FT_ENCODING_MS_SYMBOL, 's', 'y', 'm', 'b' ),
    FT_ENC_TAG( FT_ENCODING_UNICODE,   'u', 'n', 'i', 'c' ),
d756 1
a756 1
  /*    This structure might change between releases of FreeType~2 and is  */
d777 1
a777 1
  /*                           is set to~0 if there is only one face in    */
a792 3
  /*                           For CID-keyed fonts, this value gives the   */
  /*                           highest CID used in the font.               */
  /*                                                                       */
a801 2
  /*                           Can be NULL (e.g., in fonts embedded in a   */
  /*                           PDF file).                                  */
a838 4
  /*                           Note that the bounding box might be off by  */
  /*                           (at least) one pixel for hinted fonts.  See */
  /*                           @@FT_Size_Metrics for further discussion.    */
  /*                                                                       */
d841 1
a841 1
  /*                           TrueType fonts, and 1000 for Type~1 fonts.  */
d877 1
a877 1
  /*                           underline line for this face.  It is the    */
d892 2
a893 2
  /*    Fields may be changed after a call to @@FT_Attach_File or           */
  /*    @@FT_Attach_Stream.                                                 */
d916 1
a916 3
    /*# The following member variables (down to `underline_thickness') */
    /*# are only relevant to scalable outlines; cf. @@FT_Bitmap_Size    */
    /*# for bitmap fonts.                                              */
a1019 30
  /*    FT_FACE_FLAG_CID_KEYED ::                                          */
  /*      Set if the font is CID-keyed.  In that case, the font is not     */
  /*      accessed by glyph indices but by CID values.  For subsetted      */
  /*      CID-keyed fonts this has the consequence that not all index      */
  /*      values are a valid argument to FT_Load_Glyph.  Only the CID      */
  /*      values for which corresponding glyphs in the subsetted font      */
  /*      exist make FT_Load_Glyph return successfully; in all other cases */
  /*      you get an `FT_Err_Invalid_Argument' error.                      */
  /*                                                                       */
  /*      Note that CID-keyed fonts which are in an SFNT wrapper don't     */
  /*      have this flag set since the glyphs are accessed in the normal   */
  /*      way (using contiguous indices); the `CID-ness' isn't visible to  */
  /*      the application.                                                 */
  /*                                                                       */
  /*    FT_FACE_FLAG_TRICKY ::                                             */
  /*      Set if the font is `tricky', this is, it always needs the        */
  /*      font format's native hinting engine to get a reasonable result.  */
  /*      A typical example is the Chinese font `mingli.ttf' which uses    */
  /*      TrueType bytecode instructions to move and scale all of its      */
  /*      subglyphs.                                                       */
  /*                                                                       */
  /*      It is not possible to autohint such fonts using                  */
  /*      @@FT_LOAD_FORCE_AUTOHINT; it will also ignore                     */
  /*      @@FT_LOAD_NO_HINTING.  You have to set both FT_LOAD_NO_HINTING    */
  /*      and @@FT_LOAD_NO_AUTOHINT to really disable hinting; however, you */
  /*      probably never want this except for demonstration purposes.      */
  /*                                                                       */
  /*      Currently, there are six TrueType fonts in the list of tricky    */
  /*      fonts; they are hard-coded in file `ttobjs.c'.                   */
  /*                                                                       */
d1032 2
a1033 2
#define FT_FACE_FLAG_CID_KEYED         ( 1L << 12 )
#define FT_FACE_FLAG_TRICKY            ( 1L << 13 )
d1088 1
a1088 1
   *   font face (true for TrueType, Type~1, Type~42, CID, OpenType/CFF,
d1144 2
a1187 32
  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_CID_KEYED( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains a CID-keyed
   *   font.  See the discussion of @@FT_FACE_FLAG_CID_KEYED for more
   *   details.
   *
   *   If this macro is true, all functions defined in @@FT_CID_H are
   *   available.
   *
   */
#define FT_IS_CID_KEYED( face ) \
          ( face->face_flags & FT_FACE_FLAG_CID_KEYED )


  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_TRICKY( face )
   *
   * @@description:
   *   A macro that returns true whenever a face represents a `tricky' font.
   *   See the discussion of @@FT_FACE_FLAG_TRICKY for more details.
   *
   */
#define FT_IS_TRICKY( face ) \
          ( face->face_flags & FT_FACE_FLAG_TRICKY )


d1190 1
a1190 1
  /* <Const>                                                               */
d1199 1
a1199 1
  /*      Indicates that a given face style is italic or oblique.          */
a1203 6
  /* <Note>                                                                */
  /*    The style information as provided by FreeType is very basic.  More */
  /*    details are beyond the scope and should be done on a higher level  */
  /*    (for example, by analyzing various fields of the `OS/2' table in   */
  /*    SFNT based fonts).                                                 */
  /*                                                                       */
d1215 1
a1215 1
  /*    model private data of a given @@FT_Size object.                     */
a1272 2
  /*    The FT_Size_Metrics structure is valid for bitmap fonts also.      */
  /*                                                                       */
d1344 1
a1344 1
  /*    model private data of a given @@FT_GlyphSlot object.                */
d1399 2
a1400 7
  /*    advance           :: This shorthand is, depending on               */
  /*                         @@FT_LOAD_IGNORE_TRANSFORM, the transformed    */
  /*                         advance width for the glyph (in 26.6          */
  /*                         fractional pixel format).  As specified with  */
  /*                         @@FT_LOAD_VERTICAL_LAYOUT, it uses either the  */
  /*                         `horiAdvance' or the `vertAdvance' value of   */
  /*                         `metrics' field.                              */
d1424 1
a1424 1
  /*                         glyph scanline, upwards y~coordinates being   */
d1447 1
a1447 1
  /*                         TrueType bytecode, Type~1 charstrings, etc.). */
d1469 1
a1469 1
  /*    its native format (e.g., an outline glyph for TrueType and Type~1  */
d1474 1
a1474 1
  /*    the native image's format, then invokes it.                        */
d1477 1
a1477 1
  /*    the slot's face transformation fields, then converting it into a   */
d1572 1
a1572 6
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    In case you want to provide your own memory allocating routines,   */
  /*    use @@FT_New_Library instead, followed by a call to                 */
  /*    @@FT_Add_Default_Modules (or a series of calls to @@FT_Add_Module).  */
d1584 1
a1584 1
  /*    Destroy a given FreeType library object and all of its children,   */
d1591 1
a1591 1
  /*    FreeType error code.  0~means success.                             */
d1607 1
a1607 1
  /*    FT_OPEN_MEMORY   :: This is a memory-based stream.                 */
d1609 1
a1609 1
  /*    FT_OPEN_STREAM   :: Copy the stream from the `stream' field.       */
d1611 2
a1612 2
  /*    FT_OPEN_PATHNAME :: Create a new input stream from a C~path        */
  /*                        name.                                          */
d1614 1
a1614 1
  /*    FT_OPEN_DRIVER   :: Use the `driver' field.                        */
d1616 1
a1616 1
  /*    FT_OPEN_PARAMS   :: Use the `num_params' and `params' fields.      */
d1618 1
a1618 1
  /*    ft_open_memory   :: Deprecated; use @@FT_OPEN_MEMORY instead.       */
d1620 1
a1620 1
  /*    ft_open_stream   :: Deprecated; use @@FT_OPEN_STREAM instead.       */
d1622 1
a1622 1
  /*    ft_open_pathname :: Deprecated; use @@FT_OPEN_PATHNAME instead.     */
d1624 1
a1624 1
  /*    ft_open_driver   :: Deprecated; use @@FT_OPEN_DRIVER instead.       */
d1626 1
a1626 1
  /*    ft_open_params   :: Deprecated; use @@FT_OPEN_PARAMS instead.       */
d1651 2
a1652 2
  /*    A simple structure used to pass more or less generic parameters to */
  /*    @@FT_Open_Face.                                                     */
d1660 1
a1660 2
  /*    The ID and function of parameters are driver-specific.  See the    */
  /*    various FT_PARAM_TAG_XXX flags for more information.               */
d1694 1
a1694 1
  /*                   the face.  If set to~0, FreeType tries to load the  */
a1723 4
  /*    Ideally, both the `pathname' and `params' fields should be tagged  */
  /*    as `const'; this is missing for API backwards compatibility.  In   */
  /*    other words, applications should treat them as read-only.          */
  /*                                                                       */
d1753 1
a1753 1
  /*                  face has index~0.                                    */
d1761 1
a1761 1
  /*    FreeType error code.  0~means success.                             */
d1788 1
a1788 1
  /*                  face has index~0.                                    */
d1796 1
a1796 4
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    You must not deallocate the memory before calling @@FT_Done_Face.   */
d1823 1
a1823 1
  /*                  face has index~0.                                    */
d1831 1
a1831 1
  /*    FreeType error code.  0~means success.                             */
d1840 1
a1840 1
  /*    `face_index' field is negative, the function's return value is~0   */
d1873 1
a1873 1
  /*    FreeType error code.  0~means success.                             */
d1888 1
a1888 1
  /*    attach an AFM file that comes with a Type~1 font to get the        */
d1899 1
a1899 1
  /*    FreeType error code.  0~means success.                             */
d1928 1
a1928 1
  /*    FreeType error code.  0~means success.                             */
d1950 1
a1950 1
  /*    FreeType error code.  0~means success.                             */
d2036 2
a2037 2
  /*    If `width' is zero, then the horizontal scaling value is set equal */
  /*    to the vertical scaling value, and vice versa.                     */
d2047 1
a2047 12
  } FT_Size_RequestRec;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Size_Request                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A handle to a size request structure.                              */
  /*                                                                       */
  typedef struct FT_Size_RequestRec_  *FT_Size_Request;
d2065 1
a2065 1
  /*    FreeType error code.  0~means success.                             */
d2100 1
a2100 1
  /*    FreeType error code.  0~means success.                             */
a2102 3
  /*    If either the character width or height is zero, it is set equal   */
  /*    to the other value.                                                */
  /*                                                                       */
d2104 1
a2104 6
  /*    equal to the other value.                                          */
  /*                                                                       */
  /*    A character width or height smaller than 1pt is set to 1pt; if     */
  /*    both resolution values are zero, they are set to 72dpi.            */
  /*                                                                       */
  /*    Don't use this function if you are using the FreeType cache API.   */
d2132 1
a2132 1
  /*    FreeType error code.  0~means success.                             */
d2165 1
a2165 1
  /*    FreeType error code.  0~means success.                             */
a2170 5
  /*    For subsetted CID-keyed fonts, `FT_Err_Invalid_Argument' is        */
  /*    returned for invalid CID values (this is, for CID values which     */
  /*    don't have a corresponding glyph in the font).  See the discussion */
  /*    of the @@FT_FACE_FLAG_CID_KEYED flag for more details.              */
  /*                                                                       */
d2201 1
a2201 1
  /*    FreeType error code.  0~means success.                             */
d2223 1
a2223 1
   *     Corresponding to~0, this value is used as the default glyph load
d2307 1
a2307 1
   *     Indicates that the transform matrix set by @@FT_Set_Transform should
d2313 1
a2313 1
   *     8~pixels packed into each byte of the bitmap data.
d2316 1
a2316 1
   *     should rather use @@FT_LOAD_TARGET_MONO so that the
a2334 3
   *   See the description of @@FT_FACE_FLAG_TRICKY for a special exception
   *   (affecting only a handful of Asian fonts).
   *
a2336 1
   *
d2352 3
a2358 4
  /* used internally only by certain font drivers! */
#define FT_LOAD_ADVANCE_ONLY                 0x100
#define FT_LOAD_SBITS_ONLY                   0x4000

d2386 1
a2386 1
   *     shape.  A bit like rendering on Mac OS~X.
a2421 1
   *
a2422 1
#define FT_LOAD_TARGET_( x )   ( (FT_Int32)( (x) & 15 ) << 16 )
d2424 7
a2430 5
#define FT_LOAD_TARGET_NORMAL  FT_LOAD_TARGET_( FT_RENDER_MODE_NORMAL )
#define FT_LOAD_TARGET_LIGHT   FT_LOAD_TARGET_( FT_RENDER_MODE_LIGHT  )
#define FT_LOAD_TARGET_MONO    FT_LOAD_TARGET_( FT_RENDER_MODE_MONO   )
#define FT_LOAD_TARGET_LCD     FT_LOAD_TARGET_( FT_RENDER_MODE_LCD    )
#define FT_LOAD_TARGET_LCD_V   FT_LOAD_TARGET_( FT_RENDER_MODE_LCD_V  )
d2433 1
a2433 2
  /**************************************************************************
   *
a2439 1
   *
d2441 1
d2444 2
d2461 1
a2461 1
  /*    matrix :: A pointer to the transformation's 2x2 matrix.  Use~0 for */
d2463 1
a2463 1
  /*    delta  :: A pointer to the translation vector.  Use~0 for the null */
d2488 1
a2488 1
  /*    FreeType~2.  Each mode corresponds to a specific type of scanline  */
d2491 3
a2493 5
  /*    For bitmap fonts and embedded bitmaps the `bitmap->pixel_mode'     */
  /*    field in the @@FT_GlyphSlotRec structure gives the format of the    */
  /*    returned bitmap.                                                   */
  /*                                                                       */
  /*    All modes except @@FT_RENDER_MODE_MONO use 256 levels of opacity.   */
d2498 1
a2498 1
  /*      anti-aliased bitmaps.                                            */
d2507 1
a2507 2
  /*      This mode corresponds to 1-bit bitmaps (with 2~levels of         */
  /*      opacity).                                                        */
d2511 2
a2512 2
  /*      displays like LCD screens.  It produces 8-bit bitmaps that are   */
  /*      3~times the width of the original glyph outline in pixels, and   */
d2518 1
a2518 1
  /*      8-bit bitmaps that are 3~times the height of the original        */
d2522 3
a2524 10
  /*    The LCD-optimized glyph bitmaps produced by FT_Render_Glyph can be */
  /*    filtered to reduce color-fringes by using @@FT_Library_SetLcdFilter */
  /*    (not active in the default builds).  It is up to the caller to     */
  /*    either call @@FT_Library_SetLcdFilter (if available) or do the      */
  /*    filtering itself.                                                  */
  /*                                                                       */
  /*    The selected render mode only affects vector glyphs of a font.     */
  /*    Embedded bitmaps often have a different pixel mode like            */
  /*    @@FT_PIXEL_MODE_MONO.  You can use @@FT_Bitmap_Convert to transform  */
  /*    them into 8-bit pixmaps.                                           */
d2549 2
a2550 2
  /*    ft_render_mode_normal :: see @@FT_RENDER_MODE_NORMAL                */
  /*    ft_render_mode_mono   :: see @@FT_RENDER_MODE_MONO                  */
d2576 1
a2576 1
  /*    FreeType error code.  0~means success.                             */
d2594 1
a2594 1
  /*                           distances (value is~0).                     */
d2672 1
a2672 1
  /*    FreeType error code.  0~means success.                             */
d2697 1
a2697 1
  /*    face       :: A handle to a source face object.                    */
d2699 1
a2699 1
  /*    point_size :: The point size in 16.16 fractional points.           */
d2701 1
a2701 1
  /*    degree     :: The degree of tightness.                             */
d2704 1
a2704 1
  /*    akerning   :: The kerning in 16.16 fractional points.              */
d2707 1
a2707 1
  /*    FreeType error code.  0~means success.                             */
d2723 2
a2724 1
  /*    works for those faces where @@FT_HAS_GLYPH_NAMES(face) returns~1.   */
d2739 1
a2739 1
  /*    FreeType error code.  0~means success.                             */
d2744 1
a2744 1
  /*    byte of `buffer' is set to~0 to indicate an empty name.            */
d2766 2
a2767 2
  /*    Retrieve the ASCII PostScript name of a given face, if available.  */
  /*    This only works with PostScript and TrueType fonts.                */
d2773 1
a2773 1
  /*    A pointer to the face's PostScript name.  NULL if unavailable.     */
d2799 1
a2799 1
  /*    FreeType error code.  0~means success.                             */
a2804 6
  /*    Because many fonts contain more than a single cmap for Unicode     */
  /*    encoding, this function has some special code to select the one    */
  /*    which covers Unicode best (`best' in the sense that a UCS-4 cmap   */
  /*    is preferred to a UCS-2 cmap).  It is thus preferable to           */
  /*    @@FT_Set_Charmap in this case.                                      */
  /*                                                                       */
d2825 1
a2825 1
  /*    FreeType error code.  0~means success.                             */
a2831 2
  /*    It also fails if a type~14 charmap is selected.                    */
  /*                                                                       */
d2873 1
a2873 1
  /*    The glyph index.  0~means `undefined character code'.              */
d2879 1
a2879 1
  /*    the file.  This is done to ensure that value~0 always corresponds  */
d2901 1
a2901 1
  /*    agindex :: Glyph index of first character code.  0~if charmap is   */
d2926 3
a2928 3
  /*    Note that `*agindex' is set to~0 if the charmap is empty.  The     */
  /*    result itself can be~0 in two cases: if the charmap is empty or    */
  /*    if the value~0 is the first valid character code.                  */
d2950 1
a2950 1
  /*    agindex   :: Glyph index of next character code.  0~if charmap     */
d2961 1
a2961 1
  /*    Note that `*agindex' is set to~0 when there are no more codes in   */
d2985 1
a2985 1
  /*    The glyph index.  0~means `undefined character code'.              */
d3027 2
a3028 2
   *   `glyph->format' is @@FT_GLYPH_FORMAT_COMPOSITE; an error is
   *   returned otherwise.
d3035 1
a3035 2
   *     The index of the subglyph.  Must be less than
   *     `glyph->num_subglyphs'.
d3054 1
a3054 1
   *   FreeType error code.  0~means success.
a3073 299
  /* <Enum>                                                                */
  /*    FT_FSTYPE_XXX                                                      */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A list of bit flags used in the `fsType' field of the OS/2 table   */
  /*    in a TrueType or OpenType font and the `FSType' entry in a         */
  /*    PostScript font.  These bit flags are returned by                  */
  /*    @@FT_Get_FSType_Flags; they inform client applications of embedding */
  /*    and subsetting restrictions associated with a font.                */
  /*                                                                       */
  /*    See http://www.adobe.com/devnet/acrobat/pdfs/FontPolicies.pdf for  */
  /*    more details.                                                      */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_FSTYPE_INSTALLABLE_EMBEDDING ::                                 */
  /*      Fonts with no fsType bit set may be embedded and permanently     */
  /*      installed on the remote system by an application.                */
  /*                                                                       */
  /*    FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING ::                          */
  /*      Fonts that have only this bit set must not be modified, embedded */
  /*      or exchanged in any manner without first obtaining permission of */
  /*      the font software copyright owner.                               */
  /*                                                                       */
  /*    FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING ::                           */
  /*      If this bit is set, the font may be embedded and temporarily     */
  /*      loaded on the remote system.  Documents containing Preview &     */
  /*      Print fonts must be opened `read-only'; no edits can be applied  */
  /*      to the document.                                                 */
  /*                                                                       */
  /*    FT_FSTYPE_EDITABLE_EMBEDDING ::                                    */
  /*      If this bit is set, the font may be embedded but must only be    */
  /*      installed temporarily on other systems.  In contrast to Preview  */
  /*      & Print fonts, documents containing editable fonts may be opened */
  /*      for reading, editing is permitted, and changes may be saved.     */
  /*                                                                       */
  /*    FT_FSTYPE_NO_SUBSETTING ::                                         */
  /*      If this bit is set, the font may not be subsetted prior to       */
  /*      embedding.                                                       */
  /*                                                                       */
  /*    FT_FSTYPE_BITMAP_EMBEDDING_ONLY ::                                 */
  /*      If this bit is set, only bitmaps contained in the font may be    */
  /*      embedded; no outline data may be embedded.  If there are no      */
  /*      bitmaps available in the font, then the font is unembeddable.    */
  /*                                                                       */
  /* <Note>                                                                */
  /*    While the fsType flags can indicate that a font may be embedded, a */
  /*    license with the font vendor may be separately required to use the */
  /*    font in this way.                                                  */
  /*                                                                       */
#define FT_FSTYPE_INSTALLABLE_EMBEDDING         0x0000
#define FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING  0x0002
#define FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING   0x0004
#define FT_FSTYPE_EDITABLE_EMBEDDING            0x0008
#define FT_FSTYPE_NO_SUBSETTING                 0x0100
#define FT_FSTYPE_BITMAP_EMBEDDING_ONLY         0x0200


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Get_FSType_Flags                                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the fsType flags for a font.                                */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face :: A handle to the source face object.                        */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The fsType flags, @@FT_FSTYPE_XXX.                                  */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Use this function rather than directly reading the `fs_type' field */
  /*    in the @@PS_FontInfoRec structure which is only guaranteed to       */
  /*    return the correct results for Type~1 fonts.                       */
  /*                                                                       */
  FT_EXPORT( FT_UShort )
  FT_Get_FSType_Flags( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    glyph_variants                                                     */
  /*                                                                       */
  /* <Title>                                                               */
  /*    Glyph Variants                                                     */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    The FreeType~2 interface to Unicode Ideographic Variation          */
  /*    Sequences (IVS), using the SFNT cmap format~14.                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Many CJK characters have variant forms.  They are a sort of grey   */
  /*    area somewhere between being totally irrelevant and semantically   */
  /*    distinct; for this reason, the Unicode consortium decided to       */
  /*    introduce Ideographic Variation Sequences (IVS), consisting of a   */
  /*    Unicode base character and one of 240 variant selectors            */
  /*    (U+E0100-U+E01EF), instead of further extending the already huge   */
  /*    code range for CJK characters.                                     */
  /*                                                                       */
  /*    An IVS is registered and unique; for further details please refer  */
  /*    to Unicode Technical Report #37, the Ideographic Variation         */
  /*    Database.  To date (October 2007), the character with the most     */
  /*    variants is U+908A, having 8~such IVS.                             */
  /*                                                                       */
  /*    Adobe and MS decided to support IVS with a new cmap subtable       */
  /*    (format~14).  It is an odd subtable because it is not a mapping of */
  /*    input code points to glyphs, but contains lists of all variants    */
  /*    supported by the font.                                             */
  /*                                                                       */
  /*    A variant may be either `default' or `non-default'.  A default     */
  /*    variant is the one you will get for that code point if you look it */
  /*    up in the standard Unicode cmap.  A non-default variant is a       */
  /*    different glyph.                                                   */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetCharVariantIndex                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return the glyph index of a given character code as modified by    */
  /*    the variation selector.                                            */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    charcode ::                                                        */
  /*      The character code point in Unicode.                             */
  /*                                                                       */
  /*    variantSelector ::                                                 */
  /*      The Unicode code point of the variation selector.                */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The glyph index.  0~means either `undefined character code', or    */
  /*    `undefined selector code', or `no variation selector cmap          */
  /*    subtable', or `current CharMap is not Unicode'.                    */
  /*                                                                       */
  /* <Note>                                                                */
  /*    If you use FreeType to manipulate the contents of font files       */
  /*    directly, be aware that the glyph index returned by this function  */
  /*    doesn't always correspond to the internal indices used within      */
  /*    the file.  This is done to ensure that value~0 always corresponds  */
  /*    to the `missing glyph'.                                            */
  /*                                                                       */
  /*    This function is only meaningful if                                */
  /*      a) the font has a variation selector cmap sub table,             */
  /*    and                                                                */
  /*      b) the current charmap has a Unicode encoding.                   */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt )
  FT_Face_GetCharVariantIndex( FT_Face   face,
                               FT_ULong  charcode,
                               FT_ULong  variantSelector );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetCharVariantIsDefault                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Check whether this variant of this Unicode character is the one to */
  /*    be found in the `cmap'.                                            */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    charcode ::                                                        */
  /*      The character codepoint in Unicode.                              */
  /*                                                                       */
  /*    variantSelector ::                                                 */
  /*      The Unicode codepoint of the variation selector.                 */
  /*                                                                       */
  /* <Return>                                                              */
  /*    1~if found in the standard (Unicode) cmap, 0~if found in the       */
  /*    variation selector cmap, or -1 if it is not a variant.             */
  /*                                                                       */
  /* <Note>                                                                */
  /*    This function is only meaningful if the font has a variation       */
  /*    selector cmap subtable.                                            */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Int )
  FT_Face_GetCharVariantIsDefault( FT_Face   face,
                                   FT_ULong  charcode,
                                   FT_ULong  variantSelector );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetVariantSelectors                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return a zero-terminated list of Unicode variant selectors found   */
  /*    in the font.                                                       */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /* <Return>                                                              */
  /*    A pointer to an array of selector code points, or NULL if there is */
  /*    no valid variant selector cmap subtable.                           */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The last item in the array is~0; the array is owned by the         */
  /*    @@FT_Face object but can be overwritten or released on the next     */
  /*    call to a FreeType function.                                       */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt32* )
  FT_Face_GetVariantSelectors( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetVariantsOfChar                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return a zero-terminated list of Unicode variant selectors found   */
  /*    for the specified character code.                                  */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    charcode ::                                                        */
  /*      The character codepoint in Unicode.                              */
  /*                                                                       */
  /* <Return>                                                              */
  /*    A pointer to an array of variant selector code points which are    */
  /*    active for the given character, or NULL if the corresponding list  */
  /*    is empty.                                                          */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The last item in the array is~0; the array is owned by the         */
  /*    @@FT_Face object but can be overwritten or released on the next     */
  /*    call to a FreeType function.                                       */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt32* )
  FT_Face_GetVariantsOfChar( FT_Face   face,
                             FT_ULong  charcode );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_GetCharsOfVariant                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Return a zero-terminated list of Unicode character codes found for */
  /*    the specified variant selector.                                    */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face ::                                                            */
  /*      A handle to the source face object.                              */
  /*                                                                       */
  /*    variantSelector ::                                                 */
  /*      The variant selector code point in Unicode.                      */
  /*                                                                       */
  /* <Return>                                                              */
  /*    A list of all the code points which are specified by this selector */
  /*    (both default and non-default codes are returned) or NULL if there */
  /*    is no valid cmap or the variant selector is invalid.               */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The last item in the array is~0; the array is owned by the         */
  /*    @@FT_Face object but can be overwritten or released on the next     */
  /*    call to a FreeType function.                                       */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.6                                                              */
  /*                                                                       */
  FT_EXPORT( FT_UInt32* )
  FT_Face_GetCharsOfVariant( FT_Face   face,
                             FT_ULong  variantSelector );


  /*************************************************************************/
  /*                                                                       */
a3129 6
  /* */

  /* The following #if 0 ... #endif is for the documentation formatter, */
  /* hiding the internal `FT_MULFIX_INLINED' macro.                     */

#if 0
a3162 11
  /* */
#endif

#ifdef FT_MULFIX_INLINED
#define FT_MulFix( a, b )  FT_MULFIX_INLINED( a, b )
#else
  FT_EXPORT( FT_Long )
  FT_MulFix( FT_Long  a,
             FT_Long  b );
#endif

d3183 2
a3184 2
  /*    The optimization for FT_DivFix() is simple: If (a~<<~16) fits in   */
  /*    32~bits, then the division is computed directly.  Otherwise, we    */
d3291 2
a3292 16
   * @@enum:
   *   FREETYPE_XXX
   *
   * @@description:
   *   These three macros identify the FreeType source code version.
   *   Use @@FT_Library_Version to access them at runtime.
   *
   * @@values:
   *   FREETYPE_MAJOR :: The major version number.
   *   FREETYPE_MINOR :: The minor version number.
   *   FREETYPE_PATCH :: The patch level.
   *
   * @@note:
   *   The version number of FreeType if built as a dynamic link library
   *   with the `libtool' package is _not_ controlled by these three
   *   macros.
d3294 13
d3309 2
a3310 2
#define FREETYPE_MINOR  3
#define FREETYPE_PATCH  12
a3348 55
  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_CheckTrueTypePatents                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Parse all bytecode instructions of a TrueType font file to check   */
  /*    whether any of the patented opcodes are used.  This is only useful */
  /*    if you want to be able to use the unpatented hinter with           */
  /*    fonts that do *not* use these opcodes.                             */
  /*                                                                       */
  /*    Note that this function parses *all* glyph instructions in the     */
  /*    font file, which may be slow.                                      */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face :: A face handle.                                             */
  /*                                                                       */
  /* <Return>                                                              */
  /*    1~if this is a TrueType font that uses one of the patented         */
  /*    opcodes, 0~otherwise.                                              */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.5                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Bool )
  FT_Face_CheckTrueTypePatents( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    FT_Face_SetUnpatentedHinting                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Enable or disable the unpatented hinter for a given face.          */
  /*    Only enable it if you have determined that the face doesn't        */
  /*    use any patented opcodes (see @@FT_Face_CheckTrueTypePatents).      */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face  :: A face handle.                                            */
  /*                                                                       */
  /*    value :: New boolean setting.                                      */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The old setting value.  This will always be false if this is not   */
  /*    an SFNT font, or if the unpatented hinter is not compiled in this  */
  /*    instance of the library.                                           */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.3.5                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Bool )
  FT_Face_SetUnpatentedHinting( FT_Face  face,
                                FT_Bool  value );

@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 2
a8 1
/*  Copyright 1996-2016 by                                                 */
a19 4
#ifndef FREETYPE_H_
#define FREETYPE_H_


d29 4
d35 1
a36 1
#include FT_ERRORS_H
a45 32
  /*    header_inclusion                                                   */
  /*                                                                       */
  /* <Title>                                                               */
  /*    FreeType's header inclusion scheme                                 */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    How client applications should include FreeType header files.      */
  /*                                                                       */
  /* <Description>                                                         */
  /*    To be as flexible as possible (and for historical reasons),        */
  /*    FreeType uses a very special inclusion scheme to load header       */
  /*    files, for example                                                 */
  /*                                                                       */
  /*    {                                                                  */
  /*      #include <ft2build.h>                                            */
  /*                                                                       */
  /*      #include FT_FREETYPE_H                                           */
  /*      #include FT_OUTLINE_H                                            */
  /*    }                                                                  */
  /*                                                                       */
  /*    A compiler and its preprocessor only needs an include path to find */
  /*    the file `ft2build.h'; the exact locations and names of the other  */
  /*    FreeType header files are hidden by preprocessor macro names,      */
  /*    loaded by `ft2build.h'.  The API documentation always gives the    */
  /*    header macro name needed for a particular function.                */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
d85 1
a85 2
  /*    This section describes the most important public high-level API    */
  /*    functions of FreeType~2.                                           */
a93 1
  /*    FT_ENC_TAG                                                         */
a101 1
  /*    FT_FACE_FLAG_COLOR                                                 */
a102 2
  /*    FT_FACE_FLAG_CID_KEYED                                             */
  /*    FT_FACE_FLAG_TRICKY                                                */
d107 1
a109 14
  /*    FT_HAS_HORIZONTAL                                                  */
  /*    FT_HAS_VERTICAL                                                    */
  /*    FT_HAS_KERNING                                                     */
  /*    FT_HAS_FIXED_SIZES                                                 */
  /*    FT_HAS_GLYPH_NAMES                                                 */
  /*    FT_HAS_MULTIPLE_MASTERS                                            */
  /*    FT_HAS_COLOR                                                       */
  /*                                                                       */
  /*    FT_IS_SFNT                                                         */
  /*    FT_IS_SCALABLE                                                     */
  /*    FT_IS_FIXED_WIDTH                                                  */
  /*    FT_IS_CID_KEYED                                                    */
  /*    FT_IS_TRICKY                                                       */
  /*                                                                       */
a126 1
  /*    FT_Reference_Face                                                  */
a138 1
  /*    FT_Size_RequestRec                                                 */
a142 2
  /*    FT_Get_First_Char                                                  */
  /*    FT_Get_Next_Char                                                   */
d159 1
a159 2
  /*    FT_LOAD_NO_AUTOHINT                                                */
  /*    FT_LOAD_COLOR                                                      */
d163 1
a173 2
  /*    FT_LOAD_TARGET_MODE                                                */
  /*                                                                       */
d187 7
a194 15
  /*    FT_Get_SubGlyph_Info                                               */
  /*                                                                       */
  /*    FT_Face_Internal                                                   */
  /*    FT_Size_Internal                                                   */
  /*    FT_Slot_Internal                                                   */
  /*                                                                       */
  /*    FT_FACE_FLAG_XXX                                                   */
  /*    FT_STYLE_FLAG_XXX                                                  */
  /*    FT_OPEN_XXX                                                        */
  /*    FT_LOAD_XXX                                                        */
  /*    FT_LOAD_TARGET_XXX                                                 */
  /*    FT_SUBGLYPH_FLAG_XXX                                               */
  /*    FT_FSTYPE_XXX                                                      */
  /*                                                                       */
  /*    FT_HAS_FAST_GLYPHS                                                 */
d230 1
a230 2
  /*      Top side bearing for vertical layout.  Larger positive values    */
  /*      mean further below the vertical glyph origin.                    */
d233 1
a233 2
  /*      Advance height for vertical layout.  Positive values mean the    */
  /*      glyph has a positive advance downward.                           */
a238 4
  /*    Stroking a glyph with an outside border does not increase          */
  /*    `horiAdvance' or `vertAdvance'; you have to manually adjust these  */
  /*    values to account for the added width and height.                  */
  /*                                                                       */
d327 2
a328 5
  /*    In multi-threaded applications it is easiest to use one            */
  /*    `FT_Library' object per thread.  In case this is too cumbersome,   */
  /*    a single `FT_Library' object across threads is possible also       */
  /*    (since FreeType version 2.5.6), as long as a mutex lock is used    */
  /*    around @@FT_New_Face and @@FT_Done_Face.                             */
d332 1
a332 3
  /*    destroyed with @@FT_Done_FreeType.  If you need reference-counting  */
  /*    (cf. @@FT_Reference_Library), use @@FT_New_Library and               */
  /*    @@FT_Done_Library.                                                  */
a338 7
  /* <Section>                                                             */
  /*    module_management                                                  */
  /*                                                                       */
  /*************************************************************************/

  /*************************************************************************/
  /*                                                                       */
a377 7
  /* <Section>                                                             */
  /*    base_interface                                                     */
  /*                                                                       */
  /*************************************************************************/

  /*************************************************************************/
  /*                                                                       */
a393 8
  /*    An `FT_Face' object can only be safely used from one thread at a   */
  /*    time.  Similarly, creation and destruction of `FT_Face' with the   */
  /*    same @@FT_Library object can only be done from one thread at a      */
  /*    time.  On the other hand, functions like @@FT_Load_Glyph and its    */
  /*    siblings are thread-safe and do not need the lock to be held as    */
  /*    long as the same `FT_Face' object is not used from multiple        */
  /*    threads at the same time.                                          */
  /*                                                                       */
d413 1
a413 2
  /*    transformation that in turn is used to load and hint glyphs and    */
  /*    metrics.                                                           */
d547 2
a548 7
  /*      mathematical symbols and wingdings.  For more information, see   */
  /*      `http://www.microsoft.com/typography/otspec/recom.htm',          */
  /*      `http://www.kostis.net/charsets/symbol.htm', and                 */
  /*      `http://www.kostis.net/charsets/wingding.htm'.                   */
  /*                                                                       */
  /*      This encoding uses character codes from the PUA (Private Unicode */
  /*      Area) in the range U+F020-U+F0FF.                                */
d552 1
a552 1
  /*      `http://en.wikipedia.org/wiki/Shift_JIS'.                        */
d556 1
a556 1
  /*      Corresponds to an encoding system for Simplified Chinese as      */
d566 1
a566 1
  /*      `https://msdn.microsoft.com/en-US/goglobal/cc305154'.            */
d641 1
a641 1
  /*    @@FT_Get_CMap_Language_ID to query the Mac language ID that may     */
d644 1
a644 1
  /*      http://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt  */
d686 9
a694 2
  /* these constants are deprecated; use the corresponding `FT_Encoding' */
  /* values instead                                                      */
d783 2
a784 4
  /*    face_index          :: This field holds two different values.      */
  /*                           Bits 0-15 are the index of the face in the  */
  /*                           font file (starting with value~0).  They    */
  /*                           are set to~0 if there is only one face in   */
a786 12
  /*                           Bits 16-30 are relevant to GX variation     */
  /*                           fonts only, holding the named instance      */
  /*                           index for the current face index (starting  */
  /*                           with value~1; value~0 indicates font access */
  /*                           without GX variation data).  For non-GX     */
  /*                           fonts, bits 16-30 are ignored.  If we have  */
  /*                           the third named instance of face~4, say,    */
  /*                           `face_index' is set to 0x00030004.          */
  /*                                                                       */
  /*                           Bit 31 is always zero (this is,             */
  /*                           `face_index' is always a positive value).   */
  /*                                                                       */
d791 3
a793 8
  /*    style_flags         :: The lower 16~bits contain a set of bit      */
  /*                           flags indicating the style of the face; see */
  /*                           @@FT_STYLE_FLAG_XXX for the details.  Bits   */
  /*                           16-30 hold the number of named instances    */
  /*                           available for the current face if we have a */
  /*                           GX variation (sub)font.  Bit 31 is always   */
  /*                           zero (this is, `style_flags' is always a    */
  /*                           positive value).                            */
d804 1
a804 1
  /*                           string, usually in English, that describes  */
a814 5
  /*                           In case the font doesn't provide a specific */
  /*                           family name entry, FreeType tries to        */
  /*                           synthesize one, deriving it from other name */
  /*                           entries.                                    */
  /*                                                                       */
d816 1
a816 1
  /*                           string, usually in English, that describes  */
a834 4
  /*                           Note that FreeType tries to sanitize the    */
  /*                           strike data since they are sometimes sloppy */
  /*                           or incorrect, but this can easily fail.     */
  /*                                                                       */
d846 2
a847 2
  /*                           `bbox.yMax' can be seen as the `maximum     */
  /*                           ascender', and `bbox.yMin' as the `minimum  */
d873 1
a873 1
  /*    height              :: This value is the vertical distance         */
d879 1
a879 4
  /*                           If you want the global glyph height, use    */
  /*                           `ascender - descender'.                     */
  /*                                                                       */
  /*    max_advance_width   :: The maximum advance width, in font units,   */
d885 1
a885 1
  /*    max_advance_height  :: The maximum advance height, in font units,  */
d960 2
a961 2
    FT_Generic        autohint;   /* face-specific auto-hinter data */
    void*             extensions; /* unused                         */
d984 1
a984 1
  /*      @@FT_FACE_FLAG_FIXED_SIZES set.                                   */
d1047 1
a1047 1
  /*      Note that CID-keyed fonts that are in an SFNT wrapper don't      */
d1055 1
a1055 1
  /*      A typical example is the Chinese font `mingli.ttf' that uses     */
d1059 1
a1059 1
  /*      It is not possible to auto-hint such fonts using                 */
d1061 1
a1061 1
  /*      @@FT_LOAD_NO_HINTING.  You have to set both @@FT_LOAD_NO_HINTING   */
d1065 2
a1066 6
  /*      Currently, there are about a dozen TrueType fonts in the list of */
  /*      tricky fonts; they are hard-coded in file `ttobjs.c'.            */
  /*                                                                       */
  /*    FT_FACE_FLAG_COLOR ::                                              */
  /*      Set if the font has color glyph tables.  To access color glyphs  */
  /*      use @@FT_LOAD_COLOR.                                              */
a1081 1
#define FT_FACE_FLAG_COLOR             ( 1L << 14 )
d1098 1
a1098 1
          ( (face)->face_flags & FT_FACE_FLAG_HORIZONTAL )
d1107 2
a1108 2
   *   A macro that returns true whenever a face object contains real
   *   vertical metrics (and not only synthesized ones).
d1112 1
a1112 1
          ( (face)->face_flags & FT_FACE_FLAG_VERTICAL )
d1126 1
a1126 1
          ( (face)->face_flags & FT_FACE_FLAG_KERNING )
d1141 1
a1141 1
          ( (face)->face_flags & FT_FACE_FLAG_SCALABLE )
d1160 1
a1160 1
          ( (face)->face_flags & FT_FACE_FLAG_SFNT )
d1175 1
a1175 1
          ( (face)->face_flags & FT_FACE_FLAG_FIXED_WIDTH )
d1190 1
a1190 1
          ( (face)->face_flags & FT_FACE_FLAG_FIXED_SIZES )
d1216 1
a1216 1
          ( (face)->face_flags & FT_FACE_FLAG_GLYPH_NAMES )
d1231 1
a1231 15
          ( (face)->face_flags & FT_FACE_FLAG_MULTIPLE_MASTERS )


  /*************************************************************************
   *
   * @@macro:
   *   FT_IS_NAMED_INSTANCE( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object is a named instance
   *   of a GX variation font.
   *
   */
#define FT_IS_NAMED_INSTANCE( face ) \
          ( (face)->face_index & 0x7FFF0000L )
d1249 1
a1249 1
          ( (face)->face_flags & FT_FACE_FLAG_CID_KEYED )
d1263 1
a1263 15
          ( (face)->face_flags & FT_FACE_FLAG_TRICKY )


  /*************************************************************************
   *
   * @@macro:
   *   FT_HAS_COLOR( face )
   *
   * @@description:
   *   A macro that returns true whenever a face object contains
   *   tables for color glyphs.
   *
   */
#define FT_HAS_COLOR( face ) \
          ( (face)->face_flags & FT_FACE_FLAG_COLOR )
d1272 1
a1272 1
  /*    A list of bit flags used to indicate the style of a given face.    */
d1340 1
a1340 1
  /*    max_advance  :: The maximum advance width in 26.6 fractional       */
d1387 3
a1389 3
  /*    generic :: A typeless pointer, unused by the FreeType library or   */
  /*               any of its drivers.  It can be used by client           */
  /*               applications to link their own data to each size        */
d1457 4
a1460 4
  /*    generic           :: A typeless pointer unused by the FreeType     */
  /*                         library or any of its drivers.  It can be     */
  /*                         used by client applications to link their own */
  /*                         data to each glyph slot object.               */
d1487 2
a1488 2
  /*                         (hinted) advance width for the glyph, in 26.6 */
  /*                         fractional pixel format.  As specified with   */
d1507 9
a1515 9
  /*    bitmap_left       :: The bitmap's left bearing expressed in        */
  /*                         integer pixels.  Only valid if the format is  */
  /*                         @@FT_GLYPH_FORMAT_BITMAP, this is, if the      */
  /*                         glyph slot contains a bitmap.                 */
  /*                                                                       */
  /*    bitmap_top        :: The bitmap's top bearing expressed in integer */
  /*                         pixels.  Remember that this is the distance   */
  /*                         from the baseline to the top-most glyph       */
  /*                         scanline, upwards y~coordinates being         */
d1529 1
d1550 1
a1550 1
  /*                         left side bearing while auto-hinting is       */
d1554 1
a1554 1
  /*                         right side bearing while auto-hinting is      */
d1576 2
a1577 1
  /*    Here is a small pseudo code fragment that shows how to use         */
a1603 6
  /*    If you use strong auto-hinting, you *must* apply these delta       */
  /*    values!  Otherwise you will experience far too large inter-glyph   */
  /*    spacing at small rendering sizes in most cases.  Note that it      */
  /*    doesn't harm to use the above code for other hinting modes also,   */
  /*    since the delta values are zero then.                              */
  /*                                                                       */
a1669 6
  /*    See the documentation of @@FT_Library and @@FT_Face for              */
  /*    multi-threading issues.                                            */
  /*                                                                       */
  /*    If you need reference-counting (cf. @@FT_Reference_Library), use    */
  /*    @@FT_New_Library and @@FT_Done_Library.                              */
  /*                                                                       */
d1699 1
a1699 1
  /*    A list of bit field constants used within the `flags' field of the */
d1714 10
d1734 5
a1738 8

  /* these constants are deprecated; use the corresponding `FT_OPEN_XXX' */
  /* values instead                                                      */
#define ft_open_memory    FT_OPEN_MEMORY
#define ft_open_stream    FT_OPEN_STREAM
#define ft_open_pathname  FT_OPEN_PATHNAME
#define ft_open_driver    FT_OPEN_DRIVER
#define ft_open_params    FT_OPEN_PARAMS
d1800 1
a1800 1
  /*    The stream type is determined by the contents of `flags' that      */
d1803 1
a1803 1
  /*    If the @@FT_OPEN_MEMORY bit is set, assume that this is a           */
d1805 1
a1805 1
  /*    The data are not copied, and the client is responsible for         */
d1809 1
a1809 1
  /*    Otherwise, if the @@FT_OPEN_STREAM bit is set, assume that a        */
d1812 1
a1812 1
  /*    Otherwise, if the @@FT_OPEN_PATHNAME bit is set, assume that this   */
d1815 1
a1815 1
  /*    If the @@FT_OPEN_DRIVER bit is set, @@FT_Open_Face only tries to     */
d1818 1
a1818 1
  /*    If the @@FT_OPEN_PARAMS bit is set, the parameters given by         */
d1853 2
a1854 2
  /*    face_index :: See @@FT_Open_Face for a detailed description of this */
  /*                  parameter.                                           */
d1859 1
a1863 4
  /* <Note>                                                                */
  /*    Use @@FT_Done_Face to destroy the created @@FT_Face object (along    */
  /*    with its slot and sizes).                                          */
  /*                                                                       */
d1877 1
a1877 1
  /*    This function calls @@FT_Open_Face to open a font that has been     */
d1888 2
a1889 2
  /*    face_index :: See @@FT_Open_Face for a detailed description of this */
  /*                  parameter.                                           */
d1894 1
d1923 1
a1923 1
  /*    args       :: A pointer to an `FT_Open_Args' structure that must   */
d1926 2
a1927 33
  /*    face_index :: This field holds two different values.  Bits 0-15    */
  /*                  are the index of the face in the font file (starting */
  /*                  with value~0).  Set it to~0 if there is only one     */
  /*                  face in the font file.                               */
  /*                                                                       */
  /*                  Bits 16-30 are relevant to GX variation fonts only,  */
  /*                  specifying the named instance index for the current  */
  /*                  face index (starting with value~1; value~0 makes     */
  /*                  FreeType ignore named instances).  For non-GX fonts, */
  /*                  bits 16-30 are ignored.  Assuming that you want to   */
  /*                  access the third named instance in face~4,           */
  /*                  `face_index' should be set to 0x00030004.  If you    */
  /*                  want to access face~4 without GX variation handling, */
  /*                  simply set `face_index' to value~4.                  */
  /*                                                                       */
  /*                  FT_Open_Face and its siblings can be used to quickly */
  /*                  check whether the font format of a given font        */
  /*                  resource is supported by FreeType.  In general, if   */
  /*                  the `face_index' argument is negative, the           */
  /*                  function's return value is~0 if the font format is   */
  /*                  recognized, or non-zero otherwise.  The function     */
  /*                  allocates a more or less empty face handle in        */
  /*                  `*aface' (if `aface' isn't NULL); the only two       */
  /*                  useful fields in this special case are               */
  /*                  `face->num_faces' and `face->style_flags'.  For any  */
  /*                  negative value of `face_index', `face->num_faces'    */
  /*                  gives the number of faces within the font file.  For */
  /*                  the negative value `-(N+1)' (with `N' a 16-bit       */
  /*                  value), bits 16-30 in `face->style_flags' give the   */
  /*                  number of named instances in face `N' if we have a   */
  /*                  GX variation font (or zero otherwise).  After        */
  /*                  examination, the returned @@FT_Face structure should  */
  /*                  be deallocated with a call to @@FT_Done_Face.         */
d1932 1
d1939 1
a1939 1
  /*    slot for the face object that can be accessed directly through     */
d1942 10
a1954 75
  /*    One @@FT_Library instance can have multiple face objects, this is,  */
  /*    @@FT_Open_Face and its siblings can be called multiple times using  */
  /*    the same `library' argument.                                       */
  /*                                                                       */
  /*    See the discussion of reference counters in the description of     */
  /*    @@FT_Reference_Face.                                                */
  /*                                                                       */
  /*    To loop over all faces, use code similar to the following snippet  */
  /*    (omitting the error handling).                                     */
  /*                                                                       */
  /*    {                                                                  */
  /*      ...                                                              */
  /*      FT_Face  face;                                                   */
  /*      FT_Long  i, num_faces;                                           */
  /*                                                                       */
  /*                                                                       */
  /*      error = FT_Open_Face( library, args, -1, &face );                */
  /*      if ( error ) { ... }                                             */
  /*                                                                       */
  /*      num_faces = face->num_faces;                                     */
  /*      FT_Done_Face( face );                                            */
  /*                                                                       */
  /*      for ( i = 0; i < num_faces; i++ )                                */
  /*      {                                                                */
  /*        ...                                                            */
  /*        error = FT_Open_Face( library, args, i, &face );               */
  /*        ...                                                            */
  /*        FT_Done_Face( face );                                          */
  /*        ...                                                            */
  /*      }                                                                */
  /*    }                                                                  */
  /*                                                                       */
  /*    To loop over all valid values for `face_index', use something      */
  /*    similar to the following snippet, again without error handling.    */
  /*    The code accesses all faces immediately (thus only a single call   */
  /*    of `FT_Open_Face' within the do-loop), with and without named      */
  /*    instances.                                                         */
  /*                                                                       */
  /*    {                                                                  */
  /*      ...                                                              */
  /*      FT_Face  face;                                                   */
  /*                                                                       */
  /*      FT_Long  num_faces     = 0;                                      */
  /*      FT_Long  num_instances = 0;                                      */
  /*                                                                       */
  /*      FT_Long  face_idx     = 0;                                       */
  /*      FT_Long  instance_idx = 0;                                       */
  /*                                                                       */
  /*                                                                       */
  /*      do                                                               */
  /*      {                                                                */
  /*        FT_Long  id = ( instance_idx << 16 ) + face_idx;               */
  /*                                                                       */
  /*                                                                       */
  /*        error = FT_Open_Face( library, args, id, &face );              */
  /*        if ( error ) { ... }                                           */
  /*                                                                       */
  /*        num_faces     = face->num_faces;                               */
  /*        num_instances = face->style_flags >> 16;                       */
  /*                                                                       */
  /*        ...                                                            */
  /*                                                                       */
  /*        FT_Done_Face( face );                                          */
  /*                                                                       */
  /*        if ( instance_idx < num_instances )                            */
  /*          instance_idx++;                                              */
  /*        else                                                           */
  /*        {                                                              */
  /*          face_idx++;                                                  */
  /*          instance_idx = 0;                                            */
  /*        }                                                              */
  /*                                                                       */
  /*      } while ( face_idx < num_faces )                                 */
  /*    }                                                                  */
  /*                                                                       */
d1999 1
a1999 1
  /*    parameters :: A pointer to @@FT_Open_Args that must be filled by    */
a2021 27
  /*    FT_Reference_Face                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A counter gets initialized to~1 at the time an @@FT_Face structure  */
  /*    is created.  This function increments the counter.  @@FT_Done_Face  */
  /*    then only destroys a face if the counter is~1, otherwise it simply */
  /*    decrements the counter.                                            */
  /*                                                                       */
  /*    This function helps in managing life-cycles of structures that     */
  /*    reference @@FT_Face objects.                                        */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face :: A handle to a target face object.                          */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0~means success.                             */
  /*                                                                       */
  /* <Since>                                                               */
  /*    2.4.2                                                              */
  /*                                                                       */
  FT_EXPORT( FT_Error )
  FT_Reference_Face( FT_Face  face );


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
a2033 4
  /* <Note>                                                                */
  /*    See the discussion of reference counters in the description of     */
  /*    @@FT_Reference_Face.                                                */
  /*                                                                       */
d2044 1
a2044 4
  /*    Select a bitmap strike.  To be more precise, this function sets    */
  /*    the scaling factors of the active @@FT_Size object in a face so     */
  /*    that bitmaps from this particular strike are taken by              */
  /*    @@FT_Load_Glyph and friends.                                        */
a2055 14
  /* <Note>                                                                */
  /*    For bitmaps embedded in outline fonts it is common that only a     */
  /*    subset of the available glyphs at a given ppem value is available. */
  /*    FreeType silently uses outlines if there is no bitmap for a given  */
  /*    glyph index.                                                       */
  /*                                                                       */
  /*    For GX variation fonts, a bitmap strike makes sense only if the    */
  /*    default instance is active (this is, no glyph variation takes      */
  /*    place); otherwise, FreeType simply ignores bitmap strikes.  The    */
  /*    same is true for all named instances that are different from the   */
  /*    default instance.                                                  */
  /*                                                                       */
  /*    Don't use this function if you are using the FreeType cache API.   */
  /*                                                                       */
d2067 1
a2067 4
  /*    An enumeration type that lists the supported size request types,   */
  /*    i.e., what input size (in font units) maps to the requested output */
  /*    size (in pixels, as computed from the arguments of                 */
  /*    @@FT_Size_Request).                                                 */
a2073 6
  /*      This is the standard scaling found in most applications.  In     */
  /*      particular, use this size request type for TrueType fonts if     */
  /*      they provide optical scaling or something similar.  Note,        */
  /*      however, that `units_per_EM' is a rather abstract value which    */
  /*      bears no relation to the actual size of the glyphs in a font.    */
  /*                                                                       */
d2075 3
a2077 3
  /*      The real dimension.  The sum of the `ascender' and (minus of)    */
  /*      the `descender' fields of @@FT_FaceRec are used to determine both */
  /*      scaling values.                                                  */
d2127 1
a2127 2
  /*    width          :: The desired width, given as a 26.6 fractional    */
  /*                      point value (with 72pt = 1in).                   */
d2129 1
a2129 2
  /*    height         :: The desired height, given as a 26.6 fractional   */
  /*                      point value (with 72pt = 1in).                   */
d2131 7
a2137 7
  /*    horiResolution :: The horizontal resolution (dpi, i.e., pixels per */
  /*                      inch).  If set to zero, `width' is treated as a  */
  /*                      26.6 fractional *pixel* value.                   */
  /*                                                                       */
  /*    vertResolution :: The vertical resolution (dpi, i.e., pixels per   */
  /*                      inch).  If set to zero, `height' is treated as a */
  /*                      26.6 fractional *pixel* value.                   */
a2142 5
  /*    If `type' is FT_SIZE_REQUEST_TYPE_SCALES, `width' and `height' are */
  /*    interpreted directly as 16.16 fractional scaling values, without   */
  /*    any further modification, and both `horiResolution' and            */
  /*    `vertResolution' are ignored.                                      */
  /*                                                                       */
a2187 8
  /*    The relation between the requested size and the resulting glyph    */
  /*    size is dependent entirely on how the size is defined in the       */
  /*    source face.  The font designer chooses the final size of each     */
  /*    glyph relative to this size.  For more information refer to        */
  /*    `http://www.freetype.org/freetype2/docs/glyphs/glyphs-2.html'      */
  /*                                                                       */
  /*    Don't use this function if you are using the FreeType cache API.   */
  /*                                                                       */
a2256 7
  /* <Note>                                                                */
  /*    You should not rely on the resulting glyphs matching, or being     */
  /*    constrained, to this pixel size.  Refer to @@FT_Request_Size to     */
  /*    understand how requested sizes relate to actual sizes.             */
  /*                                                                       */
  /*    Don't use this function if you are using the FreeType cache API.   */
  /*                                                                       */
d2295 1
a2295 1
  /*    returned for invalid CID values (this is, for CID values that      */
a2298 4
  /*    If you receive `FT_Err_Glyph_Too_Big', try getting the glyph       */
  /*    outline at EM size, then scale it manually and fill it as a        */
  /*    graphics operation.                                                */
  /*                                                                       */
d2346 1
a2346 1
   *   A list of bit field constants used with @@FT_Load_Glyph to indicate
d2370 1
a2370 1
   *     Don't scale the loaded outline glyph but keep it in font units.
a2374 6
   *     If the font is `tricky' (see @@FT_FACE_FLAG_TRICKY for more), using
   *     FT_LOAD_NO_SCALE usually yields meaningless outlines because the
   *     subglyphs must be scaled and positioned with hinting instructions.
   *     This can be solved by loading the font without FT_LOAD_NO_SCALE and
   *     setting the character size to `font->units_per_EM'.
   *
d2376 2
a2377 2
   *     Disable hinting.  This generally generates `blurrier' bitmap glyphs
   *     when the glyph are rendered in any of the anti-aliased modes.  See
d2396 2
a2397 8
   *     Load the glyph for vertical text layout.  In particular, the
   *     `advance' value in the @@FT_GlyphSlotRec structure is set to the
   *     `vertAdvance' value of the `metrics' field.
   *
   *     In case @@FT_HAS_VERTICAL doesn't return true, you shouldn't use
   *     this flag currently.  Reason is that in this case vertical metrics
   *     get synthesized, and those values are not always consistent across
   *     various font formats.
d2403 5
d2413 8
a2420 4
   *     In particular, errors from the TrueType bytecode engine are not
   *     passed to the application if this flag is not set; this might
   *     result in partially hinted or distorted glyphs in case a glyph's
   *     bytecode is buggy.
d2423 8
a2430 5
   *     Indicate that the font driver should not load composite glyphs
   *     recursively.  Instead, it should set the `num_subglyph' and
   *     `subglyphs' values of the glyph slot accordingly, and set
   *     `glyph->format' to @@FT_GLYPH_FORMAT_COMPOSITE.  The description of
   *     subglyphs can then be accessed with @@FT_Get_SubGlyph_Info.
a2454 32
   *   FT_LOAD_COLOR ::
   *     This flag is used to request loading of color embedded-bitmap
   *     images.  The resulting color bitmaps, if available, will have the
   *     @@FT_PIXEL_MODE_BGRA format.  When the flag is not used and color
   *     bitmaps are found, they will be converted to 256-level gray
   *     bitmaps transparently.  Those bitmaps will be in the
   *     @@FT_PIXEL_MODE_GRAY format.
   *
   *   FT_LOAD_COMPUTE_METRICS ::
   *     This flag sets computing glyph metrics without the use of bundled
   *     metrics tables (for example, the `hdmx' table in TrueType fonts).
   *     Well-behaving fonts have optimized bundled metrics and these should
   *     be used.  This flag is mainly used by font validating or font
   *     editing applications, which need to ignore, verify, or edit those
   *     tables.
   *
   *     Currently, this flag is only implemented for TrueType fonts.
   *
   *   FT_LOAD_BITMAP_METRICS_ONLY ::
   *     This flag is used to request loading of the metrics and bitmap
   *     image information of a (possibly embedded) bitmap glyph without
   *     allocating or copying the bitmap image data itself.  No effect if
   *     the target glyph is not a bitmap image.
   *
   *     This flag unsets @@FT_LOAD_RENDER.
   *
   *   FT_LOAD_CROP_BITMAP ::
   *     Ignored.  Deprecated.
   *
   *   FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH ::
   *     Ignored.  Deprecated.
   *
a2468 7
   *   Note that the auto-hinter needs a valid Unicode cmap (either a native
   *   one or synthesized by FreeType) for producing correct results.  If a
   *   font provides an incorrect mapping (for example, assigning the
   *   character code U+005A, LATIN CAPITAL LETTER Z, to a glyph depicting a
   *   mathematical integral sign), the auto-hinter might produce useless
   *   results.
   *
d2471 14
a2484 18
#define FT_LOAD_NO_SCALE                     ( 1L << 0 )
#define FT_LOAD_NO_HINTING                   ( 1L << 1 )
#define FT_LOAD_RENDER                       ( 1L << 2 )
#define FT_LOAD_NO_BITMAP                    ( 1L << 3 )
#define FT_LOAD_VERTICAL_LAYOUT              ( 1L << 4 )
#define FT_LOAD_FORCE_AUTOHINT               ( 1L << 5 )
#define FT_LOAD_CROP_BITMAP                  ( 1L << 6 )
#define FT_LOAD_PEDANTIC                     ( 1L << 7 )
#define FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH  ( 1L << 9 )
#define FT_LOAD_NO_RECURSE                   ( 1L << 10 )
#define FT_LOAD_IGNORE_TRANSFORM             ( 1L << 11 )
#define FT_LOAD_MONOCHROME                   ( 1L << 12 )
#define FT_LOAD_LINEAR_DESIGN                ( 1L << 13 )
#define FT_LOAD_NO_AUTOHINT                  ( 1L << 15 )
  /* Bits 16..19 are used by `FT_LOAD_TARGET_' */
#define FT_LOAD_COLOR                        ( 1L << 20 )
#define FT_LOAD_COMPUTE_METRICS              ( 1L << 21 )
#define FT_LOAD_BITMAP_METRICS_ONLY          ( 1L << 22 )
d2489 2
a2490 2
#define FT_LOAD_ADVANCE_ONLY                 ( 1L << 8 )
#define FT_LOAD_SBITS_ONLY                   ( 1L << 14 )
d2507 3
d2517 5
a2521 8
   *     A lighter hinting algorithm for gray-level modes.  Many generated
   *     glyphs are fuzzier but better resemble their original shape.  This
   *     is achieved by snapping glyphs to the pixel grid only vertically
   *     (Y-axis), as is done by Microsoft's ClearType and Adobe's
   *     proprietary font renderer.  This preserves inter-glyph spacing in
   *     horizontal text.  The snapping is done either by the native font
   *     driver if the driver itself and the font support it or by the
   *     auto-hinter.
d2541 2
a2542 3
   *   corresponding mode (i.e., the mode that matches the used algorithm
   *   best).  An exception is FT_LOAD_TARGET_MONO since it implies
   *   @@FT_LOAD_MONOCHROME.
d2627 1
a2627 4
  /*    All modes except @@FT_RENDER_MODE_MONO use 256 levels of opacity,   */
  /*    indicating pixel coverage.  Use linear alpha blending and gamma    */
  /*    correction to correctly render non-monochrome glyph bitmaps onto a */
  /*    surface; see @@FT_Render_Glyph.                                     */
d2681 13
a2693 2
  /* these constants are deprecated; use the corresponding */
  /* `FT_Render_Mode' values instead                       */
a2719 81
  /* <Note>                                                                */
  /*    To get meaningful results, font scaling values must be set with    */
  /*    functions like @@FT_Set_Char_Size before calling FT_Render_Glyph.   */
  /*                                                                       */
  /*    When FreeType outputs a bitmap of a glyph, it really outputs an    */
  /*    alpha coverage map.  If a pixel is completely covered by a         */
  /*    filled-in outline, the bitmap contains 0xFF at that pixel, meaning */
  /*    that 0xFF/0xFF fraction of that pixel is covered, meaning the      */
  /*    pixel is 100% black (or 0% bright).  If a pixel is only 50%        */
  /*    covered (value 0x80), the pixel is made 50% black (50% bright or a */
  /*    middle shade of grey).  0% covered means 0% black (100% bright or  */
  /*    white).                                                            */
  /*                                                                       */
  /*    On high-DPI screens like on smartphones and tablets, the pixels    */
  /*    are so small that their chance of being completely covered and     */
  /*    therefore completely black are fairly good.  On the low-DPI        */
  /*    screens, however, the situation is different.  The pixels are too  */
  /*    large for most of the details of a glyph and shades of gray are    */
  /*    the norm rather than the exception.                                */
  /*                                                                       */
  /*    This is relevant because all our screens have a second problem:    */
  /*    they are not linear.  1~+~1 is not~2.  Twice the value does not    */
  /*    result in twice the brightness.  When a pixel is only 50% covered, */
  /*    the coverage map says 50% black, and this translates to a pixel    */
  /*    value of 128 when you use 8~bits per channel (0-255).  However,    */
  /*    this does not translate to 50% brightness for that pixel on our    */
  /*    sRGB and gamma~2.2 screens.  Due to their non-linearity, they      */
  /*    dwell longer in the darks and only a pixel value of about 186      */
  /*    results in 50% brightness – 128 ends up too dark on both bright    */
  /*    and dark backgrounds.  The net result is that dark text looks      */
  /*    burnt-out, pixely and blotchy on bright background, bright text    */
  /*    too frail on dark backgrounds, and colored text on colored         */
  /*    background (for example, red on green) seems to have dark halos or */
  /*    `dirt' around it.  The situation is especially ugly for diagonal   */
  /*    stems like in `w' glyph shapes where the quality of FreeType's     */
  /*    anti-aliasing depends on the correct display of grays.  On         */
  /*    high-DPI screens where smaller, fully black pixels reign supreme,  */
  /*    this doesn't matter, but on our low-DPI screens with all the gray  */
  /*    shades, it does.  0% and 100% brightness are the same things in    */
  /*    linear and non-linear space, just all the shades in-between        */
  /*    aren't.                                                            */
  /*                                                                       */
  /*    The blending function for placing text over a background is        */
  /*                                                                       */
  /*    {                                                                  */
  /*      dst = alpha * src + (1 - alpha) * dst    ,                       */
  /*    }                                                                  */
  /*                                                                       */
  /*    which is known as the OVER operator.                               */
  /*                                                                       */
  /*    To correctly composite an antialiased pixel of a glyph onto a      */
  /*    surface,                                                           */
  /*                                                                       */
  /*    1. take the foreground and background colors (e.g., in sRGB space) */
  /*       and apply gamma to get them in a linear space,                  */
  /*                                                                       */
  /*    2. use OVER to blend the two linear colors using the glyph pixel   */
  /*       as the alpha value (remember, the glyph bitmap is an alpha      */
  /*       coverage bitmap), and                                           */
  /*                                                                       */
  /*    3. apply inverse gamma to the blended pixel and write it back to   */
  /*       the image.                                                      */
  /*                                                                       */
  /*    Internal testing at Adobe found that a target inverse gamma of~1.8 */
  /*    for step~3 gives good results across a wide range of displays with */
  /*    an sRGB gamma curve or a similar one.                              */
  /*                                                                       */
  /*    This process can cost performance.  There is an approximation that */
  /*    does not need to know about the background color; see              */
  /*    https://bel.fi/alankila/lcd/ and                                   */
  /*    https://bel.fi/alankila/lcd/alpcor.html for details.               */
  /*                                                                       */
  /*    *ATTENTION*: Linear blending is even more important when dealing   */
  /*    with subpixel-rendered glyphs to prevent color-fringing!  A        */
  /*    subpixel-rendered glyph must first be filtered with a filter that  */
  /*    gives equal weight to the three color primaries and does not       */
  /*    exceed a sum of 0x100, see section @@lcd_filtering.  Then the       */
  /*    only difference to gray linear blending is that subpixel-rendered  */
  /*    linear blending is done 3~times per pixel: red foreground subpixel */
  /*    to red background subpixel and so on for green and blue.           */
  /*                                                                       */
d2735 5
a2739 7
  /*    FT_KERNING_DEFAULT  :: Return grid-fitted kerning distances in     */
  /*                           pixels (value is~0).  Whether they are      */
  /*                           scaled depends on @@FT_LOAD_NO_SCALE.        */
  /*                                                                       */
  /*    FT_KERNING_UNFITTED :: Return un-grid-fitted kerning distances in  */
  /*                           26.6 fractional pixels.  Whether they are   */
  /*                           scaled depends on @@FT_LOAD_NO_SCALE.        */
a2743 5
  /* <Note>                                                                */
  /*    FT_KERNING_DEFAULT returns full pixel values; it also makes        */
  /*    FreeType heuristically scale down kerning distances at small ppem  */
  /*    values so that they don't become too big.                          */
  /*                                                                       */
d2753 9
a2761 2
  /* these constants are deprecated; use the corresponding */
  /* `FT_Kerning_Mode' values instead                      */
d2763 11
d2775 11
d2809 3
a2811 4
  /*    akerning    :: The kerning vector.  This is either in font units,  */
  /*                   fractional pixels (26.6 format), or pixels for      */
  /*                   scalable formats, and in pixels for fixed-sizes     */
  /*                   formats.                                            */
d2843 1
a2843 4
  /*    degree     :: The degree of tightness.  Increasingly negative      */
  /*                  values represent tighter track kerning, while        */
  /*                  increasingly positive values represent looser track  */
  /*                  kerning.  Value zero means no track kerning.         */
d2846 1
a2846 2
  /*    akerning   :: The kerning in 16.16 fractional points, to be        */
  /*                  uniformly applied between all glyphs.                */
a2850 8
  /* <Note>                                                                */
  /*    Currently, only the Type~1 font driver supports track kerning,     */
  /*    using data from AFM files (if attached with @@FT_Attach_File or     */
  /*    @@FT_Attach_Stream).                                                */
  /*                                                                       */
  /*    Only very few AFM files come with track kerning data; please refer */
  /*    to the Adobe's AFM specification for more details.                 */
  /*                                                                       */
d2872 1
a2872 1
  /*    buffer_max  :: The maximum number of bytes available in the        */
d2890 3
a2892 6
  /*    Be aware that FreeType reorders glyph indices internally so that   */
  /*    glyph index~0 always corresponds to the `missing glyph' (called    */
  /*    `.notdef').                                                        */
  /*                                                                       */
  /*    This function always returns an error if the config macro          */
  /*    `FT_CONFIG_OPTION_NO_GLYPH_NAMES' is not defined in `ftoption.h'.  */
d2948 2
a2949 2
  /*    that covers Unicode best (`best' in the sense that a UCS-4 cmap is */
  /*    preferred to a UCS-2 cmap).  It is thus preferable to              */
d3000 1
a3000 1
   *   `charmap' belongs.  If an error occurs, -1 is returned.
d3027 3
a3029 9
  /*    doesn't always correspond to the internal indices used within the  */
  /*    file.  This is done to ensure that value~0 always corresponds to   */
  /*    the `missing glyph'.  If the first glyph is not named `.notdef',   */
  /*    then for Type~1 and Type~42 fonts, `.notdef' will be moved into    */
  /*    the glyph ID~0 position, and whatever was there will be moved to   */
  /*    the position `.notdef' had.  For Type~1 fonts, if there is no      */
  /*    `.notdef' glyph at all, then one will be created at index~0 and    */
  /*    whatever was there will be moved to the last index -- Type~42      */
  /*    fonts are considered invalid under this condition.                 */
a3074 7
  /*    Be aware that character codes can have values up to 0xFFFFFFFF;    */
  /*    this might happen for non-Unicode or malformed cmaps.  However,    */
  /*    even with regular Unicode encoding, so-called `last resort fonts'  */
  /*    (using SFNT cmap format 13, see function @@FT_Get_CMap_Format)      */
  /*    normally have entries for all Unicode characters up to 0x1FFFFF,   */
  /*    which can cause *a lot* of iterations.                             */
  /*                                                                       */
d3234 2
a3235 3
  /*    See                                                                */
  /*    http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/FontPolicies.pdf */
  /*    for more details.                                                  */
a3268 3
  /*    The flags are ORed together, thus more than a single value can be  */
  /*    returned.                                                          */
  /*                                                                       */
d3297 1
a3297 1
  /*    in the @@PS_FontInfoRec structure, which is only guaranteed to      */
a3299 3
  /* <Since>                                                               */
  /*    2.3.8                                                              */
  /*                                                                       */
d3326 3
a3328 7
  /*    to Unicode Technical Standard #37, the Ideographic Variation       */
  /*    Database:                                                          */
  /*                                                                       */
  /*      http://www.unicode.org/reports/tr37/                             */
  /*                                                                       */
  /*    To date (November 2014), the character with the most variants is   */
  /*    U+9089, having 32 such IVS.                                        */
d3470 1
a3470 1
  /*    A pointer to an array of variant selector code points that are     */
d3504 1
a3504 1
  /*    A list of all the code points that are specified by this selector  */
d3557 1
a3557 1
  /*    with maximum accuracy (it uses a 64-bit intermediate integer       */
d3579 6
d3592 2
a3593 2
  /*    `(a*b)/0x10000' with maximum accuracy.  Most of the time this is   */
  /*    used to multiply a given value by a 16.16 fixed-point factor.      */
d3618 11
d3637 2
a3638 2
  /*    `(a*0x10000)/b' with maximum accuracy.  Most of the time, this is  */
  /*    used to divide a given value by a 16.16 fixed-point factor.        */
d3641 3
a3643 2
  /*    a :: The numerator.                                                */
  /*    b :: The denominator.  Use a 16.16 factor here.                    */
d3648 5
d3670 1
a3670 2
  /*    `a' rounded to nearest 16.16 fixed integer, halfway cases away     */
  /*    from zero.                                                         */
d3689 1
a3689 1
  /*    `a' rounded towards plus infinity.                                 */
d3708 1
a3708 1
  /*    `a' rounded towards minus infinity.                                */
a3751 12
  /* <Order>                                                               */
  /*    FT_Library_Version                                                 */
  /*                                                                       */
  /*    FREETYPE_MAJOR                                                     */
  /*    FREETYPE_MINOR                                                     */
  /*    FREETYPE_PATCH                                                     */
  /*                                                                       */
  /*    FT_Face_CheckTrueTypePatents                                       */
  /*    FT_Face_SetUnpatentedHinting                                       */
  /*                                                                       */
  /*    FREETYPE_XXX                                                       */
  /*                                                                       */
d3776 2
a3777 2
#define FREETYPE_MINOR  7
#define FREETYPE_PATCH  1
d3822 7
a3828 1
  /*    Deprecated, does nothing.                                          */
d3834 2
a3835 4
  /*    Always returns false.                                              */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Since May 2010, TrueType hinting is no longer patented.            */
d3850 3
a3852 1
  /*    Deprecated, does nothing.                                          */
d3860 3
a3862 4
  /*    Always returns false.                                              */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Since May 2010, TrueType hinting is no longer patented.            */
d3876 1
a3876 1
#endif /* FREETYPE_H_ */
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
