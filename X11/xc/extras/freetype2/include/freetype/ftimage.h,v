head	1.6;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.3
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.6
date	2017.04.15.19.21.01;	author tg;	state Exp;
branches;
next	1.5;
commitid	10058F2723111C7BEE2;

1.5
date	2013.08.06.19.47.16;	author tg;	state Exp;
branches;
next	1.4;
commitid	100520152445E05B912;

1.4
date	2008.06.12.20.54.19;	author bsiegert;	state Exp;
branches;
next	1.3;
commitid	10048518C1E44F62885;

1.3
date	2008.02.26.20.04.42;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10047C470A72A1E13CE;

1.2
date	2006.06.29.20.24.26;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.01;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.51.53;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.36.23;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.103.1
date	2005.03.18.10.43.01;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.34.37;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.38.39;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.17;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.41.56;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.6
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  ftimage.h                                                              */
/*                                                                         */
/*    FreeType glyph image formats and default raster interface            */
/*    (specification).                                                     */
/*                                                                         */
/*  Copyright 1996-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/

  /*************************************************************************/
  /*                                                                       */
  /* Note: A `raster' is simply a scan-line converter, used to render      */
  /*       FT_Outlines into FT_Bitmaps.                                    */
  /*                                                                       */
  /*************************************************************************/


#ifndef FTIMAGE_H_
#define FTIMAGE_H_


  /* STANDALONE_ is from ftgrays.c */
#ifndef STANDALONE_
#include <ft2build.h>
#endif


FT_BEGIN_HEADER


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    basic_types                                                        */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_Pos                                                             */
  /*                                                                       */
  /* <Description>                                                         */
  /*    The type FT_Pos is used to store vectorial coordinates.  Depending */
  /*    on the context, these can represent distances in integer font      */
  /*    units, or 16.16, or 26.6 fixed-point pixel coordinates.            */
  /*                                                                       */
  typedef signed long  FT_Pos;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Vector                                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A simple structure used to store a 2D vector; coordinates are of   */
  /*    the FT_Pos type.                                                   */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    x :: The horizontal coordinate.                                    */
  /*    y :: The vertical coordinate.                                      */
  /*                                                                       */
  typedef struct  FT_Vector_
  {
    FT_Pos  x;
    FT_Pos  y;

  } FT_Vector;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_BBox                                                            */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A structure used to hold an outline's bounding box, i.e., the      */
  /*    coordinates of its extrema in the horizontal and vertical          */
  /*    directions.                                                        */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    xMin :: The horizontal minimum (left-most).                        */
  /*                                                                       */
  /*    yMin :: The vertical minimum (bottom-most).                        */
  /*                                                                       */
  /*    xMax :: The horizontal maximum (right-most).                       */
  /*                                                                       */
  /*    yMax :: The vertical maximum (top-most).                           */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The bounding box is specified with the coordinates of the lower    */
  /*    left and the upper right corner.  In PostScript, those values are  */
  /*    often called (llx,lly) and (urx,ury), respectively.                */
  /*                                                                       */
  /*    If `yMin' is negative, this value gives the glyph's descender.     */
  /*    Otherwise, the glyph doesn't descend below the baseline.           */
  /*    Similarly, if `ymax' is positive, this value gives the glyph's     */
  /*    ascender.                                                          */
  /*                                                                       */
  /*    `xMin' gives the horizontal distance from the glyph's origin to    */
  /*    the left edge of the glyph's bounding box.  If `xMin' is negative, */
  /*    the glyph extends to the left of the origin.                       */
  /*                                                                       */
  typedef struct  FT_BBox_
  {
    FT_Pos  xMin, yMin;
    FT_Pos  xMax, yMax;

  } FT_BBox;


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_Pixel_Mode                                                      */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An enumeration type used to describe the format of pixels in a     */
  /*    given bitmap.  Note that additional formats may be added in the    */
  /*    future.                                                            */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_PIXEL_MODE_NONE ::                                              */
  /*      Value~0 is reserved.                                             */
  /*                                                                       */
  /*    FT_PIXEL_MODE_MONO ::                                              */
  /*      A monochrome bitmap, using 1~bit per pixel.  Note that pixels    */
  /*      are stored in most-significant order (MSB), which means that     */
  /*      the left-most pixel in a byte has value 128.                     */
  /*                                                                       */
  /*    FT_PIXEL_MODE_GRAY ::                                              */
  /*      An 8-bit bitmap, generally used to represent anti-aliased glyph  */
  /*      images.  Each pixel is stored in one byte.  Note that the number */
  /*      of `gray' levels is stored in the `num_grays' field of the       */
  /*      @@FT_Bitmap structure (it generally is 256).                      */
  /*                                                                       */
  /*    FT_PIXEL_MODE_GRAY2 ::                                             */
  /*      A 2-bit per pixel bitmap, used to represent embedded             */
  /*      anti-aliased bitmaps in font files according to the OpenType     */
  /*      specification.  We haven't found a single font using this        */
  /*      format, however.                                                 */
  /*                                                                       */
  /*    FT_PIXEL_MODE_GRAY4 ::                                             */
  /*      A 4-bit per pixel bitmap, representing embedded anti-aliased     */
  /*      bitmaps in font files according to the OpenType specification.   */
  /*      We haven't found a single font using this format, however.       */
  /*                                                                       */
  /*    FT_PIXEL_MODE_LCD ::                                               */
  /*      An 8-bit bitmap, representing RGB or BGR decimated glyph images  */
  /*      used for display on LCD displays; the bitmap is three times      */
  /*      wider than the original glyph image.  See also                   */
  /*      @@FT_RENDER_MODE_LCD.                                             */
  /*                                                                       */
  /*    FT_PIXEL_MODE_LCD_V ::                                             */
  /*      An 8-bit bitmap, representing RGB or BGR decimated glyph images  */
  /*      used for display on rotated LCD displays; the bitmap is three    */
  /*      times taller than the original glyph image.  See also            */
  /*      @@FT_RENDER_MODE_LCD_V.                                           */
  /*                                                                       */
  /*    FT_PIXEL_MODE_BGRA ::                                              */
  /*      An image with four 8-bit channels per pixel, representing a      */
  /*      color image (such as emoticons) with alpha channel.  For each    */
  /*      pixel, the format is BGRA, which means, the blue channel comes   */
  /*      first in memory.  The color channels are pre-multiplied and in   */
  /*      the sRGB colorspace.  For example, full red at half-translucent  */
  /*      opacity will be represented as `00,00,80,80', not `00,00,FF,80'. */
  /*      See also @@FT_LOAD_COLOR.                                         */
  /*                                                                       */
  typedef enum  FT_Pixel_Mode_
  {
    FT_PIXEL_MODE_NONE = 0,
    FT_PIXEL_MODE_MONO,
    FT_PIXEL_MODE_GRAY,
    FT_PIXEL_MODE_GRAY2,
    FT_PIXEL_MODE_GRAY4,
    FT_PIXEL_MODE_LCD,
    FT_PIXEL_MODE_LCD_V,
    FT_PIXEL_MODE_BGRA,

    FT_PIXEL_MODE_MAX      /* do not remove */

  } FT_Pixel_Mode;


  /* these constants are deprecated; use the corresponding `FT_Pixel_Mode' */
  /* values instead.                                                       */
#define ft_pixel_mode_none   FT_PIXEL_MODE_NONE
#define ft_pixel_mode_mono   FT_PIXEL_MODE_MONO
#define ft_pixel_mode_grays  FT_PIXEL_MODE_GRAY
#define ft_pixel_mode_pal2   FT_PIXEL_MODE_GRAY2
#define ft_pixel_mode_pal4   FT_PIXEL_MODE_GRAY4


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Bitmap                                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A structure used to describe a bitmap or pixmap to the raster.     */
  /*    Note that we now manage pixmaps of various depths through the      */
  /*    `pixel_mode' field.                                                */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    rows         :: The number of bitmap rows.                         */
  /*                                                                       */
  /*    width        :: The number of pixels in bitmap row.                */
  /*                                                                       */
  /*    pitch        :: The pitch's absolute value is the number of bytes  */
  /*                    taken by one bitmap row, including padding.        */
  /*                    However, the pitch is positive when the bitmap has */
  /*                    a `down' flow, and negative when it has an `up'    */
  /*                    flow.  In all cases, the pitch is an offset to add */
  /*                    to a bitmap pointer in order to go down one row.   */
  /*                                                                       */
  /*                    Note that `padding' means the alignment of a       */
  /*                    bitmap to a byte border, and FreeType functions    */
  /*                    normally align to the smallest possible integer    */
  /*                    value.                                             */
  /*                                                                       */
  /*                    For the B/W rasterizer, `pitch' is always an even  */
  /*                    number.                                            */
  /*                                                                       */
  /*                    To change the pitch of a bitmap (say, to make it a */
  /*                    multiple of 4), use @@FT_Bitmap_Convert.            */
  /*                    Alternatively, you might use callback functions to */
  /*                    directly render to the application's surface; see  */
  /*                    the file `example2.cpp' in the tutorial for a      */
  /*                    demonstration.                                     */
  /*                                                                       */
  /*    buffer       :: A typeless pointer to the bitmap buffer.  This     */
  /*                    value should be aligned on 32-bit boundaries in    */
  /*                    most cases.                                        */
  /*                                                                       */
  /*    num_grays    :: This field is only used with                       */
  /*                    @@FT_PIXEL_MODE_GRAY; it gives the number of gray   */
  /*                    levels used in the bitmap.                         */
  /*                                                                       */
  /*    pixel_mode   :: The pixel mode, i.e., how pixel bits are stored.   */
  /*                    See @@FT_Pixel_Mode for possible values.            */
  /*                                                                       */
  /*    palette_mode :: This field is intended for paletted pixel modes;   */
  /*                    it indicates how the palette is stored.  Not       */
  /*                    used currently.                                    */
  /*                                                                       */
  /*    palette      :: A typeless pointer to the bitmap palette; this     */
  /*                    field is intended for paletted pixel modes.  Not   */
  /*                    used currently.                                    */
  /*                                                                       */
  typedef struct  FT_Bitmap_
  {
    unsigned int    rows;
    unsigned int    width;
    int             pitch;
    unsigned char*  buffer;
    unsigned short  num_grays;
    unsigned char   pixel_mode;
    unsigned char   palette_mode;
    void*           palette;

  } FT_Bitmap;


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    outline_processing                                                 */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Outline                                                         */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This structure is used to describe an outline to the scan-line     */
  /*    converter.                                                         */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    n_contours :: The number of contours in the outline.               */
  /*                                                                       */
  /*    n_points   :: The number of points in the outline.                 */
  /*                                                                       */
  /*    points     :: A pointer to an array of `n_points' @@FT_Vector       */
  /*                  elements, giving the outline's point coordinates.    */
  /*                                                                       */
  /*    tags       :: A pointer to an array of `n_points' chars, giving    */
  /*                  each outline point's type.                           */
  /*                                                                       */
  /*                  If bit~0 is unset, the point is `off' the curve,     */
  /*                  i.e., a Bézier control point, while it is `on' if    */
  /*                  set.                                                 */
  /*                                                                       */
  /*                  Bit~1 is meaningful for `off' points only.  If set,  */
  /*                  it indicates a third-order Bézier arc control point; */
  /*                  and a second-order control point if unset.           */
  /*                                                                       */
  /*                  If bit~2 is set, bits 5-7 contain the drop-out mode  */
  /*                  (as defined in the OpenType specification; the value */
  /*                  is the same as the argument to the SCANMODE          */
  /*                  instruction).                                        */
  /*                                                                       */
  /*                  Bits 3 and~4 are reserved for internal purposes.     */
  /*                                                                       */
  /*    contours   :: An array of `n_contours' shorts, giving the end      */
  /*                  point of each contour within the outline.  For       */
  /*                  example, the first contour is defined by the points  */
  /*                  `0' to `contours[0]', the second one is defined by   */
  /*                  the points `contours[0]+1' to `contours[1]', etc.    */
  /*                                                                       */
  /*    flags      :: A set of bit flags used to characterize the outline  */
  /*                  and give hints to the scan-converter and hinter on   */
  /*                  how to convert/grid-fit it.  See @@FT_OUTLINE_XXX.    */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The B/W rasterizer only checks bit~2 in the `tags' array for the   */
  /*    first point of each contour.  The drop-out mode as given with      */
  /*    @@FT_OUTLINE_IGNORE_DROPOUTS, @@FT_OUTLINE_SMART_DROPOUTS, and       */
  /*    @@FT_OUTLINE_INCLUDE_STUBS in `flags' is then overridden.           */
  /*                                                                       */
  typedef struct  FT_Outline_
  {
    short       n_contours;      /* number of contours in glyph        */
    short       n_points;        /* number of points in the glyph      */

    FT_Vector*  points;          /* the outline's points               */
    char*       tags;            /* the points flags                   */
    short*      contours;        /* the contour end points             */

    int         flags;           /* outline masks                      */

  } FT_Outline;

  /* */

  /* Following limits must be consistent with */
  /* FT_Outline.{n_contours,n_points}         */
#define FT_OUTLINE_CONTOURS_MAX  SHRT_MAX
#define FT_OUTLINE_POINTS_MAX    SHRT_MAX


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_OUTLINE_XXX                                                     */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A list of bit-field constants use for the flags in an outline's    */
  /*    `flags' field.                                                     */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_OUTLINE_NONE ::                                                 */
  /*      Value~0 is reserved.                                             */
  /*                                                                       */
  /*    FT_OUTLINE_OWNER ::                                                */
  /*      If set, this flag indicates that the outline's field arrays      */
  /*      (i.e., `points', `flags', and `contours') are `owned' by the     */
  /*      outline object, and should thus be freed when it is destroyed.   */
  /*                                                                       */
  /*    FT_OUTLINE_EVEN_ODD_FILL ::                                        */
  /*      By default, outlines are filled using the non-zero winding rule. */
  /*      If set to 1, the outline will be filled using the even-odd fill  */
  /*      rule (only works with the smooth rasterizer).                    */
  /*                                                                       */
  /*    FT_OUTLINE_REVERSE_FILL ::                                         */
  /*      By default, outside contours of an outline are oriented in       */
  /*      clock-wise direction, as defined in the TrueType specification.  */
  /*      This flag is set if the outline uses the opposite direction      */
  /*      (typically for Type~1 fonts).  This flag is ignored by the scan  */
  /*      converter.                                                       */
  /*                                                                       */
  /*    FT_OUTLINE_IGNORE_DROPOUTS ::                                      */
  /*      By default, the scan converter will try to detect drop-outs in   */
  /*      an outline and correct the glyph bitmap to ensure consistent     */
  /*      shape continuity.  If set, this flag hints the scan-line         */
  /*      converter to ignore such cases.  See below for more information. */
  /*                                                                       */
  /*    FT_OUTLINE_SMART_DROPOUTS ::                                       */
  /*      Select smart dropout control.  If unset, use simple dropout      */
  /*      control.  Ignored if @@FT_OUTLINE_IGNORE_DROPOUTS is set.  See    */
  /*      below for more information.                                      */
  /*                                                                       */
  /*    FT_OUTLINE_INCLUDE_STUBS ::                                        */
  /*      If set, turn pixels on for `stubs', otherwise exclude them.      */
  /*      Ignored if @@FT_OUTLINE_IGNORE_DROPOUTS is set.  See below for    */
  /*      more information.                                                */
  /*                                                                       */
  /*    FT_OUTLINE_HIGH_PRECISION ::                                       */
  /*      This flag indicates that the scan-line converter should try to   */
  /*      convert this outline to bitmaps with the highest possible        */
  /*      quality.  It is typically set for small character sizes.  Note   */
  /*      that this is only a hint that might be completely ignored by a   */
  /*      given scan-converter.                                            */
  /*                                                                       */
  /*    FT_OUTLINE_SINGLE_PASS ::                                          */
  /*      This flag is set to force a given scan-converter to only use a   */
  /*      single pass over the outline to render a bitmap glyph image.     */
  /*      Normally, it is set for very large character sizes.  It is only  */
  /*      a hint that might be completely ignored by a given               */
  /*      scan-converter.                                                  */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The flags @@FT_OUTLINE_IGNORE_DROPOUTS, @@FT_OUTLINE_SMART_DROPOUTS, */
  /*    and @@FT_OUTLINE_INCLUDE_STUBS are ignored by the smooth            */
  /*    rasterizer.                                                        */
  /*                                                                       */
  /*    There exists a second mechanism to pass the drop-out mode to the   */
  /*    B/W rasterizer; see the `tags' field in @@FT_Outline.               */
  /*                                                                       */
  /*    Please refer to the description of the `SCANTYPE' instruction in   */
  /*    the OpenType specification (in file `ttinst1.doc') how simple      */
  /*    drop-outs, smart drop-outs, and stubs are defined.                 */
  /*                                                                       */
#define FT_OUTLINE_NONE             0x0
#define FT_OUTLINE_OWNER            0x1
#define FT_OUTLINE_EVEN_ODD_FILL    0x2
#define FT_OUTLINE_REVERSE_FILL     0x4
#define FT_OUTLINE_IGNORE_DROPOUTS  0x8
#define FT_OUTLINE_SMART_DROPOUTS   0x10
#define FT_OUTLINE_INCLUDE_STUBS    0x20

#define FT_OUTLINE_HIGH_PRECISION   0x100
#define FT_OUTLINE_SINGLE_PASS      0x200


  /* these constants are deprecated; use the corresponding */
  /* `FT_OUTLINE_XXX' values instead                       */
#define ft_outline_none             FT_OUTLINE_NONE
#define ft_outline_owner            FT_OUTLINE_OWNER
#define ft_outline_even_odd_fill    FT_OUTLINE_EVEN_ODD_FILL
#define ft_outline_reverse_fill     FT_OUTLINE_REVERSE_FILL
#define ft_outline_ignore_dropouts  FT_OUTLINE_IGNORE_DROPOUTS
#define ft_outline_high_precision   FT_OUTLINE_HIGH_PRECISION
#define ft_outline_single_pass      FT_OUTLINE_SINGLE_PASS

  /* */

#define FT_CURVE_TAG( flag )  ( flag & 3 )

#define FT_CURVE_TAG_ON            1
#define FT_CURVE_TAG_CONIC         0
#define FT_CURVE_TAG_CUBIC         2

#define FT_CURVE_TAG_HAS_SCANMODE  4

#define FT_CURVE_TAG_TOUCH_X       8  /* reserved for the TrueType hinter */
#define FT_CURVE_TAG_TOUCH_Y      16  /* reserved for the TrueType hinter */

#define FT_CURVE_TAG_TOUCH_BOTH    ( FT_CURVE_TAG_TOUCH_X | \
                                     FT_CURVE_TAG_TOUCH_Y )

#define FT_Curve_Tag_On       FT_CURVE_TAG_ON
#define FT_Curve_Tag_Conic    FT_CURVE_TAG_CONIC
#define FT_Curve_Tag_Cubic    FT_CURVE_TAG_CUBIC
#define FT_Curve_Tag_Touch_X  FT_CURVE_TAG_TOUCH_X
#define FT_Curve_Tag_Touch_Y  FT_CURVE_TAG_TOUCH_Y


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_Outline_MoveToFunc                                              */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A function pointer type used to describe the signature of a `move  */
  /*    to' function during outline walking/decomposition.                 */
  /*                                                                       */
  /*    A `move to' is emitted to start a new contour in an outline.       */
  /*                                                                       */
  /* <Input>                                                               */
  /*    to   :: A pointer to the target point of the `move to'.            */
  /*                                                                       */
  /*    user :: A typeless pointer, which is passed from the caller of the */
  /*            decomposition function.                                    */
  /*                                                                       */
  /* <Return>                                                              */
  /*    Error code.  0~means success.                                      */
  /*                                                                       */
  typedef int
  (*FT_Outline_MoveToFunc)( const FT_Vector*  to,
                            void*             user );

#define FT_Outline_MoveTo_Func  FT_Outline_MoveToFunc


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_Outline_LineToFunc                                              */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A function pointer type used to describe the signature of a `line  */
  /*    to' function during outline walking/decomposition.                 */
  /*                                                                       */
  /*    A `line to' is emitted to indicate a segment in the outline.       */
  /*                                                                       */
  /* <Input>                                                               */
  /*    to   :: A pointer to the target point of the `line to'.            */
  /*                                                                       */
  /*    user :: A typeless pointer, which is passed from the caller of the */
  /*            decomposition function.                                    */
  /*                                                                       */
  /* <Return>                                                              */
  /*    Error code.  0~means success.                                      */
  /*                                                                       */
  typedef int
  (*FT_Outline_LineToFunc)( const FT_Vector*  to,
                            void*             user );

#define FT_Outline_LineTo_Func  FT_Outline_LineToFunc


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_Outline_ConicToFunc                                             */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A function pointer type used to describe the signature of a `conic */
  /*    to' function during outline walking or decomposition.              */
  /*                                                                       */
  /*    A `conic to' is emitted to indicate a second-order Bézier arc in   */
  /*    the outline.                                                       */
  /*                                                                       */
  /* <Input>                                                               */
  /*    control :: An intermediate control point between the last position */
  /*               and the new target in `to'.                             */
  /*                                                                       */
  /*    to      :: A pointer to the target end point of the conic arc.     */
  /*                                                                       */
  /*    user    :: A typeless pointer, which is passed from the caller of  */
  /*               the decomposition function.                             */
  /*                                                                       */
  /* <Return>                                                              */
  /*    Error code.  0~means success.                                      */
  /*                                                                       */
  typedef int
  (*FT_Outline_ConicToFunc)( const FT_Vector*  control,
                             const FT_Vector*  to,
                             void*             user );

#define FT_Outline_ConicTo_Func  FT_Outline_ConicToFunc


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_Outline_CubicToFunc                                             */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A function pointer type used to describe the signature of a `cubic */
  /*    to' function during outline walking or decomposition.              */
  /*                                                                       */
  /*    A `cubic to' is emitted to indicate a third-order Bézier arc.      */
  /*                                                                       */
  /* <Input>                                                               */
  /*    control1 :: A pointer to the first Bézier control point.           */
  /*                                                                       */
  /*    control2 :: A pointer to the second Bézier control point.          */
  /*                                                                       */
  /*    to       :: A pointer to the target end point.                     */
  /*                                                                       */
  /*    user     :: A typeless pointer, which is passed from the caller of */
  /*                the decomposition function.                            */
  /*                                                                       */
  /* <Return>                                                              */
  /*    Error code.  0~means success.                                      */
  /*                                                                       */
  typedef int
  (*FT_Outline_CubicToFunc)( const FT_Vector*  control1,
                             const FT_Vector*  control2,
                             const FT_Vector*  to,
                             void*             user );

#define FT_Outline_CubicTo_Func  FT_Outline_CubicToFunc


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Outline_Funcs                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A structure to hold various function pointers used during outline  */
  /*    decomposition in order to emit segments, conic, and cubic Béziers. */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    move_to  :: The `move to' emitter.                                 */
  /*                                                                       */
  /*    line_to  :: The segment emitter.                                   */
  /*                                                                       */
  /*    conic_to :: The second-order Bézier arc emitter.                   */
  /*                                                                       */
  /*    cubic_to :: The third-order Bézier arc emitter.                    */
  /*                                                                       */
  /*    shift    :: The shift that is applied to coordinates before they   */
  /*                are sent to the emitter.                               */
  /*                                                                       */
  /*    delta    :: The delta that is applied to coordinates before they   */
  /*                are sent to the emitter, but after the shift.          */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The point coordinates sent to the emitters are the transformed     */
  /*    version of the original coordinates (this is important for high    */
  /*    accuracy during scan-conversion).  The transformation is simple:   */
  /*                                                                       */
  /*    {                                                                  */
  /*      x' = (x << shift) - delta                                        */
  /*      y' = (x << shift) - delta                                        */
  /*    }                                                                  */
  /*                                                                       */
  /*    Set the values of `shift' and `delta' to~0 to get the original     */
  /*    point coordinates.                                                 */
  /*                                                                       */
  typedef struct  FT_Outline_Funcs_
  {
    FT_Outline_MoveToFunc   move_to;
    FT_Outline_LineToFunc   line_to;
    FT_Outline_ConicToFunc  conic_to;
    FT_Outline_CubicToFunc  cubic_to;

    int                     shift;
    FT_Pos                  delta;

  } FT_Outline_Funcs;


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    basic_types                                                        */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Macro>                                                               */
  /*    FT_IMAGE_TAG                                                       */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This macro converts four-letter tags to an unsigned long type.     */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Since many 16-bit compilers don't like 32-bit enumerations, you    */
  /*    should redefine this macro in case of problems to something like   */
  /*    this:                                                              */
  /*                                                                       */
  /*    {                                                                  */
  /*      #define FT_IMAGE_TAG( value, _x1, _x2, _x3, _x4 )  value         */
  /*    }                                                                  */
  /*                                                                       */
  /*    to get a simple enumeration without assigning special numbers.     */
  /*                                                                       */
#ifndef FT_IMAGE_TAG
#define FT_IMAGE_TAG( value, _x1, _x2, _x3, _x4 )  \
          value = ( ( (unsigned long)_x1 << 24 ) | \
                    ( (unsigned long)_x2 << 16 ) | \
                    ( (unsigned long)_x3 << 8  ) | \
                      (unsigned long)_x4         )
#endif /* FT_IMAGE_TAG */


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_Glyph_Format                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An enumeration type used to describe the format of a given glyph   */
  /*    image.  Note that this version of FreeType only supports two image */
  /*    formats, even though future font drivers will be able to register  */
  /*    their own format.                                                  */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_GLYPH_FORMAT_NONE ::                                            */
  /*      The value~0 is reserved.                                         */
  /*                                                                       */
  /*    FT_GLYPH_FORMAT_COMPOSITE ::                                       */
  /*      The glyph image is a composite of several other images.  This    */
  /*      format is _only_ used with @@FT_LOAD_NO_RECURSE, and is used to   */
  /*      report compound glyphs (like accented characters).               */
  /*                                                                       */
  /*    FT_GLYPH_FORMAT_BITMAP ::                                          */
  /*      The glyph image is a bitmap, and can be described as an          */
  /*      @@FT_Bitmap.  You generally need to access the `bitmap' field of  */
  /*      the @@FT_GlyphSlotRec structure to read it.                       */
  /*                                                                       */
  /*    FT_GLYPH_FORMAT_OUTLINE ::                                         */
  /*      The glyph image is a vectorial outline made of line segments     */
  /*      and Bézier arcs; it can be described as an @@FT_Outline; you      */
  /*      generally want to access the `outline' field of the              */
  /*      @@FT_GlyphSlotRec structure to read it.                           */
  /*                                                                       */
  /*    FT_GLYPH_FORMAT_PLOTTER ::                                         */
  /*      The glyph image is a vectorial path with no inside and outside   */
  /*      contours.  Some Type~1 fonts, like those in the Hershey family,  */
  /*      contain glyphs in this format.  These are described as           */
  /*      @@FT_Outline, but FreeType isn't currently capable of rendering   */
  /*      them correctly.                                                  */
  /*                                                                       */
  typedef enum  FT_Glyph_Format_
  {
    FT_IMAGE_TAG( FT_GLYPH_FORMAT_NONE, 0, 0, 0, 0 ),

    FT_IMAGE_TAG( FT_GLYPH_FORMAT_COMPOSITE, 'c', 'o', 'm', 'p' ),
    FT_IMAGE_TAG( FT_GLYPH_FORMAT_BITMAP,    'b', 'i', 't', 's' ),
    FT_IMAGE_TAG( FT_GLYPH_FORMAT_OUTLINE,   'o', 'u', 't', 'l' ),
    FT_IMAGE_TAG( FT_GLYPH_FORMAT_PLOTTER,   'p', 'l', 'o', 't' )

  } FT_Glyph_Format;


  /* these constants are deprecated; use the corresponding */
  /* `FT_Glyph_Format' values instead.                     */
#define ft_glyph_format_none       FT_GLYPH_FORMAT_NONE
#define ft_glyph_format_composite  FT_GLYPH_FORMAT_COMPOSITE
#define ft_glyph_format_bitmap     FT_GLYPH_FORMAT_BITMAP
#define ft_glyph_format_outline    FT_GLYPH_FORMAT_OUTLINE
#define ft_glyph_format_plotter    FT_GLYPH_FORMAT_PLOTTER


  /*************************************************************************/
  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****            R A S T E R   D E F I N I T I O N S                *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* A raster is a scan converter, in charge of rendering an outline into  */
  /* a bitmap.  This section contains the public API for rasters.          */
  /*                                                                       */
  /* Note that in FreeType 2, all rasters are now encapsulated within      */
  /* specific modules called `renderers'.  See `ftrender.h' for more       */
  /* details on renderers.                                                 */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*    raster                                                             */
  /*                                                                       */
  /* <Title>                                                               */
  /*    Scanline Converter                                                 */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*    How vectorial outlines are converted into bitmaps and pixmaps.     */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This section contains technical definitions.                       */
  /*                                                                       */
  /* <Order>                                                               */
  /*    FT_Raster                                                          */
  /*    FT_Span                                                            */
  /*    FT_SpanFunc                                                        */
  /*                                                                       */
  /*    FT_Raster_Params                                                   */
  /*    FT_RASTER_FLAG_XXX                                                 */
  /*                                                                       */
  /*    FT_Raster_NewFunc                                                  */
  /*    FT_Raster_DoneFunc                                                 */
  /*    FT_Raster_ResetFunc                                                */
  /*    FT_Raster_SetModeFunc                                              */
  /*    FT_Raster_RenderFunc                                               */
  /*    FT_Raster_Funcs                                                    */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Type>                                                                */
  /*    FT_Raster                                                          */
  /*                                                                       */
  /* <Description>                                                         */
  /*    An opaque handle (pointer) to a raster object.  Each object can be */
  /*    used independently to convert an outline into a bitmap or pixmap.  */
  /*                                                                       */
  typedef struct FT_RasterRec_*  FT_Raster;


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Span                                                            */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A structure used to model a single span of gray pixels when        */
  /*    rendering an anti-aliased bitmap.                                  */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    x        :: The span's horizontal start position.                  */
  /*                                                                       */
  /*    len      :: The span's length in pixels.                           */
  /*                                                                       */
  /*    coverage :: The span color/coverage, ranging from 0 (background)   */
  /*                to 255 (foreground).                                   */
  /*                                                                       */
  /* <Note>                                                                */
  /*    This structure is used by the span drawing callback type named     */
  /*    @@FT_SpanFunc that takes the y~coordinate of the span as a          */
  /*    parameter.                                                         */
  /*                                                                       */
  /*    The coverage value is always between 0 and 255.  If you want less  */
  /*    gray values, the callback function has to reduce them.             */
  /*                                                                       */
  typedef struct  FT_Span_
  {
    short           x;
    unsigned short  len;
    unsigned char   coverage;

  } FT_Span;


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_SpanFunc                                                        */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A function used as a call-back by the anti-aliased renderer in     */
  /*    order to let client applications draw themselves the gray pixel    */
  /*    spans on each scan line.                                           */
  /*                                                                       */
  /* <Input>                                                               */
  /*    y     :: The scanline's y~coordinate.                              */
  /*                                                                       */
  /*    count :: The number of spans to draw on this scanline.             */
  /*                                                                       */
  /*    spans :: A table of `count' spans to draw on the scanline.         */
  /*                                                                       */
  /*    user  :: User-supplied data that is passed to the callback.        */
  /*                                                                       */
  /* <Note>                                                                */
  /*    This callback allows client applications to directly render the    */
  /*    gray spans of the anti-aliased bitmap to any kind of surfaces.     */
  /*                                                                       */
  /*    This can be used to write anti-aliased outlines directly to a      */
  /*    given background bitmap, and even perform translucency.            */
  /*                                                                       */
  typedef void
  (*FT_SpanFunc)( int             y,
                  int             count,
                  const FT_Span*  spans,
                  void*           user );

#define FT_Raster_Span_Func  FT_SpanFunc


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_Raster_BitTest_Func                                             */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Deprecated, unimplemented.                                         */
  /*                                                                       */
  typedef int
  (*FT_Raster_BitTest_Func)( int    y,
                             int    x,
                             void*  user );


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_Raster_BitSet_Func                                              */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Deprecated, unimplemented.                                         */
  /*                                                                       */
  typedef void
  (*FT_Raster_BitSet_Func)( int    y,
                            int    x,
                            void*  user );


  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_RASTER_FLAG_XXX                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A list of bit flag constants as used in the `flags' field of a     */
  /*    @@FT_Raster_Params structure.                                       */
  /*                                                                       */
  /* <Values>                                                              */
  /*    FT_RASTER_FLAG_DEFAULT :: This value is 0.                         */
  /*                                                                       */
  /*    FT_RASTER_FLAG_AA      :: This flag is set to indicate that an     */
  /*                              anti-aliased glyph image should be       */
  /*                              generated.  Otherwise, it will be        */
  /*                              monochrome (1-bit).                      */
  /*                                                                       */
  /*    FT_RASTER_FLAG_DIRECT  :: This flag is set to indicate direct      */
  /*                              rendering.  In this mode, client         */
  /*                              applications must provide their own span */
  /*                              callback.  This lets them directly       */
  /*                              draw or compose over an existing bitmap. */
  /*                              If this bit is not set, the target       */
  /*                              pixmap's buffer _must_ be zeroed before  */
  /*                              rendering.                               */
  /*                                                                       */
  /*                              Direct rendering is only possible with   */
  /*                              anti-aliased glyphs.                     */
  /*                                                                       */
  /*    FT_RASTER_FLAG_CLIP    :: This flag is only used in direct         */
  /*                              rendering mode.  If set, the output will */
  /*                              be clipped to a box specified in the     */
  /*                              `clip_box' field of the                  */
  /*                              @@FT_Raster_Params structure.             */
  /*                                                                       */
  /*                              Note that by default, the glyph bitmap   */
  /*                              is clipped to the target pixmap, except  */
  /*                              in direct rendering mode where all spans */
  /*                              are generated if no clipping box is set. */
  /*                                                                       */
#define FT_RASTER_FLAG_DEFAULT  0x0
#define FT_RASTER_FLAG_AA       0x1
#define FT_RASTER_FLAG_DIRECT   0x2
#define FT_RASTER_FLAG_CLIP     0x4

  /* these constants are deprecated; use the corresponding */
  /* `FT_RASTER_FLAG_XXX' values instead                   */
#define ft_raster_flag_default  FT_RASTER_FLAG_DEFAULT
#define ft_raster_flag_aa       FT_RASTER_FLAG_AA
#define ft_raster_flag_direct   FT_RASTER_FLAG_DIRECT
#define ft_raster_flag_clip     FT_RASTER_FLAG_CLIP


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Raster_Params                                                   */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A structure to hold the arguments used by a raster's render        */
  /*    function.                                                          */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    target      :: The target bitmap.                                  */
  /*                                                                       */
  /*    source      :: A pointer to the source glyph image (e.g., an       */
  /*                   @@FT_Outline).                                       */
  /*                                                                       */
  /*    flags       :: The rendering flags.                                */
  /*                                                                       */
  /*    gray_spans  :: The gray span drawing callback.                     */
  /*                                                                       */
  /*    black_spans :: Unused.                                             */
  /*                                                                       */
  /*    bit_test    :: Unused.                                             */
  /*                                                                       */
  /*    bit_set     :: Unused.                                             */
  /*                                                                       */
  /*    user        :: User-supplied data that is passed to each drawing   */
  /*                   callback.                                           */
  /*                                                                       */
  /*    clip_box    :: An optional clipping box.  It is only used in       */
  /*                   direct rendering mode.  Note that coordinates here  */
  /*                   should be expressed in _integer_ pixels (and not in */
  /*                   26.6 fixed-point units).                            */
  /*                                                                       */
  /* <Note>                                                                */
  /*    An anti-aliased glyph bitmap is drawn if the @@FT_RASTER_FLAG_AA    */
  /*    bit flag is set in the `flags' field, otherwise a monochrome       */
  /*    bitmap is generated.                                               */
  /*                                                                       */
  /*    If the @@FT_RASTER_FLAG_DIRECT bit flag is set in `flags', the      */
  /*    raster will call the `gray_spans' callback to draw gray pixel      */
  /*    spans.  This allows direct composition over a pre-existing bitmap  */
  /*    through user-provided callbacks to perform the span drawing and    */
  /*    composition.    Not supported by the monochrome rasterizer.        */
  /*                                                                       */
  typedef struct  FT_Raster_Params_
  {
    const FT_Bitmap*        target;
    const void*             source;
    int                     flags;
    FT_SpanFunc             gray_spans;
    FT_SpanFunc             black_spans;  /* unused */
    FT_Raster_BitTest_Func  bit_test;     /* unused */
    FT_Raster_BitSet_Func   bit_set;      /* unused */
    void*                   user;
    FT_BBox                 clip_box;

  } FT_Raster_Params;


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_Raster_NewFunc                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A function used to create a new raster object.                     */
  /*                                                                       */
  /* <Input>                                                               */
  /*    memory :: A handle to the memory allocator.                        */
  /*                                                                       */
  /* <Output>                                                              */
  /*    raster :: A handle to the new raster object.                       */
  /*                                                                       */
  /* <Return>                                                              */
  /*    Error code.  0~means success.                                      */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The `memory' parameter is a typeless pointer in order to avoid     */
  /*    un-wanted dependencies on the rest of the FreeType code.  In       */
  /*    practice, it is an @@FT_Memory object, i.e., a handle to the        */
  /*    standard FreeType memory allocator.  However, this field can be    */
  /*    completely ignored by a given raster implementation.               */
  /*                                                                       */
  typedef int
  (*FT_Raster_NewFunc)( void*       memory,
                        FT_Raster*  raster );

#define FT_Raster_New_Func  FT_Raster_NewFunc


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_Raster_DoneFunc                                                 */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A function used to destroy a given raster object.                  */
  /*                                                                       */
  /* <Input>                                                               */
  /*    raster :: A handle to the raster object.                           */
  /*                                                                       */
  typedef void
  (*FT_Raster_DoneFunc)( FT_Raster  raster );

#define FT_Raster_Done_Func  FT_Raster_DoneFunc


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_Raster_ResetFunc                                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    FreeType used to provide an area of memory called the `render      */
  /*    pool' available to all registered rasters.  This was not thread    */
  /*    safe however and now FreeType never allocates this pool.  NULL     */
  /*    is always passed in as pool_base.                                  */
  /*                                                                       */
  /*    This function is called each time the render pool changes, or just */
  /*    after a new raster object is created.                              */
  /*                                                                       */
  /* <Input>                                                               */
  /*    raster    :: A handle to the new raster object.                    */
  /*                                                                       */
  /*    pool_base :: The address in memory of the render pool.             */
  /*                                                                       */
  /*    pool_size :: The size in bytes of the render pool.                 */
  /*                                                                       */
  /* <Note>                                                                */
  /*    Rasters should ignore the render pool and rely on dynamic or stack */
  /*    allocation if they want to (a handle to the memory allocator is    */
  /*    passed to the raster constructor).                                 */
  /*                                                                       */
  typedef void
  (*FT_Raster_ResetFunc)( FT_Raster       raster,
                          unsigned char*  pool_base,
                          unsigned long   pool_size );

#define FT_Raster_Reset_Func  FT_Raster_ResetFunc


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_Raster_SetModeFunc                                              */
  /*                                                                       */
  /* <Description>                                                         */
  /*    This function is a generic facility to change modes or attributes  */
  /*    in a given raster.  This can be used for debugging purposes, or    */
  /*    simply to allow implementation-specific `features' in a given      */
  /*    raster module.                                                     */
  /*                                                                       */
  /* <Input>                                                               */
  /*    raster :: A handle to the new raster object.                       */
  /*                                                                       */
  /*    mode   :: A 4-byte tag used to name the mode or property.          */
  /*                                                                       */
  /*    args   :: A pointer to the new mode/property to use.               */
  /*                                                                       */
  typedef int
  (*FT_Raster_SetModeFunc)( FT_Raster      raster,
                            unsigned long  mode,
                            void*          args );

#define FT_Raster_Set_Mode_Func  FT_Raster_SetModeFunc


  /*************************************************************************/
  /*                                                                       */
  /* <FuncType>                                                            */
  /*    FT_Raster_RenderFunc                                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Invoke a given raster to scan-convert a given glyph image into a   */
  /*    target bitmap.                                                     */
  /*                                                                       */
  /* <Input>                                                               */
  /*    raster :: A handle to the raster object.                           */
  /*                                                                       */
  /*    params :: A pointer to an @@FT_Raster_Params structure used to      */
  /*              store the rendering parameters.                          */
  /*                                                                       */
  /* <Return>                                                              */
  /*    Error code.  0~means success.                                      */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The exact format of the source image depends on the raster's glyph */
  /*    format defined in its @@FT_Raster_Funcs structure.  It can be an    */
  /*    @@FT_Outline or anything else in order to support a large array of  */
  /*    glyph formats.                                                     */
  /*                                                                       */
  /*    Note also that the render function can fail and return a           */
  /*    `FT_Err_Unimplemented_Feature' error code if the raster used does  */
  /*    not support direct composition.                                    */
  /*                                                                       */
  /*    XXX: For now, the standard raster doesn't support direct           */
  /*         composition but this should change for the final release (see */
  /*         the files `demos/src/ftgrays.c' and `demos/src/ftgrays2.c'    */
  /*         for examples of distinct implementations that support direct  */
  /*         composition).                                                 */
  /*                                                                       */
  typedef int
  (*FT_Raster_RenderFunc)( FT_Raster                raster,
                           const FT_Raster_Params*  params );

#define FT_Raster_Render_Func  FT_Raster_RenderFunc


  /*************************************************************************/
  /*                                                                       */
  /* <Struct>                                                              */
  /*    FT_Raster_Funcs                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*   A structure used to describe a given raster class to the library.   */
  /*                                                                       */
  /* <Fields>                                                              */
  /*    glyph_format  :: The supported glyph format for this raster.       */
  /*                                                                       */
  /*    raster_new    :: The raster constructor.                           */
  /*                                                                       */
  /*    raster_reset  :: Used to reset the render pool within the raster.  */
  /*                                                                       */
  /*    raster_render :: A function to render a glyph into a given bitmap. */
  /*                                                                       */
  /*    raster_done   :: The raster destructor.                            */
  /*                                                                       */
  typedef struct  FT_Raster_Funcs_
  {
    FT_Glyph_Format        glyph_format;

    FT_Raster_NewFunc      raster_new;
    FT_Raster_ResetFunc    raster_reset;
    FT_Raster_SetModeFunc  raster_set_mode;
    FT_Raster_RenderFunc   raster_render;
    FT_Raster_DoneFunc     raster_done;

  } FT_Raster_Funcs;

  /* */


FT_END_HEADER

#endif /* FTIMAGE_H_ */


/* END */


/* Local Variables: */
/* coding: utf-8    */
/* End:             */
@


1.5
log
@fastmerge
@
text
@d8 1
a8 2
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,   */
/*            2010 by                                                      */
d27 2
a28 2
#ifndef __FTIMAGE_H__
#define __FTIMAGE_H__
d31 2
a32 2
  /* _STANDALONE_ is from ftgrays.c */
#ifndef _STANDALONE_
d56 1
a56 1
  /*    units, or 16.16, or 26.6 fixed float pixel coordinates.            */
d171 9
d189 1
d196 2
a197 16
  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    ft_pixel_mode_xxx                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A list of deprecated constants.  Use the corresponding             */
  /*    @@FT_Pixel_Mode values instead.                                     */
  /*                                                                       */
  /* <Values>                                                              */
  /*    ft_pixel_mode_none  :: See @@FT_PIXEL_MODE_NONE.                    */
  /*    ft_pixel_mode_mono  :: See @@FT_PIXEL_MODE_MONO.                    */
  /*    ft_pixel_mode_grays :: See @@FT_PIXEL_MODE_GRAY.                    */
  /*    ft_pixel_mode_pal2  :: See @@FT_PIXEL_MODE_GRAY2.                   */
  /*    ft_pixel_mode_pal4  :: See @@FT_PIXEL_MODE_GRAY4.                   */
  /*                                                                       */
a203 39
 /* */

#if 0

  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    FT_Palette_Mode                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    THIS TYPE IS DEPRECATED.  DO NOT USE IT!                           */
  /*                                                                       */
  /*    An enumeration type to describe the format of a bitmap palette,    */
  /*    used with ft_pixel_mode_pal4 and ft_pixel_mode_pal8.               */
  /*                                                                       */
  /* <Values>                                                              */
  /*    ft_palette_mode_rgb  :: The palette is an array of 3-byte RGB      */
  /*                            records.                                   */
  /*                                                                       */
  /*    ft_palette_mode_rgba :: The palette is an array of 4-byte RGBA     */
  /*                            records.                                   */
  /*                                                                       */
  /* <Note>                                                                */
  /*    As ft_pixel_mode_pal2, pal4 and pal8 are currently unused by       */
  /*    FreeType, these types are not handled by the library itself.       */
  /*                                                                       */
  typedef enum  FT_Palette_Mode_
  {
    ft_palette_mode_rgb = 0,
    ft_palette_mode_rgba,

    ft_palette_mode_max   /* do not remove */

  } FT_Palette_Mode;

  /* */

#endif

d227 5
d235 7
a260 5
  /* <Note>                                                                */
  /*   For now, the only pixel modes supported by FreeType are mono and    */
  /*   grays.  However, drivers might be added in the future to support    */
  /*   more `colorful' options.                                            */
  /*                                                                       */
d263 2
a264 2
    int             rows;
    int             width;
d267 3
a269 3
    short           num_grays;
    char            pixel_mode;
    char            palette_mode;
d326 1
a326 1
  /*                  how to convert/grid-fit it.  See @@FT_OUTLINE_FLAGS.  */
d347 2
d358 1
a358 1
  /*    FT_OUTLINE_FLAGS                                                   */
d439 2
a440 18
 /*************************************************************************
  *
  * @@enum:
  *   ft_outline_flags
  *
  * @@description:
  *   These constants are deprecated.  Please use the corresponding
  *   @@FT_OUTLINE_FLAGS values.
  *
  * @@values:
  *   ft_outline_none            :: See @@FT_OUTLINE_NONE.
  *   ft_outline_owner           :: See @@FT_OUTLINE_OWNER.
  *   ft_outline_even_odd_fill   :: See @@FT_OUTLINE_EVEN_ODD_FILL.
  *   ft_outline_reverse_fill    :: See @@FT_OUTLINE_REVERSE_FILL.
  *   ft_outline_ignore_dropouts :: See @@FT_OUTLINE_IGNORE_DROPOUTS.
  *   ft_outline_high_precision  :: See @@FT_OUTLINE_HIGH_PRECISION.
  *   ft_outline_single_pass     :: See @@FT_OUTLINE_SINGLE_PASS.
  */
d486 1
a486 1
  /*    user :: A typeless pointer which is passed from the caller of the  */
d513 1
a513 1
  /*    user :: A typeless pointer which is passed from the caller of the  */
d544 1
a544 1
  /*    user    :: A typeless pointer which is passed from the caller of   */
d576 1
a576 1
  /*    user     :: A typeless pointer which is passed from the caller of  */
d727 2
a728 16
  /*************************************************************************/
  /*                                                                       */
  /* <Enum>                                                                */
  /*    ft_glyph_format_xxx                                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*    A list of deprecated constants.  Use the corresponding             */
  /*    @@FT_Glyph_Format values instead.                                   */
  /*                                                                       */
  /* <Values>                                                              */
  /*    ft_glyph_format_none      :: See @@FT_GLYPH_FORMAT_NONE.            */
  /*    ft_glyph_format_composite :: See @@FT_GLYPH_FORMAT_COMPOSITE.       */
  /*    ft_glyph_format_bitmap    :: See @@FT_GLYPH_FORMAT_BITMAP.          */
  /*    ft_glyph_format_outline   :: See @@FT_GLYPH_FORMAT_OUTLINE.         */
  /*    ft_glyph_format_plotter   :: See @@FT_GLYPH_FORMAT_PLOTTER.         */
  /*                                                                       */
d750 1
a750 1
  /* a a bitmap.  This section contains the public API for rasters.        */
d753 2
a754 2
  /* specific modules called `renderers'.  See `freetype/ftrender.h' for   */
  /* more details on renderers.                                            */
d773 15
d797 2
a798 2
  /*    A handle (pointer) to a raster object.  Each object can be used    */
  /*    independently to convert an outline into a bitmap or pixmap.       */
d809 2
a810 2
  /*    A structure used to model a single span of gray (or black) pixels  */
  /*    when rendering a monochrome or anti-aliased bitmap.                */
d818 1
a818 2
  /*                to 255 (foreground).  Only used for anti-aliased       */
  /*                rendering.                                             */
d822 2
a823 2
  /*    @@FT_SpanFunc which takes the y~coordinate of the span as a         */
  /*    a parameter.                                                       */
a862 10
  /*    Note that the `count' field cannot be greater than a fixed value   */
  /*    defined by the `FT_MAX_GRAY_SPANS' configuration macro in          */
  /*    `ftoption.h'.  By default, this value is set to~32, which means    */
  /*    that if there are more than 32~spans on a given scanline, the      */
  /*    callback is called several times with the same `y' parameter in    */
  /*    order to draw all callbacks.                                       */
  /*                                                                       */
  /*    Otherwise, the callback is only called once per scan-line, and     */
  /*    only for those scanlines that do have `gray' pixels on them.       */
  /*                                                                       */
d878 1
a878 16
  /*    THIS TYPE IS DEPRECATED.  DO NOT USE IT.                           */
  /*                                                                       */
  /*    A function used as a call-back by the monochrome scan-converter    */
  /*    to test whether a given target pixel is already set to the drawing */
  /*    `color'.  These tests are crucial to implement drop-out control    */
  /*    per-se the TrueType spec.                                          */
  /*                                                                       */
  /* <Input>                                                               */
  /*    y     :: The pixel's y~coordinate.                                 */
  /*                                                                       */
  /*    x     :: The pixel's x~coordinate.                                 */
  /*                                                                       */
  /*    user  :: User-supplied data that is passed to the callback.        */
  /*                                                                       */
  /* <Return>                                                              */
  /*   1~if the pixel is `set', 0~otherwise.                               */
d892 1
a892 15
  /*    THIS TYPE IS DEPRECATED.  DO NOT USE IT.                           */
  /*                                                                       */
  /*    A function used as a call-back by the monochrome scan-converter    */
  /*    to set an individual target pixel.  This is crucial to implement   */
  /*    drop-out control according to the TrueType specification.          */
  /*                                                                       */
  /* <Input>                                                               */
  /*    y     :: The pixel's y~coordinate.                                 */
  /*                                                                       */
  /*    x     :: The pixel's x~coordinate.                                 */
  /*                                                                       */
  /*    user  :: User-supplied data that is passed to the callback.        */
  /*                                                                       */
  /* <Return>                                                              */
  /*    1~if the pixel is `set', 0~otherwise.                              */
d926 2
a927 2
  /*                              Note that for now, direct rendering is   */
  /*                              only possible with anti-aliased glyphs.  */
d945 2
a946 1
  /* deprecated */
d972 1
a972 1
  /*    black_spans :: The black span drawing callback.  UNIMPLEMENTED!    */
d974 1
a974 1
  /*    bit_test    :: The bit test callback.  UNIMPLEMENTED!              */
d976 1
a976 1
  /*    bit_set     :: The bit set callback.  UNIMPLEMENTED!               */
d993 3
a995 9
  /*    spans, in the case of an aa glyph bitmap, it will call             */
  /*    `black_spans', and `bit_test' and `bit_set' in the case of a       */
  /*    monochrome bitmap.  This allows direct composition over a          */
  /*    pre-existing bitmap through user-provided callbacks to perform the */
  /*    span drawing/composition.                                          */
  /*                                                                       */
  /*    Note that the `bit_test' and `bit_set' callbacks are required when */
  /*    rendering a monochrome bitmap, as they are crucial to implement    */
  /*    correct drop-out control as defined in the TrueType specification. */
d1003 3
a1005 3
    FT_SpanFunc             black_spans;  /* doesn't work! */
    FT_Raster_BitTest_Func  bit_test;     /* doesn't work! */
    FT_Raster_BitSet_Func   bit_set;      /* doesn't work! */
d1066 4
a1069 4
  /*    FreeType provides an area of memory called the `render pool',      */
  /*    available to all registered rasters.  This pool can be freely used */
  /*    during a given scan-conversion but is shared by all rasters.  Its  */
  /*    content is thus transient.                                         */
d1082 1
a1082 1
  /*    Rasters can ignore the render pool and rely on dynamic memory      */
d1084 1
a1084 2
  /*    passed to the raster constructor).  However, this is not           */
  /*    recommended for efficiency purposes.                               */
d1151 1
a1151 1
  /*         for examples of distinct implementations which support direct */
d1183 1
a1191 1

d1197 1
a1197 1
#endif /* __FTIMAGE_H__ */
@


1.4
log
@Merge freetype 2.3.6
@
text
@d8 2
a9 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 by       */
d55 3
a57 4
  /*    The type FT_Pos is a 32-bit integer used to store vectorial        */
  /*    coordinates.  Depending on the context, these can represent        */
  /*    distances in integer font units, or 16,16, or 26.6 fixed float     */
  /*    pixel coordinates.                                                 */
d102 14
d136 1
a136 1
  /*      Value 0 is reserved.                                             */
d139 1
a139 1
  /*      A monochrome bitmap, using 1 bit per pixel.  Note that pixels    */
d146 2
a147 2
  /*      of value `gray' levels is stored in the `num_bytes' field of     */
  /*      the @@FT_Bitmap structure (it generally is 256).                  */
d150 4
a153 3
  /*      A 2-bit/pixel bitmap, used to represent embedded anti-aliased    */
  /*      bitmaps in font files according to the OpenType specification.   */
  /*      We haven't found a single font using this format, however.       */
d156 1
a156 1
  /*      A 4-bit/pixel bitmap, used to represent embedded anti-aliased    */
d161 3
a163 3
  /*      An 8-bit bitmap, used to represent RGB or BGR decimated glyph    */
  /*      images used for display on LCD displays; the bitmap is three     */
  /*      times wider than the original glyph image.  See also             */
d167 3
a169 3
  /*      An 8-bit bitmap, used to represent RGB or BGR decimated glyph    */
  /*      images used for display on rotated LCD displays; the bitmap      */
  /*      is three times taller than the original glyph image.  See also   */
d225 1
a225 1
  /*    ft_palette_mode_rgb  :: The palette is an array of 3-bytes RGB     */
d228 1
a228 1
  /*    ft_palette_mode_rgba :: The palette is an array of 4-bytes RGBA    */
d271 3
d338 5
a342 3
  /*                  each outline point's type.  If bit 0 is unset, the   */
  /*                  point is `off' the curve, i.e., a Bézier control     */
  /*                  point, while it is `on' when set.                    */
d344 1
a344 1
  /*                  Bit 1 is meaningful for `off' points only.  If set,  */
d348 7
d365 6
d384 5
d393 1
a393 1
  /*   FT_OUTLINE_FLAGS                                                    */
d400 49
a448 1
  /*    FT_OUTLINE_NONE           :: Value 0 is reserved.                  */
d450 11
a460 46
  /*    FT_OUTLINE_OWNER          :: If set, this flag indicates that the  */
  /*                                 outline's field arrays (i.e.,         */
  /*                                 `points', `flags' & `contours') are   */
  /*                                 `owned' by the outline object, and    */
  /*                                 should thus be freed when it is       */
  /*                                 destroyed.                            */
  /*                                                                       */
  /*   FT_OUTLINE_EVEN_ODD_FILL   :: By default, outlines are filled using */
  /*                                 the non-zero winding rule.  If set to */
  /*                                 1, the outline will be filled using   */
  /*                                 the even-odd fill rule (only works    */
  /*                                 with the smooth raster).              */
  /*                                                                       */
  /*   FT_OUTLINE_REVERSE_FILL    :: By default, outside contours of an    */
  /*                                 outline are oriented in clock-wise    */
  /*                                 direction, as defined in the TrueType */
  /*                                 specification.  This flag is set if   */
  /*                                 the outline uses the opposite         */
  /*                                 direction (typically for Type 1       */
  /*                                 fonts).  This flag is ignored by the  */
  /*                                 scan-converter.                       */
  /*                                                                       */
  /*   FT_OUTLINE_IGNORE_DROPOUTS :: By default, the scan converter will   */
  /*                                 try to detect drop-outs in an outline */
  /*                                 and correct the glyph bitmap to       */
  /*                                 ensure consistent shape continuity.   */
  /*                                 If set, this flag hints the scan-line */
  /*                                 converter to ignore such cases.       */
  /*                                                                       */
  /*   FT_OUTLINE_HIGH_PRECISION  :: This flag indicates that the          */
  /*                                 scan-line converter should try to     */
  /*                                 convert this outline to bitmaps with  */
  /*                                 the highest possible quality.  It is  */
  /*                                 typically set for small character     */
  /*                                 sizes.  Note that this is only a      */
  /*                                 hint, that might be completely        */
  /*                                 ignored by a given scan-converter.    */
  /*                                                                       */
  /*   FT_OUTLINE_SINGLE_PASS     :: This flag is set to force a given     */
  /*                                 scan-converter to only use a single   */
  /*                                 pass over the outline to render a     */
  /*                                 bitmap glyph image.  Normally, it is  */
  /*                                 set for very large character sizes.   */
  /*                                 It is only a hint, that might be      */
  /*                                 completely ignored by a given         */
  /*                                 scan-converter.                       */
d467 2
d504 5
a508 3
#define FT_CURVE_TAG_ON           1
#define FT_CURVE_TAG_CONIC        0
#define FT_CURVE_TAG_CUBIC        2
d510 2
a511 2
#define FT_CURVE_TAG_TOUCH_X      8  /* reserved for the TrueType hinter */
#define FT_CURVE_TAG_TOUCH_Y     16  /* reserved for the TrueType hinter */
d513 2
a514 2
#define FT_CURVE_TAG_TOUCH_BOTH  ( FT_CURVE_TAG_TOUCH_X | \
                                   FT_CURVE_TAG_TOUCH_Y )
d541 1
a541 1
  /*    Error code.  0 means success.                                      */
d568 1
a568 1
  /*    Error code.  0 means success.                                      */
d583 2
a584 2
  /*    A function pointer type use to describe the signature of a `conic  */
  /*    to' function during outline walking/decomposition.                 */
d599 1
a599 1
  /*    Error code.  0 means success.                                      */
d616 1
a616 1
  /*    to' function during outline walking/decomposition.                 */
d631 1
a631 1
  /*    Error code.  0 means success.                                      */
d649 1
a649 2
  /*    decomposition in order to emit segments, conic, and cubic Béziers, */
  /*    as well as `move to' and `close to' operations.                    */
d676 1
a676 1
  /*    Set the value of `shift' and `delta' to 0 to get the original      */
d709 1
a709 1
  /*    Since many 16bit compilers don't like 32bit enumerations, you      */
d741 1
a741 1
  /*      The value 0 is reserved.                                         */
d761 1
a761 1
  /*      contours.  Some Type 1 fonts, like those in the Hershey family,  */
d873 1
a873 1
  /*    @@FT_SpanFunc which takes the y-coordinate of the span as a         */
d876 2
a877 1
  /*    The coverage value is always between 0 and 255.                    */
d899 1
a899 1
  /*    y     :: The scanline's y-coordinate.                              */
d916 2
a917 2
  /*    `ftoption.h'.  By default, this value is set to 32, which means    */
  /*    that if there are more than 32 spans on a given scanline, the      */
d947 1
a947 1
  /*    y     :: The pixel's y-coordinate.                                 */
d949 1
a949 1
  /*    x     :: The pixel's x-coordinate.                                 */
d954 1
a954 1
  /*   1 if the pixel is `set', 0 otherwise.                               */
d975 1
a975 1
  /*    y     :: The pixel's y-coordinate.                                 */
d977 1
a977 1
  /*    x     :: The pixel's x-coordinate.                                 */
d982 1
a982 1
  /*    1 if the pixel is `set', 0 otherwise.                              */
d1061 1
a1061 1
  /*    black_spans :: The black span drawing callback.                    */
d1098 1
a1098 1
    FT_SpanFunc             black_spans;
d1122 1
a1122 1
  /*    Error code.  0 means success.                                      */
d1222 2
a1223 2
  /*   Invokes a given raster to scan-convert a given glyph image into a   */
  /*   target bitmap.                                                      */
d1232 1
a1232 1
  /*    Error code.  0 means success.                                      */
@


1.3
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007 by             */
d31 1
a31 1
/* _STANDALONE_ is from ftgrays.c */
d209 1
a209 1
  /* <Fields>                                                              */
d225 1
a225 1
    ft_palettte_mode_max   /* do not remove */
d461 6
a466 5
#define  FT_Curve_Tag_On       FT_CURVE_TAG_ON
#define  FT_Curve_Tag_Conic    FT_CURVE_TAG_CONIC
#define  FT_Curve_Tag_Cubic    FT_CURVE_TAG_CUBIC
#define  FT_Curve_Tag_Touch_X  FT_CURVE_TAG_TOUCH_X
#define  FT_Curve_Tag_Touch_Y  FT_CURVE_TAG_TOUCH_Y
d494 1
d519 2
a520 1
#define  FT_Outline_LineTo_Func  FT_Outline_LineToFunc
d551 2
a552 1
#define  FT_Outline_ConicTo_Func  FT_Outline_ConicToFunc
d584 1
a584 1
#define  FT_Outline_CubicTo_Func  FT_Outline_CubicToFunc
d875 1
a875 1
#define FT_Raster_Span_Func   FT_SpanFunc
d1080 2
a1081 1
#define  FT_Raster_New_Func    FT_Raster_NewFunc
d1097 2
a1098 1
#define  FT_Raster_Done_Func   FT_Raster_DoneFunc
d1132 2
a1133 1
#define  FT_Raster_Reset_Func   FT_Raster_ResetFunc
d1158 2
a1159 1
#define  FT_Raster_Set_Mode_Func  FT_Raster_SetModeFunc
d1199 2
a1200 1
#define  FT_Raster_Render_Func    FT_Raster_RenderFunc
d1223 6
a1228 6
    FT_Glyph_Format         glyph_format;
    FT_Raster_NewFunc       raster_new;
    FT_Raster_ResetFunc     raster_reset;
    FT_Raster_SetModeFunc   raster_set_mode;
    FT_Raster_RenderFunc    raster_render;
    FT_Raster_DoneFunc      raster_done;
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006 by                   */
d384 1
a384 2
  /*                                 scan-converter.  However, it is very  */
  /*                                 important for the auto-hinter.        */
d726 1
a726 1
  /*    A list of decprecated constants.  Use the corresponding            */
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2004 by                               */
d132 1
a132 1
  /*      of value "gray" levels is stored in the `num_bytes' field of     */
d147 2
a148 2
  /*      images used for display on LCD displays; the bitmap's width is   */
  /*      three times wider than the original glyph image.  See also       */
d153 3
a155 3
  /*      images used for display on rotated LCD displays; the bitmap's    */
  /*      height is three times taller than the original glyph image.      */
  /*      See also @@FT_RENDER_MODE_LCD_V.                                  */
d182 5
a186 5
  /*    ft_pixel_mode_none  :: see @@FT_PIXEL_MODE_NONE                     */
  /*    ft_pixel_mode_mono  :: see @@FT_PIXEL_MODE_MONO                     */
  /*    ft_pixel_mode_grays :: see @@FT_PIXEL_MODE_GRAY                     */
  /*    ft_pixel_mode_pal2  :: see @@FT_PIXEL_MODE_GRAY2                    */
  /*    ft_pixel_mode_pal4  :: see @@FT_PIXEL_MODE_GRAY4                    */
d206 2
a207 2
  /*    An enumeration type used to describe the format of a bitmap        */
  /*    palette, used with ft_pixel_mode_pal4 and ft_pixel_mode_pal8.      */
d261 1
a261 1
  /*                    `FT_PIXEL_MODE_GRAY'; it gives the number of gray  */
d267 7
a273 5
  /*    palette_mode :: This field is only used with paletted pixel modes; */
  /*                    it indicates how the palette is stored.            */
  /*                                                                       */
  /*    palette      :: A typeless pointer to the bitmap palette; only     */
  /*                    used for paletted pixel modes.                     */
d276 1
a276 1
  /*   For now, the only pixel mode supported by FreeType are mono and     */
a279 8
  /*   When using pixel modes pal2, pal4 and pal8 with a void `palette'    */
  /*   field, a gray pixmap with respectively 4, 16, and 256 levels of     */
  /*   gray is assumed.  This, in order to be compatible with some         */
  /*   embedded bitmap formats defined in the TrueType specification.      */
  /*                                                                       */
  /*   Note that no font was found presenting such embedded bitmaps, so    */
  /*   this is currently completely unhandled by the library.              */
  /*                                                                       */
d316 1
a316 1
  /*    points     :: A pointer to an array of `n_points' FT_Vector        */
d321 1
a321 1
  /*                  point is `off' the curve, i.e. a Bezier control      */
d325 1
a325 1
  /*                  it indicates a third-order Bezier arc control point; */
d336 1
a336 1
  /*                  how to convert/grid-fit it.  See FT_Outline_Flags.   */
d365 1
a365 1
  /*                                 outline's field arrays (i.e.          */
d489 2
a490 2
  (*FT_Outline_MoveToFunc)( FT_Vector*  to,
                            void*       user );
d515 2
a516 2
  (*FT_Outline_LineToFunc)( FT_Vector*  to,
                            void*       user );
d529 1
a529 1
  /*    A `conic to' is emitted to indicate a second-order Bezier arc in   */
d545 3
a547 3
  (*FT_Outline_ConicToFunc)( FT_Vector*  control,
                             FT_Vector*  to,
                             void*       user );
d560 1
a560 1
  /*    A `cubic to' is emitted to indicate a third-order Bezier arc.      */
d563 1
a563 1
  /*    control1 :: A pointer to the first Bezier control point.           */
d565 1
a565 1
  /*    control2 :: A pointer to the second Bezier control point.          */
d576 4
a579 4
  (*FT_Outline_CubicToFunc)( FT_Vector*  control1,
                             FT_Vector*  control2,
                             FT_Vector*  to,
                             void*       user );
d591 1
a591 1
  /*    decomposition in order to emit segments, conic, and cubic Beziers, */
d599 1
a599 1
  /*    conic_to :: The second-order Bezier arc emitter.                   */
d601 1
a601 1
  /*    cubic_to :: The third-order Bezier arc emitter.                    */
d614 1
d617 1
d649 1
a649 1
  /*    This macro converts four letter tags into an unsigned long.        */
d656 1
d658 1
d684 1
a684 1
  /*      The value 0 is reserved and does describe a glyph format.        */
d697 2
a698 2
  /*      The glyph image is a vertorial outline made of line segments     */
  /*      and Bezier arcs; it can be described as an @@FT_Outline; you      */
d703 1
a703 1
  /*      The glyph image is a vectorial path with no inside/outside       */
d731 5
a735 5
  /*    ft_glyph_format_none      :: see @@FT_GLYPH_FORMAT_NONE             */
  /*    ft_glyph_format_composite :: see @@FT_GLYPH_FORMAT_COMPOSITE        */
  /*    ft_glyph_format_bitmap    :: see @@FT_GLYPH_FORMAT_BITMAP           */
  /*    ft_glyph_format_outline   :: see @@FT_GLYPH_FORMAT_OUTLINE          */
  /*    ft_glyph_format_plotter   :: see @@FT_GLYPH_FORMAT_PLOTTER          */
d773 1
a773 1
  /*    Scanline converter                                                 */
d816 1
a816 1
  /*    FT_SpanFunc which takes the y-coordinate of the span as a          */
d819 1
a819 2
  /*    The coverage value is always between 0 and 255, even if the number */
  /*    of gray levels have been set through FT_Set_Gray_Levels().         */
d857 5
a861 5
  /*    defined by the FT_MAX_GRAY_SPANS configuration macro in            */
  /*    ftoption.h.  By default, this value is set to 32, which means that */
  /*    if there are more than 32 spans on a given scanline, the callback  */
  /*    will be called several times with the same `y' parameter in order  */
  /*    to draw all callbacks.                                             */
d867 4
a870 4
  (*FT_SpanFunc)( int       y,
                  int       count,
                  FT_Span*  spans,
                  void*     user );
d964 2
a965 2
  /*                              "clip_box" field of the FT_Raster_Params */
  /*                              structure.                               */
d996 2
a997 2
  /*    source      :: A pointer to the source glyph image (e.g. an        */
  /*                   FT_Outline).                                        */
d1018 3
a1020 3
  /*    An anti-aliased glyph bitmap is drawn if the FT_RASTER_FLAG_AA bit */
  /*    flag is set in the `flags' field, otherwise a monochrome bitmap    */
  /*    will be generated.                                                 */
d1022 1
a1022 1
  /*    If the FT_RASTER_FLAG_DIRECT bit flag is set in `flags', the       */
d1036 2
a1037 2
    FT_Bitmap*              target;
    void*                   source;
d1069 3
a1071 3
  /*    practice, it is a FT_Memory, i.e., a handle to the standard        */
  /*    FreeType memory allocator.  However, this field can be completely  */
  /*    ignored by a given raster implementation.                          */
d1166 2
a1167 2
  /*    params :: A pointer to a FT_Raster_Params structure used to store  */
  /*              the rendering parameters.                                */
d1174 2
a1175 2
  /*    format defined in its FT_Raster_Funcs structure.  It can be an     */
  /*    FT_Outline or anything else in order to support a large array of   */
d1179 1
a1179 1
  /*    FT_Err_Unimplemented_Feature error code if the raster used does    */
d1184 2
a1185 2
  /*         the files demos/src/ftgrays.c and demos/src/ftgrays2.c for    */
  /*         examples of distinct implementations which support direct     */
d1189 2
a1190 2
  (*FT_Raster_RenderFunc)( FT_Raster          raster,
                           FT_Raster_Params*  params );
d1234 5
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007 by             */
d132 1
a132 1
  /*      of value `gray' levels is stored in the `num_bytes' field of     */
d147 2
a148 2
  /*      images used for display on LCD displays; the bitmap is three     */
  /*      times wider than the original glyph image.  See also             */
d153 3
a155 3
  /*      images used for display on rotated LCD displays; the bitmap      */
  /*      is three times taller than the original glyph image.  See also   */
  /*      @@FT_RENDER_MODE_LCD_V.                                           */
d182 5
a186 5
  /*    ft_pixel_mode_none  :: See @@FT_PIXEL_MODE_NONE.                    */
  /*    ft_pixel_mode_mono  :: See @@FT_PIXEL_MODE_MONO.                    */
  /*    ft_pixel_mode_grays :: See @@FT_PIXEL_MODE_GRAY.                    */
  /*    ft_pixel_mode_pal2  :: See @@FT_PIXEL_MODE_GRAY2.                   */
  /*    ft_pixel_mode_pal4  :: See @@FT_PIXEL_MODE_GRAY4.                   */
d206 2
a207 2
  /*    An enumeration type to describe the format of a bitmap palette,    */
  /*    used with ft_pixel_mode_pal4 and ft_pixel_mode_pal8.               */
d261 1
a261 1
  /*                    @@FT_PIXEL_MODE_GRAY; it gives the number of gray   */
d267 5
a271 7
  /*    palette_mode :: This field is intended for paletted pixel modes;   */
  /*                    it indicates how the palette is stored.  Not       */
  /*                    used currently.                                    */
  /*                                                                       */
  /*    palette      :: A typeless pointer to the bitmap palette; this     */
  /*                    field is intended for paletted pixel modes.  Not   */
  /*                    used currently.                                    */
d274 1
a274 1
  /*   For now, the only pixel modes supported by FreeType are mono and    */
d278 8
d322 1
a322 1
  /*    points     :: A pointer to an array of `n_points' @@FT_Vector       */
d327 1
a327 1
  /*                  point is `off' the curve, i.e., a Bézier control     */
d331 1
a331 1
  /*                  it indicates a third-order Bézier arc control point; */
d342 1
a342 1
  /*                  how to convert/grid-fit it.  See @@FT_OUTLINE_FLAGS.  */
d371 1
a371 1
  /*                                 outline's field arrays (i.e.,         */
d390 2
a391 1
  /*                                 scan-converter.                       */
d495 2
a496 2
  (*FT_Outline_MoveToFunc)( const FT_Vector*  to,
                            void*             user );
d521 2
a522 2
  (*FT_Outline_LineToFunc)( const FT_Vector*  to,
                            void*             user );
d535 1
a535 1
  /*    A `conic to' is emitted to indicate a second-order Bézier arc in   */
d551 3
a553 3
  (*FT_Outline_ConicToFunc)( const FT_Vector*  control,
                             const FT_Vector*  to,
                             void*             user );
d566 1
a566 1
  /*    A `cubic to' is emitted to indicate a third-order Bézier arc.      */
d569 1
a569 1
  /*    control1 :: A pointer to the first Bézier control point.           */
d571 1
a571 1
  /*    control2 :: A pointer to the second Bézier control point.          */
d582 4
a585 4
  (*FT_Outline_CubicToFunc)( const FT_Vector*  control1,
                             const FT_Vector*  control2,
                             const FT_Vector*  to,
                             void*             user );
d597 1
a597 1
  /*    decomposition in order to emit segments, conic, and cubic Béziers, */
d605 1
a605 1
  /*    conic_to :: The second-order Bézier arc emitter.                   */
d607 1
a607 1
  /*    cubic_to :: The third-order Bézier arc emitter.                    */
a619 1
  /*    {                                                                  */
a621 1
  /*    }                                                                  */
d653 1
a653 1
  /*    This macro converts four-letter tags to an unsigned long type.     */
a659 1
  /*    {                                                                  */
a660 1
  /*    }                                                                  */
d686 1
a686 1
  /*      The value 0 is reserved.                                         */
d699 2
a700 2
  /*      The glyph image is a vectorial outline made of line segments     */
  /*      and Bézier arcs; it can be described as an @@FT_Outline; you      */
d705 1
a705 1
  /*      The glyph image is a vectorial path with no inside and outside   */
d729 1
a729 1
  /*    A list of deprecated constants.  Use the corresponding             */
d733 5
a737 5
  /*    ft_glyph_format_none      :: See @@FT_GLYPH_FORMAT_NONE.            */
  /*    ft_glyph_format_composite :: See @@FT_GLYPH_FORMAT_COMPOSITE.       */
  /*    ft_glyph_format_bitmap    :: See @@FT_GLYPH_FORMAT_BITMAP.          */
  /*    ft_glyph_format_outline   :: See @@FT_GLYPH_FORMAT_OUTLINE.         */
  /*    ft_glyph_format_plotter   :: See @@FT_GLYPH_FORMAT_PLOTTER.         */
d775 1
a775 1
  /*    Scanline Converter                                                 */
d818 1
a818 1
  /*    @@FT_SpanFunc which takes the y-coordinate of the span as a         */
d821 2
a822 1
  /*    The coverage value is always between 0 and 255.                    */
d860 5
a864 5
  /*    defined by the `FT_MAX_GRAY_SPANS' configuration macro in          */
  /*    `ftoption.h'.  By default, this value is set to 32, which means    */
  /*    that if there are more than 32 spans on a given scanline, the      */
  /*    callback is called several times with the same `y' parameter in    */
  /*    order to draw all callbacks.                                       */
d870 4
a873 4
  (*FT_SpanFunc)( int             y,
                  int             count,
                  const FT_Span*  spans,
                  void*           user );
d967 2
a968 2
  /*                              `clip_box' field of the                  */
  /*                              @@FT_Raster_Params structure.             */
d999 2
a1000 2
  /*    source      :: A pointer to the source glyph image (e.g., an       */
  /*                   @@FT_Outline).                                       */
d1021 3
a1023 3
  /*    An anti-aliased glyph bitmap is drawn if the @@FT_RASTER_FLAG_AA    */
  /*    bit flag is set in the `flags' field, otherwise a monochrome       */
  /*    bitmap is generated.                                               */
d1025 1
a1025 1
  /*    If the @@FT_RASTER_FLAG_DIRECT bit flag is set in `flags', the      */
d1039 2
a1040 2
    const FT_Bitmap*        target;
    const void*             source;
d1072 3
a1074 3
  /*    practice, it is an @@FT_Memory object, i.e., a handle to the        */
  /*    standard FreeType memory allocator.  However, this field can be    */
  /*    completely ignored by a given raster implementation.               */
d1169 2
a1170 2
  /*    params :: A pointer to an @@FT_Raster_Params structure used to      */
  /*              store the rendering parameters.                          */
d1177 2
a1178 2
  /*    format defined in its @@FT_Raster_Funcs structure.  It can be an    */
  /*    @@FT_Outline or anything else in order to support a large array of  */
d1182 1
a1182 1
  /*    `FT_Err_Unimplemented_Feature' error code if the raster used does  */
d1187 2
a1188 2
  /*         the files `demos/src/ftgrays.c' and `demos/src/ftgrays2.c'    */
  /*         for examples of distinct implementations which support direct */
d1192 2
a1193 2
  (*FT_Raster_RenderFunc)( FT_Raster                raster,
                           const FT_Raster_Params*  params );
a1236 5


/* Local Variables: */
/* coding: utf-8    */
/* End:             */
@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 by       */
d31 1
a31 1
  /* _STANDALONE_ is from ftgrays.c */
d209 1
a209 1
  /* <Values>                                                              */
d225 1
a225 1
    ft_palette_mode_max   /* do not remove */
d461 5
a465 6
#define FT_Curve_Tag_On       FT_CURVE_TAG_ON
#define FT_Curve_Tag_Conic    FT_CURVE_TAG_CONIC
#define FT_Curve_Tag_Cubic    FT_CURVE_TAG_CUBIC
#define FT_Curve_Tag_Touch_X  FT_CURVE_TAG_TOUCH_X
#define FT_Curve_Tag_Touch_Y  FT_CURVE_TAG_TOUCH_Y

a492 1

d517 1
a517 2
#define FT_Outline_LineTo_Func  FT_Outline_LineToFunc

d548 1
a548 2
#define FT_Outline_ConicTo_Func  FT_Outline_ConicToFunc

d580 1
a580 1
#define FT_Outline_CubicTo_Func  FT_Outline_CubicToFunc
d871 1
a871 1
#define FT_Raster_Span_Func  FT_SpanFunc
d1076 1
a1076 2
#define FT_Raster_New_Func  FT_Raster_NewFunc

d1092 1
a1092 2
#define FT_Raster_Done_Func  FT_Raster_DoneFunc

d1126 1
a1126 2
#define FT_Raster_Reset_Func  FT_Raster_ResetFunc

d1151 1
a1151 2
#define FT_Raster_Set_Mode_Func  FT_Raster_SetModeFunc

d1191 1
a1191 2
#define FT_Raster_Render_Func  FT_Raster_RenderFunc

d1214 6
a1219 6
    FT_Glyph_Format        glyph_format;
    FT_Raster_NewFunc      raster_new;
    FT_Raster_ResetFunc    raster_reset;
    FT_Raster_SetModeFunc  raster_set_mode;
    FT_Raster_RenderFunc   raster_render;
    FT_Raster_DoneFunc     raster_done;
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d8 1
a8 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006 by                   */
d132 1
a132 1
  /*      of value `gray' levels is stored in the `num_bytes' field of     */
d147 2
a148 2
  /*      images used for display on LCD displays; the bitmap is three     */
  /*      times wider than the original glyph image.  See also             */
d153 3
a155 3
  /*      images used for display on rotated LCD displays; the bitmap      */
  /*      is three times taller than the original glyph image.  See also   */
  /*      @@FT_RENDER_MODE_LCD_V.                                           */
d182 5
a186 5
  /*    ft_pixel_mode_none  :: See @@FT_PIXEL_MODE_NONE.                    */
  /*    ft_pixel_mode_mono  :: See @@FT_PIXEL_MODE_MONO.                    */
  /*    ft_pixel_mode_grays :: See @@FT_PIXEL_MODE_GRAY.                    */
  /*    ft_pixel_mode_pal2  :: See @@FT_PIXEL_MODE_GRAY2.                   */
  /*    ft_pixel_mode_pal4  :: See @@FT_PIXEL_MODE_GRAY4.                   */
d206 2
a207 2
  /*    An enumeration type to describe the format of a bitmap palette,    */
  /*    used with ft_pixel_mode_pal4 and ft_pixel_mode_pal8.               */
d261 1
a261 1
  /*                    @@FT_PIXEL_MODE_GRAY; it gives the number of gray   */
d267 5
a271 7
  /*    palette_mode :: This field is intended for paletted pixel modes;   */
  /*                    it indicates how the palette is stored.  Not       */
  /*                    used currently.                                    */
  /*                                                                       */
  /*    palette      :: A typeless pointer to the bitmap palette; this     */
  /*                    field is intended for paletted pixel modes.  Not   */
  /*                    used currently.                                    */
d274 1
a274 1
  /*   For now, the only pixel modes supported by FreeType are mono and    */
d278 8
d322 1
a322 1
  /*    points     :: A pointer to an array of `n_points' @@FT_Vector       */
d327 1
a327 1
  /*                  point is `off' the curve, i.e., a Bézier control     */
d331 1
a331 1
  /*                  it indicates a third-order Bézier arc control point; */
d342 1
a342 1
  /*                  how to convert/grid-fit it.  See @@FT_OUTLINE_FLAGS.  */
d371 1
a371 1
  /*                                 outline's field arrays (i.e.,         */
d495 2
a496 2
  (*FT_Outline_MoveToFunc)( const FT_Vector*  to,
                            void*             user );
d521 2
a522 2
  (*FT_Outline_LineToFunc)( const FT_Vector*  to,
                            void*             user );
d535 1
a535 1
  /*    A `conic to' is emitted to indicate a second-order Bézier arc in   */
d551 3
a553 3
  (*FT_Outline_ConicToFunc)( const FT_Vector*  control,
                             const FT_Vector*  to,
                             void*             user );
d566 1
a566 1
  /*    A `cubic to' is emitted to indicate a third-order Bézier arc.      */
d569 1
a569 1
  /*    control1 :: A pointer to the first Bézier control point.           */
d571 1
a571 1
  /*    control2 :: A pointer to the second Bézier control point.          */
d582 4
a585 4
  (*FT_Outline_CubicToFunc)( const FT_Vector*  control1,
                             const FT_Vector*  control2,
                             const FT_Vector*  to,
                             void*             user );
d597 1
a597 1
  /*    decomposition in order to emit segments, conic, and cubic Béziers, */
d605 1
a605 1
  /*    conic_to :: The second-order Bézier arc emitter.                   */
d607 1
a607 1
  /*    cubic_to :: The third-order Bézier arc emitter.                    */
a619 1
  /*    {                                                                  */
a621 1
  /*    }                                                                  */
d653 1
a653 1
  /*    This macro converts four-letter tags to an unsigned long type.     */
a659 1
  /*    {                                                                  */
a660 1
  /*    }                                                                  */
d686 1
a686 1
  /*      The value 0 is reserved.                                         */
d699 2
a700 2
  /*      The glyph image is a vectorial outline made of line segments     */
  /*      and Bézier arcs; it can be described as an @@FT_Outline; you      */
d705 1
a705 1
  /*      The glyph image is a vectorial path with no inside and outside   */
d733 5
a737 5
  /*    ft_glyph_format_none      :: See @@FT_GLYPH_FORMAT_NONE.            */
  /*    ft_glyph_format_composite :: See @@FT_GLYPH_FORMAT_COMPOSITE.       */
  /*    ft_glyph_format_bitmap    :: See @@FT_GLYPH_FORMAT_BITMAP.          */
  /*    ft_glyph_format_outline   :: See @@FT_GLYPH_FORMAT_OUTLINE.         */
  /*    ft_glyph_format_plotter   :: See @@FT_GLYPH_FORMAT_PLOTTER.         */
d775 1
a775 1
  /*    Scanline Converter                                                 */
d818 1
a818 1
  /*    @@FT_SpanFunc which takes the y-coordinate of the span as a         */
d821 2
a822 1
  /*    The coverage value is always between 0 and 255.                    */
d860 5
a864 5
  /*    defined by the `FT_MAX_GRAY_SPANS' configuration macro in          */
  /*    `ftoption.h'.  By default, this value is set to 32, which means    */
  /*    that if there are more than 32 spans on a given scanline, the      */
  /*    callback is called several times with the same `y' parameter in    */
  /*    order to draw all callbacks.                                       */
d870 4
a873 4
  (*FT_SpanFunc)( int             y,
                  int             count,
                  const FT_Span*  spans,
                  void*           user );
d967 2
a968 2
  /*                              `clip_box' field of the                  */
  /*                              @@FT_Raster_Params structure.             */
d999 2
a1000 2
  /*    source      :: A pointer to the source glyph image (e.g., an       */
  /*                   @@FT_Outline).                                       */
d1021 3
a1023 3
  /*    An anti-aliased glyph bitmap is drawn if the @@FT_RASTER_FLAG_AA    */
  /*    bit flag is set in the `flags' field, otherwise a monochrome       */
  /*    bitmap is generated.                                               */
d1025 1
a1025 1
  /*    If the @@FT_RASTER_FLAG_DIRECT bit flag is set in `flags', the      */
d1039 2
a1040 2
    const FT_Bitmap*        target;
    const void*             source;
d1072 3
a1074 3
  /*    practice, it is an @@FT_Memory object, i.e., a handle to the        */
  /*    standard FreeType memory allocator.  However, this field can be    */
  /*    completely ignored by a given raster implementation.               */
d1169 2
a1170 2
  /*    params :: A pointer to an @@FT_Raster_Params structure used to      */
  /*              store the rendering parameters.                          */
d1177 2
a1178 2
  /*    format defined in its @@FT_Raster_Funcs structure.  It can be an    */
  /*    @@FT_Outline or anything else in order to support a large array of  */
d1182 1
a1182 1
  /*    `FT_Err_Unimplemented_Feature' error code if the raster used does  */
d1187 2
a1188 2
  /*         the files `demos/src/ftgrays.c' and `demos/src/ftgrays2.c'    */
  /*         for examples of distinct implementations which support direct */
d1192 2
a1193 2
  (*FT_Raster_RenderFunc)( FT_Raster                raster,
                           const FT_Raster_Params*  params );
a1236 5


/* Local Variables: */
/* coding: utf-8    */
/* End:             */
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d8 1
a8 2
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,   */
/*            2010 by                                                      */
d31 1
a31 1
  /* _STANDALONE_ is from ftgrays.c */
d54 4
a57 3
  /*    The type FT_Pos is used to store vectorial coordinates.  Depending */
  /*    on the context, these can represent distances in integer font      */
  /*    units, or 16.16, or 26.6 fixed float pixel coordinates.            */
a101 14
  /* <Note>                                                                */
  /*    The bounding box is specified with the coordinates of the lower    */
  /*    left and the upper right corner.  In PostScript, those values are  */
  /*    often called (llx,lly) and (urx,ury), respectively.                */
  /*                                                                       */
  /*    If `yMin' is negative, this value gives the glyph's descender.     */
  /*    Otherwise, the glyph doesn't descend below the baseline.           */
  /*    Similarly, if `ymax' is positive, this value gives the glyph's     */
  /*    ascender.                                                          */
  /*                                                                       */
  /*    `xMin' gives the horizontal distance from the glyph's origin to    */
  /*    the left edge of the glyph's bounding box.  If `xMin' is negative, */
  /*    the glyph extends to the left of the origin.                       */
  /*                                                                       */
d122 1
a122 1
  /*      Value~0 is reserved.                                             */
d125 1
a125 1
  /*      A monochrome bitmap, using 1~bit per pixel.  Note that pixels    */
d132 2
a133 2
  /*      of `gray' levels is stored in the `num_grays' field of the       */
  /*      @@FT_Bitmap structure (it generally is 256).                      */
d136 3
a138 4
  /*      A 2-bit per pixel bitmap, used to represent embedded             */
  /*      anti-aliased bitmaps in font files according to the OpenType     */
  /*      specification.  We haven't found a single font using this        */
  /*      format, however.                                                 */
d141 1
a141 1
  /*      A 4-bit per pixel bitmap, representing embedded anti-aliased     */
d146 3
a148 3
  /*      An 8-bit bitmap, representing RGB or BGR decimated glyph images  */
  /*      used for display on LCD displays; the bitmap is three times      */
  /*      wider than the original glyph image.  See also                   */
d152 3
a154 3
  /*      An 8-bit bitmap, representing RGB or BGR decimated glyph images  */
  /*      used for display on rotated LCD displays; the bitmap is three    */
  /*      times taller than the original glyph image.  See also            */
d209 2
a210 2
  /* <Values>                                                              */
  /*    ft_palette_mode_rgb  :: The palette is an array of 3-byte RGB      */
d213 1
a213 1
  /*    ft_palette_mode_rgba :: The palette is an array of 4-byte RGBA     */
d225 1
a225 1
    ft_palette_mode_max   /* do not remove */
a255 3
  /*                    For the B/W rasterizer, `pitch' is always an even  */
  /*                    number.                                            */
  /*                                                                       */
d320 3
a322 1
  /*                  each outline point's type.                           */
d324 1
a324 5
  /*                  If bit~0 is unset, the point is `off' the curve,     */
  /*                  i.e., a Bézier control point, while it is `on' if    */
  /*                  set.                                                 */
  /*                                                                       */
  /*                  Bit~1 is meaningful for `off' points only.  If set,  */
a327 7
  /*                  If bit~2 is set, bits 5-7 contain the drop-out mode  */
  /*                  (as defined in the OpenType specification; the value */
  /*                  is the same as the argument to the SCANMODE          */
  /*                  instruction).                                        */
  /*                                                                       */
  /*                  Bits 3 and~4 are reserved for internal purposes.     */
  /*                                                                       */
a337 6
  /* <Note>                                                                */
  /*    The B/W rasterizer only checks bit~2 in the `tags' array for the   */
  /*    first point of each contour.  The drop-out mode as given with      */
  /*    @@FT_OUTLINE_IGNORE_DROPOUTS, @@FT_OUTLINE_SMART_DROPOUTS, and       */
  /*    @@FT_OUTLINE_INCLUDE_STUBS in `flags' is then overridden.           */
  /*                                                                       */
a350 5
  /* Following limits must be consistent with */
  /* FT_Outline.{n_contours,n_points}         */
#define FT_OUTLINE_CONTOURS_MAX  SHRT_MAX
#define FT_OUTLINE_POINTS_MAX    SHRT_MAX

d355 1
a355 1
  /*    FT_OUTLINE_FLAGS                                                   */
d362 1
a362 2
  /*    FT_OUTLINE_NONE ::                                                 */
  /*      Value~0 is reserved.                                             */
d364 47
a410 58
  /*    FT_OUTLINE_OWNER ::                                                */
  /*      If set, this flag indicates that the outline's field arrays      */
  /*      (i.e., `points', `flags', and `contours') are `owned' by the     */
  /*      outline object, and should thus be freed when it is destroyed.   */
  /*                                                                       */
  /*    FT_OUTLINE_EVEN_ODD_FILL ::                                        */
  /*      By default, outlines are filled using the non-zero winding rule. */
  /*      If set to 1, the outline will be filled using the even-odd fill  */
  /*      rule (only works with the smooth rasterizer).                    */
  /*                                                                       */
  /*    FT_OUTLINE_REVERSE_FILL ::                                         */
  /*      By default, outside contours of an outline are oriented in       */
  /*      clock-wise direction, as defined in the TrueType specification.  */
  /*      This flag is set if the outline uses the opposite direction      */
  /*      (typically for Type~1 fonts).  This flag is ignored by the scan  */
  /*      converter.                                                       */
  /*                                                                       */
  /*    FT_OUTLINE_IGNORE_DROPOUTS ::                                      */
  /*      By default, the scan converter will try to detect drop-outs in   */
  /*      an outline and correct the glyph bitmap to ensure consistent     */
  /*      shape continuity.  If set, this flag hints the scan-line         */
  /*      converter to ignore such cases.  See below for more information. */
  /*                                                                       */
  /*    FT_OUTLINE_SMART_DROPOUTS ::                                       */
  /*      Select smart dropout control.  If unset, use simple dropout      */
  /*      control.  Ignored if @@FT_OUTLINE_IGNORE_DROPOUTS is set.  See    */
  /*      below for more information.                                      */
  /*                                                                       */
  /*    FT_OUTLINE_INCLUDE_STUBS ::                                        */
  /*      If set, turn pixels on for `stubs', otherwise exclude them.      */
  /*      Ignored if @@FT_OUTLINE_IGNORE_DROPOUTS is set.  See below for    */
  /*      more information.                                                */
  /*                                                                       */
  /*    FT_OUTLINE_HIGH_PRECISION ::                                       */
  /*      This flag indicates that the scan-line converter should try to   */
  /*      convert this outline to bitmaps with the highest possible        */
  /*      quality.  It is typically set for small character sizes.  Note   */
  /*      that this is only a hint that might be completely ignored by a   */
  /*      given scan-converter.                                            */
  /*                                                                       */
  /*    FT_OUTLINE_SINGLE_PASS ::                                          */
  /*      This flag is set to force a given scan-converter to only use a   */
  /*      single pass over the outline to render a bitmap glyph image.     */
  /*      Normally, it is set for very large character sizes.  It is only  */
  /*      a hint that might be completely ignored by a given               */
  /*      scan-converter.                                                  */
  /*                                                                       */
  /* <Note>                                                                */
  /*    The flags @@FT_OUTLINE_IGNORE_DROPOUTS, @@FT_OUTLINE_SMART_DROPOUTS, */
  /*    and @@FT_OUTLINE_INCLUDE_STUBS are ignored by the smooth            */
  /*    rasterizer.                                                        */
  /*                                                                       */
  /*    There exists a second mechanism to pass the drop-out mode to the   */
  /*    B/W rasterizer; see the `tags' field in @@FT_Outline.               */
  /*                                                                       */
  /*    Please refer to the description of the `SCANTYPE' instruction in   */
  /*    the OpenType specification (in file `ttinst1.doc') how simple      */
  /*    drop-outs, smart drop-outs, and stubs are defined.                 */
a416 2
#define FT_OUTLINE_SMART_DROPOUTS   0x10
#define FT_OUTLINE_INCLUDE_STUBS    0x20
d452 15
a466 18
#define FT_CURVE_TAG_ON            1
#define FT_CURVE_TAG_CONIC         0
#define FT_CURVE_TAG_CUBIC         2

#define FT_CURVE_TAG_HAS_SCANMODE  4

#define FT_CURVE_TAG_TOUCH_X       8  /* reserved for the TrueType hinter */
#define FT_CURVE_TAG_TOUCH_Y      16  /* reserved for the TrueType hinter */

#define FT_CURVE_TAG_TOUCH_BOTH    ( FT_CURVE_TAG_TOUCH_X | \
                                     FT_CURVE_TAG_TOUCH_Y )

#define FT_Curve_Tag_On       FT_CURVE_TAG_ON
#define FT_Curve_Tag_Conic    FT_CURVE_TAG_CONIC
#define FT_Curve_Tag_Cubic    FT_CURVE_TAG_CUBIC
#define FT_Curve_Tag_Touch_X  FT_CURVE_TAG_TOUCH_X
#define FT_Curve_Tag_Touch_Y  FT_CURVE_TAG_TOUCH_Y

d486 1
a486 1
  /*    Error code.  0~means success.                                      */
a493 1

d512 1
a512 1
  /*    Error code.  0~means success.                                      */
d518 1
a518 2
#define FT_Outline_LineTo_Func  FT_Outline_LineToFunc

d526 2
a527 2
  /*    A function pointer type used to describe the signature of a `conic */
  /*    to' function during outline walking or decomposition.              */
d542 1
a542 1
  /*    Error code.  0~means success.                                      */
d549 1
a549 2
#define FT_Outline_ConicTo_Func  FT_Outline_ConicToFunc

d558 1
a558 1
  /*    to' function during outline walking or decomposition.              */
d573 1
a573 1
  /*    Error code.  0~means success.                                      */
d581 1
a581 1
#define FT_Outline_CubicTo_Func  FT_Outline_CubicToFunc
d591 2
a592 1
  /*    decomposition in order to emit segments, conic, and cubic Béziers. */
d619 1
a619 1
  /*    Set the values of `shift' and `delta' to~0 to get the original     */
d652 1
a652 1
  /*    Since many 16-bit compilers don't like 32-bit enumerations, you    */
d684 1
a684 1
  /*      The value~0 is reserved.                                         */
d704 1
a704 1
  /*      contours.  Some Type~1 fonts, like those in the Hershey family,  */
d727 1
a727 1
  /*    A list of deprecated constants.  Use the corresponding             */
d816 1
a816 1
  /*    @@FT_SpanFunc which takes the y~coordinate of the span as a         */
d819 1
a819 2
  /*    The coverage value is always between 0 and 255.  If you want less  */
  /*    gray values, the callback function has to reduce them.             */
d841 1
a841 1
  /*    y     :: The scanline's y~coordinate.                              */
d858 2
a859 2
  /*    `ftoption.h'.  By default, this value is set to~32, which means    */
  /*    that if there are more than 32~spans on a given scanline, the      */
d872 1
a872 1
#define FT_Raster_Span_Func  FT_SpanFunc
d889 1
a889 1
  /*    y     :: The pixel's y~coordinate.                                 */
d891 1
a891 1
  /*    x     :: The pixel's x~coordinate.                                 */
d896 1
a896 1
  /*   1~if the pixel is `set', 0~otherwise.                               */
d917 1
a917 1
  /*    y     :: The pixel's y~coordinate.                                 */
d919 1
a919 1
  /*    x     :: The pixel's x~coordinate.                                 */
d924 1
a924 1
  /*    1~if the pixel is `set', 0~otherwise.                              */
d1003 1
a1003 1
  /*    black_spans :: The black span drawing callback.  UNIMPLEMENTED!    */
d1040 1
a1040 1
    FT_SpanFunc             black_spans;  /* doesn't work! */
d1064 1
a1064 1
  /*    Error code.  0~means success.                                      */
d1077 1
a1077 2
#define FT_Raster_New_Func  FT_Raster_NewFunc

d1093 1
a1093 2
#define FT_Raster_Done_Func  FT_Raster_DoneFunc

d1127 1
a1127 2
#define FT_Raster_Reset_Func  FT_Raster_ResetFunc

d1152 1
a1152 2
#define FT_Raster_Set_Mode_Func  FT_Raster_SetModeFunc

d1160 2
a1161 2
  /*    Invoke a given raster to scan-convert a given glyph image into a   */
  /*    target bitmap.                                                     */
d1170 1
a1170 1
  /*    Error code.  0~means success.                                      */
d1192 1
a1192 2
#define FT_Raster_Render_Func  FT_Raster_RenderFunc

d1215 6
a1220 6
    FT_Glyph_Format        glyph_format;
    FT_Raster_NewFunc      raster_new;
    FT_Raster_ResetFunc    raster_reset;
    FT_Raster_SetModeFunc  raster_set_mode;
    FT_Raster_RenderFunc   raster_render;
    FT_Raster_DoneFunc     raster_done;
@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d8 2
a9 1
/*  Copyright 1996-2016 by                                                 */
d28 2
a29 2
#ifndef FTIMAGE_H_
#define FTIMAGE_H_
d32 2
a33 2
  /* STANDALONE_ is from ftgrays.c */
#ifndef STANDALONE_
d57 1
a57 1
  /*    units, or 16.16, or 26.6 fixed-point pixel coordinates.            */
a171 9
  /*    FT_PIXEL_MODE_BGRA ::                                              */
  /*      An image with four 8-bit channels per pixel, representing a      */
  /*      color image (such as emoticons) with alpha channel.  For each    */
  /*      pixel, the format is BGRA, which means, the blue channel comes   */
  /*      first in memory.  The color channels are pre-multiplied and in   */
  /*      the sRGB colorspace.  For example, full red at half-translucent  */
  /*      opacity will be represented as `00,00,80,80', not `00,00,FF,80'. */
  /*      See also @@FT_LOAD_COLOR.                                         */
  /*                                                                       */
a180 1
    FT_PIXEL_MODE_BGRA,
d187 16
a202 2
  /* these constants are deprecated; use the corresponding `FT_Pixel_Mode' */
  /* values instead.                                                       */
d209 39
a270 5
  /*                    Note that `padding' means the alignment of a       */
  /*                    bitmap to a byte border, and FreeType functions    */
  /*                    normally align to the smallest possible integer    */
  /*                    value.                                             */
  /*                                                                       */
a273 7
  /*                    To change the pitch of a bitmap (say, to make it a */
  /*                    multiple of 4), use @@FT_Bitmap_Convert.            */
  /*                    Alternatively, you might use callback functions to */
  /*                    directly render to the application's surface; see  */
  /*                    the file `example2.cpp' in the tutorial for a      */
  /*                    demonstration.                                     */
  /*                                                                       */
d293 5
d300 2
a301 2
    unsigned int    rows;
    unsigned int    width;
d304 3
a306 3
    unsigned short  num_grays;
    unsigned char   pixel_mode;
    unsigned char   palette_mode;
d363 1
a363 1
  /*                  how to convert/grid-fit it.  See @@FT_OUTLINE_XXX.    */
a383 2
  /* */

d393 1
a393 1
  /*    FT_OUTLINE_XXX                                                     */
d474 18
a491 2
  /* these constants are deprecated; use the corresponding */
  /* `FT_OUTLINE_XXX' values instead                       */
d537 1
a537 1
  /*    user :: A typeless pointer, which is passed from the caller of the */
d564 1
a564 1
  /*    user :: A typeless pointer, which is passed from the caller of the */
d595 1
a595 1
  /*    user    :: A typeless pointer, which is passed from the caller of  */
d627 1
a627 1
  /*    user     :: A typeless pointer, which is passed from the caller of */
d778 16
a793 2
  /* these constants are deprecated; use the corresponding */
  /* `FT_Glyph_Format' values instead.                     */
d815 1
a815 1
  /* a bitmap.  This section contains the public API for rasters.          */
d818 2
a819 2
  /* specific modules called `renderers'.  See `ftrender.h' for more       */
  /* details on renderers.                                                 */
a837 15
  /* <Order>                                                               */
  /*    FT_Raster                                                          */
  /*    FT_Span                                                            */
  /*    FT_SpanFunc                                                        */
  /*                                                                       */
  /*    FT_Raster_Params                                                   */
  /*    FT_RASTER_FLAG_XXX                                                 */
  /*                                                                       */
  /*    FT_Raster_NewFunc                                                  */
  /*    FT_Raster_DoneFunc                                                 */
  /*    FT_Raster_ResetFunc                                                */
  /*    FT_Raster_SetModeFunc                                              */
  /*    FT_Raster_RenderFunc                                               */
  /*    FT_Raster_Funcs                                                    */
  /*                                                                       */
d847 2
a848 2
  /*    An opaque handle (pointer) to a raster object.  Each object can be */
  /*    used independently to convert an outline into a bitmap or pixmap.  */
d859 2
a860 2
  /*    A structure used to model a single span of gray pixels when        */
  /*    rendering an anti-aliased bitmap.                                  */
d868 2
a869 1
  /*                to 255 (foreground).                                   */
d873 2
a874 2
  /*    @@FT_SpanFunc that takes the y~coordinate of the span as a          */
  /*    parameter.                                                         */
d914 10
d939 16
a954 1
  /*    Deprecated, unimplemented.                                         */
d968 15
a982 1
  /*    Deprecated, unimplemented.                                         */
d1016 2
a1017 2
  /*                              Direct rendering is only possible with   */
  /*                              anti-aliased glyphs.                     */
d1035 1
a1035 2
  /* these constants are deprecated; use the corresponding */
  /* `FT_RASTER_FLAG_XXX' values instead                   */
d1061 1
a1061 1
  /*    black_spans :: Unused.                                             */
d1063 1
a1063 1
  /*    bit_test    :: Unused.                                             */
d1065 1
a1065 1
  /*    bit_set     :: Unused.                                             */
d1082 9
a1090 3
  /*    spans.  This allows direct composition over a pre-existing bitmap  */
  /*    through user-provided callbacks to perform the span drawing and    */
  /*    composition.    Not supported by the monochrome rasterizer.        */
d1098 3
a1100 3
    FT_SpanFunc             black_spans;  /* unused */
    FT_Raster_BitTest_Func  bit_test;     /* unused */
    FT_Raster_BitSet_Func   bit_set;      /* unused */
d1161 4
a1164 4
  /*    FreeType used to provide an area of memory called the `render      */
  /*    pool' available to all registered rasters.  This was not thread    */
  /*    safe however and now FreeType never allocates this pool.  NULL     */
  /*    is always passed in as pool_base.                                  */
d1177 1
a1177 1
  /*    Rasters should ignore the render pool and rely on dynamic or stack */
d1179 2
a1180 1
  /*    passed to the raster constructor).                                 */
d1247 1
a1247 1
  /*         for examples of distinct implementations that support direct  */
a1278 1

d1287 1
d1293 1
a1293 1
#endif /* FTIMAGE_H_ */
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
