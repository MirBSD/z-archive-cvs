head	1.5;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.1
	MIRBSD_10_BASE:1.3
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.5
date	2017.04.15.19.21.14;	author tg;	state Exp;
branches;
next	1.4;
commitid	10058F2723111C7BEE2;

1.4
date	2013.08.06.19.47.31;	author tg;	state Exp;
branches;
next	1.3;
commitid	100520152445E05B912;

1.3
date	2008.02.26.20.04.48;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10047C470A72A1E13CE;

1.2
date	2006.06.29.20.24.34;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.06;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.52.04;	author bsiegert;	state Exp;
branches;
next	;
commitid	10047C46DB5081DCD79;

1.1.103.1
date	2005.03.18.10.43.06;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.34.51;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.38.57;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.20;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.41.58;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.5
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  svpscmap.h                                                             */
/*                                                                         */
/*    The FreeType PostScript charmap service (specification).             */
/*                                                                         */
/*  Copyright 2003-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#ifndef SVPSCMAP_H_
#define SVPSCMAP_H_

#include FT_INTERNAL_OBJECTS_H


FT_BEGIN_HEADER


#define FT_SERVICE_ID_POSTSCRIPT_CMAPS  "postscript-cmaps"


  /*
   *  Adobe glyph name to unicode value.
   */
  typedef FT_UInt32
  (*PS_Unicode_ValueFunc)( const char*  glyph_name );

  /*
   *  Macintosh name id to glyph name.  NULL if invalid index.
   */
  typedef const char*
  (*PS_Macintosh_NameFunc)( FT_UInt  name_index );

  /*
   *  Adobe standard string ID to glyph name.  NULL if invalid index.
   */
  typedef const char*
  (*PS_Adobe_Std_StringsFunc)( FT_UInt  string_index );


  /*
   *  Simple unicode -> glyph index charmap built from font glyph names
   *  table.
   */
  typedef struct  PS_UniMap_
  {
    FT_UInt32  unicode;      /* bit 31 set: is glyph variant */
    FT_UInt    glyph_index;

  } PS_UniMap;


  typedef struct PS_UnicodesRec_*  PS_Unicodes;

  typedef struct  PS_UnicodesRec_
  {
    FT_CMapRec  cmap;
    FT_UInt     num_maps;
    PS_UniMap*  maps;

  } PS_UnicodesRec;


  /*
   *  A function which returns a glyph name for a given index.  Returns
   *  NULL if invalid index.
   */
  typedef const char*
  (*PS_GetGlyphNameFunc)( FT_Pointer  data,
                          FT_UInt     string_index );

  /*
   *  A function used to release the glyph name returned by
   *  PS_GetGlyphNameFunc, when needed
   */
  typedef void
  (*PS_FreeGlyphNameFunc)( FT_Pointer  data,
                           const char*  name );

  typedef FT_Error
  (*PS_Unicodes_InitFunc)( FT_Memory             memory,
                           PS_Unicodes           unicodes,
                           FT_UInt               num_glyphs,
                           PS_GetGlyphNameFunc   get_glyph_name,
                           PS_FreeGlyphNameFunc  free_glyph_name,
                           FT_Pointer            glyph_data );

  typedef FT_UInt
  (*PS_Unicodes_CharIndexFunc)( PS_Unicodes  unicodes,
                                FT_UInt32    unicode );

  typedef FT_UInt32
  (*PS_Unicodes_CharNextFunc)( PS_Unicodes  unicodes,
                               FT_UInt32   *unicode );


  FT_DEFINE_SERVICE( PsCMaps )
  {
    PS_Unicode_ValueFunc       unicode_value;

    PS_Unicodes_InitFunc       unicodes_init;
    PS_Unicodes_CharIndexFunc  unicodes_char_index;
    PS_Unicodes_CharNextFunc   unicodes_char_next;

    PS_Macintosh_NameFunc      macintosh_name;
    PS_Adobe_Std_StringsFunc   adobe_std_strings;
    const unsigned short*      adobe_std_encoding;
    const unsigned short*      adobe_expert_encoding;
  };


#ifndef FT_CONFIG_OPTION_PIC

#define FT_DEFINE_SERVICE_PSCMAPSREC( class_,                               \
                                      unicode_value_,                       \
                                      unicodes_init_,                       \
                                      unicodes_char_index_,                 \
                                      unicodes_char_next_,                  \
                                      macintosh_name_,                      \
                                      adobe_std_strings_,                   \
                                      adobe_std_encoding_,                  \
                                      adobe_expert_encoding_ )              \
  static const FT_Service_PsCMapsRec  class_ =                              \
  {                                                                         \
    unicode_value_, unicodes_init_,                                         \
    unicodes_char_index_, unicodes_char_next_, macintosh_name_,             \
    adobe_std_strings_, adobe_std_encoding_, adobe_expert_encoding_         \
  };

#else /* FT_CONFIG_OPTION_PIC */

#define FT_DEFINE_SERVICE_PSCMAPSREC( class_,                               \
                                      unicode_value_,                       \
                                      unicodes_init_,                       \
                                      unicodes_char_index_,                 \
                                      unicodes_char_next_,                  \
                                      macintosh_name_,                      \
                                      adobe_std_strings_,                   \
                                      adobe_std_encoding_,                  \
                                      adobe_expert_encoding_ )              \
  void                                                                      \
  FT_Init_Class_ ## class_( FT_Library              library,                \
                            FT_Service_PsCMapsRec*  clazz )                 \
  {                                                                         \
    FT_UNUSED( library );                                                   \
                                                                            \
    clazz->unicode_value         = unicode_value_;                          \
    clazz->unicodes_init         = unicodes_init_;                          \
    clazz->unicodes_char_index   = unicodes_char_index_;                    \
    clazz->unicodes_char_next    = unicodes_char_next_;                     \
    clazz->macintosh_name        = macintosh_name_;                         \
    clazz->adobe_std_strings     = adobe_std_strings_;                      \
    clazz->adobe_std_encoding    = adobe_std_encoding_;                     \
    clazz->adobe_expert_encoding = adobe_expert_encoding_;                  \
  }

#endif /* FT_CONFIG_OPTION_PIC */

  /* */


FT_END_HEADER


#endif /* SVPSCMAP_H_ */


/* END */
@


1.4
log
@fastmerge
@
text
@d7 1
a7 1
/*  Copyright 2003, 2006 by                                                */
d19 2
a20 2
#ifndef __SVPSCMAP_H__
#define __SVPSCMAP_H__
d123 14
a136 8
#define FT_DEFINE_SERVICE_PSCMAPSREC(class_, unicode_value_, unicodes_init_, \
        unicodes_char_index_, unicodes_char_next_, macintosh_name_,          \
        adobe_std_strings_, adobe_std_encoding_, adobe_expert_encoding_)     \
  static const FT_Service_PsCMapsRec class_ =                                \
  {                                                                          \
    unicode_value_, unicodes_init_,                                          \
    unicodes_char_index_, unicodes_char_next_, macintosh_name_,              \
    adobe_std_strings_, adobe_std_encoding_, adobe_expert_encoding_          \
d139 1
a139 1
#else /* FT_CONFIG_OPTION_PIC */ 
d141 24
a164 17
#define FT_DEFINE_SERVICE_PSCMAPSREC(class_, unicode_value_, unicodes_init_, \
        unicodes_char_index_, unicodes_char_next_, macintosh_name_,          \
        adobe_std_strings_, adobe_std_encoding_, adobe_expert_encoding_)     \
  void                                                                       \
  FT_Init_Class_##class_( FT_Library library,                                \
                          FT_Service_PsCMapsRec* clazz)                      \
  {                                                                          \
    FT_UNUSED(library);                                                      \
    clazz->unicode_value = unicode_value_;                                   \
    clazz->unicodes_init = unicodes_init_;                                   \
    clazz->unicodes_char_index = unicodes_char_index_;                       \
    clazz->unicodes_char_next = unicodes_char_next_;                         \
    clazz->macintosh_name = macintosh_name_;                                 \
    clazz->adobe_std_strings = adobe_std_strings_;                           \
    clazz->adobe_std_encoding = adobe_std_encoding_;                         \
    clazz->adobe_expert_encoding = adobe_expert_encoding_;                   \
  } 
d166 1
a166 1
#endif /* FT_CONFIG_OPTION_PIC */ 
d174 1
a174 1
#endif /* __SVPSCMAP_H__ */
@


1.3
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d101 1
a101 1
  typedef FT_ULong
d120 35
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d78 10
a87 2
  (*PS_Glyph_NameFunc)( FT_Pointer  data,
                        FT_UInt     string_index );
d90 6
a95 5
  (*PS_Unicodes_InitFunc)( FT_Memory          memory,
                           PS_Unicodes        unicodes,
                           FT_UInt            num_glyphs,
                           PS_Glyph_NameFunc  get_glyph_name,
                           FT_Pointer         glyph_data );
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 2003 by                                                      */
d22 2
d32 1
a32 1
   *  Adobe glyph name to unicode value
a37 8
   *  Unicode value to Adobe glyph name index.  0xFFFF if not found.
   */
  typedef FT_UInt
  (*PS_Unicode_Index_Func)( FT_UInt       num_glyphs,
                            const char**  glyph_names,
                            FT_ULong      unicode );

  /*
d41 1
a41 1
  (*PS_Macintosh_Name_Func)( FT_UInt  name_index );
d47 2
a48 1
  (*PS_Adobe_Std_Strings_Func)( FT_UInt  string_index );
d56 2
a57 2
    FT_UInt  unicode;
    FT_UInt  glyph_index;
d62 3
a64 1
  typedef struct  PS_Unicodes_
d66 1
d70 2
a71 1
  } PS_Unicodes;
d73 7
d82 5
a86 4
  (*PS_Unicodes_InitFunc)( FT_Memory     memory,
                           FT_UInt       num_glyphs,
                           const char**  glyph_names,
                           PS_Unicodes*  unicodes );
d89 2
a90 2
  (*PS_Unicodes_CharIndexFunc)( PS_Unicodes*  unicodes,
                                FT_UInt       unicode );
d93 2
a94 2
  (*PS_Unicodes_CharNextFunc)( PS_Unicodes*  unicodes,
                               FT_ULong      unicode );
d105 2
a106 2
    PS_Macintosh_Name_Func     macintosh_name;
    PS_Adobe_Std_Strings_Func  adobe_std_strings;
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d7 1
a7 1
/*  Copyright 2003, 2006 by                                                */
a21 2
#include FT_INTERNAL_OBJECTS_H

d30 1
a30 1
   *  Adobe glyph name to unicode value.
d36 8
d47 1
a47 1
  (*PS_Macintosh_NameFunc)( FT_UInt  name_index );
d53 1
a53 2
  (*PS_Adobe_Std_StringsFunc)( FT_UInt  string_index );

d61 2
a62 2
    FT_UInt32  unicode;      /* bit 31 set: is glyph variant */
    FT_UInt    glyph_index;
d67 1
a67 3
  typedef struct PS_UnicodesRec_*  PS_Unicodes;

  typedef struct  PS_UnicodesRec_
a68 1
    FT_CMapRec  cmap;
d72 1
a72 1
  } PS_UnicodesRec;
a74 16
  /*
   *  A function which returns a glyph name for a given index.  Returns
   *  NULL if invalid index.
   */
  typedef const char*
  (*PS_GetGlyphNameFunc)( FT_Pointer  data,
                          FT_UInt     string_index );

  /*
   *  A function used to release the glyph name returned by
   *  PS_GetGlyphNameFunc, when needed
   */
  typedef void
  (*PS_FreeGlyphNameFunc)( FT_Pointer  data,
                           const char*  name );

d76 4
a79 6
  (*PS_Unicodes_InitFunc)( FT_Memory             memory,
                           PS_Unicodes           unicodes,
                           FT_UInt               num_glyphs,
                           PS_GetGlyphNameFunc   get_glyph_name,
                           PS_FreeGlyphNameFunc  free_glyph_name,
                           FT_Pointer            glyph_data );
d82 2
a83 2
  (*PS_Unicodes_CharIndexFunc)( PS_Unicodes  unicodes,
                                FT_UInt32    unicode );
d86 2
a87 2
  (*PS_Unicodes_CharNextFunc)( PS_Unicodes  unicodes,
                               FT_UInt32   *unicode );
d98 2
a99 2
    PS_Macintosh_NameFunc      macintosh_name;
    PS_Adobe_Std_StringsFunc   adobe_std_strings;
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d7 1
a7 1
/*  Copyright 2003, 2006 by                                                */
a21 2
#include FT_INTERNAL_OBJECTS_H

d30 1
a30 1
   *  Adobe glyph name to unicode value.
d36 8
d47 1
a47 1
  (*PS_Macintosh_NameFunc)( FT_UInt  name_index );
d53 1
a53 2
  (*PS_Adobe_Std_StringsFunc)( FT_UInt  string_index );

d61 2
a62 2
    FT_UInt32  unicode;      /* bit 31 set: is glyph variant */
    FT_UInt    glyph_index;
d67 1
a67 3
  typedef struct PS_UnicodesRec_*  PS_Unicodes;

  typedef struct  PS_UnicodesRec_
a68 1
    FT_CMapRec  cmap;
d72 1
a72 2
  } PS_UnicodesRec;

a73 7
  /*
   *  A function which returns a glyph name for a given index.  Returns
   *  NULL if invalid index.
   */
  typedef const char*
  (*PS_Glyph_NameFunc)( FT_Pointer  data,
                        FT_UInt     string_index );
d76 4
a79 5
  (*PS_Unicodes_InitFunc)( FT_Memory          memory,
                           PS_Unicodes        unicodes,
                           FT_UInt            num_glyphs,
                           PS_Glyph_NameFunc  get_glyph_name,
                           FT_Pointer         glyph_data );
d82 2
a83 2
  (*PS_Unicodes_CharIndexFunc)( PS_Unicodes  unicodes,
                                FT_UInt32    unicode );
d86 2
a87 2
  (*PS_Unicodes_CharNextFunc)( PS_Unicodes  unicodes,
                               FT_UInt32   *unicode );
d98 2
a99 2
    PS_Macintosh_NameFunc      macintosh_name;
    PS_Adobe_Std_StringsFunc   adobe_std_strings;
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d78 2
a79 10
  (*PS_GetGlyphNameFunc)( FT_Pointer  data,
                          FT_UInt     string_index );

  /*
   *  A function used to release the glyph name returned by
   *  PS_GetGlyphNameFunc, when needed
   */
  typedef void
  (*PS_FreeGlyphNameFunc)( FT_Pointer  data,
                           const char*  name );
d82 5
a86 6
  (*PS_Unicodes_InitFunc)( FT_Memory             memory,
                           PS_Unicodes           unicodes,
                           FT_UInt               num_glyphs,
                           PS_GetGlyphNameFunc   get_glyph_name,
                           PS_FreeGlyphNameFunc  free_glyph_name,
                           FT_Pointer            glyph_data );
d92 1
a92 1
  typedef FT_UInt32
a110 35

#ifndef FT_CONFIG_OPTION_PIC

#define FT_DEFINE_SERVICE_PSCMAPSREC(class_, unicode_value_, unicodes_init_, \
        unicodes_char_index_, unicodes_char_next_, macintosh_name_,          \
        adobe_std_strings_, adobe_std_encoding_, adobe_expert_encoding_)     \
  static const FT_Service_PsCMapsRec class_ =                                \
  {                                                                          \
    unicode_value_, unicodes_init_,                                          \
    unicodes_char_index_, unicodes_char_next_, macintosh_name_,              \
    adobe_std_strings_, adobe_std_encoding_, adobe_expert_encoding_          \
  };

#else /* FT_CONFIG_OPTION_PIC */ 

#define FT_DEFINE_SERVICE_PSCMAPSREC(class_, unicode_value_, unicodes_init_, \
        unicodes_char_index_, unicodes_char_next_, macintosh_name_,          \
        adobe_std_strings_, adobe_std_encoding_, adobe_expert_encoding_)     \
  void                                                                       \
  FT_Init_Class_##class_( FT_Library library,                                \
                          FT_Service_PsCMapsRec* clazz)                      \
  {                                                                          \
    FT_UNUSED(library);                                                      \
    clazz->unicode_value = unicode_value_;                                   \
    clazz->unicodes_init = unicodes_init_;                                   \
    clazz->unicodes_char_index = unicodes_char_index_;                       \
    clazz->unicodes_char_next = unicodes_char_next_;                         \
    clazz->macintosh_name = macintosh_name_;                                 \
    clazz->adobe_std_strings = adobe_std_strings_;                           \
    clazz->adobe_std_encoding = adobe_std_encoding_;                         \
    clazz->adobe_expert_encoding = adobe_expert_encoding_;                   \
  } 

#endif /* FT_CONFIG_OPTION_PIC */ 

@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 2003-2016 by                                                 */
d19 2
a20 2
#ifndef SVPSCMAP_H_
#define SVPSCMAP_H_
d123 8
a130 14
#define FT_DEFINE_SERVICE_PSCMAPSREC( class_,                               \
                                      unicode_value_,                       \
                                      unicodes_init_,                       \
                                      unicodes_char_index_,                 \
                                      unicodes_char_next_,                  \
                                      macintosh_name_,                      \
                                      adobe_std_strings_,                   \
                                      adobe_std_encoding_,                  \
                                      adobe_expert_encoding_ )              \
  static const FT_Service_PsCMapsRec  class_ =                              \
  {                                                                         \
    unicode_value_, unicodes_init_,                                         \
    unicodes_char_index_, unicodes_char_next_, macintosh_name_,             \
    adobe_std_strings_, adobe_std_encoding_, adobe_expert_encoding_         \
d133 1
a133 1
#else /* FT_CONFIG_OPTION_PIC */
d135 17
a151 24
#define FT_DEFINE_SERVICE_PSCMAPSREC( class_,                               \
                                      unicode_value_,                       \
                                      unicodes_init_,                       \
                                      unicodes_char_index_,                 \
                                      unicodes_char_next_,                  \
                                      macintosh_name_,                      \
                                      adobe_std_strings_,                   \
                                      adobe_std_encoding_,                  \
                                      adobe_expert_encoding_ )              \
  void                                                                      \
  FT_Init_Class_ ## class_( FT_Library              library,                \
                            FT_Service_PsCMapsRec*  clazz )                 \
  {                                                                         \
    FT_UNUSED( library );                                                   \
                                                                            \
    clazz->unicode_value         = unicode_value_;                          \
    clazz->unicodes_init         = unicodes_init_;                          \
    clazz->unicodes_char_index   = unicodes_char_index_;                    \
    clazz->unicodes_char_next    = unicodes_char_next_;                     \
    clazz->macintosh_name        = macintosh_name_;                         \
    clazz->adobe_std_strings     = adobe_std_strings_;                      \
    clazz->adobe_std_encoding    = adobe_std_encoding_;                     \
    clazz->adobe_expert_encoding = adobe_expert_encoding_;                  \
  }
d153 1
a153 1
#endif /* FT_CONFIG_OPTION_PIC */
d161 1
a161 1
#endif /* SVPSCMAP_H_ */
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
