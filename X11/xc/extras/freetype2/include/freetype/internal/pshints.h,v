head	1.5;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.1
	MIRBSD_10_BASE:1.3
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.5
date	2017.04.15.19.21.11;	author tg;	state Exp;
branches;
next	1.4;
commitid	10058F2723111C7BEE2;

1.4
date	2013.08.06.19.47.28;	author tg;	state Exp;
branches;
next	1.3;
commitid	100520152445E05B912;

1.3
date	2008.02.26.20.04.47;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10047C470A72A1E13CE;

1.2
date	2006.06.29.20.24.33;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.05;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.52.03;	author bsiegert;	state Exp;
branches;
next	;
commitid	10047C46DB5081DCD79;

1.1.103.1
date	2005.03.18.10.43.05;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.34.49;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.38.53;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.19;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.41.57;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.5
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  pshints.h                                                              */
/*                                                                         */
/*    Interface to Postscript-specific (Type 1 and Type 2) hints           */
/*    recorders (specification only).  These are used to support native    */
/*    T1/T2 hints in the `type1', `cid', and `cff' font drivers.           */
/*                                                                         */
/*  Copyright 2001-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#ifndef PSHINTS_H_
#define PSHINTS_H_


#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_TYPE1_TABLES_H


FT_BEGIN_HEADER


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****               INTERNAL REPRESENTATION OF GLOBALS              *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  typedef struct PSH_GlobalsRec_*  PSH_Globals;

  typedef FT_Error
  (*PSH_Globals_NewFunc)( FT_Memory     memory,
                          T1_Private*   private_dict,
                          PSH_Globals*  aglobals );

  typedef void
  (*PSH_Globals_SetScaleFunc)( PSH_Globals  globals,
                               FT_Fixed     x_scale,
                               FT_Fixed     y_scale,
                               FT_Fixed     x_delta,
                               FT_Fixed     y_delta );

  typedef void
  (*PSH_Globals_DestroyFunc)( PSH_Globals  globals );


  typedef struct  PSH_Globals_FuncsRec_
  {
    PSH_Globals_NewFunc       create;
    PSH_Globals_SetScaleFunc  set_scale;
    PSH_Globals_DestroyFunc   destroy;

  } PSH_Globals_FuncsRec, *PSH_Globals_Funcs;


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                  PUBLIC TYPE 1 HINTS RECORDER                 *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /*************************************************************************
   *
   * @@type:
   *   T1_Hints
   *
   * @@description:
   *   This is a handle to an opaque structure used to record glyph hints
   *   from a Type 1 character glyph character string.
   *
   *   The methods used to operate on this object are defined by the
   *   @@T1_Hints_FuncsRec structure.  Recording glyph hints is normally
   *   achieved through the following scheme:
   *
   *   - Open a new hint recording session by calling the `open' method.
   *     This rewinds the recorder and prepare it for new input.
   *
   *   - For each hint found in the glyph charstring, call the corresponding
   *     method (`stem', `stem3', or `reset').  Note that these functions do
   *     not return an error code.
   *
   *   - Close the recording session by calling the `close' method.  It
   *     returns an error code if the hints were invalid or something
   *     strange happened (e.g., memory shortage).
   *
   *   The hints accumulated in the object can later be used by the
   *   PostScript hinter.
   *
   */
  typedef struct T1_HintsRec_*  T1_Hints;


  /*************************************************************************
   *
   * @@type:
   *   T1_Hints_Funcs
   *
   * @@description:
   *   A pointer to the @@T1_Hints_FuncsRec structure that defines the API of
   *   a given @@T1_Hints object.
   *
   */
  typedef const struct T1_Hints_FuncsRec_*  T1_Hints_Funcs;


  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_OpenFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to prepare it for a new Type 1
   *   hints recording session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   * @@note:
   *   You should always call the @@T1_Hints_CloseFunc method in order to
   *   close an opened recording session.
   *
   */
  typedef void
  (*T1_Hints_OpenFunc)( T1_Hints  hints );


  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_SetStemFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to record a new horizontal or
   *   vertical stem.  This corresponds to the Type 1 `hstem' and `vstem'
   *   operators.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   dimension ::
   *     0 for horizontal stems (hstem), 1 for vertical ones (vstem).
   *
   *   coords ::
   *     Array of 2 coordinates in 16.16 format, used as (position,length)
   *     stem descriptor.
   *
   * @@note:
   *   Use vertical coordinates (y) for horizontal stems (dim=0).  Use
   *   horizontal coordinates (x) for vertical stems (dim=1).
   *
   *   `coords[0]' is the absolute stem position (lowest coordinate);
   *   `coords[1]' is the length.
   *
   *   The length can be negative, in which case it must be either -20 or
   *   -21.  It is interpreted as a `ghost' stem, according to the Type 1
   *   specification.
   *
   *   If the length is -21 (corresponding to a bottom ghost stem), then
   *   the real stem position is `coords[0]+coords[1]'.
   *
   */
  typedef void
  (*T1_Hints_SetStemFunc)( T1_Hints   hints,
                           FT_UInt    dimension,
                           FT_Fixed*  coords );


  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_SetStem3Func
   *
   * @@description:
   *   A method of the @@T1_Hints class used to record three
   *   counter-controlled horizontal or vertical stems at once.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   dimension ::
   *     0 for horizontal stems, 1 for vertical ones.
   *
   *   coords ::
   *     An array of 6 values in 16.16 format, holding 3 (position,length)
   *     pairs for the counter-controlled stems.
   *
   * @@note:
   *   Use vertical coordinates (y) for horizontal stems (dim=0).  Use
   *   horizontal coordinates (x) for vertical stems (dim=1).
   *
   *   The lengths cannot be negative (ghost stems are never
   *   counter-controlled).
   *
   */
  typedef void
  (*T1_Hints_SetStem3Func)( T1_Hints   hints,
                            FT_UInt    dimension,
                            FT_Fixed*  coords );


  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_ResetFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to reset the stems hints in a
   *   recording session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   end_point ::
   *     The index of the last point in the input glyph in which the
   *     previously defined hints apply.
   *
   */
  typedef void
  (*T1_Hints_ResetFunc)( T1_Hints  hints,
                         FT_UInt   end_point );


  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_CloseFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to close a hint recording
   *   session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   end_point ::
   *     The index of the last point in the input glyph.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   The error code is set to indicate that an error occurred during the
   *   recording session.
   *
   */
  typedef FT_Error
  (*T1_Hints_CloseFunc)( T1_Hints  hints,
                         FT_UInt   end_point );


  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_ApplyFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to apply hints to the
   *   corresponding glyph outline.  Must be called once all hints have been
   *   recorded.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   outline ::
   *     A pointer to the target outline descriptor.
   *
   *   globals ::
   *     The hinter globals for this font.
   *
   *   hint_mode ::
   *     Hinting information.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   On input, all points within the outline are in font coordinates. On
   *   output, they are in 1/64th of pixels.
   *
   *   The scaling transformation is taken from the `globals' object which
   *   must correspond to the same font as the glyph.
   *
   */
  typedef FT_Error
  (*T1_Hints_ApplyFunc)( T1_Hints        hints,
                         FT_Outline*     outline,
                         PSH_Globals     globals,
                         FT_Render_Mode  hint_mode );


  /*************************************************************************
   *
   * @@struct:
   *   T1_Hints_FuncsRec
   *
   * @@description:
   *   The structure used to provide the API to @@T1_Hints objects.
   *
   * @@fields:
   *   hints ::
   *     A handle to the T1 Hints recorder.
   *
   *   open ::
   *     The function to open a recording session.
   *
   *   close ::
   *     The function to close a recording session.
   *
   *   stem ::
   *     The function to set a simple stem.
   *
   *   stem3 ::
   *     The function to set counter-controlled stems.
   *
   *   reset ::
   *     The function to reset stem hints.
   *
   *   apply ::
   *     The function to apply the hints to the corresponding glyph outline.
   *
   */
  typedef struct  T1_Hints_FuncsRec_
  {
    T1_Hints               hints;
    T1_Hints_OpenFunc      open;
    T1_Hints_CloseFunc     close;
    T1_Hints_SetStemFunc   stem;
    T1_Hints_SetStem3Func  stem3;
    T1_Hints_ResetFunc     reset;
    T1_Hints_ApplyFunc     apply;

  } T1_Hints_FuncsRec;


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                  PUBLIC TYPE 2 HINTS RECORDER                 *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /*************************************************************************
   *
   * @@type:
   *   T2_Hints
   *
   * @@description:
   *   This is a handle to an opaque structure used to record glyph hints
   *   from a Type 2 character glyph character string.
   *
   *   The methods used to operate on this object are defined by the
   *   @@T2_Hints_FuncsRec structure.  Recording glyph hints is normally
   *   achieved through the following scheme:
   *
   *   - Open a new hint recording session by calling the `open' method.
   *     This rewinds the recorder and prepare it for new input.
   *
   *   - For each hint found in the glyph charstring, call the corresponding
   *     method (`stems', `hintmask', `counters').  Note that these
   *     functions do not return an error code.
   *
   *   - Close the recording session by calling the `close' method.  It
   *     returns an error code if the hints were invalid or something
   *     strange happened (e.g., memory shortage).
   *
   *   The hints accumulated in the object can later be used by the
   *   Postscript hinter.
   *
   */
  typedef struct T2_HintsRec_*  T2_Hints;


  /*************************************************************************
   *
   * @@type:
   *   T2_Hints_Funcs
   *
   * @@description:
   *   A pointer to the @@T2_Hints_FuncsRec structure that defines the API of
   *   a given @@T2_Hints object.
   *
   */
  typedef const struct T2_Hints_FuncsRec_*  T2_Hints_Funcs;


  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_OpenFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to prepare it for a new Type 2
   *   hints recording session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   * @@note:
   *   You should always call the @@T2_Hints_CloseFunc method in order to
   *   close an opened recording session.
   *
   */
  typedef void
  (*T2_Hints_OpenFunc)( T2_Hints  hints );


  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_StemsFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to set the table of stems in
   *   either the vertical or horizontal dimension.  Equivalent to the
   *   `hstem', `vstem', `hstemhm', and `vstemhm' Type 2 operators.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   dimension ::
   *     0 for horizontal stems (hstem), 1 for vertical ones (vstem).
   *
   *   count ::
   *     The number of stems.
   *
   *   coords ::
   *     An array of `count' (position,length) pairs in 16.16 format.
   *
   * @@note:
   *   Use vertical coordinates (y) for horizontal stems (dim=0).  Use
   *   horizontal coordinates (x) for vertical stems (dim=1).
   *
   *   There are `2*count' elements in the `coords' array.  Each even
   *   element is an absolute position in font units, each odd element is a
   *   length in font units.
   *
   *   A length can be negative, in which case it must be either -20 or
   *   -21.  It is interpreted as a `ghost' stem, according to the Type 1
   *   specification.
   *
   */
  typedef void
  (*T2_Hints_StemsFunc)( T2_Hints   hints,
                         FT_UInt    dimension,
                         FT_Int     count,
                         FT_Fixed*  coordinates );


  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_MaskFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to set a given hintmask (this
   *   corresponds to the `hintmask' Type 2 operator).
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   end_point ::
   *     The glyph index of the last point to which the previously defined
   *     or activated hints apply.
   *
   *   bit_count ::
   *     The number of bits in the hint mask.
   *
   *   bytes ::
   *     An array of bytes modelling the hint mask.
   *
   * @@note:
   *   If the hintmask starts the charstring (before any glyph point
   *   definition), the value of `end_point' should be 0.
   *
   *   `bit_count' is the number of meaningful bits in the `bytes' array; it
   *   must be equal to the total number of hints defined so far (i.e.,
   *   horizontal+verticals).
   *
   *   The `bytes' array can come directly from the Type 2 charstring and
   *   respects the same format.
   *
   */
  typedef void
  (*T2_Hints_MaskFunc)( T2_Hints        hints,
                        FT_UInt         end_point,
                        FT_UInt         bit_count,
                        const FT_Byte*  bytes );


  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_CounterFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to set a given counter mask
   *   (this corresponds to the `hintmask' Type 2 operator).
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   end_point ::
   *     A glyph index of the last point to which the previously defined or
   *     active hints apply.
   *
   *   bit_count ::
   *     The number of bits in the hint mask.
   *
   *   bytes ::
   *     An array of bytes modelling the hint mask.
   *
   * @@note:
   *   If the hintmask starts the charstring (before any glyph point
   *   definition), the value of `end_point' should be 0.
   *
   *   `bit_count' is the number of meaningful bits in the `bytes' array; it
   *   must be equal to the total number of hints defined so far (i.e.,
   *   horizontal+verticals).
   *
   *    The `bytes' array can come directly from the Type 2 charstring and
   *    respects the same format.
   *
   */
  typedef void
  (*T2_Hints_CounterFunc)( T2_Hints        hints,
                           FT_UInt         bit_count,
                           const FT_Byte*  bytes );


  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_CloseFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to close a hint recording
   *   session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   end_point ::
   *     The index of the last point in the input glyph.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   The error code is set to indicate that an error occurred during the
   *   recording session.
   *
   */
  typedef FT_Error
  (*T2_Hints_CloseFunc)( T2_Hints  hints,
                         FT_UInt   end_point );


  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_ApplyFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to apply hints to the
   *   corresponding glyph outline.  Must be called after the `close'
   *   method.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   outline ::
   *     A pointer to the target outline descriptor.
   *
   *   globals ::
   *     The hinter globals for this font.
   *
   *   hint_mode ::
   *     Hinting information.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   On input, all points within the outline are in font coordinates. On
   *   output, they are in 1/64th of pixels.
   *
   *   The scaling transformation is taken from the `globals' object which
   *   must correspond to the same font than the glyph.
   *
   */
  typedef FT_Error
  (*T2_Hints_ApplyFunc)( T2_Hints        hints,
                         FT_Outline*     outline,
                         PSH_Globals     globals,
                         FT_Render_Mode  hint_mode );


  /*************************************************************************
   *
   * @@struct:
   *   T2_Hints_FuncsRec
   *
   * @@description:
   *   The structure used to provide the API to @@T2_Hints objects.
   *
   * @@fields:
   *   hints ::
   *     A handle to the T2 hints recorder object.
   *
   *   open ::
   *     The function to open a recording session.
   *
   *   close ::
   *     The function to close a recording session.
   *
   *   stems ::
   *     The function to set the dimension's stems table.
   *
   *   hintmask ::
   *     The function to set hint masks.
   *
   *   counter ::
   *     The function to set counter masks.
   *
   *   apply ::
   *     The function to apply the hints on the corresponding glyph outline.
   *
   */
  typedef struct  T2_Hints_FuncsRec_
  {
    T2_Hints              hints;
    T2_Hints_OpenFunc     open;
    T2_Hints_CloseFunc    close;
    T2_Hints_StemsFunc    stems;
    T2_Hints_MaskFunc     hintmask;
    T2_Hints_CounterFunc  counter;
    T2_Hints_ApplyFunc    apply;

  } T2_Hints_FuncsRec;


  /* */


  typedef struct  PSHinter_Interface_
  {
    PSH_Globals_Funcs  (*get_globals_funcs)( FT_Module  module );
    T1_Hints_Funcs     (*get_t1_funcs)     ( FT_Module  module );
    T2_Hints_Funcs     (*get_t2_funcs)     ( FT_Module  module );

  } PSHinter_Interface;

  typedef PSHinter_Interface*  PSHinter_Service;


#ifndef FT_CONFIG_OPTION_PIC

#define FT_DEFINE_PSHINTER_INTERFACE(        \
          class_,                            \
          get_globals_funcs_,                \
          get_t1_funcs_,                     \
          get_t2_funcs_ )                    \
  static const PSHinter_Interface  class_ =  \
  {                                          \
    get_globals_funcs_,                      \
    get_t1_funcs_,                           \
    get_t2_funcs_                            \
  };

#else /* FT_CONFIG_OPTION_PIC */

#define FT_DEFINE_PSHINTER_INTERFACE(                      \
          class_,                                          \
          get_globals_funcs_,                              \
          get_t1_funcs_,                                   \
          get_t2_funcs_ )                                  \
  void                                                     \
  FT_Init_Class_ ## class_( FT_Library           library,  \
                            PSHinter_Interface*  clazz )   \
  {                                                        \
    FT_UNUSED( library );                                  \
                                                           \
    clazz->get_globals_funcs = get_globals_funcs_;         \
    clazz->get_t1_funcs      = get_t1_funcs_;              \
    clazz->get_t2_funcs      = get_t2_funcs_;              \
  }

#endif /* FT_CONFIG_OPTION_PIC */

FT_END_HEADER

#endif /* PSHINTS_H_ */


/* END */
@


1.4
log
@fastmerge
@
text
@d9 1
a9 1
/*  Copyright 2001, 2002, 2003, 2005, 2006, 2007, 2009 by                  */
d21 2
a22 2
#ifndef __PSHINTS_H__
#define __PSHINTS_H__
d48 1
a48 1
  typedef FT_Error
d468 1
a468 1
                         FT_UInt    count,
d682 1
d685 10
a694 5
#define FT_DEFINE_PSHINTER_INTERFACE(class_, get_globals_funcs_,             \
                                     get_t1_funcs_, get_t2_funcs_)           \
  static const PSHinter_Interface class_ =                                   \
  {                                                                          \
    get_globals_funcs_, get_t1_funcs_, get_t2_funcs_                         \
d697 1
a697 1
#else /* FT_CONFIG_OPTION_PIC */ 
d699 15
a713 11
#define FT_DEFINE_PSHINTER_INTERFACE(class_, get_globals_funcs_,             \
                                     get_t1_funcs_, get_t2_funcs_)           \
  void                                                                       \
  FT_Init_Class_##class_( FT_Library library,                                \
                          PSHinter_Interface*  clazz)                        \
  {                                                                          \
    FT_UNUSED(library);                                                      \
    clazz->get_globals_funcs = get_globals_funcs_;                           \
    clazz->get_t1_funcs = get_t1_funcs_;                                     \
    clazz->get_t2_funcs = get_t2_funcs_;                                     \
  } 
d715 1
a715 1
#endif /* FT_CONFIG_OPTION_PIC */ 
d719 1
a719 1
#endif /* __PSHINTS_H__ */
@


1.3
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d9 1
a9 1
/*  Copyright 2001, 2002, 2003, 2005, 2006, 2007 by                        */
d160 2
a161 1
   *     Array of 2 integers, used as (position,length) stem descriptor.
d179 3
a181 3
  (*T1_Hints_SetStemFunc)( T1_Hints  hints,
                           FT_UInt   dimension,
                           FT_Long*  coords );
d201 2
a202 2
   *     An array of 6 integers, holding 3 (position,length) pairs for the
   *     counter-controlled stems.
d213 3
a215 3
  (*T1_Hints_SetStem3Func)( T1_Hints  hints,
                            FT_UInt   dimension,
                            FT_Long*  coords );
d450 1
a450 1
   *     An array of `count' (position,length) pairs.
d682 24
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d9 1
a9 1
/*  Copyright 2001, 2002, 2003, 2005, 2006 by                              */
d455 3
a457 3
   *   There are `2*count' elements in the `coords' aray.  Each even element
   *   is an absolute position in font units, each odd element is a length
   *   in font units.
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*    T1/T2 hints in the "type1", "cid" and "cff" font drivers.            */
d9 1
a9 1
/*  Copyright 2001, 2002, 2003 by                                          */
d76 28
a103 27
  /*************************************************************************/
  /*                                                                       */
  /* @@type:                                                                */
  /*    T1_Hints                                                           */
  /*                                                                       */
  /* @@description:                                                         */
  /*    This is a handle to an opaque structure used to record glyph hints */
  /*    from a Type 1 character glyph character string.                    */
  /*                                                                       */
  /*    The methods used to operate on this object are defined by the      */
  /*    @@T1_Hints_FuncsRec structure.  Recording glyph hints is normally   */
  /*    achieved through the following scheme:                             */
  /*                                                                       */
  /*    - Open a new hint recording session by calling the "open" method.  */
  /*      This will rewind the recorder and prepare it for new input.      */
  /*                                                                       */
  /*    - For each hint found in the glyph charstring, call the            */
  /*      corresponding method ("stem", "stem3", or "reset").  Note that   */
  /*      these functions do not return an error code.                     */
  /*                                                                       */
  /*    - Close the recording session by calling the "close" method.  It   */
  /*      will return an error code if the hints were invalid or something */
  /*      strange happened (e.g. memory shortage).                         */
  /*                                                                       */
  /*    The hints accumulated in the object can later be used by the       */
  /*    PostScript hinter.                                                 */
  /*                                                                       */
d107 10
a116 9
  /*************************************************************************/
  /*                                                                       */
  /* @@type:                                                                */
  /*    T1_Hints_Funcs                                                     */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A pointer to the @@T1_Hints_FuncsRec structure that defines the     */
  /*    API of a given @@T1_Hints object.                                   */
  /*                                                                       */
d120 18
a137 16
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T1_Hints_OpenFunc                                                  */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T1_Hints class used to prepare it for a new       */
  /*    Type 1 hints recording session.                                    */
  /*                                                                       */
  /* @@input:                                                               */
  /*    hints :: A handle to the Type 1 hints recorder.                    */
  /*                                                                       */
  /* @@note:                                                                */
  /*    You should always call the @@T1_Hints_CloseFunc method in order to  */
  /*    close an opened recording session.                                 */
  /*                                                                       */
d142 35
a176 33
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T1_Hints_SetStemFunc                                               */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T1_Hints class used to record a new horizontal or */
  /*    vertical stem.  This corresponds to the Type 1 "hstem" and "vstem" */
  /*    operators.                                                         */
  /*                                                                       */
  /* @@input:                                                               */
  /*    hints     :: A handle to the Type 1 hints recorder.                */
  /*                                                                       */
  /*    dimension :: 0 for horizontal stems (hstem), 1 for vertical ones   */
  /*                 (vstem).                                              */
  /*                                                                       */
  /*    coords    :: Array of 2 integers, used as (position,length) stem   */
  /*                 descriptor.                                           */
  /*                                                                       */
  /* @@note:                                                                */
  /*    Use vertical coordinates (y) for horizontal stems (dim=0).  Use    */
  /*    horizontal coordinates (x) for vertical stems (dim=1).             */
  /*                                                                       */
  /*    "coords[0]" is the absolute stem position (lowest coordinate);     */
  /*    "coords[1]" is the length.                                         */
  /*                                                                       */
  /*    The length can be negative, in which case it must be either -20 or */
  /*    -21.  It will be interpreted as a "ghost" stem, according to       */
  /*    Type 1 specification.                                              */
  /*                                                                       */
  /*    If the length is -21 (corresponding to a bottom ghost stem), then  */
  /*    the real stem position is "coords[0]+coords[1]".                   */
  /*                                                                       */
d183 28
a210 24
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T1_Hints_SetStem3Func                                              */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T1_Hints class used to record three               */
  /*    counter-controlled horizontal or vertical stems at once.           */
  /*                                                                       */
  /* @@input:                                                               */
  /*    hints     :: A handle to the Type 1 hints recorder.                */
  /*                                                                       */
  /*    dimension :: 0 for horizontal stems, 1 for vertical ones.          */
  /*                                                                       */
  /*    coords    :: An array of 6 integers, holding 3 (position,length)   */
  /*                 pairs for the counter-controlled stems.               */
  /*                                                                       */
  /* @@note:                                                                */
  /*    Use vertical coordinates (y) for horizontal stems (dim=0).  Use    */
  /*    horizontal coordinates (x) for vertical stems (dim=1).             */
  /*                                                                       */
  /*    The lengths cannot be negative (ghost stems are never              */
  /*    counter-controlled).                                               */
  /*                                                                       */
d217 18
a234 15
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T1_Hints_ResetFunc                                                 */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T1_Hints class used to reset the stems hints in a */
  /*    recording session.                                                 */
  /*                                                                       */
  /* @@input:                                                               */
  /*    hints     :: A handle to the Type 1 hints recorder.                */
  /*                                                                       */
  /*    end_point :: The index of the last point in the input glyph in     */
  /*                 which the previously defined hints apply.             */
  /*                                                                       */
d240 24
a263 21
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T1_Hints_CloseFunc                                                 */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T1_Hints class used to close a hint recording     */
  /*    session.                                                           */
  /*                                                                       */
  /* @@input:                                                               */
  /*    hints     :: A handle to the Type 1 hints recorder.                */
  /*                                                                       */
  /*    end_point :: The index of the last point in the input glyph.       */
  /*                                                                       */
  /* @@return:                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  /* @@note:                                                                */
  /*    The error code will be set to indicate that an error occured       */
  /*    during the recording session.                                      */
  /*                                                                       */
d269 34
a302 29
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T1_Hints_ApplyFunc                                                 */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T1_Hints class used to apply hints to the         */
  /*    corresponding glyph outline.  Must be called once all hints have   */
  /*    been recorded.                                                     */
  /*                                                                       */
  /* @@input:                                                               */
  /*   hints     :: A handle to the Type 1 hints recorder.                 */
  /*                                                                       */
  /*   outline   :: A pointer to the target outline descriptor.            */
  /*                                                                       */
  /*   globals   :: The hinter globals for this font.                      */
  /*                                                                       */
  /*   hint_mode :: Hinting information.                                   */
  /*                                                                       */
  /* @@return:                                                              */
  /*   FreeType error code.  0 means success.                              */
  /*                                                                       */
  /* @@note:                                                                */
  /*    On input, all points within the outline are in font coordinates.   */
  /*    On output, they are in 1/64th of pixels.                           */
  /*                                                                       */
  /*    The scaling transformation is taken from the "globals" object      */
  /*    which must correspond to the same font as the glyph.               */
  /*                                                                       */
d310 31
a340 24
  /*************************************************************************/
  /*                                                                       */
  /* @@struct:                                                              */
  /*    T1_Hints_FuncsRec                                                  */
  /*                                                                       */
  /* @@description:                                                         */
  /*    The structure used to provide the API to @@T1_Hints objects.        */
  /*                                                                       */
  /* @@fields:                                                              */
  /*    hints :: A handle to the T1 Hints recorder.                        */
  /*                                                                       */
  /*    open  :: The function to open a recording session.                 */
  /*                                                                       */
  /*    close :: The function to close a recording session.                */
  /*                                                                       */
  /*    stem  :: The function to set a simple stem.                        */
  /*                                                                       */
  /*    stem3 :: The function to set counter-controlled stems.             */
  /*                                                                       */
  /*    reset :: The function to reset stem hints.                         */
  /*                                                                       */
  /*    apply :: The function to apply the hints to the corresponding      */
  /*             glyph outline.                                            */
  /*                                                                       */
d362 28
a389 27
  /*************************************************************************/
  /*                                                                       */
  /* @@type:                                                                */
  /*    T2_Hints                                                           */
  /*                                                                       */
  /* @@description:                                                         */
  /*    This is a handle to an opaque structure used to record glyph hints */
  /*    from a Type 2 character glyph character string.                    */
  /*                                                                       */
  /*    The methods used to operate on this object are defined by the      */
  /*    @@T2_Hints_FuncsRec structure.  Recording glyph hints is normally   */
  /*    achieved through the following scheme:                             */
  /*                                                                       */
  /*    - Open a new hint recording session by calling the "open" method.  */
  /*      This will rewind the recorder and prepare it for new input.      */
  /*                                                                       */
  /*    - For each hint found in the glyph charstring, call the            */
  /*      corresponding method ("stems", "hintmask", "counters").  Note    */
  /*      that these functions do not return an error code.                */
  /*                                                                       */
  /*    - Close the recording session by calling the "close" method.  It   */
  /*      will return an error code if the hints were invalid or something */
  /*      strange happened (e.g. memory shortage).                         */
  /*                                                                       */
  /*    The hints accumulated in the object can later be used by the       */
  /*    Postscript hinter.                                                 */
  /*                                                                       */
d393 10
a402 9
  /*************************************************************************/
  /*                                                                       */
  /* @@type:                                                                */
  /*    T2_Hints_Funcs                                                     */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A pointer to the @@T2_Hints_FuncsRec structure that defines the API */
  /*    of a given @@T2_Hints object.                                       */
  /*                                                                       */
d406 18
a423 16
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T2_Hints_OpenFunc                                                  */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T2_Hints class used to prepare it for a new       */
  /*    Type 2 hints recording session.                                    */
  /*                                                                       */
  /* @@input:                                                               */
  /*    hints :: A handle to the Type 2 hints recorder.                    */
  /*                                                                       */
  /* @@note:                                                                */
  /*    You should always call the @@T2_Hints_CloseFunc method in order to  */
  /*    close an opened recording session.                                 */
  /*                                                                       */
d428 36
a463 32
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T2_Hints_StemsFunc                                                 */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T2_Hints class used to set the table of stems in  */
  /*    either the vertical or horizontal dimension.  Equivalent to the    */
  /*    "hstem", "vstem", "hstemhm", and "vstemhm" Type 2 operators.       */
  /*                                                                       */
  /* @@input:                                                               */
  /*    hints     :: A handle to the Type 2 hints recorder.                */
  /*                                                                       */
  /*    dimension :: 0 for horizontal stems (hstem), 1 for vertical ones   */
  /*                 (vstem).                                              */
  /*                                                                       */
  /*    count     :: The number of stems.                                  */
  /*                                                                       */
  /*    coords    :: An array of "count" (position,length) pairs.          */
  /*                                                                       */
  /* @@note:                                                                */
  /*    Use vertical coordinates (y) for horizontal stems (dim=0).  Use    */
  /*    horizontal coordinates (x) for vertical stems (dim=1).             */
  /*                                                                       */
  /*    There are "2*count" elements in the "coords" aray.  Each even      */
  /*    element is an absolute position in font units, each odd element is */
  /*    a length in font units.                                            */
  /*                                                                       */
  /*    A length can be negative, in which case it must be either -20 or   */
  /*    -21.  It will be interpreted as a "ghost" stem, according to the   */
  /*    Type 1 specification.                                              */
  /*                                                                       */
d471 35
a505 30
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T2_Hints_MaskFunc                                                  */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T2_Hints class used to set a given hintmask       */
  /*    (this corresponds to the "hintmask" Type 2 operator).              */
  /*                                                                       */
  /* @@input:                                                               */
  /*    hints     :: A handle to the Type 2 hints recorder.                */
  /*                                                                       */
  /*    end_point :: The glyph index of the last point to which the        */
  /*                 previously defined/activated hints apply.             */
  /*                                                                       */
  /*    bit_count :: The number of bits in the hint mask.                  */
  /*                                                                       */
  /*    bytes     :: An array of bytes modelling the hint mask.            */
  /*                                                                       */
  /* @@note:                                                                */
  /*    If the hintmask starts the charstring (before any glyph point      */
  /*    definition), the value of "end_point" should be 0.                 */
  /*                                                                       */
  /*    "bit_count" is the number of meaningful bits in the "bytes" array; */
  /*    it must be equal to the total number of hints defined so far       */
  /*    (i.e. horizontal+verticals).                                       */
  /*                                                                       */
  /*    The "bytes" array can come directly from the Type 2 charstring and */
  /*    respects the same format.                                          */
  /*                                                                       */
d513 35
a547 30
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T2_Hints_CounterFunc                                               */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T2_Hints class used to set a given counter mask   */
  /*    (this corresponds to the "hintmask" Type 2 operator).              */
  /*                                                                       */
  /* @@input:                                                               */
  /*    hints     :: A handle to the Type 2 hints recorder.                */
  /*                                                                       */
  /*    end_point :: A glyph index of the last point to which the          */
  /*                 previously defined/active hints apply.                */
  /*                                                                       */
  /*    bit_count :: The number of bits in the hint mask.                  */
  /*                                                                       */
  /*    bytes     :: An array of bytes modelling the hint mask.            */
  /*                                                                       */
  /* @@note:                                                                */
  /*    If the hintmask starts the charstring (before any glyph point      */
  /*    definition), the value of "end_point" should be 0.                 */
  /*                                                                       */
  /*    "bit_count" is the number of meaningful bits in the "bytes" array; */
  /*    it must be equal to the total number of hints defined so far       */
  /*    (i.e. horizontal+verticals).                                       */
  /*                                                                       */
  /*    The "bytes" array can come directly from the Type 2 charstring and */
  /*    respects the same format.                                          */
  /*                                                                       */
d554 24
a577 21
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T2_Hints_CloseFunc                                                 */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T2_Hints class used to close a hint recording     */
  /*    session.                                                           */
  /*                                                                       */
  /* @@input:                                                               */
  /*    hints     :: A handle to the Type 2 hints recorder.                */
  /*                                                                       */
  /*    end_point :: The index of the last point in the input glyph.       */
  /*                                                                       */
  /* @@return:                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  /* @@note:                                                                */
  /*    The error code will be set to indicate that an error occured       */
  /*    during the recording session.                                      */
  /*                                                                       */
d583 34
a616 29
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    T2_Hints_ApplyFunc                                                 */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A method of the @@T2_Hints class used to apply hints to the         */
  /*    corresponding glyph outline.  Must be called after the "close"     */
  /*    method.                                                            */
  /*                                                                       */
  /* @@input:                                                               */
  /*    hints     :: A handle to the Type 2 hints recorder.                */
  /*                                                                       */
  /*    outline   :: A pointer to the target outline descriptor.           */
  /*                                                                       */
  /*    globals   :: The hinter globals for this font.                     */
  /*                                                                       */
  /*    hint_mode :: Hinting information.                                  */
  /*                                                                       */
  /* @@return:                                                              */
  /*   FreeType error code.  0 means success.                              */
  /*                                                                       */
  /* @@note:                                                                */
  /*    On input, all points within the outline are in font coordinates.   */
  /*    On output, they are in 1/64th of pixels.                           */
  /*                                                                       */
  /*    The scaling transformation is taken from the "globals" object      */
  /*    which must correspond to the same font than the glyph.             */
  /*                                                                       */
d624 31
a654 24
  /*************************************************************************/
  /*                                                                       */
  /* @@struct:                                                              */
  /*    T2_Hints_FuncsRec                                                  */
  /*                                                                       */
  /* @@description:                                                         */
  /*    The structure used to provide the API to @@T2_Hints objects.        */
  /*                                                                       */
  /* @@fields:                                                              */
  /*    hints    :: A handle to the T2 hints recorder object.              */
  /*                                                                       */
  /*    open     :: The function to open a recording session.              */
  /*                                                                       */
  /*    close    :: The function to close a recording session.             */
  /*                                                                       */
  /*    stems    :: The function to set the dimension's stems table.       */
  /*                                                                       */
  /*    hintmask :: The function to set hint masks.                        */
  /*                                                                       */
  /*    counter  :: The function to set counter masks.                     */
  /*                                                                       */
  /*    apply    :: The function to apply the hints on the corresponding   */
  /*                glyph outline.                                         */
  /*                                                                       */
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d7 1
a7 1
/*    T1/T2 hints in the `type1', `cid', and `cff' font drivers.           */
d9 1
a9 1
/*  Copyright 2001, 2002, 2003, 2005, 2006, 2007 by                        */
d76 27
a102 28
  /*************************************************************************
   *
   * @@type:
   *   T1_Hints
   *
   * @@description:
   *   This is a handle to an opaque structure used to record glyph hints
   *   from a Type 1 character glyph character string.
   *
   *   The methods used to operate on this object are defined by the
   *   @@T1_Hints_FuncsRec structure.  Recording glyph hints is normally
   *   achieved through the following scheme:
   *
   *   - Open a new hint recording session by calling the `open' method.
   *     This rewinds the recorder and prepare it for new input.
   *
   *   - For each hint found in the glyph charstring, call the corresponding
   *     method (`stem', `stem3', or `reset').  Note that these functions do
   *     not return an error code.
   *
   *   - Close the recording session by calling the `close' method.  It
   *     returns an error code if the hints were invalid or something
   *     strange happened (e.g., memory shortage).
   *
   *   The hints accumulated in the object can later be used by the
   *   PostScript hinter.
   *
   */
d106 9
a114 10
  /*************************************************************************
   *
   * @@type:
   *   T1_Hints_Funcs
   *
   * @@description:
   *   A pointer to the @@T1_Hints_FuncsRec structure that defines the API of
   *   a given @@T1_Hints object.
   *
   */
d118 16
a133 18
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_OpenFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to prepare it for a new Type 1
   *   hints recording session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   * @@note:
   *   You should always call the @@T1_Hints_CloseFunc method in order to
   *   close an opened recording session.
   *
   */
d138 33
a170 35
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_SetStemFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to record a new horizontal or
   *   vertical stem.  This corresponds to the Type 1 `hstem' and `vstem'
   *   operators.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   dimension ::
   *     0 for horizontal stems (hstem), 1 for vertical ones (vstem).
   *
   *   coords ::
   *     Array of 2 integers, used as (position,length) stem descriptor.
   *
   * @@note:
   *   Use vertical coordinates (y) for horizontal stems (dim=0).  Use
   *   horizontal coordinates (x) for vertical stems (dim=1).
   *
   *   `coords[0]' is the absolute stem position (lowest coordinate);
   *   `coords[1]' is the length.
   *
   *   The length can be negative, in which case it must be either -20 or
   *   -21.  It is interpreted as a `ghost' stem, according to the Type 1
   *   specification.
   *
   *   If the length is -21 (corresponding to a bottom ghost stem), then
   *   the real stem position is `coords[0]+coords[1]'.
   *
   */
d177 24
a200 28
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_SetStem3Func
   *
   * @@description:
   *   A method of the @@T1_Hints class used to record three
   *   counter-controlled horizontal or vertical stems at once.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   dimension ::
   *     0 for horizontal stems, 1 for vertical ones.
   *
   *   coords ::
   *     An array of 6 integers, holding 3 (position,length) pairs for the
   *     counter-controlled stems.
   *
   * @@note:
   *   Use vertical coordinates (y) for horizontal stems (dim=0).  Use
   *   horizontal coordinates (x) for vertical stems (dim=1).
   *
   *   The lengths cannot be negative (ghost stems are never
   *   counter-controlled).
   *
   */
d207 15
a221 18
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_ResetFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to reset the stems hints in a
   *   recording session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   end_point ::
   *     The index of the last point in the input glyph in which the
   *     previously defined hints apply.
   *
   */
d227 21
a247 24
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_CloseFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to close a hint recording
   *   session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   end_point ::
   *     The index of the last point in the input glyph.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   The error code is set to indicate that an error occurred during the
   *   recording session.
   *
   */
d253 29
a281 34
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_ApplyFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to apply hints to the
   *   corresponding glyph outline.  Must be called once all hints have been
   *   recorded.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   outline ::
   *     A pointer to the target outline descriptor.
   *
   *   globals ::
   *     The hinter globals for this font.
   *
   *   hint_mode ::
   *     Hinting information.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   On input, all points within the outline are in font coordinates. On
   *   output, they are in 1/64th of pixels.
   *
   *   The scaling transformation is taken from the `globals' object which
   *   must correspond to the same font as the glyph.
   *
   */
d289 24
a312 31
  /*************************************************************************
   *
   * @@struct:
   *   T1_Hints_FuncsRec
   *
   * @@description:
   *   The structure used to provide the API to @@T1_Hints objects.
   *
   * @@fields:
   *   hints ::
   *     A handle to the T1 Hints recorder.
   *
   *   open ::
   *     The function to open a recording session.
   *
   *   close ::
   *     The function to close a recording session.
   *
   *   stem ::
   *     The function to set a simple stem.
   *
   *   stem3 ::
   *     The function to set counter-controlled stems.
   *
   *   reset ::
   *     The function to reset stem hints.
   *
   *   apply ::
   *     The function to apply the hints to the corresponding glyph outline.
   *
   */
d334 27
a360 28
  /*************************************************************************
   *
   * @@type:
   *   T2_Hints
   *
   * @@description:
   *   This is a handle to an opaque structure used to record glyph hints
   *   from a Type 2 character glyph character string.
   *
   *   The methods used to operate on this object are defined by the
   *   @@T2_Hints_FuncsRec structure.  Recording glyph hints is normally
   *   achieved through the following scheme:
   *
   *   - Open a new hint recording session by calling the `open' method.
   *     This rewinds the recorder and prepare it for new input.
   *
   *   - For each hint found in the glyph charstring, call the corresponding
   *     method (`stems', `hintmask', `counters').  Note that these
   *     functions do not return an error code.
   *
   *   - Close the recording session by calling the `close' method.  It
   *     returns an error code if the hints were invalid or something
   *     strange happened (e.g., memory shortage).
   *
   *   The hints accumulated in the object can later be used by the
   *   Postscript hinter.
   *
   */
d364 9
a372 10
  /*************************************************************************
   *
   * @@type:
   *   T2_Hints_Funcs
   *
   * @@description:
   *   A pointer to the @@T2_Hints_FuncsRec structure that defines the API of
   *   a given @@T2_Hints object.
   *
   */
d376 16
a391 18
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_OpenFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to prepare it for a new Type 2
   *   hints recording session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   * @@note:
   *   You should always call the @@T2_Hints_CloseFunc method in order to
   *   close an opened recording session.
   *
   */
d396 32
a427 36
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_StemsFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to set the table of stems in
   *   either the vertical or horizontal dimension.  Equivalent to the
   *   `hstem', `vstem', `hstemhm', and `vstemhm' Type 2 operators.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   dimension ::
   *     0 for horizontal stems (hstem), 1 for vertical ones (vstem).
   *
   *   count ::
   *     The number of stems.
   *
   *   coords ::
   *     An array of `count' (position,length) pairs.
   *
   * @@note:
   *   Use vertical coordinates (y) for horizontal stems (dim=0).  Use
   *   horizontal coordinates (x) for vertical stems (dim=1).
   *
   *   There are `2*count' elements in the `coords' array.  Each even
   *   element is an absolute position in font units, each odd element is a
   *   length in font units.
   *
   *   A length can be negative, in which case it must be either -20 or
   *   -21.  It is interpreted as a `ghost' stem, according to the Type 1
   *   specification.
   *
   */
d435 30
a464 35
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_MaskFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to set a given hintmask (this
   *   corresponds to the `hintmask' Type 2 operator).
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   end_point ::
   *     The glyph index of the last point to which the previously defined
   *     or activated hints apply.
   *
   *   bit_count ::
   *     The number of bits in the hint mask.
   *
   *   bytes ::
   *     An array of bytes modelling the hint mask.
   *
   * @@note:
   *   If the hintmask starts the charstring (before any glyph point
   *   definition), the value of `end_point' should be 0.
   *
   *   `bit_count' is the number of meaningful bits in the `bytes' array; it
   *   must be equal to the total number of hints defined so far (i.e.,
   *   horizontal+verticals).
   *
   *   The `bytes' array can come directly from the Type 2 charstring and
   *   respects the same format.
   *
   */
d472 30
a501 35
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_CounterFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to set a given counter mask
   *   (this corresponds to the `hintmask' Type 2 operator).
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   end_point ::
   *     A glyph index of the last point to which the previously defined or
   *     active hints apply.
   *
   *   bit_count ::
   *     The number of bits in the hint mask.
   *
   *   bytes ::
   *     An array of bytes modelling the hint mask.
   *
   * @@note:
   *   If the hintmask starts the charstring (before any glyph point
   *   definition), the value of `end_point' should be 0.
   *
   *   `bit_count' is the number of meaningful bits in the `bytes' array; it
   *   must be equal to the total number of hints defined so far (i.e.,
   *   horizontal+verticals).
   *
   *    The `bytes' array can come directly from the Type 2 charstring and
   *    respects the same format.
   *
   */
d508 21
a528 24
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_CloseFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to close a hint recording
   *   session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   end_point ::
   *     The index of the last point in the input glyph.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   The error code is set to indicate that an error occurred during the
   *   recording session.
   *
   */
d534 29
a562 34
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_ApplyFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to apply hints to the
   *   corresponding glyph outline.  Must be called after the `close'
   *   method.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   outline ::
   *     A pointer to the target outline descriptor.
   *
   *   globals ::
   *     The hinter globals for this font.
   *
   *   hint_mode ::
   *     Hinting information.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   On input, all points within the outline are in font coordinates. On
   *   output, they are in 1/64th of pixels.
   *
   *   The scaling transformation is taken from the `globals' object which
   *   must correspond to the same font than the glyph.
   *
   */
d570 24
a593 31
  /*************************************************************************
   *
   * @@struct:
   *   T2_Hints_FuncsRec
   *
   * @@description:
   *   The structure used to provide the API to @@T2_Hints objects.
   *
   * @@fields:
   *   hints ::
   *     A handle to the T2 hints recorder object.
   *
   *   open ::
   *     The function to open a recording session.
   *
   *   close ::
   *     The function to close a recording session.
   *
   *   stems ::
   *     The function to set the dimension's stems table.
   *
   *   hintmask ::
   *     The function to set hint masks.
   *
   *   counter ::
   *     The function to set counter masks.
   *
   *   apply ::
   *     The function to apply the hints on the corresponding glyph outline.
   *
   */
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d7 1
a7 1
/*    T1/T2 hints in the `type1', `cid', and `cff' font drivers.           */
d9 1
a9 1
/*  Copyright 2001, 2002, 2003, 2005, 2006 by                              */
d76 27
a102 28
  /*************************************************************************
   *
   * @@type:
   *   T1_Hints
   *
   * @@description:
   *   This is a handle to an opaque structure used to record glyph hints
   *   from a Type 1 character glyph character string.
   *
   *   The methods used to operate on this object are defined by the
   *   @@T1_Hints_FuncsRec structure.  Recording glyph hints is normally
   *   achieved through the following scheme:
   *
   *   - Open a new hint recording session by calling the `open' method.
   *     This rewinds the recorder and prepare it for new input.
   *
   *   - For each hint found in the glyph charstring, call the corresponding
   *     method (`stem', `stem3', or `reset').  Note that these functions do
   *     not return an error code.
   *
   *   - Close the recording session by calling the `close' method.  It
   *     returns an error code if the hints were invalid or something
   *     strange happened (e.g., memory shortage).
   *
   *   The hints accumulated in the object can later be used by the
   *   PostScript hinter.
   *
   */
d106 9
a114 10
  /*************************************************************************
   *
   * @@type:
   *   T1_Hints_Funcs
   *
   * @@description:
   *   A pointer to the @@T1_Hints_FuncsRec structure that defines the API of
   *   a given @@T1_Hints object.
   *
   */
d118 16
a133 18
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_OpenFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to prepare it for a new Type 1
   *   hints recording session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   * @@note:
   *   You should always call the @@T1_Hints_CloseFunc method in order to
   *   close an opened recording session.
   *
   */
d138 33
a170 35
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_SetStemFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to record a new horizontal or
   *   vertical stem.  This corresponds to the Type 1 `hstem' and `vstem'
   *   operators.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   dimension ::
   *     0 for horizontal stems (hstem), 1 for vertical ones (vstem).
   *
   *   coords ::
   *     Array of 2 integers, used as (position,length) stem descriptor.
   *
   * @@note:
   *   Use vertical coordinates (y) for horizontal stems (dim=0).  Use
   *   horizontal coordinates (x) for vertical stems (dim=1).
   *
   *   `coords[0]' is the absolute stem position (lowest coordinate);
   *   `coords[1]' is the length.
   *
   *   The length can be negative, in which case it must be either -20 or
   *   -21.  It is interpreted as a `ghost' stem, according to the Type 1
   *   specification.
   *
   *   If the length is -21 (corresponding to a bottom ghost stem), then
   *   the real stem position is `coords[0]+coords[1]'.
   *
   */
d177 24
a200 28
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_SetStem3Func
   *
   * @@description:
   *   A method of the @@T1_Hints class used to record three
   *   counter-controlled horizontal or vertical stems at once.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   dimension ::
   *     0 for horizontal stems, 1 for vertical ones.
   *
   *   coords ::
   *     An array of 6 integers, holding 3 (position,length) pairs for the
   *     counter-controlled stems.
   *
   * @@note:
   *   Use vertical coordinates (y) for horizontal stems (dim=0).  Use
   *   horizontal coordinates (x) for vertical stems (dim=1).
   *
   *   The lengths cannot be negative (ghost stems are never
   *   counter-controlled).
   *
   */
d207 15
a221 18
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_ResetFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to reset the stems hints in a
   *   recording session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   end_point ::
   *     The index of the last point in the input glyph in which the
   *     previously defined hints apply.
   *
   */
d227 21
a247 24
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_CloseFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to close a hint recording
   *   session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   end_point ::
   *     The index of the last point in the input glyph.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   The error code is set to indicate that an error occurred during the
   *   recording session.
   *
   */
d253 29
a281 34
  /*************************************************************************
   *
   * @@functype:
   *   T1_Hints_ApplyFunc
   *
   * @@description:
   *   A method of the @@T1_Hints class used to apply hints to the
   *   corresponding glyph outline.  Must be called once all hints have been
   *   recorded.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 1 hints recorder.
   *
   *   outline ::
   *     A pointer to the target outline descriptor.
   *
   *   globals ::
   *     The hinter globals for this font.
   *
   *   hint_mode ::
   *     Hinting information.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   On input, all points within the outline are in font coordinates. On
   *   output, they are in 1/64th of pixels.
   *
   *   The scaling transformation is taken from the `globals' object which
   *   must correspond to the same font as the glyph.
   *
   */
d289 24
a312 31
  /*************************************************************************
   *
   * @@struct:
   *   T1_Hints_FuncsRec
   *
   * @@description:
   *   The structure used to provide the API to @@T1_Hints objects.
   *
   * @@fields:
   *   hints ::
   *     A handle to the T1 Hints recorder.
   *
   *   open ::
   *     The function to open a recording session.
   *
   *   close ::
   *     The function to close a recording session.
   *
   *   stem ::
   *     The function to set a simple stem.
   *
   *   stem3 ::
   *     The function to set counter-controlled stems.
   *
   *   reset ::
   *     The function to reset stem hints.
   *
   *   apply ::
   *     The function to apply the hints to the corresponding glyph outline.
   *
   */
d334 27
a360 28
  /*************************************************************************
   *
   * @@type:
   *   T2_Hints
   *
   * @@description:
   *   This is a handle to an opaque structure used to record glyph hints
   *   from a Type 2 character glyph character string.
   *
   *   The methods used to operate on this object are defined by the
   *   @@T2_Hints_FuncsRec structure.  Recording glyph hints is normally
   *   achieved through the following scheme:
   *
   *   - Open a new hint recording session by calling the `open' method.
   *     This rewinds the recorder and prepare it for new input.
   *
   *   - For each hint found in the glyph charstring, call the corresponding
   *     method (`stems', `hintmask', `counters').  Note that these
   *     functions do not return an error code.
   *
   *   - Close the recording session by calling the `close' method.  It
   *     returns an error code if the hints were invalid or something
   *     strange happened (e.g., memory shortage).
   *
   *   The hints accumulated in the object can later be used by the
   *   Postscript hinter.
   *
   */
d364 9
a372 10
  /*************************************************************************
   *
   * @@type:
   *   T2_Hints_Funcs
   *
   * @@description:
   *   A pointer to the @@T2_Hints_FuncsRec structure that defines the API of
   *   a given @@T2_Hints object.
   *
   */
d376 16
a391 18
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_OpenFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to prepare it for a new Type 2
   *   hints recording session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   * @@note:
   *   You should always call the @@T2_Hints_CloseFunc method in order to
   *   close an opened recording session.
   *
   */
d396 32
a427 36
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_StemsFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to set the table of stems in
   *   either the vertical or horizontal dimension.  Equivalent to the
   *   `hstem', `vstem', `hstemhm', and `vstemhm' Type 2 operators.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   dimension ::
   *     0 for horizontal stems (hstem), 1 for vertical ones (vstem).
   *
   *   count ::
   *     The number of stems.
   *
   *   coords ::
   *     An array of `count' (position,length) pairs.
   *
   * @@note:
   *   Use vertical coordinates (y) for horizontal stems (dim=0).  Use
   *   horizontal coordinates (x) for vertical stems (dim=1).
   *
   *   There are `2*count' elements in the `coords' aray.  Each even element
   *   is an absolute position in font units, each odd element is a length
   *   in font units.
   *
   *   A length can be negative, in which case it must be either -20 or
   *   -21.  It is interpreted as a `ghost' stem, according to the Type 1
   *   specification.
   *
   */
d435 30
a464 35
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_MaskFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to set a given hintmask (this
   *   corresponds to the `hintmask' Type 2 operator).
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   end_point ::
   *     The glyph index of the last point to which the previously defined
   *     or activated hints apply.
   *
   *   bit_count ::
   *     The number of bits in the hint mask.
   *
   *   bytes ::
   *     An array of bytes modelling the hint mask.
   *
   * @@note:
   *   If the hintmask starts the charstring (before any glyph point
   *   definition), the value of `end_point' should be 0.
   *
   *   `bit_count' is the number of meaningful bits in the `bytes' array; it
   *   must be equal to the total number of hints defined so far (i.e.,
   *   horizontal+verticals).
   *
   *   The `bytes' array can come directly from the Type 2 charstring and
   *   respects the same format.
   *
   */
d472 30
a501 35
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_CounterFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to set a given counter mask
   *   (this corresponds to the `hintmask' Type 2 operator).
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   end_point ::
   *     A glyph index of the last point to which the previously defined or
   *     active hints apply.
   *
   *   bit_count ::
   *     The number of bits in the hint mask.
   *
   *   bytes ::
   *     An array of bytes modelling the hint mask.
   *
   * @@note:
   *   If the hintmask starts the charstring (before any glyph point
   *   definition), the value of `end_point' should be 0.
   *
   *   `bit_count' is the number of meaningful bits in the `bytes' array; it
   *   must be equal to the total number of hints defined so far (i.e.,
   *   horizontal+verticals).
   *
   *    The `bytes' array can come directly from the Type 2 charstring and
   *    respects the same format.
   *
   */
d508 21
a528 24
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_CloseFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to close a hint recording
   *   session.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   end_point ::
   *     The index of the last point in the input glyph.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   The error code is set to indicate that an error occurred during the
   *   recording session.
   *
   */
d534 29
a562 34
  /*************************************************************************
   *
   * @@functype:
   *   T2_Hints_ApplyFunc
   *
   * @@description:
   *   A method of the @@T2_Hints class used to apply hints to the
   *   corresponding glyph outline.  Must be called after the `close'
   *   method.
   *
   * @@input:
   *   hints ::
   *     A handle to the Type 2 hints recorder.
   *
   *   outline ::
   *     A pointer to the target outline descriptor.
   *
   *   globals ::
   *     The hinter globals for this font.
   *
   *   hint_mode ::
   *     Hinting information.
   *
   * @@return:
   *   FreeType error code.  0 means success.
   *
   * @@note:
   *   On input, all points within the outline are in font coordinates. On
   *   output, they are in 1/64th of pixels.
   *
   *   The scaling transformation is taken from the `globals' object which
   *   must correspond to the same font than the glyph.
   *
   */
d570 24
a593 31
  /*************************************************************************
   *
   * @@struct:
   *   T2_Hints_FuncsRec
   *
   * @@description:
   *   The structure used to provide the API to @@T2_Hints objects.
   *
   * @@fields:
   *   hints ::
   *     A handle to the T2 hints recorder object.
   *
   *   open ::
   *     The function to open a recording session.
   *
   *   close ::
   *     The function to close a recording session.
   *
   *   stems ::
   *     The function to set the dimension's stems table.
   *
   *   hintmask ::
   *     The function to set hint masks.
   *
   *   counter ::
   *     The function to set counter masks.
   *
   *   apply ::
   *     The function to apply the hints on the corresponding glyph outline.
   *
   */
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d9 1
a9 1
/*  Copyright 2001, 2002, 2003, 2005, 2006, 2007, 2009 by                  */
d160 1
a160 2
   *     Array of 2 coordinates in 16.16 format, used as (position,length)
   *     stem descriptor.
d178 3
a180 3
  (*T1_Hints_SetStemFunc)( T1_Hints   hints,
                           FT_UInt    dimension,
                           FT_Fixed*  coords );
d200 2
a201 2
   *     An array of 6 values in 16.16 format, holding 3 (position,length)
   *     pairs for the counter-controlled stems.
d212 3
a214 3
  (*T1_Hints_SetStem3Func)( T1_Hints   hints,
                            FT_UInt    dimension,
                            FT_Fixed*  coords );
d449 1
a449 1
   *     An array of `count' (position,length) pairs in 16.16 format.
d455 3
a457 3
   *   There are `2*count' elements in the `coords' array.  Each even
   *   element is an absolute position in font units, each odd element is a
   *   length in font units.
a680 24
#ifndef FT_CONFIG_OPTION_PIC

#define FT_DEFINE_PSHINTER_INTERFACE(class_, get_globals_funcs_,             \
                                     get_t1_funcs_, get_t2_funcs_)           \
  static const PSHinter_Interface class_ =                                   \
  {                                                                          \
    get_globals_funcs_, get_t1_funcs_, get_t2_funcs_                         \
  };

#else /* FT_CONFIG_OPTION_PIC */ 

#define FT_DEFINE_PSHINTER_INTERFACE(class_, get_globals_funcs_,             \
                                     get_t1_funcs_, get_t2_funcs_)           \
  void                                                                       \
  FT_Init_Class_##class_( FT_Library library,                                \
                          PSHinter_Interface*  clazz)                        \
  {                                                                          \
    FT_UNUSED(library);                                                      \
    clazz->get_globals_funcs = get_globals_funcs_;                           \
    clazz->get_t1_funcs = get_t1_funcs_;                                     \
    clazz->get_t2_funcs = get_t2_funcs_;                                     \
  } 

#endif /* FT_CONFIG_OPTION_PIC */ 
@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d9 1
a9 1
/*  Copyright 2001-2016 by                                                 */
d21 2
a22 2
#ifndef PSHINTS_H_
#define PSHINTS_H_
d48 1
a48 1
  typedef void
d468 1
a468 1
                         FT_Int     count,
a681 1

d684 5
a688 10
#define FT_DEFINE_PSHINTER_INTERFACE(        \
          class_,                            \
          get_globals_funcs_,                \
          get_t1_funcs_,                     \
          get_t2_funcs_ )                    \
  static const PSHinter_Interface  class_ =  \
  {                                          \
    get_globals_funcs_,                      \
    get_t1_funcs_,                           \
    get_t2_funcs_                            \
d691 1
a691 1
#else /* FT_CONFIG_OPTION_PIC */
d693 11
a703 15
#define FT_DEFINE_PSHINTER_INTERFACE(                      \
          class_,                                          \
          get_globals_funcs_,                              \
          get_t1_funcs_,                                   \
          get_t2_funcs_ )                                  \
  void                                                     \
  FT_Init_Class_ ## class_( FT_Library           library,  \
                            PSHinter_Interface*  clazz )   \
  {                                                        \
    FT_UNUSED( library );                                  \
                                                           \
    clazz->get_globals_funcs = get_globals_funcs_;         \
    clazz->get_t1_funcs      = get_t1_funcs_;              \
    clazz->get_t2_funcs      = get_t2_funcs_;              \
  }
d705 1
a705 1
#endif /* FT_CONFIG_OPTION_PIC */
d709 1
a709 1
#endif /* PSHINTS_H_ */
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
