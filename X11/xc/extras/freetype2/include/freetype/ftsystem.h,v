head	1.4;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.1
	MIRBSD_10_BASE:1.2
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.4
date	2017.04.15.19.21.04;	author tg;	state Exp;
branches;
next	1.3;
commitid	10058F2723111C7BEE2;

1.3
date	2013.08.06.19.47.21;	author tg;	state Exp;
branches;
next	1.2;
commitid	100520152445E05B912;

1.2
date	2006.06.29.20.24.28;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.03;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.51.45;	author bsiegert;	state Exp;
branches;
next	;
commitid	10047C46DB5081DCD79;

1.1.103.1
date	2005.03.18.10.43.03;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.34.41;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.38.36;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.18;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.41.55;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.4
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  ftsystem.h                                                             */
/*                                                                         */
/*    FreeType low-level system interface definition (specification).      */
/*                                                                         */
/*  Copyright 1996-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#ifndef FTSYSTEM_H_
#define FTSYSTEM_H_


#include <ft2build.h>


FT_BEGIN_HEADER


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*   system_interface                                                    */
  /*                                                                       */
  /* <Title>                                                               */
  /*   System Interface                                                    */
  /*                                                                       */
  /* <Abstract>                                                            */
  /*   How FreeType manages memory and i/o.                                */
  /*                                                                       */
  /* <Description>                                                         */
  /*   This section contains various definitions related to memory         */
  /*   management and i/o access.  You need to understand this             */
  /*   information if you want to use a custom memory manager or you own   */
  /*   i/o streams.                                                        */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /*                  M E M O R Y   M A N A G E M E N T                    */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************
   *
   * @@type:
   *   FT_Memory
   *
   * @@description:
   *   A handle to a given memory manager object, defined with an
   *   @@FT_MemoryRec structure.
   *
   */
  typedef struct FT_MemoryRec_*  FT_Memory;


  /*************************************************************************
   *
   * @@functype:
   *   FT_Alloc_Func
   *
   * @@description:
   *   A function used to allocate `size' bytes from `memory'.
   *
   * @@input:
   *   memory ::
   *     A handle to the source memory manager.
   *
   *   size ::
   *     The size in bytes to allocate.
   *
   * @@return:
   *   Address of new memory block.  0~in case of failure.
   *
   */
  typedef void*
  (*FT_Alloc_Func)( FT_Memory  memory,
                    long       size );


  /*************************************************************************
   *
   * @@functype:
   *   FT_Free_Func
   *
   * @@description:
   *   A function used to release a given block of memory.
   *
   * @@input:
   *   memory ::
   *     A handle to the source memory manager.
   *
   *   block ::
   *     The address of the target memory block.
   *
   */
  typedef void
  (*FT_Free_Func)( FT_Memory  memory,
                   void*      block );


  /*************************************************************************
   *
   * @@functype:
   *   FT_Realloc_Func
   *
   * @@description:
   *   A function used to re-allocate a given block of memory.
   *
   * @@input:
   *   memory ::
   *     A handle to the source memory manager.
   *
   *   cur_size ::
   *     The block's current size in bytes.
   *
   *   new_size ::
   *     The block's requested new size.
   *
   *   block ::
   *     The block's current address.
   *
   * @@return:
   *   New block address.  0~in case of memory shortage.
   *
   * @@note:
   *   In case of error, the old block must still be available.
   *
   */
  typedef void*
  (*FT_Realloc_Func)( FT_Memory  memory,
                      long       cur_size,
                      long       new_size,
                      void*      block );


  /*************************************************************************
   *
   * @@struct:
   *   FT_MemoryRec
   *
   * @@description:
   *   A structure used to describe a given memory manager to FreeType~2.
   *
   * @@fields:
   *   user ::
   *     A generic typeless pointer for user data.
   *
   *   alloc ::
   *     A pointer type to an allocation function.
   *
   *   free ::
   *     A pointer type to an memory freeing function.
   *
   *   realloc ::
   *     A pointer type to a reallocation function.
   *
   */
  struct  FT_MemoryRec_
  {
    void*            user;
    FT_Alloc_Func    alloc;
    FT_Free_Func     free;
    FT_Realloc_Func  realloc;
  };


  /*************************************************************************/
  /*                                                                       */
  /*                       I / O   M A N A G E M E N T                     */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************
   *
   * @@type:
   *   FT_Stream
   *
   * @@description:
   *   A handle to an input stream.
   *
   * @@also:
   *   See @@FT_StreamRec for the publicly accessible fields of a given
   *   stream object.
   *
   */
  typedef struct FT_StreamRec_*  FT_Stream;


  /*************************************************************************
   *
   * @@struct:
   *   FT_StreamDesc
   *
   * @@description:
   *   A union type used to store either a long or a pointer.  This is used
   *   to store a file descriptor or a `FILE*' in an input stream.
   *
   */
  typedef union  FT_StreamDesc_
  {
    long   value;
    void*  pointer;

  } FT_StreamDesc;


  /*************************************************************************
   *
   * @@functype:
   *   FT_Stream_IoFunc
   *
   * @@description:
   *   A function used to seek and read data from a given input stream.
   *
   * @@input:
   *   stream ::
   *     A handle to the source stream.
   *
   *   offset ::
   *     The offset of read in stream (always from start).
   *
   *   buffer ::
   *     The address of the read buffer.
   *
   *   count ::
   *     The number of bytes to read from the stream.
   *
   * @@return:
   *   The number of bytes effectively read by the stream.
   *
   * @@note:
   *   This function might be called to perform a seek or skip operation
   *   with a `count' of~0.  A non-zero return value then indicates an
   *   error.
   *
   */
  typedef unsigned long
  (*FT_Stream_IoFunc)( FT_Stream       stream,
                       unsigned long   offset,
                       unsigned char*  buffer,
                       unsigned long   count );


  /*************************************************************************
   *
   * @@functype:
   *   FT_Stream_CloseFunc
   *
   * @@description:
   *   A function used to close a given input stream.
   *
   * @@input:
   *  stream ::
   *     A handle to the target stream.
   *
   */
  typedef void
  (*FT_Stream_CloseFunc)( FT_Stream  stream );


  /*************************************************************************
   *
   * @@struct:
   *   FT_StreamRec
   *
   * @@description:
   *   A structure used to describe an input stream.
   *
   * @@input:
   *   base ::
   *     For memory-based streams, this is the address of the first stream
   *     byte in memory.  This field should always be set to NULL for
   *     disk-based streams.
   *
   *   size ::
   *     The stream size in bytes.
   *
   *     In case of compressed streams where the size is unknown before
   *     actually doing the decompression, the value is set to 0x7FFFFFFF.
   *     (Note that this size value can occur for normal streams also; it is
   *     thus just a hint.)
   *
   *   pos ::
   *     The current position within the stream.
   *
   *   descriptor ::
   *     This field is a union that can hold an integer or a pointer.  It is
   *     used by stream implementations to store file descriptors or `FILE*'
   *     pointers.
   *
   *   pathname ::
   *     This field is completely ignored by FreeType.  However, it is often
   *     useful during debugging to use it to store the stream's filename
   *     (where available).
   *
   *   read ::
   *     The stream's input function.
   *
   *   close ::
   *     The stream's close function.
   *
   *   memory ::
   *     The memory manager to use to preload frames.  This is set
   *     internally by FreeType and shouldn't be touched by stream
   *     implementations.
   *
   *   cursor ::
   *     This field is set and used internally by FreeType when parsing
   *     frames.
   *
   *   limit ::
   *     This field is set and used internally by FreeType when parsing
   *     frames.
   *
   */
  typedef struct  FT_StreamRec_
  {
    unsigned char*       base;
    unsigned long        size;
    unsigned long        pos;

    FT_StreamDesc        descriptor;
    FT_StreamDesc        pathname;
    FT_Stream_IoFunc     read;
    FT_Stream_CloseFunc  close;

    FT_Memory            memory;
    unsigned char*       cursor;
    unsigned char*       limit;

  } FT_StreamRec;

  /* */


FT_END_HEADER

#endif /* FTSYSTEM_H_ */


/* END */
@


1.3
log
@fastmerge
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2005 by                                     */
d19 2
a20 2
#ifndef __FTSYSTEM_H__
#define __FTSYSTEM_H__
d195 4
d247 2
a248 1
   *   with a `count' of~0.
d292 5
d314 1
a314 1
   *     The stream;s close function.
a346 1

d352 1
a352 1
#endif /* __FTSYSTEM_H__ */
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d85 1
a85 1
   *   Address of new memory block.  0 in case of failure.
d136 1
a136 1
   *   New block address.  0 in case of memory shortage.
d155 1
a155 1
   *   A structure used to describe a given memory manager to FreeType 2.
d243 1
a243 1
   *   with a `count' of 0.
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002 by                                           */
d32 1
a32 1
  /*    system_interface                                                   */
d35 1
a35 1
  /*    System Interface                                                   */
d38 1
a38 1
  /*    How FreeType manages memory and i/o.                               */
d41 4
a44 4
  /*    This section contains various definitions related to memory        */
  /*    management and i/o access.  You need to understand this            */
  /*    information if you want to use a custom memory manager or you own  */
  /*    input i/o streams.                                                 */
d56 10
a65 9
  /*************************************************************************/
  /*                                                                       */
  /* @@type:                                                                */
  /*    FT_Memory                                                          */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A handle to a given memory manager object, defined with a          */
  /*    @@FT_MemoryRec structure.                                           */
  /*                                                                       */
d69 19
a87 16
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    FT_Alloc_Func                                                      */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A function used to allocate `size' bytes from `memory'.            */
  /*                                                                       */
  /* @@input:                                                               */
  /*    memory :: A handle to the source memory manager.                   */
  /*                                                                       */
  /*    size   :: The size in bytes to allocate.                           */
  /*                                                                       */
  /* @@return:                                                              */
  /*    Address of new memory block.  0 in case of failure.                */
  /*                                                                       */
d93 16
a108 13
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    FT_Free_Func                                                       */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A function used to release a given block of memory.                */
  /*                                                                       */
  /* @@input:                                                               */
  /*    memory :: A handle to the source memory manager.                   */
  /*                                                                       */
  /*    block  :: The address of the target memory block.                  */
  /*                                                                       */
d114 28
a141 23
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    FT_Realloc_Func                                                    */
  /*                                                                       */
  /* @@description:                                                         */
  /*    a function used to re-allocate a given block of memory.            */
  /*                                                                       */
  /* @@input:                                                               */
  /*    memory   :: A handle to the source memory manager.                 */
  /*                                                                       */
  /*    cur_size :: The block's current size in bytes.                     */
  /*                                                                       */
  /*    new_size :: The block's requested new size.                        */
  /*                                                                       */
  /*    block    :: The block's current address.                           */
  /*                                                                       */
  /* @@return:                                                              */
  /*    New block address.  0 in case of memory shortage.                  */
  /*                                                                       */
  /* @@note:                                                                */
  /*   In case of error, the old block must still be available.            */
  /*                                                                       */
d149 22
a170 17
  /*************************************************************************/
  /*                                                                       */
  /* @@struct:                                                              */
  /*    FT_MemoryRec                                                       */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A structure used to describe a given memory manager to FreeType 2. */
  /*                                                                       */
  /* @@fields:                                                              */
  /*    user    :: A generic typeless pointer for user data.               */
  /*                                                                       */
  /*    alloc   :: A pointer type to an allocation function.               */
  /*                                                                       */
  /*    free    :: A pointer type to an memory freeing function.           */
  /*                                                                       */
  /*    realloc :: A pointer type to a reallocation function.              */
  /*                                                                       */
d187 9
a195 8
  /*************************************************************************/
  /*                                                                       */
  /* @@type:                                                                */
  /*    FT_Stream                                                          */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A handle to an input stream.                                       */
  /*                                                                       */
d199 10
a208 9
  /*************************************************************************/
  /*                                                                       */
  /* @@struct:                                                              */
  /*    FT_StreamDesc                                                      */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A union type used to store either a long or a pointer.  This is    */
  /*    used to store a file descriptor or a FILE* in an input stream.     */
  /*                                                                       */
d217 29
a245 24
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    FT_Stream_IoFunc                                                   */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A function used to seek and read data from a given input stream.   */
  /*                                                                       */
  /* @@input:                                                               */
  /*    stream :: A handle to the source stream.                           */
  /*                                                                       */
  /*    offset :: The offset of read in stream (always from start).        */
  /*                                                                       */
  /*    buffer :: The address of the read buffer.                          */
  /*                                                                       */
  /*    count  :: The number of bytes to read from the stream.             */
  /*                                                                       */
  /* @@return:                                                              */
  /*    The number of bytes effectively read by the stream.                */
  /*                                                                       */
  /* @@note:                                                                */
  /*    This function might be called to perform a seek or skip operation  */
  /*    with a `count' of 0.                                               */
  /*                                                                       */
d253 13
a265 11
  /*************************************************************************/
  /*                                                                       */
  /* @@functype:                                                            */
  /*    FT_Stream_CloseFunc                                                */
  /*                                                                       */
  /* @@description:                                                         */
  /*    A function used to close a given input stream.                     */
  /*                                                                       */
  /* @@input:                                                               */
  /*   stream :: A handle to the target stream.                            */
  /*                                                                       */
d270 50
a319 39
  /*************************************************************************/
  /*                                                                       */
  /* @@struct:                                                              */
  /*    FT_StreamRec                                                       */
  /*                                                                       */
  /* @@description:                                                         */
  /*   A structure used to describe an input stream.                       */
  /*                                                                       */
  /* @@input:                                                               */
  /*   base       :: For memory-based streams, this is the address of the  */
  /*                 first stream byte in memory.  This field should       */
  /*                 always be set to NULL for disk-based streams.         */
  /*                                                                       */
  /*   size       :: The stream size in bytes.                             */
  /*                                                                       */
  /*   pos        :: The current position within the stream.               */
  /*                                                                       */
  /*   descriptor :: This field is a union that can hold an integer or a   */
  /*                 pointer.  It is used by stream implementations to     */
  /*                 store file descriptors or FILE* pointers.             */
  /*                                                                       */
  /*   pathname   :: This field is completely ignored by FreeType.         */
  /*                 However, it is often useful during debugging to use   */
  /*                 it to store the stream's filename (where available).  */
  /*                                                                       */
  /*   read       :: The stream's input function.                          */
  /*                                                                       */
  /*   close      :: The stream;s close function.                          */
  /*                                                                       */
  /*   memory     :: The memory manager to use to preload frames.  This is */
  /*                 set internally by FreeType and shouldn't be touched   */
  /*                 by stream implementations.                            */
  /*                                                                       */
  /*   cursor     :: This field is set and used internally by FreeType     */
  /*                 when parsing frames.                                  */
  /*                                                                       */
  /*   limit      :: This field is set and used internally by FreeType     */
  /*                 when parsing frames.                                  */
  /*                                                                       */
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2005 by                                     */
d32 1
a32 1
  /*   system_interface                                                    */
d35 1
a35 1
  /*   System Interface                                                    */
d38 1
a38 1
  /*   How FreeType manages memory and i/o.                                */
d41 4
a44 4
  /*   This section contains various definitions related to memory         */
  /*   management and i/o access.  You need to understand this             */
  /*   information if you want to use a custom memory manager or you own   */
  /*   i/o streams.                                                        */
d56 9
a64 10
  /*************************************************************************
   *
   * @@type:
   *   FT_Memory
   *
   * @@description:
   *   A handle to a given memory manager object, defined with an
   *   @@FT_MemoryRec structure.
   *
   */
d68 16
a83 19
  /*************************************************************************
   *
   * @@functype:
   *   FT_Alloc_Func
   *
   * @@description:
   *   A function used to allocate `size' bytes from `memory'.
   *
   * @@input:
   *   memory ::
   *     A handle to the source memory manager.
   *
   *   size ::
   *     The size in bytes to allocate.
   *
   * @@return:
   *   Address of new memory block.  0 in case of failure.
   *
   */
d89 13
a101 16
  /*************************************************************************
   *
   * @@functype:
   *   FT_Free_Func
   *
   * @@description:
   *   A function used to release a given block of memory.
   *
   * @@input:
   *   memory ::
   *     A handle to the source memory manager.
   *
   *   block ::
   *     The address of the target memory block.
   *
   */
d107 23
a129 28
  /*************************************************************************
   *
   * @@functype:
   *   FT_Realloc_Func
   *
   * @@description:
   *   A function used to re-allocate a given block of memory.
   *
   * @@input:
   *   memory ::
   *     A handle to the source memory manager.
   *
   *   cur_size ::
   *     The block's current size in bytes.
   *
   *   new_size ::
   *     The block's requested new size.
   *
   *   block ::
   *     The block's current address.
   *
   * @@return:
   *   New block address.  0 in case of memory shortage.
   *
   * @@note:
   *   In case of error, the old block must still be available.
   *
   */
d137 17
a153 22
  /*************************************************************************
   *
   * @@struct:
   *   FT_MemoryRec
   *
   * @@description:
   *   A structure used to describe a given memory manager to FreeType 2.
   *
   * @@fields:
   *   user ::
   *     A generic typeless pointer for user data.
   *
   *   alloc ::
   *     A pointer type to an allocation function.
   *
   *   free ::
   *     A pointer type to an memory freeing function.
   *
   *   realloc ::
   *     A pointer type to a reallocation function.
   *
   */
d170 8
a177 9
  /*************************************************************************
   *
   * @@type:
   *   FT_Stream
   *
   * @@description:
   *   A handle to an input stream.
   *
   */
d181 9
a189 10
  /*************************************************************************
   *
   * @@struct:
   *   FT_StreamDesc
   *
   * @@description:
   *   A union type used to store either a long or a pointer.  This is used
   *   to store a file descriptor or a `FILE*' in an input stream.
   *
   */
d198 24
a221 29
  /*************************************************************************
   *
   * @@functype:
   *   FT_Stream_IoFunc
   *
   * @@description:
   *   A function used to seek and read data from a given input stream.
   *
   * @@input:
   *   stream ::
   *     A handle to the source stream.
   *
   *   offset ::
   *     The offset of read in stream (always from start).
   *
   *   buffer ::
   *     The address of the read buffer.
   *
   *   count ::
   *     The number of bytes to read from the stream.
   *
   * @@return:
   *   The number of bytes effectively read by the stream.
   *
   * @@note:
   *   This function might be called to perform a seek or skip operation
   *   with a `count' of 0.
   *
   */
d229 11
a239 13
  /*************************************************************************
   *
   * @@functype:
   *   FT_Stream_CloseFunc
   *
   * @@description:
   *   A function used to close a given input stream.
   *
   * @@input:
   *  stream ::
   *     A handle to the target stream.
   *
   */
d244 39
a282 50
  /*************************************************************************
   *
   * @@struct:
   *   FT_StreamRec
   *
   * @@description:
   *   A structure used to describe an input stream.
   *
   * @@input:
   *   base ::
   *     For memory-based streams, this is the address of the first stream
   *     byte in memory.  This field should always be set to NULL for
   *     disk-based streams.
   *
   *   size ::
   *     The stream size in bytes.
   *
   *   pos ::
   *     The current position within the stream.
   *
   *   descriptor ::
   *     This field is a union that can hold an integer or a pointer.  It is
   *     used by stream implementations to store file descriptors or `FILE*'
   *     pointers.
   *
   *   pathname ::
   *     This field is completely ignored by FreeType.  However, it is often
   *     useful during debugging to use it to store the stream's filename
   *     (where available).
   *
   *   read ::
   *     The stream's input function.
   *
   *   close ::
   *     The stream;s close function.
   *
   *   memory ::
   *     The memory manager to use to preload frames.  This is set
   *     internally by FreeType and shouldn't be touched by stream
   *     implementations.
   *
   *   cursor ::
   *     This field is set and used internally by FreeType when parsing
   *     frames.
   *
   *   limit ::
   *     This field is set and used internally by FreeType when parsing
   *     frames.
   *
   */
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2005 by                                     */
d32 1
a32 1
  /*   system_interface                                                    */
d35 1
a35 1
  /*   System Interface                                                    */
d38 1
a38 1
  /*   How FreeType manages memory and i/o.                                */
d41 4
a44 4
  /*   This section contains various definitions related to memory         */
  /*   management and i/o access.  You need to understand this             */
  /*   information if you want to use a custom memory manager or you own   */
  /*   i/o streams.                                                        */
d56 9
a64 10
  /*************************************************************************
   *
   * @@type:
   *   FT_Memory
   *
   * @@description:
   *   A handle to a given memory manager object, defined with an
   *   @@FT_MemoryRec structure.
   *
   */
d68 16
a83 19
  /*************************************************************************
   *
   * @@functype:
   *   FT_Alloc_Func
   *
   * @@description:
   *   A function used to allocate `size' bytes from `memory'.
   *
   * @@input:
   *   memory ::
   *     A handle to the source memory manager.
   *
   *   size ::
   *     The size in bytes to allocate.
   *
   * @@return:
   *   Address of new memory block.  0 in case of failure.
   *
   */
d89 13
a101 16
  /*************************************************************************
   *
   * @@functype:
   *   FT_Free_Func
   *
   * @@description:
   *   A function used to release a given block of memory.
   *
   * @@input:
   *   memory ::
   *     A handle to the source memory manager.
   *
   *   block ::
   *     The address of the target memory block.
   *
   */
d107 23
a129 28
  /*************************************************************************
   *
   * @@functype:
   *   FT_Realloc_Func
   *
   * @@description:
   *   A function used to re-allocate a given block of memory.
   *
   * @@input:
   *   memory ::
   *     A handle to the source memory manager.
   *
   *   cur_size ::
   *     The block's current size in bytes.
   *
   *   new_size ::
   *     The block's requested new size.
   *
   *   block ::
   *     The block's current address.
   *
   * @@return:
   *   New block address.  0 in case of memory shortage.
   *
   * @@note:
   *   In case of error, the old block must still be available.
   *
   */
d137 17
a153 22
  /*************************************************************************
   *
   * @@struct:
   *   FT_MemoryRec
   *
   * @@description:
   *   A structure used to describe a given memory manager to FreeType 2.
   *
   * @@fields:
   *   user ::
   *     A generic typeless pointer for user data.
   *
   *   alloc ::
   *     A pointer type to an allocation function.
   *
   *   free ::
   *     A pointer type to an memory freeing function.
   *
   *   realloc ::
   *     A pointer type to a reallocation function.
   *
   */
d170 8
a177 9
  /*************************************************************************
   *
   * @@type:
   *   FT_Stream
   *
   * @@description:
   *   A handle to an input stream.
   *
   */
d181 9
a189 10
  /*************************************************************************
   *
   * @@struct:
   *   FT_StreamDesc
   *
   * @@description:
   *   A union type used to store either a long or a pointer.  This is used
   *   to store a file descriptor or a `FILE*' in an input stream.
   *
   */
d198 24
a221 29
  /*************************************************************************
   *
   * @@functype:
   *   FT_Stream_IoFunc
   *
   * @@description:
   *   A function used to seek and read data from a given input stream.
   *
   * @@input:
   *   stream ::
   *     A handle to the source stream.
   *
   *   offset ::
   *     The offset of read in stream (always from start).
   *
   *   buffer ::
   *     The address of the read buffer.
   *
   *   count ::
   *     The number of bytes to read from the stream.
   *
   * @@return:
   *   The number of bytes effectively read by the stream.
   *
   * @@note:
   *   This function might be called to perform a seek or skip operation
   *   with a `count' of 0.
   *
   */
d229 11
a239 13
  /*************************************************************************
   *
   * @@functype:
   *   FT_Stream_CloseFunc
   *
   * @@description:
   *   A function used to close a given input stream.
   *
   * @@input:
   *  stream ::
   *     A handle to the target stream.
   *
   */
d244 39
a282 50
  /*************************************************************************
   *
   * @@struct:
   *   FT_StreamRec
   *
   * @@description:
   *   A structure used to describe an input stream.
   *
   * @@input:
   *   base ::
   *     For memory-based streams, this is the address of the first stream
   *     byte in memory.  This field should always be set to NULL for
   *     disk-based streams.
   *
   *   size ::
   *     The stream size in bytes.
   *
   *   pos ::
   *     The current position within the stream.
   *
   *   descriptor ::
   *     This field is a union that can hold an integer or a pointer.  It is
   *     used by stream implementations to store file descriptors or `FILE*'
   *     pointers.
   *
   *   pathname ::
   *     This field is completely ignored by FreeType.  However, it is often
   *     useful during debugging to use it to store the stream's filename
   *     (where available).
   *
   *   read ::
   *     The stream's input function.
   *
   *   close ::
   *     The stream;s close function.
   *
   *   memory ::
   *     The memory manager to use to preload frames.  This is set
   *     internally by FreeType and shouldn't be touched by stream
   *     implementations.
   *
   *   cursor ::
   *     This field is set and used internally by FreeType when parsing
   *     frames.
   *
   *   limit ::
   *     This field is set and used internally by FreeType when parsing
   *     frames.
   *
   */
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d85 1
a85 1
   *   Address of new memory block.  0~in case of failure.
d136 1
a136 1
   *   New block address.  0~in case of memory shortage.
d155 1
a155 1
   *   A structure used to describe a given memory manager to FreeType~2.
d243 1
a243 1
   *   with a `count' of~0.
@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 1996-2016 by                                                 */
d19 2
a20 2
#ifndef FTSYSTEM_H_
#define FTSYSTEM_H_
a194 4
   * @@also:
   *   See @@FT_StreamRec for the publicly accessible fields of a given
   *   stream object.
   *
d243 1
a243 2
   *   with a `count' of~0.  A non-zero return value then indicates an
   *   error.
a286 5
   *     In case of compressed streams where the size is unknown before
   *     actually doing the decompression, the value is set to 0x7FFFFFFF.
   *     (Note that this size value can occur for normal streams also; it is
   *     thus just a hint.)
   *
d304 1
a304 1
   *     The stream's close function.
d337 1
d343 1
a343 1
#endif /* FTSYSTEM_H_ */
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
