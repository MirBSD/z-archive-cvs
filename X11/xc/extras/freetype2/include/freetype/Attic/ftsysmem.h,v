head	1.2;
access;
symbols
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.2
date	2006.06.29.20.24.28;	author tg;	state dead;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.03;	author tg;	state Exp;
branches
	1.1.103.1
	1.1.115.1;
next	;

1.1.103.1
date	2005.03.18.10.43.03;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.34.41;	author tg;	state Exp;
branches;
next	;
commitid	10044A41D276963C97B;


desc
@@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@#ifndef __FT_SYSTEM_MEMORY_H__
#define __FT_SYSTEM_MEMORY_H__

#include <ft2build.h>

FT_BEGIN_HEADER

 /************************************************************************/
 /************************************************************************/
 /*****                                                              *****/
 /*****    NOTE: THE CONTENT OF THIS FILE IS NOT CURRENTLY USED      *****/
 /*****          IN NORMAL BUILDS.  CONSIDER IT EXPERIMENTAL.        *****/
 /*****                                                              *****/
 /************************************************************************/
 /************************************************************************/


 /*@@**********************************************************************
  *
  * @@type: FT_Memory
  *
  * @@description:
  *   opaque handle to a memory manager handle. Note that since FreeType
  *   2.2, the memory manager structure FT_MemoryRec is hidden to client
  *   applications.
  *
  *   however, you can still define custom allocators easily using the
  *   @@ft_memory_new API
  */
  typedef struct FT_MemoryRec_*   FT_Memory;


 /*@@**********************************************************************
  *
  * @@functype: FT_Memory_AllocFunc
  *
  * @@description:
  *   a function used to allocate a block of memory.
  *
  * @@input:
  *   size     :: size of blocks in bytes. Always > 0 !!
  *   mem_data :: memory-manager specific optional argument
  *               (see @@ft_memory_new)
  *
  * @@return:
  *   address of new block. NULL in case of memory exhaustion
  */
  typedef FT_Pointer  (*FT_Memory_AllocFunc)( FT_ULong   size,
                                              FT_Pointer mem_data );


 /*@@**********************************************************************
  *
  * @@functype: FT_Memory_FreeFunc
  *
  * @@description:
  *   a function used to release a block of memory created through
  *   @@FT_Memory_AllocFunc or @@FT_Memory_ReallocFunc
  *
  * @@input:
  *   block    :: address of target memory block. cannot be NULL !!
  *   mem_data :: memory-manager specific optional argument
  *               (see @@ft_memory_new)
  */
  typedef void        (*FT_Memory_FreeFunc) ( FT_Pointer  block,
                                              FT_Pointer  mem_data );


 /*@@**********************************************************************
  *
  * @@functype: FT_Memory_ReallocFunc
  *
  * @@description:
  *   a function used to reallocate a memory block.
  *
  * @@input:
  *   block    :: address of target memory block. cannot be NULL !!
  *   new_size :: new requested size in bytes
  *   cur_size :: current block size in bytes
  *   mem_data :: memory-manager specific optional argument
  *               (see @@ft_memory_new)
  */
  typedef FT_Pointer  (*FT_Memory_ReallocFunc)( FT_Pointer   block,
                                                FT_ULong     new_size,
                                                FT_ULong     cur_size,
                                                FT_Pointer   mem_data );


 /*@@**********************************************************************
  *
  * @@functype: FT_Memory_CreateFunc
  *
  * @@description:
  *   a function used to create a @@FT_Memory object to model a
  *   memory manager
  *
  * @@input:
  *   size      :: size of memory manager structure in bytes
  *   init_data :: optional initialisation argument
  *
  * @@output:
  *   amem_data :: memory-manager specific argument to block management
  *                routines.
  *
  * @@return:
  *   handle to new memory manager object. NULL in case of failure
  */
  typedef FT_Pointer  (*FT_Memory_CreateFunc)( FT_UInt     size,
                                               FT_Pointer  init_data,
                                               FT_Pointer *amem_data );


 /*@@**********************************************************************
  *
  * @@functype: FT_Memory_DestroyFunc
  *
  * @@description:
  *   a function used to destroy a given @@FT_Memory manager
  *
  * @@input:
  *   memory   :: target memory manager handle
  *   mem_data :: option manager-specific argument
  */
  typedef void        (*FT_Memory_DestroyFunc)( FT_Memory  memory,
                                                FT_Pointer mem_data );


 /*@@**********************************************************************
  *
  * @@struct: FT_Memory_FuncsRec
  *
  * @@description:
  *   a function used to hold all methods of a given memory manager
  *   implementation.
  *
  * @@fields:
  *   mem_alloc   :: block allocation routine
  *   mem_free    :: block release routine
  *   mem_realloc :: block re-allocation routine
  *   mem_create  :: manager creation routine
  *   mem_destroy :: manager destruction routine
  */
  typedef struct FT_Memory_FuncsRec_
  {
    FT_Memory_AllocFunc     mem_alloc;
    FT_Memory_FreeFunc      mem_free;
    FT_Memory_ReallocFunc   mem_realloc;
    FT_Memory_CreateFunc    mem_create;
    FT_Memory_DestroyFunc   mem_destroy;

  } FT_Memory_FuncsRec, *FT_Memory_Funcs;


 /*@@**********************************************************************
  *
  * @@type: FT_Memory_Funcs
  *
  * @@description:
  *   a pointer to a constant @@FT_Memory_FuncsRec structure used to
  *   describe a given memory manager implementation.
  */
  typedef const FT_Memory_FuncsRec*  FT_Memory_Funcs;


 /*@@**********************************************************************
  *
  * @@function: ft_memory_new
  *
  * @@description:
  *   create a new memory manager, given a set of memory methods
  *
  * @@input:
  *   mem_funcs     :: handle to memory manager implementation descriptor
  *   mem_init_data :: optional initialisation argument, passed to
  *                    @@FT_Memory_CreateFunc
  *
  * @@return:
  *   new memory manager handle. NULL in case of failure
  */
  FT_BASE( FT_Memory )
  ft_memory_new( FT_Memory_Funcs  mem_funcs,
                 FT_Pointer       mem_init_data );


 /*@@**********************************************************************
  *
  * @@function: ft_memory_destroy
  *
  * @@description:
  *   destroy a given memory manager
  *
  * @@input:
  *   memory :: handle to target memory manager
  */
  FT_BASE( void )
  ft_memory_destroy( FT_Memory  memory );

/* */

FT_END_HEADER

#endif /* __FT_SYSTEM_MEMORY_H__ */
@


1.1
log
@Initial revision
@
text
@@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
