head	1.1;
branch	1.1.115;
access;
symbols
	freetype-2_7_1:1.1.115.2
	freetype-2_3_12:1.1.115.1
	freetype:1.1.115;
locks; strict;
comment	@ * @;


1.1
date	2013.08.06.19.12.23;	author tg;	state Exp;
branches
	1.1.115.1;
next	;
commitid	10052014A9975CEFD1D;

1.1.115.1
date	2013.08.06.19.12.23;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10052014A9975CEFD1D;

1.1.115.2
date	2017.04.15.15.42.11;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.1
log
@Initial revision
@
text
@/***************************************************************************/
/*                                                                         */
/*  rastpic.c                                                              */
/*                                                                         */
/*    The FreeType position independent code services for raster module.   */
/*                                                                         */
/*  Copyright 2009 by                                                      */
/*  Oran Agra and Mickey Gabel.                                            */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_INTERNAL_OBJECTS_H
#include "rastpic.h"

#ifdef FT_CONFIG_OPTION_PIC

  /* forward declaration of PIC init functions from ftraster.c */
  void FT_Init_Class_ft_standard_raster(FT_Raster_Funcs*);

  void
  ft_raster1_renderer_class_pic_free(  FT_Library library )
  {
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Memory memory = library->memory;
    if ( pic_container->raster )
    {
      RasterPIC* container = (RasterPIC*)pic_container->raster;
      if(--container->ref_count)
        return;
      FT_FREE( container );
      pic_container->raster = NULL;
    }
  }


  FT_Error
  ft_raster1_renderer_class_pic_init(  FT_Library library )
  {
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Error        error = FT_Err_Ok;
    RasterPIC* container;
    FT_Memory memory = library->memory;

    /* since this function also serve raster5 renderer, 
       it implements reference counting */
    if(pic_container->raster)
    {
      ((RasterPIC*)pic_container->raster)->ref_count++;
      return error;
    }

    /* allocate pointer, clear and set global container pointer */
    if ( FT_ALLOC ( container, sizeof ( *container ) ) )
      return error;
    FT_MEM_SET( container, 0, sizeof(*container) );
    pic_container->raster = container;
    container->ref_count = 1;

    /* initialize pointer table - this is how the module usually expects this data */
    FT_Init_Class_ft_standard_raster(&container->ft_standard_raster);
/*Exit:*/
    if(error)
      ft_raster1_renderer_class_pic_free(library);
    return error;
  }

  /* re-route these init and free functions to the above functions */
  FT_Error ft_raster5_renderer_class_pic_init(FT_Library library)
  {
    return ft_raster1_renderer_class_pic_init(library);
  }
  void ft_raster5_renderer_class_pic_free(FT_Library library)
  {
    ft_raster1_renderer_class_pic_free(library);
  }

#endif /* FT_CONFIG_OPTION_PIC */


/* END */
@


1.1.115.1
log
@we need newer freetype for advance calculation
@
text
@@


1.1.115.2
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 2009-2016 by                                                 */
a22 2
#include "rasterrs.h"

d27 1
a27 3
  void
  FT_Init_Class_ft_standard_raster( FT_Raster_Funcs*  funcs );

d30 1
a30 1
  ft_raster1_renderer_class_pic_free( FT_Library  library )
d32 2
a33 4
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Memory          memory        = library->memory;


d36 2
a37 4
      RasterPIC*  container = (RasterPIC*)pic_container->raster;


      if ( --container->ref_count )
d46 1
a46 1
  ft_raster1_renderer_class_pic_init( FT_Library  library )
d48 8
a55 10
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Error           error         = FT_Err_Ok;
    RasterPIC*         container     = NULL;
    FT_Memory          memory        = library->memory;


    /* XXX: since this function also served the no longer available  */
    /*      raster5 renderer it uses reference counting, which could */
    /*      be removed now                                           */
    if ( pic_container->raster )
d62 1
a62 1
    if ( FT_ALLOC( container, sizeof ( *container ) ) )
d64 1
a64 1
    FT_MEM_SET( container, 0, sizeof ( *container ) );
a65 1

d68 7
a74 3
    /* initialize pointer table -                       */
    /* this is how the module usually expects this data */
    FT_Init_Class_ft_standard_raster( &container->ft_standard_raster );
d76 8
a83 1
    return error;
@

