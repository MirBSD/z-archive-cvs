head	1.4;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.1
	MIRBSD_10_BASE:1.2
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.4
date	2017.04.15.19.21.39;	author tg;	state Exp;
branches;
next	1.3;
commitid	10058F2723111C7BEE2;

1.3
date	2013.08.06.19.47.55;	author tg;	state Exp;
branches;
next	1.2;
commitid	100520152445E05B912;

1.2
date	2006.06.29.20.24.50;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.11;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.53.11;	author bsiegert;	state Exp;
branches;
next	;
commitid	10047C46DB5081DCD79;

1.1.103.1
date	2005.03.18.10.43.11;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.35.18;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.36.47;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.27;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.42.12;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.4
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  cidobjs.c                                                              */
/*                                                                         */
/*    CID objects manager (body).                                          */
/*                                                                         */
/*  Copyright 1996-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include <ft2build.h>
#include FT_INTERNAL_DEBUG_H
#include FT_INTERNAL_STREAM_H

#include "cidgload.h"
#include "cidload.h"

#include FT_SERVICE_POSTSCRIPT_CMAPS_H
#include FT_INTERNAL_POSTSCRIPT_AUX_H
#include FT_INTERNAL_POSTSCRIPT_HINTS_H

#include "ciderrs.h"


  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_cidobjs


  /*************************************************************************/
  /*                                                                       */
  /*                            SLOT  FUNCTIONS                            */
  /*                                                                       */
  /*************************************************************************/

  FT_LOCAL_DEF( void )
  cid_slot_done( FT_GlyphSlot  slot )
  {
    slot->internal->glyph_hints = NULL;
  }


  FT_LOCAL_DEF( FT_Error )
  cid_slot_init( FT_GlyphSlot  slot )
  {
    CID_Face          face;
    PSHinter_Service  pshinter;


    face     = (CID_Face)slot->face;
    pshinter = (PSHinter_Service)face->pshinter;

    if ( pshinter )
    {
      FT_Module  module;


      module = FT_Get_Module( slot->face->driver->root.library,
                              "pshinter" );
      if ( module )
      {
        T1_Hints_Funcs  funcs;


        funcs = pshinter->get_t1_funcs( module );
        slot->internal->glyph_hints = (void*)funcs;
      }
    }

    return 0;
  }


  /*************************************************************************/
  /*                                                                       */
  /*                           SIZE  FUNCTIONS                             */
  /*                                                                       */
  /*************************************************************************/


  static PSH_Globals_Funcs
  cid_size_get_globals_funcs( CID_Size  size )
  {
    CID_Face          face     = (CID_Face)size->root.face;
    PSHinter_Service  pshinter = (PSHinter_Service)face->pshinter;
    FT_Module         module;


    module = FT_Get_Module( size->root.face->driver->root.library,
                            "pshinter" );
    return ( module && pshinter && pshinter->get_globals_funcs )
           ? pshinter->get_globals_funcs( module )
           : 0;
  }


  FT_LOCAL_DEF( void )
  cid_size_done( FT_Size  cidsize )         /* CID_Size */
  {
    CID_Size  size = (CID_Size)cidsize;


    if ( cidsize->internal )
    {
      PSH_Globals_Funcs  funcs;


      funcs = cid_size_get_globals_funcs( size );
      if ( funcs )
        funcs->destroy( (PSH_Globals)cidsize->internal );

      cidsize->internal = NULL;
    }
  }


  FT_LOCAL_DEF( FT_Error )
  cid_size_init( FT_Size  cidsize )     /* CID_Size */
  {
    CID_Size           size  = (CID_Size)cidsize;
    FT_Error           error = FT_Err_Ok;
    PSH_Globals_Funcs  funcs = cid_size_get_globals_funcs( size );


    if ( funcs )
    {
      PSH_Globals   globals;
      CID_Face      face = (CID_Face)cidsize->face;
      CID_FaceDict  dict = face->cid.font_dicts + face->root.face_index;
      PS_Private    priv = &dict->private_dict;


      error = funcs->create( cidsize->face->memory, priv, &globals );
      if ( !error )
        cidsize->internal = (FT_Size_Internal)(void*)globals;
    }

    return error;
  }


  FT_LOCAL( FT_Error )
  cid_size_request( FT_Size          size,
                    FT_Size_Request  req )
  {
    PSH_Globals_Funcs  funcs;


    FT_Request_Metrics( size->face, req );

    funcs = cid_size_get_globals_funcs( (CID_Size)size );

    if ( funcs )
      funcs->set_scale( (PSH_Globals)size->internal,
                        size->metrics.x_scale,
                        size->metrics.y_scale,
                        0, 0 );

    return FT_Err_Ok;
  }


  /*************************************************************************/
  /*                                                                       */
  /*                           FACE  FUNCTIONS                             */
  /*                                                                       */
  /*************************************************************************/

  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    cid_face_done                                                      */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Finalizes a given face object.                                     */
  /*                                                                       */
  /* <Input>                                                               */
  /*    face :: A pointer to the face object to destroy.                   */
  /*                                                                       */
  FT_LOCAL_DEF( void )
  cid_face_done( FT_Face  cidface )         /* CID_Face */
  {
    CID_Face      face = (CID_Face)cidface;
    FT_Memory     memory;
    CID_FaceInfo  cid;
    PS_FontInfo   info;


    if ( !face )
      return;

    cid    = &face->cid;
    info   = &cid->font_info;
    memory = cidface->memory;

    /* release subrs */
    if ( face->subrs )
    {
      FT_Int  n;


      for ( n = 0; n < cid->num_dicts; n++ )
      {
        CID_Subrs  subr = face->subrs + n;


        if ( subr->code )
        {
          FT_FREE( subr->code[0] );
          FT_FREE( subr->code );
        }
      }

      FT_FREE( face->subrs );
    }

    /* release FontInfo strings */
    FT_FREE( info->version );
    FT_FREE( info->notice );
    FT_FREE( info->full_name );
    FT_FREE( info->family_name );
    FT_FREE( info->weight );

    /* release font dictionaries */
    FT_FREE( cid->font_dicts );
    cid->num_dicts = 0;

    /* release other strings */
    FT_FREE( cid->cid_font_name );
    FT_FREE( cid->registry );
    FT_FREE( cid->ordering );

    cidface->family_name = NULL;
    cidface->style_name  = NULL;

    FT_FREE( face->binary_data );
    FT_FREE( face->cid_stream );
  }


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    cid_face_init                                                      */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Initializes a given CID face object.                               */
  /*                                                                       */
  /* <Input>                                                               */
  /*    stream     :: The source font stream.                              */
  /*                                                                       */
  /*    face_index :: The index of the font face in the resource.          */
  /*                                                                       */
  /*    num_params :: Number of additional generic parameters.  Ignored.   */
  /*                                                                       */
  /*    params     :: Additional generic parameters.  Ignored.             */
  /*                                                                       */
  /* <InOut>                                                               */
  /*    face       :: The newly built face object.                         */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  FT_LOCAL_DEF( FT_Error )
  cid_face_init( FT_Stream      stream,
                 FT_Face        cidface,        /* CID_Face */
                 FT_Int         face_index,
                 FT_Int         num_params,
                 FT_Parameter*  params )
  {
    CID_Face          face = (CID_Face)cidface;
    FT_Error          error;
    PSAux_Service     psaux;
    PSHinter_Service  pshinter;

    FT_UNUSED( num_params );
    FT_UNUSED( params );
    FT_UNUSED( stream );


    cidface->num_faces = 1;

    psaux = (PSAux_Service)face->psaux;
    if ( !psaux )
    {
      psaux = (PSAux_Service)FT_Get_Module_Interface(
                FT_FACE_LIBRARY( face ), "psaux" );

      if ( !psaux )
      {
        FT_ERROR(( "cid_face_init: cannot access `psaux' module\n" ));
        error = FT_THROW( Missing_Module );
        goto Exit;
      }

      face->psaux = psaux;
    }

    pshinter = (PSHinter_Service)face->pshinter;
    if ( !pshinter )
    {
      pshinter = (PSHinter_Service)FT_Get_Module_Interface(
                   FT_FACE_LIBRARY( face ), "pshinter" );

      face->pshinter = pshinter;
    }

    FT_TRACE2(( "CID driver\n" ));

    /* open the tokenizer; this will also check the font format */
    if ( FT_STREAM_SEEK( 0 ) )
      goto Exit;

    error = cid_face_open( face, face_index );
    if ( error )
      goto Exit;

    /* if we just wanted to check the format, leave successfully now */
    if ( face_index < 0 )
      goto Exit;

    /* check the face index */
    /* XXX: handle CID fonts with more than a single face */
    if ( ( face_index & 0xFFFF ) != 0 )
    {
      FT_ERROR(( "cid_face_init: invalid face index\n" ));
      error = FT_THROW( Invalid_Argument );
      goto Exit;
    }

    /* now load the font program into the face object */

    /* initialize the face object fields */

    /* set up root face fields */
    {
      CID_FaceInfo  cid  = &face->cid;
      PS_FontInfo   info = &cid->font_info;


      cidface->num_glyphs   = (FT_Long)cid->cid_count;
      cidface->num_charmaps = 0;

      cidface->face_index = face_index & 0xFFFF;

      cidface->face_flags |= FT_FACE_FLAG_SCALABLE   | /* scalable outlines */
                             FT_FACE_FLAG_HORIZONTAL | /* horizontal data   */
                             FT_FACE_FLAG_HINTER;      /* has native hinter */

      if ( info->is_fixed_pitch )
        cidface->face_flags |= FT_FACE_FLAG_FIXED_WIDTH;

      /* XXX: TODO: add kerning with .afm support */

      /* get style name -- be careful, some broken fonts only */
      /* have a /FontName dictionary entry!                   */
      cidface->family_name = info->family_name;
      /* assume "Regular" style if we don't know better */
      cidface->style_name = (char *)"Regular";
      if ( cidface->family_name )
      {
        char*  full   = info->full_name;
        char*  family = cidface->family_name;


        if ( full )
        {
          while ( *full )
          {
            if ( *full == *family )
            {
              family++;
              full++;
            }
            else
            {
              if ( *full == ' ' || *full == '-' )
                full++;
              else if ( *family == ' ' || *family == '-' )
                family++;
              else
              {
                if ( !*family )
                  cidface->style_name = full;
                break;
              }
            }
          }
        }
      }
      else
      {
        /* do we have a `/FontName'? */
        if ( cid->cid_font_name )
          cidface->family_name = cid->cid_font_name;
      }

      /* compute style flags */
      cidface->style_flags = 0;
      if ( info->italic_angle )
        cidface->style_flags |= FT_STYLE_FLAG_ITALIC;
      if ( info->weight )
      {
        if ( !ft_strcmp( info->weight, "Bold"  ) ||
             !ft_strcmp( info->weight, "Black" ) )
          cidface->style_flags |= FT_STYLE_FLAG_BOLD;
      }

      /* no embedded bitmap support */
      cidface->num_fixed_sizes = 0;
      cidface->available_sizes = NULL;

      cidface->bbox.xMin =   cid->font_bbox.xMin            >> 16;
      cidface->bbox.yMin =   cid->font_bbox.yMin            >> 16;
      /* no `U' suffix here to 0xFFFF! */
      cidface->bbox.xMax = ( cid->font_bbox.xMax + 0xFFFF ) >> 16;
      cidface->bbox.yMax = ( cid->font_bbox.yMax + 0xFFFF ) >> 16;

      if ( !cidface->units_per_EM )
        cidface->units_per_EM = 1000;

      cidface->ascender  = (FT_Short)( cidface->bbox.yMax );
      cidface->descender = (FT_Short)( cidface->bbox.yMin );

      cidface->height = (FT_Short)( ( cidface->units_per_EM * 12 ) / 10 );
      if ( cidface->height < cidface->ascender - cidface->descender )
        cidface->height = (FT_Short)( cidface->ascender - cidface->descender );

      cidface->underline_position  = (FT_Short)info->underline_position;
      cidface->underline_thickness = (FT_Short)info->underline_thickness;
    }

  Exit:
    return error;
  }


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    cid_driver_init                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Initializes a given CID driver object.                             */
  /*                                                                       */
  /* <Input>                                                               */
  /*    driver :: A handle to the target driver object.                    */
  /*                                                                       */
  /* <Return>                                                              */
  /*    FreeType error code.  0 means success.                             */
  /*                                                                       */
  FT_LOCAL_DEF( FT_Error )
  cid_driver_init( FT_Module  driver )
  {
    FT_UNUSED( driver );

    return FT_Err_Ok;
  }


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    cid_driver_done                                                    */
  /*                                                                       */
  /* <Description>                                                         */
  /*    Finalizes a given CID driver.                                      */
  /*                                                                       */
  /* <Input>                                                               */
  /*    driver :: A handle to the target CID driver.                       */
  /*                                                                       */
  FT_LOCAL_DEF( void )
  cid_driver_done( FT_Module  driver )
  {
    FT_UNUSED( driver );
  }


/* END */
@


1.3
log
@fastmerge
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2008 by             */
d52 1
a52 1
    slot->internal->glyph_hints = 0;
d125 1
a125 1
      cidsize->internal = 0;
d134 1
a134 1
    FT_Error           error = 0;
d172 1
a172 1
    return CID_Err_Ok;
d246 2
a247 2
    cidface->family_name = 0;
    cidface->style_name  = 0;
d302 7
d321 2
d337 1
a337 1
    if ( face_index != 0 )
d340 1
a340 1
      error = CID_Err_Invalid_Argument;
d354 1
a354 1
      cidface->num_glyphs   = cid->cid_count;
d357 5
a361 4
      cidface->face_index = face_index;
      cidface->face_flags = FT_FACE_FLAG_SCALABLE   | /* scalable outlines */
                            FT_FACE_FLAG_HORIZONTAL | /* horizontal data   */
                            FT_FACE_FLAG_HINTER;      /* has native hinter */
d424 1
a424 1
      cidface->available_sizes = 0;
d470 1
a470 1
    return CID_Err_Ok;
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006 by                   */
d196 4
a199 2
    CID_Face   face = (CID_Face)cidface;
    FT_Memory  memory;
d202 9
a210 1
    if ( face )
d212 1
a212 2
      CID_FaceInfo  cid  = &face->cid;
      PS_FontInfo   info = &cid->font_info;
d215 1
a215 4
      memory = cidface->memory;

      /* release subrs */
      if ( face->subrs )
d217 1
a217 1
        FT_Int  n;
d220 1
a220 1
        for ( n = 0; n < cid->num_dicts; n++ )
d222 2
a223 8
          CID_Subrs  subr = face->subrs + n;


          if ( subr->code )
          {
            FT_FREE( subr->code[0] );
            FT_FREE( subr->code );
          }
d225 1
d227 2
a228 2
        FT_FREE( face->subrs );
      }
d230 15
a244 15
      /* release FontInfo strings */
      FT_FREE( info->version );
      FT_FREE( info->notice );
      FT_FREE( info->full_name );
      FT_FREE( info->family_name );
      FT_FREE( info->weight );

      /* release font dictionaries */
      FT_FREE( cid->font_dicts );
      cid->num_dicts = 0;

      /* release other strings */
      FT_FREE( cid->cid_font_name );
      FT_FREE( cid->registry );
      FT_FREE( cid->ordering );
d246 2
a247 2
      cidface->family_name = 0;
      cidface->style_name  = 0;
d249 2
a250 3
      FT_FREE( face->binary_data );
      FT_FREE( face->cid_stream );
    }
d327 1
d416 5
a420 4
      cidface->bbox.xMin =   cid->font_bbox.xMin             >> 16;
      cidface->bbox.yMin =   cid->font_bbox.yMin             >> 16;
      cidface->bbox.xMax = ( cid->font_bbox.xMax + 0xFFFFU ) >> 16;
      cidface->bbox.yMax = ( cid->font_bbox.yMax + 0xFFFFU ) >> 16;
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004 by                               */
d50 1
a50 1
  cid_slot_done( CID_GlyphSlot  slot )
d52 1
a52 1
    slot->root.internal->glyph_hints = 0;
d57 1
a57 1
  cid_slot_init( CID_GlyphSlot  slot )
d63 1
a63 1
    face     = (CID_Face)slot->root.face;
d71 1
a71 1
      module = FT_Get_Module( slot->root.face->driver->root.library,
d79 1
a79 1
        slot->root.internal->glyph_hints = (void*)funcs;
d111 1
a111 1
  cid_size_done( CID_Size  size )
d113 4
a116 1
    if ( size->root.internal )
d123 1
a123 1
        funcs->destroy( (PSH_Globals)size->root.internal );
d125 1
a125 1
      size->root.internal = 0;
d131 1
a131 1
  cid_size_init( CID_Size  size )
d133 1
d141 1
a141 1
      CID_Face      face = (CID_Face)size->root.face;
d146 1
a146 1
      error = funcs->create( size->root.face->memory, priv, &globals );
d148 1
a148 1
        size->root.internal = (FT_Size_Internal)(void*)globals;
d155 3
a157 2
  FT_LOCAL_DEF( FT_Error )
  cid_size_reset( CID_Size  size )
d159 4
a162 2
    PSH_Globals_Funcs  funcs = cid_size_get_globals_funcs( size );
    FT_Error           error = 0;
d164 1
d167 6
a172 5
      error = funcs->set_scale( (PSH_Globals)size->root.internal,
                                 size->root.metrics.x_scale,
                                 size->root.metrics.y_scale,
                                 0, 0 );
    return error;
d194 1
a194 1
  cid_face_done( CID_Face  face )
d196 1
d206 1
a206 1
      memory = face->root.memory;
d245 2
a246 2
      face->root.family_name = 0;
      face->root.style_name  = 0;
d279 1
a279 1
                 CID_Face       face,
d284 4
a287 4
    FT_Error            error;
    FT_Service_PsCMaps  psnames;
    PSAux_Service       psaux;
    PSHinter_Service    pshinter;
d294 1
a294 3
    face->root.num_faces = 1;

    FT_FACE_FIND_GLOBAL_SERVICE( face, psnames, POSTSCRIPT_CMAPS );
a339 1
      FT_Face       root = (FT_Face)&face->root;
d344 2
a345 5
      root->num_glyphs   = cid->cid_count;
      root->num_charmaps = 0;

      root->face_index = face_index;
      root->face_flags = FT_FACE_FLAG_SCALABLE;
d347 4
a350 1
      root->face_flags |= FT_FACE_FLAG_HORIZONTAL;
d353 1
a353 1
        root->face_flags |= FT_FACE_FLAG_FIXED_WIDTH;
d359 1
a359 1
      root->family_name = info->family_name;
d361 2
a362 2
      root->style_name = (char *)"Regular";
      if ( root->family_name )
d365 1
a365 1
        char*  family = root->family_name;
d386 1
a386 1
                  root->style_name = full;
d397 1
a397 1
          root->family_name = cid->cid_font_name;
d401 1
a401 1
      root->style_flags = 0;
d403 1
a403 1
        root->style_flags |= FT_STYLE_FLAG_ITALIC;
d408 1
a408 1
          root->style_flags |= FT_STYLE_FLAG_BOLD;
d412 2
a413 15
      root->num_fixed_sizes = 0;
      root->available_sizes = 0;

      root->bbox.xMin =   cid->font_bbox.xMin             >> 16;
      root->bbox.yMin =   cid->font_bbox.yMin             >> 16;
      root->bbox.xMax = ( cid->font_bbox.xMax + 0xFFFFU ) >> 16;
      root->bbox.yMax = ( cid->font_bbox.yMax + 0xFFFFU ) >> 16;

      if ( !root->units_per_EM )
        root->units_per_EM = 1000;

      root->ascender  = (FT_Short)( root->bbox.yMax );
      root->descender = (FT_Short)( root->bbox.yMin );
      root->height    = (FT_Short)(
        ( ( root->ascender - root->descender ) * 12 ) / 10 );
d415 14
a428 2
      root->underline_position  = (FT_Short)info->underline_position;
      root->underline_thickness = (FT_Short)info->underline_thickness;
d430 2
a431 2
      root->internal->max_points   = 0;
      root->internal->max_contours = 0;
d454 1
a454 1
  cid_driver_init( CID_Driver  driver )
d474 1
a474 1
  cid_driver_done( CID_Driver  driver )
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006 by                   */
d50 1
a50 1
  cid_slot_done( FT_GlyphSlot  slot )
d52 1
a52 1
    slot->internal->glyph_hints = 0;
d57 1
a57 1
  cid_slot_init( FT_GlyphSlot  slot )
d63 1
a63 1
    face     = (CID_Face)slot->face;
d71 1
a71 1
      module = FT_Get_Module( slot->face->driver->root.library,
d79 1
a79 1
        slot->internal->glyph_hints = (void*)funcs;
d111 1
a111 1
  cid_size_done( FT_Size  cidsize )         /* CID_Size */
d113 1
a113 4
    CID_Size  size = (CID_Size)cidsize;


    if ( cidsize->internal )
d120 1
a120 1
        funcs->destroy( (PSH_Globals)cidsize->internal );
d122 1
a122 1
      cidsize->internal = 0;
d128 1
a128 1
  cid_size_init( FT_Size  cidsize )     /* CID_Size */
a129 1
    CID_Size           size  = (CID_Size)cidsize;
d137 1
a137 1
      CID_Face      face = (CID_Face)cidsize->face;
d142 1
a142 1
      error = funcs->create( cidsize->face->memory, priv, &globals );
d144 1
a144 1
        cidsize->internal = (FT_Size_Internal)(void*)globals;
d151 2
a152 3
  FT_LOCAL( FT_Error )
  cid_size_request( FT_Size          size,
                    FT_Size_Request  req )
d154 2
a155 4
    PSH_Globals_Funcs  funcs;


    FT_Request_Metrics( size->face, req );
a156 1
    funcs = cid_size_get_globals_funcs( (CID_Size)size );
d159 5
a163 6
      funcs->set_scale( (PSH_Globals)size->internal,
                        size->metrics.x_scale,
                        size->metrics.y_scale,
                        0, 0 );

    return CID_Err_Ok;
d185 1
a185 1
  cid_face_done( FT_Face  cidface )         /* CID_Face */
a186 1
    CID_Face   face = (CID_Face)cidface;
d196 1
a196 1
      memory = cidface->memory;
d235 2
a236 2
      cidface->family_name = 0;
      cidface->style_name  = 0;
d269 1
a269 1
                 FT_Face        cidface,        /* CID_Face */
d274 4
a277 4
    CID_Face          face = (CID_Face)cidface;
    FT_Error          error;
    PSAux_Service     psaux;
    PSHinter_Service  pshinter;
d284 3
a286 1
    cidface->num_faces = 1;
d332 1
d337 5
a341 2
      cidface->num_glyphs   = cid->cid_count;
      cidface->num_charmaps = 0;
d343 1
a343 4
      cidface->face_index = face_index;
      cidface->face_flags = FT_FACE_FLAG_SCALABLE   | /* scalable outlines */
                            FT_FACE_FLAG_HORIZONTAL | /* horizontal data   */
                            FT_FACE_FLAG_HINTER;      /* has native hinter */
d346 1
a346 1
        cidface->face_flags |= FT_FACE_FLAG_FIXED_WIDTH;
d352 1
a352 1
      cidface->family_name = info->family_name;
d354 2
a355 2
      cidface->style_name = (char *)"Regular";
      if ( cidface->family_name )
d358 1
a358 1
        char*  family = cidface->family_name;
d379 1
a379 1
                  cidface->style_name = full;
d390 1
a390 1
          cidface->family_name = cid->cid_font_name;
d394 1
a394 1
      cidface->style_flags = 0;
d396 1
a396 1
        cidface->style_flags |= FT_STYLE_FLAG_ITALIC;
d401 1
a401 1
          cidface->style_flags |= FT_STYLE_FLAG_BOLD;
d405 15
a419 2
      cidface->num_fixed_sizes = 0;
      cidface->available_sizes = 0;
d421 2
a422 14
      cidface->bbox.xMin =   cid->font_bbox.xMin             >> 16;
      cidface->bbox.yMin =   cid->font_bbox.yMin             >> 16;
      cidface->bbox.xMax = ( cid->font_bbox.xMax + 0xFFFFU ) >> 16;
      cidface->bbox.yMax = ( cid->font_bbox.yMax + 0xFFFFU ) >> 16;

      if ( !cidface->units_per_EM )
        cidface->units_per_EM = 1000;

      cidface->ascender  = (FT_Short)( cidface->bbox.yMax );
      cidface->descender = (FT_Short)( cidface->bbox.yMin );

      cidface->height = (FT_Short)( ( cidface->units_per_EM * 12 ) / 10 );
      if ( cidface->height < cidface->ascender - cidface->descender )
        cidface->height = (FT_Short)( cidface->ascender - cidface->descender );
d424 2
a425 2
      cidface->underline_position  = (FT_Short)info->underline_position;
      cidface->underline_thickness = (FT_Short)info->underline_thickness;
d448 1
a448 1
  cid_driver_init( FT_Module  driver )
d468 1
a468 1
  cid_driver_done( FT_Module  driver )
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006 by                   */
d50 1
a50 1
  cid_slot_done( FT_GlyphSlot  slot )
d52 1
a52 1
    slot->internal->glyph_hints = 0;
d57 1
a57 1
  cid_slot_init( FT_GlyphSlot  slot )
d63 1
a63 1
    face     = (CID_Face)slot->face;
d71 1
a71 1
      module = FT_Get_Module( slot->face->driver->root.library,
d79 1
a79 1
        slot->internal->glyph_hints = (void*)funcs;
d111 1
a111 1
  cid_size_done( FT_Size  cidsize )         /* CID_Size */
d113 1
a113 4
    CID_Size  size = (CID_Size)cidsize;


    if ( cidsize->internal )
d120 1
a120 1
        funcs->destroy( (PSH_Globals)cidsize->internal );
d122 1
a122 1
      cidsize->internal = 0;
d128 1
a128 1
  cid_size_init( FT_Size  cidsize )     /* CID_Size */
a129 1
    CID_Size           size  = (CID_Size)cidsize;
d137 1
a137 1
      CID_Face      face = (CID_Face)cidsize->face;
d142 1
a142 1
      error = funcs->create( cidsize->face->memory, priv, &globals );
d144 1
a144 1
        cidsize->internal = (FT_Size_Internal)(void*)globals;
d151 2
a152 3
  FT_LOCAL( FT_Error )
  cid_size_request( FT_Size          size,
                    FT_Size_Request  req )
d154 2
a155 4
    PSH_Globals_Funcs  funcs;


    FT_Request_Metrics( size->face, req );
a156 1
    funcs = cid_size_get_globals_funcs( (CID_Size)size );
d159 5
a163 6
      funcs->set_scale( (PSH_Globals)size->internal,
                        size->metrics.x_scale,
                        size->metrics.y_scale,
                        0, 0 );

    return CID_Err_Ok;
d185 1
a185 1
  cid_face_done( FT_Face  cidface )         /* CID_Face */
a186 1
    CID_Face   face = (CID_Face)cidface;
d196 1
a196 1
      memory = cidface->memory;
d235 2
a236 2
      cidface->family_name = 0;
      cidface->style_name  = 0;
d269 1
a269 1
                 FT_Face        cidface,        /* CID_Face */
d274 4
a277 4
    CID_Face          face = (CID_Face)cidface;
    FT_Error          error;
    PSAux_Service     psaux;
    PSHinter_Service  pshinter;
d284 3
a286 1
    cidface->num_faces = 1;
d332 1
d337 5
a341 2
      cidface->num_glyphs   = cid->cid_count;
      cidface->num_charmaps = 0;
d343 1
a343 4
      cidface->face_index = face_index;
      cidface->face_flags = FT_FACE_FLAG_SCALABLE   | /* scalable outlines */
                            FT_FACE_FLAG_HORIZONTAL | /* horizontal data   */
                            FT_FACE_FLAG_HINTER;      /* has native hinter */
d346 1
a346 1
        cidface->face_flags |= FT_FACE_FLAG_FIXED_WIDTH;
d352 1
a352 1
      cidface->family_name = info->family_name;
d354 2
a355 2
      cidface->style_name = (char *)"Regular";
      if ( cidface->family_name )
d358 1
a358 1
        char*  family = cidface->family_name;
d379 1
a379 1
                  cidface->style_name = full;
d390 1
a390 1
          cidface->family_name = cid->cid_font_name;
d394 1
a394 1
      cidface->style_flags = 0;
d396 1
a396 1
        cidface->style_flags |= FT_STYLE_FLAG_ITALIC;
d401 1
a401 1
          cidface->style_flags |= FT_STYLE_FLAG_BOLD;
d405 15
a419 2
      cidface->num_fixed_sizes = 0;
      cidface->available_sizes = 0;
d421 2
a422 14
      cidface->bbox.xMin =   cid->font_bbox.xMin             >> 16;
      cidface->bbox.yMin =   cid->font_bbox.yMin             >> 16;
      cidface->bbox.xMax = ( cid->font_bbox.xMax + 0xFFFFU ) >> 16;
      cidface->bbox.yMax = ( cid->font_bbox.yMax + 0xFFFFU ) >> 16;

      if ( !cidface->units_per_EM )
        cidface->units_per_EM = 1000;

      cidface->ascender  = (FT_Short)( cidface->bbox.yMax );
      cidface->descender = (FT_Short)( cidface->bbox.yMin );

      cidface->height = (FT_Short)( ( cidface->units_per_EM * 12 ) / 10 );
      if ( cidface->height < cidface->ascender - cidface->descender )
        cidface->height = (FT_Short)( cidface->ascender - cidface->descender );
d424 2
a425 2
      cidface->underline_position  = (FT_Short)info->underline_position;
      cidface->underline_thickness = (FT_Short)info->underline_thickness;
d448 1
a448 1
  cid_driver_init( FT_Module  driver )
d468 1
a468 1
  cid_driver_done( FT_Module  driver )
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2003, 2004, 2005, 2006, 2008 by             */
d196 2
a197 4
    CID_Face      face = (CID_Face)cidface;
    FT_Memory     memory;
    CID_FaceInfo  cid;
    PS_FontInfo   info;
d200 4
a203 2
    if ( !face )
      return;
a204 3
    cid    = &face->cid;
    info   = &cid->font_info;
    memory = cidface->memory;
d206 1
a206 4
    /* release subrs */
    if ( face->subrs )
    {
      FT_Int  n;
d208 2
a209 2

      for ( n = 0; n < cid->num_dicts; n++ )
d211 1
a211 1
        CID_Subrs  subr = face->subrs + n;
d214 1
a214 1
        if ( subr->code )
d216 8
a223 2
          FT_FREE( subr->code[0] );
          FT_FREE( subr->code );
d225 2
d229 15
a243 2
      FT_FREE( face->subrs );
    }
d245 2
a246 15
    /* release FontInfo strings */
    FT_FREE( info->version );
    FT_FREE( info->notice );
    FT_FREE( info->full_name );
    FT_FREE( info->family_name );
    FT_FREE( info->weight );

    /* release font dictionaries */
    FT_FREE( cid->font_dicts );
    cid->num_dicts = 0;

    /* release other strings */
    FT_FREE( cid->cid_font_name );
    FT_FREE( cid->registry );
    FT_FREE( cid->ordering );
d248 3
a250 5
    cidface->family_name = 0;
    cidface->style_name  = 0;

    FT_FREE( face->binary_data );
    FT_FREE( face->cid_stream );
a326 1
    /* XXX: handle CID fonts with more than a single face */
d415 4
a418 5
      cidface->bbox.xMin =   cid->font_bbox.xMin            >> 16;
      cidface->bbox.yMin =   cid->font_bbox.yMin            >> 16;
      /* no `U' suffix here to 0xFFFF! */
      cidface->bbox.xMax = ( cid->font_bbox.xMax + 0xFFFF ) >> 16;
      cidface->bbox.yMax = ( cid->font_bbox.yMax + 0xFFFF ) >> 16;
@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 1996-2016 by                                                 */
d52 1
a52 1
    slot->internal->glyph_hints = NULL;
d125 1
a125 1
      cidsize->internal = NULL;
d134 1
a134 1
    FT_Error           error = FT_Err_Ok;
d172 1
a172 1
    return FT_Err_Ok;
d246 2
a247 2
    cidface->family_name = NULL;
    cidface->style_name  = NULL;
a301 7
      if ( !psaux )
      {
        FT_ERROR(( "cid_face_init: cannot access `psaux' module\n" ));
        error = FT_THROW( Missing_Module );
        goto Exit;
      }

a313 2
    FT_TRACE2(( "CID driver\n" ));

d328 1
a328 1
    if ( ( face_index & 0xFFFF ) != 0 )
d331 1
a331 1
      error = FT_THROW( Invalid_Argument );
d345 1
a345 1
      cidface->num_glyphs   = (FT_Long)cid->cid_count;
d348 4
a351 5
      cidface->face_index = face_index & 0xFFFF;

      cidface->face_flags |= FT_FACE_FLAG_SCALABLE   | /* scalable outlines */
                             FT_FACE_FLAG_HORIZONTAL | /* horizontal data   */
                             FT_FACE_FLAG_HINTER;      /* has native hinter */
d414 1
a414 1
      cidface->available_sizes = NULL;
d460 1
a460 1
    return FT_Err_Ok;
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
