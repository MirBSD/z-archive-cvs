head	1.6;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.3
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.6
date	2017.04.15.19.21.48;	author tg;	state Exp;
branches;
next	1.5;
commitid	10058F2723111C7BEE2;

1.5
date	2013.08.06.19.48.03;	author tg;	state Exp;
branches;
next	1.4;
commitid	100520152445E05B912;

1.4
date	2008.06.12.20.54.41;	author bsiegert;	state Exp;
branches;
next	1.3;
commitid	10048518C1E44F62885;

1.3
date	2008.02.26.20.05.01;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10047C470A72A1E13CE;

1.2
date	2006.06.29.20.24.57;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.13;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.52.50;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.38.05;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.103.1
date	2005.03.18.10.43.13;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.35.28;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.36.51;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.23;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.42.01;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.6
log
@first cut at a quickmerge
@
text
@/*  pcfdrivr.c

    FreeType font driver for pcf files

    Copyright (C) 2000-2004, 2006-2011, 2013, 2014 by
    Francesco Zappa Nardelli

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/


#include <ft2build.h>

#include FT_INTERNAL_DEBUG_H
#include FT_INTERNAL_STREAM_H
#include FT_INTERNAL_OBJECTS_H
#include FT_GZIP_H
#include FT_LZW_H
#include FT_BZIP2_H
#include FT_ERRORS_H
#include FT_BDF_H
#include FT_TRUETYPE_IDS_H

#include "pcf.h"
#include "pcfdrivr.h"
#include "pcfread.h"

#include "pcferror.h"
#include "pcfutil.h"

#undef  FT_COMPONENT
#define FT_COMPONENT  trace_pcfread

#include FT_SERVICE_BDF_H
#include FT_SERVICE_FONT_FORMAT_H


  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_pcfdriver


  typedef struct  PCF_CMapRec_
  {
    FT_CMapRec    root;
    FT_ULong      num_encodings;
    PCF_Encoding  encodings;

  } PCF_CMapRec, *PCF_CMap;


  FT_CALLBACK_DEF( FT_Error )
  pcf_cmap_init( FT_CMap     pcfcmap,   /* PCF_CMap */
                 FT_Pointer  init_data )
  {
    PCF_CMap  cmap = (PCF_CMap)pcfcmap;
    PCF_Face  face = (PCF_Face)FT_CMAP_FACE( pcfcmap );

    FT_UNUSED( init_data );


    cmap->num_encodings = face->nencodings;
    cmap->encodings     = face->encodings;

    return FT_Err_Ok;
  }


  FT_CALLBACK_DEF( void )
  pcf_cmap_done( FT_CMap  pcfcmap )         /* PCF_CMap */
  {
    PCF_CMap  cmap = (PCF_CMap)pcfcmap;


    cmap->encodings     = NULL;
    cmap->num_encodings = 0;
  }


  FT_CALLBACK_DEF( FT_UInt )
  pcf_cmap_char_index( FT_CMap    pcfcmap,  /* PCF_CMap */
                       FT_UInt32  charcode )
  {
    PCF_CMap      cmap      = (PCF_CMap)pcfcmap;
    PCF_Encoding  encodings = cmap->encodings;
    FT_ULong      min, max, mid;
    FT_UInt       result    = 0;


    min = 0;
    max = cmap->num_encodings;

    while ( min < max )
    {
      FT_ULong  code;


      mid  = ( min + max ) >> 1;
      code = (FT_ULong)encodings[mid].enc;

      if ( charcode == code )
      {
        result = encodings[mid].glyph + 1;
        break;
      }

      if ( charcode < code )
        max = mid;
      else
        min = mid + 1;
    }

    return result;
  }


  FT_CALLBACK_DEF( FT_UInt )
  pcf_cmap_char_next( FT_CMap    pcfcmap,   /* PCF_CMap */
                      FT_UInt32  *acharcode )
  {
    PCF_CMap      cmap      = (PCF_CMap)pcfcmap;
    PCF_Encoding  encodings = cmap->encodings;
    FT_ULong      min, max, mid;
    FT_ULong      charcode  = *acharcode + 1;
    FT_UInt       result    = 0;


    min = 0;
    max = cmap->num_encodings;

    while ( min < max )
    {
      FT_ULong  code;


      mid  = ( min + max ) >> 1;
      code = (FT_ULong)encodings[mid].enc;

      if ( charcode == code )
      {
        result = encodings[mid].glyph + 1;
        goto Exit;
      }

      if ( charcode < code )
        max = mid;
      else
        min = mid + 1;
    }

    charcode = 0;
    if ( min < cmap->num_encodings )
    {
      charcode = (FT_ULong)encodings[min].enc;
      result   = encodings[min].glyph + 1;
    }

  Exit:
    if ( charcode > 0xFFFFFFFFUL )
    {
      FT_TRACE1(( "pcf_cmap_char_next: charcode 0x%x > 32bit API" ));
      *acharcode = 0;
      /* XXX: result should be changed to indicate an overflow error */
    }
    else
      *acharcode = (FT_UInt32)charcode;
    return result;
  }


  static
  const FT_CMap_ClassRec  pcf_cmap_class =
  {
    sizeof ( PCF_CMapRec ),
    pcf_cmap_init,
    pcf_cmap_done,
    pcf_cmap_char_index,
    pcf_cmap_char_next,

    NULL, NULL, NULL, NULL, NULL
  };


  FT_CALLBACK_DEF( void )
  PCF_Face_Done( FT_Face  pcfface )         /* PCF_Face */
  {
    PCF_Face   face = (PCF_Face)pcfface;
    FT_Memory  memory;


    if ( !face )
      return;

    memory = FT_FACE_MEMORY( face );

    FT_FREE( face->encodings );
    FT_FREE( face->metrics );

    /* free properties */
    if ( face->properties )
    {
      FT_Int  i;


      for ( i = 0; i < face->nprops; i++ )
      {
        PCF_Property  prop = &face->properties[i];


        if ( prop )
        {
          FT_FREE( prop->name );
          if ( prop->isString )
            FT_FREE( prop->value.atom );
        }
      }

      FT_FREE( face->properties );
    }

    FT_FREE( face->toc.tables );
    FT_FREE( pcfface->family_name );
    FT_FREE( pcfface->style_name );
    FT_FREE( pcfface->available_sizes );
    FT_FREE( face->charset_encoding );
    FT_FREE( face->charset_registry );

    /* close compressed stream if any */
    if ( pcfface->stream == &face->comp_stream )
    {
      FT_Stream_Close( &face->comp_stream );
      pcfface->stream = face->comp_source;
    }
  }


  FT_CALLBACK_DEF( FT_Error )
  PCF_Face_Init( FT_Stream      stream,
                 FT_Face        pcfface,        /* PCF_Face */
                 FT_Int         face_index,
                 FT_Int         num_params,
                 FT_Parameter*  params )
  {
    PCF_Face  face  = (PCF_Face)pcfface;
    FT_Error  error;

    FT_UNUSED( num_params );
    FT_UNUSED( params );


    FT_TRACE2(( "PCF driver\n" ));

    error = pcf_load_font( stream, face, face_index );
    if ( error )
    {
      PCF_Face_Done( pcfface );

#if defined( FT_CONFIG_OPTION_USE_ZLIB )  || \
    defined( FT_CONFIG_OPTION_USE_LZW )   || \
    defined( FT_CONFIG_OPTION_USE_BZIP2 )

#ifdef FT_CONFIG_OPTION_USE_ZLIB
      {
        FT_Error  error2;


        /* this didn't work, try gzip support! */
        error2 = FT_Stream_OpenGzip( &face->comp_stream, stream );
        if ( FT_ERR_EQ( error2, Unimplemented_Feature ) )
          goto Fail;

        error = error2;
      }
#endif /* FT_CONFIG_OPTION_USE_ZLIB */

#ifdef FT_CONFIG_OPTION_USE_LZW
      if ( error )
      {
        FT_Error  error3;


        /* this didn't work, try LZW support! */
        error3 = FT_Stream_OpenLZW( &face->comp_stream, stream );
        if ( FT_ERR_EQ( error3, Unimplemented_Feature ) )
          goto Fail;

        error = error3;
      }
#endif /* FT_CONFIG_OPTION_USE_LZW */

#ifdef FT_CONFIG_OPTION_USE_BZIP2
      if ( error )
      {
        FT_Error  error4;


        /* this didn't work, try Bzip2 support! */
        error4 = FT_Stream_OpenBzip2( &face->comp_stream, stream );
        if ( FT_ERR_EQ( error4, Unimplemented_Feature ) )
          goto Fail;

        error = error4;
      }
#endif /* FT_CONFIG_OPTION_USE_BZIP2 */

      if ( error )
        goto Fail;

      face->comp_source = stream;
      pcfface->stream   = &face->comp_stream;

      stream = pcfface->stream;

      error = pcf_load_font( stream, face, face_index );
      if ( error )
        goto Fail;

#else /* !(FT_CONFIG_OPTION_USE_ZLIB ||
           FT_CONFIG_OPTION_USE_LZW ||
           FT_CONFIG_OPTION_USE_BZIP2) */

      goto Fail;

#endif
    }

    /* PCF cannot have multiple faces in a single font file.
     * XXX: A non-zero face_index is already an invalid argument, but
     *      Type1, Type42 drivers have a convention to return
     *      an invalid argument error when the font could be
     *      opened by the specified driver.
     */
    if ( face_index < 0 )
      goto Exit;
    else if ( face_index > 0 && ( face_index & 0xFFFF ) > 0 )
    {
      FT_ERROR(( "PCF_Face_Init: invalid face index\n" ));
      PCF_Face_Done( pcfface );
      return FT_THROW( Invalid_Argument );
    }

    /* set up charmap */
    {
      FT_String  *charset_registry = face->charset_registry;
      FT_String  *charset_encoding = face->charset_encoding;
      FT_Bool     unicode_charmap  = 0;


      if ( charset_registry && charset_encoding )
      {
        char*  s = charset_registry;


        /* Uh, oh, compare first letters manually to avoid dependency
           on locales. */
        if ( ( s[0] == 'i' || s[0] == 'I' ) &&
             ( s[1] == 's' || s[1] == 'S' ) &&
             ( s[2] == 'o' || s[2] == 'O' ) )
        {
          s += 3;
          if ( !ft_strcmp( s, "10646" )                      ||
               ( !ft_strcmp( s, "8859" ) &&
                 !ft_strcmp( face->charset_encoding, "1" ) ) )
          unicode_charmap = 1;
        }
      }

      {
        FT_CharMapRec  charmap;


        charmap.face        = FT_FACE( face );
        charmap.encoding    = FT_ENCODING_NONE;
        /* initial platform/encoding should indicate unset status? */
        charmap.platform_id = TT_PLATFORM_APPLE_UNICODE;
        charmap.encoding_id = TT_APPLE_ID_DEFAULT;

        if ( unicode_charmap )
        {
          charmap.encoding    = FT_ENCODING_UNICODE;
          charmap.platform_id = TT_PLATFORM_MICROSOFT;
          charmap.encoding_id = TT_MS_ID_UNICODE_CS;
        }

        error = FT_CMap_New( &pcf_cmap_class, NULL, &charmap, NULL );

#if 0
        /* Select default charmap */
        if ( pcfface->num_charmaps )
          pcfface->charmap = pcfface->charmaps[0];
#endif
      }
    }

  Exit:
    return error;

  Fail:
    FT_TRACE2(( "  not a PCF file\n" ));
    PCF_Face_Done( pcfface );
    error = FT_THROW( Unknown_File_Format );  /* error */
    goto Exit;
  }


  FT_CALLBACK_DEF( FT_Error )
  PCF_Size_Select( FT_Size   size,
                   FT_ULong  strike_index )
  {
    PCF_Accel  accel = &( (PCF_Face)size->face )->accel;


    FT_Select_Metrics( size->face, strike_index );

    size->metrics.ascender    =  accel->fontAscent * 64;
    size->metrics.descender   = -accel->fontDescent * 64;
    size->metrics.max_advance =  accel->maxbounds.characterWidth * 64;

    return FT_Err_Ok;
  }


  FT_CALLBACK_DEF( FT_Error )
  PCF_Size_Request( FT_Size          size,
                    FT_Size_Request  req )
  {
    PCF_Face         face  = (PCF_Face)size->face;
    FT_Bitmap_Size*  bsize = size->face->available_sizes;
    FT_Error         error = FT_ERR( Invalid_Pixel_Size );
    FT_Long          height;


    height = FT_REQUEST_HEIGHT( req );
    height = ( height + 32 ) >> 6;

    switch ( req->type )
    {
    case FT_SIZE_REQUEST_TYPE_NOMINAL:
      if ( height == ( ( bsize->y_ppem + 32 ) >> 6 ) )
        error = FT_Err_Ok;
      break;

    case FT_SIZE_REQUEST_TYPE_REAL_DIM:
      if ( height == ( face->accel.fontAscent +
                       face->accel.fontDescent ) )
        error = FT_Err_Ok;
      break;

    default:
      error = FT_THROW( Unimplemented_Feature );
      break;
    }

    if ( error )
      return error;
    else
      return PCF_Size_Select( size, 0 );
  }


  FT_CALLBACK_DEF( FT_Error )
  PCF_Glyph_Load( FT_GlyphSlot  slot,
                  FT_Size       size,
                  FT_UInt       glyph_index,
                  FT_Int32      load_flags )
  {
    PCF_Face    face   = (PCF_Face)FT_SIZE_FACE( size );
    FT_Stream   stream;
    FT_Error    error  = FT_Err_Ok;
    FT_Bitmap*  bitmap = &slot->bitmap;
    PCF_Metric  metric;
    FT_ULong    bytes;


    FT_TRACE1(( "PCF_Glyph_Load: glyph index %d\n", glyph_index ));

    if ( !face )
    {
      error = FT_THROW( Invalid_Face_Handle );
      goto Exit;
    }

    if ( glyph_index >= (FT_UInt)face->root.num_glyphs )
    {
      error = FT_THROW( Invalid_Argument );
      goto Exit;
    }

    stream = face->root.stream;

    if ( glyph_index > 0 )
      glyph_index--;

    metric = face->metrics + glyph_index;

    bitmap->rows       = (unsigned int)( metric->ascent +
                                         metric->descent );
    bitmap->width      = (unsigned int)( metric->rightSideBearing -
                                         metric->leftSideBearing );
    bitmap->num_grays  = 1;
    bitmap->pixel_mode = FT_PIXEL_MODE_MONO;

    FT_TRACE6(( "BIT_ORDER %d ; BYTE_ORDER %d ; GLYPH_PAD %d\n",
                  PCF_BIT_ORDER( face->bitmapsFormat ),
                  PCF_BYTE_ORDER( face->bitmapsFormat ),
                  PCF_GLYPH_PAD( face->bitmapsFormat ) ));

    switch ( PCF_GLYPH_PAD( face->bitmapsFormat ) )
    {
    case 1:
      bitmap->pitch = (int)( ( bitmap->width + 7 ) >> 3 );
      break;

    case 2:
      bitmap->pitch = (int)( ( ( bitmap->width + 15 ) >> 4 ) << 1 );
      break;

    case 4:
      bitmap->pitch = (int)( ( ( bitmap->width + 31 ) >> 5 ) << 2 );
      break;

    case 8:
      bitmap->pitch = (int)( ( ( bitmap->width + 63 ) >> 6 ) << 3 );
      break;

    default:
      return FT_THROW( Invalid_File_Format );
    }

    slot->format      = FT_GLYPH_FORMAT_BITMAP;
    slot->bitmap_left = metric->leftSideBearing;
    slot->bitmap_top  = metric->ascent;

    slot->metrics.horiAdvance  = (FT_Pos)( metric->characterWidth * 64 );
    slot->metrics.horiBearingX = (FT_Pos)( metric->leftSideBearing * 64 );
    slot->metrics.horiBearingY = (FT_Pos)( metric->ascent * 64 );
    slot->metrics.width        = (FT_Pos)( ( metric->rightSideBearing -
                                             metric->leftSideBearing ) * 64 );
    slot->metrics.height       = (FT_Pos)( bitmap->rows * 64 );

    ft_synthesize_vertical_metrics( &slot->metrics,
                                    ( face->accel.fontAscent +
                                      face->accel.fontDescent ) * 64 );

    if ( load_flags & FT_LOAD_BITMAP_METRICS_ONLY )
      goto Exit;

    /* XXX: to do: are there cases that need repadding the bitmap? */
    bytes = (FT_ULong)bitmap->pitch * bitmap->rows;

    error = ft_glyphslot_alloc_bitmap( slot, (FT_ULong)bytes );
    if ( error )
      goto Exit;

    if ( FT_STREAM_SEEK( metric->bits )          ||
         FT_STREAM_READ( bitmap->buffer, bytes ) )
      goto Exit;

    if ( PCF_BIT_ORDER( face->bitmapsFormat ) != MSBFirst )
      BitOrderInvert( bitmap->buffer, bytes );

    if ( ( PCF_BYTE_ORDER( face->bitmapsFormat ) !=
           PCF_BIT_ORDER( face->bitmapsFormat )  ) )
    {
      switch ( PCF_SCAN_UNIT( face->bitmapsFormat ) )
      {
      case 1:
        break;

      case 2:
        TwoByteSwap( bitmap->buffer, bytes );
        break;

      case 4:
        FourByteSwap( bitmap->buffer, bytes );
        break;
      }
    }

  Exit:
    return error;
  }


 /*
  *
  *  BDF SERVICE
  *
  */

  static FT_Error
  pcf_get_bdf_property( PCF_Face          face,
                        const char*       prop_name,
                        BDF_PropertyRec  *aproperty )
  {
    PCF_Property  prop;


    prop = pcf_find_property( face, prop_name );
    if ( prop )
    {
      if ( prop->isString )
      {
        aproperty->type   = BDF_PROPERTY_TYPE_ATOM;
        aproperty->u.atom = prop->value.atom;
      }
      else
      {
        if ( prop->value.l > 0x7FFFFFFFL || prop->value.l < ( -1 - 0x7FFFFFFFL ) )
        {
          FT_TRACE1(( "pcf_get_bdf_property: " ));
          FT_TRACE1(( "too large integer 0x%x is truncated\n" ));
        }
        /* Apparently, the PCF driver loads all properties as signed integers!
         * This really doesn't seem to be a problem, because this is
         * sufficient for any meaningful values.
         */
        aproperty->type      = BDF_PROPERTY_TYPE_INTEGER;
        aproperty->u.integer = (FT_Int32)prop->value.l;
      }
      return 0;
    }

    return FT_THROW( Invalid_Argument );
  }


  static FT_Error
  pcf_get_charset_id( PCF_Face      face,
                      const char*  *acharset_encoding,
                      const char*  *acharset_registry )
  {
    *acharset_encoding = face->charset_encoding;
    *acharset_registry = face->charset_registry;

    return 0;
  }


  static const FT_Service_BDFRec  pcf_service_bdf =
  {
    (FT_BDF_GetCharsetIdFunc)pcf_get_charset_id,     /* get_charset_id */
    (FT_BDF_GetPropertyFunc) pcf_get_bdf_property    /* get_property   */
  };


 /*
  *
  *  SERVICE LIST
  *
  */

  static const FT_ServiceDescRec  pcf_services[] =
  {
    { FT_SERVICE_ID_BDF,         &pcf_service_bdf },
    { FT_SERVICE_ID_FONT_FORMAT, FT_FONT_FORMAT_PCF },
    { NULL, NULL }
  };


  FT_CALLBACK_DEF( FT_Module_Interface )
  pcf_driver_requester( FT_Module    module,
                        const char*  name )
  {
    FT_UNUSED( module );

    return ft_service_list_lookup( pcf_services, name );
  }


  FT_CALLBACK_TABLE_DEF
  const FT_Driver_ClassRec  pcf_driver_class =
  {
    {
      FT_MODULE_FONT_DRIVER        |
      FT_MODULE_DRIVER_NO_OUTLINES,
      sizeof ( FT_DriverRec ),

      "pcf",
      0x10000L,
      0x20000L,

      NULL,    /* module-specific interface */

      NULL,                     /* FT_Module_Constructor  module_init   */
      NULL,                     /* FT_Module_Destructor   module_done   */
      pcf_driver_requester      /* FT_Module_Requester    get_interface */
    },

    sizeof ( PCF_FaceRec ),
    sizeof ( FT_SizeRec ),
    sizeof ( FT_GlyphSlotRec ),

    PCF_Face_Init,              /* FT_Face_InitFunc  init_face */
    PCF_Face_Done,              /* FT_Face_DoneFunc  done_face */
    NULL,                       /* FT_Size_InitFunc  init_size */
    NULL,                       /* FT_Size_DoneFunc  done_size */
    NULL,                       /* FT_Slot_InitFunc  init_slot */
    NULL,                       /* FT_Slot_DoneFunc  done_slot */

    PCF_Glyph_Load,             /* FT_Slot_LoadFunc  load_glyph */

    NULL,                       /* FT_Face_GetKerningFunc   get_kerning  */
    NULL,                       /* FT_Face_AttachFunc       attach_file  */
    NULL,                       /* FT_Face_GetAdvancesFunc  get_advances */

    PCF_Size_Request,           /* FT_Size_RequestFunc  request_size */
    PCF_Size_Select             /* FT_Size_SelectFunc   select_size  */
  };


/* END */
@


1.5
log
@fastmerge
@
text
@d5 1
a5 1
    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2008, 2009 by
d35 1
d38 1
d51 1
a51 1
#include FT_SERVICE_XFREE86_NAME_H
d67 1
a67 1
    FT_UInt       num_encodings;
d83 1
a83 1
    cmap->num_encodings = (FT_UInt)face->nencodings;
d86 1
a86 1
    return PCF_Err_Ok;
d107 1
a107 1
    FT_UInt       min, max, mid;
d120 1
a120 1
      code = encodings[mid].enc;
d144 1
a144 1
    FT_UInt       min, max, mid;
d158 1
a158 1
      code = encodings[mid].enc;
d175 1
a175 1
      charcode = encodings[min].enc;
d192 1
a192 1
  FT_CALLBACK_TABLE_DEF
d221 1
d223 1
a223 2
      PCF_Property  prop;
      FT_Int        i;
d226 1
a226 1
      if ( face->properties )
d228 4
a231 1
        for ( i = 0; i < face->nprops; i++ )
d233 3
a235 7
          prop = &face->properties[i];

          if ( prop ) {
            FT_FREE( prop->name );
            if ( prop->isString )
              FT_FREE( prop->value.atom );
          }
d238 1
d249 2
a250 4
    FT_TRACE4(( "PCF_Face_Done: done face\n" ));

    /* close gzip/LZW stream if any */
    if ( pcfface->stream == &face->gzip_stream )
d252 2
a253 2
      FT_Stream_Close( &face->gzip_stream );
      pcfface->stream = face->gzip_source;
d266 1
a266 1
    FT_Error  error = PCF_Err_Ok;
a269 1
    FT_UNUSED( face_index );
d272 3
a274 1
    error = pcf_load_font( stream, face );
d279 3
a281 2
#if defined( FT_CONFIG_OPTION_USE_ZLIB ) || \
    defined( FT_CONFIG_OPTION_USE_LZW )
d289 2
a290 2
        error2 = FT_Stream_OpenGzip( &face->gzip_stream, stream );
        if ( FT_ERROR_BASE( error2 ) == FT_Err_Unimplemented_Feature )
d304 2
a305 2
        error3 = FT_Stream_OpenLZW( &face->gzip_stream, stream );
        if ( FT_ERROR_BASE( error3 ) == FT_Err_Unimplemented_Feature )
d312 15
d330 2
a331 2
      face->gzip_source = stream;
      pcfface->stream   = &face->gzip_stream;
d335 1
a335 1
      error = pcf_load_font( stream, face );
d339 3
a341 1
#else /* !(FT_CONFIG_OPTION_USE_ZLIB || FT_CONFIG_OPTION_USE_LZW) */
d348 15
d395 3
a397 2
        charmap.platform_id = 0;
        charmap.encoding_id = 0;
d402 2
a403 2
          charmap.platform_id = 3;
          charmap.encoding_id = 1;
d420 1
a420 1
    FT_TRACE2(( "[not a valid PCF file]\n" ));
d422 1
a422 1
    error = PCF_Err_Unknown_File_Format;  /* error */
d436 3
a438 3
    size->metrics.ascender    =  accel->fontAscent << 6;
    size->metrics.descender   = -accel->fontDescent << 6;
    size->metrics.max_advance =  accel->maxbounds.characterWidth << 6;
d440 1
a440 1
    return PCF_Err_Ok;
d450 1
a450 1
    FT_Error         error = PCF_Err_Invalid_Pixel_Size;
d461 1
a461 1
        error = PCF_Err_Ok;
d467 1
a467 1
        error = PCF_Err_Ok;
d471 1
a471 1
      error = PCF_Err_Unimplemented_Feature;
d490 1
a490 1
    FT_Error    error  = PCF_Err_Ok;
d493 1
a493 1
    FT_Offset   bytes;
a494 1
    FT_UNUSED( load_flags );
d496 1
d498 5
a502 1
    FT_TRACE4(( "load_glyph %d ---", glyph_index ));
d504 1
a504 1
    if ( !face || glyph_index >= (FT_UInt)face->root.num_glyphs )
d506 1
a506 1
      error = PCF_Err_Invalid_Argument;
d517 4
a520 2
    bitmap->rows       = metric->ascent + metric->descent;
    bitmap->width      = metric->rightSideBearing - metric->leftSideBearing;
d532 1
a532 1
      bitmap->pitch = ( bitmap->width + 7 ) >> 3;
d536 1
a536 1
      bitmap->pitch = ( ( bitmap->width + 15 ) >> 4 ) << 1;
d540 1
a540 1
      bitmap->pitch = ( ( bitmap->width + 31 ) >> 5 ) << 2;
d544 1
a544 1
      bitmap->pitch = ( ( bitmap->width + 63 ) >> 6 ) << 3;
d548 1
a548 1
      return PCF_Err_Invalid_File_Format;
d551 18
d570 1
a570 1
    bytes = bitmap->pitch * bitmap->rows;
d572 1
a572 1
    error = ft_glyphslot_alloc_bitmap( slot, bytes );
a600 17
    slot->format      = FT_GLYPH_FORMAT_BITMAP;
    slot->bitmap_left = metric->leftSideBearing;
    slot->bitmap_top  = metric->ascent;

    slot->metrics.horiAdvance  = metric->characterWidth << 6;
    slot->metrics.horiBearingX = metric->leftSideBearing << 6;
    slot->metrics.horiBearingY = metric->ascent << 6;
    slot->metrics.width        = ( metric->rightSideBearing -
                                   metric->leftSideBearing ) << 6;
    slot->metrics.height       = bitmap->rows << 6;

    ft_synthesize_vertical_metrics( &slot->metrics,
                                    ( face->accel.fontAscent +
                                      face->accel.fontDescent ) << 6 );

    FT_TRACE4(( " --- ok\n" ));

d621 1
a621 1
    if ( prop != NULL )
d645 1
a645 1
    return PCF_Err_Invalid_Argument;
d663 2
a664 2
    (FT_BDF_GetCharsetIdFunc)pcf_get_charset_id,
    (FT_BDF_GetPropertyFunc) pcf_get_bdf_property
d676 2
a677 2
    { FT_SERVICE_ID_BDF,       &pcf_service_bdf },
    { FT_SERVICE_ID_XF86_NAME, FT_XF86_FORMAT_PCF },
d704 1
a704 1
      0,
d706 3
a708 3
      0,
      0,
      pcf_driver_requester
d715 12
a726 16
    PCF_Face_Init,
    PCF_Face_Done,
    0,                      /* FT_Size_InitFunc */
    0,                      /* FT_Size_DoneFunc */
    0,                      /* FT_Slot_InitFunc */
    0,                      /* FT_Slot_DoneFunc */

#ifdef FT_CONFIG_OPTION_OLD_INTERNALS
    ft_stub_set_char_sizes,
    ft_stub_set_pixel_sizes,
#endif
    PCF_Glyph_Load,

    0,                      /* FT_Face_GetKerningFunc  */
    0,                      /* FT_Face_AttachFunc      */
    0,                      /* FT_Face_GetAdvancesFunc */
d728 2
a729 2
    PCF_Size_Request,
    PCF_Size_Select
@


1.4
log
@Merge freetype 2.3.6
@
text
@d5 1
a5 1
    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2008 by
d114 1
a114 1
      FT_UInt32  code;
d143 1
a143 1
    FT_UInt32     charcode  = *acharcode + 1;
d152 1
a152 1
      FT_UInt32  code;
d178 8
a185 1
    *acharcode = charcode;
d206 6
a211 2
    PCF_Face   face   = (PCF_Face)pcfface;
    FT_Memory  memory = FT_FACE_MEMORY( face );
d213 1
d276 8
a283 1
      FT_Error  error2;
d286 4
a289 1
      PCF_Face_Done( pcfface );
d291 3
a293 4
      /* this didn't work, try gzip support! */
      error2 = FT_Stream_OpenGzip( &face->gzip_stream, stream );
      if ( FT_ERROR_BASE( error2 ) == FT_Err_Unimplemented_Feature )
        goto Fail;
d295 1
a295 1
      error = error2;
a296 1
#ifdef FT_CONFIG_OPTION_USE_LZW
d307 5
a311 2
        if ( error )
          goto Fail;
d313 2
a314 2
        face->gzip_source = stream;
        pcfface->stream   = &face->gzip_stream;
d316 1
a316 1
        stream = pcfface->stream;
d318 2
a319 5
        error = pcf_load_font( stream, face );
        if ( error )
          goto Fail;
      }
#else
a320 5
#endif
      else
      {
        face->gzip_source = stream;
        pcfface->stream   = &face->gzip_stream;
d322 3
a324 1
        stream = pcfface->stream;
d326 1
a326 4
        error = pcf_load_font( stream, face );
        if ( error )
          goto Fail;
      }
d425 1
a425 1
      if ( height == ( bsize->y_ppem + 32 ) >> 6 )
d454 1
a454 1
    FT_Stream   stream = face->root.stream;
d458 1
a458 1
    int         bytes;
d471 2
d588 5
d598 1
a598 1
        aproperty->u.integer = prop->value.integer;
@


1.3
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d5 1
a5 1
    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006 by
d190 3
a192 1
    pcf_cmap_char_next
d276 1
d299 3
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d206 1
a206 1
      PCF_Property  prop = face->properties;
d210 1
a210 1
      for ( i = 0; i < face->nprops; i++ )
d212 3
a214 1
        prop = &face->properties[i];
d216 6
a221 3
        FT_FREE( prop->name );
        if ( prop->isString )
          FT_FREE( prop->value.atom );
a222 1

d265 2
d366 1
d445 1
a445 1
    if ( !face )
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
    Copyright (C) 2000, 2001, 2002, 2003, 2004 by
d43 1
d51 11
d64 1
a64 1
    FT_CMapRec    cmap;
d72 2
a73 1
  pcf_cmap_init( PCF_CMap  cmap )
d75 4
a78 1
    PCF_Face  face = (PCF_Face)FT_CMAP_FACE( cmap );
d89 1
a89 1
  pcf_cmap_done( PCF_CMap  cmap )
d91 3
d100 1
a100 1
  pcf_cmap_char_index( PCF_CMap   cmap,
d103 1
d106 1
a106 1
    FT_UInt       result = 0;
d137 1
a137 1
  pcf_cmap_char_next( PCF_CMap    cmap,
d140 1
d143 2
a144 2
    FT_UInt32     charcode = *acharcode + 1;
    FT_UInt       result   = 0;
d183 2
a184 1
  FT_CALLBACK_TABLE_DEF const FT_CMap_ClassRec  pcf_cmap_class =
d186 5
a190 5
    sizeof( PCF_CMapRec ),
    (FT_CMap_InitFunc)     pcf_cmap_init,
    (FT_CMap_DoneFunc)     pcf_cmap_done,
    (FT_CMap_CharIndexFunc)pcf_cmap_char_index,
    (FT_CMap_CharNextFunc) pcf_cmap_char_next
d194 2
a195 12
  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_pcfdriver


  FT_CALLBACK_DEF( FT_Error )
  PCF_Face_Done( PCF_Face  face )
d197 1
d216 1
a216 1
          FT_FREE( prop->value );
d223 3
a225 2
    FT_FREE( face->root.family_name );
    FT_FREE( face->root.available_sizes );
d232 1
a232 1
    if ( face->root.stream == &face->gzip_stream )
d235 1
a235 1
      face->root.stream = face->gzip_source;
a236 2

    return PCF_Err_Ok;
d242 1
a242 1
                 PCF_Face       face,
d247 1
d282 1
a282 1
        face->root.stream = &face->gzip_stream;
d284 1
a284 1
        stream = face->root.stream;
d293 1
a293 1
        face->root.stream = &face->gzip_stream;
d295 1
a295 1
        stream = face->root.stream;
d303 1
a303 1
    /* set-up charmap */
d305 2
a306 1
      FT_String  *charset_registry, *charset_encoding;
d310 1
a310 5
      charset_registry = face->charset_registry;
      charset_encoding = face->charset_encoding;

      if ( ( charset_registry != NULL ) &&
           ( charset_encoding != NULL ) )
d312 1
a312 1
        char*  s = face->charset_registry;
d349 2
a350 2
        if (face->root.num_charmaps)
          face->root.charmap = face->root.charmaps[0];
d365 20
a384 2
  static FT_Error
  PCF_Set_Pixel_Size( FT_Size  size )
d386 4
a389 1
    PCF_Face face = (PCF_Face)FT_SIZE_FACE( size );
d392 2
a393 2
    FT_TRACE4(( "rec %d - pres %d\n", size->metrics.y_ppem,
                                      face->root.available_sizes->y_ppem >> 6 ));
d395 1
a395 1
    if ( size->metrics.y_ppem == face->root.available_sizes->y_ppem >> 6 )
d397 4
a400 7
      size->metrics.ascender    = face->accel.fontAscent << 6;
      size->metrics.descender   = face->accel.fontDescent * (-64);
#if 0
      size->metrics.height      = face->accel.maxbounds.ascent << 6;
#endif
      size->metrics.height      = size->metrics.ascender -
                                  size->metrics.descender;
d402 5
a406 1
      size->metrics.max_advance = face->accel.maxbounds.characterWidth << 6;
d408 3
a410 1
      return PCF_Err_Ok;
d412 3
d416 1
a416 4
    {
      FT_TRACE4(( "size WRONG\n" ));
      return PCF_Err_Invalid_Pixel_Size;
    }
d420 1
a420 1
  static FT_Error
d513 1
d524 3
a526 2
    slot->linearHoriAdvance = (FT_Fixed)bitmap->width << 16;
    slot->format            = FT_GLYPH_FORMAT_BITMAP;
d606 1
a606 1
  static FT_Module_Interface
d630 3
a632 3
      (FT_Module_Constructor)0,
      (FT_Module_Destructor) 0,
      (FT_Module_Requester)  pcf_driver_requester
d635 23
a657 19
    sizeof( PCF_FaceRec ),
    sizeof( FT_SizeRec ),
    sizeof( FT_GlyphSlotRec ),

    (FT_Face_InitFunc)        PCF_Face_Init,
    (FT_Face_DoneFunc)        PCF_Face_Done,
    (FT_Size_InitFunc)        0,
    (FT_Size_DoneFunc)        0,
    (FT_Slot_InitFunc)        0,
    (FT_Slot_DoneFunc)        0,

    (FT_Size_ResetPointsFunc) PCF_Set_Pixel_Size,
    (FT_Size_ResetPixelsFunc) PCF_Set_Pixel_Size,

    (FT_Slot_LoadFunc)        PCF_Glyph_Load,

    (FT_Face_GetKerningFunc)  0,
    (FT_Face_AttachFunc)      0,
    (FT_Face_GetAdvancesFunc) 0
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d5 1
a5 1
    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006 by
a42 1
#include "pcfutil.h"
a49 11

  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_pcfdriver


d52 1
a52 1
    FT_CMapRec    root;
d60 1
a60 2
  pcf_cmap_init( FT_CMap     pcfcmap,   /* PCF_CMap */
                 FT_Pointer  init_data )
d62 1
a62 4
    PCF_CMap  cmap = (PCF_CMap)pcfcmap;
    PCF_Face  face = (PCF_Face)FT_CMAP_FACE( pcfcmap );

    FT_UNUSED( init_data );
d73 1
a73 1
  pcf_cmap_done( FT_CMap  pcfcmap )         /* PCF_CMap */
a74 3
    PCF_CMap  cmap = (PCF_CMap)pcfcmap;


d81 1
a81 1
  pcf_cmap_char_index( FT_CMap    pcfcmap,  /* PCF_CMap */
a83 1
    PCF_CMap      cmap      = (PCF_CMap)pcfcmap;
d86 1
a86 1
    FT_UInt       result    = 0;
d117 1
a117 1
  pcf_cmap_char_next( FT_CMap    pcfcmap,   /* PCF_CMap */
a119 1
    PCF_CMap      cmap      = (PCF_CMap)pcfcmap;
d122 2
a123 2
    FT_UInt32     charcode  = *acharcode + 1;
    FT_UInt       result    = 0;
d162 1
a162 2
  FT_CALLBACK_TABLE_DEF
  const FT_CMap_ClassRec  pcf_cmap_class =
d164 5
a168 5
    sizeof ( PCF_CMapRec ),
    pcf_cmap_init,
    pcf_cmap_done,
    pcf_cmap_char_index,
    pcf_cmap_char_next
d172 12
a183 2
  FT_CALLBACK_DEF( void )
  PCF_Face_Done( FT_Face  pcfface )         /* PCF_Face */
a184 1
    PCF_Face   face   = (PCF_Face)pcfface;
d193 1
a193 1
      PCF_Property  prop;
d197 1
a197 1
      if ( face->properties )
d199 1
a199 3
        for ( i = 0; i < face->nprops; i++ )
        {
          prop = &face->properties[i];
d201 3
a203 6
          if ( prop ) {
            FT_FREE( prop->name );
            if ( prop->isString )
              FT_FREE( prop->value.atom );
          }
        }
d205 1
d210 2
a211 3
    FT_FREE( pcfface->family_name );
    FT_FREE( pcfface->style_name );
    FT_FREE( pcfface->available_sizes );
d218 1
a218 1
    if ( pcfface->stream == &face->gzip_stream )
d221 1
a221 1
      pcfface->stream = face->gzip_source;
d223 2
d230 1
a230 1
                 FT_Face        pcfface,        /* PCF_Face */
a234 1
    PCF_Face  face  = (PCF_Face)pcfface;
a247 2
      PCF_Face_Done( pcfface );

d269 1
a269 1
        pcfface->stream   = &face->gzip_stream;
d271 1
a271 1
        stream = pcfface->stream;
d280 1
a280 1
        pcfface->stream   = &face->gzip_stream;
d282 1
a282 1
        stream = pcfface->stream;
d290 1
a290 1
    /* set up charmap */
d292 1
a292 2
      FT_String  *charset_registry = face->charset_registry;
      FT_String  *charset_encoding = face->charset_encoding;
d296 5
a300 1
      if ( charset_registry && charset_encoding )
d302 1
a302 1
        char*  s = charset_registry;
d339 2
a340 2
        if ( pcfface->num_charmaps )
          pcfface->charmap = pcfface->charmaps[0];
a349 1
    PCF_Face_Done( pcfface );
d355 2
a356 20
  FT_CALLBACK_DEF( FT_Error )
  PCF_Size_Select( FT_Size   size,
                   FT_ULong  strike_index )
  {
    PCF_Accel  accel = &( (PCF_Face)size->face )->accel;


    FT_Select_Metrics( size->face, strike_index );

    size->metrics.ascender    =  accel->fontAscent << 6;
    size->metrics.descender   = -accel->fontDescent << 6;
    size->metrics.max_advance =  accel->maxbounds.characterWidth << 6;

    return PCF_Err_Ok;
  }


  FT_CALLBACK_DEF( FT_Error )
  PCF_Size_Request( FT_Size          size,
                    FT_Size_Request  req )
d358 1
a358 4
    PCF_Face         face  = (PCF_Face)size->face;
    FT_Bitmap_Size*  bsize = size->face->available_sizes;
    FT_Error         error = PCF_Err_Invalid_Pixel_Size;
    FT_Long          height;
d361 2
a362 2
    height = FT_REQUEST_HEIGHT( req );
    height = ( height + 32 ) >> 6;
d364 1
a364 1
    switch ( req->type )
d366 7
a372 4
    case FT_SIZE_REQUEST_TYPE_NOMINAL:
      if ( height == ( bsize->y_ppem + 32 ) >> 6 )
        error = PCF_Err_Ok;
      break;
d374 1
a374 5
    case FT_SIZE_REQUEST_TYPE_REAL_DIM:
      if ( height == ( face->accel.fontAscent +
                       face->accel.fontDescent ) )
        error = PCF_Err_Ok;
      break;
d376 1
a376 3
    default:
      error = PCF_Err_Unimplemented_Feature;
      break;
a377 3

    if ( error )
      return error;
d379 4
a382 1
      return PCF_Size_Select( size, 0 );
d386 1
a386 1
  FT_CALLBACK_DEF( FT_Error )
d404 1
a404 1
    if ( !face || glyph_index >= (FT_UInt)face->root.num_glyphs )
a478 1
    slot->format      = FT_GLYPH_FORMAT_BITMAP;
d489 2
a490 3
    ft_synthesize_vertical_metrics( &slot->metrics,
                                    ( face->accel.fontAscent +
                                      face->accel.fontDescent ) << 6 );
d570 1
a570 1
  FT_CALLBACK_DEF( FT_Module_Interface )
d594 3
a596 3
      0,
      0,
      pcf_driver_requester
d599 19
a617 23
    sizeof ( PCF_FaceRec ),
    sizeof ( FT_SizeRec ),
    sizeof ( FT_GlyphSlotRec ),

    PCF_Face_Init,
    PCF_Face_Done,
    0,                      /* FT_Size_InitFunc */
    0,                      /* FT_Size_DoneFunc */
    0,                      /* FT_Slot_InitFunc */
    0,                      /* FT_Slot_DoneFunc */

#ifdef FT_CONFIG_OPTION_OLD_INTERNALS
    ft_stub_set_char_sizes,
    ft_stub_set_pixel_sizes,
#endif
    PCF_Glyph_Load,

    0,                      /* FT_Face_GetKerningFunc  */
    0,                      /* FT_Face_AttachFunc      */
    0,                      /* FT_Face_GetAdvancesFunc */

    PCF_Size_Request,
    PCF_Size_Select
@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d5 1
a5 1
    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2008 by
d190 1
a190 3
    pcf_cmap_char_next,

    NULL, NULL, NULL, NULL, NULL
a273 1
#ifdef FT_CONFIG_OPTION_USE_LZW
a295 3
#else
        goto Fail;
#endif
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d5 1
a5 1
    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006 by
a42 1
#include "pcfutil.h"
a49 11

  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_pcfdriver


d52 1
a52 1
    FT_CMapRec    root;
d60 1
a60 2
  pcf_cmap_init( FT_CMap     pcfcmap,   /* PCF_CMap */
                 FT_Pointer  init_data )
d62 1
a62 4
    PCF_CMap  cmap = (PCF_CMap)pcfcmap;
    PCF_Face  face = (PCF_Face)FT_CMAP_FACE( pcfcmap );

    FT_UNUSED( init_data );
d73 1
a73 1
  pcf_cmap_done( FT_CMap  pcfcmap )         /* PCF_CMap */
a74 3
    PCF_CMap  cmap = (PCF_CMap)pcfcmap;


d81 1
a81 1
  pcf_cmap_char_index( FT_CMap    pcfcmap,  /* PCF_CMap */
a83 1
    PCF_CMap      cmap      = (PCF_CMap)pcfcmap;
d86 1
a86 1
    FT_UInt       result    = 0;
d117 1
a117 1
  pcf_cmap_char_next( FT_CMap    pcfcmap,   /* PCF_CMap */
a119 1
    PCF_CMap      cmap      = (PCF_CMap)pcfcmap;
d122 2
a123 2
    FT_UInt32     charcode  = *acharcode + 1;
    FT_UInt       result    = 0;
d162 1
a162 2
  FT_CALLBACK_TABLE_DEF
  const FT_CMap_ClassRec  pcf_cmap_class =
d164 5
a168 5
    sizeof ( PCF_CMapRec ),
    pcf_cmap_init,
    pcf_cmap_done,
    pcf_cmap_char_index,
    pcf_cmap_char_next
d172 12
a183 2
  FT_CALLBACK_DEF( void )
  PCF_Face_Done( FT_Face  pcfface )         /* PCF_Face */
a184 1
    PCF_Face   face   = (PCF_Face)pcfface;
d203 1
a203 1
          FT_FREE( prop->value.atom );
d210 2
a211 3
    FT_FREE( pcfface->family_name );
    FT_FREE( pcfface->style_name );
    FT_FREE( pcfface->available_sizes );
d218 1
a218 1
    if ( pcfface->stream == &face->gzip_stream )
d221 1
a221 1
      pcfface->stream = face->gzip_source;
d223 2
d230 1
a230 1
                 FT_Face        pcfface,        /* PCF_Face */
a234 1
    PCF_Face  face  = (PCF_Face)pcfface;
d269 1
a269 1
        pcfface->stream   = &face->gzip_stream;
d271 1
a271 1
        stream = pcfface->stream;
d280 1
a280 1
        pcfface->stream   = &face->gzip_stream;
d282 1
a282 1
        stream = pcfface->stream;
d290 1
a290 1
    /* set up charmap */
d292 1
a292 2
      FT_String  *charset_registry = face->charset_registry;
      FT_String  *charset_encoding = face->charset_encoding;
d296 5
a300 1
      if ( charset_registry && charset_encoding )
d302 1
a302 1
        char*  s = charset_registry;
d339 2
a340 2
        if ( pcfface->num_charmaps )
          pcfface->charmap = pcfface->charmaps[0];
d355 2
a356 3
  FT_CALLBACK_DEF( FT_Error )
  PCF_Size_Select( FT_Size   size,
                   FT_ULong  strike_index )
d358 1
a358 4
    PCF_Accel  accel = &( (PCF_Face)size->face )->accel;


    FT_Select_Metrics( size->face, strike_index );
a359 3
    size->metrics.ascender    =  accel->fontAscent << 6;
    size->metrics.descender   = -accel->fontDescent << 6;
    size->metrics.max_advance =  accel->maxbounds.characterWidth << 6;
d361 2
a362 2
    return PCF_Err_Ok;
  }
d364 1
a364 15

  FT_CALLBACK_DEF( FT_Error )
  PCF_Size_Request( FT_Size          size,
                    FT_Size_Request  req )
  {
    PCF_Face         face  = (PCF_Face)size->face;
    FT_Bitmap_Size*  bsize = size->face->available_sizes;
    FT_Error         error = PCF_Err_Invalid_Pixel_Size;
    FT_Long          height;


    height = FT_REQUEST_HEIGHT( req );
    height = ( height + 32 ) >> 6;

    switch ( req->type )
d366 7
a372 4
    case FT_SIZE_REQUEST_TYPE_NOMINAL:
      if ( height == ( bsize->y_ppem + 32 ) >> 6 )
        error = PCF_Err_Ok;
      break;
d374 1
a374 5
    case FT_SIZE_REQUEST_TYPE_REAL_DIM:
      if ( height == ( face->accel.fontAscent +
                       face->accel.fontDescent ) )
        error = PCF_Err_Ok;
      break;
d376 1
a376 3
    default:
      error = PCF_Err_Unimplemented_Feature;
      break;
a377 3

    if ( error )
      return error;
d379 4
a382 1
      return PCF_Size_Select( size, 0 );
d386 1
a386 1
  FT_CALLBACK_DEF( FT_Error )
a478 1
    slot->format      = FT_GLYPH_FORMAT_BITMAP;
d489 2
a490 3
    ft_synthesize_vertical_metrics( &slot->metrics,
                                    ( face->accel.fontAscent +
                                      face->accel.fontDescent ) << 6 );
d570 1
a570 1
  FT_CALLBACK_DEF( FT_Module_Interface )
d594 3
a596 3
      0,
      0,
      pcf_driver_requester
d599 19
a617 23
    sizeof ( PCF_FaceRec ),
    sizeof ( FT_SizeRec ),
    sizeof ( FT_GlyphSlotRec ),

    PCF_Face_Init,
    PCF_Face_Done,
    0,                      /* FT_Size_InitFunc */
    0,                      /* FT_Size_DoneFunc */
    0,                      /* FT_Slot_InitFunc */
    0,                      /* FT_Slot_DoneFunc */

#ifdef FT_CONFIG_OPTION_OLD_INTERNALS
    ft_stub_set_char_sizes,
    ft_stub_set_pixel_sizes,
#endif
    PCF_Glyph_Load,

    0,                      /* FT_Face_GetKerningFunc  */
    0,                      /* FT_Face_AttachFunc      */
    0,                      /* FT_Face_GetAdvancesFunc */

    PCF_Size_Request,
    PCF_Size_Select
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d5 1
a5 1
    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2008, 2009 by
d114 1
a114 1
      FT_ULong  code;
d143 1
a143 1
    FT_ULong      charcode  = *acharcode + 1;
d152 1
a152 1
      FT_ULong  code;
d178 1
a178 8
    if ( charcode > 0xFFFFFFFFUL )
    {
      FT_TRACE1(( "pcf_cmap_char_next: charcode 0x%x > 32bit API" ));
      *acharcode = 0;
      /* XXX: result should be changed to indicate an overflow error */
    }
    else
      *acharcode = (FT_UInt32)charcode;
d190 1
a190 3
    pcf_cmap_char_next,

    NULL, NULL, NULL, NULL, NULL
d197 2
a198 2
    PCF_Face   face = (PCF_Face)pcfface;
    FT_Memory  memory;
a200 5
    if ( !face )
      return;

    memory = FT_FACE_MEMORY( face );

d206 1
a206 1
      PCF_Property  prop;
d210 1
a210 1
      if ( face->properties )
d212 1
a212 3
        for ( i = 0; i < face->nprops; i++ )
        {
          prop = &face->properties[i];
d214 3
a216 6
          if ( prop ) {
            FT_FREE( prop->name );
            if ( prop->isString )
              FT_FREE( prop->value.atom );
          }
        }
d218 1
d258 1
a258 1
      PCF_Face_Done( pcfface );
a259 2
#if defined( FT_CONFIG_OPTION_USE_ZLIB ) || \
    defined( FT_CONFIG_OPTION_USE_LZW )
d261 4
a264 3
#ifdef FT_CONFIG_OPTION_USE_ZLIB
      {
        FT_Error  error2;
d266 1
a266 11

        /* this didn't work, try gzip support! */
        error2 = FT_Stream_OpenGzip( &face->gzip_stream, stream );
        if ( FT_ERROR_BASE( error2 ) == FT_Err_Unimplemented_Feature )
          goto Fail;

        error = error2;
      }
#endif /* FT_CONFIG_OPTION_USE_ZLIB */

#ifdef FT_CONFIG_OPTION_USE_LZW
d278 2
a279 2
      }
#endif /* FT_CONFIG_OPTION_USE_LZW */
d281 2
a282 2
      if ( error )
        goto Fail;
d284 1
a284 2
      face->gzip_source = stream;
      pcfface->stream   = &face->gzip_stream;
d286 8
a293 5
      stream = pcfface->stream;

      error = pcf_load_font( stream, face );
      if ( error )
        goto Fail;
d295 1
a295 1
#else /* !(FT_CONFIG_OPTION_USE_ZLIB || FT_CONFIG_OPTION_USE_LZW) */
d297 4
a300 3
      goto Fail;

#endif
a359 1
    PCF_Face_Done( pcfface );
d398 1
a398 1
      if ( height == ( ( bsize->y_ppem + 32 ) >> 6 ) )
d427 1
a427 1
    FT_Stream   stream;
d431 1
a431 1
    FT_Offset   bytes;
d438 1
a438 1
    if ( !face || glyph_index >= (FT_UInt)face->root.num_glyphs )
a443 2
    stream = face->root.stream;

a558 5
        if ( prop->value.l > 0x7FFFFFFFL || prop->value.l < ( -1 - 0x7FFFFFFFL ) )
        {
          FT_TRACE1(( "pcf_get_bdf_property: " ));
          FT_TRACE1(( "too large integer 0x%x is truncated\n" ));
        }
d564 1
a564 1
        aproperty->u.integer = (FT_Int32)prop->value.l;
@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d5 1
a5 1
    Copyright (C) 2000-2004, 2006-2011, 2013, 2014 by
a34 1
#include FT_BZIP2_H
a36 1
#include FT_TRUETYPE_IDS_H
d49 1
a49 1
#include FT_SERVICE_FONT_FORMAT_H
d65 1
a65 1
    FT_ULong      num_encodings;
d81 1
a81 1
    cmap->num_encodings = face->nencodings;
d84 1
a84 1
    return FT_Err_Ok;
d105 1
a105 1
    FT_ULong      min, max, mid;
d118 1
a118 1
      code = (FT_ULong)encodings[mid].enc;
d142 1
a142 1
    FT_ULong      min, max, mid;
d156 1
a156 1
      code = (FT_ULong)encodings[mid].enc;
d173 1
a173 1
      charcode = (FT_ULong)encodings[min].enc;
d190 1
a190 1
  static
a218 1
    if ( face->properties )
d220 2
a221 1
      FT_Int  i;
d224 1
a224 1
      for ( i = 0; i < face->nprops; i++ )
d226 3
a228 2
        PCF_Property  prop = &face->properties[i];

d230 5
a234 5
        if ( prop )
        {
          FT_FREE( prop->name );
          if ( prop->isString )
            FT_FREE( prop->value.atom );
a236 1

d247 4
a250 2
    /* close compressed stream if any */
    if ( pcfface->stream == &face->comp_stream )
d252 2
a253 2
      FT_Stream_Close( &face->comp_stream );
      pcfface->stream = face->comp_source;
d266 1
a266 1
    FT_Error  error;
d270 1
d273 1
a273 3
    FT_TRACE2(( "PCF driver\n" ));

    error = pcf_load_font( stream, face, face_index );
d278 2
a279 3
#if defined( FT_CONFIG_OPTION_USE_ZLIB )  || \
    defined( FT_CONFIG_OPTION_USE_LZW )   || \
    defined( FT_CONFIG_OPTION_USE_BZIP2 )
d287 2
a288 2
        error2 = FT_Stream_OpenGzip( &face->comp_stream, stream );
        if ( FT_ERR_EQ( error2, Unimplemented_Feature ) )
d302 2
a303 2
        error3 = FT_Stream_OpenLZW( &face->comp_stream, stream );
        if ( FT_ERR_EQ( error3, Unimplemented_Feature ) )
a309 15
#ifdef FT_CONFIG_OPTION_USE_BZIP2
      if ( error )
      {
        FT_Error  error4;


        /* this didn't work, try Bzip2 support! */
        error4 = FT_Stream_OpenBzip2( &face->comp_stream, stream );
        if ( FT_ERR_EQ( error4, Unimplemented_Feature ) )
          goto Fail;

        error = error4;
      }
#endif /* FT_CONFIG_OPTION_USE_BZIP2 */

d313 2
a314 2
      face->comp_source = stream;
      pcfface->stream   = &face->comp_stream;
d318 1
a318 1
      error = pcf_load_font( stream, face, face_index );
d322 1
a322 3
#else /* !(FT_CONFIG_OPTION_USE_ZLIB ||
           FT_CONFIG_OPTION_USE_LZW ||
           FT_CONFIG_OPTION_USE_BZIP2) */
a328 15
    /* PCF cannot have multiple faces in a single font file.
     * XXX: A non-zero face_index is already an invalid argument, but
     *      Type1, Type42 drivers have a convention to return
     *      an invalid argument error when the font could be
     *      opened by the specified driver.
     */
    if ( face_index < 0 )
      goto Exit;
    else if ( face_index > 0 && ( face_index & 0xFFFF ) > 0 )
    {
      FT_ERROR(( "PCF_Face_Init: invalid face index\n" ));
      PCF_Face_Done( pcfface );
      return FT_THROW( Invalid_Argument );
    }

d361 2
a362 3
        /* initial platform/encoding should indicate unset status? */
        charmap.platform_id = TT_PLATFORM_APPLE_UNICODE;
        charmap.encoding_id = TT_APPLE_ID_DEFAULT;
d367 2
a368 2
          charmap.platform_id = TT_PLATFORM_MICROSOFT;
          charmap.encoding_id = TT_MS_ID_UNICODE_CS;
d385 1
a385 1
    FT_TRACE2(( "  not a PCF file\n" ));
d387 1
a387 1
    error = FT_THROW( Unknown_File_Format );  /* error */
d401 3
a403 3
    size->metrics.ascender    =  accel->fontAscent * 64;
    size->metrics.descender   = -accel->fontDescent * 64;
    size->metrics.max_advance =  accel->maxbounds.characterWidth * 64;
d405 1
a405 1
    return FT_Err_Ok;
d415 1
a415 1
    FT_Error         error = FT_ERR( Invalid_Pixel_Size );
d426 1
a426 1
        error = FT_Err_Ok;
d432 1
a432 1
        error = FT_Err_Ok;
d436 1
a436 1
      error = FT_THROW( Unimplemented_Feature );
d455 1
a455 1
    FT_Error    error  = FT_Err_Ok;
d458 1
a458 1
    FT_ULong    bytes;
d460 1
a461 1
    FT_TRACE1(( "PCF_Glyph_Load: glyph index %d\n", glyph_index ));
d463 1
a463 5
    if ( !face )
    {
      error = FT_THROW( Invalid_Face_Handle );
      goto Exit;
    }
d465 1
a465 1
    if ( glyph_index >= (FT_UInt)face->root.num_glyphs )
d467 1
a467 1
      error = FT_THROW( Invalid_Argument );
d478 2
a479 4
    bitmap->rows       = (unsigned int)( metric->ascent +
                                         metric->descent );
    bitmap->width      = (unsigned int)( metric->rightSideBearing -
                                         metric->leftSideBearing );
d491 1
a491 1
      bitmap->pitch = (int)( ( bitmap->width + 7 ) >> 3 );
d495 1
a495 1
      bitmap->pitch = (int)( ( ( bitmap->width + 15 ) >> 4 ) << 1 );
d499 1
a499 1
      bitmap->pitch = (int)( ( ( bitmap->width + 31 ) >> 5 ) << 2 );
d503 1
a503 1
      bitmap->pitch = (int)( ( ( bitmap->width + 63 ) >> 6 ) << 3 );
d507 1
a507 1
      return FT_THROW( Invalid_File_Format );
a509 18
    slot->format      = FT_GLYPH_FORMAT_BITMAP;
    slot->bitmap_left = metric->leftSideBearing;
    slot->bitmap_top  = metric->ascent;

    slot->metrics.horiAdvance  = (FT_Pos)( metric->characterWidth * 64 );
    slot->metrics.horiBearingX = (FT_Pos)( metric->leftSideBearing * 64 );
    slot->metrics.horiBearingY = (FT_Pos)( metric->ascent * 64 );
    slot->metrics.width        = (FT_Pos)( ( metric->rightSideBearing -
                                             metric->leftSideBearing ) * 64 );
    slot->metrics.height       = (FT_Pos)( bitmap->rows * 64 );

    ft_synthesize_vertical_metrics( &slot->metrics,
                                    ( face->accel.fontAscent +
                                      face->accel.fontDescent ) * 64 );

    if ( load_flags & FT_LOAD_BITMAP_METRICS_ONLY )
      goto Exit;

d511 1
a511 1
    bytes = (FT_ULong)bitmap->pitch * bitmap->rows;
d513 1
a513 1
    error = ft_glyphslot_alloc_bitmap( slot, (FT_ULong)bytes );
d542 17
d579 1
a579 1
    if ( prop )
d603 1
a603 1
    return FT_THROW( Invalid_Argument );
d621 2
a622 2
    (FT_BDF_GetCharsetIdFunc)pcf_get_charset_id,     /* get_charset_id */
    (FT_BDF_GetPropertyFunc) pcf_get_bdf_property    /* get_property   */
d634 2
a635 2
    { FT_SERVICE_ID_BDF,         &pcf_service_bdf },
    { FT_SERVICE_ID_FONT_FORMAT, FT_FONT_FORMAT_PCF },
d662 1
a662 1
      NULL,    /* module-specific interface */
d664 3
a666 3
      NULL,                     /* FT_Module_Constructor  module_init   */
      NULL,                     /* FT_Module_Destructor   module_done   */
      pcf_driver_requester      /* FT_Module_Requester    get_interface */
d673 16
a688 12
    PCF_Face_Init,              /* FT_Face_InitFunc  init_face */
    PCF_Face_Done,              /* FT_Face_DoneFunc  done_face */
    NULL,                       /* FT_Size_InitFunc  init_size */
    NULL,                       /* FT_Size_DoneFunc  done_size */
    NULL,                       /* FT_Slot_InitFunc  init_slot */
    NULL,                       /* FT_Slot_DoneFunc  done_slot */

    PCF_Glyph_Load,             /* FT_Slot_LoadFunc  load_glyph */

    NULL,                       /* FT_Face_GetKerningFunc   get_kerning  */
    NULL,                       /* FT_Face_AttachFunc       attach_file  */
    NULL,                       /* FT_Face_GetAdvancesFunc  get_advances */
d690 2
a691 2
    PCF_Size_Request,           /* FT_Size_RequestFunc  request_size */
    PCF_Size_Select             /* FT_Size_SelectFunc   select_size  */
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
