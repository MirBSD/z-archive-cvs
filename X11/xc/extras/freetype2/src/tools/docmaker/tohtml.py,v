head	1.6;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.3
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@# @;


1.6
date	2017.04.15.19.22.13;	author tg;	state Exp;
branches;
next	1.5;
commitid	10058F2723111C7BEE2;

1.5
date	2013.08.06.19.48.29;	author tg;	state Exp;
branches;
next	1.4;
commitid	100520152445E05B912;

1.4
date	2008.06.12.20.54.50;	author bsiegert;	state Exp;
branches;
next	1.3;
commitid	10048518C1E44F62885;

1.3
date	2008.02.26.20.05.09;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10047C470A72A1E13CE;

1.2
date	2006.06.29.20.25.08;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.18;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.53.40;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.39.25;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.103.1
date	2005.03.18.10.43.18;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.35.52;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.37.19;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.22;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.42.13;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.6
log
@first cut at a quickmerge
@
text
@#
#  tohtml.py
#
#    A sub-class container of the `Formatter' class to produce HTML.
#
#  Copyright 2002-2016 by
#  David Turner.
#
#  This file is part of the FreeType project, and may only be used,
#  modified, and distributed under the terms of the FreeType project
#  license, LICENSE.TXT.  By continuing to use, modify, or distribute
#  this file you indicate that you have read the license and
#  understand and accept it fully.

# The parent class is contained in file `formatter.py'.


from sources import *
from content import *
from formatter import *

import time


# The following strings define the HTML header used by all generated pages.
html_header_1 = """\
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>\
"""

html_header_2 = """\
 API Reference</title>
<style type="text/css">
  a:link { color: #0000EF; }
  a:visited { color: #51188E; }
  a:hover { color: #FF0000; }

  body { font-family: Verdana, Geneva, Arial, Helvetica, serif;
         color: #000000;
         background: #FFFFFF;
         width: 87%;
         margin: auto; }

  div.section { width: 75%;
                margin: auto; }
  div.section hr { margin: 4ex 0 1ex 0; }
  div.section h4 { background-color: #EEEEFF;
                   font-size: medium;
                   font-style: oblique;
                   font-weight: bold;
                   margin: 3ex 0 1.5ex 9%;
                   padding: 0.3ex 0 0.3ex 1%; }
  div.section p { margin: 1.5ex 0 1.5ex 10%; }
  div.section pre { margin: 3ex 0 3ex 9%;
                    background-color: #D6E8FF;
                    padding: 2ex 0 2ex 1%; }
  div.section table.fields { width: 90%;
                             margin: 1.5ex 0 1.5ex 10%; }
  div.section table.toc { width: 95%;
                          margin: 1.5ex 0 1.5ex 5%; }
  div.timestamp { text-align: center;
                  font-size: 69%;
                  margin: 1.5ex 0 1.5ex 0; }

  h1 { text-align: center; }
  h3 { font-size: medium;
       margin: 4ex 0 1.5ex 0; }

  p { text-align: justify; }

  pre.colored { color: blue; }

  span.keyword { font-family: monospace;
                 text-align: left;
                 white-space: pre;
                 color: darkblue; }

  table.fields td.val { font-weight: bold;
                        text-align: right;
                        width: 30%;
                        vertical-align: baseline;
                        padding: 1ex 1em 1ex 0; }
  table.fields td.desc { vertical-align: baseline;
                         padding: 1ex 0 1ex 1em; }
  table.fields td.desc p:first-child { margin: 0; }
  table.fields td.desc p { margin: 1.5ex 0 0 0; }
  table.index { margin: 6ex auto 6ex auto;
                border: 0;
                border-collapse: separate;
                border-spacing: 1em 0.3ex; }
  table.index tr { padding: 0; }
  table.index td { padding: 0; }
  table.index-toc-link { width: 100%;
                         border: 0;
                         border-spacing: 0;
                         margin: 1ex 0 1ex 0; }
  table.index-toc-link td.left { padding: 0 0.5em 0 0.5em;
                                 font-size: 83%;
                                 text-align: left; }
  table.index-toc-link td.middle { padding: 0 0.5em 0 0.5em;
                                   font-size: 83%;
                                   text-align: center; }
  table.index-toc-link td.right { padding: 0 0.5em 0 0.5em;
                                  font-size: 83%;
                                  text-align: right; }
  table.synopsis { margin: 6ex auto 6ex auto;
                   border: 0;
                   border-collapse: separate;
                   border-spacing: 2em 0.6ex; }
  table.synopsis tr { padding: 0; }
  table.synopsis td { padding: 0; }
  table.toc td.link { width: 30%;
                      text-align: right;
                      vertical-align: baseline;
                      padding: 1ex 1em 1ex 0; }
  table.toc td.desc { vertical-align: baseline;
                      padding: 1ex 0 1ex 1em;
                      text-align: left; }
  table.toc td.desc p:first-child { margin: 0;
                                    text-align: left; }
  table.toc td.desc p { margin: 1.5ex 0 0 0;
                        text-align: left; }

</style>
</head>
<body>
"""

html_header_3l = """
<table class="index-toc-link"><tr><td class="left">[<a href="\
"""

html_header_3r = """
<table class="index-toc-link"><tr><td class="right">[<a href="\
"""

html_header_4 = """\
">Index</a>]</td><td class="right">[<a href="\
"""

html_header_5t = """\
">TOC</a>]</td></tr></table>
<h1>\
"""

html_header_5i = """\
">Index</a>]</td></tr></table>
<h1>\
"""

html_header_6 = """\
 API Reference</h1>
"""


# The HTML footer used by all generated pages.
html_footer = """\
</body>
</html>\
"""

# The header and footer used for each section.
section_title_header1 = '<h1 id="'
section_title_header2 = '">'
section_title_footer = "</h1>"

# The header and footer used for code segments.
code_header = '<pre class="colored">'
code_footer = '</pre>'

# Paragraph header and footer.
para_header = "<p>"
para_footer = "</p>"

# Block header and footer.
block_header        = '<div class="section">'
block_footer_start  = """\
<hr>
<table class="index-toc-link"><tr><td class="left">[<a href="\
"""
block_footer_middle = """\
">Index</a>]</td>\
<td class="middle">[<a href="#">Top</a>]</td>\
<td class="right">[<a href="\
"""
block_footer_end    = """\
">TOC</a>]</td></tr></table></div>
"""

# Description header/footer.
description_header = ""
description_footer = ""

# Marker header/inter/footer combination.
marker_header = "<h4>"
marker_inter  = "</h4>"
marker_footer = ""

# Header location header/footer.
header_location_header = "<p>"
header_location_footer = "</p>"

# Source code extracts header/footer.
source_header = "<pre>"
source_footer = "</pre>"

# Chapter header/inter/footer.
chapter_header = """\
<div class="section">
<h2>\
"""
chapter_inter  = '</h2>'
chapter_footer = '</div>'

# Index footer.
index_footer_start = """\
<hr>
<table class="index-toc-link"><tr><td class="right">[<a href="\
"""
index_footer_end = """\
">TOC</a>]</td></tr></table>
"""

# TOC footer.
toc_footer_start = """\
<hr>
<table class="index-toc-link"><tr><td class="left">[<a href="\
"""
toc_footer_end = """\
">Index</a>]</td></tr></table>
"""


# Source language keyword coloration and styling.
keyword_prefix = '<span class="keyword">'
keyword_suffix = '</span>'

section_synopsis_header = '<h2>Synopsis</h2>'
section_synopsis_footer = ''


# Translate a single line of source to HTML.  This converts `<', `>', and
# `&' into `&lt;',`&gt;', and `&amp;'.
#
def  html_quote( line ):
    result = string.replace( line,   "&", "&amp;" )
    result = string.replace( result, "<", "&lt;"  )
    result = string.replace( result, ">", "&gt;"  )
    return result


################################################################
##
##  HTML FORMATTER CLASS
##
class  HtmlFormatter( Formatter ):

    def  __init__( self, processor, project_title, file_prefix ):
        Formatter.__init__( self, processor )

        global html_header_1
        global html_header_2
        global html_header_3l, html_header_3r
        global html_header_4
        global html_header_5t, html_header_5i
        global html_header_6
        global html_footer

        if file_prefix:
            file_prefix = file_prefix + "-"
        else:
            file_prefix = ""

        self.headers       = processor.headers
        self.project_title = project_title
        self.file_prefix   = file_prefix
        self.html_header   = (
          html_header_1 + project_title
          + html_header_2
          + html_header_3l + file_prefix + "index.html"
          + html_header_4 + file_prefix + "toc.html"
          + html_header_5t + project_title
          + html_header_6 )
        self.html_index_header = (
          html_header_1 + project_title
          + html_header_2
          + html_header_3r + file_prefix + "toc.html"
          + html_header_5t + project_title
          + html_header_6 )
        self.html_toc_header = (
          html_header_1 + project_title
          + html_header_2
          + html_header_3l + file_prefix + "index.html"
          + html_header_5i + project_title
          + html_header_6 )
        self.html_footer = (
          '<div class="timestamp">generated on '
          + time.asctime( time.localtime( time.time() ) )
          + "</div>" + html_footer )

        self.columns = 3

    def  make_section_url( self, section ):
        return self.file_prefix + section.name + ".html"

    def  make_block_url( self, block, name = None ):
        if name == None:
            name = block.name

        try:
            section_url = self.make_section_url( block.section )
        except:
            # we already have a section
            section_url = self.make_section_url( block )

        return section_url + "#" + name

    def  make_html_word( self, word ):
        """Analyze a simple word to detect cross-references and markup."""
        # handle cross-references
        m = re_crossref.match( word )
        if m:
            try:
                name = m.group( 'name' )
                rest = m.group( 'rest' )
                block = self.identifiers[name]
                url   = self.make_block_url( block )
                # display `foo[bar]' as `foo'
                name = re.sub( r'\[.*\]', '', name )
                # normalize url, following RFC 3986
                url = string.replace( url, "[", "(" )
                url = string.replace( url, "]", ")" )

                try:
                    # for sections, display title
                    url = ( '&lsquo;<a href="' + url + '">'
                            + block.title + '</a>&rsquo;'
                            + rest )
                except:
                    url = ( '<a href="' + url + '">'
                            + name + '</a>'
                            + rest )

                return url
            except:
                # we detected a cross-reference to an unknown item
                sys.stderr.write( "WARNING: undefined cross reference"
                                  + " '" + name + "'.\n" )
                return '?' + name + '?' + rest

        # handle markup for italic and bold
        m = re_italic.match( word )
        if m:
            name = m.group( 1 )
            rest = m.group( 2 )
            return '<i>' + name + '</i>' + rest

        m = re_bold.match( word )
        if m:
            name = m.group( 1 )
            rest = m.group( 2 )
            return '<b>' + name + '</b>' + rest

        return html_quote( word )

    def  make_html_para( self, words ):
        """Convert words of a paragraph into tagged HTML text.  Also handle
           cross references."""
        line = ""
        if words:
            line = self.make_html_word( words[0] )
            for word in words[1:]:
                line = line + " " + self.make_html_word( word )
            # handle hyperlinks
            line = re_url.sub( r'<a href="\1">\1</a>', line )
            # convert `...' quotations into real left and right single quotes
            line = re.sub( r"(^|\W)`(.*?)'(\W|$)",
                           r'\1&lsquo;\2&rsquo;\3',
                           line )
            # convert tilde into non-breakable space
            line = string.replace( line, "~", "&nbsp;" )

        return para_header + line + para_footer

    def  make_html_code( self, lines ):
        """Convert a code sequence to HTML."""
        line = code_header + '\n'
        for l in lines:
            line = line + html_quote( l ).rstrip() + '\n'

        return line + code_footer

    def  make_html_items( self, items ):
        """Convert a field's content into HTML."""
        lines = []
        for item in items:
            if item.lines:
                lines.append( self.make_html_code( item.lines ) )
            else:
                lines.append( self.make_html_para( item.words ) )

        return string.join( lines, '\n' )

    def  print_html_items( self, items ):
        print self.make_html_items( items )

    def  print_html_field( self, field ):
        if field.name:
            print( '<table><tr valign="top"><td><b>'
                   + field.name
                   + "</b></td><td>" )

        print self.make_html_items( field.items )

        if field.name:
            print "</td></tr></table>"

    def  html_source_quote( self, line, block_name = None ):
        result = ""
        while line:
            m = re_source_crossref.match( line )
            if m:
                name   = m.group( 2 )
                prefix = html_quote( m.group( 1 ) )
                length = len( m.group( 0 ) )

                if name == block_name:
                    # this is the current block name, if any
                    result = result + prefix + '<b>' + name + '</b>'
                elif re_source_keywords.match( name ):
                    # this is a C keyword
                    result = ( result + prefix
                               + keyword_prefix + name + keyword_suffix )
                elif name in self.identifiers:
                    # this is a known identifier
                    block = self.identifiers[name]
                    id = block.name

                    # link to a field ID if possible
                    try:
                      for markup in block.markups:
                          if markup.tag == 'values':
                              for field in markup.fields:
                                  if field.name:
                                      id = name

                      result = ( result + prefix
                                 + '<a href="'
                                 + self.make_block_url( block, id )
                                 + '">' + name + '</a>' )
                    except:
                      # sections don't have `markups'; however, we don't
                      # want references to sections here anyway
                      result = result + html_quote( line[:length] )

                else:
                    result = result + html_quote( line[:length] )

                line = line[length:]
            else:
                result = result + html_quote( line )
                line   = []

        return result

    def  print_html_field_list( self, fields ):
        print '<table class="fields">'
        for field in fields:
            print ( '<tr><td class="val" id="' + field.name + '">'
                    + field.name
                    + '</td><td class="desc">' )
            self.print_html_items( field.items )
            print "</td></tr>"
        print "</table>"

    def  print_html_markup( self, markup ):
        table_fields = []
        for field in markup.fields:
            if field.name:
                # We begin a new series of field or value definitions.  We
                # record them in the `table_fields' list before outputting
                # all of them as a single table.
                table_fields.append( field )
            else:
                if table_fields:
                    self.print_html_field_list( table_fields )
                    table_fields = []

                self.print_html_items( field.items )

        if table_fields:
            self.print_html_field_list( table_fields )

    #
    # formatting the index
    #
    def  index_enter( self ):
        print self.html_index_header
        self.index_items = {}

    def  index_name_enter( self, name ):
        block = self.identifiers[name]
        url   = self.make_block_url( block )
        self.index_items[name] = url

    def  index_exit( self ):
        # `block_index' already contains the sorted list of index names
        count = len( self.block_index )
        rows  = ( count + self.columns - 1 ) // self.columns

        print '<table class="index">'
        for r in range( rows ):
            line = "<tr>"
            for c in range( self.columns ):
                i = r + c * rows
                if i < count:
                    bname = self.block_index[r + c * rows]
                    url   = self.index_items[bname]
                    # display `foo[bar]' as `foo (bar)'
                    bname = string.replace( bname, "[", " (" )
                    bname = string.replace( bname, "]", ")"  )
                    # normalize url, following RFC 3986
                    url = string.replace( url, "[", "(" )
                    url = string.replace( url, "]", ")" )
                    line  = ( line + '<td><a href="' + url + '">'
                              + bname + '</a></td>' )
                else:
                    line = line + '<td></td>'
            line = line + "</tr>"
            print line

        print "</table>"

        print( index_footer_start
               + self.file_prefix + "toc.html"
               + index_footer_end )

        print self.html_footer

        self.index_items = {}

    def  index_dump( self, index_filename = None ):
        if index_filename == None:
            index_filename = self.file_prefix + "index.html"

        Formatter.index_dump( self, index_filename )

    #
    # formatting the table of contents
    #
    def  toc_enter( self ):
        print self.html_toc_header
        print "<h1>Table of Contents</h1>"

    def  toc_chapter_enter( self, chapter ):
        print chapter_header + string.join( chapter.title ) + chapter_inter
        print '<table class="toc">'

    def  toc_section_enter( self, section ):
        print ( '<tr><td class="link">'
                + '<a href="' + self.make_section_url( section ) + '">'
                + section.title + '</a></td><td class="desc">' )
        print self.make_html_para( section.abstract )

    def  toc_section_exit( self, section ):
        print "</td></tr>"

    def  toc_chapter_exit( self, chapter ):
        print "</table>"
        print chapter_footer

    def  toc_index( self, index_filename ):
        print( chapter_header
               + '<a href="' + index_filename + '">Global Index</a>'
               + chapter_inter + chapter_footer )

    def  toc_exit( self ):
        print( toc_footer_start
               + self.file_prefix + "index.html"
               + toc_footer_end )

        print self.html_footer

    def  toc_dump( self, toc_filename = None, index_filename = None ):
        if toc_filename == None:
            toc_filename = self.file_prefix + "toc.html"

        if index_filename == None:
            index_filename = self.file_prefix + "index.html"

        Formatter.toc_dump( self, toc_filename, index_filename )

    #
    # formatting sections
    #
    def  section_enter( self, section ):
        print self.html_header

        print ( section_title_header1 + section.name + section_title_header2
                + section.title
                + section_title_footer )

        maxwidth = 0
        for b in section.blocks.values():
            if len( b.name ) > maxwidth:
                maxwidth = len( b.name )

        width = 70  # XXX magic number
        if maxwidth > 0:
            # print section synopsis
            print section_synopsis_header
            print '<table class="synopsis">'

            columns = width // maxwidth
            if columns < 1:
                columns = 1

            count = len( section.block_names )
            # don't handle last entry if it is empty
            if section.block_names[-1] == "/empty/":
                count -= 1
            rows  = ( count + columns - 1 ) // columns

            for r in range( rows ):
                line = "<tr>"
                for c in range( columns ):
                    i = r + c * rows
                    line = line + '<td>'
                    if i < count:
                        name = section.block_names[i]
                        if name == "/empty/":
                            # it can happen that a complete row is empty, and
                            # without a proper `filler' the browser might
                            # collapse the row to a much smaller height (or
                            # even omit it completely)
                            line = line + "&nbsp;"
                        else:
                            url = name
                            # display `foo[bar]' as `foo'
                            name = re.sub( r'\[.*\]', '', name )
                            # normalize url, following RFC 3986
                            url = string.replace( url, "[", "(" )
                            url = string.replace( url, "]", ")" )
                            line = ( line + '<a href="#' + url + '">'
                                     + name + '</a>' )

                    line = line + '</td>'
                line = line + "</tr>"
                print line

            print "</table>"
            print section_synopsis_footer

        print description_header
        print self.make_html_items( section.description )
        print description_footer

    def  block_enter( self, block ):
        print block_header

        # place html anchor if needed
        if block.name:
            url = block.name
            # display `foo[bar]' as `foo'
            name = re.sub( r'\[.*\]', '', block.name )
            # normalize url, following RFC 3986
            url = string.replace( url, "[", "(" )
            url = string.replace( url, "]", ")" )
            print( '<h3 id="' + url + '">' + name + '</h3>' )

        # dump the block C source lines now
        if block.code:
            header = ''
            for f in self.headers.keys():
                if block.source.filename.find( f ) >= 0:
                    header = self.headers[f] + ' (' + f + ')'
                    break

#           if not header:
#               sys.stderr.write(
#                 "WARNING: No header macro for"
#                 + " '" + block.source.filename + "'.\n" )

            if header:
                print ( header_location_header
                        + 'Defined in ' + header + '.'
                        + header_location_footer )

            print source_header
            for l in block.code:
                print self.html_source_quote( l, block.name )
            print source_footer

    def  markup_enter( self, markup, block ):
        if markup.tag == "description":
            print description_header
        else:
            print marker_header + markup.tag + marker_inter

        self.print_html_markup( markup )

    def  markup_exit( self, markup, block ):
        if markup.tag == "description":
            print description_footer
        else:
            print marker_footer

    def  block_exit( self, block ):
        print( block_footer_start + self.file_prefix + "index.html"
               + block_footer_middle + self.file_prefix + "toc.html"
               + block_footer_end )

    def  section_exit( self, section ):
        print html_footer

    def  section_dump_all( self ):
        for section in self.sections:
            self.section_dump( section,
                               self.file_prefix + section.name + '.html' )

# eof
@


1.5
log
@fastmerge
@
text
@d1 16
a16 2
#  ToHTML (c) 2002, 2003, 2005, 2006, 2007, 2008
#    David Turner <david@@freetype.org>
d25 1
a25 1
# The following defines the HTML header used by all generated pages.
d38 4
d44 28
a71 1
         background: #FFFFFF; }
a73 5
  h1 { text-align: center; }
  li { text-align: justify; }
  td { padding: 0 0.5em 0 0.5em; }
  td.left { padding: 0 0.5em 0 0.5em;
            text-align: left; }
d75 1
a75 3
  a:link { color: #0000EF; }
  a:visited { color: #51188E; }
  a:hover { color: #FF0000; }
d82 45
a126 1
  pre.colored { color: blue; }
a127 1
  ul.empty { list-style-type: none; }
d133 2
a134 2
html_header_3 = """
<table align=center><tr><td><font size=-1>[<a href="\
d137 2
a138 3
html_header_3i = """
<table align=center><tr><td width="100%"></td>
<td><font size=-1>[<a href="\
d142 1
a142 3
">Index</a>]</font></td>
<td width="100%"></td>
<td><font size=-1>[<a href="\
d145 3
a147 3
html_header_5 = """\
">TOC</a>]</font></td></tr></table>
<center><h1>\
d150 3
a152 4
html_header_5t = """\
">Index</a>]</font></td>
<td width="100%"></td></tr></table>
<center><h1>\
d156 1
a156 1
 API Reference</h1></center>
d167 3
a169 2
section_title_header = "<center><h1>"
section_title_footer = "</h1></center>"
d180 1
a180 1
block_header        = '<table align=center width="75%"><tr><td>'
d182 2
a183 3
</td></tr></table>
<hr width="75%">
<table align=center width="75%"><tr><td><font size=-2>[<a href="\
d186 3
a188 3
">Index</a>]</font></td>
<td width="100%"></td>
<td><font size=-2>[<a href="\
d191 1
a191 1
">TOC</a>]</font></td></tr></table>
d195 2
a196 2
description_header = '<table align=center width="87%"><tr><td>'
description_footer = "</td></tr></table><br>"
d199 3
a201 3
marker_header = '<table align=center width="87%" cellpadding=5><tr bgcolor="#EEEEFF"><td><em><b>'
marker_inter  = "</b></em></td></tr><tr><td>"
marker_footer = "</td></tr></table>"
d204 2
a205 2
header_location_header = '<table align=center width="87%"><tr><td>'
header_location_footer = "</td></tr></table><br>"
d208 2
a209 2
source_header = '<table align=center width="87%"><tr bgcolor="#D6E8FF"><td><pre>\n'
source_footer = "\n</pre></table><br>"
d212 6
a217 3
chapter_header = '<br><table align=center width="75%"><tr><td><h2>'
chapter_inter  = '</h2><ul class="empty"><li>'
chapter_footer = '</li></ul></td></tr></table>'
d222 1
a222 2
<table><tr><td width="100%"></td>
<td><font size=-2>[<a href="\
d225 1
a225 1
">TOC</a>]</font></td></tr></table>
d231 1
a231 1
<table><tr><td><font size=-2>[<a href="\
d234 1
a234 3
">Index</a>]</font></td>
<td width="100%"></td>
</tr></table>
d238 1
a238 1
# source language keyword coloration/styling
d246 3
a248 2
# Translate a single line of source to HTML.  This will convert
# a "<" into "&lt.", ">" into "&gt.", etc.
d250 3
a252 3
    result = string.replace( line, "&", "&amp;" )
    result = string.replace( result, "<", "&lt;" )
    result = string.replace( result, ">", "&gt;" )
d256 4
a259 20
# same as 'html_quote', but ignores left and right brackets
def  html_quote0( line ):
    return string.replace( line, "&", "&amp;" )


def  dump_html_code( lines, prefix = "" ):
    # clean the last empty lines
    l = len( self.lines )
    while l > 0 and string.strip( self.lines[l - 1] ) == "":
        l = l - 1

    # The code footer should be directly appended to the last code
    # line to avoid an additional blank line.
    print prefix + code_header,
    for line in self.lines[0 : l + 1]:
        print '\n' + prefix + html_quote( line ),
    print prefix + code_footer,



d265 7
a271 2
        global html_header_1, html_header_2, html_header_3
        global html_header_4, html_header_5, html_footer
d278 26
a303 25
        self.headers           = processor.headers
        self.project_title     = project_title
        self.file_prefix       = file_prefix
        self.html_header       = html_header_1 + project_title +              \
                                 html_header_2 +                              \
                                 html_header_3 + file_prefix + "index.html" + \
                                 html_header_4 + file_prefix + "toc.html" +   \
                                 html_header_5 + project_title +              \
                                 html_header_6

        self.html_index_header = html_header_1 + project_title +             \
                                 html_header_2 +                             \
                                 html_header_3i + file_prefix + "toc.html" + \
                                 html_header_5 + project_title +             \
                                 html_header_6

        self.html_toc_header   = html_header_1 + project_title +              \
                                 html_header_2 +                              \
                                 html_header_3 + file_prefix + "index.html" + \
                                 html_header_5t + project_title +             \
                                 html_header_6

        self.html_footer       = "<center><font size=""-2"">generated on " +     \
                                 time.asctime( time.localtime( time.time() ) ) + \
                                 "</font></center>" + html_footer
d310 9
a318 10
    def  make_block_url( self, block ):
        return self.make_section_url( block.section ) + "#" + block.name

    def  make_html_words( self, words ):
        """ convert a series of simple words into some HTML text """
        line = ""
        if words:
            line = html_quote( words[0] )
            for w in words[1:]:
                line = line + " " + html_quote( w )
d320 1
a320 1
        return line
d323 2
a324 2
        """analyze a simple word to detect cross-references and styling"""
        # look for cross-references
d328 2
a329 2
                name = m.group( 1 )
                rest = m.group( 2 )
d332 17
a348 1
                return '<a href="' + url + '">' + name + '</a>' + rest
d351 2
a352 2
                sys.stderr.write( \
                   "WARNING: undefined cross reference '" + name + "'.\n" )
d355 1
a355 1
        # look for italics and bolds
d359 1
a359 1
            rest = m.group( 3 )
d365 1
a365 1
            rest = m.group( 3 )
d371 2
a372 1
        """ convert words of a paragraph into tagged HTML text, handle xrefs """
d378 2
d381 2
a382 2
            line = re.sub( r"(^|\W)`(.*?)'(\W|$)",  \
                           r'\1&lsquo;\2&rsquo;\3', \
d390 1
a390 1
        """ convert a code sequence to HTML """
d393 1
a393 1
            line = line + html_quote( l ) + '\n'
d398 1
a398 1
        """ convert a field's content into some valid HTML """
d413 3
a415 1
            print "<table><tr valign=top><td><b>" + field.name + "</b></td><td>"
d436 3
a438 2
                    result = result + prefix + keyword_prefix + name + keyword_suffix
                elif self.identifiers.has_key( name ):
d441 19
a459 2
                    result = result + prefix + '<a href="' + \
                             self.make_block_url( block ) + '">' + name + '</a>'
d471 1
a471 2
        print "<p></p>"
        print "<table cellpadding=3 border=0>"
d473 3
a475 6
            if len( field.name ) > 22:
              print "<tr valign=top><td colspan=0><b>" + field.name + "</b></td></tr>"
              print "<tr valign=top><td></td><td>"
            else:
              print "<tr valign=top><td><b>" + field.name + "</b></td><td>"

d484 3
a486 4
                # we begin a new series of field or value definitions, we
                # will record them in the 'table_fields' list before outputting
                # all of them as a single table
                #
d499 1
a499 1
    #  Formatting the index
d511 1
a511 1
        # block_index already contains the sorted list of index names
d513 1
a513 1
        rows  = ( count + self.columns - 1 ) / self.columns
d515 1
a515 1
        print "<table align=center border=0 cellpadding=0 cellspacing=0>"
d523 8
a530 1
                    line = line + '<td><a href="' + url + '">' + bname + '</a></td>'
d538 3
a540 3
        print index_footer_start +            \
              self.file_prefix + "toc.html" + \
              index_footer_end
d553 1
a553 1
    #  Formatting the table of content
d557 1
a557 1
        print "<center><h1>Table of Contents</h1></center>"
d560 2
a561 2
        print  chapter_header + string.join( chapter.title ) + chapter_inter
        print "<table cellpadding=5>"
d564 3
a566 4
        print '<tr valign=top><td class="left">'
        print '<a href="' + self.make_section_url( section ) + '">' + \
               section.title + '</a></td><td>'

d577 3
a579 3
        print chapter_header +                                      \
              '<a href="' + index_filename + '">Global Index</a>' + \
              chapter_inter + chapter_footer
d582 3
a584 3
        print toc_footer_start +                \
              self.file_prefix + "index.html" + \
              toc_footer_end
d598 1
a598 1
    #  Formatting sections
d603 3
a605 3
        print section_title_header
        print section.title
        print section_title_footer
d613 1
a613 1
        if maxwidth <> 0:
d616 1
a616 1
            print "<table align=center cellspacing=5 cellpadding=0 border=0>"
d618 1
a618 1
            columns = width / maxwidth
d623 4
a626 1
            rows  = ( count + columns - 1 ) / columns
d632 1
a632 1
                    line = line + '<td></td><td>'
d635 15
a649 1
                        line = line + '<a href="#' + name + '">' + name + '</a>'
d655 1
a655 1
            print "</table><br><br>"
d667 7
a673 1
            print '<h4><a name="' + block.name + '">' + block.name + '</a></h4>'
d681 2
a682 2
                    break;
                
d684 3
a686 2
#               sys.stderr.write( \
#                 'WARNING: No header macro for ' + block.source.filename + '.\n' )
d689 3
a691 3
                print header_location_header
                print 'Defined in ' + header + '.'
                print header_location_footer
d713 3
a715 3
        print block_footer_start + self.file_prefix + "index.html" + \
              block_footer_middle + self.file_prefix + "toc.html" +  \
              block_footer_end
d722 2
a723 1
            self.section_dump( section, self.file_prefix + section.name + '.html' )
@


1.4
log
@Merge freetype 2.3.6
@
text
@d18 2
a19 1
<title>"""
d21 2
a22 1
html_header_2= """ API Reference</title>
d50 5
a54 1
<center><h1>"""
d56 24
a79 1
html_header_3=""" API Reference</h1></center>
d86 2
a87 1
</html>"""
d143 1
a143 1
<td><font size=-2>[<a href="
d149 11
d203 2
a204 1
        global html_header_1, html_header_2, html_header_3, html_footer
d211 25
a235 9
        self.headers       = processor.headers
        self.project_title = project_title
        self.file_prefix   = file_prefix
        self.html_header   = html_header_1 + project_title + html_header_2 + \
                             project_title + html_header_3

        self.html_footer = "<center><font size=""-2"">generated on " +      \
                            time.asctime( time.localtime( time.time() ) ) + \
                           "</font></center>" + html_footer
d288 1
a288 1
        """ convert a paragraph's words into tagged HTML text, handle xrefs """
d298 2
d401 1
a401 1
        print self.html_header
d434 2
d448 1
a448 1
        print self.html_header
d467 1
a467 1
        print  chapter_footer
d475 4
@


1.3
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d1 1
a1 1
#  ToHTML (c) 2002, 2003, 2005, 2006, 2007
d10 1
a11 1
#
d29 3
a31 1
  td { padding: 0 0.5em 0 0.5em }
a53 1

a54 1
#
a59 1
#
a63 1
#
a67 1
#
a71 1
#
d76 1
a76 1
<table align=center width="75%"><tr><td><font size=-2>[<a href="
d81 1
a81 1
<td><font size=-2>[<a href="
a87 1
#
a91 1
#
d96 4
a100 1
#
a104 1
#
a120 1
#
d127 1
d130 2
a131 3
#
def html_quote( line ):
    result = string.replace( line,   "&", "&amp;" )
d138 1
a138 2
#
def html_quote0( line ):
d142 1
a142 1
def dump_html_code( lines, prefix = "" ):
a143 1
    #
a149 1
    #
d151 2
a152 2
    for line in self.lines[0 : l+1]:
        print '\n' + prefix + html_quote(line),
d157 1
a157 3
class HtmlFormatter(Formatter):

    def __init__( self, processor, project_title, file_prefix ):
d159 1
d169 1
a183 1

a186 1

a196 1

a199 1
        #
d203 2
a204 2
                name = m.group(1)
                rest = m.group(2)
d217 2
a218 2
            name = m.group(1)
            rest = m.group(3)
d223 2
a224 2
            name = m.group(1)
            rest = m.group(3)
d227 1
a227 2
        return html_quote(word)

d237 2
a238 2
            line = re.sub( r"(^|\W)`(.*?)'(\W|$)",
                           r'\1&lsquo;\2&rsquo;\3',
a242 1

a250 1

a261 1

d265 1
a265 2

    def print_html_field( self, field ):
d267 1
a267 1
            print "<table><tr valign=top><td><p><b>"+field.name+"</b></p></td><td>"
d274 1
a274 2

    def html_source_quote( self, line, block_name = None ):
d279 3
a281 3
                name   = m.group(2)
                prefix = html_quote( m.group(1) )
                length = len( m.group(0) )
d286 1
a286 2

                elif re_source_keywords.match(name):
d289 1
a289 2

                elif self.identifiers.has_key(name):
d293 1
a293 1
                             self.make_block_url(block) + '">' + name + '</a>'
d295 1
a295 1
                    result = result + html_quote(line[:length])
d299 1
a299 1
                result = result + html_quote(line)
d304 2
a305 2

    def print_html_field_list( self, fields ):
d308 2
a309 2
            if len(field.name) > 22:
              print "<tr valign=top><td colspan=0><b>"+field.name+"</b></td></tr>"
d318 1
a318 2

    def print_html_markup( self, markup ):
a326 1

a339 1

a349 1

d352 1
a352 1
        rows  = (count + self.columns - 1) / self.columns
d355 1
a355 1
        for r in range(rows):
d357 2
a358 2
            for c in range(self.columns):
                i = r + c*rows
d370 1
a370 1
        print index_footer_start + \
a376 1

d390 1
a390 1
        print  chapter_header + string.join(chapter.title) + chapter_inter
d394 1
a394 1
        print "<tr valign=top><td>"
d408 3
a410 1
        print chapter_header + '<a href="' + index_filename + '">Global Index</a>' + chapter_inter + chapter_footer
d439 1
a439 1
        width  = 70  # XXX magic number
d481 15
a500 1

d517 1
a517 1
              block_footer_middle + self.file_prefix + "toc.html" + \
a519 1

d523 1
a523 2

    def section_dump_all( self ):
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d1 3
d113 10
d376 1
a376 1
        rows  = (count + self.columns - 1)/self.columns
d393 5
a397 1
        print self.html_footer
d538 1
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
<!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN"
d14 1
a14 1
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
d26 1
d73 14
a86 2
block_header = '<table align=center width="75%"><tr><td>'
block_footer = '</td></tr></table><hr width="75%">'
d170 1
a170 1
        self.html_footer = "<center><font size=""-2"">generated on " +   \
d204 1
a204 1
                block = self.identifiers[ name ]
d208 3
d217 2
a218 1
            return '<i>'+name+'</i>'
d223 2
a224 1
            return '<b>'+name+'</b>'
d236 4
d241 1
a241 1
        return "<p>" + line + "</p>"
d271 1
a271 1
            print "<table><tr valign=top><td><b>"+field.name+"</b></td><td>"
d302 1
a302 1
                    result = result + html_quote(line[ : length ])
d304 1
a304 1
                line = line[ length : ]
d313 1
a313 1
        print "<table cellpadding=3>"
d315 6
a320 1
            print "<tr valign=top><td><b>" + field.name + "</b></td><td>"
d355 1
a355 1
        block = self.identifiers[ name ]
d357 1
a357 1
        self.index_items[ name ] = url
d371 2
a372 2
                    bname = self.block_index[ r + c*rows ]
                    url   = self.index_items[ bname ]
a439 4
        # print section synopsys
        print section_synopsis_header
        print "<table align=center cellspacing=5 cellpadding=0 border=0>"

d442 2
a443 2
            if len(b.name) > maxwidth:
                maxwidth = len(b.name)
d446 24
a469 3
        columns = width / maxwidth
        if columns < 1:
            columns = 1
d471 2
a472 17
        count   = len(section.block_names)
        rows    = (count + columns-1)/columns
        for r in range(rows):
            line = "<tr>"
            for c in range(columns):
                i = r + c*rows
                line = line + '<td></td><td>'
                if i < count:
                    name = section.block_names[i]
                    line = line + '<a href="#' + name + '">' + name + '</a>'

                line = line + '</td>'
            line = line + "</tr>"
            print line

        print "</table><br><br>"
        print section_synopsis_footer
d508 3
a510 1
        print block_footer
d520 1
a520 1
        
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@a0 3
#  ToHTML (c) 2002, 2003, 2005, 2006, 2007
#    David Turner <david@@freetype.org>

d10 1
a10 1
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
d14 1
a14 1
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
a25 1
  td { padding: 0 0.5em 0 0.5em }
d72 2
a73 14
block_header        = '<table align=center width="75%"><tr><td>'
block_footer_start  = """\
</td></tr></table>
<hr width="75%">
<table align=center width="75%"><tr><td><font size=-2>[<a href="
"""
block_footer_middle = """\
">Index</a>]</font></td>
<td width="100%"></td>
<td><font size=-2>[<a href="
"""
block_footer_end    = """\
">TOC</a>]</font></td></tr></table>
"""
a96 10
# Index footer.
index_footer_start = """\
<hr>
<table><tr><td width="100%"></td>
<td><font size=-2>[<a href="
"""
index_footer_end = """\
">TOC</a>]</font></td></tr></table>
"""

d157 1
a157 1
        self.html_footer = "<center><font size=""-2"">generated on " +      \
d191 1
a191 1
                block = self.identifiers[name]
a194 3
                # we detected a cross-reference to an unknown item
                sys.stderr.write( \
                   "WARNING: undefined cross reference '" + name + "'.\n" )
d201 1
a201 2
            rest = m.group(3)
            return '<i>' + name + '</i>' + rest
d206 1
a206 2
            rest = m.group(3)
            return '<b>' + name + '</b>' + rest
a217 4
            # convert `...' quotations into real left and right single quotes
            line = re.sub( r"(^|\W)`(.*?)'(\W|$)",
                           r'\1&lsquo;\2&rsquo;\3',
                           line )
d219 1
a219 1
        return para_header + line + para_footer
d249 1
a249 1
            print "<table><tr valign=top><td><p><b>"+field.name+"</b></p></td><td>"
d280 1
a280 1
                    result = result + html_quote(line[:length])
d282 1
a282 1
                line = line[length:]
d291 1
a291 1
        print "<table cellpadding=3 border=0>"
d293 1
a293 6
            if len(field.name) > 22:
              print "<tr valign=top><td colspan=0><b>"+field.name+"</b></td></tr>"
              print "<tr valign=top><td></td><td>"
            else:
              print "<tr valign=top><td><b>" + field.name + "</b></td><td>"

d328 1
a328 1
        block = self.identifiers[name]
d330 1
a330 1
        self.index_items[name] = url
d336 1
a336 1
        rows  = (count + self.columns - 1) / self.columns
d344 2
a345 2
                    bname = self.block_index[r + c * rows]
                    url   = self.index_items[bname]
d353 1
a353 5

        print index_footer_start + \
              self.file_prefix + "toc.html" + \
              index_footer_end

d413 4
d419 2
a420 2
            if len( b.name ) > maxwidth:
                maxwidth = len( b.name )
d423 3
a425 24
        if maxwidth <> 0:
            # print section synopsis
            print section_synopsis_header
            print "<table align=center cellspacing=5 cellpadding=0 border=0>"

            columns = width / maxwidth
            if columns < 1:
                columns = 1

            count = len( section.block_names )
            rows  = ( count + columns - 1 ) / columns

            for r in range( rows ):
                line = "<tr>"
                for c in range( columns ):
                    i = r + c * rows
                    line = line + '<td></td><td>'
                    if i < count:
                        name = section.block_names[i]
                        line = line + '<a href="#' + name + '">' + name + '</a>'

                    line = line + '</td>'
                line = line + "</tr>"
                print line
d427 17
a443 2
            print "</table><br><br>"
            print section_synopsis_footer
d479 1
a479 3
        print block_footer_start + self.file_prefix + "index.html" + \
              block_footer_middle + self.file_prefix + "toc.html" + \
              block_footer_end
d489 1
a489 2

# eof
@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d1 1
a1 1
#  ToHTML (c) 2002, 2003, 2005, 2006, 2007, 2008
a9 1

d11 1
d29 1
a29 3
  td { padding: 0 0.5em 0 0.5em; }
  td.left { padding: 0 0.5em 0 0.5em;
            text-align: left; }
d52 1
d54 1
d60 1
d65 1
d70 1
d75 1
d80 1
a80 1
<table align=center width="75%"><tr><td><font size=-2>[<a href="\
d85 1
a85 1
<td><font size=-2>[<a href="\
d92 1
d97 1
a101 4
# Header location header/footer.
header_location_header = '<table align=center width="87%"><tr><td>'
header_location_footer = "</td></tr></table><br>"

d103 1
d108 1
d125 1
a131 1

d134 3
a136 2
def  html_quote( line ):
    result = string.replace( line, "&", "&amp;" )
d143 2
a144 1
def  html_quote0( line ):
d148 1
a148 1
def  dump_html_code( lines, prefix = "" ):
d150 1
d157 1
d159 2
a160 2
    for line in self.lines[0 : l + 1]:
        print '\n' + prefix + html_quote( line ),
d165 3
a167 1
class  HtmlFormatter( Formatter ):
a168 1
    def  __init__( self, processor, project_title, file_prefix ):
a177 1
        self.headers       = processor.headers
d192 1
d196 1
d207 1
d211 1
d215 2
a216 2
                name = m.group( 1 )
                rest = m.group( 2 )
d229 2
a230 2
            name = m.group( 1 )
            rest = m.group( 3 )
d235 2
a236 2
            name = m.group( 1 )
            rest = m.group( 3 )
d239 2
a240 1
        return html_quote( word )
d250 2
a251 2
            line = re.sub( r"(^|\W)`(.*?)'(\W|$)",  \
                           r'\1&lsquo;\2&rsquo;\3', \
d256 1
d265 1
d277 1
d281 2
a282 1
    def  print_html_field( self, field ):
d284 1
a284 1
            print "<table><tr valign=top><td><b>" + field.name + "</b></td><td>"
d291 2
a292 1
    def  html_source_quote( self, line, block_name = None ):
d297 3
a299 3
                name   = m.group( 2 )
                prefix = html_quote( m.group( 1 ) )
                length = len( m.group( 0 ) )
d304 2
a305 1
                elif re_source_keywords.match( name ):
d308 2
a309 1
                elif self.identifiers.has_key( name ):
d313 1
a313 1
                             self.make_block_url( block ) + '">' + name + '</a>'
d315 1
a315 1
                    result = result + html_quote( line[:length] )
d319 1
a319 1
                result = result + html_quote( line )
d324 2
a325 2
    def  print_html_field_list( self, fields ):
        print "<p></p>"
d328 2
a329 2
            if len( field.name ) > 22:
              print "<tr valign=top><td colspan=0><b>" + field.name + "</b></td></tr>"
d338 2
a339 1
    def  print_html_markup( self, markup ):
d348 1
d362 1
d373 1
d376 1
a376 1
        rows  = ( count + self.columns - 1 ) / self.columns
d379 1
a379 1
        for r in range( rows ):
d381 2
a382 2
            for c in range( self.columns ):
                i = r + c * rows
d394 1
a394 1
        print index_footer_start +            \
d401 1
d415 1
a415 1
        print  chapter_header + string.join( chapter.title ) + chapter_inter
d419 1
a419 1
        print '<tr valign=top><td class="left">'
d433 1
a433 3
        print chapter_header +                                      \
              '<a href="' + index_filename + '">Global Index</a>' + \
              chapter_inter + chapter_footer
d462 1
a462 1
        width = 70  # XXX magic number
a503 15
            header = ''
            for f in self.headers.keys():
                if block.source.filename.find( f ) >= 0:
                    header = self.headers[f] + ' (' + f + ')'
                    break;
                
#           if not header:
#               sys.stderr.write( \
#                 'WARNING: No header macro for ' + block.source.filename + '.\n' )

            if header:
                print header_location_header
                print 'Defined in ' + header + '.'
                print header_location_footer

d509 1
d526 1
a526 1
              block_footer_middle + self.file_prefix + "toc.html" +  \
d529 1
d533 2
a534 1
    def  section_dump_all( self ):
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d10 1
a10 1
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
d14 1
a14 1
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
a25 1
  td { padding: 0 0.5em 0 0.5em }
d72 2
a73 14
block_header        = '<table align=center width="75%"><tr><td>'
block_footer_start  = """\
</td></tr></table>
<hr width="75%">
<table align=center width="75%"><tr><td><font size=-2>[<a href="
"""
block_footer_middle = """\
">Index</a>]</font></td>
<td width="100%"></td>
<td><font size=-2>[<a href="
"""
block_footer_end    = """\
">TOC</a>]</font></td></tr></table>
"""
d157 1
a157 1
        self.html_footer = "<center><font size=""-2"">generated on " +      \
d191 1
a191 1
                block = self.identifiers[name]
a194 3
                # we detected a cross-reference to an unknown item
                sys.stderr.write( \
                   "WARNING: undefined cross reference '" + name + "'.\n" )
d201 1
a201 2
            rest = m.group(3)
            return '<i>' + name + '</i>' + rest
d206 1
a206 2
            rest = m.group(3)
            return '<b>' + name + '</b>' + rest
a217 4
            # convert `...' quotations into real left and right single quotes
            line = re.sub( r"(^|\W)`(.*?)'(\W|$)",
                           r'\1&lsquo;\2&rsquo;\3',
                           line )
d219 1
a219 1
        return para_header + line + para_footer
d249 1
a249 1
            print "<table><tr valign=top><td><p><b>"+field.name+"</b></p></td><td>"
d280 1
a280 1
                    result = result + html_quote(line[:length])
d282 1
a282 1
                line = line[length:]
d291 1
a291 1
        print "<table cellpadding=3 border=0>"
d293 1
a293 6
            if len(field.name) > 22:
              print "<tr valign=top><td colspan=0><b>"+field.name+"</b></td></tr>"
              print "<tr valign=top><td></td><td>"
            else:
              print "<tr valign=top><td><b>" + field.name + "</b></td><td>"

d328 1
a328 1
        block = self.identifiers[name]
d330 1
a330 1
        self.index_items[name] = url
d344 2
a345 2
                    bname = self.block_index[r + c * rows]
                    url   = self.index_items[bname]
d413 4
d419 2
a420 2
            if len( b.name ) > maxwidth:
                maxwidth = len( b.name )
d423 3
a425 24
        if maxwidth <> 0:
            # print section synopsis
            print section_synopsis_header
            print "<table align=center cellspacing=5 cellpadding=0 border=0>"

            columns = width / maxwidth
            if columns < 1:
                columns = 1

            count = len( section.block_names )
            rows  = ( count + columns - 1 ) / columns

            for r in range( rows ):
                line = "<tr>"
                for c in range( columns ):
                    i = r + c * rows
                    line = line + '<td></td><td>'
                    if i < count:
                        name = section.block_names[i]
                        line = line + '<a href="#' + name + '">' + name + '</a>'

                    line = line + '</td>'
                line = line + "</tr>"
                print line
d427 17
a443 2
            print "</table><br><br>"
            print section_synopsis_footer
d479 1
a479 3
        print block_footer_start + self.file_prefix + "index.html" + \
              block_footer_middle + self.file_prefix + "toc.html" + \
              block_footer_end
d489 1
a489 1

@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@a0 3
#  ToHTML (c) 2002, 2003, 2005, 2006, 2007, 2008
#    David Turner <david@@freetype.org>

a6 1

d8 1
d15 1
a15 2
<title>\
"""
d17 1
a17 2
html_header_2 = """\
 API Reference</title>
d26 1
a26 3
  td { padding: 0 0.5em 0 0.5em; }
  td.left { padding: 0 0.5em 0 0.5em;
            text-align: left; }
d43 1
a43 21
"""

html_header_3 = """
<table align=center><tr><td><font size=-1>[<a href="\
"""

html_header_3i = """
<table align=center><tr><td width="100%"></td>
<td><font size=-1>[<a href="\
"""

html_header_4 = """\
">Index</a>]</font></td>
<td width="100%"></td>
<td><font size=-1>[<a href="\
"""

html_header_5 = """\
">TOC</a>]</font></td></tr></table>
<center><h1>\
"""
d45 1
a45 4
html_header_5t = """\
">Index</a>]</font></td>
<td width="100%"></td></tr></table>
<center><h1>\
a47 3
html_header_6 = """\
 API Reference</h1></center>
"""
d51 1
d54 1
a54 2
</html>\
"""
d57 1
d62 1
d67 1
d72 1
d77 1
a77 1
<table align=center width="75%"><tr><td><font size=-2>[<a href="\
d82 1
a82 1
<td><font size=-2>[<a href="\
d89 1
d94 1
a98 4
# Header location header/footer.
header_location_header = '<table align=center width="87%"><tr><td>'
header_location_footer = "</td></tr></table><br>"

d100 1
d105 1
a109 21
# Index footer.
index_footer_start = """\
<hr>
<table><tr><td width="100%"></td>
<td><font size=-2>[<a href="\
"""
index_footer_end = """\
">TOC</a>]</font></td></tr></table>
"""

# TOC footer.
toc_footer_start = """\
<hr>
<table><tr><td><font size=-2>[<a href="\
"""
toc_footer_end = """\
">Index</a>]</font></td>
<td width="100%"></td>
</tr></table>
"""

d112 1
a118 1

d121 3
a123 2
def  html_quote( line ):
    result = string.replace( line, "&", "&amp;" )
d130 2
a131 1
def  html_quote0( line ):
d135 1
a135 1
def  dump_html_code( lines, prefix = "" ):
d137 1
d144 1
d146 2
a147 2
    for line in self.lines[0 : l + 1]:
        print '\n' + prefix + html_quote( line ),
d152 3
a154 1
class  HtmlFormatter( Formatter ):
a155 1
    def  __init__( self, processor, project_title, file_prefix ):
d158 1
a158 2
        global html_header_1, html_header_2, html_header_3
        global html_header_4, html_header_5, html_footer
d165 8
a172 25
        self.headers           = processor.headers
        self.project_title     = project_title
        self.file_prefix       = file_prefix
        self.html_header       = html_header_1 + project_title +              \
                                 html_header_2 +                              \
                                 html_header_3 + file_prefix + "index.html" + \
                                 html_header_4 + file_prefix + "toc.html" +   \
                                 html_header_5 + project_title +              \
                                 html_header_6

        self.html_index_header = html_header_1 + project_title +             \
                                 html_header_2 +                             \
                                 html_header_3i + file_prefix + "toc.html" + \
                                 html_header_5 + project_title +             \
                                 html_header_6

        self.html_toc_header   = html_header_1 + project_title +              \
                                 html_header_2 +                              \
                                 html_header_3 + file_prefix + "index.html" + \
                                 html_header_5t + project_title +             \
                                 html_header_6

        self.html_footer       = "<center><font size=""-2"">generated on " +     \
                                 time.asctime( time.localtime( time.time() ) ) + \
                                 "</font></center>" + html_footer
d179 1
d183 1
d194 1
d198 1
d202 2
a203 2
                name = m.group( 1 )
                rest = m.group( 2 )
d216 2
a217 2
            name = m.group( 1 )
            rest = m.group( 3 )
d222 2
a223 2
            name = m.group( 1 )
            rest = m.group( 3 )
d226 2
a227 1
        return html_quote( word )
d230 1
a230 1
        """ convert words of a paragraph into tagged HTML text, handle xrefs """
d237 2
a238 2
            line = re.sub( r"(^|\W)`(.*?)'(\W|$)",  \
                           r'\1&lsquo;\2&rsquo;\3', \
a239 2
            # convert tilde into non-breakable space
            line = string.replace( line, "~", "&nbsp;" )
d243 1
d252 1
d264 1
d268 2
a269 1
    def  print_html_field( self, field ):
d271 1
a271 1
            print "<table><tr valign=top><td><b>" + field.name + "</b></td><td>"
d278 2
a279 1
    def  html_source_quote( self, line, block_name = None ):
d284 3
a286 3
                name   = m.group( 2 )
                prefix = html_quote( m.group( 1 ) )
                length = len( m.group( 0 ) )
d291 2
a292 1
                elif re_source_keywords.match( name ):
d295 2
a296 1
                elif self.identifiers.has_key( name ):
d300 1
a300 1
                             self.make_block_url( block ) + '">' + name + '</a>'
d302 1
a302 1
                    result = result + html_quote( line[:length] )
d306 1
a306 1
                result = result + html_quote( line )
d311 2
a312 2
    def  print_html_field_list( self, fields ):
        print "<p></p>"
d315 2
a316 2
            if len( field.name ) > 22:
              print "<tr valign=top><td colspan=0><b>" + field.name + "</b></td></tr>"
d325 2
a326 1
    def  print_html_markup( self, markup ):
d335 1
d349 1
d351 1
a351 1
        print self.html_index_header
d360 1
d363 1
a363 1
        rows  = ( count + self.columns - 1 ) / self.columns
d366 1
a366 1
        for r in range( rows ):
d368 2
a369 2
            for c in range( self.columns ):
                i = r + c * rows
a379 5

        print index_footer_start +            \
              self.file_prefix + "toc.html" + \
              index_footer_end

a380 1

d384 1
d394 1
a394 1
        print self.html_toc_header
d398 1
a398 1
        print  chapter_header + string.join( chapter.title ) + chapter_inter
d402 1
a402 1
        print '<tr valign=top><td class="left">'
d413 1
a413 1
        print chapter_footer
d416 1
a416 3
        print chapter_header +                                      \
              '<a href="' + index_filename + '">Global Index</a>' + \
              chapter_inter + chapter_footer
a418 4
        print toc_footer_start +                \
              self.file_prefix + "index.html" + \
              toc_footer_end

d445 1
a445 1
        width = 70  # XXX magic number
a486 15
            header = ''
            for f in self.headers.keys():
                if block.source.filename.find( f ) >= 0:
                    header = self.headers[f] + ' (' + f + ')'
                    break;
                
#           if not header:
#               sys.stderr.write( \
#                 'WARNING: No header macro for ' + block.source.filename + '.\n' )

            if header:
                print header_location_header
                print 'Defined in ' + header + '.'
                print header_location_footer

d492 1
d509 1
a509 1
              block_footer_middle + self.file_prefix + "toc.html" +  \
d512 1
d516 2
a517 1
    def  section_dump_all( self ):
a520 1
# eof
@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d1 2
a2 16
#
#  tohtml.py
#
#    A sub-class container of the `Formatter' class to produce HTML.
#
#  Copyright 2002-2016 by
#  David Turner.
#
#  This file is part of the FreeType project, and may only be used,
#  modified, and distributed under the terms of the FreeType project
#  license, LICENSE.TXT.  By continuing to use, modify, or distribute
#  this file you indicate that you have read the license and
#  understand and accept it fully.

# The parent class is contained in file `formatter.py'.

d11 1
a11 1
# The following strings define the HTML header used by all generated pages.
a23 4
  a:link { color: #0000EF; }
  a:visited { color: #51188E; }
  a:hover { color: #FF0000; }

d26 1
a26 24
         background: #FFFFFF;
         width: 87%;
         margin: auto; }

  div.section { width: 75%;
                margin: auto; }
  div.section hr { margin: 4ex 0 1ex 0; }
  div.section h4 { background-color: #EEEEFF;
                   font-size: medium;
                   font-style: oblique;
                   font-weight: bold;
                   margin: 3ex 0 1.5ex 9%;
                   padding: 0.3ex 0 0.3ex 1%; }
  div.section p { margin: 1.5ex 0 1.5ex 10%; }
  div.section pre { margin: 3ex 0 3ex 9%;
                    background-color: #D6E8FF;
                    padding: 2ex 0 2ex 1%; }
  div.section table.fields { width: 90%;
                             margin: 1.5ex 0 1.5ex 10%; }
  div.section table.toc { width: 95%;
                          margin: 1.5ex 0 1.5ex 5%; }
  div.timestamp { text-align: center;
                  font-size: 69%;
                  margin: 1.5ex 0 1.5ex 0; }
d28 1
d30 4
a33 2
  h3 { font-size: medium;
       margin: 4ex 0 1.5ex 0; }
d35 3
a37 3
  p { text-align: justify; }

  pre.colored { color: blue; }
d44 1
a44 45
  table.fields td.val { font-weight: bold;
                        text-align: right;
                        width: 30%;
                        vertical-align: baseline;
                        padding: 1ex 1em 1ex 0; }
  table.fields td.desc { vertical-align: baseline;
                         padding: 1ex 0 1ex 1em; }
  table.fields td.desc p:first-child { margin: 0; }
  table.fields td.desc p { margin: 1.5ex 0 0 0; }
  table.index { margin: 6ex auto 6ex auto;
                border: 0;
                border-collapse: separate;
                border-spacing: 1em 0.3ex; }
  table.index tr { padding: 0; }
  table.index td { padding: 0; }
  table.index-toc-link { width: 100%;
                         border: 0;
                         border-spacing: 0;
                         margin: 1ex 0 1ex 0; }
  table.index-toc-link td.left { padding: 0 0.5em 0 0.5em;
                                 font-size: 83%;
                                 text-align: left; }
  table.index-toc-link td.middle { padding: 0 0.5em 0 0.5em;
                                   font-size: 83%;
                                   text-align: center; }
  table.index-toc-link td.right { padding: 0 0.5em 0 0.5em;
                                  font-size: 83%;
                                  text-align: right; }
  table.synopsis { margin: 6ex auto 6ex auto;
                   border: 0;
                   border-collapse: separate;
                   border-spacing: 2em 0.6ex; }
  table.synopsis tr { padding: 0; }
  table.synopsis td { padding: 0; }
  table.toc td.link { width: 30%;
                      text-align: right;
                      vertical-align: baseline;
                      padding: 1ex 1em 1ex 0; }
  table.toc td.desc { vertical-align: baseline;
                      padding: 1ex 0 1ex 1em;
                      text-align: left; }
  table.toc td.desc p:first-child { margin: 0;
                                    text-align: left; }
  table.toc td.desc p { margin: 1.5ex 0 0 0;
                        text-align: left; }
d46 1
d52 2
a53 2
html_header_3l = """
<table class="index-toc-link"><tr><td class="left">[<a href="\
d56 3
a58 2
html_header_3r = """
<table class="index-toc-link"><tr><td class="right">[<a href="\
d62 3
a64 1
">Index</a>]</td><td class="right">[<a href="\
d67 3
a69 3
html_header_5t = """\
">TOC</a>]</td></tr></table>
<h1>\
d72 4
a75 3
html_header_5i = """\
">Index</a>]</td></tr></table>
<h1>\
d79 1
a79 1
 API Reference</h1>
d90 2
a91 3
section_title_header1 = '<h1 id="'
section_title_header2 = '">'
section_title_footer = "</h1>"
d102 1
a102 1
block_header        = '<div class="section">'
d104 3
a106 2
<hr>
<table class="index-toc-link"><tr><td class="left">[<a href="\
d109 3
a111 3
">Index</a>]</td>\
<td class="middle">[<a href="#">Top</a>]</td>\
<td class="right">[<a href="\
d114 1
a114 1
">TOC</a>]</td></tr></table></div>
d118 2
a119 2
description_header = ""
description_footer = ""
d122 3
a124 3
marker_header = "<h4>"
marker_inter  = "</h4>"
marker_footer = ""
d127 2
a128 2
header_location_header = "<p>"
header_location_footer = "</p>"
d131 2
a132 2
source_header = "<pre>"
source_footer = "</pre>"
d135 3
a137 6
chapter_header = """\
<div class="section">
<h2>\
"""
chapter_inter  = '</h2>'
chapter_footer = '</div>'
d142 2
a143 1
<table class="index-toc-link"><tr><td class="right">[<a href="\
d146 1
a146 1
">TOC</a>]</td></tr></table>
d152 1
a152 1
<table class="index-toc-link"><tr><td class="left">[<a href="\
d155 3
a157 1
">Index</a>]</td></tr></table>
d161 1
a161 1
# Source language keyword coloration and styling.
d169 2
a170 3
# Translate a single line of source to HTML.  This converts `<', `>', and
# `&' into `&lt;',`&gt;', and `&amp;'.
#
d172 3
a174 3
    result = string.replace( line,   "&", "&amp;" )
    result = string.replace( result, "<", "&lt;"  )
    result = string.replace( result, ">", "&gt;"  )
d178 20
a197 4
################################################################
##
##  HTML FORMATTER CLASS
##
d203 2
a204 7
        global html_header_1
        global html_header_2
        global html_header_3l, html_header_3r
        global html_header_4
        global html_header_5t, html_header_5i
        global html_header_6
        global html_footer
d211 25
a235 26
        self.headers       = processor.headers
        self.project_title = project_title
        self.file_prefix   = file_prefix
        self.html_header   = (
          html_header_1 + project_title
          + html_header_2
          + html_header_3l + file_prefix + "index.html"
          + html_header_4 + file_prefix + "toc.html"
          + html_header_5t + project_title
          + html_header_6 )
        self.html_index_header = (
          html_header_1 + project_title
          + html_header_2
          + html_header_3r + file_prefix + "toc.html"
          + html_header_5t + project_title
          + html_header_6 )
        self.html_toc_header = (
          html_header_1 + project_title
          + html_header_2
          + html_header_3l + file_prefix + "index.html"
          + html_header_5i + project_title
          + html_header_6 )
        self.html_footer = (
          '<div class="timestamp">generated on '
          + time.asctime( time.localtime( time.time() ) )
          + "</div>" + html_footer )
d242 10
a251 9
    def  make_block_url( self, block, name = None ):
        if name == None:
            name = block.name

        try:
            section_url = self.make_section_url( block.section )
        except:
            # we already have a section
            section_url = self.make_section_url( block )
d253 1
a253 1
        return section_url + "#" + name
d256 2
a257 2
        """Analyze a simple word to detect cross-references and markup."""
        # handle cross-references
d261 2
a262 2
                name = m.group( 'name' )
                rest = m.group( 'rest' )
d265 1
a265 17
                # display `foo[bar]' as `foo'
                name = re.sub( r'\[.*\]', '', name )
                # normalize url, following RFC 3986
                url = string.replace( url, "[", "(" )
                url = string.replace( url, "]", ")" )

                try:
                    # for sections, display title
                    url = ( '&lsquo;<a href="' + url + '">'
                            + block.title + '</a>&rsquo;'
                            + rest )
                except:
                    url = ( '<a href="' + url + '">'
                            + name + '</a>'
                            + rest )

                return url
d268 2
a269 2
                sys.stderr.write( "WARNING: undefined cross reference"
                                  + " '" + name + "'.\n" )
d272 1
a272 1
        # handle markup for italic and bold
d276 1
a276 1
            rest = m.group( 2 )
d282 1
a282 1
            rest = m.group( 2 )
d288 1
a288 2
        """Convert words of a paragraph into tagged HTML text.  Also handle
           cross references."""
a293 2
            # handle hyperlinks
            line = re_url.sub( r'<a href="\1">\1</a>', line )
d295 2
a296 2
            line = re.sub( r"(^|\W)`(.*?)'(\W|$)",
                           r'\1&lsquo;\2&rsquo;\3',
d304 1
a304 1
        """Convert a code sequence to HTML."""
d307 1
a307 1
            line = line + html_quote( l ).rstrip() + '\n'
d312 1
a312 1
        """Convert a field's content into HTML."""
d327 1
a327 3
            print( '<table><tr valign="top"><td><b>'
                   + field.name
                   + "</b></td><td>" )
d348 2
a349 3
                    result = ( result + prefix
                               + keyword_prefix + name + keyword_suffix )
                elif name in self.identifiers:
d352 2
a353 19
                    id = block.name

                    # link to a field ID if possible
                    try:
                      for markup in block.markups:
                          if markup.tag == 'values':
                              for field in markup.fields:
                                  if field.name:
                                      id = name

                      result = ( result + prefix
                                 + '<a href="'
                                 + self.make_block_url( block, id )
                                 + '">' + name + '</a>' )
                    except:
                      # sections don't have `markups'; however, we don't
                      # want references to sections here anyway
                      result = result + html_quote( line[:length] )

d365 2
a366 1
        print '<table class="fields">'
d368 6
a373 3
            print ( '<tr><td class="val" id="' + field.name + '">'
                    + field.name
                    + '</td><td class="desc">' )
d382 4
a385 3
                # We begin a new series of field or value definitions.  We
                # record them in the `table_fields' list before outputting
                # all of them as a single table.
d398 1
a398 1
    # formatting the index
d410 1
a410 1
        # `block_index' already contains the sorted list of index names
d412 1
a412 1
        rows  = ( count + self.columns - 1 ) // self.columns
d414 1
a414 1
        print '<table class="index">'
d422 1
a422 8
                    # display `foo[bar]' as `foo (bar)'
                    bname = string.replace( bname, "[", " (" )
                    bname = string.replace( bname, "]", ")"  )
                    # normalize url, following RFC 3986
                    url = string.replace( url, "[", "(" )
                    url = string.replace( url, "]", ")" )
                    line  = ( line + '<td><a href="' + url + '">'
                              + bname + '</a></td>' )
d430 3
a432 3
        print( index_footer_start
               + self.file_prefix + "toc.html"
               + index_footer_end )
d445 1
a445 1
    # formatting the table of contents
d449 1
a449 1
        print "<h1>Table of Contents</h1>"
d452 2
a453 2
        print chapter_header + string.join( chapter.title ) + chapter_inter
        print '<table class="toc">'
d456 4
a459 3
        print ( '<tr><td class="link">'
                + '<a href="' + self.make_section_url( section ) + '">'
                + section.title + '</a></td><td class="desc">' )
d470 3
a472 3
        print( chapter_header
               + '<a href="' + index_filename + '">Global Index</a>'
               + chapter_inter + chapter_footer )
d475 3
a477 3
        print( toc_footer_start
               + self.file_prefix + "index.html"
               + toc_footer_end )
d491 1
a491 1
    # formatting sections
d496 3
a498 3
        print ( section_title_header1 + section.name + section_title_header2
                + section.title
                + section_title_footer )
d506 1
a506 1
        if maxwidth > 0:
d509 1
a509 1
            print '<table class="synopsis">'
d511 1
a511 1
            columns = width // maxwidth
d516 1
a516 4
            # don't handle last entry if it is empty
            if section.block_names[-1] == "/empty/":
                count -= 1
            rows  = ( count + columns - 1 ) // columns
d522 1
a522 1
                    line = line + '<td>'
d525 1
a525 15
                        if name == "/empty/":
                            # it can happen that a complete row is empty, and
                            # without a proper `filler' the browser might
                            # collapse the row to a much smaller height (or
                            # even omit it completely)
                            line = line + "&nbsp;"
                        else:
                            url = name
                            # display `foo[bar]' as `foo'
                            name = re.sub( r'\[.*\]', '', name )
                            # normalize url, following RFC 3986
                            url = string.replace( url, "[", "(" )
                            url = string.replace( url, "]", ")" )
                            line = ( line + '<a href="#' + url + '">'
                                     + name + '</a>' )
d531 1
a531 1
            print "</table>"
d543 1
a543 7
            url = block.name
            # display `foo[bar]' as `foo'
            name = re.sub( r'\[.*\]', '', block.name )
            # normalize url, following RFC 3986
            url = string.replace( url, "[", "(" )
            url = string.replace( url, "]", ")" )
            print( '<h3 id="' + url + '">' + name + '</h3>' )
d551 2
a552 2
                    break

d554 2
a555 3
#               sys.stderr.write(
#                 "WARNING: No header macro for"
#                 + " '" + block.source.filename + "'.\n" )
d558 3
a560 3
                print ( header_location_header
                        + 'Defined in ' + header + '.'
                        + header_location_footer )
d582 3
a584 3
        print( block_footer_start + self.file_prefix + "index.html"
               + block_footer_middle + self.file_prefix + "toc.html"
               + block_footer_end )
d591 1
a591 2
            self.section_dump( section,
                               self.file_prefix + section.name + '.html' )
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
