head	1.4;
access;
symbols
	freetype-2_7_1:1.1.115.3
	freetype-2_3_12:1.1.115.2
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.2
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.1
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@# @;


1.4
date	2017.04.15.19.22.14;	author tg;	state Exp;
branches;
next	1.3;
commitid	10058F2723111C7BEE2;

1.3
date	2008.06.12.20.54.50;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10048518C1E44F62885;

1.2
date	2008.02.26.20.05.09;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	10047C470A72A1E13CE;

1.1
date	2005.03.18.10.43.18;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.53.41;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.39.27;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.103.1
date	2005.03.18.10.43.18;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.35.52;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2013.08.06.19.12.22;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10052014A9975CEFD1D;

1.1.115.3
date	2017.04.15.15.42.13;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.4
log
@first cut at a quickmerge
@
text
@#
#  utils.py
#
#    Auxiliary functions for the `docmaker' tool (library file).
#
#  Copyright 2002-2016 by
#  David Turner.
#
#  This file is part of the FreeType project, and may only be used,
#  modified, and distributed under the terms of the FreeType project
#  license, LICENSE.TXT.  By continuing to use, modify, or distribute
#  this file you indicate that you have read the license and
#  understand and accept it fully.


import string, sys, os, glob, itertools


# current output directory
#
output_dir = None


# A function that generates a sorting key.  We want lexicographical order
# (primary key) except that capital letters are sorted before lowercase
# ones (secondary key).
#
# The primary key is implemented by lowercasing the input.  The secondary
# key is simply the original data appended, character by character.  For
# example, the sort key for `FT_x' is `fFtT__xx', while the sort key for
# `ft_X' is `fftt__xX'.  Since ASCII codes of uppercase letters are
# numerically smaller than the codes of lowercase letters, `fFtT__xx' gets
# sorted before `fftt__xX'.
#
def  index_key( s ):
    return string.join( itertools.chain( *zip( s.lower(), s ) ) )


# Sort `input_list', placing the elements of `order_list' in front.
#
def  sort_order_list( input_list, order_list ):
    new_list = order_list[:]
    for id in input_list:
        if not id in order_list:
            new_list.append( id )
    return new_list


# Divert standard output to a given project documentation file.  Use
# `output_dir' to determine the filename location if necessary and save the
# old stdout handle in a tuple that is returned by this function.
#
def  open_output( filename ):
    global output_dir

    if output_dir and output_dir != "":
        filename = output_dir + os.sep + filename

    old_stdout = sys.stdout
    new_file   = open( filename, "w" )
    sys.stdout = new_file

    return ( new_file, old_stdout )


# Close the output that was returned by `open_output'.
#
def  close_output( output ):
    output[0].close()
    sys.stdout = output[1]


# Check output directory.
#
def  check_output():
    global output_dir
    if output_dir:
        if output_dir != "":
            if not os.path.isdir( output_dir ):
                sys.stderr.write( "argument"
                                  + " '" + output_dir + "' "
                                  + "is not a valid directory\n" )
                sys.exit( 2 )
        else:
            output_dir = None


def  file_exists( pathname ):
    """Check that a given file exists."""
    result = 1
    try:
        file = open( pathname, "r" )
        file.close()
    except:
        result = None
        sys.stderr.write( pathname + " couldn't be accessed\n" )

    return result


def  make_file_list( args = None ):
    """Build a list of input files from command-line arguments."""
    file_list = []
    # sys.stderr.write( repr( sys.argv[1 :] ) + '\n' )

    if not args:
        args = sys.argv[1:]

    for pathname in args:
        if string.find( pathname, '*' ) >= 0:
            newpath = glob.glob( pathname )
            newpath.sort()  # sort files -- this is important because
                            # of the order of files
        else:
            newpath = [pathname]

        file_list.extend( newpath )

    if len( file_list ) == 0:
        file_list = None
    else:
        # now filter the file list to remove non-existing ones
        file_list = filter( file_exists, file_list )

    return file_list

# eof
@


1.3
log
@Merge freetype 2.3.6
@
text
@a0 1
#  Utils (c) 2002, 2004, 2007, 2008  David Turner <david@@freetype.org>
d2 15
a17 1
import string, sys, os, glob
d24 10
a33 2
# This function is used to sort the index.  It is a simple lexicographical
# sort, except that it places capital letters before lowercase ones.
d35 2
a36 29
def  index_sort( s1, s2 ):
    if not s1:
        return -1

    if not s2:
        return 1

    l1 = len( s1 )
    l2 = len( s2 )
    m1 = string.lower( s1 )
    m2 = string.lower( s2 )

    for i in range( l1 ):
        if i >= l2 or m1[i] > m2[i]:
            return 1

        if m1[i] < m2[i]:
            return -1

        if s1[i] < s2[i]:
            return -1

        if s1[i] > s2[i]:
            return 1

    if l2 > l1:
        return -1

    return 0
d39 1
a39 1
# Sort input_list, placing the elements of order_list in front.
d49 3
a51 3
# Open the standard output to a given project documentation file.  Use
# "output_dir" to determine the filename location if necessary and save the
# old stdout in a tuple that is returned by this function.
d66 1
a66 1
# Close the output that was returned by "close_output".
d80 3
a82 2
                sys.stderr.write( "argument" + " '" + output_dir + "' " + \
                                  "is not a valid directory" )
d89 1
a89 1
    """checks that a given file exists"""
d102 1
a102 1
    """builds a list of input files from command-line arguments"""
d107 1
a107 1
        args = sys.argv[1 :]
@


1.2
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d1 1
a1 1
#  Utils (c) 2002, 2004, 2007  David Turner <david@@freetype.org>
d14 1
a14 1
def index_sort( s1, s2 ):
d44 1
d47 1
a47 1
def sort_order_list( input_list, order_list ):
a54 1

d59 1
a59 1
def open_output( filename ):
d74 1
a74 1
def close_output( output ):
d81 1
a81 1
def check_output( ):
d86 1
a86 1
                sys.stderr.write( "argument" + " '" + output_dir + "' " +
d92 2
a93 1
def file_exists( pathname ):
d106 1
a106 1
def make_file_list( args = None ):
a107 1

@


1.1
log
@Initial revision
@
text
@d1 3
d121 1
a121 1
            
d129 1
a129 1
    
d132 1
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@a0 3
#  Utils (c) 2002, 2004, 2007  David Turner <david@@freetype.org>
#

d118 1
a118 1

d126 1
a126 1

a128 1
# eof
@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d1 1
a1 1
#  Utils (c) 2002, 2004, 2007, 2008  David Turner <david@@freetype.org>
d14 1
a14 1
def  index_sort( s1, s2 ):
a43 1

d46 1
a46 1
def  sort_order_list( input_list, order_list ):
d54 1
d59 1
a59 1
def  open_output( filename ):
d74 1
a74 1
def  close_output( output ):
d81 1
a81 1
def  check_output():
d86 1
a86 1
                sys.stderr.write( "argument" + " '" + output_dir + "' " + \
d92 1
a92 2

def  file_exists( pathname ):
d105 1
a105 1
def  make_file_list( args = None ):
d107 1
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@we need newer freetype for advance calculation
@
text
@a0 3
#  Utils (c) 2002, 2004, 2007, 2008  David Turner <david@@freetype.org>
#

d11 1
a11 1
def  index_sort( s1, s2 ):
a40 1

d43 1
a43 1
def  sort_order_list( input_list, order_list ):
d51 1
d56 1
a56 1
def  open_output( filename ):
d71 1
a71 1
def  close_output( output ):
d78 1
a78 1
def  check_output():
d83 1
a83 1
                sys.stderr.write( "argument" + " '" + output_dir + "' " + \
d89 1
a89 2

def  file_exists( pathname ):
d102 1
a102 1
def  make_file_list( args = None ):
d104 1
d118 1
a118 1

d126 1
a126 1

a128 1
# eof
@


1.1.115.3
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d1 1
d3 4
a6 1
#  utils.py
d8 5
a12 1
#    Auxiliary functions for the `docmaker' tool (library file).
d14 11
a24 8
#  Copyright 2002-2016 by
#  David Turner.
#
#  This file is part of the FreeType project, and may only be used,
#  modified, and distributed under the terms of the FreeType project
#  license, LICENSE.TXT.  By continuing to use, modify, or distribute
#  this file you indicate that you have read the license and
#  understand and accept it fully.
d26 3
d30 2
a31 1
import string, sys, os, glob, itertools
d33 2
d36 2
a37 3
# current output directory
#
output_dir = None
d39 2
d42 1
a42 13
# A function that generates a sorting key.  We want lexicographical order
# (primary key) except that capital letters are sorted before lowercase
# ones (secondary key).
#
# The primary key is implemented by lowercasing the input.  The secondary
# key is simply the original data appended, character by character.  For
# example, the sort key for `FT_x' is `fFtT__xx', while the sort key for
# `ft_X' is `fftt__xX'.  Since ASCII codes of uppercase letters are
# numerically smaller than the codes of lowercase letters, `fFtT__xx' gets
# sorted before `fftt__xX'.
#
def  index_key( s ):
    return string.join( itertools.chain( *zip( s.lower(), s ) ) )
d45 1
a45 1
# Sort `input_list', placing the elements of `order_list' in front.
d55 3
a57 3
# Divert standard output to a given project documentation file.  Use
# `output_dir' to determine the filename location if necessary and save the
# old stdout handle in a tuple that is returned by this function.
d72 1
a72 1
# Close the output that was returned by `open_output'.
d86 2
a87 3
                sys.stderr.write( "argument"
                                  + " '" + output_dir + "' "
                                  + "is not a valid directory\n" )
d94 1
a94 1
    """Check that a given file exists."""
d107 1
a107 1
    """Build a list of input files from command-line arguments."""
d112 1
a112 1
        args = sys.argv[1:]
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
