head	1.4;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.1
	MIRBSD_10_BASE:1.2
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.4
date	2017.04.15.19.21.32;	author tg;	state Exp;
branches;
next	1.3;
commitid	10058F2723111C7BEE2;

1.3
date	2013.08.06.19.47.49;	author tg;	state Exp;
branches;
next	1.2;
commitid	100520152445E05B912;

1.2
date	2006.06.29.20.24.47;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.09;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.52.45;	author bsiegert;	state Exp;
branches;
next	;
commitid	10047C46DB5081DCD79;

1.1.103.1
date	2005.03.18.10.43.09;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.35.12;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.37.12;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.24;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.42.00;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.4
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  ftcglyph.c                                                             */
/*                                                                         */
/*    FreeType Glyph Image (FT_Glyph) cache (body).                        */
/*                                                                         */
/*  Copyright 2000-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include <ft2build.h>
#include FT_INTERNAL_OBJECTS_H
#include FT_CACHE_H
#include "ftcglyph.h"
#include FT_ERRORS_H

#include "ftccback.h"
#include "ftcerror.h"


  /* create a new chunk node, setting its cache index and ref count */
  FT_LOCAL_DEF( void )
  FTC_GNode_Init( FTC_GNode   gnode,
                  FT_UInt     gindex,
                  FTC_Family  family )
  {
    gnode->family = family;
    gnode->gindex = gindex;
    family->num_nodes++;
  }


  FT_LOCAL_DEF( void )
  FTC_GNode_UnselectFamily( FTC_GNode  gnode,
                            FTC_Cache  cache )
  {
    FTC_Family  family = gnode->family;


    gnode->family = NULL;
    if ( family && --family->num_nodes == 0 )
      FTC_FAMILY_FREE( family, cache );
  }


  FT_LOCAL_DEF( void )
  FTC_GNode_Done( FTC_GNode  gnode,
                  FTC_Cache  cache )
  {
    /* finalize the node */
    gnode->gindex = 0;

    FTC_GNode_UnselectFamily( gnode, cache );
  }


  FT_LOCAL_DEF( FT_Bool )
  ftc_gnode_compare( FTC_Node    ftcgnode,
                     FT_Pointer  ftcgquery,
                     FTC_Cache   cache,
                     FT_Bool*    list_changed )
  {
    FTC_GNode   gnode  = (FTC_GNode)ftcgnode;
    FTC_GQuery  gquery = (FTC_GQuery)ftcgquery;
    FT_UNUSED( cache );


    if ( list_changed )
      *list_changed = FALSE;
    return FT_BOOL( gnode->family == gquery->family &&
                    gnode->gindex == gquery->gindex );
  }


#ifdef FTC_INLINE

  FT_LOCAL_DEF( FT_Bool )
  FTC_GNode_Compare( FTC_GNode   gnode,
                     FTC_GQuery  gquery,
                     FTC_Cache   cache,
                     FT_Bool*    list_changed )
  {
    return ftc_gnode_compare( FTC_NODE( gnode ), gquery,
                              cache, list_changed );
  }

#endif

  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                      CHUNK SETS                               *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  FT_LOCAL_DEF( void )
  FTC_Family_Init( FTC_Family  family,
                   FTC_Cache   cache )
  {
    FTC_GCacheClass  clazz = FTC_CACHE_GCACHE_CLASS( cache );


    family->clazz     = clazz->family_class;
    family->num_nodes = 0;
    family->cache     = cache;
  }


  FT_LOCAL_DEF( FT_Error )
  ftc_gcache_init( FTC_Cache  ftccache )
  {
    FTC_GCache  cache = (FTC_GCache)ftccache;
    FT_Error    error;


    error = FTC_Cache_Init( FTC_CACHE( cache ) );
    if ( !error )
    {
      FTC_GCacheClass   clazz = (FTC_GCacheClass)FTC_CACHE( cache )->org_class;

      FTC_MruList_Init( &cache->families,
                        clazz->family_class,
                        0,  /* no maximum here! */
                        cache,
                        FTC_CACHE( cache )->memory );
    }

    return error;
  }


#if 0

  FT_LOCAL_DEF( FT_Error )
  FTC_GCache_Init( FTC_GCache  cache )
  {
    return ftc_gcache_init( FTC_CACHE( cache ) );
  }

#endif /* 0 */


  FT_LOCAL_DEF( void )
  ftc_gcache_done( FTC_Cache  ftccache )
  {
    FTC_GCache  cache = (FTC_GCache)ftccache;


    FTC_Cache_Done( (FTC_Cache)cache );
    FTC_MruList_Done( &cache->families );
  }


#if 0

  FT_LOCAL_DEF( void )
  FTC_GCache_Done( FTC_GCache  cache )
  {
    ftc_gcache_done( FTC_CACHE( cache ) );
  }

#endif /* 0 */


  FT_LOCAL_DEF( FT_Error )
  FTC_GCache_New( FTC_Manager       manager,
                  FTC_GCacheClass   clazz,
                  FTC_GCache       *acache )
  {
    return FTC_Manager_RegisterCache( manager, (FTC_CacheClass)clazz,
                                      (FTC_Cache*)acache );
  }


#ifndef FTC_INLINE

  FT_LOCAL_DEF( FT_Error )
  FTC_GCache_Lookup( FTC_GCache   cache,
                     FT_Offset    hash,
                     FT_UInt      gindex,
                     FTC_GQuery   query,
                     FTC_Node    *anode )
  {
    FT_Error  error;


    query->gindex = gindex;

    FTC_MRULIST_LOOKUP( &cache->families, query, query->family, error );
    if ( !error )
    {
      FTC_Family  family = query->family;


      /* prevent the family from being destroyed too early when an        */
      /* out-of-memory condition occurs during glyph node initialization. */
      family->num_nodes++;

      error = FTC_Cache_Lookup( FTC_CACHE( cache ), hash, query, anode );

      if ( --family->num_nodes == 0 )
        FTC_FAMILY_FREE( family, cache );
    }
    return error;
  }

#endif /* !FTC_INLINE */


/* END */
@


1.3
log
@fastmerge
@
text
@d7 1
a7 1
/*  Copyright 2000-2001, 2003, 2004, 2006, 2009 by                         */
d20 1
d68 2
a69 1
                     FTC_Cache   cache )
d76 2
d83 2
d87 3
a89 1
                     FTC_GQuery  gquery )
d91 2
a92 1
    return ftc_gnode_compare( FTC_NODE( gnode ), gquery, NULL );
d95 1
d109 1
a109 1
    FTC_GCacheClass  clazz = FTC_CACHE__GCACHE_CLASS( cache );
d188 1
a188 1
                     FT_UInt32    hash,
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d7 1
a7 1
/*  Copyright 2000-2001, 2003, 2004, 2006 by                               */
a22 2
#include FT_INTERNAL_OBJECTS_H
#include FT_INTERNAL_DEBUG_H
d74 2
a75 2
    return FT_BOOL(  gnode->family == gquery->family &&
                     gnode->gindex == gquery->gindex );
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 2000-2001, 2003, 2004 by                                     */
d21 1
a21 1
#include FT_CACHE_INTERNAL_GLYPH_H
d31 1
a31 1
  FT_EXPORT_DEF( void )
d42 1
a42 1
  FT_EXPORT_DEF( void )
d50 2
a51 3
    if ( family && --family->num_nodes <= 0 )
      FTC_MruList_Remove( &FTC_GCACHE( cache )->families,
                          (FTC_MruNode)family );
d55 1
a55 1
  FT_EXPORT_DEF( void )
d66 10
a75 4
  FT_EXPORT_DEF( FT_Bool )
  FTC_GNode_Compare( FTC_GNode   gnode,
                     FTC_GQuery  gquery )
  {
d82 1
a82 1
  ftc_gnode_compare( FTC_GNode   gnode,
d85 1
a85 1
    return FTC_GNode_Compare( gnode, gquery );
d97 1
a97 1
  FT_EXPORT_DEF( void )
d110 2
a111 2
  FT_EXPORT_DEF( FT_Error )
  FTC_GCache_Init( FTC_GCache  cache )
d113 3
a115 1
    FT_Error error;
d133 2
d136 1
a136 1
  ftc_gcache_init( FTC_GCache  cache )
d138 1
a138 1
    return FTC_GCache_Init( cache );
d141 2
d144 2
a145 2
  FT_EXPORT_DEF( void )
  FTC_GCache_Done( FTC_GCache  cache )
d147 3
d155 2
d158 1
a158 1
  ftc_gcache_done( FTC_GCache  cache )
d160 1
a160 1
    FTC_GCache_Done( cache );
d163 1
d165 2
a166 1
  FT_EXPORT_DEF( FT_Error )
d176 3
a178 1
  FT_EXPORT_DEF( FT_Error )
d192 8
d202 3
d208 2
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d7 1
a7 1
/*  Copyright 2000-2001, 2003, 2004, 2006 by                               */
d21 1
a21 1
#include "ftcglyph.h"
d31 1
a31 1
  FT_LOCAL_DEF( void )
d42 1
a42 1
  FT_LOCAL_DEF( void )
d50 3
a52 2
    if ( family && --family->num_nodes == 0 )
      FTC_FAMILY_FREE( family, cache );
d56 1
a56 1
  FT_LOCAL_DEF( void )
d67 4
a70 10
  FT_LOCAL_DEF( FT_Bool )
  ftc_gnode_compare( FTC_Node    ftcgnode,
                     FT_Pointer  ftcgquery,
                     FTC_Cache   cache )
  {
    FTC_GNode   gnode  = (FTC_GNode)ftcgnode;
    FTC_GQuery  gquery = (FTC_GQuery)ftcgquery;
    FT_UNUSED( cache );


d77 1
a77 1
  FTC_GNode_Compare( FTC_GNode   gnode,
d80 1
a80 1
    return ftc_gnode_compare( FTC_NODE( gnode ), gquery, NULL );
d92 1
a92 1
  FT_LOCAL_DEF( void )
d105 2
a106 2
  FT_LOCAL_DEF( FT_Error )
  ftc_gcache_init( FTC_Cache  ftccache )
d108 1
a108 3
    FTC_GCache  cache = (FTC_GCache)ftccache;
    FT_Error    error;

a125 2
#if 0

d127 1
a127 1
  FTC_GCache_Init( FTC_GCache  cache )
d129 1
a129 1
    return ftc_gcache_init( FTC_CACHE( cache ) );
a131 1
#endif /* 0 */
d133 2
a134 3

  FT_LOCAL_DEF( void )
  ftc_gcache_done( FTC_Cache  ftccache )
a135 3
    FTC_GCache  cache = (FTC_GCache)ftccache;


a140 2
#if 0

d142 1
a142 1
  FTC_GCache_Done( FTC_GCache  cache )
d144 1
a144 1
    ftc_gcache_done( FTC_CACHE( cache ) );
a146 1
#endif /* 0 */
d148 1
a148 2

  FT_LOCAL_DEF( FT_Error )
d158 1
a158 3
#ifndef FTC_INLINE

  FT_LOCAL_DEF( FT_Error )
a171 8
    {
      FTC_Family  family = query->family;


      /* prevent the family from being destroyed too early when an        */
      /* out-of-memory condition occurs during glyph node initialization. */
      family->num_nodes++;

a173 3
      if ( --family->num_nodes == 0 )
        FTC_FAMILY_FREE( family, cache );
    }
a176 2
#endif /* !FTC_INLINE */

@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d7 1
a7 1
/*  Copyright 2000-2001, 2003, 2004, 2006 by                               */
d21 1
a21 1
#include "ftcglyph.h"
d31 1
a31 1
  FT_LOCAL_DEF( void )
d42 1
a42 1
  FT_LOCAL_DEF( void )
d50 3
a52 2
    if ( family && --family->num_nodes == 0 )
      FTC_FAMILY_FREE( family, cache );
d56 1
a56 1
  FT_LOCAL_DEF( void )
d67 4
a70 10
  FT_LOCAL_DEF( FT_Bool )
  ftc_gnode_compare( FTC_Node    ftcgnode,
                     FT_Pointer  ftcgquery,
                     FTC_Cache   cache )
  {
    FTC_GNode   gnode  = (FTC_GNode)ftcgnode;
    FTC_GQuery  gquery = (FTC_GQuery)ftcgquery;
    FT_UNUSED( cache );


d77 1
a77 1
  FTC_GNode_Compare( FTC_GNode   gnode,
d80 1
a80 1
    return ftc_gnode_compare( FTC_NODE( gnode ), gquery, NULL );
d92 1
a92 1
  FT_LOCAL_DEF( void )
d105 2
a106 2
  FT_LOCAL_DEF( FT_Error )
  ftc_gcache_init( FTC_Cache  ftccache )
d108 1
a108 3
    FTC_GCache  cache = (FTC_GCache)ftccache;
    FT_Error    error;

a125 2
#if 0

d127 1
a127 1
  FTC_GCache_Init( FTC_GCache  cache )
d129 1
a129 1
    return ftc_gcache_init( FTC_CACHE( cache ) );
a131 1
#endif /* 0 */
d133 2
a134 3

  FT_LOCAL_DEF( void )
  ftc_gcache_done( FTC_Cache  ftccache )
a135 3
    FTC_GCache  cache = (FTC_GCache)ftccache;


a140 2
#if 0

d142 1
a142 1
  FTC_GCache_Done( FTC_GCache  cache )
d144 1
a144 1
    ftc_gcache_done( FTC_CACHE( cache ) );
a146 1
#endif /* 0 */
d148 1
a148 2

  FT_LOCAL_DEF( FT_Error )
d158 1
a158 3
#ifndef FTC_INLINE

  FT_LOCAL_DEF( FT_Error )
a171 8
    {
      FTC_Family  family = query->family;


      /* prevent the family from being destroyed too early when an        */
      /* out-of-memory condition occurs during glyph node initialization. */
      family->num_nodes++;

a173 3
      if ( --family->num_nodes == 0 )
        FTC_FAMILY_FREE( family, cache );
    }
a176 2
#endif /* !FTC_INLINE */

@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d7 1
a7 1
/*  Copyright 2000-2001, 2003, 2004, 2006, 2009 by                         */
d23 2
d76 2
a77 2
    return FT_BOOL( gnode->family == gquery->family &&
                    gnode->gindex == gquery->gindex );
@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 2000-2016 by                                                 */
a19 1
#include FT_INTERNAL_OBJECTS_H
d67 1
a67 2
                     FTC_Cache   cache,
                     FT_Bool*    list_changed )
a73 2
    if ( list_changed )
      *list_changed = FALSE;
a78 2
#ifdef FTC_INLINE

d81 1
a81 3
                     FTC_GQuery  gquery,
                     FTC_Cache   cache,
                     FT_Bool*    list_changed )
d83 1
a83 2
    return ftc_gnode_compare( FTC_NODE( gnode ), gquery,
                              cache, list_changed );
a85 1
#endif
d99 1
a99 1
    FTC_GCacheClass  clazz = FTC_CACHE_GCACHE_CLASS( cache );
d178 1
a178 1
                     FT_Offset    hash,
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
