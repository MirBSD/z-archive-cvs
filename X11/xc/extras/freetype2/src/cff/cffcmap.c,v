head	1.6;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.3
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.6
date	2017.04.15.19.21.34;	author tg;	state Exp;
branches;
next	1.5;
commitid	10058F2723111C7BEE2;

1.5
date	2013.08.06.19.47.51;	author tg;	state Exp;
branches;
next	1.4;
commitid	100520152445E05B912;

1.4
date	2008.06.12.20.54.35;	author bsiegert;	state Exp;
branches;
next	1.3;
commitid	10048518C1E44F62885;

1.3
date	2008.02.26.20.04.56;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10047C470A72A1E13CE;

1.2
date	2006.06.29.20.24.48;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.10;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.52.35;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.37.47;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.103.1
date	2005.03.18.10.43.10;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.35.13;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.36.42;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.25;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.42.03;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.6
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  cffcmap.c                                                              */
/*                                                                         */
/*    CFF character mapping table (cmap) support (body).                   */
/*                                                                         */
/*  Copyright 2002-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include <ft2build.h>
#include FT_INTERNAL_DEBUG_H
#include "cffcmap.h"
#include "cffload.h"

#include "cfferrs.h"


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****           CFF STANDARD (AND EXPERT) ENCODING CMAPS            *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  FT_CALLBACK_DEF( FT_Error )
  cff_cmap_encoding_init( CFF_CMapStd  cmap,
                          FT_Pointer   pointer )
  {
    TT_Face       face     = (TT_Face)FT_CMAP_FACE( cmap );
    CFF_Font      cff      = (CFF_Font)face->extra.data;
    CFF_Encoding  encoding = &cff->encoding;

    FT_UNUSED( pointer );


    cmap->gids  = encoding->codes;

    return 0;
  }


  FT_CALLBACK_DEF( void )
  cff_cmap_encoding_done( CFF_CMapStd  cmap )
  {
    cmap->gids  = NULL;
  }


  FT_CALLBACK_DEF( FT_UInt )
  cff_cmap_encoding_char_index( CFF_CMapStd  cmap,
                                FT_UInt32    char_code )
  {
    FT_UInt  result = 0;


    if ( char_code < 256 )
      result = cmap->gids[char_code];

    return result;
  }


  FT_CALLBACK_DEF( FT_UInt32 )
  cff_cmap_encoding_char_next( CFF_CMapStd   cmap,
                               FT_UInt32    *pchar_code )
  {
    FT_UInt    result    = 0;
    FT_UInt32  char_code = *pchar_code;


    *pchar_code = 0;

    if ( char_code < 255 )
    {
      FT_UInt  code = (FT_UInt)(char_code + 1);


      for (;;)
      {
        if ( code >= 256 )
          break;

        result = cmap->gids[code];
        if ( result != 0 )
        {
          *pchar_code = code;
          break;
        }

        code++;
      }
    }
    return result;
  }


  FT_DEFINE_CMAP_CLASS(
    cff_cmap_encoding_class_rec,

    sizeof ( CFF_CMapStdRec ),

    (FT_CMap_InitFunc)     cff_cmap_encoding_init,        /* init       */
    (FT_CMap_DoneFunc)     cff_cmap_encoding_done,        /* done       */
    (FT_CMap_CharIndexFunc)cff_cmap_encoding_char_index,  /* char_index */
    (FT_CMap_CharNextFunc) cff_cmap_encoding_char_next,   /* char_next  */

    (FT_CMap_CharVarIndexFunc)    NULL,  /* char_var_index   */
    (FT_CMap_CharVarIsDefaultFunc)NULL,  /* char_var_default */
    (FT_CMap_VariantListFunc)     NULL,  /* variant_list     */
    (FT_CMap_CharVariantListFunc) NULL,  /* charvariant_list */
    (FT_CMap_VariantCharListFunc) NULL   /* variantchar_list */
  )


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****              CFF SYNTHETIC UNICODE ENCODING CMAP              *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  FT_CALLBACK_DEF( const char* )
  cff_sid_to_glyph_name( TT_Face  face,
                         FT_UInt  idx )
  {
    CFF_Font     cff     = (CFF_Font)face->extra.data;
    CFF_Charset  charset = &cff->charset;
    FT_UInt      sid     = charset->sids[idx];


    return cff_index_get_sid_string( cff, sid );
  }


  FT_CALLBACK_DEF( FT_Error )
  cff_cmap_unicode_init( PS_Unicodes  unicodes,
                         FT_Pointer   pointer )
  {
    TT_Face             face    = (TT_Face)FT_CMAP_FACE( unicodes );
    FT_Memory           memory  = FT_FACE_MEMORY( face );
    CFF_Font            cff     = (CFF_Font)face->extra.data;
    CFF_Charset         charset = &cff->charset;
    FT_Service_PsCMaps  psnames = (FT_Service_PsCMaps)cff->psnames;

    FT_UNUSED( pointer );


    /* can't build Unicode map for CID-keyed font */
    /* because we don't know glyph names.         */
    if ( !charset->sids )
      return FT_THROW( No_Unicode_Glyph_Name );

    return psnames->unicodes_init( memory,
                                   unicodes,
                                   cff->num_glyphs,
                                   (PS_GetGlyphNameFunc)&cff_sid_to_glyph_name,
                                   (PS_FreeGlyphNameFunc)NULL,
                                   (FT_Pointer)face );
  }


  FT_CALLBACK_DEF( void )
  cff_cmap_unicode_done( PS_Unicodes  unicodes )
  {
    FT_Face    face   = FT_CMAP_FACE( unicodes );
    FT_Memory  memory = FT_FACE_MEMORY( face );


    FT_FREE( unicodes->maps );
    unicodes->num_maps = 0;
  }


  FT_CALLBACK_DEF( FT_UInt )
  cff_cmap_unicode_char_index( PS_Unicodes  unicodes,
                               FT_UInt32    char_code )
  {
    TT_Face             face    = (TT_Face)FT_CMAP_FACE( unicodes );
    CFF_Font            cff     = (CFF_Font)face->extra.data;
    FT_Service_PsCMaps  psnames = (FT_Service_PsCMaps)cff->psnames;


    return psnames->unicodes_char_index( unicodes, char_code );
  }


  FT_CALLBACK_DEF( FT_UInt32 )
  cff_cmap_unicode_char_next( PS_Unicodes  unicodes,
                              FT_UInt32   *pchar_code )
  {
    TT_Face             face    = (TT_Face)FT_CMAP_FACE( unicodes );
    CFF_Font            cff     = (CFF_Font)face->extra.data;
    FT_Service_PsCMaps  psnames = (FT_Service_PsCMaps)cff->psnames;


    return psnames->unicodes_char_next( unicodes, pchar_code );
  }


  FT_DEFINE_CMAP_CLASS(
    cff_cmap_unicode_class_rec,

    sizeof ( PS_UnicodesRec ),

    (FT_CMap_InitFunc)     cff_cmap_unicode_init,        /* init       */
    (FT_CMap_DoneFunc)     cff_cmap_unicode_done,        /* done       */
    (FT_CMap_CharIndexFunc)cff_cmap_unicode_char_index,  /* char_index */
    (FT_CMap_CharNextFunc) cff_cmap_unicode_char_next,   /* char_next  */

    (FT_CMap_CharVarIndexFunc)    NULL,  /* char_var_index   */
    (FT_CMap_CharVarIsDefaultFunc)NULL,  /* char_var_default */
    (FT_CMap_VariantListFunc)     NULL,  /* variant_list     */
    (FT_CMap_CharVariantListFunc) NULL,  /* charvariant_list */
    (FT_CMap_VariantCharListFunc) NULL   /* variantchar_list */
  )


/* END */
@


1.5
log
@fastmerge
@
text
@d7 1
a7 1
/*  Copyright 2002, 2003, 2004, 2005, 2006, 2007 by                        */
d19 2
d36 2
a37 1
  cff_cmap_encoding_init( CFF_CMapStd  cmap )
d43 2
d107 3
a109 1
  FT_DEFINE_CMAP_CLASS(cff_cmap_encoding_class_rec,
d112 10
a121 6
    (FT_CMap_InitFunc)     cff_cmap_encoding_init,
    (FT_CMap_DoneFunc)     cff_cmap_encoding_done,
    (FT_CMap_CharIndexFunc)cff_cmap_encoding_char_index,
    (FT_CMap_CharNextFunc) cff_cmap_encoding_char_next,

    NULL, NULL, NULL, NULL, NULL
d134 2
a135 16
  cff_sid_to_glyph_name( TT_Face   face,
                         FT_UInt   idx )
  {
    CFF_Font            cff     = (CFF_Font)face->extra.data;
    CFF_Charset         charset = &cff->charset;
    FT_Service_PsCMaps  psnames = (FT_Service_PsCMaps)cff->psnames;
    FT_UInt             sid     = charset->sids[idx];


    return cff_index_get_sid_string( &cff->string_index, sid, psnames );
  }


  FT_CALLBACK_DEF( void )
  cff_sid_free_glyph_name( TT_Face      face,
                           const char*  gname )
d137 3
a139 1
    FT_Memory  memory = FT_FACE_MEMORY( face );
d142 1
a142 1
    FT_FREE( gname );
d147 2
a148 1
  cff_cmap_unicode_init( PS_Unicodes  unicodes )
d156 2
d160 1
d162 1
a162 1
      return CFF_Err_Invalid_Argument;
d168 1
a168 1
                                   (PS_FreeGlyphNameFunc)&cff_sid_free_glyph_name,
d211 3
a213 1
  FT_DEFINE_CMAP_CLASS(cff_cmap_unicode_class_rec,
d216 11
a226 4
    (FT_CMap_InitFunc)     cff_cmap_unicode_init,
    (FT_CMap_DoneFunc)     cff_cmap_unicode_done,
    (FT_CMap_CharIndexFunc)cff_cmap_unicode_char_index,
    (FT_CMap_CharNextFunc) cff_cmap_unicode_char_next,
a227 2
    NULL, NULL, NULL, NULL, NULL
  )
@


1.4
log
@Merge freetype 2.3.6
@
text
@d68 1
a68 1
  FT_CALLBACK_DEF( FT_UInt )
d102 1
a102 3
  FT_CALLBACK_TABLE_DEF const FT_CMap_ClassRec
  cff_cmap_encoding_class_rec =
  {
d111 1
a111 1
  };
d195 1
a195 1
  FT_CALLBACK_DEF( FT_UInt )
d208 1
a208 3
  FT_CALLBACK_TABLE_DEF const FT_CMap_ClassRec
  cff_cmap_unicode_class_rec =
  {
d217 1
a217 2
  };

@


1.3
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d7 1
a7 1
/*  Copyright 2002, 2003, 2004, 2005, 2006 by                              */
d110 3
a112 1
    (FT_CMap_CharNextFunc) cff_cmap_encoding_char_next
d218 3
a220 1
    (FT_CMap_CharNextFunc) cff_cmap_unicode_char_next
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d123 1
a123 1
  cff_sid_to_glyph_name( CFF_Font  cff,
d126 1
d136 11
d164 3
a166 2
                                   (PS_Glyph_NameFunc)&cff_sid_to_glyph_name,
                                   (FT_Pointer)cff );
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 2002, 2003, 2004 by                                          */
d122 3
a124 3
  FT_CALLBACK_DEF( FT_Int )
  cff_cmap_uni_pair_compare( const void*  pair1,
                             const void*  pair2 )
d126 3
a128 6
    FT_UInt32  u1 = ((CFF_CMapUniPair)pair1)->unicode;
    FT_UInt32  u2 = ((CFF_CMapUniPair)pair2)->unicode;


    if ( u1 < u2 )
      return -1;
a129 2
    if ( u1 > u2 )
      return +1;
d131 1
a131 1
    return 0;
d136 1
a136 1
  cff_cmap_unicode_init( CFF_CMapUnicode  cmap )
d138 1
a138 3
    FT_Error            error;
    FT_UInt             count;
    TT_Face             face    = (TT_Face)FT_CMAP_FACE( cmap );
d145 9
a153 65
    cmap->num_pairs = 0;
    cmap->pairs     = NULL;

    count = cff->num_glyphs;

    if ( !FT_NEW_ARRAY( cmap->pairs, count ) )
    {
      FT_UInt          n, new_count;
      CFF_CMapUniPair  pair;
      FT_UInt32        uni_code;


      pair = cmap->pairs;
      for ( n = 0; n < count; n++ )
      {
        FT_UInt      sid = charset->sids[n];
        const char*  gname;


        gname = cff_index_get_sid_string( &cff->string_index, sid, psnames );

        /* build unsorted pair table by matching glyph names */
        if ( gname )
        {
          uni_code = psnames->unicode_value( gname );

          if ( uni_code != 0 )
          {
            pair->unicode = uni_code;
            pair->gindex  = n;
            pair++;
          }

          FT_FREE( gname );
        }
      }

      new_count = (FT_UInt)( pair - cmap->pairs );
      if ( new_count == 0 )
      {
        /* there are no unicode characters in here! */
        FT_FREE( cmap->pairs );
        error = CFF_Err_Invalid_Argument;
      }
      else
      {
        /* re-allocate if the new array is much smaller than the original */
        /* one                                                            */
        if ( new_count != count && new_count < count / 2 )
        {
          (void)FT_RENEW_ARRAY( cmap->pairs, count, new_count );
          error = CFF_Err_Ok;
        }

        /* sort the pairs table to allow efficient binary searches */
        ft_qsort( cmap->pairs,
                  new_count,
                  sizeof ( CFF_CMapUniPairRec ),
                  cff_cmap_uni_pair_compare );

        cmap->num_pairs = new_count;
      }
    }

    return error;
d158 1
a158 1
  cff_cmap_unicode_done( CFF_CMapUnicode  cmap )
d160 1
a160 1
    FT_Face    face   = FT_CMAP_FACE( cmap );
d164 2
a165 2
    FT_FREE( cmap->pairs );
    cmap->num_pairs = 0;
d170 2
a171 2
  cff_cmap_unicode_char_index( CFF_CMapUnicode  cmap,
                               FT_UInt32        char_code )
d173 3
a175 5
    FT_UInt          min = 0;
    FT_UInt          max = cmap->num_pairs;
    FT_UInt          mid;
    CFF_CMapUniPair  pair;

a176 7
    while ( min < max )
    {
      mid  = min + ( max - min ) / 2;
      pair = cmap->pairs + mid;

      if ( pair->unicode == char_code )
        return pair->gindex;
d178 1
a178 6
      if ( pair->unicode < char_code )
        min = mid + 1;
      else
        max = mid;
    }
    return 0;
d183 2
a184 2
  cff_cmap_unicode_char_next( CFF_CMapUnicode  cmap,
                              FT_UInt32       *pchar_code )
d186 3
a188 2
    FT_UInt    result    = 0;
    FT_UInt32  char_code = *pchar_code + 1;
d191 1
a191 44
  Restart:
    {
      FT_UInt          min = 0;
      FT_UInt          max = cmap->num_pairs;
      FT_UInt          mid;
      CFF_CMapUniPair  pair;


      while ( min < max )
      {
        mid  = min + ( ( max - min ) >> 1 );
        pair = cmap->pairs + mid;

        if ( pair->unicode == char_code )
        {
          result = pair->gindex;
          if ( result != 0 )
            goto Exit;

          char_code++;
          goto Restart;
        }

        if ( pair->unicode < char_code )
          min = mid+1;
        else
          max = mid;
      }

      /* we didn't find it, but we have a pair just above it */
      char_code = 0;

      if ( min < cmap->num_pairs )
      {
        pair   = cmap->pairs + min;
        result = pair->gindex;
        if ( result != 0 )
          char_code = pair->unicode;
      }
    }

  Exit:
    *pchar_code = char_code;
    return result;
d198 1
a198 1
    sizeof ( CFF_CMapUnicodeRec ),
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d7 1
a7 1
/*  Copyright 2002, 2003, 2004, 2005, 2006 by                              */
d122 3
a124 3
  FT_CALLBACK_DEF( const char* )
  cff_sid_to_glyph_name( TT_Face   face,
                         FT_UInt   idx )
d126 2
a127 4
    CFF_Font            cff     = (CFF_Font)face->extra.data;
    CFF_Charset         charset = &cff->charset;
    FT_Service_PsCMaps  psnames = (FT_Service_PsCMaps)cff->psnames;
    FT_UInt             sid     = charset->sids[idx];
d130 2
a131 2
    return cff_index_get_sid_string( &cff->string_index, sid, psnames );
  }
d133 2
d136 1
a136 8
  FT_CALLBACK_DEF( void )
  cff_sid_free_glyph_name( TT_Face      face,
                           const char*  gname )
  {
    FT_Memory  memory = FT_FACE_MEMORY( face );


    FT_FREE( gname );
d141 1
a141 1
  cff_cmap_unicode_init( PS_Unicodes  unicodes )
d143 3
a145 1
    TT_Face             face    = (TT_Face)FT_CMAP_FACE( unicodes );
d152 65
a216 10
    /* can't build Unicode map for CID-keyed font */
    if ( !charset->sids )
      return CFF_Err_Invalid_Argument;

    return psnames->unicodes_init( memory,
                                   unicodes,
                                   cff->num_glyphs,
                                   (PS_GetGlyphNameFunc)&cff_sid_to_glyph_name,
                                   (PS_FreeGlyphNameFunc)&cff_sid_free_glyph_name,
                                   (FT_Pointer)face );
d221 1
a221 1
  cff_cmap_unicode_done( PS_Unicodes  unicodes )
d223 1
a223 1
    FT_Face    face   = FT_CMAP_FACE( unicodes );
d227 2
a228 2
    FT_FREE( unicodes->maps );
    unicodes->num_maps = 0;
d233 2
a234 2
  cff_cmap_unicode_char_index( PS_Unicodes  unicodes,
                               FT_UInt32    char_code )
d236 10
a245 3
    TT_Face             face    = (TT_Face)FT_CMAP_FACE( unicodes );
    CFF_Font            cff     = (CFF_Font)face->extra.data;
    FT_Service_PsCMaps  psnames = (FT_Service_PsCMaps)cff->psnames;
d247 2
d250 6
a255 1
    return psnames->unicodes_char_index( unicodes, char_code );
d260 2
a261 2
  cff_cmap_unicode_char_next( PS_Unicodes  unicodes,
                              FT_UInt32   *pchar_code )
d263 35
a297 3
    TT_Face             face    = (TT_Face)FT_CMAP_FACE( unicodes );
    CFF_Font            cff     = (CFF_Font)face->extra.data;
    FT_Service_PsCMaps  psnames = (FT_Service_PsCMaps)cff->psnames;
d299 8
d308 3
a310 1
    return psnames->unicodes_char_next( unicodes, pchar_code );
d317 1
a317 1
    sizeof ( PS_UnicodesRec ),
@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d7 1
a7 1
/*  Copyright 2002, 2003, 2004, 2005, 2006, 2007 by                        */
d110 1
a110 3
    (FT_CMap_CharNextFunc) cff_cmap_encoding_char_next,

    NULL, NULL, NULL, NULL, NULL
d216 1
a216 3
    (FT_CMap_CharNextFunc) cff_cmap_unicode_char_next,

    NULL, NULL, NULL, NULL, NULL
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d7 1
a7 1
/*  Copyright 2002, 2003, 2004, 2005, 2006 by                              */
d122 3
a124 3
  FT_CALLBACK_DEF( const char* )
  cff_sid_to_glyph_name( CFF_Font  cff,
                         FT_UInt   idx )
d126 6
a131 3
    CFF_Charset         charset = &cff->charset;
    FT_Service_PsCMaps  psnames = (FT_Service_PsCMaps)cff->psnames;
    FT_UInt             sid     = charset->sids[idx];
d133 2
d136 1
a136 1
    return cff_index_get_sid_string( &cff->string_index, sid, psnames );
d141 1
a141 1
  cff_cmap_unicode_init( PS_Unicodes  unicodes )
d143 3
a145 1
    TT_Face             face    = (TT_Face)FT_CMAP_FACE( unicodes );
d152 65
a216 9
    /* can't build Unicode map for CID-keyed font */
    if ( !charset->sids )
      return CFF_Err_Invalid_Argument;

    return psnames->unicodes_init( memory,
                                   unicodes,
                                   cff->num_glyphs,
                                   (PS_Glyph_NameFunc)&cff_sid_to_glyph_name,
                                   (FT_Pointer)cff );
d221 1
a221 1
  cff_cmap_unicode_done( PS_Unicodes  unicodes )
d223 1
a223 1
    FT_Face    face   = FT_CMAP_FACE( unicodes );
d227 2
a228 2
    FT_FREE( unicodes->maps );
    unicodes->num_maps = 0;
d233 2
a234 2
  cff_cmap_unicode_char_index( PS_Unicodes  unicodes,
                               FT_UInt32    char_code )
d236 10
a245 3
    TT_Face             face    = (TT_Face)FT_CMAP_FACE( unicodes );
    CFF_Font            cff     = (CFF_Font)face->extra.data;
    FT_Service_PsCMaps  psnames = (FT_Service_PsCMaps)cff->psnames;
d247 2
d250 6
a255 1
    return psnames->unicodes_char_index( unicodes, char_code );
d260 2
a261 2
  cff_cmap_unicode_char_next( PS_Unicodes  unicodes,
                              FT_UInt32   *pchar_code )
d263 35
a297 3
    TT_Face             face    = (TT_Face)FT_CMAP_FACE( unicodes );
    CFF_Font            cff     = (CFF_Font)face->extra.data;
    FT_Service_PsCMaps  psnames = (FT_Service_PsCMaps)cff->psnames;
d299 8
d308 3
a310 1
    return psnames->unicodes_char_next( unicodes, pchar_code );
d317 1
a317 1
    sizeof ( PS_UnicodesRec ),
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d7 1
a7 1
/*  Copyright 2002, 2003, 2004, 2005, 2006, 2007 by                        */
d68 1
a68 1
  FT_CALLBACK_DEF( FT_UInt32 )
d102 3
a104 1
  FT_DEFINE_CMAP_CLASS(cff_cmap_encoding_class_rec,
d110 2
a111 4
    (FT_CMap_CharNextFunc) cff_cmap_encoding_char_next,

    NULL, NULL, NULL, NULL, NULL
  )
d123 1
a123 1
  cff_sid_to_glyph_name( TT_Face   face,
a125 1
    CFF_Font            cff     = (CFF_Font)face->extra.data;
a134 11
  FT_CALLBACK_DEF( void )
  cff_sid_free_glyph_name( TT_Face      face,
                           const char*  gname )
  {
    FT_Memory  memory = FT_FACE_MEMORY( face );


    FT_FREE( gname );
  }


d152 2
a153 3
                                   (PS_GetGlyphNameFunc)&cff_sid_to_glyph_name,
                                   (PS_FreeGlyphNameFunc)&cff_sid_free_glyph_name,
                                   (FT_Pointer)face );
d182 1
a182 1
  FT_CALLBACK_DEF( FT_UInt32 )
d195 3
a197 1
  FT_DEFINE_CMAP_CLASS(cff_cmap_unicode_class_rec,
d203 2
a204 1
    (FT_CMap_CharNextFunc) cff_cmap_unicode_char_next,
a205 2
    NULL, NULL, NULL, NULL, NULL
  )
@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 2002-2016 by                                                 */
a18 2
#include <ft2build.h>
#include FT_INTERNAL_DEBUG_H
d34 1
a34 2
  cff_cmap_encoding_init( CFF_CMapStd  cmap,
                          FT_Pointer   pointer )
a39 2
    FT_UNUSED( pointer );

d102 2
a103 2
  FT_DEFINE_CMAP_CLASS(
    cff_cmap_encoding_class_rec,
d105 4
a108 1
    sizeof ( CFF_CMapStdRec ),
d110 1
a110 10
    (FT_CMap_InitFunc)     cff_cmap_encoding_init,        /* init       */
    (FT_CMap_DoneFunc)     cff_cmap_encoding_done,        /* done       */
    (FT_CMap_CharIndexFunc)cff_cmap_encoding_char_index,  /* char_index */
    (FT_CMap_CharNextFunc) cff_cmap_encoding_char_next,   /* char_next  */

    (FT_CMap_CharVarIndexFunc)    NULL,  /* char_var_index   */
    (FT_CMap_CharVarIsDefaultFunc)NULL,  /* char_var_default */
    (FT_CMap_VariantListFunc)     NULL,  /* variant_list     */
    (FT_CMap_CharVariantListFunc) NULL,  /* charvariant_list */
    (FT_CMap_VariantCharListFunc) NULL   /* variantchar_list */
d123 16
a138 2
  cff_sid_to_glyph_name( TT_Face  face,
                         FT_UInt  idx )
d140 1
a140 3
    CFF_Font     cff     = (CFF_Font)face->extra.data;
    CFF_Charset  charset = &cff->charset;
    FT_UInt      sid     = charset->sids[idx];
d143 1
a143 1
    return cff_index_get_sid_string( cff, sid );
d148 1
a148 2
  cff_cmap_unicode_init( PS_Unicodes  unicodes,
                         FT_Pointer   pointer )
a155 2
    FT_UNUSED( pointer );

a157 1
    /* because we don't know glyph names.         */
d159 1
a159 1
      return FT_THROW( No_Unicode_Glyph_Name );
d165 1
a165 1
                                   (PS_FreeGlyphNameFunc)NULL,
d208 2
a209 2
  FT_DEFINE_CMAP_CLASS(
    cff_cmap_unicode_class_rec,
d211 4
a214 1
    sizeof ( PS_UnicodesRec ),
d216 1
a216 10
    (FT_CMap_InitFunc)     cff_cmap_unicode_init,        /* init       */
    (FT_CMap_DoneFunc)     cff_cmap_unicode_done,        /* done       */
    (FT_CMap_CharIndexFunc)cff_cmap_unicode_char_index,  /* char_index */
    (FT_CMap_CharNextFunc) cff_cmap_unicode_char_next,   /* char_next  */

    (FT_CMap_CharVarIndexFunc)    NULL,  /* char_var_index   */
    (FT_CMap_CharVarIsDefaultFunc)NULL,  /* char_var_default */
    (FT_CMap_VariantListFunc)     NULL,  /* variant_list     */
    (FT_CMap_CharVariantListFunc) NULL,  /* charvariant_list */
    (FT_CMap_VariantCharListFunc) NULL   /* variantchar_list */
a218 1

@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
