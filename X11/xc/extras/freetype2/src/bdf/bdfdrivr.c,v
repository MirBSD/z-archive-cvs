head	1.6;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.3
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.6
date	2017.04.15.19.21.30;	author tg;	state Exp;
branches;
next	1.5;
commitid	10058F2723111C7BEE2;

1.5
date	2013.08.06.19.47.46;	author tg;	state Exp;
branches;
next	1.4;
commitid	100520152445E05B912;

1.4
date	2008.06.12.20.54.34;	author bsiegert;	state Exp;
branches;
next	1.3;
commitid	10048518C1E44F62885;

1.3
date	2008.02.26.20.04.54;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10047C470A72A1E13CE;

1.2
date	2006.06.29.20.24.46;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.09;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.53.15;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.38.45;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.103.1
date	2005.03.18.10.43.09;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.35.08;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.36.40;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.26;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.42.00;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.6
log
@first cut at a quickmerge
@
text
@/*  bdfdrivr.c

    FreeType font driver for bdf files

    Copyright (C) 2001-2008, 2011, 2013, 2014 by
    Francesco Zappa Nardelli

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#include <ft2build.h>

#include FT_INTERNAL_DEBUG_H
#include FT_INTERNAL_STREAM_H
#include FT_INTERNAL_OBJECTS_H
#include FT_BDF_H
#include FT_TRUETYPE_IDS_H

#include FT_SERVICE_BDF_H
#include FT_SERVICE_FONT_FORMAT_H

#include "bdf.h"
#include "bdfdrivr.h"

#include "bdferror.h"


  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_bdfdriver


  typedef struct  BDF_CMapRec_
  {
    FT_CMapRec        cmap;
    FT_ULong          num_encodings; /* ftobjs.h: FT_CMap->clazz->size */
    BDF_encoding_el*  encodings;

  } BDF_CMapRec, *BDF_CMap;


  FT_CALLBACK_DEF( FT_Error )
  bdf_cmap_init( FT_CMap     bdfcmap,
                 FT_Pointer  init_data )
  {
    BDF_CMap  cmap = (BDF_CMap)bdfcmap;
    BDF_Face  face = (BDF_Face)FT_CMAP_FACE( cmap );
    FT_UNUSED( init_data );


    cmap->num_encodings = face->bdffont->glyphs_used;
    cmap->encodings     = face->en_table;

    return FT_Err_Ok;
  }


  FT_CALLBACK_DEF( void )
  bdf_cmap_done( FT_CMap  bdfcmap )
  {
    BDF_CMap  cmap = (BDF_CMap)bdfcmap;


    cmap->encodings     = NULL;
    cmap->num_encodings = 0;
  }


  FT_CALLBACK_DEF( FT_UInt )
  bdf_cmap_char_index( FT_CMap    bdfcmap,
                       FT_UInt32  charcode )
  {
    BDF_CMap          cmap      = (BDF_CMap)bdfcmap;
    BDF_encoding_el*  encodings = cmap->encodings;
    FT_ULong          min, max, mid; /* num_encodings */
    FT_UShort         result    = 0; /* encodings->glyph */


    min = 0;
    max = cmap->num_encodings;

    while ( min < max )
    {
      FT_ULong  code;


      mid  = ( min + max ) >> 1;
      code = (FT_ULong)encodings[mid].enc;

      if ( charcode == code )
      {
        /* increase glyph index by 1 --              */
        /* we reserve slot 0 for the undefined glyph */
        result = encodings[mid].glyph + 1;
        break;
      }

      if ( charcode < code )
        max = mid;
      else
        min = mid + 1;
    }

    return result;
  }


  FT_CALLBACK_DEF( FT_UInt )
  bdf_cmap_char_next( FT_CMap     bdfcmap,
                      FT_UInt32  *acharcode )
  {
    BDF_CMap          cmap      = (BDF_CMap)bdfcmap;
    BDF_encoding_el*  encodings = cmap->encodings;
    FT_ULong          min, max, mid; /* num_encodings */
    FT_UShort         result   = 0;  /* encodings->glyph */
    FT_ULong          charcode = *acharcode + 1;


    min = 0;
    max = cmap->num_encodings;

    while ( min < max )
    {
      FT_ULong  code; /* same as BDF_encoding_el.enc */


      mid  = ( min + max ) >> 1;
      code = (FT_ULong)encodings[mid].enc;

      if ( charcode == code )
      {
        /* increase glyph index by 1 --              */
        /* we reserve slot 0 for the undefined glyph */
        result = encodings[mid].glyph + 1;
        goto Exit;
      }

      if ( charcode < code )
        max = mid;
      else
        min = mid + 1;
    }

    charcode = 0;
    if ( min < cmap->num_encodings )
    {
      charcode = (FT_ULong)encodings[min].enc;
      result   = encodings[min].glyph + 1;
    }

  Exit:
    if ( charcode > 0xFFFFFFFFUL )
    {
      FT_TRACE1(( "bdf_cmap_char_next: charcode 0x%x > 32bit API" ));
      *acharcode = 0;
      /* XXX: result should be changed to indicate an overflow error */
    }
    else
      *acharcode = (FT_UInt32)charcode;
    return result;
  }


  static
  const FT_CMap_ClassRec  bdf_cmap_class =
  {
    sizeof ( BDF_CMapRec ),
    bdf_cmap_init,
    bdf_cmap_done,
    bdf_cmap_char_index,
    bdf_cmap_char_next,

    NULL, NULL, NULL, NULL, NULL
  };


  static FT_Error
  bdf_interpret_style( BDF_Face  bdf )
  {
    FT_Error         error  = FT_Err_Ok;
    FT_Face          face   = FT_FACE( bdf );
    FT_Memory        memory = face->memory;
    bdf_font_t*      font   = bdf->bdffont;
    bdf_property_t*  prop;

    char*   strings[4] = { NULL, NULL, NULL, NULL };
    size_t  nn, len, lengths[4];


    face->style_flags = 0;

    prop = bdf_get_font_property( font, (char *)"SLANT" );
    if ( prop && prop->format == BDF_ATOM                             &&
         prop->value.atom                                             &&
         ( *(prop->value.atom) == 'O' || *(prop->value.atom) == 'o' ||
           *(prop->value.atom) == 'I' || *(prop->value.atom) == 'i' ) )
    {
      face->style_flags |= FT_STYLE_FLAG_ITALIC;
      strings[2] = ( *(prop->value.atom) == 'O' || *(prop->value.atom) == 'o' )
                   ? (char *)"Oblique"
                   : (char *)"Italic";
    }

    prop = bdf_get_font_property( font, (char *)"WEIGHT_NAME" );
    if ( prop && prop->format == BDF_ATOM                             &&
         prop->value.atom                                             &&
         ( *(prop->value.atom) == 'B' || *(prop->value.atom) == 'b' ) )
    {
      face->style_flags |= FT_STYLE_FLAG_BOLD;
      strings[1] = (char *)"Bold";
    }

    prop = bdf_get_font_property( font, (char *)"SETWIDTH_NAME" );
    if ( prop && prop->format == BDF_ATOM                              &&
         prop->value.atom && *(prop->value.atom)                       &&
         !( *(prop->value.atom) == 'N' || *(prop->value.atom) == 'n' ) )
      strings[3] = (char *)(prop->value.atom);

    prop = bdf_get_font_property( font, (char *)"ADD_STYLE_NAME" );
    if ( prop && prop->format == BDF_ATOM                              &&
         prop->value.atom && *(prop->value.atom)                       &&
         !( *(prop->value.atom) == 'N' || *(prop->value.atom) == 'n' ) )
      strings[0] = (char *)(prop->value.atom);

    for ( len = 0, nn = 0; nn < 4; nn++ )
    {
      lengths[nn] = 0;
      if ( strings[nn] )
      {
        lengths[nn] = ft_strlen( strings[nn] );
        len        += lengths[nn] + 1;
      }
    }

    if ( len == 0 )
    {
      strings[0] = (char *)"Regular";
      lengths[0] = ft_strlen( strings[0] );
      len        = lengths[0] + 1;
    }

    {
      char*  s;


      if ( FT_ALLOC( face->style_name, len ) )
        return error;

      s = face->style_name;

      for ( nn = 0; nn < 4; nn++ )
      {
        char*  src = strings[nn];


        len = lengths[nn];

        if ( !src )
          continue;

        /* separate elements with a space */
        if ( s != face->style_name )
          *s++ = ' ';

        ft_memcpy( s, src, len );

        /* need to convert spaces to dashes for */
        /* add_style_name and setwidth_name     */
        if ( nn == 0 || nn == 3 )
        {
          size_t  mm;


          for ( mm = 0; mm < len; mm++ )
            if ( s[mm] == ' ' )
              s[mm] = '-';
        }

        s += len;
      }
      *s = 0;
    }

    return error;
  }


  FT_CALLBACK_DEF( void )
  BDF_Face_Done( FT_Face  bdfface )         /* BDF_Face */
  {
    BDF_Face   face = (BDF_Face)bdfface;
    FT_Memory  memory;


    if ( !face )
      return;

    memory = FT_FACE_MEMORY( face );

    bdf_free_font( face->bdffont );

    FT_FREE( face->en_table );

    FT_FREE( face->charset_encoding );
    FT_FREE( face->charset_registry );
    FT_FREE( bdfface->family_name );
    FT_FREE( bdfface->style_name );

    FT_FREE( bdfface->available_sizes );

    FT_FREE( face->bdffont );
  }


  FT_CALLBACK_DEF( FT_Error )
  BDF_Face_Init( FT_Stream      stream,
                 FT_Face        bdfface,        /* BDF_Face */
                 FT_Int         face_index,
                 FT_Int         num_params,
                 FT_Parameter*  params )
  {
    FT_Error       error  = FT_Err_Ok;
    BDF_Face       face   = (BDF_Face)bdfface;
    FT_Memory      memory = FT_FACE_MEMORY( face );

    bdf_font_t*    font = NULL;
    bdf_options_t  options;

    FT_UNUSED( num_params );
    FT_UNUSED( params );


    FT_TRACE2(( "BDF driver\n" ));

    if ( FT_STREAM_SEEK( 0 ) )
      goto Exit;

    options.correct_metrics = 1;   /* FZ XXX: options semantics */
    options.keep_unencoded  = 1;
    options.keep_comments   = 0;
    options.font_spacing    = BDF_PROPORTIONAL;

    error = bdf_load_font( stream, memory, &options, &font );
    if ( FT_ERR_EQ( error, Missing_Startfont_Field ) )
    {
      FT_TRACE2(( "  not a BDF file\n" ));
      goto Fail;
    }
    else if ( error )
      goto Exit;

    /* we have a bdf font: let's construct the face object */
    face->bdffont = font;

    /* BDF could not have multiple face in single font file.
     * XXX: non-zero face_index is already invalid argument, but
     *      Type1, Type42 driver has a convention to return
     *      an invalid argument error when the font could be
     *      opened by the specified driver.
     */
    if ( face_index > 0 && ( face_index & 0xFFFF ) > 0 )
    {
      FT_ERROR(( "BDF_Face_Init: invalid face index\n" ));
      BDF_Face_Done( bdfface );
      return FT_THROW( Invalid_Argument );
    }

    {
      bdf_property_t*  prop = NULL;


      FT_TRACE4(( "  number of glyphs: allocated %d (used %d)\n",
                  font->glyphs_size,
                  font->glyphs_used ));
      FT_TRACE4(( "  number of unencoded glyphs: allocated %d (used %d)\n",
                  font->unencoded_size,
                  font->unencoded_used ));

      bdfface->num_faces  = 1;
      bdfface->face_index = 0;

      bdfface->face_flags |= FT_FACE_FLAG_FIXED_SIZES |
                             FT_FACE_FLAG_HORIZONTAL  |
                             FT_FACE_FLAG_FAST_GLYPHS;

      prop = bdf_get_font_property( font, "SPACING" );
      if ( prop && prop->format == BDF_ATOM                             &&
           prop->value.atom                                             &&
           ( *(prop->value.atom) == 'M' || *(prop->value.atom) == 'm' ||
             *(prop->value.atom) == 'C' || *(prop->value.atom) == 'c' ) )
        bdfface->face_flags |= FT_FACE_FLAG_FIXED_WIDTH;

      /* FZ XXX: TO DO: FT_FACE_FLAGS_VERTICAL   */
      /* FZ XXX: I need a font to implement this */

      prop = bdf_get_font_property( font, "FAMILY_NAME" );
      if ( prop && prop->value.atom )
      {
        if ( FT_STRDUP( bdfface->family_name, prop->value.atom ) )
          goto Exit;
      }
      else
        bdfface->family_name = NULL;

      if ( FT_SET_ERROR( bdf_interpret_style( face ) ) )
        goto Exit;

      /* the number of glyphs (with one slot for the undefined glyph */
      /* at position 0 and all unencoded glyphs)                     */
      bdfface->num_glyphs = (FT_Long)( font->glyphs_size + 1 );

      bdfface->num_fixed_sizes = 1;
      if ( FT_NEW_ARRAY( bdfface->available_sizes, 1 ) )
        goto Exit;

      {
        FT_Bitmap_Size*  bsize = bdfface->available_sizes;
        FT_Short         resolution_x = 0, resolution_y = 0;


        FT_ZERO( bsize );

        bsize->height = (FT_Short)( font->font_ascent + font->font_descent );

        prop = bdf_get_font_property( font, "AVERAGE_WIDTH" );
        if ( prop )
          bsize->width = (FT_Short)( ( prop->value.l + 5 ) / 10 );
        else
          bsize->width = (FT_Short)( bsize->height * 2/3 );

        prop = bdf_get_font_property( font, "POINT_SIZE" );
        if ( prop )
          /* convert from 722.7 decipoints to 72 points per inch */
          bsize->size =
            (FT_Pos)( ( prop->value.l * 64 * 7200 + 36135L ) / 72270L );
        else
          bsize->size = bsize->width << 6;

        prop = bdf_get_font_property( font, "PIXEL_SIZE" );
        if ( prop )
          bsize->y_ppem = (FT_Short)prop->value.l << 6;

        prop = bdf_get_font_property( font, "RESOLUTION_X" );
        if ( prop )
          resolution_x = (FT_Short)prop->value.l;

        prop = bdf_get_font_property( font, "RESOLUTION_Y" );
        if ( prop )
          resolution_y = (FT_Short)prop->value.l;

        if ( bsize->y_ppem == 0 )
        {
          bsize->y_ppem = bsize->size;
          if ( resolution_y )
            bsize->y_ppem = bsize->y_ppem * resolution_y / 72;
        }
        if ( resolution_x && resolution_y )
          bsize->x_ppem = bsize->y_ppem * resolution_x / resolution_y;
        else
          bsize->x_ppem = bsize->y_ppem;
      }

      /* encoding table */
      {
        bdf_glyph_t*   cur = font->glyphs;
        unsigned long  n;


        if ( FT_NEW_ARRAY( face->en_table, font->glyphs_size ) )
          goto Exit;

        face->default_glyph = 0;
        for ( n = 0; n < font->glyphs_size; n++ )
        {
          (face->en_table[n]).enc = cur[n].encoding;
          FT_TRACE4(( "  idx %d, val 0x%lX\n", n, cur[n].encoding ));
          (face->en_table[n]).glyph = (FT_UShort)n;

          if ( cur[n].encoding == font->default_char )
          {
            if ( n < FT_UINT_MAX )
              face->default_glyph = (FT_UInt)n;
            else
              FT_TRACE1(( "BDF_Face_Init:"
                          " idx %d is too large for this system\n", n ));
          }
        }
      }

      /* charmaps */
      {
        bdf_property_t  *charset_registry, *charset_encoding;
        FT_Bool          unicode_charmap  = 0;


        charset_registry =
          bdf_get_font_property( font, "CHARSET_REGISTRY" );
        charset_encoding =
          bdf_get_font_property( font, "CHARSET_ENCODING" );
        if ( charset_registry && charset_encoding )
        {
          if ( charset_registry->format == BDF_ATOM &&
               charset_encoding->format == BDF_ATOM &&
               charset_registry->value.atom         &&
               charset_encoding->value.atom         )
          {
            const char*  s;


            if ( FT_STRDUP( face->charset_encoding,
                            charset_encoding->value.atom ) ||
                 FT_STRDUP( face->charset_registry,
                            charset_registry->value.atom ) )
              goto Exit;

            /* Uh, oh, compare first letters manually to avoid dependency */
            /* on locales.                                                */
            s = face->charset_registry;
            if ( ( s[0] == 'i' || s[0] == 'I' ) &&
                 ( s[1] == 's' || s[1] == 'S' ) &&
                 ( s[2] == 'o' || s[2] == 'O' ) )
            {
              s += 3;
              if ( !ft_strcmp( s, "10646" )                      ||
                   ( !ft_strcmp( s, "8859" ) &&
                     !ft_strcmp( face->charset_encoding, "1" ) ) )
              unicode_charmap = 1;
            }

            {
              FT_CharMapRec  charmap;


              charmap.face        = FT_FACE( face );
              charmap.encoding    = FT_ENCODING_NONE;
              /* initial platform/encoding should indicate unset status? */
              charmap.platform_id = TT_PLATFORM_APPLE_UNICODE;
              charmap.encoding_id = TT_APPLE_ID_DEFAULT;

              if ( unicode_charmap )
              {
                charmap.encoding    = FT_ENCODING_UNICODE;
                charmap.platform_id = TT_PLATFORM_MICROSOFT;
                charmap.encoding_id = TT_MS_ID_UNICODE_CS;
              }

              error = FT_CMap_New( &bdf_cmap_class, NULL, &charmap, NULL );

#if 0
              /* Select default charmap */
              if ( bdfface->num_charmaps )
                bdfface->charmap = bdfface->charmaps[0];
#endif
            }

            goto Exit;
          }
        }

        /* otherwise assume Adobe standard encoding */

        {
          FT_CharMapRec  charmap;


          charmap.face        = FT_FACE( face );
          charmap.encoding    = FT_ENCODING_ADOBE_STANDARD;
          charmap.platform_id = TT_PLATFORM_ADOBE;
          charmap.encoding_id = TT_ADOBE_ID_STANDARD;

          error = FT_CMap_New( &bdf_cmap_class, NULL, &charmap, NULL );

          /* Select default charmap */
          if ( bdfface->num_charmaps )
            bdfface->charmap = bdfface->charmaps[0];
        }
      }
    }

  Exit:
    return error;

  Fail:
    BDF_Face_Done( bdfface );
    return FT_THROW( Unknown_File_Format );
  }


  FT_CALLBACK_DEF( FT_Error )
  BDF_Size_Select( FT_Size   size,
                   FT_ULong  strike_index )
  {
    bdf_font_t*  bdffont = ( (BDF_Face)size->face )->bdffont;


    FT_Select_Metrics( size->face, strike_index );

    size->metrics.ascender    = bdffont->font_ascent * 64;
    size->metrics.descender   = -bdffont->font_descent * 64;
    size->metrics.max_advance = bdffont->bbx.width * 64;

    return FT_Err_Ok;
  }


  FT_CALLBACK_DEF( FT_Error )
  BDF_Size_Request( FT_Size          size,
                    FT_Size_Request  req )
  {
    FT_Face          face    = size->face;
    FT_Bitmap_Size*  bsize   = face->available_sizes;
    bdf_font_t*      bdffont = ( (BDF_Face)face )->bdffont;
    FT_Error         error   = FT_ERR( Invalid_Pixel_Size );
    FT_Long          height;


    height = FT_REQUEST_HEIGHT( req );
    height = ( height + 32 ) >> 6;

    switch ( req->type )
    {
    case FT_SIZE_REQUEST_TYPE_NOMINAL:
      if ( height == ( ( bsize->y_ppem + 32 ) >> 6 ) )
        error = FT_Err_Ok;
      break;

    case FT_SIZE_REQUEST_TYPE_REAL_DIM:
      if ( height == ( bdffont->font_ascent +
                       bdffont->font_descent ) )
        error = FT_Err_Ok;
      break;

    default:
      error = FT_THROW( Unimplemented_Feature );
      break;
    }

    if ( error )
      return error;
    else
      return BDF_Size_Select( size, 0 );
  }



  FT_CALLBACK_DEF( FT_Error )
  BDF_Glyph_Load( FT_GlyphSlot  slot,
                  FT_Size       size,
                  FT_UInt       glyph_index,
                  FT_Int32      load_flags )
  {
    BDF_Face     bdf    = (BDF_Face)FT_SIZE_FACE( size );
    FT_Face      face   = FT_FACE( bdf );
    FT_Error     error  = FT_Err_Ok;
    FT_Bitmap*   bitmap = &slot->bitmap;
    bdf_glyph_t  glyph;
    int          bpp    = bdf->bdffont->bpp;

    FT_UNUSED( load_flags );


    if ( !face )
    {
      error = FT_THROW( Invalid_Face_Handle );
      goto Exit;
    }

    if ( glyph_index >= (FT_UInt)face->num_glyphs )
    {
      error = FT_THROW( Invalid_Argument );
      goto Exit;
    }

    FT_TRACE1(( "BDF_Glyph_Load: glyph index %d\n", glyph_index ));

    /* index 0 is the undefined glyph */
    if ( glyph_index == 0 )
      glyph_index = bdf->default_glyph;
    else
      glyph_index--;

    /* slot, bitmap => freetype, glyph => bdflib */
    glyph = bdf->bdffont->glyphs[glyph_index];

    bitmap->rows  = glyph.bbx.height;
    bitmap->width = glyph.bbx.width;
    if ( glyph.bpr > INT_MAX )
      FT_TRACE1(( "BDF_Glyph_Load: too large pitch %d is truncated\n",
                   glyph.bpr ));
    bitmap->pitch = (int)glyph.bpr; /* same as FT_Bitmap.pitch */

    /* note: we don't allocate a new array to hold the bitmap; */
    /*       we can simply point to it                         */
    ft_glyphslot_set_bitmap( slot, glyph.bitmap );

    switch ( bpp )
    {
    case 1:
      bitmap->pixel_mode = FT_PIXEL_MODE_MONO;
      break;
    case 2:
      bitmap->pixel_mode = FT_PIXEL_MODE_GRAY2;
      break;
    case 4:
      bitmap->pixel_mode = FT_PIXEL_MODE_GRAY4;
      break;
    case 8:
      bitmap->pixel_mode = FT_PIXEL_MODE_GRAY;
      bitmap->num_grays  = 256;
      break;
    }

    slot->format      = FT_GLYPH_FORMAT_BITMAP;
    slot->bitmap_left = glyph.bbx.x_offset;
    slot->bitmap_top  = glyph.bbx.ascent;

    slot->metrics.horiAdvance  = (FT_Pos)( glyph.dwidth * 64 );
    slot->metrics.horiBearingX = (FT_Pos)( glyph.bbx.x_offset * 64 );
    slot->metrics.horiBearingY = (FT_Pos)( glyph.bbx.ascent * 64 );
    slot->metrics.width        = (FT_Pos)( bitmap->width * 64 );
    slot->metrics.height       = (FT_Pos)( bitmap->rows * 64 );

    /*
     * XXX DWIDTH1 and VVECTOR should be parsed and
     * used here, provided such fonts do exist.
     */
    ft_synthesize_vertical_metrics( &slot->metrics,
                                    bdf->bdffont->bbx.height * 64 );

  Exit:
    return error;
  }


 /*
  *
  *  BDF SERVICE
  *
  */

  static FT_Error
  bdf_get_bdf_property( BDF_Face          face,
                        const char*       prop_name,
                        BDF_PropertyRec  *aproperty )
  {
    bdf_property_t*  prop;


    FT_ASSERT( face && face->bdffont );

    prop = bdf_get_font_property( face->bdffont, prop_name );
    if ( prop )
    {
      switch ( prop->format )
      {
      case BDF_ATOM:
        aproperty->type   = BDF_PROPERTY_TYPE_ATOM;
        aproperty->u.atom = prop->value.atom;
        break;

      case BDF_INTEGER:
        if ( prop->value.l > 0x7FFFFFFFL || prop->value.l < ( -1 - 0x7FFFFFFFL ) )
        {
          FT_TRACE1(( "bdf_get_bdf_property:"
                      " too large integer 0x%x is truncated\n" ));
        }
        aproperty->type      = BDF_PROPERTY_TYPE_INTEGER;
        aproperty->u.integer = (FT_Int32)prop->value.l;
        break;

      case BDF_CARDINAL:
        if ( prop->value.ul > 0xFFFFFFFFUL )
        {
          FT_TRACE1(( "bdf_get_bdf_property:"
                      " too large cardinal 0x%x is truncated\n" ));
        }
        aproperty->type       = BDF_PROPERTY_TYPE_CARDINAL;
        aproperty->u.cardinal = (FT_UInt32)prop->value.ul;
        break;

      default:
        goto Fail;
      }
      return 0;
    }

  Fail:
    return FT_THROW( Invalid_Argument );
  }


  static FT_Error
  bdf_get_charset_id( BDF_Face      face,
                      const char*  *acharset_encoding,
                      const char*  *acharset_registry )
  {
    *acharset_encoding = face->charset_encoding;
    *acharset_registry = face->charset_registry;

    return 0;
  }


  static const FT_Service_BDFRec  bdf_service_bdf =
  {
    (FT_BDF_GetCharsetIdFunc)bdf_get_charset_id,       /* get_charset_id */
    (FT_BDF_GetPropertyFunc) bdf_get_bdf_property      /* get_property   */
  };


 /*
  *
  *  SERVICES LIST
  *
  */

  static const FT_ServiceDescRec  bdf_services[] =
  {
    { FT_SERVICE_ID_BDF,         &bdf_service_bdf },
    { FT_SERVICE_ID_FONT_FORMAT, FT_FONT_FORMAT_BDF },
    { NULL, NULL }
  };


  FT_CALLBACK_DEF( FT_Module_Interface )
  bdf_driver_requester( FT_Module    module,
                        const char*  name )
  {
    FT_UNUSED( module );

    return ft_service_list_lookup( bdf_services, name );
  }



  FT_CALLBACK_TABLE_DEF
  const FT_Driver_ClassRec  bdf_driver_class =
  {
    {
      FT_MODULE_FONT_DRIVER         |
      FT_MODULE_DRIVER_NO_OUTLINES,
      sizeof ( FT_DriverRec ),

      "bdf",
      0x10000L,
      0x20000L,

      NULL,    /* module-specific interface */

      NULL,                     /* FT_Module_Constructor  module_init   */
      NULL,                     /* FT_Module_Destructor   module_done   */
      bdf_driver_requester      /* FT_Module_Requester    get_interface */
    },

    sizeof ( BDF_FaceRec ),
    sizeof ( FT_SizeRec ),
    sizeof ( FT_GlyphSlotRec ),

    BDF_Face_Init,              /* FT_Face_InitFunc  init_face */
    BDF_Face_Done,              /* FT_Face_DoneFunc  done_face */
    NULL,                       /* FT_Size_InitFunc  init_size */
    NULL,                       /* FT_Size_DoneFunc  done_size */
    NULL,                       /* FT_Slot_InitFunc  init_slot */
    NULL,                       /* FT_Slot_DoneFunc  done_slot */

    BDF_Glyph_Load,             /* FT_Slot_LoadFunc  load_glyph */

    NULL,                       /* FT_Face_GetKerningFunc   get_kerning  */
    NULL,                       /* FT_Face_AttachFunc       attach_file  */
    NULL,                       /* FT_Face_GetAdvancesFunc  get_advances */

    BDF_Size_Request,           /* FT_Size_RequestFunc  request_size */
    BDF_Size_Select             /* FT_Size_SelectFunc   select_size  */
  };


/* END */
@


1.5
log
@fastmerge
@
text
@d5 1
a5 1
    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 by
d33 1
d36 1
a36 1
#include FT_SERVICE_XFREE86_NAME_H
d75 1
a75 1
    return BDF_Err_Ok;
d109 1
a109 1
      code = encodings[mid].enc;
d149 1
a149 1
      code = encodings[mid].enc;
d168 1
a168 1
      charcode = encodings[min].enc;
d185 1
a185 1
  FT_CALLBACK_TABLE_DEF
d201 1
a201 1
    FT_Error         error  = BDF_Err_Ok;
a245 2
    len = 0;

d279 1
a279 1
        if ( src == NULL )
a332 2

    FT_TRACE4(( "BDF_Face_Done: done face\n" ));
d343 1
a343 1
    FT_Error       error  = BDF_Err_Ok;
a351 1
    FT_UNUSED( face_index );
d354 2
d365 1
a365 1
    if ( error == BDF_Err_Missing_Startfont_Field )
d367 1
a367 1
      FT_TRACE2(( "[not a valid BDF file]\n" ));
d375 14
d393 1
a393 1
      FT_TRACE4(( "number of glyphs: %d (%d)\n",
d396 1
a396 1
      FT_TRACE4(( "number of unencoded glyphs: %d (%d)\n",
d402 4
a405 3
      bdfface->face_flags = FT_FACE_FLAG_FIXED_SIZES |
                            FT_FACE_FLAG_HORIZONTAL  |
                            FT_FACE_FLAG_FAST_GLYPHS;
d424 1
a424 1
        bdfface->family_name = 0;
d426 1
a426 1
      if ( ( error = bdf_interpret_style( face ) ) != 0 )
d431 1
a431 1
      bdfface->num_glyphs = font->glyphs_size + 1;
d442 1
a442 1
        FT_MEM_ZERO( bsize, sizeof ( FT_Bitmap_Size ) );
d497 2
a498 2
          FT_TRACE4(( "idx %d, val 0x%lX\n", n, cur[n].encoding ));
          (face->en_table[n]).glyph = (FT_Short)n;
d505 2
a506 1
              FT_TRACE1(( "idx %d is too large for this system\n", n ));
d513 1
a513 1
        bdf_property_t  *charset_registry = 0, *charset_encoding = 0;
d557 3
a559 2
              charmap.platform_id = 0;
              charmap.encoding_id = 0;
d564 2
a565 2
                charmap.platform_id = 3;
                charmap.encoding_id = 1;
d589 2
a590 2
          charmap.platform_id = 7;
          charmap.encoding_id = 0;
d606 1
a606 1
    return BDF_Err_Unknown_File_Format;
d619 3
a621 3
    size->metrics.ascender    = bdffont->font_ascent << 6;
    size->metrics.descender   = -bdffont->font_descent << 6;
    size->metrics.max_advance = bdffont->bbx.width << 6;
d623 1
a623 1
    return BDF_Err_Ok;
d634 1
a634 1
    FT_Error         error   = BDF_Err_Invalid_Pixel_Size;
d645 1
a645 1
        error = BDF_Err_Ok;
d651 1
a651 1
        error = BDF_Err_Ok;
d655 1
a655 1
      error = BDF_Err_Unimplemented_Feature;
d675 1
a675 1
    FT_Error     error  = BDF_Err_Ok;
d683 1
a683 1
    if ( !face || glyph_index >= (FT_UInt)face->num_glyphs )
d685 1
a685 1
      error = BDF_Err_Invalid_Argument;
d689 8
d738 5
a742 5
    slot->metrics.horiAdvance  = glyph.dwidth << 6;
    slot->metrics.horiBearingX = glyph.bbx.x_offset << 6;
    slot->metrics.horiBearingY = glyph.bbx.ascent << 6;
    slot->metrics.width        = bitmap->width << 6;
    slot->metrics.height       = bitmap->rows << 6;
d749 1
a749 1
                                    bdf->bdffont->bbx.height << 6 );
d785 2
a786 2
          FT_TRACE1(( "bdf_get_bdf_property: " ));
          FT_TRACE1(( "too large integer 0x%x is truncated\n" ));
d795 2
a796 2
          FT_TRACE1(( "bdf_get_bdf_property: " ));
          FT_TRACE1(( "too large cardinal 0x%x is truncated\n" ));
d809 1
a809 1
    return BDF_Err_Invalid_Argument;
d827 2
a828 2
    (FT_BDF_GetCharsetIdFunc)bdf_get_charset_id,
    (FT_BDF_GetPropertyFunc) bdf_get_bdf_property
d840 2
a841 2
    { FT_SERVICE_ID_BDF,       &bdf_service_bdf },
    { FT_SERVICE_ID_XF86_NAME, FT_XF86_FORMAT_BDF },
d869 1
a869 1
      0,
d871 3
a873 3
      (FT_Module_Constructor)0,
      (FT_Module_Destructor) 0,
      (FT_Module_Requester)  bdf_driver_requester
d880 12
a891 16
    BDF_Face_Init,
    BDF_Face_Done,
    0,                          /* FT_Size_InitFunc */
    0,                          /* FT_Size_DoneFunc */
    0,                          /* FT_Slot_InitFunc */
    0,                          /* FT_Slot_DoneFunc */

#ifdef FT_CONFIG_OPTION_OLD_INTERNALS
    ft_stub_set_char_sizes,
    ft_stub_set_pixel_sizes,
#endif
    BDF_Glyph_Load,

    0,                          /* FT_Face_GetKerningFunc   */
    0,                          /* FT_Face_AttachFunc       */
    0,                          /* FT_Face_GetAdvancesFunc  */
d893 2
a894 2
    BDF_Size_Request,
    BDF_Size_Select
@


1.4
log
@Merge freetype 2.3.6
@
text
@d5 1
a5 1
    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007 by
a25 1
/* $XFree86: xc/extras/freetype2/src/bdf/bdfdrivr.c,v 1.3 2004/04/26 16:15:54 dawes Exp $ */
d56 1
a56 1
    FT_UInt           num_encodings;
d95 2
a96 2
    FT_UInt           min, max, mid;
    FT_UInt           result    = 0;
d104 1
a104 1
      FT_UInt32  code;
d134 3
a136 3
    FT_UInt           min, max, mid;
    FT_UInt32         charcode = *acharcode + 1;
    FT_UInt           result   = 0;
d144 1
a144 1
      FT_UInt32  code;
d172 8
a179 1
    *acharcode = charcode;
d206 2
a207 3
    int    nn, len;
    char*  strings[4] = { NULL, NULL, NULL, NULL };
    int    lengths[4];
d293 1
a293 1
          int  mm;
d313 2
a314 2
    BDF_Face   face   = (BDF_Face)bdfface;
    FT_Memory  memory = FT_FACE_MEMORY( face );
d317 5
d435 1
a435 1
          bsize->width = (FT_Short)( ( prop->value.int32 + 5 ) / 10 );
d443 1
a443 1
            (FT_Pos)( ( prop->value.int32 * 64 * 7200 + 36135L ) / 72270L );
d449 1
a449 1
          bsize->y_ppem = (FT_Short)prop->value.int32 << 6;
d453 1
a453 1
          resolution_x = (FT_Short)prop->value.int32;
d457 1
a457 1
          resolution_y = (FT_Short)prop->value.int32;
d488 6
a493 1
            face->default_glyph = n;
d629 1
a629 1
      if ( height == ( bsize->y_ppem + 32 ) >> 6 )
d685 4
a688 1
    bitmap->pitch = glyph.bpr;
d760 5
d766 1
a766 1
        aproperty->u.integer = prop->value.int32;
d770 5
d776 1
a776 1
        aproperty->u.cardinal = prop->value.card32;
@


1.3
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d185 3
a187 1
    bdf_cmap_char_next
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d5 1
a5 1
    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006 by
d198 3
a200 4
    char  *istr = NULL, *bstr = NULL;
    char  *sstr = NULL, *astr = NULL;

    int  parts = 0, len = 0;
d212 3
a214 5
      istr = ( *(prop->value.atom) == 'O' || *(prop->value.atom) == 'o' )
               ? (char *)"Oblique"
               : (char *)"Italic";
      len += ft_strlen( istr );
      parts++;
d223 1
a223 3
      bstr = (char *)"Bold";
      len += ft_strlen( bstr );
      parts++;
d230 1
a230 5
    {
      sstr = (char *)(prop->value.atom);
      len += ft_strlen( sstr );
      parts++;
    }
d236 5
d242 6
a247 3
      astr = (char *)(prop->value.atom);
      len += ft_strlen( astr );
      parts++;
d250 1
a250 1
    if ( !parts || !len )
d252 4
a255 2
      if ( FT_ALLOC( face->style_name, ft_strlen( "Regular" ) + 1 ) )
        return error;
a256 3
      ft_strcpy( face->style_name, "Regular" );
    }
    else
d258 1
a258 2
      char          *style, *s;
      unsigned int  i;
d261 1
a261 1
      if ( FT_ALLOC( style, len + parts ) )
d264 1
a264 1
      s = style;
d266 1
a266 1
      if ( astr )
d268 27
a294 17
        ft_strcpy( s, astr );
        for ( i = 0; i < ft_strlen( astr ); i++, s++ )
          if ( *s == ' ' )
            *s = '-';                     /* replace spaces with dashes */
        *(s++) = ' ';
      }
      if ( bstr )
      {
        ft_strcpy( s, bstr );
        s += ft_strlen( bstr );
        *(s++) = ' ';
      }
      if ( istr )
      {
        ft_strcpy( s, istr );
        s += ft_strlen( istr );
        *(s++) = ' ';
d296 1
a296 11
      if ( sstr )
      {
        ft_strcpy( s, sstr );
        for ( i = 0; i < ft_strlen( sstr ); i++, s++ )
          if ( *s == ' ' )
            *s = '-';                     /* replace spaces with dashes */
        *(s++) = ' ';
      }
      *(--s) = '\0';        /* overwrite last ' ', terminate the string */

      face->style_name = style;                     /* allocated string */
d395 1
a395 4
        int  l = ft_strlen( prop->value.atom ) + 1;


        if ( FT_NEW_ARRAY( bdfface->family_name, l ) )
a396 1
        ft_strcpy( bdfface->family_name, prop->value.atom );
d432 2
d500 4
a503 2
            if ( FT_NEW_ARRAY( face->charset_encoding,
                               ft_strlen( charset_encoding->value.atom ) + 1 ) )
a504 6
            if ( FT_NEW_ARRAY( face->charset_registry,
                               ft_strlen( charset_registry->value.atom ) + 1 ) )
              goto Exit;

            ft_strcpy( face->charset_registry, charset_registry->value.atom );
            ft_strcpy( face->charset_encoding, charset_encoding->value.atom );
d506 2
a507 2
            /* Uh, oh, compare first letters manually to avoid dependency
               on locales. */
d641 2
a642 1
    BDF_Face     face   = (BDF_Face)FT_SIZE_FACE( size );
d646 1
a646 1
    int          bpp    = face->bdffont->bpp;
d651 1
a651 1
    if ( !face )
d659 1
a659 1
      glyph_index = face->default_glyph;
d664 1
a664 1
    glyph = face->bdffont->glyphs[glyph_index];
d706 1
a706 1
                                    face->bdffont->bbx.height << 6 );
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
    Copyright (C) 2001, 2002, 2003, 2004 by
d64 2
a65 1
  bdf_cmap_init( BDF_CMap  cmap )
d67 1
d69 1
d80 1
a80 1
  bdf_cmap_done( BDF_CMap  cmap )
d82 3
d91 1
a91 1
  bdf_cmap_char_index( BDF_CMap   cmap,
d94 1
d97 1
a97 1
    FT_UInt           result = 0;
d113 2
d130 1
a130 1
  bdf_cmap_char_next( BDF_CMap    cmap,
d133 1
d153 2
d178 2
a179 1
  FT_CALLBACK_TABLE_DEF const FT_CMap_ClassRec  bdf_cmap_class =
d181 5
a185 5
    sizeof( BDF_CMapRec ),
    (FT_CMap_InitFunc)     bdf_cmap_init,
    (FT_CMap_DoneFunc)     bdf_cmap_done,
    (FT_CMap_CharIndexFunc)bdf_cmap_char_index,
    (FT_CMap_CharNextFunc) bdf_cmap_char_next
d252 6
a257 1
      face->style_name = (char *)"Regular";
d306 2
a307 2
  FT_CALLBACK_DEF( FT_Error )
  BDF_Face_Done( BDF_Face  face )
d309 1
d319 2
a320 1
    FT_FREE( face->root.family_name );
d322 1
a322 1
    FT_FREE( face->root.available_sizes );
a326 2

    return BDF_Err_Ok;
d332 1
a332 1
                 BDF_Face       face,
d338 1
d341 1
a341 1
    bdf_font_t*    font;
a368 1
      FT_Face          root = FT_FACE( face );
d379 5
a383 5
      root->num_faces  = 1;
      root->face_index = 0;
      root->face_flags = FT_FACE_FLAG_FIXED_SIZES |
                         FT_FACE_FLAG_HORIZONTAL  |
                         FT_FACE_FLAG_FAST_GLYPHS;
d390 1
a390 1
        root->face_flags |= FT_FACE_FLAG_FIXED_WIDTH;
d401 1
a401 1
        if ( FT_NEW_ARRAY( root->family_name, l ) )
d403 1
a403 1
        ft_strcpy( root->family_name, prop->value.atom );
d406 1
a406 1
        root->family_name = 0;
d411 3
a413 1
      root->num_glyphs = font->glyphs_size;     /* unencoded included */
d415 2
a416 2
      root->num_fixed_sizes = 1;
      if ( FT_NEW_ARRAY( root->available_sizes, 1 ) )
d420 1
a420 1
        FT_Bitmap_Size*  bsize = root->available_sizes;
d426 1
a426 1
        bsize->height = font->font_ascent + font->font_descent;
d432 1
a432 1
          bsize->width = bsize->height * 2/3;
d473 1
d479 3
d549 2
a550 2
              if (root->num_charmaps)
                root->charmap = root->charmaps[0];
d572 2
a573 2
          if (root->num_charmaps)
            root->charmap = root->charmaps[0];
d582 1
a582 1
    BDF_Face_Done( face );
d587 20
a606 2
  static FT_Error
  BDF_Set_Pixel_Size( FT_Size  size )
d608 5
a612 2
    BDF_Face  face = (BDF_Face)FT_SIZE_FACE( size );
    FT_Face   root = FT_FACE( face );
d615 2
a616 2
    FT_TRACE4(( "rec %d - pres %d\n",
                size->metrics.y_ppem, root->available_sizes->y_ppem ));
d618 1
a618 1
    if ( size->metrics.y_ppem == root->available_sizes->y_ppem >> 6 )
d620 4
a623 5
      size->metrics.ascender    = face->bdffont->font_ascent << 6;
      size->metrics.descender   = -face->bdffont->font_descent << 6;
      size->metrics.height      = ( face->bdffont->font_ascent +
                                    face->bdffont->font_descent ) << 6;
      size->metrics.max_advance = face->bdffont->bbx.width << 6;
d625 9
a633 1
      return BDF_Err_Ok;
d635 3
d639 1
a639 1
      return BDF_Err_Invalid_Pixel_Size;
d643 2
a644 1
  static FT_Error
d650 5
a654 7
    BDF_Face        face   = (BDF_Face)FT_SIZE_FACE( size );
    FT_Error        error  = BDF_Err_Ok;
    FT_Bitmap*      bitmap = &slot->bitmap;
    bdf_glyph_t     glyph;
    int             bpp    = face->bdffont->bpp;
    int             i, j, count;
    unsigned char   *p, *pp;
d665 4
a668 1
    if ( glyph_index > 0 )
d676 5
d682 1
a682 1
    if ( bpp == 1 )
d684 1
d686 8
a693 9
      bitmap->pitch      = glyph.bpr;

     /* note: we don't allocate a new array to hold the bitmap, we */
     /*       can simply point to it                               */
      ft_glyphslot_set_bitmap( slot, glyph.bitmap );
    }
    else
    {
      /* blow up pixmap to have 8 bits per pixel */
d695 2
a696 89
      bitmap->pitch      = bitmap->width;

      error = ft_glyphslot_alloc_bitmap( slot, bitmap->rows * bitmap->pitch );
      if ( error )
        goto Exit;

      switch ( bpp )
      {
      case 2:
        bitmap->num_grays = 4;

        count = 0;
        p     = glyph.bitmap;

        for ( i = 0; i < bitmap->rows; i++ )
        {
          pp = p;

          /* get the full bytes */
          for ( j = 0; j < ( bitmap->width >> 2 ); j++ )
          {
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0xC0 ) >> 6 );
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0x30 ) >> 4 );
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0x0C ) >> 2 );
            bitmap->buffer[count++] = (FT_Byte)(   *pp & 0x03 );

            pp++;
          }

          /* get remaining pixels (if any) */
          switch ( bitmap->width & 3 )
          {
          case 3:
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0xC0 ) >> 6 );
            /* fall through */
          case 2:
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0x30 ) >> 4 );
            /* fall through */
          case 1:
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0x0C ) >> 2 );
            /* fall through */
          case 0:
            break;
          }

          p += glyph.bpr;
        }
        break;

      case 4:
        bitmap->num_grays = 16;

        count = 0;
        p     = glyph.bitmap;

        for ( i = 0; i < bitmap->rows; i++ )
        {
          pp = p;

          /* get the full bytes */
          for ( j = 0; j < ( bitmap->width >> 1 ); j++ )
          {
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0xF0 ) >> 4 );
            bitmap->buffer[count++] = (FT_Byte)(   *pp & 0x0F );

            pp++;
          }

          /* get remaining pixel (if any) */
          switch ( bitmap->width & 1 )
          {
          case 1:
            bitmap->buffer[count++] = (FT_Byte)( ( *pp & 0xF0 ) >> 4 );
            /* fall through */
          case 0:
            break;
          }

          p += glyph.bpr;
        }
        break;

      case 8:
        bitmap->num_grays = 256;

        FT_MEM_COPY( bitmap->buffer, glyph.bitmap,
                     bitmap->rows * bitmap->pitch );
        break;
      }
d699 1
a702 1
    /* FZ XXX: TODO: vertical metrics */
d709 6
a714 2
    slot->linearHoriAdvance = (FT_Fixed)glyph.dwidth << 16;
    slot->format            = FT_GLYPH_FORMAT_BITMAP;
d767 1
d801 1
a801 1
  static FT_Module_Interface
d835 19
a853 15
    (FT_Face_InitFunc)        BDF_Face_Init,
    (FT_Face_DoneFunc)        BDF_Face_Done,
    (FT_Size_InitFunc)        0,
    (FT_Size_DoneFunc)        0,
    (FT_Slot_InitFunc)        0,
    (FT_Slot_DoneFunc)        0,

    (FT_Size_ResetPointsFunc) BDF_Set_Pixel_Size,
    (FT_Size_ResetPixelsFunc) BDF_Set_Pixel_Size,

    (FT_Slot_LoadFunc)        BDF_Glyph_Load,

    (FT_Face_GetKerningFunc)  0,
    (FT_Face_AttachFunc)      0,
    (FT_Face_GetAdvancesFunc) 0
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d5 1
a5 1
    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007 by
d26 1
d64 1
a64 2
  bdf_cmap_init( FT_CMap     bdfcmap,
                 FT_Pointer  init_data )
a65 1
    BDF_CMap  cmap = (BDF_CMap)bdfcmap;
a66 1
    FT_UNUSED( init_data );
d77 1
a77 1
  bdf_cmap_done( FT_CMap  bdfcmap )
a78 3
    BDF_CMap  cmap = (BDF_CMap)bdfcmap;


d85 1
a85 1
  bdf_cmap_char_index( FT_CMap    bdfcmap,
a87 1
    BDF_CMap          cmap      = (BDF_CMap)bdfcmap;
d90 1
a90 1
    FT_UInt           result    = 0;
a105 2
        /* increase glyph index by 1 --              */
        /* we reserve slot 0 for the undefined glyph */
d121 1
a121 1
  bdf_cmap_char_next( FT_CMap     bdfcmap,
a123 1
    BDF_CMap          cmap      = (BDF_CMap)bdfcmap;
a142 2
        /* increase glyph index by 1 --              */
        /* we reserve slot 0 for the undefined glyph */
d166 1
a166 2
  FT_CALLBACK_TABLE_DEF
  const FT_CMap_ClassRec  bdf_cmap_class =
d168 5
a172 5
    sizeof ( BDF_CMapRec ),
    bdf_cmap_init,
    bdf_cmap_done,
    bdf_cmap_char_index,
    bdf_cmap_char_next
d185 4
a188 3
    int    nn, len;
    char*  strings[4] = { NULL, NULL, NULL, NULL };
    int    lengths[4];
d200 5
a204 3
      strings[2] = ( *(prop->value.atom) == 'O' || *(prop->value.atom) == 'o' )
                   ? (char *)"Oblique"
                   : (char *)"Italic";
d213 3
a215 1
      strings[1] = (char *)"Bold";
d222 5
a226 1
      strings[3] = (char *)(prop->value.atom);
a231 5
      strings[0] = (char *)(prop->value.atom);

    len = 0;

    for ( len = 0, nn = 0; nn < 4; nn++ )
d233 3
a235 13
      lengths[nn] = 0;
      if ( strings[nn] )
      {
        lengths[nn] = ft_strlen( strings[nn] );
        len        += lengths[nn] + 1;
      }
    }

    if ( len == 0 )
    {
      strings[0] = (char *)"Regular";
      lengths[0] = ft_strlen( strings[0] );
      len        = lengths[0] + 1;
d238 3
d242 2
a243 1
      char*  s;
d246 1
a246 1
      if ( FT_ALLOC( face->style_name, len ) )
d249 1
a249 1
      s = face->style_name;
d251 21
a271 1
      for ( nn = 0; nn < 4; nn++ )
d273 7
a279 13
        char*  src = strings[nn];


        len = lengths[nn];

        if ( src == NULL )
          continue;

        /* separate elements with a space */
        if ( s != face->style_name )
          *s++ = ' ';

        ft_memcpy( s, src, len );
d281 1
a281 15
        /* need to convert spaces to dashes for */
        /* add_style_name and setwidth_name     */
        if ( nn == 0 || nn == 3 )
        {
          int  mm;


          for ( mm = 0; mm < len; mm++ )
            if ( s[mm] == ' ' )
              s[mm] = '-';
        }

        s += len;
      }
      *s = 0;
d288 2
a289 2
  FT_CALLBACK_DEF( void )
  BDF_Face_Done( FT_Face  bdfface )         /* BDF_Face */
a290 1
    BDF_Face   face   = (BDF_Face)bdfface;
d300 1
a300 2
    FT_FREE( bdfface->family_name );
    FT_FREE( bdfface->style_name );
d302 1
a302 1
    FT_FREE( bdfface->available_sizes );
d307 2
d314 1
a314 1
                 FT_Face        bdfface,        /* BDF_Face */
a319 1
    BDF_Face       face   = (BDF_Face)bdfface;
d322 1
a322 1
    bdf_font_t*    font = NULL;
d350 1
d361 5
a365 5
      bdfface->num_faces  = 1;
      bdfface->face_index = 0;
      bdfface->face_flags = FT_FACE_FLAG_FIXED_SIZES |
                            FT_FACE_FLAG_HORIZONTAL  |
                            FT_FACE_FLAG_FAST_GLYPHS;
d372 1
a372 1
        bdfface->face_flags |= FT_FACE_FLAG_FIXED_WIDTH;
d380 4
a383 1
        if ( FT_STRDUP( bdfface->family_name, prop->value.atom ) )
d385 1
d388 1
a388 1
        bdfface->family_name = 0;
d393 1
a393 3
      /* the number of glyphs (with one slot for the undefined glyph */
      /* at position 0 and all unencoded glyphs)                     */
      bdfface->num_glyphs = font->glyphs_size + 1;
d395 2
a396 2
      bdfface->num_fixed_sizes = 1;
      if ( FT_NEW_ARRAY( bdfface->available_sizes, 1 ) )
d400 1
a400 1
        FT_Bitmap_Size*  bsize = bdfface->available_sizes;
d406 1
a406 1
        bsize->height = (FT_Short)( font->font_ascent + font->font_descent );
d412 1
a412 1
          bsize->width = (FT_Short)( bsize->height * 2/3 );
a418 2
        else
          bsize->size = bsize->width << 6;
a452 1
        face->default_glyph = 0;
a457 3

          if ( cur[n].encoding == font->default_char )
            face->default_glyph = n;
d481 5
a485 4
            if ( FT_STRDUP( face->charset_encoding,
                            charset_encoding->value.atom ) ||
                 FT_STRDUP( face->charset_registry,
                            charset_registry->value.atom ) )
d488 5
a492 2
            /* Uh, oh, compare first letters manually to avoid dependency */
            /* on locales.                                                */
d525 2
a526 2
              if ( bdfface->num_charmaps )
                bdfface->charmap = bdfface->charmaps[0];
d548 2
a549 2
          if ( bdfface->num_charmaps )
            bdfface->charmap = bdfface->charmaps[0];
d558 1
a558 1
    BDF_Face_Done( bdfface );
d563 2
a564 20
  FT_CALLBACK_DEF( FT_Error )
  BDF_Size_Select( FT_Size   size,
                   FT_ULong  strike_index )
  {
    bdf_font_t*  bdffont = ( (BDF_Face)size->face )->bdffont;


    FT_Select_Metrics( size->face, strike_index );

    size->metrics.ascender    = bdffont->font_ascent << 6;
    size->metrics.descender   = -bdffont->font_descent << 6;
    size->metrics.max_advance = bdffont->bbx.width << 6;

    return BDF_Err_Ok;
  }


  FT_CALLBACK_DEF( FT_Error )
  BDF_Size_Request( FT_Size          size,
                    FT_Size_Request  req )
d566 2
a567 5
    FT_Face          face    = size->face;
    FT_Bitmap_Size*  bsize   = face->available_sizes;
    bdf_font_t*      bdffont = ( (BDF_Face)face )->bdffont;
    FT_Error         error   = BDF_Err_Invalid_Pixel_Size;
    FT_Long          height;
d570 2
a571 2
    height = FT_REQUEST_HEIGHT( req );
    height = ( height + 32 ) >> 6;
d573 1
a573 1
    switch ( req->type )
d575 5
a579 4
    case FT_SIZE_REQUEST_TYPE_NOMINAL:
      if ( height == ( bsize->y_ppem + 32 ) >> 6 )
        error = BDF_Err_Ok;
      break;
d581 1
a581 9
    case FT_SIZE_REQUEST_TYPE_REAL_DIM:
      if ( height == ( bdffont->font_ascent +
                       bdffont->font_descent ) )
        error = BDF_Err_Ok;
      break;

    default:
      error = BDF_Err_Unimplemented_Feature;
      break;
a582 3

    if ( error )
      return error;
d584 1
a584 1
      return BDF_Size_Select( size, 0 );
d588 1
a588 2

  FT_CALLBACK_DEF( FT_Error )
d594 7
a600 6
    BDF_Face     bdf    = (BDF_Face)FT_SIZE_FACE( size );
    FT_Face      face   = FT_FACE( bdf );
    FT_Error     error  = BDF_Err_Ok;
    FT_Bitmap*   bitmap = &slot->bitmap;
    bdf_glyph_t  glyph;
    int          bpp    = bdf->bdffont->bpp;
d605 1
a605 1
    if ( !face || glyph_index >= (FT_UInt)face->num_glyphs )
d611 1
a611 4
    /* index 0 is the undefined glyph */
    if ( glyph_index == 0 )
      glyph_index = bdf->default_glyph;
    else
d615 1
a615 1
    glyph = bdf->bdffont->glyphs[glyph_index];
a618 1
    bitmap->pitch = glyph.bpr;
d620 4
a623 3
    /* note: we don't allocate a new array to hold the bitmap; */
    /*       we can simply point to it                         */
    ft_glyphslot_set_bitmap( slot, glyph.bitmap );
d625 5
a629 1
    switch ( bpp )
d631 1
a631 10
    case 1:
      bitmap->pixel_mode = FT_PIXEL_MODE_MONO;
      break;
    case 2:
      bitmap->pixel_mode = FT_PIXEL_MODE_GRAY2;
      break;
    case 4:
      bitmap->pixel_mode = FT_PIXEL_MODE_GRAY4;
      break;
    case 8:
d633 89
a721 2
      bitmap->num_grays  = 256;
      break;
a723 1
    slot->format      = FT_GLYPH_FORMAT_BITMAP;
d727 1
d734 2
a735 6
    /*
     * XXX DWIDTH1 and VVECTOR should be parsed and
     * used here, provided such fonts do exist.
     */
    ft_synthesize_vertical_metrics( &slot->metrics,
                                    bdf->bdffont->bbx.height << 6 );
a787 1

d821 1
a821 1
  FT_CALLBACK_DEF( FT_Module_Interface )
d855 15
a869 19
    BDF_Face_Init,
    BDF_Face_Done,
    0,                          /* FT_Size_InitFunc */
    0,                          /* FT_Size_DoneFunc */
    0,                          /* FT_Slot_InitFunc */
    0,                          /* FT_Slot_DoneFunc */

#ifdef FT_CONFIG_OPTION_OLD_INTERNALS
    ft_stub_set_char_sizes,
    ft_stub_set_pixel_sizes,
#endif
    BDF_Glyph_Load,

    0,                          /* FT_Face_GetKerningFunc   */
    0,                          /* FT_Face_AttachFunc       */
    0,                          /* FT_Face_GetAdvancesFunc  */

    BDF_Size_Request,
    BDF_Size_Select
@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d184 1
a184 3
    bdf_cmap_char_next,

    NULL, NULL, NULL, NULL, NULL
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@d26 1
@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d5 1
a5 1
    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006 by
d63 1
a63 2
  bdf_cmap_init( FT_CMap     bdfcmap,
                 FT_Pointer  init_data )
a64 1
    BDF_CMap  cmap = (BDF_CMap)bdfcmap;
a65 1
    FT_UNUSED( init_data );
d76 1
a76 1
  bdf_cmap_done( FT_CMap  bdfcmap )
a77 3
    BDF_CMap  cmap = (BDF_CMap)bdfcmap;


d84 1
a84 1
  bdf_cmap_char_index( FT_CMap    bdfcmap,
a86 1
    BDF_CMap          cmap      = (BDF_CMap)bdfcmap;
d89 1
a89 1
    FT_UInt           result    = 0;
a104 2
        /* increase glyph index by 1 --              */
        /* we reserve slot 0 for the undefined glyph */
d120 1
a120 1
  bdf_cmap_char_next( FT_CMap     bdfcmap,
a122 1
    BDF_CMap          cmap      = (BDF_CMap)bdfcmap;
a141 2
        /* increase glyph index by 1 --              */
        /* we reserve slot 0 for the undefined glyph */
d165 1
a165 2
  FT_CALLBACK_TABLE_DEF
  const FT_CMap_ClassRec  bdf_cmap_class =
d167 5
a171 5
    sizeof ( BDF_CMapRec ),
    bdf_cmap_init,
    bdf_cmap_done,
    bdf_cmap_char_index,
    bdf_cmap_char_next
d238 1
a238 6
    {
      if ( FT_ALLOC( face->style_name, ft_strlen( "Regular" ) + 1 ) )
        return error;

      ft_strcpy( face->style_name, "Regular" );
    }
d287 2
a288 2
  FT_CALLBACK_DEF( void )
  BDF_Face_Done( FT_Face  bdfface )         /* BDF_Face */
a289 1
    BDF_Face   face   = (BDF_Face)bdfface;
d299 1
a299 2
    FT_FREE( bdfface->family_name );
    FT_FREE( bdfface->style_name );
d301 1
a301 1
    FT_FREE( bdfface->available_sizes );
d306 2
d313 1
a313 1
                 FT_Face        bdfface,        /* BDF_Face */
a318 1
    BDF_Face       face   = (BDF_Face)bdfface;
d321 1
a321 1
    bdf_font_t*    font = NULL;
d349 1
d360 5
a364 5
      bdfface->num_faces  = 1;
      bdfface->face_index = 0;
      bdfface->face_flags = FT_FACE_FLAG_FIXED_SIZES |
                            FT_FACE_FLAG_HORIZONTAL  |
                            FT_FACE_FLAG_FAST_GLYPHS;
d371 1
a371 1
        bdfface->face_flags |= FT_FACE_FLAG_FIXED_WIDTH;
d382 1
a382 1
        if ( FT_NEW_ARRAY( bdfface->family_name, l ) )
d384 1
a384 1
        ft_strcpy( bdfface->family_name, prop->value.atom );
d387 1
a387 1
        bdfface->family_name = 0;
d392 1
a392 3
      /* the number of glyphs (with one slot for the undefined glyph */
      /* at position 0 and all unencoded glyphs)                     */
      bdfface->num_glyphs = font->glyphs_size + 1;
d394 2
a395 2
      bdfface->num_fixed_sizes = 1;
      if ( FT_NEW_ARRAY( bdfface->available_sizes, 1 ) )
d399 1
a399 1
        FT_Bitmap_Size*  bsize = bdfface->available_sizes;
d405 1
a405 1
        bsize->height = (FT_Short)( font->font_ascent + font->font_descent );
d411 1
a411 1
          bsize->width = (FT_Short)( bsize->height * 2/3 );
a451 1
        face->default_glyph = 0;
a456 3

          if ( cur[n].encoding == font->default_char )
            face->default_glyph = n;
d524 2
a525 2
              if ( bdfface->num_charmaps )
                bdfface->charmap = bdfface->charmaps[0];
d547 2
a548 2
          if ( bdfface->num_charmaps )
            bdfface->charmap = bdfface->charmaps[0];
d557 1
a557 1
    BDF_Face_Done( bdfface );
d562 2
a563 3
  FT_CALLBACK_DEF( FT_Error )
  BDF_Size_Select( FT_Size   size,
                   FT_ULong  strike_index )
d565 2
a566 2
    bdf_font_t*  bdffont = ( (BDF_Face)size->face )->bdffont;

a567 8
    FT_Select_Metrics( size->face, strike_index );

    size->metrics.ascender    = bdffont->font_ascent << 6;
    size->metrics.descender   = -bdffont->font_descent << 6;
    size->metrics.max_advance = bdffont->bbx.width << 6;

    return BDF_Err_Ok;
  }
d569 2
d572 1
a572 15
  FT_CALLBACK_DEF( FT_Error )
  BDF_Size_Request( FT_Size          size,
                    FT_Size_Request  req )
  {
    FT_Face          face    = size->face;
    FT_Bitmap_Size*  bsize   = face->available_sizes;
    bdf_font_t*      bdffont = ( (BDF_Face)face )->bdffont;
    FT_Error         error   = BDF_Err_Invalid_Pixel_Size;
    FT_Long          height;


    height = FT_REQUEST_HEIGHT( req );
    height = ( height + 32 ) >> 6;

    switch ( req->type )
d574 5
a578 4
    case FT_SIZE_REQUEST_TYPE_NOMINAL:
      if ( height == ( bsize->y_ppem + 32 ) >> 6 )
        error = BDF_Err_Ok;
      break;
d580 1
a580 9
    case FT_SIZE_REQUEST_TYPE_REAL_DIM:
      if ( height == ( bdffont->font_ascent +
                       bdffont->font_descent ) )
        error = BDF_Err_Ok;
      break;

    default:
      error = BDF_Err_Unimplemented_Feature;
      break;
a581 3

    if ( error )
      return error;
d583 1
a583 1
      return BDF_Size_Select( size, 0 );
d587 1
a587 2

  FT_CALLBACK_DEF( FT_Error )
d593 7
a599 5
    BDF_Face     face   = (BDF_Face)FT_SIZE_FACE( size );
    FT_Error     error  = BDF_Err_Ok;
    FT_Bitmap*   bitmap = &slot->bitmap;
    bdf_glyph_t  glyph;
    int          bpp    = face->bdffont->bpp;
d610 1
a610 4
    /* index 0 is the undefined glyph */
    if ( glyph_index == 0 )
      glyph_index = face->default_glyph;
    else
a617 1
    bitmap->pitch = glyph.bpr;
d619 4
a622 3
    /* note: we don't allocate a new array to hold the bitmap; */
    /*       we can simply point to it                         */
    ft_glyphslot_set_bitmap( slot, glyph.bitmap );
d624 5
a628 1
    switch ( bpp )
d630 1
a630 10
    case 1:
      bitmap->pixel_mode = FT_PIXEL_MODE_MONO;
      break;
    case 2:
      bitmap->pixel_mode = FT_PIXEL_MODE_GRAY2;
      break;
    case 4:
      bitmap->pixel_mode = FT_PIXEL_MODE_GRAY4;
      break;
    case 8:
d632 89
a720 2
      bitmap->num_grays  = 256;
      break;
a722 1
    slot->format      = FT_GLYPH_FORMAT_BITMAP;
d726 1
d733 2
a734 6
    /*
     * XXX DWIDTH1 and VVECTOR should be parsed and
     * used here, provided such fonts do exist.
     */
    ft_synthesize_vertical_metrics( &slot->metrics,
                                    face->bdffont->bbx.height << 6 );
a786 1

d820 1
a820 1
  FT_CALLBACK_DEF( FT_Module_Interface )
d854 15
a868 19
    BDF_Face_Init,
    BDF_Face_Done,
    0,                          /* FT_Size_InitFunc */
    0,                          /* FT_Size_DoneFunc */
    0,                          /* FT_Slot_InitFunc */
    0,                          /* FT_Slot_DoneFunc */

#ifdef FT_CONFIG_OPTION_OLD_INTERNALS
    ft_stub_set_char_sizes,
    ft_stub_set_pixel_sizes,
#endif
    BDF_Glyph_Load,

    0,                          /* FT_Face_GetKerningFunc   */
    0,                          /* FT_Face_AttachFunc       */
    0,                          /* FT_Face_GetAdvancesFunc  */

    BDF_Size_Request,
    BDF_Size_Select
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d5 1
a5 1
    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 by
d56 1
a56 1
    FT_ULong          num_encodings; /* ftobjs.h: FT_CMap->clazz->size */
d95 2
a96 2
    FT_ULong          min, max, mid; /* num_encodings */
    FT_UShort         result    = 0; /* encodings->glyph */
d104 1
a104 1
      FT_ULong  code;
d134 3
a136 3
    FT_ULong          min, max, mid; /* num_encodings */
    FT_UShort         result   = 0;  /* encodings->glyph */
    FT_ULong          charcode = *acharcode + 1;
d144 1
a144 1
      FT_ULong  code; /* same as BDF_encoding_el.enc */
d172 1
a172 8
    if ( charcode > 0xFFFFFFFFUL )
    {
      FT_TRACE1(( "bdf_cmap_char_next: charcode 0x%x > 32bit API" ));
      *acharcode = 0;
      /* XXX: result should be changed to indicate an overflow error */
    }
    else
      *acharcode = (FT_UInt32)charcode;
d184 1
a184 3
    bdf_cmap_char_next,

    NULL, NULL, NULL, NULL, NULL
d197 4
a200 2
    char*   strings[4] = { NULL, NULL, NULL, NULL };
    size_t  nn, len, lengths[4];
d212 5
a216 3
      strings[2] = ( *(prop->value.atom) == 'O' || *(prop->value.atom) == 'o' )
                   ? (char *)"Oblique"
                   : (char *)"Italic";
d225 3
a227 1
      strings[1] = (char *)"Bold";
d234 5
a238 1
      strings[3] = (char *)(prop->value.atom);
a243 5
      strings[0] = (char *)(prop->value.atom);

    len = 0;

    for ( len = 0, nn = 0; nn < 4; nn++ )
d245 3
a247 6
      lengths[nn] = 0;
      if ( strings[nn] )
      {
        lengths[nn] = ft_strlen( strings[nn] );
        len        += lengths[nn] + 1;
      }
d250 1
a250 1
    if ( len == 0 )
d252 4
a255 3
      strings[0] = (char *)"Regular";
      lengths[0] = ft_strlen( strings[0] );
      len        = lengths[0] + 1;
d257 1
a257 1

d259 2
a260 1
      char*  s;
d263 1
a263 1
      if ( FT_ALLOC( face->style_name, len ) )
d266 1
a266 1
      s = face->style_name;
d268 21
a288 1
      for ( nn = 0; nn < 4; nn++ )
d290 7
a296 4
        char*  src = strings[nn];


        len = lengths[nn];
d298 1
a298 24
        if ( src == NULL )
          continue;

        /* separate elements with a space */
        if ( s != face->style_name )
          *s++ = ' ';

        ft_memcpy( s, src, len );

        /* need to convert spaces to dashes for */
        /* add_style_name and setwidth_name     */
        if ( nn == 0 || nn == 3 )
        {
          size_t  mm;


          for ( mm = 0; mm < len; mm++ )
            if ( s[mm] == ' ' )
              s[mm] = '-';
        }

        s += len;
      }
      *s = 0;
d308 2
a309 6
    BDF_Face   face = (BDF_Face)bdfface;
    FT_Memory  memory;


    if ( !face )
      return;
a310 1
    memory = FT_FACE_MEMORY( face );
d397 4
a400 1
        if ( FT_STRDUP( bdfface->family_name, prop->value.atom ) )
d402 1
d429 1
a429 1
          bsize->width = (FT_Short)( ( prop->value.l + 5 ) / 10 );
d437 1
a437 3
            (FT_Pos)( ( prop->value.l * 64 * 7200 + 36135L ) / 72270L );
        else
          bsize->size = bsize->width << 6;
d441 1
a441 1
          bsize->y_ppem = (FT_Short)prop->value.l << 6;
d445 1
a445 1
          resolution_x = (FT_Short)prop->value.l;
d449 1
a449 1
          resolution_y = (FT_Short)prop->value.l;
d480 1
a480 6
          {
            if ( n < FT_UINT_MAX )
              face->default_glyph = (FT_UInt)n;
            else
              FT_TRACE1(( "idx %d is too large for this system\n", n ));
          }
d504 5
a508 4
            if ( FT_STRDUP( face->charset_encoding,
                            charset_encoding->value.atom ) ||
                 FT_STRDUP( face->charset_registry,
                            charset_registry->value.atom ) )
d511 5
a515 2
            /* Uh, oh, compare first letters manually to avoid dependency */
            /* on locales.                                                */
d620 1
a620 1
      if ( height == ( ( bsize->y_ppem + 32 ) >> 6 ) )
d649 1
a649 2
    BDF_Face     bdf    = (BDF_Face)FT_SIZE_FACE( size );
    FT_Face      face   = FT_FACE( bdf );
d653 1
a653 1
    int          bpp    = bdf->bdffont->bpp;
d658 1
a658 1
    if ( !face || glyph_index >= (FT_UInt)face->num_glyphs )
d666 1
a666 1
      glyph_index = bdf->default_glyph;
d671 1
a671 1
    glyph = bdf->bdffont->glyphs[glyph_index];
d675 1
a675 4
    if ( glyph.bpr > INT_MAX )
      FT_TRACE1(( "BDF_Glyph_Load: too large pitch %d is truncated\n",
                   glyph.bpr ));
    bitmap->pitch = (int)glyph.bpr; /* same as FT_Bitmap.pitch */
d713 1
a713 1
                                    bdf->bdffont->bbx.height << 6 );
a746 5
        if ( prop->value.l > 0x7FFFFFFFL || prop->value.l < ( -1 - 0x7FFFFFFFL ) )
        {
          FT_TRACE1(( "bdf_get_bdf_property: " ));
          FT_TRACE1(( "too large integer 0x%x is truncated\n" ));
        }
d748 1
a748 1
        aproperty->u.integer = (FT_Int32)prop->value.l;
a751 5
        if ( prop->value.ul > 0xFFFFFFFFUL )
        {
          FT_TRACE1(( "bdf_get_bdf_property: " ));
          FT_TRACE1(( "too large cardinal 0x%x is truncated\n" ));
        }
d753 1
a753 1
        aproperty->u.cardinal = (FT_UInt32)prop->value.ul;
@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d5 1
a5 1
    Copyright (C) 2001-2008, 2011, 2013, 2014 by
a32 1
#include FT_TRUETYPE_IDS_H
d35 1
a35 1
#include FT_SERVICE_FONT_FORMAT_H
d74 1
a74 1
    return FT_Err_Ok;
d108 1
a108 1
      code = (FT_ULong)encodings[mid].enc;
d148 1
a148 1
      code = (FT_ULong)encodings[mid].enc;
d167 1
a167 1
      charcode = (FT_ULong)encodings[min].enc;
d184 1
a184 1
  static
d200 1
a200 1
    FT_Error         error  = FT_Err_Ok;
d245 2
d280 1
a280 1
        if ( !src )
d334 2
d346 1
a346 1
    FT_Error       error  = FT_Err_Ok;
d355 1
a357 2
    FT_TRACE2(( "BDF driver\n" ));

d367 1
a367 1
    if ( FT_ERR_EQ( error, Missing_Startfont_Field ) )
d369 1
a369 1
      FT_TRACE2(( "  not a BDF file\n" ));
a376 14

    /* BDF could not have multiple face in single font file.
     * XXX: non-zero face_index is already invalid argument, but
     *      Type1, Type42 driver has a convention to return
     *      an invalid argument error when the font could be
     *      opened by the specified driver.
     */
    if ( face_index > 0 && ( face_index & 0xFFFF ) > 0 )
    {
      FT_ERROR(( "BDF_Face_Init: invalid face index\n" ));
      BDF_Face_Done( bdfface );
      return FT_THROW( Invalid_Argument );
    }

d381 1
a381 1
      FT_TRACE4(( "  number of glyphs: allocated %d (used %d)\n",
d384 1
a384 1
      FT_TRACE4(( "  number of unencoded glyphs: allocated %d (used %d)\n",
d390 3
a392 4

      bdfface->face_flags |= FT_FACE_FLAG_FIXED_SIZES |
                             FT_FACE_FLAG_HORIZONTAL  |
                             FT_FACE_FLAG_FAST_GLYPHS;
d411 1
a411 1
        bdfface->family_name = NULL;
d413 1
a413 1
      if ( FT_SET_ERROR( bdf_interpret_style( face ) ) )
d418 1
a418 1
      bdfface->num_glyphs = (FT_Long)( font->glyphs_size + 1 );
d429 1
a429 1
        FT_ZERO( bsize );
d484 2
a485 2
          FT_TRACE4(( "  idx %d, val 0x%lX\n", n, cur[n].encoding ));
          (face->en_table[n]).glyph = (FT_UShort)n;
d492 1
a492 2
              FT_TRACE1(( "BDF_Face_Init:"
                          " idx %d is too large for this system\n", n ));
d499 1
a499 1
        bdf_property_t  *charset_registry, *charset_encoding;
d543 2
a544 3
              /* initial platform/encoding should indicate unset status? */
              charmap.platform_id = TT_PLATFORM_APPLE_UNICODE;
              charmap.encoding_id = TT_APPLE_ID_DEFAULT;
d549 2
a550 2
                charmap.platform_id = TT_PLATFORM_MICROSOFT;
                charmap.encoding_id = TT_MS_ID_UNICODE_CS;
d574 2
a575 2
          charmap.platform_id = TT_PLATFORM_ADOBE;
          charmap.encoding_id = TT_ADOBE_ID_STANDARD;
d591 1
a591 1
    return FT_THROW( Unknown_File_Format );
d604 3
a606 3
    size->metrics.ascender    = bdffont->font_ascent * 64;
    size->metrics.descender   = -bdffont->font_descent * 64;
    size->metrics.max_advance = bdffont->bbx.width * 64;
d608 1
a608 1
    return FT_Err_Ok;
d619 1
a619 1
    FT_Error         error   = FT_ERR( Invalid_Pixel_Size );
d630 1
a630 1
        error = FT_Err_Ok;
d636 1
a636 1
        error = FT_Err_Ok;
d640 1
a640 1
      error = FT_THROW( Unimplemented_Feature );
d660 1
a660 1
    FT_Error     error  = FT_Err_Ok;
d668 1
a668 1
    if ( !face )
d670 1
a670 1
      error = FT_THROW( Invalid_Face_Handle );
a673 8
    if ( glyph_index >= (FT_UInt)face->num_glyphs )
    {
      error = FT_THROW( Invalid_Argument );
      goto Exit;
    }

    FT_TRACE1(( "BDF_Glyph_Load: glyph index %d\n", glyph_index ));

d715 5
a719 5
    slot->metrics.horiAdvance  = (FT_Pos)( glyph.dwidth * 64 );
    slot->metrics.horiBearingX = (FT_Pos)( glyph.bbx.x_offset * 64 );
    slot->metrics.horiBearingY = (FT_Pos)( glyph.bbx.ascent * 64 );
    slot->metrics.width        = (FT_Pos)( bitmap->width * 64 );
    slot->metrics.height       = (FT_Pos)( bitmap->rows * 64 );
d726 1
a726 1
                                    bdf->bdffont->bbx.height * 64 );
d762 2
a763 2
          FT_TRACE1(( "bdf_get_bdf_property:"
                      " too large integer 0x%x is truncated\n" ));
d772 2
a773 2
          FT_TRACE1(( "bdf_get_bdf_property:"
                      " too large cardinal 0x%x is truncated\n" ));
d786 1
a786 1
    return FT_THROW( Invalid_Argument );
d804 2
a805 2
    (FT_BDF_GetCharsetIdFunc)bdf_get_charset_id,       /* get_charset_id */
    (FT_BDF_GetPropertyFunc) bdf_get_bdf_property      /* get_property   */
d817 2
a818 2
    { FT_SERVICE_ID_BDF,         &bdf_service_bdf },
    { FT_SERVICE_ID_FONT_FORMAT, FT_FONT_FORMAT_BDF },
d846 1
a846 1
      NULL,    /* module-specific interface */
d848 3
a850 3
      NULL,                     /* FT_Module_Constructor  module_init   */
      NULL,                     /* FT_Module_Destructor   module_done   */
      bdf_driver_requester      /* FT_Module_Requester    get_interface */
d857 16
a872 12
    BDF_Face_Init,              /* FT_Face_InitFunc  init_face */
    BDF_Face_Done,              /* FT_Face_DoneFunc  done_face */
    NULL,                       /* FT_Size_InitFunc  init_size */
    NULL,                       /* FT_Size_DoneFunc  done_size */
    NULL,                       /* FT_Slot_InitFunc  init_slot */
    NULL,                       /* FT_Slot_DoneFunc  done_slot */

    BDF_Glyph_Load,             /* FT_Slot_LoadFunc  load_glyph */

    NULL,                       /* FT_Face_GetKerningFunc   get_kerning  */
    NULL,                       /* FT_Face_AttachFunc       attach_file  */
    NULL,                       /* FT_Face_GetAdvancesFunc  get_advances */
d874 2
a875 2
    BDF_Size_Request,           /* FT_Size_RequestFunc  request_size */
    BDF_Size_Select             /* FT_Size_SelectFunc   select_size  */
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
