head	1.4;
access;
symbols
	freetype-2_7_1:1.1.115.3
	freetype-2_3_12:1.1.115.2
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.1.115.1
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.1
	freetype:1.1.115;
locks; strict;
comment	@ * @;


1.4
date	2017.04.15.19.21.46;	author tg;	state Exp;
branches;
next	1.3;
commitid	10058F2723111C7BEE2;

1.3
date	2013.08.06.19.48.01;	author tg;	state Exp;
branches;
next	1.2;
commitid	100520152445E05B912;

1.2
date	2008.06.12.20.54.40;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	10048518C1E44F62885;

1.1
date	2006.06.29.18.37.51;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.115.1;
next	;
commitid	10044A41DBD6368BED5;

1.1.1.1
date	2008.02.26.19.52.25;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.37.26;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.115.1
date	2006.06.29.18.37.51;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41DBD6368BED5;

1.1.115.2
date	2013.08.06.19.12.23;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10052014A9975CEFD1D;

1.1.115.3
date	2017.04.15.15.42.07;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.4
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  otvgpos.c                                                              */
/*                                                                         */
/*    OpenType GPOS table validation (body).                               */
/*                                                                         */
/*  Copyright 2002-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include "otvalid.h"
#include "otvcommn.h"
#include "otvgpos.h"


  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_otvgpos


  static void
  otv_Anchor_validate( FT_Bytes       table,
                       OTV_Validator  valid );

  static void
  otv_MarkArray_validate( FT_Bytes       table,
                          OTV_Validator  valid );


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                      UTILITY FUNCTIONS                        *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

#define BaseArrayFunc       otv_x_sxy
#define LigatureAttachFunc  otv_x_sxy
#define Mark2ArrayFunc      otv_x_sxy

  /* uses valid->extra1 (counter)                             */
  /* uses valid->extra2 (boolean to handle NULL anchor field) */

  static void
  otv_x_sxy( FT_Bytes       table,
             OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   Count, count1, table_size;


    OTV_ENTER;

    OTV_LIMIT_CHECK( 2 );

    Count = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (Count = %d)\n", Count ));

    OTV_LIMIT_CHECK( Count * otvalid->extra1 * 2 );

    table_size = Count * otvalid->extra1 * 2 + 2;

    for ( ; Count > 0; Count-- )
      for ( count1 = otvalid->extra1; count1 > 0; count1-- )
      {
        OTV_OPTIONAL_TABLE( anchor_offset );


        OTV_OPTIONAL_OFFSET( anchor_offset );

        if ( otvalid->extra2 )
        {
          OTV_SIZE_CHECK( anchor_offset );
          if ( anchor_offset )
            otv_Anchor_validate( table + anchor_offset, otvalid );
        }
        else
          otv_Anchor_validate( table + anchor_offset, otvalid );
      }

    OTV_EXIT;
  }


#define MarkBasePosFormat1Func  otv_u_O_O_u_O_O
#define MarkLigPosFormat1Func   otv_u_O_O_u_O_O
#define MarkMarkPosFormat1Func  otv_u_O_O_u_O_O

  /* sets otvalid->extra1 (class count) */

  static void
  otv_u_O_O_u_O_O( FT_Bytes       table,
                   OTV_Validator  otvalid )
  {
    FT_Bytes           p = table;
    FT_UInt            Coverage1, Coverage2, ClassCount;
    FT_UInt            Array1, Array2;
    OTV_Validate_Func  func;


    OTV_ENTER;

    p += 2;     /* skip PosFormat */

    OTV_LIMIT_CHECK( 10 );
    Coverage1  = FT_NEXT_USHORT( p );
    Coverage2  = FT_NEXT_USHORT( p );
    ClassCount = FT_NEXT_USHORT( p );
    Array1     = FT_NEXT_USHORT( p );
    Array2     = FT_NEXT_USHORT( p );

    otv_Coverage_validate( table + Coverage1, otvalid, -1 );
    otv_Coverage_validate( table + Coverage2, otvalid, -1 );

    otv_MarkArray_validate( table + Array1, otvalid );

    otvalid->nesting_level++;
    func          = otvalid->func[otvalid->nesting_level];
    otvalid->extra1 = ClassCount;

    func( table + Array2, otvalid );

    otvalid->nesting_level--;

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                        VALUE RECORDS                          *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  static FT_UInt
  otv_value_length( FT_UInt  format )
  {
    FT_UInt  count;


    count = ( ( format & 0xAA ) >> 1 ) + ( format & 0x55 );
    count = ( ( count  & 0xCC ) >> 2 ) + ( count  & 0x33 );
    count = ( ( count  & 0xF0 ) >> 4 ) + ( count  & 0x0F );

    return count * 2;
  }


  /* uses otvalid->extra3 (pointer to base table) */

  static void
  otv_ValueRecord_validate( FT_Bytes       table,
                            FT_UInt        format,
                            OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   count;

#ifdef FT_DEBUG_LEVEL_TRACE
    FT_Int    loop;
    FT_ULong  res = 0;


    OTV_NAME_ENTER( "ValueRecord" );

    /* display `format' in dual representation */
    for ( loop = 7; loop >= 0; loop-- )
    {
      res <<= 4;
      res  += ( format >> loop ) & 1;
    }

    OTV_TRACE(( " (format 0b%08lx)\n", res ));
#endif

    if ( format >= 0x100 )
      FT_INVALID_FORMAT;

    for ( count = 4; count > 0; count-- )
    {
      if ( format & 1 )
      {
        /* XPlacement, YPlacement, XAdvance, YAdvance */
        OTV_LIMIT_CHECK( 2 );
        p += 2;
      }

      format >>= 1;
    }

    for ( count = 4; count > 0; count-- )
    {
      if ( format & 1 )
      {
        FT_PtrDist  table_size;

        OTV_OPTIONAL_TABLE( device );


        /* XPlaDevice, YPlaDevice, XAdvDevice, YAdvDevice */
        OTV_LIMIT_CHECK( 2 );
        OTV_OPTIONAL_OFFSET( device );

        /* XXX: this value is usually too small, especially if the current */
        /* ValueRecord is part of an array -- getting the correct table    */
        /* size is probably not worth the trouble                          */

        table_size = p - otvalid->extra3;

        OTV_SIZE_CHECK( device );
        if ( device )
          otv_Device_validate( otvalid->extra3 + device, otvalid );
      }
      format >>= 1;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                           ANCHORS                             *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  static void
  otv_Anchor_validate( FT_Bytes       table,
                       OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   AnchorFormat;


    OTV_NAME_ENTER( "Anchor");

    OTV_LIMIT_CHECK( 6 );
    AnchorFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", AnchorFormat ));

    p += 4;     /* skip XCoordinate and YCoordinate */

    switch ( AnchorFormat )
    {
    case 1:
      break;

    case 2:
      OTV_LIMIT_CHECK( 2 );  /* AnchorPoint */
      break;

    case 3:
      {
        FT_UInt   table_size;

        OTV_OPTIONAL_TABLE( XDeviceTable );
        OTV_OPTIONAL_TABLE( YDeviceTable );


        OTV_LIMIT_CHECK( 4 );
        OTV_OPTIONAL_OFFSET( XDeviceTable );
        OTV_OPTIONAL_OFFSET( YDeviceTable );

        table_size = 6 + 4;

        OTV_SIZE_CHECK( XDeviceTable );
        if ( XDeviceTable )
          otv_Device_validate( table + XDeviceTable, otvalid );

        OTV_SIZE_CHECK( YDeviceTable );
        if ( YDeviceTable )
          otv_Device_validate( table + YDeviceTable, otvalid );
      }
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                         MARK ARRAYS                           *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  static void
  otv_MarkArray_validate( FT_Bytes       table,
                          OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   MarkCount;


    OTV_NAME_ENTER( "MarkArray" );

    OTV_LIMIT_CHECK( 2 );
    MarkCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (MarkCount = %d)\n", MarkCount ));

    OTV_LIMIT_CHECK( MarkCount * 4 );

    /* MarkRecord */
    for ( ; MarkCount > 0; MarkCount-- )
    {
      p += 2;   /* skip Class */
      /* MarkAnchor */
      otv_Anchor_validate( table + FT_NEXT_USHORT( p ), otvalid );
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                     GPOS LOOKUP TYPE 1                        *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* sets otvalid->extra3 (pointer to base table) */

  static void
  otv_SinglePos_validate( FT_Bytes       table,
                          OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   PosFormat;


    OTV_NAME_ENTER( "SinglePos" );

    OTV_LIMIT_CHECK( 2 );
    PosFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", PosFormat ));

    otvalid->extra3 = table;

    switch ( PosFormat )
    {
    case 1:     /* SinglePosFormat1 */
      {
        FT_UInt  Coverage, ValueFormat;


        OTV_LIMIT_CHECK( 4 );
        Coverage    = FT_NEXT_USHORT( p );
        ValueFormat = FT_NEXT_USHORT( p );

        otv_Coverage_validate( table + Coverage, otvalid, -1 );
        otv_ValueRecord_validate( p, ValueFormat, otvalid ); /* Value */
      }
      break;

    case 2:     /* SinglePosFormat2 */
      {
        FT_UInt  Coverage, ValueFormat, ValueCount, len_value;


        OTV_LIMIT_CHECK( 6 );
        Coverage    = FT_NEXT_USHORT( p );
        ValueFormat = FT_NEXT_USHORT( p );
        ValueCount  = FT_NEXT_USHORT( p );

        OTV_TRACE(( " (ValueCount = %d)\n", ValueCount ));

        len_value = otv_value_length( ValueFormat );

        otv_Coverage_validate( table + Coverage,
                               otvalid,
                               (FT_Int)ValueCount );

        OTV_LIMIT_CHECK( ValueCount * len_value );

        /* Value */
        for ( ; ValueCount > 0; ValueCount-- )
        {
          otv_ValueRecord_validate( p, ValueFormat, otvalid );
          p += len_value;
        }
      }
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                     GPOS LOOKUP TYPE 2                        *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  static void
  otv_PairSet_validate( FT_Bytes       table,
                        FT_UInt        format1,
                        FT_UInt        format2,
                        OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   value_len1, value_len2, PairValueCount;


    OTV_NAME_ENTER( "PairSet" );

    OTV_LIMIT_CHECK( 2 );
    PairValueCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (PairValueCount = %d)\n", PairValueCount ));

    value_len1 = otv_value_length( format1 );
    value_len2 = otv_value_length( format2 );

    OTV_LIMIT_CHECK( PairValueCount * ( value_len1 + value_len2 + 2 ) );

    /* PairValueRecord */
    for ( ; PairValueCount > 0; PairValueCount-- )
    {
      p += 2;       /* skip SecondGlyph */

      if ( format1 )
        otv_ValueRecord_validate( p, format1, otvalid ); /* Value1 */
      p += value_len1;

      if ( format2 )
        otv_ValueRecord_validate( p, format2, otvalid ); /* Value2 */
      p += value_len2;
    }

    OTV_EXIT;
  }


  /* sets otvalid->extra3 (pointer to base table) */

  static void
  otv_PairPos_validate( FT_Bytes       table,
                        OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   PosFormat;


    OTV_NAME_ENTER( "PairPos" );

    OTV_LIMIT_CHECK( 2 );
    PosFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", PosFormat ));

    otvalid->extra3 = table;

    switch ( PosFormat )
    {
    case 1:     /* PairPosFormat1 */
      {
        FT_UInt  Coverage, ValueFormat1, ValueFormat2, PairSetCount;


        OTV_LIMIT_CHECK( 8 );
        Coverage     = FT_NEXT_USHORT( p );
        ValueFormat1 = FT_NEXT_USHORT( p );
        ValueFormat2 = FT_NEXT_USHORT( p );
        PairSetCount = FT_NEXT_USHORT( p );

        OTV_TRACE(( " (PairSetCount = %d)\n", PairSetCount ));

        otv_Coverage_validate( table + Coverage, otvalid, -1 );

        OTV_LIMIT_CHECK( PairSetCount * 2 );

        /* PairSetOffset */
        for ( ; PairSetCount > 0; PairSetCount-- )
          otv_PairSet_validate( table + FT_NEXT_USHORT( p ),
                                ValueFormat1, ValueFormat2, otvalid );
      }
      break;

    case 2:     /* PairPosFormat2 */
      {
        FT_UInt  Coverage, ValueFormat1, ValueFormat2, ClassDef1, ClassDef2;
        FT_UInt  ClassCount1, ClassCount2, len_value1, len_value2, count;


        OTV_LIMIT_CHECK( 14 );
        Coverage     = FT_NEXT_USHORT( p );
        ValueFormat1 = FT_NEXT_USHORT( p );
        ValueFormat2 = FT_NEXT_USHORT( p );
        ClassDef1    = FT_NEXT_USHORT( p );
        ClassDef2    = FT_NEXT_USHORT( p );
        ClassCount1  = FT_NEXT_USHORT( p );
        ClassCount2  = FT_NEXT_USHORT( p );

        OTV_TRACE(( " (ClassCount1 = %d)\n", ClassCount1 ));
        OTV_TRACE(( " (ClassCount2 = %d)\n", ClassCount2 ));

        len_value1 = otv_value_length( ValueFormat1 );
        len_value2 = otv_value_length( ValueFormat2 );

        otv_Coverage_validate( table + Coverage, otvalid, -1 );
        otv_ClassDef_validate( table + ClassDef1, otvalid );
        otv_ClassDef_validate( table + ClassDef2, otvalid );

        OTV_LIMIT_CHECK( ClassCount1 * ClassCount2 *
                     ( len_value1 + len_value2 ) );

        /* Class1Record */
        for ( ; ClassCount1 > 0; ClassCount1-- )
        {
          /* Class2Record */
          for ( count = ClassCount2; count > 0; count-- )
          {
            if ( ValueFormat1 )
              /* Value1 */
              otv_ValueRecord_validate( p, ValueFormat1, otvalid );
            p += len_value1;

            if ( ValueFormat2 )
              /* Value2 */
              otv_ValueRecord_validate( p, ValueFormat2, otvalid );
            p += len_value2;
          }
        }
      }
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                     GPOS LOOKUP TYPE 3                        *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  static void
  otv_CursivePos_validate( FT_Bytes       table,
                           OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   PosFormat;


    OTV_NAME_ENTER( "CursivePos" );

    OTV_LIMIT_CHECK( 2 );
    PosFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", PosFormat ));

    switch ( PosFormat )
    {
    case 1:     /* CursivePosFormat1 */
      {
        FT_UInt   table_size;
        FT_UInt   Coverage, EntryExitCount;

        OTV_OPTIONAL_TABLE( EntryAnchor );
        OTV_OPTIONAL_TABLE( ExitAnchor  );


        OTV_LIMIT_CHECK( 4 );
        Coverage       = FT_NEXT_USHORT( p );
        EntryExitCount = FT_NEXT_USHORT( p );

        OTV_TRACE(( " (EntryExitCount = %d)\n", EntryExitCount ));

        otv_Coverage_validate( table + Coverage,
                               otvalid,
                               (FT_Int)EntryExitCount );

        OTV_LIMIT_CHECK( EntryExitCount * 4 );

        table_size = EntryExitCount * 4 + 4;

        /* EntryExitRecord */
        for ( ; EntryExitCount > 0; EntryExitCount-- )
        {
          OTV_OPTIONAL_OFFSET( EntryAnchor );
          OTV_OPTIONAL_OFFSET( ExitAnchor  );

          OTV_SIZE_CHECK( EntryAnchor );
          if ( EntryAnchor )
            otv_Anchor_validate( table + EntryAnchor, otvalid );

          OTV_SIZE_CHECK( ExitAnchor );
          if ( ExitAnchor )
            otv_Anchor_validate( table + ExitAnchor, otvalid );
        }
      }
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                     GPOS LOOKUP TYPE 4                        *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* UNDOCUMENTED (in OpenType 1.5):              */
  /* BaseRecord tables can contain NULL pointers. */

  /* sets otvalid->extra2 (1) */

  static void
  otv_MarkBasePos_validate( FT_Bytes       table,
                            OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   PosFormat;


    OTV_NAME_ENTER( "MarkBasePos" );

    OTV_LIMIT_CHECK( 2 );
    PosFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", PosFormat ));

    switch ( PosFormat )
    {
    case 1:
      otvalid->extra2 = 1;
      OTV_NEST2( MarkBasePosFormat1, BaseArray );
      OTV_RUN( table, otvalid );
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                     GPOS LOOKUP TYPE 5                        *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* sets otvalid->extra2 (1) */

  static void
  otv_MarkLigPos_validate( FT_Bytes       table,
                           OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   PosFormat;


    OTV_NAME_ENTER( "MarkLigPos" );

    OTV_LIMIT_CHECK( 2 );
    PosFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", PosFormat ));

    switch ( PosFormat )
    {
    case 1:
      otvalid->extra2 = 1;
      OTV_NEST3( MarkLigPosFormat1, LigatureArray, LigatureAttach );
      OTV_RUN( table, otvalid );
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                     GPOS LOOKUP TYPE 6                        *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* sets otvalid->extra2 (0) */

  static void
  otv_MarkMarkPos_validate( FT_Bytes       table,
                            OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   PosFormat;


    OTV_NAME_ENTER( "MarkMarkPos" );

    OTV_LIMIT_CHECK( 2 );
    PosFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", PosFormat ));

    switch ( PosFormat )
    {
    case 1:
      otvalid->extra2 = 0;
      OTV_NEST2( MarkMarkPosFormat1, Mark2Array );
      OTV_RUN( table, otvalid );
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                     GPOS LOOKUP TYPE 7                        *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* sets otvalid->extra1 (lookup count) */

  static void
  otv_ContextPos_validate( FT_Bytes       table,
                           OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   PosFormat;


    OTV_NAME_ENTER( "ContextPos" );

    OTV_LIMIT_CHECK( 2 );
    PosFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", PosFormat ));

    switch ( PosFormat )
    {
    case 1:
      /* no need to check glyph indices/classes used as input for these */
      /* context rules since even invalid glyph indices/classes return  */
      /* meaningful results                                             */

      otvalid->extra1 = otvalid->lookup_count;
      OTV_NEST3( ContextPosFormat1, PosRuleSet, PosRule );
      OTV_RUN( table, otvalid );
      break;

    case 2:
      /* no need to check glyph indices/classes used as input for these */
      /* context rules since even invalid glyph indices/classes return  */
      /* meaningful results                                             */

      OTV_NEST3( ContextPosFormat2, PosClassSet, PosClassRule );
      OTV_RUN( table, otvalid );
      break;

    case 3:
      OTV_NEST1( ContextPosFormat3 );
      OTV_RUN( table, otvalid );
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                     GPOS LOOKUP TYPE 8                        *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* sets otvalid->extra1 (lookup count) */

  static void
  otv_ChainContextPos_validate( FT_Bytes       table,
                                OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   PosFormat;


    OTV_NAME_ENTER( "ChainContextPos" );

    OTV_LIMIT_CHECK( 2 );
    PosFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", PosFormat ));

    switch ( PosFormat )
    {
    case 1:
      /* no need to check glyph indices/classes used as input for these */
      /* context rules since even invalid glyph indices/classes return  */
      /* meaningful results                                             */

      otvalid->extra1 = otvalid->lookup_count;
      OTV_NEST3( ChainContextPosFormat1,
                 ChainPosRuleSet, ChainPosRule );
      OTV_RUN( table, otvalid );
      break;

    case 2:
      /* no need to check glyph indices/classes used as input for these */
      /* context rules since even invalid glyph indices/classes return  */
      /* meaningful results                                             */

      OTV_NEST3( ChainContextPosFormat2,
                 ChainPosClassSet, ChainPosClassRule );
      OTV_RUN( table, otvalid );
      break;

    case 3:
      OTV_NEST1( ChainContextPosFormat3 );
      OTV_RUN( table, otvalid );
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                     GPOS LOOKUP TYPE 9                        *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* uses otvalid->type_funcs */

  static void
  otv_ExtensionPos_validate( FT_Bytes       table,
                             OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   PosFormat;


    OTV_NAME_ENTER( "ExtensionPos" );

    OTV_LIMIT_CHECK( 2 );
    PosFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", PosFormat ));

    switch ( PosFormat )
    {
    case 1:     /* ExtensionPosFormat1 */
      {
        FT_UInt            ExtensionLookupType;
        FT_ULong           ExtensionOffset;
        OTV_Validate_Func  validate;


        OTV_LIMIT_CHECK( 6 );
        ExtensionLookupType = FT_NEXT_USHORT( p );
        ExtensionOffset     = FT_NEXT_ULONG( p );

        if ( ExtensionLookupType == 0 || ExtensionLookupType >= 9 )
          FT_INVALID_DATA;

        validate = otvalid->type_funcs[ExtensionLookupType - 1];
        validate( table + ExtensionOffset, otvalid );
      }
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  static const OTV_Validate_Func  otv_gpos_validate_funcs[9] =
  {
    otv_SinglePos_validate,
    otv_PairPos_validate,
    otv_CursivePos_validate,
    otv_MarkBasePos_validate,
    otv_MarkLigPos_validate,
    otv_MarkMarkPos_validate,
    otv_ContextPos_validate,
    otv_ChainContextPos_validate,
    otv_ExtensionPos_validate
  };


  /* sets otvalid->type_count */
  /* sets otvalid->type_funcs */

  FT_LOCAL_DEF( void )
  otv_GPOS_subtable_validate( FT_Bytes       table,
                              OTV_Validator  otvalid )
  {
    otvalid->type_count = 9;
    otvalid->type_funcs = (OTV_Validate_Func*)otv_gpos_validate_funcs;

    otv_Lookup_validate( table, otvalid );
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                          GPOS TABLE                           *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* sets otvalid->glyph_count */

  FT_LOCAL_DEF( void )
  otv_GPOS_validate( FT_Bytes      table,
                     FT_UInt       glyph_count,
                     FT_Validator  ftvalid )
  {
    OTV_ValidatorRec  validrec;
    OTV_Validator     otvalid = &validrec;
    FT_Bytes          p     = table;
    FT_UInt           ScriptList, FeatureList, LookupList;


    otvalid->root = ftvalid;

    FT_TRACE3(( "validating GPOS table\n" ));
    OTV_INIT;

    OTV_LIMIT_CHECK( 10 );

    if ( FT_NEXT_ULONG( p ) != 0x10000UL )      /* Version */
      FT_INVALID_FORMAT;

    ScriptList  = FT_NEXT_USHORT( p );
    FeatureList = FT_NEXT_USHORT( p );
    LookupList  = FT_NEXT_USHORT( p );

    otvalid->type_count  = 9;
    otvalid->type_funcs  = (OTV_Validate_Func*)otv_gpos_validate_funcs;
    otvalid->glyph_count = glyph_count;

    otv_LookupList_validate( table + LookupList,
                             otvalid );
    otv_FeatureList_validate( table + FeatureList, table + LookupList,
                              otvalid );
    otv_ScriptList_validate( table + ScriptList, table + FeatureList,
                             otvalid );

    FT_TRACE4(( "\n" ));
  }


/* END */
@


1.3
log
@fastmerge
@
text
@d7 1
a7 1
/*  Copyright 2002, 2004, 2005, 2006, 2007, 2008 by                        */
d60 1
a60 1
             OTV_Validator  valid )
d74 1
a74 1
    OTV_LIMIT_CHECK( Count * valid->extra1 * 2 );
d76 1
a76 1
    table_size = Count * valid->extra1 * 2 + 2;
d79 1
a79 1
      for ( count1 = valid->extra1; count1 > 0; count1-- )
d86 1
a86 1
        if ( valid->extra2 )
d90 1
a90 1
            otv_Anchor_validate( table + anchor_offset, valid );
d93 1
a93 1
          otv_Anchor_validate( table + anchor_offset, valid );
d104 1
a104 1
  /* sets valid->extra1 (class count) */
d108 1
a108 1
                   OTV_Validator  valid )
d127 2
a128 2
    otv_Coverage_validate( table + Coverage1, valid, -1 );
    otv_Coverage_validate( table + Coverage2, valid, -1 );
d130 1
a130 1
    otv_MarkArray_validate( table + Array1, valid );
d132 3
a134 3
    valid->nesting_level++;
    func          = valid->func[valid->nesting_level];
    valid->extra1 = ClassCount;
d136 1
a136 1
    func( table + Array2, valid );
d138 1
a138 1
    valid->nesting_level--;
d166 1
a166 1
  /* uses valid->extra3 (pointer to base table) */
d171 1
a171 1
                            OTV_Validator  valid )
d225 1
a225 1
        table_size = p - valid->extra3;
d229 1
a229 1
          otv_Device_validate( valid->extra3 + device, valid );
d248 1
a248 1
                       OTV_Validator  valid )
d288 1
a288 1
          otv_Device_validate( table + XDeviceTable, valid );
d292 1
a292 1
          otv_Device_validate( table + YDeviceTable, valid );
d314 1
a314 1
                          OTV_Validator  valid )
d334 1
a334 1
      otv_Anchor_validate( table + FT_NEXT_USHORT( p ), valid );
d349 1
a349 1
  /* sets valid->extra3 (pointer to base table) */
d353 1
a353 1
                          OTV_Validator  valid )
d366 1
a366 1
    valid->extra3 = table;
d379 2
a380 2
        otv_Coverage_validate( table + Coverage, valid, -1 );
        otv_ValueRecord_validate( p, ValueFormat, valid ); /* Value */
d398 3
a400 1
        otv_Coverage_validate( table + Coverage, valid, ValueCount );
d407 1
a407 1
          otv_ValueRecord_validate( p, ValueFormat, valid );
d433 1
a433 1
                        OTV_Validator  valid )
d457 1
a457 1
        otv_ValueRecord_validate( p, format1, valid ); /* Value1 */
d461 1
a461 1
        otv_ValueRecord_validate( p, format2, valid ); /* Value2 */
d469 1
a469 1
  /* sets valid->extra3 (pointer to base table) */
d473 1
a473 1
                        OTV_Validator  valid )
d486 1
a486 1
    valid->extra3 = table;
d503 1
a503 1
        otv_Coverage_validate( table + Coverage, valid, -1 );
d510 1
a510 1
                                ValueFormat1, ValueFormat2, valid );
d535 3
a537 3
        otv_Coverage_validate( table + Coverage, valid, -1 );
        otv_ClassDef_validate( table + ClassDef1, valid );
        otv_ClassDef_validate( table + ClassDef2, valid );
d550 1
a550 1
              otv_ValueRecord_validate( p, ValueFormat1, valid );
d555 1
a555 1
              otv_ValueRecord_validate( p, ValueFormat2, valid );
d580 1
a580 1
                           OTV_Validator  valid )
d610 3
a612 1
        otv_Coverage_validate( table + Coverage, valid, EntryExitCount );
d626 1
a626 1
            otv_Anchor_validate( table + EntryAnchor, valid );
d630 1
a630 1
            otv_Anchor_validate( table + ExitAnchor, valid );
d654 1
a654 1
  /* sets valid->extra2 (1) */
d658 1
a658 1
                            OTV_Validator  valid )
d674 1
a674 1
      valid->extra2 = 1;
d676 1
a676 1
      OTV_RUN( table, valid );
d695 1
a695 1
  /* sets valid->extra2 (1) */
d699 1
a699 1
                           OTV_Validator  valid )
d715 1
a715 1
      valid->extra2 = 1;
d717 1
a717 1
      OTV_RUN( table, valid );
d736 1
a736 1
  /* sets valid->extra2 (0) */
d740 1
a740 1
                            OTV_Validator  valid )
d756 1
a756 1
      valid->extra2 = 0;
d758 1
a758 1
      OTV_RUN( table, valid );
d777 1
a777 1
  /* sets valid->extra1 (lookup count) */
d781 1
a781 1
                           OTV_Validator  valid )
d801 1
a801 1
      valid->extra1 = valid->lookup_count;
d803 1
a803 1
      OTV_RUN( table, valid );
d812 1
a812 1
      OTV_RUN( table, valid );
d817 1
a817 1
      OTV_RUN( table, valid );
d836 1
a836 1
  /* sets valid->extra1 (lookup count) */
d840 1
a840 1
                                OTV_Validator  valid )
d860 1
a860 1
      valid->extra1 = valid->lookup_count;
d863 1
a863 1
      OTV_RUN( table, valid );
d873 1
a873 1
      OTV_RUN( table, valid );
d878 1
a878 1
      OTV_RUN( table, valid );
d897 1
a897 1
  /* uses valid->type_funcs */
d901 1
a901 1
                             OTV_Validator  valid )
d930 2
a931 2
        validate = valid->type_funcs[ExtensionLookupType - 1];
        validate( table + ExtensionOffset, valid );
d957 2
a958 2
  /* sets valid->type_count */
  /* sets valid->type_funcs */
d962 1
a962 1
                              OTV_Validator  valid )
d964 2
a965 2
    valid->type_count = 9;
    valid->type_funcs = (OTV_Validate_Func*)otv_gpos_validate_funcs;
d967 1
a967 1
    otv_Lookup_validate( table, valid );
d979 1
a979 1
  /* sets valid->glyph_count */
d987 1
a987 1
    OTV_Validator     valid = &validrec;
d992 1
a992 1
    valid->root = ftvalid;
d1006 3
a1008 3
    valid->type_count  = 9;
    valid->type_funcs  = (OTV_Validate_Func*)otv_gpos_validate_funcs;
    valid->glyph_count = glyph_count;
d1011 1
a1011 1
                             valid );
d1013 1
a1013 1
                              valid );
d1015 1
a1015 1
                             valid );
@


1.2
log
@Merge freetype 2.3.6
@
text
@d7 1
a7 1
/*  Copyright 2002, 2004, 2005, 2006, 2007 by                              */
d212 1
a212 1
        FT_UInt   table_size;
d647 4
a650 1
  /* sets valid->extra2 (0) */
d670 1
a670 1
      valid->extra2 = 0;
d914 2
a915 1
        FT_UInt            ExtensionLookupType, ExtensionOffset;
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 2002, 2004, 2005, 2006 by                                    */
d127 2
a128 2
    otv_Coverage_validate( table + Coverage1, valid );
    otv_Coverage_validate( table + Coverage2, valid );
d194 1
a194 1
      FT_INVALID_DATA;
d297 1
a297 1
      FT_INVALID_DATA;
d379 1
a379 1
        otv_Coverage_validate( table + Coverage, valid );
d398 1
a398 1
        otv_Coverage_validate( table + Coverage, valid );
d412 1
a412 1
      FT_INVALID_DATA;
d501 1
a501 1
        otv_Coverage_validate( table + Coverage, valid );
d533 1
a533 1
        otv_Coverage_validate( table + Coverage, valid );
d561 1
a561 1
      FT_INVALID_DATA;
d608 1
a608 1
        otv_Coverage_validate( table + Coverage, valid );
d632 1
a632 1
      FT_INVALID_DATA;
d673 1
a673 1
      FT_INVALID_DATA;
d714 1
a714 1
      FT_INVALID_DATA;
d755 1
a755 1
      FT_INVALID_DATA;
d814 1
a814 1
      FT_INVALID_DATA;
d875 1
a875 1
      FT_INVALID_DATA;
d928 1
a928 1
      FT_INVALID_DATA;
d992 1
a992 1
      FT_INVALID_DATA;
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d7 1
a7 1
/*  Copyright 2002, 2004, 2005, 2006, 2007 by                              */
d127 2
a128 2
    otv_Coverage_validate( table + Coverage1, valid, -1 );
    otv_Coverage_validate( table + Coverage2, valid, -1 );
d194 1
a194 1
      FT_INVALID_FORMAT;
d297 1
a297 1
      FT_INVALID_FORMAT;
d379 1
a379 1
        otv_Coverage_validate( table + Coverage, valid, -1 );
d398 1
a398 1
        otv_Coverage_validate( table + Coverage, valid, ValueCount );
d412 1
a412 1
      FT_INVALID_FORMAT;
d501 1
a501 1
        otv_Coverage_validate( table + Coverage, valid, -1 );
d533 1
a533 1
        otv_Coverage_validate( table + Coverage, valid, -1 );
d561 1
a561 1
      FT_INVALID_FORMAT;
d608 1
a608 1
        otv_Coverage_validate( table + Coverage, valid, EntryExitCount );
d632 1
a632 1
      FT_INVALID_FORMAT;
d673 1
a673 1
      FT_INVALID_FORMAT;
d714 1
a714 1
      FT_INVALID_FORMAT;
d755 1
a755 1
      FT_INVALID_FORMAT;
d814 1
a814 1
      FT_INVALID_FORMAT;
d875 1
a875 1
      FT_INVALID_FORMAT;
d928 1
a928 1
      FT_INVALID_FORMAT;
d992 1
a992 1
      FT_INVALID_FORMAT;
@


1.1.115.1
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@@


1.1.115.2
log
@we need newer freetype for advance calculation
@
text
@d7 1
a7 1
/*  Copyright 2002, 2004, 2005, 2006, 2007, 2008 by                        */
d127 2
a128 2
    otv_Coverage_validate( table + Coverage1, valid, -1 );
    otv_Coverage_validate( table + Coverage2, valid, -1 );
d194 1
a194 1
      FT_INVALID_FORMAT;
d212 1
a212 1
        FT_PtrDist  table_size;
d297 1
a297 1
      FT_INVALID_FORMAT;
d379 1
a379 1
        otv_Coverage_validate( table + Coverage, valid, -1 );
d398 1
a398 1
        otv_Coverage_validate( table + Coverage, valid, ValueCount );
d412 1
a412 1
      FT_INVALID_FORMAT;
d501 1
a501 1
        otv_Coverage_validate( table + Coverage, valid, -1 );
d533 1
a533 1
        otv_Coverage_validate( table + Coverage, valid, -1 );
d561 1
a561 1
      FT_INVALID_FORMAT;
d608 1
a608 1
        otv_Coverage_validate( table + Coverage, valid, EntryExitCount );
d632 1
a632 1
      FT_INVALID_FORMAT;
d647 1
a647 4
  /* UNDOCUMENTED (in OpenType 1.5):              */
  /* BaseRecord tables can contain NULL pointers. */

  /* sets valid->extra2 (1) */
d667 1
a667 1
      valid->extra2 = 1;
d673 1
a673 1
      FT_INVALID_FORMAT;
d714 1
a714 1
      FT_INVALID_FORMAT;
d755 1
a755 1
      FT_INVALID_FORMAT;
d814 1
a814 1
      FT_INVALID_FORMAT;
d875 1
a875 1
      FT_INVALID_FORMAT;
d911 1
a911 2
        FT_UInt            ExtensionLookupType;
        FT_ULong           ExtensionOffset;
d928 1
a928 1
      FT_INVALID_FORMAT;
d992 1
a992 1
      FT_INVALID_FORMAT;
@


1.1.115.3
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 2002-2016 by                                                 */
d60 1
a60 1
             OTV_Validator  otvalid )
d74 1
a74 1
    OTV_LIMIT_CHECK( Count * otvalid->extra1 * 2 );
d76 1
a76 1
    table_size = Count * otvalid->extra1 * 2 + 2;
d79 1
a79 1
      for ( count1 = otvalid->extra1; count1 > 0; count1-- )
d86 1
a86 1
        if ( otvalid->extra2 )
d90 1
a90 1
            otv_Anchor_validate( table + anchor_offset, otvalid );
d93 1
a93 1
          otv_Anchor_validate( table + anchor_offset, otvalid );
d104 1
a104 1
  /* sets otvalid->extra1 (class count) */
d108 1
a108 1
                   OTV_Validator  otvalid )
d127 2
a128 2
    otv_Coverage_validate( table + Coverage1, otvalid, -1 );
    otv_Coverage_validate( table + Coverage2, otvalid, -1 );
d130 1
a130 1
    otv_MarkArray_validate( table + Array1, otvalid );
d132 3
a134 3
    otvalid->nesting_level++;
    func          = otvalid->func[otvalid->nesting_level];
    otvalid->extra1 = ClassCount;
d136 1
a136 1
    func( table + Array2, otvalid );
d138 1
a138 1
    otvalid->nesting_level--;
d166 1
a166 1
  /* uses otvalid->extra3 (pointer to base table) */
d171 1
a171 1
                            OTV_Validator  otvalid )
d225 1
a225 1
        table_size = p - otvalid->extra3;
d229 1
a229 1
          otv_Device_validate( otvalid->extra3 + device, otvalid );
d248 1
a248 1
                       OTV_Validator  otvalid )
d288 1
a288 1
          otv_Device_validate( table + XDeviceTable, otvalid );
d292 1
a292 1
          otv_Device_validate( table + YDeviceTable, otvalid );
d314 1
a314 1
                          OTV_Validator  otvalid )
d334 1
a334 1
      otv_Anchor_validate( table + FT_NEXT_USHORT( p ), otvalid );
d349 1
a349 1
  /* sets otvalid->extra3 (pointer to base table) */
d353 1
a353 1
                          OTV_Validator  otvalid )
d366 1
a366 1
    otvalid->extra3 = table;
d379 2
a380 2
        otv_Coverage_validate( table + Coverage, otvalid, -1 );
        otv_ValueRecord_validate( p, ValueFormat, otvalid ); /* Value */
d398 1
a398 3
        otv_Coverage_validate( table + Coverage,
                               otvalid,
                               (FT_Int)ValueCount );
d405 1
a405 1
          otv_ValueRecord_validate( p, ValueFormat, otvalid );
d431 1
a431 1
                        OTV_Validator  otvalid )
d455 1
a455 1
        otv_ValueRecord_validate( p, format1, otvalid ); /* Value1 */
d459 1
a459 1
        otv_ValueRecord_validate( p, format2, otvalid ); /* Value2 */
d467 1
a467 1
  /* sets otvalid->extra3 (pointer to base table) */
d471 1
a471 1
                        OTV_Validator  otvalid )
d484 1
a484 1
    otvalid->extra3 = table;
d501 1
a501 1
        otv_Coverage_validate( table + Coverage, otvalid, -1 );
d508 1
a508 1
                                ValueFormat1, ValueFormat2, otvalid );
d533 3
a535 3
        otv_Coverage_validate( table + Coverage, otvalid, -1 );
        otv_ClassDef_validate( table + ClassDef1, otvalid );
        otv_ClassDef_validate( table + ClassDef2, otvalid );
d548 1
a548 1
              otv_ValueRecord_validate( p, ValueFormat1, otvalid );
d553 1
a553 1
              otv_ValueRecord_validate( p, ValueFormat2, otvalid );
d578 1
a578 1
                           OTV_Validator  otvalid )
d608 1
a608 3
        otv_Coverage_validate( table + Coverage,
                               otvalid,
                               (FT_Int)EntryExitCount );
d622 1
a622 1
            otv_Anchor_validate( table + EntryAnchor, otvalid );
d626 1
a626 1
            otv_Anchor_validate( table + ExitAnchor, otvalid );
d650 1
a650 1
  /* sets otvalid->extra2 (1) */
d654 1
a654 1
                            OTV_Validator  otvalid )
d670 1
a670 1
      otvalid->extra2 = 1;
d672 1
a672 1
      OTV_RUN( table, otvalid );
d691 1
a691 1
  /* sets otvalid->extra2 (1) */
d695 1
a695 1
                           OTV_Validator  otvalid )
d711 1
a711 1
      otvalid->extra2 = 1;
d713 1
a713 1
      OTV_RUN( table, otvalid );
d732 1
a732 1
  /* sets otvalid->extra2 (0) */
d736 1
a736 1
                            OTV_Validator  otvalid )
d752 1
a752 1
      otvalid->extra2 = 0;
d754 1
a754 1
      OTV_RUN( table, otvalid );
d773 1
a773 1
  /* sets otvalid->extra1 (lookup count) */
d777 1
a777 1
                           OTV_Validator  otvalid )
d797 1
a797 1
      otvalid->extra1 = otvalid->lookup_count;
d799 1
a799 1
      OTV_RUN( table, otvalid );
d808 1
a808 1
      OTV_RUN( table, otvalid );
d813 1
a813 1
      OTV_RUN( table, otvalid );
d832 1
a832 1
  /* sets otvalid->extra1 (lookup count) */
d836 1
a836 1
                                OTV_Validator  otvalid )
d856 1
a856 1
      otvalid->extra1 = otvalid->lookup_count;
d859 1
a859 1
      OTV_RUN( table, otvalid );
d869 1
a869 1
      OTV_RUN( table, otvalid );
d874 1
a874 1
      OTV_RUN( table, otvalid );
d893 1
a893 1
  /* uses otvalid->type_funcs */
d897 1
a897 1
                             OTV_Validator  otvalid )
d926 2
a927 2
        validate = otvalid->type_funcs[ExtensionLookupType - 1];
        validate( table + ExtensionOffset, otvalid );
d953 2
a954 2
  /* sets otvalid->type_count */
  /* sets otvalid->type_funcs */
d958 1
a958 1
                              OTV_Validator  otvalid )
d960 2
a961 2
    otvalid->type_count = 9;
    otvalid->type_funcs = (OTV_Validate_Func*)otv_gpos_validate_funcs;
d963 1
a963 1
    otv_Lookup_validate( table, otvalid );
d975 1
a975 1
  /* sets otvalid->glyph_count */
d983 1
a983 1
    OTV_Validator     otvalid = &validrec;
d988 1
a988 1
    otvalid->root = ftvalid;
d1002 3
a1004 3
    otvalid->type_count  = 9;
    otvalid->type_funcs  = (OTV_Validate_Func*)otv_gpos_validate_funcs;
    otvalid->glyph_count = glyph_count;
d1007 1
a1007 1
                             otvalid );
d1009 1
a1009 1
                              otvalid );
d1011 1
a1011 1
                             otvalid );
@


