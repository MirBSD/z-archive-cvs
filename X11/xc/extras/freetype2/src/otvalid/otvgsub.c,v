head	1.4;
access;
symbols
	freetype-2_7_1:1.1.115.3
	freetype-2_3_12:1.1.115.2
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.1.115.1
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.1
	freetype:1.1.115;
locks; strict;
comment	@ * @;


1.4
date	2017.04.15.19.21.46;	author tg;	state Exp;
branches;
next	1.3;
commitid	10058F2723111C7BEE2;

1.3
date	2013.08.06.19.48.02;	author tg;	state Exp;
branches;
next	1.2;
commitid	100520152445E05B912;

1.2
date	2008.06.12.20.54.40;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	10048518C1E44F62885;

1.1
date	2006.06.29.18.37.51;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.115.1;
next	;
commitid	10044A41DBD6368BED5;

1.1.1.1
date	2008.02.26.19.52.25;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.37.26;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.115.1
date	2006.06.29.18.37.51;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41DBD6368BED5;

1.1.115.2
date	2013.08.06.19.12.23;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10052014A9975CEFD1D;

1.1.115.3
date	2017.04.15.15.42.07;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.4
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  otvgsub.c                                                              */
/*                                                                         */
/*    OpenType GSUB table validation (body).                               */
/*                                                                         */
/*  Copyright 2004-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include "otvalid.h"
#include "otvcommn.h"


  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_otvgsub


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                  GSUB LOOKUP TYPE 1                           *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* uses otvalid->glyph_count */

  static void
  otv_SingleSubst_validate( FT_Bytes       table,
                            OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   SubstFormat;


    OTV_NAME_ENTER( "SingleSubst" );

    OTV_LIMIT_CHECK( 2 );
    SubstFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", SubstFormat ));

    switch ( SubstFormat )
    {
    case 1:     /* SingleSubstFormat1 */
      {
        FT_Bytes  Coverage;
        FT_Int    DeltaGlyphID;
        FT_Long   idx;


        OTV_LIMIT_CHECK( 4 );
        Coverage     = table + FT_NEXT_USHORT( p );
        DeltaGlyphID = FT_NEXT_SHORT( p );

        otv_Coverage_validate( Coverage, otvalid, -1 );

        idx = (FT_Long)otv_Coverage_get_first( Coverage ) + DeltaGlyphID;
        if ( idx < 0 )
          FT_INVALID_DATA;

        idx = (FT_Long)otv_Coverage_get_last( Coverage ) + DeltaGlyphID;
        if ( (FT_UInt)idx >= otvalid->glyph_count )
          FT_INVALID_DATA;
      }
      break;

    case 2:     /* SingleSubstFormat2 */
      {
        FT_UInt  Coverage, GlyphCount;


        OTV_LIMIT_CHECK( 4 );
        Coverage   = FT_NEXT_USHORT( p );
        GlyphCount = FT_NEXT_USHORT( p );

        OTV_TRACE(( " (GlyphCount = %d)\n", GlyphCount ));

        otv_Coverage_validate( table + Coverage,
                               otvalid,
                               (FT_Int)GlyphCount );

        OTV_LIMIT_CHECK( GlyphCount * 2 );

        /* Substitute */
        for ( ; GlyphCount > 0; GlyphCount-- )
          if ( FT_NEXT_USHORT( p ) >= otvalid->glyph_count )
            FT_INVALID_GLYPH_ID;
      }
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                  GSUB LOOKUP TYPE 2                           *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* sets otvalid->extra1 (glyph count) */

  static void
  otv_MultipleSubst_validate( FT_Bytes       table,
                              OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   SubstFormat;


    OTV_NAME_ENTER( "MultipleSubst" );

    OTV_LIMIT_CHECK( 2 );
    SubstFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", SubstFormat ));

    switch ( SubstFormat )
    {
    case 1:
      otvalid->extra1 = otvalid->glyph_count;
      OTV_NEST2( MultipleSubstFormat1, Sequence );
      OTV_RUN( table, otvalid );
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                    GSUB LOOKUP TYPE 3                         *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* sets otvalid->extra1 (glyph count) */

  static void
  otv_AlternateSubst_validate( FT_Bytes       table,
                               OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   SubstFormat;


    OTV_NAME_ENTER( "AlternateSubst" );

    OTV_LIMIT_CHECK( 2 );
    SubstFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", SubstFormat ));

    switch ( SubstFormat )
    {
    case 1:
      otvalid->extra1 = otvalid->glyph_count;
      OTV_NEST2( AlternateSubstFormat1, AlternateSet );
      OTV_RUN( table, otvalid );
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                    GSUB LOOKUP TYPE 4                         *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

#define LigatureFunc  otv_Ligature_validate

  /* uses otvalid->glyph_count */

  static void
  otv_Ligature_validate( FT_Bytes       table,
                         OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   LigatureGlyph, CompCount;


    OTV_ENTER;

    OTV_LIMIT_CHECK( 4 );
    LigatureGlyph = FT_NEXT_USHORT( p );
    if ( LigatureGlyph >= otvalid->glyph_count )
      FT_INVALID_DATA;

    CompCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (CompCount = %d)\n", CompCount ));

    if ( CompCount == 0 )
      FT_INVALID_DATA;

    CompCount--;

    OTV_LIMIT_CHECK( CompCount * 2 );     /* Component */

    /* no need to check the Component glyph indices */

    OTV_EXIT;
  }


  static void
  otv_LigatureSubst_validate( FT_Bytes       table,
                              OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   SubstFormat;


    OTV_NAME_ENTER( "LigatureSubst" );

    OTV_LIMIT_CHECK( 2 );
    SubstFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", SubstFormat ));

    switch ( SubstFormat )
    {
    case 1:
      OTV_NEST3( LigatureSubstFormat1, LigatureSet, Ligature );
      OTV_RUN( table, otvalid );
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                  GSUB LOOKUP TYPE 5                           *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* sets otvalid->extra1 (lookup count) */

  static void
  otv_ContextSubst_validate( FT_Bytes       table,
                             OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   SubstFormat;


    OTV_NAME_ENTER( "ContextSubst" );

    OTV_LIMIT_CHECK( 2 );
    SubstFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", SubstFormat ));

    switch ( SubstFormat )
    {
    case 1:
      /* no need to check glyph indices/classes used as input for these */
      /* context rules since even invalid glyph indices/classes return  */
      /* meaningful results                                             */

      otvalid->extra1 = otvalid->lookup_count;
      OTV_NEST3( ContextSubstFormat1, SubRuleSet, SubRule );
      OTV_RUN( table, otvalid );
      break;

    case 2:
      /* no need to check glyph indices/classes used as input for these */
      /* context rules since even invalid glyph indices/classes return  */
      /* meaningful results                                             */

      OTV_NEST3( ContextSubstFormat2, SubClassSet, SubClassRule );
      OTV_RUN( table, otvalid );
      break;

    case 3:
      OTV_NEST1( ContextSubstFormat3 );
      OTV_RUN( table, otvalid );
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                    GSUB LOOKUP TYPE 6                         *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* sets otvalid->extra1 (lookup count)            */

  static void
  otv_ChainContextSubst_validate( FT_Bytes       table,
                                  OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   SubstFormat;


    OTV_NAME_ENTER( "ChainContextSubst" );

    OTV_LIMIT_CHECK( 2 );
    SubstFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", SubstFormat ));

    switch ( SubstFormat )
    {
    case 1:
      /* no need to check glyph indices/classes used as input for these */
      /* context rules since even invalid glyph indices/classes return  */
      /* meaningful results                                             */

      otvalid->extra1 = otvalid->lookup_count;
      OTV_NEST3( ChainContextSubstFormat1,
                 ChainSubRuleSet, ChainSubRule );
      OTV_RUN( table, otvalid );
      break;

    case 2:
      /* no need to check glyph indices/classes used as input for these */
      /* context rules since even invalid glyph indices/classes return  */
      /* meaningful results                                             */

      OTV_NEST3( ChainContextSubstFormat2,
                 ChainSubClassSet, ChainSubClassRule );
      OTV_RUN( table, otvalid );
      break;

    case 3:
      OTV_NEST1( ChainContextSubstFormat3 );
      OTV_RUN( table, otvalid );
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                    GSUB LOOKUP TYPE 7                         *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* uses otvalid->type_funcs */

  static void
  otv_ExtensionSubst_validate( FT_Bytes       table,
                               OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   SubstFormat;


    OTV_NAME_ENTER( "ExtensionSubst" );

    OTV_LIMIT_CHECK( 2 );
    SubstFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", SubstFormat ));

    switch ( SubstFormat )
    {
    case 1:     /* ExtensionSubstFormat1 */
      {
        FT_UInt            ExtensionLookupType;
        FT_ULong           ExtensionOffset;
        OTV_Validate_Func  validate;


        OTV_LIMIT_CHECK( 6 );
        ExtensionLookupType = FT_NEXT_USHORT( p );
        ExtensionOffset     = FT_NEXT_ULONG( p );

        if ( ExtensionLookupType == 0 ||
             ExtensionLookupType == 7 ||
             ExtensionLookupType > 8  )
          FT_INVALID_DATA;

        validate = otvalid->type_funcs[ExtensionLookupType - 1];
        validate( table + ExtensionOffset, otvalid );
      }
      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                    GSUB LOOKUP TYPE 8                         *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* uses otvalid->glyph_count */

  static void
  otv_ReverseChainSingleSubst_validate( FT_Bytes       table,
                                        OTV_Validator  otvalid )
  {
    FT_Bytes  p = table, Coverage;
    FT_UInt   SubstFormat;
    FT_UInt   BacktrackGlyphCount, LookaheadGlyphCount, GlyphCount;


    OTV_NAME_ENTER( "ReverseChainSingleSubst" );

    OTV_LIMIT_CHECK( 2 );
    SubstFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", SubstFormat ));

    switch ( SubstFormat )
    {
    case 1:     /* ReverseChainSingleSubstFormat1 */
      OTV_LIMIT_CHECK( 4 );
      Coverage            = table + FT_NEXT_USHORT( p );
      BacktrackGlyphCount = FT_NEXT_USHORT( p );

      OTV_TRACE(( " (BacktrackGlyphCount = %d)\n", BacktrackGlyphCount ));

      otv_Coverage_validate( Coverage, otvalid, -1 );

      OTV_LIMIT_CHECK( BacktrackGlyphCount * 2 + 2 );

      for ( ; BacktrackGlyphCount > 0; BacktrackGlyphCount-- )
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );

      LookaheadGlyphCount = FT_NEXT_USHORT( p );

      OTV_TRACE(( " (LookaheadGlyphCount = %d)\n", LookaheadGlyphCount ));

      OTV_LIMIT_CHECK( LookaheadGlyphCount * 2 + 2 );

      for ( ; LookaheadGlyphCount > 0; LookaheadGlyphCount-- )
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );

      GlyphCount = FT_NEXT_USHORT( p );

      OTV_TRACE(( " (GlyphCount = %d)\n", GlyphCount ));

      if ( GlyphCount != otv_Coverage_get_count( Coverage ) )
        FT_INVALID_DATA;

      OTV_LIMIT_CHECK( GlyphCount * 2 );

      /* Substitute */
      for ( ; GlyphCount > 0; GlyphCount-- )
        if ( FT_NEXT_USHORT( p ) >= otvalid->glyph_count )
          FT_INVALID_DATA;

      break;

    default:
      FT_INVALID_FORMAT;
    }

    OTV_EXIT;
  }


  static const OTV_Validate_Func  otv_gsub_validate_funcs[8] =
  {
    otv_SingleSubst_validate,
    otv_MultipleSubst_validate,
    otv_AlternateSubst_validate,
    otv_LigatureSubst_validate,
    otv_ContextSubst_validate,
    otv_ChainContextSubst_validate,
    otv_ExtensionSubst_validate,
    otv_ReverseChainSingleSubst_validate
  };


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                          GSUB TABLE                           *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* sets otvalid->type_count  */
  /* sets otvalid->type_funcs  */
  /* sets otvalid->glyph_count */

  FT_LOCAL_DEF( void )
  otv_GSUB_validate( FT_Bytes      table,
                     FT_UInt       glyph_count,
                     FT_Validator  ftvalid )
  {
    OTV_ValidatorRec  otvalidrec;
    OTV_Validator     otvalid = &otvalidrec;
    FT_Bytes          p       = table;
    FT_UInt           ScriptList, FeatureList, LookupList;


    otvalid->root = ftvalid;

    FT_TRACE3(( "validating GSUB table\n" ));
    OTV_INIT;

    OTV_LIMIT_CHECK( 10 );

    if ( FT_NEXT_ULONG( p ) != 0x10000UL )      /* Version */
      FT_INVALID_FORMAT;

    ScriptList  = FT_NEXT_USHORT( p );
    FeatureList = FT_NEXT_USHORT( p );
    LookupList  = FT_NEXT_USHORT( p );

    otvalid->type_count  = 8;
    otvalid->type_funcs  = (OTV_Validate_Func*)otv_gsub_validate_funcs;
    otvalid->glyph_count = glyph_count;

    otv_LookupList_validate( table + LookupList,
                             otvalid );
    otv_FeatureList_validate( table + FeatureList, table + LookupList,
                              otvalid );
    otv_ScriptList_validate( table + ScriptList, table + FeatureList,
                             otvalid );

    FT_TRACE4(( "\n" ));
  }


/* END */
@


1.3
log
@fastmerge
@
text
@d7 1
a7 1
/*  Copyright 2004, 2005, 2007 by                                          */
d41 1
a41 1
  /* uses valid->glyph_count */
d45 1
a45 1
                            OTV_Validator  valid )
d71 1
a71 1
        otv_Coverage_validate( Coverage, valid, -1 );
d73 1
a73 1
        idx = otv_Coverage_get_first( Coverage ) + DeltaGlyphID;
d77 2
a78 2
        idx = otv_Coverage_get_last( Coverage ) + DeltaGlyphID;
        if ( (FT_UInt)idx >= valid->glyph_count )
d94 3
a96 1
        otv_Coverage_validate( table + Coverage, valid, GlyphCount );
d102 1
a102 1
          if ( FT_NEXT_USHORT( p ) >= valid->glyph_count )
d123 1
a123 1
  /* sets valid->extra1 (glyph count) */
d127 1
a127 1
                              OTV_Validator  valid )
d143 1
a143 1
      valid->extra1 = valid->glyph_count;
d145 1
a145 1
      OTV_RUN( table, valid );
d164 1
a164 1
  /* sets valid->extra1 (glyph count) */
d168 1
a168 1
                               OTV_Validator  valid )
d184 1
a184 1
      valid->extra1 = valid->glyph_count;
d186 1
a186 1
      OTV_RUN( table, valid );
d207 1
a207 1
  /* uses valid->glyph_count */
d211 1
a211 1
                         OTV_Validator  valid )
d221 1
a221 1
    if ( LigatureGlyph >= valid->glyph_count )
d243 1
a243 1
                              OTV_Validator  valid )
d260 1
a260 1
      OTV_RUN( table, valid );
d279 1
a279 1
  /* sets valid->extra1 (lookup count) */
d283 1
a283 1
                             OTV_Validator  valid )
d303 1
a303 1
      valid->extra1 = valid->lookup_count;
d305 1
a305 1
      OTV_RUN( table, valid );
d314 1
a314 1
      OTV_RUN( table, valid );
d319 1
a319 1
      OTV_RUN( table, valid );
d338 1
a338 1
  /* sets valid->extra1 (lookup count)            */
d342 1
a342 1
                                  OTV_Validator  valid )
d362 1
a362 1
      valid->extra1 = valid->lookup_count;
d365 1
a365 1
      OTV_RUN( table, valid );
d375 1
a375 1
      OTV_RUN( table, valid );
d380 1
a380 1
      OTV_RUN( table, valid );
d399 1
a399 1
  /* uses valid->type_funcs */
d403 1
a403 1
                               OTV_Validator  valid )
d434 2
a435 2
        validate = valid->type_funcs[ExtensionLookupType - 1];
        validate( table + ExtensionOffset, valid );
d455 1
a455 1
  /* uses valid->glyph_count */
d459 1
a459 1
                                        OTV_Validator  valid )
d482 1
a482 1
      otv_Coverage_validate( Coverage, valid, -1 );
d487 1
a487 1
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d496 1
a496 1
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d509 1
a509 1
        if ( FT_NEXT_USHORT( p ) >= valid->glyph_count )
d543 3
a545 3
  /* sets valid->type_count  */
  /* sets valid->type_funcs  */
  /* sets valid->glyph_count */
d552 3
a554 3
    OTV_ValidatorRec  validrec;
    OTV_Validator     valid = &validrec;
    FT_Bytes          p     = table;
d558 1
a558 1
    valid->root = ftvalid;
d572 3
a574 3
    valid->type_count  = 8;
    valid->type_funcs  = (OTV_Validate_Func*)otv_gsub_validate_funcs;
    valid->glyph_count = glyph_count;
d577 1
a577 1
                             valid );
d579 1
a579 1
                              valid );
d581 1
a581 1
                             valid );
@


1.2
log
@Merge freetype 2.3.6
@
text
@d418 2
a419 1
        FT_UInt            ExtensionLookupType, ExtensionOffset;
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 2004, 2005 by                                                */
d71 1
a71 1
        otv_Coverage_validate( Coverage, valid );
d94 1
a94 1
        otv_Coverage_validate( table + Coverage, valid );
d101 1
a101 1
            FT_INVALID_DATA;
d106 1
a106 1
      FT_INVALID_DATA;
d147 1
a147 1
      FT_INVALID_DATA;
d188 1
a188 1
      FT_INVALID_DATA;
d262 1
a262 1
      FT_INVALID_DATA;
d321 1
a321 1
      FT_INVALID_DATA;
d382 1
a382 1
      FT_INVALID_DATA;
d437 1
a437 1
      FT_INVALID_DATA;
d479 1
a479 1
      otv_Coverage_validate( Coverage, valid );
d484 1
a484 1
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid );
d493 1
a493 1
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid );
d512 1
a512 1
      FT_INVALID_DATA;
d563 1
a563 1
      FT_INVALID_DATA;
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d7 1
a7 1
/*  Copyright 2004, 2005, 2007 by                                          */
d71 1
a71 1
        otv_Coverage_validate( Coverage, valid, -1 );
d94 1
a94 1
        otv_Coverage_validate( table + Coverage, valid, GlyphCount );
d101 1
a101 1
            FT_INVALID_GLYPH_ID;
d106 1
a106 1
      FT_INVALID_FORMAT;
d147 1
a147 1
      FT_INVALID_FORMAT;
d188 1
a188 1
      FT_INVALID_FORMAT;
d262 1
a262 1
      FT_INVALID_FORMAT;
d321 1
a321 1
      FT_INVALID_FORMAT;
d382 1
a382 1
      FT_INVALID_FORMAT;
d437 1
a437 1
      FT_INVALID_FORMAT;
d479 1
a479 1
      otv_Coverage_validate( Coverage, valid, -1 );
d484 1
a484 1
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d493 1
a493 1
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d512 1
a512 1
      FT_INVALID_FORMAT;
d563 1
a563 1
      FT_INVALID_FORMAT;
@


1.1.115.1
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@@


1.1.115.2
log
@we need newer freetype for advance calculation
@
text
@d7 1
a7 1
/*  Copyright 2004, 2005, 2007 by                                          */
d71 1
a71 1
        otv_Coverage_validate( Coverage, valid, -1 );
d94 1
a94 1
        otv_Coverage_validate( table + Coverage, valid, GlyphCount );
d101 1
a101 1
            FT_INVALID_GLYPH_ID;
d106 1
a106 1
      FT_INVALID_FORMAT;
d147 1
a147 1
      FT_INVALID_FORMAT;
d188 1
a188 1
      FT_INVALID_FORMAT;
d262 1
a262 1
      FT_INVALID_FORMAT;
d321 1
a321 1
      FT_INVALID_FORMAT;
d382 1
a382 1
      FT_INVALID_FORMAT;
d418 1
a418 2
        FT_UInt            ExtensionLookupType;
        FT_ULong           ExtensionOffset;
d437 1
a437 1
      FT_INVALID_FORMAT;
d479 1
a479 1
      otv_Coverage_validate( Coverage, valid, -1 );
d484 1
a484 1
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d493 1
a493 1
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d512 1
a512 1
      FT_INVALID_FORMAT;
d563 1
a563 1
      FT_INVALID_FORMAT;
@


1.1.115.3
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 2004-2016 by                                                 */
d41 1
a41 1
  /* uses otvalid->glyph_count */
d45 1
a45 1
                            OTV_Validator  otvalid )
d71 1
a71 1
        otv_Coverage_validate( Coverage, otvalid, -1 );
d73 1
a73 1
        idx = (FT_Long)otv_Coverage_get_first( Coverage ) + DeltaGlyphID;
d77 2
a78 2
        idx = (FT_Long)otv_Coverage_get_last( Coverage ) + DeltaGlyphID;
        if ( (FT_UInt)idx >= otvalid->glyph_count )
d94 1
a94 3
        otv_Coverage_validate( table + Coverage,
                               otvalid,
                               (FT_Int)GlyphCount );
d100 1
a100 1
          if ( FT_NEXT_USHORT( p ) >= otvalid->glyph_count )
d121 1
a121 1
  /* sets otvalid->extra1 (glyph count) */
d125 1
a125 1
                              OTV_Validator  otvalid )
d141 1
a141 1
      otvalid->extra1 = otvalid->glyph_count;
d143 1
a143 1
      OTV_RUN( table, otvalid );
d162 1
a162 1
  /* sets otvalid->extra1 (glyph count) */
d166 1
a166 1
                               OTV_Validator  otvalid )
d182 1
a182 1
      otvalid->extra1 = otvalid->glyph_count;
d184 1
a184 1
      OTV_RUN( table, otvalid );
d205 1
a205 1
  /* uses otvalid->glyph_count */
d209 1
a209 1
                         OTV_Validator  otvalid )
d219 1
a219 1
    if ( LigatureGlyph >= otvalid->glyph_count )
d241 1
a241 1
                              OTV_Validator  otvalid )
d258 1
a258 1
      OTV_RUN( table, otvalid );
d277 1
a277 1
  /* sets otvalid->extra1 (lookup count) */
d281 1
a281 1
                             OTV_Validator  otvalid )
d301 1
a301 1
      otvalid->extra1 = otvalid->lookup_count;
d303 1
a303 1
      OTV_RUN( table, otvalid );
d312 1
a312 1
      OTV_RUN( table, otvalid );
d317 1
a317 1
      OTV_RUN( table, otvalid );
d336 1
a336 1
  /* sets otvalid->extra1 (lookup count)            */
d340 1
a340 1
                                  OTV_Validator  otvalid )
d360 1
a360 1
      otvalid->extra1 = otvalid->lookup_count;
d363 1
a363 1
      OTV_RUN( table, otvalid );
d373 1
a373 1
      OTV_RUN( table, otvalid );
d378 1
a378 1
      OTV_RUN( table, otvalid );
d397 1
a397 1
  /* uses otvalid->type_funcs */
d401 1
a401 1
                               OTV_Validator  otvalid )
d432 2
a433 2
        validate = otvalid->type_funcs[ExtensionLookupType - 1];
        validate( table + ExtensionOffset, otvalid );
d453 1
a453 1
  /* uses otvalid->glyph_count */
d457 1
a457 1
                                        OTV_Validator  otvalid )
d480 1
a480 1
      otv_Coverage_validate( Coverage, otvalid, -1 );
d485 1
a485 1
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );
d494 1
a494 1
        otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );
d507 1
a507 1
        if ( FT_NEXT_USHORT( p ) >= otvalid->glyph_count )
d541 3
a543 3
  /* sets otvalid->type_count  */
  /* sets otvalid->type_funcs  */
  /* sets otvalid->glyph_count */
d550 3
a552 3
    OTV_ValidatorRec  otvalidrec;
    OTV_Validator     otvalid = &otvalidrec;
    FT_Bytes          p       = table;
d556 1
a556 1
    otvalid->root = ftvalid;
d570 3
a572 3
    otvalid->type_count  = 8;
    otvalid->type_funcs  = (OTV_Validate_Func*)otv_gsub_validate_funcs;
    otvalid->glyph_count = glyph_count;
d575 1
a575 1
                             otvalid );
d577 1
a577 1
                              otvalid );
d579 1
a579 1
                             otvalid );
@


