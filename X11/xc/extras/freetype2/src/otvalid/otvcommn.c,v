head	1.3;
access;
symbols
	freetype-2_7_1:1.1.115.3
	freetype-2_3_12:1.1.115.2
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.1.115.1
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.1
	freetype:1.1.115;
locks; strict;
comment	@ * @;


1.3
date	2017.04.15.19.21.45;	author tg;	state Exp;
branches;
next	1.2;
commitid	10058F2723111C7BEE2;

1.2
date	2008.06.12.20.54.38;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	10048518C1E44F62885;

1.1
date	2006.06.29.18.37.51;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.115.1;
next	;
commitid	10044A41DBD6368BED5;

1.1.1.1
date	2008.02.26.19.52.26;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.37.28;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.115.1
date	2006.06.29.18.37.51;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41DBD6368BED5;

1.1.115.2
date	2013.08.06.19.12.23;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10052014A9975CEFD1D;

1.1.115.3
date	2017.04.15.15.42.07;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.3
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  otvcommn.c                                                             */
/*                                                                         */
/*    OpenType common tables validation (body).                            */
/*                                                                         */
/*  Copyright 2004-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include "otvcommn.h"


  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_otvcommon


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                       COVERAGE TABLE                          *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  FT_LOCAL_DEF( void )
  otv_Coverage_validate( FT_Bytes       table,
                         OTV_Validator  otvalid,
                         FT_Int         expected_count )
  {
    FT_Bytes  p = table;
    FT_UInt   CoverageFormat;
    FT_UInt   total = 0;


    OTV_NAME_ENTER( "Coverage" );

    OTV_LIMIT_CHECK( 4 );
    CoverageFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", CoverageFormat ));

    switch ( CoverageFormat )
    {
    case 1:     /* CoverageFormat1 */
      {
        FT_UInt  GlyphCount;
        FT_UInt  i;


        GlyphCount = FT_NEXT_USHORT( p );

        OTV_TRACE(( " (GlyphCount = %d)\n", GlyphCount ));

        OTV_LIMIT_CHECK( GlyphCount * 2 );        /* GlyphArray */

        for ( i = 0; i < GlyphCount; i++ )
        {
          FT_UInt  gid;


          gid = FT_NEXT_USHORT( p );
          if ( gid >= otvalid->glyph_count )
            FT_INVALID_GLYPH_ID;
        }

        total = GlyphCount;
      }
      break;

    case 2:     /* CoverageFormat2 */
      {
        FT_UInt  n, RangeCount;
        FT_UInt  Start, End, StartCoverageIndex, last = 0;


        RangeCount = FT_NEXT_USHORT( p );

        OTV_TRACE(( " (RangeCount = %d)\n", RangeCount ));

        OTV_LIMIT_CHECK( RangeCount * 6 );

        /* RangeRecord */
        for ( n = 0; n < RangeCount; n++ )
        {
          Start              = FT_NEXT_USHORT( p );
          End                = FT_NEXT_USHORT( p );
          StartCoverageIndex = FT_NEXT_USHORT( p );

          if ( Start > End || StartCoverageIndex != total )
            FT_INVALID_DATA;

          if ( End >= otvalid->glyph_count )
            FT_INVALID_GLYPH_ID;

          if ( n > 0 && Start <= last )
            FT_INVALID_DATA;

          total += End - Start + 1;
          last   = End;
        }
      }
      break;

    default:
      FT_INVALID_FORMAT;
    }

    /* Generally, a coverage table offset has an associated count field.  */
    /* The number of glyphs in the table should match this field.  If     */
    /* there is no associated count, a value of -1 tells us not to check. */
    if ( expected_count != -1 && (FT_UInt)expected_count != total )
      FT_INVALID_DATA;

    OTV_EXIT;
  }


  FT_LOCAL_DEF( FT_UInt )
  otv_Coverage_get_first( FT_Bytes  table )
  {
    FT_Bytes  p = table;


    p += 4;     /* skip CoverageFormat and Glyph/RangeCount */

    return FT_NEXT_USHORT( p );
  }


  FT_LOCAL_DEF( FT_UInt )
  otv_Coverage_get_last( FT_Bytes  table )
  {
    FT_Bytes  p = table;
    FT_UInt   CoverageFormat = FT_NEXT_USHORT( p );
    FT_UInt   count          = FT_NEXT_USHORT( p );     /* Glyph/RangeCount */
    FT_UInt   result = 0;


    switch ( CoverageFormat )
    {
    case 1:
      p += ( count - 1 ) * 2;
      result = FT_NEXT_USHORT( p );
      break;

    case 2:
      p += ( count - 1 ) * 6 + 2;
      result = FT_NEXT_USHORT( p );
      break;

    default:
      ;
    }

    return result;
  }


  FT_LOCAL_DEF( FT_UInt )
  otv_Coverage_get_count( FT_Bytes  table )
  {
    FT_Bytes  p              = table;
    FT_UInt   CoverageFormat = FT_NEXT_USHORT( p );
    FT_UInt   count          = FT_NEXT_USHORT( p );     /* Glyph/RangeCount */
    FT_UInt   result         = 0;


    switch ( CoverageFormat )
    {
    case 1:
      return count;

    case 2:
      {
        FT_UInt  Start, End;


        for ( ; count > 0; count-- )
        {
          Start = FT_NEXT_USHORT( p );
          End   = FT_NEXT_USHORT( p );
          p    += 2;                    /* skip StartCoverageIndex */

          result += End - Start + 1;
        }
      }
      break;

    default:
      ;
    }

    return result;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                   CLASS DEFINITION TABLE                      *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  FT_LOCAL_DEF( void )
  otv_ClassDef_validate( FT_Bytes       table,
                         OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   ClassFormat;


    OTV_NAME_ENTER( "ClassDef" );

    OTV_LIMIT_CHECK( 4 );
    ClassFormat = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (format %d)\n", ClassFormat ));

    switch ( ClassFormat )
    {
    case 1:     /* ClassDefFormat1 */
      {
        FT_UInt  StartGlyph;
        FT_UInt  GlyphCount;


        OTV_LIMIT_CHECK( 4 );

        StartGlyph = FT_NEXT_USHORT( p );
        GlyphCount = FT_NEXT_USHORT( p );

        OTV_TRACE(( " (GlyphCount = %d)\n", GlyphCount ));

        OTV_LIMIT_CHECK( GlyphCount * 2 );    /* ClassValueArray */

        if ( StartGlyph + GlyphCount - 1 >= otvalid->glyph_count )
          FT_INVALID_GLYPH_ID;
      }
      break;

    case 2:     /* ClassDefFormat2 */
      {
        FT_UInt  n, ClassRangeCount;
        FT_UInt  Start, End, last = 0;


        ClassRangeCount = FT_NEXT_USHORT( p );

        OTV_TRACE(( " (ClassRangeCount = %d)\n", ClassRangeCount ));

        OTV_LIMIT_CHECK( ClassRangeCount * 6 );

        /* ClassRangeRecord */
        for ( n = 0; n < ClassRangeCount; n++ )
        {
          Start = FT_NEXT_USHORT( p );
          End   = FT_NEXT_USHORT( p );
          p    += 2;                        /* skip Class */

          if ( Start > End || ( n > 0 && Start <= last ) )
            FT_INVALID_DATA;

          if ( End >= otvalid->glyph_count )
            FT_INVALID_GLYPH_ID;

          last = End;
        }
      }
      break;

    default:
      FT_INVALID_FORMAT;
    }

    /* no need to check glyph indices used as input to class definition   */
    /* tables since even invalid glyph indices return a meaningful result */

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                      DEVICE TABLE                             *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  FT_LOCAL_DEF( void )
  otv_Device_validate( FT_Bytes       table,
                       OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   StartSize, EndSize, DeltaFormat, count;


    OTV_NAME_ENTER( "Device" );

    OTV_LIMIT_CHECK( 8 );
    StartSize   = FT_NEXT_USHORT( p );
    EndSize     = FT_NEXT_USHORT( p );
    DeltaFormat = FT_NEXT_USHORT( p );

    if ( DeltaFormat < 1 || DeltaFormat > 3 )
      FT_INVALID_FORMAT;

    if ( EndSize < StartSize )
      FT_INVALID_DATA;

    count = EndSize - StartSize + 1;
    OTV_LIMIT_CHECK( ( 1 << DeltaFormat ) * count / 8 );  /* DeltaValue */

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                         LOOKUPS                               *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* uses otvalid->type_count */
  /* uses otvalid->type_funcs */

  FT_LOCAL_DEF( void )
  otv_Lookup_validate( FT_Bytes       table,
                       OTV_Validator  otvalid )
  {
    FT_Bytes           p = table;
    FT_UInt            LookupType, SubTableCount;
    OTV_Validate_Func  validate;


    OTV_NAME_ENTER( "Lookup" );

    OTV_LIMIT_CHECK( 6 );
    LookupType    = FT_NEXT_USHORT( p );
    p            += 2;                      /* skip LookupFlag */
    SubTableCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (type %d)\n", LookupType ));

    if ( LookupType == 0 || LookupType > otvalid->type_count )
      FT_INVALID_DATA;

    validate = otvalid->type_funcs[LookupType - 1];

    OTV_TRACE(( " (SubTableCount = %d)\n", SubTableCount ));

    OTV_LIMIT_CHECK( SubTableCount * 2 );

    /* SubTable */
    for ( ; SubTableCount > 0; SubTableCount-- )
      validate( table + FT_NEXT_USHORT( p ), otvalid );

    OTV_EXIT;
  }


  /* uses valid->lookup_count */

  FT_LOCAL_DEF( void )
  otv_LookupList_validate( FT_Bytes       table,
                           OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   LookupCount;


    OTV_NAME_ENTER( "LookupList" );

    OTV_LIMIT_CHECK( 2 );
    LookupCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (LookupCount = %d)\n", LookupCount ));

    OTV_LIMIT_CHECK( LookupCount * 2 );

    otvalid->lookup_count = LookupCount;

    /* Lookup */
    for ( ; LookupCount > 0; LookupCount-- )
      otv_Lookup_validate( table + FT_NEXT_USHORT( p ), otvalid );

    OTV_EXIT;
  }


  static FT_UInt
  otv_LookupList_get_count( FT_Bytes  table )
  {
    return FT_NEXT_USHORT( table );
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                        FEATURES                               *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /* uses otvalid->lookup_count */

  FT_LOCAL_DEF( void )
  otv_Feature_validate( FT_Bytes       table,
                        OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   LookupCount;


    OTV_NAME_ENTER( "Feature" );

    OTV_LIMIT_CHECK( 4 );
    p           += 2;                   /* skip FeatureParams (unused) */
    LookupCount  = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (LookupCount = %d)\n", LookupCount ));

    OTV_LIMIT_CHECK( LookupCount * 2 );

    /* LookupListIndex */
    for ( ; LookupCount > 0; LookupCount-- )
      if ( FT_NEXT_USHORT( p ) >= otvalid->lookup_count )
        FT_INVALID_DATA;

    OTV_EXIT;
  }


  static FT_UInt
  otv_Feature_get_count( FT_Bytes  table )
  {
    return FT_NEXT_USHORT( table );
  }


  /* sets otvalid->lookup_count */

  FT_LOCAL_DEF( void )
  otv_FeatureList_validate( FT_Bytes       table,
                            FT_Bytes       lookups,
                            OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   FeatureCount;


    OTV_NAME_ENTER( "FeatureList" );

    OTV_LIMIT_CHECK( 2 );
    FeatureCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (FeatureCount = %d)\n", FeatureCount ));

    OTV_LIMIT_CHECK( FeatureCount * 2 );

    otvalid->lookup_count = otv_LookupList_get_count( lookups );

    /* FeatureRecord */
    for ( ; FeatureCount > 0; FeatureCount-- )
    {
      p += 4;       /* skip FeatureTag */

      /* Feature */
      otv_Feature_validate( table + FT_NEXT_USHORT( p ), otvalid );
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                       LANGUAGE SYSTEM                         *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/


  /* uses otvalid->extra1 (number of features) */

  FT_LOCAL_DEF( void )
  otv_LangSys_validate( FT_Bytes       table,
                        OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   ReqFeatureIndex;
    FT_UInt   FeatureCount;


    OTV_NAME_ENTER( "LangSys" );

    OTV_LIMIT_CHECK( 6 );
    p              += 2;                    /* skip LookupOrder (unused) */
    ReqFeatureIndex = FT_NEXT_USHORT( p );
    FeatureCount    = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (ReqFeatureIndex = %d)\n", ReqFeatureIndex ));
    OTV_TRACE(( " (FeatureCount = %d)\n",    FeatureCount    ));

    if ( ReqFeatureIndex != 0xFFFFU && ReqFeatureIndex >= otvalid->extra1 )
      FT_INVALID_DATA;

    OTV_LIMIT_CHECK( FeatureCount * 2 );

    /* FeatureIndex */
    for ( ; FeatureCount > 0; FeatureCount-- )
      if ( FT_NEXT_USHORT( p ) >= otvalid->extra1 )
        FT_INVALID_DATA;

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                           SCRIPTS                             *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  FT_LOCAL_DEF( void )
  otv_Script_validate( FT_Bytes       table,
                       OTV_Validator  otvalid )
  {
    FT_UInt   DefaultLangSys, LangSysCount;
    FT_Bytes  p = table;


    OTV_NAME_ENTER( "Script" );

    OTV_LIMIT_CHECK( 4 );
    DefaultLangSys = FT_NEXT_USHORT( p );
    LangSysCount   = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (LangSysCount = %d)\n", LangSysCount ));

    if ( DefaultLangSys != 0 )
      otv_LangSys_validate( table + DefaultLangSys, otvalid );

    OTV_LIMIT_CHECK( LangSysCount * 6 );

    /* LangSysRecord */
    for ( ; LangSysCount > 0; LangSysCount-- )
    {
      p += 4;       /* skip LangSysTag */

      /* LangSys */
      otv_LangSys_validate( table + FT_NEXT_USHORT( p ), otvalid );
    }

    OTV_EXIT;
  }


  /* sets otvalid->extra1 (number of features) */

  FT_LOCAL_DEF( void )
  otv_ScriptList_validate( FT_Bytes       table,
                           FT_Bytes       features,
                           OTV_Validator  otvalid )
  {
    FT_UInt   ScriptCount;
    FT_Bytes  p = table;


    OTV_NAME_ENTER( "ScriptList" );

    OTV_LIMIT_CHECK( 2 );
    ScriptCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (ScriptCount = %d)\n", ScriptCount ));

    OTV_LIMIT_CHECK( ScriptCount * 6 );

    otvalid->extra1 = otv_Feature_get_count( features );

    /* ScriptRecord */
    for ( ; ScriptCount > 0; ScriptCount-- )
    {
      p += 4;       /* skip ScriptTag */

      otv_Script_validate( table + FT_NEXT_USHORT( p ), otvalid ); /* Script */
    }

    OTV_EXIT;
  }


  /*************************************************************************/
  /*************************************************************************/
  /*****                                                               *****/
  /*****                      UTILITY FUNCTIONS                        *****/
  /*****                                                               *****/
  /*************************************************************************/
  /*************************************************************************/

  /*
     u:   uint16
     ux:  unit16 [x]

     s:   struct
     sx:  struct [x]
     sxy: struct [x], using external y count

     x:   uint16 x

     C:   Coverage

     O:   Offset
     On:  Offset (NULL)
     Ox:  Offset [x]
     Onx: Offset (NULL) [x]
  */

  FT_LOCAL_DEF( void )
  otv_x_Ox( FT_Bytes       table,
            OTV_Validator  otvalid )
  {
    FT_Bytes           p = table;
    FT_UInt            Count;
    OTV_Validate_Func  func;


    OTV_ENTER;

    OTV_LIMIT_CHECK( 2 );
    Count = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (Count = %d)\n", Count ));

    OTV_LIMIT_CHECK( Count * 2 );

    otvalid->nesting_level++;
    func = otvalid->func[otvalid->nesting_level];

    for ( ; Count > 0; Count-- )
      func( table + FT_NEXT_USHORT( p ), otvalid );

    otvalid->nesting_level--;

    OTV_EXIT;
  }


  FT_LOCAL_DEF( void )
  otv_u_C_x_Ox( FT_Bytes       table,
                OTV_Validator  otvalid )
  {
    FT_Bytes           p = table;
    FT_UInt            Count, Coverage;
    OTV_Validate_Func  func;


    OTV_ENTER;

    p += 2;     /* skip Format */

    OTV_LIMIT_CHECK( 4 );
    Coverage = FT_NEXT_USHORT( p );
    Count    = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (Count = %d)\n", Count ));

    otv_Coverage_validate( table + Coverage, otvalid, (FT_Int)Count );

    OTV_LIMIT_CHECK( Count * 2 );

    otvalid->nesting_level++;
    func = otvalid->func[otvalid->nesting_level];

    for ( ; Count > 0; Count-- )
      func( table + FT_NEXT_USHORT( p ), otvalid );

    otvalid->nesting_level--;

    OTV_EXIT;
  }


  /* uses otvalid->extra1 (if > 0: array value limit) */

  FT_LOCAL_DEF( void )
  otv_x_ux( FT_Bytes       table,
            OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   Count;


    OTV_ENTER;

    OTV_LIMIT_CHECK( 2 );
    Count = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (Count = %d)\n", Count ));

    OTV_LIMIT_CHECK( Count * 2 );

    if ( otvalid->extra1 )
    {
      for ( ; Count > 0; Count-- )
        if ( FT_NEXT_USHORT( p ) >= otvalid->extra1 )
          FT_INVALID_DATA;
    }

    OTV_EXIT;
  }


  /* `ux' in the function's name is not really correct since only x-1 */
  /* elements are tested                                              */

  /* uses otvalid->extra1 (array value limit) */

  FT_LOCAL_DEF( void )
  otv_x_y_ux_sy( FT_Bytes       table,
                 OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   Count1, Count2;


    OTV_ENTER;

    OTV_LIMIT_CHECK( 4 );
    Count1 = FT_NEXT_USHORT( p );
    Count2 = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (Count1 = %d)\n", Count1 ));
    OTV_TRACE(( " (Count2 = %d)\n", Count2 ));

    if ( Count1 == 0 )
      FT_INVALID_DATA;

    OTV_LIMIT_CHECK( ( Count1 - 1 ) * 2 + Count2 * 4 );
    p += ( Count1 - 1 ) * 2;

    for ( ; Count2 > 0; Count2-- )
    {
      if ( FT_NEXT_USHORT( p ) >= Count1 )
        FT_INVALID_DATA;

      if ( FT_NEXT_USHORT( p ) >= otvalid->extra1 )
        FT_INVALID_DATA;
    }

    OTV_EXIT;
  }


  /* `uy' in the function's name is not really correct since only y-1 */
  /* elements are tested                                              */

  /* uses otvalid->extra1 (array value limit) */

  FT_LOCAL_DEF( void )
  otv_x_ux_y_uy_z_uz_p_sp( FT_Bytes       table,
                           OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   BacktrackCount, InputCount, LookaheadCount;
    FT_UInt   Count;


    OTV_ENTER;

    OTV_LIMIT_CHECK( 2 );
    BacktrackCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (BacktrackCount = %d)\n", BacktrackCount ));

    OTV_LIMIT_CHECK( BacktrackCount * 2 + 2 );
    p += BacktrackCount * 2;

    InputCount = FT_NEXT_USHORT( p );
    if ( InputCount == 0 )
      FT_INVALID_DATA;

    OTV_TRACE(( " (InputCount = %d)\n", InputCount ));

    OTV_LIMIT_CHECK( InputCount * 2 );
    p += ( InputCount - 1 ) * 2;

    LookaheadCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (LookaheadCount = %d)\n", LookaheadCount ));

    OTV_LIMIT_CHECK( LookaheadCount * 2 + 2 );
    p += LookaheadCount * 2;

    Count = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (Count = %d)\n", Count ));

    OTV_LIMIT_CHECK( Count * 4 );

    for ( ; Count > 0; Count-- )
    {
      if ( FT_NEXT_USHORT( p ) >= InputCount )
        FT_INVALID_DATA;

      if ( FT_NEXT_USHORT( p ) >= otvalid->extra1 )
        FT_INVALID_DATA;
    }

    OTV_EXIT;
  }


  /* sets otvalid->extra1 (valid->lookup_count) */

  FT_LOCAL_DEF( void )
  otv_u_O_O_x_Onx( FT_Bytes       table,
                   OTV_Validator  otvalid )
  {
    FT_Bytes           p = table;
    FT_UInt            Coverage, ClassDef, ClassSetCount;
    OTV_Validate_Func  func;


    OTV_ENTER;

    p += 2;     /* skip Format */

    OTV_LIMIT_CHECK( 6 );
    Coverage      = FT_NEXT_USHORT( p );
    ClassDef      = FT_NEXT_USHORT( p );
    ClassSetCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (ClassSetCount = %d)\n", ClassSetCount ));

    otv_Coverage_validate( table + Coverage, otvalid, -1 );
    otv_ClassDef_validate( table + ClassDef, otvalid );

    OTV_LIMIT_CHECK( ClassSetCount * 2 );

    otvalid->nesting_level++;
    func          = otvalid->func[otvalid->nesting_level];
    otvalid->extra1 = otvalid->lookup_count;

    for ( ; ClassSetCount > 0; ClassSetCount-- )
    {
      FT_UInt  offset = FT_NEXT_USHORT( p );


      if ( offset )
        func( table + offset, otvalid );
    }

    otvalid->nesting_level--;

    OTV_EXIT;
  }


  /* uses otvalid->lookup_count */

  FT_LOCAL_DEF( void )
  otv_u_x_y_Ox_sy( FT_Bytes       table,
                   OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   GlyphCount, Count, count1;


    OTV_ENTER;

    p += 2;     /* skip Format */

    OTV_LIMIT_CHECK( 4 );
    GlyphCount = FT_NEXT_USHORT( p );
    Count      = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (GlyphCount = %d)\n", GlyphCount ));
    OTV_TRACE(( " (Count = %d)\n",      Count      ));

    OTV_LIMIT_CHECK( GlyphCount * 2 + Count * 4 );

    for ( count1 = GlyphCount; count1 > 0; count1-- )
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );

    for ( ; Count > 0; Count-- )
    {
      if ( FT_NEXT_USHORT( p ) >= GlyphCount )
        FT_INVALID_DATA;

      if ( FT_NEXT_USHORT( p ) >= otvalid->lookup_count )
        FT_INVALID_DATA;
    }

    OTV_EXIT;
  }


  /* sets otvalid->extra1 (valid->lookup_count)    */

  FT_LOCAL_DEF( void )
  otv_u_O_O_O_O_x_Onx( FT_Bytes       table,
                       OTV_Validator  otvalid )
  {
    FT_Bytes           p = table;
    FT_UInt            Coverage;
    FT_UInt            BacktrackClassDef, InputClassDef, LookaheadClassDef;
    FT_UInt            ChainClassSetCount;
    OTV_Validate_Func  func;


    OTV_ENTER;

    p += 2;     /* skip Format */

    OTV_LIMIT_CHECK( 10 );
    Coverage           = FT_NEXT_USHORT( p );
    BacktrackClassDef  = FT_NEXT_USHORT( p );
    InputClassDef      = FT_NEXT_USHORT( p );
    LookaheadClassDef  = FT_NEXT_USHORT( p );
    ChainClassSetCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (ChainClassSetCount = %d)\n", ChainClassSetCount ));

    otv_Coverage_validate( table + Coverage, otvalid, -1 );

    otv_ClassDef_validate( table + BacktrackClassDef,  otvalid );
    otv_ClassDef_validate( table + InputClassDef, otvalid );
    otv_ClassDef_validate( table + LookaheadClassDef, otvalid );

    OTV_LIMIT_CHECK( ChainClassSetCount * 2 );

    otvalid->nesting_level++;
    func          = otvalid->func[otvalid->nesting_level];
    otvalid->extra1 = otvalid->lookup_count;

    for ( ; ChainClassSetCount > 0; ChainClassSetCount-- )
    {
      FT_UInt  offset = FT_NEXT_USHORT( p );


      if ( offset )
        func( table + offset, otvalid );
    }

    otvalid->nesting_level--;

    OTV_EXIT;
  }


  /* uses otvalid->lookup_count */

  FT_LOCAL_DEF( void )
  otv_u_x_Ox_y_Oy_z_Oz_p_sp( FT_Bytes       table,
                             OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   BacktrackGlyphCount, InputGlyphCount, LookaheadGlyphCount;
    FT_UInt   count1, count2;


    OTV_ENTER;

    p += 2;     /* skip Format */

    OTV_LIMIT_CHECK( 2 );
    BacktrackGlyphCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (BacktrackGlyphCount = %d)\n", BacktrackGlyphCount ));

    OTV_LIMIT_CHECK( BacktrackGlyphCount * 2 + 2 );

    for ( ; BacktrackGlyphCount > 0; BacktrackGlyphCount-- )
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );

    InputGlyphCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (InputGlyphCount = %d)\n", InputGlyphCount ));

    OTV_LIMIT_CHECK( InputGlyphCount * 2 + 2 );

    for ( count1 = InputGlyphCount; count1 > 0; count1-- )
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );

    LookaheadGlyphCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (LookaheadGlyphCount = %d)\n", LookaheadGlyphCount ));

    OTV_LIMIT_CHECK( LookaheadGlyphCount * 2 + 2 );

    for ( ; LookaheadGlyphCount > 0; LookaheadGlyphCount-- )
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );

    count2 = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (Count = %d)\n", count2 ));

    OTV_LIMIT_CHECK( count2 * 4 );

    for ( ; count2 > 0; count2-- )
    {
      if ( FT_NEXT_USHORT( p ) >= InputGlyphCount )
        FT_INVALID_DATA;

      if ( FT_NEXT_USHORT( p ) >= otvalid->lookup_count )
        FT_INVALID_DATA;
    }

    OTV_EXIT;
  }


  FT_LOCAL_DEF( FT_UInt )
  otv_GSUBGPOS_get_Lookup_count( FT_Bytes  table )
  {
    FT_Bytes  p = table + 8;


    return otv_LookupList_get_count( table + FT_NEXT_USHORT( p ) );
  }


  FT_LOCAL_DEF( FT_UInt )
  otv_GSUBGPOS_have_MarkAttachmentType_flag( FT_Bytes  table )
  {
    FT_Bytes  p, lookup;
    FT_UInt   count;


    if ( !table )
      return 0;

    /* LookupList */
    p      = table + 8;
    table += FT_NEXT_USHORT( p );

    /* LookupCount */
    p     = table;
    count = FT_NEXT_USHORT( p );

    for ( ; count > 0; count-- )
    {
      FT_Bytes  oldp;


      /* Lookup */
      lookup = table + FT_NEXT_USHORT( p );

      oldp = p;

      /* LookupFlag */
      p = lookup + 2;
      if ( FT_NEXT_USHORT( p ) & 0xFF00U )
        return 1;

      p = oldp;
    }

    return 0;
  }


/* END */
@


1.2
log
@Merge freetype 2.3.6
@
text
@d7 1
a7 1
/*  Copyright 2004, 2005, 2006, 2007 by                                    */
d42 1
a42 1
                         OTV_Validator  valid,
d71 1
a71 1
        for ( i = 0; i < GlyphCount; ++i )
d77 1
a77 1
          if ( gid >= valid->glyph_count )
d107 1
a107 1
          if ( End >= valid->glyph_count )
d222 1
a222 1
                         OTV_Validator  valid )
d252 1
a252 1
        if ( StartGlyph + GlyphCount - 1 >= valid->glyph_count )
d279 1
a279 1
          if ( End >= valid->glyph_count )
d308 1
a308 1
                       OTV_Validator  valid )
d342 2
a343 2
  /* uses valid->type_count */
  /* uses valid->type_funcs */
d347 1
a347 1
                       OTV_Validator  valid )
d363 1
a363 1
    if ( LookupType == 0 || LookupType > valid->type_count )
d366 1
a366 1
    validate = valid->type_funcs[LookupType - 1];
d374 1
a374 1
      validate( table + FT_NEXT_USHORT( p ), valid );
d384 1
a384 1
                           OTV_Validator  valid )
d399 1
a399 1
    valid->lookup_count = LookupCount;
d403 1
a403 1
      otv_Lookup_validate( table + FT_NEXT_USHORT( p ), valid );
d424 1
a424 1
  /* uses valid->lookup_count */
d428 1
a428 1
                        OTV_Validator  valid )
d446 1
a446 1
      if ( FT_NEXT_USHORT( p ) >= valid->lookup_count )
d460 1
a460 1
  /* sets valid->lookup_count */
d465 1
a465 1
                            OTV_Validator  valid )
d480 1
a480 1
    valid->lookup_count = otv_LookupList_get_count( lookups );
d488 1
a488 1
      otv_Feature_validate( table + FT_NEXT_USHORT( p ), valid );
d504 1
a504 1
  /* uses valid->extra1 (number of features) */
d508 1
a508 1
                        OTV_Validator  valid )
d525 1
a525 1
    if ( ReqFeatureIndex != 0xFFFFU && ReqFeatureIndex >= valid->extra1 )
d532 1
a532 1
      if ( FT_NEXT_USHORT( p ) >= valid->extra1 )
d549 1
a549 1
                       OTV_Validator  valid )
d564 1
a564 1
      otv_LangSys_validate( table + DefaultLangSys, valid );
d574 1
a574 1
      otv_LangSys_validate( table + FT_NEXT_USHORT( p ), valid );
d581 1
a581 1
  /* sets valid->extra1 (number of features) */
d586 1
a586 1
                           OTV_Validator  valid )
d601 1
a601 1
    valid->extra1 = otv_Feature_get_count( features );
d608 1
a608 1
      otv_Script_validate( table + FT_NEXT_USHORT( p ), valid ); /* Script */
d643 1
a643 1
            OTV_Validator  valid )
d659 2
a660 2
    valid->nesting_level++;
    func = valid->func[valid->nesting_level];
d663 1
a663 1
      func( table + FT_NEXT_USHORT( p ), valid );
d665 1
a665 1
    valid->nesting_level--;
d673 1
a673 1
                OTV_Validator  valid )
d690 1
a690 1
    otv_Coverage_validate( table + Coverage, valid, Count );
d694 2
a695 2
    valid->nesting_level++;
    func = valid->func[valid->nesting_level];
d698 1
a698 1
      func( table + FT_NEXT_USHORT( p ), valid );
d700 1
a700 1
    valid->nesting_level--;
d706 1
a706 1
  /* uses valid->extra1 (if > 0: array value limit) */
d710 1
a710 1
            OTV_Validator  valid )
d725 1
a725 1
    if ( valid->extra1 )
d728 1
a728 1
        if ( FT_NEXT_USHORT( p ) >= valid->extra1 )
d739 1
a739 1
  /* uses valid->extra1 (array value limit) */
d743 1
a743 1
                 OTV_Validator  valid )
d769 1
a769 1
      if ( FT_NEXT_USHORT( p ) >= valid->extra1 )
d780 1
a780 1
  /* uses valid->extra1 (array value limit) */
d784 1
a784 1
                           OTV_Validator  valid )
d828 1
a828 1
      if ( FT_NEXT_USHORT( p ) >= valid->extra1 )
d836 1
a836 1
  /* sets valid->extra1 (valid->lookup_count) */
d840 1
a840 1
                   OTV_Validator  valid )
d858 2
a859 2
    otv_Coverage_validate( table + Coverage, valid, -1 );
    otv_ClassDef_validate( table + ClassDef, valid );
d863 3
a865 3
    valid->nesting_level++;
    func          = valid->func[valid->nesting_level];
    valid->extra1 = valid->lookup_count;
d873 1
a873 1
        func( table + offset, valid );
d876 1
a876 1
    valid->nesting_level--;
d882 1
a882 1
  /* uses valid->lookup_count */
d886 1
a886 1
                   OTV_Validator  valid )
d906 1
a906 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d913 1
a913 1
      if ( FT_NEXT_USHORT( p ) >= valid->lookup_count )
d921 1
a921 1
  /* sets valid->extra1 (valid->lookup_count)    */
d925 1
a925 1
                       OTV_Validator  valid )
d947 1
a947 1
    otv_Coverage_validate( table + Coverage, valid, -1 );
d949 3
a951 3
    otv_ClassDef_validate( table + BacktrackClassDef,  valid );
    otv_ClassDef_validate( table + InputClassDef, valid );
    otv_ClassDef_validate( table + LookaheadClassDef, valid );
d955 3
a957 3
    valid->nesting_level++;
    func          = valid->func[valid->nesting_level];
    valid->extra1 = valid->lookup_count;
d965 1
a965 1
        func( table + offset, valid );
d968 1
a968 1
    valid->nesting_level--;
d974 1
a974 1
  /* uses valid->lookup_count */
d978 1
a978 1
                             OTV_Validator  valid )
d997 1
a997 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d1006 1
a1006 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d1015 1
a1015 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d1028 1
a1028 1
      if ( FT_NEXT_USHORT( p ) >= valid->lookup_count )
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 2004, 2005, 2006 by                                          */
d42 2
a43 1
                         OTV_Validator  valid )
d47 1
d62 1
d70 12
d88 1
a88 1
        FT_UInt  Start, End, StartCoverageIndex, total = 0, last = 0;
d107 3
d123 5
a127 2
    /* no need to check glyph indices used as input to coverage tables */
    /* since even invalid glyph indices return a meaningful result     */
d239 1
d243 1
a243 3
        p += 2;         /* skip StartGlyph */

        OTV_LIMIT_CHECK( 2 );
d245 1
d251 3
d279 3
d321 4
a324 1
    if ( DeltaFormat < 1 || DeltaFormat > 3 || EndSize < StartSize )
d363 1
a363 1
    if ( LookupType == 0 || LookupType >= valid->type_count )
d690 1
a690 1
    otv_Coverage_validate( table + Coverage, valid );
d762 1
d858 1
a858 1
    otv_Coverage_validate( table + Coverage, valid );
d906 1
a906 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid );
d947 1
a947 1
    otv_Coverage_validate( table + Coverage, valid );
d997 1
a997 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid );
d1006 1
a1006 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid );
d1015 1
a1015 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid );
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d7 1
a7 1
/*  Copyright 2004, 2005, 2006, 2007 by                                    */
d42 1
a42 2
                         OTV_Validator  valid,
                         FT_Int         expected_count )
a45 1
    FT_UInt   total = 0;
a59 1
        FT_UInt  i;
a66 12

        for ( i = 0; i < GlyphCount; ++i )
        {
          FT_UInt  gid;


          gid = FT_NEXT_USHORT( p );
          if ( gid >= valid->glyph_count )
            FT_INVALID_GLYPH_ID;
        }

        total = GlyphCount;
d73 1
a73 1
        FT_UInt  Start, End, StartCoverageIndex, last = 0;
a91 3
          if ( End >= valid->glyph_count )
            FT_INVALID_GLYPH_ID;

d105 2
a106 5
    /* Generally, a coverage table offset has an associated count field.  */
    /* The number of glyphs in the table should match this field.  If     */
    /* there is no associated count, a value of -1 tells us not to check. */
    if ( expected_count != -1 && (FT_UInt)expected_count != total )
      FT_INVALID_DATA;
a217 1
        FT_UInt  StartGlyph;
d221 3
a223 1
        OTV_LIMIT_CHECK( 4 );
a224 1
        StartGlyph = FT_NEXT_USHORT( p );
a229 3

        if ( StartGlyph + GlyphCount - 1 >= valid->glyph_count )
          FT_INVALID_GLYPH_ID;
a254 3
          if ( End >= valid->glyph_count )
            FT_INVALID_GLYPH_ID;

d294 1
a294 4
    if ( DeltaFormat < 1 || DeltaFormat > 3 )
      FT_INVALID_FORMAT;

    if ( EndSize < StartSize )
d333 1
a333 1
    if ( LookupType == 0 || LookupType > valid->type_count )
d660 1
a660 1
    otv_Coverage_validate( table + Coverage, valid, Count );
a731 1
    p += ( Count1 - 1 ) * 2;
d827 1
a827 1
    otv_Coverage_validate( table + Coverage, valid, -1 );
d875 1
a875 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d916 1
a916 1
    otv_Coverage_validate( table + Coverage, valid, -1 );
d966 1
a966 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d975 1
a975 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d984 1
a984 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
@


1.1.115.1
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@@


1.1.115.2
log
@we need newer freetype for advance calculation
@
text
@d7 1
a7 1
/*  Copyright 2004, 2005, 2006, 2007 by                                    */
d42 1
a42 2
                         OTV_Validator  valid,
                         FT_Int         expected_count )
a45 1
    FT_UInt   total = 0;
a59 1
        FT_UInt  i;
a66 12

        for ( i = 0; i < GlyphCount; ++i )
        {
          FT_UInt  gid;


          gid = FT_NEXT_USHORT( p );
          if ( gid >= valid->glyph_count )
            FT_INVALID_GLYPH_ID;
        }

        total = GlyphCount;
d73 1
a73 1
        FT_UInt  Start, End, StartCoverageIndex, last = 0;
a91 3
          if ( End >= valid->glyph_count )
            FT_INVALID_GLYPH_ID;

d105 2
a106 5
    /* Generally, a coverage table offset has an associated count field.  */
    /* The number of glyphs in the table should match this field.  If     */
    /* there is no associated count, a value of -1 tells us not to check. */
    if ( expected_count != -1 && (FT_UInt)expected_count != total )
      FT_INVALID_DATA;
a217 1
        FT_UInt  StartGlyph;
d221 3
a223 1
        OTV_LIMIT_CHECK( 4 );
a224 1
        StartGlyph = FT_NEXT_USHORT( p );
a229 3

        if ( StartGlyph + GlyphCount - 1 >= valid->glyph_count )
          FT_INVALID_GLYPH_ID;
a254 3
          if ( End >= valid->glyph_count )
            FT_INVALID_GLYPH_ID;

d294 1
a294 4
    if ( DeltaFormat < 1 || DeltaFormat > 3 )
      FT_INVALID_FORMAT;

    if ( EndSize < StartSize )
d333 1
a333 1
    if ( LookupType == 0 || LookupType > valid->type_count )
d660 1
a660 1
    otv_Coverage_validate( table + Coverage, valid, Count );
a731 1
    p += ( Count1 - 1 ) * 2;
d827 1
a827 1
    otv_Coverage_validate( table + Coverage, valid, -1 );
d875 1
a875 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d916 1
a916 1
    otv_Coverage_validate( table + Coverage, valid, -1 );
d966 1
a966 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d975 1
a975 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
d984 1
a984 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), valid, -1 );
@


1.1.115.3
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 2004-2016 by                                                 */
d42 1
a42 1
                         OTV_Validator  otvalid,
d71 1
a71 1
        for ( i = 0; i < GlyphCount; i++ )
d77 1
a77 1
          if ( gid >= otvalid->glyph_count )
d107 1
a107 1
          if ( End >= otvalid->glyph_count )
d222 1
a222 1
                         OTV_Validator  otvalid )
d252 1
a252 1
        if ( StartGlyph + GlyphCount - 1 >= otvalid->glyph_count )
d279 1
a279 1
          if ( End >= otvalid->glyph_count )
d308 1
a308 1
                       OTV_Validator  otvalid )
d342 2
a343 2
  /* uses otvalid->type_count */
  /* uses otvalid->type_funcs */
d347 1
a347 1
                       OTV_Validator  otvalid )
d363 1
a363 1
    if ( LookupType == 0 || LookupType > otvalid->type_count )
d366 1
a366 1
    validate = otvalid->type_funcs[LookupType - 1];
d374 1
a374 1
      validate( table + FT_NEXT_USHORT( p ), otvalid );
d384 1
a384 1
                           OTV_Validator  otvalid )
d399 1
a399 1
    otvalid->lookup_count = LookupCount;
d403 1
a403 1
      otv_Lookup_validate( table + FT_NEXT_USHORT( p ), otvalid );
d424 1
a424 1
  /* uses otvalid->lookup_count */
d428 1
a428 1
                        OTV_Validator  otvalid )
d446 1
a446 1
      if ( FT_NEXT_USHORT( p ) >= otvalid->lookup_count )
d460 1
a460 1
  /* sets otvalid->lookup_count */
d465 1
a465 1
                            OTV_Validator  otvalid )
d480 1
a480 1
    otvalid->lookup_count = otv_LookupList_get_count( lookups );
d488 1
a488 1
      otv_Feature_validate( table + FT_NEXT_USHORT( p ), otvalid );
d504 1
a504 1
  /* uses otvalid->extra1 (number of features) */
d508 1
a508 1
                        OTV_Validator  otvalid )
d525 1
a525 1
    if ( ReqFeatureIndex != 0xFFFFU && ReqFeatureIndex >= otvalid->extra1 )
d532 1
a532 1
      if ( FT_NEXT_USHORT( p ) >= otvalid->extra1 )
d549 1
a549 1
                       OTV_Validator  otvalid )
d564 1
a564 1
      otv_LangSys_validate( table + DefaultLangSys, otvalid );
d574 1
a574 1
      otv_LangSys_validate( table + FT_NEXT_USHORT( p ), otvalid );
d581 1
a581 1
  /* sets otvalid->extra1 (number of features) */
d586 1
a586 1
                           OTV_Validator  otvalid )
d601 1
a601 1
    otvalid->extra1 = otv_Feature_get_count( features );
d608 1
a608 1
      otv_Script_validate( table + FT_NEXT_USHORT( p ), otvalid ); /* Script */
d643 1
a643 1
            OTV_Validator  otvalid )
d659 2
a660 2
    otvalid->nesting_level++;
    func = otvalid->func[otvalid->nesting_level];
d663 1
a663 1
      func( table + FT_NEXT_USHORT( p ), otvalid );
d665 1
a665 1
    otvalid->nesting_level--;
d673 1
a673 1
                OTV_Validator  otvalid )
d690 1
a690 1
    otv_Coverage_validate( table + Coverage, otvalid, (FT_Int)Count );
d694 2
a695 2
    otvalid->nesting_level++;
    func = otvalid->func[otvalid->nesting_level];
d698 1
a698 1
      func( table + FT_NEXT_USHORT( p ), otvalid );
d700 1
a700 1
    otvalid->nesting_level--;
d706 1
a706 1
  /* uses otvalid->extra1 (if > 0: array value limit) */
d710 1
a710 1
            OTV_Validator  otvalid )
d725 1
a725 1
    if ( otvalid->extra1 )
d728 1
a728 1
        if ( FT_NEXT_USHORT( p ) >= otvalid->extra1 )
d739 1
a739 1
  /* uses otvalid->extra1 (array value limit) */
d743 1
a743 1
                 OTV_Validator  otvalid )
d769 1
a769 1
      if ( FT_NEXT_USHORT( p ) >= otvalid->extra1 )
d780 1
a780 1
  /* uses otvalid->extra1 (array value limit) */
d784 1
a784 1
                           OTV_Validator  otvalid )
d828 1
a828 1
      if ( FT_NEXT_USHORT( p ) >= otvalid->extra1 )
d836 1
a836 1
  /* sets otvalid->extra1 (valid->lookup_count) */
d840 1
a840 1
                   OTV_Validator  otvalid )
d858 2
a859 2
    otv_Coverage_validate( table + Coverage, otvalid, -1 );
    otv_ClassDef_validate( table + ClassDef, otvalid );
d863 3
a865 3
    otvalid->nesting_level++;
    func          = otvalid->func[otvalid->nesting_level];
    otvalid->extra1 = otvalid->lookup_count;
d873 1
a873 1
        func( table + offset, otvalid );
d876 1
a876 1
    otvalid->nesting_level--;
d882 1
a882 1
  /* uses otvalid->lookup_count */
d886 1
a886 1
                   OTV_Validator  otvalid )
d906 1
a906 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );
d913 1
a913 1
      if ( FT_NEXT_USHORT( p ) >= otvalid->lookup_count )
d921 1
a921 1
  /* sets otvalid->extra1 (valid->lookup_count)    */
d925 1
a925 1
                       OTV_Validator  otvalid )
d947 1
a947 1
    otv_Coverage_validate( table + Coverage, otvalid, -1 );
d949 3
a951 3
    otv_ClassDef_validate( table + BacktrackClassDef,  otvalid );
    otv_ClassDef_validate( table + InputClassDef, otvalid );
    otv_ClassDef_validate( table + LookaheadClassDef, otvalid );
d955 3
a957 3
    otvalid->nesting_level++;
    func          = otvalid->func[otvalid->nesting_level];
    otvalid->extra1 = otvalid->lookup_count;
d965 1
a965 1
        func( table + offset, otvalid );
d968 1
a968 1
    otvalid->nesting_level--;
d974 1
a974 1
  /* uses otvalid->lookup_count */
d978 1
a978 1
                             OTV_Validator  otvalid )
d997 1
a997 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );
d1006 1
a1006 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );
d1015 1
a1015 1
      otv_Coverage_validate( table + FT_NEXT_USHORT( p ), otvalid, -1 );
d1028 1
a1028 1
      if ( FT_NEXT_USHORT( p ) >= otvalid->lookup_count )
@


