head	1.3;
access;
symbols
	freetype-2_7_1:1.1.115.3
	freetype-2_3_12:1.1.115.2
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.1.115.1
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.1
	freetype:1.1.115;
locks; strict;
comment	@ * @;


1.3
date	2017.04.15.19.21.46;	author tg;	state Exp;
branches;
next	1.2;
commitid	10058F2723111C7BEE2;

1.2
date	2008.06.12.20.54.40;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	10048518C1E44F62885;

1.1
date	2006.06.29.18.37.51;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.115.1;
next	;
commitid	10044A41DBD6368BED5;

1.1.1.1
date	2008.02.26.19.52.25;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.37.25;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.115.1
date	2006.06.29.18.37.51;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41DBD6368BED5;

1.1.115.2
date	2013.08.06.19.12.22;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10052014A9975CEFD1D;

1.1.115.3
date	2017.04.15.15.42.07;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.3
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  otvjstf.c                                                              */
/*                                                                         */
/*    OpenType JSTF table validation (body).                               */
/*                                                                         */
/*  Copyright 2004-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include "otvalid.h"
#include "otvcommn.h"
#include "otvgpos.h"


  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_otvjstf


#define JstfPriorityFunc  otv_JstfPriority_validate
#define JstfLookupFunc    otv_GPOS_subtable_validate

  /* uses otvalid->extra1 (GSUB lookup count) */
  /* uses otvalid->extra2 (GPOS lookup count) */
  /* sets otvalid->extra1 (counter)           */

  static void
  otv_JstfPriority_validate( FT_Bytes       table,
                             OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   table_size;
    FT_UInt   gsub_lookup_count, gpos_lookup_count;

    OTV_OPTIONAL_TABLE( ShrinkageEnableGSUB  );
    OTV_OPTIONAL_TABLE( ShrinkageDisableGSUB );
    OTV_OPTIONAL_TABLE( ShrinkageEnableGPOS  );
    OTV_OPTIONAL_TABLE( ShrinkageDisableGPOS );
    OTV_OPTIONAL_TABLE( ExtensionEnableGSUB  );
    OTV_OPTIONAL_TABLE( ExtensionDisableGSUB );
    OTV_OPTIONAL_TABLE( ExtensionEnableGPOS  );
    OTV_OPTIONAL_TABLE( ExtensionDisableGPOS );
    OTV_OPTIONAL_TABLE( ShrinkageJstfMax );
    OTV_OPTIONAL_TABLE( ExtensionJstfMax );


    OTV_ENTER;
    OTV_TRACE(( "JstfPriority table\n" ));

    OTV_LIMIT_CHECK( 20 );

    gsub_lookup_count = otvalid->extra1;
    gpos_lookup_count = otvalid->extra2;

    table_size = 20;

    otvalid->extra1 = gsub_lookup_count;

    OTV_OPTIONAL_OFFSET( ShrinkageEnableGSUB );
    OTV_SIZE_CHECK( ShrinkageEnableGSUB );
    if ( ShrinkageEnableGSUB )
      otv_x_ux( table + ShrinkageEnableGSUB, otvalid );

    OTV_OPTIONAL_OFFSET( ShrinkageDisableGSUB );
    OTV_SIZE_CHECK( ShrinkageDisableGSUB );
    if ( ShrinkageDisableGSUB )
      otv_x_ux( table + ShrinkageDisableGSUB, otvalid );

    otvalid->extra1 = gpos_lookup_count;

    OTV_OPTIONAL_OFFSET( ShrinkageEnableGPOS );
    OTV_SIZE_CHECK( ShrinkageEnableGPOS );
    if ( ShrinkageEnableGPOS )
      otv_x_ux( table + ShrinkageEnableGPOS, otvalid );

    OTV_OPTIONAL_OFFSET( ShrinkageDisableGPOS );
    OTV_SIZE_CHECK( ShrinkageDisableGPOS );
    if ( ShrinkageDisableGPOS )
      otv_x_ux( table + ShrinkageDisableGPOS, otvalid );

    OTV_OPTIONAL_OFFSET( ShrinkageJstfMax );
    OTV_SIZE_CHECK( ShrinkageJstfMax );
    if ( ShrinkageJstfMax )
    {
      /* XXX: check lookup types? */
      OTV_NEST2( JstfMax, JstfLookup );
      OTV_RUN( table + ShrinkageJstfMax, otvalid );
    }

    otvalid->extra1 = gsub_lookup_count;

    OTV_OPTIONAL_OFFSET( ExtensionEnableGSUB );
    OTV_SIZE_CHECK( ExtensionEnableGSUB );
    if ( ExtensionEnableGSUB )
      otv_x_ux( table + ExtensionEnableGSUB, otvalid );

    OTV_OPTIONAL_OFFSET( ExtensionDisableGSUB );
    OTV_SIZE_CHECK( ExtensionDisableGSUB );
    if ( ExtensionDisableGSUB )
      otv_x_ux( table + ExtensionDisableGSUB, otvalid );

    otvalid->extra1 = gpos_lookup_count;

    OTV_OPTIONAL_OFFSET( ExtensionEnableGPOS );
    OTV_SIZE_CHECK( ExtensionEnableGPOS );
    if ( ExtensionEnableGPOS )
      otv_x_ux( table + ExtensionEnableGPOS, otvalid );

    OTV_OPTIONAL_OFFSET( ExtensionDisableGPOS );
    OTV_SIZE_CHECK( ExtensionDisableGPOS );
    if ( ExtensionDisableGPOS )
      otv_x_ux( table + ExtensionDisableGPOS, otvalid );

    OTV_OPTIONAL_OFFSET( ExtensionJstfMax );
    OTV_SIZE_CHECK( ExtensionJstfMax );
    if ( ExtensionJstfMax )
    {
      /* XXX: check lookup types? */
      OTV_NEST2( JstfMax, JstfLookup );
      OTV_RUN( table + ExtensionJstfMax, otvalid );
    }

    otvalid->extra1 = gsub_lookup_count;
    otvalid->extra2 = gpos_lookup_count;

    OTV_EXIT;
  }


  /* sets otvalid->extra (glyph count)               */
  /* sets otvalid->func1 (otv_JstfPriority_validate) */

  static void
  otv_JstfScript_validate( FT_Bytes       table,
                           OTV_Validator  otvalid )
  {
    FT_Bytes  p = table;
    FT_UInt   table_size;
    FT_UInt   JstfLangSysCount;

    OTV_OPTIONAL_TABLE( ExtGlyph );
    OTV_OPTIONAL_TABLE( DefJstfLangSys );


    OTV_NAME_ENTER( "JstfScript" );

    OTV_LIMIT_CHECK( 6 );
    OTV_OPTIONAL_OFFSET( ExtGlyph );
    OTV_OPTIONAL_OFFSET( DefJstfLangSys );
    JstfLangSysCount = FT_NEXT_USHORT( p );

    OTV_TRACE(( " (JstfLangSysCount = %d)\n", JstfLangSysCount ));

    table_size = JstfLangSysCount * 6 + 6;

    OTV_SIZE_CHECK( ExtGlyph );
    if ( ExtGlyph )
    {
      otvalid->extra1 = otvalid->glyph_count;
      OTV_NEST1( ExtenderGlyph );
      OTV_RUN( table + ExtGlyph, otvalid );
    }

    OTV_SIZE_CHECK( DefJstfLangSys );
    if ( DefJstfLangSys )
    {
      OTV_NEST2( JstfLangSys, JstfPriority );
      OTV_RUN( table + DefJstfLangSys, otvalid );
    }

    OTV_LIMIT_CHECK( 6 * JstfLangSysCount );

    /* JstfLangSysRecord */
    OTV_NEST2( JstfLangSys, JstfPriority );
    for ( ; JstfLangSysCount > 0; JstfLangSysCount-- )
    {
      p += 4;       /* skip JstfLangSysTag */

      OTV_RUN( table + FT_NEXT_USHORT( p ), otvalid );
    }

    OTV_EXIT;
  }


  /* sets otvalid->extra1 (GSUB lookup count) */
  /* sets otvalid->extra2 (GPOS lookup count) */
  /* sets otvalid->glyph_count                */

  FT_LOCAL_DEF( void )
  otv_JSTF_validate( FT_Bytes      table,
                     FT_Bytes      gsub,
                     FT_Bytes      gpos,
                     FT_UInt       glyph_count,
                     FT_Validator  ftvalid )
  {
    OTV_ValidatorRec  otvalidrec;
    OTV_Validator     otvalid = &otvalidrec;
    FT_Bytes          p     = table;
    FT_UInt           JstfScriptCount;


    otvalid->root = ftvalid;


    FT_TRACE3(( "validating JSTF table\n" ));
    OTV_INIT;

    OTV_LIMIT_CHECK( 6 );

    if ( FT_NEXT_ULONG( p ) != 0x10000UL )      /* Version */
      FT_INVALID_FORMAT;

    JstfScriptCount = FT_NEXT_USHORT( p );

    FT_TRACE3(( " (JstfScriptCount = %d)\n", JstfScriptCount ));

    OTV_LIMIT_CHECK( JstfScriptCount * 6 );

    if ( gsub )
      otvalid->extra1 = otv_GSUBGPOS_get_Lookup_count( gsub );
    else
      otvalid->extra1 = 0;

    if ( gpos )
      otvalid->extra2 = otv_GSUBGPOS_get_Lookup_count( gpos );
    else
      otvalid->extra2 = 0;

    otvalid->glyph_count = glyph_count;

    /* JstfScriptRecord */
    for ( ; JstfScriptCount > 0; JstfScriptCount-- )
    {
      p += 4;       /* skip JstfScriptTag */

      /* JstfScript */
      otv_JstfScript_validate( table + FT_NEXT_USHORT( p ), otvalid );
    }

    FT_TRACE4(( "\n" ));
  }


/* END */
@


1.2
log
@Merge freetype 2.3.6
@
text
@d7 1
a7 1
/*  Copyright 2004, 2007 by                                                */
d37 3
a39 3
  /* uses valid->extra1 (GSUB lookup count) */
  /* uses valid->extra2 (GPOS lookup count) */
  /* sets valid->extra1 (counter)           */
d43 1
a43 1
                             OTV_Validator  valid )
d66 2
a67 2
    gsub_lookup_count = valid->extra1;
    gpos_lookup_count = valid->extra2;
d71 1
a71 1
    valid->extra1 = gsub_lookup_count;
d76 1
a76 1
      otv_x_ux( table + ShrinkageEnableGSUB, valid );
d81 1
a81 1
      otv_x_ux( table + ShrinkageDisableGSUB, valid );
d83 1
a83 1
    valid->extra1 = gpos_lookup_count;
d88 1
a88 1
      otv_x_ux( table + ShrinkageEnableGPOS, valid );
d93 1
a93 1
      otv_x_ux( table + ShrinkageDisableGPOS, valid );
d101 1
a101 1
      OTV_RUN( table + ShrinkageJstfMax, valid );
d104 1
a104 1
    valid->extra1 = gsub_lookup_count;
d109 1
a109 1
      otv_x_ux( table + ExtensionEnableGSUB, valid );
d114 1
a114 1
      otv_x_ux( table + ExtensionDisableGSUB, valid );
d116 1
a116 1
    valid->extra1 = gpos_lookup_count;
d121 1
a121 1
      otv_x_ux( table + ExtensionEnableGPOS, valid );
d126 1
a126 1
      otv_x_ux( table + ExtensionDisableGPOS, valid );
d134 1
a134 1
      OTV_RUN( table + ExtensionJstfMax, valid );
d137 2
a138 2
    valid->extra1 = gsub_lookup_count;
    valid->extra2 = gpos_lookup_count;
d144 2
a145 2
  /* sets valid->extra (glyph count)               */
  /* sets valid->func1 (otv_JstfPriority_validate) */
d149 1
a149 1
                           OTV_Validator  valid )
d173 1
a173 1
      valid->extra1 = valid->glyph_count;
d175 1
a175 1
      OTV_RUN( table + ExtGlyph, valid );
d182 1
a182 1
      OTV_RUN( table + DefJstfLangSys, valid );
d193 1
a193 1
      OTV_RUN( table + FT_NEXT_USHORT( p ), valid );
d200 3
a202 3
  /* sets valid->extra1 (GSUB lookup count) */
  /* sets valid->extra2 (GPOS lookup count) */
  /* sets valid->glyph_count                */
d211 2
a212 2
    OTV_ValidatorRec  validrec;
    OTV_Validator     valid = &validrec;
d217 2
a218 1
    valid->root = ftvalid;
d235 1
a235 1
      valid->extra1 = otv_GSUBGPOS_get_Lookup_count( gsub );
d237 1
a237 1
      valid->extra1 = 0;
d240 1
a240 1
      valid->extra2 = otv_GSUBGPOS_get_Lookup_count( gpos );
d242 1
a242 1
      valid->extra2 = 0;
d244 1
a244 1
    valid->glyph_count = glyph_count;
d252 1
a252 1
      otv_JstfScript_validate( table + FT_NEXT_USHORT( p ), valid );
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 2004 by                                                      */
d225 1
a225 1
      FT_INVALID_DATA;
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d7 1
a7 1
/*  Copyright 2004, 2007 by                                                */
d225 1
a225 1
      FT_INVALID_FORMAT;
@


1.1.115.1
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@@


1.1.115.2
log
@we need newer freetype for advance calculation
@
text
@d7 1
a7 1
/*  Copyright 2004, 2007 by                                                */
d225 1
a225 1
      FT_INVALID_FORMAT;
@


1.1.115.3
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 2004-2016 by                                                 */
d37 3
a39 3
  /* uses otvalid->extra1 (GSUB lookup count) */
  /* uses otvalid->extra2 (GPOS lookup count) */
  /* sets otvalid->extra1 (counter)           */
d43 1
a43 1
                             OTV_Validator  otvalid )
d66 2
a67 2
    gsub_lookup_count = otvalid->extra1;
    gpos_lookup_count = otvalid->extra2;
d71 1
a71 1
    otvalid->extra1 = gsub_lookup_count;
d76 1
a76 1
      otv_x_ux( table + ShrinkageEnableGSUB, otvalid );
d81 1
a81 1
      otv_x_ux( table + ShrinkageDisableGSUB, otvalid );
d83 1
a83 1
    otvalid->extra1 = gpos_lookup_count;
d88 1
a88 1
      otv_x_ux( table + ShrinkageEnableGPOS, otvalid );
d93 1
a93 1
      otv_x_ux( table + ShrinkageDisableGPOS, otvalid );
d101 1
a101 1
      OTV_RUN( table + ShrinkageJstfMax, otvalid );
d104 1
a104 1
    otvalid->extra1 = gsub_lookup_count;
d109 1
a109 1
      otv_x_ux( table + ExtensionEnableGSUB, otvalid );
d114 1
a114 1
      otv_x_ux( table + ExtensionDisableGSUB, otvalid );
d116 1
a116 1
    otvalid->extra1 = gpos_lookup_count;
d121 1
a121 1
      otv_x_ux( table + ExtensionEnableGPOS, otvalid );
d126 1
a126 1
      otv_x_ux( table + ExtensionDisableGPOS, otvalid );
d134 1
a134 1
      OTV_RUN( table + ExtensionJstfMax, otvalid );
d137 2
a138 2
    otvalid->extra1 = gsub_lookup_count;
    otvalid->extra2 = gpos_lookup_count;
d144 2
a145 2
  /* sets otvalid->extra (glyph count)               */
  /* sets otvalid->func1 (otv_JstfPriority_validate) */
d149 1
a149 1
                           OTV_Validator  otvalid )
d173 1
a173 1
      otvalid->extra1 = otvalid->glyph_count;
d175 1
a175 1
      OTV_RUN( table + ExtGlyph, otvalid );
d182 1
a182 1
      OTV_RUN( table + DefJstfLangSys, otvalid );
d193 1
a193 1
      OTV_RUN( table + FT_NEXT_USHORT( p ), otvalid );
d200 3
a202 3
  /* sets otvalid->extra1 (GSUB lookup count) */
  /* sets otvalid->extra2 (GPOS lookup count) */
  /* sets otvalid->glyph_count                */
d211 2
a212 2
    OTV_ValidatorRec  otvalidrec;
    OTV_Validator     otvalid = &otvalidrec;
d217 1
a217 2
    otvalid->root = ftvalid;

d234 1
a234 1
      otvalid->extra1 = otv_GSUBGPOS_get_Lookup_count( gsub );
d236 1
a236 1
      otvalid->extra1 = 0;
d239 1
a239 1
      otvalid->extra2 = otv_GSUBGPOS_get_Lookup_count( gpos );
d241 1
a241 1
      otvalid->extra2 = 0;
d243 1
a243 1
    otvalid->glyph_count = glyph_count;
d251 1
a251 1
      otv_JstfScript_validate( table + FT_NEXT_USHORT( p ), otvalid );
@


