head	1.1;
branch	1.1.115;
access;
symbols
	freetype-2_7_1:1.1.115.2
	freetype-2_3_12:1.1.115.1
	freetype:1.1.115;
locks; strict;
comment	@ * @;


1.1
date	2013.08.06.19.12.22;	author tg;	state Exp;
branches
	1.1.115.1;
next	;
commitid	10052014A9975CEFD1D;

1.1.115.1
date	2013.08.06.19.12.22;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10052014A9975CEFD1D;

1.1.115.2
date	2017.04.15.15.42.09;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.1
log
@Initial revision
@
text
@/***************************************************************************/
/*                                                                         */
/*  ttpic.c                                                                */
/*                                                                         */
/*    The FreeType position independent code services for truetype module. */
/*                                                                         */
/*  Copyright 2009 by                                                      */
/*  Oran Agra and Mickey Gabel.                                            */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_INTERNAL_OBJECTS_H
#include "ttpic.h"

#ifdef FT_CONFIG_OPTION_PIC

  /* forward declaration of PIC init functions from ttdriver.c */
  FT_Error FT_Create_Class_tt_services( FT_Library, FT_ServiceDescRec**);
  void FT_Destroy_Class_tt_services( FT_Library, FT_ServiceDescRec*);
  void FT_Init_Class_tt_service_gx_multi_masters(FT_Service_MultiMastersRec*);
  void FT_Init_Class_tt_service_truetype_glyf(FT_Service_TTGlyfRec*);

  void
  tt_driver_class_pic_free(  FT_Library library )
  {
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Memory memory = library->memory;
    if ( pic_container->truetype )
    {
      TTModulePIC* container = (TTModulePIC*)pic_container->truetype;
      if(container->tt_services)
        FT_Destroy_Class_tt_services(library, container->tt_services);
      container->tt_services = NULL;
      FT_FREE( container );
      pic_container->truetype = NULL;
    }
  }

  FT_Error
  tt_driver_class_pic_init(  FT_Library library )
  {
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Error        error = FT_Err_Ok;
    TTModulePIC* container;
    FT_Memory memory = library->memory;

    /* allocate pointer, clear and set global container pointer */
    if ( FT_ALLOC ( container, sizeof ( *container ) ) )
      return error;
    FT_MEM_SET( container, 0, sizeof(*container) );
    pic_container->truetype = container;

    /* initialize pointer table - this is how the module usually expects this data */
    error = FT_Create_Class_tt_services(library, &container->tt_services);
    if(error) 
      goto Exit;
#ifdef TT_CONFIG_OPTION_GX_VAR_SUPPORT
    FT_Init_Class_tt_service_gx_multi_masters(&container->tt_service_gx_multi_masters);
#endif
    FT_Init_Class_tt_service_truetype_glyf(&container->tt_service_truetype_glyf);
Exit:
    if(error)
      tt_driver_class_pic_free(library);
    return error;
  }

#endif /* FT_CONFIG_OPTION_PIC */


/* END */
@


1.1.115.1
log
@we need newer freetype for advance calculation
@
text
@@


1.1.115.2
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 2009-2016 by                                                 */
a22 2
#include "tterrors.h"

d27 4
a30 13
  FT_Error
  FT_Create_Class_tt_services( FT_Library           library,
                               FT_ServiceDescRec**  output_class );
  void
  FT_Destroy_Class_tt_services( FT_Library          library,
                                FT_ServiceDescRec*  clazz );
  void
  FT_Init_Class_tt_service_gx_multi_masters(
    FT_Service_MultiMastersRec*  sv_mm );
  void
  FT_Init_Class_tt_service_truetype_glyf(
    FT_Service_TTGlyfRec*  sv_ttglyf );

d33 1
a33 1
  tt_driver_class_pic_free( FT_Library  library )
d35 2
a36 4
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Memory          memory        = library->memory;


d39 3
a41 5
      TTModulePIC*  container = (TTModulePIC*)pic_container->truetype;


      if ( container->tt_services )
        FT_Destroy_Class_tt_services( library, container->tt_services );
a47 1

d49 1
a49 1
  tt_driver_class_pic_init( FT_Library  library )
d51 4
a54 5
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Error           error         = FT_Err_Ok;
    TTModulePIC*       container     = NULL;
    FT_Memory          memory        = library->memory;

d57 1
a57 1
    if ( FT_ALLOC( container, sizeof ( *container ) ) )
d59 1
a59 1
    FT_MEM_SET( container, 0, sizeof ( *container ) );
d62 3
a64 5
    /* initialize pointer table - this is how the module usually */
    /* expects this data                                         */
    error = FT_Create_Class_tt_services( library,
                                         &container->tt_services );
    if ( error )
d67 1
a67 2
    FT_Init_Class_tt_service_gx_multi_masters(
      &container->tt_service_gx_multi_masters );
d69 4
a72 6
    FT_Init_Class_tt_service_truetype_glyf(
      &container->tt_service_truetype_glyf );

  Exit:
    if ( error )
      tt_driver_class_pic_free( library );
@

