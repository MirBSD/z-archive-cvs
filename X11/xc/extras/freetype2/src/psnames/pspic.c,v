head	1.1;
branch	1.1.115;
access;
symbols
	freetype-2_7_1:1.1.115.2
	freetype-2_3_12:1.1.115.1
	freetype:1.1.115;
locks; strict;
comment	@ * @;


1.1
date	2013.08.06.19.12.21;	author tg;	state Exp;
branches
	1.1.115.1;
next	;
commitid	10052014A9975CEFD1D;

1.1.115.1
date	2013.08.06.19.12.21;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10052014A9975CEFD1D;

1.1.115.2
date	2017.04.15.15.42.08;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.1
log
@Initial revision
@
text
@/***************************************************************************/
/*                                                                         */
/*  pspic.c                                                                */
/*                                                                         */
/*    The FreeType position independent code services for psnames module.  */
/*                                                                         */
/*  Copyright 2009 by                                                      */
/*  Oran Agra and Mickey Gabel.                                            */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_INTERNAL_OBJECTS_H
#include "pspic.h"

#ifdef FT_CONFIG_OPTION_PIC

  /* forward declaration of PIC init functions from psmodule.c */
  FT_Error FT_Create_Class_pscmaps_services( FT_Library, FT_ServiceDescRec**);
  void FT_Destroy_Class_pscmaps_services( FT_Library, FT_ServiceDescRec*);
  void FT_Init_Class_pscmaps_interface( FT_Library, FT_Service_PsCMapsRec*);

  void
  psnames_module_class_pic_free(  FT_Library library )
  {
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Memory memory = library->memory;
    if ( pic_container->psnames )
    {
      PSModulePIC* container = (PSModulePIC*)pic_container->psnames;
      if(container->pscmaps_services)
        FT_Destroy_Class_pscmaps_services(library, container->pscmaps_services);
      container->pscmaps_services = NULL;
      FT_FREE( container );
      pic_container->psnames = NULL;
    }
  }

  FT_Error
  psnames_module_class_pic_init(  FT_Library library )
  {
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Error        error = FT_Err_Ok;
    PSModulePIC* container;
    FT_Memory memory = library->memory;

    /* allocate pointer, clear and set global container pointer */
    if ( FT_ALLOC ( container, sizeof ( *container ) ) )
      return error;
    FT_MEM_SET( container, 0, sizeof(*container) );
    pic_container->psnames = container;

    /* initialize pointer table - this is how the module usually expects this data */
    error = FT_Create_Class_pscmaps_services(library, &container->pscmaps_services);
    if(error) 
      goto Exit;
    FT_Init_Class_pscmaps_interface(library, &container->pscmaps_interface);
    
Exit:
    if(error)
      psnames_module_class_pic_free(library);
    return error;
  }


#endif /* FT_CONFIG_OPTION_PIC */


/* END */
@


1.1.115.1
log
@we need newer freetype for advance calculation
@
text
@@


1.1.115.2
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 2009-2016 by                                                 */
a22 2
#include "psnamerr.h"

d27 3
a29 6
  FT_Error
  FT_Create_Class_pscmaps_services( FT_Library           library,
                                    FT_ServiceDescRec**  output_class );
  void
  FT_Destroy_Class_pscmaps_services( FT_Library          library,
                                     FT_ServiceDescRec*  clazz );
d32 1
a32 6
  FT_Init_Class_pscmaps_interface( FT_Library              library,
                                   FT_Service_PsCMapsRec*  clazz );


  void
  psnames_module_class_pic_free( FT_Library  library )
d34 2
a35 4
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Memory          memory        = library->memory;


d38 3
a40 6
      PSModulePIC*  container = (PSModulePIC*)pic_container->psnames;


      if ( container->pscmaps_services )
        FT_Destroy_Class_pscmaps_services( library,
                                           container->pscmaps_services );
a46 1

d48 1
a48 1
  psnames_module_class_pic_init( FT_Library  library )
d50 4
a53 5
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Error           error         = FT_Err_Ok;
    PSModulePIC*       container     = NULL;
    FT_Memory          memory        = library->memory;

d56 1
a56 1
    if ( FT_ALLOC( container, sizeof ( *container ) ) )
d58 1
a58 1
    FT_MEM_SET( container, 0, sizeof ( *container ) );
d61 3
a63 5
    /* initialize pointer table -                       */
    /* this is how the module usually expects this data */
    error = FT_Create_Class_pscmaps_services(
              library, &container->pscmaps_services );
    if ( error )
d65 5
a69 6
    FT_Init_Class_pscmaps_interface( library,
                                     &container->pscmaps_interface );

  Exit:
    if ( error )
      psnames_module_class_pic_free( library );
@

