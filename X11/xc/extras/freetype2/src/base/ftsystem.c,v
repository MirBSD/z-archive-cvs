head	1.4;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.1
	MIRBSD_10_BASE:1.2
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@ * @;


1.4
date	2017.04.15.19.21.27;	author tg;	state Exp;
branches;
next	1.3;
commitid	10058F2723111C7BEE2;

1.3
date	2013.08.06.19.47.44;	author tg;	state Exp;
branches;
next	1.2;
commitid	100520152445E05B912;

1.2
date	2006.06.29.20.24.45;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.43.09;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.53.28;	author bsiegert;	state Exp;
branches;
next	;
commitid	10047C46DB5081DCD79;

1.1.103.1
date	2005.03.18.10.43.09;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.35.07;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.36.57;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.23;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.42.06;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.4
log
@first cut at a quickmerge
@
text
@/***************************************************************************/
/*                                                                         */
/*  ftsystem.c                                                             */
/*                                                                         */
/*    ANSI-specific FreeType low-level system interface (body).            */
/*                                                                         */
/*  Copyright 1996-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/

  /*************************************************************************/
  /*                                                                       */
  /* This file contains the default interface used by FreeType to access   */
  /* low-level, i.e. memory management, i/o access as well as thread       */
  /* synchronisation.  It can be replaced by user-specific routines if     */
  /* necessary.                                                            */
  /*                                                                       */
  /*************************************************************************/


#include <ft2build.h>
#include FT_CONFIG_CONFIG_H
#include FT_INTERNAL_DEBUG_H
#include FT_INTERNAL_STREAM_H
#include FT_SYSTEM_H
#include FT_ERRORS_H
#include FT_TYPES_H


  /*************************************************************************/
  /*                                                                       */
  /*                       MEMORY MANAGEMENT INTERFACE                     */
  /*                                                                       */
  /*************************************************************************/

  /*************************************************************************/
  /*                                                                       */
  /* It is not necessary to do any error checking for the                  */
  /* allocation-related functions.  This will be done by the higher level  */
  /* routines like ft_mem_alloc() or ft_mem_realloc().                     */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    ft_alloc                                                           */
  /*                                                                       */
  /* <Description>                                                         */
  /*    The memory allocation function.                                    */
  /*                                                                       */
  /* <Input>                                                               */
  /*    memory :: A pointer to the memory object.                          */
  /*                                                                       */
  /*    size   :: The requested size in bytes.                             */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The address of newly allocated block.                              */
  /*                                                                       */
  FT_CALLBACK_DEF( void* )
  ft_alloc( FT_Memory  memory,
            long       size )
  {
    FT_UNUSED( memory );

    return ft_smalloc( (size_t)size );
  }


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    ft_realloc                                                         */
  /*                                                                       */
  /* <Description>                                                         */
  /*    The memory reallocation function.                                  */
  /*                                                                       */
  /* <Input>                                                               */
  /*    memory   :: A pointer to the memory object.                        */
  /*                                                                       */
  /*    cur_size :: The current size of the allocated memory block.        */
  /*                                                                       */
  /*    new_size :: The newly requested size in bytes.                     */
  /*                                                                       */
  /*    block    :: The current address of the block in memory.            */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The address of the reallocated memory block.                       */
  /*                                                                       */
  FT_CALLBACK_DEF( void* )
  ft_realloc( FT_Memory  memory,
              long       cur_size,
              long       new_size,
              void*      block )
  {
    FT_UNUSED( memory );
    FT_UNUSED( cur_size );

    return ft_srealloc( block, (size_t)new_size );
  }


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    ft_free                                                            */
  /*                                                                       */
  /* <Description>                                                         */
  /*    The memory release function.                                       */
  /*                                                                       */
  /* <Input>                                                               */
  /*    memory  :: A pointer to the memory object.                         */
  /*                                                                       */
  /*    block   :: The address of block in memory to be freed.             */
  /*                                                                       */
  FT_CALLBACK_DEF( void )
  ft_free( FT_Memory  memory,
           void*      block )
  {
    FT_UNUSED( memory );

    ft_sfree( block );
  }


  /*************************************************************************/
  /*                                                                       */
  /*                     RESOURCE MANAGEMENT INTERFACE                     */
  /*                                                                       */
  /*************************************************************************/

#ifndef FT_CONFIG_OPTION_DISABLE_STREAM_SUPPORT

  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_io

  /* We use the macro STREAM_FILE for convenience to extract the       */
  /* system-specific stream handle from a given FreeType stream object */
#define STREAM_FILE( stream )  ( (FT_FILE*)stream->descriptor.pointer )


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    ft_ansi_stream_close                                               */
  /*                                                                       */
  /* <Description>                                                         */
  /*    The function to close a stream.                                    */
  /*                                                                       */
  /* <Input>                                                               */
  /*    stream :: A pointer to the stream object.                          */
  /*                                                                       */
  FT_CALLBACK_DEF( void )
  ft_ansi_stream_close( FT_Stream  stream )
  {
    ft_fclose( STREAM_FILE( stream ) );

    stream->descriptor.pointer = NULL;
    stream->size               = 0;
    stream->base               = NULL;
  }


  /*************************************************************************/
  /*                                                                       */
  /* <Function>                                                            */
  /*    ft_ansi_stream_io                                                  */
  /*                                                                       */
  /* <Description>                                                         */
  /*    The function to open a stream.                                     */
  /*                                                                       */
  /* <Input>                                                               */
  /*    stream :: A pointer to the stream object.                          */
  /*                                                                       */
  /*    offset :: The position in the data stream to start reading.        */
  /*                                                                       */
  /*    buffer :: The address of buffer to store the read data.            */
  /*                                                                       */
  /*    count  :: The number of bytes to read from the stream.             */
  /*                                                                       */
  /* <Return>                                                              */
  /*    The number of bytes actually read.  If `count' is zero (this is,   */
  /*    the function is used for seeking), a non-zero return value         */
  /*    indicates an error.                                                */
  /*                                                                       */
  FT_CALLBACK_DEF( unsigned long )
  ft_ansi_stream_io( FT_Stream       stream,
                     unsigned long   offset,
                     unsigned char*  buffer,
                     unsigned long   count )
  {
    FT_FILE*  file;


    if ( !count && offset > stream->size )
      return 1;

    file = STREAM_FILE( stream );

    if ( stream->pos != offset )
      ft_fseek( file, (long)offset, SEEK_SET );

    return (unsigned long)ft_fread( buffer, 1, count, file );
  }


  /* documentation is in ftstream.h */

  FT_BASE_DEF( FT_Error )
  FT_Stream_Open( FT_Stream    stream,
                  const char*  filepathname )
  {
    FT_FILE*  file;


    if ( !stream )
      return FT_THROW( Invalid_Stream_Handle );

    stream->descriptor.pointer = NULL;
    stream->pathname.pointer   = (char*)filepathname;
    stream->base               = NULL;
    stream->pos                = 0;
    stream->read               = NULL;
    stream->close              = NULL;

    file = ft_fopen( filepathname, "rb" );
    if ( !file )
    {
      FT_ERROR(( "FT_Stream_Open:"
                 " could not open `%s'\n", filepathname ));

      return FT_THROW( Cannot_Open_Resource );
    }

    ft_fseek( file, 0, SEEK_END );
    stream->size = (unsigned long)ft_ftell( file );
    if ( !stream->size )
    {
      FT_ERROR(( "FT_Stream_Open:" ));
      FT_ERROR(( " opened `%s' but zero-sized\n", filepathname ));
      ft_fclose( file );
      return FT_THROW( Cannot_Open_Stream );
    }
    ft_fseek( file, 0, SEEK_SET );

    stream->descriptor.pointer = file;
    stream->read  = ft_ansi_stream_io;
    stream->close = ft_ansi_stream_close;

    FT_TRACE1(( "FT_Stream_Open:" ));
    FT_TRACE1(( " opened `%s' (%d bytes) successfully\n",
                filepathname, stream->size ));

    return FT_Err_Ok;
  }

#endif /* !FT_CONFIG_OPTION_DISABLE_STREAM_SUPPORT */

#ifdef FT_DEBUG_MEMORY

  extern FT_Int
  ft_mem_debug_init( FT_Memory  memory );

  extern void
  ft_mem_debug_done( FT_Memory  memory );

#endif


  /* documentation is in ftobjs.h */

  FT_BASE_DEF( FT_Memory )
  FT_New_Memory( void )
  {
    FT_Memory  memory;


    memory = (FT_Memory)ft_smalloc( sizeof ( *memory ) );
    if ( memory )
    {
      memory->user    = NULL;
      memory->alloc   = ft_alloc;
      memory->realloc = ft_realloc;
      memory->free    = ft_free;
#ifdef FT_DEBUG_MEMORY
      ft_mem_debug_init( memory );
#endif
    }

    return memory;
  }


  /* documentation is in ftobjs.h */

  FT_BASE_DEF( void )
  FT_Done_Memory( FT_Memory  memory )
  {
#ifdef FT_DEBUG_MEMORY
    ft_mem_debug_done( memory );
#endif
    ft_sfree( memory );
  }


/* END */
@


1.3
log
@fastmerge
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2006, 2008, 2009 by                         */
d74 1
a74 1
    return ft_smalloc( size );
d107 1
a107 1
    return ft_srealloc( block, new_size );
d140 1
d174 1
a174 1
    stream->base               = 0;
d196 3
a198 1
  /*    The number of bytes actually read.                                 */
d209 3
d215 1
a215 1
      ft_fseek( file, offset, SEEK_SET );
d231 8
a238 1
      return FT_Err_Invalid_Stream_Handle;
d246 1
a246 1
      return FT_Err_Cannot_Open_Resource;
d250 8
a257 1
    stream->size = ft_ftell( file );
a260 3
    stream->pathname.pointer   = (char*)filepathname;
    stream->pos                = 0;

d271 1
d295 1
a295 1
      memory->user    = 0;
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@a0 2
/* $XFree86: xc/extras/freetype2/src/base/ftsystem.c,v 1.2 2005/02/28 23:19:13 dawes Exp $ */

d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2006 by                                     */
a34 1
#include FT_INTERNAL_STREAM_H
d208 2
a209 1
    ft_fseek( file, offset, SEEK_SET );
d230 2
a231 2
      FT_ERROR(( "FT_Stream_Open:" ));
      FT_ERROR(( " could not open `%s'\n", filepathname ));
d298 1
a298 1
    memory->free( memory, memory );
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
/*  Copyright 1996-2001, 2002 by                                           */
d33 1
a38 3
#include <stdio.h>
#include <stdlib.h>

d50 1
a50 1
  /* routines like FT_Alloc() or FT_Realloc().                             */
d77 1
a77 1
    return malloc( size );
d110 1
a110 1
    return realloc( block, new_size );
d133 1
a133 1
    free( block );
d155 1
a155 1
#define STREAM_FILE( stream )  ( (FILE*)stream->descriptor.pointer )
d172 1
a172 1
    fclose( STREAM_FILE( stream ) );
d206 1
a206 1
    FILE*  file;
d211 1
a211 1
    fseek( file, offset, SEEK_SET );
d213 1
a213 1
    return (unsigned long)fread( buffer, 1, count, file );
d217 1
a217 1
  /* documentation is in ftobjs.h */
d219 1
a219 1
  FT_EXPORT_DEF( FT_Error )
d223 1
a223 1
    FILE*  file;
d229 1
a229 1
    file = fopen( filepathname, "rb" );
d238 3
a240 3
    fseek( file, 0, SEEK_END );
    stream->size = ftell( file );
    fseek( file, 0, SEEK_SET );
d270 1
a270 1
  FT_EXPORT_DEF( FT_Memory )
d276 1
a276 1
    memory = (FT_Memory)malloc( sizeof ( *memory ) );
d294 1
a294 1
  FT_EXPORT_DEF( void )
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d1 2
d9 1
a9 1
/*  Copyright 1996-2001, 2002, 2006 by                                     */
a32 1
#include FT_INTERNAL_STREAM_H
d36 4
d52 1
a52 1
  /* routines like ft_mem_alloc() or ft_mem_realloc().                     */
d79 1
a79 1
    return ft_smalloc( size );
d112 1
a112 1
    return ft_srealloc( block, new_size );
d135 1
a135 1
    ft_sfree( block );
d157 1
a157 1
#define STREAM_FILE( stream )  ( (FT_FILE*)stream->descriptor.pointer )
d174 1
a174 1
    ft_fclose( STREAM_FILE( stream ) );
d208 1
a208 1
    FT_FILE*  file;
d213 1
a213 1
    ft_fseek( file, offset, SEEK_SET );
d215 1
a215 1
    return (unsigned long)ft_fread( buffer, 1, count, file );
d219 1
a219 1
  /* documentation is in ftstream.h */
d221 1
a221 1
  FT_BASE_DEF( FT_Error )
d225 1
a225 1
    FT_FILE*  file;
d231 1
a231 1
    file = ft_fopen( filepathname, "rb" );
d240 3
a242 3
    ft_fseek( file, 0, SEEK_END );
    stream->size = ft_ftell( file );
    ft_fseek( file, 0, SEEK_SET );
d272 1
a272 1
  FT_BASE_DEF( FT_Memory )
d278 1
a278 1
    memory = (FT_Memory)ft_smalloc( sizeof ( *memory ) );
d296 1
a296 1
  FT_BASE_DEF( void )
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@d1 2
d36 1
@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2006 by                                     */
a30 1
#include FT_INTERNAL_STREAM_H
d35 3
d49 1
a49 1
  /* routines like ft_mem_alloc() or ft_mem_realloc().                     */
d76 1
a76 1
    return ft_smalloc( size );
d109 1
a109 1
    return ft_srealloc( block, new_size );
d132 1
a132 1
    ft_sfree( block );
d154 1
a154 1
#define STREAM_FILE( stream )  ( (FT_FILE*)stream->descriptor.pointer )
d171 1
a171 1
    ft_fclose( STREAM_FILE( stream ) );
d205 1
a205 1
    FT_FILE*  file;
d210 1
a210 1
    ft_fseek( file, offset, SEEK_SET );
d212 1
a212 1
    return (unsigned long)ft_fread( buffer, 1, count, file );
d216 1
a216 1
  /* documentation is in ftstream.h */
d218 1
a218 1
  FT_BASE_DEF( FT_Error )
d222 1
a222 1
    FT_FILE*  file;
d228 1
a228 1
    file = ft_fopen( filepathname, "rb" );
d237 3
a239 3
    ft_fseek( file, 0, SEEK_END );
    stream->size = ft_ftell( file );
    ft_fseek( file, 0, SEEK_SET );
d269 1
a269 1
  FT_BASE_DEF( FT_Memory )
d275 1
a275 1
    memory = (FT_Memory)ft_smalloc( sizeof ( *memory ) );
d293 1
a293 1
  FT_BASE_DEF( void )
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d7 1
a7 1
/*  Copyright 1996-2001, 2002, 2006, 2008, 2009 by                         */
d208 1
a208 2
    if ( stream->pos != offset )
      ft_fseek( file, offset, SEEK_SET );
d229 2
a230 2
      FT_ERROR(( "FT_Stream_Open:"
                 " could not open `%s'\n", filepathname ));
d297 1
a297 1
    ft_sfree( memory );
@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d7 1
a7 1
/*  Copyright 1996-2016 by                                                 */
d74 1
a74 1
    return ft_smalloc( (size_t)size );
d107 1
a107 1
    return ft_srealloc( block, (size_t)new_size );
a139 1
#ifndef FT_CONFIG_OPTION_DISABLE_STREAM_SUPPORT
d173 1
a173 1
    stream->base               = NULL;
d195 1
a195 3
  /*    The number of bytes actually read.  If `count' is zero (this is,   */
  /*    the function is used for seeking), a non-zero return value         */
  /*    indicates an error.                                                */
a205 3
    if ( !count && offset > stream->size )
      return 1;

d209 1
a209 1
      ft_fseek( file, (long)offset, SEEK_SET );
d225 1
a225 8
      return FT_THROW( Invalid_Stream_Handle );

    stream->descriptor.pointer = NULL;
    stream->pathname.pointer   = (char*)filepathname;
    stream->base               = NULL;
    stream->pos                = 0;
    stream->read               = NULL;
    stream->close              = NULL;
d233 1
a233 1
      return FT_THROW( Cannot_Open_Resource );
d237 1
a237 8
    stream->size = (unsigned long)ft_ftell( file );
    if ( !stream->size )
    {
      FT_ERROR(( "FT_Stream_Open:" ));
      FT_ERROR(( " opened `%s' but zero-sized\n", filepathname ));
      ft_fclose( file );
      return FT_THROW( Cannot_Open_Stream );
    }
d241 3
a253 1
#endif /* !FT_CONFIG_OPTION_DISABLE_STREAM_SUPPORT */
d277 1
a277 1
      memory->user    = NULL;
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
