head	1.6;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.2
	MIRBSD_10_BASE:1.3
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@# @;


1.6
date	2017.04.15.19.20.00;	author tg;	state Exp;
branches;
next	1.5;
commitid	10058F2723111C7BEE2;

1.5
date	2013.08.06.19.46.24;	author tg;	state Exp;
branches;
next	1.4;
commitid	100520152445E05B912;

1.4
date	2008.06.12.20.53.48;	author bsiegert;	state Exp;
branches;
next	1.3;
commitid	10048518C1E44F62885;

1.3
date	2008.02.26.20.04.19;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10047C470A72A1E13CE;

1.2
date	2006.06.29.20.24.09;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A435A50E5F7C11;

1.1
date	2005.03.18.10.42.56;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.53.42;	author bsiegert;	state Exp;
branches;
next	1.1.1.2;
commitid	10047C46DB5081DCD79;

1.1.1.2
date	2008.06.12.20.39.29;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004851887B4E012E38;

1.1.103.1
date	2005.03.18.10.42.56;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.34.03;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.38.03;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.12;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.41.48;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.6
log
@first cut at a quickmerge
@
text
@#
# FreeType 2 library sub-Makefile
#


# Copyright 1996-2016 by
# David Turner, Robert Wilhelm, and Werner Lemberg.
#
# This file is part of the FreeType project, and may only be used, modified,
# and distributed under the terms of the FreeType project license,
# LICENSE.TXT.  By continuing to use, modify, or distribute this file you
# indicate that you have read the license and understand and accept it
# fully.


# DO NOT INVOKE THIS MAKEFILE DIRECTLY!  IT IS MEANT TO BE INCLUDED BY
# OTHER MAKEFILES.


# The following variables (set by other Makefile components, in the
# environment, or on the command line) are used:
#
#   BUILD_DIR      The architecture dependent directory,
#                  e.g. `$(TOP_DIR)/builds/unix'.  Added to INCLUDES also.
#
#   OBJ_DIR        The directory in which object files are created.
#
#   LIB_DIR        The directory in which the library is created.
#
#   DOC_DIR        The directory in which the API reference is created.
#
#   INCLUDES       A list of directories to be included additionally.
#
#   DEVEL_DIR      Development directory which is added to the INCLUDES
#                  variable before the standard include directories.
#
#   CFLAGS         Compilation flags.  This overrides the default settings
#                  in the platform-specific configuration files.
#
#   FTSYS_SRC      If set, its value is used as the name of a replacement
#                  file for `src/base/ftsystem.c'.
#
#   FTDEBUG_SRC    If set, its value is used as the name of a replacement
#                  file for `src/base/ftdebug.c'.  [For a normal build, this
#                  file does nothing.]
#
#   FTMODULE_H     The file which contains the list of module classes for
#                  the current build.  Usually, this is automatically
#                  created by `modules.mk'.
#
#   BASE_OBJ_S
#   BASE_OBJ_M     A list of base objects (for single object and multiple
#                  object builds, respectively).  Set up in
#                  `src/base/rules.mk'.
#
#   BASE_EXT_OBJ   A list of base extension objects.  Set up in
#                  `src/base/rules.mk'.
#
#   DRV_OBJ_S
#   DRV_OBJ_M      A list of driver objects (for single object and multiple
#                  object builds, respectively).  Set up cumulatively in
#                  `src/<driver>/rules.mk'.
#
#   CLEAN
#   DISTCLEAN      The sub-makefiles can append additional stuff to these two
#                  variables which is to be removed for the `clean' resp.
#                  `distclean' target.
#
#   TOP_DIR, SEP,
#   COMPILER_SEP,
#   LIBRARY, CC,
#   A, I, O, T     Check `config.mk' for details.


# The targets `objects' and `library' are defined at the end of this
# Makefile after all other rules have been included.
#
.PHONY: single multi objects library refdoc

# default target -- build single objects and library
#
single: objects library

# `multi' target -- build multiple objects and library
#
multi: objects library


# The FreeType source directory, usually `./src'.
#
SRC_DIR := $(TOP_DIR)/src

# The directory where the base layer components are placed, usually
# `./src/base'.
#
BASE_DIR := $(SRC_DIR)/base

# Other derived directories.
#
PUBLIC_DIR   := $(TOP_DIR)/include/freetype
INTERNAL_DIR := $(PUBLIC_DIR)/internal
SERVICES_DIR := $(INTERNAL_DIR)/services
CONFIG_DIR   := $(PUBLIC_DIR)/config

# The documentation directory.
#
DOC_DIR ?= $(TOP_DIR)/docs/reference

# The final name of the library file.
#
PROJECT_LIBRARY := $(LIB_DIR)/$(LIBRARY).$A


# include paths
#
# IMPORTANT NOTE: The architecture-dependent directory must ALWAYS be placed
#                 before the standard include list.  Porters are then able to
#                 put their own version of some of the FreeType components
#                 in the `builds/<system>' directory, as these files will
#                 override the default sources.
#
INCLUDES := $(subst /,$(COMPILER_SEP),$(OBJ_DIR) \
                                      $(DEVEL_DIR) \
                                      $(BUILD_DIR) \
                                      $(TOP_DIR)/include)

INCLUDE_FLAGS := $(INCLUDES:%=$I%)

ifdef DEVEL_DIR
  # We assume that all library dependencies for FreeType are fulfilled for a
  # development build, so we directly access the necessary include directory
  # information using `pkg-config'.
  INCLUDE_FLAGS += $(shell pkg-config --cflags libpng \
                                               harfbuzz )
endif


# C flags used for the compilation of an object file.  This must include at
# least the paths for the `base' and `builds/<system>' directories;
# debug/optimization/warning flags + ansi compliance if needed.
#
# $(INCLUDE_FLAGS) should come before $(CFLAGS) to avoid problems with
# old FreeType versions.
#
# Note what we also define the macro FT2_BUILD_LIBRARY when building
# FreeType.  This is required to let our sources include the internal
# headers (something forbidden by clients).
#
# Finally, we define FT_CONFIG_MODULES_H so that the compiler uses the
# generated version of `ftmodule.h' in $(OBJ_DIR).  If there is an
# `ftoption.h' files in $(OBJ_DIR), define FT_CONFIG_OPTIONS_H too.
#
ifneq ($(wildcard $(OBJ_DIR)/ftoption.h),)
  FTOPTION_H    := $(OBJ_DIR)/ftoption.h
  FTOPTION_FLAG := $DFT_CONFIG_OPTIONS_H="<ftoption.h>"
endif

# `CPPFLAGS' might be specified by the user in the environment.
#
FT_CFLAGS  = $(CPPFLAGS) \
             $(CFLAGS) \
             $DFT2_BUILD_LIBRARY \
             $DFT_CONFIG_MODULES_H="<ftmodule.h>" \
             $(FTOPTION_FLAG)


# Include the `exports' rules file.
#
include $(TOP_DIR)/builds/exports.mk


# Initialize the list of objects.
#
OBJECTS_LIST :=


# Define $(PUBLIC_H) as the list of all public header files located in
# `$(TOP_DIR)/include/freetype'.  $(INTERNAL_H), and $(CONFIG_H) are defined
# similarly.
#
# This is used to simplify the dependency rules -- if one of these files
# changes, the whole library is recompiled.
#
PUBLIC_H   := $(wildcard $(PUBLIC_DIR)/*.h)
INTERNAL_H := $(wildcard $(INTERNAL_DIR)/*.h) \
              $(wildcard $(SERVICES_DIR)/*.h)
CONFIG_H   := $(wildcard $(CONFIG_DIR)/*.h) \
              $(wildcard $(BUILD_DIR)/config/*.h) \
              $(FTMODULE_H) \
              $(FTOPTION_H)
DEVEL_H    := $(wildcard $(TOP_DIR)/devel/*.h)

FREETYPE_H := $(PUBLIC_H) $(INTERNAL_H) $(CONFIG_H) $(DEVEL_H)


FT_COMPILE := $(CC) $(ANSIFLAGS) $(INCLUDE_FLAGS) $(FT_CFLAGS)

# ftsystem component
#
FTSYS_SRC ?= $(BASE_DIR)/ftsystem.c

FTSYS_OBJ := $(OBJ_DIR)/ftsystem.$O

OBJECTS_LIST += $(FTSYS_OBJ)

$(FTSYS_OBJ): $(FTSYS_SRC) $(FREETYPE_H)
	$(FT_COMPILE) $T$(subst /,$(COMPILER_SEP),$@@ $<)


# ftdebug component
#
FTDEBUG_SRC ?= $(BASE_DIR)/ftdebug.c

FTDEBUG_OBJ := $(OBJ_DIR)/ftdebug.$O

OBJECTS_LIST += $(FTDEBUG_OBJ)

$(FTDEBUG_OBJ): $(FTDEBUG_SRC) $(FREETYPE_H)
	$(FT_COMPILE) $T$(subst /,$(COMPILER_SEP),$@@ $<)


# Include all rule files from FreeType components.
#
include $(SRC_DIR)/base/rules.mk
include $(patsubst %,$(SRC_DIR)/%/rules.mk,$(MODULES))


# ftinit component
#
#   The C source `ftinit.c' contains the FreeType initialization routines.
#   It is able to automatically register one or more drivers when the API
#   function FT_Init_FreeType() is called.
#
#   The set of initial drivers is determined by the driver Makefiles
#   includes above.  Each driver Makefile updates the FTINIT_xxx lists
#   which contain additional include paths and macros used to compile the
#   single `ftinit.c' source.
#
FTINIT_SRC := $(BASE_DIR)/ftinit.c
FTINIT_OBJ := $(OBJ_DIR)/ftinit.$O

OBJECTS_LIST += $(FTINIT_OBJ)

$(FTINIT_OBJ): $(FTINIT_SRC) $(FREETYPE_H)
	$(FT_COMPILE) $T$(subst /,$(COMPILER_SEP),$@@ $<)


# All FreeType library objects.
#
OBJ_M := $(BASE_OBJ_M) $(BASE_EXT_OBJ) $(DRV_OBJS_M)
OBJ_S := $(BASE_OBJ_S) $(BASE_EXT_OBJ) $(DRV_OBJS_S)


# The target `multi' on the Make command line indicates that we want to
# compile each source file independently.
#
# Otherwise, each module/driver is compiled in a single object file through
# source file inclusion (see `src/base/ftbase.c' or
# `src/truetype/truetype.c' for examples).
#
BASE_OBJECTS := $(OBJECTS_LIST)

ifneq ($(findstring multi,$(MAKECMDGOALS)),)
  OBJECTS_LIST += $(OBJ_M)
else
  OBJECTS_LIST += $(OBJ_S)
endif

objects: $(OBJECTS_LIST)

library: $(PROJECT_LIBRARY)


# Option `-B' disables generation of .pyc files (available since python 2.6)
#
refdoc:
	python -B $(SRC_DIR)/tools/docmaker/docmaker.py \
                  --prefix=ft2                          \
                  --title=FreeType-$(version)           \
                  --output=$(DOC_DIR)                   \
                  $(PUBLIC_DIR)/*.h                     \
                  $(PUBLIC_DIR)/config/*.h              \
                  $(PUBLIC_DIR)/cache/*.h


.PHONY: clean_project_std distclean_project_std

# Standard cleaning and distclean rules.  These are not accepted
# on all systems though.
#
clean_project_std:
	-$(DELETE) $(BASE_OBJECTS) $(OBJ_M) $(OBJ_S) $(CLEAN)

distclean_project_std: clean_project_std
	-$(DELETE) $(PROJECT_LIBRARY)
	-$(DELETE) *.orig *~ core *.core $(DISTCLEAN)


.PHONY: clean_project_dos distclean_project_dos

# The Dos command shell does not support very long list of arguments, so
# we are stuck with wildcards.
#
# Don't break the command lines with \; this prevents the "del" command from
# working correctly on Win9x.
#
clean_project_dos:
	-$(DELETE) $(subst /,$(SEP),$(OBJ_DIR)/*.$O $(CLEAN) $(NO_OUTPUT))

distclean_project_dos: clean_project_dos
	-$(DELETE) $(subst /,$(SEP),$(PROJECT_LIBRARY) $(DISTCLEAN) $(NO_OUTPUT))


.PHONY: remove_config_mk remove_ftmodule_h

# Remove configuration file (used for distclean).
#
remove_config_mk:
	-$(DELETE) $(subst /,$(SEP),$(CONFIG_MK) $(NO_OUTPUT))

# Remove module list (used for distclean).
#
remove_ftmodule_h:
	-$(DELETE) $(subst /,$(SEP),$(FTMODULE_H) $(NO_OUTPUT))


.PHONY: clean distclean

# The `config.mk' file must define `clean_freetype' and
# `distclean_freetype'.  Implementations may use to relay these to either
# the `std' or `dos' versions from above, or simply provide their own
# implementation.
#
clean: clean_project
distclean: distclean_project remove_config_mk remove_ftmodule_h
	-$(DELETE) $(subst /,$(SEP),$(DOC_DIR)/*.html $(NO_OUTPUT))


# EOF
@


1.5
log
@fastmerge
@
text
@d6 1
a6 1
# Copyright 1996-2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008 by
d119 2
a120 2
#                 in the `freetype/builds/<system>' directory, as these
#                 files will override the default sources.
d129 8
d158 2
a160 1
             $(INCLUDE_FLAGS) \
a164 2
FT_CC      = $(CC) $(FT_CFLAGS)
FT_COMPILE = $(CC) $(ANSIFLAGS) $(FT_CFLAGS)
d188 1
a188 1
              $(wildcard $(BUILD_DIR)/freetype/config/*.h) \
d196 2
a272 28
dll: $(PROJECT_LIBRARY) exported_symbols

.c.$O:
	$(FT_COMPILE) $T$(subst /,$(COMPILER_SEP),$@@ $<)


ifneq ($(findstring refdoc,$(MAKECMDGOALS)),)
  # poor man's `sed' emulation with make's built-in string functions
  work := $(strip $(shell $(CAT) $(PUBLIC_DIR)/freetype.h))
  work := $(subst |,x,$(work))
  work := $(subst $(space),|,$(work))
  work := $(subst \#define|FREETYPE_MAJOR|,$(space),$(work))
  work := $(word 2,$(work))
  major := $(subst |,$(space),$(work))
  major := $(firstword $(major))

  work := $(subst \#define|FREETYPE_MINOR|,$(space),$(work))
  work := $(word 2,$(work))
  minor := $(subst |,$(space),$(work))
  minor := $(firstword $(minor))

  work := $(subst \#define|FREETYPE_PATCH|,$(space),$(work))
  work := $(word 2,$(work))
  patch := $(subst |,$(space),$(work))
  patch := $(firstword $(patch))

  version := $(major).$(minor).$(patch)
endif
d274 1
a274 2
# We write-protect the docmaker directory to suppress generation
# of .pyc files.
d277 7
a283 9
	-chmod -w $(SRC_DIR)/tools/docmaker
	python $(SRC_DIR)/tools/docmaker/docmaker.py \
               --prefix=ft2                          \
               --title=FreeType-$(version)           \
               --output=$(DOC_DIR)                   \
               $(PUBLIC_DIR)/*.h                     \
               $(PUBLIC_DIR)/config/*.h              \
               $(PUBLIC_DIR)/cache/*.h
	-chmod +w $(SRC_DIR)/tools/docmaker
@


1.4
log
@Merge freetype 2.3.6
@
text
@d171 1
a171 1
# `$(TOP_DIR)/include/freetype'.  $(BASE_H), and $(CONFIG_H) are defined
d178 1
a178 1
BASE_H     := $(wildcard $(INTERNAL_DIR)/*.h) \
d186 1
a186 1
FREETYPE_H := $(PUBLIC_H) $(BASE_H) $(CONFIG_H) $(DEVEL_H)
@


1.3
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d6 1
a6 1
# Copyright 1996-2000, 2001, 2002, 2003, 2004, 2005, 2006 by
d330 1
a330 1
	-$(DELETE) $(subst /,\,$(OBJ_DIR)/*.$O $(CLEAN) $(NO_OUTPUT))
d333 1
a333 1
	-$(DELETE) $(subst /,\,$(PROJECT_LIBRARY) $(DISTCLEAN) $(NO_OUTPUT))
@


1.2
log
@merge freetype 2.2.1, reduce diff against ft (rid some xf86 changes)
@
text
@d270 23
d300 1
a300 1
               --title=FreeType-2.2.1                \
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
# Copyright 1996-2000, 2001, 2002, 2003, 2004 by
d24 1
a24 1
#                  e.g. `$(TOP_DIR)/builds/unix'.
d33 3
a35 1
#                  Usually empty.
d47 3
a49 3
#   FT_MODULE_LIST The file which contains the list of modules for the
#                  current build.  Usually, this is automatically created by
#                  `modules.mk'.
a103 1
CACHE_DIR    := $(PUBLIC_DIR)/cache
d107 1
a107 3
ifndef DOC_DIR
  DOC_DIR := $(TOP_DIR)/docs/reference
endif
d117 1
a117 1
#                 in front of the include list.  Porters are then able to
d122 3
a124 1
INCLUDES := $(subst /,$(COMPILER_SEP),$(OBJ_DIR) $(BUILD_DIR) \
d127 1
a127 1
INCLUDE_FLAGS = $(INCLUDES:%=$I%)
d137 19
a155 1
FT_CFLAGS  = $(INCLUDE_FLAGS) $(CFLAGS)
d160 1
a160 1
# Include the `modules' rules file.
d162 1
a162 1
include $(TOP_DIR)/builds/modules.mk
d171 2
a172 2
# `$(TOP_DIR)/include/freetype'.  $(BASE_H), $(CACHE_H), and $(CONFIG_H) are
# defined similarly.
d181 3
a183 2
              $(wildcard $(BUILD_DIR)/freetype/config/*.h)
CACHE_H    := $(wildcard $(CACHE_DIR)/*.h)
d186 1
a186 1
FREETYPE_H := $(PUBLIC_H) $(BASE_H) $(CONFIG_H) $(CACHE_H) $(DEVEL_H)
d191 1
a191 3
ifndef FTSYS_SRC
  FTSYS_SRC = $(BASE_DIR)/ftsystem.c
endif
d193 1
a193 1
FTSYS_OBJ = $(OBJ_DIR)/ftsystem.$O
d203 1
a203 3
ifndef FTDEBUG_SRC
  FTDEBUG_SRC = $(BASE_DIR)/ftdebug.c
endif
d205 1
a205 1
FTDEBUG_OBJ = $(OBJ_DIR)/ftdebug.$O
d215 2
a216 1
include $(wildcard $(SRC_DIR)/*/rules.mk)
d235 1
a235 1
$(FTINIT_OBJ): $(FTINIT_SRC) $(FREETYPE_H) $(FT_MODULE_LIST)
d239 1
a239 1
# All FreeType library objects
d241 2
a242 5
#   By default, we include the base layer extensions.  These could be
#   omitted on builds which do not want them.
#
OBJ_M = $(BASE_OBJ_M) $(BASE_EXT_OBJ) $(DRV_OBJS_M)
OBJ_S = $(BASE_OBJ_S) $(BASE_EXT_OBJ) $(DRV_OBJS_S)
d264 2
d270 3
d274 1
d277 1
a277 1
               --title=FreeType-2.1.8                \
d282 1
d307 1
a307 1
	-$(DELETE) $(subst /,\,$(OBJ)/*.$O $(CLEAN) $(NO_OUTPUT))
d313 1
a313 1
.PHONY: remove_config_mk
d320 5
d334 1
a334 1
distclean: distclean_project remove_config_mk
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d6 1
a6 1
# Copyright 1996-2000, 2001, 2002, 2003, 2004, 2005, 2006 by
d24 1
a24 1
#                  e.g. `$(TOP_DIR)/builds/unix'.  Added to INCLUDES also.
d33 1
a33 3
#
#   DEVEL_DIR      Development directory which is added to the INCLUDES
#                  variable before the standard include directories.
d45 3
a47 3
#   FTMODULE_H     The file which contains the list of module classes for
#                  the current build.  Usually, this is automatically
#                  created by `modules.mk'.
d102 1
d106 3
a108 1
DOC_DIR ?= $(TOP_DIR)/docs/reference
d118 1
a118 1
#                 before the standard include list.  Porters are then able to
d123 1
a123 3
INCLUDES := $(subst /,$(COMPILER_SEP),$(OBJ_DIR) \
                                      $(DEVEL_DIR) \
                                      $(BUILD_DIR) \
d126 1
a126 1
INCLUDE_FLAGS := $(INCLUDES:%=$I%)
d136 1
a136 19
# Note what we also define the macro FT2_BUILD_LIBRARY when building
# FreeType.  This is required to let our sources include the internal
# headers (something forbidden by clients).
#
# Finally, we define FT_CONFIG_MODULES_H so that the compiler uses the
# generated version of `ftmodule.h' in $(OBJ_DIR).  If there is an
# `ftoption.h' files in $(OBJ_DIR), define FT_CONFIG_OPTIONS_H too.
#
ifneq ($(wildcard $(OBJ_DIR)/ftoption.h),)
  FTOPTION_H    := $(OBJ_DIR)/ftoption.h
  FTOPTION_FLAG := $DFT_CONFIG_OPTIONS_H="<ftoption.h>"
endif

FT_CFLAGS  = $(CPPFLAGS) \
             $(INCLUDE_FLAGS) \
             $(CFLAGS) \
             $DFT2_BUILD_LIBRARY \
             $DFT_CONFIG_MODULES_H="<ftmodule.h>" \
             $(FTOPTION_FLAG)
d141 1
a141 1
# Include the `exports' rules file.
d143 1
a143 1
include $(TOP_DIR)/builds/exports.mk
d152 2
a153 2
# `$(TOP_DIR)/include/freetype'.  $(BASE_H), and $(CONFIG_H) are defined
# similarly.
d162 2
a163 3
              $(wildcard $(BUILD_DIR)/freetype/config/*.h) \
              $(FTMODULE_H) \
              $(FTOPTION_H)
d166 1
a166 1
FREETYPE_H := $(PUBLIC_H) $(BASE_H) $(CONFIG_H) $(DEVEL_H)
d171 3
a173 1
FTSYS_SRC ?= $(BASE_DIR)/ftsystem.c
d175 1
a175 1
FTSYS_OBJ := $(OBJ_DIR)/ftsystem.$O
d185 3
a187 1
FTDEBUG_SRC ?= $(BASE_DIR)/ftdebug.c
d189 1
a189 1
FTDEBUG_OBJ := $(OBJ_DIR)/ftdebug.$O
d199 1
a199 2
include $(SRC_DIR)/base/rules.mk
include $(patsubst %,$(SRC_DIR)/%/rules.mk,$(MODULES))
d218 1
a218 1
$(FTINIT_OBJ): $(FTINIT_SRC) $(FREETYPE_H)
d222 4
a225 1
# All FreeType library objects.
d227 2
a228 2
OBJ_M := $(BASE_OBJ_M) $(BASE_EXT_OBJ) $(DRV_OBJS_M)
OBJ_S := $(BASE_OBJ_S) $(BASE_EXT_OBJ) $(DRV_OBJS_S)
a249 2
dll: $(PROJECT_LIBRARY) exported_symbols

a253 26
ifneq ($(findstring refdoc,$(MAKECMDGOALS)),)
  # poor man's `sed' emulation with make's built-in string functions
  work := $(strip $(shell $(CAT) $(PUBLIC_DIR)/freetype.h))
  work := $(subst |,x,$(work))
  work := $(subst $(space),|,$(work))
  work := $(subst \#define|FREETYPE_MAJOR|,$(space),$(work))
  work := $(word 2,$(work))
  major := $(subst |,$(space),$(work))
  major := $(firstword $(major))

  work := $(subst \#define|FREETYPE_MINOR|,$(space),$(work))
  work := $(word 2,$(work))
  minor := $(subst |,$(space),$(work))
  minor := $(firstword $(minor))

  work := $(subst \#define|FREETYPE_PATCH|,$(space),$(work))
  work := $(word 2,$(work))
  patch := $(subst |,$(space),$(work))
  patch := $(firstword $(patch))

  version := $(major).$(minor).$(patch)
endif

# We write-protect the docmaker directory to suppress generation
# of .pyc files.
#
a254 1
	-chmod -w $(SRC_DIR)/tools/docmaker
d257 1
a257 1
               --title=FreeType-$(version)           \
a261 1
	-chmod +w $(SRC_DIR)/tools/docmaker
d286 1
a286 1
	-$(DELETE) $(subst /,\,$(OBJ_DIR)/*.$O $(CLEAN) $(NO_OUTPUT))
d292 1
a292 1
.PHONY: remove_config_mk remove_ftmodule_h
a298 5
# Remove module list (used for distclean).
#
remove_ftmodule_h:
	-$(DELETE) $(subst /,$(SEP),$(FTMODULE_H) $(NO_OUTPUT))

d308 1
a308 1
distclean: distclean_project remove_config_mk remove_ftmodule_h
@


1.1.1.2
log
@SECURITY: Import freetype 2.3.6. From the release notes:

    - A  bunch of  potential security  problems have  been found.  All
      users should update.
@
text
@d6 1
a6 1
# Copyright 1996-2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008 by
d330 1
a330 1
	-$(DELETE) $(subst /,$(SEP),$(OBJ_DIR)/*.$O $(CLEAN) $(NO_OUTPUT))
d333 1
a333 1
	-$(DELETE) $(subst /,$(SEP),$(PROJECT_LIBRARY) $(DISTCLEAN) $(NO_OUTPUT))
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d6 1
a6 1
# Copyright 1996-2000, 2001, 2002, 2003, 2004, 2005, 2006 by
d24 1
a24 1
#                  e.g. `$(TOP_DIR)/builds/unix'.  Added to INCLUDES also.
d33 1
a33 3
#
#   DEVEL_DIR      Development directory which is added to the INCLUDES
#                  variable before the standard include directories.
d45 3
a47 3
#   FTMODULE_H     The file which contains the list of module classes for
#                  the current build.  Usually, this is automatically
#                  created by `modules.mk'.
d102 1
d106 3
a108 1
DOC_DIR ?= $(TOP_DIR)/docs/reference
d118 1
a118 1
#                 before the standard include list.  Porters are then able to
d123 1
a123 3
INCLUDES := $(subst /,$(COMPILER_SEP),$(OBJ_DIR) \
                                      $(DEVEL_DIR) \
                                      $(BUILD_DIR) \
d126 1
a126 1
INCLUDE_FLAGS := $(INCLUDES:%=$I%)
d136 1
a136 19
# Note what we also define the macro FT2_BUILD_LIBRARY when building
# FreeType.  This is required to let our sources include the internal
# headers (something forbidden by clients).
#
# Finally, we define FT_CONFIG_MODULES_H so that the compiler uses the
# generated version of `ftmodule.h' in $(OBJ_DIR).  If there is an
# `ftoption.h' files in $(OBJ_DIR), define FT_CONFIG_OPTIONS_H too.
#
ifneq ($(wildcard $(OBJ_DIR)/ftoption.h),)
  FTOPTION_H    := $(OBJ_DIR)/ftoption.h
  FTOPTION_FLAG := $DFT_CONFIG_OPTIONS_H="<ftoption.h>"
endif

FT_CFLAGS  = $(CPPFLAGS) \
             $(INCLUDE_FLAGS) \
             $(CFLAGS) \
             $DFT2_BUILD_LIBRARY \
             $DFT_CONFIG_MODULES_H="<ftmodule.h>" \
             $(FTOPTION_FLAG)
d141 1
a141 1
# Include the `exports' rules file.
d143 1
a143 1
include $(TOP_DIR)/builds/exports.mk
d152 2
a153 2
# `$(TOP_DIR)/include/freetype'.  $(BASE_H), and $(CONFIG_H) are defined
# similarly.
d162 2
a163 3
              $(wildcard $(BUILD_DIR)/freetype/config/*.h) \
              $(FTMODULE_H) \
              $(FTOPTION_H)
d166 1
a166 1
FREETYPE_H := $(PUBLIC_H) $(BASE_H) $(CONFIG_H) $(DEVEL_H)
d171 3
a173 1
FTSYS_SRC ?= $(BASE_DIR)/ftsystem.c
d175 1
a175 1
FTSYS_OBJ := $(OBJ_DIR)/ftsystem.$O
d185 3
a187 1
FTDEBUG_SRC ?= $(BASE_DIR)/ftdebug.c
d189 1
a189 1
FTDEBUG_OBJ := $(OBJ_DIR)/ftdebug.$O
d199 1
a199 2
include $(SRC_DIR)/base/rules.mk
include $(patsubst %,$(SRC_DIR)/%/rules.mk,$(MODULES))
d218 1
a218 1
$(FTINIT_OBJ): $(FTINIT_SRC) $(FREETYPE_H)
d222 1
a222 1
# All FreeType library objects.
d224 5
a228 2
OBJ_M := $(BASE_OBJ_M) $(BASE_EXT_OBJ) $(DRV_OBJS_M)
OBJ_S := $(BASE_OBJ_S) $(BASE_EXT_OBJ) $(DRV_OBJS_S)
a249 2
dll: $(PROJECT_LIBRARY) exported_symbols

a253 3
# We write-protect the docmaker directory to suppress generation
# of .pyc files.
#
a254 1
	-chmod -w $(SRC_DIR)/tools/docmaker
d257 1
a257 1
               --title=FreeType-2.2.1                \
a261 1
	-chmod +w $(SRC_DIR)/tools/docmaker
d286 1
a286 1
	-$(DELETE) $(subst /,\,$(OBJ_DIR)/*.$O $(CLEAN) $(NO_OUTPUT))
d292 1
a292 1
.PHONY: remove_config_mk remove_ftmodule_h
a298 5
# Remove module list (used for distclean).
#
remove_ftmodule_h:
	-$(DELETE) $(subst /,$(SEP),$(FTMODULE_H) $(NO_OUTPUT))

d308 1
a308 1
distclean: distclean_project remove_config_mk remove_ftmodule_h
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d6 1
a6 1
# Copyright 1996-2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008 by
d171 1
a171 1
# `$(TOP_DIR)/include/freetype'.  $(INTERNAL_H), and $(CONFIG_H) are defined
d178 1
a178 1
INTERNAL_H := $(wildcard $(INTERNAL_DIR)/*.h) \
d186 1
a186 1
FREETYPE_H := $(PUBLIC_H) $(INTERNAL_H) $(CONFIG_H) $(DEVEL_H)
a269 23
ifneq ($(findstring refdoc,$(MAKECMDGOALS)),)
  # poor man's `sed' emulation with make's built-in string functions
  work := $(strip $(shell $(CAT) $(PUBLIC_DIR)/freetype.h))
  work := $(subst |,x,$(work))
  work := $(subst $(space),|,$(work))
  work := $(subst \#define|FREETYPE_MAJOR|,$(space),$(work))
  work := $(word 2,$(work))
  major := $(subst |,$(space),$(work))
  major := $(firstword $(major))

  work := $(subst \#define|FREETYPE_MINOR|,$(space),$(work))
  work := $(word 2,$(work))
  minor := $(subst |,$(space),$(work))
  minor := $(firstword $(minor))

  work := $(subst \#define|FREETYPE_PATCH|,$(space),$(work))
  work := $(word 2,$(work))
  patch := $(subst |,$(space),$(work))
  patch := $(firstword $(patch))

  version := $(major).$(minor).$(patch)
endif

d277 1
a277 1
               --title=FreeType-$(version)           \
d307 1
a307 1
	-$(DELETE) $(subst /,$(SEP),$(OBJ_DIR)/*.$O $(CLEAN) $(NO_OUTPUT))
d310 1
a310 1
	-$(DELETE) $(subst /,$(SEP),$(PROJECT_LIBRARY) $(DISTCLEAN) $(NO_OUTPUT))
@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d6 1
a6 1
# Copyright 1996-2016 by
d119 2
a120 2
#                 in the `builds/<system>' directory, as these files will
#                 override the default sources.
a128 8
ifdef DEVEL_DIR
  # We assume that all library dependencies for FreeType are fulfilled for a
  # development build, so we directly access the necessary include directory
  # information using `pkg-config'.
  INCLUDE_FLAGS += $(shell pkg-config --cflags libpng \
                                               harfbuzz )
endif

a149 2
# `CPPFLAGS' might be specified by the user in the environment.
#
d151 1
d156 2
d181 1
a181 1
              $(wildcard $(BUILD_DIR)/config/*.h) \
a188 2
FT_COMPILE := $(CC) $(ANSIFLAGS) $(INCLUDE_FLAGS) $(FT_CFLAGS)

d264 28
d293 2
a294 1
# Option `-B' disables generation of .pyc files (available since python 2.6)
d297 9
a305 7
	python -B $(SRC_DIR)/tools/docmaker/docmaker.py \
                  --prefix=ft2                          \
                  --title=FreeType-$(version)           \
                  --output=$(DOC_DIR)                   \
                  $(PUBLIC_DIR)/*.h                     \
                  $(PUBLIC_DIR)/config/*.h              \
                  $(PUBLIC_DIR)/cache/*.h
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
