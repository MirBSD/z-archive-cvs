head	1.4;
access;
symbols
	freetype-2_7_1:1.1.115.4
	freetype-2_3_12:1.1.115.3
	freetype-2_3_6:1.1.1.1
	MIRBSD_10_BASE:1.3
	freetype-2_3_5:1.1.1.1
	freetype-2_2_1:1.1.115.2
	freetype-2_1_8:1.1.115.1
	freetype:1.1.115
	MIRBSD_9_BASE:1.1.103.1
	MIRBSD_8:1.1.103.1.0.2
	MIRBSD_8_BASE:1.1.103.1
	xf-4_5_0:1.1.103.1
	xwindow:1.1.103;
locks; strict;
comment	@# @;


1.4
date	2017.04.15.19.20.42;	author tg;	state Exp;
branches;
next	1.3;
commitid	10058F2723111C7BEE2;

1.3
date	2008.02.26.20.04.34;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	10047C470A72A1E13CE;

1.2
date	2006.06.29.18.47.10;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A420410DBFB162;

1.1
date	2005.03.18.10.43.01;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.103.1
	1.1.115.1;
next	;

1.1.1.1
date	2008.02.26.19.52.10;	author bsiegert;	state Exp;
branches;
next	;
commitid	10047C46DB5081DCD79;

1.1.103.1
date	2005.03.18.10.43.01;	author tg;	state Exp;
branches;
next	;

1.1.115.1
date	2006.06.29.18.34.29;	author tg;	state Exp;
branches;
next	1.1.115.2;
commitid	10044A41D276963C97B;

1.1.115.2
date	2006.06.29.18.37.55;	author tg;	state Exp;
branches;
next	1.1.115.3;
commitid	10044A41DBD6368BED5;

1.1.115.3
date	2013.08.06.19.12.10;	author tg;	state Exp;
branches;
next	1.1.115.4;
commitid	10052014A9975CEFD1D;

1.1.115.4
date	2017.04.15.15.41.44;	author tg;	state Exp;
branches;
next	;
commitid	10058F23F4858079E1C;


desc
@@


1.4
log
@first cut at a quickmerge
@
text
@How to customize the compilation of the library
===============================================

  FreeType  is highly  customizable  to fit  various  needs, and  this
  document  describes  how  it  is  possible  to  select  options  and
  components at compilation time.


I. Configuration macros

  The  file `include/freetype/config/ftoption.h'  contains a  list  of
  commented configuration macros that can  be toggled by developers to
  indicate which features should be active while building the library.

  These  options range  from debug  level to  availability  of certain
  features,   like  native   TrueType  hinting   through   a  bytecode
  interpreter.

  We  invite you  to read  this file  for more  information.   You can
  change the  file's content to suit  your needs, or  override it with
  one of the techniques described below.


II. Modules list

  If you  use GNU make  please edit the top-level  file `modules.cfg'.
  It contains a  list of available FreeType modules  and extensions to
  be compiled.  Change it to suit your own preferences.  Be aware that
  certain modules  depend on  others, as described  in the  file.  GNU
  make  uses `modules.cfg'  to  generate `ftmodule.h'  (in the  object
  directory).

  If you build FreeType in a directory separate from the source files,
  put your  customized `modules.cfg' in  that directory; that  way you
  can keep the source files `clean'.

  If  you don't  use  GNU make  you  have to  manually  edit the  file
  `include/freetype/config/ftmodule.h' (which  is *not* used  with  if
  compiled with GNU make) to add  or remove the drivers and components
  you want  to compile into  the library.  See `INSTALL.ANY'  for more
  information.


III. System interface

  FreeType's  default interface to  the system  (i.e., the  parts that
  deal  with  memory  management   and  i/o  streams)  is  located  in
  `src/base/ftsystem.c'.

  The current  implementation uses standard C library  calls to manage
  memory  and to read  font files.   It is  however possible  to write
  custom implementations to suit specific systems.

  To  tell the  GNU Make-based  build system  to use  a  custom system
  interface, you have to  define the environment variable FTSYS_SRC to
  point to the relevant implementation:

    on Unix:

      ./configure <your options>
      export FTSYS_SRC=foo/my_ftsystem.c
      make
      make install

    on Windows:

      make setup <compiler>
      set FTSYS_SRC=foo/my_ftsystem.c
      make


IV. Overriding default configuration and module headers

  It  is possible  to override  the default  configuration  and module
  headers without  changing the original files.  There  are three ways
  to do that:


  1. With GNU make

    [This is actually a combination of method 2 and 3.]

    Just put your custom `ftoption.h'  file into the objects directory
    (normally `<topdir>/objs' if you build  in the source tree, or the
    directory where  you invoke configure  if you build in  a separate
    directory), which GNU make prefers over the standard location.  No
    action  is  needed  for   `ftmodule.h'  because  it  is  generated
    automatically in the objects directory.

  2. Using the C include path

    Use the  C include path  to ensure that  your own versions  of the
    files are used at compile time when the lines

      #include FT_CONFIG_OPTIONS_H
      #include FT_CONFIG_MODULES_H

    are      compiled.       Their      default      values      being
    <freetype/config/ftoption.h> and <freetype/config/ftmodule.h>, you
    can do something like:

      custom/
        config/
          ftoption.h      => custom options header
          ftmodule.h      => custom modules list

      include/            => normal FreeType 2 include
        ...

    then change the C include path to always give the path to `custom'
    before the FreeType 2 `include'.


  3. Redefining FT_CONFIG_OPTIONS_H and FT_CONFIG_MODULES_H

    Another way to do the same thing is to redefine the macros used to
    name  the configuration  headers.  To  do  so, you  need a  custom
    `ft2build.h' whose content can be as simple as:

      #ifndef FT2_BUILD_MY_PLATFORM_H_
      #define FT2_BUILD_MY_PLATFORM_H_

      #define FT_CONFIG_OPTIONS_H  <custom/my-ftoption.h>
      #define FT_CONFIG_MODULES_H  <custom/my-ftmodule.h>

      #include <freetype/config/ftheader.h>

      #endif /* FT2_BUILD_MY_PLATFORM_H_ */

    Place those files in a separate directory, e.g.,

      custom/
        ft2build.h           => custom version described above
        my-ftoption.h        => custom options header
        my-ftmodule.h        => custom modules list header

    and change  the C include path  to ensure that  `custom' is always
    placed before the FT2 `include' during compilation.

----------------------------------------------------------------------

Copyright 2003-2016 by
David Turner, Robert Wilhelm, and Werner Lemberg.

This  file is  part of  the FreeType  project, and  may only  be used,
modified,  and distributed  under the  terms of  the  FreeType project
license,  LICENSE.TXT.  By  continuing to  use, modify,  or distribute
this file you  indicate that you have read  the license and understand
and accept it fully.


--- end of CUSTOMIZE ---
@


1.3
log
@Merge freetype 2.3.5, all conflicts automatically resolved
@
text
@d11 3
a13 4
  The  file found  in `include/freetype/config/ftoption.h'  contains a
  list  of  commented configuration  macros  that  can  be toggled  by
  developers  to  indicate  which  features  should  be  active  while
  building the library.
d33 4
d38 2
a39 2
  `include/freetype/config/ftmodule.h'  (which is  *not* used  with if
  compiled with GNU make) to  add or remove the drivers and components
d83 6
a88 5
    Just put your custom  `ftoption.h' file into the objects directory
    (normally  `<topdir>/objs'),  which  GNU  make  prefers  over  the
    standard location.   No action is needed  for `ftmodule.h' because
    it is generated automatically in the objects directory.

d103 3
a105 4
        freetype/
          config/
            ftoption.h    => custom options header
            ftmodule.h    => custom modules list
d108 1
a108 2
        freetype/
          ...
d120 2
a121 2
      #ifndef __FT2_BUILD_MY_PLATFORM_H__
      #define __FT2_BUILD_MY_PLATFORM_H__
d128 1
a128 1
      #endif /* __FT2_BUILD_MY_PLATFORM_H__ */
d142 1
a142 1
Copyright 2003, 2005, 2006 by
@


1.2
log
@automerge freetype 2.2.1
@
text
@d15 1
a15 1
  
d19 1
a19 1
  
d24 1
a24 1
  
d46 1
a46 1
  
d54 1
a54 1
  
d61 1
a61 1
   
d67 2
a68 2
     
     
d87 1
a87 1
  
d90 1
a90 1
    
d103 1
a103 1
             
d113 1
a113 1
  
d117 1
a117 1
   
d127 1
a127 1
   
d129 1
a129 1
   
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
How to customize the compilation of the library:
================================================
d4 3
a6 3
  FreeType  is  highly  customizable  to  fit various  needs,  and  this
  document describes how it is possible to select options and components
  at compilation time.
d11 12
a22 10
  The file found in "include/freetype/config/ftoption.h" contains a list
  of commented configuration macros that can be toggled by developers to
  indicate which features should be active while building the library.
  
  These  options  range from  debug  level  to  availability of  certain
  features, like native TrueType hinting through a bytecode interpreter.
  
  We invite you to read this  file for more information.  You can change
  the file's content to suit your  needs, or override it with one of the
  techniques described below.
d27 12
a38 10
  The file found in "include/freetype/config/ftmodule.h" contains a list
  of  names  corresponding  to  the  modules  and  font  drivers  to  be
  statically compiled in the FreeType library during the build.

  You can change it to suit your own preferences.  Be aware that certain
  modules depend  on others, as  described by the file  "modules.txt" in
  this directory.

  You can modify  the file's content to suit your  needs, or override it
  at compile time with one of the methods described below.
d43 7
a49 7
  FreeType's default interface to the  system (i.e., the parts that deal
  with   memory   management   and    i/o   streams)   is   located   in
  "src/base/ftsystem.c".
  
  The  current implementation uses  standard C  library calls  to manage
  memory and to read font files.  It is however possible to write custom
  implementations to suit specific systems.
d51 2
a52 2
  To  tell  the GNU  Make-based  build system  to  use  a custom  system
  interface, you  have to define  the environment variable  FTSYS_SRC to
d71 13
a83 3
  It  is  possible to  override  the  default  configuration and  module
  headers without changing the original files.  There are two ways to do
  that:
d86 1
a86 1
  1. Using the C include path
d88 2
a89 2
    Use the C include path to ensure that your own versions of the files
    are used at compile time when the lines
d91 2
a92 2
       #include FT_CONFIG_OPTIONS_H
       #include FT_CONFIG_MODULES_H
d94 2
a95 2
    are       compiled.       Their      default       values      being
    <freetype/config/ftoption.h>  and  <freetype/config/ftmodule.h>, you
d98 5
a102 5
       custom/
         freetype/
           config/
             ftoption.h    => custom options header
             ftmodule.h    => custom modules list
d104 3
a106 3
       include/            => normal FreeType 2 include
         freetype/
           ...
d108 2
a109 2
    then change the  C include path to always give  the path to "custom"
    before the FreeType 2 "include".
d112 1
a112 1
  2. Re-defining FT_CONFIG_OPTIONS_H and FT_CONFIG_MODULES_H
d114 3
a116 3
    Another way to  do the same thing is to redefine  the macros used to
    name  the  configuration headers.   To  do  so,  you need  a  custom
    "ft2build.h" whose content can be as simple as:
d128 1
a128 1
    Place those files in a separate directory, e.g.:
d135 13
a147 2
    and  change the C  include path  to ensure  that "custom"  is always
    placed before the FT2 "include" during compilation.
@


1.1.1.1
log
@Import freetype-2.3.5 into the X11 tree. This is a recommended security
update for everyone.
@
text
@d1 2
a2 2
How to customize the compilation of the library
===============================================
d4 3
a6 3
  FreeType  is highly  customizable  to fit  various  needs, and  this
  document  describes  how  it  is  possible  to  select  options  and
  components at compilation time.
d11 10
a20 12
  The  file found  in `include/freetype/config/ftoption.h'  contains a
  list  of  commented configuration  macros  that  can  be toggled  by
  developers  to  indicate  which  features  should  be  active  while
  building the library.

  These  options range  from debug  level to  availability  of certain
  features,   like  native   TrueType  hinting   through   a  bytecode
  interpreter.

  We  invite you  to read  this file  for more  information.   You can
  change the  file's content to suit  your needs, or  override it with
  one of the techniques described below.
d22 2
d25 7
a31 1
II. Modules list
d33 2
a34 12
  If you  use GNU make  please edit the top-level  file `modules.cfg'.
  It contains a  list of available FreeType modules  and extensions to
  be compiled.  Change it to suit your own preferences.  Be aware that
  certain modules  depend on  others, as described  in the  file.  GNU
  make  uses `modules.cfg'  to  generate `ftmodule.h'  (in the  object
  directory).

  If  you don't  use  GNU make  you  have to  manually  edit the  file
  `include/freetype/config/ftmodule.h'  (which is  *not* used  with if
  compiled with GNU make) to  add or remove the drivers and components
  you want  to compile into  the library.  See `INSTALL.ANY'  for more
  information.
d39 7
a45 7
  FreeType's  default interface to  the system  (i.e., the  parts that
  deal  with  memory  management   and  i/o  streams)  is  located  in
  `src/base/ftsystem.c'.

  The current  implementation uses standard C library  calls to manage
  memory  and to read  font files.   It is  however possible  to write
  custom implementations to suit specific systems.
d47 2
a48 2
  To  tell the  GNU Make-based  build system  to use  a  custom system
  interface, you have to  define the environment variable FTSYS_SRC to
d50 1
a50 1

d57 1
a57 1

d63 2
a64 2


d67 3
a69 16
  It  is possible  to override  the default  configuration  and module
  headers without  changing the original files.  There  are three ways
  to do that:


  1. With GNU make

    [This is actually a combination of method 2 and 3.]

    Just put your custom  `ftoption.h' file into the objects directory
    (normally  `<topdir>/objs'),  which  GNU  make  prefers  over  the
    standard location.   No action is needed  for `ftmodule.h' because
    it is generated automatically in the objects directory.


  2. Using the C include path
a70 2
    Use the  C include path  to ensure that  your own versions  of the
    files are used at compile time when the lines
d72 7
a78 2
      #include FT_CONFIG_OPTIONS_H
      #include FT_CONFIG_MODULES_H
d80 2
a81 2
    are      compiled.       Their      default      values      being
    <freetype/config/ftoption.h> and <freetype/config/ftmodule.h>, you
d84 20
a103 20
      custom/
        freetype/
          config/
            ftoption.h    => custom options header
            ftmodule.h    => custom modules list

      include/            => normal FreeType 2 include
        freetype/
          ...

    then change the C include path to always give the path to `custom'
    before the FreeType 2 `include'.


  3. Redefining FT_CONFIG_OPTIONS_H and FT_CONFIG_MODULES_H

    Another way to do the same thing is to redefine the macros used to
    name  the configuration  headers.  To  do  so, you  need a  custom
    `ft2build.h' whose content can be as simple as:

d113 3
a115 3

    Place those files in a separate directory, e.g.,

d121 2
a122 13
    and change  the C include path  to ensure that  `custom' is always
    placed before the FT2 `include' during compilation.

----------------------------------------------------------------------

Copyright 2003, 2005, 2006 by
David Turner, Robert Wilhelm, and Werner Lemberg.

This  file is  part of  the FreeType  project, and  may only  be used,
modified,  and distributed  under the  terms of  the  FreeType project
license,  LICENSE.TXT.  By  continuing to  use, modify,  or distribute
this file you  indicate that you have read  the license and understand
and accept it fully.
@


1.1.115.1
log
@re-base freetype 2.1.8
@
text
@@


1.1.115.2
log
@Import Freetype 2.2.1 with a bunch of security fixes
@
text
@d1 2
a2 2
How to customize the compilation of the library
===============================================
d4 3
a6 3
  FreeType  is highly  customizable  to fit  various  needs, and  this
  document  describes  how  it  is  possible  to  select  options  and
  components at compilation time.
d11 10
a20 12
  The  file found  in `include/freetype/config/ftoption.h'  contains a
  list  of  commented configuration  macros  that  can  be toggled  by
  developers  to  indicate  which  features  should  be  active  while
  building the library.
  
  These  options range  from debug  level to  availability  of certain
  features,   like  native   TrueType  hinting   through   a  bytecode
  interpreter.
  
  We  invite you  to read  this file  for more  information.   You can
  change the  file's content to suit  your needs, or  override it with
  one of the techniques described below.
d25 10
a34 12
  If you  use GNU make  please edit the top-level  file `modules.cfg'.
  It contains a  list of available FreeType modules  and extensions to
  be compiled.  Change it to suit your own preferences.  Be aware that
  certain modules  depend on  others, as described  in the  file.  GNU
  make  uses `modules.cfg'  to  generate `ftmodule.h'  (in the  object
  directory).

  If  you don't  use  GNU make  you  have to  manually  edit the  file
  `include/freetype/config/ftmodule.h'  (which is  *not* used  with if
  compiled with GNU make) to  add or remove the drivers and components
  you want  to compile into  the library.  See `INSTALL.ANY'  for more
  information.
d39 7
a45 7
  FreeType's  default interface to  the system  (i.e., the  parts that
  deal  with  memory  management   and  i/o  streams)  is  located  in
  `src/base/ftsystem.c'.
  
  The current  implementation uses standard C library  calls to manage
  memory  and to read  font files.   It is  however possible  to write
  custom implementations to suit specific systems.
d47 2
a48 2
  To  tell the  GNU Make-based  build system  to use  a  custom system
  interface, you have to  define the environment variable FTSYS_SRC to
d67 3
a69 13
  It  is possible  to override  the default  configuration  and module
  headers without  changing the original files.  There  are three ways
  to do that:


  1. With GNU make

    [This is actually a combination of method 2 and 3.]

    Just put your custom  `ftoption.h' file into the objects directory
    (normally  `<topdir>/objs'),  which  GNU  make  prefers  over  the
    standard location.   No action is needed  for `ftmodule.h' because
    it is generated automatically in the objects directory.
d72 1
a72 1
  2. Using the C include path
d74 2
a75 2
    Use the  C include path  to ensure that  your own versions  of the
    files are used at compile time when the lines
d77 2
a78 2
      #include FT_CONFIG_OPTIONS_H
      #include FT_CONFIG_MODULES_H
d80 2
a81 2
    are      compiled.       Their      default      values      being
    <freetype/config/ftoption.h> and <freetype/config/ftmodule.h>, you
d84 5
a88 5
      custom/
        freetype/
          config/
            ftoption.h    => custom options header
            ftmodule.h    => custom modules list
d90 3
a92 3
      include/            => normal FreeType 2 include
        freetype/
          ...
d94 2
a95 2
    then change the C include path to always give the path to `custom'
    before the FreeType 2 `include'.
d98 1
a98 1
  3. Redefining FT_CONFIG_OPTIONS_H and FT_CONFIG_MODULES_H
d100 3
a102 3
    Another way to do the same thing is to redefine the macros used to
    name  the configuration  headers.  To  do  so, you  need a  custom
    `ft2build.h' whose content can be as simple as:
d114 1
a114 1
    Place those files in a separate directory, e.g.,
d121 2
a122 13
    and change  the C include path  to ensure that  `custom' is always
    placed before the FT2 `include' during compilation.

----------------------------------------------------------------------

Copyright 2003, 2005, 2006 by
David Turner, Robert Wilhelm, and Werner Lemberg.

This  file is  part of  the FreeType  project, and  may only  be used,
modified,  and distributed  under the  terms of  the  FreeType project
license,  LICENSE.TXT.  By  continuing to  use, modify,  or distribute
this file you  indicate that you have read  the license and understand
and accept it fully.
@


1.1.115.3
log
@we need newer freetype for advance calculation
@
text
@d15 1
a15 1

d19 1
a19 1

d24 1
a24 1

d46 1
a46 1

d54 1
a54 1

d61 1
a61 1

d67 2
a68 2


d87 1
a87 1

d90 1
a90 1

d103 1
a103 1

d113 1
a113 1

d117 1
a117 1

d127 1
a127 1

d129 1
a129 1

@


1.1.115.4
log
@let’s see whether we can’t update freetype2 as well…
@
text
@d11 4
a14 3
  The  file `include/freetype/config/ftoption.h'  contains a  list  of
  commented configuration macros that can  be toggled by developers to
  indicate which features should be active while building the library.
a33 4
  If you build FreeType in a directory separate from the source files,
  put your  customized `modules.cfg' in  that directory; that  way you
  can keep the source files `clean'.

d35 2
a36 2
  `include/freetype/config/ftmodule.h' (which  is *not* used  with  if
  compiled with GNU make) to add  or remove the drivers and components
d80 5
a84 6
    Just put your custom `ftoption.h'  file into the objects directory
    (normally `<topdir>/objs' if you build  in the source tree, or the
    directory where  you invoke configure  if you build in  a separate
    directory), which GNU make prefers over the standard location.  No
    action  is  needed  for   `ftmodule.h'  because  it  is  generated
    automatically in the objects directory.
d99 4
a102 3
        config/
          ftoption.h      => custom options header
          ftmodule.h      => custom modules list
d105 2
a106 1
        ...
d118 2
a119 2
      #ifndef FT2_BUILD_MY_PLATFORM_H_
      #define FT2_BUILD_MY_PLATFORM_H_
d126 1
a126 1
      #endif /* FT2_BUILD_MY_PLATFORM_H_ */
d140 1
a140 1
Copyright 2003-2016 by
@


1.1.103.1
log
@Import XFree86 4.5.0 directly from vendor anoncvs, -rxf-4_5_0 xc
at anoncvs@@anoncvs.xfree86.org:/cvs (ssh)
@
text
@@
