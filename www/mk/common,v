head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2018.08.29.02.54.14;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005B860AE947EF4509;

1.10
date	2018.05.01.21.15.51;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005AE8D9012C91B17D;

1.9
date	2018.04.15.20.48.05;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005AD3BA6F3868DD95;

1.8
date	2014.11.12.20.06.57;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005463BDDE645A377E;

1.7
date	2014.01.24.18.44.39;	author tg;	state Exp;
branches;
next	1.6;
commitid	10052E2B46F74883EA5;

1.6
date	2013.11.30.13.47.58;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005299ECA72CD68650;

1.5
date	2013.11.30.13.19.55;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005299E60E70DE9AC4;

1.4
date	2012.07.15.13.06.14;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005002C04076F77A15;

1.3
date	2009.10.31.17.02.38;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004AEC6DB33733AAE1;

1.2
date	2008.07.24.13.09.38;	author tg;	state Exp;
branches;
next	1.1;
commitid	10048887F203CB94359;

1.1
date	2007.06.09.23.29.53;	author tg;	state Exp;
branches;
next	;
commitid	100466B37F0373CAEA0;


desc
@@


1.11
log
@add fast/inline XHTML escape function
@
text
@rcsid_common='$MirOS: www/mk/common,v 1.10 2018/05/01 21:15:51 tg Exp $'
#-
# Copyright © 2007, 2008, 2012, 2013, 2014, 2018
#	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un‐
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.

# RFC 2396 and some optional characters _plus_ apostrophe
# -> escapes all shell meta-characters as well
function uri_escape {
	if (( $# )); then
		print -nr -- "$@@"
	else
		cat
	fi | sed -e '
	    s.%.%25.g
	    s.;.%3B.g
	    s./.%2F.g
	    s.?.%3F.g
	    s.:.%3A.g
	    s.@@.%40.g
	    s.&.%26.g
	    s.=.%3D.g
	    s.+.%2B.g
	    s.\$.%24.g
	    s.,.%2C.g
	    s.	.%09.g
	    s. .%20.g
	    s.<.%3C.g
	    s.>.%3E.g
	    s.#.%23.g
	    s.".%22.g
	    s.{.%7B.g
	    s.}.%7D.g
	    s.|.%7C.g
	    s.\\.%5C.g
	    s.\^.%5E.g
	    s.\[.%5B.g
	    s.\].%5D.g
	    s.`.%60.g
	    s.'\''.%27.g
	'
}

# escape XHTML characters (three mandatory XML ones plus double quotes,
# the latter in an XML safe fashion numerically though)
function xhtml_escape {
	if (( $# )); then
		print -nr -- "$@@"
	else
		cat
	fi | sed \
	    -e 's&\&amp;g' \
	    -e 's<\&lt;g' \
	    -e 's>\&gt;g' \
	    -e 's"\&#34;g'
}

# same as valsub avoiding fork
function xhtml_fesc {
	REPLY=${1//'&'/'&amp;'}
	REPLY=${REPLY//'<'/'&lt;'}
	REPLY=${REPLY//'>'/'&gt;'}
	REPLY=${REPLY//'"'/'&#34;'}
}

# escape string into JSON string (with surrounding quotes)
function json_escape {
	[[ -o utf8-mode ]]; local u=$?
	set -U
	local o=\" s
	if (( $# )); then
		read -raN-1 s <<<"$*"
		unset s[${#s[*]}-1]
	else
		read -raN-1 s
	fi
	local -i i=0 n=${#s[*]} wc
	local -Uui16 -Z7 x
	local -i1 ch

	while (( i < n )); do
		(( ch = x = wc = s[i++] ))
		case $wc {
		(8) o+=\\b ;;
		(9) o+=\\t ;;
		(10) o+=\\n ;;
		(12) o+=\\f ;;
		(13) o+=\\r ;;
		(34) o+=\\\" ;;
		(92) o+=\\\\ ;;
		(*)
			if (( wc < 0x20 || wc > 0xFFFD || \
			    (wc >= 0xD800 && wc <= 0xDFFF) || \
			    (wc > 0x7E && wc < 0xA0) )); then
				o+=\\u${x#16#}
			else
				o+=${ch#1#}
			fi
			;;
		}
	done
	(( u )) && set +U
	print -nr -- "$o\""
}

# escape ampersands for sed (pipe only: post-processing)
function sed_escape {
	local REPLY=$1

	REPLY=${REPLY//\\/\\\\}
	REPLY=${REPLY//[&]/\\&}
	REPLY=${REPLY//$'\n'/\\n}
	print -nr -- "$REPLY"
}

# filter stdin into an HTML/XHTML JavaScript block
function script_escape {
	print -r -- "<script type=\"text/javascript\"><!--//--><![CDATA[//><!--"
	print -r -- "$(cat)"
	print -r -- "//--><!]]></script>"
}

# filter stdin into an HTML/XHTML inline CSS block
function css_escape {
	print -r -- "<style type=\"text/css\"><!--/*--><![CDATA[/*><!--*/"
	print -r -- "$(cat)"
	print -r -- "/*]]>*/--></style>"
}

# magic from MirOS: src/kern/c/mirtime.c,v 1.3 2011/11/20 23:40:10 tg Exp $

# struct tm members and (POSIX) time functions
typeset -ir tm_sec=0		# seconds [0-59]
typeset -ir tm_min=1		# minutes [0-59]
typeset -ir tm_hour=2		# hours [0-23]
typeset -ir tm_mday=3		# day of month [1-31]
typeset -ir tm_mon=4		# month of year - 1 [0-11]
typeset -ir tm_year=5		# year - 1900
typeset -ir tm_wday=6		# day of week [0 = sunday]	input:ignored
typeset -ir tm_yday=7		# day of year [0-365]		input:ignored
typeset -ir tm_isdst=8		# summer time act.? [0/1] (0)	input:ignored
typeset -ir tm_gmtoff=9		# seconds offset from UTC (0)
typeset -ir tm_zone=10		# abbrev. of timezone ("UTC")	input:ignored

set -A mirtime_months -- Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
set -A mirtime_wdays -- Sun Mon Tue Wed Thu Fri Sat
readonly mirtime_months[*] mirtime_wdays[*]

# $ timet2mjd posix_timet
# ⇒ mjd sec
function timet2mjd {
	local -i10 mjd=$1 sec

	(( sec = mjd % 86400 ))
	(( mjd = (mjd / 86400) + 40587 ))
	while (( sec < 0 )); do
		(( --mjd ))
		(( sec += 86400 ))
	done

	print -- $mjd $sec
}

# $ mjd2timet mjd sec
# ⇒ posix_timet
function mjd2timet {
	local -i10 t=$1 sec=$2

	(( t = (t - 40587) * 86400 + sec ))
	print -- $t
}

# $ mjd_explode mjd sec
# ⇒ tm_sec tm_min tm_hour tm_mday tm_mon tm_year \
#   tm_wday tm_yday "0" "0" "UTC"
function mjd_explode {
	local tm
	set -A tm
	local -i10 sec=$2 day yday mon year=$1

	while (( sec < 0 )); do
		(( --year ))
		(( sec += 86400 ))
	done
	while (( sec >= 86400 )); do
		(( ++year ))
		(( sec -= 86400 ))
	done

	(( day = year % 146097 + 678881 ))
	(( year = 4 * ((year / 146097) + (day / 146097)) ))
	(( day %= 146097 ))
	(( tm[tm_wday] = (day + 3) % 7 ))
	if (( day == 146096 )); then
		(( year += 3 ))
		(( day = 36524 ))
	else
		(( year += day / 36524 ))
		(( day %= 36524 ))
	fi
	(( year = 4 * ((year * 25) + (day / 1461)) ))
	(( day %= 1461 ))
	(( yday = (day < 306) ? 1 : 0 ))
	if (( day == 1460 )); then
		(( year += 3 ))
		(( day = 365 ))
	else
		(( year += day / 365 ))
		(( day %= 365 ))
	fi
	(( yday += day ))
	(( day *= 10 ))
	(( mon = (day + 5) / 306 ))
	(( day = ((day + 5) % 306) / 10 ))
	if (( mon >= 10 )); then
		(( mon -= 10 ))
		(( yday -= 306 ))
		(( ++year ))
	else
		(( mon += 2 ))
		(( yday += 59 ))
	fi
	(( tm[tm_sec] = sec % 60 ))
	(( sec /= 60 ))
	(( tm[tm_min] = sec % 60 ))
	(( tm[tm_hour] = sec / 60 ))
	(( tm[tm_mday] = day + 1 ))
	(( tm[tm_mon] = mon ))
	(( tm[tm_year] = (year < 1 ? year - 1 : year) - 1900 ))
	(( tm[tm_yday] = yday ))
	(( tm[tm_isdst] = 0 ))
	(( tm[tm_gmtoff] = 0 ))
	tm[tm_zone]=UTC

	print -r -- "${tm[@@]}"
}

# $ mjd_implode tm_sec tm_min tm_hour tm_mday tm_mon tm_year \
#   ignored ignored ignored tm_gmtoff [ignored]
# ⇒ mjd sec
function mjd_implode {
	local tm
	set -A tm -- "$@@"
	local -i10 day x y sec

	(( sec = tm[tm_sec] + 60 * tm[tm_min] + 3600 * tm[tm_hour] - \
	    tm[tm_gmtoff] ))
	(( (day = tm[tm_year] + 1900) < 0 )) && (( ++day ))
	(( y = day % 400 ))
	(( day = (day / 400) * 146097 - 678882 + tm[tm_mday] ))
	while (( sec < 0 )); do
		(( --day ))
		(( sec += 86400 ))
	done
	while (( sec >= 86400 )); do
		(( ++day ))
		(( sec -= 86400 ))
	done
	(( x = tm[tm_mon] ))
	while (( x < 0 )); do
		(( --y ))
		(( x += 12 ))
	done
	(( y += x / 12 ))
	(( x %= 12 ))
	if (( x < 2 )); then
		(( x += 10 ))
		(( --y ))
	else
		(( x -= 2 ))
	fi
	(( day += (306 * x + 5) / 10 ))
	while (( y < 0 )); do
		(( day -= 146097 ))
		(( y += 400 ))
	done
	(( day += 146097 * (y / 400) ))
	(( y %= 400 ))
	(( day += 365 * (y % 4) ))
	(( y /= 4 ))
	(( day += 1461 * (y % 25) + 36524 * (y / 25) ))

	print -- $day $sec
}

# convenience function to check (German) date input (no time-of-day)
# input is $2, MJD is written to $$1, normalised date to $$3 if $3 is set
function dtchk {
	local tm mjd x saveIFS r iso=1 to
	set -A tm
	set -A mjd
	set -A x
	local -i10 -Z2 ra rb rc
	local -i10 -Z4 ry

	errstr="'$2' not in YYYY-MM-DD (ISO 8601) or DD.MM.YYYY (obsolete German) format"
	if [[ $2 = +([0-9]).+([0-9]).+([0-9]) ]]; then
		iso=0
	elif [[ $2 != +([0-9])-+([0-9])-+([0-9]) ]]; then
		return 1
	fi
	saveIFS=$IFS
	IFS=.-
	set -A x -- $2
	IFS=$saveIFS
	set -A tm -- 0 0 0 $((x[2])) $((x[1] - 1)) $((x[0] - 1900)) - - - 0 -

	if (( !iso )); then
		tm[3]=$((x[0]))
		tm[5]=$((x[2] - 1900))
	fi

	set -A mjd -- $(mjd_implode "${tm[@@]}")
	set -A x -- $(mjd_explode "${mjd[0]}" 0)

	(( ra = x[3] ))
	(( rb = x[4] + 1 ))
	(( ry = x[5] + 1900 ))
	if (( iso )); then
		to=$ry-$rb-$ra
	else
		to=$ra.$rb.$ry
	fi

	(( ra = x[2] ))
	(( rb = x[1] ))
	(( rc = x[0] ))

	errstr="invalid date $2, normalises to $to $ra:$rb:$rc"
	[[ ${tm[0]} = ${x[0]} ]] || return 1
	[[ ${tm[1]} = ${x[1]} ]] || return 1
	[[ ${tm[2]} = ${x[2]} ]] || return 1
	errstr="bogus date $2, normalises to $to"
	[[ ${tm[3]} = ${x[3]} ]] || return 1
	[[ ${tm[4]} = ${x[4]} ]] || return 1
	[[ ${tm[5]} = ${x[5]} ]] || return 1
	errstr=
	nameref r=$1
	r=${mjd[0]}
	if [[ -n $3 ]]; then
		nameref rr=$3
		rr=$to
	fi
	return 0
}

common_read=1
@


1.10
log
@switch to ISO 8601 dates:
• parse both obsolete German-format (dd.mm.YYYY) and ISO 8601 dates
• emit ISO 8601-format dates o̲n̲l̲y̲
@
text
@d1 1
a1 1
rcsid_common='$MirOS: www/mk/common,v 1.9 2018/04/15 20:48:05 tg Exp $'
d72 8
@


1.9
log
@+
@
text
@d1 1
a1 1
rcsid_common='$MirOS: www/mk/common,v 1.7 2014/01/24 18:44:39 tg Exp $'
d295 1
a295 1
	local tm mjd x saveIFS r
d299 2
d302 6
a307 2
	errstr="'$2' not in DD.MM.YYYY format"
	[[ $2 = +([0-9]).+([0-9]).+([0-9]) ]] || return 1
d309 1
a309 1
	IFS=.
d312 7
a318 2
	set -A tm -- 0 0 0 $((x[0])) $((x[1] - 1)) $((x[2] - 1900)) \
	    - - - 0 -
d321 15
a335 1
	errstr="invalid date $2, normalises to $((x[3])).$((x[4] + 1)).$((x[5] + 1900)) ${x[2]}:${x[1]}:${x[0]}"
d339 1
a339 1
	errstr="bogus date $2, normalises to $((x[3])).$((x[4] + 1)).$((x[5] + 1900))"
d348 1
a348 6
		local -i10 -Z2 rd rm
		local -i10 -Z4 ry
		(( rd = x[3] ))
		(( rm = x[4] + 1 ))
		(( ry = x[5] + 1900 ))
		rr="$rd.$rm.$ry"
@


1.8
log
@wtf: fix is/ist (more to do); small updates; tech update from Teckids repo
@
text
@d3 1
a3 1
# Copyright © 2007, 2008, 2012, 2013, 2014
d122 14
@


1.7
log
@merge stuff from externally maintained instance
@
text
@d1 1
a1 1
rcsid_common='$MirOS: www/mk/common,v 1.6 2013/11/30 13:47:58 tg Exp $'
d114 6
a119 1
	sed -e 's&\\\&g'
@


1.6
log
@merge from Teckids git
@
text
@d1 1
a1 1
rcsid_common='$MirOS: www/mk/common,v 1.5 2013/11/30 13:19:55 tg Exp $'
d3 1
a3 1
# Copyright © 2007, 2008, 2012
d273 41
@


1.5
log
@add code to JSON escape a string
@
text
@d1 1
a1 1
rcsid_common='$MirOS: www/mk/common,v 1.4 2012/07/15 13:06:14 tg Exp $'
d272 2
@


1.4
log
@mirtime handling in C except POSIXly correct

(just dont write your wlog entries on a leap second, or in/after the year 2038)
@
text
@d1 1
a1 1
rcsid_common='$MirOS: www/mk/common,v 1.3 2009/10/31 17:02:38 tg Exp $'
d72 40
@


1.3
log
@another case of auto-generated text pictures, plus test cases
@
text
@d1 1
a1 1
rcsid_common='$MirOS: www/mk/common,v 1.2 2008/07/24 13:09:38 tg Exp $'
d3 2
a4 2
# Copyright (c) 2007, 2008
#	Thorsten Glaser <tg@@mirbsd.de>
d8 1
a8 1
# is granted to deal in this work without restriction, including un-
d12 1
a12 1
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
d19 1
a19 1
# of said person's immediate fault when using the work as intended.
d76 156
@


1.2
log
@add better rcs ids, copyright, etc.
@
text
@d1 1
a1 1
rcsid_common='$MirOS: www/mk/common,v 1.1 2007/06/09 23:29:53 tg Exp $'
d24 5
a28 1
	print -nr -- "$*" | sed -e '
d57 19
@


1.1
log
@switch to the new website system, keeping legacy content around
@
text
@d1 1
a1 1
# $MirOS: www/mk/common,v 1.1 2007/06/03 20:23:20 tg Exp $
d3 1
a3 1
# Copyright (c) 2007
@

