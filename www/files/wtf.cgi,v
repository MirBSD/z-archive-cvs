head	1.24;
access;
symbols;
locks; strict;
comment	@# @;


1.24
date	2018.12.26.00.06.03;	author tg;	state Exp;
branches;
next	1.23;
commitid	1005C22C60368994BC5;

1.23
date	2018.08.10.02.54.24;	author tg;	state Exp;
branches;
next	1.22;
commitid	1005B6CFE0B5BDFE404;

1.22
date	2017.07.01.01.25.32;	author tg;	state Exp;
branches;
next	1.21;
commitid	1005956FA1863583E00;

1.21
date	2017.02.25.17.45.35;	author tg;	state Exp;
branches;
next	1.20;
commitid	10058B1C2C70A356153;

1.20
date	2016.11.19.19.30.51;	author tg;	state Exp;
branches;
next	1.19;
commitid	1005830A84F7D9B4323;

1.19
date	2015.12.27.02.25.09;	author tg;	state Exp;
branches;
next	1.18;
commitid	100567F4C05672768BA;

1.18
date	2015.11.14.21.47.12;	author tg;	state Exp;
branches;
next	1.17;
commitid	1005647ABEF4763C068;

1.17
date	2015.11.14.21.08.25;	author tg;	state Exp;
branches;
next	1.16;
commitid	1005647A2C53E11ADD9;

1.16
date	2015.10.21.20.23.13;	author tg;	state Exp;
branches;
next	1.15;
commitid	1005627F43679373DF7;

1.15
date	2015.07.19.11.15.15;	author tg;	state Exp;
branches;
next	1.14;
commitid	10055AB86D70218CEB4;

1.14
date	2015.03.14.01.09.22;	author tg;	state Exp;
branches;
next	1.13;
commitid	10055038A4A0941829E;

1.13
date	2015.03.13.21.06.40;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005503516D22CEA1DD;

1.12
date	2014.07.15.20.52.09;	author tg;	state Exp;
branches;
next	1.11;
commitid	10053C59488096050AA;

1.11
date	2014.07.01.21.14.54;	author tg;	state Exp;
branches;
next	1.10;
commitid	10053B324D8241E4A22;

1.10
date	2014.07.01.21.14.03;	author tg;	state Exp;
branches;
next	1.9;
commitid	10053B324A76EEF18F9;

1.9
date	2014.05.31.18.48.31;	author tg;	state Exp;
branches;
next	1.8;
commitid	100538A23AC1F0E4500;

1.8
date	2012.08.18.04.48.47;	author tg;	state Exp;
branches;
next	1.7;
commitid	100502F1EC472260F60;

1.7
date	2012.05.20.13.29.21;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004FB8F1C92A5335D5;

1.6
date	2012.05.15.20.39.33;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004FB2BF1879000FF6;

1.5
date	2012.05.15.20.37.31;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004FB2BE9D04663CF1;

1.4
date	2012.05.15.20.34.09;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004FB2BDD336A7FE69;

1.3
date	2012.05.15.20.21.21;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004FB2BACF0ED3B61B;

1.2
date	2012.05.15.20.18.46;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004FB2BA2C264D657A;

1.1
date	2012.05.15.20.10.10;	author tg;	state Exp;
branches;
next	;
commitid	1004FB2B839725FAB28;


desc
@@


1.24
log
@more cleanup
@
text
@#!/usr/bin/perl -T
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.22 2017/07/01 01:25:32 tg Exp $';
#-
# Copyright © 2012, 2014, 2015, 2017
#	mirabilos <m@@mirbsd.org>
# Copyright © 2017
#	<RT|Chatzilla> via IRC
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un‐
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.
#-
# Implementation of MirBSD wtf(1) as CGI

use strict;
use warnings;

use File::Basename qw(dirname);
my ($mydir) = (dirname($0) =~ /(.*)/);	# untaint

use File::Spec::Functions qw(catfile);
my $db = catfile($mydir, 'acronyms');
my $template = catfile($mydir, 'wtf.htm');
if ((-r $db) && (-r $template) &&
    (open(TEMPLATE, $template)) &&
    (open(ACRONYMS, $db))) {
	undef $mydir;
} else {
	print "Status: 500 Internal Script Error\r\n";
	print "Content-Type: text/plain\r\n\r\n";
	print "Cannot read acronyms database '" . $db .
	    "' or template '" . $template . "'!\r\n";
	exit(1);
}

my $output = "";
my $query = "";
my @@results = ();

if (defined($ENV{QUERY_STRING})) {
	for my $p (split(/[;&]+/, $ENV{QUERY_STRING})) {
		next unless $p;
		$p =~ y/+/ /;
		my ($key, $val) = split(/=/, $p, 2);
		next unless defined($key);

		next unless ($key eq "q");
		next unless defined($val);
		$val =~ s/%([0-9A-Fa-f][0-9A-Fa-f])/chr(hex($1))/eg;
		next if $val =~ /[\t\r\n]/;
		$query = $val;
	}
	if ($query eq "") {
		my $p = $ENV{QUERY_STRING};
		$p =~ y/+/ /;
		$p =~ s/%([0-9A-Fa-f][0-9A-Fa-f])/chr(hex($1))/eg;
		next if $p =~ /[\t\r\n]/;
		$query = $p;
	}
}

# ltrim and rtrim
$query =~ s/^\s+//;
$query =~ s/\s+$//;

sub tohtml {
	local ($_) = @@_;

	s/&/&#38;/g;
	s/</&#60;/g;
	s/>/&#62;/g;
	s/\"/&#34;/g;

	return $_;
}

my $acrcsid = "";

if ($query ne "") {
	my $enc = tohtml($query);

	# uppercase search term
	$query =~ y/a-z/A-Z/;
	# specific full stop removal rule
	$query =~ y/.//d if $query =~ /[A-Z]\./;

	my $line = <ACRONYMS>;		# grab first line from acronyms file
	$line =~ s/^\s+|\s+$//g;	# trim both ends
	my @@pairs = split / /, $line;	# split space-separated pairs
	foreach $a (@@pairs){
		# split slash-separated word pair
		my @@pair = split /\//, $a;
		# manual UCS uppercasing
		$query =~ s/$pair[0]/$pair[1]/g;
	}

	# now search for the term (and the DB version)
	foreach my $line (<ACRONYMS>) {
		chomp($line);
		if ($line =~ /^ \@@\(\#\)(.*)$/) {
			$acrcsid = $1;
		}
		if ($line =~ /^\Q$query	\E(.*)$/) {
			push(@@results, $1);
		}
		# TODO: if past matches, abort the loop
	}

	if (@@results > 0) {
		$output = "<h2>Results for " . tohtml($query) . "</h2>\n<ul>\n";
		foreach my $r (@@results) {
			$output .= " <li>" . tohtml($r) . "</li>\n";
		}
		$output .= "</ul>\n";
	} else {
		$output = "<h2>No results</h2>\n<p>Gee… I don’t know what “" .
		    tohtml($query) . "” means…</p>\n";
	}

	$output .= "<p>\n <a href=\"man.cgi?" . $enc .
	    "\">Manual page lookup for: " . $enc . "</a>\n</p>\n";

	$output .= "<form accept-charset=\"utf-8\" " .
	    "action=\"https://duckduckgo.com/?kp=-1&#38;kl=wt-wt&#38;kb=t&#38;kh=1&#38;kj=g2&#38;km=l&#38;ka=monospace&#38;ku=1&#38;ko=s&#38;k1=-1&#38;kv=1&#38;t=debian\" " .
	    "method=\"post\"><p>\n <input type=\"hidden\" name=\"q\" value=\"" .
	    $enc . " acronym\" /><input type=\"submit\" value=\"Web search: " .
	    $enc . "\" />\n</p></form>\n<p>DuckDuckGo is a search engine " .
	    "with more privacy and lots of\n features. This search is " .
	    "external content, not part of MirBSD.</p>";
}
close(ACRONYMS);

print "Content-Type: text/html; charset=utf-8\r\n\r\n";
foreach my $line (<TEMPLATE>) {
	chomp($line);
	if ($line eq '<!-- wtf-result -->') {
		$line = $output;
	}
	if ($line =~ /rcsdiv.*rcsid/) {
		$line =~ s!\Q</p>\E! by <span class=\"rcsid\">$rcsid</span>$&!;
		if ($acrcsid ne "") {
			$line =~ s!\Q</p>\E! from <span class=\"rcsid\">$acrcsid</span>$&!;
		}
	}
	if ($line =~ /^<.head><body/) {
		$line = '</head><body>';
	}
	print $line . "\n";
}
close(TEMPLATE);
exit(0);
@


1.23
log
@same as in commitid 1005B6CF36E3932B560, plus assorted cleanup
@
text
@d140 1
a140 1
	    "external content, not part of MirOS.</p>";
@


1.22
log
@drop the onload for the page with search results, allows quick enter+space
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.21 2017/02/25 17:45:35 tg Exp $';
d104 1
a104 1
		# manual Unicode uppercasing
@


1.21
log
@parse Unicode uppercasing from acronyms file, from RT via IRC, 10x
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.16 2015/10/21 20:23:13 tg Exp $';
d156 3
@


1.20
log
@update hardcoded UCASE$ map to acronyms,v 1.598

XXX why is this still hardcoded? I don’t know enough Perl to fix
XXX this (to use the table from the acronyms file); free commit
XXX for you Benny! ;-)
@
text
@d4 1
a4 1
# Copyright © 2012, 2014, 2015
d6 2
d93 1
d95 1
a96 72
	$query =~ s/à/À/g;
	$query =~ s/á/Á/g;
	$query =~ s/ä/Ä/g;
	$query =~ s/å/Å/g;
	$query =~ s/æ/Æ/g;
	$query =~ s/ç/Ç/g;
	$query =~ s/è/È/g;
	$query =~ s/é/É/g;
	$query =~ s/í/Í/g;
	$query =~ s/ð/Ð/g;
	$query =~ s/ñ/Ñ/g;
	$query =~ s/ó/Ó/g;
	$query =~ s/ö/Ö/g;
	$query =~ s/ø/Ø/g;
	$query =~ s/ü/Ü/g;
	$query =~ s/þ/Þ/g;
	$query =~ s/ą/Ą/g;
	$query =~ s/ć/Ć/g;
	$query =~ s/ĉ/Ĉ/g;
	$query =~ s/č/Č/g;
	$query =~ s/đ/Đ/g;
	$query =~ s/ę/Ę/g;
	$query =~ s/ĝ/Ĝ/g;
	$query =~ s/ĥ/Ĥ/g;
	$query =~ s/ĵ/Ĵ/g;
	$query =~ s/ł/Ł/g;
	$query =~ s/ń/Ń/g;
	$query =~ s/ś/Ś/g;
	$query =~ s/ŝ/Ŝ/g;
	$query =~ s/š/Š/g;
	$query =~ s/ŭ/Ŭ/g;
	$query =~ s/ź/Ź/g;
	$query =~ s/ż/Ż/g;
	$query =~ s/ž/Ž/g;
	$query =~ s/α/Α/g;
	$query =~ s/ε/Ε/g;
	$query =~ s/κ/Κ/g;
	$query =~ s/λ/Λ/g;
	$query =~ s/ο/Ο/g;
	$query =~ s/π/Π/g;
	$query =~ s/ς/Σ/g;
	$query =~ s/σ/Σ/g;
	$query =~ s/υ/Υ/g;
	$query =~ s/а/А/g;
	$query =~ s/б/Б/g;
	$query =~ s/в/В/g;
	$query =~ s/г/Г/g;
	$query =~ s/д/Д/g;
	$query =~ s/е/Е/g;
	$query =~ s/з/З/g;
	$query =~ s/и/И/g;
	$query =~ s/й/Й/g;
	$query =~ s/к/К/g;
	$query =~ s/л/Л/g;
	$query =~ s/м/М/g;
	$query =~ s/н/Н/g;
	$query =~ s/о/О/g;
	$query =~ s/п/П/g;
	$query =~ s/р/Р/g;
	$query =~ s/с/С/g;
	$query =~ s/т/Т/g;
	$query =~ s/у/У/g;
	$query =~ s/ф/Ф/g;
	$query =~ s/х/Х/g;
	$query =~ s/ц/Ц/g;
	$query =~ s/ш/Ш/g;
	$query =~ s/э/Э/g;
	$query =~ s/ю/Ю/g;
	$query =~ s/қ/Қ/g;
	$query =~ s/ա/Ա/g;
	$query =~ s/հ/Հ/g;
	$query =~ s/յ/Յ/g;
d98 11
d117 1
@


1.19
log
@hardcode acronyms,v 1.529 casemapping list, I still don’t know enough Perl to parse it from the file
@
text
@d127 1
d129 1
d132 1
d135 1
d138 1
d143 1
d150 1
d156 5
@


1.18
log
@fixup new-style RCS ID detection; drop old-style one
@
text
@d93 2
d96 4
a99 4
	$query =~ s/ö/Ö/g;
	$query =~ s/ü/Ü/g;
	$query =~ s/ñ/Ñ/g;
	$query =~ s/á/Á/g;
d102 2
d105 48
a152 2
	$query =~ s/ç/Ç/g;
	$query =~ s/è/È/g;
@


1.17
log
@support new-style (to be committed soon) RCS IDs in acronyms database

XXX both raw.cgi and wtf.cgi need to be changed to new-style ucase parsing
@
text
@d106 1
a106 4
		if ($line =~ /^\$MirOS: /) {
			$acrcsid = $line;
		}
		if ($line =~ /^\Q@@(#)\E(.*)$/) {
@


1.16
log
@new wtf(1) feature: replace 'z.B.' with 'ZB' for lookup but keep morse working
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.14 2015/03/14 01:09:22 tg Exp $';
d109 3
@


1.15
log
@don’t generally web-search
@
text
@d5 1
a5 1
#	mirabilos <tg@@mirbsd.org>
d92 1
@


1.14
log
@couple more things
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.11 2014/07/01 21:14:54 tg Exp $';
d5 1
a5 1
#	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
d127 7
a133 3
	$output .= "<p>\n <input type=\"hidden\" name=\"q\" value=\"" . $enc .
	    " acronym\" /><input type=\"submit\" value=\"Web lookup for: " .
	    $enc . "\" />";
a137 1
my $state = 0;
d140 1
a140 5
	if ($line eq '<!-- wtf-result begin -->') {
		$state = 1 unless $query eq "";
		next;
	}
	if ($line eq '<!-- wtf-result end -->') {
a141 1
		$state = 0;
d149 1
a149 1
	print $line . "\n" unless $state;
@


1.13
log
@display RCS ID of the acronyms DB in the output, too
@
text
@d4 2
a5 2
# Copyright © 2012, 2014
#	Thorsten Glaser <tg@@mirbsd.org>
d95 7
@


1.12
log
@some updates; also trim() $query in the CGIs
@
text
@d86 2
d98 3
d140 3
@


1.11
log
@do not use tr on multibyte values in Perl
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.9 2014/05/31 18:48:31 tg Exp $';
d71 4
@


1.10
log
@do not use uc() since we want this to only work on A-Z to match shell
@
text
@d86 3
a88 1
	$query =~ y/äöü/ÄÖÜ/;
@


1.9
log
@• more acronyms, from SO/SE
• missing obsd rcsid sync
• plug double-quote escaping in man.cgi
• add man.cgi link for wtf.cgi results (XXX better, display results inline,
  except for the direct render, ofc)
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.8 2012/08/18 04:48:47 tg Exp $';
d85 1
a85 1
	$query = uc($query);
@


1.8
log
@more, mostly from fanfic again
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.7 2012/05/20 13:29:21 tg Exp $';
d4 1
a4 1
# Copyright © 2012
d77 2
a84 1
	$enc =~ s/\"/&#34;/g;
d106 3
@


1.7
log
@ddg search for "$keyword acronym" gives good results, change the fallback to use it
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.6 2012/05/15 20:39:33 tg Exp $';
d85 1
a85 1
	$query =~ y/äü/ÄÜ/;
@


1.6
log
@fix for empty QUERY_STRING
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.5 2012/05/15 20:37:31 tg Exp $';
d106 1
a106 1
	    "\" /><input type=\"submit\" value=\"Search the web for: " .
@


1.5
log
@attempt to make it easier (more code sharing)
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.4 2012/05/15 20:34:09 tg Exp $';
d116 2
a117 1
		$state = 1;
@


1.4
log
@add quickie to web search
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.3 2012/05/15 20:21:21 tg Exp $';
d105 1
a105 2
	$output .= "<form action=\"https://duckduckgo.com/?kp=-1&#38;kl=wt-wt&#38;kb=t&#38;kh=1&#38;kj=g2&#38;km=l&#38;ka=monospace&#38;ku=1&#38;ko=s&#38;k1=-1&#38;kv=1&#38;t=debian\" method=\"post\">" .
	    "<p><input type=\"hidden\" name=\"q\" value=\"" . $enc .
d107 1
a107 1
	    $enc . "\" /></p></form>\n";
d115 1
a115 1
	if ($line eq '<!-- wtf-begin -->') {
d118 1
a118 1
	if ($line eq '<!-- wtf-result -->') {
@


1.3
log
@despite me not knowing any Perl, this looks right for the lookup part
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.2 2012/05/15 20:18:46 tg Exp $';
d113 1
d116 3
d120 2
a121 2
		print $output;
		next;
d126 1
a126 1
	print $line . "\n";
@


1.2
log
@get the duckduckgo part right: action cannot contain ? if method=get
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: www/files/wtf.cgi,v 1.1 2012/05/15 20:10:10 tg Exp $';
d86 7
a92 1
	#…
@


1.1
log
@add first experimental draft of a wtf(1) CGI
@
text
@d2 1
a2 1
my $rcsid = '$MirOS: src/share/misc/licence.template,v 1.28 2008/11/14 15:33:44 tg Rel $';
d99 1
a99 1
	$output .= "<form action=\"https://duckduckgo.com/?kp=-1&#38;kl=wt-wt&#38;kb=t&#38;kh=1&#38;kj=g2&#38;km=l&#38;ka=monospace&#38;ku=1&#38;ko=s&#38;k1=-1&#38;kv=1&#38;t=debian\" method=\"get\">" .
@

