head	1.26;
access;
symbols;
locks; strict;
comment	@# @;


1.26
date	2015.12.09.14.26.20;	author tg;	state Exp;
branches;
next	1.25;
commitid	10056683A19534CDB03;

1.25
date	2015.10.09.14.55.10;	author tg;	state Exp;
branches;
next	1.24;
commitid	1005617D55A108AE790;

1.24
date	2015.10.09.14.51.36;	author tg;	state Exp;
branches;
next	1.23;
commitid	1005617D3BD0B50DF7C;

1.23
date	2011.06.11.21.43.58;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004DF3E19F66DE2805;

1.22
date	2008.08.06.06.29.34;	author tg;	state Exp;
branches;
next	1.21;
commitid	100489944D76752A05A;

1.21
date	2008.08.05.06.10.33;	author tg;	state Exp;
branches;
next	1.20;
commitid	1004897EEDE3BCA4CFA;

1.20
date	2008.08.05.06.07.33;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004897EE14797653E9;

1.19
date	2008.08.04.10.15.11;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004896D6B10D86EA0D;

1.18
date	2008.07.03.18.35.09;	author tg;	state Exp;
branches;
next	1.17;
commitid	100486D1BF0010E9523;

1.17
date	2008.07.03.18.09.36;	author tg;	state Exp;
branches;
next	1.16;
commitid	100486D15E35EC6CA32;

1.16
date	2008.07.03.17.32.16;	author tg;	state Exp;
branches;
next	1.15;
commitid	100486D0D2A68EE39F6;

1.15
date	2008.07.03.17.24.31;	author tg;	state Exp;
branches;
next	1.14;
commitid	100486D0B5B4793FDFD;

1.14
date	2006.09.21.00.12.24;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004511D8F951C137D5;

1.13
date	2006.09.21.00.11.37;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004511D8CD6A7D6C0F;

1.12
date	2006.09.21.00.08.12;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004511D7FE55A6CA7B;

1.11
date	2006.09.21.00.04.49;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004511D72E17149604;

1.10
date	2005.12.18.17.05.43;	author tg;	state Exp;
branches;
next	1.9;
commitid	10043A596F5566D1C68;

1.9
date	2005.12.15.01.57.44;	author tg;	state Exp;
branches;
next	1.8;
commitid	10043A0CD900728D29D;

1.8
date	2005.12.06.03.11.40;	author tg;	state Exp;
branches;
next	1.7;
commitid	70554395015a9795;

1.7
date	2005.12.06.02.04.33;	author tg;	state Exp;
branches;
next	1.6;
commitid	8214394f1c7c9c9;

1.6
date	2005.12.06.02.03.05;	author tg;	state Exp;
branches;
next	1.5;
commitid	463c4394f16a97b8;

1.5
date	2005.12.06.00.29.59;	author tg;	state Exp;
branches;
next	1.4;
commitid	e174394db940dc6;

1.4
date	2005.12.05.23.20.32;	author tg;	state Exp;
branches;
next	1.3;
commitid	6fd4394cb533534;

1.3
date	2005.12.05.23.17.24;	author tg;	state Exp;
branches;
next	1.2;
commitid	16e94394ca94edf3;

1.2
date	2005.12.05.23.09.28;	author tg;	state Exp;
branches;
next	1.1;
commitid	2be34394c8b8839e;

1.1
date	2005.12.05.21.25.09;	author tg;	state Exp;
branches;
next	;
commitid	49854394b01a7fd0;


desc
@@


1.26
log
@adjust per <20151209111821.GA13100@@home.ouaza.com> (I hope I don’t need
to add even more extra headers this way)
@
text
@#!/bin/mksh
# $MirOS: CVSROOT/mklogtag,v 1.25 2015/10/09 14:55:10 tg Exp $
#-
# Copyright (c) 2005, 2006, 2011, 2015
#	mirabilos <m@@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.
#-
# Log cvs 1.12 tagging operations in the same manner mklogci does it
# for regular file operations.

export LC_ALL=C
unset LANGUAGE

SHELL=$(whence -p mksh) || SHELL=/bin/mksh
id=$1
shift
if [[ -z $id || $id = @@(-|%I) ]]; then
	if (( PGRP )); then
		id=$PGRP	# mksh pre-R24 or post-R33
	else
		id=$(perl -e 'print getpgrp();' 2>&-) || id=
	fi
	if [[ -z $id || $id -eq 0 ]]; then
		print -u2 Cannot determine PGRP, upgrade mksh or check
		print -u2 your \$PATH for perl.
		exit 255
	fi
	cidline=0
elif [[ $id != +([0-9A-Za-z]) ]]; then
	cidline=0
else
	cidline=1
fi

function die {
	print -ru2 Error: "$@@"
	rm $repo/.tmp/cl.*.$id
	exit 1
}

function getdirs {
	local dir=$1
	integer i

	[[ -s $repo/.tmp/cl.dirs.$id ]] || return 0
	set -A dirnames
	set -A dircounts
	integer dircounts
	. $repo/.tmp/cl.dirs.$id
	i=0
	while (( i < ${#dirnames[*]} )); do
		[[ ${dirnames[i]} = $dir ]] && break
		let i++
	done
	(( i < ${#dirnames[*]} )) || return 0	# not found
	(( dircounts[i] )) || return 0		# count zero

	let dircounts[i]--
	if (( !dircounts[i] )); then
		unset dircounts[i]
		unset dirnames[i]
	fi
	set -A dirnames -- "${dirnames[@@]}"
	set -A dircounts -- "${dircounts[@@]}"

	(( ${#dirnames[*]} )) || return 0	# none left
	ln="set -A dirnames --"
	lc="set -A dircounts"
	i=0
	while (( i < ${#dirnames[*]} )); do
		ln="$ln '${dirnames[i]}'"
		lc="$lc ${dircounts[i]}"
		let i++
	done
	print -r -- "$ln$nl$lc" >$repo/.tmp/cl.dirs.$id
	return 1				# some left
}


rcpt=
logf=
op=
branch=
tag=$3
repo=$4
dir=$5
cloguri=NO
replyto=NO
set -A files
set -A fold
set -A fnew
opt_done=0
opt_pts=0
let i=0
nl='
'

[[ -d $repo/.tmp/. ]] || die temporary directory "($repo/.tmp)" does not exist

[[ -e $repo/.tmp/do-dump ]] && {
	local argv
	set -A argv -- "$0" "$@@"
	print "BEGIN calling information for commit $id"
	integer i=0
	while (( i < ${#argv[*]} )); do
		print -nr -- "[$i]<${argv[i++]}> "
	done
	print
	print "END calling information (no stdin)"
} | logger -t "CVS:dump"

F=$repo/.tmp/cl.tag.$id
T=$repo/.tmp/cl.tagend.$id

getdirs "$repo/$dir"
leave=$?

case $1 {
(add)	op=Adding	;;
(mov)	op=Moving	;;
(del)	op=Deleting	;;
(*)	die check usage	;;
}
shift

case $1 {
([Tt])	branch=branch ;;
([Nn])	branch=static ;;
}
shift

[[ -z $tag || -z $repo || -z $dir ]] && die check usage
shift; shift; shift
module=${dir%%/*}
if [[ $module = $dir ]]; then
	dir=.
else
	dir=${dir#*/}
fi

while (( $# > 0 )); do
	if [[ $1 = -m && $opt_done = 0 ]]; then
		rcpt="$rcpt $2"
		shift; shift
	elif [[ $1 = -P && $opt_done = 0 ]]; then
		opt_pts=1
		rcpt="$rcpt dispatch+${2}_vcs@@tracker.debian.org"
		shift; shift
	elif [[ $1 = -f && $opt_done = 0 ]]; then
		logf=$2
		shift; shift;
	elif [[ $1 = -I && $opt_done = 0 ]]; then
		cloguri=$2
		shift; shift;
	elif [[ $1 = -R && $opt_done = 0 ]]; then
		replyto=$2
		shift; shift;
	else
		opt_done=1
		files[i]=$1
		fold[i]=$2
		fnew[i]=$3
		shift; shift; shift
		let ++i
	fi
done

(( i )) || exit 0

let j=0
while (( j < i )); do
	print -- "${fold[j]}\t${fnew[j]}\t$dir/./${files[j]}"
	let ++j
done >>$F

(( leave )) && exit 0

print 'old rev.\tnew rev.\tfilename' >$T
print -- '--------\t--------\t--------' >>$T
sort -t'	' -k3 $F | \
    sed -e 's!/\./!/!g' -e 's!	\./!	!' \
    >>$T
column -ts'	' <$T >$F

hn=$(hostname 2>/dev/null)
[[ $hn = *.* ]] || hn=$hn.$(domainname 2>/dev/null)
[[ $hn = *. ]] && hn=${hn}invalid

(( cidline )) && cat >$T <<-EOF
	Commit ID:	$id
EOF
cat >$T <<-EOF
	CVSROOT:	$repo
	Module name:	$module
	Changes by:	${USER}@@$hn	$(TZ=UTC date '+%Y/%m/%d %T' 2>/dev/null) UTC

	$op $branch tag '$tag' affecting:

EOF

if [[ -n $rcpt ]]; then
	sendmail -t |&
	(( cidline )) && print -pr -- "Message-ID: <commitid.$id.CVS-tag@@$hn>"
	print -pr -- 'MIME-Version: 1.0'
	print -pr -- 'Content-Type: text/plain; charset=UTF-8'
	print -pr -- 'Content-Transfer-Encoding: 8bit'
	print -pr -- To: $(set -A x $rcpt; IFS=,; print -r -- "${x[*]}")
	[[ $replyto != NO ]] && print -pr -- Reply-To: $replyto
	(( opt_pts )) && print -pr -- X-PTS-Approved: 1
	#XXX RFC2047 encoding tbd
	print -pr -- Subject: CVS: $hn: $module
	print -pr -- 'Auto-Submitted: auto-generated'
	#XXX should be done by the mailing list manager instead (list, not bulk)
	print -pr -- 'Precedence: bulk' #XXX for now
	print -p
	exec 3>&p
	cat $T >&3
	if [[ $cloguri = NO ]]; then
		cat $F >&3
	else
		print -u3 various files\; if you want to know more, go read
		print -ru3 -- $cloguri
	fi
	exec 3>&-
fi

if [[ -n $logf && -e $logf ]]; then
	cat $F >>$T
	print ________________________________________________________________________ >>$T
	print >>$T
	$SHELL $repo/CVSROOT/genlog $logf $repo/CVSROOT/history <$T
fi

rm $repo/.tmp/cl.*.$id
exit 0
@


1.25
log
@harsher checks for the commitid

(allow both upstream and our formats)
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.24 2015/10/09 14:51:36 tg Exp $
d161 1
a161 1
		rcpt="$rcpt ${2}_cvs@@packages.qa.debian.org"
@


1.24
log
@first overhaul of CVS commit/tag log mail headers:
• indicate MIME text/plain, UTF-8, 8bit encoding
• drop Mail-Followup-To routing header (for consistency with evolvis recvhook)
• set Message-ID from CVS commitid if any
• include Auto-Submitted header
TODO for second overhaul:
• keeping Subject as-is, not RFC2047 encoded², it works in practice for now
• add Precedence: bulk header¹ (we really want Precedence: list, though)
① until we have a mailing list manager²
② until we have up-to-date php5 in MirPorts
@
text
@d2 1
a2 1
# $MirOS: src/share/misc/licence.template,v 1.28 2008/11/14 15:33:44 tg Rel $
d43 2
@


1.23
log
@send mails to the Debian PTS for packages with VCS-CVS inside here
(list of packages/paths is maintained manually!)
@
text
@d1 2
a2 2
#!/usr/bin/env mksh
# $MirOS: CVSROOT/mklogtag,v 1.22 2008/08/06 06:29:34 tg Exp $
d4 2
a5 2
# Copyright (c) 2005, 2006, 2011
#	Thorsten Glaser <tg@@mirbsd.org>
d215 4
d220 1
d222 1
d224 3
a226 4
	if [[ $replyto != NO ]]; then
		print -pr -- Mail-Followup-To: $replyto
		print -pr -- Reply-To: $replyto
	fi
@


1.22
log
@Two bugfixes, pne first discovered at SyGroup GmbH, then yesterday at
bsiegert@@s tag mails, the other while fixing the first bug:
• $nl (newline) was missing, so that tags with multiple directories could
  produce multiple mails and leave tmp files around
• if no -m argument, sendmail was still spawned (while here, unify handling
  of -f and -m arguments)
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.21 2008/08/05 06:10:33 tg Exp $
d4 2
a5 2
# Copyright (c) 2005, 2006
#	Thorsten Glaser <tg@@mirbsd.de>
d105 1
d157 4
d215 2
a216 1
	print -pr -- To: $rcpt
@


1.21
log
@error out in a controlled way if $CVSROOT/.tmp is no directory
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.20 2008/08/05 06:07:33 tg Exp $
a23 1
# XXX seems to not delete its temporary files sometimes, but works.
d93 1
a93 1
logf=NO
d106 2
d208 18
a225 15
sendmail -t |&
print -pr -- To: $rcpt
print -pr -- Subject: CVS: $hn: $module
if [[ $replyto != NO ]]; then
	print -pr -- Mail-Followup-To: $replyto
	print -pr -- Reply-To: $replyto
fi
print -p
exec 3>&p
cat $T >&3
if [[ $cloguri = NO ]]; then
	cat $F >&3
else
	print -u3 various files\; if you want to know more, go read
	print -ru3 -- $cloguri
a226 1
exec 3>&-
d228 1
a228 1
if [[ -e $logf ]]; then
@


1.20
log
@• set locale to "C" for !MirBSD
• better warnings for the case of not finding the process group
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.19 2008/08/04 10:15:11 tg Exp $
d108 2
@


1.19
log
@if not passing commit id via %I MirOS extension, don't emit Commit ID: line
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.18 2008/07/03 18:35:09 tg Exp $
d26 3
d38 5
a42 1
	[[ -z $id || $id -eq 0 ]] && exit 255
@


1.18
log
@fix exit code confusion
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.17 2008/07/03 18:09:36 tg Exp $
d36 3
d186 3
a189 1
	Commit ID:	$id
@


1.17
log
@experimental: track directories visited in a (ksh) DB, leave if entries left
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.16 2008/07/03 17:32:16 tg Exp $
d113 2
a114 1
leave=$(getdirs "$repo/$dir")
@


1.16
log
@if commitid is not given, use the PGRP, as (much) earlier
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.15 2008/07/03 17:24:31 tg Exp $
d44 39
d113 1
a113 2
[[ "$(<$repo/.tmp/cl.lastdir.$id)" = $repo/$dir ]]
leave=$?
@


1.15
log
@more licence updates and style improvements
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.14 2006/09/21 00:12:24 tg Exp $
d29 8
d62 1
a62 1
	print "BEGIN calling information"
@


1.14
log
@ok, these two don't read from stdin
@
text
@d1 2
a2 2
#!/bin/mksh
# $MirOS: CVSROOT/mklogtag,v 1.13 2006/09/21 00:11:37 tg Exp $
d7 5
a11 6
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publicly perform, modify,
# merge, distribute, sell, give away or sublicence, provided all co-
# pyright notices above, these terms and the disclaimer are retained
# in all redistributions or reproduced in accompanying documentation
# or other materials provided with binary redistributions.
d13 8
a20 12
# Advertising materials mentioning features or use of this work must
# display the following acknowledgement:
#	This product includes material provided by Thorsten Glaser.
#
# Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
# express, or implied, to the maximum extent permitted by applicable
# law, without malicious intent or gross negligence; in no event may
# licensor, an author or contributor be held liable for any indirect
# or other damage, or direct damage except proven a consequence of a
# direct error of said person and intended use of this work, loss or
# other issues arising in any way out of its use, even if advised of
# the possibility of such damage or existence of a defect.
d26 1
a26 1
SHELL=${SHELL:-/bin/mksh}
d30 2
a31 3
function die
{
	print -r Error: "$@@"
d51 1
a51 1
[[ -e $repo/.tmp/do-dump ]] && (
d57 1
a57 1
		print -nr -- "<${argv[i++]}> "
d61 1
a61 1
    ) | logger -t "CVS:dump"
d78 2
a79 2
([Tt])	branch=" branch" ;;
([Nn])	branch=" static" ;;
d100 1
a100 1
		cloguri="$2"
d103 1
a103 1
		replyto="$2"
d107 3
a109 3
		files[i]="$1"
		fold[i]="$2"
		fnew[i]="$3"
d115 1
a115 1
(( i == 0 )) && exit 0
d123 1
a123 1
[[ $leave = 1 ]] && exit 0
d142 1
a142 1
	$op$branch tag '$tag' affecting:
@


1.13
log
@oh I did botch again
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.12 2006/09/21 00:08:12 tg Exp $
d66 1
a66 2
	cat
	print "END calling information"
@


1.12
log
@I guess I botched
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.11 2006/09/21 00:04:49 tg Exp $
d57 1
a57 1
[[ -e $1/.tmp/do-dump ]] && (
@


1.11
log
@in case I ever want to debug how cvs(1) calls these scripts...
@
text
@d2 1
a2 1
# $MirOS: src/share/misc/licence.template,v 1.14 2006/08/09 19:35:23 tg Rel $
d58 2
d62 2
a63 3
	while (( i <= $# )); do
		print -nr -- "<${$i}> "
		let ++i
@


1.10
log
@quote another [[ $(<...) = ... ]]
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.9 2005/12/15 01:57:44 tg Exp $
d4 2
a5 2
# Copyright (c) 2004, 2005
#	Thorsten "mirabile" Glaser <tg@@mirbsd.de>
d14 2
a15 2
# All advertising materials mentioning features or use of this soft-
# ware must display the following acknowledgement:
d25 1
a25 1
# the possibility of such damage or existence of a nontrivial bug.
d57 12
@


1.9
log
@* Unify my eMail address over all scripts
  (I use the mirbsd.de as they end up on herc; everyone else
   may use mirbsd.org or 66h.42h.de as they end up on thor.)
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.8 2005/12/06 03:11:40 tg Exp $
d60 1
a60 1
[[ $(<$repo/.tmp/cl.lastdir.$id) = $repo/$dir ]]
@


1.8
log
@by suggestion of Han Boetes, use a temporary directory which is
only group-writable yet sticky, for the temporary files, since
we cannot use mktemp/mkdtemp
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.7 2005/12/06 02:04:33 tg Exp $
d5 1
a5 1
#	Thorsten "mirabile" Glaser <tg@@MirBSD.de>
@


1.7
log
@oops, dot hash
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.6 2005/12/06 02:03:05 tg Exp $
d38 1
a38 1
	rm /var/tmp/.\#mcvs.*.$id
d57 2
a58 2
F=/var/tmp/.\#mcvs.tag.$id
T=/var/tmp/.\#mcvs.tagend.$id
d60 1
a60 1
[[ $(</var/tmp/.\#mcvs.lastdir.$id) = $repo/$dir ]]
d165 1
a165 1
rm /var/tmp/.\#mcvs.*.$id
@


1.6
log
@use /var/tmp like the rest
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.5 2005/12/06 00:29:59 tg Exp $
d38 1
a38 1
	rm /var/tmp/\#.mcvs.*.$id
d57 2
a58 2
F=/var/tmp/\#.mcvs.tag.$id
T=/var/tmp/\#.mcvs.tagend.$id
d60 1
a60 1
[[ $(</var/tmp/\#.mcvs.lastdir.$id) = $repo/$dir ]]
d165 1
a165 1
rm /var/tmp/\#.mcvs.*.$id
@


1.5
log
@move ChangeLog files to /cvs/Logs/ to keep them apart
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.4 2005/12/05 23:20:32 tg Exp $
d38 1
a38 1
	rm /tmp/\#cvs.*.$id
d57 2
a58 2
F=/tmp/\#cvs.tag.$id
T=/tmp/\#cvs.tagend.$id
d60 1
a60 1
[[ $(</tmp/\#cvs.lastdir.$id) = $repo/$dir ]]
d165 1
a165 1
rm /tmp/\#cvs.*.$id
@


1.4
log
@this is of course not -r
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.3 2005/12/05 23:17:24 tg Exp $
d162 1
a162 1
	$SHELL $repo/CVSROOT/genlog $logf <$T
@


1.3
log
@add a comment, investigate this later
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.2 2005/12/05 23:09:28 tg Exp $
d113 1
a113 1
	print -r -- "${fold[j]}\t${fnew[j]}\t$dir/./${files[j]}"
@


1.2
log
@revert part of the diff
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/mklogtag,v 1.1 2005/12/05 21:25:09 tg Exp $
d29 1
@


1.1
log
@rename the files a bit (to clean the attic which moves into ocvs):
* commit_prep2	-> tracker
* log_accum2	-> mklogci
* log_write2	-> genlog
* tag_accum2	-> mklogtag
@
text
@d2 1
a2 1
# $MirOS: CVSROOT/tag_accum2,v 1.9 2005/12/05 21:07:24 tg Exp $
d108 1
a108 4
if (( i == 0 )); then
	rm /tmp/\#cvs.*.$id
	exit 0
fi
@

