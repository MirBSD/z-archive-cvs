head	1.1;
branch	1.1.109;
access;
symbols
	lynx-2_8_8dev_16:1.1.109.2
	lynx-2_8_8dev_15e:1.1.109.2
	lynx-2_8_8dev_15:1.1.109.2
	lynx-2_8_8dev_14:1.1.109.2
	lynx-2_8_8dev_12:1.1.109.2
	lynx-2_8_8dev_11:1.1.109.2
	lynx-2_8_8dev_10a:1.1.109.2
	lynx-2_8_8dev_7a:1.1.109.2
	lynx-2_8_8dev_7:1.1.109.2
	lynx-2_8_7rel_1:1.1.109.2
	lynx-2_8_7dev_12:1.1.109.2
	lynx-2_8_7dev_11a:1.1.109.2
	MIRBSD_10:1.1.109.2.0.4
	MIRBSD_10_BASE:1.1.109.2
	lynx-2_8_7dev_8:1.1.109.2
	lynx-2_8_7dev_7:1.1.109.2
	lynx-2_8_7dev_5:1.1.109.2
	lynx-2_8_7dev_2:1.1.109.2
	lynx-2_8_6pre_5:1.1.109.2
	lynx-2_8_6pre_4:1.1.109.2
	lynx-2_8_6pre_3:1.1.109.2
	MIRBSD_9_BASE:1.1.109.2
	lynx-2_8_6dev_18c:1.1.109.2
	lynx-2_8_6dev_18:1.1.109.2
	MIRBSD_8:1.1.109.2.0.2
	MIRBSD_8_BASE:1.1.109.2
	lynx-2_8_6dev_16:1.1.109.2
	lynx:1.1.109;
locks; strict;
comment	@ * @;


1.1
date	2005.03.27.22.11.55;	author tg;	state Exp;
branches
	1.1.109.1;
next	;

1.1.109.1
date	2005.03.27.22.11.55;	author tg;	state Exp;
branches;
next	1.1.109.2;

1.1.109.2
date	2005.10.21.21.33.50;	author tg;	state Exp;
branches;
next	;
commitid	2f9543595ec47e83;


desc
@@


1.1
log
@Initial revision
@
text
@
/* MODULE							HTLex.c
 *		LEXICAL ANALYSOR
 *
 * AUTHORS:
 *	AL	Ari Luotonen	luotonen@@dxcern.cern.ch
 *
 * HISTORY:
 *
 *
 * BUGS:
 *
 *
 */

#include <HTUtils.h>

#include <HTLex.h>		/* Implemented here */

#include <LYLeaks.h>

/*
 * Global variables
 */
char HTlex_buffer[40];		/* Read lexical string          */
int HTlex_line = 1;		/* Line number in source file   */

/*
 * Module-wide variables
 */
static int lex_cnt;
static BOOL lex_template;
static LexItem lex_pushed_back = LEX_NONE;
static FILE *cache = NULL;

void unlex(LexItem lex_item)
{
    lex_pushed_back = lex_item;
}

LexItem lex(FILE *fp)
{
    int ch = 0;

    if (fp != cache) {		/* This cache doesn't work ok because the system  */
	cache = fp;		/* often assign same FILE structure the next open */
	HTlex_line = 1;		/* file.  So, if there are syntax errors in setup */
    }
    /* files it may confuse things later on.      */
    if (lex_pushed_back != LEX_NONE) {
	LexItem ret = lex_pushed_back;

	lex_pushed_back = LEX_NONE;
	return ret;
    }

    lex_cnt = 0;
    lex_template = NO;

    for (;;) {
	switch (ch = getc(fp)) {
	case EOF:
	case ' ':
	case '\t':
	case '\r':
	case '\n':
	case ':':
	case ',':
	case '(':
	case ')':
	case '@@':
	    if (lex_cnt > 0) {
		if (ch != EOF)
		    ungetc(ch, fp);
		if (lex_template)
		    return LEX_TMPL_STR;
		else
		    return LEX_ALPH_STR;
	    } else
		switch (ch) {
		case EOF:
		    return LEX_EOF;
		case '\n':
		    HTlex_line++;
		    return LEX_REC_SEP;
		case ':':
		    return LEX_FIELD_SEP;
		case ',':
		    return LEX_ITEM_SEP;
		case '(':
		    return LEX_OPEN_PAREN;
		case ')':
		    return LEX_CLOSE_PAREN;
		case '@@':
		    return LEX_AT_SIGN;
		default:;	/* Leading white space ignored (SP,TAB,CR) */
		}
	    break;
	default:
	    HTlex_buffer[lex_cnt++] = (char) ch;
	    HTlex_buffer[lex_cnt] = '\0';
	    if ('*' == ch)
		lex_template = YES;
	}			/* switch ch */
    }				/* forever */
}

const char *lex_verbose(LexItem lex_item)
{
    static char msg[100];	/* @@@@@@@@@@@@@@@@ */

    switch (lex_item) {
    case LEX_NONE:		/* Internally used      */
	return "NO-LEX-ITEM";
    case LEX_EOF:		/* End of file          */
	return "end-of-file";
    case LEX_REC_SEP:		/* Record separator     */
	return "record separator (newline)";
    case LEX_FIELD_SEP:	/* Field separator      */
	return "field separator ':'";
    case LEX_ITEM_SEP:		/* List item separator  */
	return "item separator ','";
    case LEX_OPEN_PAREN:	/* Group start tag      */
	return "'('";
    case LEX_CLOSE_PAREN:	/* Group end tag        */
	return "')'";
    case LEX_AT_SIGN:		/* Address qualifier    */
	return "address qualifier '@@'";
    case LEX_ALPH_STR:		/* Alphanumeric string  */
	sprintf(msg, "alphanumeric string '%.70s'", HTlex_buffer);
	return msg;
    case LEX_TMPL_STR:		/* Template string      */
	sprintf(msg, "template string '%.70s'", HTlex_buffer);
	return msg;
    default:
	return "UNKNOWN-LEX-ITEM";
    }
}
@


1.1.109.1
log
@Lynx 2.8.6dev.11h (pre-patch) minus
* lib
* po
* scripts
@
text
@@


1.1.109.2
log
@Import new Lynx snapshot
@
text
@d47 1
a47 2
	HTlex_line = 1;		/* file.  So, if there are syntax errors in setup *
				   files it may confuse things later on.      */
d49 1
d96 1
a96 2
		default:	/* Leading white space ignored (SP,TAB,CR) */
		    break;
d100 1
a100 2
	    if (lex_cnt < (int) (sizeof(HTlex_buffer) - 1))
		HTlex_buffer[lex_cnt++] = (char) ch;
d110 1
a110 1
    static char msg[sizeof(HTlex_buffer) + 30];		/* @@@@@@@@@@@@@@@@ */
d130 1
a130 2
	sprintf(msg, "alphanumeric string '%.*s'",
		(int) sizeof(HTlex_buffer), HTlex_buffer);
d133 1
a133 2
	sprintf(msg, "template string '%.*s'",
		(int) sizeof(HTlex_buffer), HTlex_buffer);
@

