head	1.1;
branch	1.1.109;
access;
symbols
	lynx-2_8_8dev_16:1.1.109.3
	lynx-2_8_8dev_15e:1.1.109.3
	lynx-2_8_8dev_15:1.1.109.3
	lynx-2_8_8dev_14:1.1.109.3
	lynx-2_8_8dev_12:1.1.109.3
	lynx-2_8_8dev_11:1.1.109.3
	lynx-2_8_8dev_10a:1.1.109.3
	lynx-2_8_8dev_7a:1.1.109.3
	lynx-2_8_8dev_7:1.1.109.3
	lynx-2_8_7rel_1:1.1.109.2
	lynx-2_8_7dev_12:1.1.109.2
	lynx-2_8_7dev_11a:1.1.109.2
	MIRBSD_10:1.1.109.2.0.4
	MIRBSD_10_BASE:1.1.109.2
	lynx-2_8_7dev_8:1.1.109.2
	lynx-2_8_7dev_7:1.1.109.2
	lynx-2_8_7dev_5:1.1.109.2
	lynx-2_8_7dev_2:1.1.109.2
	lynx-2_8_6pre_5:1.1.109.2
	lynx-2_8_6pre_4:1.1.109.2
	lynx-2_8_6pre_3:1.1.109.2
	MIRBSD_9_BASE:1.1.109.2
	lynx-2_8_6dev_18c:1.1.109.2
	lynx-2_8_6dev_18:1.1.109.2
	MIRBSD_8:1.1.109.2.0.2
	MIRBSD_8_BASE:1.1.109.2
	lynx-2_8_6dev_16:1.1.109.2
	lynx:1.1.109;
locks; strict;
comment	@ * @;


1.1
date	2005.03.27.22.11.54;	author tg;	state Exp;
branches
	1.1.109.1;
next	;

1.1.109.1
date	2005.03.27.22.11.54;	author tg;	state Exp;
branches;
next	1.1.109.2;

1.1.109.2
date	2005.06.22.11.11.40;	author tg;	state Exp;
branches;
next	1.1.109.3;
commitid	408242b94777c7d4;

1.1.109.3
date	2010.12.19.18.12.40;	author tg;	state Exp;
branches;
next	;
commitid	1004D0E4B24304015D1;


desc
@@


1.1
log
@Initial revision
@
text
@/*						  HTChunk: Flexible array handling for libwww
 *					CHUNK HANDLING:
 *					FLEXIBLE ARRAYS
 *
 * This module implements a flexible array.  It is a general utility module.  A
 * chunk is a structure which may be extended.	These routines create and
 * append data to chunks, automatically reallocating them as necessary.
 *
 */
#ifndef HTCHUNK_H
#define HTCHUNK_H 1

#ifndef HTUTILS_H
#include <HTUtils.h>
#endif

#include <UCMap.h>

#ifdef __cplusplus
extern "C" {
#endif
    typedef struct {
	int size;		/* In bytes                     */
	int growby;		/* Allocation unit in bytes     */
	int allocated;		/* Current size of *data        */
	char *data;		/* Pointer to malloc'd area or 0 */
	int failok;		/* allowed to fail without exiting program? */
    } HTChunk;

/*
 * Initialize a chunk's allocation data and allocation-increment.
 */
    extern void HTChunkInit(HTChunk *ch, int grow);

/*
 *
 * Create new chunk
 *
 *   ON ENTRY,
 *
 *   growby		The number of bytes to allocate at a time when the chunk
 *			is later extended.  Arbitrary but normally a trade-off
 *			of time vs memory.
 *
 *   ON EXIT,
 *
 *   returns		A chunk pointer to the new chunk,
 *
 */

    extern HTChunk *HTChunkCreate(int growby);

/*
 *  Create a chunk for which an allocation error is not a fatal application
 *  error if failok != 0, but merely resets the chunk.  When using a chunk
 *  created this way, the caller should always check whether the contents
 *  are ok each time after data have been appended.
 *  The create call may also fail and will reurn NULL in that case. - kw
 */
    extern HTChunk *HTChunkCreateMayFail(int growby, int failok);

/*
 *  Like HTChunkCreate but with initial allocation - kw
 *
 */
    extern HTChunk *HTChunkCreate2(int growby, size_t needed);

/*
 *
 * Free a chunk
 *
 *   ON ENTRY,
 *
 *   ch			A valid chunk pointer made by HTChunkCreate()
 *
 *   ON EXIT,
 *
 *   ch			is invalid and may not be used.
 *
 */

    extern void HTChunkFree(HTChunk *ch);

/*
 *
 * Clear a chunk
 *
 *   ON ENTRY,
 *
 *   ch			A valid chunk pointer made by HTChunkCreate()
 *
 *   ON EXIT,
 *
 *   *ch		The size of the chunk is zero.
 *
 */

    extern void HTChunkClear(HTChunk *ch);

/*
 *
 * Realloc a chunk
 *
 *   ON ENTRY,
 *
 *   ch			A valid chunk pointer made by HTChunkCreate()
 *
 *   growby		growby
 *
 *   ON EXIT,
 *
 *   *ch		Expanded by growby
 *
 */

    extern BOOL HTChunkRealloc(HTChunk *ch, int growby);

/*
 *
 * Ensure a chunk has a certain space in
 *
 *   ON ENTRY,
 *
 *   ch			A valid chunk pointer made by HTChunkCreate()
 *
 *   s			The size required
 *
 *   ON EXIT,
 *
 *   *ch		Has size at least s
 *
 */

    extern void HTChunkEnsure(HTChunk *ch, int s);

/*
 *
 * Append a character to a  chunk
 *
 *   ON ENTRY,
 *
 *   ch			A valid chunk pointer made by HTChunkCreate()
 *
 *   c			The character to be appended
 *
 *   ON EXIT,
 *
 *   *ch		Is one character bigger
 *
 */
    extern void HTChunkPutc(HTChunk *ch, char c);

    extern void HTChunkPutb(HTChunk *ch, const char *b, int l);

    extern void HTChunkPutUtf8Char(HTChunk *ch, UCode_t code);

/*
 * Append a string to a  chunk
 *
 *   ON ENTRY,
 *
 *   ch			A valid chunk pointer made by HTChunkCreate()
 *
 *   str		Points to a zero-terminated string to be appended
 *
 *   ON EXIT,
 *
 *   *ch		Is bigger by strlen(str)
 *
 */

    extern void HTChunkPuts(HTChunk *ch, const char *str);

/*
 *
 * Append a zero character to a  chunk
 *
 */

/*
 *
 *   ON ENTRY,
 *
 *   ch			A valid chunk pointer made by HTChunkCreate()
 *
 *   ON EXIT,
 *
 *   *ch		Is one character bigger
 *
 */

    extern void HTChunkTerminate(HTChunk *ch);

#ifdef __cplusplus
}
#endif
#endif				/* HTCHUNK_H */
@


1.1.109.1
log
@Lynx 2.8.6dev.11h (pre-patch) minus
* lib
* po
* scripts
@
text
@@


1.1.109.2
log
@update our Lynx
@
text
@d22 1
a22 3
    typedef struct _HTChunk HTChunk;

    struct _HTChunk {
d28 1
a28 2
	HTChunk *next;		/* pointer to the next chunk */
    };
a193 25
/* like the above but no realloc: extend to another chunk if necessary */
/*
 *
 * Append a character (string, data) to a chunk
 *
 *   ON ENTRY,
 *
 *   ch                        A valid chunk pointer made by HTChunkCreate()
 *
 *   c                 The character to be appended
 *
 *   ON EXIT,
 *
 *   returns           original chunk or a pointer to the new chunk
 *                     (orginal chunk is referenced to the new one
 *                     by the field 'next')
 *
 */
    extern HTChunk *HTChunkPutc2(HTChunk *ch, char c);
    extern HTChunk *HTChunkPuts2(HTChunk *ch, const char *str);
    extern HTChunk *HTChunkPutb2(HTChunk *ch, const char *b, int l);

/* New pool infrastructure: UNlike the above, store data using alignment */
    extern HTChunk *HTChunkPutb0(HTChunk *ch, const char *b, int l);

@


1.1.109.3
log
@Import lynx-current
@
text
@d1 1
a1 4
/*
 * $LynxId: HTChunk.h,v 1.20 2010/09/24 08:37:39 tom Exp $
 *
 *				     HTChunk: Flexible array handling for libwww
d154 1
a154 1
    extern void HTChunkPutc(HTChunk *ch, unsigned c);
d215 1
a215 1
    extern HTChunk *HTChunkPutc2(HTChunk *ch, int c);
@


