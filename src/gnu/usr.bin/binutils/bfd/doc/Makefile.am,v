head	1.4;
access;
symbols
	MIRBSD_10:1.4.0.4
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4
	binutils-20050707:1.1.101.3
	FSF:1.1.101;
locks; strict;
comment	@# @;


1.4
date	2005.06.05.21.24.02;	author tg;	state Exp;
branches;
next	1.3;
commitid	3cf942a36d3e2dcb;

1.3
date	2005.03.28.21.51.08;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.13.16.06.50;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.00.18.25;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.02.05.00.18.25;	author tg;	state Exp;
branches;
next	1.1.101.2;

1.1.101.2
date	2005.03.28.15.38.30;	author tg;	state Exp;
branches;
next	1.1.101.3;

1.1.101.3
date	2005.05.14.16.46.25;	author tg;	state Exp;
branches;
next	;
commitid	3a6242862a097542;


desc
@@


1.4
log
@first attempt to merge binutils and gdb of today (minus generated files)
XXX elf.sc yields equivalent results for MirOS; double-check against
XXX other platforms. this merger took as much time as ALL the other files!
@
text
@# $MirOS: src/gnu/usr.bin/binutils/bfd/doc/Makefile.am,v 1.3 2005/03/28 21:51:08 tg Exp $
#
## Process this file with automake to generate Makefile.in

AUTOMAKE_OPTIONS = 1.9 cygnus

AM_MAKEINFOFLAGS = --no-split

DOCFILES = aoutx.texi  archive.texi archures.texi \
	bfdt.texi  cache.texi coffcode.texi \
	core.texi elf.texi elfcode.texi  format.texi \
	libbfd.texi bfdwin.texi bfdio.texi \
	opncls.texi  reloc.texi  section.texi  \
	syms.texi  targets.texi init.texi hash.texi linker.texi \
	mmo.texi

PROTOS = archive.p archures.p bfd.p \
	 core.p format.p \
	bfdio.p bfdwin.p \
	libbfd.p opncls.p reloc.p \
	section.p syms.p targets.p  \
	format.p  core.p init.p

IPROTOS = cache.ip libbfd.ip reloc.ip init.ip archures.ip coffcode.ip

# SRCDOC, SRCPROT, SRCIPROT only used to sidestep Sun Make bug in interaction 
# between VPATH and suffix rules.  If you use GNU Make, perhaps other Makes,
# you don't need these three:
SRCDOC = $(srcdir)/../aoutx.h  $(srcdir)/../archive.c \
	$(srcdir)/../archures.c $(srcdir)/../bfd.c \
	$(srcdir)/../bfdio.c $(srcdir)/../bfdwin.c \
	$(srcdir)/../cache.c $(srcdir)/../coffcode.h \
	$(srcdir)/../corefile.c $(srcdir)/../elf.c \
	$(srcdir)/../elfcode.h  $(srcdir)/../format.c \
	$(srcdir)/../libbfd.c $(srcdir)/../opncls.c \
	$(srcdir)/../reloc.c  $(srcdir)/../section.c \
	$(srcdir)/../syms.c  $(srcdir)/../targets.c \
	$(srcdir)/../hash.c $(srcdir)/../linker.c \
	$(srcdir)/../mmo.c

SRCPROT = $(srcdir)/../archive.c $(srcdir)/../archures.c \
	$(srcdir)/../bfd.c $(srcdir)/../coffcode.h $(srcdir)/../corefile.c \
	$(srcdir)/../format.c $(srcdir)/../libbfd.c \
	$(srcdir)/../bfdio.c $(srcdir)/../bfdwin.c \
	$(srcdir)/../opncls.c $(srcdir)/../reloc.c \
	$(srcdir)/../section.c $(srcdir)/../syms.c \
	$(srcdir)/../targets.c $(srcdir)/../init.c

SRCIPROT = $(srcdir)/../cache.c $(srcdir)/../libbfd.c \
	$(srcdir)/../bfdio.c $(srcdir)/../bfdwin.c \
	$(srcdir)/../reloc.c $(srcdir)/../cpu-h8300.c \
	$(srcdir)/../cpu-i960.c $(srcdir)/../archures.c \
	$(srcdir)/../init.c

TEXIDIR = $(srcdir)/../../texinfo/fsf

info_TEXINFOS = bfd.texinfo bfdint.texi

MKDOC = chew$(EXEEXT_FOR_BUILD)

INCLUDES = -I$(LIBIBERTY_HDRS) -I.. -I$(srcdir)/.. -I$(srcdir)/../../include

$(MKDOC): $(srcdir)/chew.c
	$(CC_FOR_BUILD) -o chew.$$$$ $(srcdir)/chew.c \
	  $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD) $(H_CFLAGS) \
	  $(INCLUDES); \
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change chew.$$$$ $(MKDOC)

chew.o: chew.c
	$(CC_FOR_BUILD) -c $(INCLUDES) $(H_CFLAGS) $(CFLAGS_FOR_BUILD) $(srcdir)/chew.c

protos: libbfd.h libcoff.h bfd.h

# We can't replace these rules with an implicit rule, because
# makes without VPATH support couldn't find the .h files in `..'.

# We do not depend on chew directly so that we can distribute the info
# files, and permit people to rebuild them, without requiring the makeinfo
# program.  If somebody tries to rebuild info, but none of the .texi files
# have changed, then nothing will be rebuilt.

aoutx.texi: chew.c $(srcdir)/../aoutx.h $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../aoutx.h >aoutx.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change aoutx.tmp aoutx.texi

archive.texi: chew.c $(srcdir)/../archive.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../archive.c >archive.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change archive.tmp archive.texi

archures.texi: chew.c $(srcdir)/../archures.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str < $(srcdir)/../archures.c >archures.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change archures.tmp archures.texi

# We use bfdt.texi, rather than bfd.texi, to avoid conflicting with
# bfd.texinfo on an 8.3 filesystem.
bfdt.texi: chew.c $(srcdir)/../bfd.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str < $(srcdir)/../bfd.c >bfd.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change bfd.tmp bfdt.texi

cache.texi: chew.c $(srcdir)/../cache.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str < $(srcdir)/../cache.c >cache.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change cache.tmp cache.texi

coffcode.texi: chew.c $(srcdir)/../coffcode.h $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../coffcode.h >coffcode.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change coffcode.tmp coffcode.texi

core.texi: chew.c $(srcdir)/../corefile.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../corefile.c >core.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change core.tmp core.texi

elf.texi: chew.c $(srcdir)/../elf.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../elf.c >elf.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change elf.tmp elf.texi

elfcode.texi: chew.c $(srcdir)/../elfcode.h $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../elfcode.h >elfcode.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change elfcode.tmp elfcode.texi

mmo.texi: chew.c $(srcdir)/../mmo.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../mmo.c >mmo.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change mmo.tmp mmo.texi

format.texi: chew.c $(srcdir)/../format.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../format.c >format.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change format.tmp format.texi

libbfd.texi: chew.c $(srcdir)/../libbfd.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str < $(srcdir)/../libbfd.c >libbfd.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change libbfd.tmp libbfd.texi

bfdio.texi: chew.c $(srcdir)/../bfdio.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str < $(srcdir)/../bfdio.c >bfdio.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change bfdio.tmp bfdio.texi

bfdwin.texi: chew.c $(srcdir)/../bfdwin.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str < $(srcdir)/../bfdwin.c >bfdwin.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change bfdwin.tmp bfdwin.texi

opncls.texi: chew.c $(srcdir)/../opncls.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str  <$(srcdir)/../opncls.c >opncls.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change opncls.tmp opncls.texi

reloc.texi: chew.c $(srcdir)/../reloc.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../reloc.c >reloc.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change reloc.tmp reloc.texi

section.texi: chew.c $(srcdir)/../section.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../section.c >section.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change section.tmp section.texi

syms.texi: chew.c $(srcdir)/../syms.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../syms.c >syms.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change syms.tmp syms.texi

targets.texi: chew.c $(srcdir)/../targets.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../targets.c >targets.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change targets.tmp targets.texi

init.texi: chew.c $(srcdir)/../init.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../init.c >init.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change init.tmp init.texi

hash.texi: chew.c $(srcdir)/../hash.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../hash.c >hash.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change hash.tmp hash.texi

linker.texi: chew.c $(srcdir)/../linker.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
	./$(MKDOC) -f $(srcdir)/doc.str <$(srcdir)/../linker.c >linker.tmp
	$(SHELL) $(GNUSYSTEM_AUX_DIR)/move-if-change linker.tmp linker.texi

LIBBFD_H_DEP = \
	$(srcdir)/../libbfd-in.h	\
	$(srcdir)/../init.c		\
	$(srcdir)/../libbfd.c		\
	$(srcdir)/../bfdio.c		\
	$(srcdir)/../bfdwin.c		\
	$(srcdir)/../cache.c		\
	$(srcdir)/../reloc.c		\
	$(srcdir)/../archures.c		\
	$(srcdir)/../elf.c		\
	$(srcdir)/header.sed		\
	$(srcdir)/proto.str		\
	$(MKDOC)

libbfd.h: $(LIBBFD_H_DEP)
	echo "$(LIBBFD_H_DEP)" | sed -f $(srcdir)/header.sed > $@@
	for file in $(LIBBFD_H_DEP); do \
	  case $$file in \
	    *-in.h) cat $$file >> $@@ ;; \
	    */header.sed) break ;; \
	    *)	echo $$file | sed -e 's,.*/,,' -e 's,^,/* Extracted from ,' \
				-e 's,$$,.  */,' >> $@@ ; \
		./$(MKDOC) -i -f $(srcdir)/proto.str < $$file >> $@@ ;; \
	  esac; \
	done

LIBCOFF_H_DEP = \
	$(srcdir)/../libcoff-in.h	\
	$(srcdir)/../coffcode.h		\
	$(srcdir)/header.sed		\
	$(srcdir)/proto.str		\
	$(MKDOC)

libcoff.h: $(LIBCOFF_H_DEP)
	echo "$(LIBCOFF_H_DEP)" | sed -f $(srcdir)/header.sed > $@@
	for file in $(LIBCOFF_H_DEP); do \
	  case $$file in \
	    *-in.h) cat $$file >> $@@ ;; \
	    */header.sed) break ;; \
	    *)	echo $$file | sed -e 's,.*/,,' -e 's,^,/* Extracted from ,' \
				-e 's,$$,.  */,' >> $@@ ; \
		./$(MKDOC) -i -f $(srcdir)/proto.str < $$file >> $@@ ;; \
	  esac; \
	done

BFD_H_DEP = \
	$(srcdir)/../bfd-in.h 		\
	$(srcdir)/../init.c 		\
	$(srcdir)/../opncls.c 		\
	$(srcdir)/../libbfd.c 		\
	$(srcdir)/../bfdio.c		\
	$(srcdir)/../bfdwin.c		\
	$(srcdir)/../section.c 		\
	$(srcdir)/../archures.c		\
	$(srcdir)/../reloc.c		\
	$(srcdir)/../syms.c		\
	$(srcdir)/../bfd.c		\
	$(srcdir)/../archive.c		\
	$(srcdir)/../corefile.c		\
	$(srcdir)/../targets.c		\
	$(srcdir)/../format.c		\
	$(srcdir)/../linker.c		\
	$(srcdir)/../simple.c		\
	$(srcdir)/header.sed		\
	$(srcdir)/proto.str		\
	$(srcdir)/../version.h		\
	$(MKDOC)

bfd.h: $(BFD_H_DEP)
	echo "$(BFD_H_DEP)" | sed -f $(srcdir)/header.sed > $@@
	for file in $(BFD_H_DEP); do \
	  case $$file in \
	    *-in.h) cat $$file >> $@@ ;; \
	    */header.sed) break ;; \
	    *)	echo $$file | sed -e 's,.*/,,' -e 's,^,/* Extracted from ,' \
				-e 's,$$,.  */,' >> $@@ ; \
		./$(MKDOC) -f $(srcdir)/proto.str < $$file >> $@@ ;; \
	  esac; \
	done
	echo "#ifdef __cplusplus" >> $@@
	echo "}" >> $@@
	echo "#endif" >> $@@
	echo "#endif" >> $@@

MOSTLYCLEANFILES = $(MKDOC) *.o

CLEANFILES = *.p *.ip

DISTCLEANFILES = bfd.?? bfd.??? bfd.h libbfd.h libcoff.h texput.log *.info *.info-*

MAINTAINERCLEANFILES = $(DOCFILES)

# We want install to imply install-info as per GNU standards, despite the
# cygnus option.
install: install-info
@


1.3
log
@merge bfd
@
text
@d1 1
a1 1
# $MirOS: src/gnu/usr.bin/binutils/bfd/doc/Makefile.am,v 1.2 2005/03/13 16:06:50 tg Exp $
d61 7
a67 2
$(MKDOC): chew.o
	$(CC_FOR_BUILD) -o $(MKDOC) chew.o $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD)
d70 1
a70 1
	$(CC_FOR_BUILD) -c -I$(LIBIBERTY_HDRS) -I.. -I$(srcdir)/.. -I$(srcdir)/../../include $(H_CFLAGS) $(CFLAGS_FOR_BUILD) $(srcdir)/chew.c
d77 4
a80 6
# We use s-XXX targets so that we can distribute the info files,
# and permit people to rebuild them, without requiring the makeinfo
# program.  If somebody tries to rebuild info, but none of the .texi
# files have changed, then this Makefile will build chew, and will
# build all of the stamp files, but will not actually have to rebuild
# bfd.info.
d82 2
a83 1
s-aoutx: $(MKDOC) $(srcdir)/../aoutx.h $(srcdir)/doc.str
a85 2
	touch s-aoutx
aoutx.texi: s-aoutx
d87 2
a88 1
s-archive: $(MKDOC) $(srcdir)/../archive.c $(srcdir)/doc.str
a90 2
	touch s-archive
archive.texi: s-archive
d92 2
a93 1
s-archures: $(MKDOC) $(srcdir)/../archures.c $(srcdir)/doc.str
a95 2
	touch s-archures
archures.texi: s-archures
d99 2
a100 1
s-bfd: $(MKDOC) $(srcdir)/../bfd.c $(srcdir)/doc.str
a102 2
	touch s-bfd
bfdt.texi: s-bfd
d104 2
a105 1
s-cache: $(MKDOC) $(srcdir)/../cache.c $(srcdir)/doc.str
a107 2
	touch s-cache
cache.texi: s-cache
d109 2
a110 1
s-coffcode: $(MKDOC) $(srcdir)/../coffcode.h $(srcdir)/doc.str
a112 2
	touch s-coffcode
coffcode.texi: s-coffcode
d114 2
a115 1
s-core: $(MKDOC) $(srcdir)/../corefile.c $(srcdir)/doc.str
a117 2
	touch s-core
core.texi: s-core
d119 2
a120 1
s-elf: $(MKDOC) $(srcdir)/../elf.c $(srcdir)/doc.str
a122 2
	touch s-elf
elf.texi: s-elf
d124 2
a125 1
s-elfcode: $(MKDOC) $(srcdir)/../elfcode.h $(srcdir)/doc.str
a127 2
	touch s-elfcode
elfcode.texi: s-elfcode
d129 2
a130 1
s-mmo: $(MKDOC) $(srcdir)/../mmo.c $(srcdir)/doc.str
a132 2
	touch s-mmo
mmo.texi: s-mmo
d134 2
a135 1
s-format: $(MKDOC) $(srcdir)/../format.c $(srcdir)/doc.str
a137 2
	touch s-format
format.texi: s-format
d139 2
a140 1
s-libbfd: $(MKDOC) $(srcdir)/../libbfd.c $(srcdir)/doc.str
a142 2
	touch s-libbfd
libbfd.texi: s-libbfd
d144 2
a145 1
s-bfdio: $(MKDOC) $(srcdir)/../bfdio.c $(srcdir)/doc.str
a147 2
	touch s-bfdio
bfdio.texi: s-bfdio
d149 2
a150 1
s-bfdwin: $(MKDOC) $(srcdir)/../bfdwin.c $(srcdir)/doc.str
a152 2
	touch s-bfdwin
bfdwin.texi: s-bfdwin
d154 2
a155 1
s-opncls: $(MKDOC) $(srcdir)/../opncls.c $(srcdir)/doc.str
a157 2
	touch s-opncls
opncls.texi: s-opncls
d159 2
a160 1
s-reloc: $(MKDOC) $(srcdir)/../reloc.c $(srcdir)/doc.str
a162 2
	touch s-reloc
reloc.texi: s-reloc
d164 2
a165 1
s-section: $(MKDOC) $(srcdir)/../section.c $(srcdir)/doc.str
a167 2
	touch s-section
section.texi: s-section
d169 2
a170 1
s-syms: $(MKDOC) $(srcdir)/../syms.c $(srcdir)/doc.str
a172 2
	touch s-syms
syms.texi: s-syms
d174 2
a175 1
s-targets: $(MKDOC) $(srcdir)/../targets.c $(srcdir)/doc.str
a177 2
	touch s-targets
targets.texi: s-targets
d179 2
a180 1
s-init: $(MKDOC) $(srcdir)/../init.c $(srcdir)/doc.str
a182 2
	touch s-init
init.texi: s-init
d184 2
a185 1
s-hash: $(MKDOC) $(srcdir)/../hash.c $(srcdir)/doc.str
a187 2
	touch s-hash
hash.texi: s-hash
d189 2
a190 1
s-linker: $(MKDOC) $(srcdir)/../linker.c $(srcdir)/doc.str
a192 2
	touch s-linker
linker.texi: s-linker
d280 1
a280 1
CLEANFILES = s-* *.p *.ip
@


1.2
log
@merge binutils, minus generated files, plus generated+hacked files
@
text
@d1 1
a1 1
# $MirOS$
d62 1
a62 1
	$(CC_FOR_BUILD) -o $(MKDOC) chew.o $(CFLAGS) $(LOADLIBES) $(LDFLAGS)
d65 1
a65 1
	$(CC_FOR_BUILD) -c -I$(LIBIBERTY_HDRS) -I.. -I$(srcdir)/.. -I$(srcdir)/../../include $(H_CFLAGS) $(CFLAGS) $(srcdir)/chew.c
@


1.1
log
@Initial revision
@
text
@d1 2
d7 2
d57 1
a57 1
info_TEXINFOS = bfd.texinfo
d65 1
a65 1
	$(CC_FOR_BUILD) -c -I.. -I$(srcdir)/.. -I$(srcdir)/../../include -I$(srcdir)/../../intl -I../../intl $(H_CFLAGS) $(CFLAGS) $(srcdir)/chew.c
a68 2
$(srcdir)/bfd.info bfd.dvi: $(DOCFILES) bfdsumm.texi bfd.texinfo

d81 1
a81 1
	$(SHELL) $(srcdir)/../../move-if-change aoutx.tmp aoutx.texi
d87 1
a87 1
	$(SHELL) $(srcdir)/../../move-if-change archive.tmp archive.texi
d93 1
a93 1
	$(SHELL) $(srcdir)/../../move-if-change archures.tmp archures.texi
d101 1
a101 1
	$(SHELL) $(srcdir)/../../move-if-change bfd.tmp bfdt.texi
d107 1
a107 1
	$(SHELL) $(srcdir)/../../move-if-change cache.tmp cache.texi
d113 1
a113 1
	$(SHELL) $(srcdir)/../../move-if-change coffcode.tmp coffcode.texi
d119 1
a119 1
	$(SHELL) $(srcdir)/../../move-if-change core.tmp core.texi
d125 1
a125 1
	$(SHELL) $(srcdir)/../../move-if-change elf.tmp elf.texi
d131 1
a131 1
	$(SHELL) $(srcdir)/../../move-if-change elfcode.tmp elfcode.texi
d137 1
a137 1
	$(SHELL) $(srcdir)/../../move-if-change mmo.tmp mmo.texi
d143 1
a143 1
	$(SHELL) $(srcdir)/../../move-if-change format.tmp format.texi
d149 1
a149 1
	$(SHELL) $(srcdir)/../../move-if-change libbfd.tmp libbfd.texi
d155 1
a155 1
	$(SHELL) $(srcdir)/../../move-if-change bfdio.tmp bfdio.texi
d161 1
a161 1
	$(SHELL) $(srcdir)/../../move-if-change bfdwin.tmp bfdwin.texi
d167 1
a167 1
	$(SHELL) $(srcdir)/../../move-if-change opncls.tmp opncls.texi
d173 1
a173 1
	$(SHELL) $(srcdir)/../../move-if-change reloc.tmp reloc.texi
d179 1
a179 1
	$(SHELL) $(srcdir)/../../move-if-change section.tmp section.texi
d185 1
a185 1
	$(SHELL) $(srcdir)/../../move-if-change syms.tmp syms.texi
d191 1
a191 1
	$(SHELL) $(srcdir)/../../move-if-change targets.tmp targets.texi
d197 1
a197 1
	$(SHELL) $(srcdir)/../../move-if-change init.tmp init.texi
d203 1
a203 1
	$(SHELL) $(srcdir)/../../move-if-change hash.tmp hash.texi
d209 1
a209 1
	$(SHELL) $(srcdir)/../../move-if-change linker.tmp linker.texi
a296 2
noinst_TEXINFOS = bfdint.texi

d301 1
a301 1
DISTCLEANFILES = bfd.?? bfd.??? bfd.h libbfd.h libcoff.h texput.log
@


1.1.101.1
log
@GNU binutils (CVS snapshot)
@
text
@@


1.1.101.2
log
@GNU binutils (CVS snapshot), without
* top-level files
* bfd/po
* binutils/po
* binutils/testsuite
* gas/po
* gas/testsuite
* gprof
* intl
* ld/po
* ld/testsuite
* libiberty/config
* opcodes/po
* texinfo
(same procedure as usual)
@
text
@d58 1
a58 1
	$(CC_FOR_BUILD) -o $(MKDOC) chew.o $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD)
d61 1
a61 1
	$(CC_FOR_BUILD) -c -I.. -I$(srcdir)/.. -I$(srcdir)/../../include -I$(srcdir)/../../intl -I../../intl $(H_CFLAGS) $(CFLAGS_FOR_BUILD) $(srcdir)/chew.c
@


1.1.101.3
log
@GNU binutils, -current (mainline) snapshot as of today,
with the usual bunch of files removed
@
text
@d57 2
a58 8
INCLUDES = -I.. -I$(srcdir)/.. -I$(srcdir)/../../include \
	-I$(srcdir)/../../intl -I../../intl

$(MKDOC): $(srcdir)/chew.c
	$(CC_FOR_BUILD) -o chew.$$$$ $(srcdir)/chew.c \
	  $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD) $(H_CFLAGS) \
	  $(INCLUDES); \
	$(SHELL) $(srcdir)/../../move-if-change chew.$$$$ $(MKDOC)
d61 1
a61 1
	$(CC_FOR_BUILD) -c $(INCLUDES) $(H_CFLAGS) $(CFLAGS_FOR_BUILD) $(srcdir)/chew.c
d70 6
a75 4
# We do not depend on chew directly so that we can distribute the info
# files, and permit people to rebuild them, without requiring the makeinfo
# program.  If somebody tries to rebuild info, but none of the .texi files
# have changed, then nothing will be rebuilt.
d77 1
a77 2
aoutx.texi: chew.c $(srcdir)/../aoutx.h $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d80 2
d83 1
a83 2
archive.texi: chew.c $(srcdir)/../archive.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d86 2
d89 1
a89 2
archures.texi: chew.c $(srcdir)/../archures.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d92 2
d97 1
a97 2
bfdt.texi: chew.c $(srcdir)/../bfd.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d100 2
d103 1
a103 2
cache.texi: chew.c $(srcdir)/../cache.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d106 2
d109 1
a109 2
coffcode.texi: chew.c $(srcdir)/../coffcode.h $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d112 2
d115 1
a115 2
core.texi: chew.c $(srcdir)/../corefile.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d118 2
d121 1
a121 2
elf.texi: chew.c $(srcdir)/../elf.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d124 2
d127 1
a127 2
elfcode.texi: chew.c $(srcdir)/../elfcode.h $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d130 2
d133 1
a133 2
mmo.texi: chew.c $(srcdir)/../mmo.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d136 2
d139 1
a139 2
format.texi: chew.c $(srcdir)/../format.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d142 2
d145 1
a145 2
libbfd.texi: chew.c $(srcdir)/../libbfd.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d148 2
d151 1
a151 2
bfdio.texi: chew.c $(srcdir)/../bfdio.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d154 2
d157 1
a157 2
bfdwin.texi: chew.c $(srcdir)/../bfdwin.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d160 2
d163 1
a163 2
opncls.texi: chew.c $(srcdir)/../opncls.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d166 2
d169 1
a169 2
reloc.texi: chew.c $(srcdir)/../reloc.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d172 2
d175 1
a175 2
section.texi: chew.c $(srcdir)/../section.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d178 2
d181 1
a181 2
syms.texi: chew.c $(srcdir)/../syms.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d184 2
d187 1
a187 2
targets.texi: chew.c $(srcdir)/../targets.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d190 2
d193 1
a193 2
init.texi: chew.c $(srcdir)/../init.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d196 2
d199 1
a199 2
hash.texi: chew.c $(srcdir)/../hash.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d202 2
d205 1
a205 2
linker.texi: chew.c $(srcdir)/../linker.c $(srcdir)/doc.str
	$(MAKE) $(MKDOC)
d208 2
d299 1
a299 1
CLEANFILES = *.p *.ip
@


