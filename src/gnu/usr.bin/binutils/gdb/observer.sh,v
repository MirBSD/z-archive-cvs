head	1.1;
branch	1.1.101;
access;
symbols
	MIRBSD_10:1.1.101.3.0.4
	MIRBSD_10_BASE:1.1.101.3
	MIRBSD_9_BASE:1.1.101.3
	MIRBSD_8:1.1.101.3.0.2
	MIRBSD_8_BASE:1.1.101.3
	binutils-20050707:1.1.101.3
	gdb-20050107:1.1.101.1
	FSF:1.1.101;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.00.21.16;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.02.05.00.21.16;	author tg;	state Exp;
branches;
next	1.1.101.2;

1.1.101.2
date	2005.05.14.16.39.03;	author tg;	state Exp;
branches;
next	1.1.101.3;
commitid	2ced428628ec0160;

1.1.101.3
date	2005.06.05.17.46.09;	author tg;	state Exp;
branches;
next	;
commitid	7ce142a33a2d11fb;


desc
@@


1.1
log
@Initial revision
@
text
@#!/bin/sh -e

if test $# -ne 3
then
    echo "Usage: $0 <h|inc> <observer.texi> <observer.out>" 1>&2
    exit 0
fi

lang=$1 ; shift
texi=$1 ; shift
o=$1 ; shift
echo "Creating ${o}-tmp" 1>&2
rm -f ${o}-tmp

# Can use any of the following: cat cmp cp diff echo egrep expr false
# grep install-info ln ls mkdir mv pwd rm rmdir sed sleep sort tar
# test touch true

cat <<EOF >>${o}-tmp
/* GDB Notifications to Observers.

   Copyright 2004 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.

   --

   This file was generated using observer.sh and observer.texi.  */

EOF


case $lang in
    h) cat <<EOF >>${o}-tmp
#ifndef OBSERVER_H
#define OBSERVER_H

struct observer;
struct bpstats;
struct so_list;
EOF
        ;;
esac


# generate a list of events that can be observed

IFS=:
sed -n '
/@@deftypefun void/{
# Save original line for later processing into the actual parameter
    h
# Convert from: @@deftypefun void EVENT (TYPE @@var{PARAM},...)
# to event and formals: EVENT:TYPE PARAM, ...:
    s/^.* void \([a-z_][a-z_]*\) (\(.*\))$/\1:\2/
    s/@@var{//g
    s/}//g
# Switch to held
    x
# Convert from: @@deftypefun void FUNC (TYPE @@var{PARAM},...)
# to actuals: PARAM, ...
    s/^[^{]*[{]*//
    s/[}]*[^}]*$//
    s/}[^{]*{/, /g
# Combine held (EVENT:TYPE PARAM, ...:) and pattern (PARAM, ...) into
# FUNC:TYPE PARAM, ...:PARAM, ...
    H
    x
    s/\n/:/g
    p
}
' $texi | while read event formal actual
do
  case $lang in
      h) cat <<EOF >>${o}-tmp

/* ${event} notifications.  */

typedef void (observer_${event}_ftype) (${formal});

extern struct observer *observer_attach_${event} (observer_${event}_ftype *f);
extern void observer_detach_${event} (struct observer *observer);
extern void observer_notify_${event} (${formal});
EOF
	;;

      inc)
      	cat <<EOF >>${o}-tmp

/* ${event} notifications.  */

static struct observer_list *${event}_subject = NULL;

struct ${event}_args { `echo "${formal}" | sed -e 's/,/;/g'`; };

static void
observer_${event}_notification_stub (const void *data, const void *args_data)
{
  observer_${event}_ftype *notify = (observer_${event}_ftype *) data;
  const struct ${event}_args *args = args_data;
  notify (`echo ${actual} | sed -e 's/\([a-z0-9_][a-z0-9_]*\)/args->\1/g'`);
}

struct observer *
observer_attach_${event} (observer_${event}_ftype *f)
{
  return generic_observer_attach (&${event}_subject,
				  &observer_${event}_notification_stub,
				  (void *) f);
}

void
observer_detach_${event} (struct observer *observer)
{
  generic_observer_detach (&${event}_subject, observer);
}

void
observer_notify_${event} (${formal})
{
  struct ${event}_args args;
  `echo ${actual} | sed -e 's/\([a-z0-9_][a-z0-9_]*\)/args.\1 = \1/g'`;
  if (observer_debug)
    fprintf_unfiltered (gdb_stdlog, "observer_notify_${event}() called\n");
  generic_observer_notify (${event}_subject, &args);
}
EOF
	;;
    esac
done


case $lang in
    h) cat <<EOF >>${o}-tmp

#endif /* OBSERVER_H */
EOF
esac


echo Moving ${o}-tmp to ${o}
mv ${o}-tmp ${o}
@


1.1.101.1
log
@The GNU Debugger, CVS version matching binutils
@
text
@@


1.1.101.2
log
@The GNU Debugger, today's -current (mainline) snapshot
Some directories removed as usual
@
text
@d11 3
a13 4
o=$1
otmp="`echo $1 | sed -e 's,\.[^.]*$,,'`.tmp"; shift
echo "Creating ${otmp}" 1>&2
rm -f ${otmp}
d19 1
a19 1
cat <<EOF >>${otmp}
d22 1
a22 1
   Copyright 2004, 2005 Free Software Foundation, Inc.
d49 1
a49 1
    h) cat <<EOF >>${otmp}
a59 7
# We are about to set IFS=:, so DOS-style file names with a drive
# letter and a colon will be in trouble.

if test -n $DJGPP
then
     texi=`echo $texi | sed -e 's,^\([a-zA-Z]\):/,/dev/\1/,'`
fi
d90 1
a90 1
      h) cat <<EOF >>${otmp}
d103 1
a103 1
      	cat <<EOF >>${otmp}
d149 1
a149 1
    h) cat <<EOF >>${otmp}
d156 2
a157 2
echo Moving ${otmp} to ${o}
mv ${otmp} ${o}
@


1.1.101.3
log
@Import GNU binutils and gdb as of today (snapshot), appropriately shortened
using src/scripts/binutils-import,v 1.4
@
text
@d64 1
a64 1
if test -n "$DJGPP"
@


