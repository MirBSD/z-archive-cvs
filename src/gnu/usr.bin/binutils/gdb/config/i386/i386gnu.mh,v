head	1.1;
branch	1.1.101;
access;
symbols
	MIRBSD_10:1.1.101.1.0.4
	MIRBSD_10_BASE:1.1.101.1
	MIRBSD_9_BASE:1.1.101.1
	MIRBSD_8:1.1.101.1.0.2
	MIRBSD_8_BASE:1.1.101.1
	binutils-20050707:1.1.101.1
	gdb-20050107:1.1.101.1
	FSF:1.1.101;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.00.21.30;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.02.05.00.21.30;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# Host: Intel 386 running the GNU Hurd
NATDEPFILES= i386gnu-nat.o gnu-nat.o corelow.o core-regset.o \
	     fork-child.o solib.o solib-svr4.o solib-legacy.o \
	     notify_S.o process_reply_S.o msg_reply_S.o \
	     msg_U.o exc_request_U.o exc_request_S.o

NAT_FILE= nm-i386gnu.h
MH_CFLAGS = -D_GNU_SOURCE

XM_CLIBS = -lshouldbeinlibc

# Use our own user stubs for the msg rpcs, so we can make them time out, in
# case the program is fucked, or we guess the wrong signal thread.
msg-MIGUFLAGS = -D'MSG_IMPORTS=waittime 1000;'

# ick
MIGCOM = $(MIG) -cc cat - /dev/null

# Reply servers need special massaging of the code mig generates, to make
# them work correctly for error returns in some cases.
%_reply_S.h %_reply_S.c: %_reply.defs
	$(CPP) $(CPPFLAGS) -DSERVERPREFIX=S_ -x c $< \
	| $(MIGCOM) -sheader $*_reply_S.h -server $*_reply_S.raw -user /dev/null -header /dev/null \
	&& $(AWK) -f $(srcdir)/reply_mig_hack.awk < $*_reply_S.raw > $*_reply_S.c
# Normal servers
%_S.h %_S.c: %.defs
	$(CPP) $(CPPFLAGS) -DSERVERPREFIX=S_ -x c $< \
	| $(MIGCOM) -sheader $*_S.h -server $*_S.c -user /dev/null -header /dev/null
# User rpc stubs
%_U.h %_U.c: %.defs
	$(CPP) $(CPPFLAGS) $($*-MIGUFLAGS) -x c $< \
	| $(MIGCOM) -sheader /dev/null -server /dev/null -user $*_U.c -header $*_U.h
@


1.1.101.1
log
@The GNU Debugger, CVS version matching binutils
@
text
@@
