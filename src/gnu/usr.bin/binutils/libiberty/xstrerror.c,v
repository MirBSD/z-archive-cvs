head	1.4;
access;
symbols
	MIRBSD_10:1.4.0.4
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4
	binutils-20050707:1.1.101.3
	FSF:1.1.101;
locks; strict;
comment	@ * @;


1.4
date	2005.06.05.21.24.47;	author tg;	state Exp;
branches;
next	1.3;
commitid	3cf942a36d3e2dcb;

1.3
date	2005.03.28.21.25.13;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.13.16.07.11;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.00.19.14;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.02.05.00.19.14;	author tg;	state Exp;
branches;
next	1.1.101.2;

1.1.101.2
date	2005.03.28.15.41.11;	author tg;	state Exp;
branches;
next	1.1.101.3;

1.1.101.3
date	2005.06.05.17.45.45;	author tg;	state Exp;
branches;
next	;
commitid	7ce142a33a2d11fb;


desc
@@


1.4
log
@first attempt to merge binutils and gdb of today (minus generated files)
XXX elf.sc yields equivalent results for MirOS; double-check against
XXX other platforms. this merger took as much time as ALL the other files!
@
text
@/* $MirOS: src/gnu/usr.bin/binutils/libiberty/xstrerror.c,v 1.3 2005/03/28 21:25:13 tg Exp $ */

/* xstrerror.c -- jacket routine for more robust strerror() usage.
   Fri Jun 16 18:30:00 1995  Pat Rankin  <rankin@@eql.caltech.edu>
   This code is in the public domain.  */

/*

@@deftypefn Replacement char* xstrerror (int @@var{errnum})

Behaves exactly like the standard @@code{strerror} function, but
will never return a @@code{NULL} pointer.

@@end deftypefn

*/

#include <stdio.h>

#include "config.h"
#include "libiberty.h"

__RCSID("$MirOS: src/gnu/usr.bin/binutils/libiberty/xstrerror.c,v 1.3 2005/03/28 21:25:13 tg Exp $");

#ifdef VMS
#  include <errno.h>
#  if !defined (__STRICT_ANSI__) && !defined (__HIDE_FORBIDDEN_NAMES)
#    ifdef __cplusplus
extern "C" {
#    endif /* __cplusplus */
extern char *strerror (int,...);
#    define DONT_DECLARE_STRERROR
#    ifdef __cplusplus
}
#    endif /* __cplusplus */
#  endif
#endif  /* VMS */


#ifndef DONT_DECLARE_STRERROR
#  ifdef __cplusplus
extern "C" {
#  endif /* __cplusplus */
extern char *strerror (int);
#  ifdef __cplusplus
}
#  endif /* __cplusplus */
#endif

/* If strerror returns NULL, we'll format the number into a static buffer.  */

#define ERRSTR_FMT "undocumented error #%d"
static char xstrerror_buf[sizeof ERRSTR_FMT + 20];

/* Like strerror, but result is never a null pointer.  */

char *
xstrerror (int errnum)
{
  char *errstr;
#ifdef VMS
  char *(*vmslib_strerror) (int,...);

  /* Override any possibly-conflicting declaration from system header.  */
  vmslib_strerror = (char *(*) (int,...)) strerror;
  /* Second argument matters iff first is EVMSERR, but it's simpler to
     pass it unconditionally.  `vaxc$errno' is declared in <errno.h>
     and maintained by the run-time library in parallel to `errno'.
     We assume that `errnum' corresponds to the last value assigned to
     errno by the run-time library, hence vaxc$errno will be relevant.  */
  errstr = (*vmslib_strerror) (errnum, vaxc$errno);
#else
  errstr = strerror (errnum);
#endif

  /* If `errnum' is out of range, result might be NULL.  We'll fix that.  */
  if (!errstr)
    {
      snprintf (xstrerror_buf, sizeof(ERRSTR_FMT) + 20, ERRSTR_FMT, errnum);
      errstr = xstrerror_buf;
    }
  return errstr;
}
@


1.3
log
@merge include and libiberty
new minor; 0 tests failed
@
text
@d1 1
a1 1
/* $MirOS: src/gnu/usr.bin/binutils/libiberty/xstrerror.c,v 1.2 2005/03/13 16:07:11 tg Exp $ */
d23 1
a23 1
__RCSID("$MirOS: src/gnu/usr.bin/binutils/libiberty/xstrerror.c,v 1.2 2005/03/13 16:07:11 tg Exp $");
d26 5
a30 2
#include <errno.h>
#if !defined (__STRICT_ANSI__) && !defined (__HIDE_FORBIDDEN_NAMES)
d32 7
a38 3
#define DONT_DECLARE_STRERROR
#endif
#endif	/* VMS */
d41 3
d45 3
@


1.2
log
@merge binutils, minus generated files, plus generated+hacked files
@
text
@d1 1
a1 1
/* $MirOS$ */
d23 1
a23 1
__RCSID("$MirOS$");
d28 1
a28 1
extern char *strerror PARAMS ((int,...));
d34 1
a34 1
extern char *strerror PARAMS ((int));
d45 1
a45 2
xstrerror (errnum)
     int errnum;
d49 1
a49 1
  char *(*vmslib_strerror) PARAMS ((int,...));
d52 1
a52 1
  vmslib_strerror = (char *(*) PARAMS ((int,...))) strerror;
@


1.1
log
@Initial revision
@
text
@d1 2
d23 2
d67 1
a67 1
      sprintf (xstrerror_buf, ERRSTR_FMT, errnum);
@


1.1.101.1
log
@GNU binutils (CVS snapshot)
@
text
@@


1.1.101.2
log
@GNU binutils (CVS snapshot), without
* top-level files
* bfd/po
* binutils/po
* binutils/testsuite
* gas/po
* gas/testsuite
* gprof
* intl
* ld/po
* ld/testsuite
* libiberty/config
* opcodes/po
* texinfo
(same procedure as usual)
@
text
@d24 1
a24 1
extern char *strerror (int,...);
d30 1
a30 1
extern char *strerror (int);
d41 2
a42 1
xstrerror (int errnum)
d46 1
a46 1
  char *(*vmslib_strerror) (int,...);
d49 1
a49 1
  vmslib_strerror = (char *(*) (int,...)) strerror;
@


1.1.101.3
log
@Import GNU binutils and gdb as of today (snapshot), appropriately shortened
using src/scripts/binutils-import,v 1.4
@
text
@d22 2
a23 5
#  include <errno.h>
#  if !defined (__STRICT_ANSI__) && !defined (__HIDE_FORBIDDEN_NAMES)
#    ifdef __cplusplus
extern "C" {
#    endif /* __cplusplus */
d25 3
a27 7
#    define DONT_DECLARE_STRERROR
#    ifdef __cplusplus
}
#    endif /* __cplusplus */
#  endif
#endif  /* VMS */

a29 3
#  ifdef __cplusplus
extern "C" {
#  endif /* __cplusplus */
a30 3
#  ifdef __cplusplus
}
#  endif /* __cplusplus */
@


