head	1.4;
access;
symbols
	MIRBSD_10:1.4.0.4
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4
	binutils-20050707:1.1.101.4
	FSF:1.1.101;
locks; strict;
comment	@ * @;


1.4
date	2005.06.05.21.24.46;	author tg;	state Exp;
branches;
next	1.3;
commitid	3cf942a36d3e2dcb;

1.3
date	2005.03.28.21.25.13;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.13.16.07.10;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.00.19.10;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.02.05.00.19.10;	author tg;	state Exp;
branches;
next	1.1.101.2;

1.1.101.2
date	2005.03.28.15.41.04;	author tg;	state Exp;
branches;
next	1.1.101.3;

1.1.101.3
date	2005.05.14.16.50.33;	author tg;	state Exp;
branches;
next	1.1.101.4;
commitid	3a6242862a097542;

1.1.101.4
date	2005.06.05.17.45.44;	author tg;	state Exp;
branches;
next	;
commitid	7ce142a33a2d11fb;


desc
@@


1.4
log
@first attempt to merge binutils and gdb of today (minus generated files)
XXX elf.sc yields equivalent results for MirOS; double-check against
XXX other platforms. this merger took as much time as ALL the other files!
@
text
@/* $MirOS: src/gnu/usr.bin/binutils/libiberty/make-temp-file.c,v 1.3 2005/03/28 21:25:13 tg Exp $ */

/* Utility to pick a temporary filename prefix.
   Copyright (C) 1996, 1997, 1998, 2001 Free Software Foundation, Inc.

This file is part of the libiberty library.
Libiberty is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

Libiberty is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with libiberty; see the file COPYING.LIB.  If not,
write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

__RCSID("$MirOS: src/gnu/usr.bin/binutils/libiberty/make-temp-file.c,v 1.3 2005/03/28 21:25:13 tg Exp $");

#include <stdio.h>	/* May get P_tmpdir.  */
#include <sys/types.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#ifdef HAVE_SYS_FILE_H
#include <sys/file.h>   /* May get R_OK, etc. on some systems.  */
#endif

#ifndef R_OK
#define R_OK 4
#define W_OK 2
#define X_OK 1
#endif

#include "libiberty.h"
extern int mkstemps (char *, int);

/* '/' works just fine on MS-DOS based systems.  */
#ifndef DIR_SEPARATOR
#define DIR_SEPARATOR '/'
#endif

/* Name of temporary file.
   mktemp requires 6 trailing X's.  */
#define TEMP_FILE "ccXXXXXX"
#define TEMP_FILE_LEN (sizeof(TEMP_FILE) - 1)

/* Subroutine of choose_tmpdir.
   If BASE is non-NULL, return it.
   Otherwise it checks if DIR is a usable directory.
   If success, DIR is returned.
   Otherwise NULL is returned.  */

static inline const char *try_dir (const char *, const char *);

static inline const char *
try_dir (const char *dir, const char *base)
{
  if (base != 0)
    return base;
  if (dir != 0
      && access (dir, R_OK | W_OK | X_OK) == 0)
    return dir;
  return 0;
}

static const char tmp[] = { DIR_SEPARATOR, 't', 'm', 'p', 0 };
static const char usrtmp[] =
{ DIR_SEPARATOR, 'u', 's', 'r', DIR_SEPARATOR, 't', 'm', 'p', 0 };
static const char vartmp[] =
{ DIR_SEPARATOR, 'v', 'a', 'r', DIR_SEPARATOR, 't', 'm', 'p', 0 };

static char *memoized_tmpdir;

/*

@@deftypefn Replacement char* choose_tmpdir ()

Returns a pointer to a directory path suitable for creating temporary
files in.

@@end deftypefn

*/

char *
choose_tmpdir (void)
{
  const char *base = 0;
  char *tmpdir;
  unsigned int len;

  if (memoized_tmpdir)
    return memoized_tmpdir;

  base = try_dir (getenv ("TMPDIR"), base);
  base = try_dir (getenv ("TMP"), base);
  base = try_dir (getenv ("TEMP"), base);

#ifdef P_tmpdir
  base = try_dir (P_tmpdir, base);
#endif

  /* Try /var/tmp, /usr/tmp, then /tmp.  */
  base = try_dir (vartmp, base);
  base = try_dir (usrtmp, base);
  base = try_dir (tmp, base);
 
  /* If all else fails, use the current directory!  */
  if (base == 0)
    base = ".";

  /* Append DIR_SEPARATOR to the directory we've chosen
     and return it.  */
  len = strlen (base);
  tmpdir = XNEWVEC (char, len + 2);
  strlcpy (tmpdir, base, len + 2);
  tmpdir[len] = DIR_SEPARATOR;
  tmpdir[len+1] = '\0';

  memoized_tmpdir = tmpdir;
  return tmpdir;
}

/*

@@deftypefn Replacement char* make_temp_file (const char *@@var{suffix})

Return a temporary file name (as a string) or @@code{NULL} if unable to
create one.  @@var{suffix} is a suffix to append to the file name.  The
string is @@code{malloc}ed, and the temporary file has been created.

@@end deftypefn

*/

char *
make_temp_file (const char *suffix)
{
  const char *base = choose_tmpdir ();
  char *temp_filename;
  int base_len, suffix_len;
  int fd;

  if (suffix == 0)
    suffix = "";

  base_len = strlen (base);
  suffix_len = strlen (suffix);

  temp_filename = XNEWVEC (char, base_len
			   + TEMP_FILE_LEN
			   + suffix_len + 1);
  strlcpy (temp_filename, base, base_len + TEMP_FILE_LEN + suffix_len + 1);
  strlcat (temp_filename, TEMP_FILE, base_len + TEMP_FILE_LEN + suffix_len + 1);
  strlcat (temp_filename, suffix, base_len + TEMP_FILE_LEN + suffix_len + 1);

  fd = mkstemps (temp_filename, suffix_len);
  /* If mkstemps failed, then something bad is happening.  Maybe we should
     issue a message about a possible security attack in progress?  */
  if (fd == -1)
    abort ();
  /* Similarly if we can not close the file.  */
  if (close (fd))
    abort ();
  return temp_filename;
}
@


1.3
log
@merge include and libiberty
new minor; 0 tests failed
@
text
@d1 1
a1 1
/* $MirOS: src/gnu/usr.bin/binutils/libiberty/make-temp-file.c,v 1.2 2005/03/13 16:07:10 tg Exp $ */
d19 2
a20 2
write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */
d26 1
a26 1
__RCSID("$MirOS: src/gnu/usr.bin/binutils/libiberty/make-temp-file.c,v 1.2 2005/03/13 16:07:10 tg Exp $");
d68 1
a68 1
static inline const char *try (const char *, const char *);
d71 1
a71 1
try (const char *dir, const char *base)
d110 3
a112 3
  base = try (getenv ("TMPDIR"), base);
  base = try (getenv ("TMP"), base);
  base = try (getenv ("TEMP"), base);
d115 1
a115 1
  base = try (P_tmpdir, base);
d119 3
a121 3
  base = try (vartmp, base);
  base = try (usrtmp, base);
  base = try (tmp, base);
d130 1
a130 1
  tmpdir = xmalloc (len + 2);
d165 1
a165 1
  temp_filename = xmalloc (base_len
@


1.2
log
@merge binutils, minus generated files, plus generated+hacked files
@
text
@d1 1
a1 1
/* $MirOS$ */
d26 1
a26 1
__RCSID("$MirOS$");
d50 1
a50 1
extern int mkstemps PARAMS ((char *, int));
d68 1
a68 1
static inline const char *try PARAMS ((const char *, const char *));
d71 1
a71 2
try (dir, base)
     const char *dir, *base;
d101 1
a101 1
choose_tmpdir ()
d152 1
a152 2
make_temp_file (suffix)
     const char *suffix;
@


1.1
log
@Initial revision
@
text
@d1 2
d26 2
d132 1
a132 1
  strcpy (tmpdir, base);
d170 3
a172 3
  strcpy (temp_filename, base);
  strcpy (temp_filename + base_len, TEMP_FILE);
  strcpy (temp_filename + base_len + TEMP_FILE_LEN, suffix);
@


1.1.101.1
log
@GNU binutils (CVS snapshot)
@
text
@@


1.1.101.2
log
@GNU binutils (CVS snapshot), without
* top-level files
* bfd/po
* binutils/po
* binutils/testsuite
* gas/po
* gas/testsuite
* gprof
* intl
* ld/po
* ld/testsuite
* libiberty/config
* opcodes/po
* texinfo
(same procedure as usual)
@
text
@d46 1
a46 1
extern int mkstemps (char *, int);
d64 1
a64 1
static inline const char *try (const char *, const char *);
d67 2
a68 1
try (const char *dir, const char *base)
d98 1
a98 1
choose_tmpdir (void)
d149 2
a150 1
make_temp_file (const char *suffix)
@


1.1.101.3
log
@GNU binutils, -current (mainline) snapshot as of today,
with the usual bunch of files removed
@
text
@d17 2
a18 2
write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */
@


1.1.101.4
log
@Import GNU binutils and gdb as of today (snapshot), appropriately shortened
using src/scripts/binutils-import,v 1.4
@
text
@d64 1
a64 1
static inline const char *try_dir (const char *, const char *);
d67 1
a67 1
try_dir (const char *dir, const char *base)
d106 3
a108 3
  base = try_dir (getenv ("TMPDIR"), base);
  base = try_dir (getenv ("TMP"), base);
  base = try_dir (getenv ("TEMP"), base);
d111 1
a111 1
  base = try_dir (P_tmpdir, base);
d115 3
a117 3
  base = try_dir (vartmp, base);
  base = try_dir (usrtmp, base);
  base = try_dir (tmp, base);
d126 1
a126 1
  tmpdir = XNEWVEC (char, len + 2);
d161 1
a161 1
  temp_filename = XNEWVEC (char, base_len
@


