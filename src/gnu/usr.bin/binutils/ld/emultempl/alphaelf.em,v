head	1.1;
branch	1.1.101;
access;
symbols
	MIRBSD_10:1.1.101.4.0.4
	MIRBSD_10_BASE:1.1.101.4
	MIRBSD_9_BASE:1.1.101.4
	MIRBSD_8:1.1.101.4.0.2
	MIRBSD_8_BASE:1.1.101.4
	binutils-20050707:1.1.101.4
	FSF:1.1.101;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.00.19.04;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.02.05.00.19.04;	author tg;	state Exp;
branches;
next	1.1.101.2;

1.1.101.2
date	2005.03.28.15.42.40;	author tg;	state Exp;
branches;
next	1.1.101.3;

1.1.101.3
date	2005.05.14.16.53.16;	author tg;	state Exp;
branches;
next	1.1.101.4;
commitid	3a6242862a097542;

1.1.101.4
date	2005.06.05.17.45.54;	author tg;	state Exp;
branches;
next	;
commitid	7ce142a33a2d11fb;


desc
@@


1.1
log
@Initial revision
@
text
@# This shell script emits a C file. -*- C -*-
#   Copyright 2003 Free Software Foundation, Inc.
#
# This file is part of GLD, the Gnu Linker.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

# This file is sourced from elf32.em, and defines extra alpha
# specific routines.
#
cat >>e${EMULATION_NAME}.c <<EOF

#include "elf/internal.h"
#include "elf/alpha.h"
#include "elf-bfd.h"

static int elf64alpha_32bit = 0;

/* Set the start address as in the Tru64 ld.  */
#define ALPHA_TEXT_START_32BIT 0x12000000

static void
alpha_after_parse (void)
{
  if (elf64alpha_32bit && !link_info.shared && !link_info.relocatable)
    lang_section_start (".interp",
			exp_binop ('+',
				   exp_intop (ALPHA_TEXT_START_32BIT),
				   exp_nameop (SIZEOF_HEADERS, NULL)),
			NULL);
}

static void
alpha_finish (void)
{
  if (elf64alpha_32bit)
    elf_elfheader (output_bfd)->e_flags |= EF_ALPHA_32BIT;

  gld${EMULATION_NAME}_finish ();
}
EOF

# Define some shell vars to insert bits of code into the standard elf
# parse_args and list_options functions.
#
PARSE_AND_LIST_PROLOGUE='
#define OPTION_TASO            300
'

PARSE_AND_LIST_LONGOPTS='
  {"taso", no_argument, NULL, OPTION_TASO},
'

PARSE_AND_LIST_OPTIONS='
  fprintf (file, _("  -taso\t\t\tLoad executable in the lower 31-bit addressable\n"));
  fprintf (file, _("\t\t\t  virtual address range\n"));
'

PARSE_AND_LIST_ARGS_CASES='
    case OPTION_TASO:
      elf64alpha_32bit = 1;
      break;
'

# Put these extra alpha routines in ld_${EMULATION_NAME}_emulation
#
LDEMUL_AFTER_PARSE=alpha_after_parse
LDEMUL_FINISH=alpha_finish
@


1.1.101.1
log
@GNU binutils (CVS snapshot)
@
text
@@


1.1.101.2
log
@GNU binutils (CVS snapshot), without
* top-level files
* bfd/po
* binutils/po
* binutils/testsuite
* gas/po
* gas/testsuite
* gprof
* intl
* ld/po
* ld/testsuite
* libiberty/config
* opcodes/po
* texinfo
(same procedure as usual)
@
text
@d2 1
a2 1
#   Copyright 2003, 2004 Free Software Foundation, Inc.
@


1.1.101.3
log
@GNU binutils, -current (mainline) snapshot as of today,
with the usual bunch of files removed
@
text
@d18 1
a18 1
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
@


1.1.101.4
log
@Import GNU binutils and gdb as of today (snapshot), appropriately shortened
using src/scripts/binutils-import,v 1.4
@
text
@d2 1
a2 1
#   Copyright 2003, 2004, 2005 Free Software Foundation, Inc.
d30 1
a30 7
static bfd_boolean limit_32bit;
static bfd_boolean disable_relaxation;

extern bfd_boolean elf64_alpha_use_secureplt;
extern const bfd_target bfd_elf64_alpha_vec;
extern const bfd_target bfd_elf64_alpha_freebsd_vec;

a35 33
alpha_after_open (void)
{
  if (link_info.hash->creator == &bfd_elf64_alpha_vec
      || link_info.hash->creator == &bfd_elf64_alpha_freebsd_vec)
    {
      unsigned int num_plt;
      lang_output_section_statement_type *os;
      lang_output_section_statement_type *plt_os[2];

      num_plt = 0;
      for (os = &lang_output_section_statement.head->output_section_statement;
	   os != NULL;
	   os = os->next)
	{
	  if (os->constraint == SPECIAL && strcmp (os->name, ".plt") == 0)
	    {
	      if (num_plt < 2)
		plt_os[num_plt] = os;
	      ++num_plt;
	    }
	}

      if (num_plt == 2)
	{
	  plt_os[0]->constraint = elf64_alpha_use_secureplt ? 0 : -1;
	  plt_os[1]->constraint = elf64_alpha_use_secureplt ? -1 : 0;
	}
    }

  gld${EMULATION_NAME}_after_open ();
}

static void
d38 1
a38 1
  if (limit_32bit && !link_info.shared && !link_info.relocatable)
a46 11
alpha_before_allocation (void)
{
  /* Call main function; we're just extending it.  */
  gld${EMULATION_NAME}_before_allocation ();

  /* Add -relax if -O, not -r, and not explicitly disabled.  */
  if (link_info.optimize && !link_info.relocatable && !disable_relaxation)
    command_line.relax = TRUE;
}

static void
d49 1
a49 1
  if (limit_32bit)
d60 1
a60 4
#define OPTION_TASO		300
#define OPTION_NO_RELAX		(OPTION_TASO + 1)
#define OPTION_SECUREPLT	(OPTION_NO_RELAX + 1)
#define OPTION_NO_SECUREPLT	(OPTION_SECUREPLT + 1)
d64 1
a64 4
  { "taso", no_argument, NULL, OPTION_TASO },
  { "no-relax", no_argument, NULL, OPTION_NO_RELAX },
  { "secureplt", no_argument, NULL, OPTION_SECUREPLT },
  { "no-secureplt", no_argument, NULL, OPTION_NO_SECUREPLT },
d68 2
a69 7
  fprintf (file, _("\
  --taso		Load executable in the lower 31-bit addressable\n\
			virtual address range.\n\
  --no-relax		Do not relax call and gp sequences.\n\
  --secureplt		Force PLT in text segment.\n\
  --no-secureplt	Force PLT in data segment.\n\
"));
d74 1
a74 10
      limit_32bit = 1;
      break;
    case OPTION_NO_RELAX:
      disable_relaxation = TRUE;
      break;
    case OPTION_SECUREPLT:
      elf64_alpha_use_secureplt = TRUE;
      break;
    case OPTION_NO_SECUREPLT:
      elf64_alpha_use_secureplt = FALSE;
a79 1
LDEMUL_AFTER_OPEN=alpha_after_open
a80 1
LDEMUL_BEFORE_ALLOCATION=alpha_before_allocation
@


