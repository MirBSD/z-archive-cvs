head	1.2;
access;
symbols
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.1.101.1.0.2
	MIRBSD_8_BASE:1.1.101.1
	binutils-20050707:1.1.101.1
	FSF:1.1.101;
locks; strict;
comment	@# @;


1.2
date	2006.06.16.23.38.41;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044934112776E17E9;

1.1
date	2005.07.07.15.31.54;	author tg;	state Exp;
branches
	1.1.101.1;
next	;
commitid	598542cd4ac1fb58;

1.1.101.1
date	2005.07.07.15.31.54;	author tg;	state Exp;
branches;
next	;
commitid	598542cd4ac1fb58;


desc
@@


1.2
log
@fix a bad substitution
@
text
@MACHINE=
SCRIPT_NAME=elf
OUTPUT_FORMAT="elf32-ms1"
# See also `include/elf/ms1.h'
TEXT_START_ADDR=0x2000
ARCH=ms1
ENTRY=_start
EMBEDDED=yes
ELFSIZE=32
MAXPAGESIZE=256
# This is like setting STACK_ADDR to 0x0073FFFF0, except that the setting can
# be overridden, e.g. --defsym _stack=0x0f00, and that we put an extra
# sentinal value at the bottom.
# N.B. We can't use PROVIDE to set the default value in a symbol because
# the address is needed to place the .stack section, which in turn is needed
# to hold the sentinel value(s).
test -z "$CREATE_SHLIB" && OTHER_SECTIONS="  .stack        ${RELOCATING-0}${RELOCATING+\(DEFINED\(__stack\) ? __stack : 0x007FFFF0\)} :
  {
    ${RELOCATING+__stack = .;}
    *(.stack)
    LONG(0xdeaddead)
  }"
# We do not need .stack for shared library.
test -n "$CREATE_SHLIB" && OTHER_SECTIONS=""
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
test -z "$CREATE_SHLIB" && OTHER_SECTIONS="  .stack        ${RELOCATING-0}${RELOCATING+(DEFINED(__stack) ? __stack : 0x007FFFF0)} :
@


1.1.101.1
log
@GNU binutils and debugger as of today
@
text
@@
