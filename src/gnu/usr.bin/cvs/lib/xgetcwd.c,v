head	1.1;
branch	1.1.101;
access;
symbols
	MIRBSD_10:1.1.101.3.0.4
	MIRBSD_10_BASE:1.1.101.3
	MIRBSD_9_BASE:1.1.101.3
	MIRBSD_8:1.1.101.3.0.2
	MIRBSD_8_BASE:1.1.101.3
	cvs-1_12_13:1.1.101.3
	cvs-1_12_12:1.1.101.2
	FSF:1.1.101;
locks; strict;
comment	@ * @;


1.1
date	2005.03.06.15.17.52;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.03.06.15.17.52;	author tg;	state Exp;
branches;
next	1.1.101.2;

1.1.101.2
date	2005.04.19.20.33.23;	author tg;	state Exp;
branches;
next	1.1.101.3;

1.1.101.3
date	2005.12.05.21.43.47;	author tg;	state Exp;
branches;
next	;
commitid	2cec4394b499b817;


desc
@@


1.1
log
@Initial revision
@
text
@/* xgetcwd.c -- return current directory with unlimited length

   Copyright (C) 1992, 1996, 2000, 2001, 2003, 2004 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software Foundation,
   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* Written by David MacKenzie <djm@@gnu.ai.mit.edu>.  */

#if HAVE_CONFIG_H
# include <config.h>
#endif

#include <limits.h>
#include <stdio.h>
#include <errno.h>
#include <sys/types.h>
#include <stdlib.h>

#if HAVE_UNISTD_H
# include <unistd.h>
#endif

#if HAVE_GETCWD
char *getcwd ();
#else
# include "pathmax.h"
# define INITIAL_BUFFER_SIZE (PATH_MAX + 1)
char *getwd ();
# define getcwd(Buf, Max) getwd (Buf)
#endif

#include "xalloc.h"
#include "xgetcwd.h"

/* Return the current directory, newly allocated, assuming it fits
   within PATH_MAX bytes -- this is a common system-imposed limit
   on how getcwd works.
   Upon an out-of-memory error, call xalloc_die.
   Upon any other type of error, return NULL.  */

char *
xgetcwd (void)
{
#if HAVE_GETCWD_NULL
  char *cwd = getcwd (NULL, 0);
  if (! cwd && errno == ENOMEM)
    xalloc_die ();
  return cwd;
#else

  int saved_errno;

  /* The initial buffer size for the working directory.  A power of 2
     detects arithmetic overflow earlier, but is not required.  */
# ifndef INITIAL_BUFFER_SIZE
#  define INITIAL_BUFFER_SIZE 128
# endif

  size_t buf_size = INITIAL_BUFFER_SIZE;

  while (1)
    {
      char *buf = xmalloc (buf_size);
      char *cwd = getcwd (buf, buf_size);
      if (cwd)
	return cwd;
      saved_errno = errno;
      free (buf);
      if (saved_errno != ERANGE)
	break;

#ifdef PATH_MAX
      if (PATH_MAX / 2 < buf_size)
	{
	  if (PATH_MAX <= buf_size)
	    break;
	  buf_size = PATH_MAX;
	  continue;
	}
#endif

      buf_size *= 2;
      if (buf_size == 0)
	xalloc_die ();
    }

  errno = saved_errno;
  return NULL;
#endif
}
@


1.1.101.1
log
@GNU CVS 1.12.11 with the following directories removed:
- contrib/pam
- emx
- os2
- tools
- vms
- windows-NT
- zlib
@
text
@@


1.1.101.2
log
@GNU CVS 1.12.12 "should" fix security issues
@
text
@d3 2
a4 1
   Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.
d20 1
a20 1
/* Written by Jim Meyering.  */
d26 9
a34 1
#include "xgetcwd.h"
d36 8
a43 1
#include <errno.h>
a44 1
#include "getcwd.h"
d46 1
d48 3
a50 1
/* Return the current directory, newly allocated.
d57 1
d62 41
@


1.1.101.3
log
@Import current version of GNU CVS, in the hope to actually fix bugs...
@
text
@d17 1
a17 1
   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
d21 1
a21 1
#ifdef HAVE_CONFIG_H
@


