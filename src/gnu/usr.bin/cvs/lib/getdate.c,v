head	1.18;
access;
symbols
	MIRBSD_10:1.9.0.2
	MIRBSD_10_BASE:1.9
	MIRBSD_9_BASE:1.6
	MIRBSD_8:1.6.0.2
	MIRBSD_8_BASE:1.6
	cvs-1_12_13:1.1.101.3
	cvs-1_12_12:1.1.101.2
	FSF:1.1.101;
locks; strict;
comment	@ * @;


1.18
date	2017.03.26.15.57.46;	author tg;	state Exp;
branches;
next	1.17;
commitid	10058D7E515014330A2;

1.17
date	2016.10.22.22.46.51;	author tg;	state Exp;
branches;
next	1.16;
commitid	100580BEC74327570ED;

1.16
date	2016.10.22.21.56.25;	author tg;	state Exp;
branches;
next	1.15;
commitid	100580BE0A203B8FC8C;

1.15
date	2016.10.21.20.59.19;	author tg;	state Exp;
branches;
next	1.14;
commitid	100580A81C115EDE59B;

1.14
date	2016.10.21.20.52.47;	author tg;	state Exp;
branches;
next	1.13;
commitid	100580A803018CAF60A;

1.13
date	2016.10.21.20.51.48;	author tg;	state Exp;
branches;
next	1.12;
commitid	100580A7FFB1E456B0E;

1.12
date	2011.06.11.03.37.36;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004DF2E317629A669C;

1.11
date	2010.09.19.19.42.58;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004C9667C83946BB2E;

1.10
date	2010.09.16.20.55.57;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004C928463526833A8;

1.9
date	2007.03.10.23.53.38;	author tg;	state Exp;
branches;
next	1.8;
commitid	10045F344D65465EF23;

1.8
date	2006.10.02.05.26.05;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004520A3036367F460;

1.7
date	2006.10.02.04.47.51;	author tg;	state Exp;
branches;
next	1.6;
commitid	10045209A0A264AF9CC;

1.6
date	2005.12.05.22.28.59;	author tg;	state Exp;
branches;
next	1.5;
commitid	11df4394bf38af52;

1.5
date	2005.04.19.21.29.37;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.19.21.15.01;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.15.20.09.17;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.13.16.50.56;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.06.15.17.50;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.03.06.15.17.50;	author tg;	state Exp;
branches;
next	1.1.101.2;

1.1.101.2
date	2005.04.19.20.33.22;	author tg;	state Exp;
branches;
next	1.1.101.3;

1.1.101.3
date	2005.12.05.21.43.46;	author tg;	state Exp;
branches;
next	;
commitid	2cec4394b499b817;


desc
@@


1.18
log
@refresh
@
text
@/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     tAGO = 258,
     tDST = 259,
     tDAY = 260,
     tDAY_UNIT = 261,
     tDAYZONE = 262,
     tHOUR_UNIT = 263,
     tLOCAL_ZONE = 264,
     tMERIDIAN = 265,
     tMINUTE_UNIT = 266,
     tMONTH = 267,
     tMONTH_UNIT = 268,
     tORDINAL = 269,
     tSEC_UNIT = 270,
     tYEAR_UNIT = 271,
     tZONE = 272,
     tSNUMBER = 273,
     tUNUMBER = 274,
     tSDECIMAL_NUMBER = 275,
     tUDECIMAL_NUMBER = 276
   };
#endif
/* Tokens.  */
#define tAGO 258
#define tDST 259
#define tDAY 260
#define tDAY_UNIT 261
#define tDAYZONE 262
#define tHOUR_UNIT 263
#define tLOCAL_ZONE 264
#define tMERIDIAN 265
#define tMINUTE_UNIT 266
#define tMONTH 267
#define tMONTH_UNIT 268
#define tORDINAL 269
#define tSEC_UNIT 270
#define tYEAR_UNIT 271
#define tZONE 272
#define tSNUMBER 273
#define tUNUMBER 274
#define tSDECIMAL_NUMBER 275
#define tUDECIMAL_NUMBER 276




/* Copy the first part of user declarations.  */
#line 1 "getdate.y"

/* Parse a string into an internal time stamp.

   Copyright (C) 1995, 1997, 1998, 2003, 2004, 2005
   Free Software Foundation, Inc.

   Copyright (c) 2005, 2006, 2007, 2010, 2016, 2017
   mirabilos <m@@mirbsd.org>

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software Foundation,
   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */

/* Originally written by Steven M. Bellovin <smb@@research.att.com> while
   at the University of North Carolina at Chapel Hill.  Later tweaked by
   a couple of people on Usenet.  Completely overhauled by Rich $alz
   <rsalz@@bbn.com> and Jim Berets <jberets@@bbn.com> in August, 1990.

   Modified by Paul Eggert <eggert@@twinsun.com> in August 1999 to do
   the right thing about local DST.  Also modified by Paul Eggert
   <eggert@@cs.ucla.edu> in February 2004 to support
   nanosecond-resolution time stamps, and in October 2004 to support
   TZ strings in dates.  */

/* FIXME: Check for arithmetic overflow in all cases, not just
   some of them.  */

#ifdef HAVE_CONFIG_H
# include <config.h>
#endif

#include "getdate.h"

#ifdef USE_LIBBSD
size_t strlcat(char *, const char *, size_t);
#endif

/* There's no need to extend the stack, so there's no need to involve
   alloca.  */
#define YYSTACK_USE_ALLOCA 0

/* Tell Bison how much stack space is needed.  20 should be plenty for
   this grammar, which is not right recursive.  Beware setting it too
   high, since that might cause problems on machines whose
   implementations have lame stack-overflow checking.  */
#define YYMAXDEPTH 20
#define YYINITDEPTH YYMAXDEPTH

/* Since the code of getdate.y is not included in the Emacs executable
   itself, there is no need to #define static in this file.  Even if
   the code were included in the Emacs executable, it probably
   wouldn't do any harm to #undef it here; this will only cause
   problems if we try to write to a static variable, which I don't
   think this code needs to do.  */
#ifdef emacs
# undef static
#endif

#include <ctype.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef _STDLIB_H
#define _STDLIB_H 1 /* GNU bison needs this */
#endif

#ifndef IN_RCS
#include "setenv.h"
#include "xalloc.h"
#else /* IN_RCS */
#include <unistd.h>

#define HAVE_STRUCT_TM_TM_ZONE 1
#define HAVE_TM_GMTOFF	1

#define gettime(ts)	clock_gettime(CLOCK_REALTIME,(ts))

static void *
xmalloc(size_t s)
{
	static const char xmalloc_enomem[] = "memory exhausted\n";
	void *x;

	if ((x = malloc(s)) == NULL) {
		write(2, xmalloc_enomem, sizeof(xmalloc_enomem) - 1);
		exit(1);
	}

	return (x);
}

static void *
xmemdup(void const *p, size_t s)
{
	return (memcpy(xmalloc(s), p, s));
}
#endif /* IN_RCS */

#if (defined(STDC_HEADERS) && STDC_HEADERS) || \
    (!defined(isascii) && !HAVE_ISASCII)
# define IN_CTYPE_DOMAIN(c) 1
#else
# define IN_CTYPE_DOMAIN(c) isascii (c)
#endif

#define ISSPACE(c) (IN_CTYPE_DOMAIN (c) && isspace (c))
#define ISALPHA(c) (IN_CTYPE_DOMAIN (c) && isalpha (c))
#define ISLOWER(c) (IN_CTYPE_DOMAIN (c) && islower (c))

/* ISDIGIT differs from isdigit, as follows:
   - Its arg may be any int or unsigned int; it need not be an unsigned char.
   - It's guaranteed to evaluate its argument exactly once.
   - It's typically faster.
   POSIX says that only '0' through '9' are digits.  Prefer ISDIGIT to
   isdigit unless it's important to use the locale's definition
   of `digit' even when the host does not conform to POSIX.  */
#define ISDIGIT(c) ((unsigned int) (c) - '0' <= 9)

#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 8) || \
    (defined(__STRICT_ANSI__) && __STRICT_ANSI__)
# define __attribute__(x)
#endif

#ifndef ATTRIBUTE_UNUSED
# define ATTRIBUTE_UNUSED __attribute__ ((__unused__))
#endif

#ifndef __IDSTRING
#define __IDSTRING(varname, string) \
	static const char varname[] __attribute__((__used__)) = \
	    "@@(""#)" #varname ": " string
#endif

__IDSTRING(rcsid_code, "$MirOS: src/gnu/usr.bin/cvs/lib/getdate.c,v 1.17 2016/10/22 22:46:51 tg Exp $");
__IDSTRING(rcsid_bron, "$miros: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.12 2017/03/26 15:54:06 tg Exp $");

/* Shift A right by B bits portably, by dividing A by 2**B and
   truncating towards minus infinity.  A and B should be free of side
   effects, and B should be in the range 0 <= B <= INT_BITS - 2, where
   INT_BITS is the number of useful bits in an int.  GNU code can
   assume that INT_BITS is at least 32.

   ISO C99 says that A >> B is implementation-defined if A < 0.  Some
   implementations (e.g., UNICOS 9.0 on a Cray Y-MP EL) don't shift
   right in the usual way when A < 0, so SHR falls back on division if
   ordinary A >> B doesn't seem to be the usual signed shift.  */
#define SHR(a, b)	\
  (-1 >> 1 == -1	\
   ? (a) >> (b)		\
   : (a) / (1 << (b)) - ((a) % (1 << (b)) < 0))

#define EPOCH_YEAR 1970
#define TM_YEAR_BASE 1900

#define HOUR(x) ((x) * 60)

/* An integer value, and the number of digits in its textual
   representation.  */
typedef struct
{
  bool negative;
  long int value;
  size_t digits;
} textint;

/* An entry in the lexical lookup table.  */
typedef struct
{
  char const *name;
  int type;
  int value;
} table;

/* Meridian: am, pm, or 24-hour style.  */
enum { MERam, MERpm, MER24 };

enum { BILLION = 1000000000, LOG10_BILLION = 9 };

/* Information passed to and from the parser.  */
typedef struct
{
  /* The input string remaining to be parsed. */
  const char *input;

  /* N, if this is the Nth Tuesday.  */
  long int day_ordinal;

  /* Day of week; Sunday is 0.  */
  int day_number;

  /* tm_isdst flag for the local zone.  */
  int local_isdst;

  /* Time zone, in minutes east of UTC.  */
  long int time_zone;

  /* Style used for time.  */
  int meridian;

  /* Gregorian year, month, day, hour, minutes, seconds, and nanoseconds.  */
  textint year;
  long int month;
  long int day;
  long int hour;
  long int minutes;
  struct timespec seconds; /* includes nanoseconds */

  /* Relative year, month, day, hour, minutes, seconds, and nanoseconds.  */
  long int rel_year;
  long int rel_month;
  long int rel_day;
  long int rel_hour;
  long int rel_minutes;
  long int rel_seconds;
  long int rel_ns;

  /* Presence or counts of nonterminals of various flavors parsed so far.  */
  bool timespec_seen;
  bool rels_seen;
  size_t dates_seen;
  size_t days_seen;
  size_t local_zones_seen;
  size_t dsts_seen;
  size_t times_seen;
  size_t zones_seen;

  /* Table of local time zone abbrevations, terminated by a null entry.  */
  table local_time_zone_table[3];
} parser_control;

union YYSTYPE;
static int yylex (union YYSTYPE *, parser_control *);
static int yyerror (parser_control *, const char *);
static long int time_zone_hhmm (textint, long int);



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 260 "getdate.y"
{
  long int intval;
  textint textintval;
  struct timespec timespec;
}
/* Line 193 of yacc.c.  */
#line 393 "getdate.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 406 "getdate.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined(YYENABLE_NLS) && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  12
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   88

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  26
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  19
/* YYNRULES -- Number of rules.  */
#define YYNRULES  78
/* YYNRULES -- Number of states.  */
#define YYNSTATES  96

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   276

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    24,     2,     2,    25,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    23,     2,
       2,     2,     2,     2,    22,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint8 yyprhs[] =
{
       0,     0,     3,     5,     7,    10,    11,    14,    16,    18,
      20,    22,    24,    26,    28,    31,    36,    42,    49,    57,
      59,    62,    64,    67,    71,    73,    76,    78,    81,    84,
      87,    91,    97,   101,   105,   109,   112,   117,   120,   124,
     127,   129,   132,   135,   137,   140,   143,   145,   148,   151,
     153,   156,   159,   161,   164,   167,   169,   172,   175,   178,
     181,   183,   185,   188,   191,   194,   197,   200,   203,   205,
     207,   209,   211,   213,   215,   217,   218,   221,   222
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int8 yyrhs[] =
{
      27,     0,    -1,    28,    -1,    29,    -1,    22,    39,    -1,
      -1,    29,    30,    -1,    31,    -1,    32,    -1,    33,    -1,
      35,    -1,    34,    -1,    36,    -1,    42,    -1,    19,    10,
      -1,    19,    23,    19,    44,    -1,    19,    23,    19,    18,
      43,    -1,    19,    23,    19,    23,    41,    44,    -1,    19,
      23,    19,    23,    41,    18,    43,    -1,     9,    -1,     9,
       4,    -1,    17,    -1,    17,    38,    -1,    17,    18,    43,
      -1,     7,    -1,    17,     4,    -1,     5,    -1,     5,    24,
      -1,    14,     5,    -1,    19,     5,    -1,    19,    25,    19,
      -1,    19,    25,    19,    25,    19,    -1,    19,    18,    18,
      -1,    19,    12,    18,    -1,    12,    18,    18,    -1,    12,
      19,    -1,    12,    19,    24,    19,    -1,    19,    12,    -1,
      19,    12,    19,    -1,    37,     3,    -1,    37,    -1,    14,
      16,    -1,    19,    16,    -1,    16,    -1,    14,    13,    -1,
      19,    13,    -1,    13,    -1,    14,     6,    -1,    19,     6,
      -1,     6,    -1,    14,     8,    -1,    19,     8,    -1,     8,
      -1,    14,    11,    -1,    19,    11,    -1,    11,    -1,    14,
      15,    -1,    19,    15,    -1,    20,    15,    -1,    21,    15,
      -1,    15,    -1,    38,    -1,    18,    16,    -1,    18,    13,
      -1,    18,     6,    -1,    18,     8,    -1,    18,    11,    -1,
      18,    15,    -1,    40,    -1,    41,    -1,    20,    -1,    18,
      -1,    21,    -1,    19,    -1,    19,    -1,    -1,    23,    19,
      -1,    -1,    10,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   281,   281,   282,   286,   293,   295,   299,   301,   303,
     305,   307,   309,   311,   315,   323,   331,   341,   348,   360,
     365,   373,   375,   377,   379,   381,   386,   391,   396,   401,
     409,   414,   434,   441,   449,   457,   462,   468,   473,   482,
     492,   496,   498,   500,   502,   504,   506,   508,   510,   512,
     514,   516,   518,   520,   522,   524,   526,   528,   530,   532,
     534,   536,   540,   542,   544,   546,   548,   550,   554,   554,
     557,   558,   563,   564,   569,   607,   608,   614,   615
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "tAGO", "tDST", "tDAY", "tDAY_UNIT",
  "tDAYZONE", "tHOUR_UNIT", "tLOCAL_ZONE", "tMERIDIAN", "tMINUTE_UNIT",
  "tMONTH", "tMONTH_UNIT", "tORDINAL", "tSEC_UNIT", "tYEAR_UNIT", "tZONE",
  "tSNUMBER", "tUNUMBER", "tSDECIMAL_NUMBER", "tUDECIMAL_NUMBER", "'@@'",
  "':'", "','", "'/'", "$accept", "spec", "timespec", "items", "item",
  "time", "local_zone", "zone", "day", "date", "rel", "relunit",
  "relunit_snumber", "seconds", "signed_seconds", "unsigned_seconds",
  "number", "o_colon_minutes", "o_merid", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    64,    58,    44,    47
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    26,    27,    27,    28,    29,    29,    30,    30,    30,
      30,    30,    30,    30,    31,    31,    31,    31,    31,    32,
      32,    33,    33,    33,    33,    33,    34,    34,    34,    34,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    36,
      36,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    38,    38,    38,    38,    38,    38,    39,    39,
      40,    40,    41,    41,    42,    43,    43,    44,    44
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     1,     2,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     2,     4,     5,     6,     7,     1,
       2,     1,     2,     3,     1,     2,     1,     2,     2,     2,
       3,     5,     3,     3,     3,     2,     4,     2,     3,     2,
       1,     2,     2,     1,     2,     2,     1,     2,     2,     1,
       2,     2,     1,     2,     2,     1,     2,     2,     2,     2,
       1,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     0,     2,     0,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       5,     0,     0,     2,     3,    71,    73,    70,    72,     4,
      68,    69,     1,    26,    49,    24,    52,    19,    55,     0,
      46,     0,    60,    43,    21,     0,    74,     0,     0,     6,
       7,     8,     9,    11,    10,    12,    40,    61,    13,    27,
      20,     0,    35,    28,    47,    50,    53,    44,    56,    41,
      25,    75,    22,    64,    65,    66,    63,    67,    62,    29,
      48,    51,    14,    54,    37,    45,    57,    42,     0,     0,
       0,    58,    59,    39,    34,     0,     0,    23,    33,    38,
      32,    77,    30,    36,    76,    78,    75,     0,    15,     0,
      16,    77,    31,    75,    17,    18
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int8 yydefgoto[] =
{
      -1,     2,     3,     4,    29,    30,    31,    32,    33,    34,
      35,    36,    37,     9,    10,    11,    38,    77,    88
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -43
static const yytype_int8 yypact[] =
{
     -18,    48,     9,   -43,    19,   -43,   -43,   -43,   -43,   -43,
     -43,   -43,   -43,    32,   -43,   -43,   -43,    54,   -43,    28,
     -43,    37,   -43,   -43,    -2,    49,    -5,    57,    58,   -43,
     -43,   -43,   -43,   -43,   -43,   -43,    60,   -43,   -43,   -43,
     -43,    56,    51,   -43,   -43,   -43,   -43,   -43,   -43,   -43,
     -43,     6,   -43,   -43,   -43,   -43,   -43,   -43,   -43,   -43,
     -43,   -43,   -43,   -43,    52,   -43,   -43,   -43,    59,    61,
      62,   -43,   -43,   -43,   -43,    63,    64,   -43,   -43,   -43,
     -43,    31,    53,   -43,   -43,   -43,    65,    40,   -43,    66,
     -43,     5,   -43,    65,   -43,   -43
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int8 yypgoto[] =
{
     -43,   -43,   -43,   -43,   -43,   -43,   -43,   -43,   -43,   -43,
     -43,   -43,    55,   -43,   -43,   -11,   -43,   -42,    -7
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1
static const yytype_uint8 yytable[] =
{
      59,    60,    50,    61,     1,    62,    63,    64,    65,    12,
      66,    67,    53,    68,    54,    85,    51,    55,    69,    56,
      70,    57,    58,    93,    13,    14,    15,    16,    17,    76,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    85,    43,    44,    90,    45,    41,    42,    46,    86,
      47,    95,    48,    49,    87,    53,    39,    54,    40,     6,
      55,     8,    56,    73,    57,    58,     5,     6,     7,     8,
      78,    79,    71,    72,    74,    75,    91,    80,    89,    52,
      81,    82,    83,    84,    94,    92,     0,     0,    76
};

static const yytype_int8 yycheck[] =
{
       5,     6,     4,     8,    22,    10,    11,    12,    13,     0,
      15,    16,     6,    18,     8,    10,    18,    11,    23,    13,
      25,    15,    16,    18,     5,     6,     7,     8,     9,    23,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    10,     5,     6,    86,     8,    18,    19,    11,    18,
      13,    93,    15,    16,    23,     6,    24,     8,     4,    19,
      11,    21,    13,     3,    15,    16,    18,    19,    20,    21,
      18,    19,    15,    15,    18,    24,    87,    18,    25,    24,
      19,    19,    19,    19,    91,    19,    -1,    -1,    23
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    22,    27,    28,    29,    18,    19,    20,    21,    39,
      40,    41,     0,     5,     6,     7,     8,     9,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    42,    24,
       4,    18,    19,     5,     6,     8,    11,    13,    15,    16,
       4,    18,    38,     6,     8,    11,    13,    15,    16,     5,
       6,     8,    10,    11,    12,    13,    15,    16,    18,    23,
      25,    15,    15,     3,    18,    24,    23,    43,    18,    19,
      18,    19,    19,    19,    19,    10,    18,    23,    44,    25,
      43,    41,    19,    18,    44,    43
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (pc, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined(YYLTYPE_IS_TRIVIAL) && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, pc)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, pc); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, parser_control *pc)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, pc)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    parser_control *pc;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (pc);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, parser_control *pc)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, pc)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    parser_control *pc;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, pc);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, parser_control *pc)
#else
static void
yy_reduce_print (yyvsp, yyrule, pc)
    YYSTYPE *yyvsp;
    int yyrule;
    parser_control *pc;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , pc);
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, pc); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, parser_control *pc)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, pc)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    parser_control *pc;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (pc);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (parser_control *pc);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (parser_control *pc)
#else
int
yyparse (pc)
    parser_control *pc;
#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 4:
#line 287 "getdate.y"
    {
	pc->seconds = (yyvsp[(2) - (2)].timespec);
	pc->timespec_seen = true;
      ;}
    break;

  case 7:
#line 300 "getdate.y"
    { pc->times_seen++; ;}
    break;

  case 8:
#line 302 "getdate.y"
    { pc->local_zones_seen++; ;}
    break;

  case 9:
#line 304 "getdate.y"
    { pc->zones_seen++; ;}
    break;

  case 10:
#line 306 "getdate.y"
    { pc->dates_seen++; ;}
    break;

  case 11:
#line 308 "getdate.y"
    { pc->days_seen++; ;}
    break;

  case 12:
#line 310 "getdate.y"
    { pc->rels_seen = true; ;}
    break;

  case 14:
#line 316 "getdate.y"
    {
	pc->hour = (yyvsp[(1) - (2)].textintval).value;
	pc->minutes = 0;
	pc->seconds.tv_sec = 0;
	pc->seconds.tv_nsec = 0;
	pc->meridian = (yyvsp[(2) - (2)].intval);
      ;}
    break;

  case 15:
#line 324 "getdate.y"
    {
	pc->hour = (yyvsp[(1) - (4)].textintval).value;
	pc->minutes = (yyvsp[(3) - (4)].textintval).value;
	pc->seconds.tv_sec = 0;
	pc->seconds.tv_nsec = 0;
	pc->meridian = (yyvsp[(4) - (4)].intval);
      ;}
    break;

  case 16:
#line 332 "getdate.y"
    {
	pc->hour = (yyvsp[(1) - (5)].textintval).value;
	pc->minutes = (yyvsp[(3) - (5)].textintval).value;
	pc->seconds.tv_sec = 0;
	pc->seconds.tv_nsec = 0;
	pc->meridian = MER24;
	pc->zones_seen++;
	pc->time_zone = time_zone_hhmm ((yyvsp[(4) - (5)].textintval), (yyvsp[(5) - (5)].intval));
      ;}
    break;

  case 17:
#line 342 "getdate.y"
    {
	pc->hour = (yyvsp[(1) - (6)].textintval).value;
	pc->minutes = (yyvsp[(3) - (6)].textintval).value;
	pc->seconds = (yyvsp[(5) - (6)].timespec);
	pc->meridian = (yyvsp[(6) - (6)].intval);
      ;}
    break;

  case 18:
#line 349 "getdate.y"
    {
	pc->hour = (yyvsp[(1) - (7)].textintval).value;
	pc->minutes = (yyvsp[(3) - (7)].textintval).value;
	pc->seconds = (yyvsp[(5) - (7)].timespec);
	pc->meridian = MER24;
	pc->zones_seen++;
	pc->time_zone = time_zone_hhmm ((yyvsp[(6) - (7)].textintval), (yyvsp[(7) - (7)].intval));
      ;}
    break;

  case 19:
#line 361 "getdate.y"
    {
	pc->local_isdst = (yyvsp[(1) - (1)].intval);
	pc->dsts_seen += (0 < (yyvsp[(1) - (1)].intval));
      ;}
    break;

  case 20:
#line 366 "getdate.y"
    {
	pc->local_isdst = 1;
	pc->dsts_seen += (0 < (yyvsp[(1) - (2)].intval)) + 1;
      ;}
    break;

  case 21:
#line 374 "getdate.y"
    { pc->time_zone = (yyvsp[(1) - (1)].intval); ;}
    break;

  case 22:
#line 376 "getdate.y"
    { pc->time_zone = (yyvsp[(1) - (2)].intval); pc->rels_seen = true; ;}
    break;

  case 23:
#line 378 "getdate.y"
    { pc->time_zone = (yyvsp[(1) - (3)].intval) + time_zone_hhmm ((yyvsp[(2) - (3)].textintval), (yyvsp[(3) - (3)].intval)); ;}
    break;

  case 24:
#line 380 "getdate.y"
    { pc->time_zone = (yyvsp[(1) - (1)].intval) + 60; ;}
    break;

  case 25:
#line 382 "getdate.y"
    { pc->time_zone = (yyvsp[(1) - (2)].intval) + 60; ;}
    break;

  case 26:
#line 387 "getdate.y"
    {
	pc->day_ordinal = 1;
	pc->day_number = (yyvsp[(1) - (1)].intval);
      ;}
    break;

  case 27:
#line 392 "getdate.y"
    {
	pc->day_ordinal = 1;
	pc->day_number = (yyvsp[(1) - (2)].intval);
      ;}
    break;

  case 28:
#line 397 "getdate.y"
    {
	pc->day_ordinal = (yyvsp[(1) - (2)].intval);
	pc->day_number = (yyvsp[(2) - (2)].intval);
      ;}
    break;

  case 29:
#line 402 "getdate.y"
    {
	pc->day_ordinal = (yyvsp[(1) - (2)].textintval).value;
	pc->day_number = (yyvsp[(2) - (2)].intval);
      ;}
    break;

  case 30:
#line 410 "getdate.y"
    {
	pc->month = (yyvsp[(1) - (3)].textintval).value;
	pc->day = (yyvsp[(3) - (3)].textintval).value;
      ;}
    break;

  case 31:
#line 415 "getdate.y"
    {
	/* Interpret as YYYY/MM/DD if the first value has 4 or more digits,
	   otherwise as MM/DD/YY.
	   The goal in recognizing YYYY/MM/DD is solely to support legacy
	   machine-generated dates like those in an RCS log listing.  If
	   you want portability, use the ISO 8601 format.  */
	if (4 <= (yyvsp[(1) - (5)].textintval).digits)
	  {
	    pc->year = (yyvsp[(1) - (5)].textintval);
	    pc->month = (yyvsp[(3) - (5)].textintval).value;
	    pc->day = (yyvsp[(5) - (5)].textintval).value;
	  }
	else
	  {
	    pc->month = (yyvsp[(1) - (5)].textintval).value;
	    pc->day = (yyvsp[(3) - (5)].textintval).value;
	    pc->year = (yyvsp[(5) - (5)].textintval);
	  }
      ;}
    break;

  case 32:
#line 435 "getdate.y"
    {
	/* ISO 8601 format.  YYYY-MM-DD.  */
	pc->year = (yyvsp[(1) - (3)].textintval);
	pc->month = -(yyvsp[(2) - (3)].textintval).value;
	pc->day = -(yyvsp[(3) - (3)].textintval).value;
      ;}
    break;

  case 33:
#line 442 "getdate.y"
    {
	/* e.g. 17-JUN-1992.  */
	pc->day = (yyvsp[(1) - (3)].textintval).value;
	pc->month = (yyvsp[(2) - (3)].intval);
	pc->year.value = -(yyvsp[(3) - (3)].textintval).value;
	pc->year.digits = (yyvsp[(3) - (3)].textintval).digits;
      ;}
    break;

  case 34:
#line 450 "getdate.y"
    {
	/* e.g. JUN-17-1992.  */
	pc->month = (yyvsp[(1) - (3)].intval);
	pc->day = -(yyvsp[(2) - (3)].textintval).value;
	pc->year.value = -(yyvsp[(3) - (3)].textintval).value;
	pc->year.digits = (yyvsp[(3) - (3)].textintval).digits;
      ;}
    break;

  case 35:
#line 458 "getdate.y"
    {
	pc->month = (yyvsp[(1) - (2)].intval);
	pc->day = (yyvsp[(2) - (2)].textintval).value;
      ;}
    break;

  case 36:
#line 463 "getdate.y"
    {
	pc->month = (yyvsp[(1) - (4)].intval);
	pc->day = (yyvsp[(2) - (4)].textintval).value;
	pc->year = (yyvsp[(4) - (4)].textintval);
      ;}
    break;

  case 37:
#line 469 "getdate.y"
    {
	pc->day = (yyvsp[(1) - (2)].textintval).value;
	pc->month = (yyvsp[(2) - (2)].intval);
      ;}
    break;

  case 38:
#line 474 "getdate.y"
    {
	pc->day = (yyvsp[(1) - (3)].textintval).value;
	pc->month = (yyvsp[(2) - (3)].intval);
	pc->year = (yyvsp[(3) - (3)].textintval);
      ;}
    break;

  case 39:
#line 483 "getdate.y"
    {
	pc->rel_ns = -pc->rel_ns;
	pc->rel_seconds = -pc->rel_seconds;
	pc->rel_minutes = -pc->rel_minutes;
	pc->rel_hour = -pc->rel_hour;
	pc->rel_day = -pc->rel_day;
	pc->rel_month = -pc->rel_month;
	pc->rel_year = -pc->rel_year;
      ;}
    break;

  case 41:
#line 497 "getdate.y"
    { pc->rel_year += (yyvsp[(1) - (2)].intval) * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 42:
#line 499 "getdate.y"
    { pc->rel_year += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 43:
#line 501 "getdate.y"
    { pc->rel_year += (yyvsp[(1) - (1)].intval); ;}
    break;

  case 44:
#line 503 "getdate.y"
    { pc->rel_month += (yyvsp[(1) - (2)].intval) * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 45:
#line 505 "getdate.y"
    { pc->rel_month += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 46:
#line 507 "getdate.y"
    { pc->rel_month += (yyvsp[(1) - (1)].intval); ;}
    break;

  case 47:
#line 509 "getdate.y"
    { pc->rel_day += (yyvsp[(1) - (2)].intval) * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 48:
#line 511 "getdate.y"
    { pc->rel_day += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 49:
#line 513 "getdate.y"
    { pc->rel_day += (yyvsp[(1) - (1)].intval); ;}
    break;

  case 50:
#line 515 "getdate.y"
    { pc->rel_hour += (yyvsp[(1) - (2)].intval) * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 51:
#line 517 "getdate.y"
    { pc->rel_hour += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 52:
#line 519 "getdate.y"
    { pc->rel_hour += (yyvsp[(1) - (1)].intval); ;}
    break;

  case 53:
#line 521 "getdate.y"
    { pc->rel_minutes += (yyvsp[(1) - (2)].intval) * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 54:
#line 523 "getdate.y"
    { pc->rel_minutes += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 55:
#line 525 "getdate.y"
    { pc->rel_minutes += (yyvsp[(1) - (1)].intval); ;}
    break;

  case 56:
#line 527 "getdate.y"
    { pc->rel_seconds += (yyvsp[(1) - (2)].intval) * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 57:
#line 529 "getdate.y"
    { pc->rel_seconds += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 58:
#line 531 "getdate.y"
    { pc->rel_seconds += (yyvsp[(1) - (2)].timespec).tv_sec * (yyvsp[(2) - (2)].intval); pc->rel_ns += (yyvsp[(1) - (2)].timespec).tv_nsec * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 59:
#line 533 "getdate.y"
    { pc->rel_seconds += (yyvsp[(1) - (2)].timespec).tv_sec * (yyvsp[(2) - (2)].intval); pc->rel_ns += (yyvsp[(1) - (2)].timespec).tv_nsec * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 60:
#line 535 "getdate.y"
    { pc->rel_seconds += (yyvsp[(1) - (1)].intval); ;}
    break;

  case 62:
#line 541 "getdate.y"
    { pc->rel_year += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 63:
#line 543 "getdate.y"
    { pc->rel_month += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 64:
#line 545 "getdate.y"
    { pc->rel_day += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 65:
#line 547 "getdate.y"
    { pc->rel_hour += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 66:
#line 549 "getdate.y"
    { pc->rel_minutes += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 67:
#line 551 "getdate.y"
    { pc->rel_seconds += (yyvsp[(1) - (2)].textintval).value * (yyvsp[(2) - (2)].intval); ;}
    break;

  case 71:
#line 559 "getdate.y"
    { (yyval.timespec).tv_sec = (yyvsp[(1) - (1)].textintval).value; (yyval.timespec).tv_nsec = 0; ;}
    break;

  case 73:
#line 565 "getdate.y"
    { (yyval.timespec).tv_sec = (yyvsp[(1) - (1)].textintval).value; (yyval.timespec).tv_nsec = 0; ;}
    break;

  case 74:
#line 570 "getdate.y"
    {
	if (pc->dates_seen && ! pc->year.digits
	    && ! pc->rels_seen && (pc->times_seen || 2 < (yyvsp[(1) - (1)].textintval).digits))
	  pc->year = (yyvsp[(1) - (1)].textintval);
	else
	  {
	    if (4 < (yyvsp[(1) - (1)].textintval).digits)
	      {
		pc->dates_seen++;
		pc->day = (yyvsp[(1) - (1)].textintval).value % 100;
		pc->month = ((yyvsp[(1) - (1)].textintval).value / 100) % 100;
		pc->year.value = (yyvsp[(1) - (1)].textintval).value / 10000;
		pc->year.digits = (yyvsp[(1) - (1)].textintval).digits - 4;
	      }
	    else
	      {
		pc->times_seen++;
		if ((yyvsp[(1) - (1)].textintval).digits <= 2)
		  {
		    pc->hour = (yyvsp[(1) - (1)].textintval).value;
		    pc->minutes = 0;
		  }
		else
		  {
		    pc->hour = (yyvsp[(1) - (1)].textintval).value / 100;
		    pc->minutes = (yyvsp[(1) - (1)].textintval).value % 100;
		  }
		pc->seconds.tv_sec = 0;
		pc->seconds.tv_nsec = 0;
		pc->meridian = MER24;
	      }
	  }
      ;}
    break;

  case 75:
#line 607 "getdate.y"
    { (yyval.intval) = -1; ;}
    break;

  case 76:
#line 609 "getdate.y"
    { (yyval.intval) = (yyvsp[(2) - (2)].textintval).value; ;}
    break;

  case 77:
#line 614 "getdate.y"
    { (yyval.intval) = MER24; ;}
    break;

  case 78:
#line 616 "getdate.y"
    { (yyval.intval) = (yyvsp[(1) - (1)].intval); ;}
    break;


/* Line 1267 of yacc.c.  */
#line 2171 "getdate.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (pc, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (pc, yymsg);
	  }
	else
	  {
	    yyerror (pc, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, pc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, pc);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (pc, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, pc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, pc);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 619 "getdate.y"


static table const meridian_table[] =
{
  { "AM",   tMERIDIAN, MERam },
  { "A.M.", tMERIDIAN, MERam },
  { "PM",   tMERIDIAN, MERpm },
  { "P.M.", tMERIDIAN, MERpm },
  { NULL, 0, 0 }
};

static table const dst_table[] =
{
  { "DST", tDST, 0 }
};

static table const month_and_day_table[] =
{
  { "JANUARY",	tMONTH,	 1 },
  { "FEBRUARY",	tMONTH,	 2 },
  { "MARCH",	tMONTH,	 3 },
  { "APRIL",	tMONTH,	 4 },
  { "MAY",	tMONTH,	 5 },
  { "JUNE",	tMONTH,	 6 },
  { "JULY",	tMONTH,	 7 },
  { "AUGUST",	tMONTH,	 8 },
  { "SEPTEMBER",tMONTH,	 9 },
  { "SEPT",	tMONTH,	 9 },
  { "OCTOBER",	tMONTH,	10 },
  { "NOVEMBER",	tMONTH,	11 },
  { "DECEMBER",	tMONTH,	12 },
  { "SUNDAY",	tDAY,	 0 },
  { "MONDAY",	tDAY,	 1 },
  { "TUESDAY",	tDAY,	 2 },
  { "TUES",	tDAY,	 2 },
  { "WEDNESDAY",tDAY,	 3 },
  { "WEDNES",	tDAY,	 3 },
  { "THURSDAY",	tDAY,	 4 },
  { "THUR",	tDAY,	 4 },
  { "THURS",	tDAY,	 4 },
  { "FRIDAY",	tDAY,	 5 },
  { "SATURDAY",	tDAY,	 6 },
  { NULL, 0, 0 }
};

static table const time_units_table[] =
{
  { "YEAR",	tYEAR_UNIT,	 1 },
  { "MONTH",	tMONTH_UNIT,	 1 },
  { "FORTNIGHT",tDAY_UNIT,	14 },
  { "WEEK",	tDAY_UNIT,	 7 },
  { "DAY",	tDAY_UNIT,	 1 },
  { "HOUR",	tHOUR_UNIT,	 1 },
  { "MINUTE",	tMINUTE_UNIT,	 1 },
  { "MIN",	tMINUTE_UNIT,	 1 },
  { "SECOND",	tSEC_UNIT,	 1 },
  { "SEC",	tSEC_UNIT,	 1 },
  { NULL, 0, 0 }
};

/* Assorted relative-time words. */
static table const relative_time_table[] =
{
  { "TOMORROW",	tDAY_UNIT,	 1 },
  { "YESTERDAY",tDAY_UNIT,	-1 },
  { "TODAY",	tDAY_UNIT,	 0 },
  { "NOW",	tDAY_UNIT,	 0 },
  { "LAST",	tORDINAL,	-1 },
  { "THIS",	tORDINAL,	 0 },
  { "NEXT",	tORDINAL,	 1 },
  { "FIRST",	tORDINAL,	 1 },
/*{ "SECOND",	tORDINAL,	 2 }, */
  { "THIRD",	tORDINAL,	 3 },
  { "FOURTH",	tORDINAL,	 4 },
  { "FIFTH",	tORDINAL,	 5 },
  { "SIXTH",	tORDINAL,	 6 },
  { "SEVENTH",	tORDINAL,	 7 },
  { "EIGHTH",	tORDINAL,	 8 },
  { "NINTH",	tORDINAL,	 9 },
  { "TENTH",	tORDINAL,	10 },
  { "ELEVENTH",	tORDINAL,	11 },
  { "TWELFTH",	tORDINAL,	12 },
  { "AGO",	tAGO,		 1 },
  { NULL, 0, 0 }
};

/* The universal time zone table.  These labels can be used even for
   time stamps that would not otherwise be valid, e.g., GMT time
   stamps in London during summer.  */
static table const universal_time_zone_table[] =
{
  { "GMT",	tZONE,     HOUR ( 0) },	/* Greenwich Mean */
  { "UT",	tZONE,     HOUR ( 0) },	/* Universal (Coordinated) */
  { "UTC",	tZONE,     HOUR ( 0) },
  { NULL, 0, 0 }
};

/* The time zone table.  This table is necessarily incomplete, as time
   zone abbreviations are ambiguous; e.g. Australians interpret "EST"
   as Eastern time in Australia, not as US Eastern Standard Time.
   You cannot rely on getdate to handle arbitrary time zone
   abbreviations; use numeric abbreviations like `-0500' instead.  */
static table const time_zone_table[] =
{
  { "WET",	tZONE,     HOUR ( 0) },	/* Western European */
  { "WEST",	tDAYZONE,  HOUR ( 0) },	/* Western European Summer */
  { "BST",	tDAYZONE,  HOUR ( 0) },	/* British Summer */
  { "ART",	tZONE,	  -HOUR ( 3) },	/* Argentina */
  { "BRT",	tZONE,	  -HOUR ( 3) },	/* Brazil */
  { "BRST",	tDAYZONE, -HOUR ( 3) },	/* Brazil Summer */
  { "NST",	tZONE,	 -(HOUR ( 3) + 30) },	/* Newfoundland Standard */
  { "NDT",	tDAYZONE,-(HOUR ( 3) + 30) },	/* Newfoundland Daylight */
  { "AST",	tZONE,    -HOUR ( 4) },	/* Atlantic Standard */
  { "ADT",	tDAYZONE, -HOUR ( 4) },	/* Atlantic Daylight */
  { "CLT",	tZONE,    -HOUR ( 4) },	/* Chile */
  { "CLST",	tDAYZONE, -HOUR ( 4) },	/* Chile Summer */
  { "EST",	tZONE,    -HOUR ( 5) },	/* Eastern Standard */
  { "EDT",	tDAYZONE, -HOUR ( 5) },	/* Eastern Daylight */
  { "CST",	tZONE,    -HOUR ( 6) },	/* Central Standard */
  { "CDT",	tDAYZONE, -HOUR ( 6) },	/* Central Daylight */
  { "MST",	tZONE,    -HOUR ( 7) },	/* Mountain Standard */
  { "MDT",	tDAYZONE, -HOUR ( 7) },	/* Mountain Daylight */
  { "PST",	tZONE,    -HOUR ( 8) },	/* Pacific Standard */
  { "PDT",	tDAYZONE, -HOUR ( 8) },	/* Pacific Daylight */
  { "AKST",	tZONE,    -HOUR ( 9) },	/* Alaska Standard */
  { "AKDT",	tDAYZONE, -HOUR ( 9) },	/* Alaska Daylight */
  { "HST",	tZONE,    -HOUR (10) },	/* Hawaii Standard */
  { "HAST",	tZONE,	  -HOUR (10) },	/* Hawaii-Aleutian Standard */
  { "HADT",	tDAYZONE, -HOUR (10) },	/* Hawaii-Aleutian Daylight */
  { "SST",	tZONE,    -HOUR (12) },	/* Samoa Standard */
  { "WAT",	tZONE,     HOUR ( 1) },	/* West Africa */
  { "CET",	tZONE,     HOUR ( 1) },	/* Central European */
  { "CEST",	tDAYZONE,  HOUR ( 1) },	/* Central European Summer */
  { "MET",	tZONE,     HOUR ( 1) },	/* Middle European */
  { "MEZ",	tZONE,     HOUR ( 1) },	/* Middle European */
  { "MEST",	tDAYZONE,  HOUR ( 1) },	/* Middle European Summer */
  { "MESZ",	tDAYZONE,  HOUR ( 1) },	/* Middle European Summer */
  { "EET",	tZONE,     HOUR ( 2) },	/* Eastern European */
  { "EEST",	tDAYZONE,  HOUR ( 2) },	/* Eastern European Summer */
  { "CAT",	tZONE,	   HOUR ( 2) },	/* Central Africa */
  { "SAST",	tZONE,	   HOUR ( 2) },	/* South Africa Standard */
  { "EAT",	tZONE,	   HOUR ( 3) },	/* East Africa */
  { "MSK",	tZONE,	   HOUR ( 3) },	/* Moscow */
  { "MSD",	tDAYZONE,  HOUR ( 3) },	/* Moscow Daylight */
  { "IST",	tZONE,	  (HOUR ( 5) + 30) },	/* India Standard */
  { "SGT",	tZONE,     HOUR ( 8) },	/* Singapore */
  { "KST",	tZONE,     HOUR ( 9) },	/* Korea Standard */
  { "JST",	tZONE,     HOUR ( 9) },	/* Japan Standard */
  { "GST",	tZONE,     HOUR (10) },	/* Guam Standard */
  { "NZST",	tZONE,     HOUR (12) },	/* New Zealand Standard */
  { "NZDT",	tDAYZONE,  HOUR (12) },	/* New Zealand Daylight */
  { NULL, 0, 0 }
};

/* Military time zone table. */
static table const military_table[] =
{
  { "A", tZONE,	-HOUR ( 1) },
  { "B", tZONE,	-HOUR ( 2) },
  { "C", tZONE,	-HOUR ( 3) },
  { "D", tZONE,	-HOUR ( 4) },
  { "E", tZONE,	-HOUR ( 5) },
  { "F", tZONE,	-HOUR ( 6) },
  { "G", tZONE,	-HOUR ( 7) },
  { "H", tZONE,	-HOUR ( 8) },
  { "I", tZONE,	-HOUR ( 9) },
  { "K", tZONE,	-HOUR (10) },
  { "L", tZONE,	-HOUR (11) },
  { "M", tZONE,	-HOUR (12) },
  { "N", tZONE,	 HOUR ( 1) },
  { "O", tZONE,	 HOUR ( 2) },
  { "P", tZONE,	 HOUR ( 3) },
  { "Q", tZONE,	 HOUR ( 4) },
  { "R", tZONE,	 HOUR ( 5) },
  { "S", tZONE,	 HOUR ( 6) },
  { "T", tZONE,	 HOUR ( 7) },
  { "U", tZONE,	 HOUR ( 8) },
  { "V", tZONE,	 HOUR ( 9) },
  { "W", tZONE,	 HOUR (10) },
  { "X", tZONE,	 HOUR (11) },
  { "Y", tZONE,	 HOUR (12) },
  { "Z", tZONE,	 HOUR ( 0) },
  { NULL, 0, 0 }
};



/* Convert a time zone expressed as HH:MM into an integer count of
   minutes.  If MM is negative, then S is of the form HHMM and needs
   to be picked apart; otherwise, S is of the form HH.  */

static long int
time_zone_hhmm (textint s, long int mm)
{
  if (mm < 0)
    return (s.value / 100) * 60 + s.value % 100;
  else
    return s.value * 60 + (s.negative ? -mm : mm);
}

static int
to_hour (long int hours, int meridian)
{
  switch (meridian)
    {
    default: /* Pacify GCC.  */
    case MER24:
      return 0 <= hours && hours < 24 ? hours : -1;
    case MERam:
      return 0 < hours && hours < 12 ? hours : hours == 12 ? 0 : -1;
    case MERpm:
      return 0 < hours && hours < 12 ? hours + 12 : hours == 12 ? 12 : -1;
    }
}

static long int
to_year (textint textyear)
{
  long int year = textyear.value;

  if (year < 0)
    year = -year;

  /* XPG4 suggests that years 00-68 map to 2000-2068, and
     years 69-99 map to 1969-1999.  */
  else if (textyear.digits == 2)
    year += year < 69 ? 2000 : 1900;

  return year;
}

static table const *
lookup_zone (parser_control const *pc, char const *name)
{
  table const *tp;

  for (tp = universal_time_zone_table; tp->name; tp++)
    if (strcmp (name, tp->name) == 0)
      return tp;

  /* Try local zone abbreviations before those in time_zone_table, as
     the local ones are more likely to be right.  */
  for (tp = pc->local_time_zone_table; tp->name; tp++)
    if (strcmp (name, tp->name) == 0)
      return tp;

  for (tp = time_zone_table; tp->name; tp++)
    if (strcmp (name, tp->name) == 0)
      return tp;

  return NULL;
}

#if ! HAVE_TM_GMTOFF
/* Yield the difference between *A and *B,
   measured in seconds, ignoring leap seconds.
   The body of this function is taken directly from the GNU C Library;
   see src/strftime.c.  */
static long int
tm_diff (struct tm const *a, struct tm const *b)
{
  /* Compute intervening leap days correctly even if year is negative.
     Take care to avoid int overflow in leap day calculations.  */
  int a4 = SHR (a->tm_year, 2) + SHR (TM_YEAR_BASE, 2) - ! (a->tm_year & 3);
  int b4 = SHR (b->tm_year, 2) + SHR (TM_YEAR_BASE, 2) - ! (b->tm_year & 3);
  int a100 = a4 / 25 - (a4 % 25 < 0);
  int b100 = b4 / 25 - (b4 % 25 < 0);
  int a400 = SHR (a100, 2);
  int b400 = SHR (b100, 2);
  int intervening_leap_days = (a4 - b4) - (a100 - b100) + (a400 - b400);
  long int ayear = a->tm_year;
  long int years = ayear - b->tm_year;
  long int days = (365 * years + intervening_leap_days
		   + (a->tm_yday - b->tm_yday));
  return (60 * (60 * (24 * days + (a->tm_hour - b->tm_hour))
		+ (a->tm_min - b->tm_min))
	  + (a->tm_sec - b->tm_sec));
}
#endif /* ! HAVE_TM_GMTOFF */

static table const *
lookup_word (parser_control const *pc, char *word)
{
  char *p;
  char *q;
  size_t wordlen;
  table const *tp;
  bool period_found;
  bool abbrev;

  /* Make it uppercase.  */
  for (p = word; *p; p++)
    {
      unsigned char ch = *p;
      if (ISLOWER (ch))
	*p = toupper (ch);
    }

  for (tp = meridian_table; tp->name; tp++)
    if (strcmp (word, tp->name) == 0)
      return tp;

  /* See if we have an abbreviation for a month. */
  wordlen = strlen (word);
  abbrev = wordlen == 3 || (wordlen == 4 && word[3] == '.');

  for (tp = month_and_day_table; tp->name; tp++)
    if ((abbrev ? strncmp (word, tp->name, 3) : strcmp (word, tp->name)) == 0)
      return tp;

  if ((tp = lookup_zone (pc, word)))
    return tp;

  if (strcmp (word, dst_table[0].name) == 0)
    return dst_table;

  for (tp = time_units_table; tp->name; tp++)
    if (strcmp (word, tp->name) == 0)
      return tp;

  /* Strip off any plural and try the units table again. */
  if (word[wordlen - 1] == 'S')
    {
      word[wordlen - 1] = '\0';
      for (tp = time_units_table; tp->name; tp++)
	if (strcmp (word, tp->name) == 0)
	  return tp;
      word[wordlen - 1] = 'S';	/* For "this" in relative_time_table.  */
    }

  for (tp = relative_time_table; tp->name; tp++)
    if (strcmp (word, tp->name) == 0)
      return tp;

  /* Military time zones. */
  if (wordlen == 1)
    for (tp = military_table; tp->name; tp++)
      if (word[0] == tp->name[0])
	return tp;

  /* Drop out any periods and try the time zone table again. */
  for (period_found = false, p = q = word; (*p = *q); q++)
    if (*q == '.')
      period_found = true;
    else
      p++;
  if (period_found && (tp = lookup_zone (pc, word)))
    return tp;

  return NULL;
}

static int
yylex (YYSTYPE *lvalp, parser_control *pc)
{
  unsigned char c;
  size_t count;

  for (;;)
    {
      while (c = *pc->input, ISSPACE (c))
	pc->input++;

      if (ISDIGIT (c) || c == '-' || c == '+')
	{
	  char const *p;
	  int sign;
	  unsigned long int value;
	  if (c == '-' || c == '+')
	    {
	      sign = c == '-' ? -1 : 1;
	      while (c = *++pc->input, ISSPACE (c))
		continue;
	      if (! ISDIGIT (c))
		/* skip the '-' sign */
		continue;
	    }
	  else
	    sign = 0;
	  p = pc->input;
	  for (value = 0; ; value *= 10)
	    {
	      unsigned long int value1 = value + (c - '0');
	      if (value1 < value)
		return '?';
	      value = value1;
	      c = *++p;
	      if (! ISDIGIT (c))
		break;
	      if (ULONG_MAX / 10 < value)
		return '?';
	    }
	  if ((c == '.' || c == ',') && ISDIGIT (p[1]))
	    {
	      time_t s;
	      int ns;
	      int digits;
	      unsigned long int value1;

	      /* Check for overflow when converting value to time_t.  */
	      if (sign < 0)
		{
		  s = - value;
		  if (0 < s)
		    return '?';
		  value1 = -s;
		}
	      else
		{
		  s = value;
		  if (s < 0)
		    return '?';
		  value1 = s;
		}
	      if (value != value1)
		return '?';

	      /* Accumulate fraction, to ns precision.  */
	      p++;
	      ns = *p++ - '0';
	      for (digits = 2; digits <= LOG10_BILLION; digits++)
		{
		  ns *= 10;
		  if (ISDIGIT (*p))
		    ns += *p++ - '0';
		}

	      /* Skip excess digits, truncating toward -Infinity.  */
	      if (sign < 0)
		for (; ISDIGIT (*p); p++)
		  if (*p != '0')
		    {
		      ns++;
		      break;
		    }
	      while (ISDIGIT (*p))
		p++;

	      /* Adjust to the timespec convention, which is that
		 tv_nsec is always a positive offset even if tv_sec is
		 negative.  */
	      if (sign < 0 && ns)
		{
		  s--;
		  if (! (s < 0))
		    return '?';
		  ns = BILLION - ns;
		}

	      lvalp->timespec.tv_sec = s;
	      lvalp->timespec.tv_nsec = ns;
	      pc->input = p;
	      return sign ? tSDECIMAL_NUMBER : tUDECIMAL_NUMBER;
	    }
	  else
	    {
	      lvalp->textintval.negative = sign < 0;
	      if (sign < 0)
		{
		  lvalp->textintval.value = - value;
		  if (0 < lvalp->textintval.value)
		    return '?';
		}
	      else
		{
		  lvalp->textintval.value = value;
		  if (lvalp->textintval.value < 0)
		    return '?';
		}
	      lvalp->textintval.digits = p - pc->input;
	      pc->input = p;
	      return sign ? tSNUMBER : tUNUMBER;
	    }
	}

      if (ISALPHA (c))
	{
	  char buff[20];
	  char *p = buff;
	  table const *tp;

	  do
	    {
	      if (p < buff + sizeof buff - 1)
		*p++ = c;
	      c = *++pc->input;
	    }
	  while (ISALPHA (c) || c == '.');

	  *p = '\0';
	  tp = lookup_word (pc, buff);
	  if (! tp)
	    return '?';
	  lvalp->intval = tp->value;
	  return tp->type;
	}

      if (c != '(')
	return *pc->input++;
      count = 0;
      do
	{
	  c = *pc->input++;
	  if (c == '\0')
	    return c;
	  if (c == '(')
	    count++;
	  else if (c == ')')
	    count--;
	}
      while (count != 0);
    }
}

/* Do nothing if the parser reports an error.  */
static int
yyerror (parser_control *pc ATTRIBUTE_UNUSED, const char *s ATTRIBUTE_UNUSED)
{
  return 0;
}

/* If *TM0 is the old and *TM1 is the new value of a struct tm after
   passing it to mktime, return true if it's OK that mktime returned T.
   It's not OK if *TM0 has out-of-range members.  */

static bool
mktime_ok (struct tm const *tm0, struct tm const *tm1, time_t t)
{
  if (t == (time_t) -1)
    {
      /* Guard against falsely reporting an error when parsing a time
	 stamp that happens to equal (time_t) -1, on a host that
	 supports such a time stamp.  */
      tm1 = localtime (&t);
      if (!tm1)
	return false;
    }

  return ! ((tm0->tm_sec ^ tm1->tm_sec)
	    | (tm0->tm_min ^ tm1->tm_min)
	    | (tm0->tm_hour ^ tm1->tm_hour)
	    | (tm0->tm_mday ^ tm1->tm_mday)
	    | (tm0->tm_mon ^ tm1->tm_mon)
	    | (tm0->tm_year ^ tm1->tm_year));
}

/* A reasonable upper bound for the size of ordinary TZ strings.
   Use heap allocation if TZ's length exceeds this.  */
enum { TZBUFSIZE = 100 };

/* Return a copy of TZ, stored in TZBUF if it fits, and heap-allocated
   otherwise.  */
static char *
get_tz (char tzbuf[TZBUFSIZE])
{
  char *tz = getenv ("TZ");
  if (tz)
    {
      size_t tzsize = strlen (tz) + 1;
      tz = (tzsize == 1 ? NULL : (tzsize <= TZBUFSIZE
	    ? memcpy (tzbuf, tz, tzsize)
	    : xmemdup (tz, tzsize)));
    }
  return tz;
}

/* Parse a date/time string, storing the resulting time value into *RESULT.
   The string itself is pointed to by P.  Return true if successful.
   P can be an incomplete or relative time specification; if so, use
   *NOW as the basis for the returned time.  */
bool
get_date (struct timespec *result, char const *p, struct timespec const *now)
{
  time_t Start;
  long int Start_ns;
  struct tm const *tmp;
  struct tm tm;
  struct tm tm0;
  parser_control pc;
  struct timespec gettime_buffer;
  unsigned char c;
  bool tz_was_altered = false;
  char *tz0 = NULL;
  char tz0buf[TZBUFSIZE];
  bool ok = true;

  if (! now)
    {
      gettime (&gettime_buffer);
      now = &gettime_buffer;
    }

  Start = now->tv_sec;
  Start_ns = now->tv_nsec;

  tmp = localtime (&now->tv_sec);
  if (! tmp)
    return false;

  while (c = *p, ISSPACE (c))
    p++;

  if (strncmp (p, "TZ=\"", 4) == 0)
    {
      char const *tzbase = p + 4;
      size_t tzsize = 1;
      char const *s;

      for (s = tzbase; *s; s++, tzsize++)
	if (*s == '\\')
	  {
	    s++;
	    if (! (*s == '\\' || *s == '"'))
	      break;
	  }
	else if (*s == '"')
	  {
	    char *z;
	    char *tz1;
	    char tz1buf[TZBUFSIZE];
	    bool large_tz = TZBUFSIZE < tzsize;
	    bool setenv_ok;
	    tz0 = get_tz (tz0buf);
	    z = tz1 = large_tz ? xmalloc (tzsize) : tz1buf;
	    for (s = tzbase; *s != '"'; s++)
	      *z++ = *(s += *s == '\\');
	    *z = '\0';
	    setenv_ok = setenv ("TZ", tz1, 1) == 0;
	    if (large_tz)
	      free (tz1);
	    if (!setenv_ok)
	      goto fail;
	    tz_was_altered = true;
	    p = s + 1;
	  }
    }

  pc.input = p;
  pc.year.value = tmp->tm_year;
  pc.year.value += TM_YEAR_BASE;
  pc.year.digits = 0;
  pc.month = tmp->tm_mon + 1;
  pc.day = tmp->tm_mday;
  pc.hour = tmp->tm_hour;
  pc.minutes = tmp->tm_min;
  pc.seconds.tv_sec = tmp->tm_sec;
  pc.seconds.tv_nsec = Start_ns;
  tm.tm_isdst = tmp->tm_isdst;

  pc.meridian = MER24;
  pc.rel_ns = 0;
  pc.rel_seconds = 0;
  pc.rel_minutes = 0;
  pc.rel_hour = 0;
  pc.rel_day = 0;
  pc.rel_month = 0;
  pc.rel_year = 0;
  pc.timespec_seen = false;
  pc.rels_seen = false;
  pc.dates_seen = 0;
  pc.days_seen = 0;
  pc.times_seen = 0;
  pc.local_zones_seen = 0;
  pc.dsts_seen = 0;
  pc.zones_seen = 0;

#if HAVE_STRUCT_TM_TM_ZONE
  pc.local_time_zone_table[0].name = tmp->tm_zone;
  pc.local_time_zone_table[0].type = tLOCAL_ZONE;
  pc.local_time_zone_table[0].value = tmp->tm_isdst;
  pc.local_time_zone_table[1].name = NULL;

  /* Probe the names used in the next three calendar quarters, looking
     for a tm_isdst different from the one we already have.  */
  {
    int quarter;
    for (quarter = 1; quarter <= 3; quarter++)
      {
	time_t probe = Start + quarter * (90 * 24 * 60 * 60);
	struct tm const *probe_tm = localtime (&probe);
	if (probe_tm && probe_tm->tm_zone
	    && probe_tm->tm_isdst != pc.local_time_zone_table[0].value)
	  {
	      {
		pc.local_time_zone_table[1].name = probe_tm->tm_zone;
		pc.local_time_zone_table[1].type = tLOCAL_ZONE;
		pc.local_time_zone_table[1].value = probe_tm->tm_isdst;
		pc.local_time_zone_table[2].name = NULL;
	      }
	    break;
	  }
      }
  }
#else
#if HAVE_TZNAME
  {
# ifndef tzname
    extern char *tzname[];
# endif
    int i;
    for (i = 0; i < 2; i++)
      {
	pc.local_time_zone_table[i].name = tzname[i];
	pc.local_time_zone_table[i].type = tLOCAL_ZONE;
	pc.local_time_zone_table[i].value = i;
      }
    pc.local_time_zone_table[i].name = NULL;
  }
#else
  pc.local_time_zone_table[0].name = NULL;
#endif
#endif

  if (pc.local_time_zone_table[0].name && pc.local_time_zone_table[1].name
      && ! strcmp (pc.local_time_zone_table[0].name,
		   pc.local_time_zone_table[1].name))
    {
      /* This locale uses the same abbrevation for standard and
	 daylight times.  So if we see that abbreviation, we don't
	 know whether it's daylight time.  */
      pc.local_time_zone_table[0].value = -1;
      pc.local_time_zone_table[1].name = NULL;
    }

  if (yyparse (&pc) != 0)
    goto fail;

  if (pc.timespec_seen)
    *result = pc.seconds;
  else
    {
      if (1 < (pc.times_seen | pc.dates_seen | pc.days_seen | pc.dsts_seen
	       | (pc.local_zones_seen + pc.zones_seen)))
	goto fail;

      tm.tm_year = to_year (pc.year) - TM_YEAR_BASE;
      tm.tm_mon = pc.month - 1;
      tm.tm_mday = pc.day;
      if (pc.times_seen || (pc.rels_seen && ! pc.dates_seen && ! pc.days_seen))
	{
	  tm.tm_hour = to_hour (pc.hour, pc.meridian);
	  if (tm.tm_hour < 0)
	    goto fail;
	  tm.tm_min = pc.minutes;
	  tm.tm_sec = pc.seconds.tv_sec;
	}
      else
	{
	  tm.tm_hour = tm.tm_min = tm.tm_sec = 0;
	  pc.seconds.tv_nsec = 0;
	}

      /* Let mktime deduce tm_isdst if we have an absolute time stamp.  */
      if (!pc.rels_seen)
	tm.tm_isdst = -1;

      /* But if the input explicitly specifies local time with or without
	 DST, give mktime that information.  */
      if (pc.local_zones_seen)
	tm.tm_isdst = pc.local_isdst;

      tm0 = tm;

      Start = mktime (&tm);

      if (! mktime_ok (&tm0, &tm, Start))
	{
	  if (! pc.zones_seen)
	    goto fail;
	  else
	    {
	      /* Guard against falsely reporting errors near the time_t
		 boundaries when parsing times in other time zones.  For
		 example, suppose the input string "1969-12-31 23:00:00 -0100",
		 the current time zone is 8 hours ahead of UTC, and the min
		 time_t value is 1970-01-01 00:00:00 UTC.  Then the min
		 localtime value is 1970-01-01 08:00:00, and mktime will
		 therefore fail on 1969-12-31 23:00:00.  To work around the
		 problem, set the time zone to 1 hour behind UTC temporarily
		 by setting TZ="XXX1:00" and try mktime again.  */

	      long int time_zone = pc.time_zone;
	      long int abs_time_zone = time_zone < 0 ? - time_zone : time_zone;
	      long int abs_time_zone_hour = abs_time_zone / 60;
	      int abs_time_zone_min = abs_time_zone % 60;
	      char tz1buf[sizeof "XXX+0:00"
			  + sizeof pc.time_zone * CHAR_BIT / 3];
	      if (!tz_was_altered)
		tz0 = get_tz (tz0buf);
	      snprintf(tz1buf, sizeof(tz1buf),
		       "XXX%s%ld:%02d", "-" + (time_zone < 0),
		       abs_time_zone_hour, abs_time_zone_min);
	      if (setenv ("TZ", tz1buf, 1) != 0)
		goto fail;
	      tz_was_altered = true;
	      tm = tm0;
	      Start = mktime (&tm);
	      if (! mktime_ok (&tm0, &tm, Start))
		goto fail;
	    }
	}

      if (pc.days_seen && ! pc.dates_seen)
	{
	  tm.tm_mday += ((pc.day_number - tm.tm_wday + 7) % 7
			 + 7 * (pc.day_ordinal - (0 < pc.day_ordinal)));
	  tm.tm_isdst = -1;
	  Start = mktime (&tm);
	  if (Start == (time_t) -1)
	    goto fail;
	}

      if (pc.zones_seen)
	{
	  long int delta = pc.time_zone * 60;
	  time_t t1;
#ifdef HAVE_TM_GMTOFF
	  delta -= tm.tm_gmtoff;
#else
	  time_t t = Start;
	  struct tm const *gmt = gmtime (&t);
	  if (! gmt)
	    goto fail;
	  delta -= tm_diff (&tm, gmt);
#endif
	  t1 = Start - delta;
	  if ((Start < t1) != (delta < 0))
	    goto fail;	/* time_t overflow */
	  Start = t1;
	}

      /* Add relative date.  */
      if (pc.rel_year | pc.rel_month | pc.rel_day)
	{
	  int year = tm.tm_year + pc.rel_year;
	  int month = tm.tm_mon + pc.rel_month;
	  int day = tm.tm_mday + pc.rel_day;
	  if (((year < tm.tm_year) ^ (pc.rel_year < 0))
	      | ((month < tm.tm_mon) ^ (pc.rel_month < 0))
	      | ((day < tm.tm_mday) ^ (pc.rel_day < 0)))
	    goto fail;
	  tm.tm_year = year;
	  tm.tm_mon = month;
	  tm.tm_mday = day;
	  Start = mktime (&tm);
	  if (Start == (time_t) -1)
	    goto fail;
	}

      /* Add relative hours, minutes, and seconds.  On hosts that support
	 leap seconds, ignore the possibility of leap seconds; e.g.,
	 "+ 10 minutes" adds 600 seconds, even if one of them is a
	 leap second.  Typically this is not what the user wants, but it's
	 too hard to do it the other way, because the time zone indicator
	 must be applied before relative times, and if mktime is applied
	 again the time zone will be lost.  */
      {
	long int sum_ns = pc.seconds.tv_nsec + pc.rel_ns;
	long int normalized_ns = (sum_ns % BILLION + BILLION) % BILLION;
	time_t t0 = Start;
	long int d1 = 60 * 60 * pc.rel_hour;
	time_t t1 = t0 + d1;
	long int d2 = 60 * pc.rel_minutes;
	time_t t2 = t1 + d2;
	long int d3 = pc.rel_seconds;
	time_t t3 = t2 + d3;
	long int d4 = (sum_ns - normalized_ns) / BILLION;
	time_t t4 = t3 + d4;

	if ((d1 / (60 * 60) ^ pc.rel_hour)
	    | (d2 / 60 ^ pc.rel_minutes)
	    | ((t1 < t0) ^ (d1 < 0))
	    | ((t2 < t1) ^ (d2 < 0))
	    | ((t3 < t2) ^ (d3 < 0))
	    | ((t4 < t3) ^ (d4 < 0)))
	  goto fail;

	result->tv_sec = t4;
	result->tv_nsec = normalized_ns;
      }
    }

  goto done;

 fail:
  ok = false;
 done:
  if (tz_was_altered)
    ok &= (tz0 ? setenv("TZ", tz0, 1) : (unsetenv("TZ"), 0)) == 0;
  if (tz0 != tz0buf)
    free (tz0);
  return ok;
}

#if TEST

int
main(int argc, char **argv)
{
  char buff[BUFSIZ];
  int cmd = 0;

  if (argc > 1) {
    int i = 1;
    buff[0] = '\0';
    while (i < argc) {
      if (i > 1)
	strlcat(buff, " ", BUFSIZ);
      strlcat(buff, argv[i++], BUFSIZ);
    }
    cmd++;
    goto once;
  }

  printf("Enter date, or blank line to exit.\n> ");
  fflush (stdout);

  buff[BUFSIZ - 1] = '\0';
  while (fgets(buff, BUFSIZ - 1, stdin) && buff[0] &&
         buff[0] != '\r' && buff[0] != '\n')
    {
      struct timespec d;
      struct tm const *tm;
 once:
      if (! get_date (&d, buff, NULL))
	printf ("Bad format - couldn't convert.\n");
      else if (! (tm = localtime (&d.tv_sec)))
	{
	  printf ("localtime (%lld) failed\n", (long long)d.tv_sec);
	}
      else
	{
	  int ns = d.tv_nsec;
	  printf ("%13lld =\t%04ld-%02d-%02d %02d:%02d:%02d.%09d\n",
		  (long long)d.tv_sec, (long)tm->tm_year + 1900,
		  tm->tm_mon + 1, tm->tm_mday,
		  tm->tm_hour, tm->tm_min, tm->tm_sec, ns);
	}
      if (cmd)
	return 0;
      printf ("> ");
      fflush (stdout);
    }
  return 0;
}
#endif /* TEST */
@


1.17
log
@refresh
@
text
@d122 1
a122 1
   Copyright (c) 2005, 2006, 2007, 2010, 2016
d261 2
a262 2
__IDSTRING(rcsid_code, "$MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.11 2016/10/22 22:45:50 tg Exp $");
__IDSTRING(rcsid_bron, "$miros: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.11 2016/10/22 22:45:50 tg Exp $");
d2944 1
a2944 1
      tz = (tzsize <= TZBUFSIZE
d2946 1
a2946 1
	    : xmemdup (tz, tzsize));
@


1.16
log
@regenerate, this time no local patching (except RCSIDs)
@
text
@d121 3
a123 1
   Copyright (c) 2016 mirabilos <m@@mirbsd.org>
d258 1
a258 1
	    "@@(""#)" #prefix ": " string
d261 2
a262 2
__IDSTRING(rcsid_code, "$MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.10 2016/10/22 21:54:54 tg Exp $");
__IDSTRING(rcsid_bron, "$miros: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.10 2016/10/22 21:54:54 tg Exp $");
d385 1
a385 1
#line 258 "getdate.y"
d392 1
a392 1
#line 391 "getdate.c"
d405 1
a405 1
#line 404 "getdate.c"
d717 8
a724 8
       0,   279,   279,   280,   284,   291,   293,   297,   299,   301,
     303,   305,   307,   309,   313,   321,   329,   339,   346,   358,
     363,   371,   373,   375,   377,   379,   384,   389,   394,   399,
     407,   412,   432,   439,   447,   455,   460,   466,   471,   480,
     490,   494,   496,   498,   500,   502,   504,   506,   508,   510,
     512,   514,   516,   518,   520,   522,   524,   526,   528,   530,
     532,   534,   538,   540,   542,   544,   546,   548,   552,   552,
     555,   556,   561,   562,   567,   605,   606,   612,   613
d1694 1
a1694 1
#line 285 "getdate.y"
d1702 1
a1702 1
#line 298 "getdate.y"
d1707 1
a1707 1
#line 300 "getdate.y"
d1712 1
a1712 1
#line 302 "getdate.y"
d1717 1
a1717 1
#line 304 "getdate.y"
d1722 1
a1722 1
#line 306 "getdate.y"
d1727 1
a1727 1
#line 308 "getdate.y"
d1732 1
a1732 1
#line 314 "getdate.y"
d1743 1
a1743 1
#line 322 "getdate.y"
d1754 1
a1754 1
#line 330 "getdate.y"
d1767 1
a1767 1
#line 340 "getdate.y"
d1777 1
a1777 1
#line 347 "getdate.y"
d1789 1
a1789 1
#line 359 "getdate.y"
d1797 1
a1797 1
#line 364 "getdate.y"
d1805 1
a1805 1
#line 372 "getdate.y"
d1810 1
a1810 1
#line 374 "getdate.y"
d1815 1
a1815 1
#line 376 "getdate.y"
d1820 1
a1820 1
#line 378 "getdate.y"
d1825 1
a1825 1
#line 380 "getdate.y"
d1830 1
a1830 1
#line 385 "getdate.y"
d1838 1
a1838 1
#line 390 "getdate.y"
d1846 1
a1846 1
#line 395 "getdate.y"
d1854 1
a1854 1
#line 400 "getdate.y"
d1862 1
a1862 1
#line 408 "getdate.y"
d1870 1
a1870 1
#line 413 "getdate.y"
d1893 1
a1893 1
#line 433 "getdate.y"
d1903 1
a1903 1
#line 440 "getdate.y"
d1914 1
a1914 1
#line 448 "getdate.y"
d1925 1
a1925 1
#line 456 "getdate.y"
d1933 1
a1933 1
#line 461 "getdate.y"
d1942 1
a1942 1
#line 467 "getdate.y"
d1950 1
a1950 1
#line 472 "getdate.y"
d1959 1
a1959 1
#line 481 "getdate.y"
d1972 1
a1972 1
#line 495 "getdate.y"
d1977 1
a1977 1
#line 497 "getdate.y"
d1982 1
a1982 1
#line 499 "getdate.y"
d1987 1
a1987 1
#line 501 "getdate.y"
d1992 1
a1992 1
#line 503 "getdate.y"
d1997 1
a1997 1
#line 505 "getdate.y"
d2002 1
a2002 1
#line 507 "getdate.y"
d2007 1
a2007 1
#line 509 "getdate.y"
d2012 1
a2012 1
#line 511 "getdate.y"
d2017 1
a2017 1
#line 513 "getdate.y"
d2022 1
a2022 1
#line 515 "getdate.y"
d2027 1
a2027 1
#line 517 "getdate.y"
d2032 1
a2032 1
#line 519 "getdate.y"
d2037 1
a2037 1
#line 521 "getdate.y"
d2042 1
a2042 1
#line 523 "getdate.y"
d2047 1
a2047 1
#line 525 "getdate.y"
d2052 1
a2052 1
#line 527 "getdate.y"
d2057 1
a2057 1
#line 529 "getdate.y"
d2062 1
a2062 1
#line 531 "getdate.y"
d2067 1
a2067 1
#line 533 "getdate.y"
d2072 1
a2072 1
#line 539 "getdate.y"
d2077 1
a2077 1
#line 541 "getdate.y"
d2082 1
a2082 1
#line 543 "getdate.y"
d2087 1
a2087 1
#line 545 "getdate.y"
d2092 1
a2092 1
#line 547 "getdate.y"
d2097 1
a2097 1
#line 549 "getdate.y"
d2102 1
a2102 1
#line 557 "getdate.y"
d2107 1
a2107 1
#line 563 "getdate.y"
d2112 1
a2112 1
#line 568 "getdate.y"
d2149 1
a2149 1
#line 605 "getdate.y"
d2154 1
a2154 1
#line 607 "getdate.y"
d2159 1
a2159 1
#line 612 "getdate.y"
d2164 1
a2164 1
#line 614 "getdate.y"
d2170 1
a2170 1
#line 2169 "getdate.c"
d2384 1
a2384 1
#line 617 "getdate.y"
@


1.15
log
@regen
@
text
@a0 2
/* patched to define "union YYSTYPE" as well  --mirabilos */

d119 3
a121 2
   Copyright (C) 1999, 2000, 2002, 2003, 2004, 2005 Free Software
   Foundation, Inc.
d188 4
d198 6
a203 1
void *
d217 1
a217 1
void *
d224 2
a225 1
#if STDC_HEADERS || (! defined isascii && ! HAVE_ISASCII)
d244 2
a245 1
#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 8) || __STRICT_ANSI__
d253 4
a256 2
#ifndef __RCSID
#define __RCSID(x) /* nothing */
d259 2
a260 2
__RCSID("$MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.7 2016/10/21 20:58:03 tg Exp $");
__RCSID("$miros: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.7 2016/10/21 20:58:03 tg Exp $");
d358 1
a358 1
static int yyerror (parser_control *, char *);
d383 1
a383 1
#line 244 "getdate.y"
d390 1
a390 1
#line 377 "getdate.c"
d403 1
a403 1
#line 390 "getdate.c"
d453 1
a453 1
# if YYENABLE_NLS
d715 8
a722 8
       0,   265,   265,   266,   270,   277,   279,   283,   285,   287,
     289,   291,   293,   295,   299,   307,   315,   325,   332,   344,
     349,   357,   359,   361,   363,   365,   370,   375,   380,   385,
     393,   398,   418,   425,   433,   441,   446,   452,   457,   466,
     476,   480,   482,   484,   486,   488,   490,   492,   494,   496,
     498,   500,   502,   504,   506,   508,   510,   512,   514,   516,
     518,   520,   524,   526,   528,   530,   532,   534,   538,   538,
     541,   542,   547,   548,   553,   591,   592,   598,   599
d945 1
a945 1
# if YYLTYPE_IS_TRIVIAL
d1692 1
a1692 1
#line 271 "getdate.y"
d1700 1
a1700 1
#line 284 "getdate.y"
d1705 1
a1705 1
#line 286 "getdate.y"
d1710 1
a1710 1
#line 288 "getdate.y"
d1715 1
a1715 1
#line 290 "getdate.y"
d1720 1
a1720 1
#line 292 "getdate.y"
d1725 1
a1725 1
#line 294 "getdate.y"
d1730 1
a1730 1
#line 300 "getdate.y"
d1741 1
a1741 1
#line 308 "getdate.y"
d1752 1
a1752 1
#line 316 "getdate.y"
d1765 1
a1765 1
#line 326 "getdate.y"
d1775 1
a1775 1
#line 333 "getdate.y"
d1787 1
a1787 1
#line 345 "getdate.y"
d1795 1
a1795 1
#line 350 "getdate.y"
d1803 1
a1803 1
#line 358 "getdate.y"
d1808 1
a1808 1
#line 360 "getdate.y"
d1813 1
a1813 1
#line 362 "getdate.y"
d1818 1
a1818 1
#line 364 "getdate.y"
d1823 1
a1823 1
#line 366 "getdate.y"
d1828 1
a1828 1
#line 371 "getdate.y"
d1836 1
a1836 1
#line 376 "getdate.y"
d1844 1
a1844 1
#line 381 "getdate.y"
d1852 1
a1852 1
#line 386 "getdate.y"
d1860 1
a1860 1
#line 394 "getdate.y"
d1868 1
a1868 1
#line 399 "getdate.y"
d1891 1
a1891 1
#line 419 "getdate.y"
d1901 1
a1901 1
#line 426 "getdate.y"
d1912 1
a1912 1
#line 434 "getdate.y"
d1923 1
a1923 1
#line 442 "getdate.y"
d1931 1
a1931 1
#line 447 "getdate.y"
d1940 1
a1940 1
#line 453 "getdate.y"
d1948 1
a1948 1
#line 458 "getdate.y"
d1957 1
a1957 1
#line 467 "getdate.y"
d1970 1
a1970 1
#line 481 "getdate.y"
d1975 1
a1975 1
#line 483 "getdate.y"
d1980 1
a1980 1
#line 485 "getdate.y"
d1985 1
a1985 1
#line 487 "getdate.y"
d1990 1
a1990 1
#line 489 "getdate.y"
d1995 1
a1995 1
#line 491 "getdate.y"
d2000 1
a2000 1
#line 493 "getdate.y"
d2005 1
a2005 1
#line 495 "getdate.y"
d2010 1
a2010 1
#line 497 "getdate.y"
d2015 1
a2015 1
#line 499 "getdate.y"
d2020 1
a2020 1
#line 501 "getdate.y"
d2025 1
a2025 1
#line 503 "getdate.y"
d2030 1
a2030 1
#line 505 "getdate.y"
d2035 1
a2035 1
#line 507 "getdate.y"
d2040 1
a2040 1
#line 509 "getdate.y"
d2045 1
a2045 1
#line 511 "getdate.y"
d2050 1
a2050 1
#line 513 "getdate.y"
d2055 1
a2055 1
#line 515 "getdate.y"
d2060 1
a2060 1
#line 517 "getdate.y"
d2065 1
a2065 1
#line 519 "getdate.y"
d2070 1
a2070 1
#line 525 "getdate.y"
d2075 1
a2075 1
#line 527 "getdate.y"
d2080 1
a2080 1
#line 529 "getdate.y"
d2085 1
a2085 1
#line 531 "getdate.y"
d2090 1
a2090 1
#line 533 "getdate.y"
d2095 1
a2095 1
#line 535 "getdate.y"
d2100 1
a2100 1
#line 543 "getdate.y"
d2105 1
a2105 1
#line 549 "getdate.y"
d2110 1
a2110 1
#line 554 "getdate.y"
d2147 1
a2147 1
#line 591 "getdate.y"
d2152 1
a2152 1
#line 593 "getdate.y"
d2157 1
a2157 1
#line 598 "getdate.y"
d2162 1
a2162 1
#line 600 "getdate.y"
d2168 1
a2168 1
#line 2155 "getdate.c"
d2382 1
a2382 1
#line 603 "getdate.y"
d2899 1
a2899 1
yyerror (parser_control *pc ATTRIBUTE_UNUSED, char *s ATTRIBUTE_UNUSED)
@


1.14
log
@add back patch for union YYSTYPE
@
text
@d243 6
a248 2
__RCSID("$MirOS: src/gnu/usr.bin/cvs/lib/getdate.c,v 1.13 2016/10/21 20:51:48 tg Exp $");
__RCSID("$miros: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.6 2016/10/21 20:49:23 tg Exp $");
d371 1
a371 1
#line 240 "getdate.y"
d378 1
a378 1
#line 373 "getdate.c"
d391 1
a391 1
#line 386 "getdate.c"
d703 8
a710 8
       0,   261,   261,   262,   266,   273,   275,   279,   281,   283,
     285,   287,   289,   291,   295,   303,   311,   321,   328,   340,
     345,   353,   355,   357,   359,   361,   366,   371,   376,   381,
     389,   394,   414,   421,   429,   437,   442,   448,   453,   462,
     472,   476,   478,   480,   482,   484,   486,   488,   490,   492,
     494,   496,   498,   500,   502,   504,   506,   508,   510,   512,
     514,   516,   520,   522,   524,   526,   528,   530,   534,   534,
     537,   538,   543,   544,   549,   587,   588,   594,   595
d1680 1
a1680 1
#line 267 "getdate.y"
d1688 1
a1688 1
#line 280 "getdate.y"
d1693 1
a1693 1
#line 282 "getdate.y"
d1698 1
a1698 1
#line 284 "getdate.y"
d1703 1
a1703 1
#line 286 "getdate.y"
d1708 1
a1708 1
#line 288 "getdate.y"
d1713 1
a1713 1
#line 290 "getdate.y"
d1718 1
a1718 1
#line 296 "getdate.y"
d1729 1
a1729 1
#line 304 "getdate.y"
d1740 1
a1740 1
#line 312 "getdate.y"
d1753 1
a1753 1
#line 322 "getdate.y"
d1763 1
a1763 1
#line 329 "getdate.y"
d1775 1
a1775 1
#line 341 "getdate.y"
d1783 1
a1783 1
#line 346 "getdate.y"
d1791 1
a1791 1
#line 354 "getdate.y"
d1796 1
a1796 1
#line 356 "getdate.y"
d1801 1
a1801 1
#line 358 "getdate.y"
d1806 1
a1806 1
#line 360 "getdate.y"
d1811 1
a1811 1
#line 362 "getdate.y"
d1816 1
a1816 1
#line 367 "getdate.y"
d1824 1
a1824 1
#line 372 "getdate.y"
d1832 1
a1832 1
#line 377 "getdate.y"
d1840 1
a1840 1
#line 382 "getdate.y"
d1848 1
a1848 1
#line 390 "getdate.y"
d1856 1
a1856 1
#line 395 "getdate.y"
d1879 1
a1879 1
#line 415 "getdate.y"
d1889 1
a1889 1
#line 422 "getdate.y"
d1900 1
a1900 1
#line 430 "getdate.y"
d1911 1
a1911 1
#line 438 "getdate.y"
d1919 1
a1919 1
#line 443 "getdate.y"
d1928 1
a1928 1
#line 449 "getdate.y"
d1936 1
a1936 1
#line 454 "getdate.y"
d1945 1
a1945 1
#line 463 "getdate.y"
d1958 1
a1958 1
#line 477 "getdate.y"
d1963 1
a1963 1
#line 479 "getdate.y"
d1968 1
a1968 1
#line 481 "getdate.y"
d1973 1
a1973 1
#line 483 "getdate.y"
d1978 1
a1978 1
#line 485 "getdate.y"
d1983 1
a1983 1
#line 487 "getdate.y"
d1988 1
a1988 1
#line 489 "getdate.y"
d1993 1
a1993 1
#line 491 "getdate.y"
d1998 1
a1998 1
#line 493 "getdate.y"
d2003 1
a2003 1
#line 495 "getdate.y"
d2008 1
a2008 1
#line 497 "getdate.y"
d2013 1
a2013 1
#line 499 "getdate.y"
d2018 1
a2018 1
#line 501 "getdate.y"
d2023 1
a2023 1
#line 503 "getdate.y"
d2028 1
a2028 1
#line 505 "getdate.y"
d2033 1
a2033 1
#line 507 "getdate.y"
d2038 1
a2038 1
#line 509 "getdate.y"
d2043 1
a2043 1
#line 511 "getdate.y"
d2048 1
a2048 1
#line 513 "getdate.y"
d2053 1
a2053 1
#line 515 "getdate.y"
d2058 1
a2058 1
#line 521 "getdate.y"
d2063 1
a2063 1
#line 523 "getdate.y"
d2068 1
a2068 1
#line 525 "getdate.y"
d2073 1
a2073 1
#line 527 "getdate.y"
d2078 1
a2078 1
#line 529 "getdate.y"
d2083 1
a2083 1
#line 531 "getdate.y"
d2088 1
a2088 1
#line 539 "getdate.y"
d2093 1
a2093 1
#line 545 "getdate.y"
d2098 1
a2098 1
#line 550 "getdate.y"
d2135 1
a2135 1
#line 587 "getdate.y"
d2140 1
a2140 1
#line 589 "getdate.y"
d2145 1
a2145 1
#line 594 "getdate.y"
d2150 1
a2150 1
#line 596 "getdate.y"
d2156 1
a2156 1
#line 2151 "getdate.c"
d2370 1
a2370 1
#line 599 "getdate.y"
@


1.13
log
@simple regeneration
@
text
@d1 2
d243 1
a243 1
__RCSID("$MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.6 2016/10/21 20:49:23 tg Exp $");
d366 1
a366 1
typedef union
@


1.12
log
@drop broken libbsd.fd.o headers and shut up gcc 4.6 warnings
@
text
@a0 2
/* patched to define "union YYSTYPE" as well  --mirabilos */

d241 2
a242 2
__RCSID("$MirOS: src/gnu/usr.bin/cvs/lib/getdate.c,v 1.11 2010/09/19 19:42:58 tg Exp $");
__RCSID("$miros: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.5 2010/09/18 19:17:41 tg Exp $");
d364 1
a364 1
typedef union YYSTYPE
@


1.11
log
@merge from ports/devel/cvs
@
text
@d159 1
a159 1
#include <bsd/string.h>
d243 1
a243 1
__RCSID("$MirOS: ports/devel/cvs/patches/patch-lib_getdate_c,v 1.6 2010/09/18 22:35:08 tg Exp $");
d3295 1
a3295 2
	  long int sec = d.tv_sec;
	  printf ("localtime (%ld) failed\n", sec);
d3301 1
a3301 1
		  (int64_t)d.tv_sec, (long)tm->tm_year + 1900,
a3312 1

@


1.10
log
@begin attempting to synchronise with the port
@
text
@d1 2
d120 3
a122 2
   Copyright (C) 1999, 2000, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
d193 1
d198 1
d202 1
a202 2
		fprintf(stderr, "memory exhausted");
		fflush(stderr);
d243 2
a244 2
__RCSID("$MirOS: ports/devel/cvs/patches/patch-lib_getdate_c,v 1.5 2010/09/15 23:03:40 tg Exp $");
__RCSID("$miros: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.4 2010/09/15 21:29:21 tg Exp $");
d367 1
a367 1
#line 238 "getdate.y"
d374 1
a374 1
#line 371 "getdate.c"
d387 1
a387 1
#line 384 "getdate.c"
d699 8
a706 8
       0,   259,   259,   260,   264,   271,   273,   277,   279,   281,
     283,   285,   287,   289,   293,   301,   309,   319,   326,   338,
     343,   351,   353,   355,   357,   359,   364,   369,   374,   379,
     387,   392,   412,   419,   427,   435,   440,   446,   451,   460,
     470,   474,   476,   478,   480,   482,   484,   486,   488,   490,
     492,   494,   496,   498,   500,   502,   504,   506,   508,   510,
     512,   514,   518,   520,   522,   524,   526,   528,   532,   532,
     535,   536,   541,   542,   547,   585,   586,   592,   593
d1676 1
a1676 1
#line 265 "getdate.y"
d1684 1
a1684 1
#line 278 "getdate.y"
d1689 1
a1689 1
#line 280 "getdate.y"
d1694 1
a1694 1
#line 282 "getdate.y"
d1699 1
a1699 1
#line 284 "getdate.y"
d1704 1
a1704 1
#line 286 "getdate.y"
d1709 1
a1709 1
#line 288 "getdate.y"
d1714 1
a1714 1
#line 294 "getdate.y"
d1725 1
a1725 1
#line 302 "getdate.y"
d1736 1
a1736 1
#line 310 "getdate.y"
d1749 1
a1749 1
#line 320 "getdate.y"
d1759 1
a1759 1
#line 327 "getdate.y"
d1771 1
a1771 1
#line 339 "getdate.y"
d1779 1
a1779 1
#line 344 "getdate.y"
d1787 1
a1787 1
#line 352 "getdate.y"
d1792 1
a1792 1
#line 354 "getdate.y"
d1797 1
a1797 1
#line 356 "getdate.y"
d1802 1
a1802 1
#line 358 "getdate.y"
d1807 1
a1807 1
#line 360 "getdate.y"
d1812 1
a1812 1
#line 365 "getdate.y"
d1820 1
a1820 1
#line 370 "getdate.y"
d1828 1
a1828 1
#line 375 "getdate.y"
d1836 1
a1836 1
#line 380 "getdate.y"
d1844 1
a1844 1
#line 388 "getdate.y"
d1852 1
a1852 1
#line 393 "getdate.y"
d1875 1
a1875 1
#line 413 "getdate.y"
d1885 1
a1885 1
#line 420 "getdate.y"
d1896 1
a1896 1
#line 428 "getdate.y"
d1907 1
a1907 1
#line 436 "getdate.y"
d1915 1
a1915 1
#line 441 "getdate.y"
d1924 1
a1924 1
#line 447 "getdate.y"
d1932 1
a1932 1
#line 452 "getdate.y"
d1941 1
a1941 1
#line 461 "getdate.y"
d1954 1
a1954 1
#line 475 "getdate.y"
d1959 1
a1959 1
#line 477 "getdate.y"
d1964 1
a1964 1
#line 479 "getdate.y"
d1969 1
a1969 1
#line 481 "getdate.y"
d1974 1
a1974 1
#line 483 "getdate.y"
d1979 1
a1979 1
#line 485 "getdate.y"
d1984 1
a1984 1
#line 487 "getdate.y"
d1989 1
a1989 1
#line 489 "getdate.y"
d1994 1
a1994 1
#line 491 "getdate.y"
d1999 1
a1999 1
#line 493 "getdate.y"
d2004 1
a2004 1
#line 495 "getdate.y"
d2009 1
a2009 1
#line 497 "getdate.y"
d2014 1
a2014 1
#line 499 "getdate.y"
d2019 1
a2019 1
#line 501 "getdate.y"
d2024 1
a2024 1
#line 503 "getdate.y"
d2029 1
a2029 1
#line 505 "getdate.y"
d2034 1
a2034 1
#line 507 "getdate.y"
d2039 1
a2039 1
#line 509 "getdate.y"
d2044 1
a2044 1
#line 511 "getdate.y"
d2049 1
a2049 1
#line 513 "getdate.y"
d2054 1
a2054 1
#line 519 "getdate.y"
d2059 1
a2059 1
#line 521 "getdate.y"
d2064 1
a2064 1
#line 523 "getdate.y"
d2069 1
a2069 1
#line 525 "getdate.y"
d2074 1
a2074 1
#line 527 "getdate.y"
d2079 1
a2079 1
#line 529 "getdate.y"
d2084 1
a2084 1
#line 537 "getdate.y"
d2089 1
a2089 1
#line 543 "getdate.y"
d2094 1
a2094 1
#line 548 "getdate.y"
d2131 1
a2131 1
#line 585 "getdate.y"
d2136 1
a2136 1
#line 587 "getdate.y"
d2141 1
a2141 1
#line 592 "getdate.y"
d2146 1
a2146 1
#line 594 "getdate.y"
d2152 1
a2152 1
#line 2149 "getdate.c"
d2366 1
a2366 1
#line 597 "getdate.y"
d3156 1
a3156 1
	      snprintf (tz1buf, sizeof(tz1buf),
d3255 1
a3255 1
    ok &= (tz0 ? setenv ("TZ", tz0, 1) : (unsetenv ("TZ"), 0)) == 0;
d3264 1
a3264 1
main (int argc, char **argv)
d3281 1
a3281 1
  printf ("Enter date, or blank line to exit.\n> ");
d3285 2
a3286 2
  while (fgets (buff, BUFSIZ - 1, stdin) && buff[0]
         && buff[0] != '\r' && buff[0] != '\n')
d3290 1
a3290 1
once:
@


1.9
log
@sync the cvs port and the cvs in the base system;
RCSID stuff like in commitid 10045F33CB2157CFEAE
@
text
@d155 4
d239 2
a240 2
__RCSID("$MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.3 2007/03/10 23:18:15 tg Exp $");
__RCSID("$miros: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.3 2007/03/10 23:18:15 tg Exp $");
d363 1
a363 1
#line 233 "getdate.y"
d370 1
a370 1
#line 366 "getdate.c"
d383 1
a383 1
#line 379 "getdate.c"
d695 8
a702 8
       0,   254,   254,   255,   259,   266,   268,   272,   274,   276,
     278,   280,   282,   284,   288,   296,   304,   314,   321,   333,
     338,   346,   348,   350,   352,   354,   359,   364,   369,   374,
     382,   387,   407,   414,   422,   430,   435,   441,   446,   455,
     465,   469,   471,   473,   475,   477,   479,   481,   483,   485,
     487,   489,   491,   493,   495,   497,   499,   501,   503,   505,
     507,   509,   513,   515,   517,   519,   521,   523,   527,   527,
     530,   531,   536,   537,   542,   580,   581,   587,   588
d1672 1
a1672 1
#line 260 "getdate.y"
d1680 1
a1680 1
#line 273 "getdate.y"
d1685 1
a1685 1
#line 275 "getdate.y"
d1690 1
a1690 1
#line 277 "getdate.y"
d1695 1
a1695 1
#line 279 "getdate.y"
d1700 1
a1700 1
#line 281 "getdate.y"
d1705 1
a1705 1
#line 283 "getdate.y"
d1710 1
a1710 1
#line 289 "getdate.y"
d1721 1
a1721 1
#line 297 "getdate.y"
d1732 1
a1732 1
#line 305 "getdate.y"
d1745 1
a1745 1
#line 315 "getdate.y"
d1755 1
a1755 1
#line 322 "getdate.y"
d1767 1
a1767 1
#line 334 "getdate.y"
d1775 1
a1775 1
#line 339 "getdate.y"
d1783 1
a1783 1
#line 347 "getdate.y"
d1788 1
a1788 1
#line 349 "getdate.y"
d1793 1
a1793 1
#line 351 "getdate.y"
d1798 1
a1798 1
#line 353 "getdate.y"
d1803 1
a1803 1
#line 355 "getdate.y"
d1808 1
a1808 1
#line 360 "getdate.y"
d1816 1
a1816 1
#line 365 "getdate.y"
d1824 1
a1824 1
#line 370 "getdate.y"
d1832 1
a1832 1
#line 375 "getdate.y"
d1840 1
a1840 1
#line 383 "getdate.y"
d1848 1
a1848 1
#line 388 "getdate.y"
d1871 1
a1871 1
#line 408 "getdate.y"
d1881 1
a1881 1
#line 415 "getdate.y"
d1892 1
a1892 1
#line 423 "getdate.y"
d1903 1
a1903 1
#line 431 "getdate.y"
d1911 1
a1911 1
#line 436 "getdate.y"
d1920 1
a1920 1
#line 442 "getdate.y"
d1928 1
a1928 1
#line 447 "getdate.y"
d1937 1
a1937 1
#line 456 "getdate.y"
d1950 1
a1950 1
#line 470 "getdate.y"
d1955 1
a1955 1
#line 472 "getdate.y"
d1960 1
a1960 1
#line 474 "getdate.y"
d1965 1
a1965 1
#line 476 "getdate.y"
d1970 1
a1970 1
#line 478 "getdate.y"
d1975 1
a1975 1
#line 480 "getdate.y"
d1980 1
a1980 1
#line 482 "getdate.y"
d1985 1
a1985 1
#line 484 "getdate.y"
d1990 1
a1990 1
#line 486 "getdate.y"
d1995 1
a1995 1
#line 488 "getdate.y"
d2000 1
a2000 1
#line 490 "getdate.y"
d2005 1
a2005 1
#line 492 "getdate.y"
d2010 1
a2010 1
#line 494 "getdate.y"
d2015 1
a2015 1
#line 496 "getdate.y"
d2020 1
a2020 1
#line 498 "getdate.y"
d2025 1
a2025 1
#line 500 "getdate.y"
d2030 1
a2030 1
#line 502 "getdate.y"
d2035 1
a2035 1
#line 504 "getdate.y"
d2040 1
a2040 1
#line 506 "getdate.y"
d2045 1
a2045 1
#line 508 "getdate.y"
d2050 1
a2050 1
#line 514 "getdate.y"
d2055 1
a2055 1
#line 516 "getdate.y"
d2060 1
a2060 1
#line 518 "getdate.y"
d2065 1
a2065 1
#line 520 "getdate.y"
d2070 1
a2070 1
#line 522 "getdate.y"
d2075 1
a2075 1
#line 524 "getdate.y"
d2080 1
a2080 1
#line 532 "getdate.y"
d2085 1
a2085 1
#line 538 "getdate.y"
d2090 1
a2090 1
#line 543 "getdate.y"
d2127 1
a2127 1
#line 580 "getdate.y"
d2132 1
a2132 1
#line 582 "getdate.y"
d2137 1
a2137 1
#line 587 "getdate.y"
d2142 1
a2142 1
#line 589 "getdate.y"
d2148 1
a2148 1
#line 2144 "getdate.c"
d2362 1
a2362 1
#line 592 "getdate.y"
@


1.8
log
@regen
@
text
@a116 2
/* $MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.2 2006/10/02 05:25:56 tg Exp $ */

d235 2
a236 5
#ifndef __RCSID
# define __RCSID(x) static const char __rcsid[] ATTRIBUTE_UNUSED = (x)
#endif

__RCSID("$MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.2 2006/10/02 05:25:56 tg Exp $");
d359 1
a359 1
#line 239 "getdate.y"
d366 1
a366 1
#line 372 "getdate.c"
d379 1
a379 1
#line 385 "getdate.c"
d691 8
a698 8
       0,   260,   260,   261,   265,   272,   274,   278,   280,   282,
     284,   286,   288,   290,   294,   302,   310,   320,   327,   339,
     344,   352,   354,   356,   358,   360,   365,   370,   375,   380,
     388,   393,   413,   420,   428,   436,   441,   447,   452,   461,
     471,   475,   477,   479,   481,   483,   485,   487,   489,   491,
     493,   495,   497,   499,   501,   503,   505,   507,   509,   511,
     513,   515,   519,   521,   523,   525,   527,   529,   533,   533,
     536,   537,   542,   543,   548,   586,   587,   593,   594
d1668 1
a1668 1
#line 266 "getdate.y"
d1676 1
a1676 1
#line 279 "getdate.y"
d1681 1
a1681 1
#line 281 "getdate.y"
d1686 1
a1686 1
#line 283 "getdate.y"
d1691 1
a1691 1
#line 285 "getdate.y"
d1696 1
a1696 1
#line 287 "getdate.y"
d1701 1
a1701 1
#line 289 "getdate.y"
d1706 1
a1706 1
#line 295 "getdate.y"
d1717 1
a1717 1
#line 303 "getdate.y"
d1728 1
a1728 1
#line 311 "getdate.y"
d1741 1
a1741 1
#line 321 "getdate.y"
d1751 1
a1751 1
#line 328 "getdate.y"
d1763 1
a1763 1
#line 340 "getdate.y"
d1771 1
a1771 1
#line 345 "getdate.y"
d1779 1
a1779 1
#line 353 "getdate.y"
d1784 1
a1784 1
#line 355 "getdate.y"
d1789 1
a1789 1
#line 357 "getdate.y"
d1794 1
a1794 1
#line 359 "getdate.y"
d1799 1
a1799 1
#line 361 "getdate.y"
d1804 1
a1804 1
#line 366 "getdate.y"
d1812 1
a1812 1
#line 371 "getdate.y"
d1820 1
a1820 1
#line 376 "getdate.y"
d1828 1
a1828 1
#line 381 "getdate.y"
d1836 1
a1836 1
#line 389 "getdate.y"
d1844 1
a1844 1
#line 394 "getdate.y"
d1867 1
a1867 1
#line 414 "getdate.y"
d1877 1
a1877 1
#line 421 "getdate.y"
d1888 1
a1888 1
#line 429 "getdate.y"
d1899 1
a1899 1
#line 437 "getdate.y"
d1907 1
a1907 1
#line 442 "getdate.y"
d1916 1
a1916 1
#line 448 "getdate.y"
d1924 1
a1924 1
#line 453 "getdate.y"
d1933 1
a1933 1
#line 462 "getdate.y"
d1946 1
a1946 1
#line 476 "getdate.y"
d1951 1
a1951 1
#line 478 "getdate.y"
d1956 1
a1956 1
#line 480 "getdate.y"
d1961 1
a1961 1
#line 482 "getdate.y"
d1966 1
a1966 1
#line 484 "getdate.y"
d1971 1
a1971 1
#line 486 "getdate.y"
d1976 1
a1976 1
#line 488 "getdate.y"
d1981 1
a1981 1
#line 490 "getdate.y"
d1986 1
a1986 1
#line 492 "getdate.y"
d1991 1
a1991 1
#line 494 "getdate.y"
d1996 1
a1996 1
#line 496 "getdate.y"
d2001 1
a2001 1
#line 498 "getdate.y"
d2006 1
a2006 1
#line 500 "getdate.y"
d2011 1
a2011 1
#line 502 "getdate.y"
d2016 1
a2016 1
#line 504 "getdate.y"
d2021 1
a2021 1
#line 506 "getdate.y"
d2026 1
a2026 1
#line 508 "getdate.y"
d2031 1
a2031 1
#line 510 "getdate.y"
d2036 1
a2036 1
#line 512 "getdate.y"
d2041 1
a2041 1
#line 514 "getdate.y"
d2046 1
a2046 1
#line 520 "getdate.y"
d2051 1
a2051 1
#line 522 "getdate.y"
d2056 1
a2056 1
#line 524 "getdate.y"
d2061 1
a2061 1
#line 526 "getdate.y"
d2066 1
a2066 1
#line 528 "getdate.y"
d2071 1
a2071 1
#line 530 "getdate.y"
d2076 1
a2076 1
#line 538 "getdate.y"
d2081 1
a2081 1
#line 544 "getdate.y"
d2086 1
a2086 1
#line 549 "getdate.y"
d2123 1
a2123 1
#line 586 "getdate.y"
d2128 1
a2128 1
#line 588 "getdate.y"
d2133 1
a2133 1
#line 593 "getdate.y"
d2138 1
a2138 1
#line 595 "getdate.y"
d2144 1
a2144 1
#line 2150 "getdate.c"
d2358 1
a2358 1
#line 598 "getdate.y"
d3293 2
a3294 2
	  printf ("%13llu =\t%04d-%02d-%02d %02d:%02d:%02d.%09d\n",
		  (uint64_t)d.tv_sec, (int)tm->tm_year + 1900,
@


1.7
log
@regenerate with bison 2.3
@
text
@d117 1
a117 1
/* $MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.1 2006/10/02 04:44:44 tg Exp $ */
d241 1
a241 1
__RCSID("$MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6.2.1 2006/10/02 04:44:44 tg Exp $");
d3299 1
a3299 1
		  (uint64_t)d.tv_sec, (int)tm->tm_year + 1900LL,
@


1.6
log
@regenerate this bison thing
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 2.0.  */
d3 4
a6 2
/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d20 12
a31 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d33 2
a34 4
/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */
d36 2
a37 2
/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */
d49 3
d90 1
d117 1
a117 1
/* $MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6 2005/12/05 22:12:45 tg Exp $ */
d120 1
a120 1
   Copyright (C) 1999, 2000, 2002, 2003, 2004, 2005
d200 1
a200 1
	return x;
d206 1
a206 1
	return memcpy(xmalloc(s), p, s);
d241 1
a241 1
__RCSID("$MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.6 2005/12/05 22:12:45 tg Exp $");
d357 7
a363 1
#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
d365 1
a365 1
typedef union YYSTYPE {
d369 4
a372 3
} YYSTYPE;
/* Line 190 of yacc.c.  */
#line 352 "getdate.c"
d383 2
a384 2
/* Line 213 of yacc.c.  */
#line 364 "getdate.c"
d386 9
a394 1
#if ! defined (yyoverflow) || YYERROR_VERBOSE
d396 43
a438 2
# ifndef YYFREE
#  define YYFREE free
d440 2
a441 2
# ifndef YYMALLOC
#  define YYMALLOC malloc
d443 28
d478 7
d487 7
d499 9
a507 2
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
d509 8
a516 1
#  if defined (__STDC__) || defined (__cplusplus)
d518 17
a534 1
#   define YYSIZE_T size_t
a535 2
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
d537 1
a537 1
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */
d540 3
a542 3
#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))
d547 1
a547 1
  short int yyss;
d557 1
a557 1
     ((N) * (sizeof (short int) + sizeof (YYSTYPE))			\
d563 1
a563 1
#  if defined (__GNUC__) && 1 < __GNUC__
d570 1
a570 1
	  register YYSIZE_T yyi;		\
d574 1
a574 1
      while (0)
d592 1
a592 1
    while (0)
d596 1
a596 7
#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short int yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
d601 1
a601 1
/* YYNTOKENS -- Number of terminals. */
d603 1
a603 1
/* YYNNTS -- Number of nonterminals. */
d605 1
a605 1
/* YYNRULES -- Number of rules. */
d607 1
a607 1
/* YYNRULES -- Number of states. */
d614 1
a614 1
#define YYTRANSLATE(YYX) 						\
d618 1
a618 1
static const unsigned char yytranslate[] =
d653 1
a653 1
static const unsigned char yyprhs[] =
d665 2
a666 2
/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const yysigned_char yyrhs[] =
d694 1
a694 1
static const unsigned short int yyrline[] =
d707 3
a709 3
#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
d726 1
a726 1
static const unsigned short int yytoknum[] =
d735 1
a735 1
static const unsigned char yyr1[] =
d748 1
a748 1
static const unsigned char yyr2[] =
d763 1
a763 1
static const unsigned char yydefact[] =
d777 2
a778 2
/* YYDEFGOTO[NTERM-NUM]. */
static const yysigned_char yydefgoto[] =
d787 1
a787 1
static const yysigned_char yypact[] =
d802 1
a802 1
static const yysigned_char yypgoto[] =
d813 1
a813 1
static const unsigned char yytable[] =
d826 1
a826 1
static const yysigned_char yycheck[] =
d841 1
a841 1
static const unsigned char yystos[] =
a854 16
#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

d880 1
a880 1
      YYPOPSTACK;						\
d884 2
a885 2
    { 								\
      yyerror (pc, "syntax error: cannot back up");\
d888 1
a888 1
while (0)
d903 1
a903 1
      if (N)								\
d917 1
a917 1
    while (0)
d929 2
a930 2
              (Loc).first_line, (Loc).first_column,	\
              (Loc).last_line,  (Loc).last_column)
d957 12
a968 1
} while (0)
d970 61
a1030 10
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Type, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)
d1037 2
a1038 1
#if defined (__STDC__) || defined (__cplusplus)
d1040 1
a1040 1
yy_stack_print (short int *bottom, short int *top)
d1044 2
a1045 2
    short int *bottom;
    short int *top;
d1049 1
a1049 1
  for (/* Nothing. */; bottom <= top; ++bottom)
d1058 1
a1058 1
} while (0)
d1065 2
a1066 1
#if defined (__STDC__) || defined (__cplusplus)
d1068 1
a1068 1
yy_reduce_print (int yyrule)
d1071 2
a1072 1
yy_reduce_print (yyrule)
d1074 1
d1077 1
d1079 12
a1090 7
  unsigned int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
d1096 2
a1097 2
    yy_reduce_print (Rule);		\
} while (0)
d1119 1
a1119 1
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
d1131 1
a1131 1
#  if defined (__GLIBC__) && defined (_STRING_H)
d1135 2
a1137 1
#   if defined (__STDC__) || defined (__cplusplus)
d1139 2
a1140 1
#   else
d1142 2
a1143 2
     const char *yystr;
#   endif
d1145 2
a1146 3
  register const char *yys = yystr;

  while (*yys++ != '\0')
d1148 1
a1148 2

  return yys - yystr - 1;
d1154 1
a1154 1
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
d1159 2
a1161 1
#   if defined (__STDC__) || defined (__cplusplus)
d1163 2
a1164 1
#   else
d1166 3
a1168 3
     char *yydest;
     const char *yysrc;
#   endif
d1170 2
a1171 2
  register char *yyd = yydest;
  register const char *yys = yysrc;
d1181 15
a1195 1
#endif /* !YYERROR_VERBOSE */
d1197 27
a1223 1

d1225 3
a1227 4
#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/
d1229 9
a1237 10
#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
d1239 1
a1239 2
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;
d1241 2
a1242 2
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
d1244 64
a1307 1
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
d1309 2
d1312 22
a1333 8
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  switch (yytype)
    {
      default:
        break;
a1334 1
  YYFPRINTF (yyoutput, ")");
d1336 2
a1338 1
#endif /* ! YYDEBUG */
d1343 3
a1345 1
#if defined (__STDC__) || defined (__cplusplus)
d1347 1
a1347 1
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
d1350 1
a1350 1
yydestruct (yymsg, yytype, yyvaluep)
d1354 1
d1357 2
a1358 2
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;
d1368 1
a1368 1
        break;
d1376 1
a1376 1
# if defined (__STDC__) || defined (__cplusplus)
d1378 1
a1378 1
# else
d1380 1
a1380 1
# endif
d1382 1
a1382 1
#if defined (__STDC__) || defined (__cplusplus)
d1399 9
a1407 6
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
d1409 2
a1410 1
#if defined (__STDC__) || defined (__cplusplus)
d1429 2
a1430 2
  register int yystate;
  register int yyn;
d1436 6
d1452 3
a1454 3
  short int yyssa[YYINITDEPTH];
  short int *yyss = yyssa;
  register short int *yyssp;
d1459 1
a1459 1
  register YYSTYPE *yyvsp;
d1463 1
a1463 1
#define YYPOPSTACK   (yyvsp--, yyssp--)
d1472 3
a1474 3
  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;
a1490 3

  yyvsp[0] = yylval;

d1498 1
a1498 2
     have just been pushed. so pushing a state here evens the stacks.
     */
d1511 1
a1511 1
	/* Give user a chance to reallocate the stack. Use copies of
d1515 1
a1515 1
	short int *yyss1 = yyss;
d1522 1
a1522 1
	yyoverflow ("parser stack overflow",
d1533 1
a1533 1
      goto yyoverflowlab;
d1537 1
a1537 1
	goto yyoverflowlab;
d1543 1
a1543 1
	short int *yyss1 = yyss;
d1547 1
a1547 1
	  goto yyoverflowlab;
d1578 2
a1579 3
/* Do appropriate processing given the current state.  */
/* Read a look-ahead token if we need one and don't already have one.  */
/* yyresume: */
a1581 1

d1623 5
d1631 1
a1631 1
  /* Discard the token being shifted unless it is eof.  */
d1635 1
a1637 7

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
d1675 1
a1675 1
	pc->seconds = (yyvsp[0].timespec);
d1713 1
a1713 1
	pc->hour = (yyvsp[-1].textintval).value;
d1717 1
a1717 1
	pc->meridian = (yyvsp[0].intval);
d1724 2
a1725 2
	pc->hour = (yyvsp[-3].textintval).value;
	pc->minutes = (yyvsp[-1].textintval).value;
d1728 1
a1728 1
	pc->meridian = (yyvsp[0].intval);
d1735 2
a1736 2
	pc->hour = (yyvsp[-4].textintval).value;
	pc->minutes = (yyvsp[-2].textintval).value;
d1741 1
a1741 1
	pc->time_zone = time_zone_hhmm ((yyvsp[-1].textintval), (yyvsp[0].intval));
d1748 4
a1751 4
	pc->hour = (yyvsp[-5].textintval).value;
	pc->minutes = (yyvsp[-3].textintval).value;
	pc->seconds = (yyvsp[-1].timespec);
	pc->meridian = (yyvsp[0].intval);
d1758 3
a1760 3
	pc->hour = (yyvsp[-6].textintval).value;
	pc->minutes = (yyvsp[-4].textintval).value;
	pc->seconds = (yyvsp[-2].timespec);
d1763 1
a1763 1
	pc->time_zone = time_zone_hhmm ((yyvsp[-1].textintval), (yyvsp[0].intval));
d1770 2
a1771 2
	pc->local_isdst = (yyvsp[0].intval);
	pc->dsts_seen += (0 < (yyvsp[0].intval));
d1779 1
a1779 1
	pc->dsts_seen += (0 < (yyvsp[-1].intval)) + 1;
d1785 1
a1785 1
    { pc->time_zone = (yyvsp[0].intval); ;}
d1790 1
a1790 1
    { pc->time_zone = (yyvsp[-1].intval); pc->rels_seen = true; ;}
d1795 1
a1795 1
    { pc->time_zone = (yyvsp[-2].intval) + time_zone_hhmm ((yyvsp[-1].textintval), (yyvsp[0].intval)); ;}
d1800 1
a1800 1
    { pc->time_zone = (yyvsp[0].intval) + 60; ;}
d1805 1
a1805 1
    { pc->time_zone = (yyvsp[-1].intval) + 60; ;}
d1812 1
a1812 1
	pc->day_number = (yyvsp[0].intval);
d1820 1
a1820 1
	pc->day_number = (yyvsp[-1].intval);
d1827 2
a1828 2
	pc->day_ordinal = (yyvsp[-1].intval);
	pc->day_number = (yyvsp[0].intval);
d1835 2
a1836 2
	pc->day_ordinal = (yyvsp[-1].textintval).value;
	pc->day_number = (yyvsp[0].intval);
d1843 2
a1844 2
	pc->month = (yyvsp[-2].textintval).value;
	pc->day = (yyvsp[0].textintval).value;
d1856 1
a1856 1
	if (4 <= (yyvsp[-4].textintval).digits)
d1858 3
a1860 3
	    pc->year = (yyvsp[-4].textintval);
	    pc->month = (yyvsp[-2].textintval).value;
	    pc->day = (yyvsp[0].textintval).value;
d1864 3
a1866 3
	    pc->month = (yyvsp[-4].textintval).value;
	    pc->day = (yyvsp[-2].textintval).value;
	    pc->year = (yyvsp[0].textintval);
d1875 3
a1877 3
	pc->year = (yyvsp[-2].textintval);
	pc->month = -(yyvsp[-1].textintval).value;
	pc->day = -(yyvsp[0].textintval).value;
d1885 4
a1888 4
	pc->day = (yyvsp[-2].textintval).value;
	pc->month = (yyvsp[-1].intval);
	pc->year.value = -(yyvsp[0].textintval).value;
	pc->year.digits = (yyvsp[0].textintval).digits;
d1896 4
a1899 4
	pc->month = (yyvsp[-2].intval);
	pc->day = -(yyvsp[-1].textintval).value;
	pc->year.value = -(yyvsp[0].textintval).value;
	pc->year.digits = (yyvsp[0].textintval).digits;
d1906 2
a1907 2
	pc->month = (yyvsp[-1].intval);
	pc->day = (yyvsp[0].textintval).value;
d1914 3
a1916 3
	pc->month = (yyvsp[-3].intval);
	pc->day = (yyvsp[-2].textintval).value;
	pc->year = (yyvsp[0].textintval);
d1923 2
a1924 2
	pc->day = (yyvsp[-1].textintval).value;
	pc->month = (yyvsp[0].intval);
d1931 3
a1933 3
	pc->day = (yyvsp[-2].textintval).value;
	pc->month = (yyvsp[-1].intval);
	pc->year = (yyvsp[0].textintval);
d1952 1
a1952 1
    { pc->rel_year += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d1957 1
a1957 1
    { pc->rel_year += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1962 1
a1962 1
    { pc->rel_year += (yyvsp[0].intval); ;}
d1967 1
a1967 1
    { pc->rel_month += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d1972 1
a1972 1
    { pc->rel_month += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1977 1
a1977 1
    { pc->rel_month += (yyvsp[0].intval); ;}
d1982 1
a1982 1
    { pc->rel_day += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d1987 1
a1987 1
    { pc->rel_day += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1992 1
a1992 1
    { pc->rel_day += (yyvsp[0].intval); ;}
d1997 1
a1997 1
    { pc->rel_hour += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d2002 1
a2002 1
    { pc->rel_hour += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d2007 1
a2007 1
    { pc->rel_hour += (yyvsp[0].intval); ;}
d2012 1
a2012 1
    { pc->rel_minutes += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d2017 1
a2017 1
    { pc->rel_minutes += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d2022 1
a2022 1
    { pc->rel_minutes += (yyvsp[0].intval); ;}
d2027 1
a2027 1
    { pc->rel_seconds += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d2032 1
a2032 1
    { pc->rel_seconds += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d2037 1
a2037 1
    { pc->rel_seconds += (yyvsp[-1].timespec).tv_sec * (yyvsp[0].intval); pc->rel_ns += (yyvsp[-1].timespec).tv_nsec * (yyvsp[0].intval); ;}
d2042 1
a2042 1
    { pc->rel_seconds += (yyvsp[-1].timespec).tv_sec * (yyvsp[0].intval); pc->rel_ns += (yyvsp[-1].timespec).tv_nsec * (yyvsp[0].intval); ;}
d2047 1
a2047 1
    { pc->rel_seconds += (yyvsp[0].intval); ;}
d2052 1
a2052 1
    { pc->rel_year += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d2057 1
a2057 1
    { pc->rel_month += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d2062 1
a2062 1
    { pc->rel_day += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d2067 1
a2067 1
    { pc->rel_hour += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d2072 1
a2072 1
    { pc->rel_minutes += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d2077 1
a2077 1
    { pc->rel_seconds += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d2082 1
a2082 1
    { (yyval.timespec).tv_sec = (yyvsp[0].textintval).value; (yyval.timespec).tv_nsec = 0; ;}
d2087 1
a2087 1
    { (yyval.timespec).tv_sec = (yyvsp[0].textintval).value; (yyval.timespec).tv_nsec = 0; ;}
d2094 2
a2095 2
	    && ! pc->rels_seen && (pc->times_seen || 2 < (yyvsp[0].textintval).digits))
	  pc->year = (yyvsp[0].textintval);
d2098 1
a2098 1
	    if (4 < (yyvsp[0].textintval).digits)
d2101 4
a2104 4
		pc->day = (yyvsp[0].textintval).value % 100;
		pc->month = ((yyvsp[0].textintval).value / 100) % 100;
		pc->year.value = (yyvsp[0].textintval).value / 10000;
		pc->year.digits = (yyvsp[0].textintval).digits - 4;
d2109 1
a2109 1
		if ((yyvsp[0].textintval).digits <= 2)
d2111 1
a2111 1
		    pc->hour = (yyvsp[0].textintval).value;
d2116 2
a2117 2
		    pc->hour = (yyvsp[0].textintval).value / 100;
		    pc->minutes = (yyvsp[0].textintval).value % 100;
d2134 1
a2134 1
    { (yyval.intval) = (yyvsp[0].textintval).value; ;}
d2144 1
a2144 1
    { (yyval.intval) = (yyvsp[0].intval); ;}
d2148 3
d2152 1
d2154 2
a2155 7
/* Line 1037 of yacc.c.  */
#line 1838 "getdate.c"

  yyvsp -= yylen;
  yyssp -= yylen;


d2184 16
a2199 23
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  const char* yyprefix;
	  char *yymsg;
	  int yyx;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

	  yyprefix = ", expecting ";
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
d2201 2
a2202 7
		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
		yycount += 1;
		if (yycount == 5)
		  {
		    yysize = 0;
		    break;
		  }
d2204 1
a2204 7
	  yysize += (sizeof ("syntax error, unexpected ")
		     + yystrlen (yytname[yytype]));
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);
d2206 13
a2218 20
	      if (yycount < 5)
		{
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			yyp = yystpcpy (yyp, yyprefix);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yyprefix = " or ";
		      }
		}
	      yyerror (pc, yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror (pc, "syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (pc, "syntax error");
d2229 2
a2230 3
        {
          /* If at end of input, pop the error token,
	     then the rest of the stack, then return failure.  */
d2232 2
a2233 10
	     for (;;)
	       {

		 YYPOPSTACK;
		 if (yyssp == yyss)
		   YYABORT;
		 yydestruct ("Error: popping",
                             yystos[*yyssp], yyvsp);
	       }
        }
d2236 2
a2237 1
	  yydestruct ("Error: discarding", yytoken, &yylval);
d2252 4
a2255 4
#ifdef __GNUC__
  /* Pacify GCC when the user code never invokes YYERROR and the label
     yyerrorlab therefore never appears in user code.  */
  if (0)
a2256 1
#endif
d2258 5
a2262 2
yyvsp -= yylen;
  yyssp -= yylen;
d2292 3
a2294 2
      yydestruct ("Error: popping", yystos[yystate], yyvsp);
      YYPOPSTACK;
d2305 1
a2305 1
  /* Shift the error token. */
a2322 3
  yydestruct ("Error: discarding lookahead",
              yytoken, &yylval);
  yychar = YYEMPTY;
d2327 5
a2331 5
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror (pc, "parser stack overflow");
d2337 13
d2354 6
a2359 1
  return yyresult;
d3298 2
a3299 2
	  printf ("%13lld =\t%04lld-%02d-%02d %02d:%02d:%02d.%09d\n",
		  (long long)d.tv_sec, (long long)tm->tm_year + 1900LL,
a3311 1

@


1.5
log
@sync
@
text
@d103 1
a103 1
/* $MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.5 2005/04/19 21:29:27 tg Exp $ */
d121 1
a121 1
   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d227 1
a227 1
__RCSID("$MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.5 2005/04/19 21:29:27 tg Exp $");
d465 1
a465 1
#define YYLAST   78
d470 1
a470 1
#define YYNNTS  18
d472 1
a472 1
#define YYNRULES  76
d474 1
a474 1
#define YYNSTATES  94
d523 6
a528 6
      59,    62,    64,    68,    70,    73,    75,    78,    81,    84,
      88,    94,    98,   102,   106,   109,   114,   117,   121,   124,
     126,   129,   132,   135,   137,   140,   143,   146,   148,   151,
     154,   157,   159,   162,   165,   168,   170,   173,   176,   179,
     181,   184,   187,   190,   193,   196,   198,   200,   202,   204,
     206,   208,   210,   212,   213,   216,   217
d534 1
a534 1
      27,     0,    -1,    28,    -1,    29,    -1,    22,    38,    -1,
d536 21
a556 20
      35,    -1,    34,    -1,    36,    -1,    41,    -1,    19,    10,
      -1,    19,    23,    19,    43,    -1,    19,    23,    19,    18,
      42,    -1,    19,    23,    19,    23,    40,    43,    -1,    19,
      23,    19,    23,    40,    18,    42,    -1,     9,    -1,     9,
       4,    -1,    17,    -1,    17,    18,    42,    -1,     7,    -1,
      17,     4,    -1,     5,    -1,     5,    24,    -1,    14,     5,
      -1,    19,     5,    -1,    19,    25,    19,    -1,    19,    25,
      19,    25,    19,    -1,    19,    18,    18,    -1,    19,    12,
      18,    -1,    12,    18,    18,    -1,    12,    19,    -1,    12,
      19,    24,    19,    -1,    19,    12,    -1,    19,    12,    19,
      -1,    37,     3,    -1,    37,    -1,    14,    16,    -1,    19,
      16,    -1,    18,    16,    -1,    16,    -1,    14,    13,    -1,
      19,    13,    -1,    18,    13,    -1,    13,    -1,    14,     6,
      -1,    19,     6,    -1,    18,     6,    -1,     6,    -1,    14,
       8,    -1,    19,     8,    -1,    18,     8,    -1,     8,    -1,
      14,    11,    -1,    19,    11,    -1,    18,    11,    -1,    11,
      -1,    14,    15,    -1,    19,    15,    -1,    18,    15,    -1,
      20,    15,    -1,    21,    15,    -1,    15,    -1,    39,    -1,
      40,    -1,    20,    -1,    18,    -1,    21,    -1,    19,    -1,
      19,    -1,    -1,    23,    19,    -1,    -1,    10,    -1
d564 3
a566 3
     344,   352,   354,   356,   358,   363,   368,   373,   378,   386,
     391,   411,   418,   426,   434,   439,   445,   450,   459,   469,
     473,   475,   477,   479,   481,   483,   485,   487,   489,   491,
d568 2
a569 2
     513,   515,   517,   519,   521,   523,   527,   527,   530,   531,
     536,   537,   542,   580,   581,   587,   588
d583 3
a585 3
  "time", "local_zone", "zone", "day", "date", "rel", "relunit", "seconds",
  "signed_seconds", "unsigned_seconds", "number", "o_colon_minutes",
  "o_merid", 0
d605 3
a607 2
      32,    33,    33,    33,    33,    34,    34,    34,    34,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    36,    36,
d609 2
a610 3
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    38,    38,    39,    39,
      40,    40,    41,    42,    42,    43,    43
d618 6
a623 6
       2,     1,     3,     1,     2,     1,     2,     2,     2,     3,
       5,     3,     3,     3,     2,     4,     2,     3,     2,     1,
       2,     2,     2,     1,     2,     2,     2,     1,     2,     2,
       2,     1,     2,     2,     2,     1,     2,     2,     2,     1,
       2,     2,     2,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     2,     0,     1
d631 10
a640 10
       5,     0,     0,     2,     3,    69,    71,    68,    70,     4,
      66,    67,     1,    25,    51,    23,    55,    19,    59,     0,
      47,     0,    65,    43,    21,     0,    72,     0,     0,     6,
       7,     8,     9,    11,    10,    12,    39,    13,    26,    20,
       0,    34,    27,    48,    52,    56,    44,    60,    40,    24,
      73,    50,    54,    58,    46,    62,    42,    28,    49,    53,
      14,    57,    36,    45,    61,    41,     0,     0,     0,    63,
      64,    38,    33,     0,     0,    22,    32,    37,    31,    75,
      29,    35,    74,    76,    73,     0,    15,     0,    16,    75,
      30,    73,    17,    18
d647 1
a647 1
      35,    36,     9,    10,    11,    37,    75,    86
d652 1
a652 1
#define YYPACT_NINF -66
d655 10
a664 10
     -13,    42,    43,   -66,    16,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,    29,   -66,   -66,   -66,    54,   -66,    -4,
     -66,    33,   -66,   -66,    -2,    39,    -5,    49,    50,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,    63,   -66,   -66,   -66,
      51,    44,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
      47,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,    38,   -66,   -66,   -66,    53,    48,    55,   -66,
     -66,   -66,   -66,    56,    57,   -66,   -66,   -66,   -66,    -6,
      52,   -66,   -66,   -66,    47,    21,   -66,    59,   -66,    41,
     -66,    47,   -66,   -66
d670 2
a671 2
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -12,   -66,   -65,   -17
d681 22
a702 20
      57,    58,    49,    59,    83,    60,    61,    62,    63,     1,
      64,    65,    84,    66,    40,    41,    50,    85,    67,    88,
      68,    13,    14,    15,    16,    17,    93,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    42,    43,
       6,    44,     8,    12,    45,    51,    46,    52,    47,    48,
      53,    83,    54,    38,    55,    56,    76,    77,    39,    91,
       5,     6,     7,     8,    69,    70,    71,    79,    73,    72,
      74,    78,    92,    89,    80,    81,    82,    87,    90
};

static const unsigned char yycheck[] =
{
       5,     6,     4,     8,    10,    10,    11,    12,    13,    22,
      15,    16,    18,    18,    18,    19,    18,    23,    23,    84,
      25,     5,     6,     7,     8,     9,    91,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,     5,     6,
      19,     8,    21,     0,    11,     6,    13,     8,    15,    16,
      11,    10,    13,    24,    15,    16,    18,    19,     4,    18,
      18,    19,    20,    21,    15,    15,     3,    19,    24,    18,
      23,    18,    89,    85,    19,    19,    19,    25,    19
d709 2
a710 2
       0,    22,    27,    28,    29,    18,    19,    20,    21,    38,
      39,    40,     0,     5,     6,     7,     8,     9,    11,    12,
d712 7
a718 7
      31,    32,    33,    34,    35,    36,    37,    41,    24,     4,
      18,    19,     5,     6,     8,    11,    13,    15,    16,     4,
      18,     6,     8,    11,    13,    15,    16,     5,     6,     8,
      10,    11,    12,    13,    15,    16,    18,    23,    25,    15,
      15,     3,    18,    24,    23,    42,    18,    19,    18,    19,
      19,    19,    19,    10,    18,    23,    43,    25,    42,    40,
      19,    18,    43,    42
d1476 1
a1476 1
    { pc->time_zone = (yyvsp[-2].intval) + time_zone_hhmm ((yyvsp[-1].textintval), (yyvsp[0].intval)); ;}
d1481 1
a1481 1
    { pc->time_zone = (yyvsp[0].intval) + 60; ;}
d1486 5
d1494 2
a1495 2
  case 25:
#line 364 "getdate.y"
d1502 2
a1503 2
  case 26:
#line 369 "getdate.y"
d1510 2
a1511 2
  case 27:
#line 374 "getdate.y"
d1518 2
a1519 2
  case 28:
#line 379 "getdate.y"
d1526 2
a1527 2
  case 29:
#line 387 "getdate.y"
d1534 2
a1535 2
  case 30:
#line 392 "getdate.y"
d1557 2
a1558 2
  case 31:
#line 412 "getdate.y"
d1567 2
a1568 2
  case 32:
#line 419 "getdate.y"
d1578 2
a1579 2
  case 33:
#line 427 "getdate.y"
d1589 2
a1590 2
  case 34:
#line 435 "getdate.y"
d1597 2
a1598 2
  case 35:
#line 440 "getdate.y"
d1606 2
a1607 2
  case 36:
#line 446 "getdate.y"
d1614 2
a1615 2
  case 37:
#line 451 "getdate.y"
d1623 2
a1624 2
  case 38:
#line 460 "getdate.y"
a1635 5
  case 40:
#line 474 "getdate.y"
    { pc->rel_year += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
    break;

d1638 1
a1638 1
    { pc->rel_year += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1663 1
a1663 1
    { pc->rel_month += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1668 1
a1668 1
    { pc->rel_month += (yyvsp[0].intval); ;}
d1673 1
a1673 1
    { pc->rel_day += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d1678 1
a1678 1
    { pc->rel_day += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1683 1
a1683 1
    { pc->rel_day += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1688 1
a1688 1
    { pc->rel_day += (yyvsp[0].intval); ;}
d1693 1
a1693 1
    { pc->rel_hour += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d1698 1
a1698 1
    { pc->rel_hour += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1703 1
a1703 1
    { pc->rel_hour += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1708 1
a1708 1
    { pc->rel_hour += (yyvsp[0].intval); ;}
d1713 1
a1713 1
    { pc->rel_minutes += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d1718 1
a1718 1
    { pc->rel_minutes += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1723 1
a1723 1
    { pc->rel_minutes += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1728 1
a1728 1
    { pc->rel_minutes += (yyvsp[0].intval); ;}
d1733 1
a1733 6
    { pc->rel_seconds += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
    break;

  case 61:
#line 516 "getdate.y"
    { pc->rel_seconds += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1737 2
a1738 2
#line 518 "getdate.y"
    { pc->rel_seconds += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1742 2
a1743 2
#line 520 "getdate.y"
    { pc->rel_seconds += (yyvsp[-1].timespec).tv_sec * (yyvsp[0].intval); pc->rel_ns += (yyvsp[-1].timespec).tv_nsec * (yyvsp[0].intval); ;}
d1747 2
a1748 2
#line 522 "getdate.y"
    { pc->rel_seconds += (yyvsp[-1].timespec).tv_sec * (yyvsp[0].intval); pc->rel_ns += (yyvsp[-1].timespec).tv_nsec * (yyvsp[0].intval); ;}
d1752 7
a1758 2
#line 524 "getdate.y"
    { pc->rel_seconds += (yyvsp[0].intval); ;}
d1761 3
a1763 3
  case 69:
#line 532 "getdate.y"
    { (yyval.timespec).tv_sec = (yyvsp[0].textintval).value; (yyval.timespec).tv_nsec = 0; ;}
d1771 7
a1777 2
  case 72:
#line 543 "getdate.y"
d1813 2
a1814 2
  case 73:
#line 580 "getdate.y"
d1818 2
a1819 2
  case 74:
#line 582 "getdate.y"
d1823 2
a1824 2
  case 75:
#line 587 "getdate.y"
d1828 2
a1829 2
  case 76:
#line 589 "getdate.y"
d1837 1
a1837 1
#line 1830 "getdate.c"
d2065 1
a2065 1
#line 592 "getdate.y"
@


1.4
log
@* regenerate Bison parser (getdate)
* add %I to every log thing possible - logs the new commit ID
@
text
@d103 1
a103 1
/* $MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.4 2005/04/19 20:58:17 tg Exp $ */
d227 1
a227 1
__RCSID("$MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.4 2005/04/19 20:58:17 tg Exp $");
d2955 1
a2955 1
main (int ac, char **av)
d2958 1
d2960 13
a2972 1
  printf ("Enter date, or blank line to exit.\n\t> ");
d2976 2
a2977 1
  while (fgets (buff, BUFSIZ - 1, stdin) && buff[0])
d2981 1
d2992 3
a2994 2
	  printf ("%04ld-%02d-%02d %02d:%02d:%02d.%09d\n",
		  (long)tm->tm_year + 1900L, tm->tm_mon + 1, tm->tm_mday,
d2997 3
a2999 1
      printf ("\t> ");
@


1.3
log
@sync
@
text
@d103 1
a103 1
/* $MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.3 2005/03/15 20:08:38 tg Exp $ */
d143 10
a152 3
#ifdef HAVE_ALLOCA_H
#include <alloca.h>
#endif
d227 1
a227 1
__RCSID("$MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.3 2005/03/15 20:08:38 tg Exp $");
d253 1
d309 1
a309 1
  /* Counts of nonterminals of various flavors parsed so far.  */
d311 1
d315 1
a315 1
  size_t rels_seen;
d326 1
d344 1
a344 1
#line 229 "getdate.y"
d351 1
a351 1
#line 342 "getdate.c"
d363 1
a363 1
#line 354 "getdate.c"
d465 1
a465 1
#define YYLAST   74
d470 1
a470 1
#define YYNNTS  17
d472 1
a472 1
#define YYNRULES  73
d474 1
a474 1
#define YYNSTATES  88
d522 7
a528 7
      20,    22,    24,    26,    28,    31,    36,    41,    48,    55,
      57,    60,    62,    64,    67,    69,    72,    75,    78,    82,
      88,    92,    96,   100,   103,   108,   111,   115,   118,   120,
     123,   126,   129,   131,   134,   137,   140,   142,   145,   148,
     151,   153,   156,   159,   162,   164,   167,   170,   173,   175,
     178,   181,   184,   187,   190,   192,   194,   196,   198,   200,
     202,   204,   206,   207
d537 19
a555 18
      -1,    19,    23,    19,    42,    -1,    19,    23,    19,    18,
      -1,    19,    23,    19,    23,    40,    42,    -1,    19,    23,
      19,    23,    40,    18,    -1,     9,    -1,     9,     4,    -1,
      17,    -1,     7,    -1,    17,     4,    -1,     5,    -1,     5,
      24,    -1,    14,     5,    -1,    19,     5,    -1,    19,    25,
      19,    -1,    19,    25,    19,    25,    19,    -1,    19,    18,
      18,    -1,    19,    12,    18,    -1,    12,    18,    18,    -1,
      12,    19,    -1,    12,    19,    24,    19,    -1,    19,    12,
      -1,    19,    12,    19,    -1,    37,     3,    -1,    37,    -1,
      14,    16,    -1,    19,    16,    -1,    18,    16,    -1,    16,
      -1,    14,    13,    -1,    19,    13,    -1,    18,    13,    -1,
      13,    -1,    14,     6,    -1,    19,     6,    -1,    18,     6,
      -1,     6,    -1,    14,     8,    -1,    19,     8,    -1,    18,
       8,    -1,     8,    -1,    14,    11,    -1,    19,    11,    -1,
      18,    11,    -1,    11,    -1,    14,    15,    -1,    19,    15,
      -1,    18,    15,    -1,    20,    15,    -1,    21,    15,    -1,
      15,    -1,    39,    -1,    40,    -1,    20,    -1,    18,    -1,
      21,    -1,    19,    -1,    19,    -1,    -1,    10,    -1
d561 8
a568 8
       0,   250,   250,   251,   255,   262,   264,   268,   270,   272,
     274,   276,   278,   280,   284,   292,   300,   310,   317,   329,
     331,   336,   338,   340,   345,   350,   355,   360,   368,   373,
     393,   400,   408,   416,   421,   427,   432,   441,   451,   455,
     457,   459,   461,   463,   465,   467,   469,   471,   473,   475,
     477,   479,   481,   483,   485,   487,   489,   491,   493,   495,
     497,   499,   501,   503,   505,   509,   509,   512,   513,   518,
     519,   524,   562,   563
d583 2
a584 1
  "signed_seconds", "unsigned_seconds", "number", "o_merid", 0
d604 2
a605 2
      32,    33,    33,    33,    34,    34,    34,    34,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    36,    36,    37,
d608 2
a609 2
      37,    37,    37,    37,    37,    38,    38,    39,    39,    40,
      40,    41,    42,    42
d616 7
a622 7
       1,     1,     1,     1,     2,     4,     4,     6,     6,     1,
       2,     1,     1,     2,     1,     2,     2,     2,     3,     5,
       3,     3,     3,     2,     4,     2,     3,     2,     1,     2,
       2,     2,     1,     2,     2,     2,     1,     2,     2,     2,
       1,     2,     2,     2,     1,     2,     2,     2,     1,     2,
       2,     2,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1
d630 10
a639 9
       5,     0,     0,     2,     3,    68,    70,    67,    69,     4,
      65,    66,     1,    24,    50,    22,    54,    19,    58,     0,
      46,     0,    64,    42,    21,     0,    71,     0,     0,     6,
       7,     8,     9,    11,    10,    12,    38,    13,    25,    20,
       0,    33,    26,    47,    51,    55,    43,    59,    39,    23,
      49,    53,    57,    45,    61,    41,    27,    48,    52,    14,
      56,    35,    44,    60,    40,     0,     0,     0,    62,    63,
      37,    32,     0,    31,    36,    30,    72,    28,    34,    73,
      16,     0,    15,     0,    72,    29,    18,    17
d646 1
a646 1
      35,    36,     9,    10,    11,    37,    82
d651 1
a651 1
#define YYPACT_NINF -21
d654 10
a663 9
     -20,    42,     9,   -21,    16,   -21,   -21,   -21,   -21,   -21,
     -21,   -21,   -21,    -8,   -21,   -21,   -21,    15,   -21,    -4,
     -21,    33,   -21,   -21,    22,    39,    -5,    28,    43,   -21,
     -21,   -21,   -21,   -21,   -21,   -21,    50,   -21,   -21,   -21,
      46,    44,   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,
     -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,
     -21,    38,   -21,   -21,   -21,    47,    48,    51,   -21,   -21,
     -21,   -21,    52,   -21,   -21,   -21,    -6,    49,   -21,   -21,
     -21,    21,   -21,    53,    41,   -21,   -21,   -21
d669 2
a670 2
     -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,
     -21,   -21,   -21,   -21,   -15,   -21,   -11
d680 3
a682 3
      56,    57,     1,    58,    79,    59,    60,    61,    62,    12,
      63,    64,    80,    65,    40,    41,    38,    81,    66,    39,
      67,    13,    14,    15,    16,    17,    49,    18,    19,    20,
d684 4
a687 4
       6,    44,     8,    68,    45,    50,    46,    51,    47,    48,
      52,    79,    53,    70,    54,    55,    73,    74,    69,    86,
       5,     6,     7,     8,    71,    75,    84,    76,    72,     0,
      77,    78,    85,    87,    83
d690 1
a690 1
static const yysigned_char yycheck[] =
d692 3
a694 3
       5,     6,    22,     8,    10,    10,    11,    12,    13,     0,
      15,    16,    18,    18,    18,    19,    24,    23,    23,     4,
      25,     5,     6,     7,     8,     9,     4,    11,    12,    13,
d696 4
a699 4
      19,     8,    21,    15,    11,     6,    13,     8,    15,    16,
      11,    10,    13,     3,    15,    16,    18,    19,    15,    18,
      18,    19,    20,    21,    18,    18,    81,    19,    24,    -1,
      19,    19,    19,    84,    25
d711 5
a715 4
       6,     8,    11,    13,    15,    16,     5,     6,     8,    10,
      11,    12,    13,    15,    16,    18,    23,    25,    15,    15,
       3,    18,    24,    18,    19,    18,    19,    19,    19,    10,
      18,    23,    42,    25,    40,    19,    18,    42
d1356 1
a1356 1
#line 256 "getdate.y"
d1364 1
a1364 1
#line 269 "getdate.y"
d1369 1
a1369 1
#line 271 "getdate.y"
d1374 1
a1374 1
#line 273 "getdate.y"
d1379 1
a1379 1
#line 275 "getdate.y"
d1384 1
a1384 1
#line 277 "getdate.y"
d1389 2
a1390 2
#line 279 "getdate.y"
    { pc->rels_seen++; ;}
d1394 1
a1394 1
#line 285 "getdate.y"
d1405 1
a1405 1
#line 293 "getdate.y"
d1416 1
a1416 1
#line 301 "getdate.y"
d1418 2
a1419 2
	pc->hour = (yyvsp[-3].textintval).value;
	pc->minutes = (yyvsp[-1].textintval).value;
d1424 1
a1424 1
	pc->time_zone = (yyvsp[0].textintval).value % 100 + ((yyvsp[0].textintval).value / 100) * 60;
d1429 1
a1429 1
#line 311 "getdate.y"
d1439 1
a1439 1
#line 318 "getdate.y"
d1441 3
a1443 3
	pc->hour = (yyvsp[-5].textintval).value;
	pc->minutes = (yyvsp[-3].textintval).value;
	pc->seconds = (yyvsp[-1].timespec);
d1446 1
a1446 1
	pc->time_zone = (yyvsp[0].textintval).value % 100 + ((yyvsp[0].textintval).value / 100) * 60;
d1451 5
a1455 2
#line 330 "getdate.y"
    { pc->local_isdst = (yyvsp[0].intval); ;}
d1459 5
a1463 2
#line 332 "getdate.y"
    { pc->local_isdst = (yyvsp[-1].intval) < 0 ? 1 : (yyvsp[-1].intval) + 1; ;}
d1467 1
a1467 1
#line 337 "getdate.y"
d1472 6
a1477 1
#line 339 "getdate.y"
d1481 2
a1482 2
  case 23:
#line 341 "getdate.y"
d1486 2
a1487 2
  case 24:
#line 346 "getdate.y"
d1494 2
a1495 2
  case 25:
#line 351 "getdate.y"
d1502 2
a1503 2
  case 26:
#line 356 "getdate.y"
d1510 2
a1511 2
  case 27:
#line 361 "getdate.y"
d1518 2
a1519 2
  case 28:
#line 369 "getdate.y"
d1526 2
a1527 2
  case 29:
#line 374 "getdate.y"
d1549 2
a1550 2
  case 30:
#line 394 "getdate.y"
d1559 2
a1560 2
  case 31:
#line 401 "getdate.y"
d1570 2
a1571 2
  case 32:
#line 409 "getdate.y"
d1581 2
a1582 2
  case 33:
#line 417 "getdate.y"
d1589 2
a1590 2
  case 34:
#line 422 "getdate.y"
d1598 2
a1599 2
  case 35:
#line 428 "getdate.y"
d1606 2
a1607 2
  case 36:
#line 433 "getdate.y"
d1615 2
a1616 2
  case 37:
#line 442 "getdate.y"
d1628 2
a1629 2
  case 39:
#line 456 "getdate.y"
a1632 5
  case 40:
#line 458 "getdate.y"
    { pc->rel_year += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
    break;

d1634 1
a1634 1
#line 460 "getdate.y"
d1639 2
a1640 2
#line 462 "getdate.y"
    { pc->rel_year += (yyvsp[0].intval); ;}
d1644 2
a1645 2
#line 464 "getdate.y"
    { pc->rel_month += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d1649 2
a1650 2
#line 466 "getdate.y"
    { pc->rel_month += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1654 1
a1654 1
#line 468 "getdate.y"
d1659 2
a1660 2
#line 470 "getdate.y"
    { pc->rel_month += (yyvsp[0].intval); ;}
d1664 2
a1665 2
#line 472 "getdate.y"
    { pc->rel_day += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d1669 2
a1670 2
#line 474 "getdate.y"
    { pc->rel_day += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1674 1
a1674 1
#line 476 "getdate.y"
d1679 2
a1680 2
#line 478 "getdate.y"
    { pc->rel_day += (yyvsp[0].intval); ;}
d1684 2
a1685 2
#line 480 "getdate.y"
    { pc->rel_hour += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d1689 2
a1690 2
#line 482 "getdate.y"
    { pc->rel_hour += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1694 1
a1694 1
#line 484 "getdate.y"
d1699 2
a1700 2
#line 486 "getdate.y"
    { pc->rel_hour += (yyvsp[0].intval); ;}
d1704 2
a1705 2
#line 488 "getdate.y"
    { pc->rel_minutes += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d1709 2
a1710 2
#line 490 "getdate.y"
    { pc->rel_minutes += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1714 1
a1714 1
#line 492 "getdate.y"
d1719 2
a1720 2
#line 494 "getdate.y"
    { pc->rel_minutes += (yyvsp[0].intval); ;}
d1724 2
a1725 2
#line 496 "getdate.y"
    { pc->rel_seconds += (yyvsp[-1].intval) * (yyvsp[0].intval); ;}
d1729 2
a1730 2
#line 498 "getdate.y"
    { pc->rel_seconds += (yyvsp[-1].textintval).value * (yyvsp[0].intval); ;}
d1734 1
a1734 1
#line 500 "getdate.y"
d1739 2
a1740 2
#line 502 "getdate.y"
    { pc->rel_seconds += (yyvsp[-1].timespec).tv_sec * (yyvsp[0].intval); pc->rel_ns += (yyvsp[-1].timespec).tv_nsec * (yyvsp[0].intval); ;}
d1744 1
a1744 1
#line 504 "getdate.y"
d1749 6
a1754 1
#line 506 "getdate.y"
d1758 2
a1759 2
  case 68:
#line 514 "getdate.y"
d1763 2
a1764 2
  case 70:
#line 520 "getdate.y"
d1768 2
a1769 2
  case 71:
#line 525 "getdate.y"
d1771 1
a1771 1
	if (pc->dates_seen
d1805 12
a1816 2
  case 72:
#line 562 "getdate.y"
d1820 2
a1821 2
  case 73:
#line 564 "getdate.y"
d1829 1
a1829 1
#line 1794 "getdate.c"
d2057 1
a2057 1
#line 567 "getdate.y"
d2144 11
a2161 3
  { "GMT",	tZONE,     HOUR ( 0) },	/* Greenwich Mean */
  { "UT",	tZONE,     HOUR ( 0) },	/* Universal (Coordinated) */
  { "UTC",	tZONE,     HOUR ( 0) },
d2209 1
a2209 1
  { NULL, 0, 0  }
d2245 13
d2294 6
a2299 1
  /* Try local zone abbreviations first; they're more likely to be right.  */
d2514 1
d2646 1
a2646 2
      if (gettime (&gettime_buffer) != 0)
	return false;
d2698 1
a2698 1
  pc.year.digits = 4;
d2716 1
a2718 1
  pc.rels_seen = 0;
d2721 1
d2789 2
a2790 3
      if (1 < pc.times_seen || 1 < pc.dates_seen || 1 < pc.days_seen
	  || 1 < (pc.local_zones_seen + pc.zones_seen)
	  || (pc.local_zones_seen && 1 < pc.local_isdst))
d2811 1
a2811 1
      if (pc.dates_seen | pc.days_seen | pc.times_seen)
@


1.2
log
@regenerate parser
@
text
@d103 1
a103 1
/* $MirOS: src/gnu/usr.bin/cvs/lib/getdate.y,v 1.2 2005/03/13 15:50:35 tg Exp $ */
d216 6
d334 1
a334 1
#line 223 "getdate.y"
d341 1
a341 1
#line 336 "getdate.c"
d353 1
a353 1
#line 348 "getdate.c"
d550 8
a557 8
       0,   244,   244,   245,   249,   256,   258,   262,   264,   266,
     268,   270,   272,   274,   278,   286,   294,   304,   311,   323,
     325,   330,   332,   334,   339,   344,   349,   354,   362,   367,
     387,   394,   402,   410,   415,   421,   426,   435,   445,   449,
     451,   453,   455,   457,   459,   461,   463,   465,   467,   469,
     471,   473,   475,   477,   479,   481,   483,   485,   487,   489,
     491,   493,   495,   497,   499,   503,   503,   506,   507,   512,
     513,   518,   556,   557
d1341 1
a1341 1
#line 250 "getdate.y"
d1349 1
a1349 1
#line 263 "getdate.y"
d1354 1
a1354 1
#line 265 "getdate.y"
d1359 1
a1359 1
#line 267 "getdate.y"
d1364 1
a1364 1
#line 269 "getdate.y"
d1369 1
a1369 1
#line 271 "getdate.y"
d1374 1
a1374 1
#line 273 "getdate.y"
d1379 1
a1379 1
#line 279 "getdate.y"
d1390 1
a1390 1
#line 287 "getdate.y"
d1401 1
a1401 1
#line 295 "getdate.y"
d1414 1
a1414 1
#line 305 "getdate.y"
d1424 1
a1424 1
#line 312 "getdate.y"
d1436 1
a1436 1
#line 324 "getdate.y"
d1441 1
a1441 1
#line 326 "getdate.y"
d1446 1
a1446 1
#line 331 "getdate.y"
d1451 1
a1451 1
#line 333 "getdate.y"
d1456 1
a1456 1
#line 335 "getdate.y"
d1461 1
a1461 1
#line 340 "getdate.y"
d1469 1
a1469 1
#line 345 "getdate.y"
d1477 1
a1477 1
#line 350 "getdate.y"
d1485 1
a1485 1
#line 355 "getdate.y"
d1493 1
a1493 1
#line 363 "getdate.y"
d1501 1
a1501 1
#line 368 "getdate.y"
d1524 1
a1524 1
#line 388 "getdate.y"
d1534 1
a1534 1
#line 395 "getdate.y"
d1545 1
a1545 1
#line 403 "getdate.y"
d1556 1
a1556 1
#line 411 "getdate.y"
d1564 1
a1564 1
#line 416 "getdate.y"
d1573 1
a1573 1
#line 422 "getdate.y"
d1581 1
a1581 1
#line 427 "getdate.y"
d1590 1
a1590 1
#line 436 "getdate.y"
d1603 1
a1603 1
#line 450 "getdate.y"
d1608 1
a1608 1
#line 452 "getdate.y"
d1613 1
a1613 1
#line 454 "getdate.y"
d1618 1
a1618 1
#line 456 "getdate.y"
d1623 1
a1623 1
#line 458 "getdate.y"
d1628 1
a1628 1
#line 460 "getdate.y"
d1633 1
a1633 1
#line 462 "getdate.y"
d1638 1
a1638 1
#line 464 "getdate.y"
d1643 1
a1643 1
#line 466 "getdate.y"
d1648 1
a1648 1
#line 468 "getdate.y"
d1653 1
a1653 1
#line 470 "getdate.y"
d1658 1
a1658 1
#line 472 "getdate.y"
d1663 1
a1663 1
#line 474 "getdate.y"
d1668 1
a1668 1
#line 476 "getdate.y"
d1673 1
a1673 1
#line 478 "getdate.y"
d1678 1
a1678 1
#line 480 "getdate.y"
d1683 1
a1683 1
#line 482 "getdate.y"
d1688 1
a1688 1
#line 484 "getdate.y"
d1693 1
a1693 1
#line 486 "getdate.y"
d1698 1
a1698 1
#line 488 "getdate.y"
d1703 1
a1703 1
#line 490 "getdate.y"
d1708 1
a1708 1
#line 492 "getdate.y"
d1713 1
a1713 1
#line 494 "getdate.y"
d1718 1
a1718 1
#line 496 "getdate.y"
d1723 1
a1723 1
#line 498 "getdate.y"
d1728 1
a1728 1
#line 500 "getdate.y"
d1733 1
a1733 1
#line 508 "getdate.y"
d1738 1
a1738 1
#line 514 "getdate.y"
d1743 1
a1743 1
#line 519 "getdate.y"
d1780 1
a1780 1
#line 556 "getdate.y"
d1785 1
a1785 1
#line 558 "getdate.y"
d1793 1
a1793 1
#line 1788 "getdate.c"
d2021 1
a2021 1
#line 561 "getdate.y"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 1.875.  */
d4 1
a4 1
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software Foundation, Inc.
d103 2
d106 2
a107 1
   Copyright (C) 1999, 2000, 2002, 2003, 2004 Free Software Foundation, Inc.
d143 1
d145 1
d163 1
d166 22
d328 1
a328 1
#line 195 "getdate.y"
d334 2
a335 2
/* Line 191 of yacc.c.  */
#line 307 "getdate.c"
d346 2
a347 2
/* Line 214 of yacc.c.  */
#line 319 "getdate.c"
d351 7
d360 5
a364 5
# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
a365 4
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
d378 2
a379 2
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
d386 1
a386 1
	 || (YYSTYPE_IS_TRIVIAL)))
d391 1
a391 1
  short yyss;
d401 1
a401 1
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
d407 1
a407 1
#  if 1 < __GNUC__
d443 1
a443 1
   typedef short yysigned_char;
d542 1
a542 1
static const unsigned short yyrline[] =
d544 8
a551 8
       0,   216,   216,   217,   221,   228,   230,   234,   236,   238,
     240,   242,   244,   246,   250,   258,   266,   276,   283,   295,
     297,   302,   304,   306,   311,   316,   321,   326,   334,   339,
     359,   366,   374,   382,   387,   393,   398,   407,   417,   421,
     423,   425,   427,   429,   431,   433,   435,   437,   439,   441,
     443,   445,   447,   449,   451,   453,   455,   457,   459,   461,
     463,   465,   467,   469,   471,   475,   475,   478,   479,   484,
     485,   490,   528,   529
d560 7
a566 7
  "$end", "error", "$undefined", "tAGO", "tDST", "tDAY", "tDAY_UNIT", 
  "tDAYZONE", "tHOUR_UNIT", "tLOCAL_ZONE", "tMERIDIAN", "tMINUTE_UNIT", 
  "tMONTH", "tMONTH_UNIT", "tORDINAL", "tSEC_UNIT", "tYEAR_UNIT", "tZONE", 
  "tSNUMBER", "tUNUMBER", "tSDECIMAL_NUMBER", "tUDECIMAL_NUMBER", "'@@'", 
  "':'", "','", "'/'", "$accept", "spec", "timespec", "items", "item", 
  "time", "local_zone", "zone", "day", "date", "rel", "relunit", 
  "seconds", "signed_seconds", "unsigned_seconds", "number", "o_merid", 0
d573 1
a573 1
static const unsigned short yytoknum[] =
d720 1
a720 1
#define YYERROR		goto yyerrlab1
d748 1
a751 2
/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */
d753 5
d759 33
a791 5
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  Current.first_line   = Rhs[1].first_line;      \
  Current.first_column = Rhs[1].first_column;    \
  Current.last_line    = Rhs[N].last_line;       \
  Current.last_column  = Rhs[N].last_column;
d794 1
d817 1
a817 7
# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
d823 1
a823 1
                  Token, Value);	\
d830 1
a830 1
| TOP (cinluded).                                                   |
d835 1
a835 1
yy_stack_print (short *bottom, short *top)
d839 2
a840 2
    short *bottom;
    short *top;
d870 1
a870 1
  unsigned int yylineno = yyrline[yyrule];
d872 1
a872 1
             yyrule - 1, yylineno);
d890 1
a890 2
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
a907 4
#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

d989 1
a989 6
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
d993 5
d1013 1
a1013 1
yydestruct (int yytype, YYSTYPE *yyvaluep)
d1016 2
a1017 1
yydestruct (yytype, yyvaluep)
d1025 4
d1048 1
a1048 1
int yyparse ( parser_control *pc );
d1073 1
a1073 1
yyparse ( parser_control *pc )
d1077 1
a1077 1
     parser_control *pc ;
d1081 1
a1081 1
  /* The lookahead symbol.  */
d1084 1
a1084 1
/* The semantic value of the lookahead symbol.  */
d1095 1
a1095 1
  /* Lookahead token as an internal (translated) token number.  */
d1107 3
a1109 3
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;
d1146 3
d1174 1
a1174 1
	short *yyss1 = yyss;
d1202 1
a1202 1
	short *yyss1 = yyss;
d1238 1
a1238 1
/* Read a lookahead token if we need one and don't already have one.  */
d1241 1
a1241 1
  /* First try to decide what to do without reference to lookahead token.  */
d1247 1
a1247 1
  /* Not known => get a lookahead token if don't already have one.  */
d1249 1
a1249 1
  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
d1264 1
a1264 1
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
d1284 2
a1285 2
  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));
d1335 1
a1335 1
#line 222 "getdate.y"
d1337 1
a1337 1
	pc->seconds = yyvsp[0].timespec;
d1339 1
a1339 1
      }
d1343 2
a1344 2
#line 235 "getdate.y"
    { pc->times_seen++; }
d1348 2
a1349 2
#line 237 "getdate.y"
    { pc->local_zones_seen++; }
d1353 2
a1354 2
#line 239 "getdate.y"
    { pc->zones_seen++; }
d1358 2
a1359 2
#line 241 "getdate.y"
    { pc->dates_seen++; }
d1363 2
a1364 2
#line 243 "getdate.y"
    { pc->days_seen++; }
d1368 2
a1369 2
#line 245 "getdate.y"
    { pc->rels_seen++; }
d1373 1
a1373 1
#line 251 "getdate.y"
d1375 1
a1375 1
	pc->hour = yyvsp[-1].textintval.value;
d1379 2
a1380 2
	pc->meridian = yyvsp[0].intval;
      }
d1384 1
a1384 1
#line 259 "getdate.y"
d1386 2
a1387 2
	pc->hour = yyvsp[-3].textintval.value;
	pc->minutes = yyvsp[-1].textintval.value;
d1390 2
a1391 2
	pc->meridian = yyvsp[0].intval;
      }
d1395 1
a1395 1
#line 267 "getdate.y"
d1397 2
a1398 2
	pc->hour = yyvsp[-3].textintval.value;
	pc->minutes = yyvsp[-1].textintval.value;
d1403 2
a1404 2
	pc->time_zone = yyvsp[0].textintval.value % 100 + (yyvsp[0].textintval.value / 100) * 60;
      }
d1408 1
a1408 1
#line 277 "getdate.y"
d1410 5
a1414 5
	pc->hour = yyvsp[-5].textintval.value;
	pc->minutes = yyvsp[-3].textintval.value;
	pc->seconds = yyvsp[-1].timespec;
	pc->meridian = yyvsp[0].intval;
      }
d1418 1
a1418 1
#line 284 "getdate.y"
d1420 3
a1422 3
	pc->hour = yyvsp[-5].textintval.value;
	pc->minutes = yyvsp[-3].textintval.value;
	pc->seconds = yyvsp[-1].timespec;
d1425 2
a1426 2
	pc->time_zone = yyvsp[0].textintval.value % 100 + (yyvsp[0].textintval.value / 100) * 60;
      }
d1430 2
a1431 2
#line 296 "getdate.y"
    { pc->local_isdst = yyvsp[0].intval; }
d1435 2
a1436 2
#line 298 "getdate.y"
    { pc->local_isdst = yyvsp[-1].intval < 0 ? 1 : yyvsp[-1].intval + 1; }
d1440 2
a1441 2
#line 303 "getdate.y"
    { pc->time_zone = yyvsp[0].intval; }
d1445 2
a1446 2
#line 305 "getdate.y"
    { pc->time_zone = yyvsp[0].intval + 60; }
d1450 2
a1451 2
#line 307 "getdate.y"
    { pc->time_zone = yyvsp[-1].intval + 60; }
d1455 1
a1455 1
#line 312 "getdate.y"
d1458 2
a1459 2
	pc->day_number = yyvsp[0].intval;
      }
d1463 1
a1463 1
#line 317 "getdate.y"
d1466 2
a1467 2
	pc->day_number = yyvsp[-1].intval;
      }
d1471 1
a1471 1
#line 322 "getdate.y"
d1473 3
a1475 3
	pc->day_ordinal = yyvsp[-1].intval;
	pc->day_number = yyvsp[0].intval;
      }
d1479 1
a1479 1
#line 327 "getdate.y"
d1481 3
a1483 3
	pc->day_ordinal = yyvsp[-1].textintval.value;
	pc->day_number = yyvsp[0].intval;
      }
d1487 1
a1487 1
#line 335 "getdate.y"
d1489 3
a1491 3
	pc->month = yyvsp[-2].textintval.value;
	pc->day = yyvsp[0].textintval.value;
      }
d1495 1
a1495 1
#line 340 "getdate.y"
d1502 1
a1502 1
	if (4 <= yyvsp[-4].textintval.digits)
d1504 3
a1506 3
	    pc->year = yyvsp[-4].textintval;
	    pc->month = yyvsp[-2].textintval.value;
	    pc->day = yyvsp[0].textintval.value;
d1510 3
a1512 3
	    pc->month = yyvsp[-4].textintval.value;
	    pc->day = yyvsp[-2].textintval.value;
	    pc->year = yyvsp[0].textintval;
d1514 1
a1514 1
      }
d1518 1
a1518 1
#line 360 "getdate.y"
d1521 4
a1524 4
	pc->year = yyvsp[-2].textintval;
	pc->month = -yyvsp[-1].textintval.value;
	pc->day = -yyvsp[0].textintval.value;
      }
d1528 1
a1528 1
#line 367 "getdate.y"
d1531 5
a1535 5
	pc->day = yyvsp[-2].textintval.value;
	pc->month = yyvsp[-1].intval;
	pc->year.value = -yyvsp[0].textintval.value;
	pc->year.digits = yyvsp[0].textintval.digits;
      }
d1539 1
a1539 1
#line 375 "getdate.y"
d1542 5
a1546 5
	pc->month = yyvsp[-2].intval;
	pc->day = -yyvsp[-1].textintval.value;
	pc->year.value = -yyvsp[0].textintval.value;
	pc->year.digits = yyvsp[0].textintval.digits;
      }
d1550 1
a1550 1
#line 383 "getdate.y"
d1552 3
a1554 3
	pc->month = yyvsp[-1].intval;
	pc->day = yyvsp[0].textintval.value;
      }
d1558 1
a1558 1
#line 388 "getdate.y"
d1560 4
a1563 4
	pc->month = yyvsp[-3].intval;
	pc->day = yyvsp[-2].textintval.value;
	pc->year = yyvsp[0].textintval;
      }
d1567 1
a1567 1
#line 394 "getdate.y"
d1569 3
a1571 3
	pc->day = yyvsp[-1].textintval.value;
	pc->month = yyvsp[0].intval;
      }
d1575 1
a1575 1
#line 399 "getdate.y"
d1577 4
a1580 4
	pc->day = yyvsp[-2].textintval.value;
	pc->month = yyvsp[-1].intval;
	pc->year = yyvsp[0].textintval;
      }
d1584 1
a1584 1
#line 408 "getdate.y"
d1593 1
a1593 1
      }
d1597 2
a1598 2
#line 422 "getdate.y"
    { pc->rel_year += yyvsp[-1].intval * yyvsp[0].intval; }
d1602 2
a1603 2
#line 424 "getdate.y"
    { pc->rel_year += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1607 2
a1608 2
#line 426 "getdate.y"
    { pc->rel_year += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1612 2
a1613 2
#line 428 "getdate.y"
    { pc->rel_year += yyvsp[0].intval; }
d1617 2
a1618 2
#line 430 "getdate.y"
    { pc->rel_month += yyvsp[-1].intval * yyvsp[0].intval; }
d1622 2
a1623 2
#line 432 "getdate.y"
    { pc->rel_month += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1627 2
a1628 2
#line 434 "getdate.y"
    { pc->rel_month += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1632 2
a1633 2
#line 436 "getdate.y"
    { pc->rel_month += yyvsp[0].intval; }
d1637 2
a1638 2
#line 438 "getdate.y"
    { pc->rel_day += yyvsp[-1].intval * yyvsp[0].intval; }
d1642 2
a1643 2
#line 440 "getdate.y"
    { pc->rel_day += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1647 2
a1648 2
#line 442 "getdate.y"
    { pc->rel_day += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1652 2
a1653 2
#line 444 "getdate.y"
    { pc->rel_day += yyvsp[0].intval; }
d1657 2
a1658 2
#line 446 "getdate.y"
    { pc->rel_hour += yyvsp[-1].intval * yyvsp[0].intval; }
d1662 2
a1663 2
#line 448 "getdate.y"
    { pc->rel_hour += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1667 2
a1668 2
#line 450 "getdate.y"
    { pc->rel_hour += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1672 2
a1673 2
#line 452 "getdate.y"
    { pc->rel_hour += yyvsp[0].intval; }
d1677 2
a1678 2
#line 454 "getdate.y"
    { pc->rel_minutes += yyvsp[-1].intval * yyvsp[0].intval; }
d1682 2
a1683 2
#line 456 "getdate.y"
    { pc->rel_minutes += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1687 2
a1688 2
#line 458 "getdate.y"
    { pc->rel_minutes += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1692 2
a1693 2
#line 460 "getdate.y"
    { pc->rel_minutes += yyvsp[0].intval; }
d1697 2
a1698 2
#line 462 "getdate.y"
    { pc->rel_seconds += yyvsp[-1].intval * yyvsp[0].intval; }
d1702 2
a1703 2
#line 464 "getdate.y"
    { pc->rel_seconds += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1707 2
a1708 2
#line 466 "getdate.y"
    { pc->rel_seconds += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1712 2
a1713 2
#line 468 "getdate.y"
    { pc->rel_seconds += yyvsp[-1].timespec.tv_sec * yyvsp[0].intval; pc->rel_ns += yyvsp[-1].timespec.tv_nsec * yyvsp[0].intval; }
d1717 2
a1718 2
#line 470 "getdate.y"
    { pc->rel_seconds += yyvsp[-1].timespec.tv_sec * yyvsp[0].intval; pc->rel_ns += yyvsp[-1].timespec.tv_nsec * yyvsp[0].intval; }
d1722 2
a1723 2
#line 472 "getdate.y"
    { pc->rel_seconds += yyvsp[0].intval; }
d1727 2
a1728 2
#line 480 "getdate.y"
    { yyval.timespec.tv_sec = yyvsp[0].textintval.value; yyval.timespec.tv_nsec = 0; }
d1732 2
a1733 2
#line 486 "getdate.y"
    { yyval.timespec.tv_sec = yyvsp[0].textintval.value; yyval.timespec.tv_nsec = 0; }
d1737 1
a1737 1
#line 491 "getdate.y"
d1740 2
a1741 2
	    && ! pc->rels_seen && (pc->times_seen || 2 < yyvsp[0].textintval.digits))
	  pc->year = yyvsp[0].textintval;
d1744 1
a1744 1
	    if (4 < yyvsp[0].textintval.digits)
d1747 4
a1750 4
		pc->day = yyvsp[0].textintval.value % 100;
		pc->month = (yyvsp[0].textintval.value / 100) % 100;
		pc->year.value = yyvsp[0].textintval.value / 10000;
		pc->year.digits = yyvsp[0].textintval.digits - 4;
d1755 1
a1755 1
		if (yyvsp[0].textintval.digits <= 2)
d1757 1
a1757 1
		    pc->hour = yyvsp[0].textintval.value;
d1762 2
a1763 2
		    pc->hour = yyvsp[0].textintval.value / 100;
		    pc->minutes = yyvsp[0].textintval.value % 100;
d1770 1
a1770 1
      }
d1774 2
a1775 2
#line 528 "getdate.y"
    { yyval.intval = MER24; }
d1779 2
a1780 2
#line 530 "getdate.y"
    { yyval.intval = yyvsp[0].intval; }
d1786 2
a1787 2
/* Line 999 of yacc.c.  */
#line 1726 "getdate.c"
d1828 1
d1830 1
a1830 1
	  int yyx, yycount;
a1831 1
	  yycount = 0;
d1834 9
a1842 2
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
d1844 11
a1854 3
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("syntax error, unexpected ") + 1;
	  yysize += yystrlen (yytname[yytype]);
d1863 2
a1864 4
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
d1867 1
a1867 2
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
d1869 1
a1869 1
			yycount++;
d1887 1
a1887 1
      /* If just tried and failed to reuse lookahead token after an
d1890 1
a1890 2
      /* Return failure if at end of input.  */
      if (yychar == YYEOF)
d1892 12
a1903 10
	  /* Pop the error token.  */
          YYPOPSTACK;
	  /* Pop the rest of the stack.  */
	  while (yyss < yyssp)
	    {
	      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
	      yydestruct (yystos[*yyssp], yyvsp);
	      YYPOPSTACK;
	    }
	  YYABORT;
d1905 10
a1915 3
      YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
      yydestruct (yytoken, &yylval);
      yychar = YYEMPTY;
d1917 11
a1927 1
    }
d1929 3
a1931 2
  /* Else will try to reuse lookahead token after shifting the error
     token.  */
d1935 3
a1937 3
/*----------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action.  |
`----------------------------------------------------*/
a1958 4
      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      yyvsp--;
      yystate = *--yyssp;
d1960 3
d1969 1
a1969 1
  YYDPRINTF ((stderr, "Shifting error token, "));
a1970 1
  *++yyvsp = yylval;
d1972 2
d1990 3
d2015 1
a2015 1
#line 533 "getdate.y"
d2779 2
a2780 1
	      sprintf (tz1buf, "XXX%s%ld:%02d", "-" + (time_zone < 0),
d2878 1
a2878 1
    ok &= (tz0 ? setenv ("TZ", tz0, 1) : unsetenv ("TZ")) == 0;
d2910 1
a2910 1
		  tm->tm_year + 1900L, tm->tm_mon + 1, tm->tm_mday,
@


1.1.101.1
log
@GNU CVS 1.12.11 with the following directories removed:
- contrib/pam
- emx
- os2
- tools
- vms
- windows-NT
- zlib
@
text
@@


1.1.101.2
log
@GNU CVS 1.12.12 "should" fix security issues
@
text
@d104 1
a104 3

   Copyright (C) 1999, 2000, 2002, 2003, 2004, 2005 Free Software
   Foundation, Inc.
d140 1
a140 10
/* There's no need to extend the stack, so there's no need to involve
   alloca.  */
#define YYSTACK_USE_ALLOCA 0

/* Tell Bison how much stack space is needed.  20 should be plenty for
   this grammar, which is not right recursive.  Beware setting it too
   high, since that might cause problems on machines whose
   implementations have lame stack-overflow checking.  */
#define YYMAXDEPTH 20
#define YYINITDEPTH YYMAXDEPTH
a211 1
  bool negative;
d267 1
a267 1
  /* Presence or counts of nonterminals of various flavors parsed so far.  */
a268 1
  bool rels_seen;
d272 1
a272 1
  size_t dsts_seen;
a282 1
static long int time_zone_hhmm (textint, long int);
d300 1
a300 1
#line 209 "getdate.y"
d307 1
a307 1
#line 321 "getdate.c"
d319 1
a319 1
#line 333 "getdate.c"
d418 1
a418 1
#define YYLAST   78
d423 1
a423 1
#define YYNNTS  18
d425 1
a425 1
#define YYNRULES  76
d427 1
a427 1
#define YYNSTATES  94
d475 7
a481 7
      20,    22,    24,    26,    28,    31,    36,    42,    49,    57,
      59,    62,    64,    68,    70,    73,    75,    78,    81,    84,
      88,    94,    98,   102,   106,   109,   114,   117,   121,   124,
     126,   129,   132,   135,   137,   140,   143,   146,   148,   151,
     154,   157,   159,   162,   165,   168,   170,   173,   176,   179,
     181,   184,   187,   190,   193,   196,   198,   200,   202,   204,
     206,   208,   210,   212,   213,   216,   217
d490 18
a507 19
      -1,    19,    23,    19,    43,    -1,    19,    23,    19,    18,
      42,    -1,    19,    23,    19,    23,    40,    43,    -1,    19,
      23,    19,    23,    40,    18,    42,    -1,     9,    -1,     9,
       4,    -1,    17,    -1,    17,    18,    42,    -1,     7,    -1,
      17,     4,    -1,     5,    -1,     5,    24,    -1,    14,     5,
      -1,    19,     5,    -1,    19,    25,    19,    -1,    19,    25,
      19,    25,    19,    -1,    19,    18,    18,    -1,    19,    12,
      18,    -1,    12,    18,    18,    -1,    12,    19,    -1,    12,
      19,    24,    19,    -1,    19,    12,    -1,    19,    12,    19,
      -1,    37,     3,    -1,    37,    -1,    14,    16,    -1,    19,
      16,    -1,    18,    16,    -1,    16,    -1,    14,    13,    -1,
      19,    13,    -1,    18,    13,    -1,    13,    -1,    14,     6,
      -1,    19,     6,    -1,    18,     6,    -1,     6,    -1,    14,
       8,    -1,    19,     8,    -1,    18,     8,    -1,     8,    -1,
      14,    11,    -1,    19,    11,    -1,    18,    11,    -1,    11,
      -1,    14,    15,    -1,    19,    15,    -1,    18,    15,    -1,
      20,    15,    -1,    21,    15,    -1,    15,    -1,    39,    -1,
      40,    -1,    20,    -1,    18,    -1,    21,    -1,    19,    -1,
      19,    -1,    -1,    23,    19,    -1,    -1,    10,    -1
d513 5
a517 4
       0,   230,   230,   231,   235,   242,   244,   248,   250,   252,
     254,   256,   258,   260,   264,   272,   280,   290,   297,   309,
     314,   322,   324,   326,   328,   333,   338,   343,   348,   356,
     361,   381,   388,   396,   404,   409,   415,   420,   429,   439,
d519 2
a520 3
     463,   465,   467,   469,   471,   473,   475,   477,   479,   481,
     483,   485,   487,   489,   491,   493,   497,   497,   500,   501,
     506,   507,   512,   550,   551,   557,   558
d535 1
a535 2
  "seconds", "signed_seconds", "unsigned_seconds", "number", 
  "o_colon_minutes", "o_merid", 0
d555 2
a556 2
      32,    33,    33,    33,    33,    34,    34,    34,    34,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    36,    36,
d559 2
a560 2
      37,    37,    37,    37,    37,    37,    38,    38,    39,    39,
      40,    40,    41,    42,    42,    43,    43
d567 7
a573 7
       1,     1,     1,     1,     2,     4,     5,     6,     7,     1,
       2,     1,     3,     1,     2,     1,     2,     2,     2,     3,
       5,     3,     3,     3,     2,     4,     2,     3,     2,     1,
       2,     2,     2,     1,     2,     2,     2,     1,     2,     2,
       2,     1,     2,     2,     2,     1,     2,     2,     2,     1,
       2,     2,     2,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     2,     0,     1
d581 9
a589 10
       5,     0,     0,     2,     3,    69,    71,    68,    70,     4,
      66,    67,     1,    25,    51,    23,    55,    19,    59,     0,
      47,     0,    65,    43,    21,     0,    72,     0,     0,     6,
       7,     8,     9,    11,    10,    12,    39,    13,    26,    20,
       0,    34,    27,    48,    52,    56,    44,    60,    40,    24,
      73,    50,    54,    58,    46,    62,    42,    28,    49,    53,
      14,    57,    36,    45,    61,    41,     0,     0,     0,    63,
      64,    38,    33,     0,     0,    22,    32,    37,    31,    75,
      29,    35,    74,    76,    73,     0,    15,     0,    16,    75,
      30,    73,    17,    18
d596 1
a596 1
      35,    36,     9,    10,    11,    37,    75,    86
d601 1
a601 1
#define YYPACT_NINF -66
d604 9
a612 10
     -13,    42,    43,   -66,    16,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,    29,   -66,   -66,   -66,    54,   -66,    -4,
     -66,    33,   -66,   -66,    -2,    39,    -5,    49,    50,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,    63,   -66,   -66,   -66,
      51,    44,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
      47,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,    38,   -66,   -66,   -66,    53,    48,    55,   -66,
     -66,   -66,   -66,    56,    57,   -66,   -66,   -66,   -66,    -6,
      52,   -66,   -66,   -66,    47,    21,   -66,    59,   -66,    41,
     -66,    47,   -66,   -66
d618 2
a619 2
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -12,   -66,   -65,   -17
d629 3
a631 3
      57,    58,    49,    59,    83,    60,    61,    62,    63,     1,
      64,    65,    84,    66,    40,    41,    50,    85,    67,    88,
      68,    13,    14,    15,    16,    17,    93,    18,    19,    20,
d633 4
a636 4
       6,    44,     8,    12,    45,    51,    46,    52,    47,    48,
      53,    83,    54,    38,    55,    56,    76,    77,    39,    91,
       5,     6,     7,     8,    69,    70,    71,    79,    73,    72,
      74,    78,    92,    89,    80,    81,    82,    87,    90
d639 1
a639 1
static const unsigned char yycheck[] =
d641 3
a643 3
       5,     6,     4,     8,    10,    10,    11,    12,    13,    22,
      15,    16,    18,    18,    18,    19,    18,    23,    23,    84,
      25,     5,     6,     7,     8,     9,    91,    11,    12,    13,
d645 4
a648 4
      19,     8,    21,     0,    11,     6,    13,     8,    15,    16,
      11,    10,    13,    24,    15,    16,    18,    19,     4,    18,
      18,    19,    20,    21,    15,    15,     3,    19,    24,    18,
      23,    18,    89,    85,    19,    19,    19,    25,    19
d660 4
a663 5
      18,     6,     8,    11,    13,    15,    16,     5,     6,     8,
      10,    11,    12,    13,    15,    16,    18,    23,    25,    15,
      15,     3,    18,    24,    23,    42,    18,    19,    18,    19,
      19,    19,    19,    10,    18,    23,    43,    25,    42,    40,
      19,    18,    43,    42
d1274 1
a1274 1
#line 236 "getdate.y"
d1282 1
a1282 1
#line 249 "getdate.y"
d1287 1
a1287 1
#line 251 "getdate.y"
d1292 1
a1292 1
#line 253 "getdate.y"
d1297 1
a1297 1
#line 255 "getdate.y"
d1302 1
a1302 1
#line 257 "getdate.y"
d1307 2
a1308 2
#line 259 "getdate.y"
    { pc->rels_seen = true; }
d1312 1
a1312 1
#line 265 "getdate.y"
d1323 1
a1323 1
#line 273 "getdate.y"
d1334 1
a1334 1
#line 281 "getdate.y"
d1336 2
a1337 2
	pc->hour = yyvsp[-4].textintval.value;
	pc->minutes = yyvsp[-2].textintval.value;
d1342 1
a1342 1
	pc->time_zone = time_zone_hhmm (yyvsp[-1].textintval, yyvsp[0].intval);
d1347 1
a1347 1
#line 291 "getdate.y"
d1357 1
a1357 1
#line 298 "getdate.y"
d1359 3
a1361 3
	pc->hour = yyvsp[-6].textintval.value;
	pc->minutes = yyvsp[-4].textintval.value;
	pc->seconds = yyvsp[-2].timespec;
d1364 1
a1364 1
	pc->time_zone = time_zone_hhmm (yyvsp[-1].textintval, yyvsp[0].intval);
d1369 2
a1370 5
#line 310 "getdate.y"
    {
	pc->local_isdst = yyvsp[0].intval;
	pc->dsts_seen += (0 < yyvsp[0].intval);
      }
d1374 2
a1375 5
#line 315 "getdate.y"
    {
	pc->local_isdst = 1;
	pc->dsts_seen += (0 < yyvsp[-1].intval) + 1;
      }
d1379 1
a1379 1
#line 323 "getdate.y"
d1384 2
a1385 2
#line 325 "getdate.y"
    { pc->time_zone = yyvsp[-2].intval + time_zone_hhmm (yyvsp[-1].textintval, yyvsp[0].intval); }
d1389 2
a1390 2
#line 327 "getdate.y"
    { pc->time_zone = yyvsp[0].intval + 60; }
d1394 1
a1394 6
#line 329 "getdate.y"
    { pc->time_zone = yyvsp[-1].intval + 60; }
    break;

  case 25:
#line 334 "getdate.y"
d1401 2
a1402 2
  case 26:
#line 339 "getdate.y"
d1409 2
a1410 2
  case 27:
#line 344 "getdate.y"
d1417 2
a1418 2
  case 28:
#line 349 "getdate.y"
d1425 2
a1426 2
  case 29:
#line 357 "getdate.y"
d1433 2
a1434 2
  case 30:
#line 362 "getdate.y"
d1456 2
a1457 2
  case 31:
#line 382 "getdate.y"
d1466 2
a1467 2
  case 32:
#line 389 "getdate.y"
d1477 2
a1478 2
  case 33:
#line 397 "getdate.y"
d1488 2
a1489 2
  case 34:
#line 405 "getdate.y"
d1496 2
a1497 2
  case 35:
#line 410 "getdate.y"
d1505 2
a1506 2
  case 36:
#line 416 "getdate.y"
d1513 2
a1514 2
  case 37:
#line 421 "getdate.y"
d1522 2
a1523 2
  case 38:
#line 430 "getdate.y"
d1535 5
d1541 2
a1542 2
#line 444 "getdate.y"
    { pc->rel_year += yyvsp[-1].intval * yyvsp[0].intval; }
d1546 1
a1546 1
#line 446 "getdate.y"
d1551 2
a1552 2
#line 448 "getdate.y"
    { pc->rel_year += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1556 2
a1557 2
#line 450 "getdate.y"
    { pc->rel_year += yyvsp[0].intval; }
d1561 2
a1562 2
#line 452 "getdate.y"
    { pc->rel_month += yyvsp[-1].intval * yyvsp[0].intval; }
d1566 1
a1566 1
#line 454 "getdate.y"
d1571 2
a1572 2
#line 456 "getdate.y"
    { pc->rel_month += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1576 2
a1577 2
#line 458 "getdate.y"
    { pc->rel_month += yyvsp[0].intval; }
d1581 2
a1582 2
#line 460 "getdate.y"
    { pc->rel_day += yyvsp[-1].intval * yyvsp[0].intval; }
d1586 1
a1586 1
#line 462 "getdate.y"
d1591 2
a1592 2
#line 464 "getdate.y"
    { pc->rel_day += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1596 2
a1597 2
#line 466 "getdate.y"
    { pc->rel_day += yyvsp[0].intval; }
d1601 2
a1602 2
#line 468 "getdate.y"
    { pc->rel_hour += yyvsp[-1].intval * yyvsp[0].intval; }
d1606 1
a1606 1
#line 470 "getdate.y"
d1611 2
a1612 2
#line 472 "getdate.y"
    { pc->rel_hour += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1616 2
a1617 2
#line 474 "getdate.y"
    { pc->rel_hour += yyvsp[0].intval; }
d1621 2
a1622 2
#line 476 "getdate.y"
    { pc->rel_minutes += yyvsp[-1].intval * yyvsp[0].intval; }
d1626 1
a1626 1
#line 478 "getdate.y"
d1631 2
a1632 2
#line 480 "getdate.y"
    { pc->rel_minutes += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1636 2
a1637 2
#line 482 "getdate.y"
    { pc->rel_minutes += yyvsp[0].intval; }
d1641 2
a1642 2
#line 484 "getdate.y"
    { pc->rel_seconds += yyvsp[-1].intval * yyvsp[0].intval; }
d1646 1
a1646 1
#line 486 "getdate.y"
d1651 2
a1652 2
#line 488 "getdate.y"
    { pc->rel_seconds += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1656 1
a1656 1
#line 490 "getdate.y"
d1661 1
a1661 6
#line 492 "getdate.y"
    { pc->rel_seconds += yyvsp[-1].timespec.tv_sec * yyvsp[0].intval; pc->rel_ns += yyvsp[-1].timespec.tv_nsec * yyvsp[0].intval; }
    break;

  case 65:
#line 494 "getdate.y"
d1665 2
a1666 2
  case 69:
#line 502 "getdate.y"
d1670 2
a1671 2
  case 71:
#line 508 "getdate.y"
d1675 2
a1676 2
  case 72:
#line 513 "getdate.y"
d1678 1
a1678 1
	if (pc->dates_seen && ! pc->year.digits
d1712 2
a1713 12
  case 73:
#line 550 "getdate.y"
    { yyval.intval = -1; }
    break;

  case 74:
#line 552 "getdate.y"
    { yyval.intval = yyvsp[0].textintval.value; }
    break;

  case 75:
#line 557 "getdate.y"
d1717 2
a1718 2
  case 76:
#line 559 "getdate.y"
d1726 1
a1726 1
#line 1766 "getdate.c"
d1920 1
a1920 1
#line 562 "getdate.y"
a2006 11
/* The universal time zone table.  These labels can be used even for
   time stamps that would not otherwise be valid, e.g., GMT time
   stamps in London during summer.  */
static table const universal_time_zone_table[] =
{
  { "GMT",	tZONE,     HOUR ( 0) },	/* Greenwich Mean */
  { "UT",	tZONE,     HOUR ( 0) },	/* Universal (Coordinated) */
  { "UTC",	tZONE,     HOUR ( 0) },
  { NULL, 0, 0 }
};

d2014 3
d2064 1
a2064 1
  { NULL, 0, 0 }
a2099 13
/* Convert a time zone expressed as HH:MM into an integer count of
   minutes.  If MM is negative, then S is of the form HHMM and needs
   to be picked apart; otherwise, S is of the form HH.  */

static long int
time_zone_hhmm (textint s, long int mm)
{
  if (mm < 0)
    return (s.value / 100) * 60 + s.value % 100;
  else
    return s.value * 60 + (s.negative ? -mm : mm);
}

d2136 1
a2136 6
  for (tp = universal_time_zone_table; tp->name; tp++)
    if (strcmp (name, tp->name) == 0)
      return tp;

  /* Try local zone abbreviations before those in time_zone_table, as
     the local ones are more likely to be right.  */
a2350 1
	      lvalp->textintval.negative = sign < 0;
d2482 2
a2483 1
      gettime (&gettime_buffer);
d2535 1
a2535 1
  pc.year.digits = 0;
a2552 1
  pc.rels_seen = false;
d2555 1
a2557 1
  pc.dsts_seen = 0;
d2625 3
a2627 2
      if (1 < (pc.times_seen | pc.dates_seen | pc.days_seen | pc.dsts_seen
	       | (pc.local_zones_seen + pc.zones_seen)))
d2648 1
a2648 1
      if (!pc.rels_seen)
@


1.1.101.3
log
@Import current version of GNU CVS, in the hope to actually fix bugs...
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 1.875c.  */
d4 1
a4 1
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d120 1
a120 1
   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
d321 1
a321 1
#line 322 "getdate.c"
d333 1
a333 1
#line 334 "getdate.c"
a336 7
# ifndef YYFREE
#  define YYFREE free
# endif
# ifndef YYMALLOC
#  define YYMALLOC malloc
# endif

d339 2
a340 4
# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   define YYSTACK_ALLOC alloca
#  endif
d342 7
a348 5
#  if defined (alloca) || defined (_ALLOCA_H)
#   define YYSTACK_ALLOC alloca
#  else
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
d361 2
a362 2
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
d369 1
a369 1
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))
d390 1
a390 1
#  if defined (__GNUC__) && 1 < __GNUC__
d432 1
a432 1
#define YYLAST   88
d437 1
a437 1
#define YYNNTS  19
d439 1
a439 1
#define YYNRULES  78
d441 1
a441 1
#define YYNSTATES  96
d490 6
a495 6
      59,    62,    64,    67,    71,    73,    76,    78,    81,    84,
      87,    91,    97,   101,   105,   109,   112,   117,   120,   124,
     127,   129,   132,   135,   137,   140,   143,   145,   148,   151,
     153,   156,   159,   161,   164,   167,   169,   172,   175,   178,
     181,   183,   185,   188,   191,   194,   197,   200,   203,   205,
     207,   209,   211,   213,   215,   217,   218,   221,   222
d501 1
a501 1
      27,     0,    -1,    28,    -1,    29,    -1,    22,    39,    -1,
d503 20
a522 21
      35,    -1,    34,    -1,    36,    -1,    42,    -1,    19,    10,
      -1,    19,    23,    19,    44,    -1,    19,    23,    19,    18,
      43,    -1,    19,    23,    19,    23,    41,    44,    -1,    19,
      23,    19,    23,    41,    18,    43,    -1,     9,    -1,     9,
       4,    -1,    17,    -1,    17,    38,    -1,    17,    18,    43,
      -1,     7,    -1,    17,     4,    -1,     5,    -1,     5,    24,
      -1,    14,     5,    -1,    19,     5,    -1,    19,    25,    19,
      -1,    19,    25,    19,    25,    19,    -1,    19,    18,    18,
      -1,    19,    12,    18,    -1,    12,    18,    18,    -1,    12,
      19,    -1,    12,    19,    24,    19,    -1,    19,    12,    -1,
      19,    12,    19,    -1,    37,     3,    -1,    37,    -1,    14,
      16,    -1,    19,    16,    -1,    16,    -1,    14,    13,    -1,
      19,    13,    -1,    13,    -1,    14,     6,    -1,    19,     6,
      -1,     6,    -1,    14,     8,    -1,    19,     8,    -1,     8,
      -1,    14,    11,    -1,    19,    11,    -1,    11,    -1,    14,
      15,    -1,    19,    15,    -1,    20,    15,    -1,    21,    15,
      -1,    15,    -1,    38,    -1,    18,    16,    -1,    18,    13,
      -1,    18,     6,    -1,    18,     8,    -1,    18,    11,    -1,
      18,    15,    -1,    40,    -1,    41,    -1,    20,    -1,    18,
      -1,    21,    -1,    19,    -1,    19,    -1,    -1,    23,    19,
      -1,    -1,    10,    -1
d530 3
a532 3
     314,   322,   324,   326,   328,   330,   335,   340,   345,   350,
     358,   363,   383,   390,   398,   406,   411,   417,   422,   431,
     441,   445,   447,   449,   451,   453,   455,   457,   459,   461,
d534 2
a535 2
     483,   485,   489,   491,   493,   495,   497,   499,   503,   503,
     506,   507,   512,   513,   518,   556,   557,   563,   564
d544 8
a551 8
  "$end", "error", "$undefined", "tAGO", "tDST", "tDAY", "tDAY_UNIT",
  "tDAYZONE", "tHOUR_UNIT", "tLOCAL_ZONE", "tMERIDIAN", "tMINUTE_UNIT",
  "tMONTH", "tMONTH_UNIT", "tORDINAL", "tSEC_UNIT", "tYEAR_UNIT", "tZONE",
  "tSNUMBER", "tUNUMBER", "tSDECIMAL_NUMBER", "tUDECIMAL_NUMBER", "'@@'",
  "':'", "','", "'/'", "$accept", "spec", "timespec", "items", "item",
  "time", "local_zone", "zone", "day", "date", "rel", "relunit",
  "relunit_snumber", "seconds", "signed_seconds", "unsigned_seconds",
  "number", "o_colon_minutes", "o_merid", 0
d571 3
a573 3
      32,    33,    33,    33,    33,    33,    34,    34,    34,    34,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    36,
      36,    37,    37,    37,    37,    37,    37,    37,    37,    37,
d575 2
a576 2
      37,    37,    38,    38,    38,    38,    38,    38,    39,    39,
      40,    40,    41,    41,    42,    43,    43,    44,    44
d584 6
a589 6
       2,     1,     2,     3,     1,     2,     1,     2,     2,     2,
       3,     5,     3,     3,     3,     2,     4,     2,     3,     2,
       1,     2,     2,     1,     2,     2,     1,     2,     2,     1,
       2,     2,     1,     2,     2,     1,     2,     2,     2,     2,
       1,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     0,     2,     0,     1
d597 10
a606 10
       5,     0,     0,     2,     3,    71,    73,    70,    72,     4,
      68,    69,     1,    26,    49,    24,    52,    19,    55,     0,
      46,     0,    60,    43,    21,     0,    74,     0,     0,     6,
       7,     8,     9,    11,    10,    12,    40,    61,    13,    27,
      20,     0,    35,    28,    47,    50,    53,    44,    56,    41,
      25,    75,    22,    64,    65,    66,    63,    67,    62,    29,
      48,    51,    14,    54,    37,    45,    57,    42,     0,     0,
       0,    58,    59,    39,    34,     0,     0,    23,    33,    38,
      32,    77,    30,    36,    76,    78,    75,     0,    15,     0,
      16,    77,    31,    75,    17,    18
d613 1
a613 1
      35,    36,    37,     9,    10,    11,    38,    77,    88
d618 1
a618 1
#define YYPACT_NINF -43
d621 10
a630 10
     -18,    48,     9,   -43,    19,   -43,   -43,   -43,   -43,   -43,
     -43,   -43,   -43,    32,   -43,   -43,   -43,    54,   -43,    28,
     -43,    37,   -43,   -43,    -2,    49,    -5,    57,    58,   -43,
     -43,   -43,   -43,   -43,   -43,   -43,    60,   -43,   -43,   -43,
     -43,    56,    51,   -43,   -43,   -43,   -43,   -43,   -43,   -43,
     -43,     6,   -43,   -43,   -43,   -43,   -43,   -43,   -43,   -43,
     -43,   -43,   -43,   -43,    52,   -43,   -43,   -43,    59,    61,
      62,   -43,   -43,   -43,   -43,    63,    64,   -43,   -43,   -43,
     -43,    31,    53,   -43,   -43,   -43,    65,    40,   -43,    66,
     -43,     5,   -43,    65,   -43,   -43
d636 2
a637 2
     -43,   -43,   -43,   -43,   -43,   -43,   -43,   -43,   -43,   -43,
     -43,   -43,    55,   -43,   -43,   -11,   -43,   -42,    -7
d647 20
a666 22
      59,    60,    50,    61,     1,    62,    63,    64,    65,    12,
      66,    67,    53,    68,    54,    85,    51,    55,    69,    56,
      70,    57,    58,    93,    13,    14,    15,    16,    17,    76,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    85,    43,    44,    90,    45,    41,    42,    46,    86,
      47,    95,    48,    49,    87,    53,    39,    54,    40,     6,
      55,     8,    56,    73,    57,    58,     5,     6,     7,     8,
      78,    79,    71,    72,    74,    75,    91,    80,    89,    52,
      81,    82,    83,    84,    94,    92,     0,     0,    76
};

static const yysigned_char yycheck[] =
{
       5,     6,     4,     8,    22,    10,    11,    12,    13,     0,
      15,    16,     6,    18,     8,    10,    18,    11,    23,    13,
      25,    15,    16,    18,     5,     6,     7,     8,     9,    23,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    10,     5,     6,    86,     8,    18,    19,    11,    18,
      13,    93,    15,    16,    23,     6,    24,     8,     4,    19,
      11,    21,    13,     3,    15,    16,    18,    19,    20,    21,
      18,    19,    15,    15,    18,    24,    87,    18,    25,    24,
      19,    19,    19,    19,    91,    19,    -1,    -1,    23
d673 2
a674 2
       0,    22,    27,    28,    29,    18,    19,    20,    21,    39,
      40,    41,     0,     5,     6,     7,     8,     9,    11,    12,
d676 7
a682 7
      31,    32,    33,    34,    35,    36,    37,    38,    42,    24,
       4,    18,    19,     5,     6,     8,    11,    13,    15,    16,
       4,    18,    38,     6,     8,    11,    13,    15,    16,     5,
       6,     8,    10,    11,    12,    13,    15,    16,    18,    23,
      25,    15,    15,     3,    18,    24,    23,    43,    18,    19,
      18,    19,    19,    19,    19,    10,    18,    23,    44,    25,
      43,    41,    19,    18,    44,    43
d708 1
a708 1
#define YYERROR		goto yyerrorlab
d743 5
a747 5
# define YYLLOC_DEFAULT(Current, Rhs, N)		\
   ((Current).first_line   = (Rhs)[1].first_line,	\
    (Current).first_column = (Rhs)[1].first_column,	\
    (Current).last_line    = (Rhs)[N].last_line,	\
    (Current).last_column  = (Rhs)[N].last_column)
d791 1
a791 1
| TOP (included).                                                   |
d831 1
a831 1
  unsigned int yylno = yyrline[yyrule];
d833 1
a833 1
             yyrule - 1, yylno);
d870 1
a870 1
#if defined (YYMAXDEPTH) && YYMAXDEPTH == 0
d1410 1
a1410 1
    { pc->time_zone = yyvsp[-1].intval; pc->rels_seen = true; }
d1415 1
a1415 1
    { pc->time_zone = yyvsp[-2].intval + time_zone_hhmm (yyvsp[-1].textintval, yyvsp[0].intval); }
d1420 1
a1420 1
    { pc->time_zone = yyvsp[0].intval + 60; }
d1424 1
a1424 6
#line 331 "getdate.y"
    { pc->time_zone = yyvsp[-1].intval + 60; }
    break;

  case 26:
#line 336 "getdate.y"
d1431 2
a1432 2
  case 27:
#line 341 "getdate.y"
d1439 2
a1440 2
  case 28:
#line 346 "getdate.y"
d1447 2
a1448 2
  case 29:
#line 351 "getdate.y"
d1455 2
a1456 2
  case 30:
#line 359 "getdate.y"
d1463 2
a1464 2
  case 31:
#line 364 "getdate.y"
d1486 2
a1487 2
  case 32:
#line 384 "getdate.y"
d1496 2
a1497 2
  case 33:
#line 391 "getdate.y"
d1507 2
a1508 2
  case 34:
#line 399 "getdate.y"
d1518 2
a1519 2
  case 35:
#line 407 "getdate.y"
d1526 2
a1527 2
  case 36:
#line 412 "getdate.y"
d1535 2
a1536 2
  case 37:
#line 418 "getdate.y"
d1543 2
a1544 2
  case 38:
#line 423 "getdate.y"
d1552 2
a1553 2
  case 39:
#line 432 "getdate.y"
d1565 5
d1572 1
a1572 1
    { pc->rel_year += yyvsp[-1].intval * yyvsp[0].intval; }
d1597 1
a1597 1
    { pc->rel_month += yyvsp[0].intval; }
d1602 1
a1602 1
    { pc->rel_day += yyvsp[-1].intval * yyvsp[0].intval; }
d1607 1
a1607 1
    { pc->rel_day += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1612 1
a1612 1
    { pc->rel_day += yyvsp[0].intval; }
d1617 1
a1617 1
    { pc->rel_hour += yyvsp[-1].intval * yyvsp[0].intval; }
d1622 1
a1622 1
    { pc->rel_hour += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1627 1
a1627 1
    { pc->rel_hour += yyvsp[0].intval; }
d1632 1
a1632 1
    { pc->rel_minutes += yyvsp[-1].intval * yyvsp[0].intval; }
d1637 1
a1637 1
    { pc->rel_minutes += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1642 1
a1642 1
    { pc->rel_minutes += yyvsp[0].intval; }
d1647 1
a1647 1
    { pc->rel_seconds += yyvsp[-1].intval * yyvsp[0].intval; }
d1652 1
a1652 1
    { pc->rel_seconds += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1657 1
a1657 1
    { pc->rel_seconds += yyvsp[-1].timespec.tv_sec * yyvsp[0].intval; pc->rel_ns += yyvsp[-1].timespec.tv_nsec * yyvsp[0].intval; }
d1662 1
a1662 1
    { pc->rel_seconds += yyvsp[-1].timespec.tv_sec * yyvsp[0].intval; pc->rel_ns += yyvsp[-1].timespec.tv_nsec * yyvsp[0].intval; }
d1667 6
a1672 1
    { pc->rel_seconds += yyvsp[0].intval; }
d1676 2
a1677 2
#line 490 "getdate.y"
    { pc->rel_year += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1681 2
a1682 2
#line 492 "getdate.y"
    { pc->rel_month += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1686 2
a1687 2
#line 494 "getdate.y"
    { pc->rel_day += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1691 2
a1692 2
#line 496 "getdate.y"
    { pc->rel_hour += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1695 3
a1697 8
  case 66:
#line 498 "getdate.y"
    { pc->rel_minutes += yyvsp[-1].textintval.value * yyvsp[0].intval; }
    break;

  case 67:
#line 500 "getdate.y"
    { pc->rel_seconds += yyvsp[-1].textintval.value * yyvsp[0].intval; }
d1705 2
a1706 7
  case 73:
#line 514 "getdate.y"
    { yyval.timespec.tv_sec = yyvsp[0].textintval.value; yyval.timespec.tv_nsec = 0; }
    break;

  case 74:
#line 519 "getdate.y"
d1742 2
a1743 2
  case 75:
#line 556 "getdate.y"
d1747 2
a1748 2
  case 76:
#line 558 "getdate.y"
d1752 2
a1753 2
  case 77:
#line 563 "getdate.y"
d1757 2
a1758 2
  case 78:
#line 565 "getdate.y"
d1765 2
a1766 2
/* Line 1000 of yacc.c.  */
#line 1782 "getdate.c"
a1806 1
	  const char* yyprefix;
d1808 1
a1808 1
	  int yyx;
d1810 1
d1813 2
a1814 9
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

	  yyprefix = ", expecting ";
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
d1816 3
a1818 11
	      {
		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
		yycount += 1;
		if (yycount == 5)
		  {
		    yysize = 0;
		    break;
		  }
	      }
	  yysize += (sizeof ("syntax error, unexpected ")
		     + yystrlen (yytname[yytype]));
d1827 4
a1830 2
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
d1833 2
a1834 1
			yyp = yystpcpy (yyp, yyprefix);
d1836 1
a1836 1
			yyprefix = " or ";
d1857 2
a1858 1
      if (yychar <= YYEOF)
d1860 10
a1869 11
          /* If at end of input, pop the error token,
	     then the rest of the stack, then return failure.  */
	  if (yychar == YYEOF)
	     for (;;)
	       {
		 YYPOPSTACK;
		 if (yyssp == yyss)
		   YYABORT;
		 YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
		 yydestruct (yystos[*yyssp], yyvsp);
	       }
a1870 5
      else
	{
	  YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
	  yydestruct (yytoken, &yylval);
	  yychar = YYEMPTY;
d1872 4
a1875 1
	}
d1883 3
a1885 21
/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

#ifdef __GNUC__
  /* Pacify GCC when the user code never invokes YYERROR and the label
     yyerrorlab therefore never appears in user code.  */
  if (0)
     goto yyerrorlab;
#endif

  yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
d1909 3
a1911 2
      YYPOPSTACK;
      yystate = *yyssp;
d1960 1
a1960 1
#line 568 "getdate.y"
@


