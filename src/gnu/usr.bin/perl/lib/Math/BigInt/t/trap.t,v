head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.32;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.32;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.42.34;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

# test that config ( trap_nan => 1, trap_inf => 1) really works/dies

use strict;
use Test;

BEGIN
  {
  $| = 1;
  chdir 't' if -d 't';
  unshift @@INC, '../lib'; # for running manually
  plan tests => 35;
  } 

use Math::BigInt;
use Math::BigFloat;

my $mbi = 'Math::BigInt'; my $mbf = 'Math::BigFloat';
my ($cfg,$x);

foreach my $class ($mbi, $mbf)
  {
  # can do and defaults are okay?
  ok ($class->can('config'));
  ok ($class->config()->{trap_nan}, 0);
  ok ($class->config()->{trap_inf}, 0);

  # can set?
  $cfg = $class->config( trap_nan => 1 ); ok ($cfg->{trap_nan},1);

  # also test that new() still works normally
  eval ("\$x = \$class->new('42'); \$x->bnan();");
  ok ($@@ =~/^Tried to set/, 1);
  ok ($x,42); 				# after new() never modified

  # can reset?
  $cfg = $class->config( trap_nan => 0 ); ok ($cfg->{trap_nan},0);
  
  # can set?
  $cfg = $class->config( trap_inf => 1 ); ok ($cfg->{trap_inf},1);
  eval ("\$x = \$class->new('4711'); \$x->binf();");
  ok ($@@ =~/^Tried to set/, 1);
  ok ($x,4711);				# after new() never modified
  
  # +$x/0 => +inf
  eval ("\$x = \$class->new('4711'); \$x->bdiv(0);");
  ok ($@@ =~/^Tried to set/, 1);
  ok ($x,4711);				# after new() never modified
  
  # -$x/0 => -inf
  eval ("\$x = \$class->new('-0815'); \$x->bdiv(0);");
  ok ($@@ =~/^Tried to set/, 1);
  ok ($x,-815);				# after new() never modified
  
  $cfg = $class->config( trap_nan => 1 );
  # 0/0 => NaN
  eval ("\$x = \$class->new('0'); \$x->bdiv(0);");
  ok ($@@ =~/^Tried to set/, 1);
  ok ($x,0);				# after new() never modified
  }

##############################################################################
# BigInt

$x = Math::BigInt->new(2);
eval ("\$x = \$mbi->new('0.1');");
ok ($x,2);				# never modified since it dies
eval ("\$x = \$mbi->new('0a.1');");
ok ($x,2);				# never modified since it dies


##############################################################################
# BigFloat

$x = Math::BigFloat->new(2);
eval ("\$x = \$mbf->new('0.1a');");
ok ($x,2);				# never modified since it dies

# all tests done

@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d6 1
a6 1
use Test::More;
d13 1
a13 1
  plan tests => 43;
d25 3
a27 3
  ok ($class->can('config'), 'can config()');
  is ($class->config()->{trap_nan}, 0, 'trap_nan defaults to 0');
  is ($class->config()->{trap_inf}, 0, 'trap_inf defaults to 0');
d30 1
a30 2
  $cfg = $class->config( trap_nan => 1 );
  is ($cfg->{trap_nan},1, 'trap_nan now true');
d34 2
a35 2
  like ($@@, qr/^Tried to set/, 'died');
  is ($x,42,'$x after new() never modified');
d38 1
a38 2
  $cfg = $class->config( trap_nan => 0 );
  is ($cfg->{trap_nan}, 0, 'trap_nan disabled');
d41 1
a41 3
  $cfg = $class->config( trap_inf => 1 );
  is ($cfg->{trap_inf}, 1, 'trap_inf enabled');

d43 2
a44 10
  like ($@@, qr/^Tried to set/, 'died');
  is ($x,4711,'$x after new() never modified');

  eval ("\$x = \$class->new('inf');");
  like ($@@, qr/^Tried to set/, 'died');
  is ($x,4711,'$x after new() never modified');
  
  eval ("\$x = \$class->new('-inf');");
  like ($@@, qr/^Tried to set/, 'died');
  is ($x,4711,'$x after new() never modified');
d48 2
a49 2
  like ($@@, qr/^Tried to set/, 'died');
  is ($x,4711,'$x after new() never modified');
d53 2
a54 2
  like ($@@, qr/^Tried to set/, 'died');
  is ($x,'-815', '$x after new not modified');
d59 2
a60 2
  like ($@@, qr/^Tried to set/, 'died');
  is ($x,'0', '$x after new not modified');
d68 1
a68 1
is ($x,2,'never modified since it dies');
d70 2
a71 1
is ($x,2,'never modified since it dies');
d78 1
a78 1
is ($x,2,'never modified since it dies');
@

