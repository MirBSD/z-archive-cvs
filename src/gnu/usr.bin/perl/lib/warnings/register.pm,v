head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.44;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.44;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.44.14;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@package warnings::register ;

our $VERSION = '1.00';

=pod

=head1 NAME

warnings::register - warnings import function

=head1 SYNOPSIS

    use warnings::register ;

=head1 DESCRIPTION

Create a warnings category with the same name as the current package.

See L<perlmodlib/Pragmatic Modules> and L<perllexwarn>.


=cut

require warnings ;

sub mkMask
{
    my ($bit) = @@_ ;
    my $mask = "" ;

    vec($mask, $bit, 1) = 1 ;
    return $mask ;
}

sub import
{
    shift ;
    my $package = (caller(0))[0] ;
    if (! defined $warnings::Bits{$package}) {
        $warnings::Bits{$package}     = mkMask($warnings::LAST_BIT) ;
        vec($warnings::Bits{'all'}, $warnings::LAST_BIT, 1) = 1 ;
        $warnings::Offsets{$package}  = $warnings::LAST_BIT ++ ;
	foreach my $k (keys %warnings::Bits) {
	    vec($warnings::Bits{$k}, $warnings::LAST_BIT, 1) = 0 ;
	}
        $warnings::DeadBits{$package} = mkMask($warnings::LAST_BIT);
        vec($warnings::DeadBits{'all'}, $warnings::LAST_BIT++, 1) = 1 ;
    }
}

1 ;
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d1 1
a1 1
package warnings::register;
d3 1
a3 1
our $VERSION = '1.01';
d13 1
a13 1
    use warnings::register;
d17 3
a19 1
Creates a warnings category with the same name as the current package.
a20 2
See L<warnings> and L<perllexwarn> for more information on this module's
usage.
d24 1
a24 1
require warnings;
d28 2
a29 2
    my ($bit) = @@_;
    my $mask = "";
d31 2
a32 2
    vec($mask, $bit, 1) = 1;
    return $mask;
d37 2
a38 2
    shift;
    my $package = (caller(0))[0];
d40 3
a42 3
        $warnings::Bits{$package}     = mkMask($warnings::LAST_BIT);
        vec($warnings::Bits{'all'}, $warnings::LAST_BIT, 1) = 1;
        $warnings::Offsets{$package}  = $warnings::LAST_BIT ++;
d44 1
a44 1
	    vec($warnings::Bits{$k}, $warnings::LAST_BIT, 1) = 0;
d47 1
a47 1
        vec($warnings::DeadBits{'all'}, $warnings::LAST_BIT++, 1) = 1;
d51 1
a51 1
1;
@

