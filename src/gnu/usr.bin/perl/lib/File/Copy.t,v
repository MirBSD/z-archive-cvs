head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.23;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.23;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.41.59;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    push @@INC, "::lib:$MacPerl::Architecture" if $^O eq 'MacOS';
}

$| = 1;

my @@pass = (0,1);
my $tests = $^O eq 'MacOS' ? 17 : 14;
printf "1..%d\n", $tests * scalar(@@pass);

use File::Copy;
use Config;

for my $pass (@@pass) {

  my $loopconst = $pass*$tests;

  # First we create a file
  open(F, ">file-$$") or die;
  binmode F; # for DOSISH platforms, because test 3 copies to stdout
  printf F "ok %d\n", 3 + $loopconst;
  close F;

  copy "file-$$", "copy-$$";

  open(F, "copy-$$") or die;
  $foo = <F>;
  close(F);

  print "not " if -s "file-$$" != -s "copy-$$";
  printf "ok %d\n", 1 + $loopconst;

  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 2+$loopconst;

  binmode STDOUT unless $^O eq 'VMS'; # Copy::copy works in binary mode
  copy "copy-$$", \*STDOUT;
  unlink "copy-$$" or die "unlink: $!";

  open(F,"file-$$");
  copy(*F, "copy-$$");
  open(R, "copy-$$") or die "open copy-$$: $!"; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 4+$loopconst;
  unlink "copy-$$" or die "unlink: $!";
  open(F,"file-$$");
  copy(\*F, "copy-$$");
  close(F) or die "close: $!";
  open(R, "copy-$$") or die; $foo = <R>; close(R) or die "close: $!";
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 5+$loopconst;
  unlink "copy-$$" or die "unlink: $!";

  require IO::File;
  $fh = IO::File->new(">copy-$$") or die "Cannot open copy-$$:$!";
  binmode $fh or die;
  copy("file-$$",$fh);
  $fh->close or die "close: $!";
  open(R, "copy-$$") or die; $foo = <R>; close(R);
  print "# foo=`$foo'\nnot " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 6+$loopconst;
  unlink "copy-$$" or die "unlink: $!";
  require FileHandle;
  my $fh = FileHandle->new(">copy-$$") or die "Cannot open copy-$$:$!";
  binmode $fh or die;
  copy("file-$$",$fh);
  $fh->close;
  open(R, "copy-$$") or die; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 7+$loopconst;
  unlink "file-$$" or die "unlink: $!";

  print "# moved missing file.\nnot " if move("file-$$", "copy-$$");
  print "# target disappeared.\nnot " if not -e "copy-$$";
  printf "ok %d\n", 8+$loopconst;

  move "copy-$$", "file-$$" or print "# move did not succeed.\n";
  print "# not moved: $!\nnot " unless -e "file-$$" and not -e "copy-$$";
  open(R, "file-$$") or die; $foo = <R>; close(R);
  print "# foo=`$foo'\nnot " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 9+$loopconst;

  my $test_i;
  if ($^O eq 'MacOS') {
	
    copy "file-$$", "lib";	
    open(R, ":lib:file-$$") or die; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
    printf "ok %d\n", 10+$loopconst;
    unlink ":lib:file-$$" or die "unlink: $!";
	
    copy "file-$$", ":lib";	
    open(R, ":lib:file-$$") or die; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
    printf "ok %d\n", 11+$loopconst;
    unlink ":lib:file-$$" or die "unlink: $!";
	
    copy "file-$$", ":lib:";	
    open(R, ":lib:file-$$") or die; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
    printf "ok %d\n", 12+$loopconst;
    unlink ":lib:file-$$" or die "unlink: $!";
	
    unless (-e 'lib:') { # make sure there's no volume called 'lib'
	undef $@@;
	eval { (copy "file-$$", "lib:") || die "'lib:' is not a volume name"; };
	print "# Died: $@@";
	print "not " unless ( $@@ =~ m|'lib:' is not a volume name| );
    }
    printf "ok %d\n", 13+$loopconst;

    move "file-$$", ":lib:";
    open(R, ":lib:file-$$") or die "open :lib:file-$$: $!"; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf("ok %d\n", 3+$loopconst)
        and not -e "file-$$";;
    printf "ok %d\n", 14+$loopconst;

    eval { copy("copy-$$", "copy-$$") };
    printf "ok %d\n", 15+$loopconst
	unless $@@ =~ /are identical/ && -s "copy-$$";

    unlink ":lib:file-$$" or die "unlink: $!";

    $test_i = 15;
  } else {
    
    copy "file-$$", "lib";
    open(R, "lib/file-$$") or die; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
    printf "ok %d\n", 10+$loopconst;
    unlink "lib/file-$$" or die "unlink: $!";

    move "file-$$", "lib";
    open(R, "lib/file-$$") or die "open lib/file-$$: $!"; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf("ok %d\n", 3+$loopconst)
        and not -e "file-$$";;
    printf "ok %d\n", 11+$loopconst;

    eval { copy("copy-$$", "copy-$$") };
    printf "ok %d\n", 12+$loopconst
	unless $@@ =~ /are identical/ && -s "copy-$$";

    unlink "lib/file-$$" or die "unlink: $!";

    $test_i = 12;
  }

  if ($Config{d_symlink}) {
    open(F, ">file-$$") or die $!;
    print F "dummy content\n";
    close F;
    symlink("file-$$", "symlink-$$") or die $!;
    eval { copy("file-$$", "symlink-$$") };
    print "not " if $@@ !~ /are identical/ || -z "file-$$";
    printf "ok %d\n", (++$test_i)+$loopconst;
    unlink "symlink-$$";
    unlink "file-$$";
  } else {
    printf "ok %d # Skipped: no symlinks on this platform\n", (++$test_i)+$loopconst;
  }

  if ($Config{d_link}) {
    if ($^O ne 'MSWin32') {
      open(F, ">file-$$") or die $!;
      print F "dummy content\n";
      close F;
      link("file-$$", "hardlink-$$") or die $!;
      eval { copy("file-$$", "hardlink-$$") };
      print "not " if $@@ !~ /are identical/ || -z "file-$$";
      printf "ok %d\n", (++$test_i)+$loopconst;
      unlink "hardlink-$$";
      unlink "file-$$";
    } else {
      printf "ok %d # Skipped: can't test hardlinks on MSWin32\n", (++$test_i)+$loopconst;
    }
  } else {
    printf "ok %d # Skipped: no hardlinks on this platform\n", (++$test_i)+$loopconst;
  }

}


END {
    1 while unlink "file-$$";
    if ($^O eq 'MacOS') {
        1 while unlink ":lib:file-$$";
    } else {
        1 while unlink "lib/file-$$";
    }
}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d6 1
d9 1
a9 9
use Test::More;

my $TB = Test::More->builder;

plan tests => 60;

# We're going to override rename() later on but Perl has to see an override
# at compile time to honor it.
BEGIN { *CORE::GLOBAL::rename = sub { CORE::rename($_[0], $_[1]) }; }
d11 3
d18 1
d20 1
a20 16
foreach my $code ("copy()", "copy('arg')", "copy('arg', 'arg', 'arg', 'arg')",
                  "move()", "move('arg')", "move('arg', 'arg', 'arg')"
                 )
{
    eval $code;
    like $@@, qr/^Usage: /;
}


for my $cross_partition_test (0..1) {
  {
    # Simulate a cross-partition copy/move by forcing rename to
    # fail.
    no warnings 'redefine';
    *CORE::GLOBAL::rename = sub { 0 } if $cross_partition_test;
  }
d25 1
a25 1
  printf F "ok\n";
d34 2
a35 1
  is -s "file-$$", -s "copy-$$";
d37 2
a38 1
  is $foo, "ok\n";
a40 1
  # This outputs "ok" so its a test.
a41 1
  $TB->current_test($TB->current_test + 1);
d47 2
a48 1
  is $foo, "ok\n";
a49 1

d54 2
a55 1
  is $foo, "ok\n";
d64 2
a65 1
  is $foo, "ok\n";
a66 1

d73 2
a74 1
  is $foo, "ok\n";
d77 3
a79 2
  ok !move("file-$$", "copy-$$"), "move on missing file";
  ok -e "copy-$$",                '  target still there';
d81 2
a82 12
  # Doesn't really matter what time it is as long as its not now.
  my $time = 1000000000;
  utime( $time, $time, "copy-$$" );

  # Recheck the mtime rather than rely on utime in case we're on a
  # system where utime doesn't work or there's no mtime at all.
  # The destination file will reflect the same difficulties.
  my $mtime = (stat("copy-$$"))[9];

  ok move("copy-$$", "file-$$"), 'move';
  ok -e "file-$$",              '  destination exists';
  ok !-e "copy-$$",              '  source does not';
d84 2
a85 1
  is $foo, "ok\n";
d87 59
a145 2
  TODO: {
    local $TODO = 'mtime only preserved on ODS-5 with POSIX dates and DECC$EFS_FILE_TIMESTAMPS enabled' if $^O eq 'VMS';
d147 1
a147 21
    my $dest_mtime = (stat("file-$$"))[9];
    is $dest_mtime, $mtime,
      "mtime preserved by copy()". 
      ($cross_partition_test ? " while testing cross-partition" : "");
  }

  copy "file-$$", "lib";
  open(R, "lib/file-$$") or die; $foo = <R>; close(R);
  is $foo, "ok\n";
  unlink "lib/file-$$" or die "unlink: $!";

  # Do it twice to ensure copying over the same file works.
  copy "file-$$", "lib";
  open(R, "lib/file-$$") or die; $foo = <R>; close(R);
  is $foo, "ok\n";
  unlink "lib/file-$$" or die "unlink: $!";

  { 
    my $warnings = '';
    local $SIG{__WARN__} = sub { $warnings .= join '', @@_ };
    ok copy("file-$$", "file-$$");
d149 1
a149 2
    like $warnings, qr/are identical/;
    ok -s "file-$$";
d152 1
a152 9
  move "file-$$", "lib";
  open(R, "lib/file-$$") or die "open lib/file-$$: $!"; $foo = <R>; close(R);
  is $foo, "ok\n";
  ok !-e "file-$$";
  unlink "lib/file-$$" or die "unlink: $!";

  SKIP: {
    skip "Testing symlinks", 3 unless $Config{d_symlink};

d157 3
a159 9

    my $warnings = '';
    local $SIG{__WARN__} = sub { $warnings .= join '', @@_ };
    ok !copy("file-$$", "symlink-$$");

    like $warnings, qr/are identical/;
    ok !-z "file-$$", 
      'rt.perl.org 5196: copying to itself would truncate the file';

d162 2
d166 17
a182 11
  SKIP: {
    skip "Testing hard links", 3 if !$Config{d_link} or $^O eq 'MSWin32';

    open(F, ">file-$$") or die $!;
    print F "dummy content\n";
    close F;
    link("file-$$", "hardlink-$$") or die $!;

    my $warnings = '';
    local $SIG{__WARN__} = sub { $warnings .= join '', @@_ };
    ok !copy("file-$$", "hardlink-$$");
a183 7
    like $warnings, qr/are identical/;
    ok ! -z "file-$$",
      'rt.perl.org 5196: copying to itself would truncate the file';

    unlink "hardlink-$$";
    unlink "file-$$";
  }
d189 5
a193 1
    1 while unlink "lib/file-$$";
@

