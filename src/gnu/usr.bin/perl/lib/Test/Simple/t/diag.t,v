head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.37;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.37;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.43.13;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@#!perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = '../lib';
    }
}

use strict;

use Test::More tests => 7;

my $Test = Test::More->builder;

# now make a filehandle where we can send data
my $output;
tie *FAKEOUT, 'FakeOut', \$output;

# force diagnostic output to a filehandle, glad I added this to
# Test::Builder :)
my @@lines;
my $ret;
{
    local $TODO = 1;
    $Test->todo_output(\*FAKEOUT);

    diag("a single line");

    push @@lines, $output;
    $output = '';

    $ret = diag("multiple\n", "lines");
    push @@lines, split(/\n/, $output);
}

is( @@lines, 3,              'diag() should send messages to its filehandle' );
like( $lines[0], '/^#\s+/', '    should add comment mark to all lines' );
is( $lines[0], "# a single line\n",   '    should send exact message' );
is( $output, "# multiple\n# lines\n", '    should append multi messages');
ok( !$ret, 'diag returns false' );

{
    $Test->failure_output(\*FAKEOUT);
    $output = '';
    $ret = diag("# foo");
}
$Test->failure_output(\*STDERR);
is( $output, "# # foo\n",   "diag() adds a # even if there's one already" );
ok( !$ret,  'diag returns false' );

package FakeOut;

sub TIEHANDLE {
	bless( $_[1], $_[0] );
}

sub PRINT {
	my $self = shift;
	$$self .= join('', @@_);
}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d6 1
a6 4
        @@INC = ('../lib', 'lib');
    }
    else {
        unshift @@INC, 't/lib';
a9 12

# Turn on threads here, if available, since this test tends to find
# lots of threading bugs.
use Config;
BEGIN {
    if( $] >= 5.008 && $Config{useithreads} ) {
        require threads;
        'threads'->import;
    }
}


d12 1
a12 1
use Test::More tests => 5;
d17 2
a18 2
use TieOut;
my $output = tie *FAKEOUT, 'TieOut';
d22 1
d30 3
d34 1
d37 4
a40 6
is( $output->read, <<'DIAG',   'diag() with todo_output set' );
# a single line
# multiple
# lines
DIAG

d45 1
d49 1
a49 1
is( $output->read, "# # foo\n", "diag() adds # even if there's one already" );
d52 5
d58 3
a60 4
# [rt.cpan.org 8392]
{
    $Test->failure_output(\*FAKEOUT);
    diag(qw(one two));
a61 4
$Test->failure_output(\*STDERR);
is( $output->read, <<'DIAG' );
# onetwo
DIAG
@

