head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.22;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.22;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.41.38;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@package ExtUtils::MM;

use strict;
use Config;
use vars qw(@@ISA $VERSION);
$VERSION = 0.04;

require ExtUtils::Liblist;
require ExtUtils::MakeMaker;

@@ISA = qw(ExtUtils::Liblist ExtUtils::MakeMaker);

=head1 NAME

ExtUtils::MM - OS adjusted ExtUtils::MakeMaker subclass

=head1 SYNOPSIS

  require ExtUtils::MM;
  my $mm = MM->new(...);

=head1 DESCRIPTION

B<FOR INTERNAL USE ONLY>

ExtUtils::MM is a subclass of ExtUtils::MakeMaker which automatically
chooses the appropriate OS specific subclass for you
(ie. ExtUils::MM_Unix, etc...).

It also provides a convenient alias via the MM class (I didn't want
MakeMaker modules outside of ExtUtils/).

This class might turn out to be a temporary solution, but MM won't go
away.

=cut

{
    # Convenient alias.
    package MM;
    use vars qw(@@ISA);
    @@ISA = qw(ExtUtils::MM);
    sub DESTROY {}
}

my %Is = ();
$Is{VMS}    = 1 if $^O eq 'VMS';
$Is{OS2}    = 1 if $^O eq 'os2';
$Is{MacOS}  = 1 if $^O eq 'MacOS';
if( $^O eq 'MSWin32' ) {
    Win32::IsWin95() ? $Is{Win95} = 1 : $Is{Win32} = 1;
}
$Is{UWIN}   = 1 if $^O eq 'uwin';
$Is{Cygwin} = 1 if $^O eq 'cygwin';
$Is{NW5}    = 1 if $Config{osname} eq 'NetWare';  # intentional
$Is{BeOS}   = 1 if $^O =~ /beos/i;    # XXX should this be that loose?
$Is{DOS}    = 1 if $^O eq 'dos';

$Is{Unix}   = 1 if !keys %Is;

if( $Is{NW5} ) {
    $^O = 'NetWare';
    delete $Is{Win32};
}

_assert( keys %Is == 1 );
my($OS) = keys %Is;


my $class = "ExtUtils::MM_$OS";
eval "require $class" unless $INC{"ExtUtils/MM_$OS.pm"};
die $@@ if $@@;
unshift @@ISA, $class;


sub _assert {
    my $sanity = shift;
    die sprintf "Assert failed at %s line %d\n", (caller)[1,2] unless $sanity;
    return;
}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d4 1
a4 1
use ExtUtils::MakeMaker::Config;
d6 1
a6 1
$VERSION = '0.05';
d47 3
a49 3
$Is{VMS}    = $^O eq 'VMS';
$Is{OS2}    = $^O eq 'os2';
$Is{MacOS}  = $^O eq 'MacOS';
d53 8
a60 5
$Is{UWIN}   = $^O =~ /^uwin(-nt)?$/;
$Is{Cygwin} = $^O eq 'cygwin';
$Is{NW5}    = $Config{osname} eq 'NetWare';  # intentional
$Is{BeOS}   = $^O =~ /beos/i;    # XXX should this be that loose?
$Is{DOS}    = $^O eq 'dos';
a64 5
$Is{VOS}    = $^O eq 'vos';
$Is{QNX}    = $^O eq 'qnx';
$Is{AIX}    = $^O eq 'aix';

$Is{Unix}   = !grep { $_ } values %Is;
a65 1
map { delete $Is{$_} unless $Is{$_} } keys %Is;
@

