head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.23;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.23;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.41.56;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't' if -d 't';
        @@INC = ('../lib', 'lib');
    }
    else {
        unshift @@INC, 't/lib';
    }
}

chdir 't';

use ExtUtils::MM;
use MakeMaker::Test::Utils;

my $Is_VMS   = $^O eq 'VMS';
my $Is_Win32 = $^O eq 'MSWin32';

use Test::More tests => 7;

my $perl = which_perl;
my $mm = bless { NAME => "Foo" }, "MM";

# I don't expect anything to have a length shorter than 256 chars.
cmp_ok( $mm->max_exec_len, '>=', 256,   'max_exec_len' );

my $echo = $mm->oneliner(q{print @@ARGV}, ['-l']);

# Force a short command length to make testing split_command easier.
$mm->{_MAX_EXEC_LEN} = length($echo) + 15;
is( $mm->max_exec_len, $mm->{_MAX_EXEC_LEN}, '  forced a short max_exec_len' );

my @@test_args = qw(foo bar baz yar car har ackapicklerootyjamboree);
my @@cmds = $mm->split_command($echo, @@test_args);
isnt( @@cmds, 0 );

@@results = _run(@@cmds);
is( join('', @@results), join('', @@test_args));


my %test_args = ( foo => 42, bar => 23, car => 'har' );
$even_args = $mm->oneliner(q{print !(@@ARGV % 2)});
@@cmds = $mm->split_command($even_args, %test_args);
isnt( @@cmds, 0 );

@@results = _run(@@cmds);
like( join('', @@results ), qr/^1+$/,         'pairs preserved' );

is( $mm->split_command($echo), 0,  'no args means no commands' );


sub _run {
    my @@cmds = @@_;

    s{\$\(PERLRUN\)}{$perl} foreach @@cmds;
    if( $Is_VMS ) {
        s{-\n}{} foreach @@cmds
    }
    elsif( $Is_Win32 ) {
        s{\\\n}{} foreach @@cmds;
    }

    return map { s/\n+$//; $_ } map { `$_` } @@cmds
}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d57 1
a57 1
    s{\$\(ABSPERLRUN\)}{$perl} foreach @@cmds;
@

