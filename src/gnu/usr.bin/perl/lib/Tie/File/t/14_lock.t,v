head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.1
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	cvs-200704292000:1.1.1.1
	cvs-200606302200:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.38;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.38;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl
#
# Check flock() feature
#
# This isn't a real test; it just checks to make sure we can call the method.
# It doesn't even check to make sure that the default behavior
# (LOCK_EX) is occurring.  This is because I don't know how to write a good
# portable test for flocking.  I checked the Perl core distribution,
# and found that Perl doesn't test flock either!

BEGIN {
  eval { flock STDOUT, 0 };
  if ($@@ && $@@ =~ /unimplemented/) {
    print "1..0\n";
    exit;
  }
}

use Fcntl ':flock';             # This works at least back to 5.004_04

my $file = "tf$$.txt";
my ($o, $n);
my @@a;

print "1..4\n";

my $N = 1;
use Tie::File;
print "ok $N\n"; $N++;

# 2-4  Who the heck knows?
open F, "> $file" or die $!;
close F;
$o = tie @@a, 'Tie::File', $file, recsep => 'blah';
print $o ? "ok $N\n" : "not ok $N\n";
$N++;

print $o->flock() ? "ok $N\n" : "not ok $N\n";
$N++;

print $o->flock(LOCK_UN) ? "ok $N\n" : "not ok $N\n";
$N++;


END {
  undef $o;
  untie @@a;
  1 while unlink $file;
}

@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
