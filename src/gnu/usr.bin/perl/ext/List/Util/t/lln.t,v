head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.00;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.00;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.39.05;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w
# -*- perl -*-


#
# $Id: lln.t,v 1.3 2004/08/09 18:09:15 millert Exp $
# Author: Slaven Rezic
#

use strict;
use vars qw(%Config);

BEGIN {
    unless (-d 'blib') {
	chdir 't' if -d 't';
	@@INC = '../lib';
	require Config; import Config;
	keys %Config; # Silence warning
	if ($Config{extensions} !~ /\bList\/Util\b/) {
	    print "1..0 # Skip: List::Util was not built\n";
	    exit 0;
	}
    }
}

use Scalar::Util qw(looks_like_number);

my $i;
sub ok { print +(($_[0] eq $_[1]) ? "": "not "), "ok ",++$i,"\n" }

print "1..12\n";

ok(!!looks_like_number("1"),	    1);
ok(!!looks_like_number("-1"),	    1);
ok(!!looks_like_number("+1"),	    1);
ok(!!looks_like_number("1.0"),	    1);
ok(!!looks_like_number("+1.0"),	    1);
ok(!!looks_like_number("-1.0"),	    1);
ok(!!looks_like_number("-1.0e-12"), 1);
ok(!!looks_like_number("Inf"),	    $] >= 5.006001);
ok(!!looks_like_number("Infinity"), $] >= 5.008);
ok(!!looks_like_number("NaN"),	    $] >= 5.008);
ok(!!looks_like_number("foo"),	    '');
ok(!!looks_like_number(undef),	    $] < 5.008005);
# That's enough - we trust the perl core tests like t/base/num.t

__END__
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d2 10
a25 2
use strict;
use Test::More tests => 16;
d28 4
a31 3
foreach my $num (qw(1 -1 +1 1.0 +1.0 -1.0 -1.0e-12)) {
  ok(looks_like_number($num), "'$num'");
}
d33 13
a45 12
is(!!looks_like_number("Inf"),	    $] >= 5.006001,	'Inf');
is(!!looks_like_number("Infinity"), $] >= 5.008,	'Infinity');
is(!!looks_like_number("NaN"),	    $] >= 5.008,	'NaN');
is(!!looks_like_number("foo"),	    '',			'foo');
is(!!looks_like_number(undef),	    '',           	'undef');
is(!!looks_like_number({}),	    '',			'HASH Ref');
is(!!looks_like_number([]),	    '',			'ARRAY Ref');

use Math::BigInt;
my $bi = Math::BigInt->new('1234567890');
is(!!looks_like_number($bi),	    '',			'Math::BigInt');
is(!!looks_like_number("$bi"),	    1,			'Stringified Math::BigInt');
d47 1
a47 1
# We should copy some of perl core tests like t/base/num.t here
@

