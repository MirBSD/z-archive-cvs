head	1.4;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2014.03.13.02.00.11;	author tg;	state Exp;
branches;
next	1.3;
commitid	100532111417AF8094F;

1.3
date	2014.03.13.01.54.56;	author tg;	state Exp;
branches;
next	1.2;
commitid	100532110013447A9CC;

1.2
date	2014.03.13.01.54.14;	author tg;	state Exp;
branches;
next	1.1;
commitid	10053210FD67B116CEF;

1.1
date	2005.02.05.17.22.41;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.22.41;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.37.39;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.4
log
@sync
@
text
@BEGIN {
	if ($ENV{PERL_CORE}) {
        	chdir 't' if -d 't';
        	@@INC = '../lib';
        }
}

print "1..4\n";

use strict;
use Digest::MD5 qw(md5 md5_hex md5_base64);

# To update the EBCDIC section even on a Latin 1 platform,
# run this script with $ENV{EBCDIC_MD5SUM} set to a true value.
# (You'll need to have Perl 5.7.3 or later, to have the Encode installed.)
# (And remember that under the Perl core distribution you should
#  also have the $ENV{PERL_CORE} set to a true value.)
# Similarly, to update MacOS section, run with $ENV{MAC_MD5SUM} set.

my $EXPECT;
if (ord "A" == 193) { # EBCDIC
    $EXPECT = <<EOT;
c7b68bb806b2d42f4a11511132e94ae8  Changes
11e8028ee426273db6b6db270a8bb38c  README
347d5b9f257eb62eaab60b3d952451f7  MD5.pm
b61eb1bba8cc490040d02f6bf24874f7  MD5.xs
EOT
} elsif ("\n" eq "\015") { # MacOS
    $EXPECT = <<EOT;
628699b88b6a803225678802d2470067  Changes
c95549c6c5e1e1c078b27042f1dc850f  README
77503ff007841a671275fdf544dad68e  MD5.pm
716c3278fd80338727c100e5d2a76795  MD5.xs
EOT
} else {
    # This is the output of: 'md5sum Changes README MD5.pm MD5.xs'
    $EXPECT = <<EOT;
412c1a5ebd635befbf501531541a8743  Changes
c95549c6c5e1e1c078b27042f1dc850f  README
77503ff007841a671275fdf544dad68e  MD5.pm
5289d80c50daace1e08c9d4dd3840199  MD5.xs
EOT
}

if (!(-f "README") && -f "../README") {
   chdir("..") or die "Can't chdir: $!";
}

my $testno = 0;

my $B64 = 1;
eval { require MIME::Base64; };
if ($@@) {
    print "# $@@: Will not test base64 methods\n";
    $B64 = 0;
}

for (split /^/, $EXPECT) {
     my($md5hex, $file) = split ' ';
     my $base = $file;
#     print "# $base\n";
     if ($ENV{PERL_CORE}) {
         use File::Spec;
	 my @@path = qw(ext Digest MD5);
	 my $path = File::Spec->updir;
	 while (@@path) {
	   $path = File::Spec->catdir($path, shift @@path);
	 }
	 $file = File::Spec->catfile($path, $file);
     }
#     print "# file = $file\n";
     unless (-f $file) {
	warn "No such file: $file\n";
	next;
     }
     if ($ENV{EBCDIC_MD5SUM}) {
         require Encode;
	 my $data = cat_file($file);	
	 Encode::from_to($data, 'latin1', 'cp1047');
	 print md5_hex($data), "  $base\n";
	 next;
     }
     if ($ENV{MAC_MD5SUM}) {
         require Encode;
	 my $data = cat_file($file);	
	 Encode::from_to($data, 'latin1', 'MacRoman');
	 print md5_hex($data), "  $base\n";
	 next;
     }
     my $md5bin = pack("H*", $md5hex);
     my $md5b64;
     if ($B64) {
	 $md5b64 = MIME::Base64::encode($md5bin, "");
	 chop($md5b64); chop($md5b64);   # remove padding
     }
     my $failed;
     my $got;

     if (digest_file($file, 'digest') ne $md5bin) {
	 print "$file: Bad digest\n";
	 $failed++;
     }

     if (($got = digest_file($file, 'hexdigest')) ne $md5hex) {
	 print "$file: Bad hexdigest: got $got expected $md5hex\n";
	 $failed++;
     }

     if ($B64 && digest_file($file, 'b64digest') ne $md5b64) {
	 print "$file: Bad b64digest\n";
	 $failed++;
     }

     my $data = cat_file($file);
     if (md5($data) ne $md5bin) {
	 print "$file: md5() failed\n";
	 $failed++;
     }
     if (md5_hex($data) ne $md5hex) {
	 print "$file: md5_hex() failed\n";
	 $failed++;
     }
     if ($B64 && md5_base64($data) ne $md5b64) {
	 print "$file: md5_base64() failed\n";
	 $failed++;
     }

     if (Digest::MD5->new->add($data)->digest ne $md5bin) {
	 print "$file: MD5->new->add(...)->digest failed\n";
	 $failed++;
     }
     if (Digest::MD5->new->add($data)->hexdigest ne $md5hex) {
	 print "$file: MD5->new->add(...)->hexdigest failed\n";
	 $failed++;
     }
     if ($B64 && Digest::MD5->new->add($data)->b64digest ne $md5b64) {
	 print "$file: MD5->new->add(...)->b64digest failed\n";
	 $failed++;
     }

     my @@data = split //, $data;
     if (md5(@@data) ne $md5bin) {
	 print "$file: md5(\@@data) failed\n";
	 $failed++;
     }
     if (Digest::MD5->new->add(@@data)->digest ne $md5bin) {
	 print "$file: MD5->new->add(\@@data)->digest failed\n";
	 $failed++;
     }
     my $md5 = Digest::MD5->new;
     for (@@data) {
	 $md5->add($_);
     }
     if ($md5->digest ne $md5bin) {
	 print "$file: $md5->add()-loop failed\n";
	 $failed++;
     }

     print "not " if $failed;
     print "ok ", ++$testno, "\n";
}


sub digest_file
{
    my($file, $method) = @@_;
    $method ||= "digest";
    #print "$file $method\n";

    open(FILE, $file) or die "Can't open $file: $!";
    my $digest = Digest::MD5->new->addfile(*FILE)->$method();
    close(FILE);

    $digest;
}

sub cat_file
{
    my($file) = @@_;
    local $/;  # slurp
    open(FILE, $file) or die "Can't open $file: $!";

    # For PerlIO in case of UTF-8 locales.
    eval 'binmode(FILE, ":bytes")' if $] >= 5.008;

    my $tmp = <FILE>;
    close(FILE);
    $tmp;
}

@


1.3
log
@make test succeed (skip file not in core)
@
text
@d38 1
a38 1
2fdc25c326960308f5334c967455d1f5  Changes
d41 1
a41 1
716c3278fd80338727c100e5d2a76795  MD5.xs
@


1.2
log
@update to original Perl 5.8.8 versions
@
text
@d8 1
a8 1
print "1..5\n";
a26 1
276da0aa4e9a08b7fe09430c9c5690aa  rfc1321.txt
a33 1
754b9db19f79dbc4992f7166eb0f37ce  rfc1321.txt
d36 1
a36 1
    # This is the output of: 'md5sum Changes README MD5.pm MD5.xs rfc1321.txt'
a41 1
754b9db19f79dbc4992f7166eb0f37ce  rfc1321.txt
a62 4
         if ($file eq 'rfc1321.txt') { # Don't have it in core.
	     print "ok ", ++$testno, " # Skip: PERL_CORE\n";
	     next;
	 }
@


1.1
log
@Initial revision
@
text
@d23 4
a26 4
15e4c91ad67f5ff238033305376c9140  Changes
0565ec21b15c0f23f4c51fb327c8926d  README
f0f77710cd8d5ba7d9faedec8d02dc2f  MD5.pm
f9848c0ee3b20a9177465eec19361e6c  MD5.xs
d31 4
a34 4
dea016b088ab4d88a5e7cbd9c15a9c88  Changes
6c950a0211a5a28f023bb482037698cd  README
f057c88277ecee875cf6f0352468407a  MD5.pm
5bae62404829e6fd8ad0d4f8d5ccea54  MD5.xs
d40 4
a43 4
0150d5fc16642cb4222e83a1cd7c0a1b  Changes
6c950a0211a5a28f023bb482037698cd  README
f057c88277ecee875cf6f0352468407a  MD5.pm
5bae62404829e6fd8ad0d4f8d5ccea54  MD5.xs
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d23 4
a26 4
c7b68bb806b2d42f4a11511132e94ae8  Changes
11e8028ee426273db6b6db270a8bb38c  README
347d5b9f257eb62eaab60b3d952451f7  MD5.pm
b61eb1bba8cc490040d02f6bf24874f7  MD5.xs
d31 4
a34 4
628699b88b6a803225678802d2470067  Changes
c95549c6c5e1e1c078b27042f1dc850f  README
77503ff007841a671275fdf544dad68e  MD5.pm
716c3278fd80338727c100e5d2a76795  MD5.xs
d40 4
a43 4
412c1a5ebd635befbf501531541a8743  Changes
c95549c6c5e1e1c078b27042f1dc850f  README
77503ff007841a671275fdf544dad68e  MD5.pm
716c3278fd80338727c100e5d2a76795  MD5.xs
@

