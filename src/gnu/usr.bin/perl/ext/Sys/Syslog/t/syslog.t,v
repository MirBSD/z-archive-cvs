head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.04;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.04;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.39.30;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bSyslog\b/) {
	print "1..0 # Skip: Sys::Syslog was not built\n";
	exit 0;
    }
    if ($Config{'extensions'} !~ /\bSocket\b/) {
	print "1..0 # Skip: Socket was not built\n";
	exit 0;
    }

    require Socket;

    # This code inspired by Sys::Syslog::connect():
    require Sys::Hostname;
    my ($host_uniq) = Sys::Hostname::hostname();
    my ($host)      = $host_uniq =~ /([A-Za-z0-9_.-]+)/;

    if (! defined Socket::inet_aton($host)) {
        print "1..0 # Skip: Can't lookup $host\n";
        exit 0;
    }
}

BEGIN {
  eval {require Sys::Syslog} or do {
    if ($@@ =~ /Your vendor has not/) {
      print "1..0 # Skip: missing macros\n";
      exit 0;
    }
  }
}

use Sys::Syslog qw(:DEFAULT setlogsock);

# Test this to 1 if your syslog accepts udp connections.
# Most don't (or at least shouldn't)
my $Test_Syslog_INET = 0;

my $test_string = "uid $< is testing perl $] syslog capabilities";

print "1..6\n";

if (Sys::Syslog::_PATH_LOG()) {
    if (-e Sys::Syslog::_PATH_LOG()) {
	# The only known $^O eq 'svr4' that needs this is NCR MP-RAS,
	# but assuming 'stream' in SVR4 is probably not that bad.
        if ($^O =~ /^(solaris|irix|svr4|powerux)$/) {
            # we should check for stream support here, not for solaris/irix
            print defined(eval { setlogsock('stream') }) ? "ok 1\n" : "not ok 1 # $!\n";
        } else { 
            print defined(eval { setlogsock('unix') }) ? "ok 1\n" : "not ok 1 # $!\n";
        }
        if (defined(eval { openlog('perl', 'ndelay', 'local0') })) {
	    print "ok 2\n";
	    print defined(eval { syslog('info', $test_string ) })
		    ? "ok 3\n" : "not ok 3 # $!\n";
	} else {
	    if ($@@ =~ /no connection to syslog available/) {
		print "ok 2 # Skip: syslogd not running\n";
	    } else {
		print "not ok 2 # $@@\n";
	    }
	    print "ok 3 # Skip: openlog failed\n";
	}
    } else {
        for (1..3) {
            print
                "ok $_ # Skip: file ",
                Sys::Syslog::_PATH_LOG(),
                " does not exist\n";
        }
    }
}
else {
    for (1..3) { print "ok $_ # Skip: _PATH_LOG unavailable\n" }
}

if( $Test_Syslog_INET ) {
    print defined(eval { setlogsock('inet') }) ? "ok 4\n" 
                                               : "not ok 4\n";
    print defined(eval { openlog('perl', 'ndelay', 'local0') }) ? "ok 5\n" 
                                                                : "not ok 5 # $!\n";
    print defined(eval { syslog('info', $test_string ) }) ? "ok 6\n" 
                                                   : "not ok 6 # $!\n";
}
else {
    print "ok $_ # Skip: assuming syslog doesn't accept inet connections\n" 
      foreach (4..6);
}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d1 1
a1 1
#!/usr/bin/perl -T
d4 10
a13 3
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = '../lib';
a14 1
}
d16 1
a16 12
use strict;
use Config;
use File::Spec;
use Test::More;

# check that the module is at least available
plan skip_all => "Sys::Syslog was not build" 
  unless $Config{'extensions'} =~ /\bSyslog\b/;

# we also need Socket
plan skip_all => "Socket was not build" 
  unless $Config{'extensions'} =~ /\bSocket\b/;
d18 9
a26 6
BEGIN {
    plan tests => 119;

    # ok, now loads them
    eval 'use Socket';
    use_ok('Sys::Syslog', ':standard', ':extended', ':macros');
d29 5
a33 32
# check that the documented functions are correctly provided
can_ok( 'Sys::Syslog' => qw(openlog syslog syslog setlogmask setlogsock closelog) );


# check the diagnostics
# setlogsock()
eval { setlogsock() };
like( $@@, qr/^Invalid argument passed to setlogsock; must be 'stream', 'unix', 'tcp', 'udp' or 'inet'/, 
    "calling setlogsock() with no argument" );

# syslog()
eval { syslog() };
like( $@@, qr/^syslog: expecting argument \$priority/, 
    "calling syslog() with no argument" );

my $test_string = "uid $< is testing Perl $] syslog(3) capabilities";
my $r = 0;

# try to open a syslog using a Unix or stream socket
SKIP: {
    skip "can't connect to Unix socket: _PATH_LOG unavailable", 8
      unless -e Sys::Syslog::_PATH_LOG();

    # The only known $^O eq 'svr4' that needs this is NCR MP-RAS,
    # but assuming 'stream' in SVR4 is probably not that bad.
    my $sock_type = $^O =~ /^(solaris|irix|svr4|powerux)$/ ? 'stream' : 'unix';

    eval { setlogsock($sock_type) };
    is( $@@, '', "setlogsock() called with '$sock_type'" );
    TODO: {
        local $TODO = "minor bug";
        ok( $r, "setlogsock() should return true: '$r'" );
d35 2
d38 1
a38 19
    # open syslog with a "local0" facility
    SKIP: {
        # openlog()
        $r = eval { openlog('perl', 'ndelay', 'local0') } || 0;
        skip "can't connect to syslog", 6 if $@@ =~ /^no connection to syslog available/;
        is( $@@, '', "openlog() called with facility 'local0'" );
        ok( $r, "openlog() should return true: '$r'" );

        # syslog()
        $r = eval { syslog('info', "$test_string by connecting to a $sock_type socket") } || 0;
        is( $@@, '', "syslog() called with level 'info'" );
        ok( $r, "syslog() should return true: '$r'" );

        # closelog()
        $r = eval { closelog() } || 0;
        is( $@@, '', "closelog()" );
        ok( $r, "closelog() should return true: '$r'" );
    }
}
d40 36
a75 47
# try to open a syslog using all the available connection methods
for my $sock_type (qw(stream unix inet tcp udp console)) {
    SKIP: {
        # setlogsock()
        $r = eval { setlogsock([$sock_type]) } || 0;
        skip "can't use '$sock_type' socket", 16 unless $r;
        is( $@@, '', "setlogsock() called with '$sock_type'" );
        ok( $r, "setlogsock() should return true: '$r'" );

        # openlog() without option NDELAY
        $r = eval { openlog('perl', '', 'local0') } || 0;
        skip "can't connect to syslog", 14 if $@@ =~ /^no connection to syslog available/;
        is( $@@, '', "openlog() called with facility 'local0' and without option 'ndelay'" );
        ok( $r, "openlog() should return true: '$r'" );

        # openlog() with the option NDELAY
        $r = eval { openlog('perl', 'ndelay', 'local0') } || 0;
        skip "can't connect to syslog", 12 if $@@ =~ /^no connection to syslog available/;
        is( $@@, '', "openlog() called with facility 'local0' with option 'ndelay'" );
        ok( $r, "openlog() should return true: '$r'" );

        # syslog() with level "info" (as a string), should pass
        $r = eval { syslog('info', "$test_string by connecting to a $sock_type socket") } || 0;
        is( $@@, '', "syslog() called with level 'info'" );
        ok( $r, "syslog() should return true: '$r'" );

        # syslog() with level "info" (as a macro), should pass
        $r = eval { syslog(LOG_INFO, "$test_string by connecting to a $sock_type socket") } || 0;
        is( $@@, '', "syslog() called with level 'info'" );
        ok( $r, "syslog() should return true: '$r'" );

        # syslog() with facility "kern" (as a string), should fail
        $r = eval { syslog('kern', "$test_string by connecting to a $sock_type socket") } || 0;
        like( $@@, '/^syslog: invalid level/facility: kern/', "syslog() called with facility 'kern'" );
        ok( !$r, "syslog() should return false: '$r'" );

        # syslog() with facility "kern" (as a macro), should fail
        $r = eval { syslog(LOG_KERN, "$test_string by connecting to a $sock_type socket") } || 0;
        like( $@@, '/^syslog: invalid level/facility: 0/', "syslog() called with facility 'kern'" );
        ok( !$r, "syslog() should return false: '$r'" );

        SKIP: {
            skip "skipping closelog() tests for 'console'", 2 if $sock_type eq 'console';
            # closelog()
            $r = eval { closelog() } || 0;
            is( $@@, '', "closelog()" );
            ok( $r, "closelog() should return true: '$r'" );
d79 3
d83 11
a93 19
# setlogmask()
{
    my $oldmask = 0;

    $oldmask = eval { setlogmask(0) } || 0;
    is( $@@, '', "setlogmask() called with a null mask" );
    $r = eval { setlogmask(0) } || 0;
    is( $@@, '', "setlogmask() called with a null mask (second time)" );
    is( $r, $oldmask, "setlogmask() must return the same mask as previous call");

    for my $newmask ( LOG_ERR , LOG_CRIT|LOG_ERR|LOG_WARNING ) {
        $r = eval { setlogmask($newmask) } || 0;
        is( $@@, '', "setlogmask() called with a new mask" );
        is( $r, $oldmask, "setlogmask() must return the same mask as previous call");
        $r = eval { setlogmask(0) } || 0;
        is( $@@, '', "setlogmask() called with a null mask" );
        is( $r, $newmask, "setlogmask() must return the new mask");
        setlogmask($oldmask);
    }
@

