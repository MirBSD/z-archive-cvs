head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.1
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	cvs-200704292000:1.1.1.1
	cvs-200606302200:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.08;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.08;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl -Tw

# Tests of threads::shared's behavior when threads are disabled.

BEGIN {
    chdir 't';
    @@INC = '../lib';
    require Config;
    if (($Config::Config{'extensions'} !~ m!\bthreads/shared\b!) ){
        print "1..0 # Skip -- Perl configured without threads::shared module\n";
        exit 0;
    }
}

# Can't use Test::More, it turns threads on.
use Test;
plan tests => 31;

use threads::shared;

# Make sure threads are really off.
ok( !$INC{"threads.pm"} );

# Check each faked function.
foreach my $func (qw(share cond_wait cond_signal cond_broadcast)) {
    ok( my $func_ref = __PACKAGE__->can($func) ? 1 : 0 );

    eval qq{$func()};
    ok( $@@, qr/^Not enough arguments / );

    my %hash = (foo => 42, bar => 23);
    eval qq{$func(\%hash)};
    ok( $@@, '' );
    ok( $hash{foo}, 42 );
    ok( $hash{bar}, 23 );
}

# These all have no return value.
foreach my $func (qw(cond_wait cond_signal cond_broadcast)) {
    my @@array = qw(1 2 3 4);
    ok( eval qq{$func(\@@array)}, undef );
    ok( "@@array", "1 2 3 4" );
}

# share() is supposed to return back it's argument as a ref.
{
    my @@array = qw(1 2 3 4);
    ok( share(@@array), \@@array );
    ok( ref &share({}), 'HASH' );
    ok( "@@array", "1 2 3 4" );
}

# lock() should be a no-op.  The return value is currently undefined.
{
    my @@array = qw(1 2 3 4);
    lock(@@array);
    ok( "@@array", "1 2 3 4" );
}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
