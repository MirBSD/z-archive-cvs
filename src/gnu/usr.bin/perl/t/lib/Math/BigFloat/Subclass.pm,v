head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.58;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.58;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.45.36;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

package Math::BigFloat::Subclass;

require 5.005_02;
use strict;

use Exporter;
use Math::BigFloat(1.38);
use vars qw($VERSION @@ISA $PACKAGE
            $accuracy $precision $round_mode $div_scale);

@@ISA = qw(Exporter Math::BigFloat);

$VERSION = 0.04;

use overload; 		# inherit overload from BigInt

# Globals
$accuracy = $precision = undef;
$round_mode = 'even';
$div_scale = 40;

sub new
{
        my $proto  = shift;
        my $class  = ref($proto) || $proto;

        my $value       = shift;
	my $a = $accuracy; $a = $_[0] if defined $_[0];
	my $p = $precision; $p = $_[1] if defined $_[1];
        # Store the floating point value
        my $self = Math::BigFloat->new($value,$a,$p,$round_mode);
        bless $self, $class;
        $self->{'_custom'} = 1; # make sure this never goes away
        return $self;
}

BEGIN
  {
  *objectify = \&Math::BigInt::objectify;
  }

1;
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@a2 2
# for testing subclassing Math::BigFloat

d15 1
a15 1
$VERSION = 0.05;
a41 3
  # to allow Math::BigFloat::Subclass::bgcd( ... ) style calls
  *bgcd = \&Math::BigFloat::bgcd;
  *blcm = \&Math::BigFloat::blcm;
@

