head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.24.00;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.00;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.45.46;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@Check lexical warnings functionality

TODO
  check that the warning hierarchy works.

__END__

#  check illegal category is caught
use warnings 'this-should-never-be-a-warning-category' ;
EXPECT
Unknown warnings category 'this-should-never-be-a-warning-category' at - line 3
BEGIN failed--compilation aborted at - line 3.
########

# Check compile time scope of pragma
use warnings 'syntax' ;
{
    no warnings ;
    my $a =+ 1 ;
}
my $a =+ 1 ;
EXPECT
Reversed += operator at - line 8.
########

# Check compile time scope of pragma
no warnings;
{
    use warnings 'syntax' ;
    my $a =+ 1 ;
}
my $a =+ 1 ;
EXPECT
Reversed += operator at - line 6.
########

# Check runtime scope of pragma
use warnings 'uninitialized' ;
{
    no warnings ;
    my $b ; chop $b ;
}
my $b ; chop $b ;
EXPECT
Use of uninitialized value in scalar chop at - line 8.
########

# Check runtime scope of pragma
no warnings ;
{
    use warnings 'uninitialized' ;
    my $b ; chop $b ;
}
my $b ; chop $b ;
EXPECT
Use of uninitialized value in scalar chop at - line 6.
########

# Check runtime scope of pragma
no warnings ;
{
    use warnings 'uninitialized' ;
    $a = sub { my $b ; chop $b ; }
}
&$a ;
EXPECT
Use of uninitialized value in scalar chop at - line 6.
########

use warnings 'syntax' ;
my $a =+ 1 ;
EXPECT
Reversed += operator at - line 3.
########

--FILE-- abc
my $a =+ 1 ;
1;
--FILE-- 
use warnings 'syntax' ;
require "./abc";
EXPECT

########

--FILE-- abc
use warnings 'syntax' ;
1;
--FILE-- 
require "./abc";
my $a =+ 1 ;
EXPECT

########

--FILE-- abc
use warnings 'syntax' ;
my $a =+ 1 ;
1;
--FILE-- 
use warnings 'uninitialized' ;
require "./abc";
my $a ; chop $a ;
EXPECT
Reversed += operator at ./abc line 2.
Use of uninitialized value in scalar chop at - line 3.
########

--FILE-- abc.pm
use warnings 'syntax' ;
my $a =+ 1 ;
1;
--FILE-- 
use warnings 'uninitialized' ;
use abc;
my $a ; chop $a ;
EXPECT
Reversed += operator at abc.pm line 2.
Use of uninitialized value in scalar chop at - line 3.
########

# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval {
        my $b ; chop $b ;
    }; print STDERR $@@ ;
    my $b ; chop $b ;
}
EXPECT

########

# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval {
        use warnings 'uninitialized' ;
        my $b ; chop $b ;
    }; print STDERR $@@ ;
    my $b ; chop $b ;
}
EXPECT
Use of uninitialized value in scalar chop at - line 8.
########

# Check scope of pragma with eval
no warnings;
{
    use warnings 'uninitialized' ;
    eval {
        my $b ; chop $b ;
    }; print STDERR $@@ ;
    my $b ; chop $b ;
}
EXPECT
Use of uninitialized value in scalar chop at - line 7.
Use of uninitialized value in scalar chop at - line 9.
########

# Check scope of pragma with eval
no warnings;
{
    use warnings 'uninitialized' ;
    eval {
        no warnings ;
        my $b ; chop $b ;
    }; print STDERR $@@ ;
    my $b ; chop $b ;
}
EXPECT
Use of uninitialized value in scalar chop at - line 10.
########

# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval {
        my $a =+ 1 ;
    }; print STDERR $@@ ;
    my $a =+ 1 ;
}
EXPECT

########

# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval {
        use warnings 'syntax' ;
        my $a =+ 1 ;
    }; print STDERR $@@ ;
    my $a =+ 1 ;
}
EXPECT
Reversed += operator at - line 8.
########

# Check scope of pragma with eval
no warnings;
{
    use warnings 'syntax' ;
    eval {
        my $a =+ 1 ;
    }; print STDERR $@@ ;
    my $a =+ 1 ;
}
EXPECT
Reversed += operator at - line 7.
Reversed += operator at - line 9.
########

# Check scope of pragma with eval
no warnings;
{
    use warnings 'syntax' ;
    eval {
        no warnings ;
        my $a =+ 1 ;
    }; print STDERR $@@ ;
    my $a =+ 1 ;
}
EXPECT
Reversed += operator at - line 10.
########

# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval '
        my $b ; chop $b ;
    '; print STDERR $@@ ;
    my $b ; chop $b ;
}
EXPECT

########

# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval q[ 
        use warnings 'uninitialized' ;
        my $b ; chop $b ;
    ]; print STDERR $@@;
    my $b ; chop $b ;
}
EXPECT
Use of uninitialized value in scalar chop at (eval 1) line 3.
########

# Check scope of pragma with eval
no warnings;
{
    use warnings 'uninitialized' ;
    eval '
        my $b ; chop $b ;
    '; print STDERR $@@ ;
    my $b ; chop $b ;
}
EXPECT
Use of uninitialized value in scalar chop at (eval 1) line 2.
Use of uninitialized value in scalar chop at - line 9.
########

# Check scope of pragma with eval
no warnings;
{
    use warnings 'uninitialized' ;
    eval '
        no warnings ;
        my $b ; chop $b ;
    '; print STDERR $@@ ;
    my $b ; chop $b ;
}
EXPECT
Use of uninitialized value in scalar chop at - line 10.
########

# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval '
        my $a =+ 1 ;
    '; print STDERR $@@ ;
    my $a =+ 1 ;
}
EXPECT

########

# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval q[ 
        use warnings 'syntax' ;
        my $a =+ 1 ;
    ]; print STDERR $@@;
    my $a =+ 1 ;
}
EXPECT
Reversed += operator at (eval 1) line 3.
########

# Check scope of pragma with eval
no warnings;
{
    use warnings 'syntax' ;
    eval '
        my $a =+ 1 ;
    '; print STDERR $@@;
    my $a =+ 1 ;
}
EXPECT
Reversed += operator at - line 9.
Reversed += operator at (eval 1) line 2.
########

# Check scope of pragma with eval
no warnings;
{
    use warnings 'syntax' ;
    eval '
        no warnings ;
        my $a =+ 1 ;
    '; print STDERR $@@;
    my $a =+ 1 ;
}
EXPECT
Reversed += operator at - line 10.
########

# Check the additive nature of the pragma
my $a =+ 1 ;
my $a ; chop $a ;
use warnings 'syntax' ;
$a =+ 1 ;
my $b ; chop $b ;
use warnings 'uninitialized' ;
my $c ; chop $c ;
no warnings 'syntax' ;
$a =+ 1 ;
EXPECT
Reversed += operator at - line 6.
Use of uninitialized value in scalar chop at - line 9.
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@a74 6
-w
no warnings 'reserved' ;
foo.bar;
EXPECT
Useless use of concatenation (.) or string in void context at - line 3.
########
@

