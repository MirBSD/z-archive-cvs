head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.1
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	cvs-200704292000:1.1.1.1
	cvs-200606302200:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.24.06;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.06;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@    This is a test to see if I can do not only `$self' and `method()', but
    also `$self->method()' and `$self->{FIELDNAME}' and `$Foo <=> $Bar'
    without resorting to escape sequences. If I want to refer to the
    right-shift operator I can do something like `$x >> 3' or even `$y >>
    5'.

    Now for the grand finale of `$self->method()->{FIELDNAME} = {FOO=>BAR}'.
    And I also want to make sure that newlines work like this
    `$self->{FOOBAR} >> 3 and [$b => $a]->[$a <=> $b]'

    Of course I should still be able to do all this *with* escape sequences
    too: `$self->method()' and `$self->{FIELDNAME}' and `{FOO=>BAR}'.

    Dont forget `$self->method()->{FIELDNAME} = {FOO=>BAR}'.

    And make sure that `0' works too!

    Now, if I use << or >> as my delimiters, then I have to use whitespace.
    So things like `<$self-'method()>> and `<$self-'{FIELDNAME}>> wont end
    up doing what you might expect since the first > will still terminate
    the first < seen.

    Lets make sure these work for empty ones too, like and `>>' (just to be
    obnoxious)

@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
