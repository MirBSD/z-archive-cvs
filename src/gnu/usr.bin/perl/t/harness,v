head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.23.57;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.23.57;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.45.25;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

# We suppose that perl _mostly_ works at this moment, so may use
# sophisticated testing.

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';              # pick up only this build's lib
    $ENV{PERL5LIB} = '../lib';    # so children will see it too
}

my $torture; # torture testing?

use Test::Harness;

$Test::Harness::switches = "";    # Too much noise otherwise
$Test::Harness::verbose = shift if @@ARGV && $ARGV[0] eq '-v';

if ($ARGV[0] eq '-torture') {
    shift;
    $torture = 1;
}

# Let tests know they're running in the perl core.  Useful for modules
# which live dual lives on CPAN.
$ENV{PERL_CORE} = 1;

#fudge DATA for now.
%datahandle = qw(
		lib/bigint.t		1
		lib/bigintpm.t		1
		lib/bigfloat.t	 	1
		lib/bigfloatpm.t	1
		op/gv.t			1
		lib/complex.t		1
		lib/ph.t		1
		lib/soundex.t		1
		op/misc.t		1
		op/runlevel.t		1
		op/tie.t		1
		op/lex_assign.t		1
		);

foreach (keys %datahandle) {
     unlink "$_.t";
}

my @@tests = ();

# [.VMS]TEST.COM calls harness with empty arguments, so clean-up @@ARGV
@@ARGV = grep $_ && length( $_ ) => @@ARGV;

if (@@ARGV) {
    if ($^O eq 'MSWin32') {
	@@tests = map(glob($_),@@ARGV);
    }
    else {
	@@tests = @@ARGV;
    }
} else {
    unless (@@tests) {
	push @@tests, <base/*.t>;
        push @@tests, <comp/*.t>;
        push @@tests, <cmd/*.t>;
        push @@tests, <run/*.t>;
        push @@tests, <io/*.t>;
        push @@tests, <op/*.t>;
        push @@tests, <uni/*.t>;
        push @@tests, <lib/*.t>;
        push @@tests, <japh/*.t> if $torture;
	push @@tests, <win32/*.t> if $^O eq 'MSWin32';
	use File::Spec;
	my $updir = File::Spec->updir;
	my $mani  = File::Spec->catfile(File::Spec->updir, "MANIFEST");
	if (open(MANI, $mani)) {
	    while (<MANI>) { # similar code in t/TEST
	    if (m!^(ext/\S+/?(?:[^/\s]+\.t|test\.pl)|lib/\S+?(?:\.t|test\.pl))\s!) {
		    push @@tests, File::Spec->catfile($updir, $1);
		}
	    }
	    close MANI;
	} else {
	    warn "$0: cannot open $mani: $!\n";
	}
	push @@tests, <pod/*.t>;
	push @@tests, <x2p/*.t>;
    }
}
if ($^O eq 'MSWin32') {
    s,\\,/,g for @@tests;
}
Test::Harness::runtests @@tests;
exit(0) unless -e "../testcompile";

# %infinite =  qw (
#        op/bop.t	1
#        lib/hostname.t	1
#	 op/lex_assign.t	1
#	 lib/ph.t	1
#        );

my $dhwrapper = <<'EOT';
open DATA,"<".__FILE__;
until (($_=<DATA>) =~ /^__END__/) {};
EOT

@@tests = grep (!$infinite{$_}, @@tests);
@@tests = map {
         my $new = $_;
	 if ($datahandle{$_} && !( -f "$new.t") ) {
             $new .= '.t';
             local(*F, *T);
             open(F,"<$_") or die "Can't open $_: $!";
             open(T,">$new") or die "Can't open $new: $!";
             print T $dhwrapper, <F>;
             close F;
             close T;
         }
         $new;
         } @@tests;

print "The tests ", join(' ', keys(%infinite)),
    " generate infinite loops! Skipping!\n";

$ENV{'HARNESS_COMPILE_TEST'} = 1;
$ENV{'PERLCC_TIMEOUT'} = 120 unless $ENV{'PERLCC_TIMEOUT'};

Test::Harness::runtests @@tests;
foreach (keys %datahandle) {
     unlink "$_.t";
}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d19 1
a19 1
if ($ARGV[0] && $ARGV[0] eq '-torture') {
a52 14
sub _populate_hash {
    return map {$_, 1} split /\s+/, $_[0];
}

if ($ARGV[0] && $ARGV[0]=~/^-re/) {
    if ($ARGV[0]!~/=/) {
        shift;
        $re=join "|",@@ARGV;
        @@ARGV=();
    } else {
        (undef,$re)=split/=/,shift;
    }
}

a71 9
	use Config;
	my %skip;
	{
	    my %extensions = _populate_hash $Config{'extensions'};
	    my %known_extensions = _populate_hash $Config{'known_extensions'};
	    foreach (keys %known_extensions) {
		$skip{$_}++ unless $extensions{$_};
	    }
	}
d77 2
a78 8
		if (m!^(ext/(\S+)/+(?:[^/\s]+\.t|test\.pl)|lib/\S+?(?:\.t|test\.pl))\s!) {
		    my ($test, $extension) = ($1, $2);
		    if (defined $extension) {
			$extension =~ s!/t$!!;
			# XXX Do I want to warn that I'm skipping these?
			next if $skip{$extension};
		    }
		    push @@tests, File::Spec->catfile($updir, $test);
a91 2
@@tests=grep /$re/, @@tests 
    if $re;
@

