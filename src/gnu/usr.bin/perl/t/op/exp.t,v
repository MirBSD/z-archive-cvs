head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.24.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.46.45;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

# $RCSfile: exp.t,v $$Revision: 1.7 $$Date: 2003/12/03 03:02:48 $

print "1..6\n";

# compile time evaluation

$s = sqrt(2);
if (substr($s,0,5) eq '1.414') {print "ok 1\n";} else {print "not ok 1\n";}

$s = exp(1);
if (substr($s,0,7) eq '2.71828') {print "ok 2\n";} else {print "not ok 2\n";}

if (exp(log(1)) == 1) {print "ok 3\n";} else {print "not ok 3\n";}

# run time evaluation

$x1 = 1;
$x2 = 2;
$s = sqrt($x2);
if (substr($s,0,5) eq '1.414') {print "ok 4\n";} else {print "not ok 4\n";}

$s = exp($x1);
if (substr($s,0,7) eq '2.71828') {print "ok 5\n";} else {print "not ok 5\n";}

if (exp(log($x1)) == 1) {print "ok 6\n";} else {print "not ok 6\n";}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d3 1
a3 5
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}
d5 1
a5 1
plan tests => 16;
d10 1
a10 1
is(substr($s,0,5), '1.414');
d13 1
a13 1
is(substr($s,0,7), '2.71828');
d15 1
a15 1
cmp_ok(exp(log(1)), '==', 1);
d22 1
a22 1
is(substr($s,0,5), '1.414');
d25 1
a25 1
is(substr($s,0,7), '2.71828');
d27 1
a27 29
cmp_ok(exp(log($x1)), '==', 1);

# tests for transcendental functions

my $pi = 3.1415926535897931160;
my $pi_2 = 1.5707963267948965580;

sub round {
   my $result = shift;
   return sprintf("%.9f", $result);
}

# sin() tests
cmp_ok(sin(0), '==', 0.0);
cmp_ok(round(sin($pi)), '==', 0.0);
cmp_ok(round(sin(-1 * $pi)), '==', 0.0);
cmp_ok(round(sin($pi_2)), '==', 1.0);
cmp_ok(round(sin(-1 * $pi_2)), '==', -1.0);

# cos() tests
cmp_ok(cos(0), '==', 1.0);
cmp_ok(round(cos($pi)), '==', -1.0);
cmp_ok(round(cos(-1 * $pi)), '==', -1.0);
cmp_ok(round(cos($pi_2)), '==', 0.0);
cmp_ok(round(cos(-1 * $pi_2)), '==', 0.0);

# atan2() tests were removed due to differing results from calls to
# atan2() on various OS's and architectures.  See perlport.pod for
# more information.
@

