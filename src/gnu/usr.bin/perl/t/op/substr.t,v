head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.24.02;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.02;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.46.58;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

print "1..181\n";

#P = start of string  Q = start of substr  R = end of substr  S = end of string

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}
use warnings ;

$a = 'abcdefxyz';
$SIG{__WARN__} = sub {
     if ($_[0] =~ /^substr outside of string/) {
          $w++;
     } elsif ($_[0] =~ /^Attempt to use reference as lvalue in substr/) {
          $w += 2;
     } elsif ($_[0] =~ /^Use of uninitialized value/) {
          $w += 3;
     } else {
          warn $_[0];
     }
};

sub ok { print (($_[1] ? "" : "not ") . "ok $_[0]\n") }

$FATAL_MSG = '^substr outside of string' ;

ok 1, substr($a,0,3) eq 'abc';   # P=Q R S
ok 2, substr($a,3,3) eq 'def';   # P Q R S
ok 3, substr($a,6,999) eq 'xyz'; # P Q S R
$b = substr($a,999,999) ; # warn # P R Q S
ok 4, $w-- == 1 ;
eval{substr($a,999,999) = "" ; };# P R Q S
ok 5, $@@ =~ /$FATAL_MSG/;
ok 6, substr($a,0,-6) eq 'abc';  # P=Q R S
ok 7, substr($a,-3,1) eq 'x';    # P Q R S

$[ = 1;

ok 8, substr($a,1,3) eq 'abc' ;  # P=Q R S
ok 9, substr($a,4,3) eq 'def' ;  # P Q R S
ok 10, substr($a,7,999) eq 'xyz';# P Q S R
$b = substr($a,999,999) ; # warn # P R Q S
ok 11, $w-- == 1 ;
eval{substr($a,999,999) = "" ; } ; # P R Q S
ok 12, $@@ =~ /$FATAL_MSG/;
ok 13, substr($a,1,-6) eq 'abc' ;# P=Q R S
ok 14, substr($a,-3,1) eq 'x' ;  # P Q R S

$[ = 0;

substr($a,3,3) = 'XYZ';
ok 15, $a eq 'abcXYZxyz' ;
substr($a,0,2) = '';
ok 16, $a eq 'cXYZxyz' ;
substr($a,0,0) = 'ab';
ok 17, $a eq 'abcXYZxyz' ;
substr($a,0,0) = '12345678';
ok 18, $a eq '12345678abcXYZxyz' ;
substr($a,-3,3) = 'def';
ok 19, $a eq '12345678abcXYZdef';
substr($a,-3,3) = '<';
ok 20, $a eq '12345678abcXYZ<' ;
substr($a,-1,1) = '12345678';
ok 21, $a eq '12345678abcXYZ12345678' ;

$a = 'abcdefxyz';

ok 22, substr($a,6) eq 'xyz' ;        # P Q R=S
ok 23, substr($a,-3) eq 'xyz' ;       # P Q R=S
$b = substr($a,999,999) ; # warning   # P R=S Q
ok 24, $w-- == 1 ;
eval{substr($a,999,999) = "" ; } ;    # P R=S Q
ok 25, $@@ =~ /$FATAL_MSG/;
ok 26, substr($a,0) eq 'abcdefxyz' ;  # P=Q R=S
ok 27, substr($a,9) eq '' ;           # P Q=R=S
ok 28, substr($a,-11) eq 'abcdefxyz'; # Q P R=S
ok 29, substr($a,-9) eq 'abcdefxyz';  # P=Q R=S

$a = '54321';

$b = substr($a,-7, 1) ; # warn  # Q R P S
ok 30, $w-- == 1 ;
eval{substr($a,-7, 1) = "" ; }; # Q R P S
ok 31, $@@ =~ /$FATAL_MSG/;
$b = substr($a,-7,-6) ; # warn  # Q R P S
ok 32, $w-- == 1 ;
eval{substr($a,-7,-6) = "" ; }; # Q R P S
ok 33, $@@ =~ /$FATAL_MSG/;
ok 34, substr($a,-5,-7) eq '';  # R P=Q S
ok 35, substr($a, 2,-7) eq '';  # R P Q S
ok 36, substr($a,-3,-7) eq '';  # R P Q S
ok 37, substr($a, 2,-5) eq '';  # P=R Q S
ok 38, substr($a,-3,-5) eq '';  # P=R Q S
ok 39, substr($a, 2,-4) eq '';  # P R Q S
ok 40, substr($a,-3,-4) eq '';  # P R Q S
ok 41, substr($a, 5,-6) eq '';  # R P Q=S
ok 42, substr($a, 5,-5) eq '';  # P=R Q S
ok 43, substr($a, 5,-3) eq '';  # P R Q=S
$b = substr($a, 7,-7) ; # warn  # R P S Q
ok 44, $w-- == 1 ;
eval{substr($a, 7,-7) = "" ; }; # R P S Q
ok 45, $@@ =~ /$FATAL_MSG/;
$b = substr($a, 7,-5) ; # warn  # P=R S Q
ok 46, $w-- == 1 ;
eval{substr($a, 7,-5) = "" ; }; # P=R S Q
ok 47, $@@ =~ /$FATAL_MSG/;
$b = substr($a, 7,-3) ; # warn  # P Q S Q
ok 48, $w-- == 1 ;
eval{substr($a, 7,-3) = "" ; }; # P Q S Q
ok 49, $@@ =~ /$FATAL_MSG/;
$b = substr($a, 7, 0) ; # warn  # P S Q=R
ok 50, $w-- == 1 ;
eval{substr($a, 7, 0) = "" ; }; # P S Q=R
ok 51, $@@ =~ /$FATAL_MSG/;

ok 52, substr($a,-7,2) eq '';   # Q P=R S
ok 53, substr($a,-7,4) eq '54'; # Q P R S
ok 54, substr($a,-7,7) eq '54321';# Q P R=S
ok 55, substr($a,-7,9) eq '54321';# Q P S R
ok 56, substr($a,-5,0) eq '';   # P=Q=R S
ok 57, substr($a,-5,3) eq '543';# P=Q R S
ok 58, substr($a,-5,5) eq '54321';# P=Q R=S
ok 59, substr($a,-5,7) eq '54321';# P=Q S R
ok 60, substr($a,-3,0) eq '';   # P Q=R S
ok 61, substr($a,-3,3) eq '321';# P Q R=S
ok 62, substr($a,-2,3) eq '21'; # P Q S R
ok 63, substr($a,0,-5) eq '';   # P=Q=R S
ok 64, substr($a,2,-3) eq '';   # P Q=R S
ok 65, substr($a,0,0) eq '';    # P=Q=R S
ok 66, substr($a,0,5) eq '54321';# P=Q R=S
ok 67, substr($a,0,7) eq '54321';# P=Q S R
ok 68, substr($a,2,0) eq '';    # P Q=R S
ok 69, substr($a,2,3) eq '321'; # P Q R=S
ok 70, substr($a,5,0) eq '';    # P Q=R=S
ok 71, substr($a,5,2) eq '';    # P Q=S R
ok 72, substr($a,-7,-5) eq '';  # Q P=R S
ok 73, substr($a,-7,-2) eq '543';# Q P R S
ok 74, substr($a,-5,-5) eq '';  # P=Q=R S
ok 75, substr($a,-5,-2) eq '543';# P=Q R S
ok 76, substr($a,-3,-3) eq '';  # P Q=R S
ok 77, substr($a,-3,-1) eq '32';# P Q R S

$a = '';

ok 78, substr($a,-2,2) eq '';   # Q P=R=S
ok 79, substr($a,0,0) eq '';    # P=Q=R=S
ok 80, substr($a,0,1) eq '';    # P=Q=S R
ok 81, substr($a,-2,3) eq '';   # Q P=S R
ok 82, substr($a,-2) eq '';     # Q P=R=S
ok 83, substr($a,0) eq '';      # P=Q=R=S


ok 84, substr($a,0,-1) eq '';   # R P=Q=S
$b = substr($a,-2, 0) ; # warn  # Q=R P=S
ok 85, $w-- == 1 ;
eval{substr($a,-2, 0) = "" ; }; # Q=R P=S
ok 86, $@@ =~ /$FATAL_MSG/;

$b = substr($a,-2, 1) ; # warn  # Q R P=S
ok 87, $w-- == 1 ;
eval{substr($a,-2, 1) = "" ; }; # Q R P=S
ok 88, $@@ =~ /$FATAL_MSG/;

$b = substr($a,-2,-1) ; # warn  # Q R P=S
ok 89, $w-- == 1 ;
eval{substr($a,-2,-1) = "" ; }; # Q R P=S
ok 90, $@@ =~ /$FATAL_MSG/;

$b = substr($a,-2,-2) ; # warn  # Q=R P=S
ok 91, $w-- == 1 ;
eval{substr($a,-2,-2) = "" ; }; # Q=R P=S
ok 92, $@@ =~ /$FATAL_MSG/;

$b = substr($a, 1,-2) ; # warn  # R P=S Q
ok 93, $w-- == 1 ;
eval{substr($a, 1,-2) = "" ; }; # R P=S Q
ok 94, $@@ =~ /$FATAL_MSG/;

$b = substr($a, 1, 1) ; # warn  # P=S Q R
ok 95, $w-- == 1 ;
eval{substr($a, 1, 1) = "" ; }; # P=S Q R
ok 96, $@@ =~ /$FATAL_MSG/;

$b = substr($a, 1, 0) ;# warn   # P=S Q=R
ok 97, $w-- == 1 ;
eval{substr($a, 1, 0) = "" ; }; # P=S Q=R
ok 98, $@@ =~ /$FATAL_MSG/;

$b = substr($a,1) ; # warning   # P=R=S Q
ok 99, $w-- == 1 ;
eval{substr($a,1) = "" ; };     # P=R=S Q
ok 100, $@@ =~ /$FATAL_MSG/;

my $a = 'zxcvbnm';
substr($a,2,0) = '';
ok 101, $a eq 'zxcvbnm';
substr($a,7,0) = '';
ok 102, $a eq 'zxcvbnm';
substr($a,5,0) = '';
ok 103, $a eq 'zxcvbnm';
substr($a,0,2) = 'pq';
ok 104, $a eq 'pqcvbnm';
substr($a,2,0) = 'r';
ok 105, $a eq 'pqrcvbnm';
substr($a,8,0) = 'asd';
ok 106, $a eq 'pqrcvbnmasd';
substr($a,0,2) = 'iop';
ok 107, $a eq 'ioprcvbnmasd';
substr($a,0,5) = 'fgh';
ok 108, $a eq 'fghvbnmasd';
substr($a,3,5) = 'jkl';
ok 109, $a eq 'fghjklsd';
substr($a,3,2) = '1234';
ok 110, $a eq 'fgh1234lsd';


# with lexicals (and in re-entered scopes)
for (0,1) {
  my $txt;
  unless ($_) {
    $txt = "Foo";
    substr($txt, -1) = "X";
    ok 111, $txt eq "FoX";
  }
  else {
    substr($txt, 0, 1) = "X";
    ok 112, $txt eq "X";
  }
}

$w = 0 ;
# coercion of references
{
  my $s = [];
  substr($s, 0, 1) = 'Foo';
  ok 113, substr($s,0,7) eq "FooRRAY" && !($w-=2);
}

# check no spurious warnings
ok 114, $w == 0;

# check new 4 arg replacement syntax
$a = "abcxyz";
$w = 0;
ok 115, substr($a, 0, 3, "") eq "abc" && $a eq "xyz";
ok 116, substr($a, 0, 0, "abc") eq "" && $a eq "abcxyz";
ok 117, substr($a, 3, -1, "") eq "xy" && $a eq "abcz";

ok 118, substr($a, 3, undef, "xy") eq "" && $a eq "abcxyz"
                 && $w == 3;

$w = 0;

ok 119, substr($a, 3, 9999999, "") eq "xyz" && $a eq "abc";
eval{substr($a, -99, 0, "") };
ok 120, $@@ =~ /$FATAL_MSG/;
eval{substr($a, 99, 3, "") };
ok 121, $@@ =~ /$FATAL_MSG/;

substr($a, 0, length($a), "foo");
ok 122, $a eq "foo" && !$w;

# using 4 arg substr as lvalue is a compile time error
eval 'substr($a,0,0,"") = "abc"';
ok 123, $@@ && $@@ =~ /Can't modify substr/ && $a eq "foo";

$a = "abcdefgh";
ok 124, sub { shift }->(substr($a, 0, 4, "xxxx")) eq 'abcd';
ok 125, $a eq 'xxxxefgh';

{
    my $y = 10;
    $y = "2" . $y;
    ok 126, $y+0 == 210;
}

# utf8 sanity
{
    my $x = substr("a\x{263a}b",0);
    ok 127, length($x) == 3;
    $x = substr($x,1,1);
    ok 128, $x eq "\x{263a}";
    $x = $x x 2;
    ok 129, length($x) == 2;
    substr($x,0,1) = "abcd";
    ok 130, $x eq "abcd\x{263a}";
    ok 131, length($x) == 5;
    $x = reverse $x;
    ok 132, length($x) == 5;
    ok 133, $x eq "\x{263a}dcba";

    my $z = 10;
    $z = "21\x{263a}" . $z;
    ok 134, length($z) == 5;
    ok 135, $z eq "21\x{263a}10";
}

# replacement should work on magical values
require Tie::Scalar;
my %data;
tie $data{'a'}, 'Tie::StdScalar';  # makes $data{'a'} magical
$data{a} = "firstlast";
ok 136, substr($data{'a'}, 0, 5, "") eq "first" && $data{'a'} eq "last";

# more utf8

# The following two originally from Ignasi Roca.

$x = "\xF1\xF2\xF3";
substr($x, 0, 1) = "\x{100}"; # Ignasi had \x{FF}
ok 137, length($x) == 3 &&
        $x eq "\x{100}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 0, 1) = "\x{100}\x{FF}"; # Ignasi had \x{FF}
ok 138, length($x) == 4 &&
        $x eq "\x{100}\x{FF}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";

# more utf8 lval exercise

$x = "\xF1\xF2\xF3";
substr($x, 0, 2) = "\x{100}\xFF";
ok 139, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 1, 1) = "\x{100}\xFF";
ok 140, length($x) == 4 &&
        $x eq "\xF1\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 2, 1) = "\x{100}\xFF";
ok 141, length($x) == 4 &&
        $x eq "\xF1\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";

$x = "\xF1\xF2\xF3";
substr($x, 3, 1) = "\x{100}\xFF";
ok 142, length($x) == 5 &&
        $x eq "\xF1\xF2\xF3\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}" &&
        substr($x, 3, 1) eq "\x{100}" &&
        substr($x, 4, 1) eq "\x{FF}";

$x = "\xF1\xF2\xF3";
substr($x, -1, 1) = "\x{100}\xFF";
ok 143, length($x) == 4 &&
        $x eq "\xF1\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";

$x = "\xF1\xF2\xF3";
substr($x, -1, 0) = "\x{100}\xFF";
ok 144, length($x) == 5 &&
        $x eq "\xF1\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 0, -1) = "\x{100}\xFF";
ok 145, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 0, -2) = "\x{100}\xFF";
ok 146, length($x) == 4 &&
        $x eq "\x{100}\xFF\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 0, -3) = "\x{100}\xFF";
ok 147, length($x) == 5 &&
        $x eq "\x{100}\xFF\xF1\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F1}" &&
        substr($x, 3, 1) eq "\x{F2}" &&
        substr($x, 4, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 1, -1) = "\x{100}\xFF";
ok 148, length($x) == 4 &&
        $x eq "\xF1\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, -1, -1) = "\x{100}\xFF";
ok 149, length($x) == 5 &&
        $x eq "\xF1\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";

# And tests for already-UTF8 one

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, 1) = "\x{100}";
ok 150, length($x) == 3 &&
        $x eq "\x{100}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, 1) = "\x{100}\x{FF}";
ok 151, length($x) == 4 &&
        $x eq "\x{100}\x{FF}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, 2) = "\x{100}\xFF";
ok 152, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 1, 1) = "\x{100}\xFF";
ok 153, length($x) == 4 &&
        $x eq "\x{101}\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 2, 1) = "\x{100}\xFF";
ok 154, length($x) == 4 &&
        $x eq "\x{101}\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 3, 1) = "\x{100}\xFF";
ok 155, length($x) == 5 &&
        $x eq "\x{101}\x{F2}\x{F3}\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}" &&
        substr($x, 3, 1) eq "\x{100}" &&
        substr($x, 4, 1) eq "\x{FF}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, -1, 1) = "\x{100}\xFF";
ok 156, length($x) == 4 &&
        $x eq "\x{101}\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, -1, 0) = "\x{100}\xFF";
ok 157, length($x) == 5 &&
        $x eq "\x{101}\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, -1) = "\x{100}\xFF";
ok 158, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, -2) = "\x{100}\xFF";
ok 159, length($x) == 4 &&
        $x eq "\x{100}\xFF\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, -3) = "\x{100}\xFF";
ok 160, length($x) == 5 &&
        $x eq "\x{100}\xFF\x{101}\x{F2}\x{F3}" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{101}" &&
        substr($x, 3, 1) eq "\x{F2}" &&
        substr($x, 4, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 1, -1) = "\x{100}\xFF";
ok 161, length($x) == 4 &&
        $x eq "\x{101}\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, -1, -1) = "\x{100}\xFF";
ok 162, length($x) == 5 &&
        $x eq "\x{101}\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";

substr($x = "ab", 0, 0, "\x{100}\x{200}");
ok 163, $x eq "\x{100}\x{200}ab";

substr($x = "\x{100}\x{200}", 0, 0, "ab");
ok 164, $x eq "ab\x{100}\x{200}";

substr($x = "ab", 1, 0, "\x{100}\x{200}");
ok 165, $x eq "a\x{100}\x{200}b";

substr($x = "\x{100}\x{200}", 1, 0, "ab");
ok 166, $x eq "\x{100}ab\x{200}";

substr($x = "ab", 2, 0, "\x{100}\x{200}");
ok 167, $x eq "ab\x{100}\x{200}";

substr($x = "\x{100}\x{200}", 2, 0, "ab");
ok 168, $x eq "\x{100}\x{200}ab";

substr($x = "\xFFb", 0, 0, "\x{100}\x{200}");
ok 169, $x eq "\x{100}\x{200}\xFFb";

substr($x = "\x{100}\x{200}", 0, 0, "\xFFb");
ok 170, $x eq "\xFFb\x{100}\x{200}";

substr($x = "\xFFb", 1, 0, "\x{100}\x{200}");
ok 171, $x eq "\xFF\x{100}\x{200}b";

substr($x = "\x{100}\x{200}", 1, 0, "\xFFb");
ok 172, $x eq "\x{100}\xFFb\x{200}";

substr($x = "\xFFb", 2, 0, "\x{100}\x{200}");
ok 173, $x eq "\xFFb\x{100}\x{200}";

substr($x = "\x{100}\x{200}", 2, 0, "\xFFb");
ok 174, $x eq "\x{100}\x{200}\xFFb";

# [perl #20933]
{ 
    my $s = "ab";
    my @@r; 
    $r[$_] = \ substr $s, $_, 1 for (0, 1);
    ok 175, join("", map { $$_ } @@r) eq "ab";
}

# [perl #23207]
{
    sub ss {
	substr($_[0],0,1) ^= substr($_[0],1,1) ^=
	substr($_[0],0,1) ^= substr($_[0],1,1);
    }
    my $x = my $y = 'AB'; ss $x; ss $y;
    ok 176, $x eq $y;
}

# [perl #24605]
{
    my $x = "0123456789\x{500}";
    my $y = substr $x, 4;
    ok 177, substr($x, 7, 1) eq "7";
}

# [perl #24200] string corruption with lvalue sub

{
    my $foo = "a";
    sub bar: lvalue { substr $foo, 0 }
    bar = "XXX";
    ok 178, bar eq 'XXX';
    $foo = '123456789';
    ok 179, bar eq '123456789';
}

# [perl #29149]
{
    my $text  = "0123456789\xED ";
    utf8::upgrade($text);
    my $pos = 5;
    pos($text) = $pos;
    my $a = substr($text, $pos, $pos);
    ok 180, substr($text,$pos,1) eq $pos;

}

# [perl #23765]
{
    my $a = pack("C", 0xbf);
    substr($a, -1) &= chr(0xfeff);
    ok 181, $a eq "\xbf";
}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d1 3
a3 1
#!./perl -w
d26 1
a26 3
require './test.pl';

plan(325);
d28 1
a28 1
$FATAL_MSG = qr/^substr outside of string/;
d30 3
a32 3
is(substr($a,0,3), 'abc');   # P=Q R S
is(substr($a,3,3), 'def');   # P Q R S
is(substr($a,6,999), 'xyz'); # P Q S R
d34 1
a34 1
is ($w--, 1);
d36 3
a38 3
like ($@@, $FATAL_MSG);
is(substr($a,0,-6), 'abc');  # P=Q R S
is(substr($a,-3,1), 'x');    # P Q R S
d42 3
a44 3
is(substr($a,1,3), 'abc' );  # P=Q R S
is(substr($a,4,3), 'def' );  # P Q R S
is(substr($a,7,999), 'xyz');# P Q S R
d46 1
a46 1
is($w--, 1);
d48 3
a50 3
like ($@@, $FATAL_MSG);
is(substr($a,1,-6), 'abc' );# P=Q R S
is(substr($a,-3,1), 'x' );  # P Q R S
d55 1
a55 1
is($a, 'abcXYZxyz' );
d57 1
a57 1
is($a, 'cXYZxyz' );
d59 1
a59 1
is($a, 'abcXYZxyz' );
d61 1
a61 1
is($a, '12345678abcXYZxyz' );
d63 1
a63 1
is($a, '12345678abcXYZdef');
d65 1
a65 1
is($a, '12345678abcXYZ<' );
d67 1
a67 1
is($a, '12345678abcXYZ12345678' );
d71 2
a72 2
is(substr($a,6), 'xyz' );        # P Q R=S
is(substr($a,-3), 'xyz' );       # P Q R=S
d74 1
a74 1
is($w--, 1);
d76 5
a80 5
like($@@, $FATAL_MSG);
is(substr($a,0), 'abcdefxyz');  # P=Q R=S
is(substr($a,9), '');           # P Q=R=S
is(substr($a,-11), 'abcdefxyz'); # Q P R=S
is(substr($a,-9), 'abcdefxyz');  # P=Q R=S
d85 1
a85 1
is($w--, 1);
d87 1
a87 1
like($@@, $FATAL_MSG);
d89 1
a89 1
is($w--, 1);
d91 11
a101 11
like($@@, $FATAL_MSG);
is(substr($a,-5,-7), '');  # R P=Q S
is(substr($a, 2,-7), '');  # R P Q S
is(substr($a,-3,-7), '');  # R P Q S
is(substr($a, 2,-5), '');  # P=R Q S
is(substr($a,-3,-5), '');  # P=R Q S
is(substr($a, 2,-4), '');  # P R Q S
is(substr($a,-3,-4), '');  # P R Q S
is(substr($a, 5,-6), '');  # R P Q=S
is(substr($a, 5,-5), '');  # P=R Q S
is(substr($a, 5,-3), '');  # P R Q=S
d103 1
a103 1
is($w--, 1);
d105 1
a105 1
like($@@, $FATAL_MSG);
d107 1
a107 1
is($w--, 1);
d109 1
a109 1
like($@@, $FATAL_MSG);
d111 1
a111 1
is($w--, 1);
d113 1
a113 1
like($@@, $FATAL_MSG);
d115 1
a115 1
is($w--, 1);
d117 1
a117 1
like($@@, $FATAL_MSG);
d119 26
a144 26
is(substr($a,-7,2), '');   # Q P=R S
is(substr($a,-7,4), '54'); # Q P R S
is(substr($a,-7,7), '54321');# Q P R=S
is(substr($a,-7,9), '54321');# Q P S R
is(substr($a,-5,0), '');   # P=Q=R S
is(substr($a,-5,3), '543');# P=Q R S
is(substr($a,-5,5), '54321');# P=Q R=S
is(substr($a,-5,7), '54321');# P=Q S R
is(substr($a,-3,0), '');   # P Q=R S
is(substr($a,-3,3), '321');# P Q R=S
is(substr($a,-2,3), '21'); # P Q S R
is(substr($a,0,-5), '');   # P=Q=R S
is(substr($a,2,-3), '');   # P Q=R S
is(substr($a,0,0), '');    # P=Q=R S
is(substr($a,0,5), '54321');# P=Q R=S
is(substr($a,0,7), '54321');# P=Q S R
is(substr($a,2,0), '');    # P Q=R S
is(substr($a,2,3), '321'); # P Q R=S
is(substr($a,5,0), '');    # P Q=R=S
is(substr($a,5,2), '');    # P Q=S R
is(substr($a,-7,-5), '');  # Q P=R S
is(substr($a,-7,-2), '543');# Q P R S
is(substr($a,-5,-5), '');  # P=Q=R S
is(substr($a,-5,-2), '543');# P=Q R S
is(substr($a,-3,-3), '');  # P Q=R S
is(substr($a,-3,-1), '32');# P Q R S
d148 6
a153 6
is(substr($a,-2,2), '');   # Q P=R=S
is(substr($a,0,0), '');    # P=Q=R=S
is(substr($a,0,1), '');    # P=Q=S R
is(substr($a,-2,3), '');   # Q P=S R
is(substr($a,-2), '');     # Q P=R=S
is(substr($a,0), '');      # P=Q=R=S
d156 1
a156 1
is(substr($a,0,-1), '');   # R P=Q=S
d158 1
a158 1
is($w--, 1);
d160 1
a160 1
like($@@, $FATAL_MSG);
d163 1
a163 1
is($w--, 1);
d165 1
a165 1
like($@@, $FATAL_MSG);
d168 1
a168 1
is($w--, 1);
d170 1
a170 1
like($@@, $FATAL_MSG);
d173 1
a173 1
is($w--, 1);
d175 1
a175 1
like($@@, $FATAL_MSG);
d178 1
a178 1
is($w--, 1);
d180 1
a180 1
like($@@, $FATAL_MSG);
d183 1
a183 1
is($w--, 1);
d185 1
a185 1
like($@@, $FATAL_MSG);
d188 1
a188 1
is($w--, 1);
d190 1
a190 1
like($@@, $FATAL_MSG);
d193 1
a193 1
is($w--, 1);
d195 1
a195 1
like($@@, $FATAL_MSG);
d199 1
a199 1
is($a, 'zxcvbnm');
d201 1
a201 1
is($a, 'zxcvbnm');
d203 1
a203 1
is($a, 'zxcvbnm');
d205 1
a205 1
is($a, 'pqcvbnm');
d207 1
a207 1
is($a, 'pqrcvbnm');
d209 1
a209 1
is($a, 'pqrcvbnmasd');
d211 1
a211 1
is($a, 'ioprcvbnmasd');
d213 1
a213 1
is($a, 'fghvbnmasd');
d215 1
a215 1
is($a, 'fghjklsd');
d217 1
a217 1
is($a, 'fgh1234lsd');
d226 1
a226 1
    is($txt, "FoX");
d230 1
a230 1
    is($txt, "X");
d239 1
a239 3
  is (substr($s,0,7), "FooRRAY");
  is ($w,2);
  $w = 0;
d243 1
a243 1
is($w, 0);
d248 6
a253 10
is(substr($a, 0, 3, ""), "abc");
is($a, "xyz");
is(substr($a, 0, 0, "abc"), "");
is($a, "abcxyz");
is(substr($a, 3, -1, ""), "xy");
is($a, "abcz");

is(substr($a, 3, undef, "xy"), "");
is($a, "abcxyz");
is($w, 3);
d257 1
a257 2
is(substr($a, 3, 9999999, ""), "xyz");
is($a, "abc");
d259 1
a259 1
like($@@, $FATAL_MSG);
d261 1
a261 1
like($@@, $FATAL_MSG);
d264 1
a264 2
is ($a, "foo");
is ($w, 0);
d268 1
a268 2
like ($@@, qr/Can't modify substr/);
is ($a, "foo");
d271 2
a272 2
is(sub { shift }->(substr($a, 0, 4, "xxxx")), 'abcd');
is($a, 'xxxxefgh');
d277 1
a277 1
    is ($y, 210);
d283 1
a283 1
    is(length($x), 3);
d285 1
a285 1
    is($x, "\x{263a}");
d287 1
a287 1
    is(length($x), 2);
d289 2
a290 2
    is($x, "abcd\x{263a}");
    is(length($x), 5);
d292 2
a293 2
    is(length($x), 5);
    is($x, "\x{263a}dcba");
d297 2
a298 2
    is(length($z), 5);
    is($z, "21\x{263a}10");
d306 1
a306 2
is(substr($data{'a'}, 0, 5, ""), "first");
is($data{'a'}, "last");
d314 5
a318 5
is(length($x), 3);
is($x, "\x{100}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");
d322 6
a327 6
is(length($x), 4);
is($x, "\x{100}\x{FF}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");
d333 5
a337 5
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");
d341 6
a346 6
is(length($x), 4);
is($x, "\xF1\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");
d350 6
a355 6
is(length($x), 4);
is($x, "\xF1\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
d359 7
a365 7
is(length($x), 5);
is($x, "\xF1\xF2\xF3\x{100}\xFF");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");
is(substr($x, 3, 1), "\x{100}");
is(substr($x, 4, 1), "\x{FF}");
d369 6
a374 6
is(length($x), 4);
is($x, "\xF1\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
d378 7
a384 7
is(length($x), 5);
is($x, "\xF1\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");
d388 5
a392 5
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");
d396 6
a401 6
is(length($x), 4);
is($x, "\x{100}\xFF\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");
d405 7
a411 7
is(length($x), 5);
is($x, "\x{100}\xFF\xF1\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F1}");
is(substr($x, 3, 1), "\x{F2}");
is(substr($x, 4, 1), "\x{F3}");
d415 6
a420 6
is(length($x), 4);
is($x, "\xF1\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");
d424 7
a430 7
is(length($x), 5);
is($x, "\xF1\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");
d436 5
a440 5
is(length($x), 3);
is($x, "\x{100}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");
d444 6
a449 6
is(length($x), 4);
is($x, "\x{100}\x{FF}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");
d453 5
a457 5
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");
d461 6
a466 6
is(length($x), 4);
is($x, "\x{101}\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");
d470 6
a475 6
is(length($x), 4);
is($x, "\x{101}\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
d479 7
a485 7
is(length($x), 5);
is($x, "\x{101}\x{F2}\x{F3}\x{100}\xFF");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");
is(substr($x, 3, 1), "\x{100}");
is(substr($x, 4, 1), "\x{FF}");
d489 6
a494 6
is(length($x), 4);
is($x, "\x{101}\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
d498 7
a504 7
is(length($x), 5);
is($x, "\x{101}\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");
d508 5
a512 5
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");
d516 6
a521 6
is(length($x), 4);
is($x, "\x{100}\xFF\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");
d525 7
a531 7
is(length($x), 5);
is($x, "\x{100}\xFF\x{101}\x{F2}\x{F3}");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{101}");
is(substr($x, 3, 1), "\x{F2}");
is(substr($x, 4, 1), "\x{F3}");
d535 6
a540 6
is(length($x), 4);
is($x, "\x{101}\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");
d544 7
a550 7
is(length($x), 5);
is($x, "\x{101}\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");
d553 1
a553 1
is($x, "\x{100}\x{200}ab");
d556 1
a556 1
is($x, "ab\x{100}\x{200}");
d559 1
a559 1
is($x, "a\x{100}\x{200}b");
d562 1
a562 1
is($x, "\x{100}ab\x{200}");
d565 1
a565 1
is($x, "ab\x{100}\x{200}");
d568 1
a568 1
is($x, "\x{100}\x{200}ab");
d571 1
a571 1
is($x, "\x{100}\x{200}\xFFb");
d574 1
a574 1
is($x, "\xFFb\x{100}\x{200}");
d577 1
a577 1
is($x, "\xFF\x{100}\x{200}b");
d580 1
a580 1
is($x, "\x{100}\xFFb\x{200}");
d583 1
a583 1
is($x, "\xFFb\x{100}\x{200}");
d586 1
a586 1
is($x, "\x{100}\x{200}\xFFb");
d593 1
a593 1
    is(join("", map { $$_ } @@r), "ab");
d603 1
a603 1
    is($x, $y);
d610 1
a610 1
    is(substr($x, 7, 1), "7");
d619 1
a619 1
    is(bar, 'XXX');
d621 1
a621 1
    is(bar, '123456789');
d631 1
a631 1
    is(substr($text,$pos,1), $pos);
d639 1
a639 8
    is($a, "\xbf");
}

# [perl #34976] incorrect caching of utf8 substr length
{
    my  $a = "abcd\x{100}";
    is(substr($a,1,2), 'bc');
    is(substr($a,1,1), 'b');
@

