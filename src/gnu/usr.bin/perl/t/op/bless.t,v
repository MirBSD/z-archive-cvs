head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.24.00;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.00;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.46.40;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

print "1..31\n";

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

sub expected {
    my($object, $package, $type) = @@_;
    return "" if (
	ref($object) eq $package
	&& "$object" =~ /^\Q$package\E=(\w+)\(0x([0-9a-f]+)\)$/
	&& $1 eq $type
	# in 64-bit platforms hex warns for 32+ -bit values
	&& do { no warnings 'portable'; hex($2) == $object }
    );
    print "# $object $package $type\n";
    return "not ";
}

# test blessing simple types

$a1 = bless {}, "A";
print expected($a1, "A", "HASH"), "ok 1\n";
$b1 = bless [], "B";
print expected($b1, "B", "ARRAY"), "ok 2\n";
$c1 = bless \(map "$_", "test"), "C";
print expected($c1, "C", "SCALAR"), "ok 3\n";
our $test = "foo"; $d1 = bless \*test, "D";
print expected($d1, "D", "GLOB"), "ok 4\n";
$e1 = bless sub { 1 }, "E";
print expected($e1, "E", "CODE"), "ok 5\n";
$f1 = bless \[], "F";
print expected($f1, "F", "REF"), "ok 6\n";
$g1 = bless \substr("test", 1, 2), "G";
print expected($g1, "G", "LVALUE"), "ok 7\n";

# blessing ref to object doesn't modify object

print expected(bless(\$a1, "F"), "F", "REF"), "ok 8\n";
print expected($a1, "A", "HASH"), "ok 9\n";

# reblessing does modify object

bless $a1, "A2";
print expected($a1, "A2", "HASH"), "ok 10\n";

# local and my
{
    local $a1 = bless $a1, "A3";	# should rebless outer $a1
    local $b1 = bless [], "B3";
    my $c1 = bless $c1, "C3";		# should rebless outer $c1
    our $test2 = ""; my $d1 = bless \*test2, "D3";
    print expected($a1, "A3", "HASH"), "ok 11\n";
    print expected($b1, "B3", "ARRAY"), "ok 12\n";
    print expected($c1, "C3", "SCALAR"), "ok 13\n";
    print expected($d1, "D3", "GLOB"), "ok 14\n";
}
print expected($a1, "A3", "HASH"), "ok 15\n";
print expected($b1, "B", "ARRAY"), "ok 16\n";
print expected($c1, "C3", "SCALAR"), "ok 17\n";
print expected($d1, "D", "GLOB"), "ok 18\n";

# class is magic
"E" =~ /(.)/;
print expected(bless({}, $1), "E", "HASH"), "ok 19\n";
{
    local $! = 1;
    my $string = "$!";
    $! = 2;	# attempt to avoid cached string
    $! = 1;
    print expected(bless({}, $!), $string, "HASH"), "ok 20\n";

# ref is ref to magic
    {
	{
	    package F;
	    sub test { ${$_[0]} eq $string or print "not " }
	}
	$! = 2;
	$f1 = bless \$!, "F";
	$! = 1;
	$f1->test;
	print "ok 21\n";
    }
}

# ref is magic
### example of magic variable that is a reference??

# no class, or empty string (with a warning), or undef (with two)
print expected(bless([]), 'main', "ARRAY"), "ok 22\n";
{
    local $SIG{__WARN__} = sub { push @@w, join '', @@_ };
    use warnings;

    $m = bless [];
    print expected($m, 'main', "ARRAY"), "ok 23\n";
    print @@w ? "not ok 24\t# @@w\n" : "ok 24\n";

    @@w = ();
    $m = bless [], '';
    print expected($m, 'main', "ARRAY"), "ok 25\n";
    print @@w != 1 ? "not ok 26\t# @@w\n" : "ok 26\n";

    @@w = ();
    $m = bless [], undef;
    print expected($m, 'main', "ARRAY"), "ok 27\n";
    print @@w != 2 ? "not ok 28\t# @@w\n" : "ok 28\n";
}

# class is a ref
$a1 = bless {}, "A4";
$b1 = eval { bless {}, $a1 };
print $@@ ? "ok 29\n" : "not ok 29\t# $b1\n";

# class is an overloaded ref
{
    package H4;
    use overload '""' => sub { "C4" };
}
$h1 = bless {}, "H4";
$c4 = eval { bless \$test, $h1 };
print expected($c4, 'C4', "SCALAR"), "ok 30\n";
print $@@ ? "not ok 31\t# $@@" : "ok 31\n";
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d3 2
a7 1
    require './test.pl';
a9 2
plan (106);

d12 7
d20 1
a20 7
    is(ref($object), $package);
    my $r = qr/^\Q$package\E=(\w+)\(0x([0-9a-f]+)\)$/;
    like("$object", $r);
    "$object" =~ $r;
    is($1, $type);
    # in 64-bit platforms hex warns for 32+ -bit values
    cmp_ok(do {no warnings 'portable'; hex($2)}, '==', $object);
d26 1
a26 1
expected($a1, "A", "HASH");
d28 1
a28 1
expected($b1, "B", "ARRAY");
d30 1
a30 1
expected($c1, "C", "SCALAR");
d32 1
a32 1
expected($d1, "D", "GLOB");
d34 1
a34 1
expected($e1, "E", "CODE");
d36 1
a36 1
expected($f1, "F", "REF");
d38 1
a38 1
expected($g1, "G", "LVALUE");
d42 2
a43 2
expected(bless(\$a1, "F"), "F", "REF");
expected($a1, "A", "HASH");
d48 1
a48 1
expected($a1, "A2", "HASH");
d56 9
a64 9
    expected($a1, "A3", "HASH");
    expected($b1, "B3", "ARRAY");
    expected($c1, "C3", "SCALAR");
    expected($d1, "D3", "GLOB");
}
expected($a1, "A3", "HASH");
expected($b1, "B", "ARRAY");
expected($c1, "C3", "SCALAR");
expected($d1, "D", "GLOB");
d68 1
a68 1
expected(bless({}, $1), "E", "HASH");
d74 1
a74 1
    expected(bless({}, $!), $string, "HASH");
d80 1
a80 1
	    sub test { main::is(${$_[0]}, $string) }
d86 1
d94 1
a94 1
expected(bless([]), 'main', "ARRAY");
d100 2
a101 2
    expected($m, 'main', "ARRAY");
    is (scalar @@w, 0);
d105 2
a106 2
    expected($m, 'main', "ARRAY");
    is (scalar @@w, 1);
d110 2
a111 2
    expected($m, 'main', "ARRAY");
    is (scalar @@w, 2);
d117 1
a117 1
isnt ($@@, '', "class is a ref");
d126 2
a127 2
is ($@@, '', "class is an overloaded ref");
expected($c4, 'C4', "SCALAR");
@

