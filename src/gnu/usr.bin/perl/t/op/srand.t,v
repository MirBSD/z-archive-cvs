head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.1.1
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	cvs-200704292000:1.1.1.1
	cvs-200606302200:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.03.13.02.50.14;	author tg;	state Exp;
branches;
next	1.1;
commitid	10053211CFE49A6E5A2;

1.1
date	2005.02.05.17.24.02;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.02;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@use arc4random
@
text
@#!./perl -w

BEGIN {
    chdir "t" if -d "t";
    @@INC = qw(. ../lib);
}

# Test srand.

use strict;

require "test.pl";
plan(tests => 4);

# Generate a load of random numbers.
# int() avoids possible floating point error.
sub mk_rand { map int rand 10000, 1..100; }


# Check that rand() is deterministic.
srand(1138);
my @@first_run  = mk_rand;

srand(1138);
my @@second_run = mk_rand;

SKIP: {
  skip("due to us not using srand") if $^O eq 'mirbsd';
  ok( eq_array(\@@first_run, \@@second_run),  'srand(), same arg, same rands' ) unless $^O eq 'mirbsd';
}


# Check that different seeds provide different random numbers
srand(31337);
@@first_run  = mk_rand;

srand(1138);
@@second_run = mk_rand;

ok( !eq_array(\@@first_run, \@@second_run),
                                 'srand(), different arg, different rands' );


# Check that srand() isn't affected by $_
{   
    local $_ = 42;
    srand();
    @@first_run  = mk_rand;

    srand(42);
    @@second_run = mk_rand;

    ok( !eq_array(\@@first_run, \@@second_run),
                       'srand(), no arg, not affected by $_');
}

# This test checks whether Perl called srand for you.
@@first_run  = `$^X -le "print int rand 100 for 1..100"`;
sleep(1); # in case our srand() is too time-dependent
@@second_run = `$^X -le "print int rand 100 for 1..100"`;

ok( !eq_array(\@@first_run, \@@second_run), 'srand() called automatically');
@


1.1
log
@Initial revision
@
text
@d27 4
a30 1
ok( eq_array(\@@first_run, \@@second_run),  'srand(), same arg, same rands' );
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
