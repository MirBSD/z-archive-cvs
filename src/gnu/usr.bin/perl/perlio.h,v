head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200606302200:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601311430:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.10.31.20.06.05;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005272B7081B0E5655;

1.1
date	2005.02.05.17.22.29;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.22.29;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.22.36.11;	author tg;	state Exp;
branches;
next	;
commitid	10044A5A6F7276AA324;


desc
@@


1.2
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/* $MirOS$ */

/*    perlio.h
 *
 *    Copyright © 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 *    Copyright (C) 1996, 1997, 1999, 2000, 2001, 2002, 2003,
 *    by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#ifndef _PERLIO_H
#define _PERLIO_H
/*
  Interface for perl to IO functions.
  There is a hierarchy of Configure determined #define controls:
   USE_STDIO   - forces PerlIO_xxx() to be #define-d onto stdio functions.
                 This is used for x2p subdirectory and for conservative
                 builds - "just like perl5.00X used to be".
                 This dominates over the others.

   USE_PERLIO  - The primary Configure variable that enables PerlIO.
                 If USE_PERLIO is _NOT_ set
                   then USE_STDIO above will be set to be conservative.
                 If USE_PERLIO is set
                   then there are two modes determined by USE_SFIO:

   USE_SFIO    - If set causes PerlIO_xxx() to be #define-d onto sfio functions.
                 A backward compatability mode for some specialist applications.

                 If USE_SFIO is not set then PerlIO_xxx() are real functions
                 defined in perlio.c which implement extra functionality
                 required for utf8 support.

   One further note - the table-of-functions scheme controlled
   by PERL_IMPLICIT_SYS turns on USE_PERLIO so that iperlsys.h can
   #define PerlIO_xxx() to go via the function table, without having
   to #undef them from (say) stdio forms.

*/

#if defined(PERL_IMPLICIT_SYS)
#ifndef USE_PERLIO
#ifndef NETWARE
/* # define USE_PERLIO */
#endif
#endif
#endif

#ifndef USE_PERLIO
# define USE_STDIO
#endif

#ifdef USE_STDIO
#  ifndef PERLIO_IS_STDIO
#      define PERLIO_IS_STDIO
#  endif
#endif

/* --------------------  End of Configure controls ---------------------------- */

/*
 * Although we may not want stdio to be used including <stdio.h> here
 * avoids issues where stdio.h has strange side effects
 */
#include <stdio.h>

#ifdef __BEOS__
int fseeko(FILE *stream, off_t offset, int whence);
off_t ftello(FILE *stream);
#endif

#if defined(USE_64_BIT_STDIO) && defined(HAS_FTELLO) && !defined(USE_FTELL64)
#define ftell ftello
#endif

#if defined(USE_64_BIT_STDIO) && defined(HAS_FSEEKO) && !defined(USE_FSEEK64)
#define fseek fseeko
#endif

/* BS2000 includes are sometimes a bit non standard :-( */
#if defined(POSIX_BC) && defined(O_BINARY) && !defined(O_TEXT)
#undef O_BINARY
#endif

#ifdef PERLIO_IS_STDIO
/* #define PerlIO_xxxx() as equivalent stdio function */
#include "perlsdio.h"
#else				/* PERLIO_IS_STDIO */
#ifdef USE_SFIO
/* #define PerlIO_xxxx() as equivalent sfio function */
#include "perlsfio.h"
#endif				/* USE_SFIO */
#endif				/* PERLIO_IS_STDIO */

#ifndef PerlIO
/* ----------- PerlIO implementation ---------- */
/* PerlIO not #define-d to something else - define the implementation */

typedef struct _PerlIO PerlIOl;
typedef struct _PerlIO_funcs PerlIO_funcs;
typedef PerlIOl *PerlIO;
#define PerlIO PerlIO
#define PERLIO_LAYERS 1

/* Making the big PerlIO_funcs vtables const is good (enables placing
 * them in the const section which is good for speed, security, and
 * embeddability) but this cannot be done by default because of
 * backward compatibility. */
#ifdef PERLIO_FUNCS_CONST
#define PERLIO_FUNCS_DECL(funcs) const PerlIO_funcs funcs
#define PERLIO_FUNCS_CAST(funcs) (PerlIO_funcs*)(funcs)
#else
#define PERLIO_FUNCS_DECL(funcs) PerlIO_funcs funcs
#define PERLIO_FUNCS_CAST(funcs) (funcs)
#endif

PERL_EXPORT_C void PerlIO_define_layer(pTHX_ PerlIO_funcs *tab);
PERL_EXPORT_C PerlIO_funcs *PerlIO_find_layer(pTHX_ const char *name,
                                              STRLEN len,
				              int load);
PERL_EXPORT_C PerlIO *PerlIO_push(pTHX_ PerlIO *f, PERLIO_FUNCS_DECL(*tab),
			          const char *mode, SV *arg);
PERL_EXPORT_C void PerlIO_pop(pTHX_ PerlIO *f);
PERL_EXPORT_C AV* PerlIO_get_layers(pTHX_ PerlIO *f);
PERL_EXPORT_C void PerlIO_clone(pTHX_ PerlInterpreter *proto,
                                CLONE_PARAMS *param);

#endif				/* PerlIO */

/* ----------- End of implementation choices  ---------- */

#ifndef PERLIO_IS_STDIO
/* Not using stdio _directly_ as PerlIO */

/* We now need to determine  what happens if source trys to use stdio.
 * There are three cases based on PERLIO_NOT_STDIO which XS code
 * can set how it wants.
 */

#ifdef PERL_CORE
/* Make a choice for perl core code
   - currently this is set to try and catch lingering raw stdio calls.
     This is a known issue with some non UNIX ports which still use
     "native" stdio features.
*/
#ifndef PERLIO_NOT_STDIO
#define PERLIO_NOT_STDIO 1
#endif
#else
#ifndef PERLIO_NOT_STDIO
#define PERLIO_NOT_STDIO 0
#endif
#endif

#ifdef PERLIO_NOT_STDIO
#if PERLIO_NOT_STDIO
/*
 * PERLIO_NOT_STDIO #define'd as 1
 * Case 1: Strong denial of stdio - make all stdio calls (we can think of) errors
 */
#include "nostdio.h"
#else				/* if PERLIO_NOT_STDIO */
/*
 * PERLIO_NOT_STDIO #define'd as 0
 * Case 2: Declares that both PerlIO and stdio can be used
 */
#endif				/* if PERLIO_NOT_STDIO */
#else				/* ifdef PERLIO_NOT_STDIO */
/*
 * PERLIO_NOT_STDIO not defined
 * Case 3: Try and fake stdio calls as PerlIO calls
 */
#include "fakesdio.h"
#endif				/* ifndef PERLIO_NOT_STDIO */
#endif				/* PERLIO_IS_STDIO */

#define specialCopIO(sv) ((sv) == Nullsv)

/* ----------- fill in things that have not got #define'd  ---------- */

#ifndef Fpos_t
#define Fpos_t Off_t
#endif

#ifndef EOF
#define EOF (-1)
#endif

/* This is to catch case with no stdio */
#ifndef BUFSIZ
#define BUFSIZ 1024
#endif

#ifndef SEEK_SET
#define SEEK_SET 0
#endif

#ifndef SEEK_CUR
#define SEEK_CUR 1
#endif

#ifndef SEEK_END
#define SEEK_END 2
#endif

#define PERLIO_DUP_CLONE	1
#define PERLIO_DUP_FD		2

/* --------------------- Now prototypes for functions --------------- */

START_EXTERN_C
#ifndef __attribute__format__
#  ifdef HASATTRIBUTE_FORMAT
#    define __attribute__format__(x,y,z) __attribute__((__format__(x, y, z)))
#  else
#    define __attribute__format__(x,y,z)
#  endif
#endif
#ifndef PerlIO_init
PERL_EXPORT_C void PerlIO_init(pTHX);
#endif
#ifndef PerlIO_stdoutf
PERL_EXPORT_C int PerlIO_stdoutf(const char *, ...)
    __attribute__format__(__printf__, 1, 2);
#endif
#ifndef PerlIO_puts
PERL_EXPORT_C int PerlIO_puts(PerlIO *, const char *);
#endif
#ifndef PerlIO_open
PERL_EXPORT_C PerlIO *PerlIO_open(const char *, const char *);
#endif
#ifndef PerlIO_openn
PERL_EXPORT_C PerlIO *PerlIO_openn(pTHX_ const char *layers, const char *mode,
				   int fd, int imode, int perm, PerlIO *old,
				   int narg, SV **arg);
#endif
#ifndef PerlIO_eof
PERL_EXPORT_C int PerlIO_eof(PerlIO *);
#endif
#ifndef PerlIO_error
PERL_EXPORT_C int PerlIO_error(PerlIO *);
#endif
#ifndef PerlIO_clearerr
PERL_EXPORT_C void PerlIO_clearerr(PerlIO *);
#endif
#ifndef PerlIO_getc
PERL_EXPORT_C int PerlIO_getc(PerlIO *);
#endif
#ifndef PerlIO_putc
PERL_EXPORT_C int PerlIO_putc(PerlIO *, int);
#endif
#ifndef PerlIO_ungetc
PERL_EXPORT_C int PerlIO_ungetc(PerlIO *, int);
#endif
#ifndef PerlIO_fdopen
PERL_EXPORT_C PerlIO *PerlIO_fdopen(int, const char *);
#endif
#ifndef PerlIO_importFILE
PERL_EXPORT_C PerlIO *PerlIO_importFILE(FILE *, const char *);
#endif
#ifndef PerlIO_exportFILE
PERL_EXPORT_C FILE *PerlIO_exportFILE(PerlIO *, const char *);
#endif
#ifndef PerlIO_findFILE
PERL_EXPORT_C FILE *PerlIO_findFILE(PerlIO *);
#endif
#ifndef PerlIO_releaseFILE
PERL_EXPORT_C void PerlIO_releaseFILE(PerlIO *, FILE *);
#endif
#ifndef PerlIO_read
PERL_EXPORT_C SSize_t PerlIO_read(PerlIO *, void *, Size_t);
#endif
#ifndef PerlIO_unread
PERL_EXPORT_C SSize_t PerlIO_unread(PerlIO *, const void *, Size_t);
#endif
#ifndef PerlIO_write
PERL_EXPORT_C SSize_t PerlIO_write(PerlIO *, const void *, Size_t);
#endif
#ifndef PerlIO_setlinebuf
PERL_EXPORT_C void PerlIO_setlinebuf(PerlIO *);
#endif
#ifndef PerlIO_printf
PERL_EXPORT_C int PerlIO_printf(PerlIO *, const char *, ...)
    __attribute__format__(__printf__, 2, 3);
#endif
#ifndef PerlIO_sprintf
PERL_EXPORT_C int PerlIO_sprintf(char *, int, const char *, ...)
    __attribute__format__(__printf__, 3, 4);
#endif
#ifndef PerlIO_vprintf
PERL_EXPORT_C int PerlIO_vprintf(PerlIO *, const char *, va_list);
#endif
#ifndef PerlIO_tell
PERL_EXPORT_C Off_t PerlIO_tell(PerlIO *);
#endif
#ifndef PerlIO_seek
PERL_EXPORT_C int PerlIO_seek(PerlIO *, Off_t, int);
#endif
#ifndef PerlIO_rewind
PERL_EXPORT_C void PerlIO_rewind(PerlIO *);
#endif
#ifndef PerlIO_has_base
PERL_EXPORT_C int PerlIO_has_base(PerlIO *);
#endif
#ifndef PerlIO_has_cntptr
PERL_EXPORT_C int PerlIO_has_cntptr(PerlIO *);
#endif
#ifndef PerlIO_fast_gets
PERL_EXPORT_C int PerlIO_fast_gets(PerlIO *);
#endif
#ifndef PerlIO_canset_cnt
PERL_EXPORT_C int PerlIO_canset_cnt(PerlIO *);
#endif
#ifndef PerlIO_get_ptr
PERL_EXPORT_C STDCHAR *PerlIO_get_ptr(PerlIO *);
#endif
#ifndef PerlIO_get_cnt
PERL_EXPORT_C int PerlIO_get_cnt(PerlIO *);
#endif
#ifndef PerlIO_set_cnt
PERL_EXPORT_C void PerlIO_set_cnt(PerlIO *, int);
#endif
#ifndef PerlIO_set_ptrcnt
PERL_EXPORT_C void PerlIO_set_ptrcnt(PerlIO *, STDCHAR *, int);
#endif
#ifndef PerlIO_get_base
PERL_EXPORT_C STDCHAR *PerlIO_get_base(PerlIO *);
#endif
#ifndef PerlIO_get_bufsiz
PERL_EXPORT_C int PerlIO_get_bufsiz(PerlIO *);
#endif
#ifndef PerlIO_tmpfile
PERL_EXPORT_C PerlIO *PerlIO_tmpfile(void);
#endif
#ifndef PerlIO_stdin
PERL_EXPORT_C PerlIO *PerlIO_stdin(void);
#endif
#ifndef PerlIO_stdout
PERL_EXPORT_C PerlIO *PerlIO_stdout(void);
#endif
#ifndef PerlIO_stderr
PERL_EXPORT_C PerlIO *PerlIO_stderr(void);
#endif
#ifndef PerlIO_getpos
PERL_EXPORT_C int PerlIO_getpos(PerlIO *, SV *);
#endif
#ifndef PerlIO_setpos
PERL_EXPORT_C int PerlIO_setpos(PerlIO *, SV *);
#endif
#ifndef PerlIO_fdupopen
PERL_EXPORT_C PerlIO *PerlIO_fdupopen(pTHX_ PerlIO *, CLONE_PARAMS *, int);
#endif
#if !defined(PerlIO_modestr) && !defined(PERLIO_IS_STDIO)
PERL_EXPORT_C char *PerlIO_modestr(PerlIO *, char *buf);
#endif
#ifndef PerlIO_isutf8
PERL_EXPORT_C int PerlIO_isutf8(PerlIO *);
#endif
#ifndef PerlIO_apply_layers
PERL_EXPORT_C int PerlIO_apply_layers(pTHX_ PerlIO *f, const char *mode,
				      const char *names);
#endif
#ifndef PerlIO_binmode
PERL_EXPORT_C int PerlIO_binmode(pTHX_ PerlIO *f, int iotype, int omode,
			  	 const char *names);
#endif
#ifndef PerlIO_getname
PERL_EXPORT_C char *PerlIO_getname(PerlIO *, char *);
#endif

PERL_EXPORT_C void PerlIO_destruct(pTHX);

PERL_EXPORT_C int PerlIO_intmode2str(int rawmode, char *mode, int *writing);

#ifdef PERLIO_LAYERS
PERL_EXPORT_C void PerlIO_cleanup(pTHX);

PERL_EXPORT_C void PerlIO_debug(const char *fmt, ...)
    __attribute__format__(__printf__, 1, 2);
typedef struct PerlIO_list_s PerlIO_list_t;


#endif

END_EXTERN_C
#endif				/* _PERLIO_H */
@


1.1
log
@Initial revision
@
text
@d1 2
d5 2
d109 22
a130 8
extern void PerlIO_define_layer(pTHX_ PerlIO_funcs *tab);
extern PerlIO_funcs *PerlIO_find_layer(pTHX_ const char *name, STRLEN len,
				       int load);
extern PerlIO *PerlIO_push(pTHX_ PerlIO *f, PerlIO_funcs *tab,
			   const char *mode, SV *arg);
extern void PerlIO_pop(pTHX_ PerlIO *f);
extern AV* PerlIO_get_layers(pTHX_ PerlIO *f);
extern void PerlIO_clone(pTHX_ PerlInterpreter *proto, CLONE_PARAMS *param);
d217 5
a221 13
#ifdef CHECK_FORMAT
#define __attribute__format__(x,y,z) __attribute__((__format__(x,y,z)))
#else
#define __attribute__format__(x,y,z)
#endif
#endif
#ifndef NEXT30_NO_ATTRIBUTE
#ifndef HASATTRIBUTE		/* disable GNU-cc attribute checking? */
#ifdef  __attribute__		/* Avoid possible redefinition errors */
#undef  __attribute__
#endif
#define __attribute__(attr)
#endif
d224 1
a224 1
extern void PerlIO_init(pTHX);
d227 1
a227 1
extern int PerlIO_stdoutf(const char *, ...)
d231 1
a231 1
extern int PerlIO_puts(PerlIO *, const char *);
d234 1
a234 1
extern PerlIO *PerlIO_open(const char *, const char *);
d237 3
a239 3
extern PerlIO *PerlIO_openn(pTHX_ const char *layers, const char *mode,
			    int fd, int imode, int perm, PerlIO *old,
			    int narg, SV **arg);
d242 1
a242 1
extern int PerlIO_eof(PerlIO *);
d245 1
a245 1
extern int PerlIO_error(PerlIO *);
d248 1
a248 1
extern void PerlIO_clearerr(PerlIO *);
d251 1
a251 1
extern int PerlIO_getc(PerlIO *);
d254 1
a254 1
extern int PerlIO_putc(PerlIO *, int);
d257 1
a257 1
extern int PerlIO_ungetc(PerlIO *, int);
d260 1
a260 1
extern PerlIO *PerlIO_fdopen(int, const char *);
d263 1
a263 1
extern PerlIO *PerlIO_importFILE(FILE *, const char *);
d266 1
a266 1
extern FILE *PerlIO_exportFILE(PerlIO *, const char *);
d269 1
a269 1
extern FILE *PerlIO_findFILE(PerlIO *);
d272 1
a272 1
extern void PerlIO_releaseFILE(PerlIO *, FILE *);
d275 1
a275 1
extern SSize_t PerlIO_read(PerlIO *, void *, Size_t);
d278 1
a278 1
extern SSize_t PerlIO_unread(PerlIO *, const void *, Size_t);
d281 1
a281 1
extern SSize_t PerlIO_write(PerlIO *, const void *, Size_t);
d284 1
a284 1
extern void PerlIO_setlinebuf(PerlIO *);
d287 1
a287 1
extern int PerlIO_printf(PerlIO *, const char *, ...)
d291 1
a291 1
extern int PerlIO_sprintf(char *, int, const char *, ...)
d295 1
a295 1
extern int PerlIO_vprintf(PerlIO *, const char *, va_list);
d298 1
a298 1
extern Off_t PerlIO_tell(PerlIO *);
d301 1
a301 1
extern int PerlIO_seek(PerlIO *, Off_t, int);
d304 1
a304 1
extern void PerlIO_rewind(PerlIO *);
d307 1
a307 1
extern int PerlIO_has_base(PerlIO *);
d310 1
a310 1
extern int PerlIO_has_cntptr(PerlIO *);
d313 1
a313 1
extern int PerlIO_fast_gets(PerlIO *);
d316 1
a316 1
extern int PerlIO_canset_cnt(PerlIO *);
d319 1
a319 1
extern STDCHAR *PerlIO_get_ptr(PerlIO *);
d322 1
a322 1
extern int PerlIO_get_cnt(PerlIO *);
d325 1
a325 1
extern void PerlIO_set_cnt(PerlIO *, int);
d328 1
a328 1
extern void PerlIO_set_ptrcnt(PerlIO *, STDCHAR *, int);
d331 1
a331 1
extern STDCHAR *PerlIO_get_base(PerlIO *);
d334 1
a334 1
extern int PerlIO_get_bufsiz(PerlIO *);
d337 1
a337 1
extern PerlIO *PerlIO_tmpfile(void);
d340 1
a340 1
extern PerlIO *PerlIO_stdin(void);
d343 1
a343 1
extern PerlIO *PerlIO_stdout(void);
d346 1
a346 1
extern PerlIO *PerlIO_stderr(void);
d349 1
a349 1
extern int PerlIO_getpos(PerlIO *, SV *);
d352 1
a352 1
extern int PerlIO_setpos(PerlIO *, SV *);
d355 1
a355 1
extern PerlIO *PerlIO_fdupopen(pTHX_ PerlIO *, CLONE_PARAMS *, int);
d358 1
a358 1
extern char *PerlIO_modestr(PerlIO *, char *buf);
d361 1
a361 1
extern int PerlIO_isutf8(PerlIO *);
d364 2
a365 2
extern int PerlIO_apply_layers(pTHX_ PerlIO *f, const char *mode,
			       const char *names);
d368 2
a369 2
extern int PerlIO_binmode(pTHX_ PerlIO *f, int iotype, int omode,
			  const char *names);
d372 1
a372 1
extern char *PerlIO_getname(PerlIO *, char *);
d375 1
a375 1
extern void PerlIO_destruct(pTHX);
d377 1
a377 1
extern int PerlIO_intmode2str(int rawmode, char *mode, int *writing);
d380 1
a380 1
extern void PerlIO_cleanup(pTHX);
d382 2
a383 1
extern void PerlIO_debug(const char *fmt, ...);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Perl 5.8.8 from OpenLSD
@
text
@d105 8
a112 22
/* Making the big PerlIO_funcs vtables const is good (enables placing
 * them in the const section which is good for speed, security, and
 * embeddability) but this cannot be done by default because of
 * backward compatibility. */
#ifdef PERLIO_FUNCS_CONST
#define PERLIO_FUNCS_DECL(funcs) const PerlIO_funcs funcs
#define PERLIO_FUNCS_CAST(funcs) (PerlIO_funcs*)(funcs)
#else
#define PERLIO_FUNCS_DECL(funcs) PerlIO_funcs funcs
#define PERLIO_FUNCS_CAST(funcs) (funcs)
#endif

PERL_EXPORT_C void PerlIO_define_layer(pTHX_ PerlIO_funcs *tab);
PERL_EXPORT_C PerlIO_funcs *PerlIO_find_layer(pTHX_ const char *name,
                                              STRLEN len,
				              int load);
PERL_EXPORT_C PerlIO *PerlIO_push(pTHX_ PerlIO *f, PERLIO_FUNCS_DECL(*tab),
			          const char *mode, SV *arg);
PERL_EXPORT_C void PerlIO_pop(pTHX_ PerlIO *f);
PERL_EXPORT_C AV* PerlIO_get_layers(pTHX_ PerlIO *f);
PERL_EXPORT_C void PerlIO_clone(pTHX_ PerlInterpreter *proto,
                                CLONE_PARAMS *param);
d199 13
a211 5
#  ifdef HASATTRIBUTE_FORMAT
#    define __attribute__format__(x,y,z) __attribute__((format(x,y,z)))
#  else
#    define __attribute__format__(x,y,z)
#  endif
d214 1
a214 1
PERL_EXPORT_C void PerlIO_init(pTHX);
d217 1
a217 1
PERL_EXPORT_C int PerlIO_stdoutf(const char *, ...)
d221 1
a221 1
PERL_EXPORT_C int PerlIO_puts(PerlIO *, const char *);
d224 1
a224 1
PERL_EXPORT_C PerlIO *PerlIO_open(const char *, const char *);
d227 3
a229 3
PERL_EXPORT_C PerlIO *PerlIO_openn(pTHX_ const char *layers, const char *mode,
				   int fd, int imode, int perm, PerlIO *old,
				   int narg, SV **arg);
d232 1
a232 1
PERL_EXPORT_C int PerlIO_eof(PerlIO *);
d235 1
a235 1
PERL_EXPORT_C int PerlIO_error(PerlIO *);
d238 1
a238 1
PERL_EXPORT_C void PerlIO_clearerr(PerlIO *);
d241 1
a241 1
PERL_EXPORT_C int PerlIO_getc(PerlIO *);
d244 1
a244 1
PERL_EXPORT_C int PerlIO_putc(PerlIO *, int);
d247 1
a247 1
PERL_EXPORT_C int PerlIO_ungetc(PerlIO *, int);
d250 1
a250 1
PERL_EXPORT_C PerlIO *PerlIO_fdopen(int, const char *);
d253 1
a253 1
PERL_EXPORT_C PerlIO *PerlIO_importFILE(FILE *, const char *);
d256 1
a256 1
PERL_EXPORT_C FILE *PerlIO_exportFILE(PerlIO *, const char *);
d259 1
a259 1
PERL_EXPORT_C FILE *PerlIO_findFILE(PerlIO *);
d262 1
a262 1
PERL_EXPORT_C void PerlIO_releaseFILE(PerlIO *, FILE *);
d265 1
a265 1
PERL_EXPORT_C SSize_t PerlIO_read(PerlIO *, void *, Size_t);
d268 1
a268 1
PERL_EXPORT_C SSize_t PerlIO_unread(PerlIO *, const void *, Size_t);
d271 1
a271 1
PERL_EXPORT_C SSize_t PerlIO_write(PerlIO *, const void *, Size_t);
d274 1
a274 1
PERL_EXPORT_C void PerlIO_setlinebuf(PerlIO *);
d277 1
a277 1
PERL_EXPORT_C int PerlIO_printf(PerlIO *, const char *, ...)
d281 1
a281 1
PERL_EXPORT_C int PerlIO_sprintf(char *, int, const char *, ...)
d285 1
a285 1
PERL_EXPORT_C int PerlIO_vprintf(PerlIO *, const char *, va_list);
d288 1
a288 1
PERL_EXPORT_C Off_t PerlIO_tell(PerlIO *);
d291 1
a291 1
PERL_EXPORT_C int PerlIO_seek(PerlIO *, Off_t, int);
d294 1
a294 1
PERL_EXPORT_C void PerlIO_rewind(PerlIO *);
d297 1
a297 1
PERL_EXPORT_C int PerlIO_has_base(PerlIO *);
d300 1
a300 1
PERL_EXPORT_C int PerlIO_has_cntptr(PerlIO *);
d303 1
a303 1
PERL_EXPORT_C int PerlIO_fast_gets(PerlIO *);
d306 1
a306 1
PERL_EXPORT_C int PerlIO_canset_cnt(PerlIO *);
d309 1
a309 1
PERL_EXPORT_C STDCHAR *PerlIO_get_ptr(PerlIO *);
d312 1
a312 1
PERL_EXPORT_C int PerlIO_get_cnt(PerlIO *);
d315 1
a315 1
PERL_EXPORT_C void PerlIO_set_cnt(PerlIO *, int);
d318 1
a318 1
PERL_EXPORT_C void PerlIO_set_ptrcnt(PerlIO *, STDCHAR *, int);
d321 1
a321 1
PERL_EXPORT_C STDCHAR *PerlIO_get_base(PerlIO *);
d324 1
a324 1
PERL_EXPORT_C int PerlIO_get_bufsiz(PerlIO *);
d327 1
a327 1
PERL_EXPORT_C PerlIO *PerlIO_tmpfile(void);
d330 1
a330 1
PERL_EXPORT_C PerlIO *PerlIO_stdin(void);
d333 1
a333 1
PERL_EXPORT_C PerlIO *PerlIO_stdout(void);
d336 1
a336 1
PERL_EXPORT_C PerlIO *PerlIO_stderr(void);
d339 1
a339 1
PERL_EXPORT_C int PerlIO_getpos(PerlIO *, SV *);
d342 1
a342 1
PERL_EXPORT_C int PerlIO_setpos(PerlIO *, SV *);
d345 1
a345 1
PERL_EXPORT_C PerlIO *PerlIO_fdupopen(pTHX_ PerlIO *, CLONE_PARAMS *, int);
d348 1
a348 1
PERL_EXPORT_C char *PerlIO_modestr(PerlIO *, char *buf);
d351 1
a351 1
PERL_EXPORT_C int PerlIO_isutf8(PerlIO *);
d354 2
a355 2
PERL_EXPORT_C int PerlIO_apply_layers(pTHX_ PerlIO *f, const char *mode,
				      const char *names);
d358 2
a359 2
PERL_EXPORT_C int PerlIO_binmode(pTHX_ PerlIO *f, int iotype, int omode,
			  	 const char *names);
d362 1
a362 1
PERL_EXPORT_C char *PerlIO_getname(PerlIO *, char *);
d365 1
a365 1
PERL_EXPORT_C void PerlIO_destruct(pTHX);
d367 1
a367 1
PERL_EXPORT_C int PerlIO_intmode2str(int rawmode, char *mode, int *writing);
d370 1
a370 1
PERL_EXPORT_C void PerlIO_cleanup(pTHX);
d372 1
a372 2
PERL_EXPORT_C void PerlIO_debug(const char *fmt, ...)
    __attribute__format__(__printf__, 1, 2);
@

