head	1.4;
access;
symbols
	MIRBSD_10:1.3.0.2
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.1.7.1
	MIRBSD_8:1.1.7.1.0.2
	MIRBSD_8_BASE:1.1.7.1
	mirbsd:1.1.7;
locks; strict;
comment	@ * @;


1.4
date	2008.08.07.19.43.34;	author tg;	state dead;
branches;
next	1.3;
commitid	100489B50512C3BDDCB;

1.3
date	2007.08.09.10.39.33;	author tg;	state Exp;
branches;
next	1.2;
commitid	10046BAEEE6513FF26F;

1.2
date	2006.10.15.14.11.39;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004532419F6EA53283;

1.1
date	2005.03.06.16.46.50;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.06.16.46.50;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@die schily die
@
text
@/* @@(#)match.c	1.16 03/06/21 joerg */
#include <sys/cdefs.h>
__SCCSID("@@(#)match.c	1.16 03/06/21 joerg");
__RCSID("$MirOS: src/gnu/usr.bin/mkisofs/match.c,v 1.3 2007/08/09 10:39:33 tg Exp $");
/*
 * 27-Mar-96: Jan-Piet Mens <jpm@@mens.de>
 * added 'match' option (-m) to specify regular expressions NOT to be included
 * in the CD image.
 *
 * Re-written 13-Apr-2000 James Pearson
 * now uses a generic set of routines
 */

#include <mconfig.h>
#include <stdio.h>
#include <stdxlib.h>
#include <unixstd.h>
#include <strdefs.h>
#include <standard.h>
#include <schily.h>
#include <libport.h>
#include "match.h"

#ifdef SORTING
static	int	add_sort_match	__PR((char *fn, int val));
#endif

struct match {
	struct match *next;
	char	 *name;
};

typedef struct match match;

static match *mats[MAX_MAT];

static char *mesg[MAX_MAT] = {
	"excluded",
	"excluded ISO-9660",
	"excluded Joliet",
	"hidden attribute ISO-9660",
#ifdef APPLE_HYB
	"excluded HFS",
#endif /* APPLE_HYB */
};

#ifdef SORTING
struct sort_match {
	struct sort_match	*next;
	char			*name;
	int			val;
};

typedef struct sort_match sort_match;

static sort_match	*s_mats;

static int
add_sort_match(fn, val)
	char	*fn;
	int	val;
{
	sort_match *s_mat;

	s_mat = (sort_match *)malloc(sizeof(sort_match));
	if (s_mat == NULL) {
#ifdef	USE_LIBSCHILY
		errmsg("Can't allocate memory for sort filename\n");
#else
		fprintf(stderr,"Can't allocate memory for sort filename\n");
#endif
		return (0);
	}

	if ((s_mat->name = strdup(fn)) == NULL) {
#ifdef	USE_LIBSCHILY
		errmsg("Can't allocate memory for sort filename\n");
#else
		fprintf(stderr,"Can't allocate memory for sort filename\n");
#endif
		return (0);
	}

	/* need to reserve the minimum value for other uses */
	if (val == NOT_SORTED)
		val++;

	s_mat->val = val;
	s_mat->next = s_mats;
	s_mats = s_mat;

	return (1);
}

void
add_sort_list(file)
	char	*file;
{
	FILE	*fp;
	char	name[4096];
	char	*p;
	int	val;

	if ((fp = fopen(file, "r")) == NULL) {
#ifdef	USE_LIBSCHILY
		comerr("Can't open sort file list %s\n", file);
#else
		fprintf(stderr,"Can't open hidden/exclude file list %s\n", file);
		exit (1);
#endif
	}

	while (fgets(name, sizeof(name), fp) != NULL) {
		/*
		 * look for the last space or tab character
		 */
		if ((p = strrchr(name, ' ')) == NULL)
			p = strrchr(name, '\t');
		else if (strrchr(p, '\t') != NULL)	/* Tab after space? */
			p = strrchr(p, '\t');
		
		if (p == NULL) {
#ifdef	USE_LIBSCHILY
			comerrno(EX_BAD, "Incorrect sort file format\n\t%s", name);
#else
			fprintf(stderr, "Incorrect sort file format\n\t%s", name);
#endif
			continue;
		} else {
			*p = '\0';
			val = atoi(++p);
		}
		if (!add_sort_match(name, val)) {
			fclose(fp);
			return;
		}
	}

	fclose(fp);
}

int
sort_matches(fn, val)
	char	*fn;
	int	val;
{
	register sort_match	*s_mat;

	for (s_mat=s_mats; s_mat; s_mat=s_mat->next) {
		if (fnmatch(s_mat->name, fn, FNM_FILE_NAME) != FNM_NOMATCH) {
		        return (s_mat->val); /* found sort value */
		}
	}
	return (val); /* not found - default sort value */
}

void
del_sort()
{
	register sort_match * s_mat, *s_mat1;

	s_mat = s_mats;
	while(s_mat) {
		s_mat1 = s_mat->next;

		free(s_mat->name);
		free(s_mat);

		s_mat = s_mat1;
	}

	s_mats = 0;
}

#endif /* SORTING */


int
gen_add_match(fn, n)
	char	*fn;
	int	n;
{
	match	*mat;

	if (n >= MAX_MAT)
		return (0);

	mat = (match *)malloc(sizeof(match));
	if (mat == NULL) {
#ifdef	USE_LIBSCHILY
		errmsg("Can't allocate memory for %s filename\n", mesg[n]);
#else
		fprintf(stderr,"Can't allocate memory for %s filename\n", mesg[n]);
#endif
		return (0);
	}

	if ((mat->name = strdup(fn)) == NULL) {
#ifdef	USE_LIBSCHILY
		errmsg("Can't allocate memory for %s filename\n", mesg[n]);
#else
		fprintf(stderr,"Can't allocate memory for %s filename\n", mesg[n]);
#endif
		return (0);
	}

	mat->next = mats[n];
	mats[n] = mat;

	return (1);
}

void
gen_add_list(file, n)
	char	*file;
	int	n;
{
	FILE	*fp;
	char	name[4096];
	int	len;

	if ((fp = fopen(file, "r")) == NULL) {
#ifdef	USE_LIBSCHILY
		comerr("Can't open %s file list %s\n", mesg[n], file);
#else
		fprintf(stderr,"Can't open %s file list %s\n", mesg[n], file);
		exit (1);
#endif
	}

	while (fgets(name, sizeof(name), fp) != NULL) {
		/*
		 * strip of '\n'
		 */
		len = strlen(name);
		if (name[len - 1] == '\n') {
			name[len - 1] = '\0';
		}
		if (!gen_add_match(name, n)) {
			fclose(fp);
			return;
		}
	}

	fclose(fp);
}

int gen_matches(fn, n)
	char	*fn;
	int	n;
{
	register match * mat;

	if (n >= MAX_MAT)
		return (0);

	for (mat=mats[n]; mat; mat=mat->next) {
		if (fnmatch(mat->name, fn, FNM_FILE_NAME) != FNM_NOMATCH) {
			return (1);	/* found -> excluded filename */
		}
	}
	return (0);			/* not found -> not excluded */
}

int gen_ishidden(n)
	int	n;
{
	if (n >= MAX_MAT)
		return (0);

	return ((int)(mats[n] != 0));
}

void
gen_del_match(n)
	int	n;
{
	register match	*mat;
	register match 	*mat1;

	if (n >= MAX_MAT)
		return;

	mat = mats[n];

	while (mat) {
		mat1 = mat->next;

		free(mat->name);
		free(mat);

		mat = mat1;
	}

	mats[n] = 0;
}
@


1.3
log
@cleanup for SCCS IDs, add MirOS RCS ID to every file, handle $Id$, UTF-8,
extermination missing to Schily still valid, want makefs, nuke unused etc.
@
text
@d4 1
a4 1
__RCSID("$MirOS$");
@


1.2
log
@-Werror broke the build
@
text
@d2 3
a4 4
#ifndef lint
static	char sccsid[] =
	"@@(#)match.c	1.16 03/06/21 joerg";
#endif
@


1.1
log
@Initial revision
@
text
@d25 1
d27 1
@


1.1.7.1
log
@Add another couple of software they didn't have
@
text
@@
