head	1.4;
access;
symbols
	sendmail-8_14_9:1.1.127.3
	sendmail-8_14_7:1.1.127.2
	sendmail-8_14_6:1.1.127.2
	sendmail-8_14_5-ERRATA-1:1.1.127.1
	mbsd-20101220_mergebase:1.1.1.2.4.1
	sendmail-8_14_5:1.1.127.1
	cvs-201107021500:1.1.1.3
	cvs-20101220:1.1.1.3
	mbsd-20101220:1.1.1.2.0.4
	cvs-201012191730:1.1.1.2
	sendmail-8_14_5_Beta0:1.1.127.1
	sendmail-8_14_3:1.1.127.1
	sendmail:1.1.127
	cvs-200812170000:1.1.1.2
	cvs-200805071200:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	cvs-200803022030:1.1.1.2
	cvs-200707152000:1.1.1.2
	cvs-200704292000:1.1.1.2
	cvs-200702051700:1.1.1.2
	cvs-200609121900:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	cvs-200606151800:1.1.1.1
	cvs-200603231300:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200504262050:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.06.09.15.17.56;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005395CFC65E5646F1;

1.3
date	2012.12.31.21.02.52;	author tg;	state Exp;
branches;
next	1.2;
commitid	10050E1FD6765F66D0C;

1.2
date	2011.07.02.15.04.10;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004E0F31C5496AB95F;

1.1
date	2005.02.05.17.24.29;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.127.1;
next	;

1.1.1.1
date	2005.02.05.17.24.29;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.02.05.17.06.43;	author tg;	state Exp;
branches
	1.1.1.2.4.1;
next	1.1.1.3;
commitid	10045C763C551AABAF7;

1.1.1.3
date	2011.07.02.15.01.02;	author tg;	state Exp;
branches;
next	;
commitid	1004E0F31C5496AB95F;

1.1.1.2.4.1
date	2011.07.02.15.02.58;	author tg;	state Exp;
branches;
next	;
commitid	1004E0F31C5496AB95F;

1.1.127.1
date	2010.12.19.14.45.47;	author tg;	state Exp;
branches;
next	1.1.127.2;
commitid	1004D0E1A94384778FD;

1.1.127.2
date	2012.12.31.20.38.36;	author tg;	state Exp;
branches;
next	1.1.127.3;
commitid	10050E1F79A4182E8EC;

1.1.127.3
date	2014.06.09.14.29.18;	author tg;	state Exp;
branches;
next	;
commitid	1005395C4CC1A6DB9EE;


desc
@@


1.4
log
@merge
@
text
@/*
 * Copyright (c) 2001-2002 Proofpoint, Inc. and its suppliers.
 *	All rights reserved.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 *
 */

#include <sm/gen.h>
SM_RCSID("@@(#)$Id: sasl.c,v 8.24 2013-11-22 20:51:56 ca Exp $")

#if SASL
# include <stdlib.h>
# include <sendmail.h>
# include <errno.h>

/*
**  In order to ensure that storage leaks are tracked, and to prevent
**  conflicts between the sm_heap package and sasl, we tell sasl to
**  use the following heap allocation functions.  Unfortunately,
**  older sasl packages incorrectly specifies the size of a block
**  using unsigned long: for portability, it should be size_t.
*/

# if defined(SASL_VERSION_FULL) && SASL_VERSION_FULL >= 0x02011a
#  define SM_SASL_SIZE_T	size_t
# else /* defined(SASL_VERSION_FULL) && SASL_VERSION_FULL >= 0x02011a */
#  define SM_SASL_SIZE_T	unsigned long
# endif /* defined(SASL_VERSION_FULL) && SASL_VERSION_FULL >= 0x02011a */

void *sm_sasl_malloc __P((SM_SASL_SIZE_T));
static void *sm_sasl_calloc __P((SM_SASL_SIZE_T, SM_SASL_SIZE_T));
static void *sm_sasl_realloc __P((void *, SM_SASL_SIZE_T));
void sm_sasl_free __P((void *));

/*
**  SASLv1:
**  We can't use an rpool for Cyrus-SASL memory management routines,
**	since the encryption/decryption routines in Cyrus-SASL
**	allocate/deallocate a buffer each time. Since rpool
**	don't release memory until the very end, memory consumption is
**	proportional to the size of an e-mail, which is unacceptable.
*/

/*
**  SM_SASL_MALLOC -- malloc() for SASL
**
**	Parameters:
**		size -- size of requested memory.
**
**	Returns:
**		pointer to memory.
*/

void *
sm_sasl_malloc(size)
	SM_SASL_SIZE_T size;
{
	return sm_malloc((size_t) size);
}

/*
**  SM_SASL_CALLOC -- calloc() for SASL
**
**	Parameters:
**		nelem -- number of elements.
**		elemsize -- size of each element.
**
**	Returns:
**		pointer to memory.
**
**	Notice:
**		this isn't currently used by SASL.
*/

static void *
sm_sasl_calloc(nelem, elemsize)
	SM_SASL_SIZE_T nelem;
	SM_SASL_SIZE_T elemsize;
{
	size_t size;
	void *p;

	size = (size_t) nelem * (size_t) elemsize;
	p = sm_malloc(size);
	if (p == NULL)
		return NULL;
	memset(p, '\0', size);
	return p;
}

/*
**  SM_SASL_REALLOC -- realloc() for SASL
**
**	Parameters:
**		p -- pointer to old memory.
**		size -- size of requested memory.
**
**	Returns:
**		pointer to new memory.
*/

static void *
sm_sasl_realloc(o, size)
	void *o;
	SM_SASL_SIZE_T size;
{
	return sm_realloc(o, (size_t) size);
}

/*
**  SM_SASL_FREE -- free() for SASL
**
**	Parameters:
**		p -- pointer to free.
**
**	Returns:
**		none
*/

void
sm_sasl_free(p)
	void *p;
{
	sm_free(p);
}

/*
**  SM_SASL_INIT -- sendmail specific SASL initialization
**
**	Parameters:
**		none.
**
**	Returns:
**		none
**
**	Side Effects:
**		installs memory management routines for SASL.
*/

void
sm_sasl_init()
{
	sasl_set_alloc(sm_sasl_malloc, sm_sasl_calloc,
		       sm_sasl_realloc, sm_sasl_free);
}
/*
**  INTERSECT -- create the intersection between two lists
**
**	Parameters:
**		s1, s2 -- lists of items (separated by single blanks).
**		rpool -- resource pool from which result is allocated.
**
**	Returns:
**		the intersection of both lists.
*/

char *
intersect(s1, s2, rpool)
	char *s1, *s2;
	SM_RPOOL_T *rpool;
{
	char *hr, *h1, *h, *res;
	int l1, l2, rl;

	if (s1 == NULL || s2 == NULL)	/* NULL string(s) -> NULL result */
		return NULL;
	l1 = strlen(s1);
	l2 = strlen(s2);
	rl = SM_MIN(l1, l2);
	res = (char *) sm_rpool_malloc(rpool, rl + 1);
	if (res == NULL)
		return NULL;
	*res = '\0';
	if (rl == 0)	/* at least one string empty? */
		return res;
	hr = res;
	h1 = s1;
	h = s1;

	/* walk through s1 */
	while (h != NULL && *h1 != '\0')
	{
		/* is there something after the current word? */
		if ((h = strchr(h1, ' ')) != NULL)
			*h = '\0';
		l1 = strlen(h1);

		/* does the current word appear in s2 ? */
		if (iteminlist(h1, s2, " ") != NULL)
		{
			/* add a blank if not first item */
			if (hr != res)
				*hr++ = ' ';

			/* copy the item */
			memcpy(hr, h1, l1);

			/* advance pointer in result list */
			hr += l1;
			*hr = '\0';
		}
		if (h != NULL)
		{
			/* there are more items */
			*h = ' ';
			h1 = h + 1;
		}
	}
	return res;
}
# if SASL >= 20000
/*
**  IPTOSTRING -- create string for SASL_IP*PORT property
**		(borrowed from lib/iptostring.c in Cyrus-IMAP)
**
**	Parameters:
**		addr -- (pointer to) socket address
**		addrlen -- length of socket address
**		out -- output string (result)
**		outlen -- maximum length of output string
**
**	Returns:
**		true iff successful.
**
**	Side Effects:
**		creates output string if successful.
**		sets errno if unsuccessful.
*/

#  include <arpa/inet.h>

#  ifndef NI_MAXHOST
#   define NI_MAXHOST	1025
#  endif
#  ifndef NI_MAXSERV
#   define NI_MAXSERV	32
#  endif

bool
iptostring(addr, addrlen, out, outlen)
	SOCKADDR *addr;
	SOCKADDR_LEN_T addrlen;
	char *out;
	unsigned outlen;
{
	char hbuf[NI_MAXHOST], pbuf[NI_MAXSERV];
#  if NETINET6
	int niflags;
#  endif /* NETINET6 */

	if (addr == NULL || out == NULL)
	{
		errno = EINVAL;
		return false;
	}

#  if NETINET6
	niflags = (NI_NUMERICHOST | NI_NUMERICSERV);
#   ifdef NI_WITHSCOPEID
	if (addr->sa.sa_family == AF_INET6)
		niflags |= NI_WITHSCOPEID;
#   endif /* NI_WITHSCOPEID */
	if (getnameinfo((struct sockaddr *) addr, addrlen,
			hbuf, sizeof(hbuf), pbuf, sizeof(pbuf), niflags) != 0)
		return false;
#  else /* NETINET6 */
	if (addr->sa.sa_family != AF_INET)
	{
		errno = EINVAL;
		return false;
	}
	if (sm_strlcpy(hbuf, inet_ntoa(addr->sin.sin_addr), sizeof(hbuf))
	    >= sizeof(hbuf))
	{
		errno = ENOMEM;
		return false;
	}
	sm_snprintf(pbuf, sizeof(pbuf), "%d", ntohs(addr->sin.sin_port));
#  endif /* NETINET6 */

	if (outlen < strlen(hbuf) + strlen(pbuf) + 2)
	{
		errno = ENOMEM;
		return false;
	}
	sm_snprintf(out, outlen, "%s;%s", hbuf, pbuf);
	return true;
}
# endif /* SASL >= 20000 */
#endif /* SASL */
@


1.3
log
@merge sendmail 8.14.6
@
text
@d2 1
a2 1
 * Copyright (c) 2001-2002 Sendmail, Inc. and its suppliers.
d12 1
a12 1
SM_RCSID("@@(#)$Id: sasl.c,v 8.23 2012/11/27 18:53:13 gshapiro Exp $")
@


1.2
log
@Replace “$Sendmail: ” with “$Id: ” (the latter is used by upstream)
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Id: sasl.c,v 8.22 2006/08/15 23:24:57 ca Exp $")
d23 1
a23 1
**  the sasl package incorrectly specifies the size of a block
d27 9
a35 3
void *sm_sasl_malloc __P((unsigned long));
static void *sm_sasl_calloc __P((unsigned long, unsigned long));
static void *sm_sasl_realloc __P((void *, unsigned long));
d59 1
a59 1
	unsigned long size;
d80 2
a81 2
	unsigned long nelem;
	unsigned long elemsize;
d108 1
a108 1
	unsigned long size;
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.21 2004/11/22 23:09:00 gshapiro Exp $")
d261 1
a261 1
			hbuf, sizeof hbuf, pbuf, sizeof pbuf, niflags) != 0)
d275 1
a275 1
	sm_snprintf(pbuf, sizeof pbuf, "%d", ntohs(addr->sin.sin_port));
@


1.1.127.1
log
@Import Sendmail 8.14.3, suitably stripped down by the not yet committed
contrib/samples/import-3rdpty,v 1.35; we have some new and renamed files
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Id: sasl.c,v 8.22 2006/08/15 23:24:57 ca Exp $")
d261 1
a261 1
			hbuf, sizeof(hbuf), pbuf, sizeof(pbuf), niflags) != 0)
d275 1
a275 1
	sm_snprintf(pbuf, sizeof(pbuf), "%d", ntohs(addr->sin.sin_port));
@


1.1.127.2
log
@Import sendmail 8.14.6 via mircvs://contrib/samples/import-3rdpty
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Id: sasl.c,v 8.23 2012/11/27 18:53:13 gshapiro Exp $")
d23 1
a23 1
**  older sasl packages incorrectly specifies the size of a block
d27 3
a29 9
# if defined(SASL_VERSION_FULL) && SASL_VERSION_FULL >= 0x02011a
#  define SM_SASL_SIZE_T	size_t
# else /* defined(SASL_VERSION_FULL) && SASL_VERSION_FULL >= 0x02011a */
#  define SM_SASL_SIZE_T	unsigned long
# endif /* defined(SASL_VERSION_FULL) && SASL_VERSION_FULL >= 0x02011a */

void *sm_sasl_malloc __P((SM_SASL_SIZE_T));
static void *sm_sasl_calloc __P((SM_SASL_SIZE_T, SM_SASL_SIZE_T));
static void *sm_sasl_realloc __P((void *, SM_SASL_SIZE_T));
d53 1
a53 1
	SM_SASL_SIZE_T size;
d74 2
a75 2
	SM_SASL_SIZE_T nelem;
	SM_SASL_SIZE_T elemsize;
d102 1
a102 1
	SM_SASL_SIZE_T size;
@


1.1.127.3
log
@Import sendmail 8.14.9
@
text
@d2 1
a2 1
 * Copyright (c) 2001-2002 Proofpoint, Inc. and its suppliers.
d12 1
a12 1
SM_RCSID("@@(#)$Id: sasl.c,v 8.24 2013-11-22 20:51:56 ca Exp $")
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import Sendmail 8.14.0 via OpenBSD
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Sendmail: sasl.c,v 8.22 2006/08/15 23:24:57 ca Exp $")
d261 1
a261 1
			hbuf, sizeof(hbuf), pbuf, sizeof(pbuf), niflags) != 0)
d275 1
a275 1
	sm_snprintf(pbuf, sizeof(pbuf), "%d", ntohs(addr->sin.sin_port));
@


1.1.1.2.4.1
log
@Replace “$Sendmail: ” with “$Id: ” (the latter is used by upstream)
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Id: sasl.c,v 8.22 2006/08/15 23:24:57 ca Exp $")
@


1.1.1.3
log
@Replace “$Sendmail: ” with “$Id: ” (the latter is used by upstream)
@
text
@d12 1
a12 1
SM_RCSID("@@(#)$Id: sasl.c,v 8.22 2006/08/15 23:24:57 ca Exp $")
@


