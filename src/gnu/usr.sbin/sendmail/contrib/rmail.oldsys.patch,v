head	1.1;
branch	1.1.1;
access;
symbols
	sendmail-8_14_9:1.1.127.1
	sendmail-8_14_7:1.1.127.1
	sendmail-8_14_6:1.1.127.1
	sendmail-8_14_5-ERRATA-1:1.1.127.1
	mbsd-20101220_mergebase:1.1.1.1
	sendmail-8_14_5:1.1.127.1
	cvs-201107021500:1.1.1.1
	cvs-20101220:1.1.1.1
	mbsd-20101220:1.1.1.1.0.6
	cvs-201012191730:1.1.1.1
	sendmail-8_14_5_Beta0:1.1.127.1
	sendmail-8_14_3:1.1.127.1
	sendmail:1.1.127
	cvs-200812170000:1.1.1.1
	cvs-200805071200:1.1.1.1
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	cvs-200803022030:1.1.1.1
	cvs-200707152000:1.1.1.1
	cvs-200704292000:1.1.1.1
	cvs-200702051700:1.1.1.1
	cvs-200609121900:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	cvs-200606151800:1.1.1.1
	cvs-200603231300:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200504262050:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.05.17.24.19;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.127.1;
next	;

1.1.1.1
date	2005.02.05.17.24.19;	author tg;	state Exp;
branches;
next	;

1.1.127.1
date	2010.12.19.14.45.52;	author tg;	state Exp;
branches;
next	;
commitid	1004D0E1A94384778FD;


desc
@@


1.1
log
@Initial revision
@
text
@From: Bill Gianopoulos <wag@@sccux1.msd.ray.com>
Message-Id: <199405191527.LAA03463@@sccux1.msd.ray.com>
Subject: Patch to rmail to elliminate need for snprintf
To: sendmail@@CS.Berkeley.EDU
Date: Thu, 19 May 1994 11:27:16 -0400 (EDT)

I have written the following patch to rmail which removes the requirement
for snprintf while maintaining the protection from buffer overruns.  It also
fixes it to compile with compilers which don't understand ANSI function
prototypes.  Perhaps this should be included in the next version?

*** rmail/rmail.c.orig	Mon May 31 18:10:44 1993
--- rmail/rmail.c	Thu May 19 11:04:50 1994
***************
*** 78,86 ****
--- 78,109 ----
  #include <sysexits.h>
  #include <unistd.h>
  
+ #ifdef __STDC__
  void err __P((int, const char *, ...));
  void usage __P((void));
+ #else
+ void err ();
+ void usage ();
+ #endif
  
+ #define strdup(s)	strcpy(xalloc(strlen(s) + 1), s)
+ 
+ char *
+ xalloc(sz)
+ 	register int sz;
+ {
+ 	register char *p;
+ 
+ 	/* some systems can't handle size zero mallocs */
+ 	if (sz <= 0)
+ 		sz = 1;
+ 
+ 	p = malloc((unsigned) sz);
+ 	if (p == NULL)
+ 		err(EX_UNAVAILABLE, "Out of memory!!");
+ 	return (p);
+ }
+ 
  int
  main(argc, argv)
  	int argc;
***************
*** 230,250 ****
  	args[i++] = "-oi";		/* Ignore '.' on a line by itself. */
  
  	if (from_sys != NULL) {		/* Set sender's host name. */
! 		if (strchr(from_sys, '.') == NULL)
! 			(void)snprintf(buf, sizeof(buf),
  			    "-oMs%s.%s", from_sys, domain);
! 		else
! 			(void)snprintf(buf, sizeof(buf), "-oMs%s", from_sys);
  		if ((args[i++] = strdup(buf)) == NULL)
  			 err(EX_TEMPFAIL, NULL);
  	}
  					/* Set protocol used. */
! 	(void)snprintf(buf, sizeof(buf), "-oMr%s", domain);
  	if ((args[i++] = strdup(buf)) == NULL)
  		err(EX_TEMPFAIL, NULL);
  
  					/* Set name of ``from'' person. */
! 	(void)snprintf(buf, sizeof(buf), "-f%s%s",
  	    from_path ? from_path : "", from_user);
  	if ((args[i++] = strdup(buf)) == NULL)
  		err(EX_TEMPFAIL, NULL);
--- 253,285 ----
  	args[i++] = "-oi";		/* Ignore '.' on a line by itself. */
  
  	if (from_sys != NULL) {		/* Set sender's host name. */
! 		if (strchr(from_sys, '.') == NULL) {
! 			if ((strlen(from_sys) + strlen(domain) + 6)
! 			    > sizeof(buf))
! 				err(EX_DATAERR, "sender hostname too long");
! 			(void)sprintf(buf,
  			    "-oMs%s.%s", from_sys, domain);
! 		}
! 		else {
! 			if ((strlen(from_sys) + 5) > sizeof(buf))
! 				err(EX_DATAERR ,"sender hostname too long");
! 			(void)sprintf(buf, "-oMs%s", from_sys);
! 		}
  		if ((args[i++] = strdup(buf)) == NULL)
  			 err(EX_TEMPFAIL, NULL);
  	}
  					/* Set protocol used. */
! 	if ((strlen(domain) + 5) > sizeof(buf))
! 		err(EX_DATAERR, "protocol name too long");
! 	(void)sprintf(buf, "-oMr%s", domain);
  	if ((args[i++] = strdup(buf)) == NULL)
  		err(EX_TEMPFAIL, NULL);
  
  					/* Set name of ``from'' person. */
! 	if (((from_path ? strlen(from_path) : 0) + strlen(from_user) + 3) 
! 	    > sizeof(buf))
! 		err(EX_DATAERR, "from address too long");
! 	(void)sprintf(buf, "-f%s%s",
  	    from_path ? from_path : "", from_user);
  	if ((args[i++] = strdup(buf)) == NULL)
  		err(EX_TEMPFAIL, NULL);
-- 
William A. Gianopoulos; Raytheon Missile Systems Division
wag@@sccux1.msd.ray.com
@


1.1.127.1
log
@Import Sendmail 8.14.3, suitably stripped down by the not yet committed
contrib/samples/import-3rdpty,v 1.35; we have some new and renamed files
@
text
@@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
