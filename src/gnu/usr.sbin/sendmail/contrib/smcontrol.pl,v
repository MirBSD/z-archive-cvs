head	1.3;
access;
symbols
	sendmail-8_14_9:1.1.127.3
	sendmail-8_14_7:1.1.127.2
	sendmail-8_14_6:1.1.127.2
	sendmail-8_14_5-ERRATA-1:1.1.127.2
	mbsd-20101220_mergebase:1.2
	sendmail-8_14_5:1.1.127.2
	cvs-201107021500:1.1.1.2
	cvs-20101220:1.1.1.1
	mbsd-20101220:1.2.0.2
	cvs-201012191730:1.1.1.1
	sendmail-8_14_5_Beta0:1.1.127.2
	sendmail-8_14_3:1.1.127.1
	sendmail:1.1.127
	cvs-200812170000:1.1.1.1
	cvs-200805071200:1.1.1.1
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	cvs-200803022030:1.1.1.1
	cvs-200707152000:1.1.1.1
	cvs-200704292000:1.1.1.1
	cvs-200702051700:1.1.1.1
	cvs-200609121900:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	cvs-200606151800:1.1.1.1
	cvs-200603231300:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200504262050:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.06.09.15.17.00;	author tg;	state Exp;
branches;
next	1.2;
commitid	1005395CFC65E5646F1;

1.2
date	2010.12.19.17.18.01;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004D0E3E2D1286B3DF;

1.1
date	2005.02.05.17.24.19;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.127.1;
next	;

1.1.1.1
date	2005.02.05.17.24.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.07.02.15.17.37;	author tg;	state Exp;
branches;
next	;
commitid	1004E0F36A10B5CA95B;

1.1.127.1
date	2010.12.19.14.45.52;	author tg;	state Exp;
branches;
next	1.1.127.2;
commitid	1004D0E1A94384778FD;

1.1.127.2
date	2010.12.19.14.56.32;	author tg;	state Exp;
branches;
next	1.1.127.3;
commitid	1004D0E1D294DE25888;

1.1.127.3
date	2014.06.09.14.29.24;	author tg;	state Exp;
branches;
next	;
commitid	1005395C4CC1A6DB9EE;


desc
@@


1.3
log
@merge
@
text
@#!/usr/bin/perl -w

# $Id: smcontrol.pl,v 8.8 2008-07-21 21:31:43 ca Exp $

use strict;
use Getopt::Std;
use FileHandle;
use Socket;

my $sendmailDaemon = "/usr/sbin/sendmail -q30m -bd";

##########################################################################
#
#  &get_controlname -- read ControlSocketName option from sendmail.cf
#
#	Parameters:
#		none.
#
#	Returns:
#		control socket filename, undef if not found
#

sub get_controlname
{
	my $cn = undef;
	my $qd = undef;
 
	open(CF, "</etc/mail/sendmail.cf") or return $cn;
	while (<CF>)
	{
		chomp;
		if (/^O ControlSocketName\s*=\s*([^#]+)$/o)
		{
			$cn = $1;
		}
		if (/^O QueueDirectory\s*=\s*([^#]+)$/o)
		{
			$qd = $1;
		}
		if (/^OQ([^#]+)$/o)
		{
			$qd = $1;
		}
	}
	close(CF);
	if (not defined $cn)
	{
		return undef;
	}
	if ($cn !~ /^\//o)
	{
		return undef if (not defined $qd);
		
		$cn = $qd . "/" . $cn;
	}
	return $cn;
}

##########################################################################
#
#  &do_command -- send command to sendmail daemon view control socket
#
#	Parameters:
#		controlsocket -- filename for socket
#		command -- command to send
#
#	Returns:
#		reply from sendmail daemon
#

sub do_command
{
	my $controlsocket = shift;
	my $command = shift;
	my $proto = getprotobyname('ip');
	my @@reply;
	my $i;

	socket(SOCK, PF_UNIX, SOCK_STREAM, $proto) or return undef;

	for ($i = 0; $i < 4; $i++)
	{
		if (!connect(SOCK, sockaddr_un($controlsocket)))
		{
			if ($i == 3)
			{
				close(SOCK);
				return undef;
			}
			sleep 1;
			next;
		}
		last;
	}
	autoflush SOCK 1;
	print SOCK "$command\n";
	@@reply = <SOCK>;
	close(SOCK);
	return join '', @@reply;
}

##########################################################################
#
#  &sendmail_running -- check if sendmail is running via SMTP
#
#	Parameters:
#		none
#
#	Returns:
#		1 if running, undef otherwise
#

sub sendmail_running
{
	my $port = getservbyname("smtp", "tcp") || 25;
	my $proto = getprotobyname("tcp");
	my $iaddr = inet_aton("localhost");
	my $paddr = sockaddr_in($port, $iaddr);

	socket(SOCK, PF_INET, SOCK_STREAM, $proto) or return undef;
	if (!connect(SOCK, $paddr))
	{
		close(SOCK);
		return undef;
	}
	autoflush SOCK 1;
	while (<SOCK>)
	{
		if (/^(\d{3})([ -])/)
		{
			if ($1 != 220)
			{
				close(SOCK);
				return undef;
			}
		}
		else
		{
			close(SOCK);
			return undef;
		}
		last if ($2 eq " ");
	}
	print SOCK "QUIT\n";
	while (<SOCK>)
	{
		last if (/^\d{3} /);
	}
	close(SOCK);
	return 1;
}

##########################################################################
#
#  &munge_status -- turn machine readable status into human readable text
#
#	Parameters:
#		raw -- raw results from sendmail daemon STATUS query
#
#	Returns:
#		human readable text
#

sub munge_status
{
	my $raw = shift;
	my $cooked = "";
	my $daemonStatus = "";

	if ($raw =~ /^(\d+)\/(\d+)\/(\d+)\/(\d+)/mg)
	{
		$cooked .= "Current number of children: $1";
		if ($2 > 0)
		{
			$cooked .= " (maximum $2)";
		}
		$cooked .= "\n";
		$cooked .= "QueueDir free disk space (in blocks): $3\n";
		$cooked .= "Load average: $4\n";
	}
	while ($raw =~ /^(\d+) (.*)$/mg)
	{
		if (not $daemonStatus)
		{
			$daemonStatus = "(process $1) " . ucfirst($2) . "\n";
		}
		else
		{
			$cooked .= "Child Process $1 Status: $2\n";
		}
	}
	return ($daemonStatus, $cooked);
}

##########################################################################
#
#  &start_daemon -- fork off a sendmail daemon
#
#	Parameters:
#		control -- control socket name
#
#	Returns:
#		Error message or "OK" if successful
#

sub start_daemon
{
	my $control = shift;
	my $pid;

	if ($pid = fork)
	{
		my $exitstat;

		waitpid $pid, 0 or return "Could not get status of created process: $!\n";
		$exitstat = $? / 256;
		if ($exitstat != 0)
		{
			return "sendmail daemon startup exited with exit value $exitstat";
		}
	}
	elsif (defined $pid)
	{
		exec($sendmailDaemon);
		die "Unable to start sendmail daemon: $!.\n";
	}
	else
	{
		return "Could not create new process: $!\n";
	}
	return "OK\n";
}

##########################################################################
#
#  &stop_daemon -- stop the sendmail daemon using control socket
#
#	Parameters:
#		control -- control socket name
#
#	Returns:
#		Error message or status message
#

sub stop_daemon
{
	my $control = shift;
	my $status;

	if (not defined $control)
	{
		return "The control socket is not configured so the daemon can not be stopped.\n";
	}
	return &do_command($control, "SHUTDOWN");
}

##########################################################################
#
#  &restart_daemon -- restart the sendmail daemon using control socket
#
#	Parameters:
#		control -- control socket name
#
#	Returns:
#		Error message or status message
#

sub restart_daemon
{
	my $control = shift;
	my $status;

	if (not defined $control)
	{
		return "The control socket is not configured so the daemon can not be restarted.";
	}
	return &do_command($control, "RESTART");
}

##########################################################################
#
#  &memdump -- get memdump from the daemon using the control socket
#
#	Parameters:
#		control -- control socket name
#
#	Returns:
#		Error message or status message
#

sub memdump
{
	my $control = shift;
	my $status;

	if (not defined $control)
	{
		return "The control socket is not configured so the daemon can not be queried for memdump.";
	}
	return &do_command($control, "MEMDUMP");
}

##########################################################################
#
#  &help -- get help from the daemon using the control socket
#
#	Parameters:
#		control -- control socket name
#
#	Returns:
#		Error message or status message
#

sub help
{
	my $control = shift;
	my $status;

	if (not defined $control)
	{
		return "The control socket is not configured so the daemon can not be queried for help.";
	}
	return &do_command($control, "HELP");
}

my $status = undef;
my $daemonStatus = undef;
my $opts = {};

getopts('f:', $opts) || die "Usage: $0 [-f /path/to/control/socket] command\n";

my $control = $opts->{f} || &get_controlname;
my $command = shift;

if (not defined $control)
{
	die "No control socket available.\n";
}
if (not defined $command)
{
	die "Usage: $0 [-f /path/to/control/socket] command\n";
}
if ($command eq "status")
{
	$status = &do_command($control, "STATUS");
	if (not defined $status)
	{
		# Not responding on control channel, query via SMTP
		if (&sendmail_running)
		{
			$daemonStatus = "Sendmail is running but not answering status queries.";
		}
		else
		{
			$daemonStatus = "Sendmail does not appear to be running.";
		}
	}
	else
	{
		# Munge control channel output
		($daemonStatus, $status) = &munge_status($status);
	}
}
elsif (lc($command) eq "shutdown")
{
	$status = &stop_daemon($control);
}
elsif (lc($command) eq "restart")
{
	$status = &restart_daemon($control);
}
elsif (lc($command) eq "start")
{
	$status = &start_daemon($control);
}
elsif (lc($command) eq "memdump")
{
	$status = &memdump($control);
}
elsif (lc($command) eq "help")
{
	$status = &help($control);
}
elsif (lc($command) eq "mstat")
{
	$status = &do_command($control, "mstat");
	if (not defined $status)
	{
		# Not responding on control channel, query via SMTP
		if (&sendmail_running)
		{
			$daemonStatus = "Sendmail is running but not answering status queries.";
		}
		else
		{
			$daemonStatus = "Sendmail does not appear to be running.";
		}
	}
}
else
{
	die "Unrecognized command $command\n";
}
if (defined $daemonStatus)
{
	print "Daemon Status: $daemonStatus\n";
}
if (defined $status)
{
	print "$status\n";
}
else
{
	die "No response\n";
}
@


1.2
log
@merge newer sendmail; fix and correct; reduce upstream diffs; prep for deb
@
text
@d3 1
a3 1
# $Id: smcontrol.pl,v 8.8 2008/07/21 21:31:43 ca Exp $
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
#!/usr/local/bin/perl -w
@


1.1.127.1
log
@Import Sendmail 8.14.3, suitably stripped down by the not yet committed
contrib/samples/import-3rdpty,v 1.35; we have some new and renamed files
@
text
@@


1.1.127.2
log
@Import sendmail.8.14.5.Beta0.tar.gz
@
text
@d1 1
a1 3
#!/usr/bin/perl -w

# $Id: smcontrol.pl,v 8.8 2008/07/21 21:31:43 ca Exp $
@


1.1.127.3
log
@Import sendmail 8.14.9
@
text
@d3 1
a3 1
# $Id: smcontrol.pl,v 8.8 2008-07-21 21:31:43 ca Exp $
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import OpenBSD’s sendmail 8.14.5, RCS IDs properly sedded back
@
text
@d1 1
a1 3
#!/usr/bin/perl -w

# $Id: smcontrol.pl,v 8.8 2008/07/21 21:31:43 ca Exp $
@

