head	1.6;
access;
symbols
	MIRBSD_10:1.6.0.2
	MIRBSD_10_BASE:1.6
	MIRBSD_9_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2007.05.18.00.47.59;	author tg;	state Exp;
branches;
next	1.5;
commitid	100464CF7A870016783;

1.5
date	2006.11.03.17.14.41;	author tg;	state Exp;
branches;
next	1.4;
commitid	100454B79084CCFD1B9;

1.4
date	2006.09.07.16.35.23;	author tg;	state Exp;
branches;
next	1.3;
commitid	100450049E956A1ED59;

1.3
date	2006.01.31.19.13.42;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043DFB6DF5492A8E6;

1.2
date	2006.01.31.17.27.29;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043DF9E08278D9A57;

1.1
date	2006.01.31.16.43.24;	author tg;	state Exp;
branches;
next	;
commitid	10043DF93C24D68C04F;


desc
@@


1.6
log
@add some netbsd compatibility (even really cruel stuff like __UNCONST(x))
to the system headers (the cruel stuff ifdef'd out tho), also the namespace
clean __uint8_t &c. types (should be the other way round tho)
@
text
@# $MirOS: src/lib/libcitrus_iconv/Makefile.inc,v 1.5 2006/11/03 17:14:41 tg Exp $

.ifndef _MODSRC_LIB_LIBCITRUS_ICONV_MAKEFILE_INC
_MODSRC_LIB_LIBCITRUS_ICONV_MAKEFILE_INC=1

.include <bsd.own.mk>

NBBASE?=	${BSDSRCDIR}/lib/libcitrus_iconv
NBLIBC=		${NBBASE}/libc

CPPFLAGS+=	-D__NEED_NETBSD_COMPAT			# for the worse...
CPPFLAGS+=	-D'wchar_t=uint32_t' -D_GCC_WCHAR_T	# XXX nice hack, eh?

CPPFLAGS+=	-I${NBLIBC}/citrus -I${NBLIBC}/citrus/modules \
		-I${BSDSRCDIR}/lib/libc/include -I${NBLIBC}

CPPFLAGS+=	-D'_PATH_CSMAPPER="/usr/share/i18n/csmapper"' \
		-D'_PATH_ESDB="/usr/share/i18n/esdb"' \
		-D'_PATH_I18NMODULE="/usr/lib/i18n"' \
		-D'_PATH_ICONV="/usr/share/i18n/iconv"' \
		-DI18NMODULE_MAJOR=${major} \
		-DCITRUS -DCITRUS_ICONV -D_I18N_DYNAMIC

.endif
@


1.5
log
@add _DIAGASSERT to <sys/cdefs.h> for TNF compatibility
XXX revisit this later
@
text
@d1 1
a1 1
# $MirOS: src/lib/libcitrus_iconv/Makefile.inc,v 1.4 2006/09/07 16:35:23 tg Exp $
d11 1
a11 10
# oh my goddess!
CPPFLAGS+=	-D'__UNCONST(a)=((void *)(unsigned long)(const void *)(a))'
.if ${OBJECT_FMT} == "ELF"
CPPFLAGS+=	-D'_C_LABEL_STRING(x)=x'
.elif (${OBJECT_FMT} == "a.out") || (${OBJECT_FMT} == "PE")
CPPFLAGS+=	-D'_C_LABEL_STRING(x)="_"x'
.else
.error Unknown OBJECT_FMT
.endif
CPPFLAGS+=	-D'__uint8_t=uint8_t'
@


1.4
log
@change libcitrus_iconv's use of "wchar_t" to "uint32_t" because
our wchar_t is shorter (16 bit) and, in contrast to citrus I18N,
defined as UCS-2HE BMP Unicode with semantics

this changes iconv module ABI from 4.4 to 5.0; a side effect is
that libiconv.so gets bumped to 5.0 as well, but there is not a
user visible API or ABI change, you can symlink these two.

fixes: ISO2022-JP to UTF-8 conversion
discovered while: contributing to lynx

also add: API/ABI documentation
@
text
@d1 1
a1 1
# $MirOS: src/lib/libcitrus_iconv/Makefile.inc,v 1.3 2006/01/31 19:13:42 tg Exp $
a12 1
CPPFLAGS+=	-D'_DIAGASSERT(x)='
@


1.3
log
@commit a working, stripped-down (may be cleaning up the attic later,
but not for now) BSD-licenced libiconv replacement
@
text
@d1 1
a1 1
# $MirOS: src/lib/libcitrus_iconv/Makefile.inc,v 1.2 2006/01/31 17:27:29 tg Exp $
d22 1
@


1.2
log
@slowly proceed in creating a library
@
text
@d1 1
a1 1
# $MirOS: src/lib/libcitrus_iconv/Makefile.inc,v 1.1 2006/01/31 16:43:24 tg Exp $
d6 2
d14 18
@


1.1
log
@initial MirOSification
@
text
@d1 1
a1 1
# $MirOS$
d9 4
@

