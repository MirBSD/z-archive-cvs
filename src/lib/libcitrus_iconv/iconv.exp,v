head	1.3;
access;
symbols
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2009.06.05.20.16.03;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004A297D176BC3C238;

1.2
date	2006.09.07.16.35.23;	author tg;	state Exp;
branches;
next	1.1;
commitid	100450049E956A1ED59;

1.1
date	2006.02.01.14.40.14;	author tg;	state Exp;
branches;
next	;
commitid	10043E0C82F27B079A6;


desc
@@


1.3
log
@fix a typo in a comment
@
text
@# $MirOS: src/lib/libcitrus_iconv/iconv.exp,v 1.2 2006/09/07 16:35:23 tg Exp $
#-
# This is a version script for the GNU linker ld(1) to assign
# global visibility only to specific exported symbols. Symbol
# versioning is not done.
# The weak symbols {,lib}iconv{,_open,_close} alias the func-
# tions _iconv{,_open,_close} which are not set to visible in
# order to avoid a namespace conflict. The weak functions are
# still working properly though.
# The __iconv{,_{get,free}_list} API is, however, exported in
# the hope it will not clash with any future version of other
# iconv libraries. GNU libiconv 1.9.1 doesn't.

# API/ABI warnings:
# revision 4.4:
#	- initial revision, for NetBSD(R) compatibility
#	- plug-in compatible to GNU libiconv, except for
#	  a few internal symbols (e.g. _libiconv_version)
# revision 5.0:
#	- new module API+ABI, uses uint32_t instead of
#	  wchar_t via cpp(1) define
#	- libiconv.so bumped to 5.0, but its exported
#	  interface did not change from 4.4

{
  # First, define all global symbols
  global:
	# iconv(3) API, weak symbols
	iconv;
	iconv_open;
	iconv_close;

	# GNU libiconv compatible API, weak symbols
	libiconv;
	libiconv_open;
	libiconv_close;

	# NetBSD(R) non-portable API
	__iconv;
	__iconv_get_list;
	__iconv_free_list;

	# Internal symbols (citrus namespace) for shared objects
	_citrus_bcs_skip_nonws;
	_citrus_bcs_skip_ws;
	_citrus_bcs_skip_ws_len;
	_citrus_bcs_strcasecmp;
	_citrus_bcs_strncasecmp;
	_citrus_csmapper_open;
	_citrus_db_close;
	_citrus_db_hash_std;
	_citrus_db_lookup_by_string;
	_citrus_db_lookup_string_by_string;
	_citrus_db_open;
	_citrus_esdb_close;
	_citrus_esdb_open;
	_citrus_map_file;
	_citrus_mapper_close;
	_citrus_mapper_open;
	_citrus_memory_stream_chr;
	_citrus_memory_stream_getln;
	_citrus_memory_stream_skip_ws;
	_citrus_stdenc_close;
	_citrus_stdenc_open;
	_citrus_unmap_file;

  # Now, define everything else as local
  local:
	*;
};
@


1.2
log
@change libcitrus_iconv's use of "wchar_t" to "uint32_t" because
our wchar_t is shorter (16 bit) and, in contrast to citrus I18N,
defined as UCS-2HE BMP Unicode with semantics

this changes iconv module ABI from 4.4 to 5.0; a side effect is
that libiconv.so gets bumped to 5.0 as well, but there is not a
user visible API or ABI change, you can symlink these two.

fixes: ISO2022-JP to UTF-8 conversion
discovered while: contributing to lynx

also add: API/ABI documentation
@
text
@d1 1
a1 1
# $MirOS: src/lib/libcitrus_iconv/iconv.exp,v 1.1 2006/02/01 14:40:14 tg Exp $
d7 1
a7 1
# tions _iconvP,_open,_close} which are not set to visible in
@


1.1
log
@Install as libiconv.{a,so.4.4} because it's compatible with GNU libiconv,
the functions are weak, and the internal functions are namespace'd with
_citrus. For everything else, add a symbol versioning script which doesn't
really version, just set visibility (global/local) of symbols.
@
text
@d1 1
a1 1
# $MirOS$
d14 11
@

