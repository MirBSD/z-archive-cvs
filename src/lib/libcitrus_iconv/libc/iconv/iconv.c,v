head	1.5;
access;
symbols
	MIRBSD_10:1.5.0.2
	MIRBSD_10_BASE:1.5
	MIRBSD_9_BASE:1.4
	cvs-200601311430:1.1.3.1
	netbsd:1.1.3;
locks; strict;
comment	@ * @;


1.5
date	2006.09.07.16.24.19;	author tg;	state Exp;
branches;
next	1.4;
commitid	100450047C852A3F61B;

1.4
date	2006.01.31.20.16.40;	author tg;	state Exp;
branches;
next	1.3;
commitid	10043DFC5AB6255178D;

1.3
date	2006.01.31.19.13.44;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043DFB6DF5492A8E6;

1.2
date	2006.01.31.17.27.30;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043DF9E08278D9A57;

1.1
date	2006.01.31.14.39.42;	author tg;	state Exp;
branches
	1.1.3.1;
next	;
commitid	10043DF76B526997FF9;

1.1.3.1
date	2006.01.31.14.39.42;	author tg;	state Exp;
branches;
next	;
commitid	10043DF76B526997FF9;


desc
@@


1.5
log
@nuke junk
@
text
@/*	$NetBSD: iconv.c,v 1.5 2005/04/25 13:42:04 tshiozak Exp $	*/

/*-
 * Copyright (c)2003 Citrus Project,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>

__RCSID("$NetBSD: iconv.c,v 1.5 2005/04/25 13:42:04 tshiozak Exp $");
__RCSID("$MirOS: src/lib/libcitrus_iconv/libc/iconv/iconv.c,v 1.4 2006/01/31 20:16:40 tg Exp $");

#include "namespace.h"
#include <assert.h>
#include <errno.h>
#include <paths.h>
#include <sys/queue.h>

#include <iconv.h>

#include <sys/types.h>
#include <citrus/citrus_types.h>
#include <citrus/citrus_module.h>
#include <citrus/citrus_esdb.h>
#include <citrus/citrus_hash.h>
#include <citrus/citrus_iconv.h>

#define ISBADF(_h_)	(!(_h_) || (_h_) == (iconv_t)-1)

#ifdef __weak_alias
__weak_alias(iconv, _iconv);
__weak_alias(iconv_open, _iconv_open);
__weak_alias(iconv_close, _iconv_close);

/* GNU libiconv compatibility */
__weak_alias(libiconv, _iconv);
__weak_alias(libiconv_open, _iconv_open);
__weak_alias(libiconv_close, _iconv_close);
#endif

iconv_t
_iconv_open(const char *out, const char *in)
{
	int ret;
	struct _citrus_iconv *handle;

	ret = _citrus_iconv_open(&handle, _PATH_ICONV, in, out);
	if (ret) {
		errno = ret == ENOENT? EINVAL : ret;
		return ((iconv_t)-1);
	}

	return ((iconv_t)(void *)handle);
}

int
_iconv_close(iconv_t handle)
{
	if (ISBADF(handle)) {
		errno = EBADF;
		return (-1);
	}

	_citrus_iconv_close((struct _citrus_iconv *)(void *)handle);

	return (0);
}

size_t
_iconv(iconv_t handle, const char **in, size_t *szin, char **out, size_t *szout)
{
	int err;
	size_t ret;

	if (ISBADF(handle)) {
		errno = EBADF;
		return ((size_t)-1);
	}

	err = _citrus_iconv_convert(
		(struct _citrus_iconv *)(void *)handle, in, szin, out, szout,
		0, &ret);
	if (err) {
		errno = err;
		ret = (size_t)-1;
	}

	return (ret);
}

size_t
__iconv(iconv_t handle, const char **in, size_t *szin, char **out,
	size_t *szout, u_int32_t flags, size_t *invalids)
{
	int err;
	size_t ret;

	if (ISBADF(handle)) {
		errno = EBADF;
		return ((size_t)-1);
	}

	err = _citrus_iconv_convert(
		(struct _citrus_iconv *)(void *)handle, in, szin, out, szout,
		flags, &ret);
	if (invalids)
		*invalids = ret;
	if (err) {
		errno = err;
		ret = (size_t)-1;
	}

	return (ret);
}

int
__iconv_get_list(char ***rlist, size_t *rsz)
{
	int ret;

	ret = _citrus_esdb_get_list(rlist, rsz);
	if (ret) {
		errno = ret;
		return -1;
	}

	return 0;
}

void
__iconv_free_list(char **list, size_t sz)
{
	_citrus_esdb_free_list(list, sz);
}
@


1.4
log
@expose libiconv{,_open,_close} symbols too, GNU libiconv-style
@
text
@d32 1
a32 1
__RCSID("$MirOS$");
a41 1
#ifdef CITRUS_ICONV
a155 36

#else
iconv_t
/*ARGSUSED*/
_iconv_open(const char *in, const char *out)
{
	errno = EINVAL;
	return ((iconv_t)-1);
}
int
/*ARGSUSED*/
_iconv_close(iconv_t handle)
{
	errno = EBADF;
	return (-1);
}
size_t
/*ARGSUSED*/
_iconv(iconv_t handle, const char **in, size_t *szin, char **out, size_t *szout)
{
	errno = EBADF;
	return ((size_t)-1);
}
int
/*ARGSUSED*/
__iconv_get_list(char ***rlist, size_t *rsz)
{
	errno = EINVAL;
	return -1;
}
void
/*ARGSUSED*/
__iconv_free_list(char **list, size_t sz)
{
}
#endif
@


1.3
log
@commit a working, stripped-down (may be cleaning up the attic later,
but not for now) BSD-licenced libiconv replacement
@
text
@d32 1
d56 5
@


1.2
log
@slowly proceed in creating a library
@
text
@d51 5
a55 5
//#ifdef __weak_alias
__weak_alias(iconv, _iconv)
__weak_alias(iconv_open, _iconv_open)
__weak_alias(iconv_close, _iconv_close)
//#endif
@


1.1
log
@Initial revision
@
text
@d29 2
a30 2
#include <sys/cdefs.h>
#if defined(LIBC_SCCS) && !defined(lint)
a31 1
#endif /* LIBC_SCCS and not lint */
d51 1
a51 1
#ifdef __weak_alias
d55 1
a55 1
#endif
@


1.1.3.1
log
@Import some TNF sources for citrus, to be stripped down into an iconv(3) lib
@
text
@@
