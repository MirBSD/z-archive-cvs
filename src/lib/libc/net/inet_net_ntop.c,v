head	1.2;
access;
symbols
	MIRBSD_10:1.1.1.3.0.4
	MIRBSD_10_BASE:1.1.1.3
	MIRBSD_9_BASE:1.1.1.3
	MIRBSD_8:1.1.1.3.0.2
	MIRBSD_8_BASE:1.1.1.3
	cvs-200509212000:1.1.1.3
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2009.11.09.21.30.51;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004AF88A0F18F30769;

1.1
date	2005.02.05.17.24.49;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.49;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.09.13.04.59;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	500642cfcb8db32b;

1.1.1.3
date	2005.09.21.20.34.22;	author tg;	state Exp;
branches;
next	;
commitid	20cd4331c3c732a2;


desc
@@


1.2
log
@fix __CRAZY=Yes build (or work around bugs we canâ€™t fix atm)
@
text
@/*	$OpenBSD: inet_net_ntop.c,v 1.6 2005/08/06 20:30:03 espie Exp $	*/

/*
 * Copyright (c) 1996 by Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM DISCLAIMS
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INTERNET SOFTWARE
 * CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

__RCSID("$MirOS$");

static char *inet_net_ntop_ipv4(const u_char *, int, char *, size_t);

/*
 * char *
 * inet_net_ntop(af, src, bits, dst, size)
 *	convert network number from network to presentation format.
 *	generates CIDR style result always.
 * return:
 *	pointer to dst, or NULL if an error occurred (check errno).
 * author:
 *	Paul Vixie (ISC), July 1996
 */
char *
inet_net_ntop(int af, const void *src, int bits, char *dst, size_t size)
{
	switch (af) {
	case AF_INET:
		return (inet_net_ntop_ipv4(src, bits, dst, size));
	default:
		errno = EAFNOSUPPORT;
		return (NULL);
	}
}

/*
 * static char *
 * inet_net_ntop_ipv4(src, bits, dst, size)
 *	convert IPv4 network number from network to presentation format.
 *	generates CIDR style result always.
 * return:
 *	pointer to dst, or NULL if an error occurred (check errno).
 * note:
 *	network byte order assumed.  this means 192.5.5.240/28 has
 *	0x11110000 in its fourth octet.
 * author:
 *	Paul Vixie (ISC), July 1996
 */
static char *
inet_net_ntop_ipv4(const u_char *src, int bits, char *dst, size_t size)
{
	char *odst = dst;
	u_int m;
	int b;
	char *ep;
	int advance;

	ep = dst + size;
	if (ep <= dst)
		goto emsgsize;

	if (bits < 0 || bits > 32) {
		errno = EINVAL;
		return (NULL);
	}
	if (bits == 0) {
		if ((size_t)(ep - dst) < sizeof("0"))
			goto emsgsize;
		*dst++ = '0';
		*dst = '\0';
	}

	/* Format whole octets. */
	for (b = bits / 8; b > 0; b--) {
		if ((size_t)(ep - dst) < sizeof("255."))
			goto emsgsize;
		advance = snprintf(dst, ep - dst, "%u", *src++);
		if (advance <= 0 || advance >= ep - dst)
			goto emsgsize;
		dst += advance;
		if (b > 1) {
			if (dst + 1 >= ep)
				goto emsgsize;
			*dst++ = '.';
			*dst = '\0';
		}
	}

	/* Format partial octet. */
	b = bits % 8;
	if (b > 0) {
		if ((size_t)(ep - dst) < sizeof(".255"))
			goto emsgsize;
		if (dst != odst)
			if (dst + 1 >= ep)
				goto emsgsize;
			*dst++ = '.';
		m = ((1 << b) - 1) << (8 - b);
		advance = snprintf(dst, ep - dst, "%u", *src & m);
		if (advance <= 0 || advance >= ep - dst)
			goto emsgsize;
		dst += advance;
	}

	/* Format CIDR /width. */
	if ((size_t)(ep - dst) < sizeof("/32"))
		goto emsgsize;
	advance = snprintf(dst, ep - dst, "/%u", bits);
	if (advance <= 0 || advance >= ep - dst)
		goto emsgsize;
	dst += advance;
	return (odst);

 emsgsize:
	errno = EMSGSIZE;
	return (NULL);
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_ntop.c,v 1.4 2004/09/15 19:01:28 deraadt Exp $	*/
a19 8
#if defined(LIBC_SCCS) && !defined(lint)
#if 0
static const char rcsid[] = "$From: inet_net_ntop.c,v 8.2 1996/08/08 06:54:44 vixie Exp $";
#else
static const char rcsid[] = "$OpenBSD: inet_net_ntop.c,v 1.4 2004/09/15 19:01:28 deraadt Exp $";
#endif
#endif

d30 2
d45 1
a45 6
inet_net_ntop(af, src, bits, dst, size)
	int af;
	const void *src;
	int bits;
	char *dst;
	size_t size;
d70 1
a70 5
inet_net_ntop_ipv4(src, bits, dst, size)
	const u_char *src;
	int bits;
	char *dst;
	size_t size;
d87 1
a87 1
		if (ep - dst < sizeof "0")
d95 1
a95 1
		if (ep - dst < sizeof "255.")
d112 1
a112 1
		if (ep - dst < sizeof ".255")
d126 1
a126 1
	if (ep - dst < sizeof "/32")
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@sync resolver code with OpenBSD (better)
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_ntop.c,v 1.5 2005/03/25 13:24:12 otto Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: inet_net_ntop.c,v 1.5 2005/03/25 13:24:12 otto Exp $";
d51 6
a56 1
inet_net_ntop(int af, const void *src, int bits, char *dst, size_t size)
d81 5
a85 1
inet_net_ntop_ipv4(const u_char *src, int bits, char *dst, size_t size)
@


1.1.1.3
log
@Import OpenBSD's libc as of today, minus some of the locale stuff,
and with brk malloc instead of mmap malloc
@
text
@d1 1
a1 1
/*	$OpenBSD: inet_net_ntop.c,v 1.6 2005/08/06 20:30:03 espie Exp $	*/
d20 8
@


