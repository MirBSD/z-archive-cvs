head	1.6;
access;
symbols
	MIRBSD_10:1.4.0.4
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4
	cvs-200509212000:1.1.1.3
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2010.01.07.22.34.53;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004B46615B7479BC1B;

1.5
date	2009.11.09.21.30.51;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004AF88A0F18F30769;

1.4
date	2005.09.22.20.40.03;	author tg;	state Exp;
branches;
next	1.3;
commitid	2258433316aba805;

1.3
date	2005.07.09.13.23.32;	author tg;	state Exp;
branches;
next	1.2;
commitid	156f42cfcfe741cc;

1.2
date	2005.03.06.20.28.42;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.24.50;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.50;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.09.13.04.59;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	500642cfcb8db32b;

1.1.1.3
date	2005.09.21.20.34.23;	author tg;	state Exp;
branches;
next	;
commitid	20cd4331c3c732a2;


desc
@@


1.6
log
@facilitate code and data sharing: move some passwd(8) functions
sources by other stuff into libc or libutil; make commons out of
things like digits, base64 data or code, etc. (publish the data
parts as well, justin case) plus do some const cleanup
@
text
@/*	$OpenBSD: linkaddr.c,v 1.5 2005/08/06 20:30:03 espie Exp $ */
/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <net/if_dl.h>
#include <string.h>

__RCSID("$MirOS: src/lib/libc/net/linkaddr.c,v 1.5 2009/11/09 21:30:51 tg Exp $");

extern const uint8_t mbsd_digits_hex[17];

/* States*/
#define NAMING	0
#define GOTONE	1
#define GOTTWO	2
#define RESET	3
/* Inputs */
#define	DIGIT	(4*0)
#define	END	(4*1)
#define DELIM	(4*2)
#define LETTER	(4*3)

void
link_addr(const char *addr, struct sockaddr_dl *sdl)
{
	char *cp = sdl->sdl_data;
	char *cplim = sdl->sdl_len + (char *)sdl;
	int byte = 0, state = NAMING;
	size_t new = 0;

	memset((char *)&sdl->sdl_family, 0, sdl->sdl_len - 1);
	sdl->sdl_family = AF_LINK;
	do {
		state &= ~LETTER;
		if ((*addr >= '0') && (*addr <= '9')) {
			new = *addr - '0';
		} else if ((*addr >= 'a') && (*addr <= 'f')) {
			new = *addr - 'a' + 10;
		} else if ((*addr >= 'A') && (*addr <= 'F')) {
			new = *addr - 'A' + 10;
		} else if (*addr == 0) {
			state |= END;
		} else if (state == NAMING &&
			   (((*addr >= 'A') && (*addr <= 'Z')) ||
			   ((*addr >= 'a') && (*addr <= 'z'))))
			state |= LETTER;
		else
			state |= DELIM;
		addr++;
		switch (state /* | INPUT */) {
		case NAMING | DIGIT:
		case NAMING | LETTER:
			*cp++ = addr[-1];
			continue;
		case NAMING | DELIM:
			state = RESET;
			sdl->sdl_nlen = cp - sdl->sdl_data;
			continue;
		case GOTTWO | DIGIT:
			*cp++ = byte;
			/* FALLTHROUGH */
		case RESET | DIGIT:
			state = GOTONE;
			byte = new;
			continue;
		case GOTONE | DIGIT:
			state = GOTTWO;
			byte = new + (byte << 4);
			continue;
		default: /* | DELIM */
			state = RESET;
			*cp++ = byte;
			byte = 0;
			continue;
		case GOTONE | END:
		case GOTTWO | END:
			*cp++ = byte;
			/* FALLTHROUGH */
		case RESET | END:
			break;
		}
		break;
	} while (cp < cplim);
	sdl->sdl_alen = cp - LLADDR(sdl);
	new = cp - (char *)sdl;
	if (new > sizeof(*sdl))
		sdl->sdl_len = new;
	return;
}

char *
link_ntoa(const struct sockaddr_dl *sdl)
{
	static char obuf[64];
	char *out = obuf; 
	int i;
	u_char *in = (u_char *)LLADDR(sdl);
	u_char *inlim = in + sdl->sdl_alen;
	int firsttime = 1;

	if (sdl->sdl_nlen) {
		memmove(obuf, sdl->sdl_data, sdl->sdl_nlen);
		out += sdl->sdl_nlen;
		if (sdl->sdl_alen)
			*out++ = ':';
	}
	while (in < inlim) {
		if (firsttime)
			firsttime = 0;
		else
			*out++ = '.';
		i = *in++;
		if (i > 0xf) {
			out[1] = mbsd_digits_hex[i & 0xf];
			i >>= 4;
			out[0] = mbsd_digits_hex[i];
			out += 2;
		} else
			*out++ = mbsd_digits_hex[i];
	}
	*out = 0;
	return (obuf);
}
@


1.5
log
@fix __CRAZY=Yes build (or work around bugs we canâ€™t fix atm)
@
text
@d36 3
a38 1
__RCSID("$MirOS: src/lib/libc/net/linkaddr.c,v 1.4 2005/09/22 20:40:03 tg Exp $");
a118 2
static char hexlist[] = "0123456789abcdef";

d142 1
a142 1
			out[1] = hexlist[i & 0xf];
d144 1
a144 1
			out[0] = hexlist[i];
d147 1
a147 1
			*out++ = hexlist[i];
@


1.4
log
@merge
@
text
@a0 1
/**	$MirOS: src/lib/libc/net/linkaddr.c,v 1.3 2005/07/09 13:23:32 tg Exp $ */
d36 1
a36 1
__RCSID("$MirOS: src/lib/libc/net/linkaddr.c,v 1.3 2005/07/09 13:23:32 tg Exp $");
d54 2
a55 1
	int byte = 0, state = NAMING, new = 0;
@


1.3
log
@merge
@
text
@d1 2
a2 1
/* $MirOS: src/lib/libc/net/linkaddr.c,v 1.2 2005/03/06 20:28:42 tg Exp $ */
a31 4
#if 0
static char rcsid[] = "$OpenBSD: linkaddr.c,v 1.4 2005/03/25 13:24:12 otto Exp $";
#endif /* LIBC_SCCS and not lint */

d37 1
a37 1
__RCSID("$MirOS$");
@


1.2
log
@merge src/lib
@
text
@d1 1
a1 1
/* $MirOS$ */
d31 2
a32 2
#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: linkaddr.c,v 1.3 2003/06/02 20:18:35 millert Exp $";
d40 2
d54 1
a54 3
link_addr(addr, sdl)
	register const char *addr;
	register struct sockaddr_dl *sdl;
d56 1
a56 1
	register char *cp = sdl->sdl_data;
d58 1
a58 1
	register int byte = 0, state = NAMING, new = 0;
d123 1
a123 2
link_ntoa(sdl)
	register const struct sockaddr_dl *sdl;
d126 3
a128 3
	register char *out = obuf;
	register int i;
	register u_char *in = (u_char *)LLADDR(sdl);
@


1.1
log
@Initial revision
@
text
@d1 1
d58 1
a58 1
	register int byte = 0, state = NAMING, new;
d60 1
a60 1
	bzero((char *)&sdl->sdl_family, sdl->sdl_len - 1);
d112 1
a112 1
	} while (cp < cplim); 
d127 1
a127 1
	register char *out = obuf; 
d134 1
a134 1
		bcopy(sdl->sdl_data, obuf, sdl->sdl_nlen);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@sync resolver code with OpenBSD (better)
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: linkaddr.c,v 1.4 2005/03/25 13:24:12 otto Exp $";
d51 3
a53 1
link_addr(const char *addr, struct sockaddr_dl *sdl)
d55 1
a55 1
	char *cp = sdl->sdl_data;
d57 1
a57 1
	int byte = 0, state = NAMING, new;
d122 2
a123 1
link_ntoa(const struct sockaddr_dl *sdl)
d126 3
a128 3
	char *out = obuf; 
	int i;
	u_char *in = (u_char *)LLADDR(sdl);
@


1.1.1.3
log
@Import OpenBSD's libc as of today, minus some of the locale stuff,
and with brk malloc instead of mmap malloc
@
text
@a0 1
/*	$OpenBSD: linkaddr.c,v 1.5 2005/08/06 20:30:03 espie Exp $ */
d30 4
@


