head	1.4;
access;
symbols
	MIRBSD_10:1.4.0.4
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4
	cvs-200509212000:1.1.1.3
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2005.09.22.20.40.02;	author tg;	state Exp;
branches;
next	1.3;
commitid	2258433316aba805;

1.3
date	2005.07.09.13.23.31;	author tg;	state Exp;
branches;
next	1.2;
commitid	156f42cfcfe741cc;

1.2
date	2005.03.06.20.28.42;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.24.46;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.46;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.09.13.04.57;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	500642cfcb8db32b;

1.1.1.3
date	2005.09.21.20.34.22;	author tg;	state Exp;
branches;
next	;
commitid	20cd4331c3c732a2;


desc
@@


1.4
log
@merge
@
text
@/**	$MirOS: src/lib/libc/net/ethers.c,v 1.3 2005/07/09 13:23:31 tg Exp $	*/
/*	$OpenBSD: ethers.c,v 1.20 2005/08/06 20:30:03 espie Exp $	*/

/*
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* 
 * ethers(3) a la Sun.
 * Originally Written by Roland McGrath <roland@@frob.com> 10/14/93.
 * Substantially modified by Todd C. Miller <Todd.Miller@@courtesan.com>
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <sys/param.h>
#include <paths.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

__RCSID("$MirOS: src/lib/libc/net/ethers.c,v 1.3 2005/07/09 13:23:31 tg Exp $");

#ifndef _PATH_ETHERS
#define _PATH_ETHERS	"/etc/ethers"
#endif

static char * _ether_aton(const char *, struct ether_addr *);

char *
ether_ntoa(struct ether_addr *e)
{
	static char a[] = "xx:xx:xx:xx:xx:xx";

	(void)snprintf(a, sizeof a, "%02x:%02x:%02x:%02x:%02x:%02x",
	    e->ether_addr_octet[0], e->ether_addr_octet[1],
	    e->ether_addr_octet[2], e->ether_addr_octet[3],
	    e->ether_addr_octet[4], e->ether_addr_octet[5]);

	return (a);
}

static char *
_ether_aton(const char *s, struct ether_addr *e)
{
	int i;
	long l;
	char *pp;

	while (isspace(*s))
		s++;

	/* expect 6 hex octets separated by ':' or space/NUL if last octet */
	for (i = 0; i < 6; i++) {
		l = strtol(s, &pp, 16);
		if (pp == s || l > 0xFF || l < 0)
			return (NULL);
		if (!(*pp == ':' || (i == 5 && (isspace(*pp) || *pp == '\0'))))
			return (NULL);
		e->ether_addr_octet[i] = (u_char)l;
		s = pp + 1;
	}

	/* return character after the octets ala strtol(3) */
	return (pp);
}

struct ether_addr *
ether_aton(const char *s)
{
	static struct ether_addr n;

	return (_ether_aton(s, &n) ? &n : NULL);
}

int
ether_ntohost(char *hostname, struct ether_addr *e)
{
	FILE *f; 
	char buf[BUFSIZ+1], *p;
	size_t len;
	struct ether_addr try;

	f = fopen(_PATH_ETHERS, "r");
	if (f == NULL)
		return (-1);
	while ((p = fgetln(f, &len)) != NULL) {
		if (p[len-1] == '\n')
			len--;
		if (len > sizeof(buf) - 2)
			continue;
		(void)memcpy(buf, p, len);
		buf[len] = '\n';	/* code assumes newlines later on */
		buf[len+1] = '\0';
		if (ether_line(buf, &try, hostname) == 0 &&
		    memcmp((void *)&try, (void *)e, sizeof(try)) == 0) {
			(void)fclose(f);
			return (0);
		}     
	}
	(void)fclose(f);
	errno = ENOENT;
	return (-1);
}

int
ether_hostton(const char *hostname, struct ether_addr *e)
{
	FILE *f;
	char buf[BUFSIZ+1], *p;
	char try[MAXHOSTNAMELEN];
	size_t len;

	f = fopen(_PATH_ETHERS, "r");
	if (f==NULL)
		return (-1);

	while ((p = fgetln(f, &len)) != NULL) {
		if (p[len-1] == '\n')
			len--;
		if (len > sizeof(buf) - 2)
			continue;
		memcpy(buf, p, len);
		buf[len] = '\n';	/* code assumes newlines later on */
		buf[len+1] = '\0';
		if (ether_line(buf, e, try) == 0 && strcmp(hostname, try) == 0) {
			(void)fclose(f);
			return (0);
		}
	}
	(void)fclose(f);
	errno = ENOENT;
	return (-1);
}

int
ether_line(const char *line, struct ether_addr *e, char *hostname)
{
	char *p;
	size_t n;

	/* Parse "xx:xx:xx:xx:xx:xx" */
	if ((p = _ether_aton(line, e)) == NULL || (*p != ' ' && *p != '\t'))
		goto bad;

	/* Now get the hostname */
	while (isspace(*p))
		p++;
	if (*p == '\0')
		goto bad;
	n = strcspn(p, " \t\n");
	if (n >= MAXHOSTNAMELEN)
		goto bad;
	strlcpy(hostname, p, n + 1);
	return (0);

bad:
	errno = EINVAL;
	return (-1);
}
@


1.3
log
@merge
@
text
@d1 2
a2 2
/**	$MirOS: src/lib/libc/net/ethers.c,v 1.2 2005/03/06 20:28:42 tg Exp $	*/
/*	$OpenBSD: ethers.c,v 1.19 2005/03/28 06:19:58 tedu Exp $	*/
d39 1
a39 1
__RCSID("$MirOS: src/lib/libc/net/ethers.c,v 1.2 2005/03/06 20:28:42 tg Exp $");
@


1.2
log
@merge src/lib
@
text
@d1 2
a2 2
/**	$MirOS$	*/
/*	$OpenBSD: ethers.c,v 1.17 2004/02/16 19:41:12 otto Exp $	*/
d38 2
a39 1
__RCSID("$MirOS$");
d45 1
a45 1
static char * _ether_aton(char *, struct ether_addr *);
d48 1
a48 2
ether_ntoa(e)
	struct ether_addr *e;
d61 1
a61 3
_ether_aton(s, e)
	char *s;
	struct ether_addr *e;
d86 1
a86 2
ether_aton(s)
	char *s;
d94 1
a94 3
ether_ntohost(hostname, e)
	char *hostname;
	struct ether_addr *e;
d124 1
a124 3
ether_hostton(hostname, e)
	char *hostname;
	struct ether_addr *e;
d154 1
a154 4
ether_line(line, e, hostname)
	char *line;
	struct ether_addr *e;
	char *hostname;
@


1.1
log
@Initial revision
@
text
@d1 1
a25 4
#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: ethers.c,v 1.17 2004/02/16 19:41:12 otto Exp $";
#endif /* LIBC_SCCS and not lint */

d38 1
a38 3
#ifdef YP
#include <rpcsvc/ypclnt.h>
#endif
a104 12
#ifdef YP
	char trybuf[sizeof("xx:xx:xx:xx:xx:xx")];
	int trylen;
#endif

#ifdef YP
	snprintf(trybuf, sizeof trybuf, "%x:%x:%x:%x:%x:%x", 
	    e->ether_addr_octet[0], e->ether_addr_octet[1],
	    e->ether_addr_octet[2], e->ether_addr_octet[3],
	    e->ether_addr_octet[4], e->ether_addr_octet[5]);
	trylen = strlen(trybuf);
#endif
a116 20
#ifdef YP
		/* A + in the file means try YP now.  */
		if (!strncmp(buf, "+\n", sizeof(buf))) {
			char *ypbuf, *ypdom;
			int ypbuflen;

			if (yp_get_default_domain(&ypdom))
				continue;
			if (yp_match(ypdom, "ethers.byaddr", trybuf,
			    trylen, &ypbuf, &ypbuflen))
				continue;
			if (ether_line(ypbuf, &try, hostname) == 0) {
				free(ypbuf);
				(void)fclose(f);
				return (0);
			}
			free(ypbuf);
			continue;
		}
#endif
a136 3
#ifdef YP
	int hostlen = strlen(hostname);
#endif
a149 20
#ifdef YP
		/* A + in the file means try YP now.  */
		if (!strncmp(buf, "+\n", sizeof(buf))) {
			char *ypbuf, *ypdom;
			int ypbuflen;

			if (yp_get_default_domain(&ypdom))
				continue;
			if (yp_match(ypdom, "ethers.byname", hostname, hostlen,
			    &ypbuf, &ypbuflen))
				continue;
			if (ether_line(ypbuf, e, try) == 0) {
				free(ypbuf);
				(void)fclose(f);
				return (0);
			}
			free(ypbuf);
			continue;
		}
#endif
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@sync resolver code with OpenBSD (better)
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.19 2005/03/28 06:19:58 tedu Exp $	*/
d26 1
a26 1
static char rcsid[] = "$OpenBSD: ethers.c,v 1.19 2005/03/28 06:19:58 tedu Exp $";
d49 1
a49 1
static char * _ether_aton(const char *, struct ether_addr *);
d52 2
a53 1
ether_ntoa(struct ether_addr *e)
d66 3
a68 1
_ether_aton(const char *s, struct ether_addr *e)
d93 2
a94 1
ether_aton(const char *s)
d102 3
a104 1
ether_ntohost(char *hostname, struct ether_addr *e)
d166 3
a168 1
ether_hostton(const char *hostname, struct ether_addr *e)
d221 4
a224 1
ether_line(const char *line, struct ether_addr *e, char *hostname)
@


1.1.1.3
log
@Import OpenBSD's libc as of today, minus some of the locale stuff,
and with brk malloc instead of mmap malloc
@
text
@d1 1
a1 1
/*	$OpenBSD: ethers.c,v 1.20 2005/08/06 20:30:03 espie Exp $	*/
d25 4
@


