head	1.8;
access;
symbols
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.1.1.1
	cvs-200601301245:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.8
date	2018.10.07.00.55.52;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005BB959AF4957DA30;

1.7
date	2018.08.10.02.53.51;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005B6CFE0B5BDFE404;

1.6
date	2014.02.09.22.35.54;	author tg;	state Exp;
branches;
next	1.5;
commitid	10052F802DB25EB293D;

1.5
date	2008.10.04.20.33.13;	author tg;	state Exp;
branches;
next	1.4;
commitid	10048E7D2D568C1FFAE;

1.4
date	2008.08.17.00.19.08;	author tg;	state Exp;
branches;
next	1.3;
commitid	10048A76D6E14FD6E0B;

1.3
date	2008.08.16.23.18.11;	author tg;	state Exp;
branches;
next	1.2;
commitid	10048A760490F474BF1;

1.2
date	2006.11.20.23.50.48;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045623E721D637299;

1.1
date	2006.01.30.12.51.38;	author tg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	10043DE0BE73819FB87;

1.1.1.1
date	2006.01.30.12.51.38;	author tg;	state Exp;
branches;
next	;
commitid	10043DE0BE73819FB87;


desc
@@


1.8
log
@fix header location
@
text
@.\" $MirOS: src/lib/libc/locale/mbsrtowcs.3,v 1.6 2014/02/09 22:35:54 tg Exp $
.\" $OpenBSD: mbsrtowcs.3,v 1.1 2005/05/11 18:44:12 espie Exp $
.\" $NetBSD: mbsrtowcs.3,v 1.6 2003/09/08 17:54:31 wiz Exp $
.\"
.\" Copyright (c)2002 Citrus Project,
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: February 9 2014 $
.Dt MBSRTOWCS 3
.Os
.\" ----------------------------------------------------------------------
.Sh NAME
.Nm mbsrtowcs ,
.Nm mbsnrtowcs ,
.Nm mbsnrtowcsvis
.Nd convert a multibyte character string to a wide character string \
(restartable)
.\" ----------------------------------------------------------------------
.Sh SYNOPSIS
.Fd #include <wchar.h>
.Ft size_t
.Fn mbsrtowcs "wchar_t *pwcs" "const char **s" "size_t n" "mbstate_t *ps"
.Ft size_t
.Fn mbsnrtowcs "wchar_t *pwcs" "const char **s" "size_t max" "size_t n" "mbstate_t *ps"
.In mbfun.h
.Ft size_t
.Fn mbsnrtowcsvis "wchar_t *pwcs" "const char **s" "size_t max" "size_t n" "mbstate_t *ps"
.\" ----------------------------------------------------------------------
.Sh DESCRIPTION
.Fn mbsrtowcs
converts the multibyte character string indirectly pointed to by
.Fa s
to the corresponding wide character string, and stores it in the
array pointed to by
.Fa pwcs .
.Fn mbsnrtowcs
behaves the same, but reads at most
.Fa max
octets from the string indirectly pointed to by
.Fa s .
.Fn mbsnrtowcsvis
behaves the same, but automatically converts input octets from 8-bit to UCS.
The conversion stops due to the following reasons:
.Bl -bullet
.It
The conversion reaches a null byte.
In this case, the null byte is also converted.
.It
.Fn mbsrtowcs
or
.Fn mbsnrtowcs
has already stored
.Fa n
wide characters.
.It
The conversion encounters an invalid character.
.It
The
.Fn mbsnrtowcs
function has already devoured
.Fa max
octets.
.El
.Pp
Each character is converted as if
.Xr optu8to16 3
is continuously called.
.Pp
In the case of
.Fn mbsnrtowcsvis ,
each character is converted as if
.Xr optu8to16vis 3
is continuously called; if the
.Fa max
argument is initially set to 0, the remaining state is drained.
.Pp
After conversion,
if
.Fa pwcs
is not a
.Dv NULL
pointer,
the pointer object pointed to by
.Fa s
is a
.Dv NULL
pointer (if the conversion is stopped due to reaching a null byte)
or the first byte of the character just after the last character converted.
.Pp
If
.Fa pwcs
is not a
null pointer and the conversion is stopped due to reaching
a null byte, the
.Fn mbsrtowcs
and
.Fn mbsnrtowcs
functions place the state object pointed to by
.Fa ps
to an initial state after the conversion has taken place.
.Pp
The behaviour of the
.Fn mbsrtowcs
and
.Fn mbsnrtowcs
functions
is affected by the
.Dv LC_CTYPE
category of the current locale.
.Pp
These are the special cases:
.Bl -tag -width 012345678901
.It "s == NULL || *s == NULL"
Undefined (may cause the program to crash).
.It "pwcs == NULL"
The conversion has taken place, but the resultant wide character string
was discarded.
In this case, the pointer object pointed to by
.Fa s
is not modified and
.Fa n
is ignored.
.It "ps == NULL"
.Fn mbsrtowcs
uses its own internal state object to keep the conversion state,
instead of
.Fa ps
mentioned in this manual page.
.Fn mbsnrtowcs
has an own internal state which is different from the one of
.Fn mbsrtowcs .
.Pp
Calling any other functions in
.Em libc
never change the internal
state of
.Fn mbsnrtowcs
or
.Fn mbsrtowcs ,
which is initialised at startup time of the program.
.El
.\" ----------------------------------------------------------------------
.Sh RETURN VALUES
.Fn mbsrtowcs
and
.Fn mbsnrtowcs
return:
.Bl -tag -width 012345678901
.It 0 or positive
The value returned is the number of elements stored in the array pointed to by
.Fa pwcs ,
except for a terminating null wide character (if any).
If
.Fa pwcs
is not null and the value returned is equal to
.Fa n ,
the wide character string pointed to by
.Fa pwcs
is not null terminated.
If
.Fa pwcs
is a null pointer, the value returned is the number of elements to contain
the whole string converted, except for a terminating null wide character.
.It (size_t)-1
The array indirectly pointed to by
.Fa s
contains a byte sequence forming invalid character.
In this case,
.Fn mbsrtowcs
and
.Fn mbsnrtowcs
set
.Va errno
to indicate the error.
.El
.\" ----------------------------------------------------------------------
.Sh ERRORS
.Fn mbsrtowcs
and
.Fn mbsnrtowcs
may cause an error in the following cases:
.Bl -tag -width Er
.It Bq Er EILSEQ
The pointer pointed to by
.Fa s
points to an invalid or incomplete multibyte character.
.It Bq Er EINVAL
.Fa ps
points to an invalid or uninitialized mbstate_t object.
.El
.\" ----------------------------------------------------------------------
.Sh SEE ALSO
.Xr mbrtowc 3 ,
.Xr mbstowcs 3 ,
.Xr optu8to16 3 ,
.Xr optu8to16vis 3 ,
.Xr setlocale 3
.\" ----------------------------------------------------------------------
.Sh STANDARDS
The
.Fn mbsrtowcs
function conforms to
.St -isoC-amd1 .
The
.Fn mbsnrtowcs
function is a GNU extension.
.Pp
The
.Fn mbsnrtowcsvis
function assumes codepage 1252 and maps holes into distinguishable codepoints.
This extended function declares a macro with the same name that can be
used to check for its presence.
.Sh HISTORY
.Fn mbsnrtowcs
first appeared in
.Mx 10 .
.Fn mbsnrtowcsvis
first appeared in
.Mx 11 .
@


1.7
log
@same as in commitid 1005B6CF36E3932B560, plus assorted cleanup
@
text
@d46 1
@


1.6
log
@nuke the restrict qualifiers; C99 says this makes no externally visible difference and is only a compiler hint and a limitation to the interface implementor
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/locale/mbsrtowcs.3,v 1.5 2008/10/04 20:33:13 tg Exp $
d29 1
a29 1
.Dd $Mdocdate: October 4 2008 $
d62 1
a62 1
behaves the same, but automatically converts input octets from 8bit to unicode.
@


1.5
log
@this uses optu8to16(3) not mbrtowc(3) ⇒ no practical difference, but
the interesting thing is that mbsrtowcs(3) on a NUL-terminated string
will never fail, nor will mbsnrtowcs{,vis}, but if their 「max」 ar-
gument includes the NUL, or mbsrtowcs is used, 「ps」 will afterwards
be in the initial state ☺
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/locale/mbsrtowcs.3,v 1.4 2008/08/17 00:19:08 tg Exp $
d29 1
a29 1
.Dd $Mdocdate: August 17 2008 $
d43 1
a43 2
.Fn mbsrtowcs "wchar_t * restrict pwcs" "const char ** restrict s" "size_t n" \
"mbstate_t * restrict ps"
d45 1
a45 2
.Fn mbsnrtowcs "wchar_t * restrict pwcs" "const char ** restrict s" \
"size_t max" "size_t n" "mbstate_t * restrict ps"
d47 1
a47 2
.Fn mbsnrtowcsvis "wchar_t * restrict pwcs" "const char ** restrict s" \
"size_t max" "size_t n" "mbstate_t * restrict ps"
d223 1
a223 7
.\" .St -isoC-amd1 .
ISO/IEC 9899/AMD1:1995
.Pq Dq ISO C90, Amendment 1 .
The restrict qualifier is added at
.\" .St -isoC99 .
ISO/IEC 9899/1999
.Dq Pq ISO C99 .
@


1.4
log
@extended conversion functions: “forgiving” variants of mbrtowc¹ and
mbsnrtowcs² encoding raw octets as if they were from codepage 1252,
or ISO-8859-1, into Unicode, instead of the PUA OPTU-16 range.

① called optu8to16vis with semantics of optu8to16
② called mbsnrtowcsvis with semantics of mbsnrtowcs

Note: mbtowc, mbstowcs and mbsrtowcs can be emulated by calling
mbrtowc(vis) and mbsnrtowcs(vis), respectively, with appropriate
arguments. The semantics have been chosen to not exactly match
the standard since the extensions are reasonably easy to use and
granted since these functions are not standardised anyway.
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/locale/mbsrtowcs.3,v 1.3 2008/08/16 23:18:11 tg Exp $
d29 1
a29 1
.Dd $Mdocdate: August 16 2008 $
d89 1
a89 1
.Xr mbrtowc 3
@


1.3
log
@typo
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/locale/mbsrtowcs.3,v 1.2 2006/11/20 23:50:48 tg Exp $
d29 1
a29 1
.Dd $Mdocdate$
d35 2
a36 1
.Nm mbsnrtowcs
d48 3
d64 2
d92 8
d218 2
d236 6
d246 3
@


1.2
log
@implement mbsnrtowcs(3) and wcsnrtombs(3) - including manual pages

these are only visible if any of
	_GNU_SOURCE and not __STRICT_ANSI__ (gcc -ansi)
	(_OPENBSD_SOURCE or _NETBSD_SOURCE) and none of (_ANSI_SOURCE,
	    XPG and POSIX stuff) and not __STRICT_ANSI__ (gcc -ansi)
	_ALL_SOURCE and not __STRICT_ANSI__ (gcc -ansi)
are defined, since they're GNU (and MirOS) extensions
@
text
@d1 1
a1 1
.\" $MirOS$
d29 1
a29 1
.Dd November 20, 2006
d125 1
a125 1
The conversion hass taken place, but the resultant wide character string
@


1.1
log
@Initial revision
@
text
@d1 1
d29 1
a29 1
.Dd February 4, 2002
d34 3
a36 2
.Nm mbsrtowcs
.Nd converts a multibyte character string to a wide character string \
d44 3
a48 1
The
d55 5
a65 1
The
d67 2
d74 6
d105 3
a107 1
places the state object pointed to by
d113 3
a132 1
The
d138 3
d146 2
d149 1
a149 1
which is initialized at startup time of the program.
d154 3
a156 1
returns:
d179 3
a181 1
sets
d188 2
d217 7
@


1.1.1.1
log
@Import I18N manual pages for functions we either have or will have
@
text
@@
