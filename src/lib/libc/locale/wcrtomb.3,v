head	1.11;
access;
symbols
	MIRBSD_10:1.3.0.2
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.2
	cvs-200601301245:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.11
date	2018.08.10.02.53.51;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005B6CFE0B5BDFE404;

1.10
date	2014.02.09.22.35.54;	author tg;	state Exp;
branches;
next	1.9;
commitid	10052F802DB25EB293D;

1.9
date	2012.09.01.17.53.01;	author tg;	state Exp;
branches;
next	1.8;
commitid	10050424B7B08759926;

1.8
date	2010.03.17.18.44.44;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004BA122F154AC5096;

1.7
date	2008.11.22.09.02.34;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004927CA84091CE619;

1.6
date	2008.11.22.08.40.52;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004927C5A8177AD317;

1.5
date	2008.08.01.22.09.53;	author tg;	state Exp;
branches;
next	1.4;
commitid	100489389C5422494C6;

1.4
date	2008.08.01.22.04.56;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004893889978AC31F7;

1.3
date	2006.10.27.15.52.26;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045422B504C49C1D4;

1.2
date	2006.06.03.13.39.28;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004481911B7DF40067;

1.1
date	2006.01.30.12.51.38;	author tg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	10043DE0BE73819FB87;

1.1.1.1
date	2006.01.30.12.51.38;	author tg;	state Exp;
branches;
next	;
commitid	10043DE0BE73819FB87;


desc
@@


1.11
log
@same as in commitid 1005B6CF36E3932B560, plus assorted cleanup
@
text
@.\" $MirOS: src/lib/libc/locale/wcrtomb.3,v 1.10 2014/02/09 22:35:54 tg Exp $
.\" $OpenBSD: wcrtomb.3,v 1.1 2005/05/11 18:44:12 espie Exp $
.\" $NetBSD: wcrtomb.3,v 1.4 2003/09/08 17:54:31 wiz Exp $
.\"
.\" Copyright (c) 2008, 2010
.\"	Thorsten Glaser <tg@@mirbsd.org>
.\" Copyright (c)2002 Citrus Project,
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: February 9 2014 $
.Dt WCRTOMB 3
.Os
.\" ----------------------------------------------------------------------
.Sh NAME
.Nm optu16to8 ,
.Nm wcrtomb
.Nd converts a wide character to a multibyte character (restartable)
.\" ----------------------------------------------------------------------
.Sh SYNOPSIS
.Fd #include <wchar.h>
.Ft size_t
.Fn optu16to8 "char *s" "wchar_t wc" "mbstate_t *ps"
.Ft size_t
.Fn wcrtomb "char *s" "wchar_t wc" "mbstate_t *ps"
.\" ----------------------------------------------------------------------
.Sh DESCRIPTION
.Fn wcrtomb
converts the wide character given by
.Fa wc
to the corresponding multibyte character, and stores it in the array
pointed to by
.Fa s
unless
.Fa s
is a null pointer.
This function will modify the first at most
.Dv MB_CUR_MAX
bytes of the array pointed by
.Fa s ,
if
.Fa ps
is an initial conversion state.
Contrary to and violating
.St -susv3 ,
this implementation can store more bytes in
.Fa s
if
.Fa ps
is not the initial conversion state.
Starting with
.Mx 10 ,
.Dv MB_CUR_MAX
has been adjusted to accomodate this fact, from the old value of
.Dq 3
to a new value of
.Dq 5
calculated by the formula
.Do Po old-MB_CUR_MAX * 2 Pc \- 1 Dc .
.Pp
The behaviour of
.Fn wcrtomb
is affected by the
.Dv LC_CTYPE
category of the current locale.
.Pp
.Fn optu16to8
behaves similar to
.Fn wcrtomb ,
but always converts from OPTU\-16 to OPTU\-8 encoding,
independent of the current locale.
.Pp
These are the special cases:
.Bl -tag -width 012345678901
.It "wc == 0"
For state-dependent encodings,
.Fn wcrtomb
stores a null byte preceded by a special byte sequence (if any)
to return to an initial state to the array pointed by
.Fa s ,
and the state object pointed by
.Fa ps
also returned to a initial state.
.It "s == NULL"
.Fn wcrtomb
just places
.Fa ps
into a initial state.
It is equivalent to the following call:
.Bd -literal -offset indent
wcrtomb(buf, L'\\0', ps);
.Ed
.Pp
Here,
.Fa buf
is a dummy buffer.
In this case,
.Fa wc
is ignored.
.It "ps == NULL"
.Fn mbrtowc
uses its own internal state object to keep the conversion state,
instead of
.Fa ps
mentioned in this manual page.
.Pp
Calling any other functions in
.Em libc
never changes the internal states of
.Fn optu16to8
or
.Fn mbrtowc ,
which are initialised at startup time of the program.
.El
.\" ----------------------------------------------------------------------
.Sh RETURN VALUES
.Fn optu16to8
and
.Fn wcrtomb
return:
.Bl -tag -width 012345678901
.It "positive"
The number of bytes (including any shift sequences)
which are stored in the array.
.It "(size_t)\-1"
.Fa wc
is not a valid wide character.
In this case,
.Fn wcrtomb
also sets
.Va errno
to indicate error.
.El
.\" ----------------------------------------------------------------------
.Sh ERRORS
.Fn optu16to8
and
.Fn wcrtomb
may cause an error in the following cases:
.Bl -tag -width Er
.It Bq Er EILSEQ
.Fa wc
is not a valid wide character.
.It Bq Er EINVAL
.Fa ps
points to an invalid or uninitialised mbstate_t object.
.El
.\" ----------------------------------------------------------------------
.Sh SEE ALSO
.Xr iswoctet 3 ,
.Xr optu8to16 3 ,
.Xr setlocale 3 ,
.Xr wctomb 3
.\" ----------------------------------------------------------------------
.Sh STANDARDS
The
.Fn wcrtomb
function conforms to
.St -isoC-amd1 .
.Pp
At present,
.Mx
is limited to the UCS BMP (Basic Multilingual Plane), thus
OPTU\-8 is limited to the common subset of CESU\-8 and UTF\-8.
.Sh HISTORY
The
.Nm optu16to8
function first appeared in
.Mx 11 .
.Sh AUTHORS
.An Thorsten Glaser Aq tg@@mirbsd.de
wrote the entire internationalisation implementation in
.Mx .
He is also the steward for the OPTU encoding.
.Sh CAVEATS
On a system whose wide character type is only 16 bits wide, as opposed
to 31 bits of ISO 10646, the OPTU encoder and decoder are permitted to
not de- and recompose any surrogates encountered and pass them through
as if they were regular wide characters with no special function.
Since
.Mx
is such a system, the reference implementation does not care about
UTF\-16 surrogates (U+D800 to U+DFFF) posing as OPTU\-16 characters at all;
a planes-aware Universal Coded Character Set-using application is
required to handle surrogates by itself.
For compatibility purposes,
.Nm
should always be assumed to not treat surrogates specially; applications
.Em must
ensure to not produce invalid surrogates unless limited to the BMP.
.Pp
.Fn optu16to8
.Em does ,
however, correctly reject the codepoints U+FFFE and U+FFFF as invalid.
@


1.10
log
@nuke the restrict qualifiers; C99 says this makes no externally visible difference and is only a compiler hint and a limitation to the interface implementor
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/locale/wcrtomb.3,v 1.9 2012/09/01 17:53:01 tg Exp $
d31 1
a31 1
.Dd $Mdocdate: September 1 2012 $
d183 1
a183 1
is limited to the Unicode BMP (Basic Multilingual Plane), thus
d204 2
a205 1
a planes-aware Unicode application is required to handle surrogates by itself.
@


1.9
log
@point out *which* Unicode codepoints are invalid (only two, in the BMP),
and what numbers are the surrogates
@
text
@d1 1
a1 1
.\" $MirOS$
d31 1
a31 1
.Dd $Mdocdate: March 17 2010 $
d43 1
a43 1
.Fn optu16to8 "char * restrict s" "wchar_t wc" "mbstate_t * restrict ps"
d45 1
a45 1
.Fn wcrtomb "char * restrict s" "wchar_t wc" "mbstate_t * restrict ps"
d179 1
a179 7
.\" .St -isoC-amd1 .
ISO/IEC 9899/AMD1:1995
.Pq Dq ISO C90, Amendment 1 .
The restrict qualifier is added at
.\" .St -isoC99 .
ISO/IEC 9899/1999
.Pq Dq ISO C99 .
@


1.8
log
@• document OPTU caveats and en-/decoder limits; check with mgk25’s
  UTF-8-test.txt (UTF-8 decoder capability and stress test) and then some
• deprecate optu8to16vis(3) which is unused and application layer anyway
@
text
@d1 1
d31 1
a31 1
.Dd $Mdocdate: November 22 2008 $
d209 2
a210 2
UTF\-16 surrogates posing as OPTU\-16 characters at all; a planes-aware
Unicode application is required to handle surrogates by itself.
d216 4
@


1.7
log
@new macro: iswoctet(3)

use of this macro also fixes a bug in optu8to16vis(3) which could
errorneously map 0xFF80…0xFFFF wide characters to raw octets
@
text
@d4 1
a4 1
.\" Copyright (c) 2008
d185 5
d200 15
@


1.6
log
@missing comma
@
text
@d30 1
a30 1
.Dd $Mdocdate: August 1 2008 $
d169 1
@


1.5
log
@fix documentation bugs
@
text
@d35 1
a35 1
.Nm optu16to8
@


1.4
log
@documentation before implementation, tonight
@
text
@d30 1
a30 1
.Dd $Mdocdate$
d42 1
a42 1
.Fn optu16to8 "const char * restrict s" "wchar_t wc" "mbstate_t * restrict ps"
d44 1
a44 1
.Fn wcrtomb "const char * restrict s" "wchar_t wc" "mbstate_t * restrict ps"
@


1.3
log
@change MB_CUR_MAX to *2-1 too
@
text
@d4 2
d30 1
a30 1
.Dd February 4, 2002
d35 1
d42 2
d86 6
d128 3
a130 2
never change the internal
state of
d132 1
a132 1
which is initialized at startup time of the program.
d136 2
d139 1
a139 1
returns:
d144 1
a144 1
.It "(size_t)-1"
d155 2
d165 1
a165 1
points to an invalid or uninitialized mbstate_t object.
d169 1
d184 10
@


1.2
log
@document that this function violates SUSv3 (because standards are broken, duh)
@
text
@d60 1
a60 1
this implementation can store up to five bytes in
d65 9
@


1.1
log
@Initial revision
@
text
@d54 11
a64 1
.Fa s .
@


1.1.1.1
log
@Import I18N manual pages for functions we either have or will have
@
text
@@
