head	1.3;
access;
symbols
	MIRBSD_10:1.3.0.2
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200509212000:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.3
date	2007.07.14.20.02.07;	author tg;	state Exp;
branches;
next	1.2;
commitid	10046992BD252F0285A;

1.2
date	2007.02.01.23.43.30;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045C27A5403C6060F;

1.1
date	2005.09.21.20.34.25;	author tg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	20cd4331c3c732a2;

1.1.1.1
date	2005.09.21.20.34.25;	author tg;	state Exp;
branches;
next	;
commitid	20cd4331c3c732a2;


desc
@@


1.3
log
@adjust mdoc date
@
text
@.\"	$MirOS: src/lib/libc/stdio/getwc.3,v 1.2 2007/02/01 23:43:30 tg Exp $
.\"	$OpenBSD: getwc.3,v 1.2 2005/06/17 22:03:18 jmc Exp $
.\"
.\"	$NetBSD: getwc.3,v 1.7 2003/09/08 17:54:32 wiz Exp $
.\"
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)getc.3	8.1 (Berkeley) 6/4/93
.\"
.Dd February 1, 2007
.Dt GETWC 3
.Os
.Sh NAME
.Nm fgetwc ,
.Nm getwc ,
.Nm getwchar
.Nd get next wide-character from input stream
.Sh SYNOPSIS
.In stdio.h
.In wchar.h
.Ft wint_t
.Fn fgetwc "FILE *stream"
.Ft wint_t
.Fn getwc "FILE *stream"
.Ft wint_t
.Fn getwchar
.Sh DESCRIPTION
The
.Fn fgetwc
function
obtains the next input wide-character (if present) from the stream pointed at by
.Fa stream ,
or the next character pushed back on the stream via
.Xr ungetwc 3 .
.Pp
The
.Fn getwc
function
acts essentially identically to
.Fn fgetwc ,
but is a macro that expands in-line.
.Pp
The
.Fn getwchar
function
is equivalent to
.Fn getwc
with the argument stdin.
.Sh RETURN VALUES
If successful, these routines return the next wide-character
from the
.Fa stream .
If the stream is at end-of-file or a read error occurs,
the routines return
.Dv WEOF .
The routines
.Xr feof 3
and
.Xr ferror 3
must be used to distinguish between end-of-file and error.
If an error occurs, the global variable
.Va errno
is set to indicate the error.
The end-of-file condition is remembered, even on a terminal, and all
subsequent attempts to read will return
.Dv WEOF
until the condition is cleared with
.Xr clearerr 3 .
.Sh SEE ALSO
.Xr ferror 3 ,
.Xr fopen 3 ,
.Xr fread 3 ,
.Xr putwc 3 ,
.Xr stdio 3 ,
.Xr ungetwc 3
.Sh STANDARDS
The
.Fn fgetwc ,
.Fn getwc
and
.Fn getwchar
functions
conform to
.St -isoC-99 .
.Pp
In addition to the standard, the
.Mx
implementation allows continuation after an illegal input
sequence (when
.Dv WEOF
is returned,
.Xr ferror 3
returns non-zero, and
.Va errno
is set to
.Dv EILSEQ ) .
Also, mixing wide-oriented and byte-oriented I/O functions is possible.
@


1.2
log
@change the code to be not only standards-conforming, but have
additional functions guarantees:
* you can mix wide-oriented and byte-oriented I/O functions
  (XXX really?)
* if fgetwc(3) and friends return WEOF, set the error indicator
  and set errno to EILSEQ, input processing can continue. The
  first byte of the invalid multi-byte sequence is eaten in any
  case; if there were more than one octet processed, the last
  one is pushed back so that it can be re-retrieved and at most
  one multibyte character is lost

the standards say these two are undefined, so why shouldn't we
be so liberal and define them to something that actually makes
sense? (I could even implement an unget buffer so that all but
the first octet are eaten, but that'd slow down I guess.) Code
in the base system is hereby allowed to use this, and all fol-
lowing, enhancements to the standards, because MirOS is a core
oriented "comes as a package" OS and we do not need to require
our own tools to only use normed functions unless it's made to
a portable package.
@
text
@d1 1
a1 1
.\"	$MirOS$
d39 1
a39 1
.Dd October 24, 2001
@


1.1
log
@Initial revision
@
text
@d1 1
d114 13
@


1.1.1.1
log
@Import OpenBSD's libc as of today, minus some of the locale stuff,
and with brk malloc instead of mmap malloc
@
text
@@
