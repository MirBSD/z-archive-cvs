head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2014.04.09.23.10.51;	author tg;	state Exp;
branches;
next	1.14;
commitid	1005345D3947D2C4523;

1.14
date	2014.03.29.10.35.46;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005336A20A417A5BCB;

1.13
date	2014.03.29.10.25.53;	author tg;	state Exp;
branches;
next	1.12;
commitid	10053369FB477345F50;

1.12
date	2014.03.13.05.48.23;	author tg;	state Exp;
branches;
next	1.11;
commitid	100532146A3061EE0CD;

1.11
date	2014.02.20.00.07.45;	author tg;	state Exp;
branches;
next	1.10;
commitid	100530547692D320BFE;

1.10
date	2014.02.19.21.36.06;	author tg;	state Exp;
branches;
next	1.9;
commitid	100530523C953030E23;

1.9
date	2014.02.19.21.28.03;	author tg;	state Exp;
branches;
next	1.8;
commitid	100530521F3367F8235;

1.8
date	2014.02.19.21.16.27;	author tg;	state Exp;
branches;
next	1.7;
commitid	10053051F3D59CC4C5F;

1.7
date	2014.02.19.17.43.27;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005304ED413F0CF25C;

1.6
date	2014.02.19.14.56.00;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005304C6153575B195;

1.5
date	2012.10.19.18.59.40;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005081A33215C2F05A;

1.4
date	2011.07.06.22.22.09;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004E14E010182825E7;

1.3
date	2011.04.27.21.46.05;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004DB88EB50513821C;

1.2
date	2010.12.23.19.25.30;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004D13A2417F2232C8;

1.1
date	2010.09.12.17.10.53;	author tg;	state Exp;
branches;
next	;
commitid	1004C8D0939027D8BE7;


desc
@@


1.15
log
@use only two clocks for now instead of four, since some do not exist in the kernel atm
@
text
@/*-
 * Copyright (c) 2010, 2011, 2012, 2014
 *	Thorsten Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 *-
 * The idea of an arc4random(3) stems from David Mazieres for OpenBSD
 * but this has been reimplemented, improved, corrected, modularised.
 * The idea of pushing entropy back to the kernel on stir and after a
 * fork or before an exit is MirBSD specific.
 */

#include <sys/param.h>
#include <sys/sysctl.h>
#include <sys/time.h>
#include <syskern/libckern.h>
#include <syskern/mirhash.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "arc4random.h"
#include "thread_private.h"

__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.14 2014/03/29 10:35:46 tg Exp $");

/* zero-initialises */
struct arc4random_status a4state;

void
arc4random_atexit(void)
{
	arc4random_ctl(1);
}

u_int32_t
arc4random(void)
{
	uint32_t v;
	pid_t mypid = 0;

	_ARC4_LOCK();

	/* reinitialise after fork, (count) bytes or if not initialised */
	a4state.a4s_count -= 4;
	if (a4state.a4s_count <= 0 || !a4state.a4s_initialised ||
	    (a4state.a4s_stir_pid != (mypid = getpid())))
		arc4random_stir_locked(mypid);

	/* randomly skip a byte or two */
	/*XXX this should be constant-time */
	if (arcfour_byte(&a4state.cipher) & 1)
		(void)arcfour_byte(&a4state.cipher);

	v = ((uint32_t)arcfour_byte(&a4state.cipher) << 24) |
	    ((uint32_t)arcfour_byte(&a4state.cipher) << 16) |
	    ((uint32_t)arcfour_byte(&a4state.cipher) << 8) |
	    ((uint32_t)arcfour_byte(&a4state.cipher));

	_ARC4_UNLOCK();
	return (v);
}

void
arc4random_stir_locked(pid_t mypid)
{
	size_t n;
	unsigned int carry;
	int mib[2];
	union {
		uint8_t charbuf[256];
		uint32_t intbuf[64];
		struct {
			struct timespec rtime;
#if 0
			struct timespec vtime;
			struct timespec ptime;
#endif
			struct timespec ntime;
			pid_t thepid;
		} tmpbuf;
	} sbuf;

	if (!a4state.a4s_initialised) {
		arcfour_init(&a4state.cipher);
		a4state.a4s_poolptr = 0;
	}
	carry = arcfour_byte(&a4state.cipher);
	/* throw stuff into the roundhash pool */
	arc4random_roundhash(a4state.pool, &a4state.a4s_poolptr,
	    &a4state.otherinfo, sizeof(a4state.otherinfo));
	clock_gettime(CLOCK_REALTIME, &sbuf.tmpbuf.rtime);
#if 0
	clock_gettime(CLOCK_VIRTUAL, &sbuf.tmpbuf.vtime);
	clock_gettime(CLOCK_PROF, &sbuf.tmpbuf.ptime);
#endif
	clock_gettime(CLOCK_MONOTONIC, &sbuf.tmpbuf.ntime);
	sbuf.tmpbuf.thepid = mypid = mypid ? mypid : getpid();
	arc4random_roundhash(a4state.pool, &a4state.a4s_poolptr,
	    &sbuf.tmpbuf, sizeof(sbuf.tmpbuf));

	/* fill first 128 bytes with roundhash pool */
	n = 1 + (carry & 1);
	carry >>= 1;
	while (n--)
		(void)arcfour_byte(&a4state.cipher);
	for (n = 0; n < 32; ++n) {
		register uint32_t h;

		h = a4state.pool[n];
		/* mask and mix */
		BAFHUpdateOctet_reg(h, arcfour_byte(&a4state.cipher));
		BAFHFinish_reg(h);
		sbuf.intbuf[n] = h;
	}

	/* fill second 128 bytes with local random stuff */
	n = 1 + (carry & 1);
	carry >>= 1;
	while (n--)
		(void)arcfour_byte(&a4state.cipher);
	for (n = 128; n < 256; ++n)
		sbuf.charbuf[n] = arcfour_byte(&a4state.cipher);
	n = carry & 3;
	carry &= 0x3C;
	while (n--)
		(void)arcfour_byte(&a4state.cipher);

	/* exchange full 256 bytes with kernel */
	mib[0] = CTL_KERN;
	mib[1] = KERN_ARND;
	n = sizeof(sbuf);
	sysctl(mib, 2, sbuf.charbuf, &n, sbuf.charbuf, sizeof(sbuf));
	/* if (n != sizeof(sbuf)) something went wrong inside the kernel */

	/* mix first 128 bytes with/into roundhash pool */
	for (n = 0; n < 32; ++n) {
		register uint32_t ha, hr;

		ha = (a4state.pool[n] & 0xFFFF0000) |
		    (sbuf.intbuf[n] & 0x0000FFFF);
		hr = (a4state.pool[n] & 0x0000FFFF) |
		    (sbuf.intbuf[n] & 0xFFFF0000);
		/* mix then mask for arc4random */
		BAFHFinish_reg(ha);
		BAFHUpdateOctet_reg(ha, arcfour_byte(&a4state.cipher));
		sbuf.intbuf[n] = ha;
		/* mix then mask for roundhash */
		BAFHFinish_reg(hr);
		BAFHUpdateOctet_reg(hr, arcfour_byte(&a4state.cipher));
		a4state.pool[n] = hr;
	}
	/* mix full 256 bytes into arc4random pool */
	arcfour_ksa(&a4state.cipher, sbuf.charbuf, 256);

	/* trash stack */
	bzero(sbuf.charbuf, sizeof(sbuf));

	/* discard early keystream */
	carry += 256 * 12 + (arcfour_byte(&a4state.cipher) & 0x1F);
	while (carry--)
		(void)arcfour_byte(&a4state.cipher);

	a4state.a4s_poolptr = 0;
	a4state.a4s_initialised = 1;
	a4state.a4s_stir_pid = mypid;
	a4state.a4s_count = 1600000;
}

/*
 * This is a deliberately undocumented internal API.
 * - whence & 7 = mode
 *   + 0 = shuffle user-space only
 *   + 1 = move stuff to kernel (e.g. for reboot)
 *   + 2 = schedule stirring upon next access
 * - rest MBZ
 */
void
arc4random_ctl(unsigned int whence)
{
	size_t n;
	uint8_t *buf;
	struct {
		struct timespec tp;
		const void *dp, *sp;
		unsigned int wi;
		struct arcfour_otherinfo oi;
	} pbuf;
	int mib[2];

	clock_gettime(CLOCK_MONOTONIC, &pbuf.tp);
	pbuf.sp = &pbuf;
	pbuf.dp = &whence;
	pbuf.wi = whence;
	_ARC4_LOCK();
	memcpy(&pbuf.oi, &a4state.otherinfo, sizeof(struct arcfour_otherinfo));
	if (!a4state.a4s_initialised)
		arc4random_stir_locked(0);
	arc4random_roundhash(a4state.pool, &a4state.a4s_poolptr,
	    &pbuf, sizeof(pbuf));

	switch (whence /* & 7 */) {
	default:
		break;
	case 2:
		a4state.a4s_count = -1;
		break;
	case 1:
		/* first put everything we have into the pool */
		arc4random_roundhash(a4state.pool, &a4state.a4s_poolptr,
		    &a4state.cipher, sizeof(a4state.cipher));
		/* then write the pool into the kernel and overwrite it */
		mib[0] = CTL_KERN;
		mib[1] = KERN_ARND;
		n = sizeof(a4state.pool);
		sysctl(mib, 2, a4state.pool, &n, a4state.pool,
		    sizeof(a4state.pool));
		/* then blind a bit for continued use, just in case */
		a4state.a4s_count = n * 24 + 1024;
		/* FALLTHROUGH */
	case 0:
		n = arcfour_byte(&a4state.cipher);
		buf = (void *)a4state.pool;
		arcfour_ksa(&a4state.cipher, buf, sizeof(a4state.pool));
		while (n--)
			(void)arcfour_byte(&a4state.cipher);
		n = sizeof(a4state.pool);
		while (n--)
			*buf++ = arcfour_byte(&a4state.cipher);
		a4state.a4s_poolptr = 0;
		break;
	}
	_ARC4_UNLOCK();
}
@


1.14
log
@skip <stdbool.h> for the initialised value, uint8_t packs better
@
text
@d37 1
a37 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.13 2014/03/29 10:25:53 tg Exp $");
d87 1
d90 1
d105 1
d108 1
@


1.13
log
@drop arcfour_ksa256 (only used in one place) in favour of the more
generic arcfour_ksa function
@
text
@a30 1
#include <stdbool.h>
d37 1
a37 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.12 2014/03/13 05:48:23 tg Exp $");
d173 1
a173 1
	a4state.a4s_initialised = true;
@


1.12
log
@meh, stop already with exposing libc interna like that
just invent our own private interface for RNG state hackery if needed
@
text
@d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.11 2014/02/20 00:07:45 tg Exp $");
a162 1
	/*XXX not using arcfour_ksa256 as we use arcfour_ksa below anyway */
@


1.11
log
@optimise; put a few deprecation warnings (no thanks to OpenBSD)
@
text
@d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.10 2014/02/19 21:36:06 tg Exp $");
d46 1
a46 19
	int mib[2];

	if (!a4state.a4s_initialised)
		return;

	_ARC4_LOCK();
	/* first put everything we have into the pool */
	arc4random_roundhash(a4state.pool, &a4state.a4s_poolptr,
	    &a4state.cipher, sizeof(a4state.cipher));
	arc4random_roundhash(a4state.pool, &a4state.a4s_poolptr,
	    &a4state.otherinfo, sizeof(a4state.otherinfo));
	/* then write the pool into the kernel */
	mib[0] = CTL_KERN;
	mib[1] = KERN_ARND;
	sysctl(mib, 2, NULL, NULL, a4state.pool, sizeof(a4state.pool));
	/* then, just in case we do NOT finish, blind */
	(void)arcfour_byte(&a4state.cipher);
	bzero(a4state.pool, sizeof(a4state.pool));
	_ARC4_UNLOCK();
d163 2
a164 1
	arcfour_ksa256(&a4state.cipher, sbuf.charbuf);
d179 66
@


1.10
log
@better kernel/roundhash → arc4/roundhash distribution
@
text
@d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.9 2014/02/19 21:28:03 tg Exp $");
d40 1
d62 1
a62 3
	mib[0] = arcfour_byte(&a4state.cipher) & 3;
	while (mib[0]--)
		(void)arcfour_byte(&a4state.cipher);
a112 2
	if (!mypid)
		mypid = getpid();
a114 1
		bzero(a4state.pool, sizeof(a4state.pool));
d118 1
d125 1
a125 1
	sbuf.tmpbuf.thepid = mypid;
d128 4
a131 2
	n = carry & 3;
	carry >>= 2;
a133 2
	for (n = 128; n < 256; ++n)
		sbuf.charbuf[n] = arcfour_byte(&a4state.cipher);
d143 8
d156 1
d163 1
d180 1
a180 1

@


1.9
log
@wtf what was I thinking?
@
text
@d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.8 2014/02/19 21:16:27 tg Exp $");
d141 2
d158 1
a158 1
		register uint32_t h;
d160 12
a171 5
		h = a4state.pool[n];
		a4state.pool[n] = sbuf.intbuf[32 + n] & 0xFFFFFF00;
		BAFHUpdateOctet_reg(h, sbuf.intbuf[32 + n] & 0x000000FF);
		BAFHFinish_reg(h);
		sbuf.intbuf[32 + n] = h;
@


1.8
log
@do not include header from other header
@
text
@d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.7 2014/02/19 17:43:27 tg Exp $");
d83 1
d100 2
a101 1
	int carry, mib[2];
d118 2
a119 2
		for (n = 0; n < 32; ++n)
			bzero(a4state.pool, sizeof(a4state.pool));
@


1.7
log
@replace OAAT, NZAT, NZAAT with BAFH in virtually all places; bump libc major
@
text
@d29 1
d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.6 2014/02/19 14:56:00 tg Exp $");
@


1.6
log
@initialise a4s_poolptr to 0
@
text
@d2 1
a2 1
 * Copyright (c) 2010, 2011, 2012
d29 1
a29 1
#include <syskern/nzat.h>
d37 1
a37 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.5 2012/10/19 18:59:40 tg Exp $");
d138 1
a138 1
		NZAATFinish(h);
d157 2
a158 2
		NZATUpdateByte(h, sbuf.intbuf[32 + n] & 0x000000FF);
		NZAATFinish(h);
@


1.5
log
@The arc4random code in libevent suggests to look at the papers in more
detail and skip 256 * 12 bytes (plus fuzz) instead of 256 * 4 bytes
@
text
@d37 1
a37 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.4 2011/07/06 22:22:09 tg Exp $");
d172 1
a172 1
	a4state.a4s_poolptr = arcfour_byte(&a4state.cipher);
@


1.4
log
@replace uses of OAAT hash in all its variants by NZAT (mksh internal) or NZAAT (all others)
@
text
@d2 1
a2 1
 * Copyright (c) 2010, 2011
d37 1
a37 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.3 2011/04/27 21:46:05 tg Exp $");
d168 1
a168 1
	carry += 256 * 4 + (arcfour_byte(&a4state.cipher) & 0x1F);
@


1.3
log
@with 1004DB88EA83163E2AE we can optimise this
@
text
@d29 1
d37 1
a37 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.2 2010/12/23 19:25:30 tg Exp $");
a62 1
	/* we want 0x00000100 each, but it’s not supposed to be used anyway */
d116 1
a116 1
			a4state.pool[n] = 0x100;
d134 7
a140 2
	for (n = 0; n < 32; ++n)
		sbuf.intbuf[n] = OAAT0Final(a4state.pool[n]);
d157 3
a159 4
		h += sbuf.intbuf[32 + n] & 0x000000FF;
		h += h << 10;
		h ^= h >> 6;
		sbuf.intbuf[32 + n] = OAAT0Final(h);
@


1.2
log
@fast-forward through OpenBSD-current RNG:
src/sys/dev/rnd.c,v 1.105
src/lib/libc/crypt/arc4random.c,v 1.22
this fixes some small issues. also, optimise a little and correct comments.
@
text
@d2 1
a2 1
 * Copyright (c) 2010
d36 1
a36 1
__RCSID("$MirOS: src/lib/libc/crypt/arc4random_base.c,v 1.1 2010/09/12 17:10:53 tg Exp $");
d168 1
a168 1
	a4state.a4s_poolptr = arcfour_byte(&a4state.cipher) & 31;
@


1.1
log
@new implementation of arc4random(3) API (except arc4random_uniform(3),
which though has been split off earlier today)

deprecate arc4random_push arc4random_pushb arc4random_pushk
in favour of arc4random_pushb_fast as well

hide internal symbols from user with a version script (only some,
until the next major bump)

make deprecated functions into macros already

switch some kernel code to use the new shared code already; rewrite
of kernel arc4random(9) will come next/later
@
text
@d36 1
a36 1
__RCSID("$MirOS: src/share/misc/licence.template,v 1.28 2008/11/14 15:33:44 tg Rel $");
d62 2
a63 1
	memset(a4state.pool, '\0', sizeof(a4state.pool));
d161 1
a161 1
	memset(sbuf.charbuf, '\0', sizeof(sbuf));
@

