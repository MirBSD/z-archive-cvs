head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2014.03.29.10.35.45;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005336A20A417A5BCB;

1.4
date	2014.03.13.05.48.23;	author tg;	state Exp;
branches;
next	1.3;
commitid	100532146A3061EE0CD;

1.3
date	2014.02.19.21.16.27;	author tg;	state Exp;
branches;
next	1.2;
commitid	10053051F3D59CC4C5F;

1.2
date	2014.02.19.14.55.35;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005304C5FC165C99F5;

1.1
date	2010.09.12.17.10.52;	author tg;	state Exp;
branches;
next	;
commitid	1004C8D0939027D8BE7;


desc
@@


1.5
log
@skip <stdbool.h> for the initialised value, uint8_t packs better
@
text
@/* $MirOS: src/lib/libc/crypt/arc4random.h,v 1.4 2014/03/13 05:48:23 tg Exp $ */

/*-
 * Copyright (c) 2010, 2014
 *	Thorsten Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 *-
 * The idea of an arc4random(3) stems from David Mazieres for OpenBSD
 */

#ifndef _LIBC_INTERNAL_ARC4RANDOM_H
#define _LIBC_INTERNAL_ARC4RANDOM_H

__BEGIN_DECLS
extern struct arc4random_status {
	uint32_t pool[32];
	struct arcfour_status cipher;
	struct arcfour_otherinfo {
		int count_;
		pid_t stir_pid_;
		uint8_t poolptr_;
		uint8_t initialised_;
	} otherinfo;
} a4state;

#define a4s_poolptr	otherinfo.poolptr_
#define a4s_initialised	otherinfo.initialised_
#define a4s_stir_pid	otherinfo.stir_pid_
#define a4s_count	otherinfo.count_

void arc4random_atexit(void);
void arc4random_ctl(unsigned int);
void arc4random_stir_locked(pid_t);
__END_DECLS

#endif
@


1.4
log
@meh, stop already with exposing libc interna like that
just invent our own private interface for RNG state hackery if needed
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/crypt/arc4random.h,v 1.3 2014/02/19 21:16:27 tg Exp $ */
d36 1
a36 1
		bool initialised_;
@


1.3
log
@do not include header from other header
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/crypt/arc4random.h,v 1.2 2014/02/19 14:55:35 tg Exp $ */
d32 1
a32 1
	struct {
d46 1
@


1.2
log
@improve struct padding
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/crypt/arc4random.h,v 1.1 2010/09/12 17:10:52 tg Exp $ */
a28 3

#include <syskern/libckern.h>

a46 1

@


1.1
log
@new implementation of arc4random(3) API (except arc4random_uniform(3),
which though has been split off earlier today)

deprecate arc4random_push arc4random_pushb arc4random_pushk
in favour of arc4random_pushb_fast as well

hide internal symbols from user with a version script (only some,
until the next major bump)

make deprecated functions into macros already

switch some kernel code to use the new shared code already; rewrite
of kernel arc4random(9) will come next/later
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.28 2008/11/14 15:33:44 tg Rel $ */
d4 1
a4 1
 * Copyright (c) 2010
d36 2
a39 2
		pid_t stir_pid_;
		int count_;
@

