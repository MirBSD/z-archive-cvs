head	1.18;
access;
symbols
	MIRBSD_10:1.7.0.2
	MIRBSD_10_BASE:1.7
	MIRBSD_9_BASE:1.5
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200509212000:1.1.1.2
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.18
date	2019.03.01.16.20.08;	author tg;	state Exp;
branches;
next	1.17;
commitid	1005C795BC31885E05B;

1.17
date	2018.06.18.21.23.43;	author tg;	state Exp;
branches;
next	1.16;
commitid	1005B2822F35925265B;

1.16
date	2010.09.21.21.27.46;	author tg;	state Exp;
branches;
next	1.15;
commitid	1004C9923626959A0C8;

1.15
date	2010.09.21.19.38.21;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004C99098A59EF7F86;

1.14
date	2010.09.21.17.41.30;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004C98EE600A050941;

1.13
date	2010.09.12.17.10.51;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004C8D0939027D8BE7;

1.12
date	2009.11.29.18.22.30;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004B12BBEC3643C33F;

1.11
date	2009.11.29.15.29.25;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004B1293503FBA3433;

1.10
date	2009.11.29.15.21.21;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004B1291782E3D5DF1;

1.9
date	2008.12.27.21.17.54;	author tg;	state Exp;
branches;
next	1.8;
commitid	10049569B9439744217;

1.8
date	2008.04.06.16.35.17;	author tg;	state Exp;
branches;
next	1.7;
commitid	10047F8FBC509338948;

1.7
date	2006.09.24.17.48.32;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004516C4FA585E8AEF;

1.6
date	2006.08.18.13.02.17;	author tg;	state Exp;
branches;
next	1.5;
commitid	10044E5BA6E310A62DF;

1.5
date	2006.05.28.23.38.39;	author tg;	state Exp;
branches;
next	1.4;
commitid	100447A34911E094C79;

1.4
date	2006.05.28.23.38.21;	author tg;	state Exp;
branches;
next	1.3;
commitid	100447A346F26F8604A;

1.3
date	2005.09.22.20.06.57;	author tg;	state Exp;
branches;
next	1.2;
commitid	696c43330ef70acb;

1.2
date	2005.03.06.20.28.34;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.24.38;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.38;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.52.19;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	560042e0092f571e;

1.1.1.3
date	2008.12.27.20.18.10;	author tg;	state Exp;
branches;
next	;
commitid	10049568D936F09B8CD;


desc
@@


1.18
log
@.Tn, not .Pa, for trademarks/names like that; slight cosmetics while here
@
text
@.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.15 2010/09/21 19:38:21 tg Exp $
.\" $OpenBSD: arc4random.3,v 1.27 2008/12/23 18:31:02 deraadt Exp $
.\"
.\" Copyright (c) 2010, 2019
.\"	mirabilos <tg@@mirbsd.de>
.\" Copyright 1997 Niels Provos <provos@@physnet.uni-hamburg.de>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Niels Provos.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: September 21 2010 $
.Dt ARC4RANDOM 3
.Os
.Sh NAME
.Nm arc4random ,
.Nm arc4random_buf ,
.Nm arc4random_uniform ,
.Nm arc4random_stir ,
.Nm arc4random_addrandom ,
.Nm arc4random_push ,
.Nm arc4random_pushb ,
.Nm arc4random_pushb_fast ,
.Nm arc4random_pushk
.Nd arcfour based stretching random number generator
.Sh SYNOPSIS
.Fd #include <stdlib.h>
.Ft u_int32_t
.Fn arc4random "void"
.Ft void
.Fn arc4random_buf "void *buf" "size_t nbytes"
.Ft u_int32_t
.Fn arc4random_uniform "u_int32_t upper_bound"
.Ft void
.Fn arc4random_stir "void"
.Ft void
.Fn arc4random_addrandom "u_char *dat" "int datlen"
.Ft void
.Pq deprecated
.Fn arc4random_push "int value"
.Ft uint32_t
.Pq deprecated
.Fn arc4random_pushb "const void *buf" "size_t len"
.Ft uint32_t
.Pq deprecated
.Fn arc4random_pushk "const void *buf" "size_t len"
.Ft void
.Fn arc4random_pushb_fast "const void *buf" "size_t len"
.Sh DESCRIPTION
The
.Fn arc4random
function provides a high quality 32-bit pseudo-random
number very quickly.
.Fn arc4random
seeds itself on a regular basis from the kernel strong random number
subsystem described in
.Xr random 4 .
On each call, an aRC4 generator is used to generate a new result.
The
.Fn arc4random
function uses the aRC4 cipher key stream generator,
which uses 8*8 8-bit S-Boxes.
The S-Boxes can be in about (2**1684) states.
Together with the counters, this amounts to about 212 octets of entropy.
.Pp
.Fn arc4random
fits into a middle ground not covered by other subsystems such as
the strong, slow, and resource expensive random
devices described in
.Xr random 4
versus the fast but poor quality interfaces described in
.Xr rand 3 ,
.Xr random 3 ,
and
.Xr drand48 3 .
.Pp
.Fn arc4random_buf
fills the region
.Fa buf
of length
.Fa nbytes
with aRC4-derived random data.
.Pp
.Fn arc4random_uniform
will return a uniformly distributed random number less than
.Fa upper_bound .
.Fn arc4random_uniform
is recommended over constructions like
.Dq Li arc4random() % upper_bound
as it avoids "modulo bias" when the upper bound is not a power of two.
.Pp
The
.Fn arc4random_stir
function collects data from the user-space SRNG and queued for upload,
sends it to the kernel and receives new entropic data using
.Xr sysctl 3
from
.Va kern.arandom
and uses it to permute the S-Boxes.
There is no need to call
.Fn arc4random_stir
before using
.Fn arc4random ,
since
.Fn arc4random
automatically initialises itself.
Explicit calls will, however, trigger kernel pushing after
.Fn arc4random_pushb_fast
has been used to queue some data for doing so.
.Pp
The
.Fn arc4random_pushb_fast
function will queue the data passed for upload on the
next stir using a (non-cryptographic) hash algorithm, which is only
used for collapsing/compressing the data into the queue buffer.
The deprecated
.Fn arc4random_push
function behaves the same, except instead of being passed a buffer
and its size for pushing, it takes a direct numeric argument.
The deprecated
.Fn arc4random_pushk
and
.Fn arc4random_pushb
functions do exactly the same, namely call
.Fn arc4random_pushb_fast
and then call
.Fn arc4random
and return its return value.
.Pp
The
.Fn arc4random_addrandom
function implements an old, discouraged, API with which the S-Boxes
can be permuted directly from user-specified data.
If merely desiring to add entropy to the pool, use
.Nm arc4random_pushb_fast
instead, which is much faster, unless you really want to do a KSA.
.Sh RETURN VALUES
These functions are always successful, and no return value is
reserved to indicate an error.
.Sh SEE ALSO
.Xr rand 3 ,
.Xr rand48 3 ,
.Xr random 3 ,
.Xr random 9
.Sh HISTORY
An algorithm called
.Tn RC4
was designed by RSA Data Security, Inc.
It was considered a trade secret.
Because it was a trade secret, it obviously could not be patented.
A clone of this was posted anonymously to USENET and confirmed to
be equivalent by several sources who had access to the original cipher.
Because of the trade secret situation, RSA Data Security, Inc. could
do nothing about the release of the
.Ql Alleged RC4
algorithm.
Since
.Tn RC4
was trademarked, the cipher is now referred to as
.Tn aRC4 .
.Pp
These functions first appeared in
.Ox 2.1 .
.Fn arc4random_push
first appeared in
.Mx 8 .
.Fn arc4random_pushb
first appeared in
.Mx 10 .
.Fn arc4random_pushk
and
.Fn arc4random_pushb_fast
first appeared in
.Mx 11 .
All these functions were rewritten for
.Mx 11
and macros for every function are now defined for easy existence checks.
@


1.17
log
@fix spelling; clarify entropy estimate
@
text
@d4 2
a5 2
.\" Copyright (c) 2010
.\"	Thorsten Glaser <tg@@mirbsd.de>
d80 1
a80 1
On each call, an ARC4 generator is used to generate a new result.
d83 1
a83 1
function uses the ARC4 cipher key stream generator,
d104 1
a104 1
with ARC4-derived random data.
d169 1
a169 1
.Pa RC4
d180 1
a180 1
.Pa RC4
d182 1
a182 1
.Pa ARC4 .
@


1.16
log
@document the macro stuff from <stdlib.h>
@
text
@d61 1
a61 1
.Pq deprecated 
d64 1
a64 1
.Pq deprecated 
d85 2
a86 1
The S-Boxes can be in about (2**1700) states.
@


1.15
log
@* discourage arc4random_addrandom if arc4random_pushb_fast is faster but
  doesn’t harm (i.e. for everything that doesn’t specifically require KSA)
* discovered configure checks for symbols, not macros, so keep the older
  push* API around
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.14 2010/09/21 17:41:30 tg Exp $
d134 1
a134 2
function, whose existence can be tested for because a macro with
the same name exists, will queue the data passed for upload on the
d142 2
a143 2
.Nm arc4random_pushk
macro is a C preprocessor alias (macro) for the deprecated
d145 1
a145 1
function, which will call
d192 1
a192 1
(temporarily as a function but now only as a macro) and
d197 2
a198 7
.Mx 11 .
.Pp
The deprecated functions
.Fn arc4random_push ,
.Fn arc4random_pushb ,
.Fn arc4random_pushk
will be available only as compatibility macros on the next libc major bump.
@


1.14
log
@update
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.13 2010/09/12 17:10:51 tg Exp $
d34 1
a34 1
.Dd $Mdocdate: September 12 2010 $
d156 3
@


1.13
log
@new implementation of arc4random(3) API (except arc4random_uniform(3),
which though has been split off earlier today)

deprecate arc4random_push arc4random_pushb arc4random_pushk
in favour of arc4random_pushb_fast as well

hide internal symbols from user with a version script (only some,
until the next major bump)

make deprecated functions into macros already

switch some kernel code to use the new shared code already; rewrite
of kernel arc4random(9) will come next/later
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.12 2009/11/29 18:22:30 tg Exp $
d34 1
a34 1
.Dd $Mdocdate: November 29 2009 $
d67 1
a67 1
.Pq deprecated , except as macro
@


1.12
log
@deprecate arc4random_push* except arc4random_pushb to match existing practice
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.11 2009/11/29 15:29:25 tg Exp $
d4 2
a33 2
.\" Manual page, using -mandoc macros
.\"
d45 1
d47 1
a47 1
.Nd arc4 random number generator
d64 1
d69 2
d115 2
a116 1
function reads data using
d120 1
a120 3
and uses it to permute the S-Boxes via
.Fn arc4random_addrandom .
.Pp
d128 3
d133 6
d140 5
a144 12
and
.Fn arc4random_pushb
functions can be used by regular non-superuser processes to add
entropy into the kernel pool by means of the
.Xr wrandom 4
circular addition buffer.
This interface can be disabled by a system administrator.
The passed value, as well as the current time, is passed both to the
kernel and added to the internal userland pool.
At the moment, the kernel accepts up to 256 bytes; longer arguments
are XOR folded.
The
d146 3
a148 1
returns a 32-bit random value like
d150 1
a150 1
which can be used by the caller if desired.
d153 3
a155 6
.Pa stdlib.h
header file defines a macro
.Fn arc4random_pushk
which is aliased to
.Fn arc4random_pushb
these days and can be used on an ifdef basis as availability check.
d190 2
d194 1
a194 5
It originally was a function, but has been deprecated and folded into
.Fn arc4random_pushb
soon afterwards.
.Fn arc4random_push
was deprecated in
d196 6
a201 12
.Sh BUGS
The
.Fn arc4random_addrandom
prototype should use
.Ft "const u_char *"
and
.Ft size_t
similar to
.Fn arc4random_pushb .
The
.Ox
developers however do not produce const-clean code or APIs.
@


1.11
log
@make things const that should be const where we can,
complain about things where we cannot change the API
designed by const-dirty OpenBSDdiots
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.10 2009/11/29 15:21:21 tg Exp $
d60 1
d65 1
d191 3
@


1.10
log
@these days, arc4random_pushb(3) timestamps, and it’s reasonable to assume
so; also sync
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.9 2008/12/27 21:17:54 tg Exp $
d34 1
a34 1
.Dd $Mdocdate: December 27 2008 $
d189 12
@


1.9
log
@merge and wrap exec/exit functions better
@
text
@d1 1
a1 1
.\" $MirOS$
d62 1
a62 1
.Fn arc4random_pushb "void *buf" "size_t len"
d64 1
a64 1
.Fn arc4random_pushk "void *buf" "size_t len"
d128 4
a131 2
functions can be used by processes to add entropy into the
kernel pool by means of a circular addition buffer.
d133 4
a136 5
The passed value is also used to stir the internal userland
.Fn arc4random
pool value, more or less directly as well as with the value
returned by the kernel after adding the arguments to the kernel pool.
At the moment, the kernel accepts up to 256 bytes.
d144 2
d147 1
a147 1
function works exactly like the
d149 1
a149 13
function, except in that it does not pull in all the other
.Nm arc4random
functions, yielding a smaller executable size, dependencies,
and faster speed.
Use this in applications that do not use the
.Nm arc4random
function suite themselves, but want to push back data to the kernel.
It also returns a 32-bit random value.
If more than 256 octets are passed, they are XOR-folded.
The
.Pa stdlib.h
header file defines a macro with the same name as this function,
which you can use to see if it's available.
d186 3
@


1.8
log
@new function (and macro with 1:1 definition): arc4random_pushk(3)
for use in applications that do not need to pull in all of arc4random.c
@
text
@d1 2
a2 2
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.7 2006/09/24 17:48:32 tg Exp $
.\" $OpenBSD: arc4random.3,v 1.19 2005/07/17 08:50:55 jaredy Exp $
d34 1
a34 1
.Dd $Mdocdate$
d39 2
d52 4
d92 15
d109 4
a112 2
function reads data from
.Pa /dev/arandom
d159 3
d175 4
a178 2
Because of the trade secret situation, RSA Data Security, Inc. can do
nothing about the release of the ARC4 algorithm.
d181 1
a181 1
used to be a trade secret, the cipher is now referred to as
@


1.7
log
@bsiegert@@ and I decided this is #9-current, going on #10
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.6 2006/08/18 13:02:17 tg Exp $
d34 1
a34 1
.Dd September 24, 2006
d42 2
a43 1
.Nm arc4random_pushb
d57 2
d118 18
d164 3
@


1.6
log
@implement new arc4random_pushb(3) API
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.5 2006/05/28 23:38:39 tg Exp $
d34 1
a34 1
.Dd April 15, 1997
d142 1
a142 1
.Mx 9bis .
@


1.5
log
@american -> british, while here
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.4 2006/05/28 23:38:21 tg Exp $
d41 2
a42 1
.Nm arc4random_push
d53 3
a55 1
.Fn arc4random_push "int"
d100 3
a102 1
function can be used by processes to add entropy into the
d105 10
d140 3
@


1.4
log
@change wording about the arc4random_push(3) function,
it's not entirely "not recommended" these days ;)
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.3 2005/09/22 20:06:57 tg Exp $
d93 1
a93 1
automatically initializes itself.
@


1.3
log
@merge
@
text
@d1 1
a1 1
.\" $MirOS: src/lib/libc/crypt/arc4random.3,v 1.2 2005/03/06 20:28:34 tg Exp $
d97 3
a99 6
function can be used by processes to push back random data
into the kernel if
.Pa /dev/arandom
does not exist.
This interface is not recommended, and the random data given
is not guaranteed to be used by the kernel at all.
@


1.2
log
@merge src/lib
@
text
@d1 2
a2 2
.\" $MirOS$
.\" $OpenBSD: arc4random.3,v 1.17 2000/12/21 14:07:41 aaron Exp $
d66 1
a66 1
which uses 8*8 8 bit S-Boxes.
d112 1
a112 1
It was considered a trade secret, but not trademarked.
@


1.1
log
@Initial revision
@
text
@d1 1
d40 2
a41 1
.Nm arc4random_addrandom
d51 2
d94 9
d106 2
a107 1
.Xr random 3
d125 3
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.19 2005/07/17 08:50:55 jaredy Exp $
d62 1
a62 1
which uses 8*8 8-bit S-Boxes.
d98 1
a98 1
It was considered a trade secret.
@


1.1.1.3
log
@import OpenBSD-current
@
text
@d1 1
a1 1
.\" $OpenBSD: arc4random.3,v 1.27 2008/12/23 18:31:02 deraadt Exp $
d33 1
a33 1
.Dd $Mdocdate: December 23 2008 $
a37 2
.Nm arc4random_buf ,
.Nm arc4random_uniform ,
a45 4
.Fn arc4random_buf "void *buf" "size_t nbytes"
.Ft u_int32_t
.Fn arc4random_uniform "u_int32_t upper_bound"
.Ft void
a75 15
.Fn arc4random_buf
fills the region
.Fa buf
of length
.Fa nbytes
with ARC4-derived random data.
.Pp
.Fn arc4random_uniform
will return a uniformly distributed random number less than
.Fa upper_bound .
.Fn arc4random_uniform
is recommended over constructions like
.Dq Li arc4random() % upper_bound
as it avoids "modulo bias" when the upper bound is not a power of two.
.Pp
d78 2
a79 4
function reads data using
.Xr sysctl 3
from
.Va kern.arandom
a89 3
.Sh RETURN VALUES
These functions are always successful, and no return value is
reserved to indicate an error.
d102 2
a103 4
Because of the trade secret situation, RSA Data Security, Inc. could
do nothing about the release of the
.Ql Alleged RC4
algorithm.
d106 1
a106 1
was trademarked, the cipher is now referred to as
@


