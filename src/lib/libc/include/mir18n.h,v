head	1.18;
access;
symbols
	MIRBSD_10:1.17.0.2
	MIRBSD_10_BASE:1.17
	MIRBSD_9_BASE:1.6;
locks; strict;
comment	@ * @;


1.18
date	2008.11.30.13.08.49;	author tg;	state Exp;
branches;
next	1.17;
commitid	100493290663125FF1F;

1.17
date	2007.02.07.17.34.07;	author tg;	state Exp;
branches;
next	1.16;
commitid	10045CA0D827925E104;

1.16
date	2007.02.07.16.15.32;	author tg;	state Exp;
branches;
next	1.15;
commitid	10045C9FB01425B30DC;

1.15
date	2007.02.02.21.15.51;	author tg;	state Exp;
branches;
next	1.14;
commitid	10045C3AA1E417023DC;

1.14
date	2007.02.02.21.06.24;	author tg;	state Exp;
branches;
next	1.13;
commitid	10045C3A79F53A9E808;

1.13
date	2007.02.02.19.28.34;	author tg;	state Exp;
branches;
next	1.12;
commitid	10045C390D6140801E9;

1.12
date	2006.11.09.02.49.37;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004552974168FD37E9;

1.11
date	2006.11.06.18.54.40;	author tg;	state Exp;
branches;
next	1.10;
commitid	100454F84F30B194FBE;

1.10
date	2006.11.01.20.23.30;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004549024931DBE2F2;

1.9
date	2006.11.01.18.31.11;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004548E7F474876706;

1.8
date	2006.11.01.18.22.40;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004548E4DD5B25E640;

1.7
date	2006.09.07.17.13.16;	author tg;	state Exp;
branches;
next	1.6;
commitid	100450052C75BFF95AD;

1.6
date	2006.06.03.21.01.24;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004481F8A74AF07809;

1.5
date	2006.06.01.22.20.04;	author tg;	state Exp;
branches;
next	1.4;
commitid	100447F68281BD253F3;

1.4
date	2006.06.01.22.03.21;	author tg;	state Exp;
branches;
next	1.3;
commitid	100447F641E589322F2;

1.3
date	2006.05.30.10.22.11;	author tg;	state Exp;
branches;
next	1.2;
commitid	100447C1C4F51B591D6;

1.2
date	2006.05.30.10.02.30;	author tg;	state Exp;
branches;
next	1.1;
commitid	100447C17FC2B27DF1E;

1.1
date	2006.05.21.12.12.30;	author tg;	state Exp;
branches;
next	;
commitid	100447059215CDB3530;


desc
@@


1.18
log
@if upper|lower, then title

still waiting for answer from Bruno Haible, though...
@
text
@/* $MirOS: src/lib/libc/include/mir18n.h,v 1.17 2007/02/07 17:34:07 tg Exp $ */

#ifndef _LIBC_MIR18N_H
#define _LIBC_MIR18N_H

#if !defined(WCHAR_MAX)
#error Include <wchar.h> first
#elif WCHAR_MAX != 0xFFFD
#error This code assumes that wchar_t is UCS-2HE
#endif

#ifdef mir18n_attributes
/* from Bruno Haible's libutf8 */

/* How the 12 character attributes are encoded in 8 bits: Every attribute is
   represented by an "include bitmask" and an "exclude bitmask".
    Attribute	bit/formula		comment
     upper	upper && !lower		implies towlower(x) != x == towupper(x)
     lower	!upper && lower		implies towlower(x) == x != towupper(x)
     title	upper && lower		implies towlower(x) != x != towupper(x)
     alpha	bit			superset of upper || lower
     digit	xdigit && !alpha	'0'..'9' and more
     xdigit	bit			'0'..'9','a'..'f','A'..'F' and more
     space	bit			' ', '\f', '\n', '\r', '\t', '\v'
     print	bit
     graph	print && !space
     blank	bit			' ', '\t'
     cntrl	bit			0x00..0x1F,0x7F
     punct	print && !(alpha || xdigit || space)
     alnum	alpha || xdigit
*/

#define iswmask(number,incl,excl)  ((incl) | ((excl) << 8) | ((number) << 16))
#define wmask_incl(mask)	(mask) & 0xFF
#define wmask_excl(mask)	((mask) >> 8) & 0xFF
#define wmask_number(mask)	((mask) >> 16)

#define upper	  1
#define lower	  2
#define alpha	  4
#define digit	  0
#define xdigit	  8
#define space	 16
#define print	 32
#define graph	  0
#define blank	 64
#define cntrl	128
#define punct	  0
#define alnum	  0

/* XXX these are copied in src/include/ctype.h */
#define wctype_alnum  iswmask(11, alpha|xdigit, 0)
#define wctype_alpha  iswmask(2, alpha, 0)
#define wctype_blank  iswmask(8, blank, 0)
#define wctype_cntrl  iswmask(9, cntrl, 0)
#define wctype_digit  iswmask(3, xdigit, alpha)
#define wctype_graph  iswmask(7, print, space)
#define wctype_lower  iswmask(1, lower, upper)
#define wctype_print  iswmask(6, print, 0)
#define wctype_punct  iswmask(10, print, alpha|xdigit|space)
#define wctype_space  iswmask(5, space, 0)
#define wctype_title  iswmask(12, upper|lower, 0)
#define wctype_upper  iswmask(0, upper, lower)
#define wctype_xdigit iswmask(4, xdigit, 0)

#define attribute_table mir18n_attribute_table
__BEGIN_DECLS
extern const unsigned char * const attribute_table[0x100];
__END_DECLS
#endif

#ifdef mir18n_caseconv
/* namespace definitions for the UCD tables */
#define nop_page	mir18n_attribute_nop_page
#define tolower_table	mir18n_caseconv_tolower
#define totitle_table	mir18n_caseconv_totitle
#define toupper_table	mir18n_caseconv_toupper

__BEGIN_DECLS
extern const uint16_t nop_page[256];
__END_DECLS
#endif

#endif
@


1.17
log
@now that we have actual code in <wchar.h>, move and consolidate
some of the consistency checks (i.e. these that make sure that
our code is only used on wchar_t=UCS-2HE systems)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.16 2007/02/07 16:15:32 tg Exp $ */
d18 3
a20 2
     upper	bit			implies towlower(x) != x == towupper(x)
     lower	bit			implies towlower(x) == x != towupper(x)
d58 1
a58 1
#define wctype_lower  iswmask(1, lower, 0)
d62 2
a63 1
#define wctype_upper  iswmask(0, upper, 0)
d76 1
@


1.16
log
@fix age-old typo which only now got cought
XXX this changes a globally exported data symbol's name, but OTOH,
XXX until now, the two arrays in question were only used from libc
XXX and not by some macros, so no need to bump the major (luckily)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.15 2007/02/02 21:15:51 tg Exp $ */
a5 4
#ifndef __STDC_ISO_10646__
#error This code assumes that wchar_t is UCS-2HE
#endif

d8 1
a8 3
#endif

#if WCHAR_MAX != 0xFFFD
@


1.15
log
@add notice where the defines are dup'd
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.14 2007/02/02 21:06:24 tg Exp $ */
d78 3
a80 3
#define nop_page mir18n_attribute_nop_page
#define tolower_page mir18n_caseconv_tolower
#define toupper_page mir18n_caseconv_toupper
@


1.14
log
@switch to a one-locale system; "the" locale is UTF-8 encoded 'C' now;
inline many simpler functions for reduced code size / imports / speed
and optimise a little - XXX untested
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.13 2007/02/02 19:28:34 tg Exp $ */
d56 1
@


1.13
log
@second step: get rid of all the MIR18N_* configurable constants
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.12 2006/11/09 02:49:37 tg Exp $ */
a17 18
#ifndef __bool_true_false_are_defined
#include <stdbool.h>
#endif

__BEGIN_DECLS
/*
 * Current system-wide locale in use:
 * - false:
 *	LC_ALL = 'C'
 *	CODESET = 'ISO_646.irv:1991'
 * - true:
 *	LANG = 'C'
 *	LC_CTYPE = 'en_US.CESU-8'
 *	CODESET = 'UTF-8'	# XXX because nobody knows what CESU-8 is ;-)
 */
extern bool __locale_is_utf8;	/* safe 'cause wchar_t=short => UTF-8=CESU-8 */
__END_DECLS

a82 2
extern const uint16_t * const tolower_table[0x100];
extern const uint16_t * const toupper_table[0x100];
@


1.12
log
@refuse to build unless __STDC_ISO_10646__ is defined

(btw, the change also benefits at least zsh)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.11 2006/11/06 18:54:40 tg Exp $ */
d6 3
a8 14
/* configurable */

/*
 * compatibility kludge: which character set do we use in the 'C' locale
 *
 * 0: ISO_646.irv:1991 aka 7-bit ASCII
 * 1: ditto, but allow certain latin1 chars in conversion
 *	functions, such as btowc(3), wctob(3), ...
 * 2: ISO-8859-1 aka latin1
 */
#define MIR18N_C_CSET	1


/* not configurable */
d10 2
a11 12
#if MIR18N_C_CSET == 2
#define MIR18N_SB_MAX	0xFF	/* highest allowed character in 'C' locale */
#define MIR18N_SB_CVT	0xFF	/* allow historic conversion from/to latin1 */
#define MIR18N_CCODESET	"ISO-8859-1"	/* nl_langinfo(CODESET) value for C */
#elif MIR18N_C_CSET == 1
#define MIR18N_SB_MAX	0x7F	/* highest allowed character in 'C' locale */
#define MIR18N_SB_CVT	0xFF	/* allow historic conversion from/to latin1 */
#define MIR18N_CCODESET	"ISO_646.irv:1991"	/* nl_langinfo(CODESET) rv */
#else
#define MIR18N_SB_MAX	0x7F	/* highest allowed character in 'C' locale */
#define MIR18N_SB_CVT	0x7F	/* allow historic conversion from/to latin1 */
#define MIR18N_CCODESET	"ISO_646.irv:1991"	/* nl_langinfo(CODESET) rv */
d14 1
a14 4
/* highest allowed character in 'CESU-8' (UTF-8) locale */
#define MIR18N_MB_MAX	0xFFFD

#ifndef __STDC_ISO_10646__
@


1.11
log
@set MIR18N_C_CSET to 1

"yes why not" bsiegert@@
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.10 2006/11/01 20:23:30 tg Exp $ */
d38 4
@


1.10
log
@improve cesu-8 commentary

XXX still need to implement cesu-8 and fix ucs-2 in libcitrus_iconv
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.9 2006/11/01 18:31:11 tg Exp $ */
d16 1
a16 1
#define MIR18N_C_CSET	2
@


1.9
log
@switch nl_langinfo(CODESET) response appropriate to MIR18N_C_CSET defn
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.8 2006/11/01 18:22:40 tg Exp $ */
d43 11
a53 1
extern bool __locale_is_utf8;	/* actually CESU-8 if true, ASCII if false */
@


1.8
log
@no functional change: introduce a (local) definition MIR18N_C_CSET
that covers our "historical ISO-8859-1 kludge" for compatibility.

At the moment, this is set to 2, which basically means, the 'C'
locale is actually an 'en_US.ISO-8859-1' locale. If this is set
to 1, the isalpha() etc. functions and nl_langinfo(CODESET) will
return ASCII, but conversion functions, such as btowc(3), still
accept and/or return latin1 characters. If set to 0, 7-bit ASCII
will be enforced for the 'C' locale, as per its specification.

Because we only have two locales, 'C' and 'en_US.UTF-8', this
means that we _will_ go the Plan 9 way of eventually switching
totally to UTF-8. I think after wscons has been changed to some
kind of uwscons, we can make the switch to 0, but for now, I'll
leave it at 2.

Note:	for future MirOS-current snapshots, this may be lowered
	to 1, and raised back to 2 for releases, until suffici-
	ently tested and ports are converted.
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.7 2006/09/07 17:13:16 tg Exp $ */
d24 1
d28 1
d32 1
@


1.7
log
@add CESU-8 as alias for UTF-8 since that is what we actually
use system-wide, outside of citrus (since our wchar_t is BMP
only)

XXX add CESU-8 read/write to citrus_utf8.c, no explicit op-
XXX tion to switch CESU-8 write on, just use wchar size

yes I know, CESU-8 "should not be used to interchange data",
but there is no way (outside of citrus) within mirbsd to in-
terchange UCS-4 data other than as UTF-16 (wchar_t *) or
CESU-8 (char *) strings, or convert them.
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.6 2006/06/03 21:01:24 tg Exp $ */
d6 26
a31 4
/* highest allowed character in 'C' locale */
#define MIR18N_SB_MAX	0xFF	/* or 0x7F */
/* set to 0xFF to allow conversion from/to latin1 for historical reasons */
#define MIR18N_SB_CVT	0xFF	/* or 0x7F */
@


1.6
log
@* mir18n.h: add comments
* mbrtowc.c: make more similar to rewritten wcrtomb.c
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.5 2006/06/01 22:20:04 tg Exp $ */
d10 1
a10 1
/* highest allowed character in 'UTF-8' locale */
d18 1
a18 1
extern bool __locale_is_utf8;
@


1.5
log
@sort the wctypes
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.4 2006/06/01 22:03:21 tg Exp $ */
d7 1
a7 1
#define MIR18N_SB_MAX	0xFF
d9 1
a9 1
#define MIR18N_SB_CVT	0xFF
@


1.4
log
@move UCD-generated attribute tables from libhaible to libc;
sync required definitions appropriately
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/mir18n.h,v 1.8 2006/06/01 21:49:01 tg Exp $ */
d59 1
a59 2
#define wctype_upper  iswmask(0, upper, 0)
#define wctype_lower  iswmask(1, lower, 0)
d61 2
d64 2
a65 2
#define wctype_xdigit iswmask(4, xdigit, 0)
#define wctype_space  iswmask(5, space, 0)
a66 3
#define wctype_graph  iswmask(7, print, space)
#define wctype_blank  iswmask(8, blank, 0)
#define wctype_cntrl  iswmask(9, cntrl, 0)
d68 3
a70 1
#define wctype_alnum  iswmask(11, alpha|xdigit, 0)
@


1.3
log
@add MIR18N_SB_CVT which is 0xFF as long as we want to
allow the user to convert a (char)x to a (wchar_t)x for
x e [0x80;0xff] as well.

if MIR18N_SB_MAX and MIR18N_SB_CVT are both 0xFF, the 'C'
locale is, in reality, a 'en_US.ISO-8859-1' locale; if
MIR18N_SB_MAX is set down to 0x7F, certain functions such
as isalpha() etc. will be restricted to the ISO_646.irv:1991
character set, but others (btowc and wctob, for example)
will still convert latin1 singlebyte strings (e.g. for keyboard
input, until uwscons is the only one...)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.2 2006/05/30 10:02:30 tg Exp $ */
a12 4
#ifndef __BEGIN_DECLS
#include <sys/cdefs.h>
#endif

d21 70
@


1.2
log
@* #define the respective highest allowed character for the
  'C' and 'UTF-8' locales - the 'C' one is 0xFF at the moment
  but will go down to 0x7F later, once we switch to UTF-8
* include missing <sys/cdefs.h> like with libhaible
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/include/mir18n.h,v 1.1 2006/05/21 12:12:30 tg Exp $ */
d8 2
@


1.1
log
@make MB_LEN_CUR overridable (weak function) too, in case
someone wants to plug in support for more than 2 locales
@
text
@d1 1
a1 1
/* $MirOS$ */
d6 9
@

