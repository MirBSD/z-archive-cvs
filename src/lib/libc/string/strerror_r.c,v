head	1.4;
access;
symbols
	MIRBSD_10:1.3.0.4
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200509212000:1.1.1.4
	cvs-200507211800:1.1.1.3
	cvs-200504291700:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.02.19.23.01.20;	author tg;	state Exp;
branches;
next	1.3;
commitid	100530537B911BB8142;

1.3
date	2005.10.21.10.53.27;	author tg;	state Exp;
branches;
next	1.2;
commitid	43a64358c889b118;

1.2
date	2005.09.21.21.08.47;	author tg;	state Exp;
branches;
next	1.1;
commitid	25734331cbe9126f;

1.1
date	2005.02.05.17.24.56;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.56;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.17.05.21;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.07.21.20.53.10;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	560042e0092f571e;

1.1.1.4
date	2005.09.21.20.34.28;	author tg;	state Exp;
branches;
next	;
commitid	20cd4331c3c732a2;


desc
@@


1.4
log
@• deprecate nōn-arc4random functions
• plug a few warnings (that are not API-mandated) while here
@
text
@/* $MirOS: src/lib/libc/string/strerror_r.c,v 1.3 2005/10/21 10:53:27 tg Exp $ */
/* $OpenBSD: strerror_r.c,v 1.6 2005/08/08 08:05:37 espie Exp $ */
/* Public Domain <marc@@snafu.org> */

#define sys_errlist	_sys_errlist
#define sys_nerr	_sys_nerr
#define sys_siglist	_sys_siglist

#include <errno.h>
#include <limits.h>
#include <signal.h>
#include <string.h>

__RCSID("$MirOS$");

static size_t
__digits10(unsigned int num)
{
	size_t i = 0;

	do {
		num /= 10;
		i++;
	} while (num != 0);

	return i;
}

static int
__itoa(int num, int sign, char *buffer, size_t start, size_t end)
{
	size_t pos;
	unsigned int a;
	int neg;

	if (sign && num < 0) {
		a = -num;
		neg = 1;
	}
	else {
		a = num;
		neg = 0;
	}

	pos = start + __digits10(a);
	if (neg)
	    pos++;

	if (pos < end)
		buffer[pos] = '\0';
	else
		return ERANGE;
	pos--;
	do {
		buffer[pos] = (a % 10) + '0';
		pos--;
		a /= 10;
	} while (a != 0);
	if (neg)
		buffer[pos] = '-';
	return 0;
}


static int
__num2string(int num, int sign, char *buf, size_t buflen,
    const char * const list[], size_t max, const char *def)
{
	int ret = 0;
	size_t len;

	if (0 <= num && (size_t)num < max) {
		len = strlcpy(buf, list[num], buflen);
		if (len >= buflen)
			ret = ERANGE;
	} else {
		len = strlcpy(buf, def, buflen);
		if (len >= buflen)
			ret = ERANGE;
		else {
			ret = __itoa(num, sign, buf, len, buflen);
			if (ret == 0)
				ret = EINVAL;
		}
	}

	return ret;
}

#define	UPREFIX	"Unknown error: "

int
strerror_r(int errnum, char *strerrbuf, size_t buflen)
{
	int save_errno;
	int ret_errno;

	save_errno = errno;

	ret_errno = __num2string(errnum, 1, strerrbuf, buflen,
	    (const char * const *)sys_errlist, sys_nerr, UPREFIX);

	errno = ret_errno ? ret_errno : save_errno;
	return (ret_errno);
}

#define USIGPREFIX "Unknown signal: "

/* from gen/psignal.c, string/strsignal.c */
char *__strsignal(int, char *);

char *
__strsignal(int num, char *buf)
{
	__num2string(num, 0, buf, NL_TEXTMAX, sys_siglist, NSIG,
	    USIGPREFIX);
	return buf;
}
@


1.3
log
@* remove duplicate "warning: " prefix (ABIWARN)
* fix strerror after NLS removal
* bcmp -> memcmp (one occurence)
@
text
@d1 1
a1 1
/* $MirOS$ */
d14 2
d66 2
a67 2
__num2string(int num, int sign, int setid, char *buf, size_t buflen,
    char * list[], size_t max, const char *def)
d72 1
a72 1
	if (0 <= num && num < max) {
d100 2
a101 2
	ret_errno = __num2string(errnum, 1, 1, strerrbuf, buflen,
	    sys_errlist, sys_nerr, UPREFIX);
d109 3
d115 1
a115 1
	__num2string(num, 0, 2, buf, NL_TEXTMAX, (char **)sys_siglist, NSIG,
@


1.2
log
@remove NLS here, too, so libc doesn't need to build a message catalogue
@
text
@d1 1
d71 1
a71 1
		len = strlcpy(buf, def, buflen);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD: strerror_r.c,v 1.2 2004/05/03 05:07:34 espie Exp $ */
a3 11
#if defined(LIBC_SCCS) && !defined(lint)
static char *rcsid = "$OpenBSD: strerror_r.c,v 1.2 2004/05/03 05:07:34 espie Exp $";
#endif /* LIBC_SCCS and not lint */

#ifdef NLS
#define catclose	_catclose
#define catgets		_catgets
#define catopen		_catopen
#include <nl_types.h>
#endif

d6 1
d10 1
d26 2
a27 2
static void
__itoa(int num, char *buffer, size_t start, size_t end)
d33 1
a33 1
	if (num < 0) {
d48 2
a49 4
	else {
		if (end)
			buffer[--end] = '\0'; /* XXX */
	}
d52 1
a52 3
		
		if (pos < end)
			buffer[pos] = (a % 10) + '0';
d57 2
a58 2
		if (pos < end)
			buffer[pos] = '-';
d62 25
a93 4
	size_t len;
#ifdef NLS
	nl_catd catd;
#endif
a95 1
	ret_errno = 0;
d97 2
a98 27
#ifdef NLS
	catd = catopen("libc", 0);
#endif

	if (errnum >= 0 && errnum < sys_nerr) {
#ifdef NLS
		len = strlcpy(strerrbuf, catgets(catd, 1, errnum,
		    (char *)sys_errlist[errnum]), buflen);
#else
		len = strlcpy(strerrbuf, sys_errlist[errnum], buflen);
#endif
		if (len >= buflen)
			ret_errno = ERANGE;
	} else {
#ifdef NLS
		len = strlcpy(strerrbuf, catgets(catd, 1, 0xffff, UPREFIX), 
		    buflen);
#else
		len = strlcpy(strerrbuf, UPREFIX, buflen);
#endif
		__itoa(errnum, strerrbuf, len, buflen);
		ret_errno = EINVAL;
	}

#ifdef NLS
	catclose(catd);
#endif
d103 10
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@d1 1
a1 1
/* $OpenBSD: strerror_r.c,v 1.3 2005/04/20 23:38:15 beck Exp $ */
d5 1
a5 1
static char *rcsid = "$OpenBSD: strerror_r.c,v 1.3 2005/04/20 23:38:15 beck Exp $";
d110 2
a111 6
		if (len >= buflen)
			ret_errno = ERANGE;
		else {
			__itoa(errnum, strerrbuf, len, buflen);
			ret_errno = EINVAL;
		}
@


1.1.1.3
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/* $OpenBSD: strerror_r.c,v 1.5 2005/05/26 12:56:01 otto Exp $ */
d5 1
a5 1
static char *rcsid = "$OpenBSD: strerror_r.c,v 1.5 2005/05/26 12:56:01 otto Exp $";
a16 1
#define sys_siglist	_sys_siglist
a19 1
#include <signal.h>
d35 2
a36 2
static int
__itoa(int num, int sign, char *buffer, size_t start, size_t end)
d42 1
a42 1
	if (sign && num < 0) {
d57 4
a60 2
	else
		return ERANGE;
d63 3
a65 1
		buffer[pos] = (a % 10) + '0';
d70 2
a71 2
		buffer[pos] = '-';
	return 0;
d75 4
a78 3
static int
__num2string(int num, int sign, int setid, char *buf, size_t buflen,
    char * list[], size_t max, const char *def)
d80 2
a81 1
	int ret = 0;
d83 6
a90 1
	nl_catd catd;
d94 1
a94 1
	if (0 <= num && num < max) {
d96 2
a97 2
		len = strlcpy(buf, catgets(catd, setid, num, list[num]),
		    buflen);
d99 1
a99 1
		len = strlcpy(buf, def, buflen);
d102 1
a102 1
			ret = ERANGE;
d105 2
a106 1
		len = strlcpy(buf, catgets(catd, setid, 0xffff, def), buflen);
d108 1
a108 1
		len = strlcpy(buf, def, buflen);
d111 1
a111 1
			ret = ERANGE;
d113 2
a114 3
			ret = __itoa(num, sign, buf, len, buflen);
			if (ret == 0)
				ret = EINVAL;
a121 16
	return ret;
}

#define	UPREFIX	"Unknown error: "

int
strerror_r(int errnum, char *strerrbuf, size_t buflen)
{
	int save_errno;
	int ret_errno;

	save_errno = errno;

	ret_errno = __num2string(errnum, 1, 1, strerrbuf, buflen,
	    sys_errlist, sys_nerr, UPREFIX);

a124 10

#define USIGPREFIX "Unknown signal: "

char *
__strsignal(int num, char *buf)
{
	__num2string(num, 0, 2, buf, NL_TEXTMAX, (char **)sys_siglist, NSIG,
	    USIGPREFIX);
	return buf;
}
@


1.1.1.4
log
@Import OpenBSD's libc as of today, minus some of the locale stuff,
and with brk malloc instead of mmap malloc
@
text
@d1 1
a1 1
/* $OpenBSD: strerror_r.c,v 1.6 2005/08/08 08:05:37 espie Exp $ */
d4 4
@


