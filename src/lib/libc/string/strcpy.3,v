head	1.1;
branch	1.1.1;
access;
symbols
	MIRBSD_10:1.1.1.3.0.4
	MIRBSD_10_BASE:1.1.1.3
	MIRBSD_9_BASE:1.1.1.3
	MIRBSD_8:1.1.1.3.0.2
	MIRBSD_8_BASE:1.1.1.3
	cvs-200509212000:1.1.1.3
	cvs-200507211800:1.1.1.2
	cvs-200504291700:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.1
date	2005.02.05.17.24.56;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.56;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.17.05.20;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.09.21.20.34.28;	author tg;	state Exp;
branches;
next	;
commitid	20cd4331c3c732a2;


desc
@@


1.1
log
@Initial revision
@
text
@.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: strcpy.3,v 1.12 2003/06/02 20:18:38 millert Exp $
.\"
.Dd June 29, 1991
.Dt STRCPY 3
.Os
.Sh NAME
.Nm strcpy ,
.Nm strncpy
.Nd copy strings
.Sh SYNOPSIS
.Fd #include <string.h>
.Ft char *
.Fn strcpy "char *dst" "const char *src"
.Ft char *
.Fn strncpy "char *dst" "const char *src" "size_t len"
.Sh DESCRIPTION
The
.Fn strcpy
and
.Fn strncpy
functions copy the string
.Fa src
to
.Fa dst
(including the terminating
.Ql \e0
character).
.Pp
.Fn strncpy
copies not more than
.Fa len
characters into
.Fa dst ,
appending
.Ql \e0
characters if
.Fa src
is less than
.Fa len
characters long, and
.Em not
terminating
.Fa dst
if the length of
.Fa src
is greater than or equal to
.Fa len .
.Sh RETURN VALUES
The
.Fn strcpy
and
.Fn strncpy
functions return
.Fa dst .
.Sh EXAMPLES
The following sets
.Va chararray
to
.Dq abc\e0\e0\e0 :
.Bd -literal -offset indent
(void)strncpy(chararray, "abc", 6);
.Ed
.Pp
The following sets
.Va chararray
to
.Dq abcdef
and does
.Em not
null terminate
.Va chararray
because the source string is >= the length parameter.
.Fn strncpy
.Em only
null terminates the destination string when the length of the source
string is less than the length parameter.
.Bd -literal -offset indent
(void)strncpy(chararray, "abcdefgh", 6);
.Ed
.Pp
The following copies as many characters from
.Va input
to
.Va buf
as will fit and null terminates the result.
Because
.Fn strncpy
does
.Em not
guarantee to null terminate the string itself, we must do this by hand.
.Bd -literal -offset indent
char buf[BUFSIZ];

(void)strncpy(buf, input, sizeof(buf) - 1);
buf[sizeof(buf) - 1] = '\e0';
.Ed
.Pp
Note that
.Xr strlcpy 3
is a better choice for this kind of operation.
The equivalent using
.Xr strlcpy 3
is simply:
.Bd -literal -offset indent
(void)strlcpy(buf, input, sizeof(buf));
.Ed
.Sh SEE ALSO
.Xr bcopy 3 ,
.Xr memccpy 3 ,
.Xr memcpy 3 ,
.Xr memmove 3 ,
.Xr strlcpy 3
.Sh STANDARDS
The
.Fn strcpy
and
.Fn strncpy
functions conform to
.St -ansiC .
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@d32 1
a32 1
.\"	$OpenBSD: strcpy.3,v 1.13 2005/02/25 03:12:44 cloder Exp $
d101 1
a101 1
NUL terminate
d106 1
a106 1
NUL terminates the destination string when the length of the source
d116 1
a116 1
as will fit and NUL terminates the result.
d121 1
a121 1
guarantee to NUL terminate the string itself, we must do this by hand.
@


1.1.1.3
log
@Import OpenBSD's libc as of today, minus some of the locale stuff,
and with brk malloc instead of mmap malloc
@
text
@d32 1
a32 1
.\"	$OpenBSD: strcpy.3,v 1.14 2005/08/06 03:21:36 jaredy Exp $
d103 1
a103 2
because the length of the source string is greater than or equal to the
length parameter.
d121 1
a121 1
guarantee to NUL terminate the string itself, it must be done by hand.
@


