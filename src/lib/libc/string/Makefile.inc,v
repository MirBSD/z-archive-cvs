head	1.30;
access;
symbols
	MIRBSD_10:1.20.0.2
	MIRBSD_10_BASE:1.20
	MIRBSD_9_BASE:1.11
	MIRBSD_8:1.6.0.2
	MIRBSD_8_BASE:1.6
	cvs-200509212000:1.1.1.3
	cvs-200507211800:1.1.1.3
	cvs-200504291700:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.30
date	2014.11.30.21.50.24;	author tg;	state Exp;
branches;
next	1.29;
commitid	100547B90F370266570;

1.29
date	2014.11.30.21.30.58;	author tg;	state Exp;
branches;
next	1.28;
commitid	100547B8BEB4A8A38F2;

1.28
date	2011.10.16.20.54.58;	author tg;	state Exp;
branches;
next	1.27;
commitid	1004E9B44886C295CB9;

1.27
date	2011.01.03.19.02.47;	author tg;	state Exp;
branches;
next	1.26;
commitid	1004D221D691CE0C01C;

1.26
date	2010.01.10.20.18.52;	author tg;	state Exp;
branches;
next	1.25;
commitid	1004B4A3588743BF0D3;

1.25
date	2008.12.27.21.43.23;	author tg;	state Exp;
branches;
next	1.24;
commitid	1004956A18038840C35;

1.24
date	2008.08.04.19.10.53;	author tg;	state Exp;
branches;
next	1.23;
commitid	100489754457590501A;

1.23
date	2008.08.02.14.28.35;	author tg;	state Exp;
branches;
next	1.22;
commitid	10048946F1B0A9B013B;

1.22
date	2008.08.01.18.09.28;	author tg;	state Exp;
branches;
next	1.21;
commitid	1004893513244B11E80;

1.21
date	2008.08.01.16.35.23;	author tg;	state Exp;
branches;
next	1.20;
commitid	10048933B5E5B20CA97;

1.20
date	2007.06.16.21.05.15;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004674508F681EFD66;

1.19
date	2007.06.15.16.00.03;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004672B77C139E51F0;

1.18
date	2007.02.06.16.24.41;	author tg;	state Exp;
branches;
next	1.17;
commitid	10045C8ABB857CB69A4;

1.17
date	2007.02.06.15.52.00;	author tg;	state Exp;
branches;
next	1.16;
commitid	10045C8A3FD0635CC8D;

1.16
date	2006.11.21.01.38.57;	author tg;	state Exp;
branches;
next	1.15;
commitid	1004562588D119AC47C;

1.15
date	2006.11.21.01.25.10;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004562556214E26914;

1.14
date	2006.11.21.01.04.09;	author tg;	state Exp;
branches;
next	1.13;
commitid	100456250830E53C5DB;

1.13
date	2006.11.20.23.56.44;	author tg;	state Exp;
branches;
next	1.12;
commitid	100456240C065961156;

1.12
date	2006.11.09.14.31.12;	author tg;	state Exp;
branches;
next	1.11;
commitid	10045533BB5599D1B17;

1.11
date	2006.06.16.16.50.00;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004492E14A1C2D8B55;

1.10
date	2006.06.02.12.58.53;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004480361F5ADF3731;

1.9
date	2006.06.02.02.29.56;	author tg;	state Exp;
branches;
next	1.8;
commitid	100447FA28346FF91C0;

1.8
date	2006.06.01.22.17.26;	author tg;	state Exp;
branches;
next	1.7;
commitid	100447F676243262322;

1.7
date	2006.06.01.21.54.47;	author tg;	state Exp;
branches;
next	1.6;
commitid	100447F6214161B5202;

1.6
date	2005.09.22.20.45.54;	author tg;	state Exp;
branches;
next	1.5;
commitid	30f543331811b2bc;

1.5
date	2005.09.22.20.16.47;	author tg;	state Exp;
branches;
next	1.4;
commitid	66e84333114493d8;

1.4
date	2005.04.29.18.34.49;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.16.20.30.49;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.20.28.48;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.24.56;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.56;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.17.05.18;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.07.21.20.53.08;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.30
log
@there is no evidence of a wcsndup(3) in the wild, plus it would now
need a wcsnlen(3), which also does not exist, even here, so nuke it
@
text
@# $MirOS: src/lib/libc/string/Makefile.inc,v 1.29 2014/11/30 21:30:58 tg Exp $
# $OpenBSD: Makefile.inc,v 1.17 2005/05/26 12:56:01 otto Exp $

# string sources
.PATH: ${LIBCSRCDIR}/arch/${MACHINE_ARCH}/string ${LIBCSRCDIR}/string

SRCS+=	bm.c memccpy.c strcasestr.c strdup.c \
	strerror.c strerror_r.c strmode.c strsignal.c strtok.c \
	wcscat.c wcschr.c wcscpy.c wcscspn.c \
	wcsncat.c wcsncmp.c wcsncpy.c wcspbrk.c wcsrchr.c wcsspn.c \
	wcsstr.c wmemchr.c wmemcmp.c wmemcpy.c \
	wmemmove.c wmemset.c
SRCS+=	stpcpy.c stpncpy.c

SRCS+=	wcsdup.c
SRCS+=	wcstok.c

.ifdef __CRAZY
CFLAGS_strcasestr.o+= -Wno-cast-qual
CFLAGS_strerror_r.o+= -Wno-error
CFLAGS_strpbrk.o+= -Wno-cast-qual
CFLAGS_strstr.o+= -Wno-cast-qual
CFLAGS_wcschr.o+= -Wno-cast-qual
CFLAGS_wcspbrk.o+= -Wno-cast-qual
CFLAGS_wcsrchr.o+= -Wno-cast-qual
CFLAGS_wcsstr.o+= -Wno-cast-qual
CFLAGS_wcswcs.o+= -Wno-cast-qual
CFLAGS_wmemchr.o+= -Wno-cast-qual
.endif

UIF_NUSRCS+=	wcswcs.c wcsstr.c -DWCSWCS

SRCS+=		strndup.c
#UIF_NUSRCS+=	wcsndup.c strndup.c -DWIDEC

SRCS+=		strnlen.c
SRCS+=		timingsafe_bcmp.c
SRCS+=		timingsafe_memcmp.c

# machine-dependent net sources
# m-d Makefile.inc must include sources for:
#	bcopy()
#	strcat() strcpy() strcspn()
#	strncat() strpbrk() strsep()
#	strspn() strstr() swav()
# m-d Makefile.inc may include sources for:
#	memcpy() memmove()

.include "${LIBCSRCDIR}/arch/${MACHINE_ARCH}/string/Makefile.inc"

MAN+=	bm.3 bcmp.3 bcopy.3 bstring.3 bzero.3 ffs.3 memccpy.3 memchr.3 \
	memcmp.3 memcpy.3 memmove.3 memset.3 strcasecmp.3 strcat.3 \
	strchr.3 strcmp.3 strcoll.3 strcpy.3 strcspn.3 strerror.3 \
	string.3 strlen.3 strmode.3 strdup.3 strpbrk.3 strrchr.3 strsep.3 \
	strsignal.3 strspn.3 strstr.3 strtok.3 strxfrm.3 swab.3 strlcpy.3 \
	timingsafe_bcmp.3 wcstok.3 wmemchr.3

MLINKS+=bm.3 bm_comp.3 bm.3 bm_exec.3 bm.3 bm_free.3
MLINKS+=strchr.3 index.3
MLINKS+=strdup.3 strndup.3
MLINKS+=strrchr.3 rindex.3
MLINKS+=strcasecmp.3 strncasecmp.3
MLINKS+=strcat.3 strncat.3
MLINKS+=strcmp.3 strncmp.3
MLINKS+=strcpy.3 strncpy.3
MLINKS+=strlcpy.3 strlcat.3
MLINKS+=strlen.3 strnlen.3
MLINKS+=strstr.3 strcasestr.3
MLINKS+=strtok.3 strtok_r.3
MLINKS+=strerror.3 strerror_r.3
MLINKS+=timingsafe_bcmp.3 timingsafe_memcmp.3
MLINKS+=wmemchr.3 wcscasecmp.3
MLINKS+=wmemchr.3 wcscat.3
MLINKS+=wmemchr.3 wcschr.3
MLINKS+=wmemchr.3 wcscmp.3
MLINKS+=wmemchr.3 wcscoll.3
MLINKS+=wmemchr.3 wcscpy.3
MLINKS+=wmemchr.3 wcscspn.3
MLINKS+=wmemchr.3 wcsdup.3
MLINKS+=wmemchr.3 wcsftime.3
MLINKS+=wmemchr.3 wcslcat.3
MLINKS+=wmemchr.3 wcslcpy.3
MLINKS+=wmemchr.3 wcslen.3
MLINKS+=wmemchr.3 wcsncasecmp.3
MLINKS+=wmemchr.3 wcsncat.3
MLINKS+=wmemchr.3 wcsncmp.3
MLINKS+=wmemchr.3 wcsncpy.3
#MLINKS+=wmemchr.3 wcsndup.3
MLINKS+=wmemchr.3 wcspbrk.3
MLINKS+=wmemchr.3 wcsrchr.3
MLINKS+=wmemchr.3 wcsspn.3
MLINKS+=wmemchr.3 wcsstr.3
MLINKS+=wmemchr.3 wcswcs.3
MLINKS+=wmemchr.3 wcsxfrm.3
MLINKS+=wmemchr.3 wmemcmp.3
MLINKS+=wmemchr.3 wmemcpy.3
MLINKS+=wmemchr.3 wmemmove.3
MLINKS+=wmemchr.3 wmemset.3
@


1.29
log
@• timingsafe_memcmp is not the same as timingsafe_bcmp, remove
• remove timingsafe_bcmp from libkern
• (re-)add timingsafe_bcmp and timingsafe_memcmp to libc
• update omalloc
• newly add reallocarray to libc
• add strnlen to libc, fix strndup to not read beyond size with that
• update manpages and add MLINKS: strndup, strnlen, timingsafe_*cmp
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.28 2011/10/16 20:54:58 tg Exp $
d34 1
a34 1
UIF_NUSRCS+=	wcsndup.c strndup.c -DWIDEC
d88 1
a88 1
MLINKS+=wmemchr.3 wcsndup.3
@


1.28
log
@fix accidental three-month-but-for-a-day ABI breakage of libc:
cid 1004E2319B430931994 renamed UNIFDEF_SRCS use of kern to not
interfere with users’ use of it, but libc relied on that…
rename these to UIF_NUSRCS which kern guarantees
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.27 2011/01/03 19:02:47 tg Exp $
d36 4
d56 1
a56 1
	wcstok.3 wmemchr.3
d67 1
d71 1
@


1.27
log
@move strchr, strrchr, strncpy to kern; remove redundant strncmp, strncasecmp protos
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.26 2010/01/10 20:18:52 tg Exp $
d31 1
a31 1
UNIFDEF_SRCS+=	wcswcs.c wcsstr.c -DWCSWCS
d34 1
a34 1
UNIFDEF_SRCS+=	wcsndup.c strndup.c -DWIDEC
@


1.26
log
@• kern: new KERNISUSR (defined by libc and libmdsup, but not by either
  bootloader or kernel), enables new NUSRCS, UIF_NUSRCS
• move MD strncmp() to kern
• move MI {str,wcs}case{,n}cmp to kern
• make wcs* functions NU not KU as we don’t need them in the kernel YET
• move __main to NU (it’s a joke anyway, I think)
• bootloader: make devsw_prefix_match case-insensitive
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.25 2008/12/27 21:43:23 tg Exp $
d38 3
a40 3
#	bcopy() index()
#	rindex() strcat() strcpy() strcspn()
#	strncat() strncpy() strpbrk() strsep()
d43 1
a43 1
#	memcpy() memmove() strchr() strrchr()
a46 22
# if no machine specific strchr(3), build one out of index(3).
.ifndef _MD_STRCHR
UNIFDEF_SRCS+=	strchr.c index.c -DSTRCHR
.else
LOBJS+=		strchr.ln

strchr.ln: index.c
	${LINT} ${LINTFLAGS} ${CFLAGS:M-[IDU]*} ${CPPFLAGS:M-[IDU]*} -i \
	    -DSTRCHR -o $@@ $>
.endif

# if no machine specific strrchr(3), build one out of rindex(3).
.ifndef _MD_STRRCHR
UNIFDEF_SRCS+=	strrchr.c rindex.c -DSTRRCHR
.else
LOBJS+=		strrchr.ln

strrchr.ln: rindex.c
	${LINT} ${LINTFLAGS} ${CFLAGS:M-[IDU]*} ${CPPFLAGS:M-[IDU]*} -i \
	    -DSTRRCHR -o $@@ $>
.endif

@


1.25
log
@stpcpy and stpncpy, GNU extensions

XXX no manpages for either these or mempcpy (yet)
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.24 2008/08/04 19:10:53 tg Exp $
a30 5
UNIFDEF_SRCS+=	strcasecmp.c strcasecmpfun.c -DSTRCASECMP
UNIFDEF_SRCS+=	strncasecmp.c strcasecmpfun.c -DSTRNCASECMP
UNIFDEF_SRCS+=	wcscasecmp.c strcasecmpfun.c -DWCSCASECMP
UNIFDEF_SRCS+=	wcsncasecmp.c strcasecmpfun.c -DWCSNCASECMP

d40 1
a40 1
#	strncat() strncmp() strncpy() strpbrk() strsep()
@


1.24
log
@next round of build etc. fixes
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.23 2008/08/02 14:28:35 tg Exp $
d13 1
@


1.23
log
@wcswcs.c has been unifdef-src'd already some time ago, nuke dup
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.22 2008/08/01 18:09:28 tg Exp $
a50 24
# if no machine specific memmove(3), build one out of bcopy(3).
.ifndef _MD_MEMMOVE
UNIFDEF_SRCS+=	memmove.c bcopy.c -DMEMMOVE
.else
LOBJS+=		memmove.ln

memmove.ln: bcopy.c
	${LINT} ${LINTFLAGS} ${CFLAGS:M-[IDU]*} ${CPPFLAGS:M-[IDU]*} -i \
	    -DMEMMOVE -o $@@ $>
.endif

# if no machine specific memcpy(3), build one out of bcopy(3).
# if there is a machine specific memmove(3), we'll assume it aliases
# memcpy(3).
.if !defined(_MD_MEMCPY) && !defined(_MD_MEMMOVE)
UNIFDEF_SRCS+=	memcpy.c bcopy.c -DMEMCOPY
.else
LOBJS+=		memcpy.ln

memcpy.ln: bcopy.c
	${LINT} ${LINTFLAGS} ${CFLAGS:M-[IDU]*} ${CPPFLAGS:M-[IDU]*} -i \
	    -DMEMCOPY -o $@@ $>
.endif

@


1.22
log
@more migration

(in case you wonder: goal is to make libc, kernel and bootloaders share
the code currently in libkern, (some of) libsa, and libz, and to move
the bootloaders out of src/sys/ and into some more sane place)
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.21 2008/08/01 16:35:23 tg Exp $
d11 1
a11 1
	wcsstr.c wcswcs.c wmemchr.c wmemcmp.c wmemcpy.c \
@


1.21
log
@migrate strlcat/strlcpy/strxfrm and wcs* equivalents
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.20 2007/06/16 21:05:15 tg Exp $
d9 1
a9 1
	wcscat.c wcschr.c wcscmp.c wcscpy.c wcscspn.c \
a34 2
UNIFDEF_SRCS+=	strcoll.c strcmp.c -DSTRCOLL
UNIFDEF_SRCS+=	wcscoll.c wcscmp.c -DWCSCOLL
d42 2
a43 2
#	bcopy() bzero() ffs() index() memchr() memcmp() memset()
#	rindex() strcat() strcmp() strcpy() strcspn()
d47 1
a47 1
#	bcmp() memcpy() memmove() strchr() strrchr()
a50 11
# if no machine specific bcmp(3), build one out of memcmp(3).
.ifndef _MD_BCMP
UNIFDEF_SRCS+=	bcmp.c memcmp.c -DBCMP
.else
LOBJS+=		bcmp.ln

bcmp.ln: memcmp.c
	${LINT} ${LINTFLAGS} ${CFLAGS:M-[IDU]*} ${CPPFLAGS:M-[IDU]*} -i \
	    -DBCMP -o $@@ $>
.endif

@


1.20
log
@optimise strndup(3) and introduce wcsndup(3), agreed bsiegert@@
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.19 2007/06/15 16:00:03 tg Exp $
a29 7
UNIFDEF_SRCS+=	strlcpy.c strlfun.c -DHAVE_STRLCAT=1
UNIFDEF_SRCS+=	strlcat.c strlfun.c -DHAVE_STRLCPY=1
UNIFDEF_SRCS+=	strxfrm.c strlfun.c -DSTRXFRM
UNIFDEF_SRCS+=	wcslcpy.c wcslfun.c -DHAVE_WCSLCAT=1
UNIFDEF_SRCS+=	wcslcat.c wcslfun.c -DHAVE_WCSLCPY=1
UNIFDEF_SRCS+=	wcsxfrm.c wcslfun.c -DWCSXFRM

@


1.19
log
@implement just another useful GNU extension: strndup(3)
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.18 2007/02/06 16:24:41 tg Exp $
d7 1
a7 1
SRCS+=	bm.c memccpy.c strcasestr.c strdup.c strndup.c \
d46 3
d152 1
@


1.18
log
@next proof-of-concept move: strlen (no asm yet)
XXX libkern/libsa include path might be missing
XXX libkern/libsa/MD-libkern/MD-libsa build is ugly
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.17 2007/02/06 15:52:00 tg Exp $
d7 1
a7 1
SRCS+=	bm.c memccpy.c strcasestr.c strdup.c \
d123 1
@


1.17
log
@change UNIFDEF_SRCS(dest,source,flags) third argument to be a
comma-separated list of -Dfoo -Ubar flags passed to unifdef(1)
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.16 2006/11/21 01:38:57 tg Exp $
d10 1
a10 1
	wcslen.c wcsncat.c wcsncmp.c wcsncpy.c wcspbrk.c wcsrchr.c wcsspn.c \
d49 1
a49 1
#	rindex() strcat() strcmp() strcpy() strcspn() strlen()
@


1.16
log
@strxfrm and wcsxfrm just copy, because we have only ASCII and UTF-8 (CESU-8),
all three of whose collating order is just the natural octet order; they can,
thusly, be implemented as pure copies of strlcpy/wcslcpy (cf previous commit)
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.15 2006/11/21 01:25:10 tg Exp $
d30 15
a44 15
UNIFDEF_SRCS+=	strlcpy.c strlfun.c HAVE_STRLCAT=1
UNIFDEF_SRCS+=	strlcat.c strlfun.c HAVE_STRLCPY=1
UNIFDEF_SRCS+=	strxfrm.c strlfun.c STRXFRM
UNIFDEF_SRCS+=	wcslcpy.c wcslfun.c HAVE_WCSLCAT=1
UNIFDEF_SRCS+=	wcslcat.c wcslfun.c HAVE_WCSLCPY=1
UNIFDEF_SRCS+=	wcsxfrm.c wcslfun.c WCSXFRM

UNIFDEF_SRCS+=	strcasecmp.c strcasecmpfun.c STRCASECMP
UNIFDEF_SRCS+=	strncasecmp.c strcasecmpfun.c STRNCASECMP
UNIFDEF_SRCS+=	wcscasecmp.c strcasecmpfun.c WCSCASECMP
UNIFDEF_SRCS+=	wcsncasecmp.c strcasecmpfun.c WCSNCASECMP

UNIFDEF_SRCS+=	strcoll.c strcmp.c STRCOLL
UNIFDEF_SRCS+=	wcscoll.c wcscmp.c WCSCOLL
UNIFDEF_SRCS+=	wcswcs.c wcsstr.c WCSWCS
d59 1
a59 1
UNIFDEF_SRCS+=	bcmp.c memcmp.c BCMP
d70 1
a70 1
UNIFDEF_SRCS+=	memmove.c bcopy.c MEMMOVE
d83 1
a83 1
UNIFDEF_SRCS+=	memcpy.c bcopy.c MEMCOPY
d94 1
a94 1
UNIFDEF_SRCS+=	strchr.c index.c STRCHR
d105 1
a105 1
UNIFDEF_SRCS+=	strrchr.c rindex.c STRRCHR
@


1.15
log
@save even more source files by using common code
(could be done for almost all of the wide* functions, but it still sucks)

this is cool because, if you spot a bug, you only fix it in one place,
not in n places
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.14 2006/11/21 01:04:09 tg Exp $
d9 1
a9 2
	strxfrm.c strlcat.c strlcpy.c \
	wcscat.c wcschr.c wcscmp.c wcscpy.c wcscspn.c wcslcat.c wcslcpy.c \
a15 1
SRCS+=	wcsxfrm.c
d32 1
d35 1
@


1.14
log
@get rid of the need to have several stub files consisting just of a
define and an include; simplify a lot; rewrite some code to simplify
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.13 2006/11/20 23:56:44 tg Exp $
d7 1
a7 1
SRCS+=	bm.c memccpy.c strcasecmp.c strcasestr.c strdup.c \
a14 3
SRCS+=	wcscasecmp.c
SRCS+=	wcsncasecmp.c

d37 4
a40 1
UNIFDEF_SRCS+=	strncasecmp.c strcasecmp.c STRNCASECMP
@


1.13
log
@only disable certain warnings to help __CRAZY builds if we're
indeed building with __CRAZY=yes
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.12 2006/11/09 14:31:12 tg Exp $
d7 1
a7 1
SRCS+=	bm.c memccpy.c strcasecmp.c strcasestr.c strcoll.c strdup.c \
a17 1
SRCS+=	wcscoll.c
d35 10
a44 7
.for _i _j in str STR wcs WCS
.  for _k _l in cpy CAT cat CPY
CLEANFILES+=	${_i}l${_k}.c
${_i}l${_k}.c: ${_i}lfun.c
	-unifdef -DHAVE_${_j}L${_l}=1 $> >$@@
.  endfor
.endfor
d59 1
a59 5
SRCS+=		bcmp.c
CLEANFILES+=	bcmp.c

bcmp.c: memcmp.c
	-unifdef -DBCMP $> >$@@
d70 1
a70 5
SRCS+=		memmove.c
CLEANFILES+=	memmove.c

memmove.c: bcopy.c
	-unifdef -DMEMMOVE -UMEMCOPY $> >$@@
d83 1
a83 5
SRCS+=		memcpy.c
CLEANFILES+=	memcpy.c

memcpy.c: bcopy.c
	-unifdef -UMEMMOVE -DMEMCOPY $> >$@@
d94 1
a94 5
SRCS+=		strchr.c
CLEANFILES+=	strchr.c

strchr.c: index.c
	-unifdef -DSTRCHR $> >$@@
d105 1
a105 5
SRCS+=		strrchr.c
CLEANFILES+=	strrchr.c

strrchr.c: rindex.c
	-unifdef -DSTRRCHR $> >$@@
@


1.12
log
@build {str,wcs}l{cpy,cat} into different .o files to save space in statics
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.11 2006/06/16 16:50:00 tg Exp $
d23 1
d34 1
@


1.11
log
@unifdef can return errorlevel 1
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.10 2006/06/02 12:58:53 tg Exp $
d8 3
a10 3
	strerror.c strerror_r.c strlfun.c strmode.c strsignal.c strtok.c \
	strxfrm.c \
	wcscat.c wcschr.c wcscmp.c wcscpy.c wcscspn.c wcslfun.c \
d34 8
@


1.10
log
@enable the new functions
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.9 2006/06/02 02:29:56 tg Exp $
d51 1
a51 1
	unifdef -DBCMP $> >$@@
d66 1
a66 1
	unifdef -DMEMMOVE -UMEMCOPY $> >$@@
d83 1
a83 1
	unifdef -UMEMMOVE -DMEMCOPY $> >$@@
d98 1
a98 1
	unifdef -DSTRCHR $> >$@@
d113 1
a113 1
	unifdef -DSTRRCHR $> >$@@
@


1.9
log
@__CRAZY cleanliness for most of libc
not: net/rpc/etc., time, thread, sys
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.8 2006/06/01 22:17:26 tg Exp $
d20 1
@


1.8
log
@move freely licenced functions from libhaible into libc;
add missing wcsxfrm(3); sort and style; remove some stubs
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.7 2006/06/01 21:54:47 tg Exp $
d22 11
@


1.7
log
@move the wide string functions wcs[n]casecmp, wcscoll and wcsdup,
as well as the enhanced wmemchr(3) manual page, from libhaible into libc
(version bump to come, for all future commits)
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.6 2005/09/22 20:45:54 tg Exp $
d20 1
@


1.6
log
@we removed the wcstok with adv clause
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.5 2005/09/22 20:16:47 tg Exp $
d15 6
d127 1
a127 4
MLINKS+=wmemchr.3 wmemcmp.3
MLINKS+=wmemchr.3 wmemcpy.3
MLINKS+=wmemchr.3 wmemmove.3
MLINKS+=wmemchr.3 wmemset.3
d131 1
d134 2
d139 1
d147 6
@


1.5
log
@merge
@
text
@d1 1
a1 1
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.4 2005/04/29 18:34:49 tg Exp $
d12 1
a12 1
	wcsstr.c wcstok.c wcswcs.c wmemchr.c wmemcmp.c wmemcpy.c \
@


1.4
log
@(tentative) merge, more to come
@
text
@d1 2
a2 2
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.3 2005/04/16 20:30:49 tg Exp $
# $OpenBSD: Makefile.inc,v 1.14 2005/03/30 03:04:19 deraadt Exp $
d9 5
a13 1
	strxfrm.c __strsignal.c
d107 2
a108 1
	strsignal.3 strspn.3 strstr.3 strtok.3 strxfrm.3 swab.3 strlcpy.3
d121 19
@


1.3
log
@clean up the memmove/memcpy/bcopy confusion and merge (MI) bcmp and memcmp
@
text
@d1 2
a2 2
# $MirOS: src/lib/libc/string/Makefile.inc,v 1.2 2005/03/06 20:28:48 tg Exp $
# $OpenBSD: Makefile.inc,v 1.13 2004/05/03 19:56:08 millert Exp $
d7 3
a9 3
SRCS+=	bm.c memccpy.c strcasecmp.c strcoll.c strdup.c strerror.c \
	strerror_r.c strlfun.c strmode.c strsignal.c strtok.c strxfrm.c \
	__strsignal.c
d113 1
@


1.2
log
@merge src/lib
@
text
@d1 1
a1 1
# $MirOS$
d13 1
a13 1
#	bcmp() bcopy() bzero() ffs() index() memchr() memcmp() memset()
d18 1
a18 1
#	memcpy() memmove() strchr() strrchr()
d22 15
d38 12
a49 20
.if empty(SRCS:Mmemmove.S)
OBJS+=	memmove.o
memmove.o: bcopy.c
	${CC} -DMEMMOVE ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}

memmove.go: bcopy.c
	${CC} -g -DMEMMOVE ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}

memmove.po: bcopy.c
	${CC} -DMEMMOVE ${CFLAGS} ${CPPFLAGS} -c -p ${.ALLSRC} -o ${.TARGET}
	@@${LD} -X -r ${.TARGET}
	@@mv a.out ${.TARGET}

memmove.so: bcopy.c
	${CC} ${PICFLAG} -DPIC -DMEMMOVE ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} \
		-o ${.TARGET}
d55 12
a66 22
.if empty(SRCS:Mmemcpy.S)
.if empty(SRCS:Mmemmove.S)
OBJS+=	memcpy.o
memcpy.o: bcopy.c
	${CC} -DMEMCOPY ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}

memcpy.go: bcopy.c
	${CC} -g -DMEMCOPY ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}

memcpy.po: bcopy.c
	${CC} -DMEMCOPY ${CFLAGS} ${CPPFLAGS} -c -p ${.ALLSRC} -o ${.TARGET}
	@@${LD} -X -r ${.TARGET}
	@@mv a.out ${.TARGET}

memcpy.so: bcopy.c
	${CC} ${PICFLAG} -DPIC -DMEMCOPY ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} \
		-o ${.TARGET}
.endif
d70 12
a81 20
.if empty(SRCS:Mstrchr.S)
OBJS+=	strchr.o
strchr.o: index.c
	${CC} -DSTRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}

strchr.go: index.c
	${CC} -g -DSTRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}

strchr.po: index.c
	${CC} -DSTRCHR ${CFLAGS} ${CPPFLAGS} -c -p ${.ALLSRC} -o ${.TARGET}
	@@${LD} -X -r ${.TARGET}
	@@mv a.out ${.TARGET}

strchr.so: index.c
	${CC} ${PICFLAG} -DPIC -DSTRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} \
	    -o ${.TARGET}
d85 8
a92 37
.if empty(SRCS:Mstrrchr.S)
OBJS+=	strrchr.o
strrchr.o: rindex.c
	${CC} -DSTRRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}

strrchr.go: rindex.c
	${CC} -g -DSTRRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} -o ${.TARGET}
	@@${LD} -x -r ${.TARGET}
	@@mv a.out ${.TARGET}

strrchr.po: rindex.c
	${CC} -DSTRRCHR ${CFLAGS} ${CPPFLAGS} -c -p ${.ALLSRC} -o ${.TARGET}
	@@${LD} -X -r ${.TARGET}
	@@mv a.out ${.TARGET}

strrchr.so: rindex.c
	${CC} ${PICFLAG} -DPIC -DSTRRCHR ${CFLAGS} ${CPPFLAGS} -c ${.ALLSRC} \
	    -o ${.TARGET}
.endif

# build .ln files for memmove, memcpy, strchr and strrchr always from
# bcopy, index, and rindex
LOBJS+=	memmove.ln memcpy.ln strchr.ln strrchr.ln

memmove.ln: bcopy.c
	lint ${LINTFLAGS} -DMEMMOVE ${CFLAGS:M-[IDU]*} -i -o ${.TARGET} \
		${LIBCSRCDIR}/string/bcopy.c

memcpy.ln: bcopy.c
	lint ${LINTFLAGS} -DMEMCOPY ${CFLAGS:M-[IDU]*} -i -o ${.TARGET} \
		${LIBCSRCDIR}/string/bcopy.c

strchr.ln: index.c
	lint ${LINTFLAGS} -DSTRCHR ${CFLAGS:M-[IDU]*} -i -o ${.TARGET} \
		${LIBCSRCDIR}/string/index.c
d95 3
a97 2
	lint ${LINTFLAGS} -DSTRRCHR ${CFLAGS:M-[IDU]*} -i -o ${.TARGET} \
		${LIBCSRCDIR}/string/rindex.c
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
#	$OpenBSD: Makefile.inc,v 1.13 2004/05/03 19:56:08 millert Exp $
d8 1
a8 1
	strerror_r.c strlcat.c strmode.c strsignal.c strtok.c strxfrm.c \
d14 1
a14 1
#	rindex() strcat() strcmp() strcpy() strcspn() strlen() strlcpy()
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.14 2005/03/30 03:04:19 deraadt Exp $
d6 3
a8 3
SRCS+=	bm.c memccpy.c strcasecmp.c strcasestr.c strcoll.c strdup.c \
	strerror.c strerror_r.c strlcat.c strmode.c strsignal.c strtok.c \
	strxfrm.c __strsignal.c
a150 1
MLINKS+=strstr.3 strcasestr.3
@


1.1.1.3
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.17 2005/05/26 12:56:01 otto Exp $
d8 1
a8 5
	strxfrm.c \
	wcscat.c wcschr.c wcscmp.c wcscpy.c wcscspn.c wcslcat.c wcslcpy.c \
	wcslen.c wcsncat.c wcsncmp.c wcsncpy.c wcspbrk.c wcsrchr.c wcsspn.c \
	wcsstr.c wcstok.c wcswcs.c wmemchr.c wmemcmp.c wmemcpy.c \
	wmemmove.c wmemset.c
d141 1
a141 2
	strsignal.3 strspn.3 strstr.3 strtok.3 strxfrm.3 swab.3 strlcpy.3 \
	wcstok.3 wmemchr.3
a153 19
MLINKS+=wmemchr.3 wmemcmp.3
MLINKS+=wmemchr.3 wmemcpy.3
MLINKS+=wmemchr.3 wmemmove.3
MLINKS+=wmemchr.3 wmemset.3
MLINKS+=wmemchr.3 wcscat.3
MLINKS+=wmemchr.3 wcschr.3
MLINKS+=wmemchr.3 wcscmp.3
MLINKS+=wmemchr.3 wcscpy.3
MLINKS+=wmemchr.3 wcscspn.3
MLINKS+=wmemchr.3 wcslcat.3
MLINKS+=wmemchr.3 wcslcpy.3
MLINKS+=wmemchr.3 wcslen.3
MLINKS+=wmemchr.3 wcsncat.3
MLINKS+=wmemchr.3 wcsncmp.3
MLINKS+=wmemchr.3 wcsncpy.3
MLINKS+=wmemchr.3 wcspbrk.3
MLINKS+=wmemchr.3 wcsrchr.3
MLINKS+=wmemchr.3 wcsspn.3
MLINKS+=wmemchr.3 wcsstr.3
@


