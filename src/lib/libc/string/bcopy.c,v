head	1.8;
access;
symbols
	MIRBSD_10:1.8.0.2
	MIRBSD_10_BASE:1.8
	MIRBSD_9_BASE:1.7
	MIRBSD_8:1.7.0.2
	MIRBSD_8_BASE:1.7
	cvs-200509212000:1.1.1.3
	cvs-200507211800:1.1.1.2
	cvs-200504291700:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2007.08.08.20.57.41;	author tg;	state Exp;
branches;
next	1.7;
commitid	10046BA2E54570E080B;

1.7
date	2005.09.22.20.16.47;	author tg;	state Exp;
branches;
next	1.6;
commitid	66e84333114493d8;

1.6
date	2005.04.29.20.55.41;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.18.34.50;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.16.20.30.49;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.16.19.52.23;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.20.28.48;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.24.56;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.56;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.17.05.18;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.09.21.20.34.28;	author tg;	state Exp;
branches;
next	;
commitid	20cd4331c3c732a2;


desc
@@


1.8
log
@replace some unifdef(1) catastrophes
@
text
@/*-
 * Copyright (c) 2007
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#include <stdint.h>
#include <string.h>

__RCSID("$MirOS$");

/* this is the basic copy data type, should be fastest */
typedef unsigned long mword;

#define mbytes	sizeof (mword)
#define mmask	(mbytes - 1)

#ifdef MEMCOPY
#define MEMMOVE
#define memmove	memcpy
#endif

#ifdef MEMMOVE
void *
memmove(void *dst, const void *src, size_t len)
#else
void
bcopy(const void *src, void *dst, size_t len)
#endif
{
	const uint8_t *s = src;
	uint8_t *d = dst;
	size_t n;
	intptr_t cp;

	if (len == 0 || dst == src)
		goto done;

	if ((intptr_t)dst < (intptr_t)src) {
		/* copy forward */
		if ((((cp = (intptr_t)s) | (intptr_t)d) & mmask) &&
		    (((cp ^ (intptr_t)d) & mmask) == 0) && len >= mbytes) {
			/* low bits match: first align then copy entire words */
			n = mbytes - (cp & mmask);
			len -= n;
			while (n--)
				*d++ = *s++;
			n = len / mbytes;
			len &= mmask;
			while (n--) {
				*(mword *)d = *(const mword *)s;
				s += mbytes;
				d += mbytes;
			}
		}
		while (len--)
			*d++ = *s++;
	} else {
		/* copy backward */
		s += len;
		d += len;
		if ((((cp = (intptr_t)s) | (intptr_t)d) & mmask) &&
		    (((cp ^ (intptr_t)d) & mmask) == 0) && len >= mbytes) {
			/* low bits match: first align then copy entire words */
			n = cp & mmask;
			len -= n;
			while (n--)
				*--d = *--s;
			n = len / mbytes;
			len &= mmask;
			while (n--) {
				s -= mbytes;
				d -= mbytes;
				*(mword *)d = *(const mword *)s;
			}
		}
		while (len--)
			*--d = *--s;
	}
 done:
#ifdef MEMMOVE
	return (dst);
#else
	return;
#endif
}
@


1.7
log
@merge
@
text
@a0 1
/*	$OpenBSD: bcopy.c,v 1.5 2005/08/08 08:05:37 espie Exp $ */
d2 2
a3 2
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
d5 5
a9 2
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
d11 8
a18 23
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d21 1
d24 4
a27 1
__RCSID("$MirOS: src/lib/libc/string/bcopy.c,v 1.6 2005/04/29 20:55:41 tg Exp $");
d29 2
a30 5
/*
 * sizeof(word) MUST BE A POWER OF TWO
 * SO THAT wmask BELOW IS ALL ONES
 */
typedef	long word;		/* "word" used for optimal copy speed */
d32 4
a35 2
#define	wsize	sizeof(word)
#define	wmask	(wsize - 1)
d37 1
a37 9
/*
 * Copy a block of memory, handling overlap.
 * This is the routine that actually implements
 * (the portable versions of) bcopy, memcpy, and memmove.
 */
#if defined(MEMCOPY)
void *
memcpy(void *dst0, const void *src0, size_t length)
#elif defined(MEMMOVE)
d39 1
a39 1
memmove(void *dst0, const void *src0, size_t length)
d42 1
a42 1
bcopy(const void *src0, void *dst0, size_t length)
d45 4
a48 3
	char *dst = dst0;
	const char *src = src0;
	size_t t;
d50 1
a50 1
	if (length == 0 || dst == src)		/* nothing to do */
d53 16
a68 22
	/*
	 * Macros: loop-t-times; and loop-t-times, t>0
	 */
#define	TLOOP(s) if (t) TLOOP1(s)
#define	TLOOP1(s) do { s; } while (--t)

	if ((unsigned long)dst < (unsigned long)src) {
		/*
		 * Copy forward.
		 */
		t = (long)src;	/* only need low bits */
		if ((t | (long)dst) & wmask) {
			/*
			 * Try to align operands.  This cannot be done
			 * unless the low bits match.
			 */
			if ((t ^ (long)dst) & wmask || length < wsize)
				t = length;
			else
				t = wsize - (t & wmask);
			length -= t;
			TLOOP1(*dst++ = *src++);
d70 2
a71 7
		/*
		 * Copy whole words, then mop up any trailing bytes.
		 */
		t = length / wsize;
		TLOOP(*(word *)dst = *(word *)src; src += wsize; dst += wsize);
		t = length & wmask;
		TLOOP(*dst++ = *src++);
d73 17
a89 15
		/*
		 * Copy backwards.  Otherwise essentially the same.
		 * Alignment works as before, except that it takes
		 * (t&wmask) bytes to align, not wsize-(t&wmask).
		 */
		src += length;
		dst += length;
		t = (long)src;
		if ((t | (long)dst) & wmask) {
			if ((t ^ (long)dst) & wmask || length <= wsize)
				t = length;
			else
				t &= wmask;
			length -= t;
			TLOOP1(*--dst = *--src);
d91 2
a92 4
		t = length / wsize;
		TLOOP(src -= wsize; dst -= wsize; *(word *)dst = *(word *)src);
		t = length & wmask;
		TLOOP(*--dst = *--src);
d94 3
a96 3
done:
#if defined(MEMCOPY) || defined(MEMMOVE)
	return (dst0);
@


1.6
log
@un-deprecate bcopy (for now)
@
text
@d1 1
a33 4
#if 0
static char *rcsid = "$OpenBSD: bcopy.c,v 1.4 2005/03/30 20:13:52 otto Exp $";
#endif /* LIBC_SCCS and not lint */

d36 1
a36 1
__RCSID("$MirOS: src/lib/libc/string/bcopy.c,v 1.5 2005/04/29 18:34:50 tg Exp $");
@


1.5
log
@(tentative) merge, more to come
@
text
@d39 1
a39 1
__RCSID("$MirOS: src/lib/libc/string/bcopy.c,v 1.4 2005/04/16 20:30:49 tg Exp $");
a61 2
__warn_references(bcopy, "warning: bcopy(s,d,l) is deprecated, consider using memmove(d,s,l)");

@


1.4
log
@clean up the memmove/memcpy/bcopy confusion and merge (MI) bcmp and memcmp
@
text
@d34 1
a34 1
static char *rcsid = "$OpenBSD: bcopy.c,v 1.3 2003/06/02 20:18:38 millert Exp $";
d39 1
a39 1
__RCSID("$MirOS: src/lib/libc/string/bcopy.c,v 1.3 2005/04/16 19:52:23 tg Exp $");
@


1.3
log
@make ABIWARNs greppable:
| warning:.*(.*).*consider
@
text
@a0 2
/* $MirOS: src/lib/libc/string/bcopy.c,v 1.2 2005/03/06 20:28:48 tg Exp $ */

d39 1
a39 1
__RCSID("$MirOS$");
d55 1
a55 1
#ifdef MEMCOPY
d57 2
a58 3
memcpy(dst0, src0, length)
#else
#ifdef MEMMOVE
d60 1
a60 1
memmove(dst0, src0, length)
d63 1
d65 1
a65 2
bcopy(src0, dst0, length)
#endif
a66 3
	void *dst0;
	const void *src0;
	register size_t length;
d68 3
a70 3
	register char *dst = dst0;
	register const char *src = src0;
	register size_t t;
@


1.2
log
@merge src/lib
@
text
@d1 1
a1 1
/* $MirOS$ */
d35 1
a35 1
#if defined(LIBC_SCCS) && !defined(lint)
d41 2
d65 1
a65 1
__warn_references(bcopy, "warning: bcopy(s,d,l) is deprecated, please use memmove(d,s,l) instead");
@


1.1
log
@Initial revision
@
text
@d1 2
d63 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@d34 1
a34 1
static char *rcsid = "$OpenBSD: bcopy.c,v 1.4 2005/03/30 20:13:52 otto Exp $";
d55 1
a55 1
memcpy(void *dst0, const void *src0, size_t length)
d59 1
a59 1
memmove(void *dst0, const void *src0, size_t length)
d62 1
a62 1
bcopy(const void *src0, void *dst0, size_t length)
d65 3
d69 3
a71 3
	char *dst = dst0;
	const char *src = src0;
	size_t t;
@


1.1.1.3
log
@Import OpenBSD's libc as of today, minus some of the locale stuff,
and with brk malloc instead of mmap malloc
@
text
@a0 1
/*	$OpenBSD: bcopy.c,v 1.5 2005/08/08 08:05:37 espie Exp $ */
d33 4
@


