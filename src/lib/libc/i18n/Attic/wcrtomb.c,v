head	1.18;
access;
symbols
	MIRBSD_10:1.17.0.2
	MIRBSD_10_BASE:1.17
	MIRBSD_9_BASE:1.11
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.18
date	2008.08.01.23.24.02;	author tg;	state dead;
branches;
next	1.17;
commitid	10048939B085B2C5840;

1.17
date	2007.02.02.21.06.22;	author tg;	state Exp;
branches;
next	1.16;
commitid	10045C3A79F53A9E808;

1.16
date	2007.02.02.19.28.34;	author tg;	state Exp;
branches;
next	1.15;
commitid	10045C390D6140801E9;

1.15
date	2006.11.20.23.10.17;	author tg;	state Exp;
branches;
next	1.14;
commitid	100456235E91E3052CB;

1.14
date	2006.11.01.20.12.44;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004548FFC21A1E60BD;

1.13
date	2006.11.01.20.01.19;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004548FD236EA4946C;

1.12
date	2006.10.27.15.52.28;	author tg;	state Exp;
branches;
next	1.11;
commitid	10045422B504C49C1D4;

1.11
date	2006.06.03.13.43.50;	author tg;	state Exp;
branches;
next	1.10;
commitid	100448192222ED9BEA0;

1.10
date	2006.06.02.19.45.00;	author tg;	state Exp;
branches;
next	1.9;
commitid	100448095134BDF5004;

1.9
date	2006.05.31.00.14.41;	author tg;	state Exp;
branches;
next	1.8;
commitid	100447CE00119B9F37D;

1.8
date	2006.05.30.23.40.25;	author tg;	state Exp;
branches;
next	1.7;
commitid	100447CD7FD31D0A443;

1.7
date	2006.05.30.10.45.58;	author tg;	state Exp;
branches;
next	1.6;
commitid	100447C2250486BC3B8;

1.6
date	2006.05.21.12.50.36;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004470621D102E43DE;

1.5
date	2006.05.21.12.30.47;	author tg;	state Exp;
branches;
next	1.4;
commitid	10044705D8275C88EF1;

1.4
date	2006.05.21.12.12.29;	author tg;	state Exp;
branches;
next	1.3;
commitid	100447059215CDB3530;

1.3
date	2005.12.17.05.46.15;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043A3A3E65E20A413;

1.2
date	2005.09.30.22.13.56;	author tg;	state Exp;
branches;
next	1.1;
commitid	3c62433db87ae478;

1.1
date	2005.09.30.21.45.27;	author tg;	state Exp;
branches;
next	;
commitid	1c3c433db1f25546;


desc
@@


1.18
log
@• OPTU-8 ⇐⇒ OPTU-16 conversion routines (libc, kernel, !bootloader)
• optu16to8(3) replaces wcrtomb(3) in libc
@
text
@/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.17 2007/02/02 21:06:22 tg Exp $ */

/*-
 * Copyright (c) 2005, 2006, 2007
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * Advertising materials mentioning features or use of this work must
 * display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#include <errno.h>
#include <wchar.h>

__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.17 2007/02/02 21:06:22 tg Exp $");

size_t
wcrtomb(char *__restrict__ dst, wchar_t wc, mbstate_t *__restrict__ ps)
{
	static mbstate_t internal_mbstate = { 0, 0 };
	unsigned char *s = (unsigned char *)dst;
	uint8_t count;

	if (__predict_false(ps == NULL))
		ps = &internal_mbstate;

	count = ps->count;

	if (__predict_false(dst == NULL)) {
		ps->count = 0;
		return (++count);
	}

	while (__predict_false(count)) {
		/* process any remnants from previous conversion state */
		*s++ = ((ps->value >> (6 * --count)) & 0x3F) | 0x80;
	}

	if (__predict_false(wc > WCHAR_MAX)) {
		errno = EILSEQ;
		return ((size_t)(-1));
	} else if (__predict_true(wc < 0x80)) {
		/* count is already 0 */
		*s++ = wc;
	} else if (wc < 0x0800) {
		count = 1;
		*s++ = (wc >> 6) | 0xC0;
	} else {
		count = 2;
		*s++ = (wc >> 12) | 0xE0;
	}

	while (__predict_false(count)) {
		*s++ = ((wc >> (6 * --count)) & 0x3F) | 0x80;
	}
	ps->count = 0;
	return ((char *)s - dst);
}
@


1.17
log
@switch to a one-locale system; "the" locale is UTF-8 encoded 'C' now;
inline many simpler functions for reduced code size / imports / speed
and optimise a little - XXX untested
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.20 2006/12/11 21:04:56 tg Rel $ */
d30 1
a30 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.16 2007/02/02 19:28:34 tg Exp $");
@


1.16
log
@second step: get rid of all the MIR18N_* configurable constants
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.15 2006/11/20 23:10:17 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2005, 2006
d7 5
a11 6
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
d17 8
a24 16
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
 *-
 * CAVEAT: The interface definition of this function is fuzzy!
 * If the 'ps' argument contains a conversion state, more octets than
 * expected can be written, specifically, (MB_CUR_MAX * 2 - 1) bytes:
 * up to real_MB_CUR_MAX from 'wc' and up to real_MB_CUR_MAX - 1 from
 * 'ps'. The definitions of MB_LEN_MAX and MB_CUR_MAX were changed in
 * MirOS on 20061027 to accomodate this fact, which was cheap, due to
 * us having a real_MB_LEN_MAX of 3 (UTF-8 BMP, CESU-8 externally).
d30 1
a30 3
#include "mir18n.h"

__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.15 2006/11/20 23:10:17 tg Exp $");
d37 1
a37 1
	unsigned count;
d42 1
a42 1
	count = __locale_is_utf8 ? ps->count : 0;
d54 1
a54 2
	if (__predict_false(wc >
	    (__locale_is_utf8 ? WCHAR_MAX : 0x7F))) {
d57 2
a58 1
	} else if (__predict_true((wc < 0x80) || !__locale_is_utf8)) {
@


1.15
log
@it's dst not src (no code change)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.14 2006/11/01 20:12:44 tg Exp $ */
d41 1
a41 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.14 2006/11/01 20:12:44 tg Exp $");
d66 1
a66 1
	    (__locale_is_utf8 ? MIR18N_MB_MAX : MIR18N_SB_CVT))) {
@


1.14
log
@change the explanatory comment about the SUSv3 interface definition brokenness
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.13 2006/11/01 20:01:19 tg Exp $ */
d41 1
a41 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.13 2006/11/01 20:01:19 tg Exp $");
d44 1
a44 1
wcrtomb(char *__restrict__ src, wchar_t wc, mbstate_t *__restrict__ ps)
d47 1
a47 1
	unsigned char *s = (unsigned char *)src;
d55 1
a55 1
	if (__predict_false(src == NULL)) {
d83 1
a83 1
	return ((char *)s - src);
@


1.13
log
@sync licences, minor wcwidth KNF
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.12 2006/10/27 15:52:28 tg Exp $ */
d27 7
a33 5
 * THIS FUNCTION VIOLATES THE INTERFACE DEFINITION!
 * If the 'ps' argument contains a conversion state, at maximum, five
 * bytes (two from the 'ps', three (= MB_CUR_MAX) from the 'wc' argu-
 * ment) are stored. We changed MB_LEN_MAX and MB_CUR_MAX on 20061027
 * to accomodate this fact.
d41 1
a41 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.12 2006/10/27 15:52:28 tg Exp $");
@


1.12
log
@change MB_CUR_MAX to *2-1 too
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.11 2006/06/03 13:43:50 tg Exp $ */
d14 2
a15 2
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
d25 1
a25 1
 * the possibility of such damage or existence of a nontrivial bug.
d39 1
a39 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.11 2006/06/03 13:43:50 tg Exp $");
@


1.11
log
@sync according to wcsrtombs and manual page
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.10 2006/06/02 19:45:00 tg Exp $ */
d30 2
a31 1
 * ment) are stored.
d39 1
a39 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.10 2006/06/02 19:45:00 tg Exp $");
@


1.10
log
@remove "weak" madness
now, the only functions weak are these which are required
to keep our "system of two codesets" (ASCII and UTF-8) but
enhance the "system of two locales" (C=ASCII and en_US.UTF-8)
to a system of ASCII and UTF-8 locales with internationa-
lised output (via catgets/gettext)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.9 2006/05/31 00:14:41 tg Exp $ */
d26 5
d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.9 2006/05/31 00:14:41 tg Exp $");
d41 1
a41 1
wcrtomb(char *__restrict__ sb, wchar_t wc, mbstate_t *__restrict__ ps)
d44 2
a45 1
	unsigned char *s = (unsigned char *)sb;
d50 3
a52 2
	if (__predict_false(s == NULL)) {
		size_t numb = ps->count;
d54 1
a54 1
		return (numb + 1);
d57 1
a57 11
	if (__predict_true(!__locale_is_utf8)) {
		if (wc <= MIR18N_SB_CVT) {
			*s = wc;
			return (1);
		}
 ilseq:
		errno = EILSEQ;
		return ((size_t)(-1));
	}

	while (__predict_false(ps->count)) {
d59 1
a59 1
		*s++ = ((ps->value >> (6 * --ps->count)) & 0x3F) | 0x80;
d62 5
a66 1
	if (wc < 0x0080) {
d69 1
a69 1
		ps->count = 1;
a70 2
	} else if (__predict_false(wc > MIR18N_MB_MAX)) {
		goto ilseq;
d72 1
a72 1
		ps->count = 2;
d76 2
a77 2
	while (__predict_false(ps->count)) {
		*s++ = ((wc >> (6 * --ps->count)) & 0x3F) | 0x80;
d79 2
a80 1
	return (s - (unsigned char *)sb + 1);
@


1.9
log
@optimise during wcsrtombs(3) development
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.8 2006/05/30 23:40:25 tg Exp $ */
d33 1
a33 3
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.8 2006/05/30 23:40:25 tg Exp $");

size_t __weak_wcrtomb(char *__restrict__, wchar_t, mbstate_t *__restrict__);
d36 1
a36 1
__weak_wcrtomb(char *__restrict__ sb, wchar_t wc, mbstate_t *__restrict__ ps)
a81 2

__weak_alias(wcrtomb, __weak_wcrtomb);
@


1.8
log
@process hanging conversion states correctly,
i.e. do not lose the 'wc' argument on the way
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.7 2006/05/30 10:45:58 tg Exp $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.7 2006/05/30 10:45:58 tg Exp $");
d79 1
a79 2
 do_conv:
	while (ps->count) {
@


1.7
log
@* use MIR18N_MB_MAX, MIR18N_SB_{MAX,CVT}
* __CRAZY=Yes cleanup
* as a bonus, get rid of a little casting session
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.6 2006/05/21 12:50:36 tg Exp $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.6 2006/05/21 12:50:36 tg Exp $");
d62 3
a64 4
	if (__predict_false(ps->count > 0)) {
		/* process remnants from an earlier conversion state */
		wc = ps->value;
		goto do_conv;
@


1.6
log
@make all our completed functions weak (so they can be overridden,
in case someone wants more than 2 locales)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.5 2006/05/21 12:30:47 tg Exp $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.5 2006/05/21 12:30:47 tg Exp $");
d53 2
a54 2
		if (wc < 0x0100) {
			*sb = wc;
d73 1
a73 1
	} else if (__predict_false(wc > 0xFFFD)) {
@


1.5
log
@add upper boundary checks (WCHAR_MAX = 0xFFFD)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.4 2006/05/21 12:12:29 tg Exp $ */
d33 3
a35 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.4 2006/05/21 12:12:29 tg Exp $");
d38 1
a38 1
wcrtomb(char *__restrict__ sb, wchar_t wc, mbstate_t *__restrict__ ps)
d86 2
@


1.4
log
@make MB_LEN_CUR overridable (weak function) too, in case
someone wants to plug in support for more than 2 locales
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.3 2005/12/17 05:46:15 tg Exp $ */
d4 2
a5 2
 * Copyright (c) 2005
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.3 2005/12/17 05:46:15 tg Exp $");
d55 1
d71 2
d78 1
a78 1
do_conv:
@


1.3
log
@big fat licence update (I left some which are bsiegert@@'s alone though)
also, remove licence boilerplate from some .h files who don't deserve it
and remove and add some advertising clauses because I say so
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.2 2005/09/30 22:13:56 tg Exp $ */
d31 3
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.2 2005/09/30 22:13:56 tg Exp $");
@


1.2
log
@replace __libc_mb_cur_max variable by the (__locale_is_utf8 ? 3 : 1)
equation in the MB_CUR_MAX macro; expose MB_LEN_MAX in <stdlib.h> too,
prevent duplicate definitions. Adjust includes appropriately - <locale.h>
is not needed any more.
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.1 2005/09/30 21:45:27 tg Exp $ */
d18 8
a25 7
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of this work, even if advised of the possibility of such damage.
d31 1
a31 1
__RCSID("$MirOS: src/lib/libc/i18n/wcrtomb.c,v 1.1 2005/09/30 21:45:27 tg Exp $");
@


1.1
log
@* write mbrtowc and wcrtomb (mostly according to POSIX spec)
  so our libc at least builds again
* fix all files for __CRAZY=yes build
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.2 2005/03/03 19:43:30 tg Rel $ */
a27 1
#include <locale.h>
d30 1
a30 1
__RCSID("$MirOS: src/lib/libc/i18n/wctob.c,v 1.3 2005/09/22 21:52:28 tg Exp $");
d47 1
a47 1
	if (__predict_true(!locale_is_utf8)) {
@

