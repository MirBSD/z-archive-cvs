head	1.4;
access;
symbols
	MIRBSD_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2006.07.03.16.14.42;	author tg;	state dead;
branches;
next	1.3;
commitid	10044A942475753D29B;

1.3
date	2006.06.03.22.31.32;	author tg;	state Exp;
branches;
next	1.2;
commitid	10044820DD02D6829FD;

1.2
date	2006.06.03.22.25.31;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044820C3A0EF097CC;

1.1
date	2006.06.02.12.29.33;	author tg;	state Exp;
branches;
next	;
commitid	10044802F0C35E034B3;


desc
@@


1.4
log
@GNU fileutils internally uses an
int mbsnwidth (const char *string, size_t nbytes, int flags);

remove our libc-internal mbswidth() because implementors
"usually" do want to roll their own - e.g. to cope with
invalid characters in multibyte sequences their own way.
keep it in Attic/ for reference tho.

bump libc major
sorry guys
@
text
@/* $MirOS: src/lib/libc/i18n/mbswidth.c,v 1.3 2006/06/03 22:31:32 tg Exp $ */

/*-
 * Copyright (c) 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a nontrivial bug.
 */

#include <errno.h>
#include <wchar.h>

__RCSID("$MirOS: src/lib/libc/i18n/mbswidth.c,v 1.3 2006/06/03 22:31:32 tg Exp $");

int
mbswidth(const char *s, size_t n)
{
	int width = 0, i;
	wchar_t wc;
	size_t numb;
	mbstate_t ps = { 0, 0 };

	errno = 0;
	while (n) {
		numb = mbrtowc(&wc, s, n, &ps);
		if (__predict_false(numb == (size_t)-1))
			/* invalid input string */
			return (-1);
		if ((numb == 0) || (numb == (size_t)-2))
			/* end of input string */
			break;
		s += numb;
		n -= numb;
		if ((i = wcwidth(wc)) < 0)
			return (-1);
		width += i;
	}
	return (width);
}
@


1.3
log
@sync; make errors distinguishable from non-printable input
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbswidth.c,v 1.2 2006/06/03 22:25:31 tg Exp $ */
d31 1
a31 1
__RCSID("$MirOS: src/lib/libc/i18n/mbswidth.c,v 1.2 2006/06/03 22:25:31 tg Exp $");
@


1.2
log
@* verify that a certain condition (buggy) is not given
* return an error if invalid sequence, but not if incomplete

XXX what about a more "forgiving" model, replacing invalid
XXX characters during conversion with U+FFFD ?
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbswidth.c,v 1.1 2006/06/02 12:29:33 tg Exp $ */
d28 1
d31 1
a31 1
__RCSID("$MirOS: src/lib/libc/i18n/mbswidth.c,v 1.1 2006/06/02 12:29:33 tg Exp $");
d36 2
a37 1
	int width = 0;
a38 1
	wchar_t wc;
d41 1
a49 1
		width += wcwidth(wc);
d52 3
@


1.1
log
@add two functions, mbslen(3) and mbswidth(3), no manpages yet (Benny!),
which mirror wcslen(3) and wcswidth(3) functionality; mbslen is more
fast than anything else, mbswidth operates as fast as possible too
these can be used for non-standard cheap i18n support in user apps
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.7 2006/04/09 22:08:49 tg Rel $ */
d30 1
a30 1
__RCSID("$MirOS$");
d42 5
a46 2
		/* '\0' or invalid or incomplete multibyte character end us */
		if (!numb || (numb == (size_t)-1) || (numb == (size_t)-2))
a49 3
		/* just in case mbrtowc is buggy */
		if (__predict_false(numb > n))
			break;
@

