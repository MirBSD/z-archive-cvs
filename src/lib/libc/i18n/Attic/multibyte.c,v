head	1.6;
access;
symbols
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2006.06.01.22.55.35;	author tg;	state dead;
branches;
next	1.5;
commitid	100447F705B5E27FA21;

1.5
date	2006.06.01.22.30.10;	author tg;	state Exp;
branches;
next	1.4;
commitid	100447F6A5E5E5D04C9;

1.4
date	2006.06.01.22.17.21;	author tg;	state Exp;
branches;
next	1.3;
commitid	100447F676243262322;

1.3
date	2006.05.21.12.52.57;	author tg;	state Exp;
branches;
next	1.2;
commitid	100447062B25D00E484;

1.2
date	2005.11.21.20.40.39;	author tg;	state Exp;
branches;
next	1.1;
commitid	478b438230c158bd;

1.1
date	2005.10.11.21.58.33;	author tg;	state Exp;
branches;
next	;
commitid	1617434c35889d09;


desc
@@


1.6
log
@cunningly write towctrans(3) according to manpage, SUSv3 spec
(online docs) and iswctype.c, considering our special situation
@
text
@/*
 * Copyright (c) 1991 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if 0
static char *rcsid = "$OpenBSD: multibyte.c,v 1.4 2003/06/02 20:18:38 millert Exp $";
#endif /* LIBC_SCCS and not lint */

#include <stdlib.h>
#include <wchar.h>

__RCSID("$MirOS: src/lib/libc/i18n/multibyte.c,v 1.5 2006/06/01 22:30:10 tg Exp $");

/*
 * Stub multibyte character functions.
 * This cheezy implementation is fixed to the native single-byte
 * character set.
 */

wint_t
__weak_towlower(wint_t x)
{
	return tolower(x);
}

wint_t
__weak_towupper(wint_t x)
{
	return toupper(x);
}

__weak_alias(towlower, __weak_towlower);
__weak_alias(towupper, __weak_towupper);
@


1.5
log
@add a cunning (small, not even worth the adv clause ;) isw*() implementation
@
text
@d37 1
a37 1
__RCSID("$MirOS: src/lib/libc/i18n/multibyte.c,v 1.4 2006/06/01 22:17:21 tg Exp $");
@


1.4
log
@move freely licenced functions from libhaible into libc;
add missing wcsxfrm(3); sort and style; remove some stubs
@
text
@d37 1
a37 1
__RCSID("$MirOS: src/lib/libc/i18n/multibyte.c,v 1.3 2006/05/21 12:52:57 tg Exp $");
a44 24
int
__weak_iswalnum(wint_t x)
{
	return isalnum(x);
}

int
__weak_iswalpha(wint_t x)
{
	return isalpha(x);
}

int
__weak_iswlower(wint_t x)
{
	return islower(x);
}

int
__weak_iswupper(wint_t x)
{
	return isupper(x);
}

a56 4
__weak_alias(iswalnum, __weak_iswalnum);
__weak_alias(iswalpha, __weak_iswalpha);
__weak_alias(iswlower, __weak_iswlower);
__weak_alias(iswupper, __weak_iswupper);
@


1.3
log
@make the stubs weak too, but spare the KNF since libhaible will override them
@
text
@d37 1
a37 1
__RCSID("$MirOS: src/lib/libc/i18n/multibyte.c,v 1.2 2005/11/21 20:40:39 tg Exp $");
a45 79
__weak_mblen(s, n)
	const char *s;
	size_t n;
{
	if (s == NULL || *s == '\0')
		return 0;
	if (n == 0)
		return -1;
	return 1;
}

/*ARGSUSED*/
int
__weak_mbtowc(pwc, s, n)
	wchar_t *pwc;
	const char *s;
	size_t n;
{
	if (s == NULL)
		return 0;
	if (n == 0)
		return -1;
	if (pwc)
		*pwc = (wchar_t) *s;
	return (*s != '\0');
}

/*ARGSUSED*/
int
__weak_wctomb(char *s, wchar_t wchar)
{
	if (s == NULL)
		return 0;

	*s = (char) wchar;
	return 1;
}

/*ARGSUSED*/
size_t
__weak_mbstowcs(pwcs, s, n)
	wchar_t *pwcs;
	const char *s;
	size_t n;
{
	int count = 0;

	if (n != 0) {
		do {
			if ((*pwcs++ = (wchar_t) *s++) == 0)
				break;
			count++;
		} while (--n != 0);
	}
	
	return count;
}

/*ARGSUSED*/
size_t
__weak_wcstombs(s, pwcs, n)
	char *s;
	const wchar_t *pwcs;
	size_t n;
{
	int count = 0;

	if (n != 0) {
		do {
			if ((*s++ = (char) *pwcs++) == 0)
				break;
			count++;
		} while (--n != 0);
	}

	return count;
}

int
a80 5
__weak_alias(mblen, __weak_mblen);
__weak_alias(mbtowc, __weak_mbtowc);
__weak_alias(wctomb, __weak_wctomb);
__weak_alias(mbstowcs, __weak_mbstowcs);
__weak_alias(wcstombs, __weak_wcstombs);
@


1.2
log
@* multibyte.c: don't try to be clever, just include <wchar.h>
* malloc.c: prototype adjustments (brk, sbrk)
* both files: RCS IDs
@
text
@d37 1
a37 1
__RCSID("$MirOS$");
d46 1
a46 1
mblen(s, n)
d59 1
a59 1
mbtowc(pwc, s, n)
d75 1
a75 1
wctomb(char *s, wchar_t wchar)
d86 1
a86 1
mbstowcs(pwcs, s, n)
d106 1
a106 1
wcstombs(s, pwcs, n)
d125 1
a125 1
iswalnum(wint_t x)
d131 1
a131 1
iswalpha(wint_t x)
d137 1
a137 1
iswlower(wint_t x)
d143 1
a143 1
iswupper(wint_t x)
d149 1
a149 1
towlower(wint_t x)
d155 1
a155 1
towupper(wint_t x)
d159 12
@


1.1
log
@re-add libc/stdlib/Attic/multibyte.c to make libX11 not complain
and add some more stubs to make wine-990225 build
@
text
@a30 1
$MirOS$
d35 3
a123 5
#ifdef	_BSD_WINT_T_
typedef	_BSD_WINT_T_	wint_t;
#undef	_BSD_WINT_T_
#endif

@

