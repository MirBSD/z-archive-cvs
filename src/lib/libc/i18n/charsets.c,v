head	1.18;
access;
symbols
	MIRBSD_10:1.17.0.2
	MIRBSD_10_BASE:1.17
	MIRBSD_9_BASE:1.13
	MIRBSD_8:1.9.0.2
	MIRBSD_8_BASE:1.9;
locks; strict;
comment	@ * @;


1.18
date	2010.10.24.15.55.03;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004CC456C7057C4044;

1.17
date	2007.06.07.16.41.04;	author tg;	state Exp;
branches;
next	1.16;
commitid	100466835221B64012A;

1.16
date	2007.06.07.16.39.32;	author tg;	state Exp;
branches;
next	1.15;
commitid	100466834C96079C024;

1.15
date	2007.02.02.21.06.20;	author tg;	state Exp;
branches;
next	1.14;
commitid	10045C3A79F53A9E808;

1.14
date	2006.09.07.17.13.15;	author tg;	state Exp;
branches;
next	1.13;
commitid	100450052C75BFF95AD;

1.13
date	2006.06.03.22.14.51;	author tg;	state Exp;
branches;
next	1.12;
commitid	100448209CA1BB5B72A;

1.12
date	2006.06.03.22.12.55;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004482097B71048E3B;

1.11
date	2006.05.21.12.38.39;	author tg;	state Exp;
branches;
next	1.10;
commitid	10044705F485836CDB8;

1.10
date	2006.05.21.12.12.28;	author tg;	state Exp;
branches;
next	1.9;
commitid	100447059215CDB3530;

1.9
date	2005.12.17.05.46.14;	author tg;	state Exp;
branches;
next	1.8;
commitid	10043A3A3E65E20A413;

1.8
date	2005.09.30.22.15.07;	author tg;	state Exp;
branches;
next	1.7;
commitid	2f9c433db8f943be;

1.7
date	2005.09.30.22.13.55;	author tg;	state Exp;
branches;
next	1.6;
commitid	3c62433db87ae478;

1.6
date	2005.09.30.22.07.33;	author tg;	state Exp;
branches;
next	1.5;
commitid	35fc433db72f0b7b;

1.5
date	2005.09.30.21.45.26;	author tg;	state Exp;
branches;
next	1.4;
commitid	1c3c433db1f25546;

1.4
date	2005.09.22.21.48.02;	author tg;	state Exp;
branches;
next	1.3;
commitid	6bf433326990602;

1.3
date	2005.09.22.21.36.48;	author tg;	state Exp;
branches;
next	1.2;
commitid	16b3433323d9283c;

1.2
date	2005.09.22.21.24.47;	author tg;	state Exp;
branches;
next	1.1;
commitid	75ab4333212d7f08;

1.1
date	2005.09.22.21.21.09;	author tg;	state Exp;
branches;
next	;
commitid	57fb4333204cad7f;


desc
@@


1.18
log
@approximate POSIX locale selection (setlocale(3) is still a nop, but
returns NULL if the string contains a charset and it’s not UTF-8)

prodded by Bruno Haible
@
text
@/*-
 * Copyright (c) 2007, 2010
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#include <sys/param.h>

#ifdef __weak_alias
#define setlocale __weak_setlocale
#endif

#include <sys/localedef.h>
#include <langinfo.h>
#include <locale.h>
#include <nl_types.h>
#include <stdlib.h>
#include <string.h>

__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.17 2007/06/07 16:41:04 tg Exp $");

#undef _tolower
#define _tolower(c)	((c) | 0x20)

#define STR_C	"C"
#define STR_UTF	"en_US.UTF-8"

char *
setlocale(int category, const char *locale)
{
	static char lc_other[] = STR_C;
	static char lc_ctype[] = STR_UTF;

	if ((category != LC_CTYPE) && (category != LC_ALL)) {
		memmove(lc_other, STR_C, sizeof (lc_other));
		return (lc_other);
	}

	if (locale) {
		/* try to be somewhat POSIX conformant */
		while (*locale && *locale != '.')
			++locale;
		if (*locale++) {
			if (_tolower(*locale++) != 'u')
				return (NULL);
			if (_tolower(*locale++) != 't')
				return (NULL);
			if (_tolower(*locale++) != 'f')
				return (NULL);
			if (*locale == '-')
				++locale;
			if (*locale++ != '8')
				return (NULL);
			if (*locale && *locale != '@@')
				return (NULL);
			/* "*.UTF-8" or "*.UTF-8@@*" */
		} /* else "*([!.])" */
	}

	memmove(lc_ctype, STR_UTF, sizeof (lc_ctype));
	return (lc_ctype);
}

#undef setlocale

#ifdef __weak_alias
__weak_alias(setlocale, __weak_setlocale);
#endif
@


1.17
log
@• we don't rcsid at bof any longer, we use __RCSID() macro already
• fix weak error
@
text
@d2 1
a2 1
 * Copyright (c) 2007
d34 4
a37 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.16 2007/06/07 16:39:32 tg Exp $");
d43 1
a43 1
setlocale(int category, const char *locale __attribute__((unused)))
d53 21
@


1.16
log
@be nice to people who actually strtok the setlocale() result (BTST)
@
text
@a0 2
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.15 2007/02/02 21:06:20 tg Exp $ */

d34 1
a34 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.15 2007/02/02 21:06:20 tg Exp $");
d54 2
@


1.15
log
@switch to a one-locale system; "the" locale is UTF-8 encoded 'C' now;
inline many simpler functions for reduced code size / imports / speed
and optimise a little - XXX untested
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.20 2006/12/11 21:04:56 tg Rel $ */
d24 5
d34 1
a34 1
#include <wchar.h>
d36 1
a36 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.14 2006/09/07 17:13:15 tg Exp $");
d38 2
a39 1
const char *__weak_setlocale(int, const char *);
d41 2
a42 2
const char *
__weak_setlocale(int category, const char *locale __attribute__((unused)))
d44 10
a53 2
	return ((category == LC_CTYPE) || (category == LC_ALL) ?
	    "en_US.UTF-8" : "C");
d56 1
d58 1
@


1.14
log
@add CESU-8 as alias for UTF-8 since that is what we actually
use system-wide, outside of citrus (since our wchar_t is BMP
only)

XXX add CESU-8 read/write to citrus_utf8.c, no explicit op-
XXX tion to switch CESU-8 write on, just use wchar size

yes I know, CESU-8 "should not be used to interchange data",
but there is no way (outside of citrus) within mirbsd to in-
terchange UCS-4 data other than as UTF-16 (wchar_t *) or
CESU-8 (char *) strings, or convert them.
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.14 2006/08/09 19:35:23 tg Rel $ */
d4 1
a4 1
 * Copyright (c) 2005
d7 5
a11 6
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
d13 8
a20 12
 * Advertising materials mentioning features or use of this work must
 * display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
d31 1
a31 5
#include "mir18n.h"

__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.13 2006/06/03 22:14:51 tg Exp $");

/* simple locale support (C and CESU-8) */
a34 2
bool __locale_is_utf8 = false;

d36 1
a36 1
__weak_setlocale(int category, const char *locale)
d38 2
a39 24
	if ((category != LC_CTYPE) && (category != LC_ALL))
		return ("C");

	if (locale == NULL)
		goto getlocale;

	if (*locale == '\0') {
		locale = getenv("LC_ALL");
		if (!locale || !*locale) {
			locale = getenv("LC_CTYPE");
			if (!locale || !*locale)
				locale = getenv("LANG");
			if (!locale)
				locale = "C";
		}
	}

	__locale_is_utf8 = (strcasestr(locale, "UTF-8")
	    || strcasestr(locale, "utf8")
	    || strcasestr(locale, "CESU-8")
	    || strcasestr(locale, "cesu8"));

 getlocale:
	return (__locale_is_utf8 ? "en_US.UTF-8" : "C");
@


1.13
log
@move int __mb_cur_max(void) from isutf8.c to mbcurmax.c,
bool __locale_is_utf8 from isutf8.c to charsets.c because
if it's used setlocale(3) is always pulled in anyway
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.12 2006/06/03 22:12:55 tg Exp $ */
d5 1
a5 1
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
d14 2
a15 2
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
d25 1
a25 1
 * the possibility of such damage or existence of a nontrivial bug.
d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.12 2006/06/03 22:12:55 tg Exp $");
d40 1
a40 1
/* simple locale support (C and UTF-8) */
d67 3
a69 1
	    || strcasestr(locale, "utf8"));
@


1.12
log
@simplify
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.11 2006/05/21 12:38:39 tg Exp $ */
d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.11 2006/05/21 12:38:39 tg Exp $");
d44 2
@


1.11
log
@a little KNF
btowc/wctob: sync, optimise

all except multibyte.c are no stubs but "the real thing" already
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.10 2006/05/21 12:12:28 tg Exp $ */
d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.10 2006/05/21 12:12:28 tg Exp $");
d42 1
a42 1
char *__weak_setlocale(int, const char *);
d44 1
a44 1
char *
a46 7
#define	UTF8	"en_US.UTF-8"
#define	UTF8L	12
	static char rv[UTF8L];

	rv[0] = 'C';
	rv[1] = '\0';

d48 1
a48 1
		return (rv);
d60 1
a60 1
				locale = rv;
d68 1
a68 3
	if (__locale_is_utf8)
		memcpy(rv, UTF8, UTF8L);
	return (rv);
@


1.10
log
@make MB_LEN_CUR overridable (weak function) too, in case
someone wants to plug in support for more than 2 locales
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.9 2005/12/17 05:46:14 tg Exp $ */
d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.9 2005/12/17 05:46:14 tg Exp $");
d74 1
a74 1
getlocale:
@


1.9
log
@big fat licence update (I left some which are bsiegert@@'s alone though)
also, remove licence boilerplate from some .h files who don't deserve it
and remove and add some advertising clauses because I say so
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.8 2005/09/30 22:15:07 tg Exp $ */
d36 3
a38 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.8 2005/09/30 22:15:07 tg Exp $");
@


1.8
log
@oops, deleted some includes too much
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.7 2005/09/30 22:13:55 tg Exp $ */
d18 8
a25 7
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of this work, even if advised of the possibility of such damage.
d36 1
a36 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.7 2005/09/30 22:13:55 tg Exp $");
@


1.7
log
@replace __libc_mb_cur_max variable by the (__locale_is_utf8 ? 3 : 1)
equation in the MB_CUR_MAX macro; expose MB_LEN_MAX in <stdlib.h> too,
prevent duplicate definitions. Adjust includes appropriately - <locale.h>
is not needed any more.
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.6 2005/09/30 22:07:33 tg Exp $ */
d30 1
d35 1
a35 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.6 2005/09/30 22:07:33 tg Exp $");
@


1.6
log
@MB_CUR_MAX needs not to be a function call every time
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.5 2005/09/30 21:45:26 tg Exp $ */
a29 1
#include <locale.h>
d34 1
a34 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.5 2005/09/30 21:45:26 tg Exp $");
d67 1
a67 1
	locale_is_utf8 = (strcasestr(locale, "UTF-8")
d71 1
a71 1
	if (locale_is_utf8)
a72 1
	__libc_mb_cur_max = (locale_is_utf8 ? MB_LEN_MAX : 1);
@


1.5
log
@* write mbrtowc and wcrtomb (mostly according to POSIX spec)
  so our libc at least builds again
* fix all files for __CRAZY=yes build
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.4 2005/09/22 21:48:02 tg Exp $ */
d32 1
d35 1
a35 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.4 2005/09/22 21:48:02 tg Exp $");
d74 1
@


1.4
log
@* flesh out some functions and globals into their own files to save space
* add RCS IDs
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.3 2005/09/22 21:36:48 tg Exp $ */
d34 1
a34 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.3 2005/09/22 21:36:48 tg Exp $");
d38 2
d43 7
d51 1
a51 1
		return ("C");
d54 1
a54 1
		return (locale_is_utf8 ? "en_US.UTF-8" : "C");
d63 1
a63 1
				locale = "C";
d67 2
a68 4
	if (strcasestr(locale, "UTF-8") || strcasestr(locale, "utf8")) {
		locale_is_utf8 = !0;
		return ("en_US.UTF-8");
	}
d70 4
a73 2
	locale_is_utf8 = 0;
	return ("C");
@


1.3
log
@implement the new MirOS LOCALE support: we can now differentiate
between the "C" (latin1) and "en_US.UTF-8" locale... hacked at
LUUSA meeting in the Netzladen with lots of Club-Mate
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.2 2005/09/22 21:24:47 tg Exp $ */
d34 1
a34 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.2 2005/09/22 21:24:47 tg Exp $");
a37 2
int locale_is_utf8 = 0;

a66 6
size_t
__mb_cur_max(void)
{
	return (locale_is_utf8 ? MB_LEN_MAX : 1);
}

@


1.2
log
@implement MB_CUR_MAX
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/charsets.c,v 1.1 2005/09/22 21:21:09 tg Exp $ */
d32 1
d34 1
a34 1
__RCSID("$MirOS: src/lib/libc/i18n/charsets.c,v 1.1 2005/09/22 21:21:09 tg Exp $");
d43 24
a66 1
	return "C";
@


1.1
log
@split gen/i18n.c into categorised files, no functional change
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.2 2005/03/03 19:43:30 tg Rel $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/gen/i18n.c,v 1.1.7.1 2005/03/06 16:33:39 tg Exp $");
d35 3
a37 1
/* fake locale support */
d45 6
@

