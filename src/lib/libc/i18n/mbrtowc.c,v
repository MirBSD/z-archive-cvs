head	1.17;
access;
symbols
	MIRBSD_10:1.15.0.2
	MIRBSD_10_BASE:1.15
	MIRBSD_9_BASE:1.12
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.17
date	2014.02.09.22.35.52;	author tg;	state Exp;
branches;
next	1.16;
commitid	10052F802DB25EB293D;

1.16
date	2008.08.01.23.37.37;	author tg;	state Exp;
branches;
next	1.15;
commitid	10048939E46137884A6;

1.15
date	2007.02.02.21.06.21;	author tg;	state Exp;
branches;
next	1.14;
commitid	10045C3A79F53A9E808;

1.14
date	2007.02.02.19.28.33;	author tg;	state Exp;
branches;
next	1.13;
commitid	10045C390D6140801E9;

1.13
date	2006.11.01.20.01.19;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004548FD236EA4946C;

1.12
date	2006.06.03.21.52.51;	author tg;	state Exp;
branches;
next	1.11;
commitid	100448204C540F70216;

1.11
date	2006.06.03.21.01.59;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004481F8DC73EC1BB1;

1.10
date	2006.06.03.21.01.25;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004481F8A74AF07809;

1.9
date	2006.06.02.19.45.00;	author tg;	state Exp;
branches;
next	1.8;
commitid	100448095134BDF5004;

1.8
date	2006.05.30.23.06.32;	author tg;	state Exp;
branches;
next	1.7;
commitid	100447CCFF00015071B;

1.7
date	2006.05.30.10.45.58;	author tg;	state Exp;
branches;
next	1.6;
commitid	100447C2250486BC3B8;

1.6
date	2006.05.21.12.50.36;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004470621D102E43DE;

1.5
date	2006.05.21.12.30.47;	author tg;	state Exp;
branches;
next	1.4;
commitid	10044705D8275C88EF1;

1.4
date	2006.05.21.12.12.29;	author tg;	state Exp;
branches;
next	1.3;
commitid	100447059215CDB3530;

1.3
date	2005.12.17.05.46.15;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043A3A3E65E20A413;

1.2
date	2005.09.30.22.13.55;	author tg;	state Exp;
branches;
next	1.1;
commitid	3c62433db87ae478;

1.1
date	2005.09.30.21.45.26;	author tg;	state Exp;
branches;
next	;
commitid	1c3c433db1f25546;


desc
@@


1.17
log
@nuke the restrict qualifiers; C99 says this makes no externally visible difference and is only a compiler hint and a limitation to the interface implementor
@
text
@/*-
 * Copyright (c) 2008
 *	Thorsten Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 *
 * The author reserves the right to steward the OPTU encoding forms.
 */

#include <errno.h>
#include <wchar.h>

__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.16 2008/08/01 23:37:37 tg Exp $");

size_t
mbrtowc(wchar_t *dst, const char *src, size_t len, mbstate_t *ps)
{
	static mbstate_t internal_mbstate = { 0, 0 };
	wchar_t wc;
	size_t rv;

	if (__predict_false(ps == NULL))
		ps = &internal_mbstate;
	if (__predict_false(dst == NULL))
		dst = &wc;

	if (__predict_false(src == NULL)) {
		ps->count = 0;
		return (0);
	}

	rv = optu8to16(dst, src, len, ps);
	if (*dst == 0)
		return (0);
	if (rv == 0) {
		errno = EILSEQ;
		return ((size_t)-1);
	}
	return (rv);
}
@


1.16
log
@use optu8to16(3) in the implementation of this
XXX untested
and fix an implementation/conformity error while here
@
text
@d26 1
a26 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.15 2007/02/02 21:06:21 tg Exp $");
d29 1
a29 2
mbrtowc(wchar_t *__restrict__ dst, const char *__restrict__ src,
    size_t len, mbstate_t *__restrict__ ps)
@


1.15
log
@switch to a one-locale system; "the" locale is UTF-8 encoded 'C' now;
inline many simpler functions for reduced code size / imports / speed
and optimise a little - XXX untested
@
text
@a0 2
/* $MirOS: src/share/misc/licence.template,v 1.20 2006/12/11 21:04:56 tg Rel $ */

d2 2
a3 2
 * Copyright (c) 2005, 2006, 2007
 *	Thorsten Glaser <tg@@mirbsd.de>
a10 4
 * Advertising materials mentioning features or use of this work must
 * display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
d19 2
d26 1
a26 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.14 2007/02/02 19:28:33 tg Exp $");
d33 2
a34 6
	const unsigned char *s = (const unsigned char *)src;
	wint_t c, wc;
	uint8_t count;

	if (__predict_false(!len))
		return ((size_t)(-2));
d38 2
d46 4
a49 14
	if ((count = ps->count)) {
		wc = ps->value << 6;
		goto conv_state;
	}

	--len;
	wc = *s++;
	if (__predict_true(wc < 0x80)) {
		/* count == 0 already */
		;
	} else if (__predict_false(wc < 0xC2)) {
		/* < 0xC0: spurious second byte */
		/* < 0xC2: non-minimalistic mapping error in 2-byte seqs */
 ilseq:
d51 1
a51 30
		return ((size_t)(-1));
	} else if (wc < 0xE0) {
		count = 1; /* one byte follows */
		wc = (wc & 0x1F) << 6;
	} else if (wc < 0xF0) {
		count = 2; /* two bytes follow */
		wc = (wc & 0x0F) << 12;
	} else {
		/* we don't support more than UCS-2 */
		goto ilseq;
	}

 conv_state:
	while (__predict_false(count)) {
		/* If there are no more bytes to inspect, make state */
		if (__predict_false(!len)) {
			ps->count = count;
			ps->value = wc >> 6;
			return ((size_t)(-2));
		}

		--len;
		if (((c = *s++) & 0xC0) != 0x80)
			goto ilseq;
		c &= 0x3F;
		wc |= c << (6 * --count);

		/* Check for non-minimalistic mapping error in 3-byte seqs */
		if (__predict_false(count && (wc < 0x0800)))
			goto ilseq;
d53 1
a53 8

	if (__predict_false(wc > WCHAR_MAX))
		goto ilseq;

	if (dst != NULL)
		*dst = wc;
	ps->count = 0;
	return (wc ? ((const char *)s - src) : 0);
@


1.14
log
@second step: get rid of all the MIR18N_* configurable constants
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.13 2006/11/01 20:01:19 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2005, 2006
d7 5
a11 6
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
d17 8
a24 8
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
d30 1
a30 3
#include "mir18n.h"

__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.13 2006/11/01 20:01:19 tg Exp $");
d39 1
a39 1
	unsigned count;
d52 1
a52 1
	if ((count = __locale_is_utf8 ? ps->count : 0)) {
d59 1
a59 6
	if (__predict_true(!__locale_is_utf8 || (wc < 0x80))) {
		if (__predict_false(wc > 0x7F)) {
 ilseq:
			errno = EILSEQ;
			return ((size_t)(-1));
		}
d61 2
a62 1
	} else if (wc < 0xC2) {
d65 3
a67 1
		goto ilseq;
@


1.13
log
@sync licences, minor wcwidth KNF
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.12 2006/06/03 21:52:51 tg Exp $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.12 2006/06/03 21:52:51 tg Exp $");
d63 1
a63 1
		if (__predict_false(wc > MIR18N_SB_CVT)) {
d104 1
a104 1
	if (__predict_false(wc > MIR18N_MB_MAX))
@


1.12
log
@sync; reduce amount of gotos in the code
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.11 2006/06/03 21:01:59 tg Exp $ */
d14 2
a15 2
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
d25 1
a25 1
 * the possibility of such damage or existence of a nontrivial bug.
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.11 2006/06/03 21:01:59 tg Exp $");
@


1.11
log
@remove cruft
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.10 2006/06/03 21:01:25 tg Exp $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.10 2006/06/03 21:01:25 tg Exp $");
d36 2
a37 2
mbrtowc(wchar_t *__restrict__ pwc, const char *__restrict__ src,
    size_t n, mbstate_t *__restrict__ ps)
d44 3
a54 3
	if (__predict_false(!n))
		return ((size_t)(-2));

d60 1
a60 1
	--n;
d68 1
a68 3
		if (pwc != NULL)
			*pwc = wc;
		return (wc ? 1 : 0);
d71 1
a71 1
		/* < 0xC2: would map to 0x80 */
d85 7
a91 6
	/* If there are no more bytes to inspect, make state */
	if (__predict_false(!n)) {
		ps->count = count;
		ps->value = wc >> 6;
		return ((size_t)(-2));
	}
d93 5
a97 5
	--n;
	if (((c = *s++) & 0xC0) != 0x80)
		goto ilseq;
	c &= 0x3F;
	wc |= c << (6 * --count);
d99 2
a100 4
	if (__predict_false(count)) {
		/* Check for non-minimalistic mapping
		 * encoding error in 3-byte sequences */
		if (__predict_false(wc < 0x800))
a101 2
		else
			goto conv_state;
d107 2
a108 2
	if (pwc != NULL)
		*pwc = wc;
d110 1
a110 1
	return ((const char *)s - src);
@


1.10
log
@* mir18n.h: add comments
* mbrtowc.c: make more similar to rewritten wcrtomb.c
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.9 2006/06/02 19:45:00 tg Exp $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.9 2006/06/02 19:45:00 tg Exp $");
d41 1
a41 1
	wint_t c, wc, wc_max;
a54 2
	wc_max = __locale_is_utf8 ? MIR18N_MB_MAX : MIR18N_SB_CVT;

@


1.9
log
@remove "weak" madness
now, the only functions weak are these which are required
to keep our "system of two codesets" (ASCII and UTF-8) but
enhance the "system of two locales" (C=ASCII and en_US.UTF-8)
to a system of ASCII and UTF-8 locales with internationa-
lised output (via catgets/gettext)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.8 2006/05/30 23:06:32 tg Exp $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.8 2006/05/30 23:06:32 tg Exp $");
d36 1
a36 1
mbrtowc(wchar_t *__restrict__ pwc, const char *__restrict__ sb,
d40 3
a42 3
	const unsigned char *s = (const unsigned char *)sb;
	wint_t c, w;
	size_t frag;
d47 1
a47 1
	if (__predict_false(s == NULL)) {
d52 4
a55 2
	if (__predict_false(!n--))
		goto not_enough;
d57 4
a60 1
	frag = __locale_is_utf8 ? ps->count : 0;
d62 4
a65 6
	if (__predict_true(frag == 0)) {
		if ((w = *s++) == L'\0')
			goto one_char;
		if (__predict_true(!__locale_is_utf8)) {
			if (__predict_true(w <= MIR18N_SB_CVT))
				goto one_char;
d70 17
a86 21
		if (w < 0x80) {
 one_char:
			if (pwc != NULL)
				*pwc = w;
			return (w ? 1 : 0);
		} else if (w < 0xC2) {
			/* < 0xC0: spurious second byte */
			/* < 0xC2: would map to 0x80 */
			goto ilseq;
		} else if (w < 0xE0) {
			frag = 1; /* one byte follows */
			w = (w & 0x1F) << 6;
		} else if (w < 0xF0) {
			frag = 2; /* two bytes follow */
			w = (w & 0x0F) << 12;
		} else {
			/* we don't support more than UCS-2 */
			goto ilseq;
		}
	} else
		w = ps->value << 6;
d88 1
a88 1
 conv_byte:
d91 2
a92 3
		ps->count = frag;
		ps->value = w >> 6;
 not_enough:
d100 1
a100 1
	w |= c << (6 * --frag);
d102 1
a102 1
	if (__predict_false(frag)) {
d105 1
a105 1
		if (__predict_false(w < 0x800))
d108 1
a108 1
			goto conv_byte;
d111 1
a111 1
	if (__predict_false(w > MIR18N_MB_MAX))
d115 1
a115 1
		*pwc = w;
d117 1
a117 1
	return (s - (const unsigned char *)sb);
@


1.8
log
@sync mbrtowc(3) and mbsrtowcs(3) to share the same code base,
now rewritten by myself, and compile warning-free
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.7 2006/05/30 10:45:58 tg Exp $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.7 2006/05/30 10:45:58 tg Exp $");
a34 2
size_t __weak_mbrtowc(wchar_t *__restrict__, const char *__restrict__, size_t,
	    mbstate_t *__restrict__);
d36 1
a36 1
__weak_mbrtowc(wchar_t *__restrict__ pwc, const char *__restrict__ sb,
a120 2

__weak_alias(mbrtowc, __weak_mbrtowc);
@


1.7
log
@* use MIR18N_MB_MAX, MIR18N_SB_{MAX,CVT}
* __CRAZY=Yes cleanup
* as a bonus, get rid of a little casting session
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.6 2006/05/21 12:50:36 tg Exp $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.6 2006/05/21 12:50:36 tg Exp $");
d44 1
a44 1
	size_t num;
d49 3
a51 7
	if (__predict_false(sb == NULL)) {
		/* '\0' can only appear as first character */
		if (!__locale_is_utf8 || !ps->count)
			return (0);
 ilseq:
		errno = EILSEQ;
		return ((size_t)(-1));
a55 1
	c = *s++;
d57 1
a57 5
	if (__predict_true(!__locale_is_utf8)) {
		if (__predict_false(c > MIR18N_SB_CVT))
			goto ilseq;
		goto one_char;
	}
d59 11
a69 2
	if (__predict_true(ps->count == 0)) {
		if (c < 0x80) {
d72 3
a74 3
				*pwc = c;
			return (c ? 1 : 0);
		} else if (c < 0xC2) {
d78 6
a83 6
		} else if (c < 0xE0) {
			num = 1; /* one byte follows */
			w = (c & 0x1F) << 6;
		} else if (c < 0xF0) {
			num = 2; /* two bytes follow */
			w = (c & 0x0F) << 12;
d88 2
a89 4
	} else {
		num = ps->count;
		w = ps->value;
	}
d94 1
a94 1
		ps->count = num;
d104 1
d106 4
a109 5
	w |= c << (6 * --num);

	if (__predict_true(!num)) {
		ps->count = 0;
		if (__predict_false(w > MIR18N_MB_MAX))
d111 2
a112 3
		if (pwc != NULL)
			*pwc = w;
		return (s - (const unsigned char *)sb);
d115 1
a115 2
	/* Check for non-minimalistic mapping encoding error in 3-byte seqs */
	if (__predict_false(w < 0x800))
d117 5
a121 2
	else
		goto conv_byte;
@


1.6
log
@make all our completed functions weak (so they can be overridden,
in case someone wants more than 2 locales)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.5 2006/05/21 12:30:47 tg Exp $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.5 2006/05/21 12:30:47 tg Exp $");
a41 1
	unsigned char c;
d43 1
a43 1
	wchar_t w;
d62 3
a64 1
	if (__predict_true(!__locale_is_utf8))
d66 1
d72 1
a72 1
				*pwc = (wchar_t)c;
d80 1
a80 1
			w = (wchar_t)(c & 0x1F) << 6;
d83 1
a83 1
			w = (wchar_t)(c & 0x0F) << 12;
d107 1
a107 1
	w |= (wchar_t)c << (6 * --num);
d111 1
a111 1
		if (__predict_false(w > 0xFFFD))
@


1.5
log
@add upper boundary checks (WCHAR_MAX = 0xFFFD)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.4 2006/05/21 12:12:29 tg Exp $ */
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.4 2006/05/21 12:12:29 tg Exp $");
d35 2
d38 1
a38 1
mbrtowc(wchar_t *__restrict__ pwc, const char *__restrict__ sb,
d122 2
@


1.4
log
@make MB_LEN_CUR overridable (weak function) too, in case
someone wants to plug in support for more than 2 locales
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.3 2005/12/17 05:46:15 tg Exp $ */
d4 2
a5 2
 * Copyright (c) 2005
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
d33 1
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.3 2005/12/17 05:46:15 tg Exp $");
d52 1
a52 1
ilseq:
d66 1
a66 1
one_char:
d89 1
a89 1
conv_byte:
d94 1
a94 1
not_enough:
d107 2
@


1.3
log
@big fat licence update (I left some which are bsiegert@@'s alone though)
also, remove licence boilerplate from some .h files who don't deserve it
and remove and add some advertising clauses because I say so
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.2 2005/09/30 22:13:55 tg Exp $ */
d31 3
a33 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.2 2005/09/30 22:13:55 tg Exp $");
@


1.2
log
@replace __libc_mb_cur_max variable by the (__locale_is_utf8 ? 3 : 1)
equation in the MB_CUR_MAX macro; expose MB_LEN_MAX in <stdlib.h> too,
prevent duplicate definitions. Adjust includes appropriately - <locale.h>
is not needed any more.
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.1 2005/09/30 21:45:26 tg Exp $ */
d18 8
a25 7
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of this work, even if advised of the possibility of such damage.
d31 1
a31 1
__RCSID("$MirOS: src/lib/libc/i18n/mbrtowc.c,v 1.1 2005/09/30 21:45:26 tg Exp $");
@


1.1
log
@* write mbrtowc and wcrtomb (mostly according to POSIX spec)
  so our libc at least builds again
* fix all files for __CRAZY=yes build
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.2 2005/03/03 19:43:30 tg Rel $ */
a27 1
#include <locale.h>
d30 1
a30 1
__RCSID("$MirOS: src/lib/libc/i18n/wctob.c,v 1.3 2005/09/22 21:52:28 tg Exp $");
d47 1
a47 1
		if (!locale_is_utf8 || !ps->count)
d58 1
a58 1
	if (__predict_true(!locale_is_utf8))
@

