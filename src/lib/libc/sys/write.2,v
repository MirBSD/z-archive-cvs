head	1.4;
access;
symbols
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200509212000:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.4
date	2019.07.20.22.56.17;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005D339C090177F934;

1.3
date	2019.07.20.22.49.40;	author tg;	state Exp;
branches;
next	1.2;
commitid	1005D339A91634C2DCB;

1.2
date	2017.08.07.20.15.27;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005988C69344442E37;

1.1
date	2005.02.05.17.25.00;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.25.00;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@allow users of the struct ioweg to check for this extension easily
so code using it can still be portable to the lesser BSDs ;)
@
text
@.\"	$MirOS: src/lib/libc/sys/write.2,v 1.3 2019/07/20 22:49:40 tg Exp $
.\"	$OpenBSD: write.2,v 1.28 2004/04/15 19:52:18 jmc Exp $
.\"	$NetBSD: write.2,v 1.6 1995/02/27 12:39:43 cgd Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\" Copyright (c) 2019
.\"	mirabilos <m@@mirbsd.org>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)write.2	8.5 (Berkeley) 4/2/94
.\"
.Dd $Mdocdate: July 20 2019 $
.Dt WRITE 2
.Os
.Sh NAME
.Nm write ,
.Nm writev ,
.Nm pwrite ,
.Nm pwritev
.Nd write output
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <unistd.h>
.Ft ssize_t
.Fn write "int d" "const void *buf" "size_t nbytes"
.Ft ssize_t
.Fn pwrite "int d" "const void *buf" "size_t nbytes" "off_t offset"
.Pp
.Fd #include <sys/types.h>
.Fd #include <sys/uio.h>
.Fd #include <unistd.h>
.Ft ssize_t
.Fn writev "int d" "const struct ioweg *iov" "int iovcnt"
.Ft ssize_t
.Fn writev "int d" "const struct iovec *iov" "int iovcnt"
.Ft ssize_t
.Fn pwritev "int d" "const struct ioweg *iov" "int iovcnt" "off_t offset"
.Ft ssize_t
.Fn pwritev "int d" "const struct iovec *iov" "int iovcnt" "off_t offset"
.Sh DESCRIPTION
.Fn write
attempts to write
.Fa nbytes
of data to the object referenced by the descriptor
.Fa d
from the buffer pointed to by
.Fa buf .
.Fn writev
performs the same action, but gathers the output data from the
.Fa iovcnt
buffers specified by the members of the
.Fa iov
array: iov[0], iov[1], ..., iov[iovcnt\|\-\|1].
.Fn pwrite
and
.Fn pwritev
perform the same functions, but write to the specified position in
the file without modifying the file pointer.
.Pp
For
.Fn writev
and
.Fn pwritev ,
the
.Fa iovec
structure is defined as either of the following:
.Bd -literal -offset indent
struct ioweg {
	const void *iov_base;
	size_t iov_len;
};
struct iovec {
	void *iov_base;
	size_t iov_len;
};
.Ed
.Pp
If GNU C is used, the right one is selected automatically;
otherwise, the first is an alias of the latter and you have
to live with the const violation;
.Ic ioweg
is defined as a C preprocessor macro (to either ioweg with
GCC or iovec for other compilers), so code can check for
this extension.
Portably, only iovec is available (which is also used for
.Fn readv
and
.Fn preadv ) .
.Pp
Each
.Fa iovec
entry specifies the base address and length of an area
in memory from which data should be written.
.Fn writev
and
.Fn pwritev
will always write a complete area before proceeding to the next.
.Pp
On objects capable of seeking, the
.Fn write
starts at a position given by the pointer associated with
.Fa d
(see
.Xr lseek 2 ) .
Upon return from
.Fn write ,
the pointer is incremented by the number of bytes which were written.
.Pp
Objects that are not capable of seeking always write from the current
position.
The value of the pointer associated with such an object is undefined.
.Pp
If the real user is not the superuser, then
.Fn write
clears the set-user-ID bit on a file.
This prevents penetration of system security by a user who
.Dq captures
a writable set-user-ID file owned by the superuser.
.Pp
If
.Fn write
succeeds it will update the st_ctime and st_mtime fields of the file's
meta-data (see
.Xr stat 2 ) .
.Pp
When using non-blocking I/O on objects such as sockets that are subject
to flow control,
.Fn write
and
.Fn writev
may write fewer bytes than requested; the return value must be noted,
and the remainder of the operation should be retried when possible.
.Pp
Note that
.Fn writev
and
.Fn pwritev
will fail if the value of
.Fa iovcnt
exceeds the constant
.Dv IOV_MAX .
.Sh RETURN VALUES
Upon successful completion the number of bytes which were written
is returned.
Otherwise, a \-1 is returned and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn write ,
.Fn pwrite ,
.Fn writev ,
and
.Fn pwritev
will fail and the file pointer will remain unchanged if:
.Bl -tag -width Er
.It Bq Er EBADF
.Fa d
is not a valid descriptor open for writing.
.It Bq Er EPIPE
An attempt is made to write to a pipe that is not open
for reading by any process.
.It Bq Er EPIPE
An attempt is made to write to a socket of type
.Dv SOCK_STREAM
that is not connected to a peer socket.
.It Bq Er EFBIG
An attempt was made to write a file that exceeds the process's
file size limit or the maximum file size.
.It Bq Er EINVAL
The pointer associated with
.Fa d
was negative.
.It Bq Er ENOSPC
There is no free space remaining on the filesystem containing the file.
.It Bq Er EDQUOT
The user's quota of disk blocks on the filesystem containing the file
has been exhausted.
.It Bq Er EIO
An I/O error occurred while reading from or writing to the filesystem.
.It Bq Er EAGAIN
The file was marked for non-blocking I/O, and no data could be
written immediately.
.El
.Pp
In addition,
.Fn write
and
.Fn pwrite
may return the following error:
.Bl -tag -width Er
.It Bq Er EFAULT
Part of
.Fa iov
or data to be written to the file points outside the process's
allocated address space.
.It Bq Er EINVAL
.Fa nbytes
was larger than
.Ev SSIZE_MAX .
.El
.Pp
Also,
.Fn writev
and
.Fn pwritev
may return one of the following errors:
.Bl -tag -width Er
.It Bq Er EDESTADDRREQ
The destination is no longer available when writing to a
.Ux
domain datagram socket on which
.Xr connect 2
had been used to set a destination address.
.It Bq Er EINVAL
.Fa iovcnt
was less than or equal to 0, or greater than
.Dv IOV_MAX .
.It Bq Er EINVAL
The sum of the
.Fa iov_len
values in the
.Fa iov
array overflowed an
.Em ssize_t .
.El
.Sh SEE ALSO
.Xr fcntl 2 ,
.Xr lseek 2 ,
.Xr open 2 ,
.Xr pipe 2 ,
.Xr poll 2 ,
.Xr select 2
.Sh STANDARDS
The
.Fn write
function conforms to
.St -p1003.1-90 .
The
.Fn writev
and
.Fn pwrite
functions conform to
.St -xpg4.2 .
The
.Ft struct ioweg
type is a
.Mx
extension.
.Sh HISTORY
The
.Ft struct ioweg
type and the transparent union argument for
.Fn writev
and
.Fn pwritev
appeared in
.Mx 11 .
The
.Fn pwritev
function call appeared in
.Ox 2.7 .
The
.Fn pwrite
function call appeared in
.At V.4 .
The
.Fn writev
function call appeared in
.Bx 4.2 .
The
.Fn write
function call appeared in
.At v2 .
.Sh CAVEATS
Error checks should explicitly test for \-1.
Code such as
.Bd -literal -offset indent
while ((nr = write(fd, buf, sizeof(buf))) > 0)
.Ed
.Pp
is not maximally portable, as some platforms allow for
.Va nbytes
to range between
.Dv SSIZE_MAX
and
.Dv SIZE_MAX
\- 2, in which case the return value of an error-free
.Fn write
may appear as a negative number distinct from \-1.
Proper loops should use
.Bd -literal -offset indent
while ((nr = write(fd, buf, sizeof(buf))) != \-1 && nr != 0)
.Ed
@


1.3
log
@fix the const string as writev argument problem BSD has
@
text
@d1 1
a1 1
.\"	$MirOS$
d36 1
a36 1
.Dd $Mdocdate$
d103 10
a112 4
otherwise, the first is an alias of the last and you have
to live with the const violation.
Portably, only the latter is available (which can also be
used for readv/preadv).
@


1.2
log
@filesystem
@
text
@d1 1
d7 2
d36 1
a36 1
.Dd July 28, 1998
d57 2
d61 2
d77 1
a77 1
array: iov[0], iov[1], ..., iov[iovcnt\|-\|1].
d90 1
a90 1
structure is defined as:
d92 4
d102 6
d262 5
d269 8
d310 1
a310 1
while ((nr = write(fd, buf, sizeof(buf))) != -1 && nr != 0)
@


1.1
log
@Initial revision
@
text
@d175 1
a175 1
There is no free space remaining on the file system containing the file.
d177 1
a177 1
The user's quota of disk blocks on the file system containing the file
d180 1
a180 1
An I/O error occurred while reading from or writing to the file system.
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
