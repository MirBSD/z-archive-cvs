head	1.2;
access;
symbols
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.1.1.3.0.2
	MIRBSD_8_BASE:1.1.1.3
	cvs-200509212000:1.1.1.3
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2006.06.02.02.29.50;	author tg;	state Exp;
branches;
next	1.1;
commitid	100447FA28346FF91C0;

1.1
date	2005.02.05.17.24.45;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.45;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.52.35;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	560042e0092f571e;

1.1.1.3
date	2005.09.21.20.34.21;	author tg;	state Exp;
branches;
next	;
commitid	20cd4331c3c732a2;


desc
@@


1.2
log
@__CRAZY cleanliness for most of libc
not: net/rpc/etc., time, thread, sys
@
text
@/*	$OpenBSD: timezone.c,v 1.10 2005/08/08 08:05:34 espie Exp $ */
/*
 * Copyright (c) 1987, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tzfile.h>

const char *_tztab(int, int);

/*
 * timezone --
 *	The arguments are the number of minutes of time you are westward
 *	from Greenwich and whether DST is in effect.  It returns a string
 *	giving the name of the local timezone.  Should be replaced, in the
 *	application code, by a call to localtime.
 */

static char	czone[TZ_MAX_CHARS];		/* space for zone name */

char *
timezone(int zone, int dst)
{
	char	*beg, *end;

	if ((beg = getenv("TZNAME"))) {		/* set in environment */
		if ((end = strchr(beg, ','))) {	/* "PST,PDT" */
			if (dst)
				return(++end);
			*end = '\0';
			strlcpy(czone,beg,sizeof(czone));
			*end = ',';
			return(czone);
		}
		return(beg);
	}
	/* default: table or created zone */
	strlcpy(czone,_tztab(zone,dst),sizeof (czone));
	return(czone);
}

static struct zone {
	int	offset;
	const char *stdzone;
	const char *dlzone;
} zonetab[] = {
	{ -1*60,    "MET",	"MET DST"} ,	/* Middle European */
	{ -2*60,    "EET",	"EET DST"} ,	/* Eastern European */
	{ 4*60,	    "AST",	"ADT"} ,	/* Atlantic */
	{ 5*60,	    "EST",	"EDT"} ,	/* Eastern */
	{ 6*60,	    "CST",	"CDT"} ,	/* Central */
	{ 7*60,	    "MST",	"MDT"} ,	/* Mountain */
	{ 8*60,	    "PST",	"PDT"} ,	/* Pacific */
#ifdef notdef
	/* there's no way to distinguish this from WET */
	{ 0,	    "GMT",	0 },		/* Greenwich */
#endif
	{ 0*60,	    "WET",	"WET DST" },	/* Western European */
	{ -10*60,   "EST",	"EST" },	/* Aust: Eastern */
	{ -10*60+30,"CST",	"CST" },	/* Aust: Central */
	{ -8*60,    "WST",	0 },		/* Aust: Western */
	{ -1,	    NULL,	NULL }
};

/*
 * _tztab --
 *	check static tables or create a new zone name; broken out so that
 *	we can make a guess as to what the zone is if the standard tables
 *	aren't in place in /etc.  DO NOT USE THIS ROUTINE OUTSIDE OF THE
 *	STANDARD LIBRARY.
 */
const char *
_tztab(int zone, int dst)
{
	struct zone	*zp;
	char	sign;

	for (zp = zonetab; zp->offset != -1;++zp)	/* static tables */
		if (zp->offset == zone) {
			if (dst && zp->dlzone)
				return(zp->dlzone);
			if (!dst && zp->stdzone)
				return(zp->stdzone);
		}

	if (zone < 0) {					/* create one */
		zone = -zone;
		sign = '+';
	}
	else
		sign = '-';
	(void)snprintf(czone, sizeof czone, "GMT%c%d:%02d",
	    sign,zone / 60,zone % 60);
	return(czone);
}
@


1.1
log
@Initial revision
@
text
@d1 1
a30 4
#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: timezone.c,v 1.8 2004/05/18 02:05:52 jfb Exp $";
#endif /* LIBC_SCCS and not lint */

d38 1
a38 1
char *_tztab(int, int);
d53 1
a53 2
	register char	*beg,
			*end;
d66 3
a68 1
	return(_tztab(zone,dst));	/* default: table or created zone */
d73 2
a74 2
	char	*stdzone;
	char	*dlzone;
d91 1
a91 1
	{ -1 }
d101 1
a101 1
char *
d104 2
a105 2
	register struct zone	*zp;
	register char	sign;
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d31 1
a31 1
static char rcsid[] = "$OpenBSD: timezone.c,v 1.9 2005/03/25 15:38:47 otto Exp $";
d56 2
a57 1
	char	*beg, *end;
d106 2
a107 2
	struct zone	*zp;
	char	sign;
@


1.1.1.3
log
@Import OpenBSD's libc as of today, minus some of the locale stuff,
and with brk malloc instead of mmap malloc
@
text
@a0 1
/*	$OpenBSD: timezone.c,v 1.10 2005/08/08 08:05:34 espie Exp $ */
d30 4
@


