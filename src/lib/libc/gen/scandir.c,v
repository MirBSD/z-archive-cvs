head	1.4;
access;
symbols
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200509212000:1.1.1.2
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2006.06.02.02.29.49;	author tg;	state Exp;
branches;
next	1.3;
commitid	100447FA28346FF91C0;

1.3
date	2005.09.22.20.40.00;	author tg;	state Exp;
branches;
next	1.2;
commitid	2258433316aba805;

1.2
date	2005.03.06.20.28.40;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.24.45;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.45;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.09.21.20.34.20;	author tg;	state Exp;
branches;
next	;
commitid	20cd4331c3c732a2;


desc
@@


1.4
log
@__CRAZY cleanliness for most of libc
not: net/rpc/etc., time, thread, sys
@
text
@/*	$OpenBSD: scandir.c,v 1.10 2005/08/08 08:05:34 espie Exp $ */
/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Scan the directory dirname calling select to make a list of selected
 * directory entries then sort using qsort and compare routine dcomp.
 * Returns the number of entries and a pointer to a list of pointers to
 * struct dirent (through namelist). Returns -1 if there were any errors.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>

__RCSID("$MirOS: src/lib/libc/gen/scandir.c,v 1.3 2005/09/22 20:40:00 tg Exp $");

/*
 * The DIRSIZ macro is the minimum record length which will hold the directory
 * entry.  This requires the amount of space in struct dirent without the
 * d_name field, plus enough space for the name and a terminating nul byte
 * (dp->d_namlen + 1), rounded up to a 4 byte boundary.
 */
#undef DIRSIZ
#define DIRSIZ(dp)							\
	((sizeof(struct dirent) - sizeof(dp)->d_name) +			\
	    (((dp)->d_namlen + 1 + 3) &~ 3))

int
scandir(const char *dirname, struct dirent ***namelist,
    int (*select)(struct dirent *), int (*dcomp)(const void *, const void *))
{
	struct dirent *d, *p, **names = NULL;
	size_t nitems = 0;
	struct stat stb;
	long arraysz;
	DIR *dirp;

	if ((dirp = opendir(dirname)) == NULL)
		return (-1);
	if (fstat(dirp->dd_fd, &stb) < 0)
		goto fail;

	/*
	 * estimate the array size by taking the size of the directory file
	 * and dividing it by a multiple of the minimum size entry.
	 */
	arraysz = (stb.st_size / 24);
	if ((size_t)arraysz > SIZE_T_MAX / sizeof(struct dirent *)) {
		errno = ENOMEM;
		goto fail;
	}
	names = (struct dirent **)malloc(arraysz * sizeof(struct dirent *));
	if (names == NULL)
		goto fail;

	while ((d = readdir(dirp)) != NULL) {
		if (select != NULL && !(*select)(d))
			continue;	/* just selected names */

		/*
		 * Check to make sure the array has space left and
		 * realloc the maximum size.
		 */
		if (nitems >= (size_t)arraysz) {
			struct dirent **nnames;

			if (fstat(dirp->dd_fd, &stb) < 0)
				goto fail;

			arraysz = stb.st_size / 12;
			nnames = (struct dirent **)realloc((char *)names,
				arraysz * sizeof(struct dirent *));
			if (nnames == NULL)
				goto fail;

			names = nnames;
		}

		/*
		 * Make a minimum size copy of the data
		 */
		p = (struct dirent *)malloc(DIRSIZ(d));
		if (p == NULL)
			goto fail;

		p->d_ino = d->d_ino;
		p->d_type = d->d_type;
		p->d_reclen = d->d_reclen;
		p->d_namlen = d->d_namlen;
		memmove(p->d_name, d->d_name, p->d_namlen + 1);
		names[nitems++] = p;
	}
	closedir(dirp);
	if (nitems && dcomp != NULL)
		qsort(names, nitems, sizeof(struct dirent *), dcomp);
	*namelist = names;
	return (nitems);

fail:
	while (nitems > 0)
		free(names[--nitems]);
	free(names);
	closedir(dirp);
	return (-1);
}

/*
 * Alphabetic order comparison routine for those who want it.
 */
int
alphasort(const void *d1, const void *d2)
{
	return(strcmp((*(struct dirent *const *)d1)->d_name,
	    (*(struct dirent *const *)d2)->d_name));
}
@


1.3
log
@merge
@
text
@d46 1
a46 1
__RCSID("$MirOS: src/lib/libc/gen/scandir.c,v 1.2 2005/03/06 20:28:40 tg Exp $");
d79 1
a79 1
	if (arraysz > SIZE_T_MAX / sizeof(struct dirent *)) {
d95 1
a95 1
		if (nitems >= arraysz) {
d144 2
a145 2
	return(strcmp((*(struct dirent **)d1)->d_name,
	    (*(struct dirent **)d2)->d_name));
@


1.2
log
@merge src/lib
@
text
@d1 1
a30 2
/* $OpenBSD: scandir.c,v 1.9 2004/05/18 02:05:52 jfb Exp $ */

d46 1
a46 1
__RCSID("$MirOS$");
@


1.1
log
@Initial revision
@
text
@d30 1
a30 3
#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: scandir.c,v 1.9 2004/05/18 02:05:52 jfb Exp $";
#endif /* LIBC_SCCS and not lint */
d47 2
d77 1
a77 1
	 * and dividing it by a multiple of the minimum size entry. 
d98 1
a98 1
			
d122 1
a122 1
		bcopy(d->d_name, p->d_name, p->d_namlen + 1);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import OpenBSD's libc as of today, minus some of the locale stuff,
and with brk malloc instead of mmap malloc
@
text
@a0 1
/*	$OpenBSD: scandir.c,v 1.10 2005/08/08 08:05:34 espie Exp $ */
d30 4
@

