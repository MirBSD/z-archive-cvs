head	1.5;
access;
symbols
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2014.02.19.17.01.12;	author tg;	state dead;
branches;
next	1.4;
commitid	1005304E36255BADA2F;

1.4
date	2011.11.20.23.40.12;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004EC98FF17AF0E4B3;

1.3
date	2011.11.20.04.57.13;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004EC8880406A80564;

1.2
date	2007.02.07.21.08.20;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045CA3FC2477ABB3D;

1.1
date	2007.02.07.20.43.24;	author tg;	state Exp;
branches;
next	;
commitid	10045CA39907FBE4A06;


desc
@@


1.5
log
@drop taitime compat code
@
text
@/*-
 * Copyright (c) 2004, 2005, 2006, 2007, 2011
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#include <sys/param.h>
#include <sys/time.h>
#define _IN_TAITIME_IMPLEMENTATION
#include <sys/taitime.h>
#include <stdlib.h>

__RCSID("$MirOS: src/lib/libc/time/tailibc.c,v 1.4 2011/11/20 23:40:12 tg Exp $");

#ifdef L_tai_time
tai64_t
tai_time(tai64_t *v)
{
	register int64_t t;
	struct timeval tv;

	/*
	 * We expect the kernel to count absolute seconds
	 * since the epoch 1970-01-01 00:00:00 UTC.
	 */
	gettimeofday(&tv, NULL);

	t = tv.tv_sec + __TAI64_BIAS;
	if (__predict_false(v != NULL))
		*v = t;

	return (t);
}
__warn_references(tai_time, "tai_time is deprecated; use the new mirtime API instead");
#endif

#ifdef L_taina_time
void
taina_time(tai64na_t *t)
{
	struct timespec tp;

	if (__predict_false(t == NULL))
		return;

	t->atto = 0;
	clock_gettime(CLOCK_REALTIME, &tp);
	t->secs = tp.tv_sec + __TAI64_BIAS;
	t->nano = (int32_t)tp.tv_nsec;
}
__warn_references(taina_time, "taina_time is deprecated; use the new mirtime API instead");
#endif

#ifdef L_djbtai
void
exporttai(uint8_t *dst, tai64na_t *src)
{
	struct {
		uint64_t secs;
		uint32_t nano;
		uint32_t atto;
	} *target;

	if (__predict_false((src == NULL) || (dst == NULL)))
		return;

	target = (void *)dst;
	target->secs = htobe64(__BOUNDINT0(0x7FFFFFFFFFFFFFFFLL, src->secs));
	target->nano = htobe32(__BOUNDINTU(999999999, src->nano));
	target->atto = htobe32(__BOUNDINTU(999999999, src->atto));
}
__warn_references(exporttai, "exporttai is deprecated; use the new mirtime API instead");

void
importtai(uint8_t *src, tai64na_t *dst)
{
	struct {
		uint64_t secs;
		uint32_t nano;
		uint32_t atto;
	} *source;

	if (__predict_false((src == NULL) || (dst == NULL)))
		return;

	source = (void *)src;
	dst->secs = betoh64(source->secs);
	dst->nano = __BOUNDINTU(999999999, betoh32(source->nano));
	dst->atto = __BOUNDINTU(999999999, betoh32(source->atto));
}
__warn_references(importtai, "importtai is deprecated; use the new mirtime API instead");
#endif

#ifdef L_tai_leaps

/*
 * this is to stay ABI compatible, i.e. avoid a libc major bump;
 * we don't care about _initialise_leaps, _leaps, _leaps_initialised
 * and _pushleap since they were internal symbols anyway, though
 */

tai64_t *
tai_leaps(void)
{
	static int initialised = 0;
	static tai64_t *tp, tnull = 0;

	if (!initialised) {
		size_t n = 0;
		const time_t *lp;

		lp = mirtime_getleaps();
		while (lp[n++])
			/* nothing */;
		if ((tp = calloc(n, sizeof(tai64_t))) == NULL) {
			/* yuk, cry ffs? */
			return (&tnull);
		}
		tp[--n] = 0;
		while (n--)
			tp[n] = timet2tai(lp[n]);
		initialised = 1;
	}
	return (tp);
}
__warn_references(tai_leaps, "tai_leaps is deprecated; use the new mirtime API instead");
#endif
@


1.4
log
@continue MirTime work; allows libc and kernel to compile
@
text
@d27 1
a27 1
__RCSID("$MirOS: src/lib/libc/time/tailibc.c,v 1.3+ 2011/11/20 04:57:13 tg Exp $");
@


1.3
log
@first steps toward a new time API
• no DJB code (actual code) any more, only reimplementation of algorithms
  whose code is placed in USA PD
• no struct returns any more
• skip the extra tai_t step
• no _t suffix for types I define
• try to be a bit more elegant – I learned a lot since then, after all

the old ABI is still provided until we bump libc major
‣ the new API might wander off libc into libmbfun then, _too_

goal is functional equivalence (after all, it’s been proven correct)
@
text
@d25 1
d27 1
a27 1
__RCSID("$MirOS: src/lib/libc/time/tailibc.c,v 1.2 2007/02/07 21:08:20 tg Exp $");
d107 35
@


1.2
log
@#include "…" needs it to be in the current directory;
split between tailibc.c (multi) and taileaps.c (single)
@
text
@a0 2
/* $MirOS: src/lib/libc/time/tailibc.c,v 1.1 2007/02/07 20:43:24 tg Exp $ */

d2 1
a2 1
 * Copyright (c) 2004, 2005, 2006, 2007
a10 4
 * Advertising materials mentioning features or use of this work must
 * display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
d23 1
d26 1
a26 1
__RCSID("$MirOS: src/lib/libc/time/tailibc.c,v 1.1 2007/02/07 20:43:24 tg Exp $");
d47 1
d64 1
d85 1
d104 1
@


1.1
log
@* attempt to move taitime(3) functions from libc and kernel to kernbase,
  its prototypes from <time.h> and <sys/time.h> (which includes <time.h>)
  and <lib/libkern/taitime.h> to <sys/taitime.h>, split between indepen-
  dent and dependent (kernel/userland different leap table initialisation;
  userland additional tai_time(), taina_time(), importtai(), exporttai()),
  reduce required headers; reduce diff from headers to upstream
* move kernel tai leap second table from kernel objects to libkern
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.20 2006/12/11 21:04:56 tg Rel $ */
a29 13
#include <stdbool.h>
#include <stdint.h>
#include "private.h"
#include "tzfile.h"

__RCSID("$MirOS: src/lib/libc/time/taitime.c,v 1.9 2006/12/20 17:15:34 tg Exp $");

#ifdef L_tai_leaps
/* private interface */
tai64_t _leaps[TZ_MAX_LEAPS + 1];
bool _leaps_initialised = false;
void _pushleap(time_t);
extern void _initialise_leaps(void);
d31 1
a31 26
tai64_t *
tai_leaps(void)
{
	if (__predict_false(!_leaps_initialised)) {
		_leaps[0] = 0;
		_leaps_initialised = true;
		_initialise_leaps();
		if (__predict_false(!_leaps_initialised))
			/* so we have a sanely usable result */
			_leaps[0] = 0;
	}
	return (_leaps);
}

/* private interface */
void
_pushleap(time_t leap)
{
	tai64_t *t = _leaps;

	while (__predict_true(*t))
		++t;
	*t++ = timet2tai(leap);
	*t = 0;
}
#endif
@

