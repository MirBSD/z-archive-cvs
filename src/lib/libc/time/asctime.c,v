head	1.7;
access;
symbols
	MIRBSD_10:1.5.0.4
	MIRBSD_10_BASE:1.5
	MIRBSD_9_BASE:1.5
	MIRBSD_8:1.5.0.2
	MIRBSD_8_BASE:1.5
	cvs-200509212000:1.1.1.4
	cvs-200507211800:1.1.1.3
	cvs-200504170300:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2009.11.09.21.30.56;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004AF88A0F18F30769;

1.6
date	2008.09.17.19.54.37;	author tg;	state Exp;
branches;
next	1.5;
commitid	10048D1608079412AE8;

1.5
date	2005.09.22.20.50.40;	author tg;	state Exp;
branches;
next	1.4;
commitid	30ed43331935f9f2;

1.4
date	2005.09.22.20.33.01;	author tg;	state Exp;
branches;
next	1.3;
commitid	678e43331511a1e1;

1.3
date	2005.04.17.04.15.43;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.20.28.50;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.25.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.25.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.17.03.31.17;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.07.21.20.53.25;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	560042e0092f571e;

1.1.1.4
date	2005.09.21.20.34.32;	author tg;	state Exp;
branches;
next	;
commitid	20cd4331c3c732a2;


desc
@@


1.7
log
@fix __CRAZY=Yes build (or work around bugs we canâ€™t fix atm)
@
text
@/*	$OpenBSD: asctime.c,v 1.13 2005/08/08 08:05:38 espie Exp $ */
/*
** This file is in the public domain, so clarified as of
** 1996-06-05 by Arthur David Olson (arthur_david_olson@@nih.gov).
*/

/*
** Avoid the temptation to punt entirely to strftime;
** the output of strftime is supposed to be locale specific
** whereas the output of asctime is supposed to be constant.
*/

/*LINTLIBRARY*/

#include "private.h"
#include "tzfile.h"
#include "thread_private.h"

__SCCSID("@@(#)asctime.c	7.22");
__RCSID("$MirOS: src/lib/libc/time/asctime.c,v 1.6 2008/09/17 19:54:37 tg Exp $");

/*
** Some systems only handle "%.2d"; others only handle "%02d";
** "%02.2d" makes (most) everybody happy.
** At least some versions of gcc warn about the %02.2d; ignore the warning.
*/
/*
** All years associated with 32-bit time_t values are exactly four digits long;
** some years associated with 64-bit time_t values are not.
** Vintage programs are coded for years that are always four digits long
** and may assume that the newline always lands in the same place.
** For years that are less than four digits, we pad the output with
** leading zeroes to get the newline in the traditional place.
** The -4 ensures that we get four characters of output even if
** we call a strftime variant that produces fewer characters for some years.
** The ISO C 1999 and POSIX 1003.1-2004 standards prohibit padding the year,
** but many implementations pad anyway; most likely the standards are buggy.
*/
#define ASCTIME_FMT	"%.3s %.3s%3d %2.2d:%2.2d:%2.2d %-4s\n"
/*
** For years that are more than four digits we put extra spaces before the year
** so that code trying to overwrite the newline won't end up overwriting
** a digit within a year and truncating the year (operating on the assumption
** that no output is better than wrong output).
*/
#define ASCTIME_FMT_B	"%.3s %.3s%3d %2.2d:%2.2d:%2.2d     %s\n"

#define STD_ASCTIME_BUF_SIZE	26
/*
** Big enough for something such as
** ??? ???-2147483648 -2147483648:-2147483648:-2147483648     -2147483648\n
** (two three-character abbreviations, five strings denoting integers,
** seven explicit spaces, two explicit colons, a newline,
** and a trailing ASCII nul).
** The values above are for systems where an int is 32 bits and are provided
** as an example; the define below calculates the maximum for the system at
** hand.
*/
#define MAX_ASCTIME_BUF_SIZE	(2*3+5*INT_STRLEN_MAXIMUM(time_t)+7+2+1+1)

static char *
asctime3(register const struct tm *timeptr, char *buf, int bufsize)
{
	static const char	wday_name[][4] = {
		"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
	};
	static const char	mon_name[][4] = {
		"Jan", "Feb", "Mar", "Apr", "May", "Jun",
		"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
	};
	register const char *	wn;
	register const char *	mn;
	char			year[INT_STRLEN_MAXIMUM(time_t) + 2];
	int			len;

	if (timeptr->tm_wday < 0 || timeptr->tm_wday >= DAYSPERWEEK)
		wn = "???";
	else	wn = wday_name[timeptr->tm_wday];
	if (timeptr->tm_mon < 0 || timeptr->tm_mon >= MONSPERYEAR)
		mn = "???";
	else	mn = mon_name[timeptr->tm_mon];
	/*
	** Use strftime's %Y to generate the year, to avoid overflow problems
	** when computing timeptr->tm_year + TM_YEAR_BASE.
	** Assume that strftime is unaffected by other out-of-range members
	** (e.g., timeptr->tm_mday) when processing "%Y".
	*/
	(void) strftime(year, sizeof year, "%Y", timeptr);
	len = snprintf(buf, bufsize,
		((strlen(year) <= 4) ? ASCTIME_FMT : ASCTIME_FMT_B),
		wn, mn,
		timeptr->tm_mday, timeptr->tm_hour,
		timeptr->tm_min, timeptr->tm_sec,
		year);
	if (len != -1 && len < bufsize) {
		return buf;
	} else {
#ifdef EOVERFLOW
		errno = EOVERFLOW;
#else /* !defined EOVERFLOW */
		errno = EINVAL;
#endif /* !defined EOVERFLOW */
		return NULL;
	}
}

/*
** A la ISO/IEC 9945-1, ANSI/IEEE Std 1003.1, 2004 Edition.
*/

char *
asctime_r(register const struct tm *timeptr, char *buf)
{
	/*
	** P1003 8.3.5.2 says that asctime_r() can only assume at most
	** a 26 byte buffer.
	*/
	return asctime3(timeptr, buf, STD_ASCTIME_BUF_SIZE);
}

/*
** A la ISO/IEC 9945-1, ANSI/IEEE Std 1003.1, 2004 Edition.
*/

char *
asctime(const struct tm *timeptr)
{
	static char result[MAX_ASCTIME_BUF_SIZE];
	_THREAD_PRIVATE_KEY(asctime);
	char *resultp = (char *)_THREAD_PRIVATE(asctime, result, NULL);

	if (resultp == NULL)
		return NULL;
	else
		return asctime3(timeptr, resultp, sizeof(result));
}
@


1.6
log
@fix two bugs in asctime, one reported
From: Michael G Schwern <schwern@@pobox.com>

thanks
@
text
@d20 1
a20 1
__RCSID("$MirOS: src/lib/libc/time/asctime.c,v 1.5 2005/09/22 20:50:40 tg Exp $");
d62 1
a62 4
asctime3(timeptr, buf, bufsize)
register const struct tm *	timeptr;
char *				buf;
int				bufsize;
d112 1
a112 3
asctime_r(timeptr, buf)
register const struct tm *	timeptr;
char *				buf;
d126 1
a126 2
asctime(timeptr)
const struct tm *	timeptr;
@


1.5
log
@merge glitch
@
text
@d20 1
a20 1
__RCSID("$MirOS: src/lib/libc/time/asctime.c,v 1.4 2005/09/22 20:33:01 tg Exp $");
d59 1
a59 1
#define MAX_ASCTIME_BUF_SIZE	(2*3+5*INT_STRLEN_MAXIMUM(int)+7+2+1+1)
d76 1
a76 1
	char			year[INT_STRLEN_MAXIMUM(int) + 2];
@


1.4
log
@merge and hope it does not break
@
text
@d20 1
a20 1
__RCSID("$MirOS: src/lib/libc/time/asctime.c,v 1.3 2005/04/17 04:15:43 tg Exp $");
a21 7
#if STRICTLY_STANDARD_ASCTIME
#define ASCTIME_FMT	"%.3s %.3s%3d %.2d:%.2d:%.2d %ld\n"
#define ASCTIME_FMT_B	ASCTIME_FMT
#elif defined(__MirBSD__)
#define ASCTIME_FMT	"%.3s %.3s%3d %2.2d:%2.2d:%2.2d %-4ld\n"
#define ASCTIME_FMT_B	"%.3s %.3s%3d %2.2d:%2.2d:%2.2d     %ld\n"
#else /* !STRICTLY_STANDARD_ASCTIME */
d39 1
a39 1
#define ASCTIME_FMT	"%.3s %.3s%3d %02.2d:%02.2d:%02.2d %-4s\n"
d46 1
a46 1
#define ASCTIME_FMT_B	"%.3s %.3s%3d %02.2d:%02.2d:%02.2d     %s\n"
@


1.3
log
@merge
@
text
@d1 1
d7 6
d20 1
a20 1
__RCSID("$MirOS: src/lib/libc/time/asctime.c,v 1.2 2005/03/06 20:28:50 tg Exp $");
d40 5
a44 1
** spaces before the newline to get the newline in the traditional place.
d46 1
a46 1
#define ASCTIME_FMT	"%.3s %.3s%3d %02.2d:%02.2d:%02.2d %-4ld\n"
d53 1
a53 2
#define ASCTIME_FMT_B	"%.3s %.3s%3d %02.2d:%02.2d:%02.2d     %ld\n"
#endif /* !STRICTLY_STANDARD_ASCTIME */
d83 1
a83 1
	long			year;
d92 7
a98 1
	year = timeptr->tm_year + (long) TM_YEAR_BASE;
d100 1
a100 1
		((year >= -999 && year <= 9999) ? ASCTIME_FMT : ASCTIME_FMT_B),
@


1.2
log
@merge src/lib
@
text
@d13 1
a13 1
__RCSID("$MirOS$");
d64 1
a64 1
	static const char	wday_name[][3] = {
d67 1
a67 1
	static const char	mon_name[][3] = {
d88 2
a89 2
		(long)(TM_YEAR_BASE + timeptr->tm_year));
	if (len < bufsize) {
@


1.1
log
@Initial revision
@
text
@a5 5
#if defined(LIBC_SCCS) && !defined(lint) && !defined(NOID)
static char elsieid[] = "@@(#)asctime.c	7.22";
static char rcsid[] = "$OpenBSD: asctime.c,v 1.8 2004/10/18 22:33:43 millert Exp $";
#endif /* LIBC_SCCS and not lint */

d12 3
d18 3
d88 1
a88 1
		TM_YEAR_BASE + timeptr->tm_year);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@some more updates/fixes from obsd
@
text
@d8 1
a8 1
static char rcsid[] = "$OpenBSD: asctime.c,v 1.11 2005/03/06 01:40:05 cloder Exp $";
d63 1
a63 1
	static const char	wday_name[][4] = {
d66 1
a66 1
	static const char	mon_name[][4] = {
d87 2
a88 2
		year);
	if (len != -1 && len < bufsize) {
@


1.1.1.3
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@a5 6
/*
** Avoid the temptation to punt entirely to strftime;
** the output of strftime is supposed to be locale specific
** whereas the output of asctime is supposed to be constant.
*/

d7 2
a8 2
static char elsieid[] = "@@(#)asctime.c	7.31";
static char rcsid[] = "$OpenBSD: asctime.c,v 1.12 2005/07/05 13:40:51 millert Exp $";
d17 4
d32 1
a32 5
** leading zeroes to get the newline in the traditional place.
** The -4 ensures that we get four characters of output even if
** we call a strftime variant that produces fewer characters for some years.
** The ISO C 1999 and POSIX 1003.1-2004 standards prohibit padding the year,
** but many implementations pad anyway; most likely the standards are buggy.
d34 1
a34 1
#define ASCTIME_FMT	"%.3s %.3s%3d %02.2d:%02.2d:%02.2d %-4s\n"
d41 2
a42 1
#define ASCTIME_FMT_B	"%.3s %.3s%3d %02.2d:%02.2d:%02.2d     %s\n"
d72 1
a72 1
	char			year[INT_STRLEN_MAXIMUM(int) + 2];
d81 1
a81 7
	/*
	** Use strftime's %Y to generate the year, to avoid overflow problems
	** when computing timeptr->tm_year + TM_YEAR_BASE.
	** Assume that strftime is unaffected by other out-of-range members
	** (e.g., timeptr->tm_mday) when processing "%Y".
	*/
	(void) strftime(year, sizeof year, "%Y", timeptr);
d83 1
a83 1
		((strlen(year) <= 4) ? ASCTIME_FMT : ASCTIME_FMT_B),
@


1.1.1.4
log
@Import OpenBSD's libc as of today, minus some of the locale stuff,
and with brk malloc instead of mmap malloc
@
text
@a0 1
/*	$OpenBSD: asctime.c,v 1.13 2005/08/08 08:05:38 espie Exp $ */
d12 5
@


