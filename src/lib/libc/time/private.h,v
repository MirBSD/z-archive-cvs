head	1.5;
access;
symbols
	MIRBSD_10:1.3.0.4
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200509212000:1.1.1.2
	cvs-200507211800:1.1.1.2
	cvs-200504170300:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2018.10.21.19.25.28;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005BCCD2BE48BDCE01;

1.4
date	2011.11.20.04.57.12;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004EC8880406A80564;

1.3
date	2005.09.22.20.33.01;	author tg;	state Exp;
branches;
next	1.2;
commitid	678e43331511a1e1;

1.2
date	2005.03.06.20.28.50;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.25.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.25.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.53.26;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.5
log
@make zic(8) compile w/o warnings
@
text
@/**	$MirOS: src/lib/libc/time/private.h,v 1.4 2011/11/20 04:57:12 tg Exp $ */
/*	$OpenBSD: private.h,v 1.17 2005/07/05 13:40:51 millert Exp $	*/
#ifndef PRIVATE_H
#define PRIVATE_H

/*
** This file is in the public domain, so clarified as of
** 1996-06-05 by Arthur David Olson (arthur_david_olson@@nih.gov).
*/

/* MirOS defaults */
#define TM_GMTOFF		tm_gmtoff
#define TM_ZONE			tm_zone
#undef	XPG4_1994_04_09
#define HAVE_STRERROR		1
#define NO_RUN_TIME_WARNINGS_ABOUT_YEAR_2000_PROBLEMS_THANK_YOU	1
#define	NOID			1

/*
** This header is for use ONLY with the time conversion code.
** There is no guarantee that it will remain unchanged,
** or that it will remain at all.
** Do NOT copy it to any system include directory.
** Thank you!
*/

/*
** ID
*/

#if 0
#ifndef lint
#ifndef NOID
static char	privatehid[] = "@@(#)private.h	7.55";
#endif /* !defined NOID */
#endif /* !defined lint */
#endif

#define GRANDPARENTED	"Local time zone must be set--see zic manual page"

/*
** Defaults for preprocessor symbols.
** You can override these in your C compiler options, e.g. `-DHAVE_ADJTIME=0'.
*/

#ifndef HAVE_ADJTIME
#define HAVE_ADJTIME		1
#endif /* !defined HAVE_ADJTIME */

#ifndef HAVE_GETTEXT
#define HAVE_GETTEXT		0
#endif /* !defined HAVE_GETTEXT */

#ifndef HAVE_INCOMPATIBLE_CTIME_R
#define HAVE_INCOMPATIBLE_CTIME_R	0
#endif /* !defined INCOMPATIBLE_CTIME_R */

#ifndef HAVE_SETTIMEOFDAY
#define HAVE_SETTIMEOFDAY	3
#endif /* !defined HAVE_SETTIMEOFDAY */

#ifndef HAVE_STRERROR
#define HAVE_STRERROR		1
#endif /* !defined HAVE_STRERROR */

#ifndef HAVE_SYMLINK
#define HAVE_SYMLINK		1
#endif /* !defined HAVE_SYMLINK */

#ifndef HAVE_SYS_STAT_H
#define HAVE_SYS_STAT_H		1
#endif /* !defined HAVE_SYS_STAT_H */

#ifndef HAVE_SYS_WAIT_H
#define HAVE_SYS_WAIT_H		1
#endif /* !defined HAVE_SYS_WAIT_H */

#ifndef HAVE_UNISTD_H
#define HAVE_UNISTD_H		1
#endif /* !defined HAVE_UNISTD_H */

#ifndef HAVE_UTMPX_H
#define HAVE_UTMPX_H		0
#endif /* !defined HAVE_UTMPX_H */

#if 0
#ifndef LOCALE_HOME
#define LOCALE_HOME		"/usr/share/locale"
#endif /* !defined LOCALE_HOME */
#endif

#if HAVE_INCOMPATIBLE_CTIME_R
#define asctime_r _incompatible_asctime_r
#define ctime_r _incompatible_ctime_r
#endif /* HAVE_INCOMPATIBLE_CTIME_R */

/*
** Nested includes
*/

#include "sys/types.h"	/* for time_t */
#include "stdio.h"
#include "errno.h"
#include "string.h"
#include "limits.h"	/* for CHAR_BIT */
#include "time.h"
#include "stdlib.h"

#if HAVE_GETTEXT
#include "libintl.h"
#endif /* HAVE_GETTEXT */

#if HAVE_SYS_WAIT_H
#include <sys/wait.h>	/* for WIFEXITED and WEXITSTATUS */
#endif /* HAVE_SYS_WAIT_H */

#ifndef WIFEXITED
#define WIFEXITED(status)	(((status) & 0xff) == 0)
#endif /* !defined WIFEXITED */
#ifndef WEXITSTATUS
#define WEXITSTATUS(status)	(((status) >> 8) & 0xff)
#endif /* !defined WEXITSTATUS */

#if HAVE_UNISTD_H
#include "unistd.h"	/* for F_OK and R_OK */
#endif /* HAVE_UNISTD_H */

#if !HAVE_UNISTD_H
#ifndef F_OK
#define F_OK	0
#endif /* !defined F_OK */
#ifndef R_OK
#define R_OK	4
#endif /* !defined R_OK */
#endif /* !HAVE_UNISTD_H */

/* Unlike <ctype.h>'s isdigit, this also works if c < 0 | c > UCHAR_MAX. */
#define is_digit(c) ((unsigned)(c) - '0' <= 9)

/*
** Workarounds for compilers/systems.
*/

/*
** SunOS 4.1.1 cc lacks prototypes.
*/

#ifndef P
#ifdef __STDC__
#define P(x)	x
#endif /* defined __STDC__ */
#ifndef __STDC__
#define P(x)	()
#endif /* !defined __STDC__ */
#endif /* !defined P */

/*
** SunOS 4.1.1 headers lack EXIT_SUCCESS.
*/

#ifndef EXIT_SUCCESS
#define EXIT_SUCCESS	0
#endif /* !defined EXIT_SUCCESS */

/*
** SunOS 4.1.1 headers lack EXIT_FAILURE.
*/

#ifndef EXIT_FAILURE
#define EXIT_FAILURE	1
#endif /* !defined EXIT_FAILURE */

/*
** SunOS 4.1.1 headers lack FILENAME_MAX.
*/

#ifndef FILENAME_MAX

#ifndef MAXPATHLEN
#ifdef unix
#include "sys/param.h"
#endif /* defined unix */
#endif /* !defined MAXPATHLEN */

#ifdef MAXPATHLEN
#define FILENAME_MAX	MAXPATHLEN
#endif /* defined MAXPATHLEN */
#ifndef MAXPATHLEN
#define FILENAME_MAX	1024		/* Pure guesswork */
#endif /* !defined MAXPATHLEN */

#endif /* !defined FILENAME_MAX */

#if 0
/*
** SunOS 4.1.1 libraries lack remove.
*/

#ifndef remove
extern int	unlink P((const char * filename));
#define remove	unlink
#endif /* !defined remove */

/*
** Some ancient errno.h implementations don't declare errno.
** But some newer errno.h implementations define it as a macro.
** Fix the former without affecting the latter.
*/
#ifndef errno
extern int errno;
#endif /* !defined errno */

/*
** Some time.h implementations don't declare asctime_r.
** Others might define it as a macro.
** Fix the former without affecting the latter.
*/

#ifndef asctime_r
extern char * asctime_r();
#endif
#endif

/*
** Private function declarations.
*/

char *	icalloc P((int nelem, int elsize));
char *	icatalloc P((char * old, const char * new));
char *	icpyalloc P((const char * string));
char *	imalloc P((int n));
void *	irealloc P((void * pointer, int size));
void	icfree P((char * pointer));
void	ifree P((char * pointer));
const char *scheck P((const char * const string, const char * const format));

/*
** Finally, some convenience items.
*/

#ifndef TRUE
#define TRUE	1
#endif /* !defined TRUE */

#ifndef FALSE
#define FALSE	0
#endif /* !defined FALSE */

#ifndef TYPE_BIT
#define TYPE_BIT(type)	(sizeof (type) * CHAR_BIT)
#endif /* !defined TYPE_BIT */

#ifndef TYPE_SIGNED
#define TYPE_SIGNED(type) (((type) -1) < 0)
#endif /* !defined TYPE_SIGNED */

/*
** Since the definition of TYPE_INTEGRAL contains floating point numbers,
** it cannot be used in preprocessor directives.
*/

#ifndef TYPE_INTEGRAL
#define TYPE_INTEGRAL(type) (((type) 0.5) != 0.5)
#endif /* !defined TYPE_INTEGRAL */

#ifndef INT_STRLEN_MAXIMUM
/*
** 302 / 1000 is log10(2.0) rounded up.
** Subtract one for the sign bit if the type is signed;
** add one for integer division truncation;
** add one more for a minus sign if the type is signed.
*/
#define INT_STRLEN_MAXIMUM(type) \
	((TYPE_BIT(type) - TYPE_SIGNED(type)) * 302 / 1000 + \
	1 + TYPE_SIGNED(type))
#endif /* !defined INT_STRLEN_MAXIMUM */

/*
** INITIALIZE(x)
*/

#ifndef GNUC_or_lint
#ifdef lint
#define GNUC_or_lint
#endif /* defined lint */
#ifndef lint
#ifdef __GNUC__
#define GNUC_or_lint
#endif /* defined __GNUC__ */
#endif /* !defined lint */
#endif /* !defined GNUC_or_lint */

#ifndef INITIALIZE
#ifdef GNUC_or_lint
#define INITIALIZE(x)	((x) = 0)
#endif /* defined GNUC_or_lint */
#ifndef GNUC_or_lint
#define INITIALIZE(x)
#endif /* !defined GNUC_or_lint */
#endif /* !defined INITIALIZE */

/*
** For the benefit of GNU folk...
** `_(MSGID)' uses the current locale's message library string for MSGID.
** The default is to use gettext if available, and use MSGID otherwise.
*/

#ifndef _
#if HAVE_GETTEXT
#define _(msgid) gettext(msgid)
#else /* !HAVE_GETTEXT */
#define _(msgid) msgid
#endif /* !HAVE_GETTEXT */
#endif /* !defined _ */

#ifndef TZ_DOMAIN
#define TZ_DOMAIN "tz"
#endif /* !defined TZ_DOMAIN */

#if HAVE_INCOMPATIBLE_CTIME_R
#undef asctime_r
#undef ctime_r
char *asctime_r P((struct tm const *, char *));
char *ctime_r P((time_t const *, char *));
#endif /* HAVE_INCOMPATIBLE_CTIME_R */

/*
** UNIX was a registered trademark of The Open Group in 2003.
*/

#endif /* !defined PRIVATE_H */
@


1.4
log
@first steps toward a new time API
• no DJB code (actual code) any more, only reimplementation of algorithms
  whose code is placed in USA PD
• no struct returns any more
• skip the extra tai_t step
• no _t suffix for types I define
• try to be a bit more elegant – I learned a lot since then, after all

the old ABI is still provided until we bump libc major
‣ the new API might wander off libc into libmbfun then, _too_

goal is functional equivalence (after all, it’s been proven correct)
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libc/time/private.h,v 1.3 2005/09/22 20:33:01 tg Exp $ */
d235 1
a235 1
char *	scheck P((const char *string, char *format));
@


1.3
log
@merge and hope it does not break
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libc/time/private.h,v 1.2 2005/03/06 20:28:50 tg Exp $ */
a6 4
 * MirOS TAI64 routines
 */

/*
@


1.2
log
@merge src/lib
@
text
@d1 2
a2 3
/**	$MirOS$ */
/*	$OpenBSD: private.h,v 1.16 2004/10/18 22:33:43 millert Exp $	*/

a18 1
#define HAVE_LONG_DOUBLE	1
d38 1
a38 1
static char	privatehid[] = "@@(#)private.h	7.54";
d43 2
d113 1
a113 1
#if HAVE_GETTEXT - 0
d115 1
a115 1
#endif /* HAVE_GETTEXT - 0 */
d117 1
a117 1
#if HAVE_SYS_WAIT_H - 0
d119 1
a119 1
#endif /* HAVE_SYS_WAIT_H - 0 */
d128 1
a128 1
#if HAVE_UNISTD_H - 0
d130 1
a130 1
#endif /* HAVE_UNISTD_H - 0 */
d132 1
a132 1
#if !(HAVE_UNISTD_H - 0)
d139 1
a139 1
#endif /* !(HAVE_UNISTD_H - 0) */
d141 1
a141 1
/* Unlike <ctype.h>'s isdigit, this also works if c < 0 | c > UCHAR_MAX.  */
d231 1
d239 1
a239 2
char *	scheck P((const char *string, const char *format));

d261 9
d278 2
a279 1
    ((TYPE_BIT(type) - TYPE_SIGNED(type)) * 302 / 1000 + 1 + TYPE_SIGNED(type))
d313 1
a313 1
#if HAVE_GETTEXT - 0
d315 1
a315 1
#else /* !(HAVE_GETTEXT - 0) */
d317 1
a317 1
#endif /* !(HAVE_GETTEXT - 0) */
@


1.1
log
@Initial revision
@
text
@d1 1
d3 1
d5 1
d7 3
a9 1
#define PRIVATE_H
d16 1
a16 1
/* OpenBSD defaults */
d19 1
a19 3
#define PCTS			1
#define XPG4_1994_04_09		1
#define STD_INSPIRED		1
d23 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: private.h,v 1.17 2005/07/05 13:40:51 millert Exp $	*/
d17 1
d36 1
a36 1
static char	privatehid[] = "@@(#)private.h	7.55";
a40 2
#define GRANDPARENTED	"Local time zone must be set--see zic manual page"

d109 1
a109 1
#if HAVE_GETTEXT
d111 1
a111 1
#endif /* HAVE_GETTEXT */
d113 1
a113 1
#if HAVE_SYS_WAIT_H
d115 1
a115 1
#endif /* HAVE_SYS_WAIT_H */
d124 1
a124 1
#if HAVE_UNISTD_H
d126 1
a126 1
#endif /* HAVE_UNISTD_H */
d128 1
a128 1
#if !HAVE_UNISTD_H
d135 1
a135 1
#endif /* !HAVE_UNISTD_H */
d137 1
a137 1
/* Unlike <ctype.h>'s isdigit, this also works if c < 0 | c > UCHAR_MAX. */
a226 1

d234 2
a235 1
char *	scheck P((const char *string, char *format));
a256 9
/*
** Since the definition of TYPE_INTEGRAL contains floating point numbers,
** it cannot be used in preprocessor directives.
*/

#ifndef TYPE_INTEGRAL
#define TYPE_INTEGRAL(type) (((type) 0.5) != 0.5)
#endif /* !defined TYPE_INTEGRAL */

d265 1
a265 2
	((TYPE_BIT(type) - TYPE_SIGNED(type)) * 302 / 1000 + \
	1 + TYPE_SIGNED(type))
d299 1
a299 1
#if HAVE_GETTEXT
d301 1
a301 1
#else /* !HAVE_GETTEXT */
d303 1
a303 1
#endif /* !HAVE_GETTEXT */
@

