head	1.4;
access;
symbols
	cvs-201110182115:1.1.3.2
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	cvs-200611031400:1.1.3.1
	netbsd:1.1.3
	OPENBSD_4_0:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.4
date	2014.02.09.23.19.59;	author tg;	state Exp;
branches;
next	1.3;
commitid	10052F80D3270BFA1BC;

1.3
date	2011.10.18.19.46.21;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	1004E9DD78368B8F2A9;

1.2
date	2006.11.03.18.10.50;	author tg;	state Exp;
branches;
next	1.1;
commitid	100454B862956081199;

1.1
date	2005.02.05.17.25.18;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2005.02.05.17.25.18;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2006.11.03.14.20.58;	author tg;	state Exp;
branches;
next	1.1.3.2;
commitid	100454B505850533E95;

1.1.3.2
date	2011.10.18.19.20.29;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004E9DD18376042FF5;


desc
@@


1.4
log
@“long double” in MirBSD (i386 and sparc, both) is currently just plain wrong and will lead to bad results; fix the code if needed
@
text
@.\" Copyright (c) 1985, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     from: @@(#)exp.3	6.12 (Berkeley) 7/31/91
.\" $FreeBSD: src/lib/msun/man/exp.3,v 1.24 2008/01/18 21:43:00 das Exp $
.\"	$NetBSD: exp.3,v 1.28 2011/09/17 10:52:52 jruoho Exp $
.\"
.Dd $Mdocdate$
.Dt EXP 3
.Os
.Sh NAME
.Nm exp ,
.Nm expf ,
.\" The sorting error is intentional.  exp and expf should be adjacent.
.Nm exp2 ,
.Nm exp2f ,
.Nm expm1 ,
.Nm expm1f ,
.Nd exponential functions
.Sh LIBRARY
.Lb libm
.Sh SYNOPSIS
.In math.h
.Ft double
.Fn exp "double x"
.Ft float
.Fn expf "float x"
.Ft double
.Fn exp2 "double x"
.Ft float
.Fn exp2f "float x"
.Ft double
.Fn expm1 "double x"
.Ft float
.Fn expm1f "float x"
.Sh DESCRIPTION
The
.Fn exp
and the
.Fn expf
functions compute the base
.Ms e
exponential value of the given argument
.Fa x .
.Pp
The
.Fn exp2
and
.Fn exp2f
functions compute the base 2 exponential of the given argument
.Fa x .
.Pp
The
.Fn expm1
and the
.Fn expm1f
functions computes the value exp(x)\-1 accurately even for tiny argument
.Fa x .
.Sh RETURN VALUES
These functions will return the appropriate computation unless an error
occurs or an argument is out of range.
The functions
.Fn exp
and
.Fn expm1
detect if the computed value will overflow,
set the global variable
.Va errno
to
.Er ERANGE
and cause a reserved operand fault on a
.Tn VAX .
The function
.Fn pow x y
checks to see if
.Fa x
\*(Lt 0 and
.Fa y
is not an integer, in the event this is true,
the global variable
.Va errno
is set to
.Er EDOM
and on the
.Tn VAX
generate a reserved operand fault.
On a
.Tn VAX ,
.Va errno
is set to
.Er EDOM
and the reserved operand is returned
by log unless
.Fa x
\*(Gt 0, by
.Fn log1p
unless
.Fa x
\*(Gt \-1.
.Sh ERRORS
exp(x), log(x), expm1(x) and log1p(x) are accurate to within
an
.Em ulp ,
and log10(x) to within about 2
.Em ulps ;
an
.Em ulp
is one
.Em Unit
in the
.Em Last
.Em Place .
The error in
.Fn pow x y
is below about 2
.Em ulps
when its
magnitude is moderate, but increases as
.Fn pow x y
approaches
the over/underflow thresholds until almost as many bits could be
lost as are occupied by the floating\-point format's exponent
field; that is 8 bits for
.Tn "VAX D"
and 11 bits for IEEE 754 Double.
No such drastic loss has been exposed by testing; the worst
errors observed have been below 20
.Em ulps
for
.Tn "VAX D" ,
300
.Em ulps
for
.Tn IEEE
754 Double.
Moderate values of
.Fn pow
are accurate enough that
.Fn pow integer integer
is exact until it is bigger than 2**56 on a
.Tn VAX ,
2**53 for
.Tn IEEE
754.
.Sh NOTES
The functions exp(x)\-1 and log(1+x) are called
expm1 and logp1 in
.Tn BASIC
on the Hewlett\-Packard
.Tn HP Ns \-71B
and
.Tn APPLE
Macintosh,
.Tn EXP1
and
.Tn LN1
in Pascal, exp1 and log1 in C
on
.Tn APPLE
Macintoshes, where they have been provided to make
sure financial calculations of ((1+x)**n\-1)/x, namely
expm1(n\(**log1p(x))/x, will be accurate when x is tiny.
They also provide accurate inverse hyperbolic functions.
.Pp
The function
.Fn pow x 0
returns x**0 = 1 for all x including x = 0,
.if n \
Infinity
.if t \
\(if
(not found on a
.Tn VAX ) ,
and
.Em NaN
(the reserved
operand on a
.Tn VAX ) .
Previous implementations of pow may
have defined x**0 to be undefined in some or all of these
cases.
Here are reasons for returning x**0 = 1 always:
.Bl -enum -width indent
.It
Any program that already tests whether x is zero (or
infinite or \*(Na) before computing x**0 cannot care
whether 0**0 = 1 or not.
Any program that depends
upon 0**0 to be invalid is dubious anyway since that
expression's meaning and, if invalid, its consequences
vary from one computer system to another.
.It
Some Algebra texts (e.g. Sigler's) define x**0 = 1 for
all x, including x = 0.
This is compatible with the convention that accepts a[0]
as the value of polynomial
.Bd -literal -offset indent
p(x) = a[0]\(**x**0 + a[1]\(**x**1 + a[2]\(**x**2 +...+ a[n]\(**x**n
.Ed
.Pp
at x = 0 rather than reject a[0]\(**0**0 as invalid.
.It
Analysts will accept 0**0 = 1 despite that x**y can
approach anything or nothing as x and y approach 0
independently.
The reason for setting 0**0 = 1 anyway is this:
.Bd -filled -offset indent
If x(z) and y(z) are
.Em any
functions analytic (expandable
in power series) in z around z = 0, and if there
x(0) = y(0) = 0, then x(z)**y(z) \(-\*(Gt 1 as z \(-\*(Gt 0.
.Ed
.It
If 0**0 = 1, then
.if n \
infinity**0 = 1/0**0 = 1 too; and
.if t \
\(if**0 = 1/0**0 = 1 too; and
then \*(Na**0 = 1 too because x**0 = 1 for all finite
and infinite x, i.e., independently of x.
.El
.Sh SEE ALSO
.Xr math 3
.Sh STANDARDS
The
.Fn exp
functions conform to
.St -ansiC .
The
.Fn exp2 ,
.Fn exp2f ,
.Fn expf ,
.Fn expm1 ,
and
.Fn expm1f
functions conform to
.St -isoC-99 .
.Sh HISTORY
The
.Fn exp
functions appeared in
.At v6 .
The
.Fn expm1
function appeared in
.Bx 4.3 .
@


1.3
log
@Merge NetBSD libm. Makefile needs more work, I think.
@
text
@d32 1
a32 1
.Dd September 13, 2011
a40 1
.\" .Nm exp2l ,
a55 2
.\" .Ft long double
.\" .Fn exp2l "long double x"
d71 1
a71 1
.Fn exp2 ,
a73 3
.\" .Fn exp2f ,
.\" and
.\" .Fn exp2l
@


1.2
log
@Switch to NetBSD libm
@
text
@d29 2
a30 1
.\"	$NetBSD: exp.3,v 1.23 2005/07/21 12:58:22 wiz Exp $
d32 1
a32 1
.Dd July 21, 2005
d38 4
d44 1
a44 11
.Nm log ,
.Nm logf ,
.Nm log2 ,
.Nm log2f ,
.Nm log10 ,
.Nm log10f ,
.Nm log1p ,
.Nm log1pf ,
.Nm pow ,
.Nm powf
.Nd exponential, logarithm, power functions
d54 6
a62 20
.Ft double
.Fn log "double x"
.Ft float
.Fn logf "float x"
.Ft double
.Fn log2 "double x"
.Ft float
.Fn log2f "float x"
.Ft double
.Fn log10 "double x"
.Ft float
.Fn log10f "float x"
.Ft double
.Fn log1p "double x"
.Ft float
.Fn log1pf "float x"
.Ft double
.Fn pow "double x" "double y"
.Ft float
.Fn powf "float x" "float y"
d66 5
a70 1
function computes the exponential value of the given argument
d74 7
a80 2
.Fn expm1
function computes the value exp(x)\-1 accurately even for tiny argument
d84 4
a87 14
.Fn log
function computes the value of the natural logarithm of argument
.Fa x .
.Pp
The
.Fn log10
function computes the value of the logarithm of argument
.Fa x
to base 10.
.Pp
The
.Fn log1p
function computes
the value of log(1+x) accurately even for tiny argument
a88 16
.Pp
The
.Fn log2
and the
.Fn log2f
functions compute the value of the logarithm of argument
.Fa x
to base 2.
.Pp
The
.Fn pow
computes the value
of
.Ar x
to the exponent
.Ar y .
d93 2
a94 1
.Fn exp ,
a95 2
and
.Fn pow
d257 8
a264 3
.Fn exp ,
.Fn log ,
.Fn log10
d266 1
a266 1
.Fn pow
d268 1
a268 1
.St -ansiC .
d270 3
a272 7
A
.Fn exp ,
.Fn log
and
.Fn pow
functions
appeared in
a273 5
A
.Fn log10
function
appeared in
.At v7 .
a274 2
.Fn log1p
and
d276 1
a276 1
functions appeared in
@


1.1
log
@Initial revision
@
text
@a0 2
.\"	$OpenBSD: exp.3,v 1.16 2003/06/02 20:18:41 millert Exp $
.\"
d29 1
d31 1
a31 1
.Dd July 31, 1991
d41 2
d50 2
d53 1
a53 1
.Fd #include <math.h>
d67 4
a86 4
The
.Fn expf
function is a single precision version of
.Fn exp .
a91 4
The
.Fn expm1f
function is a single precision version of
.Fn expm1 .
a96 4
The
.Fn logf
function is a single precision version of
.Fn log .
a102 4
The
.Fn log10f
function is a single precision version of
.Fn log10 .
d109 1
d111 6
a116 3
.Fn log1pf
function is a single precision version of
.Fn log1p .
d120 2
a121 1
function computes the value of
a124 4
The
.Fn powf
function is a single precision version of
.Fn pow .
d139 1
a139 3
.Tn VAX
or
.Tn Tahoe .
d144 1
a144 1
< 0 and
a152 2
and
.Tn Tahoe
d155 1
a155 3
.Tn VAX
and
.Tn Tahoe ,
d162 1
a162 1
> 0, by
d166 2
a167 2
> \-1.
.Sh ERRORS (due to Roundoff etc.)
d247 2
a248 1
have defined x**0 to be undefined in some or all of these cases.
d255 2
a256 1
Any program that depends upon 0**0 to be invalid is dubious anyway since that
d260 1
a260 1
Some Algebra texts (e.g., Sigler's) define x**0 = 1 for
d279 1
a279 1
x(0) = y(0) = 0, then x(z)**y(z) \(-> 1 as z \(-> 0.
a290 1
.Xr infnan 3 ,
d292 9
@


1.1.3.1
log
@Laugh at OpenBSD's libm and import NetBSD's
@
text
@d1 2
a30 1
.\"	$NetBSD: exp.3,v 1.23 2005/07/21 12:58:22 wiz Exp $
d32 1
a32 1
.Dd July 21, 2005
a41 2
.Nm log2 ,
.Nm log2f ,
a48 2
.Sh LIBRARY
.Lb libm
d50 1
a50 1
.In math.h
a63 4
.Fn log2 "double x"
.Ft float
.Fn log2f "float x"
.Ft double
d80 4
d89 4
d98 4
d108 4
a117 1
.Pp
d119 3
a121 6
.Fn log2
and the
.Fn log2f
functions compute the value of the logarithm of argument
.Fa x
to base 2.
d125 1
a125 2
computes the value
of
d129 4
d147 3
a149 1
.Tn VAX .
d154 1
a154 1
\*[Lt] 0 and
d163 2
d167 3
a169 1
.Tn VAX ,
d176 1
a176 1
\*[Gt] 0, by
d180 2
a181 2
\*[Gt] \-1.
.Sh ERRORS
d261 1
a261 2
have defined x**0 to be undefined in some or all of these
cases.
d268 1
a268 2
Any program that depends
upon 0**0 to be invalid is dubious anyway since that
d272 1
a272 1
Some Algebra texts (e.g. Sigler's) define x**0 = 1 for
d291 1
a291 1
x(0) = y(0) = 0, then x(z)**y(z) \(-\*[Gt] 1 as z \(-\*[Gt] 0.
d303 1
a304 9
.Sh STANDARDS
The
.Fn exp ,
.Fn log ,
.Fn log10
and
.Fn pow
functions conform to
.St -ansiC .
@


1.1.3.2
log
@Import current libm from NetBSD, with the directories complex, noieee_src, arch/!i387 removed.

The idea is to get fmin and fmax, which are needed by some newer software.
@
text
@d29 1
a29 2
.\" $FreeBSD: src/lib/msun/man/exp.3,v 1.24 2008/01/18 21:43:00 das Exp $
.\"	$NetBSD: exp.3,v 1.28 2011/09/17 10:52:52 jruoho Exp $
d31 1
a31 1
.Dd September 13, 2011
a36 4
.\" The sorting error is intentional.  exp and expf should be adjacent.
.Nm exp2 ,
.Nm exp2f ,
.\" .Nm exp2l ,
d39 11
a49 1
.Nd exponential functions
d59 9
a67 1
.Fn exp2 "double x"
d69 1
a69 3
.Fn exp2f "float x"
.\" .Ft long double
.\" .Fn exp2l "long double x"
d71 9
a79 1
.Fn expm1 "double x"
d81 1
a81 1
.Fn expm1f "float x"
d85 11
a95 5
and the
.Fn expf
functions compute the base
.Ms e
exponential value of the given argument
d99 9
a107 7
.Fn exp2 ,
and
.Fn exp2f
.\" .Fn exp2f ,
.\" and
.\" .Fn exp2l
functions compute the base 2 exponential of the given argument
d111 1
a111 1
.Fn expm1
d113 12
a124 3
.Fn expm1f
functions computes the value exp(x)\-1 accurately even for tiny argument
.Fa x .
d129 2
a130 1
.Fn exp
d132 1
a132 1
.Fn expm1
d140 150
d294 5
a298 1
.Fn exp
d301 4
a304 5
The
.Fn exp2 ,
.Fn exp2f ,
.Fn expf ,
.Fn expm1 ,
d306 3
a308 7
.Fn expm1f
functions conform to
.St -isoC-99 .
.Sh HISTORY
The
.Fn exp
functions appeared in
d310 5
d316 2
d319 1
a319 1
function appeared in
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
