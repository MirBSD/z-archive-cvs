head	1.3;
access;
symbols
	cvs-201110182115:1.1.3.2
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	cvs-200611031400:1.1.3.1
	netbsd:1.1.3
	OPENBSD_4_0:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2011.10.18.19.46.27;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	1004E9DD78368B8F2A9;

1.2
date	2006.11.03.18.10.56;	author tg;	state Exp;
branches;
next	1.1;
commitid	100454B862956081199;

1.1
date	2006.11.03.01.33.23;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;
commitid	100454A9C75705F73D8;

1.1.1.1
date	2006.11.03.01.33.23;	author tg;	state Exp;
branches;
next	;
commitid	100454A9C75705F73D8;

1.1.3.1
date	2006.11.03.14.20.59;	author tg;	state Exp;
branches;
next	1.1.3.2;
commitid	100454B505850533E95;

1.1.3.2
date	2011.10.18.19.20.48;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004E9DD18376042FF5;


desc
@@


1.3
log
@Merge NetBSD libm. Makefile needs more work, I think.
@
text
@/* $NetBSD: lrintf.c,v 1.5 2008/04/26 23:49:50 christos Exp $ */

/*-
 * Copyright (c) 2004
 *	Matthias Drochner. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/limits.h>
#include <math.h>
#include <ieeefp.h>
#include <machine/ieee.h>
#include "math_private.h"

#ifndef LRINTNAME
#define LRINTNAME lrintf
#define RESTYPE long int
#define RESTYPE_MIN LONG_MIN
#define RESTYPE_MAX LONG_MAX
#endif

#define RESTYPE_BITS (sizeof(RESTYPE) * 8)

static const float
TWO23[2]={
  8.3886080000e+06, /* 0x4b000000 */
 -8.3886080000e+06, /* 0xcb000000 */
};

RESTYPE
LRINTNAME(float x)
{
	u_int32_t i0;
	int e, s, shift;
	RESTYPE res;
#ifdef __i386__ /* XXX gcc4 will omit the rounding otherwise */
	volatile
#endif
		float w;

	GET_FLOAT_WORD(i0, x);
	e = i0 >> SNG_FRACBITS;
	s = (uint32_t)e >> SNG_EXPBITS;
	e = (e & 0xff) - SNG_EXP_BIAS;

	/* 1.0 x 2^-1 is the smallest number which can be rounded to 1 */
	if (e < -1)
		return (0);
	/* 1.0 x 2^31 (or 2^63) is already too large */
	if (e >= (int)RESTYPE_BITS - 1)
		return (s ? RESTYPE_MIN : RESTYPE_MAX); /* ??? unspecified */

	/* >= 2^23 is already an exact integer */
	if (e < SNG_FRACBITS) {
		/* round, using current direction */
		w = TWO23[s] + x;
		x = w - TWO23[s];
	}

	GET_FLOAT_WORD(i0, x);
	e = ((i0 >> SNG_FRACBITS) & 0xff) - SNG_EXP_BIAS;
	i0 &= 0x7fffff;
	i0 |= (1 << SNG_FRACBITS);

	shift = e - SNG_FRACBITS;
	if (shift >=0)
		res = (shift < 32 ? (RESTYPE)i0 << shift : 0);
	else
		res = (shift > -32 ? i0 >> -shift : 0);

	return (s ? -res : res);
}
@


1.2
log
@Switch to NetBSD libm
@
text
@d1 1
a1 1
/* $NetBSD: lrintf.c,v 1.4 2006/08/01 20:14:35 drochner Exp $ */
d64 1
a64 1
	s = e >> SNG_EXPBITS;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 2
/*	$OpenBSD: lrintf.c,v 1.2 2005/11/17 20:51:56 otto Exp $	*/
/* $NetBSD: lrintf.c,v 1.3 2004/10/13 15:18:32 drochner Exp $ */
d57 4
a75 1
		volatile float t = x; /* work around gcc problem */
d77 2
a78 3
		t += TWO23[s];
		t -= TWO23[s];
		x = t;
@


1.1.3.1
log
@Laugh at OpenBSD's libm and import NetBSD's
@
text
@d1 2
a2 1
/* $NetBSD: lrintf.c,v 1.4 2006/08/01 20:14:35 drochner Exp $ */
d30 2
d33 2
a34 2
#include <sys/ieee754.h>
#include <machine/limits.h>
a57 4
#ifdef __i386__ /* XXX gcc4 will omit the rounding otherwise */
	volatile
#endif
		float w;
d73 1
d75 3
a77 2
		w = TWO23[s] + x;
		x = w - TWO23[s];
@


1.1.3.2
log
@Import current libm from NetBSD, with the directories complex, noieee_src, arch/!i387 removed.

The idea is to get fmin and fmax, which are needed by some newer software.
@
text
@d1 1
a1 1
/* $NetBSD: lrintf.c,v 1.5 2008/04/26 23:49:50 christos Exp $ */
d62 1
a62 1
	s = (uint32_t)e >> SNG_EXPBITS;
@


1.1.1.1
log
@Import OpenBSD 4.0's libm
@
text
@@
