head	1.4;
access;
symbols
	cvs-201110182115:1.1.3.2
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	cvs-200611031400:1.1.3.1
	netbsd:1.1.3
	OPENBSD_4_0:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.09.04.18.33.05;	author tg;	state dead;
branches;
next	1.3;
commitid	1005046494E7BA7205F;

1.3
date	2011.10.18.19.46.29;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	1004E9DD78368B8F2A9;

1.2
date	2006.11.03.18.11.00;	author tg;	state Exp;
branches;
next	1.1;
commitid	100454B862956081199;

1.1
date	2005.02.05.17.25.19;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2005.02.05.17.25.19;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2006.11.03.14.20.59;	author tg;	state Exp;
branches;
next	1.1.3.2;
commitid	100454B505850533E95;

1.1.3.2
date	2011.10.18.19.20.58;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004E9DD18376042FF5;


desc
@@


1.4
log
@nuke three functions libc already provides

(the implementations differ vastly, but, lesson learned from when
ssh UMAC64 was broken on sparc due to buggy libgcc, having only one
implementation is the better thing)
@
text
@/* @@(#)s_modf.c 5.1 93/09/24 */
/*
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunPro, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 */

#include <sys/cdefs.h>
#if defined(LIBM_SCCS) && !defined(lint)
__RCSID("$MirOS: src/lib/libm/src/s_modf.c,v 1.3 2011/10/18 19:46:29 bsiegert Exp $");
__RCSID("$NetBSD: s_modf.c,v 1.14 2010/01/27 14:07:41 drochner Exp $");
#endif

/*
 * modf(double x, double *iptr)
 * return fraction part of x, and return x's integral part in *iptr.
 * Method:
 *	Bit twiddling.
 *
 * Exception:
 *	No exception.
 */

#include "math.h"
#include "math_private.h"

static const double one = 1.0;

double
modf(double x, double *iptr)
{
	int32_t i0,i1,jj0;
	u_int32_t i;
	EXTRACT_WORDS(i0,i1,x);
	jj0 = (((uint32_t)i0>>20)&0x7ff)-0x3ff;	/* exponent of x */
	if(jj0<20) {			/* integer part in high x */
	    if(jj0<0) {			/* |x|<1 */
	        INSERT_WORDS(*iptr,i0&0x80000000,0);	/* *iptr = +-0 */
		return x;
	    } else {
		i = (0x000fffff)>>jj0;
		if(((i0&i)|i1)==0) {		/* x is integral */
		    u_int32_t high;
		    *iptr = x;
		    GET_HIGH_WORD(high,x);
		    INSERT_WORDS(x,high&0x80000000,0);	/* return +-0 */
		    return x;
		} else {
		    INSERT_WORDS(*iptr,i0&(~i),0);
		    return x - *iptr;
		}
	    }
	} else if (jj0>51) {		/* no fraction part */
	    u_int32_t high;
	    *iptr = x*one;
	    if (jj0 == 0x400)		/* +-inf or NaN */
		return 0.0 / x;		/* +-0 or NaN */
	    GET_HIGH_WORD(high,x);
	    INSERT_WORDS(x,high&0x80000000,0);	/* return +-0 */
	    return x;
	} else {			/* fraction part in low x */
	    i = ((u_int32_t)(0xffffffff))>>(jj0-20);
	    if((i1&i)==0) { 		/* x is integral */
	        u_int32_t high;
		*iptr = x;
		GET_HIGH_WORD(high,x);
		INSERT_WORDS(x,high&0x80000000,0);	/* return +-0 */
		return x;
	    } else {
	        INSERT_WORDS(*iptr,i0,i1&(~i));
		return x - *iptr;
	    }
	}
}
@


1.3
log
@Merge NetBSD libm. Makefile needs more work, I think.
@
text
@d15 1
a15 1
__RCSID("$MirOS: src/lib/libm/src/s_modf.c,v 1.2 2006/11/03 18:11:00 tg Exp $");
@


1.2
log
@Switch to NetBSD libm
@
text
@d15 2
a16 2
__RCSID("$MirOS$");
__RCSID("$NetBSD: s_modf.c,v 1.11 2002/05/26 22:01:57 wiz Exp $");
d40 1
a40 1
	jj0 = ((i0>>20)&0x7ff)-0x3ff;	/* exponent of x */
d61 2
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
 * software is freely granted, provided that this notice 
d13 1
d15 2
a16 1
static char rcsid[] = "$NetBSD: s_modf.c,v 1.8 1995/05/10 20:47:55 jtc Exp $";
d20 1
a20 1
 * modf(double x, double *iptr) 
d37 1
a37 1
	int32_t i0,i1,j0;
d40 3
a42 3
	j0 = ((i0>>20)&0x7ff)-0x3ff;	/* exponent of x */
	if(j0<20) {			/* integer part in high x */
	    if(j0<0) {			/* |x|<1 */
d46 1
a46 1
		i = (0x000fffff)>>j0;
d58 1
a58 1
	} else if (j0>51) {		/* no fraction part */
d65 1
a65 1
	    i = ((u_int32_t)(0xffffffff))>>(j0-20);
@


1.1.3.1
log
@Laugh at OpenBSD's libm and import NetBSD's
@
text
@d8 1
a8 1
 * software is freely granted, provided that this notice
a12 1
#include <sys/cdefs.h>
d14 1
a14 1
__RCSID("$NetBSD: s_modf.c,v 1.11 2002/05/26 22:01:57 wiz Exp $");
d18 1
a18 1
 * modf(double x, double *iptr)
@


1.1.3.2
log
@Import current libm from NetBSD, with the directories complex, noieee_src, arch/!i387 removed.

The idea is to get fmin and fmax, which are needed by some newer software.
@
text
@d15 1
a15 1
__RCSID("$NetBSD: s_modf.c,v 1.14 2010/01/27 14:07:41 drochner Exp $");
d36 1
a36 1
	int32_t i0,i1,jj0;
d39 3
a41 3
	jj0 = (((uint32_t)i0>>20)&0x7ff)-0x3ff;	/* exponent of x */
	if(jj0<20) {			/* integer part in high x */
	    if(jj0<0) {			/* |x|<1 */
d45 1
a45 1
		i = (0x000fffff)>>jj0;
d57 1
a57 1
	} else if (jj0>51) {		/* no fraction part */
a59 2
	    if (jj0 == 0x400)		/* +-inf or NaN */
		return 0.0 / x;		/* +-0 or NaN */
d64 1
a64 1
	    i = ((u_int32_t)(0xffffffff))>>(jj0-20);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
