head	1.3;
access;
symbols
	cvs-201110182115:1.1.3.1 netbsd:1.1.3;
locks; strict;
comment	@ * @;


1.3
date	2012.09.04.18.16.18;	author tg;	state dead;
branches;
next	1.2;
commitid	100504644903517C0CE;

1.2
date	2011.10.18.20.07.45;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004E9DDC99373EA446;

1.1
date	2011.10.18.19.21.01;	author bsiegert;	state Exp;
branches
	1.1.3.1;
next	;
commitid	1004E9DD18376042FF5;

1.1.3.1
date	2011.10.18.19.21.01;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004E9DD18376042FF5;


desc
@@


1.3
log
@tentative major bump to libm.so.7.0 which probably should have been
done instead of a minor bump to 6.2 back then… but what few did we
know… anyway, basically remove the “long double” remnants, since if
you were using it on MirBSD, you were Doing It Wrong already anyway
as sparc only has 32/64 bit float, and while i387 has 32/64/80 bit,
our FPUCW limits precision to 64 bit (and the ABIs are at issue for
whether “long double” should be stored with 80 or 96 bit and *THEN*
SSE wants 128-bit alignment for them, so…)

This removes “long double” functions nobody should have been using,
on i386, which doesn’t really warrant a major bump, and __infinity,
which our new libm provides as GCC builtin (and __infinityf was not
included anyway).

BUT! Do not use this yet. This needs verification on sparc, where a
Perl build failed due to having *more* (but actually even uselesser
– heh) long double stubs…
@
text
@/*	$NetBSD: s_scalbnl.c,v 1.1 2011/07/26 16:10:16 joerg Exp $	*/

/*-
 * Copyright (c) 2011 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Joerg Sonnenberger.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/cdefs.h>
__RCSID("$NetBSD: s_scalbnl.c,v 1.1 2011/07/26 16:10:16 joerg Exp $");

#include "namespace.h"

#include <float.h>
#include <math.h>
#include <machine/ieee.h>

#ifdef __HAVE_LONG_DOUBLE

#ifdef __weak_alias
__weak_alias(scalbnl, _scalbnl);
#endif

#if LDBL_MANT_DIG == 64
#define	FROM_UNDERFLOW	0x1p65L
#define	TO_UNDERFLOW	0x1p-65L
#elif LDBL_MANT_DIG == 113
#define	FROM_UNDERFLOW	0x1p114L
#define	TO_UNDERFLOW	0x1p-114L
#else
#error Unsupported long double format
#endif

long double
scalbnl(long double x, int n)
{
	union ieee_ext_u u;

	/* Trivial cases first */
	if (n == 0 || x == 0.0L)
		return x;

	u.extu_ld = x;

	/* NaN and infinite don't change either, but trigger exception */
	if (u.extu_ext.ext_exp == EXT_EXP_INFNAN)
		return x + x;

	/* Protect against integer overflow in calculation of new exponent */
	if (n > LDBL_MAX_EXP - LDBL_MIN_EXP + LDBL_MANT_DIG)
		goto overflow;
	if (n < LDBL_MAX_EXP - LDBL_MIN_EXP + LDBL_MANT_DIG)
		goto underflow;

	/* Scale denormalized numbers slightly, so that they are normal */
	if (u.extu_ext.ext_exp == 0) {
		u.extu_ld *= FROM_UNDERFLOW;
		n -= LDBL_MANT_DIG + 1;
	}

	n += u.extu_ext.ext_exp;
	if (n >= LDBL_MAX_EXP + EXT_EXP_BIAS)
		goto overflow;
	/* Positive exponent (incl. bias) means normal result */
	if (n > 0) {
		u.extu_ext.ext_exp = n;
		return u.extu_ld;
	}
	/* Shift the exponent and let the multiply below handle subnormal */
	n += LDBL_MANT_DIG + 1;
	if (n <= 0)
		goto underflow;
	u.extu_ext.ext_exp = n;
	return u.extu_ld * TO_UNDERFLOW;

underflow:
	return LDBL_MIN * copysignl(LDBL_MIN, x);

overflow:
	return LDBL_MAX * copysignl(LDBL_MAX, x);
}

#endif
@


1.2
log
@__{weak,strong}_alias need a terminating ; like all other such macros in .Mx
@
text
@@


1.1
log
@Initial revision
@
text
@d44 1
a44 1
__weak_alias(scalbnl, _scalbnl)
@


1.1.3.1
log
@Import current libm from NetBSD, with the directories complex, noieee_src, arch/!i387 removed.

The idea is to get fmin and fmax, which are needed by some newer software.
@
text
@@
