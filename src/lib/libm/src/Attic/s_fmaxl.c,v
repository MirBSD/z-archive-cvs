head	1.2;
access;
symbols
	cvs-201110182115:1.1.3.1 netbsd:1.1.3;
locks; strict;
comment	@ * @;


1.2
date	2012.09.04.18.16.16;	author tg;	state dead;
branches;
next	1.1;
commitid	100504644903517C0CE;

1.1
date	2011.10.18.19.20.53;	author bsiegert;	state Exp;
branches
	1.1.3.1;
next	;
commitid	1004E9DD18376042FF5;

1.1.3.1
date	2011.10.18.19.20.53;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004E9DD18376042FF5;


desc
@@


1.2
log
@tentative major bump to libm.so.7.0 which probably should have been
done instead of a minor bump to 6.2 back then… but what few did we
know… anyway, basically remove the “long double” remnants, since if
you were using it on MirBSD, you were Doing It Wrong already anyway
as sparc only has 32/64 bit float, and while i387 has 32/64/80 bit,
our FPUCW limits precision to 64 bit (and the ABIs are at issue for
whether “long double” should be stored with 80 or 96 bit and *THEN*
SSE wants 128-bit alignment for them, so…)

This removes “long double” functions nobody should have been using,
on i386, which doesn’t really warrant a major bump, and __infinity,
which our new libm provides as GCC builtin (and __infinityf was not
included anyway).

BUT! Do not use this yet. This needs verification on sparc, where a
Perl build failed due to having *more* (but actually even uselesser
– heh) long double stubs…
@
text
@/*-
 * Copyright (c) 2004 David Schultz <das@@FreeBSD.ORG>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/cdefs.h>
__RCSID("$NetBSD: s_fmaxl.c,v 1.3 2011/07/04 11:46:41 mrg Exp $");
#ifdef notdef
__FBSDID("$FreeBSD: src/lib/msun/src/s_fmaxl.c,v 1.1 2004/06/30 07:04:01 das Exp $");
#endif

#include <string.h>
#include <math.h>

#include <machine/ieee.h>
#ifdef EXT_EXP_INFNAN
long double
fmaxl(long double x, long double y)
{
	union ieee_ext_u u[2];

	memset(&u, 0, sizeof u);
	u[0].extu_ld = x;
	u[0].extu_ext.ext_frach &= ~0x80000000;
	u[1].extu_ld = y;
	u[1].extu_ext.ext_frach &= ~0x80000000;

	/* Check for NaNs to avoid raising spurious exceptions. */
	if (u[0].extu_ext.ext_exp == EXT_EXP_INFNAN &&
	    (u[0].extu_ext.ext_frach | u[0].extu_ext.ext_fracl) != 0)
		return (y);
	if (u[1].extu_ext.ext_exp == EXT_EXP_INFNAN &&
	    (u[1].extu_ext.ext_frach | u[1].extu_ext.ext_fracl) != 0)
		return (x);

	/* Handle comparisons of ext_signed zeroes. */
	if (u[0].extu_ext.ext_sign != u[1].extu_ext.ext_sign)
		return (u[0].extu_ext.ext_sign ? y : x);

	return (x > y ? x : y);
}
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.3.1
log
@Import current libm from NetBSD, with the directories complex, noieee_src, arch/!i387 removed.

The idea is to get fmin and fmax, which are needed by some newer software.
@
text
@@
