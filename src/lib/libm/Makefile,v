head	1.16;
access;
symbols
	cvs-201110182115:1.1.3.2
	MIRBSD_10:1.7.0.2
	MIRBSD_10_BASE:1.7
	cvs-200611031400:1.1.3.1
	netbsd:1.1.3
	OPENBSD_4_0:1.1.1.2
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.16
date	2014.02.09.23.23.34;	author tg;	state Exp;
branches;
next	1.15;
commitid	10052F80DE85DB1E595;

1.15
date	2012.09.04.18.33.03;	author tg;	state Exp;
branches;
next	1.14;
commitid	1005046494E7BA7205F;

1.14
date	2012.09.04.18.16.12;	author tg;	state Exp;
branches;
next	1.13;
commitid	100504644903517C0CE;

1.13
date	2012.09.04.17.55.24;	author tg;	state Exp;
branches;
next	1.12;
commitid	100504640A23147FE2A;

1.12
date	2011.11.21.09.39.24;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004ECA1C63575D6AB4;

1.11
date	2011.10.22.20.17.49;	author bsiegert;	state Exp;
branches;
next	1.10;
commitid	1004EA324EB6B9D65A9;

1.10
date	2011.10.18.21.21.46;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004E9DEDEC47F5B9F6;

1.9
date	2011.10.18.19.46.14;	author bsiegert;	state Exp;
branches;
next	1.8;
commitid	1004E9DD78368B8F2A9;

1.8
date	2008.11.10.21.09.11;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004918A3056B05023F;

1.7
date	2007.06.21.14.40.21;	author tg;	state Exp;
branches;
next	1.6;
commitid	100467A8D2C4D7EEFFE;

1.6
date	2006.11.03.18.10.45;	author tg;	state Exp;
branches;
next	1.5;
commitid	100454B862956081199;

1.5
date	2006.11.03.01.41.38;	author tg;	state Exp;
branches;
next	1.4;
commitid	100454A9E664DB00C95;

1.4
date	2005.11.21.21.17.28;	author tg;	state Exp;
branches;
next	1.3;
commitid	79f9438239682dcf;

1.3
date	2005.10.21.11.02.48;	author tg;	state Exp;
branches;
next	1.2;
commitid	6c0b4358cac0ef88;

1.2
date	2005.03.06.20.29.10;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.25.17;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2005.02.05.17.25.17;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.11.03.01.33.22;	author tg;	state Exp;
branches;
next	;
commitid	100454A9C75705F73D8;

1.1.3.1
date	2006.11.03.14.20.58;	author tg;	state Exp;
branches;
next	1.1.3.2;
commitid	100454B505850533E95;

1.1.3.2
date	2011.10.18.19.20.17;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004E9DD18376042FF5;


desc
@@


1.16
log
@mop up after “long double” removal

no library major bump, as code using these cannot have worked right anyway
since we don’t even have a defined API for “long double”
@
text
@#  $MirOS: src/lib/libm/Makefile,v 1.15 2012/09/04 18:33:03 tg Exp $
#  $NetBSD: Makefile,v 1.120 2011/09/17 10:51:52 jruoho Exp $
#
#  @@(#)Makefile 5.1beta 93/09/24
#
#  ====================================================
#  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
#
#  Developed at SunPro, a Sun Microsystems, Inc. business.
#  Permission to use, copy, modify, and distribute this
#  software is freely granted, provided that this notice
#  is preserved.
#  ====================================================
#
#

#
# There are two options in making libm at fdlibm compile time:
# 	_IEEE_LIBM 	--- IEEE libm; smaller, and somewhat faster
#	_MULTI_LIBM	--- Support multi-standard at runtime by
#			    imposing wrapper functions defined in
#			    fdlibm.h:
#				_IEEE_MODE 	-- IEEE
#				_XOPEN_MODE 	-- X/OPEN
#				_POSIX_MODE 	-- POSIX/ANSI
#				_SVID3_MODE 	-- SVID
#
# Here is how to set up CPPFLAGS to create the desired libm at
# compile time:
#
# 	CPPFLAGS = -D_IEEE_LIBM		... IEEE libm (recommended)
#	CPPFLAGS = -D_SVID3_MODE	... Multi-standard supported
#					    libm with SVID as the
#					    default standard
#	CPPFLAGS = -D_XOPEN_MODE	... Multi-standard supported
#					    libm with XOPEN as the
#					    default standard
#	CPPFLAGS = -D_POSIX_MODE	... Multi-standard supported
#					    libm with POSIX as the
#					    default standard
#	CPPFLAGS = 			... Multi-standard supported
#					    libm with IEEE as the
#					    default standard
#

.include <bsd.own.mk>

.if ${MACHINE_ARCH} == "i386"
.PATH:	${.CURDIR}/arch/i387

#COMMON_SRCS+= fenv.c
ARCH_SRCS = e_acos.S e_asin.S e_atan2.S e_exp.S e_expf.S e_fmod.S e_log.S \
	    e_logf.S e_log10.S e_log10f.S e_log2.S e_log2f.S e_remainder.S \
	    e_remainderf.S e_scalb.S e_scalbf.S e_sqrt.S e_sqrtf.S s_atan.S \
	    s_atanf.S s_ceil.S s_ceilf.S s_copysign.S s_copysignf.S s_cos.S \
	    s_cosf.S s_finite.S s_finitef.S s_floor.S s_floorf.S \
	    s_ilogb.S s_ilogbf.S s_log1p.S s_log1pf.S \
	    s_logb.S s_logbf.S \
	    s_rint.S s_rintf.S s_scalbn.S s_scalbnf.S s_significand.S \
	    s_significandf.S s_sin.S s_sinf.S s_tan.S s_tanf.S lrint.S

#SUBDIR=arch/i387
.endif

.PATH:	${.CURDIR}/man
.PATH:	${.CURDIR}/src

CPPFLAGS+=	-D_MULTI_LIBM -D_POSIX_MODE
CPPFLAGS+=	-DLIBM_SCCS
CPPFLAGS+=	-D_USE_WRITE
CPPFLAGS+=	-D_NETBSD_SOURCE	# XXX

SHLIB_VERSION?=	7.0
LIB=		m
COMMON_SRCS+= e_acos.c e_acosf.c e_acosh.c e_acoshf.c e_asin.c e_asinf.c \
	e_atan2.c e_atan2f.c e_atanh.c e_atanhf.c e_cosh.c e_coshf.c e_exp.c \
	e_expf.c e_fmod.c e_fmodf.c e_hypot.c e_hypotf.c e_j0.c e_j0f.c \
	e_j1.c e_j1f.c e_jn.c e_jnf.c e_lgamma_r.c e_lgammaf_r.c e_log.c \
	e_log2.c e_log10.c e_log10f.c e_log2f.c e_logf.c e_pow.c e_powf.c \
	e_rem_pio2.c e_rem_pio2f.c e_remainder.c e_remainderf.c e_scalb.c \
	e_scalbf.c e_sinh.c e_sinhf.c e_sqrt.c e_sqrtf.c \
	k_cos.c k_cosf.c k_rem_pio2.c k_rem_pio2f.c k_sin.c k_sinf.c \
	k_standard.c k_tan.c k_tanf.c \
	s_asinh.c s_asinhf.c s_atan.c s_atanf.c s_cbrt.c s_cbrtf.c s_ceil.c \
	s_ceilf.c s_copysign.c s_copysignf.c s_cos.c s_cosf.c s_erf.c \
	s_erff.c s_exp2.c s_exp2f.c s_expm1.c s_expm1f.c s_fabsf.c \
	s_finite.c s_finitef.c \
	s_floor.c s_floorf.c s_frexpf.c s_ilogb.c s_ilogbf.c \
	s_isinff.c s_isnanf.c s_ldexpf.c s_lib_version.c s_log1p.c \
	s_log1pf.c s_logb.c s_logbf.c \
	s_matherr.c s_modff.c s_nextafter.c s_nextafterf.c \
	s_remquo.c s_remquof.c s_rint.c s_rintf.c s_round.c s_roundf.c s_scalbn.c \
	s_scalbnf.c s_signgam.c s_significand.c s_significandf.c s_sin.c \
	s_sinf.c s_tan.c s_tanf.c s_tanh.c s_tanhf.c s_trunc.c s_truncf.c \
	w_acos.c w_acosf.c w_acosh.c w_acoshf.c w_asin.c w_asinf.c w_atan2.c \
	w_atan2f.c w_atanh.c w_atanhf.c w_cosh.c w_coshf.c \
	w_drem.c w_dremf.c w_exp.c w_expf.c w_fmod.c w_fmodf.c w_gamma.c \
	w_gamma_r.c w_gammaf.c w_gammaf_r.c w_hypot.c w_hypotf.c w_j0.c \
	w_j0f.c w_j1.c w_j1f.c w_jn.c w_jnf.c w_lgamma.c w_lgamma_r.c \
	w_lgammaf.c w_lgammaf_r.c w_log.c w_log10.c w_log10f.c w_log2.c \
	w_log2f.c w_logf.c \
	w_pow.c w_powf.c w_remainder.c w_remainderf.c w_scalb.c w_scalbf.c \
	w_sinh.c w_sinhf.c w_sqrt.c w_sqrtf.c \
	lrint.c lrintf.c llrint.c llrintf.c lround.c lroundf.c llround.c \
	llroundf.c \
	s_fmax.c s_fmaxf.c s_fmin.c s_fminf.c s_fdim.c

.PATH:	${.CURDIR}/compat
COMMON_SRCS+= compat_cabs.c compat_cabsf.c
# XXX our compatibility cabs() is different!
CFLAGS_compat_cabs.o+=	-fno-builtin-cabs -D__MATH_PRIVATE__
CFLAGS_compat_cabsf.o+=	-fno-builtin-cabsf -D__MATH_PRIVATE__

# NetBSD's C library supplies these functions:
#COMMON_SRCS+=	s_fabs.c s_frexp.c s_isinf.c s_isnan.c s_ldexp.c s_modf.c

SRCS=	${COMMON_SRCS}

# Substitute common sources with any arch specific sources
.for i in ${ARCH_SRCS}
    SRCS:=${SRCS:S/^${i:S/.S/.c/}/$i/}
.endfor

.if (${MACHINE_ARCH} == "i386")
# XXX this gets miscompiled. There should be a better fix.
COPTS.s_tanh.c+= -O0
.endif

MAN+=	acos.3 acosh.3 asin.3 asinh.3 atan.3 atan2.3 atanh.3 \
	ceil.3 copysign.3 cos.3 cosh.3 \
	erf.3 exp.3 \
	fabs.3 finite.3 fmod.3 hypot.3 \
	ieee_test.3 ilogb.3 isinff.3 j0.3 lgamma.3 log.3 lrint.3 \
	math.3 nextafter.3 pow.3 \
	remainder.3 rint.3 round.3 \
	scalbn.3 sin.3 sinh.3 sqrt.3 \
	tan.3 tanh.3 trunc.3 fmax.3 fdim.3
MAN+=	lround.3

# MirOS' C library supplies these functions:
#MAN+=	frexp.3 ldexp.3 modf.3

# fenv.h interface
#MAN+=	feclearexcept.3 feenableexcept.3 fegetenv.3 fegetround.3 fenv.3
#MLINKS+=feclearexcept.3 fegetexceptflag.3	\
#	feclearexcept.3 feraiseexcept.3		\
#	feclearexcept.3 fesetexceptflag.3	\
#	feclearexcept.3 fetestexcept.3
#MLINKS+=feenableexcept.3 fedisableexcept.3	\
#	feenableexcept.3 fegetexcept.3
#MLINKS+=fegetenv.3 feholdexcept.3		\
#	fegetenv.3 fesetenv.3			\
#	fegetenv.3 feupdateenv.3
#MLINKS+=fegetround.3 fesetround.3

MLINKS+=acos.3 acosf.3
MLINKS+=acosh.3 acoshf.3
MLINKS+=asin.3 asinf.3
MLINKS+=asinh.3 asinhf.3
MLINKS+=atan.3 atanf.3
MLINKS+=atan2.3 atan2f.3
MLINKS+=atanh.3 atanhf.3
MLINKS+=ceil.3 ceilf.3 \
	ceil.3 floor.3 \
	ceil.3 floorf.3
MLINKS+=copysign.3 copysignf.3
MLINKS+=cos.3 cosf.3
MLINKS+=cosh.3 coshf.3
MLINKS+=erf.3 erff.3 erf.3 erfc.3 erf.3 erfcf.3
MLINKS+=exp.3 expf.3 exp.3 expm1.3 exp.3 expm1f.3 			\
	exp.3 exp2.3 exp.3 exp2f.3
MLINKS+=log.3 logf.3 \
	log.3 log10.3 \
	log.3 log10f.3 \
	log.3 log1p.3 \
	log.3 log1pf.3 \
	log.3 log2.3 \
	log.3 log2f.3
MLINKS+=pow.3 powf.3
MLINKS+=fabs.3 fabsf.3
MLINKS+=finite.3 finitef.3
MLINKS+=fmod.3 fmodf.3
MLINKS+=hypot.3 hypotf.3
MLINKS+=ieee_test.3 logb.3 ieee_test.3 logbf.3
MLINKS+=ieee_test.3 scalb.3 ieee_test.3 scalbf.3
MLINKS+=ieee_test.3 significand.3 ieee_test.3 significandf.3
MLINKS+=ilogb.3 ilogbf.3
MLINKS+=isinff.3 isnanf.3
MLINKS+=j0.3 j0f.3 j0.3 j1.3 j0.3 j1f.3 j0.3 jn.3 j0.3 jnf.3 \
	j0.3 y0.3 j0.3 y0f.3 j0.3 y1.3 j0.3 y1f.3 j0.3 yn.3 j0.3 ynf.3
MLINKS+=lgamma.3 lgammaf.3 lgamma.3 lgamma_r.3 lgamma.3 lgammaf_r.3 \
	lgamma.3 gamma.3 lgamma.3 gammaf.3 lgamma.3 gamma_r.3 \
	lgamma.3 gammaf_r.3
MLINKS+=nextafter.3 nextafterf.3
MLINKS+=lrint.3 lrintf.3 lrint.3 llrint.3 lrint.3 llrintf.3
MLINKS+=remainder.3 remainderf.3 \
	remainder.3 remquo.3 \
	remainder.3 remquof.3
MLINKS+=rint.3 rintf.3
MLINKS+=scalbn.3 scalbnf.3
MLINKS+=sin.3 sinf.3
MLINKS+=sinf.3 sinhf.3
MLINKS+=sqrt.3 sqrtf.3 sqrt.3 cbrt.3 sqrt.3 cbrtf.3
MLINKS+=tan.3 tanf.3
MLINKS+=tanh.3 tanhf.3
MLINKS+=round.3 roundf.3
MLINKS+=trunc.3 truncf.3
MLINKS+=lround.3 lroundf.3
MLINKS+=lround.3 llround.3
MLINKS+=lround.3 llroundf.3
MLINKS+=fmax.3 fmaxf.3
MLINKS+=fmax.3 fmin.3
MLINKS+=fmax.3 fminf.3
MLINKS+=fdim.3 fdimf.3

.include "${.CURDIR}/gen/Makefile.inc"
.include <bsd.lib.mk>
@


1.15
log
@nuke three functions libc already provides

(the implementations differ vastly, but, lesson learned from when
ssh UMAC64 was broken on sparc due to buggy libgcc, having only one
implementation is the better thing)
@
text
@d1 1
a1 1
#  $MirOS: src/lib/libm/Makefile,v 1.14 2012/09/04 18:16:12 tg Exp $
d91 1
a91 1
	s_matherr.c s_modff.c s_nextafter.c s_nextafterf.c s_nexttoward.c \
a116 3
# long double support missing
#COMMON_SRCS+=	s_scalbnl.c 

d194 1
a194 2
MLINKS+=nextafter.3 nextafterf.3 \
	nextafter.3 nexttoward.3
@


1.14
log
@tentative major bump to libm.so.7.0 which probably should have been
done instead of a minor bump to 6.2 back then… but what few did we
know… anyway, basically remove the “long double” remnants, since if
you were using it on MirBSD, you were Doing It Wrong already anyway
as sparc only has 32/64 bit float, and while i387 has 32/64/80 bit,
our FPUCW limits precision to 64 bit (and the ABIs are at issue for
whether “long double” should be stored with 80 or 96 bit and *THEN*
SSE wants 128-bit alignment for them, so…)

This removes “long double” functions nobody should have been using,
on i386, which doesn’t really warrant a major bump, and __infinity,
which our new libm provides as GCC builtin (and __infinityf was not
included anyway).

BUT! Do not use this yet. This needs verification on sparc, where a
Perl build failed due to having *more* (but actually even uselesser
– heh) long double stubs…
@
text
@d1 1
a1 1
#  $MirOS: src/lib/libm/Makefile,v 1.12 2011/11/21 09:39:24 tg Exp $
d105 1
a105 1
	llroundf.c s_frexp.c s_ldexp.c s_modf.c \
@


1.13
log
@let this pass __CRAZY=Yes building
@
text
@d51 1
a51 1
#COMMON_SRCS+= fenv.c s_nextafterl.c s_nexttoward.c
d57 2
a58 2
	    s_ilogb.S s_ilogbf.S s_ilogbl.S s_log1p.S s_log1pf.S \
	    s_logb.S s_logbf.S s_logbl.S \
d73 1
a73 1
SHLIB_VERSION?=	6.2
d85 2
a86 2
	s_ceilf.c s_copysign.c s_copysignf.c s_copysignl.c s_cos.c s_cosf.c s_erf.c \
	s_erff.c s_exp2.c s_exp2f.c s_expm1.c s_expm1f.c s_fabsf.c s_fabsl.c \
d88 1
a88 1
	s_floor.c s_floorf.c s_frexpf.c s_ilogb.c s_ilogbf.c s_ilogbl.c \
d90 3
a92 3
	s_log1pf.c s_logb.c s_logbf.c s_logbl.c \
	s_matherr.c s_modff.c s_nextafter.c \
	s_nextafterf.c s_remquo.c s_remquof.c s_rint.c s_rintf.c s_round.c s_roundf.c s_scalbn.c \
a103 1
	s_copysignl.c \
d106 1
a106 1
	s_fmax.c s_fmaxf.c s_fmaxl.c s_fmin.c s_fminf.c s_fminl.c s_fdim.c
d169 1
a169 2
MLINKS+=copysign.3 copysignf.3 \
	copysign.3 copysignl.3
d187 1
a187 1
MLINKS+=ieee_test.3 logb.3 ieee_test.3 logbf.3 ieee_test.3 logbl.3
d190 1
a190 1
MLINKS+=ilogb.3 ilogbf.3 ilogb.3 ilogbl.3
a197 1
	nextafter.3 nextafterl.3 \
d204 1
a204 2
MLINKS+=scalbn.3 scalbnf.3 \
	scalbn.3 scalbnl.3
a214 1
MLINKS+=fmax.3 fmaxl.3
a216 1
MLINKS+=fmax.3 fminl.3
a217 1
MLINKS+=fdim.3 fdiml.3
@


1.12
log
@some more TNF libm fallout
@
text
@d1 1
a1 1
#  $MirOS: src/lib/libm/Makefile,v 1.11 2011/10/22 20:17:49 bsiegert Exp $
d112 2
a113 2
CFLAGS_compat_cabs.o+=	-fno-builtin-cabs
CFLAGS_compat_cabsf.o+=	-fno-builtin-cabsf
@


1.11
log
@Temporarily disable building one file, it says long double is unsupported
@
text
@d1 1
a1 1
#  $MirOS: src/lib/libm/Makefile,v 1.10 2011/10/18 21:21:46 tg Exp $
d142 1
@


1.10
log
@more cleaning up netbsdisms to ensure the DLL version and export table works
@
text
@d1 1
a1 1
#  $MirOS: src/lib/libm/Makefile,v 1.9 2011/10/18 19:46:14 bsiegert Exp $
d93 1
a93 1
	s_scalbnf.c s_scalbnl.c s_signgam.c s_significand.c s_significandf.c s_sin.c \
d118 3
@


1.9
log
@Merge NetBSD libm. Makefile needs more work, I think.
@
text
@d1 1
a1 1
#  $MirOS: src/lib/libm/Makefile,v 1.8 2008/11/10 21:09:11 tg Exp $
a47 4
# XXX our cabs() is different!
CFLAGS_w_cabs.o+=	-fno-builtin-cabs
CFLAGS_w_cabsf.o+=	-fno-builtin-cabsf

d51 1
a51 1
COMMON_SRCS+= fenv.c s_nextafterl.c s_nexttoward.c
a60 2
# do not pick up the i387 asm version, it is incorrect
s_modf.o s_modf.pico s_modf.po s_modf.d: s_modf.c
d62 1
a62 1
SUBDIR=arch/i387
d75 1
a75 1
COMMON_SRCS = e_acos.c e_acosf.c e_acosh.c e_acoshf.c e_asin.c e_asinf.c \
d111 3
a113 1

d144 11
a154 11
MAN+=	feclearexcept.3 feenableexcept.3 fegetenv.3 fegetround.3 fenv.3
MLINKS+=feclearexcept.3 fegetexceptflag.3	\
	feclearexcept.3 feraiseexcept.3		\
	feclearexcept.3 fesetexceptflag.3	\
	feclearexcept.3 fetestexcept.3
MLINKS+=feenableexcept.3 fedisableexcept.3	\
	feenableexcept.3 fegetexcept.3
MLINKS+=fegetenv.3 feholdexcept.3		\
	fegetenv.3 fesetenv.3			\
	fegetenv.3 feupdateenv.3
MLINKS+=fegetround.3 fesetround.3
@


1.8
log
@fake copysignl() to make libgfortran link
@
text
@d1 2
a2 2
#  $MirOS: src/lib/libm/Makefile,v 1.7 2007/06/21 14:40:21 tg Exp $
#  $NetBSD: Makefile,v 1.77 2006/07/03 16:03:56 drochner Exp $
d54 2
d60 4
a63 3
	    s_cosf.S s_finite.S s_finitef.S s_floor.S s_floorf.S s_ilogb.S \
	    s_ilogbf.S s_log1p.S s_log1pf.S s_logb.S s_logbf.S s_rint.S \
	    s_rintf.S s_scalbn.S s_scalbnf.S s_significand.S \
d65 4
d79 1
a79 1
SHLIB_VERSION?=	6.1
d91 4
a94 3
	s_ceilf.c s_copysign.c s_copysignf.c s_cos.c s_cosf.c s_erf.c \
	s_erff.c s_expm1.c s_expm1f.c s_fabsf.c s_finite.c s_finitef.c \
	s_floor.c s_floorf.c s_frexpf.c s_ilogb.c s_ilogbf.c \
d96 4
a99 3
	s_log1pf.c s_logb.c s_logbf.c s_matherr.c s_modff.c s_nextafter.c \
	s_nextafterf.c s_rint.c s_rintf.c s_round.c s_roundf.c s_scalbn.c \
	s_scalbnf.c s_signgam.c s_significand.c s_significandf.c s_sin.c \
d102 1
a102 1
	w_atan2f.c w_atanh.c w_atanhf.c w_cabs.c w_cabsf.c w_cosh.c w_coshf.c \
d112 6
a117 1
	llroundf.c
d129 14
a142 6
MAN+=	acos.3 acosh.3 asin.3 asinh.3 atan.3 atan2.3 atanh.3 ceil.3 \
	cos.3 cosh.3 erf.3 exp.3 fabs.3 floor.3 fmod.3 hypot.3 ieee.3 \
	ieee_test.3 isinff.3 j0.3 lgamma.3 lrint.3 \
	math.3 rint.3 round.3 sin.3 sinh.3 \
	sqrt.3 tan.3 tanh.3 trunc.3
MAN+=	lround.3
d147 13
d167 5
a171 1
MLINKS+=ceil.3 ceilf.3
d175 10
a184 3
MLINKS+=exp.3 expf.3 exp.3 expm1.3 exp.3 expm1f.3 exp.3 log.3 exp.3 logf.3 \
	exp.3 log10.3 exp.3 log10f.3 exp.3 log1p.3 exp.3 log1pf.3 \
	exp.3 pow.3 exp.3 powf.3 exp.3 log2.3 exp.3 log2f.3
d186 1
a186 1
MLINKS+=floor.3 floorf.3
d188 2
a189 5
MLINKS+=hypot.3 hypotf.3 hypot.3 cabs.3 hypot.3 cabsf.3
MLINKS+=ieee.3 copysign.3 ieee.3 copysignf.3 ieee.3 finite.3 ieee.3 finitef.3 \
	ieee.3 ilogb.3 ieee.3 ilogbf.3 ieee.3 nextafter.3 ieee.3 nextafterf.3 \
	ieee.3 remainder.3 ieee.3 remainderf.3 ieee.3 scalbn.3 ieee.3 scalbnf.3
MLINKS+=ieee_test.3 logb.3 ieee_test.3 logbf.3
d192 1
d199 3
d203 3
d207 2
d219 7
@


1.7
log
@• libedit, libm, libocurses, libsectok, libskey, libssl, libusbhid, libutil:
  do something I should've long done and bump their majors – ABI changes are
  not only removals (or changes) of T/D symbols but also additions(!) of U
  symbols (i.e. imports); these changed during the <ctype.h> changes from a
  while ago and depend on newer libc; I did an nm(1) comparision against #9
  (release) to allow upgrading by source
• libc, uname: since I'm bumping a lot of other shlibs, it's a good time to
  bump the libc major as well and finally get rid of that struct utsname bug
  I introduced when I had no idea what I was doing, in MirOS #1 or so…
• libpthread: requires a major bump if libc major is bumped, or so they say
• bump os patchlevel

agreed bsiegert@@
XXX any more changes to do before release?
@
text
@d1 1
a1 1
#  $MirOS: src/lib/libm/Makefile,v 1.6 2006/11/03 18:10:45 tg Exp $
d72 1
a72 1
SHLIB_VERSION?=	6.0
d101 1
@


1.6
log
@Switch to NetBSD libm
@
text
@d1 1
a1 1
#  $MirOS$
d67 4
a70 4
CPPFLAGS+= -D_MULTI_LIBM -D_POSIX_MODE
CPPFLAGS+=-DLIBM_SCCS
CPPFLAGS+= -D_USE_WRITE
CPPFLAGS+= -D_NETBSD_SOURCE	# XXX
d72 2
a73 2
SHLIB_VERSION?=	5.2
LIB=	m
@


1.5
log
@merge libm
@
text
@d1 2
a2 3
#  $MirOS: src/lib/libm/Makefile,v 1.4 2005/11/21 21:17:28 tg Exp $
#  $NetBSD: Makefile,v 1.28 1995/11/20 22:06:19 jtc Exp $
#  $OpenBSD: Makefile,v 1.40 2006/07/12 07:26:08 brad Exp $
d16 1
d28 1
a28 1
# Here is how to set up CFLAGS to create the desired libm at
d31 2
a32 2
# 	CFLAGS = -D_IEEE_LIBM		... IEEE libm (recommended)
#	CFLAGS = -D_SVID3_MODE	... Multi-standard supported
d35 1
a35 1
#	CFLAGS = -D_XOPEN_MODE	... Multi-standard supported
d38 1
a38 1
#	CFLAGS = -D_POSIX_MODE	... Multi-standard supported
d41 1
a41 1
#	CFLAGS = 			... Multi-standard supported
a45 1
# For NOPIC
d48 3
a50 1
CPPFLAGS+= -D__LIBM_PRIVATE -D_USE_WRITE
d52 1
a52 1
.if (${MACHINE_ARCH} == "i386")
d54 8
a61 7
ARCH_SRCS = e_acos.S e_asin.S e_atan2.S e_exp.S e_fmod.S e_log.S e_log10.S \
	    e_remainder.S e_remainderf.S e_scalb.S e_sqrt.S e_sqrtf.S \
	    s_atan.S s_atanf.S s_ceil.S s_ceilf.S s_copysign.S s_copysignf.S \
	    s_cos.S s_cosf.S s_finite.S s_finitef.S s_floor.S s_floorf.S \
	    s_ilogb.S s_ilogbf.S s_log1p.S s_log1pf.S s_logb.S s_logbf.S \
	    s_rint.S s_rintf.S s_scalbn.S s_scalbnf.S s_significand.S \
	    s_significandf.S s_sin.S s_sinf.S s_tan.S s_tanf.S
d67 6
a72 2
CPPFLAGS+=	-D_MULTI_LIBM -D_POSIX_MODE
SHLIB_VERSION?=	5.1
d74 1
a74 1
SRCS+=	e_acos.c e_acosf.c e_acosh.c e_acoshf.c e_asin.c e_asinf.c \
d78 3
a80 3
	e_log10.c e_log10f.c e_logf.c e_pow.c e_powf.c e_rem_pio2.c \
	e_rem_pio2f.c e_remainder.c e_remainderf.c e_scalb.c e_scalbf.c \
	e_sinh.c e_sinhf.c e_sqrt.c e_sqrtf.c \
a82 2
	lrint.c lrintf.c llrint.c llrintf.c lround.c lroundf.c llround.c \
	llroundf.c \
d84 2
a85 2
	s_ceilf.c s_copysign.c s_copysignf.c s_cos.c s_cosf.c s_erf.c s_erff.c \
	s_expm1.c s_expm1f.c s_fabsf.c s_finite.c s_finitef.c \
d88 4
a91 4
	s_log1pf.c s_logb.c s_logbf.c s_matherr.c s_modff.c \
	s_nextafter.c s_nextafterf.c s_rint.c s_rintf.c s_round.c s_roundf.c \
	s_scalbn.c s_scalbnf.c s_signgam.c s_significand.c s_significandf.c \
	s_sin.c s_sinf.c s_tan.c s_tanf.c s_tanh.c s_tanhf.c s_trunc.c s_truncf.c \
d93 1
a93 1
	w_atan2f.c w_atanh.c w_atanhf.c w_cosh.c w_coshf.c \
d97 2
a98 1
	w_lgammaf.c w_lgammaf_r.c w_log.c w_log10.c w_log10f.c w_logf.c \
d100 8
a107 1
	w_sinh.c w_sinhf.c w_sqrt.c w_sqrtf.c
d111 1
a111 2
    SRCS:=${SRCS:S/${i:S/.S/.c/}/$i/}
    LSRCS+=${i:S/.S/.c/}
d116 4
a119 2
	infnan.3 logb.3 j0.3 lgamma.3 lrint.3 lround.3 math.3 rint.3 \
	round.3 sin.3 sinh.3 sqrt.3 tan.3 tanh.3 trunc.3
d121 2
a122 9
MLINKS+=erf.3 erfc.3
MLINKS+=exp.3 expm1.3 exp.3 log.3 exp.3 log10.3 exp.3 log1p.3 exp.3 pow.3
MLINKS+=ieee.3 copysign.3 ieee.3 finite.3 ieee.3 ilogb.3 \
	ieee.3 nextafter.3 ieee.3 remainder.3 ieee.3 scalbn.3
MLINKS+=logb.3 scalb.3
MLINKS+=logb.3 significand.3
MLINKS+=j0.3 j1.3 j0.3 jn.3 j0.3 y0.3 j0.3 y1.3 j0.3 yn.3
MLINKS+=lgamma.3 gamma.3
MLINKS+=sqrt.3 cbrt.3
a123 1
# float versions
d134 4
a137 8
MLINKS+=erf.3 erfcf.3
MLINKS+=erf.3 erff.3
MLINKS+=exp.3 expf.3
MLINKS+=exp.3 expm1f.3
MLINKS+=exp.3 log10f.3
MLINKS+=exp.3 log1pf.3
MLINKS+=exp.3 logf.3
MLINKS+=exp.3 powf.3
d141 14
a154 26
MLINKS+=hypot.3 hypotf.3
MLINKS+=ieee.3 copysignf.3
MLINKS+=ieee.3 finitef.3
MLINKS+=ieee.3 ieeef.3
MLINKS+=ieee.3 ilogbf.3
MLINKS+=ieee.3 nextafterf.3
MLINKS+=ieee.3 remainderf.3
MLINKS+=ieee.3 scalbnf.3
MLINKS+=logb.3 logbf.3
MLINKS+=logb.3 scalbf.3
MLINKS+=logb.3 significandf.3
MLINKS+=j0.3 j0f.3
MLINKS+=j0.3 j1f.3
MLINKS+=j0.3 jnf.3
MLINKS+=j0.3 y0f.3
MLINKS+=j0.3 y1f.3
MLINKS+=j0.3 ynf.3
MLINKS+=lgamma.3 gammaf.3
MLINKS+=lgamma.3 lgammaf.3
MLINKS+=lrint.3 lrintf.3
MLINKS+=lrint.3 llrint.3
MLINKS+=lrint.3 llrintf.3
MLINKS+=lround.3 lroundf.3
MLINKS+=lround.3 llround.3
MLINKS+=lround.3 llroundf.3
MLINKS+=math.3 mathf.3
a155 1
MLINKS+=round.3 roundf.3
d157 2
a158 3
MLINKS+=sinh.3 sinhf.3
MLINKS+=sqrt.3 cbrtf.3
MLINKS+=sqrt.3 sqrtf.3
d161 1
d163 3
d167 1
@


1.4
log
@make libm a little .St -isoC-99 compliant and bump major
@
text
@d1 1
a1 1
#  $MirOS: src/lib/libm/Makefile,v 1.3 2005/10/21 11:02:48 tg Exp $
d3 3
a5 1
#  $OpenBSD: Makefile,v 1.34 2004/04/06 00:21:18 brad Exp $
a6 2
#  @@(#)Makefile 5.1beta 93/09/24 
# 
d9 1
a9 1
# 
d12 1
a12 1
#  software is freely granted, provided that this notice 
d15 2
a16 2
# 
# 
d20 2
a21 2
#	_MULTI_LIBM	--- Support multi-standard at runtime by 
#			    imposing wrapper functions defined in 
d28 1
a28 1
# Here is how to set up CFLAGS to create the desired libm at 
d33 1
a33 1
#					    libm with SVID as the 
d36 1
a36 1
#					    libm with XOPEN as the 
d39 1
a39 1
#					    libm with POSIX as the 
d42 1
a42 1
#					    libm with IEEE as the 
d44 1
a44 1
# 
d66 1
a66 1
SHLIB_VERSION?=	5.0
d77 2
d85 3
a87 3
	s_nextafter.c s_nextafterf.c s_rint.c s_rintf.c s_scalbn.c s_scalbnf.c \
	s_signgam.c s_significand.c s_significandf.c s_sin.c s_sinf.c s_tan.c \
	s_tanf.c s_tanh.c s_tanhf.c \
d97 1
a97 1
# Substitute common sources with any arch specific sources 
d105 2
a106 3
	logb.3 j0.3 lgamma.3 math.3 rint.3 sin.3 sinh.3 sqrt.3 \
	tan.3 tanh.3
MAN+=	infnan.3
d159 6
d167 1
d174 1
@


1.3
log
@* merge bin and lib completely
* convert some ancient RCSID styles etc. to more modern stuff
* fix use of CDIAGFLAGS+=, CFLAGS+= and COPTS+= to the correct
  variant (include bsd.own.mk _then_ COPTS+=) so they're added
  after any user-specified flags
  (this is probably lurking in more places than I can imagine)
* fix some indenting, comments, etc.
* make stuff compile (fix warnings/errors)
* add script to review _all_ shlib_version after an openbsd import
* remove two more obsolete /usr/lib/debug/ references
* bin/ps: comment out some SMP code
@
text
@d1 1
a1 1
#  $MirOS: src/lib/libm/Makefile,v 1.2 2005/03/06 20:29:10 tg Exp $
d66 1
a66 3
COPTS+=		-std=c89

SHLIB_VERSION?=	4.0
d87 1
a87 1
	w_atan2f.c w_atanh.c w_atanhf.c w_cabs.c w_cabsf.c w_cosh.c w_coshf.c \
a108 1
MLINKS+=hypot.3 cabs.3
a138 1
MLINKS+=hypot.3 cabsf.3
@


1.2
log
@merge src/lib
@
text
@d1 1
a1 1
#  $MirOS$
d65 2
a66 1
CPPFLAGS+= -D_MULTI_LIBM -D_POSIX_MODE
d68 1
a68 3
CFLAGS+= -std=c89

SHLIB_VERSION?=	3.0
@


1.1
log
@Initial revision
@
text
@d1 1
d46 1
a46 1
# For NOPROFILE and NOPIC
d49 1
a49 1
CFLAGS+= -D__LIBM_PRIVATE -D_USE_WRITE
d51 1
a51 8
.if (${MACHINE_ARCH} == "sparc")
CFLAGS+= -O0
.endif

.if (${MACHINE_ARCH} == "alpha")
.PATH:	${.CURDIR}/arch/alpha
ARCH_SRCS = s_copysign.S s_copysignf.S
.elif (${MACHINE_ARCH} == "i386")
a59 24
.elif (${MACHINE_ARCH} == "amd64")
.PATH:	${.CURDIR}/arch/amd64
CPPFLAGS+=-I${.CURDIR}/arch/amd64
ARCH_SRCS = e_acos.S e_asin.S e_atan2.S e_exp.S e_fmod.S e_log.S e_log10.S \
	    e_remainder.S e_remainderf.S e_scalb.S e_sqrt.S e_sqrtf.S \
	    s_atan.S s_atanf.S s_ceil.S s_ceilf.S s_copysign.S s_copysignf.S \
	    s_cos.S s_cosf.S s_finite.S s_finitef.S s_floor.S s_floorf.S \
	    s_ilogb.S s_ilogbf.S s_log1p.S s_log1pf.S s_logb.S s_logbf.S \
	    s_rint.S s_rintf.S s_scalbn.S s_scalbnf.S s_significand.S \
	    s_significandf.S s_sin.S s_sinf.S s_tan.S s_tanf.S
.elif (${MACHINE_ARCH} == "m68k")
.PATH:	${.CURDIR}/arch/mc68881
ARCH_SRCS = e_acos.S e_asin.S e_atanh.S e_cosh.S e_exp.S e_log.S e_log10.S \
	    e_remainder.S e_scalb.S e_sinh.S e_sqrt.S s_atan.S s_ceil.S \
	    s_copysign.S s_cos.S s_expm1.S s_finite.S s_floor.S s_log1p.S \
	    s_logb.S s_rint.S s_scalbn.S s_sin.S s_tan.S s_tanh.S
.elif (${MACHINE_ARCH} == "hppa")
.PATH:	${.CURDIR}/arch/hppa
ARCH_SRCS = e_sqrt.c e_sqrtf.c e_remainder.c e_remainderf.c \
	    s_ceil.c s_ceilf.c s_floor.c s_floorf.c s_rint.c s_rintf.c
.elif (${MACHINE_ARCH} == "vax")
.PATH:	${.CURDIR}/arch/vax
NOIEEE_ARCH=n_infnan.S n_argred.S n_sqrt.S
ARCH_SRCS = n_atan2.S n_cabs.S n_cbrt.S n_sincos.S n_tan.S n_support.S 
a63 1
.PATH:	${.CURDIR}/noieee_src
d65 3
a67 3
.if (${MACHINE_ARCH} != "vax")
CFLAGS+= -D_MULTI_LIBM -D_POSIX_MODE
.endif
d69 1
d71 1
a71 1
COMMON_SRCS = e_acos.c e_acosf.c e_acosh.c e_acoshf.c e_asin.c e_asinf.c \
a97 17
# math routines for non-IEEE architectures.
NOIEEE_SRCS = n_asincos.c n_acosh.c n_asinh.c n_atan.c n_atanh.c n_cosh.c \
	n_erf.c n_exp.c n_exp__E.c n_expm1.c n_floor.c n_fmod.c n_gamma.c \
	n_lgamma.c n_j0.c n_j1.c n_jn.c n_log.c n_log10.c n_log1p.c \
	n_log__L.c n_pow.c n_sinh.c n_tanh.c n_atan2.c n_cabs.c n_cbrt.c \
	n_sqrt.c n_sincos.c n_tan.c n_argred.c n_support.c n_infnan.c
        

# NetBSD's C library supplies these functions:
#COMMON_SRCS+=	s_fabs.c s_frexp.c s_isinf.c s_isnan.c s_ldexp.c s_modf.c

.if (${MACHINE_ARCH} == "vax")
SRCS=	${NOIEEE_SRCS} ${NOIEEE_ARCH}
.else
SRCS=	${COMMON_SRCS}
.endif

a103 7
.if (${MACHINE_ARCH} == "vax")
.for i in ${NOIEEE_ARCH}
    SRCS:=${SRCS:S/${i:S/.S/.c/}/$i/}
    LSRCS+=${i:S/.S/.c/}
.endfor
.endif

a171 17
#.if (${MACHINE_ARCH} == "i386")
#LINKS=	${LIBDIR}/libm.a ${LIBDIR}/libm_i387.a
#.if !defined(NOPROFILE)
#LINKS+=	${LIBDIR}/libm_p.a ${LIBDIR}/libm_i387_p.a
#.endif
#.if !defined(NOPIC)
#LINKS+= ${LIBDIR}/libm.so.${SHLIB_MAJOR}.${SHLIB_MINOR} \
#	${LIBDIR}/libm_i387.so.${SHLIB_MAJOR}.${SHLIB_MINOR}
#LINKS+= ${LIBDIR}/libm_pic.a ${LIBDIR}/libm_i387_pic.a
#.endif
#.endif

#e_acos.o: 
#	cpp  -D__LIBM_PRIVATE -D_USE_WRITE -D_MULTI_LIBM -D_POSIX_MODE \
#	/usr/src/lib/libm/arch/mc68881/e_acos.S |  as -o e_acos.o


@


1.1.3.1
log
@Laugh at OpenBSD's libm and import NetBSD's
@
text
@d1 2
a2 3
#  $NetBSD: Makefile,v 1.77 2006/07/03 16:03:56 drochner Exp $
#
#  @@(#)Makefile 5.1beta 93/09/24
d4 2
d8 1
a8 1
#
d11 1
a11 1
#  software is freely granted, provided that this notice
d14 2
a15 3
#
#

d19 2
a20 2
#	_MULTI_LIBM	--- Support multi-standard at runtime by
#			    imposing wrapper functions defined in
d27 1
a27 1
# Here is how to set up CPPFLAGS to create the desired libm at
d30 3
a32 3
# 	CPPFLAGS = -D_IEEE_LIBM		... IEEE libm (recommended)
#	CPPFLAGS = -D_SVID3_MODE	... Multi-standard supported
#					    libm with SVID as the
d34 2
a35 2
#	CPPFLAGS = -D_XOPEN_MODE	... Multi-standard supported
#					    libm with XOPEN as the
d37 2
a38 2
#	CPPFLAGS = -D_POSIX_MODE	... Multi-standard supported
#					    libm with POSIX as the
d40 2
a41 2
#	CPPFLAGS = 			... Multi-standard supported
#					    libm with IEEE as the
d43 1
a43 1
#
d45 2
a46 3
# XXX lint buts on some archs and needs stubs
NOLINT=		# defined
USE_SHLIBDIR=	yes
d48 1
a48 2
# require this for the value of I387_LIBM from mk.conf, if set.
.include <bsd.own.mk>
d50 2
a51 4
# XXX our cabs() is different!
.if ${HAVE_GCC} == 4
COPTS.w_cabs.c=  -fno-builtin-cabs
COPTS.w_cabsf.c= -fno-builtin-cabsf
d55 3
a57 4
.PATH: ${.CURDIR}/arch/alpha
ARCH_SRCS = s_copysign.S s_copysignf.S lrint.S
.elif ((${MACHINE_ARCH} == "i386") || (${MACHINE_ARCH} == "x86_64"))
.if (defined(I387_LIBM) || (${MACHINE_ARCH} == "x86_64"))
d59 17
a75 11
ARCH_SRCS = e_acos.S e_asin.S e_atan2.S e_exp.S e_expf.S e_fmod.S e_log.S \
	    e_logf.S e_log10.S e_log10f.S e_log2.S e_log2f.S e_remainder.S \
	    e_remainderf.S e_scalb.S e_scalbf.S e_sqrt.S e_sqrtf.S s_atan.S \
	    s_atanf.S s_ceil.S s_ceilf.S s_copysign.S s_copysignf.S s_cos.S \
	    s_cosf.S s_finite.S s_finitef.S s_floor.S s_floorf.S s_ilogb.S \
	    s_ilogbf.S s_log1p.S s_log1pf.S s_logb.S s_logbf.S s_rint.S \
	    s_rintf.S s_scalbn.S s_scalbnf.S s_significand.S \
	    s_significandf.S s_sin.S s_sinf.S s_tan.S s_tanf.S lrint.S
.else
SUBDIR=arch/i387
.endif
d77 9
a85 20
.if defined(M68060)
.PATH:	${.CURDIR}/arch/m68060
.include "${.CURDIR}/arch/m68060/Makefile.list"
COPTS+=-m68060
.PATH:	${.CURDIR}/arch/m68k
ARCH_SRCS += s_ceil.S s_copysign.S s_finite.S s_floor.S s_rint.S
.elif defined(M68040)
.PATH: ${.CURDIR}/arch/m68k
COPTS+=-m68040
ARCH_SRCS = s_copysign.S s_finite.S
.else
.if (${MKSOFTFLOAT} != "yes")
.PATH:	${.CURDIR}/arch/mc68881 ${.CURDIR}/arch/m68k
ARCH_SRCS = e_acos.S e_asin.S e_atanh.S e_cosh.S e_exp.S e_fmod.S e_log.S \
	    e_log10.S e_remainder.S e_scalb.S e_sinh.S e_sqrt.S s_atan.S \
	    s_ceil.S s_copysign.S s_cos.S s_expm1.S s_finite.S s_floor.S \
	    s_log1p.S s_logb.S s_rint.S s_scalbn.S s_sin.S s_tan.S s_tanh.S
.endif
.endif
# end of m68k
d87 3
a89 7
#.PATH:	${.CURDIR}/arch/vax

#NOIEEE_ARCH= n_infnan.S n_argred.S n_sqrt.S
#ARCH_SRCS = n_atan2.S n_cabs.S n_cbrt.S n_support.S n_sincos.S n_tan.S
# XXX - ripped out due to lack of the insn polyd in the Mariah chip,
# and emulation code isn't written yet.
WARNS?=2
a91 2
WARNS?=		1

d97 1
a97 3
CPPFLAGS+= -D_MULTI_LIBM -D_POSIX_MODE
# XXX noieee libm is gross
COPTS+=	-fno-strict-aliasing
a98 1
CPPFLAGS+=-DLIBM_SCCS
d105 3
a107 3
	e_log2.c e_log10.c e_log10f.c e_log2f.c e_logf.c e_pow.c e_powf.c \
	e_rem_pio2.c e_rem_pio2f.c e_remainder.c e_remainderf.c e_scalb.c \
	e_scalbf.c e_sinh.c e_sinhf.c e_sqrt.c e_sqrtf.c \
d111 2
a112 2
	s_ceilf.c s_copysign.c s_copysignf.c s_cos.c s_cosf.c s_erf.c \
	s_erff.c s_expm1.c s_expm1f.c s_fabsf.c s_finite.c s_finitef.c \
d115 4
a118 4
	s_log1pf.c s_logb.c s_logbf.c s_matherr.c s_modff.c s_nextafter.c \
	s_nextafterf.c s_rint.c s_rintf.c s_round.c s_roundf.c s_scalbn.c \
	s_scalbnf.c s_signgam.c s_significand.c s_significandf.c s_sin.c \
	s_sinf.c s_tan.c s_tanf.c s_tanh.c s_tanhf.c s_trunc.c s_truncf.c \
d124 1
a124 2
	w_lgammaf.c w_lgammaf_r.c w_log.c w_log10.c w_log10f.c w_log2.c \
	w_log2f.c w_logf.c \
d126 1
a126 3
	w_sinh.c w_sinhf.c w_sqrt.c w_sqrtf.c \
	lrint.c lrintf.c llrint.c llrintf.c lround.c lroundf.c llround.c \
	llroundf.c s_frexp.c s_ldexp.c s_modf.c
d132 3
a134 5
	n_log__L.c n_pow.c n_sinh.c n_tanh.c \
	n_sincos.c n_tan.c \
	n_round.c n_roundf.c
#	n_sqrt.c n_argred.c n_infnan.c n_atan2.c n_cabs.c n_cbrt.c n_support.c

d145 5
a149 3
.ifdef ARCH_ADDS
SRCS+= ${ARCH_ADDS}
.endif
d151 4
a154 3
# Substitute common sources with any arch specific sources
.for i in ${ARCH_SRCS} ${NOIEEE_ARCH}
    SRCS:=${SRCS:S/^${i:S/.S/.c/}/$i/}
a155 5

.if (${MACHINE_ARCH} == "vax") # XXX until POLYD is written.
.PATH:	${.CURDIR}/arch/vax
SRCS:=${SRCS} n_sqrt.S n_argred.S n_infnan.S n_atan2.S n_cabs.S n_cbrt.S \
	n_support.S
d159 15
a173 4
	cos.3 cosh.3 erf.3 exp.3 fabs.3 floor.3 fmod.3 frexp.3 hypot.3 ieee.3 \
	ieee_test.3 isinff.3 j0.3 ldexp.3 lgamma.3 lrint.3 \
	math.3 modf.3 rint.3 round.3 sin.3 sinh.3 \
	sqrt.3 tan.3 tanh.3 trunc.3
d175 1
d186 8
a193 4
MLINKS+=erf.3 erff.3 erf.3 erfc.3 erf.3 erfcf.3
MLINKS+=exp.3 expf.3 exp.3 expm1.3 exp.3 expm1f.3 exp.3 log.3 exp.3 logf.3 \
	exp.3 log10.3 exp.3 log10f.3 exp.3 log1p.3 exp.3 log1pf.3 \
	exp.3 pow.3 exp.3 powf.3 exp.3 log2.3 exp.3 log2f.3
d197 21
a217 14
MLINKS+=hypot.3 hypotf.3 hypot.3 cabs.3 hypot.3 cabsf.3
MLINKS+=ieee.3 copysign.3 ieee.3 copysignf.3 ieee.3 finite.3 ieee.3 finitef.3 \
	ieee.3 ilogb.3 ieee.3 ilogbf.3 ieee.3 nextafter.3 ieee.3 nextafterf.3 \
	ieee.3 remainder.3 ieee.3 remainderf.3 ieee.3 scalbn.3 ieee.3 scalbnf.3
MLINKS+=ieee_test.3 logb.3 ieee_test.3 logbf.3
MLINKS+=ieee_test.3 scalb.3 ieee_test.3 scalbf.3
MLINKS+=ieee_test.3 significand.3 ieee_test.3 significandf.3
MLINKS+=isinff.3 isnanf.3
MLINKS+=j0.3 j0f.3 j0.3 j1.3 j0.3 j1f.3 j0.3 jn.3 j0.3 jnf.3 \
	j0.3 y0.3 j0.3 y0f.3 j0.3 y1.3 j0.3 y1f.3 j0.3 yn.3 j0.3 ynf.3
MLINKS+=lgamma.3 lgammaf.3 lgamma.3 lgamma_r.3 lgamma.3 lgammaf_r.3 \
	lgamma.3 gamma.3 lgamma.3 gammaf.3 lgamma.3 gamma_r.3 \
	lgamma.3 gammaf_r.3
MLINKS+=lrint.3 lrintf.3 lrint.3 llrint.3 lrint.3 llrintf.3
d220 3
a222 2
MLINKS+=sinf.3 sinhf.3
MLINKS+=sqrt.3 sqrtf.3 sqrt.3 cbrt.3 sqrt.3 cbrtf.3
a224 2
MLINKS+=round.3 roundf.3
MLINKS+=trunc.3 truncf.3
d226 17
a242 1
.include "${.CURDIR}/gen/Makefile.inc"
a243 1
.include <bsd.subdir.mk>
@


1.1.3.2
log
@Import current libm from NetBSD, with the directories complex, noieee_src, arch/!i387 removed.

The idea is to get fmin and fmax, which are needed by some newer software.
@
text
@d1 1
a1 1
#  $NetBSD: Makefile,v 1.120 2011/09/17 10:51:52 jruoho Exp $
d45 2
d52 6
a60 6
.elif (${MACHINE_ARCH} == "sparc")
.PATH: ${.CURDIR}/arch/sparc
COMMON_SRCS+= fenv.c
.elif (${MACHINE_ARCH} == "sparc64")
.PATH: ${.CURDIR}/arch/sparc64
COMMON_SRCS+= fenv.c
d62 1
a62 4

.if (${MACHINE_ARCH} == "x86_64")
.PATH: ${.CURDIR}/arch/x86_64
.endif
a63 2

COMMON_SRCS+= fenv.c s_nextafterl.c s_nexttoward.c
d68 3
a70 4
	    s_cosf.S s_finite.S s_finitef.S s_floor.S s_floorf.S \
	    s_ilogb.S s_ilogbf.S s_ilogbl.S s_log1p.S s_log1pf.S \
	    s_logb.S s_logbf.S s_logbl.S \
	    s_rint.S s_rintf.S s_scalbn.S s_scalbnf.S s_significand.S \
d72 1
a72 4
# do not pick up the i387 asm version, it is incorrect
s_modf.o s_modf.pico s_modf.po s_modf.d: s_modf.c

.if (${MACHINE_ARCH} == "i386")
d97 1
a97 1
.PATH:	${.CURDIR}/arch/vax
d103 1
a103 2
ARCHS_SRCS = n_scalbn.S
WARNS?=4
d106 1
a106 1
WARNS?=4
d120 1
a120 1
COMMON_SRCS+= e_acos.c e_acosf.c e_acosh.c e_acoshf.c e_asin.c e_asinf.c \
d130 3
a132 4
	s_ceilf.c s_copysign.c s_copysignf.c s_copysignl.c s_cos.c s_cosf.c s_erf.c \
	s_erff.c s_exp2.c s_exp2f.c s_expm1.c s_expm1f.c s_fabsf.c s_fabsl.c \
	s_finite.c s_finitef.c \
	s_floor.c s_floorf.c s_frexpf.c s_ilogb.c s_ilogbf.c s_ilogbl.c \
d134 3
a136 4
	s_log1pf.c s_logb.c s_logbf.c s_logbl.c \
	s_matherr.c s_modff.c s_nextafter.c \
	s_nextafterf.c s_remquo.c s_remquof.c s_rint.c s_rintf.c s_round.c s_roundf.c s_scalbn.c \
	s_scalbnf.c s_scalbnl.c s_signgam.c s_significand.c s_significandf.c s_sin.c \
d139 1
a139 1
	w_atan2f.c w_atanh.c w_atanhf.c w_cosh.c w_coshf.c \
d148 1
a148 10
	llroundf.c s_frexp.c s_ldexp.c s_modf.c \
	s_fmax.c s_fmaxf.c s_fmaxl.c s_fmin.c s_fminf.c s_fminl.c s_fdim.c

.PATH:	${.CURDIR}/compat
COMMON_SRCS+= compat_cabs.c compat_cabsf.c
# XXX our compatibility cabs() is different!
.if defined(HAVE_GCC)
COPTS.compat_cabs.c=	-fno-builtin-cabs
COPTS.compat_cabsf.c=	-fno-builtin-cabsf
.endif
d156 1
a156 2
	n_round.c n_roundf.c n_lround.c n_lroundf.c \
	n_fmax.c n_fmaxf.c n_fmin.c n_fminf.c
d184 5
a188 27
.if (${MACHINE_ARCH} == "i386")
# XXX this gets miscompiled. There should be a better fix.
COPTS.s_tanh.c+= -O0
.endif

MAN+=	acos.3 acosh.3 asin.3 asinh.3 atan.3 atan2.3 atanh.3 \
	ceil.3 copysign.3 cos.3 cosh.3 \
	erf.3 exp.3 \
	fabs.3 finite.3 fmod.3 frexp.3 hypot.3 \
	ieee_test.3 ilogb.3 isinff.3 j0.3 ldexp.3 lgamma.3 log.3 lrint.3 \
	math.3 modf.3 nextafter.3 pow.3 \
	remainder.3 rint.3 round.3 \
	scalbn.3 sin.3 sinh.3 sqrt.3 \
	tan.3 tanh.3 trunc.3 fmax.3 fdim.3

# fenv.h interface
MAN+=	feclearexcept.3 feenableexcept.3 fegetenv.3 fegetround.3 fenv.3
MLINKS+=feclearexcept.3 fegetexceptflag.3	\
	feclearexcept.3 feraiseexcept.3		\
	feclearexcept.3 fesetexceptflag.3	\
	feclearexcept.3 fetestexcept.3
MLINKS+=feenableexcept.3 fedisableexcept.3	\
	feenableexcept.3 fegetexcept.3
MLINKS+=fegetenv.3 feholdexcept.3		\
	fegetenv.3 fesetenv.3			\
	fegetenv.3 feupdateenv.3
MLINKS+=fegetround.3 fesetround.3
d197 1
a197 5
MLINKS+=ceil.3 ceilf.3 \
	ceil.3 floor.3 \
	ceil.3 floorf.3
MLINKS+=copysign.3 copysignf.3 \
	copysign.3 copysignl.3
d201 3
a203 10
MLINKS+=exp.3 expf.3 exp.3 expm1.3 exp.3 expm1f.3 			\
	exp.3 exp2.3 exp.3 exp2f.3
MLINKS+=log.3 logf.3 \
	log.3 log10.3 \
	log.3 log10f.3 \
	log.3 log1p.3 \
	log.3 log1pf.3 \
	log.3 log2.3 \
	log.3 log2f.3
MLINKS+=pow.3 powf.3
d205 1
a205 1
MLINKS+=finite.3 finitef.3
d207 5
a211 2
MLINKS+=hypot.3 hypotf.3
MLINKS+=ieee_test.3 logb.3 ieee_test.3 logbf.3 ieee_test.3 logbl.3
a213 1
MLINKS+=ilogb.3 ilogbf.3 ilogb.3 ilogbl.3
a219 3
MLINKS+=nextafter.3 nextafterf.3 \
	nextafter.3 nextafterl.3 \
	nextafter.3 nexttoward.3
a220 3
MLINKS+=remainder.3 remainderf.3 \
	remainder.3 remquo.3 \
	remainder.3 remquof.3
a221 2
MLINKS+=scalbn.3 scalbnf.3 \
	scalbn.3 scalbnl.3
a228 11
MLINKS+=fmax.3 fmaxl.3
MLINKS+=fmax.3 fmaxf.3
MLINKS+=fmax.3 fmin.3
MLINKS+=fmax.3 fminl.3
MLINKS+=fmax.3 fminf.3
MLINKS+=fdim.3 fdiml.3
MLINKS+=fdim.3 fdimf.3

.if (${MKCOMPLEX} != "no")
.include "${.CURDIR}/complex/Makefile.inc"
.endif
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import OpenBSD 4.0's libm
@
text
@d2 1
a2 1
#  $OpenBSD: Makefile,v 1.40 2006/07/12 07:26:08 brad Exp $
a100 1
WANTLINT=
a109 2
	lrint.c lrintf.c llrint.c llrintf.c lround.c lroundf.c llround.c \
	llroundf.c \
d116 3
a118 3
	s_nextafter.c s_nextafterf.c s_rint.c s_rintf.c s_round.c s_roundf.c \
	s_scalbn.c s_scalbnf.c s_signgam.c s_significand.c s_significandf.c \
	s_sin.c s_sinf.c s_tan.c s_tanf.c s_tanh.c s_tanhf.c s_trunc.c s_truncf.c \
d160 3
a162 2
	infnan.3 logb.3 j0.3 lgamma.3 lrint.3 lround.3 math.3 rint.3 \
	round.3 sin.3 sinh.3 sqrt.3 tan.3 tanh.3 trunc.3
a216 6
MLINKS+=lrint.3 lrintf.3
MLINKS+=lrint.3 llrint.3
MLINKS+=lrint.3 llrintf.3
MLINKS+=lround.3 lroundf.3
MLINKS+=lround.3 llround.3
MLINKS+=lround.3 llroundf.3
a218 1
MLINKS+=round.3 roundf.3
a224 1
MLINKS+=trunc.3 truncf.3
@

