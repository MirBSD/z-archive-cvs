head	1.4;
access;
symbols
	cvs-201210191930:1.1.1.3
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	cvs-200705171630:1.1.1.2
	cvs-200702051630:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200505050030:1.1.1.1
	cvs-200504291700:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.10.31.20.06.30;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005272B7081B0E5655;

1.3
date	2012.10.19.19.58.18;	author tg;	state Exp;
branches;
next	1.2;
commitid	1005081B0E54727ACCA;

1.2
date	2007.05.17.17.15.35;	author tg;	state Exp;
branches;
next	1.1;
commitid	100464C8DC46A1A51B5;

1.1
date	2005.04.29.17.05.23;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.04.29.17.05.23;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.05.17.16.38.22;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	100464C84A31EC59432;

1.1.1.3
date	2012.10.19.19.33.47;	author tg;	state Exp;
branches;
next	;
commitid	1005081AB336FC5E505;


desc
@@


1.4
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/*	$OpenBSD: log.h,v 1.6 2010/04/21 20:02:40 nicm Exp $	*/

/*
 * Copyright © 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 2000-2004 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef _LOG_H_
#define _LOG_H_ "$MirOS: src/lib/libevent/log.h,v 1.3 2012/10/19 19:58:18 tg Exp $"

#ifdef __GNUC__
#define EV_CHECK_FMT(a,b) __attribute__((__format__(__printf__, a, b)))
#else
#define EV_CHECK_FMT(a,b)
#endif

__dead
void event_err(int eval, const char *fmt, ...) EV_CHECK_FMT(2,3);
void event_warn(const char *fmt, ...) EV_CHECK_FMT(1,2);
__dead
void event_errx(int eval, const char *fmt, ...) EV_CHECK_FMT(2,3);
void event_warnx(const char *fmt, ...) EV_CHECK_FMT(1,2);
void event_msgx(const char *fmt, ...) EV_CHECK_FMT(1,2);
void _event_debugx(const char *fmt, ...) EV_CHECK_FMT(1,2);

#ifdef USE_DEBUG
#define event_debug(x) _event_debugx x
#else
#define event_debug(x) do {;} while (0)
#endif

#undef EV_CHECK_FMT

#endif
@


1.3
log
@merge latest stable-1.4 libevent
@
text
@d4 2
d32 1
a32 1
#define _LOG_H_ "$MirOS$"
d35 1
a35 1
#define EV_CHECK_FMT(a,b) __attribute__((format(printf, a, b)))
@


1.2
log
@__CRAZY=Yes clean, fixes a few real bugs
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.4 2007/03/19 15:12:49 millert Exp $	*/
d30 16
a45 1
#define _LOG_H_	"$MirOS$"
a46 15
void event_err(int eval, const char *fmt, ...)
    __attribute__((noreturn))
    __attribute__((format (printf, 2, 3)));
void event_warn(const char *fmt, ...)
    __attribute__((format (printf, 1, 2)));
void event_errx(int eval, const char *fmt, ...)
    __attribute__((noreturn))
    __attribute__((format (printf, 2, 3)));
void event_warnx(const char *fmt, ...)
    __attribute__((format (printf, 1, 2)));
void event_msgx(const char *fmt, ...)
    __attribute__((format (printf, 1, 2)));
void _event_debugx(const char *fmt, ...)
    __attribute__((format (printf, 1, 2)));
#undef USE_DEBUG
d53 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.3 2005/04/22 00:56:25 brad Exp $	*/
d30 1
a30 1
#define _LOG_H_
d32 14
a45 6
void event_err(int eval, const char *fmt, ...);
void event_warn(const char *fmt, ...);
void event_errx(int eval, const char *fmt, ...);
void event_warnx(const char *fmt, ...);
void event_msgx(const char *fmt, ...);
void _event_debugx(const char *fmt, ...);
d50 1
a50 1
#define event_debug(x)
@


1.1.1.1
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@@


1.1.1.2
log
@import latest libevent via openbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.4 2007/03/19 15:12:49 millert Exp $	*/
d42 1
a42 1
#define event_debug(x) do {;} while (0)
@


1.1.1.3
log
@import latest stable 1.4 libevent, in the OpenBSD version (diff against portable version reviewed-okay)
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.6 2010/04/21 20:02:40 nicm Exp $	*/
d32 7
a38 13
#ifdef __GNUC__
#define EV_CHECK_FMT(a,b) __attribute__((format(printf, a, b)))
#else
#define EV_CHECK_FMT(a,b)
#endif

void event_err(int eval, const char *fmt, ...) EV_CHECK_FMT(2,3);
void event_warn(const char *fmt, ...) EV_CHECK_FMT(1,2);
void event_errx(int eval, const char *fmt, ...) EV_CHECK_FMT(2,3);
void event_warnx(const char *fmt, ...) EV_CHECK_FMT(1,2);
void event_msgx(const char *fmt, ...) EV_CHECK_FMT(1,2);
void _event_debugx(const char *fmt, ...) EV_CHECK_FMT(1,2);

a44 2
#undef EV_CHECK_FMT

@


