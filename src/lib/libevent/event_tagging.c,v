head	1.4;
access;
symbols
	cvs-201210191930:1.1.1.2
	MIRBSD_10:1.3.0.2
	MIRBSD_10_BASE:1.3
	cvs-200705171630:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.10.19.19.58.16;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005081B0E54727ACCA;

1.3
date	2007.05.17.17.15.35;	author tg;	state Exp;
branches;
next	1.2;
commitid	100464C8DC46A1A51B5;

1.2
date	2007.05.17.16.48.21;	author tg;	state Exp;
branches;
next	1.1;
commitid	100464C876417B6519F;

1.1
date	2007.05.17.16.38.22;	author tg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	100464C84A31EC59432;

1.1.1.1
date	2007.05.17.16.38.22;	author tg;	state Exp;
branches;
next	1.1.1.2;
commitid	100464C84A31EC59432;

1.1.1.2
date	2012.10.19.19.33.47;	author tg;	state Exp;
branches;
next	;
commitid	1005081AB336FC5E505;


desc
@@


1.4
log
@merge latest stable-1.4 libevent
@
text
@/*	$OpenBSD: event_tagging.c,v 1.3 2010/04/21 20:02:40 nicm Exp $	*/

/*
 * Copyright (c) 2003, 2004 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif

#ifdef WIN32
#define WIN32_LEAN_AND_MEAN
#include <winsock2.h>
#include <windows.h>
#undef WIN32_LEAN_AND_MEAN
#else
#include <sys/ioctl.h>
#endif

#include <sys/queue.h>
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#endif

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifndef WIN32
#include <syslog.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#include "event.h"
#include "evutil.h"
#include "log.h"

int evtag_decode_int(ev_uint32_t *pnumber, struct evbuffer *evbuf);
int evtag_encode_tag(struct evbuffer *evbuf, ev_uint32_t tag);
int evtag_decode_tag(ev_uint32_t *ptag, struct evbuffer *evbuf);

static struct evbuffer *_buf;	/* not thread safe */

void
evtag_init(void)
{
	if (_buf != NULL)
		return;

	if ((_buf = evbuffer_new()) == NULL)
		event_err(1, "%s: malloc", __func__);
}

/* 
 * We encode integer's by nibbles; the first nibble contains the number
 * of significant nibbles - 1;  this allows us to encode up to 64-bit
 * integers.  This function is byte-order independent.
 */

void
encode_int(struct evbuffer *evbuf, ev_uint32_t number)
{
	int off = 1, nibbles = 0;
	ev_uint8_t data[5];

	memset(data, 0, sizeof(ev_uint32_t)+1);
	while (number) {
		if (off & 0x1)
			data[off/2] = (data[off/2] & 0xf0) | (number & 0x0f);
		else
			data[off/2] = (data[off/2] & 0x0f) |
			    ((number & 0x0f) << 4);
		number >>= 4;
		off++;
	}

	if (off > 2)
		nibbles = off - 2;

	/* Off - 1 is the number of encoded nibbles */
	data[0] = (data[0] & 0x0f) | ((nibbles & 0x0f) << 4);

	evbuffer_add(evbuf, data, (off + 1) / 2);
}

/*
 * Support variable length encoding of tags; we use the high bit in each
 * octet as a continuation signal.
 */

int
evtag_encode_tag(struct evbuffer *evbuf, ev_uint32_t tag)
{
	int bytes = 0;
	ev_uint8_t data[5];

	memset(data, 0, sizeof(data));
	do {
		ev_uint8_t lower = tag & 0x7f;
		tag >>= 7;

		if (tag)
			lower |= 0x80;

		data[bytes++] = lower;
	} while (tag);

	if (evbuf != NULL)
		evbuffer_add(evbuf, data, bytes);

	return (bytes);
}

static int
decode_tag_internal(ev_uint32_t *ptag, struct evbuffer *evbuf, int dodrain)
{
	ev_uint32_t number = 0;
	ev_uint8_t *data = EVBUFFER_DATA(evbuf);
	int len = EVBUFFER_LENGTH(evbuf);
	int count = 0, shift = 0, done = 0;

	while (count++ < len) {
		ev_uint8_t lower = *data++;
		number |= (lower & 0x7f) << shift;
		shift += 7;

		if (!(lower & 0x80)) {
			done = 1;
			break;
		}
	}

	if (!done)
		return (-1);

	if (dodrain)
		evbuffer_drain(evbuf, count);

	if (ptag != NULL)
		*ptag = number;

	return (count);
}

int
evtag_decode_tag(ev_uint32_t *ptag, struct evbuffer *evbuf)
{
	return (decode_tag_internal(ptag, evbuf, 1 /* dodrain */));
}

/*
 * Marshal a data type, the general format is as follows:
 *
 * tag number: one byte; length: var bytes; payload: var bytes
 */

void
evtag_marshal(struct evbuffer *evbuf, ev_uint32_t tag,
    const void *data, ev_uint32_t len)
{
	evtag_encode_tag(evbuf, tag);
	encode_int(evbuf, len);
	evbuffer_add(evbuf, (const void *)data, len);
}

/* Marshaling for integers */
void
evtag_marshal_int(struct evbuffer *evbuf, ev_uint32_t tag, ev_uint32_t integer)
{
	evbuffer_drain(_buf, EVBUFFER_LENGTH(_buf));
	encode_int(_buf, integer);

	evtag_encode_tag(evbuf, tag);
	encode_int(evbuf, EVBUFFER_LENGTH(_buf));
	evbuffer_add_buffer(evbuf, _buf);
}

void
evtag_marshal_string(struct evbuffer *buf, ev_uint32_t tag, const char *string)
{
	evtag_marshal(buf, tag, string, strlen(string));
}

void
evtag_marshal_timeval(struct evbuffer *evbuf, ev_uint32_t tag, struct timeval *tv)
{
	evbuffer_drain(_buf, EVBUFFER_LENGTH(_buf));

	encode_int(_buf, tv->tv_sec);
	encode_int(_buf, tv->tv_usec);

	evtag_marshal(evbuf, tag, EVBUFFER_DATA(_buf),
	    EVBUFFER_LENGTH(_buf));
}

static int
decode_int_internal(ev_uint32_t *pnumber, struct evbuffer *evbuf, int dodrain)
{
	ev_uint32_t number = 0;
	ev_uint8_t *data = EVBUFFER_DATA(evbuf);
	int len = EVBUFFER_LENGTH(evbuf);
	int nibbles = 0;

	if (!len)
		return (-1);

	nibbles = ((data[0] & 0xf0) >> 4) + 1;
	if (nibbles > 8 || (nibbles >> 1) + 1 > len)
		return (-1);
	len = (nibbles >> 1) + 1;

	while (nibbles > 0) {
		number <<= 4;
		if (nibbles & 0x1)
			number |= data[nibbles >> 1] & 0x0f;
		else
			number |= (data[nibbles >> 1] & 0xf0) >> 4;
		nibbles--;
	}

	if (dodrain)
		evbuffer_drain(evbuf, len);

	*pnumber = number;

	return (len);
}

int
evtag_decode_int(ev_uint32_t *pnumber, struct evbuffer *evbuf)
{
	return (decode_int_internal(pnumber, evbuf, 1) == -1 ? -1 : 0);
}

int
evtag_peek(struct evbuffer *evbuf, ev_uint32_t *ptag)
{
	return (decode_tag_internal(ptag, evbuf, 0 /* dodrain */));
}

int
evtag_peek_length(struct evbuffer *evbuf, ev_uint32_t *plength)
{
	struct evbuffer tmp;
	int res, len;

	len = decode_tag_internal(NULL, evbuf, 0 /* dodrain */);
	if (len == -1)
		return (-1);

	tmp = *evbuf;
	tmp.buffer += len;
	tmp.off -= len;

	res = decode_int_internal(plength, &tmp, 0);
	if (res == -1)
		return (-1);

	*plength += res + len;

	return (0);
}

int
evtag_payload_length(struct evbuffer *evbuf, ev_uint32_t *plength)
{
	struct evbuffer tmp;
	int res, len;

	len = decode_tag_internal(NULL, evbuf, 0 /* dodrain */);
	if (len == -1)
		return (-1);

	tmp = *evbuf;
	tmp.buffer += len;
	tmp.off -= len;

	res = decode_int_internal(plength, &tmp, 0);
	if (res == -1)
		return (-1);

	return (0);
}

int
evtag_consume(struct evbuffer *evbuf)
{
	ev_uint32_t len;
	if (decode_tag_internal(NULL, evbuf, 1 /* dodrain */) == -1)
		return (-1);
	if (evtag_decode_int(&len, evbuf) == -1)
		return (-1);
	evbuffer_drain(evbuf, len);

	return (0);
}

/* Reads the data type from an event buffer */

int
evtag_unmarshal(struct evbuffer *src, ev_uint32_t *ptag, struct evbuffer *dst)
{
	ev_uint32_t len;
	ev_uint32_t integer;

	if (decode_tag_internal(ptag, src, 1 /* dodrain */) == -1)
		return (-1);
	if (evtag_decode_int(&integer, src) == -1)
		return (-1);
	len = integer;

	if (EVBUFFER_LENGTH(src) < len)
		return (-1);
	
	if (evbuffer_add(dst, EVBUFFER_DATA(src), len) == -1)
		return (-1);

	evbuffer_drain(src, len);

	return (len);
}

/* Marshaling for integers */

int
evtag_unmarshal_int(struct evbuffer *evbuf, ev_uint32_t need_tag,
    ev_uint32_t *pinteger)
{
	ev_uint32_t tag;
	ev_uint32_t len;
	ev_uint32_t integer;

	if (decode_tag_internal(&tag, evbuf, 1 /* dodrain */) == -1)
		return (-1);
	if (need_tag != tag)
		return (-1);
	if (evtag_decode_int(&integer, evbuf) == -1)
		return (-1);
	len = integer;

	if (EVBUFFER_LENGTH(evbuf) < len)
		return (-1);

	evbuffer_drain(_buf, EVBUFFER_LENGTH(_buf));
	if (evbuffer_add(_buf, EVBUFFER_DATA(evbuf), len) == -1)
		return (-1);

	evbuffer_drain(evbuf, len);

	return (evtag_decode_int(pinteger, _buf));
}

/* Unmarshal a fixed length tag */

int
evtag_unmarshal_fixed(struct evbuffer *src, ev_uint32_t need_tag, void *data,
    size_t len)
{
	ev_uint32_t tag;

	/* Initialize this event buffer so that we can read into it */
	evbuffer_drain(_buf, EVBUFFER_LENGTH(_buf));

	/* Now unmarshal a tag and check that it matches the tag we want */
	if (evtag_unmarshal(src, &tag, _buf) == -1 || tag != need_tag)
		return (-1);

	if (EVBUFFER_LENGTH(_buf) != len)
		return (-1);

	memcpy(data, EVBUFFER_DATA(_buf), len);
	return (0);
}

int
evtag_unmarshal_string(struct evbuffer *evbuf, ev_uint32_t need_tag,
    char **pstring)
{
	ev_uint32_t tag;

	evbuffer_drain(_buf, EVBUFFER_LENGTH(_buf));

	if (evtag_unmarshal(evbuf, &tag, _buf) == -1 || tag != need_tag)
		return (-1);

	*pstring = calloc(EVBUFFER_LENGTH(_buf) + 1, 1);
	if (*pstring == NULL)
		event_err(1, "%s: calloc", __func__);
	evbuffer_remove(_buf, *pstring, EVBUFFER_LENGTH(_buf));

	return (0);
}

int
evtag_unmarshal_timeval(struct evbuffer *evbuf, ev_uint32_t need_tag,
    struct timeval *ptv)
{
	ev_uint32_t tag;
	ev_uint32_t integer;

	evbuffer_drain(_buf, EVBUFFER_LENGTH(_buf));
	if (evtag_unmarshal(evbuf, &tag, _buf) == -1 || tag != need_tag)
		return (-1);

	if (evtag_decode_int(&integer, _buf) == -1)
		return (-1);
	ptv->tv_sec = integer;
	if (evtag_decode_int(&integer, _buf) == -1)
		return (-1);
	ptv->tv_usec = integer;

	return (0);
}
@


1.3
log
@__CRAZY=Yes clean, fixes a few real bugs
@
text
@d1 1
a1 1
/*	$OpenBSD: event_tagging.c,v 1.1 2007/03/19 15:12:49 millert Exp $	*/
d30 5
d36 2
a38 3

#ifdef HAVE_CONFIG_H
#include "config.h"
d43 1
a49 1
#include <sys/tree.h>
d62 1
d64 1
d67 1
d70 3
a72 3
__RCSID("$MirOS: src/lib/libevent/event_tagging.c,v 1.2 2007/05/17 16:48:21 tg Exp $");

int decode_int(u_int32_t *pnumber, struct evbuffer *evbuf);
d93 1
a93 1
encode_int(struct evbuffer *evbuf, u_int32_t number)
d96 1
a96 1
	u_int8_t data[5];
d98 1
a98 1
	memset(data, 0, sizeof(data));
d119 65
d190 2
a191 2
evtag_marshal(struct evbuffer *evbuf, u_int8_t tag,
    const void *data, u_int32_t len)
d193 1
a193 1
	evbuffer_add(evbuf, &tag, sizeof(tag));
d195 1
a195 1
	evbuffer_add(evbuf, data, len);
d200 1
a200 1
evtag_marshal_int(struct evbuffer *evbuf, u_int8_t tag, u_int32_t integer)
d205 1
a205 1
	evbuffer_add(evbuf, &tag, sizeof(tag));
d211 1
a211 1
evtag_marshal_string(struct evbuffer *buf, u_int8_t tag, const char *string)
d217 1
a217 1
evtag_marshal_timeval(struct evbuffer *evbuf, u_int8_t tag, struct timeval *tv)
d228 2
a229 2
static __inline int
decode_int_internal(u_int32_t *pnumber, struct evbuffer *evbuf, int dodrain)
d231 2
a232 2
	u_int32_t number = 0;
	u_int8_t *data = EVBUFFER_DATA(evbuf);
d234 1
a234 1
	int nibbles = 0, off;
d240 1
a240 1
	if (nibbles > 8 || (nibbles >> 1) > len - 1)
d242 1
d244 1
a244 2
	off = nibbles;
	while (off > 0) {
d246 2
a247 2
		if (off & 0x1)
			number |= data[off >> 1] & 0x0f;
d249 2
a250 2
			number |= (data[off >> 1] & 0xf0) >> 4;
		off--;
a252 1
	len = (nibbles >> 1) + 1;
d262 1
a262 1
decode_int(u_int32_t *pnumber, struct evbuffer *evbuf)
d268 1
a268 1
evtag_peek(struct evbuffer *evbuf, u_int8_t *ptag)
d270 1
a270 5
	if (EVBUFFER_LENGTH(evbuf) < 2)
		return (-1);
	*ptag = EVBUFFER_DATA(evbuf)[0];

	return (0);
d274 1
a274 1
evtag_peek_length(struct evbuffer *evbuf, u_int32_t *plength)
d277 1
a277 1
	int res;
d279 2
a280 1
	if (EVBUFFER_LENGTH(evbuf) < 2)
d284 2
a285 2
	tmp.buffer += 1;
	tmp.off -= 1;
d291 1
a291 1
	*plength += res + 1;
d297 1
a297 1
evtag_payload_length(struct evbuffer *evbuf, u_int32_t *plength)
d300 1
a300 1
	int res;
d302 2
a303 1
	if (EVBUFFER_LENGTH(evbuf) < 2)
d307 2
a308 2
	tmp.buffer += 1;
	tmp.off -= 1;
d320 4
a323 3
	u_int32_t len;
	evbuffer_drain(evbuf, 1);
	if (decode_int(&len, evbuf) == -1)
d333 1
a333 1
evtag_unmarshal(struct evbuffer *src, u_int8_t *ptag, struct evbuffer *dst)
d335 2
a336 3
	u_int8_t tag;
	u_int32_t len;
	u_int32_t integer;
d338 1
a338 1
	if (evbuffer_remove(src, &tag, sizeof(tag)) != sizeof(tag))
d340 1
a340 1
	if (decode_int(&integer, src) == -1)
d346 1
a346 1

a351 1
	*ptag = tag;
d358 2
a359 2
evtag_unmarshal_int(struct evbuffer *evbuf, u_int8_t need_tag,
    u_int32_t *pinteger)
d361 3
a363 3
	u_int8_t tag;
	u_int32_t len;
	u_int32_t integer;
d365 3
a367 2
	if (evbuffer_remove(evbuf, &tag, sizeof(tag)) != sizeof(tag) ||
	    tag != need_tag)
d369 1
a369 1
	if (decode_int(&integer, evbuf) == -1)
d382 1
a382 1
	return (decode_int(pinteger, _buf));
d388 1
a388 1
evtag_unmarshal_fixed(struct evbuffer *src, u_int8_t need_tag, void *data,
d391 1
a391 1
	u_int8_t tag;
d408 1
a408 1
evtag_unmarshal_string(struct evbuffer *evbuf, u_int8_t need_tag,
d411 1
a411 1
	u_int8_t tag;
d427 1
a427 1
evtag_unmarshal_timeval(struct evbuffer *evbuf, u_int8_t need_tag,
d430 2
a431 2
	u_int8_t tag;
	u_int32_t integer;
d437 1
a437 1
	if (decode_int(&integer, _buf) == -1)
d440 1
a440 1
	if (decode_int(&integer, _buf) == -1)
@


1.2
log
@• how could they ever build this?
• rcsids
@
text
@d63 1
a63 1
__RCSID("$MirOS$");
d70 1
a70 1
evtag_init()
d156 1
a156 1
static int __inline
@


1.1
log
@Initial revision
@
text
@d63 2
d123 1
a123 1
	evbuffer_add(evbuf, (void *)data, len);
@


1.1.1.1
log
@import latest libevent via openbsd
@
text
@@


1.1.1.2
log
@import latest stable 1.4 libevent, in the OpenBSD version (diff against portable version reviewed-okay)
@
text
@d1 1
a1 1
/*	$OpenBSD: event_tagging.c,v 1.3 2010/04/21 20:02:40 nicm Exp $	*/
d30 3
a36 7
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif

a38 1
#include <winsock2.h>
d45 1
a57 1
#ifdef HAVE_UNISTD_H
a58 1
#endif
a60 1
#include "evutil.h"
d63 1
a63 3
int evtag_decode_int(ev_uint32_t *pnumber, struct evbuffer *evbuf);
int evtag_encode_tag(struct evbuffer *evbuf, ev_uint32_t tag);
int evtag_decode_tag(ev_uint32_t *ptag, struct evbuffer *evbuf);
d68 1
a68 1
evtag_init(void)
d84 1
a84 1
encode_int(struct evbuffer *evbuf, ev_uint32_t number)
d87 1
a87 1
	ev_uint8_t data[5];
d89 1
a89 1
	memset(data, 0, sizeof(ev_uint32_t)+1);
a109 65
 * Support variable length encoding of tags; we use the high bit in each
 * octet as a continuation signal.
 */

int
evtag_encode_tag(struct evbuffer *evbuf, ev_uint32_t tag)
{
	int bytes = 0;
	ev_uint8_t data[5];

	memset(data, 0, sizeof(data));
	do {
		ev_uint8_t lower = tag & 0x7f;
		tag >>= 7;

		if (tag)
			lower |= 0x80;

		data[bytes++] = lower;
	} while (tag);

	if (evbuf != NULL)
		evbuffer_add(evbuf, data, bytes);

	return (bytes);
}

static int
decode_tag_internal(ev_uint32_t *ptag, struct evbuffer *evbuf, int dodrain)
{
	ev_uint32_t number = 0;
	ev_uint8_t *data = EVBUFFER_DATA(evbuf);
	int len = EVBUFFER_LENGTH(evbuf);
	int count = 0, shift = 0, done = 0;

	while (count++ < len) {
		ev_uint8_t lower = *data++;
		number |= (lower & 0x7f) << shift;
		shift += 7;

		if (!(lower & 0x80)) {
			done = 1;
			break;
		}
	}

	if (!done)
		return (-1);

	if (dodrain)
		evbuffer_drain(evbuf, count);

	if (ptag != NULL)
		*ptag = number;

	return (count);
}

int
evtag_decode_tag(ev_uint32_t *ptag, struct evbuffer *evbuf)
{
	return (decode_tag_internal(ptag, evbuf, 1 /* dodrain */));
}

/*
d116 2
a117 2
evtag_marshal(struct evbuffer *evbuf, ev_uint32_t tag,
    const void *data, ev_uint32_t len)
d119 1
a119 1
	evtag_encode_tag(evbuf, tag);
d126 1
a126 1
evtag_marshal_int(struct evbuffer *evbuf, ev_uint32_t tag, ev_uint32_t integer)
d131 1
a131 1
	evtag_encode_tag(evbuf, tag);
d137 1
a137 1
evtag_marshal_string(struct evbuffer *buf, ev_uint32_t tag, const char *string)
d143 1
a143 1
evtag_marshal_timeval(struct evbuffer *evbuf, ev_uint32_t tag, struct timeval *tv)
d154 2
a155 2
static int
decode_int_internal(ev_uint32_t *pnumber, struct evbuffer *evbuf, int dodrain)
d157 2
a158 2
	ev_uint32_t number = 0;
	ev_uint8_t *data = EVBUFFER_DATA(evbuf);
d160 1
a160 1
	int nibbles = 0;
d166 1
a166 1
	if (nibbles > 8 || (nibbles >> 1) + 1 > len)
a167 1
	len = (nibbles >> 1) + 1;
d169 2
a170 1
	while (nibbles > 0) {
d172 2
a173 2
		if (nibbles & 0x1)
			number |= data[nibbles >> 1] & 0x0f;
d175 2
a176 2
			number |= (data[nibbles >> 1] & 0xf0) >> 4;
		nibbles--;
d179 1
d189 1
a189 1
evtag_decode_int(ev_uint32_t *pnumber, struct evbuffer *evbuf)
d195 1
a195 1
evtag_peek(struct evbuffer *evbuf, ev_uint32_t *ptag)
d197 5
a201 1
	return (decode_tag_internal(ptag, evbuf, 0 /* dodrain */));
d205 1
a205 1
evtag_peek_length(struct evbuffer *evbuf, ev_uint32_t *plength)
d208 1
a208 1
	int res, len;
d210 1
a210 2
	len = decode_tag_internal(NULL, evbuf, 0 /* dodrain */);
	if (len == -1)
d214 2
a215 2
	tmp.buffer += len;
	tmp.off -= len;
d221 1
a221 1
	*plength += res + len;
d227 1
a227 1
evtag_payload_length(struct evbuffer *evbuf, ev_uint32_t *plength)
d230 1
a230 1
	int res, len;
d232 1
a232 2
	len = decode_tag_internal(NULL, evbuf, 0 /* dodrain */);
	if (len == -1)
d236 2
a237 2
	tmp.buffer += len;
	tmp.off -= len;
d249 3
a251 4
	ev_uint32_t len;
	if (decode_tag_internal(NULL, evbuf, 1 /* dodrain */) == -1)
		return (-1);
	if (evtag_decode_int(&len, evbuf) == -1)
d261 1
a261 1
evtag_unmarshal(struct evbuffer *src, ev_uint32_t *ptag, struct evbuffer *dst)
d263 3
a265 2
	ev_uint32_t len;
	ev_uint32_t integer;
d267 1
a267 1
	if (decode_tag_internal(ptag, src, 1 /* dodrain */) == -1)
d269 1
a269 1
	if (evtag_decode_int(&integer, src) == -1)
d275 1
a275 1
	
d281 1
d288 2
a289 2
evtag_unmarshal_int(struct evbuffer *evbuf, ev_uint32_t need_tag,
    ev_uint32_t *pinteger)
d291 3
a293 3
	ev_uint32_t tag;
	ev_uint32_t len;
	ev_uint32_t integer;
d295 2
a296 3
	if (decode_tag_internal(&tag, evbuf, 1 /* dodrain */) == -1)
		return (-1);
	if (need_tag != tag)
d298 1
a298 1
	if (evtag_decode_int(&integer, evbuf) == -1)
d311 1
a311 1
	return (evtag_decode_int(pinteger, _buf));
d317 1
a317 1
evtag_unmarshal_fixed(struct evbuffer *src, ev_uint32_t need_tag, void *data,
d320 1
a320 1
	ev_uint32_t tag;
d337 1
a337 1
evtag_unmarshal_string(struct evbuffer *evbuf, ev_uint32_t need_tag,
d340 1
a340 1
	ev_uint32_t tag;
d356 1
a356 1
evtag_unmarshal_timeval(struct evbuffer *evbuf, ev_uint32_t need_tag,
d359 2
a360 2
	ev_uint32_t tag;
	ev_uint32_t integer;
d366 1
a366 1
	if (evtag_decode_int(&integer, _buf) == -1)
d369 1
a369 1
	if (evtag_decode_int(&integer, _buf) == -1)
@

