head	1.5;
access;
symbols
	cvs-201210191930:1.1.1.7
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	cvs-200705171630:1.1.1.6
	cvs-200702051630:1.1.1.5
	MIRBSD_9_BASE:1.1.1.4
	MIRBSD_8:1.1.1.4.0.2
	MIRBSD_8_BASE:1.1.1.4
	cvs-200507211800:1.1.1.4
	cvs-200505050030:1.1.1.3
	cvs-200504291700:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.10.19.19.58.12;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005081B0E54727ACCA;

1.4
date	2007.05.17.16.48.20;	author tg;	state Exp;
branches;
next	1.3;
commitid	100464C876417B6519F;

1.3
date	2007.05.17.16.40.56;	author tg;	state Exp;
branches;
next	1.2;
commitid	100464C85AF54416520;

1.2
date	2007.02.05.16.48.01;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045C75FD15E1E1CD1;

1.1
date	2005.02.05.17.25.14;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.25.14;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.17.05.23;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.05.05.00.32.58;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	48e9427969c07d49;

1.1.1.4
date	2005.07.21.20.53.51;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	560042e0092f571e;

1.1.1.5
date	2007.02.05.16.38.50;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10045C75DA6486B10AC;

1.1.1.6
date	2007.05.17.16.38.22;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	100464C84A31EC59432;

1.1.1.7
date	2012.10.19.19.33.46;	author tg;	state Exp;
branches;
next	;
commitid	1005081AB336FC5E505;


desc
@@


1.5
log
@merge latest stable-1.4 libevent
@
text
@/*	$OpenBSD: buffer.c,v 1.19 2010/07/17 17:16:47 chl Exp $	*/

/*
 * Copyright (c) 2002, 2003 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef WIN32
#include <winsock2.h>
#include <windows.h>
#endif

#ifdef HAVE_VASPRINTF
/* If we have vasprintf, we need to define this before we include stdio.h. */
#define _GNU_SOURCE
#endif

#include <sys/types.h>

#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#endif

#ifdef HAVE_SYS_IOCTL_H
#include <sys/ioctl.h>
#endif

#include <assert.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef HAVE_STDARG_H
#include <stdarg.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#include "event.h"
#include "evutil.h"
#include "./log.h"

struct evbuffer *
evbuffer_new(void)
{
	struct evbuffer *buffer;
	
	buffer = calloc(1, sizeof(struct evbuffer));

	return (buffer);
}

void
evbuffer_free(struct evbuffer *buffer)
{
	if (buffer->orig_buffer != NULL)
		free(buffer->orig_buffer);
	free(buffer);
}

/* 
 * This is a destructive add.  The data from one buffer moves into
 * the other buffer.
 */

#define SWAP(x,y) do { \
	(x)->buffer = (y)->buffer; \
	(x)->orig_buffer = (y)->orig_buffer; \
	(x)->misalign = (y)->misalign; \
	(x)->totallen = (y)->totallen; \
	(x)->off = (y)->off; \
} while (0)

int
evbuffer_add_buffer(struct evbuffer *outbuf, struct evbuffer *inbuf)
{
	int res;

	/* Short cut for better performance */
	if (outbuf->off == 0) {
		struct evbuffer tmp;
		size_t oldoff = inbuf->off;

		/* Swap them directly */
		SWAP(&tmp, outbuf);
		SWAP(outbuf, inbuf);
		SWAP(inbuf, &tmp);

		/* 
		 * Optimization comes with a price; we need to notify the
		 * buffer if necessary of the changes. oldoff is the amount
		 * of data that we transferred from inbuf to outbuf
		 */
		if (inbuf->off != oldoff && inbuf->cb != NULL)
			(*inbuf->cb)(inbuf, oldoff, inbuf->off, inbuf->cbarg);
		if (oldoff && outbuf->cb != NULL)
			(*outbuf->cb)(outbuf, 0, oldoff, outbuf->cbarg);
		
		return (0);
	}

	res = evbuffer_add(outbuf, inbuf->buffer, inbuf->off);
	if (res == 0) {
		/* We drain the input buffer on success */
		evbuffer_drain(inbuf, inbuf->off);
	}

	return (res);
}

int
evbuffer_add_vprintf(struct evbuffer *buf, const char *fmt, va_list ap)
{
	char *buffer;
	size_t space;
	size_t oldoff = buf->off;
	int sz;
	va_list aq;

	/* make sure that at least some space is available */
	evbuffer_expand(buf, 64);
	for (;;) {
		size_t used = buf->misalign + buf->off;
		buffer = (char *)buf->buffer + buf->off;
		assert(buf->totallen >= used);
		space = buf->totallen - used;

#ifndef va_copy
#define	va_copy(dst, src)	memcpy(&(dst), &(src), sizeof(va_list))
#endif
		va_copy(aq, ap);

		sz = evutil_vsnprintf(buffer, space, fmt, aq);

		va_end(aq);

		if (sz < 0)
			return (-1);
		if ((size_t)sz < space) {
			buf->off += sz;
			if (buf->cb != NULL)
				(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);
			return (sz);
		}
		if (evbuffer_expand(buf, sz + 1) == -1)
			return (-1);

	}
	/* NOTREACHED */
}

int
evbuffer_add_printf(struct evbuffer *buf, const char *fmt, ...)
{
	int res = -1;
	va_list ap;

	va_start(ap, fmt);
	res = evbuffer_add_vprintf(buf, fmt, ap);
	va_end(ap);

	return (res);
}

/* Reads data from an event buffer and drains the bytes read */

int
evbuffer_remove(struct evbuffer *buf, void *data, size_t datlen)
{
	size_t nread = datlen;
	if (nread >= buf->off)
		nread = buf->off;

	memcpy(data, buf->buffer, nread);
	evbuffer_drain(buf, nread);
	
	return (nread);
}

/*
 * Reads a line terminated by either '\r\n', '\n\r' or '\r' or '\n'.
 * The returned buffer needs to be freed by the called.
 */

char *
evbuffer_readline(struct evbuffer *buffer)
{
	u_char *data = EVBUFFER_DATA(buffer);
	size_t len = EVBUFFER_LENGTH(buffer);
	char *line;
	unsigned int i;

	for (i = 0; i < len; i++) {
		if (data[i] == '\r' || data[i] == '\n')
			break;
	}

	if (i == len)
		return (NULL);

	if ((line = malloc(i + 1)) == NULL) {
		fprintf(stderr, "%s: out of memory\n", __func__);
		return (NULL);
	}

	memcpy(line, data, i);
	line[i] = '\0';

	/*
	 * Some protocols terminate a line with '\r\n', so check for
	 * that, too.
	 */
	if ( i < len - 1 ) {
		char fch = data[i], sch = data[i+1];

		/* Drain one more character if needed */
		if ( (sch == '\r' || sch == '\n') && sch != fch )
			i += 1;
	}

	evbuffer_drain(buffer, i + 1);

	return (line);
}


char *
evbuffer_readln(struct evbuffer *buffer, size_t *n_read_out,
		enum evbuffer_eol_style eol_style)
{
	u_char *data = EVBUFFER_DATA(buffer);
	u_char *start_of_eol, *end_of_eol;
	size_t len = EVBUFFER_LENGTH(buffer);
	char *line;
	unsigned int i, n_to_copy, n_to_drain;

	if (n_read_out)
		*n_read_out = 0;

	/* depending on eol_style, set start_of_eol to the first character
	 * in the newline, and end_of_eol to one after the last character. */
	switch (eol_style) {
	case EVBUFFER_EOL_ANY:
		for (i = 0; i < len; i++) {
			if (data[i] == '\r' || data[i] == '\n')
				break;
		}
		if (i == len)
			return (NULL);
		start_of_eol = data+i;
		++i;
		for ( ; i < len; i++) {
			if (data[i] != '\r' && data[i] != '\n')
				break;
		}
		end_of_eol = data+i;
		break;
	case EVBUFFER_EOL_CRLF:
		end_of_eol = memchr(data, '\n', len);
		if (!end_of_eol)
			return (NULL);
		if (end_of_eol > data && *(end_of_eol-1) == '\r')
			start_of_eol = end_of_eol - 1;
		else
			start_of_eol = end_of_eol;
		end_of_eol++; /*point to one after the LF. */
		break;
	case EVBUFFER_EOL_CRLF_STRICT: {
		u_char *cp = data;
		while ((cp = memchr(cp, '\r', len-(cp-data)))) {
			if (cp < data+len-1 && *(cp+1) == '\n')
				break;
			if (++cp >= data+len) {
				cp = NULL;
				break;
			}
		}
		if (!cp)
			return (NULL);
		start_of_eol = cp;
		end_of_eol = cp+2;
		break;
	}
	case EVBUFFER_EOL_LF:
		start_of_eol = memchr(data, '\n', len);
		if (!start_of_eol)
			return (NULL);
		end_of_eol = start_of_eol + 1;
		break;
	default:
		return (NULL);
	}

	n_to_copy = start_of_eol - data;
	n_to_drain = end_of_eol - data;

	if ((line = malloc(n_to_copy+1)) == NULL) {
		event_warn("%s: out of memory\n", __func__);
		return (NULL);
	}

	memcpy(line, data, n_to_copy);
	line[n_to_copy] = '\0';

	evbuffer_drain(buffer, n_to_drain);
	if (n_read_out)
		*n_read_out = (size_t)n_to_copy;

	return (line);
}

/* Adds data to an event buffer */

static void
evbuffer_align(struct evbuffer *buf)
{
	memmove(buf->orig_buffer, buf->buffer, buf->off);
	buf->buffer = buf->orig_buffer;
	buf->misalign = 0;
}

/* Expands the available space in the event buffer to at least datlen */

int
evbuffer_expand(struct evbuffer *buf, size_t datlen)
{
	size_t need = buf->misalign + buf->off + datlen;

	/* If we can fit all the data, then we don't have to do anything */
	if (buf->totallen >= need)
		return (0);

	/*
	 * If the misalignment fulfills our data needs, we just force an
	 * alignment to happen.  Afterwards, we have enough space.
	 */
	if (buf->misalign >= datlen) {
		evbuffer_align(buf);
	} else {
		void *newbuf;
		size_t length = buf->totallen;

		if (length < 256)
			length = 256;
		while (length < need)
			length <<= 1;

		if (buf->orig_buffer != buf->buffer)
			evbuffer_align(buf);
		if ((newbuf = realloc(buf->buffer, length)) == NULL)
			return (-1);

		buf->orig_buffer = buf->buffer = newbuf;
		buf->totallen = length;
	}

	return (0);
}

int
evbuffer_add(struct evbuffer *buf, const void *data, size_t datlen)
{
	size_t need = buf->misalign + buf->off + datlen;
	size_t oldoff = buf->off;

	if (buf->totallen < need) {
		if (evbuffer_expand(buf, datlen) == -1)
			return (-1);
	}

	memcpy(buf->buffer + buf->off, data, datlen);
	buf->off += datlen;

	if (datlen && buf->cb != NULL)
		(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);

	return (0);
}

void
evbuffer_drain(struct evbuffer *buf, size_t len)
{
	size_t oldoff = buf->off;

	if (len >= buf->off) {
		buf->off = 0;
		buf->buffer = buf->orig_buffer;
		buf->misalign = 0;
		goto done;
	}

	buf->buffer += len;
	buf->misalign += len;

	buf->off -= len;

 done:
	/* Tell someone about changes in this buffer */
	if (buf->off != oldoff && buf->cb != NULL)
		(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);

}

/*
 * Reads data from a file descriptor into a buffer.
 */

#define EVBUFFER_MAX_READ	4096

int
evbuffer_read(struct evbuffer *buf, int fd, int howmuch)
{
	u_char *p;
	size_t oldoff = buf->off;
	int n = EVBUFFER_MAX_READ;

#if defined(FIONREAD)
#ifdef WIN32
	long lng = n;
	if (ioctlsocket(fd, FIONREAD, &lng) == -1 || (n=lng) <= 0) {
#else
	if (ioctl(fd, FIONREAD, &n) == -1 || n <= 0) {
#endif
		n = EVBUFFER_MAX_READ;
	} else if (n > EVBUFFER_MAX_READ && n > howmuch) {
		/*
		 * It's possible that a lot of data is available for
		 * reading.  We do not want to exhaust resources
		 * before the reader has a chance to do something
		 * about it.  If the reader does not tell us how much
		 * data we should read, we artifically limit it.
		 */
		if ((size_t)n > buf->totallen << 2)
			n = buf->totallen << 2;
		if (n < EVBUFFER_MAX_READ)
			n = EVBUFFER_MAX_READ;
	}
#endif	
	if (howmuch < 0 || howmuch > n)
		howmuch = n;

	/* If we don't have FIONREAD, we might waste some space here */
	if (evbuffer_expand(buf, howmuch) == -1)
		return (-1);

	/* We can append new data at this point */
	p = buf->buffer + buf->off;

#ifndef WIN32
	n = read(fd, p, howmuch);
#else
	n = recv(fd, p, howmuch, 0);
#endif
	if (n == -1)
		return (-1);
	if (n == 0)
		return (0);

	buf->off += n;

	/* Tell someone about changes in this buffer */
	if (buf->off != oldoff && buf->cb != NULL)
		(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);

	return (n);
}

int
evbuffer_write(struct evbuffer *buffer, int fd)
{
	int n;

#ifndef WIN32
	n = write(fd, buffer->buffer, buffer->off);
#else
	n = send(fd, buffer->buffer, buffer->off, 0);
#endif
	if (n == -1)
		return (-1);
	if (n == 0)
		return (0);
	evbuffer_drain(buffer, n);

	return (n);
}

u_char *
evbuffer_find(struct evbuffer *buffer, const u_char *what, size_t len)
{
	u_char *search = buffer->buffer, *end = search + buffer->off;
	u_char *p;

	while (search < end &&
	    (p = memchr(search, *what, end - search)) != NULL) {
		if (p + len > end)
			break;
		if (memcmp(p, what, len) == 0)
			return (p);
		search = p + 1;
	}

	return (NULL);
}

void evbuffer_setcb(struct evbuffer *buffer,
    void (*cb)(struct evbuffer *, size_t, size_t, void *),
    void *cbarg)
{
	buffer->cb = cb;
	buffer->cbarg = cbarg;
}
@


1.4
log
@• how could they ever build this?
• rcsids
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.14 2007/03/19 15:12:49 millert Exp $	*/
d34 5
d54 1
d67 2
a68 2

__RCSID("$MirOS$");
d74 1
a74 1

d88 1
a88 1
/*
d116 1
a116 1
		/*
d125 1
a125 1

d147 2
d150 1
d152 2
a153 1
		space = buf->totallen - buf->misalign - buf->off;
d160 1
a160 6
#ifdef WIN32
		sz = vsnprintf(buffer, space - 1, fmt, aq);
		buffer[space - 1] = '\0';
#else
		sz = vsnprintf(buffer, space, fmt, aq);
#endif
d164 1
a164 1
		if (sz == -1)
d166 1
a166 1
		if (sz < (int)space) {
d203 1
a203 1

a229 1
		evbuffer_drain(buffer, i);
d253 86
d341 1
a341 1
static inline void
d443 2
d446 4
a449 1
	DWORD dwBytesRead;
a450 3

#ifdef FIONREAD
	if (ioctl(fd, FIONREAD, &n) == -1 || n == 0) {
d460 1
a460 1
		if (n > (int)(buf->totallen << 2))
d465 1
a465 1
#endif
d478 3
a484 8
#else
	n = ReadFile((HANDLE)fd, p, howmuch, &dwBytesRead, NULL);
	if (n == 0)
		return (-1);
	if (dwBytesRead == 0)
		return (0);
	n = dwBytesRead;
#endif
a498 3
#ifdef WIN32
	DWORD dwBytesWritten;
#endif
d502 3
a508 8
#else
	n = WriteFile((HANDLE)fd, buffer->buffer, buffer->off, &dwBytesWritten, NULL);
	if (n == 0)
		return (-1);
	if (dwBytesWritten == 0)
		return (0);
	n = dwBytesWritten;
#endif
d517 1
a517 2
	size_t remain = buffer->off;
	u_char *search = buffer->buffer;
d520 3
a522 3
	while ((p = memchr(search, *what, remain)) != NULL) {
		remain = buffer->off - (size_t)(search - buffer->buffer);
		if (remain < len)
@


1.3
log
@fastmerge
@
text
@d62 2
@


1.2
log
@gcc sign-compare police
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.13 2007/02/04 18:59:12 millert Exp $	*/
d66 1
a66 1
	
d117 1
a117 1
		
d143 3
d167 1
a167 1
 
d196 1
a196 1
	
d211 1
a211 1
	u_int i;
d296 1
a296 1
evbuffer_add(struct evbuffer *buf, void *data, size_t datlen)
d371 1
a371 1
#endif	
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.1 2004/04/28 06:53:12 brad Exp $	*/
a29 2
#include <sys/types.h>

d34 7
d45 4
a48 1
#include <err.h>
d75 2
a76 2
	if (buffer->buffer != NULL)
		free(buffer->buffer);
d80 1
a80 1
/* 
d85 8
d97 24
d122 2
a123 1
	if (res == 0)
d125 1
d131 40
a170 1
evbuffer_add_printf(struct evbuffer *buf, char *fmt, ...)
a172 1
	char *msg;
d176 2
d179 14
a192 2
	if (vasprintf(&msg, fmt, ap) == -1)
		goto end;
d194 49
a242 4
	res = strlen(msg);
	if (evbuffer_add(buf, msg, res) == -1)
		res = -1;
	free(msg);
d244 1
a244 2
 end:
	va_end(ap);
d246 6
a251 1
	return (res);
d254 2
d257 1
a257 1
evbuffer_add(struct evbuffer *buf, u_char *data, size_t datlen)
d259 5
a263 2
	size_t need = buf->off + datlen;
	size_t oldoff = buf->off;
d265 7
a271 1
	if (buf->totallen < need) {
d273 1
a273 1
		int length = buf->totallen;
d280 2
d285 1
a285 1
		buf->buffer = newbuf;
d289 14
d319 2
d324 3
a326 1
	memmove(buf->buffer, buf->buffer + len, buf->off - len);
d336 6
d343 1
a343 1
evbuffer_read(struct evbuffer *buffer, int fd, int howmuch)
d345 33
a377 5
	u_char inbuf[4096];
	int n;
	
	if (howmuch < 0 || howmuch > sizeof(inbuf))
		howmuch = sizeof(inbuf);
d379 2
a380 1
	n = read(fd, inbuf, howmuch);
d385 8
d394 5
a398 1
	evbuffer_add(buffer, inbuf, n);
d407 3
d411 1
d417 8
a424 1

d431 1
a431 1
evbuffer_find(struct evbuffer *buffer, u_char *what, size_t len)
d437 4
a440 1
	while ((p = memchr(search, *what, remain)) != NULL && remain >= len) {
a442 1

a443 1
		remain = buffer->off - (size_t)(search - buffer->buffer);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.4 2005/04/22 00:56:25 brad Exp $	*/
d30 2
a35 7
#ifdef HAVE_VASPRINTF
/* If we have vasprintf, we need to define this before we include stdio.h. */
#define _GNU_SOURCE
#endif

#include <sys/types.h>

d40 1
a40 4
#ifdef HAVE_SYS_IOCTL_H
#include <sys/ioctl.h>
#endif

d67 2
a68 2
	if (buffer->orig_buffer != NULL)
		free(buffer->orig_buffer);
a76 8
#define SWAP(x,y) do { \
	(x)->buffer = (y)->buffer; \
	(x)->orig_buffer = (y)->orig_buffer; \
	(x)->misalign = (y)->misalign; \
	(x)->totallen = (y)->totallen; \
	(x)->off = (y)->off; \
} while (0)

a80 24

	/* Short cut for better performance */
	if (outbuf->off == 0) {
		struct evbuffer tmp;
		size_t oldoff = inbuf->off;

		/* Swap them directly */
		SWAP(&tmp, outbuf);
		SWAP(outbuf, inbuf);
		SWAP(inbuf, &tmp);

		/* 
		 * Optimization comes with a price; we need to notify the
		 * buffer if necessary of the changes. oldoff is the amount
		 * of data that we tranfered from inbuf to outbuf
		 */
		if (inbuf->off != oldoff && inbuf->cb != NULL)
			(*inbuf->cb)(inbuf, oldoff, inbuf->off, inbuf->cbarg);
		if (oldoff && outbuf->cb != NULL)
			(*outbuf->cb)(outbuf, 0, oldoff, outbuf->cbarg);
		
		return (0);
	}

a92 3
#ifndef HAVE_VASPRINTF
	static char buffer[4096];
#endif
a96 1
#ifdef HAVE_VASPRINTF
a98 9
#else
#  ifdef WIN32
	_vsnprintf(buffer, sizeof(buffer) - 1, fmt, ap);
	buffer[sizeof(buffer)-1] = '\0';
#  else /* ! WIN32 */
	vsnprintf(buffer, sizeof(buffer), fmt, ap);
#  endif
	msg = buffer;
#endif
a102 1
#ifdef HAVE_VASPRINTF
d105 1
a105 2
end:
#endif
a110 2
/* Reads data from an event buffer and drains the bytes read */

d112 1
a112 1
evbuffer_remove(struct evbuffer *buf, void *data, size_t datlen)
d114 2
a115 3
	int nread = datlen;
	if (nread >= buf->off)
		nread = buf->off;
d117 1
a117 34
	memcpy(data, buf->buffer, nread);
	evbuffer_drain(buf, nread);
	
	return (nread);
}

/* Adds data to an event buffer */

static inline void
evbuffer_align(struct evbuffer *buf)
{
	memmove(buf->orig_buffer, buf->buffer, buf->off);
	buf->buffer = buf->orig_buffer;
	buf->misalign = 0;
}

/* Expands the available space in the event buffer to at least datlen */

int
evbuffer_expand(struct evbuffer *buf, size_t datlen)
{
	size_t need = buf->misalign + buf->off + datlen;

	/* If we can fit all the data, then we don't have to do anything */
	if (buf->totallen >= need)
		return (0);

	/*
	 * If the misalignment fulfills our data needs, we just force an
	 * alignment to happen.  Afterwards, we have enough space.
	 */
	if (buf->misalign >= datlen) {
		evbuffer_align(buf);
	} else {
d119 1
a119 1
		size_t length = buf->totallen;
a125 2
		if (buf->orig_buffer != buf->buffer)
			evbuffer_align(buf);
d129 1
a129 1
		buf->orig_buffer = buf->buffer = newbuf;
a132 14
	return (0);
}

int
evbuffer_add(struct evbuffer *buf, void *data, size_t datlen)
{
	size_t need = buf->misalign + buf->off + datlen;
	size_t oldoff = buf->off;

	if (buf->totallen < need) {
		if (evbuffer_expand(buf, datlen) == -1)
			return (-1);
	}

a148 2
		buf->buffer = buf->orig_buffer;
		buf->misalign = 0;
d152 1
a152 3
	buf->buffer += len;
	buf->misalign += len;

a161 6
/*
 * Reads data from a file descriptor into a buffer.
 */

#define EVBUFFER_MAX_READ	4096

d163 1
a163 1
evbuffer_read(struct evbuffer *buf, int fd, int howmuch)
d165 5
a169 13
	u_char *p;
	size_t oldoff = buf->off;
	int n = EVBUFFER_MAX_READ;
#ifdef WIN32
	DWORD dwBytesRead;
#endif

#ifdef FIONREAD
	if (ioctl(fd, FIONREAD, &n) == -1)
		n = EVBUFFER_MAX_READ;
#endif	
	if (howmuch < 0 || howmuch > n)
		howmuch = n;
d171 1
a171 9
	/* If we don't have FIONREAD, we might waste some space here */
	if (evbuffer_expand(buf, howmuch) == -1)
		return (-1);

	/* We can append new data at this point */
	p = buf->buffer + buf->off;

#ifndef WIN32
	n = read(fd, p, howmuch);
a175 8
#else
	n = ReadFile((HANDLE)fd, p, howmuch, &dwBytesRead, NULL);
	if (n == 0)
		return (-1);
	if (dwBytesRead == 0)
		return (0);
	n = dwBytesRead;
#endif
d177 1
a177 5
	buf->off += n;

	/* Tell someone about changes in this buffer */
	if (buf->off != oldoff && buf->cb != NULL)
		(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);
a185 3
#ifdef WIN32
	DWORD dwBytesWritten;
#endif
a186 1
#ifndef WIN32
d192 1
a192 8
#else
	n = WriteFile((HANDLE)fd, buffer->buffer, buffer->off, &dwBytesWritten, NULL);
	if (n == 0)
		return (-1);
	if (dwBytesWritten == 0)
		return (0);
	n = dwBytesWritten;
#endif
@


1.1.1.3
log
@latest fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.5 2005/05/04 03:17:48 brad Exp $	*/
d171 1
a171 1
	size_t nread = datlen;
a180 47
/*
 * Reads a line terminated by either '\r\n', '\n\r' or '\r' or '\n'.
 * The returned buffer needs to be freed by the called.
 */

char *
evbuffer_readline(struct evbuffer *buffer)
{
	char *data = EVBUFFER_DATA(buffer);
	size_t len = EVBUFFER_LENGTH(buffer);
	char *line;
	int i;

	for (i = 0; i < len; i++) {
		if (data[i] == '\r' || data[i] == '\n')
			break;
	}

	if (i == len)
		return (NULL);

	if ((line = malloc(i + 1)) == NULL) {
		fprintf(stderr, "%s: out of memory\n", __func__);
		evbuffer_drain(buffer, i);
		return (NULL);
	}

	memcpy(line, data, i);
	line[i] = '\0';

	/*
	 * Some protocols terminate a line with '\r\n', so check for
	 * that, too.
	 */
	if ( i < len - 1 ) {
		char fch = data[i], sch = data[i+1];

		/* Drain one more character if needed */
		if ( (sch == '\r' || sch == '\n') && sch != fch )
			i += 1;
	}

	evbuffer_drain(buffer, i + 1);

	return (line);
}

@


1.1.1.4
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.7 2005/07/02 07:15:13 grunk Exp $	*/
d80 1
a80 1
/*
d108 1
a108 1
		/*
d189 1
a189 1
	u_char *data = EVBUFFER_DATA(buffer);
d192 1
a192 1
	u_int i;
d337 1
a337 1
	if (ioctl(fd, FIONREAD, &n) == -1 || n == 0)
@


1.1.1.5
log
@Import libevent 1.1b+fixes from OpenBSD-current, thanks
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.13 2007/02/04 18:59:12 millert Exp $	*/
d111 1
a111 1
		 * of data that we transferred from inbuf to outbuf
d122 1
a122 2
	if (res == 0) {
		/* We drain the input buffer on success */
a123 1
	}
d129 1
a129 1
evbuffer_add_vprintf(struct evbuffer *buf, const char *fmt, va_list ap)
d131 6
a136 5
	char *buffer;
	size_t space;
	size_t oldoff = buf->off;
	int sz;
	va_list aq;
d138 1
a138 3
	for (;;) {
		buffer = (char *)buf->buffer + buf->off;
		space = buf->totallen - buf->misalign - buf->off;
d140 3
a142 5
		va_copy(aq, ap);

#ifdef WIN32
		sz = vsnprintf(buffer, space - 1, fmt, aq);
		buffer[space - 1] = '\0';
d144 7
a150 1
		sz = vsnprintf(buffer, space, fmt, aq);
d152 6
d159 2
a160 25
		va_end(aq);

		if (sz == -1)
			return (-1);
		if (sz < space) {
			buf->off += sz;
			if (buf->cb != NULL)
				(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);
			return (sz);
		}
		if (evbuffer_expand(buf, sz + 1) == -1)
			return (-1);
 
	}
	/* NOTREACHED */
}

int
evbuffer_add_printf(struct evbuffer *buf, const char *fmt, ...)
{
	int res = -1;
	va_list ap;

	va_start(ap, fmt);
	res = evbuffer_add_vprintf(buf, fmt, ap);
d337 1
a337 1
	if (ioctl(fd, FIONREAD, &n) == -1 || n == 0) {
a338 13
	} else if (n > EVBUFFER_MAX_READ && n > howmuch) {
		/*
		 * It's possible that a lot of data is available for
		 * reading.  We do not want to exhaust resources
		 * before the reader has a chance to do something
		 * about it.  If the reader does not tell us how much
		 * data we should read, we artifically limit it.
		 */
		if (n > buf->totallen << 2)
			n = buf->totallen << 2;
		if (n < EVBUFFER_MAX_READ)
			n = EVBUFFER_MAX_READ;
	}
d402 1
a402 1
evbuffer_find(struct evbuffer *buffer, const u_char *what, size_t len)
d408 1
a408 4
	while ((p = memchr(search, *what, remain)) != NULL) {
		remain = buffer->off - (size_t)(search - buffer->buffer);
		if (remain < len)
			break;
d411 1
d413 1
@


1.1.1.6
log
@import latest libevent via openbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.14 2007/03/19 15:12:49 millert Exp $	*/
d66 1
a66 1

d117 1
a117 1

a142 3
#ifndef va_copy
#define	va_copy(dst, src)	memcpy(&(dst), &(src), sizeof(va_list))
#endif
d164 1
a164 1

d193 1
a193 1

d208 1
a208 1
	unsigned int i;
d293 1
a293 1
evbuffer_add(struct evbuffer *buf, const void *data, size_t datlen)
d368 1
a368 1
#endif
@


1.1.1.7
log
@import latest stable 1.4 libevent, in the OpenBSD version (diff against portable version reviewed-okay)
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.19 2010/07/17 17:16:47 chl Exp $	*/
a33 5
#ifdef WIN32
#include <winsock2.h>
#include <windows.h>
#endif

a48 1
#include <assert.h>
a60 2
#include "evutil.h"
#include "./log.h"
d66 1
a66 1
	
d80 1
a80 1
/* 
d108 1
a108 1
		/* 
d117 1
a117 1
		
a138 2
	/* make sure that at least some space is available */
	evbuffer_expand(buf, 64);
a139 1
		size_t used = buf->misalign + buf->off;
d141 1
a141 2
		assert(buf->totallen >= used);
		space = buf->totallen - used;
d148 6
a153 1
		sz = evutil_vsnprintf(buffer, space, fmt, aq);
d157 1
a157 1
		if (sz < 0)
d159 1
a159 1
		if ((size_t)sz < space) {
d196 1
a196 1
	
d223 1
a246 86

char *
evbuffer_readln(struct evbuffer *buffer, size_t *n_read_out,
		enum evbuffer_eol_style eol_style)
{
	u_char *data = EVBUFFER_DATA(buffer);
	u_char *start_of_eol, *end_of_eol;
	size_t len = EVBUFFER_LENGTH(buffer);
	char *line;
	unsigned int i, n_to_copy, n_to_drain;

	if (n_read_out)
		*n_read_out = 0;

	/* depending on eol_style, set start_of_eol to the first character
	 * in the newline, and end_of_eol to one after the last character. */
	switch (eol_style) {
	case EVBUFFER_EOL_ANY:
		for (i = 0; i < len; i++) {
			if (data[i] == '\r' || data[i] == '\n')
				break;
		}
		if (i == len)
			return (NULL);
		start_of_eol = data+i;
		++i;
		for ( ; i < len; i++) {
			if (data[i] != '\r' && data[i] != '\n')
				break;
		}
		end_of_eol = data+i;
		break;
	case EVBUFFER_EOL_CRLF:
		end_of_eol = memchr(data, '\n', len);
		if (!end_of_eol)
			return (NULL);
		if (end_of_eol > data && *(end_of_eol-1) == '\r')
			start_of_eol = end_of_eol - 1;
		else
			start_of_eol = end_of_eol;
		end_of_eol++; /*point to one after the LF. */
		break;
	case EVBUFFER_EOL_CRLF_STRICT: {
		u_char *cp = data;
		while ((cp = memchr(cp, '\r', len-(cp-data)))) {
			if (cp < data+len-1 && *(cp+1) == '\n')
				break;
			if (++cp >= data+len) {
				cp = NULL;
				break;
			}
		}
		if (!cp)
			return (NULL);
		start_of_eol = cp;
		end_of_eol = cp+2;
		break;
	}
	case EVBUFFER_EOL_LF:
		start_of_eol = memchr(data, '\n', len);
		if (!start_of_eol)
			return (NULL);
		end_of_eol = start_of_eol + 1;
		break;
	default:
		return (NULL);
	}

	n_to_copy = start_of_eol - data;
	n_to_drain = end_of_eol - data;

	if ((line = malloc(n_to_copy+1)) == NULL) {
		event_warn("%s: out of memory\n", __func__);
		return (NULL);
	}

	memcpy(line, data, n_to_copy);
	line[n_to_copy] = '\0';

	evbuffer_drain(buffer, n_to_drain);
	if (n_read_out)
		*n_read_out = (size_t)n_to_copy;

	return (line);
}

d249 1
a249 1
static void
a350 2

#if defined(FIONREAD)
d352 1
a352 4
	long lng = n;
	if (ioctlsocket(fd, FIONREAD, &lng) == -1 || (n=lng) <= 0) {
#else
	if (ioctl(fd, FIONREAD, &n) == -1 || n <= 0) {
d354 3
d366 1
a366 1
		if ((size_t)n > buf->totallen << 2)
d371 1
a371 1
#endif	
a383 3
#else
	n = recv(fd, p, howmuch, 0);
#endif
d388 8
d410 3
a415 3
#else
	n = send(fd, buffer->buffer, buffer->off, 0);
#endif
d420 8
d436 2
a437 1
	u_char *search = buffer->buffer, *end = search + buffer->off;
d440 3
a442 3
	while (search < end &&
	    (p = memchr(search, *what, end - search)) != NULL) {
		if (p + len > end)
@


