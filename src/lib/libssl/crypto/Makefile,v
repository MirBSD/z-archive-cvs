head	1.45;
access;
symbols
	cvs-200804031830:1.1.1.7
	MIRBSD_10:1.20.0.2
	MIRBSD_10_BASE:1.20
	cvs-200706161500:1.1.1.7
	cvs-200705171600:1.1.1.6
	OPENBSD_4_0:1.1.1.6
	MIRBSD_9_BASE:1.13
	MIRBSD_8:1.10.0.2
	MIRBSD_8_BASE:1.10
	cvs-200512060130:1.1.1.5
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.45
date	2015.10.26.21.54.51;	author tg;	state Exp;
branches;
next	1.44;
commitid	100562EA13929194F9F;

1.44
date	2015.10.26.15.43.48;	author tg;	state Exp;
branches;
next	1.43;
commitid	100562E4A3B79650529;

1.43
date	2015.10.09.22.20.27;	author tg;	state Exp;
branches;
next	1.42;
commitid	10056183DBE5736D30A;

1.42
date	2015.07.18.22.48.20;	author tg;	state Exp;
branches;
next	1.41;
commitid	10055AAD7BC6B247CCA;

1.41
date	2014.12.15.21.04.20;	author tg;	state Exp;
branches;
next	1.40;
commitid	100548F4CC703E2776F;

1.40
date	2014.11.30.21.56.18;	author tg;	state Exp;
branches;
next	1.39;
commitid	100547B929B79BDA39E;

1.39
date	2014.11.30.01.59.37;	author tg;	state Exp;
branches;
next	1.38;
commitid	100547A79D40E397510;

1.38
date	2014.11.30.01.30.06;	author tg;	state Exp;
branches;
next	1.37;
commitid	100547A733613A7D176;

1.37
date	2014.11.30.00.51.29;	author tg;	state Exp;
branches;
next	1.36;
commitid	100547A6A2908978BDA;

1.36
date	2014.11.30.00.23.22;	author tg;	state Exp;
branches;
next	1.35;
commitid	100547A638E1B32DC52;

1.35
date	2014.11.30.00.12.56;	author tg;	state Exp;
branches;
next	1.34;
commitid	100547A6120450D078B;

1.34
date	2014.11.30.00.01.45;	author tg;	state Exp;
branches;
next	1.33;
commitid	100547A5E7E7A00F967;

1.33
date	2014.11.30.00.01.20;	author tg;	state Exp;
branches;
next	1.32;
commitid	100547A5E5F1D9739E9;

1.32
date	2014.11.29.23.47.03;	author tg;	state Exp;
branches;
next	1.31;
commitid	100547A5ABB3AF49A1B;

1.31
date	2014.11.29.23.00.29;	author tg;	state Exp;
branches;
next	1.30;
commitid	100547A50124DCAD6B0;

1.30
date	2014.11.29.22.41.57;	author tg;	state Exp;
branches;
next	1.29;
commitid	100547A4BCD656CA592;

1.29
date	2014.11.29.22.18.31;	author tg;	state Exp;
branches;
next	1.28;
commitid	100547A46266F534C4C;

1.28
date	2014.11.26.19.52.50;	author tg;	state Exp;
branches;
next	1.27;
commitid	10054762FA77E4200D6;

1.27
date	2014.11.26.19.36.00;	author tg;	state Exp;
branches;
next	1.26;
commitid	10054762BB730B9824E;

1.26
date	2014.11.26.19.22.06;	author tg;	state Exp;
branches;
next	1.25;
commitid	1005476283E2526F9BB;

1.25
date	2014.06.05.13.32.18;	author tg;	state Exp;
branches;
next	1.24;
commitid	1005390715E06A58FAE;

1.24
date	2014.03.23.22.50.56;	author tg;	state Exp;
branches;
next	1.23;
commitid	100532F65680D3A8755;

1.23
date	2014.03.13.05.48.21;	author tg;	state Exp;
branches;
next	1.22;
commitid	100532146A3061EE0CD;

1.22
date	2014.03.13.03.55.09;	author tg;	state Exp;
branches;
next	1.21;
commitid	10053212C2D21633710;

1.21
date	2009.02.14.15.07.15;	author tg;	state Exp;
branches;
next	1.20;
commitid	1004996DE266441BCA6;

1.20
date	2007.06.16.15.23.17;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004674007B7EB1F3EA;

1.19
date	2007.05.17.18.38.35;	author tg;	state Exp;
branches;
next	1.18;
commitid	100464CA0BC3310E768;

1.18
date	2007.05.08.22.38.59;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004640FBBB11A9CFA0;

1.17
date	2006.10.15.00.53.04;	author tg;	state Exp;
branches;
next	1.16;
commitid	1004531867C62C7E39E;

1.16
date	2006.09.29.21.08.26;	author tg;	state Exp;
branches;
next	1.15;
commitid	100451D8B4970B35118;

1.15
date	2006.09.20.20.38.14;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004511A6C160F978C8;

1.14
date	2006.09.20.20.14.05;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004511A0FE53EA11E9;

1.13
date	2006.06.17.22.11.32;	author tg;	state Exp;
branches;
next	1.12;
commitid	10044947A600871A477;

1.12
date	2006.06.11.00.22.18;	author tg;	state Exp;
branches;
next	1.11;
commitid	100448B62461D023A55;

1.11
date	2006.03.27.19.30.35;	author tg;	state Exp;
branches;
next	1.10;
commitid	10044283D59490BB566;

1.10
date	2005.12.06.01.46.44;	author tg;	state Exp;
branches;
next	1.9;
commitid	3ec54394ed9a4fd0;

1.9
date	2005.10.21.11.02.54;	author tg;	state Exp;
branches;
next	1.8;
commitid	6c0b4358cac0ef88;

1.8
date	2005.04.30.22.54.15;	author tg;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.14.39.25;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.13.52.24;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.26.15.36.19;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.15.18.51.38;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.15.17.33.41;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.20.29.24;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.25.33;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.25.33;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.26.14.53.19;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.13.38.33;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.07.21.20.54.42;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	560042e0092f571e;

1.1.1.5
date	2005.12.06.01.35.12;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	1dc34394eada9eb8;

1.1.1.6
date	2006.09.20.19.06.53;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	10045119150397FC669;

1.1.1.7
date	2007.06.16.15.10.47;	author tg;	state Exp;
branches;
next	;
commitid	1004673FD85114A3F32;


desc
@@


1.45
log
@use MirBSD-specific path to definitely get system header paths
@
text
@# $MirOS: src/lib/libssl/crypto/Makefile,v 1.43 2015/10/09 22:20:27 tg Exp $
# $OpenBSD: Makefile,v 1.46 2006/10/14 19:43:57 drahn Exp $

.include <bsd.own.mk>

SHLIB_VERSION?=	16.1
LIB=		crypto
LDFLAGS+=	-Wl,-Bsymbolic

SSLEAYDIST=	src
SSL_SRC=	${.CURDIR}/../${SSLEAYDIST}
LCRYPTO_SRC=	${SSL_SRC}/crypto

CPPFLAGS+=	-I${.CURDIR}/../${SSLEAYDIST} -I${LCRYPTO_SRC}
CPPFLAGS+=	-idirafter ${.OBJDIR}

SRCS+=	o_time.c
SRCS+=	cryptlib.c ex_data.c cpt_err.c mem.c mem_dbg.c
SRCS+=	tmdiff.c cversion.c uid.c
SRCS+=	md2_dgst.c md2_one.c
SRCS+=	hmac.c
SRCS+=	aes_cbc.c aes_cfb.c aes_ctr.c aes_ecb.c aes_ofb.c aes_misc.c
SRCS+=	cbc_cksm.c cbc_enc.c cfb64enc.c cfb_enc.c \
	ecb3_enc.c ecb_enc.c enc_read.c enc_writ.c \
	ofb64enc.c ofb_enc.c pcbc_enc.c \
	qud_cksm.c rand_key.c rpc_enc.c set_key.c \
	des_enc.c des_old2.c fcrypt_b.c \
	fcrypt.c xcbc_enc.c ede_cbcm_enc.c \
	str2key.c cfb64ede.c ofb64ede.c \
	des_old.c read2pwd.c
SRCS+=	rc2_ecb.c rc2_skey.c rc2_cbc.c rc2cfb64.c
SRCS+=	rc2ofb64.c
SRCS+=	bf_cfb64.c bf_ecb.c bf_enc.c bf_ofb64.c bf_skey.c
SRCS+=	c_skey.c c_ecb.c c_cfb64.c c_ofb64.c c_enc.c
SRCS+=	bn_add.c bn_div.c bn_exp.c bn_lib.c
SRCS+=	bn_mul.c bn_print.c bn_rand.c bn_shift.c
SRCS+=	bn_word.c bn_blind.c bn_gcd.c bn_prime.c bn_err.c
SRCS+=	bn_sqr.c bn_recp.c bn_mont.c bn_mpi.c bn_mod.c
SRCS+=	bn_exp2.c bn_ctx.c
SRCS+=	bn_sqrt.c bn_kron.c bn_x931p.c
SRCS+=	rsa_eay.c rsa_gen.c rsa_lib.c rsa_sign.c
SRCS+=	rsa_saos.c rsa_err.c rsa_pk1.c rsa_ssl.c
SRCS+=	rsa_none.c rsa_chk.c rsa_oaep.c rsa_null.c rsa_asn1.c
SRCS+=	rsa_pss.c rsa_x931.c
SRCS+=	dsa_gen.c dsa_key.c dsa_lib.c dsa_vrf.c
SRCS+=	dsa_sign.c dsa_err.c dsa_asn1.c dsa_ossl.c
SRCS+=	dh_gen.c dh_key.c dh_lib.c dh_check.c dh_err.c dh_asn1.c
SRCS+=	buffer.c buf_err.c
SRCS+=	bio_lib.c bio_cb.c bio_err.c bss_mem.c
SRCS+=	bss_null.c bss_fd.c bss_file.c bss_sock.c
SRCS+=	bss_conn.c bf_null.c bf_buff.c
SRCS+=	b_print.c b_dump.c b_sock.c bss_acpt.c
SRCS+=	bf_nbio.c bss_bio.c bss_log.c
SRCS+=	stack.c
SRCS+=	lhash.c lh_stats.c
SRCS+=	randfile.c rand_lib.c rand_egd.c rand_err.c
SRCS+=	mbsdrand.c
SRCS+=	err.c err_all.c err_prn.c
SRCS+=	obj_dat.c obj_lib.c obj_err.c o_names.c
SRCS+=	bio_b64.c e_bf.c p_open.c
SRCS+=	bio_enc.c e_cast.c e_xcbc_d.c m_dss.c m_sha1.c p_seal.c
SRCS+=	bio_md.c e_des.c encode.c m_dss1.c names.c p_sign.c
SRCS+=	bio_ok.c e_des3.c evp_enc.c m_md2.c p_verify.c
SRCS+=	c_all.c evp_err.c evp_acnf.c m_md4.c p5_crpt.c e_old.c
SRCS+=	c_allc.c evp_key.c m_md5.c p5_crpt2.c
SRCS+=	c_alld.c e_null.c evp_lib.c p_dec.c
SRCS+=	digest.c e_rc2.c evp_pbe.c m_null.c p_enc.c
SRCS+=	e_aes.c e_rc4.c evp_pkey.c m_ripemd.c p_lib.c
SRCS+=	pem_sign.c pem_seal.c pem_info.c pem_lib.c pem_pkey.c
SRCS+=	pem_all.c pem_err.c pem_x509.c pem_pk8.c pem_oth.c pem_xaux.c
SRCS+=	ui_err.c ui_lib.c ui_openssl.c ui_compat.c ui_util.c
SRCS+=	a_bitstr.c a_mbstr.c a_utctm.c f_enum.c t_bitst.c x_name.c x_pubkey.c
SRCS+=	a_bool.c a_meth.c a_utf8.c f_int.c t_crl.c tasn_typ.c x_pkey.c
SRCS+=	a_bytes.c a_object.c a_verify.c f_string.c t_pkey.c tasn_utl.c
SRCS+=	a_d2i_fp.c a_octet.c asn1_err.c i2d_pr.c t_req.c x_algor.c x_req.c
SRCS+=	a_digest.c a_print.c asn1_lib.c i2d_pu.c t_spki.c x_attrib.c x_sig.c
SRCS+=	a_dup.c a_set.c asn1_par.c n_pkey.c t_x509.c x_bignum.c x_spki.c
SRCS+=	a_enum.c a_sign.c asn_pack.c nsseq.c t_x509a.c x_val.c
SRCS+=	a_gentm.c a_strex.c d2i_pr.c p5_pbe.c tasn_dec.c x_crl.c x_x509.c
SRCS+=	a_hdr.c a_strnid.c d2i_pu.c p5_pbev2.c tasn_enc.c x_exten.c x_x509a.c
SRCS+=	a_i2d_fp.c a_time.c evp_asn1.c tasn_fre.c x_info.c
SRCS+=	a_int.c a_type.c p8_pkey.c tasn_new.c x_long.c asn_moid.c
SRCS+=	x509_d2.c x509_lu.c x509_set.c x509_vfy.c x509spki.c by_dir.c
SRCS+=	x509_def.c x509_obj.c x509_trs.c x509cset.c x509type.c by_file.c
SRCS+=	x509_att.c x509_err.c x509_r2x.c x509_txt.c x509name.c x_all.c
SRCS+=	x509_cmp.c x509_ext.c x509_req.c x509_v3.c x509rset.c
SRCS+=	v3_akey.c v3_alt.c v3_bcons.c v3_bitst.c v3_conf.c v3_cpols.c
SRCS+=	v3_crld.c v3_enum.c v3_extku.c v3_genn.c v3_hex.c v3_ia5.c v3_int.c
SRCS+=	v3_lib.c v3_pku.c v3_prn.c v3_skey.c v3_sxnet.c v3_utl.c
SRCS+=	v3err.c v3_info.c v3_purp.c v3_ocsp.c v3_akeya.c v3_pci.c v3_pcia.c
SRCS+=	conf_err.c conf_lib.c conf_def.c conf_api.c conf_mod.c conf_mall.c
SRCS+=	conf_sap.c
SRCS+=	txt_db.c
SRCS+=	pk7_lib.c pkcs7err.c
SRCS+=	pk7_asn1.c pk7_doit.c pk7_mime.c
SRCS+=	pk7_attr.c pk7_smime.c
SRCS+=	p12_add.c p12_crpt.c p12_init.c p12_mutl.c p12_p8e.c
SRCS+=	p12_asn.c p12_crt.c p12_key.c p12_npas.c p12_utl.c
SRCS+=	p12_attr.c p12_decr.c p12_kiss.c p12_p8d.c pk12err.c
SRCS+=	eng_all.c eng_openssl.c eng_ctrl.c eng_pkey.c
SRCS+=	eng_dyn.c eng_table.c tb_cipher.c eng_err.c
SRCS+=	hw_cryptodev.c eng_cnf.c
SRCS+=	tb_dh.c eng_fat.c tb_digest.c eng_init.c
SRCS+=	tb_dsa.c eng_lib.c tb_rand.c eng_list.c
SRCS+=	tb_rsa.c
SRCS+=	dso_dl.c dso_dlfcn.c dso_err.c dso_lib.c dso_null.c
SRCS+=	dso_openssl.c dso_win32.c dso_vms.c
SRCS+=	ocsp_asn.c ocsp_err.c ocsp_ht.c ocsp_prn.c ocsp_vfy.c
SRCS+=	ocsp_cl.c ocsp_ext.c ocsp_lib.c ocsp_srv.c

.PATH:	${LCRYPTO_SRC}/md2 \
	${LCRYPTO_SRC}/hmac ${LCRYPTO_SRC}/bf \
	${LCRYPTO_SRC}/des ${LCRYPTO_SRC}/rc2 \
	${LCRYPTO_SRC}/cast ${LCRYPTO_SRC}/bn ${LCRYPTO_SRC}/rsa \
	${LCRYPTO_SRC}/dsa ${LCRYPTO_SRC}/dh ${LCRYPTO_SRC}/buffer \
	${LCRYPTO_SRC}/bio ${LCRYPTO_SRC}/stack ${LCRYPTO_SRC}/lhash \
	${LCRYPTO_SRC}/rand ${LCRYPTO_SRC}/err ${LCRYPTO_SRC}/objects \
	${LCRYPTO_SRC}/evp ${LCRYPTO_SRC}/pem ${LCRYPTO_SRC}/asn1 \
	${LCRYPTO_SRC}/asn1 ${LCRYPTO_SRC}/x509 ${LCRYPTO_SRC}/conf \
	${LCRYPTO_SRC}/pkcs7 ${LCRYPTO_SRC}/x509v3 ${LCRYPTO_SRC}/pkcs12 \
	${LCRYPTO_SRC}/txt_db \
	${LCRYPTO_SRC}/engine ${LCRYPTO_SRC}/dso ${LCRYPTO_SRC}/ui \
	${LCRYPTO_SRC}/ocsp ${LCRYPTO_SRC}/aes \
	${LCRYPTO_SRC} ${.CURDIR}/arch/${MACHINE_ARCH} \
	${LCRYPTO_SRC}/bn/asm

HDRS=\
	crypto/aes/aes.h \
	crypto/asn1/asn1.h \
	crypto/asn1/asn1_mac.h \
	crypto/asn1/asn1t.h \
	crypto/bf/blowfish.h \
	crypto/bio/bio.h \
	crypto/bn/bn.h \
	crypto/buffer/buffer.h \
	crypto/cast/cast.h \
	crypto/conf/conf.h \
	crypto/conf/conf_api.h \
	crypto/crypto.h \
	crypto/des/des.h \
	crypto/des/des_old.h \
	crypto/dh/dh.h \
	crypto/dsa/dsa.h \
	crypto/dso/dso.h \
	crypto/ebcdic.h \
	crypto/engine/engine.h \
	crypto/err/err.h \
	crypto/evp/evp.h \
	crypto/hmac/hmac.h \
	crypto/lhash/lhash.h \
	crypto/md2/md2.h \
	${.CURDIR}/md4.h \
	${.OBJDIR}/md5.h \
	crypto/objects/objects.h \
	crypto/ocsp/ocsp.h \
	crypto/opensslv.h \
	crypto/ossl_typ.h \
	crypto/pem/pem.h \
	crypto/pem/pem2.h \
	crypto/pkcs12/pkcs12.h \
	crypto/pkcs7/pkcs7.h \
	crypto/rand/rand.h \
	crypto/rc2/rc2.h \
	${.CURDIR}/rc4.h \
	${.CURDIR}/ripemd.h \
	crypto/rsa/rsa.h \
	${.CURDIR}/sha.h \
	crypto/stack/safestack.h \
	crypto/stack/stack.h \
	crypto/symhacks.h \
	crypto/tmdiff.h \
	crypto/txt_db/txt_db.h \
	crypto/ui/ui.h \
	crypto/ui/ui_compat.h \
	crypto/x509/x509.h \
	crypto/x509/x509_vfy.h \
	crypto/x509v3/x509v3.h \
	e_os2.h \
	${.CURDIR}/fips.h \
	${.CURDIR}/fips_rand.h \
	${.CURDIR}/arch/${MACHINE_ARCH}/opensslconf.h \
	${.OBJDIR}/obj_mac.h
HDRSRC=	${SSL_SRC}
HDRDST=	${DESTDIR}/usr/include/openssl

prereq: obj_mac.h

GENERATED+=	md5.h
CLEANFILES+=	mbsd_md5.c

prereq: md5.h

md5.h: md4.h
	sed -e 's/md4/md5/g' -e 's/MD4/MD5/g' <$> >$@@

mbsd_md5.c: mbsd_md4.c
	sed -e 's/md4/md5/g' -e 's/MD4/MD5/g' <$> >$@@

.for _i in md4 md5 rmd160 sha1
CLEANFILES+=	mbsd_${_i}_one.c
SRCS+=		mbsd_${_i}_one.c

mbsd_${_i}_one.c: mbsd_${_i}.c
	-unifdef -DL_one $> >$@@
.endfor

GENERATED+=	obj_mac.h obj_dat.h
CLEANFILES+=	${GENERATED} obj_mac.num.tmp
SSL_OBJECTS=	${SSL_SRC}/crypto/objects

obj_mac.h: ${SSL_OBJECTS}/objects.h ${SSL_OBJECTS}/obj_mac.num ${SSL_OBJECTS}/objects.txt
	cat ${SSL_OBJECTS}/obj_mac.num >obj_mac.num.tmp
	/usr/bin/perl ${SSL_OBJECTS}/objects.pl ${SSL_OBJECTS}/objects.txt obj_mac.num.tmp obj_mac.h

obj_dat.h: obj_mac.h
	/usr/bin/perl ${SSL_OBJECTS}/obj_dat.pl obj_mac.h obj_dat.h

.if (${MACHINE_ARCH} == "i386")
CPPFLAGS+= -DAES_ASM
CPPFLAGS+= -DOPENBSD_DES_ASM
SSLASM=\
	aes aes-586 \
	bn bn-586 \
	bn co-586 \
	des des-586
.  for dir f in ${SSLASM}
SRCS+=	${f}.S
GENERATED+=${f}.S
${f}.S: ${LCRYPTO_SRC}/${dir}/asm/${f}.pl ${LCRYPTO_SRC}/perlasm/x86unix.pl
	/usr/bin/perl -I${LCRYPTO_SRC}/perlasm -I${LCRYPTO_SRC}/${dir}/asm \
		${LCRYPTO_SRC}/${dir}/asm/${f}.pl openbsd-elf 486 >$@@
.  endfor
.else
SRCS+= aes_core.c
SRCS+= bn_asm.c
.endif

SRCS+=	mbsd_memclr.c
SRCS+=	mbsd_rc4.c

SRCS+=	mbsd_md4.c
SRCS+=	mbsd_md5.c
SRCS+=	mbsd_rmd160.c
SRCS+=	mbsd_sha1.c

all beforedepend: ${GENERATED}

.include <bsd.lib.mk>
@


1.44
log
@unbreak curl port and all others who add -Ifoo and have foo/md5.h

XXX do this for all the other system headers, too
@
text
@d194 1
a194 3
	sed -e 's/md4/md5/g' -e 's/MD4/MD5/g' \
	    -e 's!#include <md5.h>!#include <syskern/md5.h>!' \
	    <$> >$@@
@


1.43
log
@NO_WINDOWS_BRAINDEATH is implicit for us
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.42 2015/07/18 22:48:20 tg Exp $
d194 3
a196 1
	sed -e 's/md4/md5/g' -e 's/MD4/MD5/g' <$> >$@@
@


1.42
log
@bump; this was enough to get SHA2 in openssltool(1) apparently
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.41 2014/12/15 21:04:20 tg Exp $
a13 1
CPPFLAGS+=	-DNO_WINDOWS_BRAINDEATH
@


1.41
log
@inline wrappers instead of having one more function call plus some
assorted stack shuffling (especially where argument order differs)
which gives us a small but nice speedup and another size reduction
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.40 2014/11/30 21:56:18 tg Exp $
d6 1
a6 1
SHLIB_VERSION?=	16.0
@


1.40
log
@Makefile fix
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.39 2014/11/30 01:59:37 tg Exp $
d200 8
@


1.39
log
@… and CAST. That’s it. AES is not in libc, and DES scares me silly.

Bad thing here: CAST has useless use of bswap award. We cannot fix
this without adding API to libc. But I’d prefer to not have those
huge S-boxen in two places, so it’s either do that or remove CAST
from OpenSSL altogether (it’s not in TLS anyway, just in crypto,
and GnuPG ships its own).
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.38 2014/11/30 01:30:06 tg Exp $
d200 2
a201 2
GENERATED=	obj_mac.h obj_dat.h
CLEANFILES=	${GENERATED} obj_mac.num.tmp
@


1.38
log
@… and Blowfish, at least partially
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.37 2014/11/30 00:51:29 tg Exp $
a212 1
CPPFLAGS+= -DOPENBSD_CAST_ASM
a217 1
	cast cast-586 \
@


1.37
log
@… and aRC4
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.36 2014/11/30 00:23:22 tg Exp $
d34 1
a34 1
SRCS+=	bf_skey.c bf_ecb.c bf_cfb64.c bf_ofb64.c
a216 1
	bf bf-586 \
a227 1
SRCS+= bf_cbc.c
a229 1
SRCS+= bf_enc.c
@


1.36
log
@… and for RIPEMD160
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.35 2014/11/30 00:12:56 tg Exp $
a33 1
SRCS+=	rc4_skey.c
d114 1
a114 1
	${LCRYPTO_SRC}/des ${LCRYPTO_SRC}/rc2 ${LCRYPTO_SRC}/rc4 \
d165 1
a165 1
	crypto/rc4/rc4.h \
d221 1
a221 2
	des des-586 \
	rc4 rc4-586
a233 1
SRCS+= rc4_enc.c
d237 1
@


1.35
log
@… and SHA1
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.34 2014/11/30 00:01:45 tg Exp $
a22 1
SRCS+=	rmd_dgst.c rmd_one.c
d114 1
a114 1
	${LCRYPTO_SRC}/hmac ${LCRYPTO_SRC}/ripemd ${LCRYPTO_SRC}/bf \
d167 1
a167 1
	crypto/ripemd/ripemd.h \
d190 10
a199 12
.for _hash in md5
GENERATED+=	${_hash}.h
CLEANFILES+=	mbsd_${_hash}.c

prereq: ${_hash}.h

${_hash}.h: md4.h
	sed -e 's/md4/${_hash}/g' -e 's/MD4/${_hash:U}/g' <$> >$@@

mbsd_${_hash}.c: mbsd_md4.c
	sed -e 's/md4/${_hash}/g' -e 's/MD4/${_hash:U}/g' <$> >$@@
.endfor
a213 2
CPPFLAGS+= -DMD5_ASM
CPPFLAGS+= -DRMD160_ASM
d223 1
a223 2
	rc4 rc4-586 \
	ripemd rmd-586
d243 1
@


1.34
log
@same for MD5
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.31 2014/11/29 23:00:29 tg Exp $
a21 1
SRCS+=	sha1dgst.c sha1_one.c
d114 1
a114 1
.PATH:	${LCRYPTO_SRC}/md2 ${LCRYPTO_SRC}/sha \
d170 1
a170 1
	crypto/sha/sha.h \
a217 1
CPPFLAGS+= -DSHA1_ASM
d229 1
a229 2
	ripemd rmd-586 \
	sha sha1-586
d249 1
@


1.33
log
@include change for OBJDIR to come after /usr/include
@
text
@a21 1
SRCS+=	md5_dgst.c md5_one.c
d115 1
a115 1
.PATH:	${LCRYPTO_SRC}/md2 ${LCRYPTO_SRC}/md5 ${LCRYPTO_SRC}/sha \
d157 1
a157 1
	crypto/md5/md5.h \
d192 13
a229 1
	md5 md5-586 \
d251 1
@


1.32
log
@replace OpenSSL’s MD4 by minimal adapter around MirBSD implementation

type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
OpenSSL           7986.94k    29371.09k    90663.33k   192134.21k   285419.63k
MirBSD            7824.78k    25051.96k    62529.97k   103412.33k   126034.92k

This saves us 4491 bytes in the .so file though, and is much better
for maintenance and sustainability (especially with SHA-2 yet to come).
Also, having only one codepath is better.
@
text
@d15 2
a16 1
CPPFLAGS+=	-I${.CURDIR}/../${SSLEAYDIST} -I${LCRYPTO_SRC} -I.
@


1.31
log
@add compiler memory barrier to explicit_bzero; use that for OPENSSL_cleanse
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.30 2014/11/29 22:41:57 tg Exp $
a72 1
SRCS+=	md4_dgst.c md4_one.c
d125 1
a125 1
	${LCRYPTO_SRC}/txt_db ${LCRYPTO_SRC}/md4 \
d156 1
a156 1
	crypto/md4/md4.h \
d238 2
@


1.30
log
@drop SHA0
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.29 2014/11/29 22:18:31 tg Exp $
d18 1
a18 1
SRCS+=	cryptlib.c ex_data.c cpt_err.c mem.c mem_dbg.c mem_clr.c
d237 2
@


1.29
log
@• clean up CPPFLAGS
• move most of the Makefile.inc-ish stuff into the header
• while here, switch from i386 to i486 for assembly CPU level
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.28 2014/11/26 19:52:50 tg Exp $
d22 1
a22 1
SRCS+=	sha_dgst.c sha1dgst.c sha_one.c sha1_one.c
d64 1
a64 1
SRCS+=	bio_b64.c e_bf.c m_sha.c p_open.c
@


1.28
log
@drop compression
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.27 2014/11/26 19:36:00 tg Exp $
d14 3
a16 5
CPPFLAGS+= -DNO_ERR -DNO_WINDOWS_BRAINDEATH -DOPENSSL_NO_EC
CPPFLAGS+= -DOPENSSL_NO_HW_CSWIFT -DOPENSSL_NO_HW_NCIPHER -DOPENSSL_NO_HW_ATALLA
CPPFLAGS+= -DOPENSSL_NO_HW_NURON -DOPENSSL_NO_HW_UBSEC -DOPENSSL_NO_HW_AEP
CPPFLAGS+= -DOPENSSL_NO_HW_SUREWARE -DOPENSSL_NO_HW_4758_CCA
CPPFLAGS+= -I${.CURDIR}/../${SSLEAYDIST} -I${LCRYPTO_SRC} -I.
d227 1
a227 1
		${LCRYPTO_SRC}/${dir}/asm/${f}.pl openbsd-elf 386 >$@@
@


1.27
log
@drop acss
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.26 2014/11/26 19:22:06 tg Exp $
a103 1
SRCS+=	c_rle.c c_zlib.c comp_lib.c comp_err.c
d128 1
a128 1
	${LCRYPTO_SRC}/comp ${LCRYPTO_SRC}/txt_db ${LCRYPTO_SRC}/md4 \
a143 1
	crypto/comp/comp.h \
@


1.26
log
@bump libcrypto and libssl major in preparation of things to come
while here, remove IDEA, MDC2 and RC5 (make MKC_USAP a nop) – as
they are ancient algorithms not really used in OpenSSL, with not
few more to come…
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.25 2014/06/05 13:32:18 tg Exp $
a26 1
SRCS+=	acss_skey.c acss_enc.c
d74 1
a74 1
SRCS+=	e_acss.c e_aes.c e_rc4.c evp_pkey.c m_ripemd.c p_lib.c
d132 1
a132 1
	${LCRYPTO_SRC} ${LCRYPTO_SRC}/acss ${.CURDIR}/arch/${MACHINE_ARCH} \
a135 1
	crypto/acss/acss.h \
@


1.25
log
@remove EC (which was not part of 0.9.7 anyway) and ZLIB
should require no major bump (due to the above), bump minor for now (test)
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.24 2014/03/23 22:50:56 tg Exp $
d6 1
a6 1
SHLIB_VERSION?=	15.1
a24 3
.if ${MKC_USAP:L} != "yes"
SRCS+=	mdc2dgst.c mdc2_one.c m_mdc2.c
.endif
a39 5
.if ${MKC_USAP:L} != "yes"
SRCS+=	rc5_ecb.c rc5_enc.c rc5_skey.c rc5cfb64.c rc5ofb64.c e_rc5.c
# http://www.mediacrypt.com/_contents/10_idea/102040_li_nc.asp
SRCS+=	i_cbc.c i_cfb64.c i_ofb64.c i_ecb.c i_skey.c e_idea.c
.endif
d121 1
a121 1
	${LCRYPTO_SRC}/mdc2 ${LCRYPTO_SRC}/hmac ${LCRYPTO_SRC}/ripemd \
a122 1
	${LCRYPTO_SRC}/rc5 ${LCRYPTO_SRC}/idea ${LCRYPTO_SRC}/bf \
a160 1
	crypto/idea/idea.h \
a164 1
	crypto/mdc2/mdc2.h \
a175 1
	crypto/rc5/rc5.h \
@


1.24
log
@backport enough to make -subject_hash_old an alias for the current -hash, and add -subject_hash with ossl 1.x behaviour, work
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.23 2014/03/13 05:48:21 tg Exp $
d6 1
a6 1
SHLIB_VERSION?=	15.0
a7 2
DPADD+=		${LIBZ}
LDADD+=		-lz
d14 1
a14 1
CPPFLAGS+= -DNO_ERR -DNO_WINDOWS_BRAINDEATH -DZLIB
a126 2
SRCS+=	ec_cvt.c ec_lib.c ecp_mont.c ecp_recp.c
SRCS+=	ec_err.c ec_mult.c ecp_nist.c ecp_smpl.c
d141 1
a141 1
	${LCRYPTO_SRC}/ocsp ${LCRYPTO_SRC}/ec ${LCRYPTO_SRC}/aes \
a165 1
	crypto/ec/ec.h \
@


1.23
log
@meh, stop already with exposing libc interna like that
just invent our own private interface for RNG state hackery if needed
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.22 2014/03/13 03:55:09 tg Exp $
d6 1
a6 1
SHLIB_VERSION?=	14.1
@


1.22
log
@rip out ssleay rng; use arc4random(3) directly
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.21 2009/02/14 15:07:15 tg Exp $
a131 2
CPPFLAGS+= -DLIBC_TPH=\"${BSDSRCDIR:Q}/lib/libc/include/thread_private.h\"

@


1.21
log
@by suggestion from http://marc.info/?l=netbsd-tech-userlevel&m=123359850822372
link libcrypto and libssl with -Bsymbolic
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.20 2007/06/16 15:23:17 tg Exp $
d73 2
a74 1
SRCS+=	md_rand.c randfile.c rand_lib.c	rand_egd.c rand_err.c rand_unix.c
d132 2
@


1.20
log
@fastmerge
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.19 2007/05/17 18:38:35 tg Exp $
d10 1
@


1.19
log
@more includes-target overhaul:
• document it
• do it for <bsd.prog.mk> too
• move it to <bsd.sys.mk>, handle generation by <bsd.subdir.mk>
• add /usr/include/openssl to mtree(8) base system tree file
• have all libs and flex use the generic target
• clean them up; repair a few bugs
@
text
@d1 2
a2 2
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.18 2007/05/08 22:38:59 tg Exp $
# $OpenBSD: Makefile,v 1.45 2006/06/27 05:07:47 djm Exp $
@


1.18
log
@• add new directory to base: /usr/share/pkgconfig
• ports/devel/pkgconfig module: use it
• src/lib/libssl: add a pregenerated "openssl.pc" file; install it
• while here, enable the zlib compression in openssl, link against libz,
  bump minor (not needed for libz link due to DT_RPATH, but because c_zlib.c
  exports some new functions)
• sync lists
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.17 2006/10/15 00:53:04 tg Exp $
d206 1
a206 3
	${.CURDIR}/fips_rand.h

HDRS_GEN=\
d209 2
a213 11
includes:
	@@test -d ${DESTDIR}/usr/include/openssl || \
	    mkdir ${DESTDIR}/usr/include/openssl
	@@cd ${SSL_SRC}; \
	for i in $(HDRS) $(HDRS_GEN); do \
		j="cmp -s $$i ${DESTDIR}/usr/include/openssl/$$(basename $$i) \
		    || cp -p $$i ${DESTDIR}/usr/include/openssl/"; \
		echo $$j; \
		eval "$$j"; \
	done

@


1.17
log
@make it harder to not sync these
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.16 2006/09/29 21:08:26 tg Exp $
d6 1
a6 1
SHLIB_VERSION?=	14.0
d8 2
d15 1
a15 1
CPPFLAGS+= -DNO_ERR -DNO_WINDOWS_BRAINDEATH
@


1.16
log
@update OpenSSL to 0.9.7l (easy update, no API/ABI change)
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.15 2006/09/20 20:38:14 tg Exp $
d13 1
a13 5
.if ${NOPIC:L} == "no"
CPPFLAGS+= -DDSO_DLFCN -DHAVE_DLFCN_H
.endif
CPPFLAGS+= -DTERMIOS -DANSI_SOURCE -DNO_ERR -DOPENSSL_NO_ASM
CPPFLAGS+= -DOPENSSL_NO_KRB5 -DNO_WINDOWS_BRAINDEATH
a17 3
.if ${MKC_USAP:L} == "yes"
CPPFLAGS+= -DOPENSSL_NO_RC5 -DOPENSSL_NO_MDC2 -DOPENSSL_NO_IDEA
.endif
@


1.15
log
@try to clean up the openssl mess
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.14 2006/09/20 20:14:05 tg Exp $
d109 1
a109 1
SRCS+=	v3_crld.c v3_enum.c v3_extku.c v3_genn.c v3_ia5.c v3_int.c
@


1.14
log
@fastmerge lib/libssl; enable IDEA distribution qualifying
as freeware (due to patent law, you still need a licence
to use it, which is included)
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.13 2006/06/17 22:11:32 tg Exp $
a11 1
FIPS_SRC=	${SSL_SRC}/fips
d16 1
a16 1
CPPFLAGS+= -DOPENSSL_NO_IDEA -DTERMIOS -DANSI_SOURCE -DNO_ERR -DOPENSSL_NO_ASM
d23 1
a23 1
CPPFLAGS+= -DOPENSSL_NO_RC5 -DOPENSSL_NO_MDC2
d66 1
a66 1
SRCS+=	dsa_gen.c dsa_key.c dsa_lib.c dsa_vrf.c 	
a134 10
# Only used when -DOPENSSL_FIPS is set
#SRCS+=	fips.c fips_err_wrapper.c
#SRCS+=	fips_aes_core.c fips_aes_selftest.c
#SRCS+=	fips_des_enc.c fips_des_selftest.c fips_set_key.c
#SRCS+=	fips_dh_check.c fips_dh_gen.c fips_dh_key.c
#SRCS+=	fips_dsa_ossl.c fips_dsa_gen.c fips_dsa_selftest.c
#SRCS+=	fips_rand.c
#SRCS+=	fips_rsa_eay.c fips_rsa_gen.c fips_rsa_selftest.c
#SRCS+=	fips_sha1dgst.c fips_sha1_selftest.c

d150 1
a150 3
	${LCRYPTO_SRC}/bn/asm ${FIPS_SRC} ${FIPS_SRC}/aes ${FIPS_SRC}/des \
	${FIPS_SRC}/dh ${FIPS_SRC}/dsa ${FIPS_SRC}/rand ${FIPS_SRC}/rsa \
	${FIPS_SRC}/sha1
d210 2
a211 2
	fips/fips.h \
	fips/rand/fips_rand.h
@


1.13
log
@remove more of these AMD64 remains
@
text
@d1 2
a2 2
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.12 2006/06/11 00:22:18 tg Exp $
# $OpenBSD: Makefile,v 1.44 2005/11/24 20:49:21 deraadt Exp $
d6 1
a6 1
SHLIB_VERSION?=	13.1
d52 2
a53 1
#SRCS+=	i_cbc.c i_cfb64.c i_ofb64.c i_ecb.c i_skey.c e_idea.c
d62 1
a62 1
SRCS+=	bn_sqrt.c bn_kron.c
d66 2
a67 1
SRCS+=	dsa_gen.c dsa_key.c dsa_lib.c dsa_vrf.c
@


1.12
log
@no need to chown/chmod the includes, src/include/Makefile does that for us
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.11 2006/03/27 19:30:35 tg Exp $
a277 5
.elif (${MACHINE_ARCH} == "amd64")
SRCS+= aes_core.c
SRCS+= bf_enc.c
SRCS+= x86_64-gcc.c
SRCS+= rc4_enc.c
@


1.11
log
@for a change, something useful: enhance OpenSSL by my
"ASN.1 OCTET STRING" PEM format for symmetric encryption
(app to come)
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.10 2005/12/06 01:46:44 tg Exp $
a239 2
	chown -R ${BINOWN}:${BINGRP} ${DESTDIR}/usr/include/openssl
	chmod -R a=rX ${DESTDIR}/usr/include/openssl
@


1.10
log
@merge
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.9 2005/10/21 11:02:54 tg Exp $
d6 1
a6 1
SHLIB_VERSION?=	13.0
@


1.9
log
@* merge bin and lib completely
* convert some ancient RCSID styles etc. to more modern stuff
* fix use of CDIAGFLAGS+=, CFLAGS+= and COPTS+= to the correct
  variant (include bsd.own.mk _then_ COPTS+=) so they're added
  after any user-specified flags
  (this is probably lurking in more places than I can imagine)
* fix some indenting, comments, etc.
* make stuff compile (fix warnings/errors)
* add script to review _all_ shlib_version after an openbsd import
* remove two more obsolete /usr/lib/debug/ references
* bin/ps: comment out some SMP code
@
text
@d1 2
a2 2
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.8 2005/04/30 22:54:15 tg Exp $
# $OpenBSD: Makefile,v 1.43 2005/05/10 14:03:22 markus Exp $
@


1.8
log
@commit all the Ms in my tree
@
text
@d1 2
a2 2
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.7 2005/04/29 14:39:25 tg Exp $
# $OpenBSD: Makefile,v 1.42 2005/04/29 07:54:15 djm Exp $
d38 1
a38 1
SRCS+=	aes_cbc.c aes_cfb.c aes_ctr.c aes_ecb.c aes_ofb.c aes_misc.c aes_core.c
d255 1
d262 1
d281 1
d286 1
@


1.7
log
@fix typo
From: Markus Friedl <markus@@cvs.openbsd.org>
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.6 2005/04/29 13:52:24 tg Exp $
d126 1
a126 1
SRCs+=	tb_rsa.c
@


1.6
log
@merge
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.5 2005/04/26 15:36:19 tg Exp $
d15 1
a15 1
CPPFLAGS+= -DSO_DLFCN -DHAVE_DLFCN_H
@


1.5
log
@merge
@
text
@d1 2
a2 2
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.4 2005/03/15 18:51:38 tg Exp $
# $OpenBSD: Makefile,v 1.40 2005/04/01 08:15:52 markus Exp $
d6 1
a6 1
SHLIB_VERSION?=	12.0
d12 1
d83 1
a83 1
SRCS+=	c_all.c evp_err.c evp_acnf.c m_md4.c p5_crpt.c
d110 1
a110 1
SRCS+=	v3err.c v3_info.c v3_purp.c v3_ocsp.c v3_akeya.c
d122 1
a122 1
SRCS+=	eng_dyn.c eng_table.c tb_cipher.c eng_err.c tb_rsa.c
d134 10
d158 4
a161 2
	${LCRYPTO_SRC} ${LCRYPTO_SRC}/acss \
	${.CURDIR}/arch/${MACHINE_ARCH} ${LCRYPTO_SRC}/bn/asm
d220 3
a222 1
	e_os2.h
@


1.4
log
@better, unified, endianness detection
@
text
@d1 2
a2 2
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.3 2005/03/15 17:33:41 tg Exp $
# $OpenBSD: Makefile,v 1.36 2004/02/27 17:36:13 deraadt Exp $
d13 3
d17 1
a17 1
CPPFLAGS+= -DOPENSSL_NO_KRB5 -DSO_DLFCN -DHAVE_DLFCN_H -DNO_WINDOWS_BRAINDEATH
d147 2
a148 2
	${LCRYPTO_SRC} \
	${LCRYPTO_SRC}/acss ${.CURDIR}/arch/${MACHINE_ARCH}
d263 4
@


1.3
log
@add current (object) dir to include (header) list
fixes at least make depend
@
text
@d1 1
a1 1
# $MirOS: src/lib/libssl/crypto/Makefile,v 1.2 2005/03/06 20:29:24 tg Exp $
a12 8
.if ${MACHINE_ARCH} == "i386" || ${MACHINE_ARCH} == "arm" || \
    ${MACHINE_ARCH} == "vax" || ${MACHINE_ARCH} == "amd64" || \
    ${MACHINE_ARCH} == "alpha"
CPPFLAGS+= -DL_ENDIAN
.else
CPPFLAGS+= -DB_ENDIAN
.endif 

@


1.2
log
@merge src/lib
@
text
@d1 1
a1 1
# $MirOS$
d26 1
a26 1
CPPFLAGS+= -I${.CURDIR}/../${SSLEAYDIST} -I${LCRYPTO_SRC}
@


1.1
log
@Initial revision
@
text
@d1 1
d4 4
a7 1
LIB=	crypto
d16 1
a16 1
CFLAGS+= -DL_ENDIAN
d18 1
a18 1
CFLAGS+= -DB_ENDIAN
d21 10
a30 10
CFLAGS+= -DOPENSSL_NO_IDEA -DTERMIOS -DANSI_SOURCE -DNO_ERR -DOPENSSL_NO_ASM
CFLAGS+= -DOPENSSL_NO_RC5 -DOPENSSL_NO_KRB5 -DSO_DLFCN -DHAVE_DLFCN_H 
CFLAGS+= -DOPENSSL_NO_MDC2
CFLAGS+= -DNO_WINDOWS_BRAINDEATH
CFLAGS+= -DOPENSSL_NO_HW_CSWIFT -DOPENSSL_NO_HW_NCIPHER -DOPENSSL_NO_HW_ATALLA
CFLAGS+= -DOPENSSL_NO_HW_NURON -DOPENSSL_NO_HW_UBSEC -DOPENSSL_NO_HW_AEP
CFLAGS+= -DOPENSSL_NO_HW_SUREWARE -DOPENSSL_NO_HW_4758_CCA
CFLAGS+= -I${.CURDIR}/../${SSLEAYDIST}
CFLAGS+= -I${LCRYPTO_SRC}
SRCS+= o_time.c
d33 8
a40 6
SRCS+=	md2_dgst.c md2_one.c 					
SRCS+=	md5_dgst.c md5_one.c 					
SRCS+=	sha_dgst.c sha1dgst.c sha_one.c sha1_one.c	
#SRCS+=	mdc2dgst.c mdc2_one.c					
SRCS+=	hmac.c							
SRCS+=	rmd_dgst.c rmd_one.c				
d42 1
a42 1
SRCS+= aes_cbc.c aes_cfb.c aes_ctr.c aes_ecb.c aes_ofb.c aes_misc.c aes_core.c
d52 1
a52 1
SRCS+=	rc2ofb64.c							
d54 4
a57 4
#SRCS+=	rc5_skey.c rc5_ecb.c rc5cfb64.c rc5cfb64.c 	
#SRCS+=	rc5ofb64.c rc5_enc.c
#SRCS+=	i_cbc.c i_cfb64.c i_ofb64.c i_ecb.c		
#SRCS+=	i_skey.c							
d59 1
a59 1
SRCS+=	c_skey.c c_ecb.c c_cfb64.c c_ofb64.c c_enc.c	
d69 1
a69 1
SRCS+=	dsa_gen.c dsa_key.c dsa_lib.c dsa_vrf.c 	
d72 5
a76 5
SRCS+=	buffer.c buf_err.c				
SRCS+=	bio_lib.c bio_cb.c bio_err.c bss_mem.c 		
SRCS+=	bss_null.c bss_fd.c bss_file.c bss_sock.c	
SRCS+=	bss_conn.c bf_null.c bf_buff.c 
SRCS+=	b_print.c b_dump.c b_sock.c bss_acpt.c 		
d78 2
a79 2
SRCS+=	stack.c							
SRCS+=	lhash.c lh_stats.c					
d81 1
a81 1
SRCS+=	err.c err_all.c err_prn.c				
d83 11
a93 11
SRCS+= bio_b64.c e_bf.c m_sha.c p_open.c
SRCS+= bio_enc.c e_cast.c e_xcbc_d.c m_dss.c m_sha1.c p_seal.c
SRCS+= bio_md.c e_des.c encode.c m_dss1.c names.c p_sign.c
SRCS+= bio_ok.c e_des3.c evp_enc.c m_md2.c p_verify.c
SRCS+= c_all.c evp_err.c evp_acnf.c m_md4.c p5_crpt.c
SRCS+= c_allc.c evp_key.c m_md5.c p5_crpt2.c
SRCS+= c_alld.c e_null.c evp_lib.c p_dec.c
SRCS+= digest.c e_rc2.c evp_pbe.c m_null.c p_enc.c
SRCS+= e_acss.c e_aes.c e_rc4.c evp_pkey.c m_ripemd.c p_lib.c
SRCS+= md4_dgst.c md4_one.c
SRCS+=	pem_sign.c pem_seal.c pem_info.c pem_lib.c pem_pkey.c	
d96 15
a110 15
SRCS+= a_bitstr.c a_mbstr.c a_utctm.c f_enum.c t_bitst.c x_name.c
SRCS+= a_bool.c a_meth.c a_utf8.c f_int.c t_crl.c tasn_typ.c x_pkey.c
SRCS+= a_bytes.c a_object.c a_verify.c f_string.c t_pkey.c tasn_utl.c x_pubkey.c
SRCS+= a_d2i_fp.c a_octet.c asn1_err.c i2d_pr.c t_req.c x_algor.c x_req.c
SRCS+= a_digest.c a_print.c asn1_lib.c i2d_pu.c t_spki.c x_attrib.c x_sig.c
SRCS+= a_dup.c a_set.c asn1_par.c n_pkey.c t_x509.c x_bignum.c x_spki.c
SRCS+= a_enum.c a_sign.c asn_pack.c nsseq.c t_x509a.c x_val.c
SRCS+= a_gentm.c a_strex.c d2i_pr.c p5_pbe.c tasn_dec.c x_crl.c x_x509.c
SRCS+= a_hdr.c a_strnid.c d2i_pu.c p5_pbev2.c tasn_enc.c x_exten.c x_x509a.c
SRCS+= a_i2d_fp.c a_time.c evp_asn1.c tasn_fre.c x_info.c
SRCS+=a_int.c a_type.c p8_pkey.c tasn_new.c x_long.c asn_moid.c
SRCS+= x509_d2.c x509_lu.c x509_set.c x509_vfy.c x509spki.c by_dir.c
SRCS+= x509_def.c x509_obj.c x509_trs.c x509cset.c x509type.c by_file.c
SRCS+= x509_att.c x509_err.c x509_r2x.c x509_txt.c x509name.c x_all.c
SRCS+= x509_cmp.c x509_ext.c x509_req.c x509_v3.c x509rset.c
d117 4
a120 4
SRCS+=	txt_db.c							
SRCS+= pk7_lib.c pkcs7err.c
SRCS+= pk7_asn1.c pk7_doit.c pk7_mime.c 
SRCS+= pk7_attr.c pk7_smime.c
d125 12
a136 12
SRCS+= eng_all.c eng_openssl.c eng_ctrl.c eng_pkey.c
SRCS+= eng_dyn.c eng_table.c tb_cipher.c eng_err.c tb_rsa.c
SRCS+= hw_cryptodev.c eng_cnf.c
SRCS+= tb_dh.c eng_fat.c tb_digest.c eng_init.c
SRCS+= tb_dsa.c eng_lib.c tb_rand.c eng_list.c
SRCs+= tb_rsa.c
SRCS+= dso_dl.c dso_dlfcn.c dso_err.c dso_lib.c dso_null.c
SRCS+= dso_openssl.c dso_win32.c dso_vms.c
SRCS+= ocsp_asn.c ocsp_err.c ocsp_ht.c ocsp_prn.c ocsp_vfy.c
SRCS+= ocsp_cl.c ocsp_ext.c ocsp_lib.c ocsp_srv.c
SRCS+= ec_cvt.c ec_lib.c ecp_mont.c ecp_recp.c
SRCS+= ec_err.c ec_mult.c ecp_nist.c ecp_smpl.c
d151 2
a152 1
	${LCRYPTO_SRC}/ocsp ${LCRYPTO_SRC}/ec ${LCRYPTO_SRC}/aes ${LCRYPTO_SRC} \
d218 3
a220 1
includes: obj_mac.h
d224 12
a235 21
	for i in $(HDRS); do \
	    j="cmp -s $$i ${DESTDIR}/usr/include/openssl/`basename $$i` || \
	    ${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m 444 $$i\
		${DESTDIR}/usr/include/openssl"; \
	    echo $$j; \
	    eval "$$j"; \
	done; \
	for i in $(HDRS_GEN); do \
	    j="cmp -s $$i ${DESTDIR}/usr/include/openssl/`basename $$i` || \
	    ${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m 444 $$i\
		${DESTDIR}/usr/include/openssl"; \
	    echo $$j; \
	    eval "$$j"; \
	done;

# generated
CFLAGS+= -I${.OBJDIR}

GENERATED=obj_mac.h obj_dat.h
CLEANFILES=${GENERATED} obj_mac.num.tmp
SSL_OBJECTS=${SSL_SRC}/crypto/objects
d238 1
a238 1
	cat ${SSL_OBJECTS}/obj_mac.num > obj_mac.num.tmp
a243 12
.if (${MACHINE_ARCH} == "vax")
# egcs bombs optimising this file on vax
a_strnid.o:
	${CC} ${CFLAGS} -O0 ${CPPFLAGS} -c ${.IMPSRC}
a_strnid.po:           
	${CC} ${CFLAGS} -O0 ${CPPFLAGS} -c ${.IMPSRC} -o $@@
des_enc.o:             
	${CC} ${CFLAGS} -O1 ${CPPFLAGS} -c ${.IMPSRC}
des_enc.po:            
	${CC} ${CFLAGS} -O1 ${CPPFLAGS} -c ${.IMPSRC} -o $@@
.endif  

d245 5
a249 5
CFLAGS+= -DMD5_ASM
CFLAGS+= -DSHA1_ASM
CFLAGS+= -DRMD160_ASM
CFLAGS+= -DOPENBSD_CAST_ASM
CFLAGS+= -DOPENBSD_DES_ASM
d260 1
a260 1
.for dir f in ${SSLASM}
d265 3
a267 3
		${LCRYPTO_SRC}/${dir}/asm/${f}.pl openbsd-elf 386 > ${.TARGET}
.endfor
SRCS+= bf_cbc.c	
a268 1
.if (${MACHINE_ARCH} == "vax")
a269 4
SRCS+= bn_asm_vax.S
SRCS+= rc4_enc.c	
.else
SRCS+= bf_enc.c	
d271 1
a271 2
SRCS+= rc4_enc.c	
.endif
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@latest fixes from OpenBSD, last update for #8 if nothing weird happens
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.40 2005/04/01 08:15:52 markus Exp $
a16 5
.include <bsd.own.mk>		# for 'NOPIC' definition
.if !defined(NOPIC)
CFLAGS+= -DDSO_DLFCN -DHAVE_DLFCN_H
.endif

d18 1
a18 1
CFLAGS+= -DOPENSSL_NO_RC5 -DOPENSSL_NO_KRB5
d146 1
a146 2
	${LCRYPTO_SRC}/acss ${.CURDIR}/arch/${MACHINE_ARCH} \
	${LCRYPTO_SRC}/bn/asm
a285 5
.if (${MACHINE_ARCH} == "amd64")
SRCS+= bf_enc.c
SRCS+= x86_64-gcc.c
SRCS+= rc4_enc.c	
.else
a290 1
.endif
@


1.1.1.3
log
@sure enough they updated OpenSSL late
but thanks mates, so I need not do it myself
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.42 2005/04/29 07:54:15 djm Exp $
a7 1
FIPS_SRC=	${SSL_SRC}/fips
d86 1
a86 1
SRCS+= c_all.c evp_err.c evp_acnf.c m_md4.c p5_crpt.c e_old.c
d113 1
a113 1
SRCS+=	v3err.c v3_info.c v3_purp.c v3_ocsp.c v3_akeya.c v3_pci.c v3_pcia.c
d129 1
a136 10
# Only used when -DOPENSSL_FIPS is set
#SRCS+= fips.c fips_err_wrapper.c
#SRCS+= fips_aes_core.c fips_aes_selftest.c
#SRCS+= fips_des_enc.c fips_des_selftest.c fips_set_key.c
#SRCS+= fips_dh_check.c fips_dh_gen.c fips_dh_key.c
#SRCS+= fips_dsa_ossl.c fips_dsa_gen.c fips_dsa_selftest.c
#SRCS+= fips_rand.c
#SRCS+= fips_rsa_eay.c fips_rsa_gen.c fips_rsa_selftest.c
#SRCS+= fips_sha1dgst.c fips_sha1_selftest.c

d150 1
a150 2
	${LCRYPTO_SRC}/ocsp ${LCRYPTO_SRC}/ec ${LCRYPTO_SRC}/aes \
	${LCRYPTO_SRC} \
d152 1
a152 3
	${LCRYPTO_SRC}/bn/asm \
	${FIPS_SRC}/ ${FIPS_SRC}/aes ${FIPS_SRC}/des ${FIPS_SRC}/dh \
	${FIPS_SRC}/dsa ${FIPS_SRC}/rand ${FIPS_SRC}/rsa ${FIPS_SRC}/sha1
d211 1
a211 3
	e_os2.h \
	fips/fips.h \
	fips/rand/fips_rand.h 
@


1.1.1.4
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.43 2005/05/10 14:03:22 markus Exp $
d42 1
a42 1
SRCS+= aes_cbc.c aes_cfb.c aes_ctr.c aes_ecb.c aes_ofb.c aes_misc.c
a277 1
CFLAGS+= -DAES_ASM
a283 1
	aes aes-586 \
a302 1
SRCS+= aes_core.c
a307 1
SRCS+= aes_core.c
a311 1
SRCS+= aes_core.c
@


1.1.1.5
log
@OpenSSL is always worth another import, isn't it?
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.44 2005/11/24 20:49:21 deraadt Exp $
a3 1
WANTLINT=
@


1.1.1.6
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.45 2006/06/27 05:07:47 djm Exp $
d66 1
a66 1
SRCS+=	bn_sqrt.c bn_kron.c bn_x931p.c
a69 1
SRCS+=	rsa_pss.c rsa_x931.c
@


1.1.1.7
log
@Import latest OpenSSH and OpenBSD-libssl
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.46 2006/10/14 19:43:57 drahn Exp $
d13 1
a13 1
    ${MACHINE_ARCH} == "alpha" || ${MACHINE_ARCH} == "sh"
@


