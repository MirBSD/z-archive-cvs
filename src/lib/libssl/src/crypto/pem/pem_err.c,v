head	1.2;
access;
symbols
	cvs-200804031830:1.1.1.2
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	cvs-200706161500:1.1.1.2
	cvs-200705171600:1.1.1.2
	OPENBSD_4_0:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200512060130:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2007.03.08.10.50.09;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045EFEA64749A2C51;

1.1
date	2005.02.05.17.25.55;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.25.55;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.09.20.19.07.07;	author tg;	state Exp;
branches;
next	;
commitid	10045119150397FC669;


desc
@@


1.2
log
@upgrade to OpenSSL 0.9.7m
@
text
@/* crypto/pem/pem_err.c */
/* ====================================================================
 * Copyright (c) 1999-2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

/* NOTE: this file was auto generated by the mkerr.pl script: any changes
 * made to it will be overwritten when the script next updates this file,
 * only reason strings will be preserved.
 */

#include <stdio.h>
#include <openssl/err.h>
#include <openssl/pem.h>

/* BEGIN ERROR CODES */
#ifndef OPENSSL_NO_ERR

#define ERR_FUNC(func) ERR_PACK(ERR_LIB_PEM,func,0)
#define ERR_REASON(reason) ERR_PACK(ERR_LIB_PEM,0,reason)

static ERR_STRING_DATA PEM_str_functs[]=
	{
{ERR_FUNC(PEM_F_D2I_PKCS8PRIVATEKEY_BIO),	"d2i_PKCS8PrivateKey_bio"},
{ERR_FUNC(PEM_F_D2I_PKCS8PRIVATEKEY_FP),	"d2i_PKCS8PrivateKey_fp"},
{ERR_FUNC(PEM_F_DEF_CALLBACK),	"DEF_CALLBACK"},
{ERR_FUNC(PEM_F_LOAD_IV),	"LOAD_IV"},
{ERR_FUNC(PEM_F_PEM_ASN1_READ),	"PEM_ASN1_read"},
{ERR_FUNC(PEM_F_PEM_ASN1_READ_BIO),	"PEM_ASN1_read_bio"},
{ERR_FUNC(PEM_F_PEM_ASN1_WRITE),	"PEM_ASN1_write"},
{ERR_FUNC(PEM_F_PEM_ASN1_WRITE_BIO),	"PEM_ASN1_write_bio"},
{ERR_FUNC(PEM_F_PEM_DO_HEADER),	"PEM_do_header"},
{ERR_FUNC(PEM_F_PEM_F_DO_PK8KEY_FP),	"PEM_F_DO_PK8KEY_FP"},
{ERR_FUNC(PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY),	"PEM_F_PEM_WRITE_PKCS8PRIVATEKEY"},
{ERR_FUNC(PEM_F_PEM_GET_EVP_CIPHER_INFO),	"PEM_get_EVP_CIPHER_INFO"},
{ERR_FUNC(PEM_F_PEM_READ),	"PEM_read"},
{ERR_FUNC(PEM_F_PEM_READ_BIO),	"PEM_read_bio"},
{ERR_FUNC(PEM_F_PEM_SEALFINAL),	"PEM_SealFinal"},
{ERR_FUNC(PEM_F_PEM_SEALINIT),	"PEM_SealInit"},
{ERR_FUNC(PEM_F_PEM_SIGNFINAL),	"PEM_SignFinal"},
{ERR_FUNC(PEM_F_PEM_WRITE),	"PEM_write"},
{ERR_FUNC(PEM_F_PEM_WRITE_BIO),	"PEM_write_bio"},
{ERR_FUNC(PEM_F_PEM_WRITE_BIO_PKCS8PRIVATEKEY),	"PEM_write_bio_PKCS8PrivateKey"},
{ERR_FUNC(PEM_F_PEM_X509_INFO_READ),	"PEM_X509_INFO_read"},
{ERR_FUNC(PEM_F_PEM_X509_INFO_READ_BIO),	"PEM_X509_INFO_read_bio"},
{ERR_FUNC(PEM_F_PEM_X509_INFO_WRITE_BIO),	"PEM_X509_INFO_write_bio"},
{0,NULL}
	};

static ERR_STRING_DATA PEM_str_reasons[]=
	{
{ERR_REASON(PEM_R_BAD_BASE64_DECODE)     ,"bad base64 decode"},
{ERR_REASON(PEM_R_BAD_DECRYPT)           ,"bad decrypt"},
{ERR_REASON(PEM_R_BAD_END_LINE)          ,"bad end line"},
{ERR_REASON(PEM_R_BAD_IV_CHARS)          ,"bad iv chars"},
{ERR_REASON(PEM_R_BAD_PASSWORD_READ)     ,"bad password read"},
{ERR_REASON(PEM_R_ERROR_CONVERTING_PRIVATE_KEY),"error converting private key"},
{ERR_REASON(PEM_R_NOT_DEK_INFO)          ,"not dek info"},
{ERR_REASON(PEM_R_NOT_ENCRYPTED)         ,"not encrypted"},
{ERR_REASON(PEM_R_NOT_PROC_TYPE)         ,"not proc type"},
{ERR_REASON(PEM_R_NO_START_LINE)         ,"no start line"},
{ERR_REASON(PEM_R_PROBLEMS_GETTING_PASSWORD),"problems getting password"},
{ERR_REASON(PEM_R_PUBLIC_KEY_NO_RSA)     ,"public key no rsa"},
{ERR_REASON(PEM_R_READ_KEY)              ,"read key"},
{ERR_REASON(PEM_R_SHORT_HEADER)          ,"short header"},
{ERR_REASON(PEM_R_UNSUPPORTED_CIPHER)    ,"unsupported cipher"},
{ERR_REASON(PEM_R_UNSUPPORTED_ENCRYPTION),"unsupported encryption"},
{0,NULL}
	};

#endif

void ERR_load_PEM_strings(void)
	{
#ifndef OPENSSL_NO_ERR

	if (ERR_func_error_string(PEM_str_functs[0].error) == NULL)
		{
		ERR_load_strings(0,PEM_str_functs);
		ERR_load_strings(0,PEM_str_reasons);
		}
#endif
	}
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
d67 4
d73 23
a95 23
{ERR_PACK(0,PEM_F_D2I_PKCS8PRIVATEKEY_BIO,0),	"d2i_PKCS8PrivateKey_bio"},
{ERR_PACK(0,PEM_F_D2I_PKCS8PRIVATEKEY_FP,0),	"d2i_PKCS8PrivateKey_fp"},
{ERR_PACK(0,PEM_F_DEF_CALLBACK,0),	"DEF_CALLBACK"},
{ERR_PACK(0,PEM_F_LOAD_IV,0),	"LOAD_IV"},
{ERR_PACK(0,PEM_F_PEM_ASN1_READ,0),	"PEM_ASN1_read"},
{ERR_PACK(0,PEM_F_PEM_ASN1_READ_BIO,0),	"PEM_ASN1_read_bio"},
{ERR_PACK(0,PEM_F_PEM_ASN1_WRITE,0),	"PEM_ASN1_write"},
{ERR_PACK(0,PEM_F_PEM_ASN1_WRITE_BIO,0),	"PEM_ASN1_write_bio"},
{ERR_PACK(0,PEM_F_PEM_DO_HEADER,0),	"PEM_do_header"},
{ERR_PACK(0,PEM_F_PEM_F_DO_PK8KEY_FP,0),	"PEM_F_DO_PK8KEY_FP"},
{ERR_PACK(0,PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY,0),	"PEM_F_PEM_WRITE_PKCS8PRIVATEKEY"},
{ERR_PACK(0,PEM_F_PEM_GET_EVP_CIPHER_INFO,0),	"PEM_get_EVP_CIPHER_INFO"},
{ERR_PACK(0,PEM_F_PEM_READ,0),	"PEM_read"},
{ERR_PACK(0,PEM_F_PEM_READ_BIO,0),	"PEM_read_bio"},
{ERR_PACK(0,PEM_F_PEM_SEALFINAL,0),	"PEM_SealFinal"},
{ERR_PACK(0,PEM_F_PEM_SEALINIT,0),	"PEM_SealInit"},
{ERR_PACK(0,PEM_F_PEM_SIGNFINAL,0),	"PEM_SignFinal"},
{ERR_PACK(0,PEM_F_PEM_WRITE,0),	"PEM_write"},
{ERR_PACK(0,PEM_F_PEM_WRITE_BIO,0),	"PEM_write_bio"},
{ERR_PACK(0,PEM_F_PEM_WRITE_BIO_PKCS8PRIVATEKEY,0),	"PEM_write_bio_PKCS8PrivateKey"},
{ERR_PACK(0,PEM_F_PEM_X509_INFO_READ,0),	"PEM_X509_INFO_read"},
{ERR_PACK(0,PEM_F_PEM_X509_INFO_READ_BIO,0),	"PEM_X509_INFO_read_bio"},
{ERR_PACK(0,PEM_F_PEM_X509_INFO_WRITE_BIO,0),	"PEM_X509_INFO_write_bio"},
d101 16
a116 16
{PEM_R_BAD_BASE64_DECODE                 ,"bad base64 decode"},
{PEM_R_BAD_DECRYPT                       ,"bad decrypt"},
{PEM_R_BAD_END_LINE                      ,"bad end line"},
{PEM_R_BAD_IV_CHARS                      ,"bad iv chars"},
{PEM_R_BAD_PASSWORD_READ                 ,"bad password read"},
{PEM_R_ERROR_CONVERTING_PRIVATE_KEY      ,"error converting private key"},
{PEM_R_NOT_DEK_INFO                      ,"not dek info"},
{PEM_R_NOT_ENCRYPTED                     ,"not encrypted"},
{PEM_R_NOT_PROC_TYPE                     ,"not proc type"},
{PEM_R_NO_START_LINE                     ,"no start line"},
{PEM_R_PROBLEMS_GETTING_PASSWORD         ,"problems getting password"},
{PEM_R_PUBLIC_KEY_NO_RSA                 ,"public key no rsa"},
{PEM_R_READ_KEY                          ,"read key"},
{PEM_R_SHORT_HEADER                      ,"short header"},
{PEM_R_UNSUPPORTED_CIPHER                ,"unsupported cipher"},
{PEM_R_UNSUPPORTED_ENCRYPTION            ,"unsupported encryption"},
d124 1
a124 1
	static int init=1;
d126 1
a126 1
	if (init)
d128 3
a130 4
		init=0;
#ifndef OPENSSL_NO_ERR
		ERR_load_strings(ERR_LIB_PEM,PEM_str_functs);
		ERR_load_strings(ERR_LIB_PEM,PEM_str_reasons);
a131 2

		}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@import a few security-wise relevant changes right now
@
text
@d3 1
a3 1
 * Copyright (c) 1999-2005 The OpenSSL Project.  All rights reserved.
a66 4

#define ERR_FUNC(func) ERR_PACK(ERR_LIB_PEM,func,0)
#define ERR_REASON(reason) ERR_PACK(ERR_LIB_PEM,0,reason)

d69 23
a91 23
{ERR_FUNC(PEM_F_D2I_PKCS8PRIVATEKEY_BIO),	"d2i_PKCS8PrivateKey_bio"},
{ERR_FUNC(PEM_F_D2I_PKCS8PRIVATEKEY_FP),	"d2i_PKCS8PrivateKey_fp"},
{ERR_FUNC(PEM_F_DEF_CALLBACK),	"DEF_CALLBACK"},
{ERR_FUNC(PEM_F_LOAD_IV),	"LOAD_IV"},
{ERR_FUNC(PEM_F_PEM_ASN1_READ),	"PEM_ASN1_read"},
{ERR_FUNC(PEM_F_PEM_ASN1_READ_BIO),	"PEM_ASN1_read_bio"},
{ERR_FUNC(PEM_F_PEM_ASN1_WRITE),	"PEM_ASN1_write"},
{ERR_FUNC(PEM_F_PEM_ASN1_WRITE_BIO),	"PEM_ASN1_write_bio"},
{ERR_FUNC(PEM_F_PEM_DO_HEADER),	"PEM_do_header"},
{ERR_FUNC(PEM_F_PEM_F_DO_PK8KEY_FP),	"PEM_F_DO_PK8KEY_FP"},
{ERR_FUNC(PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY),	"PEM_F_PEM_WRITE_PKCS8PRIVATEKEY"},
{ERR_FUNC(PEM_F_PEM_GET_EVP_CIPHER_INFO),	"PEM_get_EVP_CIPHER_INFO"},
{ERR_FUNC(PEM_F_PEM_READ),	"PEM_read"},
{ERR_FUNC(PEM_F_PEM_READ_BIO),	"PEM_read_bio"},
{ERR_FUNC(PEM_F_PEM_SEALFINAL),	"PEM_SealFinal"},
{ERR_FUNC(PEM_F_PEM_SEALINIT),	"PEM_SealInit"},
{ERR_FUNC(PEM_F_PEM_SIGNFINAL),	"PEM_SignFinal"},
{ERR_FUNC(PEM_F_PEM_WRITE),	"PEM_write"},
{ERR_FUNC(PEM_F_PEM_WRITE_BIO),	"PEM_write_bio"},
{ERR_FUNC(PEM_F_PEM_WRITE_BIO_PKCS8PRIVATEKEY),	"PEM_write_bio_PKCS8PrivateKey"},
{ERR_FUNC(PEM_F_PEM_X509_INFO_READ),	"PEM_X509_INFO_read"},
{ERR_FUNC(PEM_F_PEM_X509_INFO_READ_BIO),	"PEM_X509_INFO_read_bio"},
{ERR_FUNC(PEM_F_PEM_X509_INFO_WRITE_BIO),	"PEM_X509_INFO_write_bio"},
d97 16
a112 16
{ERR_REASON(PEM_R_BAD_BASE64_DECODE)     ,"bad base64 decode"},
{ERR_REASON(PEM_R_BAD_DECRYPT)           ,"bad decrypt"},
{ERR_REASON(PEM_R_BAD_END_LINE)          ,"bad end line"},
{ERR_REASON(PEM_R_BAD_IV_CHARS)          ,"bad iv chars"},
{ERR_REASON(PEM_R_BAD_PASSWORD_READ)     ,"bad password read"},
{ERR_REASON(PEM_R_ERROR_CONVERTING_PRIVATE_KEY),"error converting private key"},
{ERR_REASON(PEM_R_NOT_DEK_INFO)          ,"not dek info"},
{ERR_REASON(PEM_R_NOT_ENCRYPTED)         ,"not encrypted"},
{ERR_REASON(PEM_R_NOT_PROC_TYPE)         ,"not proc type"},
{ERR_REASON(PEM_R_NO_START_LINE)         ,"no start line"},
{ERR_REASON(PEM_R_PROBLEMS_GETTING_PASSWORD),"problems getting password"},
{ERR_REASON(PEM_R_PUBLIC_KEY_NO_RSA)     ,"public key no rsa"},
{ERR_REASON(PEM_R_READ_KEY)              ,"read key"},
{ERR_REASON(PEM_R_SHORT_HEADER)          ,"short header"},
{ERR_REASON(PEM_R_UNSUPPORTED_CIPHER)    ,"unsupported cipher"},
{ERR_REASON(PEM_R_UNSUPPORTED_ENCRYPTION),"unsupported encryption"},
d126 2
a127 2
		ERR_load_strings(0,PEM_str_functs);
		ERR_load_strings(0,PEM_str_reasons);
@

