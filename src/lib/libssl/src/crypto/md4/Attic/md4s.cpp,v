head	1.2;
access;
symbols
	cvs-200804031830:1.1.1.1
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	cvs-200706161500:1.1.1.1
	cvs-200705171600:1.1.1.1
	OPENBSD_4_0:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200512060130:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2014.11.29.23.47.06;	author tg;	state dead;
branches;
next	1.1;
commitid	100547A5ABB3AF49A1B;

1.1
date	2005.02.05.17.25.55;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.25.55;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@replace OpenSSLâ€™s MD4 by minimal adapter around MirBSD implementation

type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
OpenSSL           7986.94k    29371.09k    90663.33k   192134.21k   285419.63k
MirBSD            7824.78k    25051.96k    62529.97k   103412.33k   126034.92k

This saves us 4491 bytes in the .so file though, and is much better
for maintenance and sustainability (especially with SHA-2 yet to come).
Also, having only one codepath is better.
@
text
@//
// gettsc.inl
//
// gives access to the Pentium's (secret) cycle counter
//
// This software was written by Leonard Janke (janke@@unixg.ubc.ca)
// in 1996-7 and is entered, by him, into the public domain.

#if defined(__WATCOMC__)
void GetTSC(unsigned long&);
#pragma aux GetTSC = 0x0f 0x31 "mov [edi], eax" parm [edi] modify [edx eax];
#elif defined(__GNUC__)
inline
void GetTSC(unsigned long& tsc)
{
  asm volatile(".byte 15, 49\n\t"
	       : "=eax" (tsc)
	       :
	       : "%edx", "%eax");
}
#elif defined(_MSC_VER)
inline
void GetTSC(unsigned long& tsc)
{
  unsigned long a;
  __asm _emit 0fh
  __asm _emit 31h
  __asm mov a, eax;
  tsc=a;
}
#endif      

#include <stdio.h>
#include <stdlib.h>
#include <openssl/md4.h>

extern "C" {
void md4_block_x86(MD4_CTX *ctx, unsigned char *buffer,int num);
}

void main(int argc,char *argv[])
	{
	unsigned char buffer[64*256];
	MD4_CTX ctx;
	unsigned long s1,s2,e1,e2;
	unsigned char k[16];
	unsigned long data[2];
	unsigned char iv[8];
	int i,num=0,numm;
	int j=0;

	if (argc >= 2)
		num=atoi(argv[1]);

	if (num == 0) num=16;
	if (num > 250) num=16;
	numm=num+2;
	num*=64;
	numm*=64;

	for (j=0; j<6; j++)
		{
		for (i=0; i<10; i++) /**/
			{
			md4_block_x86(&ctx,buffer,numm);
			GetTSC(s1);
			md4_block_x86(&ctx,buffer,numm);
			GetTSC(e1);
			GetTSC(s2);
			md4_block_x86(&ctx,buffer,num);
			GetTSC(e2);
			md4_block_x86(&ctx,buffer,num);
			}
		printf("md4 (%d bytes) %d %d (%.2f)\n",num,
			e1-s1,e2-s2,(double)((e1-s1)-(e2-s2))/2);
		}
	}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
