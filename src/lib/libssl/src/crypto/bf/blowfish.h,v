head	1.4;
access;
symbols
	cvs-200804031830:1.1.1.2
	MIRBSD_10:1.1.1.2.0.4
	MIRBSD_10_BASE:1.1.1.2
	cvs-200706161500:1.1.1.2
	cvs-200705171600:1.1.1.2
	OPENBSD_4_0:1.1.1.2
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200512060130:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.07.19.17.42.04;	author tg;	state Exp;
branches;
next	1.3;
commitid	10055ABE13A076371FA;

1.3
date	2014.12.15.21.04.22;	author tg;	state Exp;
branches;
next	1.2;
commitid	100548F4CC703E2776F;

1.2
date	2014.11.30.01.30.11;	author tg;	state Exp;
branches;
next	1.1;
commitid	100547A733613A7D176;

1.1
date	2005.02.05.17.25.43;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.25.43;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.13.38.57;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@let macros use non-conflicting names for local variables; fixes segfaults
@
text
@/* $MirOS: src/lib/libssl/src/crypto/bf/blowfish.h,v 1.3 2014/12/15 21:04:22 tg Exp $ */

#ifndef HEADER_BLOWFISH_H
#define HEADER_BLOWFISH_H

#include <openssl/e_os2.h>
#include <sys/types.h>
#include <blf.h>

#ifdef OPENSSL_NO_BF
#error BF is disabled.
#endif

__BEGIN_DECLS

#define BF_ENCRYPT 1
#define BF_DECRYPT 0

#define BF_LONG u_int32_t

#define BF_ROUNDS BLF_N
#define BF_BLOCK 8

typedef struct {
	blf_ctx c;
} BF_KEY;

void BF_set_key(BF_KEY *key, int len, const unsigned char *data);

void BF_encrypt(BF_LONG *data,const BF_KEY *key);
void BF_decrypt(BF_LONG *data,const BF_KEY *key);

void BF_ecb_encrypt(const unsigned char *in, unsigned char *out,
	const BF_KEY *key, int enc);
void BF_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
	const BF_KEY *schedule, unsigned char *ivec, int enc);
void BF_cfb64_encrypt(const unsigned char *in, unsigned char *out, long length,
	const BF_KEY *schedule, unsigned char *ivec, int *num, int enc);
void BF_ofb64_encrypt(const unsigned char *in, unsigned char *out, long length,
	const BF_KEY *schedule, unsigned char *ivec, int *num);
const char *BF_options(void);

#define BF_encrypt(buf,key) do {					\
	BF_LONG *BLOWFISH_H_data = (BF_LONG *)(buf);			\
									\
	Blowfish_encipher(&((BF_KEY *)(key))->c,			\
	    &BLOWFISH_H_data[0], &BLOWFISH_H_data[1]);			\
} while (/* CONSTCOND */ 0)
#define BF_decrypt(buf,key) do {					\
	BF_LONG *BLOWFISH_H_data = (BF_LONG *)(buf);			\
									\
	Blowfish_decipher(&((BF_KEY *)(key))->c,			\
	    &BLOWFISH_H_data[0], &BLOWFISH_H_data[1]);			\
} while (/* CONSTCOND */ 0)
#define BF_cbc_encrypt(in,buf,l,s,iv,encrypt) do {			\
	unsigned char *BLOWFISH_H_out = (void *)(buf);			\
	long BLOWFISH_H_len = (l);					\
	const BF_KEY *BLOWFISH_H_schedule = (const void *)(s);		\
	unsigned char *BLOWFISH_H_ivec = (void *)(iv);			\
									\
	memcpy(BLOWFISH_H_out, (in), BLOWFISH_H_len);			\
	if (encrypt)							\
		blf_cbc_encrypt(&BLOWFISH_H_schedule->c,		\
		    BLOWFISH_H_ivec, BLOWFISH_H_out, BLOWFISH_H_len);	\
	else								\
		blf_cbc_decrypt(&BLOWFISH_H_schedule->c,		\
		    BLOWFISH_H_ivec, BLOWFISH_H_out, BLOWFISH_H_len);	\
} while (/* CONSTCOND */ 0)
#define BF_set_key(key,bsz,data) do {					\
	int BLOWFISH_H_len = (bsz);					\
									\
	blf_key(&((BF_KEY *)(key))->c, (data),				\
	    BLOWFISH_H_len > 65535 ? 65535 : BLOWFISH_H_len);		\
} while (/* CONSTCOND */ 0)

__END_DECLS

#endif
@


1.3
log
@inline wrappers instead of having one more function call plus some
assorted stack shuffling (especially where argument order differs)
which gives us a small but nice speedup and another size reduction
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libssl/src/crypto/bf/blowfish.h,v 1.2 2014/11/30 01:30:11 tg Exp $ */
d43 5
a47 5
#define BF_encrypt(buf,key) do {			\
	BF_LONG *data = (BF_LONG *)(buf);		\
							\
	Blowfish_encipher(&((BF_KEY *)(key))->c,	\
	    &data[0], &data[1]);			\
d49 5
a53 5
#define BF_decrypt(buf,key) do {			\
	BF_LONG *data = (BF_LONG *)(buf);		\
							\
	Blowfish_decipher(&((BF_KEY *)(key))->c,	\
	    &data[0], &data[1]);			\
d55 13
a67 13
#define BF_cbc_encrypt(in,buf,l,s,iv,encrypt) do {	\
	unsigned char *out = (void *)(buf);		\
	long length = (l);				\
	const BF_KEY *schedule = (const void *)(s);	\
	unsigned char *ivec = (void *)(iv);		\
							\
	memcpy(out, (in), length);			\
	if (encrypt)					\
		blf_cbc_encrypt(&schedule->c, ivec,	\
		    out, length);			\
	else						\
		blf_cbc_decrypt(&schedule->c, ivec,	\
		    out, length);			\
d69 5
a73 5
#define BF_set_key(key,bsz,data) do {			\
	int len = (bsz);				\
							\
	blf_key(&((BF_KEY *)(key))->c, (data),		\
	    len > 65535 ? 65535 : len);			\
@


1.2
log
@â€¦ and Blowfish, at least partially
@
text
@d1 1
a1 1
/* $MirOS$ */
d43 33
@


1.1
log
@Initial revision
@
text
@d1 1
a1 57
/* crypto/bf/blowfish.h */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
d7 2
a8 4

#ifdef  __cplusplus
extern "C" {
#endif
d14 4
a17 2
#define BF_ENCRYPT	1
#define BF_DECRYPT	0
d19 1
a19 22
/*
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * ! BF_LONG has to be at least 32 bits wide. If it's wider, then !
 * ! BF_LONG_LOG2 has to be defined along.                        !
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */

#if defined(OPENSSL_SYS_WIN16) || defined(__LP32__)
#define BF_LONG unsigned long
#elif defined(OPENSSL_SYS_CRAY) || defined(__ILP64__)
#define BF_LONG unsigned long
#define BF_LONG_LOG2 3
/*
 * _CRAY note. I could declare short, but I have no idea what impact
 * does it have on performance on none-T3E machines. I could declare
 * int, but at least on C90 sizeof(int) can be chosen at compile time.
 * So I've chosen long...
 *					<appro@@fy.chalmers.se>
 */
#else
#define BF_LONG unsigned int
#endif
d21 2
a22 2
#define BF_ROUNDS	16
#define BF_BLOCK	8
d24 3
a26 5
typedef struct bf_key_st
	{
	BF_LONG P[BF_ROUNDS+2];
	BF_LONG S[4*256];
	} BF_KEY;
a27 1
 
d43 1
a43 3
#ifdef  __cplusplus
}
#endif
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@sure enough they updated OpenSSL late
but thanks mates, so I need not do it myself
@
text
@d107 1
a107 4

#ifdef OPENSSL_FIPS 
void private_BF_set_key(BF_KEY *key, int len, const unsigned char *data);
#endif
@

