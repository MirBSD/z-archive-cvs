head	1.4;
access;
symbols
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.4
	expat-2_0_0:1.1.105.2
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	expat-1_95_8:1.1.105.1
	expat:1.1.105;
locks; strict;
comment	@ * @;


1.4
date	2006.06.01.23.31.17;	author tg;	state Exp;
branches;
next	1.3;
commitid	100447F78D90B0CC9DD;

1.3
date	2005.11.03.22.28.14;	author tg;	state Exp;
branches;
next	1.2;
commitid	7afc436a8eca13dd;

1.2
date	2005.10.21.11.33.35;	author tg;	state dead;
branches;
next	1.1;
commitid	275f4358cfde0f84;

1.1
date	2005.03.06.15.14.58;	author tg;	state Exp;
branches
	1.1.105.1;
next	;

1.1.105.1
date	2005.03.06.15.14.58;	author tg;	state Exp;
branches;
next	1.1.105.2;

1.1.105.2
date	2006.06.01.23.29.17;	author tg;	state Exp;
branches;
next	;
commitid	100447F78577DEBD528;


desc
@@


1.4
log
@fastmerge
@
text
@/* Copyright (c) 1998, 1999 Thai Open Source Software Center Ltd
   See the file COPYING for copying permission.
*/

#include "codepage.h"

#ifdef WIN32
#define STRICT 1
#define WIN32_LEAN_AND_MEAN 1

#include <windows.h>

int
codepageMap(int cp, int *map)
{
  int i;
  CPINFO info;
  if (!GetCPInfo(cp, &info) || info.MaxCharSize > 2)
    return 0;
  for (i = 0; i < 256; i++)
    map[i] = -1;
  if (info.MaxCharSize > 1) {
    for (i = 0; i < MAX_LEADBYTES; i+=2) {
      int j, lim;
      if (info.LeadByte[i] == 0 && info.LeadByte[i + 1] == 0)
        break;
      lim = info.LeadByte[i + 1];
      for (j = info.LeadByte[i]; j <= lim; j++)
        map[j] = -2;
    }
  }
  for (i = 0; i < 256; i++) {
   if (map[i] == -1) {
     char c = (char)i;
     unsigned short n;
     if (MultiByteToWideChar(cp, MB_PRECOMPOSED|MB_ERR_INVALID_CHARS,
                             &c, 1, &n, 1) == 1)
       map[i] = n;
   }
  }
  return 1;
}

int
codepageConvert(int cp, const char *p)
{
  unsigned short c;
  if (MultiByteToWideChar(cp, MB_PRECOMPOSED|MB_ERR_INVALID_CHARS,
                          p, 2, &c, 1) == 1)
    return c;
  return -1;
}

#else /* not WIN32 */

int
codepageMap(int cp, int *map)
{
  return 0;
}

int
codepageConvert(int cp, const char *p)
{
  return -1;
}

#endif /* not WIN32 */
@


1.3
log
@revive expat, after "discovering" it's being used by XFree86®...

The plan is that, after the release, when the base system (including
X11 and GCC) is split up into several ports, we'll just have a depen-
dency on expat in X11 ports where needed, and until then, we'll just
keep it in base.
@
text
@d23 1
a23 1
    for (i = 0; i < MAX_LEADBYTES; i++) {
d28 1
a28 1
      for (j = info.LeadByte[i]; j < lim; j++)
@


1.2
log
@* un-hook bin/ksh, usr.bin/xmlwf and lib/libexpat from the build
  - expat as discussed with bsiegert@@ today on the phone
  - ksh as announced earlier on the lists
* un-hook lib/libexpat from make includes
* remove /usr/include/{,open}ssl upgrade workaround from includes/Makefile
* nuke old bin/ksh
* nuke libexpat and xmlwf
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.105.1
log
@expat-1_95_8 with the following directories removed:
- bcb5
- conftools
- examples
- tests
- vms
- win32
@
text
@@


1.1.105.2
log
@update to expat 2.0.0
@
text
@d23 1
a23 1
    for (i = 0; i < MAX_LEADBYTES; i+=2) {
d28 1
a28 1
      for (j = info.LeadByte[i]; j <= lim; j++)
@

