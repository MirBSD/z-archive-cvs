head	1.4;
access;
symbols
	MIRBSD_10:1.3.0.4
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.3
	expat-2_0_0:1.1.105.1
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	expat-1_95_8:1.1.105.1
	expat:1.1.105;
locks; strict;
comment	@ * @;


1.4
date	2013.10.31.20.06.31;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005272B7081B0E5655;

1.3
date	2005.11.03.22.28.12;	author tg;	state Exp;
branches;
next	1.2;
commitid	7afc436a8eca13dd;

1.2
date	2005.10.21.11.33.32;	author tg;	state dead;
branches;
next	1.1;
commitid	275f4358cfde0f84;

1.1
date	2005.03.06.15.14.57;	author tg;	state Exp;
branches
	1.1.105.1;
next	;

1.1.105.1
date	2005.03.06.15.14.57;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@adapt most __attribute__((â€¦)) occurrences to new KNF style(9)
@
text
@/* $MirOS$ */
/* internal.h

   Internal definitions used by Expat.  This is not needed to compile
   client code.

   The following calling convention macros are defined for frequently
   called functions:

   FASTCALL    - Used for those internal functions that have a simple
                 body and a low number of arguments and local variables.

   PTRCALL     - Used for functions called though function pointers.

   PTRFASTCALL - Like PTRCALL, but for low number of arguments.

   inline      - Used for selected internal functions for which inlining
                 may improve performance on some platforms.

   Note: Use of these macros is based on judgement, not hard rules,
         and therefore subject to change.
*/

#if defined(__GNUC__) && defined(__i386__)
/* We'll use this version by default only where we know it helps.

   regparm() generates warnings on Solaris boxes.   See SF bug #692878.

   Instability reported with egcs on a RedHat Linux 7.3.
   Let's comment out:
   #define FASTCALL __attribute__((__stdcall__, __regparm__(3)))
   and let's try this:
*/
#define FASTCALL __attribute__((__regparm__(3)))
#define PTRFASTCALL __attribute__((__regparm__(3)))
#endif

/* Using __fastcall seems to have an unexpected negative effect under
   MS VC++, especially for function pointers, so we won't use it for
   now on that platform. It may be reconsidered for a future release
   if it can be made more effective.
   Likely reason: __fastcall on Windows is like stdcall, therefore
   the compiler cannot perform stack optimizations for call clusters.
*/

/* Make sure all of these are defined if they aren't already. */

#ifndef FASTCALL
#define FASTCALL
#endif

#ifndef PTRCALL
#define PTRCALL
#endif

#ifndef PTRFASTCALL
#define PTRFASTCALL
#endif

#ifndef XML_MIN_SIZE
#if !defined(__cplusplus) && !defined(inline)
#ifdef __GNUC__
#define inline __inline
#endif /* __GNUC__ */
#endif
#endif /* XML_MIN_SIZE */

#ifdef __cplusplus
#define inline inline
#else
#ifndef inline
#define inline
#endif
#endif
@


1.3
log
@revive expat, after "discovering" it's being used by XFree86®...

The plan is that, after the release, when the base system (including
X11 and GCC) is split up into several ports, we'll just have a depen-
dency on expat in X11 ports where needed, and until then, we'll just
keep it in base.
@
text
@d1 1
d31 1
a31 1
   #define FASTCALL __attribute__((stdcall, regparm(3)))
d34 2
a35 2
#define FASTCALL __attribute__((regparm(3)))
#define PTRFASTCALL __attribute__((regparm(3)))
@


1.2
log
@* un-hook bin/ksh, usr.bin/xmlwf and lib/libexpat from the build
  - expat as discussed with bsiegert@@ today on the phone
  - ksh as announced earlier on the lists
* un-hook lib/libexpat from make includes
* remove /usr/include/{,open}ssl upgrade workaround from includes/Makefile
* nuke old bin/ksh
* nuke libexpat and xmlwf
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.105.1
log
@expat-1_95_8 with the following directories removed:
- bcb5
- conftools
- examples
- tests
- vms
- win32
@
text
@@
