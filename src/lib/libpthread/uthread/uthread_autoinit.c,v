head	1.2;
access;
symbols
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200509222040:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200505141745:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.10.31.20.06.38;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005272B7081B0E5655;

1.1
date	2005.02.05.17.25.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.25.28;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@adapt most __attribute__((â€¦)) occurrences to new KNF style(9)
@
text
@/*
 * David Leonard, 1998. Public Domain. <david.leonard@@csee.uq.edu.au>
 *
 * $MirOS$
 * $OpenBSD: uthread_autoinit.c,v 1.12 2003/01/31 18:48:03 marc Exp $
 */


#include <stdio.h>
#include <pthread.h>
#include "pthread_private.h"

/*
 * Use C++'s static instance constructor to initialise threads.
 */
#ifdef __cplusplus
class Init {
public:
	Init() { 
		_thread_init();
	}
};
Init _thread_initialiser;
#endif /* C++ */

/*
 * This construct places the function in the __CTOR_LIST__ entry in the
 * object, and later the collect2 stage of linkage will inform __main (from
 * libgcc.a) to call it.
 */
#if defined(__GNUC__)
extern void _thread_init_constructor(void) __attribute__((__constructor__));

void
_thread_init_constructor()
{
	_thread_init();
}
#endif /* GNU C */

/*
 * Dummy symbol referenced by uthread_init.o so this compilation unit 
 * is always loaded from archives.
 */
int _thread_autoinit_dummy_decl = 0;

@


1.1
log
@Initial revision
@
text
@d4 1
d32 1
a32 1
extern void _thread_init_constructor(void) __attribute__((constructor));
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
