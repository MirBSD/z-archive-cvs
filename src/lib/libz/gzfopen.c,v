head	1.5;
access;
symbols
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2013.08.05.21.27.37;	author tg;	state Exp;
branches;
next	1.4;
commitid	100520018AA4F2BDEB7;

1.4
date	2006.01.24.20.59.58;	author tg;	state Exp;
branches;
next	1.3;
commitid	10043D695462E83F366;

1.3
date	2006.01.24.19.41.51;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043D683062FAD7DFE;

1.2
date	2006.01.24.13.19.44;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043D6296213840400;

1.1
date	2006.01.24.13.04.10;	author tg;	state Exp;
branches;
next	;
commitid	10043D62587157B87BA;


desc
@@


1.5
log
@begin updating zlib

XXX ZCONST is gone, check the tree for it
XXX textproc/libxml* need updates, says zlib upstream
@
text
@/* $MirOS: src/lib/libz/gzfopen.c,v 1.4 2006/01/24 20:59:58 tg Exp $ */

/*-
 * Copyright (c) 2006, 2013
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a nontrivial bug.
 */

#include <errno.h>
#include <stdbool.h>
#include <stdio.h>
#include "zutil.h"
#include "gzguts.h"

__RCSID("$MirOS: src/lib/libz/gzfopen.c,v 1.4 2006/01/24 20:59:58 tg Exp $");

static FILE *zf_open(const char *, const char *, int);
static int zf_read(void *, char *, int);
static int zf_write(void *, const char *, int);
static fpos_t zf_seek(void *, fpos_t, int);
static int zf_close(void *);

FILE *
gzfopen(const char *path, const char *mode)
{
	if (path == NULL) {
		errno = EINVAL;
		return (NULL);
	}

	return (zf_open(path, mode, -1));
}

FILE *
gzfdopen(int fd, const char *mode)
{
	return (zf_open(NULL, mode, fd));
}

FILE *
zf_open(const char *path, const char *mode, int fd)
{
	gzFile s;
	FILE *f;

	if (mode == NULL) {
		errno = EINVAL;
		return (NULL);
	}

	s = (path == NULL) ? gzdopen(fd, mode) : gzopen(path, mode);
	if (s == (gzFile)Z_NULL) {
		errno = ENXIO;
		return (NULL);
	}

	if ((f = funopen((void *)s,
	    ((gz_statep)s)->mode == GZ_READ ? zf_read : NULL,
	    ((gz_statep)s)->mode == GZ_READ ? NULL : zf_write,
	    zf_seek, zf_close)) == NULL) {
		int e = errno;

		gzclose(s);
		errno = e;
		return (NULL);
	}

	if (path == NULL)
		f->_file = fd;

	return (f);
}

static int
zf_read(void *s, char *buf, int len)
{
	int rv;

	rv = gzread((gzFile)s, buf, len);

	if (rv == Z_STREAM_ERROR) {
		errno = EBADF;
		return (-1);
	}

	if (rv == -1)
		if (((gz_statep)s)->err != Z_ERRNO)
			errno = EIO;

	return (rv);
}

static int
zf_write(void *s, const char *buf, int len)
{
	int rv;

	rv = gzwrite((gzFile)s, buf, len);

	if (rv == Z_STREAM_ERROR) {
		errno = EBADF;
		return (-1);
	}

	if (rv == -1)
		if (((gz_statep)s)->err != Z_ERRNO)
			errno = EIO;

	return (rv);
}

static fpos_t
zf_seek(void *s, fpos_t pos, int how)
{
	z_off_t rv;

	if (s == NULL) {
		errno = EBADF;
		return (-1);
	}

	if (how == SEEK_END) {
		errno = ESPIPE;
		return (-1);
	}

	rv = gzseek((gzFile)s, pos, how);
	if (rv == -1L)
		errno = EINVAL;

	return (rv);
}

static int
zf_close(void *s)
{
	int rv;

	rv = gzclose((gzFile)s);
	if (rv == Z_ERRNO) {
		return (-1);
	} else if (rv == Z_BUF_ERROR) {
		errno = EILSEQ;
		return (-1);
	} else if (rv == Z_STREAM_ERROR) {
		errno = EBADF;
		return (-1);
	} else if (rv == Z_OK) {
		return (0);
	}

	errno = ENOCOFFEE; /* unknown code */
	return (-1);
}
@


1.4
log
@for gzfdopen(3) store the file number in the struct __sFILE as well,
so fileno(f = gzfdopen(foo, mode)) == foo;
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libz/gzfopen.c,v 1.3 2006/01/24 19:41:51 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2006
d32 1
a32 1
#include "gzio.h"
d34 1
a34 1
__RCSID("$MirOS: src/lib/libz/gzfopen.c,v 1.3 2006/01/24 19:41:51 tg Exp $");
d50 1
a50 1
	return zf_open(path, mode, 0);
d56 1
a56 1
	return zf_open(NULL, mode, fd);
a63 1
	bool r;
a69 9
	if (*mode == 'r')
		r = true;
	else if ((*mode == 'w') || (*mode == 'a'))
		r = false;
	else {
		errno = EINVAL;
		return (NULL);
	}

d76 5
a80 5
	if (((gz_stream *)s)->file == NULL) {
		gzclose(s);
		errno = ENXIO;
		return (NULL);
	}
a81 3
	if ((f = funopen((void *)s, r ? zf_read : NULL,
	    r ? NULL : zf_write, zf_seek, zf_close)) == NULL) {
		int e = errno;
d106 1
a106 1
		if (((gz_stream *)s)->z_err != Z_ERRNO)
d125 1
a125 1
		if (((gz_stream *)s)->z_err != Z_ERRNO)
d159 6
a164 1
	if (rv == Z_STREAM_ERROR) {
a166 2
	} else if (rv == Z_ERRNO) {
		return (-1);
@


1.3
log
@complete the code (__CRAZY=Yes pass) and manual page
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libz/gzfopen.c,v 1.2 2006/01/24 13:19:44 tg Exp $ */
d34 1
a34 1
__RCSID("$MirOS: src/lib/libz/gzfopen.c,v 1.2 2006/01/24 13:19:44 tg Exp $");
d100 3
@


1.2
log
@* gzfopen(3) and gzfdopen(3) only differ in the inside function called,
  so take the meat out into a static helper function
* there actually is a gzseek(3)
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libz/gzfopen.c,v 1.1 2006/01/24 13:04:10 tg Exp $ */
d32 1
d34 1
a34 1
__RCSID("$MirOS: src/lib/libz/gzfopen.c,v 1.1 2006/01/24 13:04:10 tg Exp $");
d39 1
a39 1
static int zf_seek(void *, fpos_t, int);
d86 1
a86 1
	if (s->file == NULL) {
d93 1
a93 1
	    r ? NULL : zf_write, NULL, zf_close)) == NULL) {
d102 79
@


1.1
log
@first part of the attempt to mirror my beloved
zopen() and zdopen() from zopen.c to libz, be-
cause the zlib API sucks (gzopen/gzdopen exist
but require to use gzread, gzwrite, gzclose; I
cannot do this in savecore(8) so I have to use
funopen(3) on that in a wrapper).

Not yet complete. Will be later.
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.5 2006/01/24 12:48:21 tg Rel $ */
d33 1
a33 1
__RCSID("$MirOS$");
d35 1
d38 1
d44 17
d65 5
d79 1
a79 1
	s = gzopen(path, mode);
@

