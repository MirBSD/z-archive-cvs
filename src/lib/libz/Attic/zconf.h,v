head	1.10;
access;
symbols
	MIRBSD_10:1.9.0.2
	MIRBSD_10_BASE:1.9
	MIRBSD_9_BASE:1.8
	MIRBSD_8:1.7.0.2
	MIRBSD_8_BASE:1.7
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2008.08.01.15.48.02;	author tg;	state dead;
branches;
next	1.9;
commitid	100489330387BEFF349;

1.9
date	2007.05.08.21.16.17;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004640E85212F7F6CC;

1.8
date	2006.01.31.10.32.00;	author tg;	state Exp;
branches;
next	1.7;
commitid	10043DF3CAA77B01C32;

1.7
date	2005.12.06.01.14.31;	author tg;	state Exp;
branches;
next	1.6;
commitid	c644394e6000d79;

1.6
date	2005.07.24.23.02.51;	author tg;	state Exp;
branches;
next	1.5;
commitid	69e042e41e2cd616;

1.5
date	2005.07.24.22.50.05;	author tg;	state Exp;
branches;
next	1.4;
commitid	123b42e4199c7c05;

1.4
date	2005.07.07.12.27.26;	author tg;	state Exp;
branches;
next	1.3;
commitid	63f442cd1fb827f1;

1.3
date	2005.03.14.21.58.17;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.20.29.40;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.26.19;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.26.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.56.35;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.10
log
@get rid of the second copy of zlib, finally, after… ages or so
@
text
@/**	$MirOS: src/lib/libz/zconf.h,v 1.9 2007/05/08 21:16:17 tg Exp $ */
/*	$OpenBSD: zconf.h,v 1.7 2005/07/20 15:56:41 millert Exp $	*/
/* zconf.h -- configuration of the zlib compression library
 * Copyright (c) 2006-2007 Thorsten Glaser
 * Copyright (C) 1995-2005 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
 */

#ifndef ZCONF_H
#define ZCONF_H

#ifdef __STDC_VERSION__
#  ifndef STDC
#    define STDC
#  endif
#  if __STDC_VERSION__ >= 199901L
#    ifndef STDC99
#      define STDC99
#    endif
#  endif
#endif
#if !defined(STDC) && (defined(__STDC__) || defined(__cplusplus))
#  define STDC
#endif
#if !defined(STDC) && (defined(__GNUC__) || defined(__BORLANDC__))
#  define STDC
#endif

#ifndef STDC
#  ifndef const /* cannot use !defined(STDC) && !defined(const) on Mac */
#    define const       /* note: need a more gentle solution here */
#  endif
#endif

/* Maximum value for memLevel in deflateInit2 */
#ifndef MAX_MEM_LEVEL
#    define MAX_MEM_LEVEL 9
#endif

/* Maximum value for windowBits in deflateInit2 and inflateInit2.
 * WARNING: reducing MAX_WBITS makes minigzip unable to extract .gz files
 * created by gzip. (Files created by minigzip can still be extracted by
 * gzip.)
 */
#ifndef MAX_WBITS
#  define MAX_WBITS   15 /* 32K LZ77 window */
#endif

/* The memory requirements for deflate are (in bytes):
            (1 << (windowBits+2)) +  (1 << (memLevel+9))
 that is: 128K for windowBits=15  +  128K for memLevel = 8  (default values)
 plus a few kilobytes for small objects. For example, if you want to reduce
 the default memory requirements from 256K to 128K, compile with
     make CFLAGS="-O -DMAX_WBITS=14 -DMAX_MEM_LEVEL=7"
 Of course this will generally degrade compression (there's no free lunch).

   The memory requirements for inflate are (in bytes) 1 << windowBits
 that is, 32K for windowBits=15 (default value) plus a few kilobytes
 for small objects.
*/

                        /* Type declarations */

#ifndef OF /* function prototypes */
#  ifdef STDC
#    define OF(args)  args
#  else
#    define OF(args)  ()
#  endif
#endif

#ifndef ZEXTERN
#  define ZEXTERN extern
#endif
#ifndef ZEXPORT
#  define ZEXPORT
#endif
#ifndef ZEXPORTVA
#  define ZEXPORTVA
#endif

#ifndef FAR
#  define FAR
#endif

#if !defined(__MACTYPES__)
typedef unsigned char  Byte;  /* 8 bits */
#endif
typedef unsigned int   uInt;  /* 16 bits or more */
typedef unsigned long  uLong; /* 32 bits or more */

typedef Byte  FAR Bytef;
typedef char  FAR charf;
typedef int   FAR intf;
typedef uInt  FAR uIntf;
typedef uLong FAR uLongf;

#ifdef STDC
   typedef void const *voidpc;
   typedef void FAR   *voidpf;
   typedef void       *voidp;
#else
   typedef Byte const *voidpc;
   typedef Byte FAR   *voidpf;
   typedef Byte       *voidp;
#endif

#include <sys/param.h>	/* for off_t and NULL */
#if defined(_STANDALONE) || defined(_KERNEL)
#include <sys/unistd.h>
#define ZLIB_FREESTANDING 1
#else
#include <unistd.h>	/* for SEEK_* and off_t */
#undef ZLIB_FREESTANDING
#endif
#define z_off_t  off_t

#ifndef ZCONST
#define ZCONST	/* empty */
#endif

#endif /* ZCONF_H */
@


1.9
log
@instead of using “const” and breaking about every third-party app,
use “ZCONST” which, ordinarily, is not defined, define that to ex-
pand to “const” via CPPFLAGS in the base system, and have it empty
if not defined somewhere

XXX this will break stuff in the base system that already has been
XXX changed to be const-clean; they must use -DZCONST=const in the
XXX build CPPFLAGS as well (TODO: spot all code including zlib.h)
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zconf.h,v 1.8 2006/01/31 10:32:00 tg Exp $ */
@


1.8
log
@allow kernel to build again after recent gzfdopen introduction
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zconf.h,v 1.7 2005/12/06 01:14:31 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2006 Thorsten Glaser
d118 4
@


1.7
log
@need NULL in kernel space too, so use <sys/param.h> not <sys/types.h>
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zconf.h,v 1.6 2005/07/24 23:02:51 tg Exp $ */
d4 1
d111 1
d114 1
@


1.6
log
@unifdef more
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zconf.h,v 1.5 2005/07/24 22:50:05 tg Exp $ */
d107 1
a107 1
#include <sys/types.h>	/* for off_t */
@


1.5
log
@* merge OpenBSD import #SECURITY FIX#, bump minor
* fold inffast.h into inflate.h
* add -Wall
* make __CRAZY clean (with 2 exceptions)
* this yields printf format string checking for gzprintf, yay!
* shrink by removing MSDOS, VMS, OS/2, WINCE, etc. crap
* make use of <sys/cdefs.h> macros
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zconf.h,v 1.4 2005/07/07 12:27:26 tg Exp $ */
a26 6
#if !defined(STDC) && (defined(MSDOS) || defined(WINDOWS) || defined(WIN32))
#  define STDC
#endif
#if !defined(STDC) && (defined(OS2) || defined(__HOS_AIX__))
#  define STDC
#endif
@


1.4
log
@unify libz use (make bootloader use base libz sources)
simplify defines
add more RCS IDs
shrink code
@
text
@d1 2
a2 2
/**	$MirOS: src/lib/libz/zconf.h,v 1.3 2005/03/14 21:58:17 tg Exp $ */
/*	$OpenBSD: zconf.h,v 1.6 2004/12/03 03:06:36 djm Exp $	*/
d4 1
a4 1
 * Copyright (C) 1995-2004 Jean-loup Gailly.
a10 78
/*
 * If you *really* need a unique prefix for all types and library functions,
 * compile with -DZ_PREFIX. The "standard" zlib should be compiled without it.
 */
#ifdef Z_PREFIX
#  define deflateInit_          z_deflateInit_
#  define deflate               z_deflate
#  define deflateEnd            z_deflateEnd
#  define inflateInit_          z_inflateInit_
#  define inflate               z_inflate
#  define inflateEnd            z_inflateEnd
#  define deflateInit2_         z_deflateInit2_
#  define deflateSetDictionary  z_deflateSetDictionary
#  define deflateCopy           z_deflateCopy
#  define deflateReset          z_deflateReset
#  define deflateParams         z_deflateParams
#  define deflateBound          z_deflateBound
#  define deflatePrime          z_deflatePrime
#  define inflateInit2_         z_inflateInit2_
#  define inflateSetDictionary  z_inflateSetDictionary
#  define inflateSync           z_inflateSync
#  define inflateSyncPoint      z_inflateSyncPoint
#  define inflateCopy           z_inflateCopy
#  define inflateReset          z_inflateReset
#  define inflateBack           z_inflateBack
#  define inflateBackEnd        z_inflateBackEnd
#  define compress              z_compress
#  define compress2             z_compress2
#  define compressBound         z_compressBound
#  define uncompress            z_uncompress
#  define adler32               z_adler32
#  define crc32                 z_crc32
#  define get_crc_table         z_get_crc_table
#  define zError                z_zError

#  define Byte                  z_Byte
#  define uInt                  z_uInt
#  define uLong                 z_uLong
#  define Bytef                 z_Bytef
#  define charf                 z_charf
#  define intf                  z_intf
#  define uIntf                 z_uIntf
#  define uLongf                z_uLongf
#  define voidpf                z_voidpf
#  define voidp                 z_voidp
#endif

#if defined(__MSDOS__) && !defined(MSDOS)
#  define MSDOS
#endif
#if (defined(OS_2) || defined(__OS2__)) && !defined(OS2)
#  define OS2
#endif
#if defined(_WINDOWS) && !defined(WINDOWS)
#  define WINDOWS
#endif
#if (defined(_WIN32) || defined(__WIN32__)) && !defined(WIN32)
#  define WIN32
#endif
#if (defined(MSDOS) || defined(OS2) || defined(WINDOWS)) && !defined(WIN32)
#  if !defined(__GNUC__) && !defined(__FLAT__) && !defined(__386__)
#    ifndef SYS16BIT
#      define SYS16BIT
#    endif
#  endif
#endif

/*
 * Compile with -DMAXSEG_64K if the alloc function cannot allocate more
 * than 64k bytes at a time (needed on systems with 16-bit int).
 */
#ifdef SYS16BIT
#  define MAXSEG_64K
#endif
#ifdef MSDOS
#  define UNALIGNED_OK
#endif

a33 4
#if defined(__OS400__) && !defined(STDC)    /* iSeries (formerly AS/400). */
#  define STDC
#endif

a39 5
/* Some Mac compilers merge all .h files incorrectly: */
#if defined(__MWERKS__)||defined(applec)||defined(THINK_C)||defined(__SC__)
#  define NO_DUMMY_DECL
#endif

a41 3
#  ifdef MAXSEG_64K
#    define MAX_MEM_LEVEL 8
#  else
a42 1
#  endif
a76 72
/* The following definitions for FAR are needed only for MSDOS mixed
 * model programming (small or medium model with some far allocations).
 * This was tested only with MSC; for other MSDOS compilers you may have
 * to define NO_MEMCPY in zutil.h.  If you don't need the mixed model,
 * just define FAR to be empty.
 */
#ifdef SYS16BIT
#  if defined(M_I86SM) || defined(M_I86MM)
     /* MSC small or medium model */
#    define SMALL_MEDIUM
#    ifdef _MSC_VER
#      define FAR _far
#    else
#      define FAR far
#    endif
#  endif
#  if (defined(__SMALL__) || defined(__MEDIUM__))
     /* Turbo C small or medium model */
#    define SMALL_MEDIUM
#    ifdef __BORLANDC__
#      define FAR _far
#    else
#      define FAR far
#    endif
#  endif
#endif

#if defined(WINDOWS) || defined(WIN32)
   /* If building or using zlib as a DLL, define ZLIB_DLL.
    * This is not mandatory, but it offers a little performance increase.
    */
#  ifdef ZLIB_DLL
#    if defined(WIN32) && (!defined(__BORLANDC__) || (__BORLANDC__ >= 0x500))
#      ifdef ZLIB_INTERNAL
#        define ZEXTERN extern __declspec(dllexport)
#      else
#        define ZEXTERN extern __declspec(dllimport)
#      endif
#    endif
#  endif  /* ZLIB_DLL */
   /* If building or using zlib with the WINAPI/WINAPIV calling convention,
    * define ZLIB_WINAPI.
    * Caution: the standard ZLIB1.DLL is NOT compiled using ZLIB_WINAPI.
    */
#  ifdef ZLIB_WINAPI
#    ifdef FAR
#      undef FAR
#    endif
#    include <windows.h>
     /* No need for _export, use ZLIB.DEF instead. */
     /* For complete Windows compatibility, use WINAPI, not __stdcall. */
#    define ZEXPORT WINAPI
#    ifdef WIN32
#      define ZEXPORTVA WINAPIV
#    else
#      define ZEXPORTVA FAR CDECL
#    endif
#  endif
#endif

#if defined (__BEOS__)
#  ifdef ZLIB_DLL
#    ifdef ZLIB_INTERNAL
#      define ZEXPORT   __declspec(dllexport)
#      define ZEXPORTVA __declspec(dllexport)
#    else
#      define ZEXPORT   __declspec(dllimport)
#      define ZEXPORTVA __declspec(dllimport)
#    endif
#  endif
#endif

d97 1
a97 6
#ifdef SMALL_MEDIUM
   /* Borland C/C++ and some old MSC versions ignore FAR inside typedef */
#  define Bytef Byte FAR
#else
   typedef Byte  FAR Bytef;
#endif
a119 32
#ifndef SEEK_SET
#  define SEEK_SET        0       /* Seek from beginning of file.  */
#  define SEEK_CUR        1       /* Seek from current position.  */
#  define SEEK_END        2       /* Set file pointer to EOF plus "offset" */
#endif

#if defined(__OS400__)
#define NO_vsnprintf
#endif

#if defined(__MVS__)
#  define NO_vsnprintf
#  ifdef FAR
#    undef FAR
#  endif
#endif

/* MVS linker does not support external names larger than 8 bytes */
#if defined(__MVS__)
#   pragma map(deflateInit_,"DEIN")
#   pragma map(deflateInit2_,"DEIN2")
#   pragma map(deflateEnd,"DEEND")
#   pragma map(deflateBound,"DEBND")
#   pragma map(inflateInit_,"ININ")
#   pragma map(inflateInit2_,"ININ2")
#   pragma map(inflateEnd,"INEND")
#   pragma map(inflateSync,"INSY")
#   pragma map(inflateSetDictionary,"INSEDI")
#   pragma map(compressBound,"CMBND")
#   pragma map(inflate_table,"INTABL")
#   pragma map(inflate_fast,"INFA")
#endif
@


1.3
log
@tack on RCS IDs to everything
enable generation of autogen'd headers (only manually)
@
text
@d1 1
a1 1
/**	$MirOS$ */
a7 1

d282 1
a282 1
#if defined(_BSD_STANDXX) || defined(_KERNEL)
d285 1
a285 1
#include <unistd.h>    /* for SEEK_* and off_t */
a318 1
#   pragma map(inflate_copyright,"INCOPY")
@


1.2
log
@merge src/lib
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
d282 4
a285 1
#include <sys/types.h> /* for off_t */
d287 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: zconf.h,v 1.7 2005/07/20 15:56:41 millert Exp $	*/
d3 1
a3 1
 * Copyright (C) 1995-2005 Jean-loup Gailly.
a45 4
#  define alloc_func            z_alloc_func
#  define free_func             z_free_func
#  define in_func               z_in_func
#  define out_func              z_out_func
d67 2
a68 4
#if defined(_WIN32) || defined(_WIN32_WCE) || defined(__WIN32__)
#  ifndef WIN32
#    define WIN32
#  endif
@

