head	1.8;
access;
symbols
	MIRBSD_10:1.7.0.4
	MIRBSD_10_BASE:1.7
	MIRBSD_9_BASE:1.7
	MIRBSD_8:1.7.0.2
	MIRBSD_8_BASE:1.7
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2008.08.01.15.48.04;	author tg;	state dead;
branches;
next	1.7;
commitid	100489330387BEFF349;

1.7
date	2005.12.06.00.48.15;	author tg;	state Exp;
branches;
next	1.6;
commitid	65b94394dfd92a5e;

1.6
date	2005.07.24.22.57.04;	author tg;	state Exp;
branches;
next	1.5;
commitid	134c42e41ccf577d;

1.5
date	2005.07.24.22.50.06;	author tg;	state Exp;
branches;
next	1.4;
commitid	123b42e4199c7c05;

1.4
date	2005.07.07.12.40.17;	author tg;	state Exp;
branches;
next	1.3;
commitid	620c42cd22b69f3b;

1.3
date	2005.07.07.12.27.26;	author tg;	state Exp;
branches;
next	1.2;
commitid	63f442cd1fb827f1;

1.2
date	2005.03.14.21.58.17;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.26.19;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.26.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.56.36;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.8
log
@get rid of the second copy of zlib, finally, afterâ€¦ ages or so
@
text
@/**	$MirOS: src/lib/libz/zutil.c,v 1.7 2005/12/06 00:48:15 tg Exp $ */
/*	$OpenBSD: zutil.c,v 1.8 2005/07/20 15:56:41 millert Exp $	*/
/* zutil.c -- target dependent utility functions for the compression library
 * Copyright (C) 1995-2005 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
 */

#include "zutil.h"

zRCSID("$MirOS: src/lib/libz/zutil.c,v 1.7 2005/12/06 00:48:15 tg Exp $")

const char * const z_errmsg[10] = {
"need dictionary",     /* Z_NEED_DICT       2  */
"stream end",          /* Z_STREAM_END      1  */
"",                    /* Z_OK              0  */
"file error",          /* Z_ERRNO         (-1) */
"stream error",        /* Z_STREAM_ERROR  (-2) */
"data error",          /* Z_DATA_ERROR    (-3) */
"insufficient memory", /* Z_MEM_ERROR     (-4) */
"buffer error",        /* Z_BUF_ERROR     (-5) */
"incompatible version",/* Z_VERSION_ERROR (-6) */
""};

const char * ZEXPORT zlibVersion()
{
    return ZLIB_VERSION;
}

uLong ZEXPORT zlibCompileFlags()
{
    uLong flags;

    flags = 0;
    switch (sizeof(uInt)) {
    case 2:     break;
    case 4:     flags += 1;     break;
    case 8:     flags += 2;     break;
    default:    flags += 3;
    }
    switch (sizeof(uLong)) {
    case 2:     break;
    case 4:     flags += 1 << 2;        break;
    case 8:     flags += 2 << 2;        break;
    default:    flags += 3 << 2;
    }
    switch (sizeof(voidpf)) {
    case 2:     break;
    case 4:     flags += 1 << 4;        break;
    case 8:     flags += 2 << 4;        break;
    default:    flags += 3 << 4;
    }
    switch (sizeof(z_off_t)) {
    case 2:     break;
    case 4:     flags += 1 << 6;        break;
    case 8:     flags += 2 << 6;        break;
    default:    flags += 3 << 6;
    }
#ifdef DEBUG
    flags += 1 << 8;
#endif
#if defined(ASMV) || defined(ASMINF)
    flags += 1 << 9;
#endif
#ifdef ZLIB_WINAPI
    flags += 1 << 10;
#endif
#ifdef BUILDFIXED
    flags += 1 << 12;
#endif
#ifdef DYNAMIC_CRC_TABLE
    flags += 1 << 13;
#endif
#ifdef NO_GZCOMPRESS
    flags += 1L << 16;
#endif
#ifdef NO_GZIP
    flags += 1L << 17;
#endif
#ifdef PKZIP_BUG_WORKAROUND
    flags += 1L << 20;
#endif
#ifdef FASTEST
    flags += 1L << 21;
#endif
    return flags;
}

#ifdef DEBUG

#  ifndef verbose
#    define verbose 0
#  endif
int z_verbose = verbose;

void z_error (m)
    char *m;
{
    fprintf(stderr, "%s\n", m);
    exit(1);
}
#endif

/* exported to allow conversion of error code to string for compress() and
 * uncompress()
 */
const char * ZEXPORT zError(err)
    int err;
{
    return ERR_MSG(err);
}

#ifndef _KERNEL
/* Any system without a special alloc function */
voidpf zcalloc (opaque, items, size)
    voidpf opaque;
    unsigned items;
    unsigned size;
{
    if (opaque) items += size - size; /* make compiler happy */
    if (items * size == 0)
	return (NULL);
    return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :
                              (voidpf)calloc(items, size);
}

void  zcfree (opaque, ptr)
    voidpf opaque;
    voidpf ptr;
{
    free(ptr);
    if (opaque) return; /* make compiler happy */
}
#endif
@


1.7
log
@do not try to use malloc/free functions in kernel space, ever
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.c,v 1.6 2005/07/24 22:57:04 tg Exp $ */
d10 1
a10 1
zRCSID("$MirOS: src/lib/libz/zutil.c,v 1.6 2005/07/24 22:57:04 tg Exp $")
@


1.6
log
@remove more special flag dependencies etc.
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.c,v 1.5 2005/07/24 22:50:06 tg Exp $ */
d10 1
a10 1
zRCSID("$MirOS: src/lib/libz/zutil.c,v 1.5 2005/07/24 22:50:06 tg Exp $")
d112 1
d133 1
@


1.5
log
@* merge OpenBSD import #SECURITY FIX#, bump minor
* fold inffast.h into inflate.h
* add -Wall
* make __CRAZY clean (with 2 exceptions)
* this yields printf format string checking for gzprintf, yay!
* shrink by removing MSDOS, VMS, OS/2, WINCE, etc. crap
* make use of <sys/cdefs.h> macros
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.c,v 1.4 2005/07/07 12:40:17 tg Exp $ */
d10 1
a10 1
zRCSID("$MirOS: src/lib/libz/zutil.c,v 1.4 2005/07/07 12:40:17 tg Exp $")
a84 24
#ifdef STDC
#  ifdef NO_vsnprintf
        flags += 1L << 25;
#    ifdef HAS_vsprintf_void
        flags += 1L << 26;
#    endif
#  else
#    ifdef HAS_vsnprintf_void
        flags += 1L << 26;
#    endif
#  endif
#else
        flags += 1L << 24;
#  ifdef NO_snprintf
        flags += 1L << 25;
#    ifdef HAS_sprintf_void
        flags += 1L << 26;
#    endif
#  else
#    ifdef HAS_snprintf_void
        flags += 1L << 26;
#    endif
#  endif
#endif
d112 1
a112 122
#if defined(_WIN32_WCE)
    /* The Microsoft C Run-Time Library for Windows CE doesn't have
     * errno.  We define it as a global variable to simplify porting.
     * Its value is always 0 and should not be used.
     */
    int errno = 0;
#endif

#ifdef SYS16BIT

#ifdef __TURBOC__
/* Turbo C in 16-bit mode */

#  define MY_ZCALLOC

/* Turbo C malloc() does not allow dynamic allocation of 64K bytes
 * and farmalloc(64K) returns a pointer with an offset of 8, so we
 * must fix the pointer. Warning: the pointer must be put back to its
 * original form in order to free it, use zcfree().
 */

#define MAX_PTR 10
/* 10*64K = 640K */

local int next_ptr = 0;

typedef struct ptr_table_s {
    voidpf org_ptr;
    voidpf new_ptr;
} ptr_table;

local ptr_table table[MAX_PTR];
/* This table is used to remember the original form of pointers
 * to large buffers (64K). Such pointers are normalized with a zero offset.
 * Since MSDOS is not a preemptive multitasking OS, this table is not
 * protected from concurrent access. This hack doesn't work anyway on
 * a protected system like OS/2. Use Microsoft C instead.
 */

voidpf zcalloc (voidpf opaque, unsigned items, unsigned size)
{
    voidpf buf = opaque; /* just to make some compilers happy */
    ulg bsize = (ulg)items*size;

    /* If we allocate less than 65520 bytes, we assume that farmalloc
     * will return a usable pointer which doesn't have to be normalized.
     */
    if (bsize < 65520L) {
        buf = farmalloc(bsize);
        if (*(ush*)&buf != 0) return buf;
    } else {
        buf = farmalloc(bsize + 16L);
    }
    if (buf == NULL || next_ptr >= MAX_PTR) return NULL;
    table[next_ptr].org_ptr = buf;

    /* Normalize the pointer to seg:0 */
    *((ush*)&buf+1) += ((ush)((uch*)buf-0) + 15) >> 4;
    *(ush*)&buf = 0;
    table[next_ptr++].new_ptr = buf;
    return buf;
}

void  zcfree (voidpf opaque, voidpf ptr)
{
    int n;
    if (*(ush*)&ptr != 0) { /* object < 64K */
        farfree(ptr);
        return;
    }
    /* Find the original pointer */
    for (n = 0; n < next_ptr; n++) {
        if (ptr != table[n].new_ptr) continue;

        farfree(table[n].org_ptr);
        while (++n < next_ptr) {
            table[n-1] = table[n];
        }
        next_ptr--;
        return;
    }
    ptr = opaque; /* just to make some compilers happy */
    Assert(0, "zcfree: ptr not found");
}

#endif /* __TURBOC__ */


#ifdef M_I86
/* Microsoft C in 16-bit mode */

#  define MY_ZCALLOC

#if (!defined(_MSC_VER) || (_MSC_VER <= 600))
#  define _halloc  halloc
#  define _hfree   hfree
#endif

voidpf zcalloc (voidpf opaque, unsigned items, unsigned size)
{
    if (opaque) opaque = 0; /* to make compiler happy */
    return _halloc((long)items, size);
}

void  zcfree (voidpf opaque, voidpf ptr)
{
    if (opaque) opaque = 0; /* to make compiler happy */
    _hfree(ptr);
}

#endif /* M_I86 */

#endif /* SYS16BIT */


#ifndef MY_ZCALLOC /* Any system without a special alloc function */
#ifndef STDC
extern voidp  malloc OF((uInt size));
extern voidp  calloc OF((uInt items, uInt size));
extern void   free   OF((voidpf ptr));
#endif

a131 1
#endif /* MY_ZCALLOC */
@


1.4
log
@assume we always have memcpy/cmp/set
@
text
@d1 2
a2 2
/**	$MirOS: src/lib/libz/zutil.c,v 1.3 2005/07/07 12:27:26 tg Exp $ */
/*	$OpenBSD: zutil.c,v 1.7 2003/12/16 22:33:02 henning Exp $	*/
d4 1
a4 1
 * Copyright (C) 1995-2003 Jean-loup Gailly.
d10 1
a10 9
zRCSID("$MirOS: src/lib/libz/zutil.c,v 1.3 2005/07/07 12:27:26 tg Exp $")

#ifndef NO_DUMMY_DECL
struct internal_state      {int dummy;}; /* for buggy compilers */
#endif

#ifndef STDC
extern void exit OF((int));
#endif
a23 1

d74 1
a74 1
    flags += 1 << 16;
d77 1
a77 1
    flags += 1 << 17;
d80 1
a80 1
    flags += 1 << 20;
d83 1
a83 1
    flags += 1 << 21;
d87 1
a87 1
        flags += 1 << 25;
d89 1
a89 1
        flags += 1 << 26;
d93 1
a93 1
        flags += 1 << 26;
d97 1
a97 1
        flags += 1 << 24;
d99 1
a99 1
        flags += 1 << 25;
d101 1
a101 1
        flags += 1 << 26;
d105 1
a105 1
        flags += 1 << 26;
d137 4
a140 1
    /* does not exist on WCE */
@


1.3
log
@unify libz use (make bootloader use base libz sources)
simplify defines
add more RCS IDs
shrink code
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.c,v 1.2 2005/03/14 21:58:17 tg Exp $ */
d10 1
a10 1
zRCSID("$MirOS: src/lib/libz/zutil.c,v 1.2 2005/03/14 21:58:17 tg Exp $")
a149 37
#ifndef HAVE_MEMCPY
void zmemcpy(dest, source, len)
    Bytef* dest;
    const Bytef* source;
    uInt  len;
{
    if (len == 0) return;
    do {
        *dest++ = *source++; /* ??? to be unrolled */
    } while (--len != 0);
}

int zmemcmp(s1, s2, len)
    const Bytef* s1;
    const Bytef* s2;
    uInt  len;
{
    uInt j;

    for (j = 0; j < len; j++) {
        if (s1[j] != s2[j]) return 2*(s1[j] > s2[j])-1;
    }
    return 0;
}

void zmemzero(dest, len)
    Bytef* dest;
    uInt  len;
{
    if (len == 0) return;
    do {
        *dest++ = 0;  /* ??? to be unrolled */
    } while (--len != 0);
}
#endif


@


1.2
log
@tack on RCS IDs to everything
enable generation of autogen'd headers (only manually)
@
text
@d1 1
a1 1
/**	$MirOS$ */
a7 1

d10 1
a10 1
zRCSID("$MirOS$")
a150 1

a294 1

a319 1

@


1.1
log
@Initial revision
@
text
@d1 1
d11 2
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.c,v 1.8 2005/07/20 15:56:41 millert Exp $	*/
d3 1
a3 1
 * Copyright (C) 1995-2005 Jean-loup Gailly.
d14 4
d81 1
a81 1
    flags += 1L << 16;
d84 1
a84 1
    flags += 1L << 17;
d87 1
a87 1
    flags += 1L << 20;
d90 1
a90 1
    flags += 1L << 21;
d94 1
a94 1
        flags += 1L << 25;
d96 1
a96 1
        flags += 1L << 26;
d100 1
a100 1
        flags += 1L << 26;
d104 1
a104 1
        flags += 1L << 24;
d106 1
a106 1
        flags += 1L << 25;
d108 1
a108 1
        flags += 1L << 26;
d112 1
a112 1
        flags += 1L << 26;
d144 1
a144 4
    /* The Microsoft C Run-Time Library for Windows CE doesn't have
     * errno.  We define it as a global variable to simplify porting.
     * Its value is always 0 and should not be used.
     */
@

