head	1.14;
access;
symbols
	MIRBSD_10:1.12.0.2
	MIRBSD_10_BASE:1.12
	MIRBSD_9_BASE:1.10
	MIRBSD_8:1.9.0.2
	MIRBSD_8_BASE:1.9
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2008.08.01.15.48.04;	author tg;	state dead;
branches;
next	1.13;
commitid	100489330387BEFF349;

1.13
date	2008.04.06.17.00.41;	author tg;	state Exp;
branches;
next	1.12;
commitid	10047F901D044D835B3;

1.12
date	2007.04.17.22.10.59;	author tg;	state Exp;
branches;
next	1.11;
commitid	100462545D61E1C51F9;

1.11
date	2007.04.17.21.59.26;	author tg;	state Exp;
branches;
next	1.10;
commitid	10046254347481F16EE;

1.10
date	2006.01.31.10.32.01;	author tg;	state Exp;
branches;
next	1.9;
commitid	10043DF3CAA77B01C32;

1.9
date	2005.12.06.01.07.17;	author tg;	state Exp;
branches;
next	1.8;
commitid	44b24394e451297f;

1.8
date	2005.12.04.23.14.40;	author tg;	state Exp;
branches;
next	1.7;
commitid	6ea6439378626964;

1.7
date	2005.07.24.23.19.04;	author tg;	state Exp;
branches;
next	1.6;
commitid	43a542e421e74b4b;

1.6
date	2005.07.24.22.50.06;	author tg;	state Exp;
branches;
next	1.5;
commitid	123b42e4199c7c05;

1.5
date	2005.07.07.12.40.17;	author tg;	state Exp;
branches;
next	1.4;
commitid	620c42cd22b69f3b;

1.4
date	2005.07.07.12.27.26;	author tg;	state Exp;
branches;
next	1.3;
commitid	63f442cd1fb827f1;

1.3
date	2005.03.14.21.58.17;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.20.29.40;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.26.19;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.26.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.56.36;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.14
log
@get rid of the second copy of zlib, finally, afterâ€¦ ages or so
@
text
@/**	$MirOS: src/lib/libz/zutil.h,v 1.13 2008/04/06 17:00:41 tg Exp $ */
/*	$OpenBSD: zutil.h,v 1.9 2005/07/20 15:56:42 millert Exp $	*/
/* zutil.h -- internal interface and configuration of the compression library
 * Copyright (C) 1995-2005 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
 */

/* WARNING: this file should *not* be used by applications. It is
   part of the implementation of the compression library and is
   subject to change. Applications should only use zlib.h.
 */

#ifndef ZUTIL_H
#define ZUTIL_H

#define ZLIB_INTERNAL
#include "zlib.h"

#undef zRCSID
#if defined(_STANDALONE)
# include <stand.h>
# define zRCSID(x)	/* nothing */
#elif defined(_KERNEL)
# include <sys/systm.h>
# define zRCSID(x)	/* nothing */
#else
# ifdef STDC
#  include <stddef.h>
#  include <string.h>
#  include <stdlib.h>
# endif
# include <errno.h>
# define zRCSID(x)	__RCSID(x);
#endif

#ifndef local
#  define local static
#endif
/* compile with -Dlocal if your debugger can't find static symbols */

typedef unsigned char  uch;
typedef uch FAR uchf;
typedef unsigned short ush;
typedef ush FAR ushf;
typedef unsigned long  ulg;

extern const char * const z_errmsg[10]; /* indexed by 2-zlib_error */
/* (size given to avoid silly warnings with Visual C++) */

#define ERR_MSG(err) z_errmsg[Z_NEED_DICT-(err)]

#define ERR_RETURN(strm,err) \
  return (strm->msg = ERR_MSG(err), (err))
/* To be used only when the state is known to be valid */

        /* common constants */

#ifndef DEF_WBITS
#  define DEF_WBITS MAX_WBITS
#endif
/* default windowBits for decompression. MAX_WBITS is for compression only */

#if MAX_MEM_LEVEL >= 8
#  define DEF_MEM_LEVEL 8
#else
#  define DEF_MEM_LEVEL  MAX_MEM_LEVEL
#endif
/* default memLevel */

#define STORED_BLOCK 0
#define STATIC_TREES 1
#define DYN_TREES    2
/* The three kinds of block type */

#define MIN_MATCH  3
#define MAX_MATCH  258
/* The minimum and maximum match lengths */

#define PRESET_DICT 0x20 /* preset dictionary flag in zlib header */

        /* common defaults */

#ifndef OS_CODE
#  define OS_CODE  0x03  /* assume Unix */
#endif

#ifndef F_OPEN
#  define F_OPEN(name, mode) fopen((name), (mode))
#endif

         /* functions */

#if defined(STDC99) || (defined(__TURBOC__) && __TURBOC__ >= 0x550)
#  ifndef HAVE_VSNPRINTF
#    define HAVE_VSNPRINTF
#  endif
#endif

#ifdef _KERNEL
#define zmemcpy memmove
#else
#define zmemcpy memcpy
#endif
#define zmemcmp memcmp
#define zmemzero(dest, len) memset(dest, 0, len)

/* Diagnostic functions */
#if defined(DEBUG) && !defined(ZLIB_FREESTANDING)
#  include <stdio.h>
   extern int z_verbose;
   extern void z_error    OF((char *m));
#  define Assert(cond,msg) {if(!(cond)) z_error(msg);}
#  define Trace(x) {if (z_verbose>=0) fprintf x ;}
#  define Tracev(x) {if (z_verbose>0) fprintf x ;}
#  define Tracevv(x) {if (z_verbose>1) fprintf x ;}
#  define Tracec(c,x) {if (z_verbose>0 && (c)) fprintf x ;}
#  define Tracecv(c,x) {if (z_verbose>1 && (c)) fprintf x ;}
#else
#  define Assert(cond,msg)
#  define Trace(x)
#  define Tracev(x)
#  define Tracevv(x)
#  define Tracec(c,x)
#  define Tracecv(c,x)
#endif


voidpf zcalloc OF((voidpf opaque, unsigned items, unsigned size));
void   zcfree  OF((voidpf opaque, voidpf ptr));

#define ZALLOC(strm, items, size) \
           (*((strm)->zalloc))((strm)->opaque, (items), (size))
#define ZFREE(strm, addr)  (*((strm)->zfree))((strm)->opaque, (voidpf)(addr))
#define TRY_FREE(s, p) {if (p) ZFREE(s, p);}

#if defined(ZLIB_NO_ADLERPUSH) || defined(ZLIB_NO_CRC32PUSH)
#define zADDRND(x)	/* nothing */
#elif defined(_STANDALONE)
#define zADDRND(x)	/* nothing */
#elif defined(_KERNEL)
#include <sys/kernel.h>	/* for time */
#include <dev/rndvar.h>
#define zADDRND(x)	rnd_addpool_add((x) ^ (uint32_t)time.tv_sec)
#else /* userland */
#define zADDRND(x)	__extension__({				\
	uint32_t zADDRND_x = ((uint32_t)(x));			\
								\
	arc4random_pushk(&zADDRND_x, sizeof (zADDRND_x));	\
})
#endif

#endif /* ZUTIL_H */
@


1.13
log
@arc4random_pushk
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.h,v 1.12 2007/04/17 22:10:59 tg Exp $ */
@


1.12
log
@gzip (compress(1) tool) uses crc32() which now does adlerpush-alike too
(zutil.h: if either ZLIB_NO_{ADLER,CRC32}PUSH are defined, zADDRND() is
expanded to empty)
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.h,v 1.11 2007/04/17 21:59:26 tg Exp $ */
d145 5
a149 1
#define zADDRND(x)	arc4random_push(x)
@


1.11
log
@move the zADDRND() macro to "zutil.h" (not installed in /usr/include)
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.h,v 1.10 2006/01/31 10:32:01 tg Exp $ */
d136 3
a138 2
#if defined(_STANDALONE) || \
    (!defined(ZLIB_HAS_ADLERPUSH) && !defined(ZLIB_HAS_CRC32PUSH))
d144 1
a144 3
#elif defined(ZLIB_NO_ADLERPUSH)
#define zADDRND(x)	/* nothing */
#else
@


1.10
log
@allow kernel to build again after recent gzfdopen introduction
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.h,v 1.9 2005/12/06 01:07:17 tg Exp $ */
d136 13
@


1.9
log
@include <sys/systm.h> if in-kernel: memmove and friends
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.h,v 1.8 2005/12/04 23:14:40 tg Exp $ */
d108 1
a108 1
#ifdef DEBUG
@


1.8
log
@* elfrdsetroot: fix size of format string arguments (yeah! openbsd, eat this)
* distrib, etc, sys/arch/conf: shrink size of i386 FLOPPY in-kernel root disc
* distrib/*: re-enable i386 floppy (and lots of free space despite smaller)
* distrib/i386/common/list: enable it to find ssh's sources
* libz: make it usable as an in-kernel library "as is"
  XXX remove zlib.{c,h} from src/sys/dev/
* files.i386: use external libz sources
* pbr: export new public symbol
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.h,v 1.7 2005/07/24 23:19:04 tg Exp $ */
d20 6
a25 3
#ifdef _STANDALONE
#include <stand.h>
#define	zRCSID(x)	/* nothing */
d27 1
a27 2
#ifndef _KERNEL
#ifdef STDC
d31 3
a33 4
#endif
#include <errno.h>
#endif
#define	zRCSID(x)	__RCSID(x);
d99 3
d103 1
@


1.7
log
@get -Wcast-qual clean

Attention: minimal API change:
-typedef unsigned (*in_func) OF((void FAR *, unsigned char FAR * FAR *));
+typedef unsigned (*in_func) OF((void FAR *, const unsigned char FAR * FAR *));

If breakage occurs, tell me immediately.
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.h,v 1.6 2005/07/24 22:50:06 tg Exp $ */
d24 1
d31 1
@


1.6
log
@* merge OpenBSD import #SECURITY FIX#, bump minor
* fold inffast.h into inflate.h
* add -Wall
* make __CRAZY clean (with 2 exceptions)
* this yields printf format string checking for gzprintf, yay!
* shrink by removing MSDOS, VMS, OS/2, WINCE, etc. crap
* make use of <sys/cdefs.h> macros
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.h,v 1.5 2005/07/07 12:40:17 tg Exp $ */
d50 1
a50 1
  return (strm->msg = (char*)ERR_MSG(err), (err))
@


1.5
log
@assume we always have memcpy/cmp/set
@
text
@d1 2
a2 2
/**	$MirOS: src/lib/libz/zutil.h,v 1.4 2005/07/07 12:27:26 tg Exp $ */
/*	$OpenBSD: zutil.h,v 1.8 2004/12/03 03:06:37 djm Exp $	*/
d4 1
a4 1
 * Copyright (C) 1995-2003 Jean-loup Gailly.
d29 1
a29 5
#ifdef NO_ERRNO_H
    extern int errno;
#else
#   include <errno.h>
#endif
a77 76
        /* target dependencies */

#if defined(MSDOS) || (defined(WINDOWS) && !defined(WIN32))
#  define OS_CODE  0x00
#  if defined(__TURBOC__) || defined(__BORLANDC__)
#    if(__STDC__ == 1) && (defined(__LARGE__) || defined(__COMPACT__))
       /* Allow compilation with ANSI keywords only enabled */
       void _Cdecl farfree( void *block );
       void *_Cdecl farmalloc( unsigned long nbytes );
#    else
#      include <alloc.h>
#    endif
#  else /* MSC or DJGPP */
#    include <malloc.h>
#  endif
#endif

#ifdef AMIGA
#  define OS_CODE  0x01
#endif

#if defined(VAXC) || defined(VMS)
#  define OS_CODE  0x02
#  define F_OPEN(name, mode) \
     fopen((name), (mode), "mbc=60", "ctx=stm", "rfm=fix", "mrs=512")
#endif

#if defined(ATARI) || defined(atarist)
#  define OS_CODE  0x05
#endif

#ifdef OS2
#  define OS_CODE  0x06
#endif

#if defined(MACOS) || defined(TARGET_OS_MAC)
#  define OS_CODE  0x07
#  if defined(__MWERKS__) && __dest_os != __be_os && __dest_os != __win32_os
#    include <unix.h> /* for fdopen */
#  else
#    ifndef fdopen
#      define fdopen(fd,mode) NULL /* No fdopen() */
#    endif
#  endif
#endif

#ifdef TOPS20
#  define OS_CODE  0x0a
#endif

#ifdef WIN32
#  ifndef __CYGWIN__  /* Cygwin is Unix, not Win32 */
#    define OS_CODE  0x0b
#  endif
#endif

#ifdef __50SERIES /* Prime/PRIMOS */
#  define OS_CODE  0x0f
#endif

#if defined(_BEOS_) || defined(RISCOS)
#  define fdopen(fd,mode) NULL /* No fdopen() */
#endif

#if (defined(_MSC_VER) && (_MSC_VER > 600))
#  if defined(_WIN32_WCE)
#    define fdopen(fd,mode) NULL /* No fdopen() */
#    ifndef _PTRDIFF_T_DEFINED
       typedef int ptrdiff_t;
#      define _PTRDIFF_T_DEFINED
#    endif
#  else
#    define fdopen(fd,type)  _fdopen(fd,type)
#  endif
#endif

a94 36
#if defined(__CYGWIN__)
#  ifndef HAVE_VSNPRINTF
#    define HAVE_VSNPRINTF
#  endif
#endif
#ifndef HAVE_VSNPRINTF
#  ifdef MSDOS
     /* vsnprintf may exist on some MS-DOS compilers (DJGPP?),
        but for now we just assume it doesn't. */
#    define NO_vsnprintf
#  endif
#  ifdef __TURBOC__
#    define NO_vsnprintf
#  endif
#  ifdef WIN32
     /* In Win32, vsnprintf is available as the "non-ANSI" _vsnprintf. */
#    if !defined(vsnprintf) && !defined(NO_vsnprintf)
#      define vsnprintf _vsnprintf
#    endif
#  endif
#  ifdef __SASC
#    define NO_vsnprintf
#  endif
#endif
#ifdef VMS
#  define NO_vsnprintf
#endif

#ifdef HAVE_STRERROR
#  ifndef VMS
     extern char *strerror OF((int));
#  endif
#  define zstrerror(errnum) strerror(errnum)
#else
#  define zstrerror(errnum) ""
#endif
@


1.4
log
@unify libz use (make bootloader use base libz sources)
simplify defines
add more RCS IDs
shrink code
@
text
@d1 1
a1 1
/**	$MirOS: src/lib/libz/zutil.h,v 1.3 2005/03/14 21:58:17 tg Exp $ */
a22 1
#define	zmemcpy		memcpy
d212 3
a214 33
#ifdef	zmemcpy
# define zmemcmp memcmp
# define zmemzero(dest, len) memset(dest, 0, len)
#else
#if defined(pyr)
#  define NO_MEMCPY
#endif
#if defined(SMALL_MEDIUM) && !defined(_MSC_VER) && !defined(__SC__)
 /* Use our own functions for small and medium model with MSC <= 5.0.
  * You may have to use the same strategy for Borland C (untested).
  * The __SC__ check is for Symantec.
  */
#  define NO_MEMCPY
#endif
#if defined(STDC) && !defined(HAVE_MEMCPY) && !defined(NO_MEMCPY)
#  define HAVE_MEMCPY
#endif
#ifdef HAVE_MEMCPY
#  ifdef SMALL_MEDIUM /* MSDOS small or medium model */
#    define zmemcpy _fmemcpy
#    define zmemcmp _fmemcmp
#    define zmemzero(dest, len) _fmemset(dest, 0, len)
#  else
#    define zmemcpy memcpy
#    define zmemcmp memcmp
#    define zmemzero(dest, len) memset(dest, 0, len)
#  endif
#else
   extern void zmemcpy  OF((Bytef* dest, const Bytef* source, uInt len));
   extern int  zmemcmp  OF((const Bytef* s1, const Bytef* s2, uInt len));
   extern void zmemzero OF((Bytef* dest, uInt len));
#endif
#endif
@


1.3
log
@tack on RCS IDs to everything
enable generation of autogen'd headers (only manually)
@
text
@d1 1
a1 1
/**	$MirOS$ */
a12 1

a20 3
#if defined(_BSD_STANDXX) || defined(_KERNEL)
#include <lib/libsa/stand.h>
#else
d22 2
a23 2
#endif
#define zRCSID(x) /* nothing */
d35 1
a35 1
#define zRCSID(x) __RCSID(x);
@


1.2
log
@merge src/lib
@
text
@d20 1
d22 1
a22 1
# if defined(_BSD_STANDXX) || defined(_KERNEL)
d24 1
a24 1
# else
d26 2
a27 1
# endif
d39 1
@


1.1
log
@Initial revision
@
text
@d1 1
d21 3
d25 1
d214 4
d246 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.9 2005/07/20 15:56:42 millert Exp $	*/
d3 1
a3 1
 * Copyright (C) 1995-2005 Jean-loup Gailly.
d23 1
a23 3
#  ifndef _WIN32_WCE
#    include <stddef.h>
#  endif
a27 8
#   ifdef _WIN32_WCE
      /* The Microsoft C Run-Time Library for Windows CE doesn't have
       * errno.  We define it as a global variable to simplify porting.
       * Its value is always 0 and should not be used.  We rename it to
       * avoid conflict with other libraries that use the same workaround.
       */
#     define errno z_errno
#   endif
d30 1
a30 3
#  ifndef _WIN32_WCE
#    include <errno.h>
#  endif
a111 3
#  ifdef M_I86
     #include <malloc.h>
#  endif
d200 9
@

