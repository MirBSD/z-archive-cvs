head	1.4;
access;
symbols
	ncurses-devel:1.1.109.1.0.2
	ncurses-5_5:1.1.109.1
	lynx:1.1.109;
locks; strict;
comment	@# @;


1.4
date	2006.10.28.19.07.59;	author tg;	state dead;
branches;
next	1.3;
commitid	1004543AA865C08B5DD;

1.3
date	2006.10.27.16.13.55;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045423016752CB2FA;

1.2
date	2006.06.08.23.48.39;	author tg;	state dead;
branches;
next	1.1;
commitid	1004488B5EE329FB78D;

1.1
date	2006.06.04.23.37.17;	author tg;	state Exp;
branches
	1.1.109.1;
next	;
commitid	10044836EA64DB61E09;

1.1.109.1
date	2006.06.04.23.37.17;	author tg;	state Exp;
branches;
next	;
commitid	10044836EA64DB61E09;


desc
@@


1.4
log
@switch to libncurses (for now)
agreed bsiegert@@

ncurses/Makefile: also install HTML docs

switched: libform libmenu libpanel and a few progs, lynx
not switched: tset/clear (but modernised), we use obsd code here
fixed: window
@
text
@#!/bin/sh
# $Id: capconvert,v 1.3 1997/08/02 21:52:06 tom Exp $
#
# capconvert -- automated conversion from termcap to terminfo
#

echo "This script tries to automatically set you up so that your applications"
echo "that now use termcap can use terminfo and the ncurses library."
echo ""

# Note, except for telling if we're running under xterm we don't use TERM at
# all.  This is because BSD users not infrequently have multiple termtypes
# selected by conditionals in tset -- unless they're xterm users, in which
# case they're on a workstation and probably don't.

# Check to make sure TERMINFO is not already defined
if test -n "$TERMINFO"
then
	echo "TERMINFO is already defined in your environment.  This means"
	echo "you already have a local terminfo tree, so you do not need any"
	echo "conversion."
	if test ! -d $TERMINFO ; then
		echo "Caution: TERMINFO does not point to a directory!"
	fi
	exit;
fi

# Check to see if terminfo is present in one of the standard locations.
terminfo=no
for p in $TERMINFO \
	/usr/lib/terminfo \
	/usr/share/lib/terminfo \
	/usr/share/terminfo \
	/usr/local/lib/terminfo \
	/usr/local/share/terminfo
do
	if test -d $p ; then
		terminfo=yes
		break
	fi
done

if test $terminfo = yes
then
	echo "Your system already has a system-wide terminfo tree."
	echo ""
	if test -z "$TERMCAP"
	then
		echo "You have no TERMCAP variable set, so we are done."
		# Assumes the terminfo master covers all canned terminal types
		exit;
	fi
	if test "$TERM" = "xterm"
	then
		echo "You are running xterm, which usually sets TERMCAP itself."
		echo "We can ignore this, because terminfo knows about xterm."
		echo "So you will just use the system-wide terminfo tree."
		exit;
	else
		echo "We will have to make a local one for you anyway, to capture the effect"
		echo "of your TERMCAP variable."
	fi
else
	echo "No system-wide terminfo tree.  We will make you a local one."
fi
echo "";

# Check if test -x works (it's not portable, but useful)
OPT="-x"
TMP=test$$; touch $TMP && chmod 755 $TMP
if test $OPT $TMP ; then
	chmod 644 $TMP
	test $OPT $TMP && OPT="-f"
else
	OPT="-f"
fi
rm -f $TMP

# First step -- go find tic
TIC=
IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
for x in $PATH .
do
	if test $OPT $x/tic
	then 
		TIC=$x/tic
		break
	fi
done
IFS="$ac_save_ifs"

if test -n "$TIC"
then
	echo "I see tic at $TIC."
	case $TIC in # (vi
	./tic)
		if test $OPT ../misc/shlib ; then
			TIC="../misc/shlib $TIC"
		fi
		;;
	esac
else
	echo "You do not have tic installed anywhere I can see, please fix that."
	exit;
fi
echo "";

# We have tic.  Either there's no system terminfo tree or there is one but
# the user has a TERMCAP variable that may modify a stock description.
#

# Make the user a terminfo directory
if test -d $HOME/.terminfo
then
	echo "It appears you already have a private terminfo directory"
	echo "at $HOME/.terminfo; this seems odd, because TERMINFO"
	echo "is not defined.  I am not going to second-guess this -- if you" 
	echo "really want me to try auto-configuring for you, remove or"
	echo "rename $HOME/terminfo and run me again."
	exit;
else
	echo "I am creating your private terminfo directory at $HOME/.terminfo"
	mkdir $HOME/.terminfo
	# Ensure that that's where tic's compilation results.
	# This isn't strictly necessary with a 1.9.7 or later tic.
	TERMINFO="$HOME/.terminfo"; export TERMINFO
fi
echo "";

# Find a terminfo source to work from
if test -f ../misc/terminfo.src
then
	echo "I see the terminfo master source is handy; I will use that."
	master=../misc/terminfo.src
else
	# Ooops...looks like we're running from somewhere other than the
	# progs directory of an ncurses source tree.
	master=`find $HOME -name "*terminfo.src" -print`
	mcount=`echo $master | wc -l`
	case $mcount in
	0)
		echo "I can not find a terminfo source file anywhere under your home directory."
		echo "There should be a file called terminfo.src somewhere in your"
		echo "ncurses distribution; please put it in your home directotry"
		echo "and run me again (it does not have to live there permanently)."
		exit;
	;;
	1)
		echo "I see a file called $master."
		echo "I am going to assume this is the terminfo source included with"
		echo "the ncurses distribution.  If this assumption is wrong, please"
		echo "interrupt me now!  OK to continue?"
		read ans;
	;;
	2)
		echo "I see more than one possible terminfo source.  Here they are:"
		echo $master | sed "/^/s//	/";
		while :
		do
			echo "Please tell me which one to use:"
			read master;
			if test -f $master
			then
				break
			else
				echo "That file does not exist. Try again?";
			fi
		done
	;;
	esac
fi
echo "";

# Now that we have a master, compile it into the local tree
echo "OK, now I will make your private terminfo tree.  This may take a bit..."
#
# Kluge alert: we compile terminfo.src in two pieces because a lot of machines
# with < 16MB RAM choke on tic's core-hog habits.
trap "rm -f tsplit$$.*" 0 1 2 5 15
sed -n $master \
	-e '1,/SPLIT HERE/w 'tsplit$$.01 \
	-e '/SPLIT HERE/,$w 'tsplit$$.02 \
	2>/dev/null
for x in tsplit$$.*; do eval $TIC $x; done
rm tsplit$$.*
trap 0 1 2 5 15
#
echo "You now have a private tree under $HOME/.terminfo;"
echo "the ncurses library will automatically read from it,"
echo "and ncurses tic will automatically compile entries to it." 

# We're done unless user has a .termcap file or equivalent named by TERMCAP
if test -z "$TERMCAP"
then
	echo "You have no TERMCAP set, so we are done."
fi

# OK, here comes the nasty case...user has a TERMCAP.  Instead of
# trying to follow all the convolutions of the relationship between
# TERM and TERMCAP (partly because it's too painful, and partly because
# we don't actually know what TERM will be nor even if it always has
# the same value for this user) we do the following three steps...

if test -f $HOME/.termcap
then
	echo 'I see you have a $HOME/.termcap file.  I will compile that.'
	eval $TIC $HOME/.termcap
	echo "Done."
	echo "Note that editing $HOME/.termcap will no longer change the data curses sees."
elif test -f "$TERMCAP"
then 
	echo "Your TERMCAP names the file $TERMCAP.  I will compile that."
	eval $TIC $TERMCAP
	echo "Done."
	echo "Note that editing $TERMCAP will no longer change the data curses sees."
else
	echo "Your TERMCAP value appears to be an entry in termcap format."
	echo "I will compile it."
	echo $TERMCAP >myterm$$
	eval $TIC myterm$$
	rm myterm$$
	echo "Done."
	echo "Note that editing TERMCAP will no longer change the data curses sees."
fi
echo "To do that, decompile the terminal decription you want with infocmp(1),"
echo "edit to taste, and recompile using tic(1)."

# capconvert ends here

@


1.3
log
@resurrect branch
@
text
@@


1.2
log
@remove "new" libncurses:
* libncurses can do about the same things as our current libcurses,
  with about the same bugs regarding japanese character positions
  and cursor positioning in an uxterm (and lynx width bugs)
* libncurses cannot, however, make use of terminfo.db and neither
  do I want to restrict it to termcap nor do we want the zillions
  of files under /usr/share/terminfo like the clueless leenocksers
  (except if we had reiserfs)
* libncursesw suffers from the same limitations as libncurses
* libncursesw does not correctly display any text in an uxterm
  except for some links in lynx (but not ordinary text) - this
  might have something to do with "fancy curses" though
* libmenu has not yet been ported, is easy though
* libpanel neither

thus the developers decided it's not worth to continue
investing work into it until these flaws are found and
fixed

furthermore, upgrading our curses is not easily possible,
nor is it possible at all to get hands on a distfile of
ncurses-5.2-20010224 so we can't diff against the vendor;
thus millert@@openbsd.org is the only person who can solve
this dilemma, I think
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.109.1
log
@Import Tom Dickey's ncurses 5.5 (quite stripped down)
@
text
@@
