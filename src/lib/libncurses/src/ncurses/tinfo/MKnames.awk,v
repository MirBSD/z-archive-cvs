head	1.3;
access;
symbols
	MIRBSD_10:1.3.0.2
	MIRBSD_10_BASE:1.3
	ncurses-devel:1.1.109.1.0.2
	ncurses-5_5:1.1.109.1
	lynx:1.1.109;
locks; strict;
comment	@# @;


1.3
date	2006.10.27.16.13.41;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045423016752CB2FA;

1.2
date	2006.06.08.23.48.18;	author tg;	state dead;
branches;
next	1.1;
commitid	1004488B5EE329FB78D;

1.1
date	2006.06.04.23.37.14;	author tg;	state Exp;
branches
	1.1.109.1;
next	;
commitid	10044836EA64DB61E09;

1.1.109.1
date	2006.06.04.23.37.14;	author tg;	state Exp;
branches;
next	;
commitid	10044836EA64DB61E09;


desc
@@


1.3
log
@resurrect branch
@
text
@# $Id: MKnames.awk,v 1.11 2000/12/09 23:46:13 tom Exp $
BEGIN		{
			print  "/* This file was generated by MKnames.awk */" > "namehdr"
			print  ""				> "namehdr"
			print  "#include <curses.priv.h>"	> "namehdr"
			print  ""				> "namehdr"
			print  "#define IT NCURSES_CONST char * const"	> "namehdr"
			print  ""				> "namehdr"
			print  "#if BROKEN_LINKER"		> "namehdr"
			print  "#include <term.h>"		> "namehdr"
			print  "#define DCL(it) static IT data##it[]" > "namehdr"
			print  "#else"				> "namehdr"
			print  "#define DCL(it) NCURSES_EXPORT_VAR(IT) it[]"	> "namehdr"
			print  "#endif"				> "namehdr"
			print  ""				> "namehdr"
			print  "/*"				> "boolnames"
			print  " *	names.c - Arrays of capability names and codes"  > "boolnames"
			print  " *"				> "boolnames"
			print  " */"				> "boolnames"
			print  ""				> "boolnames"
			print  "DCL(boolnames)  = {"		> "boolnames"
			print  "DCL(boolfnames) = {"		> "boolfnames"
			print  "DCL(boolcodes)  = {"		> "boolcodes"
			print  "DCL(numnames)   = {"		> "numnames"
			print  "DCL(numfnames)  = {"		> "numfnames"
			print  "DCL(numcodes)   = {"		> "numcodes"
			print  "DCL(strnames)   = {"		> "strnames"
			print  "DCL(strfnames)  = {"		> "strfnames"
			print  "DCL(strcodes)   = {"		> "strcodes"
		}

$1 ~ /^#/		{next;}

$1 == "SKIPWARN"	{next;}

$3 == "bool"	{
			printf "\t\t\"%s\",\n", $2 > "boolnames"
			printf "\t\t\"%s\",\n", $1 > "boolfnames"
			printf "\t\t\"%s\",\n", $4 > "boolcodes"
		}

$3 == "num"	{
			printf "\t\t\"%s\",\n", $2 > "numnames"
			printf "\t\t\"%s\",\n", $1 > "numfnames"
			printf "\t\t\"%s\",\n", $4 > "numcodes"
		}

$3 == "str"	{
			printf "\t\t\"%s\",\n", $2 > "strnames"
			printf "\t\t\"%s\",\n", $1 > "strfnames"
			printf "\t\t\"%s\",\n", $4 > "strcodes"
		}

END		{
			print  "\t\t(NCURSES_CONST char *)0," > "boolnames"
			print  "};" > "boolnames"
			print  "" > "boolnames"
			print  "\t\t(NCURSES_CONST char *)0," > "boolfnames"
			print  "};" > "boolfnames"
			print  "" > "boolfnames"
			print  "\t\t(NCURSES_CONST char *)0," > "boolcodes"
			print  "};" > "boolcodes"
			print  "" > "boolcodes"
			print  "\t\t(NCURSES_CONST char *)0," > "numnames"
			print  "};" > "numnames"
			print  "" > "numnames"
			print  "\t\t(NCURSES_CONST char *)0," > "numfnames"
			print  "};" > "numfnames"
			print  "" > "numfnames"
			print  "\t\t(NCURSES_CONST char *)0," > "numcodes"
			print  "};" > "numcodes"
			print  "" > "numcodes"
			print  "\t\t(NCURSES_CONST char *)0," > "strnames"
			print  "};" > "strnames"
			print  "" > "strnames"
			print  "\t\t(NCURSES_CONST char *)0," > "strfnames"
			print  "};" > "strfnames"
			print  "" > "strfnames"
			print  "\t\t(NCURSES_CONST char *)0," > "strcodes"
			print  "};"				> "strcodes"
			print  ""				> "strcodes"
			print  "#if BROKEN_LINKER"		> "nameftr"
			print  "#define FIX(it) NCURSES_IMPEXP IT * NCURSES_API _nc_##it(void) { return data##it; }" > "nameftr"
			print  "FIX(boolnames)"			> "nameftr"
			print  "FIX(boolfnames)"		> "nameftr"
			print  "FIX(numnames)"			> "nameftr"
			print  "FIX(numfnames)"			> "nameftr"
			print  "FIX(strnames)"			> "nameftr"
			print  "FIX(strfnames)"			> "nameftr"
			print  "#endif /* BROKEN_LINKER */"	> "nameftr"
			print  ""				> "codeftr"
			print  "#if BROKEN_LINKER"		> "codeftr"
			print  "#define FIX(it) NCURSES_IMPEXP IT * NCURSES_API _nc_##it(void) { return data##it; }" > "codeftr"
			print  "FIX(boolcodes)"			> "codeftr"
			print  "FIX(numcodes)"			> "codeftr"
			print  "FIX(strcodes)"			> "codeftr"
			print  "#endif /* BROKEN_LINKER */"	> "codeftr"
		}
@


1.2
log
@remove "new" libncurses:
* libncurses can do about the same things as our current libcurses,
  with about the same bugs regarding japanese character positions
  and cursor positioning in an uxterm (and lynx width bugs)
* libncurses cannot, however, make use of terminfo.db and neither
  do I want to restrict it to termcap nor do we want the zillions
  of files under /usr/share/terminfo like the clueless leenocksers
  (except if we had reiserfs)
* libncursesw suffers from the same limitations as libncurses
* libncursesw does not correctly display any text in an uxterm
  except for some links in lynx (but not ordinary text) - this
  might have something to do with "fancy curses" though
* libmenu has not yet been ported, is easy though
* libpanel neither

thus the developers decided it's not worth to continue
investing work into it until these flaws are found and
fixed

furthermore, upgrading our curses is not easily possible,
nor is it possible at all to get hands on a distfile of
ncurses-5.2-20010224 so we can't diff against the vendor;
thus millert@@openbsd.org is the only person who can solve
this dilemma, I think
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.109.1
log
@Import Tom Dickey's ncurses 5.5 (quite stripped down)
@
text
@@
