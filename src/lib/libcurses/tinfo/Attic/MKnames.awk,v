head	1.2;
access;
symbols
	ncurses-5_2-devel:1.1.1.1.0.4
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2006.10.28.19.22.43;	author tg;	state dead;
branches;
next	1.1;
commitid	1004543ADE3633A240A;

1.1
date	2005.02.05.17.25.10;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.25.10;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@libncurses 5.2 is now obsolete
cf. Message-ID: <20061027163522.N26598@@mail101.his.com>
@
text
@# $OpenBSD: MKnames.awk,v 1.2 2001/01/22 18:01:50 millert Exp $
# $From: MKnames.awk,v 1.11 2000/12/09 23:46:13 tom Exp $
BEGIN		{
			print  "/* This file was generated by MKnames.awk */" > "namehdr"
			print  ""				> "namehdr"
			print  "#include <curses.priv.h>"	> "namehdr"
			print  ""				> "namehdr"
			print  "#define IT NCURSES_CONST char * const"	> "namehdr"
			print  ""				> "namehdr"
			print  "#if BROKEN_LINKER"		> "namehdr"
			print  "#include <term.h>"		> "namehdr"
			print  "#define DCL(it) static IT data##it[]" > "namehdr"
			print  "#else"				> "namehdr"
			print  "#define DCL(it) NCURSES_EXPORT_VAR(IT) it[]"	> "namehdr"
			print  "#endif"				> "namehdr"
			print  ""				> "namehdr"
			print  "/*"				> "boolnames"
			print  " *	names.c - Arrays of capability names and codes"  > "boolnames"
			print  " *"				> "boolnames"
			print  " */"				> "boolnames"
			print  ""				> "boolnames"
			print  "DCL(boolnames)  = {"		> "boolnames"
			print  "DCL(boolfnames) = {"		> "boolfnames"
			print  "DCL(boolcodes)  = {"		> "boolcodes"
			print  "DCL(numnames)   = {"		> "numnames"
			print  "DCL(numfnames)  = {"		> "numfnames"
			print  "DCL(numcodes)   = {"		> "numcodes"
			print  "DCL(strnames)   = {"		> "strnames"
			print  "DCL(strfnames)  = {"		> "strfnames"
			print  "DCL(strcodes)   = {"		> "strcodes"
		}

$1 ~ /^#/		{next;}

$1 == "SKIPWARN"	{next;}

$3 == "bool"	{
			printf "\t\t\"%s\",\n", $2 > "boolnames"
			printf "\t\t\"%s\",\n", $1 > "boolfnames"
			printf "\t\t\"%s\",\n", $4 > "boolcodes"
		}

$3 == "num"	{
			printf "\t\t\"%s\",\n", $2 > "numnames"
			printf "\t\t\"%s\",\n", $1 > "numfnames"
			printf "\t\t\"%s\",\n", $4 > "numcodes"
		}

$3 == "str"	{
			printf "\t\t\"%s\",\n", $2 > "strnames"
			printf "\t\t\"%s\",\n", $1 > "strfnames"
			printf "\t\t\"%s\",\n", $4 > "strcodes"
		}

END		{
			print  "\t\t(NCURSES_CONST char *)0," > "boolnames"
			print  "};" > "boolnames"
			print  "" > "boolnames"
			print  "\t\t(NCURSES_CONST char *)0," > "boolfnames"
			print  "};" > "boolfnames"
			print  "" > "boolfnames"
			print  "\t\t(NCURSES_CONST char *)0," > "boolcodes"
			print  "};" > "boolcodes"
			print  "" > "boolcodes"
			print  "\t\t(NCURSES_CONST char *)0," > "numnames"
			print  "};" > "numnames"
			print  "" > "numnames"
			print  "\t\t(NCURSES_CONST char *)0," > "numfnames"
			print  "};" > "numfnames"
			print  "" > "numfnames"
			print  "\t\t(NCURSES_CONST char *)0," > "numcodes"
			print  "};" > "numcodes"
			print  "" > "numcodes"
			print  "\t\t(NCURSES_CONST char *)0," > "strnames"
			print  "};" > "strnames"
			print  "" > "strnames"
			print  "\t\t(NCURSES_CONST char *)0," > "strfnames"
			print  "};" > "strfnames"
			print  "" > "strfnames"
			print  "\t\t(NCURSES_CONST char *)0," > "strcodes"
			print  "};"				> "strcodes"
			print  ""				> "strcodes"
			print  "#if BROKEN_LINKER"		> "nameftr"
			print  "#define FIX(it) NCURSES_IMPEXP IT * NCURSES_API _nc_##it(void) { return data##it; }" > "nameftr"
			print  "FIX(boolnames)"			> "nameftr"
			print  "FIX(boolfnames)"		> "nameftr"
			print  "FIX(numnames)"			> "nameftr"
			print  "FIX(numfnames)"			> "nameftr"
			print  "FIX(strnames)"			> "nameftr"
			print  "FIX(strfnames)"			> "nameftr"
			print  "#endif /* BROKEN_LINKER */"	> "nameftr"
			print  ""				> "codeftr"
			print  "#if BROKEN_LINKER"		> "codeftr"
			print  "#define FIX(it) NCURSES_IMPEXP IT * NCURSES_API _nc_##it(void) { return data##it; }" > "codeftr"
			print  "FIX(boolcodes)"			> "codeftr"
			print  "FIX(numcodes)"			> "codeftr"
			print  "FIX(strcodes)"			> "codeftr"
			print  "#endif /* BROKEN_LINKER */"	> "codeftr"
		}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
