head	1.1;
branch	1.1.1;
access;
symbols
	MIRBSD_10:1.1.1.2.0.4
	MIRBSD_10_BASE:1.1.1.2
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.1
date	2005.02.05.17.25.15;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.25.15;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.53.58;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.1
log
@Initial revision
@
text
@.\" $OpenBSD: keynote.1,v 1.25 2003/07/08 11:02:23 jmc Exp $
.\"
.\" The author of this code is Angelos D. Keromytis (angelos@@dsl.cis.upenn.edu)
.\"
.\" This code was written by Angelos D. Keromytis in Philadelphia, PA, USA,
.\" in April-May 1998
.\"
.\" Copyright (C) 1998, 1999 by Angelos D. Keromytis.
.\"
.\" Permission to use, copy, and modify this software with or without fee
.\" is hereby granted, provided that this entire notice is included in
.\" all copies of any software which is or includes a copy or
.\" modification of this software.
.\" You may use this code under the GNU public license if you so wish. Please
.\" contribute changes back to the author.
.\"
.\" THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTY. IN PARTICULAR, THE AUTHORS MAKES NO
.\" REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
.\" MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
.\" PURPOSE.
.\"
.Dd April 29, 1999
.Dt KEYNOTE 1
.\" .TH keynote 1 local
.Os
.Sh NAME
.Nm keynote
.Nd command line tool for
.Xr keynote 3
operations
.Sh SYNOPSIS
.Nm keynote keygen
.Ar AlgorithmName
.Ar KeySize
.Ar PublicKeyFile
.Ar PrivateKeyFile
.Op print-offset
.Op print-length
.Nm keynote sign
.Op Fl v
.Ar AlgorithmName
.Ar AssertionFile
.Ar PrivateKeyFile
.Op print-offset
.Op print-length
.Nm keynote sigver
.Op AssertionFile
.Nm keynote verify
.Op Fl h
.Op Fl e Ar file
.Fl l Ar file
.Fl r Ar retlist
.Op Fl k Ar file
.Op Fl l Ar file
.Op Ar file ...
.Sh DESCRIPTION
For more details on
.Nm KeyNote ,
see RFC 2704.
.Sh KEY GENERATION
"keynote keygen" creates a public/private key of size
.Fa KeySize ,
(in bits) for the algorithm specified by
.Fa AlgorithmName .
Typical keysizes are 512, 1024, or 2048 (bits).
The minimum key size for DSA keys is 512 (bits).
Supported
.Fa AlgorithmName
identifiers are:
.Pp
.Bl -tag -width Dq -offset indent -compact
.It Dq dsa-hex:
.It Dq dsa-base64:
.It Dq rsa-hex:
.It Dq rsa-base64:
.It Dq x509-hex:
.It Dq x509-base64:
.El
.Pp
Notice that the trailing colon is required.
The resulting public key is stored in file
.Fa PublicKeyFile .
Similarly, the resulting private key is stored in file
.Fa PrivateKeyFile .
Either of the filenames can be specified to be
.Dq \- ,
in which case the corresponding key(s) will be printed to standard output.
.Pp
The optional parameters
.Fa print-offset
and
.Fa print-length
specify the offset from the beginning of the line where the key
will be printed, and the number of characters of the key that will
be printed per line.
.Fa print-length
includes
.Fa AlgorithmName
for the first line and has to be longer (by at least 2) than
.Fa AlgorithmName .
.Fa print-length
also accounts for the line-continuation character (backslash) at
the end of each line, and the doublequotes at the beginning and end
of the key encoding.
Default values are 12 and 50 respectively.
.Sh ASSERTION SIGNING
"keynote sign" reads the assertion contained in
.Fa AssertionFile
and generates a signature specified by
.Fa AlgorithmName
using the private key stored in
.Fa PrivateKeyFile .
The private key is expected to be of the form output by
.Qq keynote keygen .
The private key algorithm and the
.Fa AlgorithmName
specified as an argument are expected to match.
There is no requirement for the internal or ASCII encodings to match.
Valid
.Fa AlgorithmName
identifiers are:
.Pp
.Bl -tag -width Dq -offset indent -compact
.It Dq sig-dsa-sha1-hex:
.It Dq sig-dsa-sha1-base64:
.It Dq sig-rsa-sha1-hex:
.It Dq sig-rsa-sha1-base64:
.It Dq sig-rsa-md5-hex:
.It Dq sig-rsa-md5-base64:
.It Dq sig-x509-sha1-hex:
.It Dq sig-x509-sha1-base64:
.El
.Pp
Notice that the trailing colon is required.
The resulting signature is printed to standard output.
This can then be added (via cut-and-paste or some script) at the end of the
assertion, in the
.Fa Signature
field.
.Pp
The public key corresponding to the private key in
.Fa PrivateKeyFile
is expected to already be included in the
.Fa Authorizer
field of the assertion, either directly or indirectly (i.e., through
use of a
.Fa Local-Constants
attribute).
Furthermore, the assertion must have a
.Fa Signature
field (even if it is empty), as the signature is computed on
everything between the
.Fa KeyNote-Version
and
.Fa Signature
keywords (inclusive), and the
.Fa AlgorithmName
string.
.Pp
If the
.Fl v
flag is provided,
.Qq keynote sign
will also verify the newly-created signature using the
.Fa Authorizer
field key.
.Pp
The optional parameters
.Fa print-offset
and
.Fa print-length
specify the offset from the beginning of the line where the signature
will be printed, and the number of characters of the signature that will
be printed per line.
.Fa print-length
includes
.Fa AlgorithmName
for the first line and has to be longer (by at least 2) than
.Fa AlgorithmName .
.Fa print-length
also accounts for the line-continuation character (backslash) at
the end of each line, and the doublequotes at the beginning and end
of the signature encoding.
Default values are 12 and 50 respectively.
.Sh SIGNATURE VERIFICATION
.Qq keynote sigver
reads the assertions contained in
.Fa AssertionFile
and verifies the public-key signatures on all of them.
.Sh QUERY TOOL
For each operand that names a
.Ar file ,
.Qq keynote verify
reads the file and parses the assertions contained therein (one assertion
per file).
.Pp
Files given with the
.Fl l
flag are assumed to contain trusted assertions (no signature
verification is performed), and the
.Fa Authorizer
field can contain non-key principals.
There should be at least one assertion with the
.Fa POLICY
keyword in the
.Fa Authorizer
field.
.Pp
The
.Fl r
flag is used to provide a comma-separated list of return values, in
increasing order of compliance from left to right.
.Pp
Files given with the
.Fl e
flag are assumed to contain environment variables and their values,
in the format:
.Pp
.Dl  varname = \&"value\&"
.Pp
.Fa varname
can begin with any letter (upper or lower case) or number,
and can contain underscores.
.Fa value
is a quoted string, and can contain any character, and escape
(backslash) processing is performed, as specified in the KeyNote
RFC.
.Pp
The remaining options are:
.Bl -tag -width "-k file"
.It Fl h
Print a usage message and exit.
.It Fl k Ar file
Add a key from
.Fa file
in the action authorizers.
.El
.Pp
Exactly one
.Fl r
and at least one of each
.Fl e ,
.Fl l ,
and
.Fl k
flags should be given per invocation.
If no flags are given,
.Qq keynote verify
prints the usage message and exits with error code \-1.
.Pp
.Qq keynote verify
exits with code \-1 if there was an error, and 0 on success.
.Sh SEE ALSO
.Xr keynote 3 ,
.Xr keynote 4 ,
.Xr keynote 5
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A A. D. Keromytis
.%T "The KeyNote Trust-Management System, Version 2"
.%N RFC 2704
.%D 1999
.Re
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A J. Lacy
.%T Decentralized Trust Management
.%J IEEE Conference on Privacy and Security
.%D 1996
.Re
.Rs
.%A M. Blaze
.%A J. Feigenbaum
.%A M. Strauss
.%T Compliance-Checking in the PolicyMaker Trust Management System
.%J Financial Crypto Conference
.%D 1998
.Re
.Sh AUTHORS
.An Angelos D. Keromytis Aq angelos@@dsl.cis.upenn.edu
.Sh WEB PAGE
.Pa http://www.cis.upenn.edu/~keynote
.Sh BUGS
None that we know of.
If you find any, please report them at
.Dl Aq keynote@@research.att.com
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
.\" $OpenBSD: keynote.1,v 1.28 2005/05/05 17:07:11 jmc Exp $
d29 3
a31 1
.Nd command line tool for keynote operations
d38 2
a39 3
.Op Ar print-offset
.Op Ar print-length
.Pp
d45 2
a46 3
.Op Ar print-offset
.Op Ar print-length
.Pp
d48 1
a48 2
.Op Ar AssertionFile
.Pp
d62 4
a65 5
.Nm keynote keygen
creates a public/private key of size
.Ar KeySize
(in bits), for the algorithm specified by
.Ar AlgorithmName .
d69 1
a69 1
.Ar AlgorithmName
d72 7
a78 5
.Bl -tag -width Ds -offset indent -compact
.It dsa-hex:
.It dsa-base64:
.It rsa-hex:
.It rsa-base64:
d83 1
a83 1
.Ar PublicKeyFile .
d85 1
a85 1
.Ar PrivateKeyFile .
d87 1
a87 1
.Sq - ,
d91 1
a91 1
.Ar print-offset
d93 1
a93 1
.Ar print-length
d97 1
a97 1
.Ar print-length
d99 1
a99 1
.Ar AlgorithmName
d101 2
a102 2
.Ar AlgorithmName .
.Ar print-length
d104 1
a104 1
the end of each line, and the double quotes at the beginning and end
d108 2
a109 3
.Nm keynote sign
reads the assertion contained in
.Ar AssertionFile
d111 1
a111 1
.Ar AlgorithmName
d113 1
a113 1
.Ar PrivateKeyFile .
d115 1
a115 1
.Nm keynote keygen .
d117 1
a117 1
.Ar AlgorithmName
d121 1
a121 1
.Ar AlgorithmName
d124 9
a132 9
.Bl -tag -width Ds -offset indent -compact
.It sig-dsa-sha1-hex:
.It sig-dsa-sha1-base64:
.It sig-rsa-sha1-hex:
.It sig-rsa-sha1-base64:
.It sig-rsa-md5-hex:
.It sig-rsa-md5-base64:
.It sig-x509-sha1-hex:
.It sig-x509-sha1-base64:
d139 1
a139 1
.Ar Signature
d143 1
a143 1
.Ar PrivateKeyFile
d145 1
a145 1
.Ar Authorizer
d148 1
a148 1
.Ar Local-Constants
d151 1
a151 1
.Ar Signature
d154 1
a154 1
.Ar KeyNote-Version
d156 1
a156 1
.Ar Signature
d158 1
a158 1
.Ar AlgorithmName
d164 1
a164 1
.Nm keynote sign
d166 1
a166 1
.Ar Authorizer
d170 1
a170 1
.Ar print-offset
d172 1
a172 1
.Ar print-length
d176 1
a176 1
.Ar print-length
d178 1
a178 1
.Ar AlgorithmName
d180 2
a181 2
.Ar AlgorithmName .
.Ar print-length
d183 1
a183 1
the end of each line, and the double quotes at the beginning and end
d187 1
a187 1
.Nm keynote sigver
d189 1
a189 1
.Ar AssertionFile
d194 1
a194 1
.Nm keynote verify
d198 21
a218 5
The options are as follows:
.Bl -tag -width "retlist"
.It Fl e Ar file
Specify a file containing environment variables and their values,
in the following format:
d220 1
a220 1
.Dl varname = \&"value\&"
d222 1
a222 1
.Ar varname
d225 1
a225 1
.Ar value
d229 3
d236 1
a236 1
.Ar file
a237 13
.It Fl l Ar file
Specify a file containing trusted assertions (no signature
verification is performed), and the
.Ar Authorizer
field can contain non-key principals.
There should be at least one assertion with the
.Ar POLICY
keyword in the
.Ar Authorizer
field.
.It Fl r Ar retlist
Specify a comma-separated list of return values, in
increasing order of compliance from left to right.
d242 1
a242 1
and at least one each of the
d249 1
a249 1
.Nm keynote verify
d252 1
a252 1
.Nm keynote verify
d289 1
a289 1
.Aq keynote@@research.att.com .
@

