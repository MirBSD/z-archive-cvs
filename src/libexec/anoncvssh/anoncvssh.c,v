head	1.10;
access;
symbols
	MIRBSD_10:1.8.0.2
	MIRBSD_10_BASE:1.8
	MIRBSD_9_BASE:1.8
	MIRBSD_8:1.5.0.2
	MIRBSD_8_BASE:1.5
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2018.10.07.01.10.22;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005BB95CA10BF418E8;

1.9
date	2008.06.07.20.25.43;	author tg;	state Exp;
branches;
next	1.8;
commitid	100484AEEAE37268011;

1.8
date	2006.06.02.00.01.47;	author tg;	state Exp;
branches;
next	1.7;
commitid	100447F7FEF0B9AFA43;

1.7
date	2006.03.29.21.41.29;	author tg;	state Exp;
branches;
next	1.6;
commitid	100442AFF1501D9ED0F;

1.6
date	2006.01.11.00.40.01;	author tg;	state Exp;
branches;
next	1.5;
commitid	10043C453E962681783;

1.5
date	2005.12.16.23.37.43;	author tg;	state Exp;
branches;
next	1.4;
commitid	10043A34FCD5DE67A4E;

1.4
date	2005.12.16.16.59.59;	author tg;	state Exp;
branches;
next	1.3;
commitid	10043A2F29828952A0D;

1.3
date	2005.12.16.16.09.45;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043A2E6BF072740FB;

1.2
date	2005.03.06.19.23.58;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.26.19;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.26.19;	author tg;	state Exp;
branches;
next	;


desc
@@


1.10
log
@spelling cleanup: “programme” is distinct from “program”; even in
British English, the latter is used for computer programs, while
the former serves for things like the TV programme, or a programme
to plant trees
@
text
@/* $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.9 2008/06/07 20:25:43 tg Exp $ */

/*-
 * Copyright (c) 2004, 2005, 2006, 2008
 *	Thorsten "mirabilos" Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 *-
 * user shell to be used for chrooted access (anonymous or personali-
 * sed, read-only or read-write) to cvs and possibly rsync.
 * This program requires ANSI C.
 */

/*
 * Copyright (c) 2002 Todd C. Miller <Todd.Miller@@courtesan.com>
 * Copyright (c) 1997 Bob Beck <beck@@obtuse.com>
 * Copyright (c) 1996 Thorsten Lockert <tholo@@sigmasoft.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <stdio.h>
#include <stdlib.h>
#if defined(__OpenBSD__) || defined(__NetBSD__) || defined(__FreeBSD__)
#include <paths.h>
#endif
#include <pwd.h>
#include <unistd.h>
#include <errno.h>

/*
 * You may need to change this path to ensure that RCS, CVS and diff
 * can be found
 */
#ifndef _PATH_DEFPATH
#define _PATH_DEFPATH	"/bin"
#endif

/*
 * This should not normally have to be changed
 */
#ifndef _PATH_BSHELL
#define _PATH_BSHELL	"/bin/sh"
#endif

/*
 * Location of CVS tree, relative to the anonymous CVS user's
 * home directory
 */
#ifndef LOCALROOT
#define LOCALROOT	"/cvs"
#endif

/*
 * Account and host name to be used when accessing the
 * CVS repository remotely
 */
#ifndef HOSTNAME
#if !defined(FQDN) || !defined(ANONCVS_USER)
#undef FQDN
#undef ANONCVS_USER
#define ANONCVS_USER	"_anoncvs"
#define FQDN		"mirbsd.org"
#endif
#define HOSTNAME	ANONCVS_USER "@@" FQDN
#endif /* ndef HOSTNAME */

/*
 * This is our own program name
 */
#ifndef ANONCVSSH_NAME
#define ANONCVSSH_NAME	"anoncvssh"
#endif

/*
 * This is the rsync server to invoke
 */
#define FULL_RSYNC	"rsync --server "

/*
 * Niceness increase
 */
#ifndef NICE_INC
#define NICE_INC	5
#endif
#if NICE_INC < 0
#error "may not decrease niceness"
#endif


/****************************************************************/

static const char progID[] = "@@(#) " HOSTNAME ":" LOCALROOT
    "\n@@(#) $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.9 2008/06/07 20:25:43 tg Exp $";

#ifdef USE_SYSLOG
#include <string.h>
#include <syslog.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#define LOG_FACILITY	LOG_DAEMON
#define LOG_PRIO	LOG_INFO
#define DO_LOG(x, ...)	syslog(LOG_NOTICE, x, ## __VA_ARGS__)
#define DO_LOG0(x)	syslog(LOG_NOTICE, x)
#else /* def USE_SYSLOG */
#define DO_LOG(x, ...)	/* nothing */
#define DO_LOG0(x)	/* nothing */
#endif /* ! def USE_SYSLOG */

int main(int, char *[]);

const char * const env[] = {
	"PATH=" _PATH_DEFPATH,
	"SHELL=" _PATH_BSHELL,
	"CVSROOT=" LOCALROOT,
	"HOME=/",
#ifndef ACCESS_READWRITE
	"CVSREADONLYFS=1",
#endif
	NULL
};

#ifdef ANONUSERLIST
const char * const anonusers[] = {
#ifdef ANONCVS_USER
	ANONCVS_USER,
#endif
	ANONUSERLIST,
	NULL
};
#endif

int
main(int argc, char *argv[])
{
	struct passwd *pw;
	int niceness;
	char *chrootdir, *pgm;
#ifdef ANONUSERLIST
	const char * const *ccpp;
#endif
#ifdef CHROOT_PARENT_DIR
	char *s;
#endif
#ifdef DEBUG
	int i;
#endif

	pw = getpwuid(getuid());
	if (pw == NULL) {
		fprintf(stderr, "no user for uid %d\n", getuid());
		exit(1);
	}
	if (pw->pw_dir == NULL) {
		fprintf(stderr, "no home directory\n");
		exit(1);
	}

#ifdef USE_SYSLOG
	openlog(ANONCVSSH_NAME, LOG_PID | LOG_NDELAY, LOG_FACILITY);
#endif

	/* drop priority by NICE_INC; anoncvs is a background process */
	errno = 0;
	niceness = NICE_INC + getpriority(PRIO_PROCESS, 0);
	if ((niceness == (NICE_INC - 1)) && errno) {
		DO_LOG0("Can't get process priority!");
	} else if (setpriority(PRIO_PROCESS, 0, niceness)) {
		DO_LOG0("Can't set process priority!");
	}

#if defined(ANONCVS_USER) || defined(ANONUSERLIST)
	/*
	 * I love lusers who have to test every setuid binary on my machine.
	 */
	if (getuid() == 0)
		goto user_ok;

#ifdef ANONUSERLIST
	for (ccpp = anonusers; *ccpp; ++ccpp)
		if (!strcmp(pw->pw_name, *ccpp))
			goto user_ok;
#else
	if (!strcmp(pw->pw_name, ANONCVS_USER))
		goto user_ok;
#endif

	fprintf(stderr, "You're not supposed to be running me!\n");
#ifdef USE_SYSLOG
	syslog(LOG_NOTICE, "User %s(%d) invoked %s - Possible twink?",
	    pw->pw_name, pw->pw_uid, ANONCVSSH_NAME);
#endif /* def USE_SYSLOG */
	exit(1);

 user_ok:
#endif /* def ANONCVS_USER || def ANONUSERLIST */

	setuid(0);
	if ((chrootdir = strdup(pw->pw_dir)) == NULL) {
		perror("strdup");
		exit(1);
	}
#ifdef CHROOT_PARENT_DIR
	if ((s = strrchr(chrootdir, '/')) == NULL) {
		DO_LOG0("No slash in user's home directory!\n");
		exit(1);
	}
	*s = '\0';
	if (strrchr(chrootdir, '/') == NULL) {
		DO_LOG0("No slash in user's parent directory!\n");
		exit(1);
	}
#endif
	if (chroot(chrootdir) == -1) {
		perror("chroot");
		exit(1);
	}
	chdir("/");
	setuid(pw->pw_uid);
	free(chrootdir);

	/*
	 * program now "safe"
	 */


#ifdef ACCESS_PSERVER
	/* If we want pserver functionality (NOT! It's braindead!) */
	if ((argc == 2) && (strcmp("pserver", argv[1]) == 0)) {
#ifdef USE_SYSLOG
 	        int slen;
		struct sockaddr_in my_sa, peer_sa;
		char *us, *them;

		slen = sizeof(my_sa);
		if (getsockname(0, (struct sockaddr *) &my_sa, &slen) != 0) {
			perror("getsockname");
			exit(1);
		}
		us = strdup(inet_ntoa(my_sa.sin_addr));
		if (us == NULL) {
			fprintf(stderr, "malloc failed\n");
			exit(1);
		}
		slen = sizeof(peer_sa);
		if (getpeername(0, (struct sockaddr *) &peer_sa, &slen) != 0) {
			perror("getpeername");
			exit(1);
		}
		them = strdup(inet_ntoa(peer_sa.sin_addr));
		if (them == NULL) {
			fprintf(stderr, "malloc failed\n");
			exit(1);
		}
	        syslog(LOG_PRIO,
		    "pserver connection from %s:%d to %s:%d\n",
		    them, ntohs(peer_sa.sin_port),
		    us, ntohs(my_sa.sin_port));
#endif /* def USE_SYSLOG */
		execle("/bin/cvs", "cvs",
		    "--allow-root=" LOCALROOT, "pserver", NULL, env);
		perror("execle: cvs");
		fprintf(stderr, "unable to exec CVS pserver!\n");
		exit(1);
		/* NOTREACHED */
	}
#endif /* def ACCESS_PSERVER */

	if ((argc == 3) && (!strcmp(ANONCVSSH_NAME, argv[0])) &&
	    (!strcmp("-c", argv[1]))) {
		pgm = argv[2];
		if (!strncmp("/usr/bin/", pgm, strlen("/usr/bin/")))
			pgm += strlen("/usr/bin/");
		if (!strncmp("/bin/", pgm, strlen("/bin/")))
			pgm += strlen("/bin/");
		if ((!strcmp("cvs server", pgm)) ||
		    (!strcmp("cvs -R server", pgm)) ||
		    (!strcmp("cvs -d " LOCALROOT " server", pgm))) {
			execle("/bin/cvs", "cvs", "server", NULL, env);
			perror("execle: cvs");
			DO_LOG0("chaining to CVS failed!");
			fprintf(stderr, "unable to exec CVS server!\n");
			exit(1);
			/* NOTREACHED */
		} else if (!strncmp(FULL_RSYNC, pgm, strlen(FULL_RSYNC))) {
#ifdef ACCESS_RSYNC
			int i = -1;
			char *newarg[256];
			char *p = pgm;

		lp:
			newarg[++i] = strsep(&p, " ");
			if ((newarg[i] != NULL) && (i < 255))
				goto lp;
#ifdef DEBUG
			argc = i;
			DO_LOG("calling rsync; argc = %d\n", argc);
			for (i = 0; i < argc; i++)
				DO_LOG("newarg[%d] = \"%s\"\n", i, newarg[i]);
#endif
			execve("/bin/rsync", newarg, (char **)env);
			perror("execve: rsync");
			DO_LOG0("chaining to rsync failed!");
			fprintf(stderr, "unable to exec RSYNC!\n");
			exit(1);
			/* NOTREACHED */
#else
			DO_LOG0("access to RSYNC prohibited!");
#endif
		}
	}

	DO_LOG0("parameter failure, printing help message");
	fprintf(stderr, "\n"
	    "To use anonymous CVS or RSYNC, install the latest version of the\n"
	    "client access software, as well as OpenSSH, on your computer.\n"
	    "Then, set your CVSROOT environment variable to the following\n"
	    "value for CVS access:\n\t%s:%s\n"
	    "For RSYNC, use SSH instead of RSH.\n",
	    HOSTNAME, LOCALROOT);
#ifdef DEBUG
	DO_LOG("argc = %d\n", argc);
	for (i = 0; i < argc; i++)
		DO_LOG("argv[%d] = \"%s\"\n", i, argv[i]);
#endif
	sleep(10);
	exit(0);
}
@


1.9
log
@allow not only "_anoncvs" but also "_rsync" (legacy) and the variants
"anoncvs" and "rsync" anonymous cvs/rsync access by default

thanks again to gecko2@@ for forcing kludges on us due to non-standard
setup on exactly one mirror…
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.24 2008/04/22 11:43:31 tg Rel $ */
d24 1
a24 1
 * This programme requires ANSI C.
d95 1
a95 1
 * This is our own programme name
d120 1
a120 1
    "\n@@(#) $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.8 2006/06/02 00:01:47 tg Exp $";
d250 1
a250 1
	 * programme now "safe"
@


1.8
log
@* allow /usr/bin or /bin to prefix cvs/rsync path
* cleaner implementation
* almost __CRAZY clean
@
text
@d1 1
a1 1
/* $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.7 2006/03/29 21:41:29 tg Exp $ */
d4 2
a5 2
 * Copyright (c) 2004, 2005, 2006
 *	Thorsten "mirabile" Glaser <tg@@mirbsd.de>
d7 5
a11 6
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
d13 8
a20 12
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a nontrivial bug.
d120 1
a120 1
    "\n@@(#) $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.7 2006/03/29 21:41:29 tg Exp $";
d150 10
d166 3
d199 1
a199 1
#ifdef ANONCVS_USER
d203 13
a215 2
	if (getuid() != 0 && (strcmp(pw->pw_name, ANONCVS_USER) != 0)) {
		fprintf(stderr, "You're not supposed to be running me!\n");
d217 2
a218 3
		syslog(LOG_NOTICE,
		    "User %s(%d) invoked %s - Possible twink?",
		    pw->pw_name, pw->pw_uid, ANONCVSSH_NAME);
d220 4
a223 3
		exit(1);
	}
#endif /* def ANONCVS_USER */
@


1.7
log
@no need to support /usr/bin/rsync any more, it's been /bin/rsync for a while
@
text
@d1 1
a1 1
/* $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.6 2006/01/11 00:40:01 tg Exp $ */
d109 1
a109 4
#ifndef RSYNC
#define RSYNC		"/bin/rsync"
#endif
#define FULL_RSYNC	RSYNC " --server "
d125 1
a125 1
    "\n@@(#) $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.6 2006/01/11 00:40:01 tg Exp $";
d136 1
d139 1
d144 1
a144 1
char * const env[] = {
d160 1
a160 1
	char *chrootdir;
d186 1
a186 1
		DO_LOG("Can't get process priority!");
d188 1
a188 1
		DO_LOG("Can't set process priority!");
d213 1
a213 1
		DO_LOG("No slash in user's home directory!\n");
d218 1
a218 1
		DO_LOG("No slash in user's parent directory!\n");
d279 8
a286 3
		if ((!strcmp("cvs server", argv[2])) ||
		    (!strcmp("cvs -R server", argv[2])) ||
		    (!strcmp("cvs -d " LOCALROOT " server", argv[2]))) {
d289 1
a289 1
			DO_LOG("chaining to CVS failed!");
d293 1
a293 1
		} else if (!strncmp(FULL_RSYNC, argv[2], strlen(FULL_RSYNC))) {
d295 1
a295 1
			int i = 0;
d297 1
a297 1
			char *p = argv[2] + strlen(RSYNC) /* space */ + 1;
a298 1
			newarg[0] = RSYNC;
d309 1
a309 1
			execve(RSYNC, newarg, env);
d311 1
a311 1
			DO_LOG("chaining to " RSYNC " failed!");
d316 1
a316 1
			DO_LOG("access to RSYNC prohibited!");
d321 1
a321 1
	DO_LOG("parameter failure, printing help message");
d327 1
a327 2
	    "For RSYNC specify the parameter --rsync-path=" RSYNC "\n"
	    "when connecting, and use SSH instead of RSH for both.\n",
@


1.6
log
@standardise on _anoncvs@@mirbsd.org:/cvs (which will be up soon)
@
text
@d1 1
a1 1
/* $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.5 2005/12/16 23:37:43 tg Exp $ */
d67 1
a67 1
#define _PATH_DEFPATH	"/bin:/usr/bin"
a112 1
#define FULL_RSYNC2	"/usr" RSYNC " --server "
d128 1
a128 1
    "\n@@(#) $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.5 2005/12/16 23:37:43 tg Exp $";
d289 1
a289 2
		} else if ((!strncmp(FULL_RSYNC, argv[2], strlen(FULL_RSYNC)))
		    || (!strncmp(FULL_RSYNC2, argv[2], strlen(FULL_RSYNC2)))) {
d293 1
a293 4
			char *p = argv[2] + 1;
			if (!strncmp(p, "usr/", 4))
				p += 4;
			p += strlen(RSYNC) - 1 /* space */ + 1;
@


1.5
log
@* some debugging more
* some more output to syslog
* fix anonRSYNC
@
text
@d1 1
a1 1
/* $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.4 2005/12/16 16:59:59 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2004, 2005
d90 6
a95 1
#if defined(FQDN) && defined(ANONCVS_USER)
a96 3
#else
#define HOSTNAME	"_anoncvs@@thor.66h.42h.de"
#endif
d129 1
a129 1
    "\n@@(#) $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.4 2005/12/16 16:59:59 tg Exp $";
@


1.4
log
@we now use /bin/cvs, so the usr -> . symlink is pretty dead
@
text
@d1 1
a1 1
/* $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.3 2005/12/16 16:09:45 tg Exp $ */
d127 1
a127 1
    "\n@@(#) $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.3 2005/12/16 16:09:45 tg Exp $";
d137 1
a137 1
#define DO_LOG(x)	syslog(LOG_NOTICE, x)
d139 1
a139 1
#define DO_LOG(x)	/* nothing */
d213 1
a213 1
		fprintf(stderr, "No slash in user's home directory!\n");
d218 1
a218 1
		fprintf(stderr, "No slash in user's parent directory!\n");
d293 4
a296 1
			char *p = argv[2] + 15;
d298 1
a298 1
			newarg[0] = "rsync";
d303 6
d331 1
a331 1
	fprintf(stderr, "argc = %d\n", argc);
d333 1
a333 1
		fprintf(stderr, "argv[%d] = \"%s\"\n", i, argv[i]);
@


1.3
log
@Implement forwarding of "readonlyfs" (acquired by either cvs -R or
export CVSREADONLYFS=1) to an :ext: server, after YEARS of cursing.
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.4 2005/12/15 02:46:54 tg Rel $ */
d127 1
a127 1
    "\n@@(#) $MirOS: src/libexec/anoncvssh/anoncvssh.c,v 1.2 2005/03/06 19:23:58 tg Exp $";
d268 1
a268 1
		execle("/usr/bin/cvs", "cvs",
d282 1
a282 1
			execle("/usr/bin/cvs", "cvs", "server", NULL, env);
@


1.2
log
@merge src/libexec
@
text
@d1 1
a1 1
/* $MirOS$ */
d4 2
a5 2
 * Copyright (c) 2004
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
d18 8
a25 7
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of this work, even if advised of the possibility of such damage.
d93 1
a93 1
#define HOSTNAME	"mirbsd-cvs@@mirbsd.bsdadvocacy.org"
d108 1
a108 1
#define RSYNC		"/usr/bin/rsync"
d111 1
d127 1
a127 1
    "\n@@(#) $MirOS$";
d280 1
d288 2
a289 1
		} else if (!strncmp(FULL_RSYNC, argv[2], strlen(FULL_RSYNC))) {
@


1.1
log
@Initial revision
@
text
@d1 30
d49 3
d59 1
a59 25
#include <sys/types.h>

#ifndef __CONCAT
#if defined(__STDC__) || defined(__cplusplus)
#define __CONCAT(x,y)		x ## y
#else
#define __CONCAT(x,y)		x/**/y
#endif
#endif

#ifndef __CONCAT3
#if defined(__STDC__) || defined(__cplusplus)
#define __CONCAT3(x,y,z)	x ## y ## z
#else
#define __CONCAT3(x,y,z)	x/**/y/**/z
#endif
#endif

#ifndef __P
#if defined(__STDC__) || defined(__cplusplus)
#define	__P(protos)	protos		/* full-blown ANSI C */
#else
#define	__P(protos)	()		/* traditional C preprocessor */
#endif
#endif
d66 1
a66 1
#define	_PATH_DEFPATH	"/bin:/usr/bin"
d81 1
a81 1
#define	LOCALROOT	"/cvs"
d89 4
a92 1
#define	HOSTNAME	"anoncvs@@anoncvs1.usa.openbsd.org"
d94 1
d97 1
a97 1
 * $CVSROOT is created based on HOSTNAME and LOCALROOT above
d99 2
a100 2
#ifndef CVSROOT
#define	CVSROOT		__CONCAT3(HOSTNAME,":",LOCALROOT)
d104 1
a104 2
 * We define PSERVER_SUPPORT to allow anoncvssh to spawn a "cvs pserver".
 * You may undefine this if you aren't going to be running pserver.
d106 2
a107 2
#ifndef PSERVER_SUPPORT
#define PSERVER_SUPPORT
d109 1
d112 1
a112 2
 * Define USE_SYSLOG if you want anoncvssh to log pserver connections 
 * using syslog()
d114 12
a125 1
#define USE_SYSLOG
d133 6
a138 3
#define LOG_FACILITY LOG_DAEMON
#define LOG_PRIO LOG_INFO
#endif
d140 1
a140 6
/* Define ANONCVS_USER if you want anoncvssh to complain if invoked by
 * anyone other than root or ANONCVS_USER.
 */
/* #define ANONCVS_USER "anoncvs" */

int main __P((int, char *[]));
d143 3
a145 3
	__CONCAT("PATH=",_PATH_DEFPATH),
	__CONCAT("SHELL=",_PATH_BSHELL),
	__CONCAT("CVSROOT=",LOCALROOT),
d147 1
d149 1
d154 1
a154 3
main(argc, argv)
int argc;
char *argv[];
d157 5
d164 1
a164 1
#endif /* DEBUG */
d172 1
a172 1
		fprintf(stderr, "no directory\n");
d177 12
a188 3
	openlog("anoncvssh", LOG_PID | LOG_NDELAY, LOG_FACILITY);
#endif /* USE_SYSLOG */
	
d190 1
a190 1
	/* 
d193 2
a194 2
	if (getuid() != 0 && (strcmp (pw->pw_name, ANONCVS_USER) != 0)) {
		fprintf(stderr, "You're not supposed to be running me!\n"); 
d197 3
a199 3
		       "User %s(%d) invoked anoncvssh - Possible twink?",
		       pw->pw_name, pw->pw_uid); 
#endif /* USE_SYSLOG */
d202 1
a202 2
#endif /* ANONCVS_USER */

d205 16
a220 1
	if (chroot(pw->pw_dir) == -1) {
d222 1
a222 1
		exit (1);
d226 1
d229 1
a229 1
	 * program now "safe"
d232 3
a234 2
#ifdef PSERVER_SUPPORT
	/* If we want pserver functionality */
d240 1
a240 1
		
d242 3
a244 4
		if (getsockname(0, (struct sockaddr *) &my_sa, &slen)
		    != 0) {
		  perror("getsockname");
		  exit(1);
d248 2
a249 2
		  fprintf(stderr, "malloc failed\n");
		  exit(1);
d252 3
a254 4
		if (getpeername(0, (struct sockaddr *) &peer_sa, &slen)
		    != 0) {
		  perror("getpeername");
		  exit(1);
d256 1
a256 1
		them=strdup(inet_ntoa(peer_sa.sin_addr));
d258 2
a259 2
		  fprintf(stderr, "malloc failed\n");
		  exit(1);
d261 5
a265 5
	        syslog(LOG_PRIO, 
		       "pserver connection from %s:%d to %s:%d\n",
		       them, ntohs(peer_sa.sin_port),
		       us, ntohs(my_sa.sin_port));
#endif /* USE_SYSLOG */
d267 1
a267 1
		    __CONCAT("--allow-root=",LOCALROOT), "pserver", (char *)NULL, env);
d273 31
d305 2
d308 9
a316 10
	if (argc != 3 || 
		strcmp("anoncvssh",  argv[0]) != 0 ||
		strcmp("-c",         argv[1]) != 0 ||
		(strcmp("cvs server", argv[2]) != 0 &&
		 strcmp(__CONCAT3("cvs -d ",LOCALROOT," server"), argv[2]) != 0)) {
		fprintf(stderr, "\nTo use anonymous CVS install the latest ");
		fprintf(stderr,"version of CVS on your local machine.\n");
		fprintf(stderr,"Then set your CVSROOT environment variable ");
		fprintf(stderr,"to the following value:\n");
		fprintf(stderr,"\t%s\n\n", CVSROOT);
d318 6
a323 12
		fprintf(stderr, "argc = %d\n", argc);
		for (i = 0 ; i < argc ; i++)
			fprintf(stderr, "argv[%d] = \"%s\"\n", i, argv[i]);
#endif /* DEBUG */
		sleep(10);
		exit(0);
	}
	execle("/usr/bin/cvs", "cvs", "server", (char *)NULL, env);
	perror("execle: cvs");
	fprintf(stderr, "unable to exec CVS server!\n");
	exit(1);
	/* NOTREACHED */
a324 1

@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
