head	1.4;
access;
symbols
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	cvs-200611210330:1.1.1.1
	cvs-200606301800:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200511231542:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200504170300:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2008.10.16.14.56.05;	author tg;	state Exp;
branches;
next	1.3;
commitid	10048F75613015A7047;

1.3
date	2008.10.16.14.32.16;	author tg;	state Exp;
branches;
next	1.2;
commitid	10048F7507B4040C637;

1.2
date	2006.08.30.03.52.53;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044F50B9C662ACEF9;

1.1
date	2005.02.05.17.26.20;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.26.20;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@give ld.so(8) a real stack overflow handler
@
text
@/**	$MirOS: src/libexec/ld.so/util.c,v 1.3 2008/10/16 14:32:16 tg Exp $ */
/*	$OpenBSD: util.c,v 1.18 2004/06/14 15:07:36 millert Exp $	*/

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/mman.h>
#include <sys/sysctl.h>
#include <string.h>
#include "archdep.h"

__RCSID("$MirOS: src/libexec/ld.so/util.c,v 1.3 2008/10/16 14:32:16 tg Exp $");

/*
 * Static vars usable after bootstrapping.
 */
static void *_dl_malloc_pool = 0;
static long *_dl_malloc_free = 0;

char *
_dl_strdup(const char *orig)
{
	char *newstr;
	int len;

	len = _dl_strlen(orig)+1;
	newstr = _dl_malloc(len);
	_dl_strlcpy(newstr, orig, len);
	return (newstr);
}

#define	_dl_round_page(x)	(((x) + (__LDPGSZ - 1)) & ~(__LDPGSZ - 1))

/*
 * The following malloc/free code is a very simplified implementation
 * of a malloc function. However, we do not need to be very complex here
 * because we only free memory when 'dlclose()' is called and we can
 * reuse at least the memory allocated for the object descriptor. We have
 * one dynamic string allocated, the library name and it is likely that
 * we can reuse that one to without a lot of complex colapsing code.
 */
void *
_dl_malloc(size_t need)
{
	long *p, *t, *n, have;

	need = (need + 8 + DL_MALLOC_ALIGN - 1) & ~(DL_MALLOC_ALIGN - 1);

	if ((t = _dl_malloc_free) != 0) {	/* Try free list first */
		n = (long *)&_dl_malloc_free;
		while (t && t[-1] < need) {
			n = t;
			t = (long *)*t;
		}
		if (t) {
			*n = *t;
			_dl_memset(t, 0, t[-1] - sizeof(long));
			return((void *)t);
		}
	}
	have = _dl_round_page((long)_dl_malloc_pool) - (long)_dl_malloc_pool;
	if (need > have) {
		if (have >= 8 + DL_MALLOC_ALIGN) {
			p = _dl_malloc_pool;
			*p = have;
			_dl_free((void *)(p + 1));	/* move to freelist */
		}
		_dl_malloc_pool = (void *)_dl_mmap((void *)0,
		    _dl_round_page(need), PROT_READ|PROT_WRITE,
		    MAP_ANON|MAP_PRIVATE, -1, 0);
		if (_dl_malloc_pool == 0 || _dl_malloc_pool == MAP_FAILED ) {
			_dl_printf("Dynamic loader failure: malloc.\n");
			_dl_exit(7);
		}
	}
	p = _dl_malloc_pool;
	_dl_malloc_pool += need;
	_dl_memset(p, 0, need);
	*p = need;
	return((void *)(p + 1));
}

void
_dl_free(void *p)
{
	long *t = (long *)p;

	*t = (long)_dl_malloc_free;
	_dl_malloc_free = p;
}


unsigned int
_dl_random(void)
{
	int mib[2];
	unsigned int rnd;
	size_t len;

	mib[0] = CTL_KERN;
	mib[1] = KERN_ARND;
	len = sizeof(rnd);
	_dl_sysctl(mib, 2, &rnd, &len, NULL, 0);

	return (rnd);
}

void *
_dl_memcpy(void *dst, const void *src, size_t len)
{
	_dl_bcopy(src, dst, len);
	return (dst);
}
@


1.3
log
@prevent symbol leakage of gcc auto-generated memcpy() call
@
text
@d1 1
a1 1
/**	$MirOS: src/libexec/ld.so/util.c,v 1.2 2006/08/30 03:52:53 tg Exp $ */
d36 1
a36 16
__RCSID("$MirOS: src/libexec/ld.so/util.c,v 1.2 2006/08/30 03:52:53 tg Exp $");

__dead void __stack_smash_handler(char [], int);

/*
 * Stack protector dummies.
 * Ideally, a scheme to compile these stubs from libc should be used, but
 * this would end up dragging too much code from libc here.
 */
long __guard[8] = {0, 0, 0, 0, 0, 0, 0, 0};

void
__stack_smash_handler(char func[], int damaged)
{
	_dl_exit(127);
}
@


1.2
log
@fix missing __dead function attribute and some other glitches
@
text
@d1 1
a1 1
/**	$MirOS$ */
d36 1
a36 1
__RCSID("$MirOS$");
d146 7
@


1.1
log
@Initial revision
@
text
@d1 1
a29 1
#include <sys/types.h>
d36 4
a46 2
void __stack_smash_handler(char [], int);

a145 2


@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
