head	1.3;
access;
symbols
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	cvs-200611210330:1.1.1.2
	cvs-200606301800:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200511231542:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200504170300:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2008.10.16.14.19.02;	author tg;	state Exp;
branches;
next	1.2;
commitid	10048F74D5E4F1BB3EA;

1.2
date	2006.06.30.18.11.01;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044A5693745E9F1D6;

1.1
date	2005.02.05.17.26.21;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.26.21;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.30.18.01.53;	author tg;	state Exp;
branches;
next	;
commitid	10044A567215DFA780B;


desc
@@


1.3
log
@add stack protection carnary randomisation to ld.so “because we can”
@
text
@/**	$MirOS: src/libexec/ld.so/i386/ldasm.S,v 1.2 2006/06/30 18:11:01 tg Exp $ */
/*	$OpenBSD: ldasm.S,v 1.10 2006/05/03 16:10:52 drahn Exp $ */

/*
 * Copyright (c) 2002 Dale Rahn
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#define	__CONCAT(x,y)	x ## y

#define DL_DATA_SIZE	(16*4)
#include <sys/syscall.h>
#include <machine/asm.h>

	.text
	.align  4
	.globl  _dl_start
	.type   _dl_start,@@function
_dl_start:
	movl	%esp,%eax		# save stack pointer for _rtld
	pushl	%ebx			# save ps_strings
	subl	$DL_DATA_SIZE,%esp	# allocate dl_data
	pushl	$0			# push 0 for dynamicp (unused on i386)
	movl	%esp,%ebx
	movl	%ebx,%edi		# save dl_data arg for dl_boot
	pushl	%ebx			# push dl_data for dl_boot_bind

	mov	%eax, %esi		# save stack for dl_boot

	pushl	%eax			# load saved SP for dl_boot_bind

	call	_dl_boot_bind@@PLT	# _dl_boot_bind(sp,dl_data)

	call	__guard_setup@@PLT

	pushl	%edi			# push saved dl_data
	movl	%edi,%ebp
	movl	(7*4)(%ebp),%eax
	pushl	%eax			# push loff from dl_data

	movl	%esi,%ebp
	movl	$4,%eax
	imull	0(%ebp),%eax
	addl	$8,%eax
	addl	%ebp,%eax
	push	%eax			# push envp

	leal	4(%ebp),%eax
	push	%eax			# push argv

	call	_dl_boot@@PLT		# _dl_boot(argv,envp,loff,dl_data)

	addl	$5*4,%esp		# pop args

	addl	$DL_DATA_SIZE,%esp	# return dl_data

	popl	%ebx			# %ebx = ps_strings - XXXDSR
	popl	%edx			# %edx = cleanup - XXXDSR
	popl	%ecx			# %ecx = obj_main - XXXDSR
	jmp	*%eax


/* copied from lib/libc/arch/i386/SYS.h - XXX */
#define __DO_SYSCALL(x)                                 \
	movl $__CONCAT(SYS_, x),%eax;         \
	int $0x80


#define DL_SYSCALL(n) DL_SYSCALL2(n,n)
#define DL_SYSCALL2(n,c)					\
	.section	".text"					;\
	.align		4					;\
	.global		__CONCAT(_dl_,n)			;\
	.type		__CONCAT(_dl_,n)%function		;\
__CONCAT(_dl_,n):						;\
	__DO_SYSCALL(c)						;\
	jb	.L_cerr						;\
	ret

DL_SYSCALL(close)

	.section	".text"
	.align		4
	.global _dl_exit
	.type _dl_exit,@@function
_dl_exit:
	mov	$SYS_exit, %eax
	int	$0x80
	ret


DL_SYSCALL(issetugid)
DL_SYSCALL2(_syscall,__syscall)
DL_SYSCALL(munmap)
DL_SYSCALL(mprotect)
DL_SYSCALL(open)
DL_SYSCALL(read)
DL_SYSCALL(write)
DL_SYSCALL(stat)
DL_SYSCALL(fstat)
DL_SYSCALL(fcntl)
DL_SYSCALL(gettimeofday)
DL_SYSCALL2(sysctl,__sysctl)
DL_SYSCALL(getdirentries)

.L_cerr:
	/* error: result = -errno; - handled here. */
	neg	%eax
	ret


	/* _dl_sigprocmask: does not handle NULL new set */

	.section	".text"
	.align		4
	.global _dl_sigprocmask
	.type _dl_sigprocmask,@@function
_dl_sigprocmask:
	movl	8(%esp), %ecx
	movl    (%ecx),%ecx
	movl	%ecx,8(%esp)		# to new mask arg
	mov	$SYS_sigprocmask, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	movl	12(%esp),%ecx		# fetch old mask requested
	testl	%ecx,%ecx		# test if old mask requested
	jz	2f
	movl	%eax,(%ecx)		# store old mask
	xorl	%eax,%eax
2:	ret

1:	/* error: result = -errno; - handled here. */
	neg	%eax
	ret


	.align 4
	.global _dl_bind_start
	.type _dl_bind_start,@@function
_dl_bind_start:
	pushf				# save registers
	pushl   %eax
	pushl   %ecx
	pushl   %edx
	pushl   %ebx
	pushl   %ebp
	pushl   %esi
	pushl   %edi
	pushl   %ds
	pushl   %es

	pushl   44(%esp)		# Copy of reloff
	pushl   44(%esp)		# Copy of obj
	call    _dl_bind@@PLT		# Call the binder
	addl    $8,%esp			# pop binder args
	movl    %eax,44(%esp)		# Store function to be called in obj

	popl    %es			# restore registers
	popl    %ds
	popl    %edi
	popl    %esi
	popl    %ebp
	popl    %ebx
	popl    %edx
	popl    %ecx
	popl    %eax
	popf

	leal    4(%esp),%esp		# Discard reloff, do not change eflags
	ret
@


1.2
log
@sync; welcome to the world of dynamic arches, sparc
thanks http://mail-index.netbsd.org/port-sparc/1994/12/03/0002.html
@
text
@d1 1
a1 1
/**	$MirOS$ */
d56 2
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: ldasm.S,v 1.8 2004/05/25 15:56:18 deraadt Exp $ */
d31 1
d82 16
a97 8
	.section	".text"
	.align		4
	.global _dl_close
	.type _dl_close,@@function
_dl_close:
	mov	$SYS_close, %eax
	int	$0x80
	jb	1f
d100 2
d112 13
a124 54
	.section	".text"
	.align		4
	.global _dl_issetugid
	.type _dl_issetugid,@@function
_dl_issetugid:
	mov	$SYS_issetugid, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl__syscall
	.type _dl__syscall,@@function
_dl__syscall:
	mov	$SYS___syscall, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_munmap
	.type _dl_munmap,@@function
_dl_munmap:
	mov	$SYS_munmap, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_mprotect
	.type _dl_mprotect,@@function
_dl_mprotect:
	mov	$SYS_mprotect, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_open
	.type _dl_open,@@function
_dl_open:
	mov	$SYS_open, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret

d126 1
a126 76
	.section	".text"
	.align		4
	.global _dl_read
	.type _dl_read,@@function
_dl_read:
	mov	$SYS_read, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_write
	.type _dl_write,@@function
_dl_write:
	mov	$SYS_write, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_stat
	.type _dl_stat,@@function
_dl_stat:
	mov	$SYS_stat, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_fstat
	.type _dl_fstat,@@function
_dl_fstat:
	mov	$SYS_fstat, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_fcntl
	.type _dl_fcntl,@@function
_dl_fcntl:
	mov	$SYS_fcntl, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret

	.section	".text"
	.align		4
	.global _dl_sysctl
	.type _dl_sysctl,@@function
_dl_sysctl:
	mov	$SYS___sysctl, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret


	.section	".text"
	.align		4
	.global _dl_getdirentries
	.type _dl_getdirentries,@@function
_dl_getdirentries:
	mov	$SYS_getdirentries, %eax
	int	$0x80
	jb	1f		 /* error: result = -errno */
	ret

1:
a190 1

@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import OpenBSD's current ld.so
@
text
@d1 1
a1 1
/*	$OpenBSD: ldasm.S,v 1.10 2006/05/03 16:10:52 drahn Exp $ */
d80 8
a87 16

/* copied from lib/libc/arch/i386/SYS.h - XXX */
#define __DO_SYSCALL(x)                                 \
	movl $__CONCAT(SYS_, x),%eax;         \
	int $0x80


#define DL_SYSCALL(n) DL_SYSCALL2(n,n)
#define DL_SYSCALL2(n,c)					\
	.section	".text"					;\
	.align		4					;\
	.global		__CONCAT(_dl_,n)			;\
	.type		__CONCAT(_dl_,n)%function		;\
__CONCAT(_dl_,n):						;\
	__DO_SYSCALL(c)						;\
	jb	.L_cerr						;\
a89 2
DL_SYSCALL(close)

d100 129
a228 13
DL_SYSCALL(issetugid)
DL_SYSCALL2(_syscall,__syscall)
DL_SYSCALL(munmap)
DL_SYSCALL(mprotect)
DL_SYSCALL(open)
DL_SYSCALL(read)
DL_SYSCALL(write)
DL_SYSCALL(stat)
DL_SYSCALL(fstat)
DL_SYSCALL(fcntl)
DL_SYSCALL(gettimeofday)
DL_SYSCALL2(sysctl,__sysctl)
DL_SYSCALL(getdirentries)
d230 1
a230 1
.L_cerr:
@

