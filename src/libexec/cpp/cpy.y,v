head	1.4;
access;
symbols
	pcc_cpp:1.3.0.2
	cvs-20081118:1.1.121.1
	pcc:1.1.121
	reiser_cccp:1.1.201.1.0.6
	MIRBSD_10:1.1.201.1.0.4
	MIRBSD_10_BASE:1.1.201.1
	MIRBSD_9_BASE:1.1.201.1
	MIRBSD_8:1.1.201.1.0.2
	MIRBSD_8_BASE:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.4
date	2008.11.22.13.06.44;	author tg;	state Exp;
branches;
next	1.3;
commitid	100492803F07424968F;

1.3
date	2008.11.18.20.58.32;	author tg;	state Exp;
branches;
next	1.2;
commitid	10049232C8B39BFB045;

1.2
date	2008.11.18.19.51.52;	author tg;	state Exp;
branches;
next	1.1;
commitid	10049231CD61DED021C;

1.1
date	2005.02.05.01.42.56;	author tg;	state Exp;
branches
	1.1.121.1
	1.1.201.1;
next	;

1.1.121.1
date	2008.11.18.19.01.05;	author tg;	state Exp;
branches;
next	;
commitid	100492310FE49616AA5;

1.1.201.1
date	2005.02.05.01.42.56;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@switch MAIN branch back to Reiser CCCP (for now)
@
text
@/*
 * @@(#)cpy.y 1.2 1/2/83
 */
%term number stop DEFINED
%term EQ NE LE GE LS RS
%term ANDAND OROR
%left ','
%right '='
%right '?' ':'
%left OROR
%left ANDAND
%left '|' '^'
%left '&'
%binary EQ NE
%binary '<' '>' LE GE
%left LS RS
%left '+' '-'
%left '*' '/' '%'
%right '!' '~' UMINUS
%left '(' '.'
%%
S:	e stop	={return($1);}


e:	  e '*' e
		={$$ = $1 * $3;}
	| e '/' e
		={$$ = $1 / $3;}
	| e '%' e
		={$$ = $1 % $3;}
	| e '+' e
		={$$ = $1 + $3;}
	| e '-' e
		={$$ = $1 - $3;}
	| e LS e
		={$$ = $1 << $3;}
	| e RS e
		={$$ = $1 >> $3;}
	| e '<' e
		={$$ = $1 < $3;}
	| e '>' e
		={$$ = $1 > $3;}
	| e LE e
		={$$ = $1 <= $3;}
	| e GE e
		={$$ = $1 >= $3;}
	| e EQ e
		={$$ = $1 == $3;}
	| e NE e
		={$$ = $1 != $3;}
	| e '&' e
		={$$ = $1 & $3;}
	| e '^' e
		={$$ = $1 ^ $3;}
	| e '|' e
		={$$ = $1 | $3;}
	| e ANDAND e
		={$$ = $1 && $3;}
	| e OROR e
		={$$ = $1 || $3;}
	| e '?' e ':' e
		={$$ = $1 ? $3 : $5;}
	| e ',' e
		={$$ = $3;}
	| term
		={$$ = $1;}
term:
	  '-' term %prec UMINUS
		={$$ = -$2;}
	| '!' term
		={$$ = !$2;}
	| '~' term
		={$$ = ~$2;}
	| '(' e ')'
		={$$ = $2;}
	| DEFINED '(' number ')'
		={$$= $3;}
	| DEFINED number
		={$$ = $2;}
	| number
		={$$= $1;}
%%
# include "yylex.c"
@


1.3
log
@__CRAZY cleanliness
@
text
@a0 29
/*	$Id: cpy.y,v 1.16 2008/04/12 17:14:27 ragge Exp $	*/

/*
 * Copyright (c) 2004 Anders Magnusson (ragge@@ludd.luth.se).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

d2 1
a2 31
 * Copyright(C) Caldera International Inc. 2001-2002. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code and documentation must retain the above
 * copyright notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 * 	This product includes software developed or owned by Caldera
 *	International, Inc.
 * Neither the name of Caldera International, Inc. nor the names of other
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
 * INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OFLIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
d4 1
a4 22

%{

#include "cpp.h"

__RCSID("$MirOS$");

int setd(int l, int r);

#define	EVALUNARY(tok, l, r) l.nd_val = tok r.nd_val; l.op = r.op
#define	EVALBIN(tok, d, l, r)	\
	d.op = setd(l.op, r.op); d.nd_val = l.nd_val tok r.nd_val
#define	EVALUBIN(tok, d, l, r, t)				\
	d.op = setd(l.op, r.op);				\
	if (d.op == NUMBER) d.nd_val = l.nd_val tok r.nd_val;	\
	else d.nd_uval = l.nd_uval tok r.nd_uval;		\
	if (t && d.op) d.op = NUMBER
#define	XEVALUBIN(tok, d, l, r)					\
	if (r.nd_val) { EVALUBIN(tok, d, l, r, 0); } else d.op = 0
%}

%term stop
d6 1
a6 6
%term ANDAND OROR IDENT NUMBER UNUMBER
/*
 * The following terminals are not used in the yacc code.
 */
%term STRING FPOINT WSPACE VA_ARGS CONCAT MKSTR ELLIPS CMNT

d8 1
d20 3
a22 1
%left '('
a23 12
%union {
	struct nd node;
}

%type <node>	term e NUMBER UNUMBER

%%
S:	e '\n'	{ 
		if ($1.op == 0)
			error("division by zero");
		return $1.nd_val;
	}
d26 1
a26 1
		{ EVALUBIN(*, $$, $1, $3, 0); }
d28 1
a28 1
		{ XEVALUBIN(/, $$, $1, $3); }
d30 1
a30 1
		{ XEVALUBIN(%, $$, $1, $3); }
d32 1
a32 1
		{ EVALBIN(+, $$, $1, $3); }
d34 1
a34 1
		{ EVALBIN(-, $$, $1, $3); }
d36 1
a36 1
		{ EVALBIN(<<, $$, $1, $3); }
d38 1
a38 1
		{ EVALUBIN(>>, $$, $1, $3, 0); }
d40 1
a40 1
		{ EVALUBIN(<, $$, $1, $3, 1); }
d42 1
a42 1
		{ EVALUBIN(>, $$, $1, $3, 1); }
d44 1
a44 1
		{ EVALUBIN(<=, $$, $1, $3, 1); }
d46 1
a46 1
		{ EVALUBIN(>=, $$, $1, $3, 1); }
d48 1
a48 1
		{ EVALUBIN(==, $$, $1, $3, 1); }
d50 1
a50 1
		{ EVALUBIN(!=, $$, $1, $3, 1); }
d52 1
a52 1
		{ EVALBIN(&, $$, $1, $3); }
d54 1
a54 1
		{ EVALBIN(^, $$, $1, $3); }
d56 9
a64 32
		{ EVALBIN(|, $$, $1, $3); }
	| e ANDAND e {
		$$ = $1;
		if ($1.nd_val) {
			$$.op = setd($1.op, $3.op);
			$$.nd_val = ($3.nd_val != 0);
		}
		if ($$.op == UNUMBER) $$.op = NUMBER;
	}
	| e OROR e {
		if ($1.nd_val != 0) {
			$$.nd_val = ($1.nd_val != 0);
			$$.op = $1.op;
		} else {
			$$.nd_val = ($3.nd_val != 0);
			$$.op = setd($1.op, $3.op);
		}
		if ($$.op == UNUMBER) $$.op = NUMBER;
	}
	| e '?' e ':' e {
		if ($1.op == 0)
			$$ = $1;
		else if ($1.nd_val)
			$$ = $3;
		else
			$$ = $5;
	}
	| e ',' e {
		$$.op = setd($1.op, $3.op);
		$$.nd_val = $3.nd_val;
		if ($$.op) $$.op =  $3.op;
	}
d66 1
a66 1
		{$$ = $1;}
d69 1
a69 3
		{ EVALUNARY(-, $$, $2); }
	| '+' term %prec UMINUS
		{$$ = $2;}
d71 1
a71 1
		{ $$.nd_val = ! $2.nd_val; $$.op = $2.op ? NUMBER : 0; }
d73 1
a73 1
		{ EVALUNARY(~, $$, $2); }
d75 7
a81 3
		{$$ = $2;}
	| NUMBER
		{$$ = $1;}
d83 1
a83 20

void
yyerror(const char *err)
{
	error(err);
}

/*
 * Set return type of an expression.
 */
int
setd(int l, int r)
{
	if (!l || !r)
		return 0; /* div by zero involved */
	if (l == UNUMBER || r == UNUMBER)
		return UNUMBER;
	return NUMBER;
}

@


1.2
log
@introduce pcc-cpp instead of Reiser CCCP
passes all but 2 regression tests (whitespace issues)
@
text
@d68 2
a69 2
void yyerror(char *);
int yylex(void);
d200 1
a200 1
yyerror(char *err)
@


1.1
log
@Initial revision
@
text
@d1 29
d31 31
a61 1
 * @@(#)cpy.y 1.2 1/2/83
d63 22
a84 1
%term number stop DEFINED
d86 6
a91 1
%term ANDAND OROR
a92 1
%right '='
d104 8
a111 1
%left '(' '.'
d113 5
a117 2
S:	e stop	={return($1);}

d120 1
a120 1
		={$$ = $1 * $3;}
d122 1
a122 1
		={$$ = $1 / $3;}
d124 1
a124 1
		={$$ = $1 % $3;}
d126 1
a126 1
		={$$ = $1 + $3;}
d128 1
a128 1
		={$$ = $1 - $3;}
d130 1
a130 1
		={$$ = $1 << $3;}
d132 1
a132 1
		={$$ = $1 >> $3;}
d134 1
a134 1
		={$$ = $1 < $3;}
d136 1
a136 1
		={$$ = $1 > $3;}
d138 1
a138 1
		={$$ = $1 <= $3;}
d140 1
a140 1
		={$$ = $1 >= $3;}
d142 1
a142 1
		={$$ = $1 == $3;}
d144 1
a144 1
		={$$ = $1 != $3;}
d146 1
a146 1
		={$$ = $1 & $3;}
d148 1
a148 1
		={$$ = $1 ^ $3;}
d150 32
a181 9
		={$$ = $1 | $3;}
	| e ANDAND e
		={$$ = $1 && $3;}
	| e OROR e
		={$$ = $1 || $3;}
	| e '?' e ':' e
		={$$ = $1 ? $3 : $5;}
	| e ',' e
		={$$ = $3;}
d183 1
a183 1
		={$$ = $1;}
d186 3
a188 1
		={$$ = -$2;}
d190 1
a190 1
		={$$ = !$2;}
d192 1
a192 1
		={$$ = ~$2;}
d194 3
a196 7
		={$$ = $2;}
	| DEFINED '(' number ')'
		={$$= $3;}
	| DEFINED number
		={$$ = $2;}
	| number
		={$$= $1;}
d198 20
a217 1
# include "yylex.c"
@


1.1.121.1
log
@somewhat C99 capable cpp from pcc
@
text
@a0 29
/*	$Id: cpy.y,v 1.16 2008/04/12 17:14:27 ragge Exp $	*/

/*
 * Copyright (c) 2004 Anders Magnusson (ragge@@ludd.luth.se).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

d2 1
a2 31
 * Copyright(C) Caldera International Inc. 2001-2002. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code and documentation must retain the above
 * copyright notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 * 	This product includes software developed or owned by Caldera
 *	International, Inc.
 * Neither the name of Caldera International, Inc. nor the names of other
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
 * INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OFLIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
d4 1
a4 22

%{

#include "cpp.h"

void yyerror(char *);
int yylex(void);
int setd(int l, int r);

#define	EVALUNARY(tok, l, r) l.nd_val = tok r.nd_val; l.op = r.op
#define	EVALBIN(tok, d, l, r)	\
	d.op = setd(l.op, r.op); d.nd_val = l.nd_val tok r.nd_val
#define	EVALUBIN(tok, d, l, r, t)				\
	d.op = setd(l.op, r.op);				\
	if (d.op == NUMBER) d.nd_val = l.nd_val tok r.nd_val;	\
	else d.nd_uval = l.nd_uval tok r.nd_uval;		\
	if (t && d.op) d.op = NUMBER
#define	XEVALUBIN(tok, d, l, r)					\
	if (r.nd_val) { EVALUBIN(tok, d, l, r, 0); } else d.op = 0
%}

%term stop
d6 1
a6 6
%term ANDAND OROR IDENT NUMBER UNUMBER
/*
 * The following terminals are not used in the yacc code.
 */
%term STRING FPOINT WSPACE VA_ARGS CONCAT MKSTR ELLIPS CMNT

d8 1
d20 3
a22 5
%left '('

%union {
	struct nd node;
}
a23 8
%type <node>	term e NUMBER UNUMBER

%%
S:	e '\n'	{ 
		if ($1.op == 0)
			error("division by zero");
		return $1.nd_val;
	}
d26 1
a26 1
		{ EVALUBIN(*, $$, $1, $3, 0); }
d28 1
a28 1
		{ XEVALUBIN(/, $$, $1, $3); }
d30 1
a30 1
		{ XEVALUBIN(%, $$, $1, $3); }
d32 1
a32 1
		{ EVALBIN(+, $$, $1, $3); }
d34 1
a34 1
		{ EVALBIN(-, $$, $1, $3); }
d36 1
a36 1
		{ EVALBIN(<<, $$, $1, $3); }
d38 1
a38 1
		{ EVALUBIN(>>, $$, $1, $3, 0); }
d40 1
a40 1
		{ EVALUBIN(<, $$, $1, $3, 1); }
d42 1
a42 1
		{ EVALUBIN(>, $$, $1, $3, 1); }
d44 1
a44 1
		{ EVALUBIN(<=, $$, $1, $3, 1); }
d46 1
a46 1
		{ EVALUBIN(>=, $$, $1, $3, 1); }
d48 1
a48 1
		{ EVALUBIN(==, $$, $1, $3, 1); }
d50 1
a50 1
		{ EVALUBIN(!=, $$, $1, $3, 1); }
d52 1
a52 1
		{ EVALBIN(&, $$, $1, $3); }
d54 1
a54 1
		{ EVALBIN(^, $$, $1, $3); }
d56 9
a64 32
		{ EVALBIN(|, $$, $1, $3); }
	| e ANDAND e {
		$$ = $1;
		if ($1.nd_val) {
			$$.op = setd($1.op, $3.op);
			$$.nd_val = ($3.nd_val != 0);
		}
		if ($$.op == UNUMBER) $$.op = NUMBER;
	}
	| e OROR e {
		if ($1.nd_val != 0) {
			$$.nd_val = ($1.nd_val != 0);
			$$.op = $1.op;
		} else {
			$$.nd_val = ($3.nd_val != 0);
			$$.op = setd($1.op, $3.op);
		}
		if ($$.op == UNUMBER) $$.op = NUMBER;
	}
	| e '?' e ':' e {
		if ($1.op == 0)
			$$ = $1;
		else if ($1.nd_val)
			$$ = $3;
		else
			$$ = $5;
	}
	| e ',' e {
		$$.op = setd($1.op, $3.op);
		$$.nd_val = $3.nd_val;
		if ($$.op) $$.op =  $3.op;
	}
d66 1
a66 1
		{$$ = $1;}
d69 1
a69 3
		{ EVALUNARY(-, $$, $2); }
	| '+' term %prec UMINUS
		{$$ = $2;}
d71 1
a71 1
		{ $$.nd_val = ! $2.nd_val; $$.op = $2.op ? NUMBER : 0; }
d73 1
a73 1
		{ EVALUNARY(~, $$, $2); }
d75 7
a81 3
		{$$ = $2;}
	| NUMBER
		{$$ = $1;}
d83 1
a83 20

void
yyerror(char *err)
{
	error(err);
}

/*
 * Set return type of an expression.
 */
int
setd(int l, int r)
{
	if (!l || !r)
		return 0; /* div by zero involved */
	if (l == UNUMBER || r == UNUMBER)
		return UNUMBER;
	return NUMBER;
}

@


1.1.201.1
log
@Reiser CPP
@
text
@@
