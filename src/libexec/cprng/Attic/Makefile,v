head	1.5;
access;
symbols
	MIRBSD_10:1.3.0.2
	MIRBSD_10_BASE:1.3;
locks; strict;
comment	@# @;


1.5
date	2013.09.28.19.55.19;	author tg;	state dead;
branches;
next	1.4;
commitid	100524733DE1CEE6C8A;

1.4
date	2008.12.27.22.15.30;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004956A919073DAEFD;

1.3
date	2007.09.28.20.05.25;	author tg;	state Exp;
branches;
next	1.2;
commitid	10046FD5E937EA6D879;

1.2
date	2007.08.25.10.53.09;	author tg;	state Exp;
branches;
next	1.1;
commitid	10046D00A1F2640E934;

1.1
date	2007.07.07.20.32.06;	author tg;	state Exp;
branches;
next	;
commitid	100468FF6665289063C;


desc
@@


1.5
log
@ITIMER_PROF is driven from hardintr, not rtcintr, what a shame!
with this cprng(8) brings virtually no entropy but at pretty high
CPU cost nevertheless (I never liked it much, anyway…) so rid it
(think about adding jytter later)

basically we’ll need something that signals us at stathz intervals
(or profhz), for this to work
@
text
@# $MirOS: src/libexec/cprng/Makefile,v 1.4 2008/12/27 22:15:30 tg Exp $

PROG=		cprng
MAN=		cprng.8
LDSTATIC=	-static
LDFLAGS+=	-Wl,-n -Wl,-s

${PROG}: ${CRTI} ${CRTBEGIN} ${LIBCRT0} ${OBJS} ${LIBC} ${DPADD} ${CRTEND} ${CRTN}
	${LINK.prog} -o $@@
	${STRIP} --strip-unneeded -s -R .comment ${PROG}

.include <bsd.prog.mk>
@


1.4
log
@keep us still small with the change
@
text
@d1 1
a1 1
# $MirOS: src/libexec/cprng/Makefile,v 1.3 2007/09/28 20:05:25 tg Exp $
@


1.3
log
@don’t strip the RCS IDs, we’re still below a page like this
@
text
@d1 1
a1 1
# $MirOS: src/libexec/cprng/Makefile,v 1.2 2007/08/25 10:53:09 tg Exp $
d10 1
a10 1
	${STRIP} --strip-unneeded -s ${PROG}
@


1.2
log
@this thing needs a manual page
feature requested by wbx@@mirbsd.org
@
text
@d1 1
a1 1
# $MirOS: src/libexec/cprng/Makefile,v 1.1 2007/07/07 20:32:06 tg Exp $
d10 1
a10 1
	${STRIP} --strip-unneeded -s -R .comment ${PROG}
@


1.1
log
@add cprng, a RNG feeding entropy generated from the oscillation differences
between the CPU clock and the mainboard/bus clock into /dev/urandom (by de-
fault and if run by root), or writing them to stdout (under quite high load
for the CPU), after whitening. The entropy is quite good (if you get enough
to feed ports/math/ent), only the χ² lets me worry.

Tested on my systems:
• nwt (80486DX-33): 7.3 bit per byte, but as bad as rand()
• demo (SPARCstaion 20): 7.4 bit per byte, not much better
• herc (Pentium 233 MMX): 7.6 bit per byte, quality sort of okay
• odem (Athlon XP 500): 7.8 bit per byte, quality very good
• odem (Athlon XP 1200): 7.8 bit per byte, no difference to clocked-down

Instead of adding more post-processing or other functions to improve output
especially on the slower systems (I know I could manage quite something) it
is just fed to the kernel random(9) subsystem; users shall get /dev/arandom
if they require entropy of good quality or /dev/urandom if a high entrophic
values (actual randomness per bit) is desired (almost only for generating a
key for asymmetric cryptography, and even then you want to mix in a few bit
from arcfour).

This dæmon runs by default on our installer, installed system and the base-
live CD; users should disable it on their system after installation if they
have enough entropy sources (for example, interactive input). Users of slow
non-interactively-used servers should combine cprng with hotbits or similar
(see the commented out entries in the default crontab) for quality.
@
text
@d1 1
a1 1
# $MirOS$
d4 1
a4 1
NOMAN=		Yes
@

