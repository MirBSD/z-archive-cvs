head	1.8;
access;
symbols
	MIRBSD_9_BASE:1.7
	MIRBSD_8:1.6.0.2
	MIRBSD_8_BASE:1.6
	cvs-200507231800:1.1.3.1
	netbsd:1.1.3;
locks; strict;
comment	@ * @;


1.8
date	2007.03.19.15.31.53;	author tg;	state dead;
branches;
next	1.7;
commitid	10045FEABF71FCB0511;

1.7
date	2006.03.27.20.42.52;	author tg;	state Exp;
branches;
next	1.6;
commitid	10044284E592FC199A3;

1.6
date	2005.07.23.20.33.24;	author tg;	state Exp;
branches;
next	1.5;
commitid	184042e2a997cde1;

1.5
date	2005.07.23.20.08.50;	author tg;	state Exp;
branches;
next	1.4;
commitid	394042e2a3e3fc37;

1.4
date	2005.07.23.20.07.47;	author tg;	state Exp;
branches;
next	1.3;
commitid	29cb42e2a3a1ab1b;

1.3
date	2005.07.23.19.45.01;	author tg;	state Exp;
branches;
next	1.2;
commitid	30c342e29e4b745a;

1.2
date	2005.07.23.19.12.49;	author tg;	state Exp;
branches;
next	1.1;
commitid	780542e296a651e8;

1.1
date	2005.07.23.18.58.26;	author tg;	state Exp;
branches
	1.1.3.1;
next	;
commitid	186c42e2935537a6;

1.1.3.1
date	2005.07.23.18.58.26;	author tg;	state Exp;
branches;
next	;
commitid	186c42e2935537a6;


desc
@@


1.8
log
@nuke nbsh(1) – I switched back to mksh(1) as /bin/sh a while ago due to
bugs in nbsh(1) which will be made available as port, and it's cruel
code, using strcpy(3) et al. all over the place; using mksh as /bin/sh
will lead to less portable shell scripting in our base system, some of
which can then only be detected when using the bash, ash, nbsh, pdksh,
zsh or Heirloom sh ports (some of which are to be done…), but actually
I somehow don't care.

I guess the policy, starting from now, is:
• use “#!/bin/mksh” or, if it's not definitively MirOS-only,
  use “#!/usr/bin/env mksh” instead; do *not* use “#!/bin/sh”
  if you use any extensions unless it's for the common subset
  of bash and mksh and that's clearly documented (or it uses
  some kind of re-exec technique like src/etc/rc,v 1.62)
• make(1) – MirMake – has been using mksh for a while
• stuff that's run with /bin/sh from the base system, i.e.
  /etc/rc and friends, are OK to use mksh witho̲u̲t̲ a re-exec
  technique, starting from now
@
text
@/**	$MirOS: src/bin/sh/var.h,v 1.7 2006/03/27 20:42:52 tg Exp $ */
/*	$NetBSD: var.h,v 1.23 2004/10/02 12:16:53 dsl Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Kenneth Almquist.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)var.h	8.2 (Berkeley) 5/4/95
 */

/*
 * Shell variables.
 */

/* flags */
#define VEXPORT		0x0001	/* variable is exported */
#define VREADONLY	0x0002	/* variable cannot be modified */
#define VSTRFIXED	0x0004	/* variable struct is statically allocated */
#define VTEXTFIXED	0x0008	/* text is statically allocated */
#define VSTACK		0x0010	/* text is allocated on the stack */
#define VUNSET		0x0020	/* the variable is not set */
#define VNOFUNC		0x0040	/* don't call the callback function */
#define VNOSET		0x0080	/* do not set variable - just readonly test */
#define VISRANDOM	0x0100	/* is $RANDOM */


struct var {
	struct var *next;		/* next entry in hash list */
	int flags;			/* flags are defined above */
	char *text;			/* name=value */
	int name_len;			/* length of name */
	void (*func)(const char *);
					/* function to be called when  */
					/* the variable gets set/unset */
};


struct localvar {
	struct localvar *next;		/* next local variable in list */
	struct var *vp;			/* the variable that was made local */
	int flags;			/* saved flags */
	char *text;			/* saved text */
};


struct localvar *localvars;

extern struct var vifs;
extern struct var vpath;
extern struct var vps1;
extern struct var vps2;
extern struct var vps4;
extern struct var vrandom;

/*
 * The following macros access the values of the above variables.
 * They have to skip over the name.  They return the null string
 * for unset variables.
 */

#define ifsval()	(vifs.text + 4)
#define ifsset()	((vifs.flags & VUNSET) == 0)
#define pathval()	(vpath.text + 5)
#define ps1val()	(vps1.text + 4)
#define ps2val()	(vps2.text + 4)
#define ps4val()	(vps4.text + 4)
#define optindval()	(voptind.text + 7)

void initvar(void);
void setvar(const char *, const char *, int);
void setvareq(char *, int);
struct strlist;
void listsetvar(struct strlist *, int);
char *lookupvar(const char *);
char *bltinlookup(const char *, int);
char **environment(void);
void shprocvar(void);
int showvars(const char *, int, int);
void mklocal(const char *, int);
void listmklocal(struct strlist *, int);
void poplocalvars(void);
int unsetvar(const char *, int);
int setvarsafe(const char *, const char *, int);
void print_quoted(const char *);
@


1.7
log
@implement our arc4random-based $RANDOM here, too
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/sh/var.h,v 1.6 2005/07/23 20:33:24 tg Exp $ */
@


1.6
log
@more build fixes for __CRAZY (not finished), and cleanup
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/sh/var.h,v 1.5 2005/07/23 20:08:50 tg Exp $ */
d43 9
a51 8
#define VEXPORT		0x01	/* variable is exported */
#define VREADONLY	0x02	/* variable cannot be modified */
#define VSTRFIXED	0x04	/* variable struct is statically allocated */
#define VTEXTFIXED	0x08	/* text is statically allocated */
#define VSTACK		0x10	/* text is allocated on the stack */
#define VUNSET		0x20	/* the variable is not set */
#define VNOFUNC		0x40	/* don't call the callback function */
#define VNOSET		0x80	/* do not set variable - just readonly test */
d80 1
@


1.5
log
@get rid of ATTY too
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/sh/var.h,v 1.4 2005/07/23 20:07:47 tg Exp $ */
a103 2
int exportcmd(int, char **);
int localcmd(int, char **);
a106 2
int setvarcmd(int, char **);
int unsetcmd(int, char **);
@


1.4
log
@kill more #if and string madness
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/sh/var.h,v 1.3 2005/07/23 19:45:01 tg Exp $ */
a73 3
#if ATTY
extern struct var vatty;
#endif
a93 4
#if ATTY
#define attyset()	((vatty.flags & VUNSET) == 0)
#endif

@


1.3
log
@remove mail check facility (like done with mksh)
@
text
@d1 1
a1 1
4/**	$MirOS: src/bin/sh/var.h,v 1.2 2005/07/23 19:12:49 tg Exp $ */
@


1.2
log
@* add a MirOS Makefile
* SMALL::printf is always compiled in (for speed)
* SMALL::histedit is always skipped (sh is not interactive usually)
@
text
@d1 1
a1 1
/**	$MirOS$ */
a77 2
extern struct var vmail;
extern struct var vmpath;
a90 2
#define mailval()	(vmail.text + 5)
#define mpathval()	(vmpath.text + 9)
a99 1
#define mpathset()	((vmpath.flags & VUNSET) == 0)
@


1.1
log
@Initial revision
@
text
@d1 1
a83 5
#ifndef SMALL
extern struct var vterm;
extern struct var vtermcap;
extern struct var vhistsize;
#endif
a99 4
#ifndef SMALL
#define histsizeval()	(vhistsize.text + 9)
#define termval()	(vterm.text + 5)
#endif
@


1.1.3.1
log
@Import selected files from TNF's sh(1), an ash derivate
@
text
@@
