head	1.3;
access;
symbols
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2007.03.19.15.31.45;	author tg;	state dead;
branches;
next	1.2;
commitid	10045FEABF71FCB0511;

1.2
date	2005.07.23.19.12.49;	author tg;	state Exp;
branches;
next	1.1;
commitid	780542e296a651e8;

1.1
date	2005.07.23.19.05.59;	author tg;	state Exp;
branches;
next	;
commitid	396b42e295286a46;


desc
@@


1.3
log
@nuke nbsh(1) – I switched back to mksh(1) as /bin/sh a while ago due to
bugs in nbsh(1) which will be made available as port, and it's cruel
code, using strcpy(3) et al. all over the place; using mksh as /bin/sh
will lead to less portable shell scripting in our base system, some of
which can then only be detected when using the bash, ash, nbsh, pdksh,
zsh or Heirloom sh ports (some of which are to be done…), but actually
I somehow don't care.

I guess the policy, starting from now, is:
• use “#!/bin/mksh” or, if it's not definitively MirOS-only,
  use “#!/usr/bin/env mksh” instead; do *not* use “#!/bin/sh”
  if you use any extensions unless it's for the common subset
  of bash and mksh and that's clearly documented (or it uses
  some kind of re-exec technique like src/etc/rc,v 1.62)
• make(1) – MirMake – has been using mksh for a while
• stuff that's run with /bin/sh from the base system, i.e.
  /etc/rc and friends, are OK to use mksh witho̲u̲t̲ a re-exec
  technique, starting from now
@
text
@/* $MirOS: src/bin/sh/builtins.c,v 1.2 2005/07/23 19:12:49 tg Exp $ */
/*
 * This file was generated by the mkbuiltins program.
 */

#include "shell.h"
#include "builtins.h"

const struct builtincmd builtincmd[] = {

	{ "command",	bltincmd },
	{ "bg",	bgcmd },
	{ "cd",	cdcmd },
	{ "chdir",	cdcmd },
	{ "echo",	echocmd },
	{ "exp",	expcmd },
	{ "let",	expcmd },
	{ "false",	falsecmd },
	{ "fc",	histcmd },
	{ "inputrc",	inputrc },
	{ "fg",	fgcmd },
	{ "getopts",	getoptscmd },
	{ "hash",	hashcmd },
	{ "jobid",	jobidcmd },
	{ "jobs",	jobscmd },
	{ "local",	localcmd },
	{ "printf",	printfcmd },
	{ "pwd",	pwdcmd },
	{ "read",	readcmd },
	{ "setvar",	setvarcmd },
	{ "true",	truecmd },
	{ "type",	typecmd },
	{ "umask",	umaskcmd },
	{ "unalias",	unaliascmd },
	{ "wait",	waitcmd },
	{ "alias",	aliascmd },
	{ "ulimit",	ulimitcmd },
	{ "test",	testcmd },
	{ "[",	testcmd },
	{ "kill",	killcmd },
	{ "wordexp",	wordexpcmd },
	{ 0, 0 },
};

const struct builtincmd splbltincmd[] = {
	{ "break",	breakcmd },
	{ "continue",	breakcmd },
	{ ".",	dotcmd },
	{ "eval",	evalcmd },
	{ "exec",	execcmd },
	{ "exit",	exitcmd },
	{ "export",	exportcmd },
	{ "readonly",	exportcmd },
	{ "return",	returncmd },
	{ "set",	setcmd },
	{ "shift",	shiftcmd },
	{ "times",	timescmd },
	{ "trap",	trapcmd },
	{ ":",	truecmd },
	{ "unset",	unsetcmd },
	{ 0, 0 },
};
@


1.2
log
@* add a MirOS Makefile
* SMALL::printf is always compiled in (for speed)
* SMALL::histedit is always skipped (sh is not interactive usually)
@
text
@d1 1
a1 1
/* $MirOS$ */
@


1.1
log
@add generated source files
@
text
@d1 1
a26 1
#ifndef SMALL
a27 1
#endif
@

