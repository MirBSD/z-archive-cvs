head	1.6;
access;
symbols
	MIRBSD_9_BASE:1.5
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4;
locks; strict;
comment	@# @;


1.6
date	2007.05.07.15.21.15;	author tg;	state dead;
branches;
next	1.5;
commitid	100463F43D3067E6553;

1.5
date	2006.05.26.12.34.38;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004476F5EA1153F2A4;

1.4
date	2005.12.17.05.46.05;	author tg;	state Exp;
branches;
next	1.3;
commitid	10043A3A3E65E20A413;

1.3
date	2005.11.16.17.08.47;	author tg;	state Exp;
branches;
next	1.2;
commitid	622b437b67a833ab;

1.2
date	2005.04.12.20.52.21;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.16.17.19.06;	author tg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@add suma and sfv hashes in the standard format, too
(can't do adler32 that easily for now, later; sum/cksum/sysvsum differ, never)
@
text
@/* $MirOS: src/bin/md5/suma-x86.S,v 1.5 2006/05/26 12:34:38 tg Exp $ */

/*-
 * Copyright (c) 2005
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a nontrivial bug.
 */

#ifdef UNDERSCORES
#define	_C(x)	_ ## x
#else
#define	_C(x)	x
#endif

	.intel_syntax noprefix
	.section .comment
	.asciz	"$MirOS: src/bin/md5/suma-x86.S,v 1.5 2006/05/26 12:34:38 tg Exp $"
	.text


/*
 * EAX: in data
 * EDX: in out CRC
 * EBX: BL clobbered
 */
#define	UPDATE_ONE				  \
	mov	bl,32				; \
8:	rcl	eax,1				; \
	rcl	edx,1				; \
	jnc	9f				; \
	xor	edx,0x04563521			; \
9:	dec	bl				; \
	jnz	8b


/* void SUMA_Init(SUMA_CTX *ctx) */
	.globl	_C(SUMA_Init)
_C(SUMA_Init):
	mov	edx,[esp+4]
	xor	eax,eax
	dec	eax
	mov	[edx],eax
	ret


/* void SUMA_Update(SUMA_CTX *ctx, const uint8_t *data, size_t len) */
	.globl	_C(SUMA_Update)
_C(SUMA_Update):
	push	ebp
	mov	ebp,esp
	push	ebx
	push	esi
	mov	eax,[ebp+8]	/* ctx */
	mov	esi,[ebp+12]	/* data */
	mov	ecx,[ebp+16]	/* len */
	jecxz	7f
	mov	edx,[eax]
	cld
	push	ecx
	shr	ecx,2
	jecxz	2f
1:	lodsd
	UPDATE_ONE
	dec	ecx
	jnz	1b
2:	pop	ecx
	and	cl,3
	jz	6f
	xor	eax,eax
	lodsb
	dec	cl
	je	3f
	ror	eax,8
	lodsb
	rol	eax,8
	dec	cl
	je	3f
	ror	eax,16
	lodsb
	rol	eax,16
3:	UPDATE_ONE
6:	mov	eax,[ebp+8]	/* ctx */
	mov	[eax],edx
7:	pop	esi
	pop	ebx
	pop	ebp
	ret


/* void SUMA_Final(SUMA_CTX *ctx) */
	.globl	_C(SUMA_Final)
_C(SUMA_Final):
	mov	ecx,[esp+4]	/* ctx */
	push	ebx
	mov	edx,[ecx]
	xor	eax,eax
	UPDATE_ONE
	mov	[ecx],edx
	pop	ebx
	ret
@


1.5
log
@use uint*_t instead of u_int*_t
@
text
@d1 1
a1 1
/* $MirOS: src/bin/md5/suma-x86.S,v 1.4 2005/12/17 05:46:05 tg Exp $ */
d36 1
a36 1
	.asciz	"$MirOS: src/bin/md5/suma-x86.S,v 1.4 2005/12/17 05:46:05 tg Exp $"
@


1.4
log
@big fat licence update (I left some which are bsiegert@@'s alone though)
also, remove licence boilerplate from some .h files who don't deserve it
and remove and add some advertising clauses because I say so
@
text
@d1 1
a1 1
/* $MirOS: src/bin/md5/suma-x86.S,v 1.3 2005/11/16 17:08:47 tg Exp $ */
d36 1
a36 1
	.asciz	"$MirOS: src/bin/md5/suma-x86.S,v 1.3 2005/11/16 17:08:47 tg Exp $"
d65 1
a65 1
/* void SUMA_Update(SUMA_CTX *ctx, const u_int8_t *data, size_t len) */
@


1.3
log
@* apply patches from the port
* clean up for __CRAZY=Yes build
@
text
@d1 1
a1 1
/* $MirOS: src/bin/md5/suma-x86.S,v 1.2 2005/04/12 20:52:21 tg Exp $ */
d18 8
a25 7
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of this work, even if advised of the possibility of such damage.
d36 1
a36 1
	.asciz	"$MirOS: src/bin/md5/suma-x86.S,v 1.2 2005/04/12 20:52:21 tg Exp $"
@


1.2
log
@uint32_t => u_int32_t
uint8_t  => u_int8_t

The former are the ISO types, the latter the BSD types.
Guess which one the oh-so-UNIXish Mac OSX doesn't have?

Also, fix a proto glitch in a comment
@
text
@d1 1
a1 1
/* $MirOS: src/bin/md5/suma-x86.S,v 1.1 2005/03/16 17:19:06 tg Exp $ */
d27 6
d35 1
a35 1
	.asciz	"$MirOS: src/bin/md5/suma-x86.S,v 1.1 2005/03/16 17:19:06 tg Exp $"
d55 2
a56 2
	.globl	SUMA_Init
SUMA_Init:
d65 2
a66 2
	.globl	SUMA_Update
SUMA_Update:
d109 2
a110 2
	.globl	SUMA_Final
SUMA_Final:
@


1.1
log
@add a traditional CRC algorithm of mine to the pool
looks like message digests in output, very cool ;-)

at the moment, x86-only. Wish C had a carry flag!
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.2 2005/03/03 19:43:30 tg Rel $ */
d29 1
a29 1
	.asciz	"$MirOS$"
d58 1
a58 1
/* void SUMA_Update(SUMA_CTX *ctx, const uint8_t *data, size_t len) */
d102 1
a102 1
/* void SUMA_Final(SUMA_CTX *) */
@

