head	1.3;
access;
symbols
	MIRBSD_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2007.04.29.22.17.46;	author tg;	state dead;
branches;
next	1.2;
commitid	100463519761D6D8E11;

1.2
date	2006.06.08.19.03.00;	author tg;	state Exp;
branches;
next	1.1;
commitid	100448873FE537168BE;

1.1
date	2006.05.26.11.55.16;	author tg;	state Exp;
branches;
next	;
commitid	1004476ECB0544641F5;


desc
@@


1.3
log
@• use adler stuff from kern lib
• fold rest into crc.[ch]

note:	crc32 here doesn't match the one from zlib, although both
	say they use the same polynomial… weird
@
text
@/* $MirOS: src/bin/md5/adler32.h,v 1.2 2006/06/08 19:03:00 tg Exp $ */

#define	ADLER32_DIGEST_LENGTH		4
#define	ADLER32_DIGEST_STRING_LENGTH	(ADLER32_DIGEST_LENGTH * 2 + 1)

typedef uint32_t ADLER32_CTX;

void ADLER32_Init(ADLER32_CTX *);
void ADLER32_Update(ADLER32_CTX *, const uint8_t *, size_t)
    __attribute__((__bounded__(__string__,2,3)));
char *ADLER32_End(ADLER32_CTX *, char *)
    __attribute__((__bounded__(__minbytes__,2,ADLER32_DIGEST_STRING_LENGTH)));

void cksum_addpool(const char *) __attribute__((__nonnull__(1)));
@


1.2
log
@make adler32(3) an additional "low-trust" entropy source,
both in kernel and userland, but not in libstand, and use
it in cksum(1) to post-process digests except in time and
testsuite trials (modulated by time(NULL) or time.tv_sec,
respectively, in libz, and arc4random() in cksum too); no
change in behaviour (one-byte-at-a-time mode not affected
for speed reasons) visible
@
text
@d1 1
a1 1
/* $MirOS: src/bin/md5/adler32.h,v 1.1 2006/05/26 11:55:16 tg Exp $ */
@


1.1
log
@add adler32 (libz-based and my own asm code)
@
text
@d1 1
a1 1
/* $MirOS: src/bin/md5/suma.h,v 1.2 2005/04/12 20:52:21 tg Exp $ */
d13 2
@

