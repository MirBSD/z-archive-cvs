head	1.35;
access;
symbols
	MIRBSD_10:1.17.0.2
	MIRBSD_10_BASE:1.17
	MIRBSD_9_BASE:1.10
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.35
date	2020.01.31.17.26.25;	author tg;	state Exp;
branches;
next	1.34;
commitid	1005E34634757E41EDB;

1.34
date	2018.12.25.19.38.07;	author tg;	state Exp;
branches;
next	1.33;
commitid	1005C22871909EC7FE2;

1.33
date	2018.10.07.01.10.10;	author tg;	state Exp;
branches;
next	1.32;
commitid	1005BB95CA10BF418E8;

1.32
date	2016.02.11.20.12.08;	author tg;	state Exp;
branches;
next	1.31;
commitid	10056BCEAFF41919B5B;

1.31
date	2014.02.19.17.15.10;	author tg;	state Exp;
branches;
next	1.30;
commitid	1005304E6B4683AAB85;

1.30
date	2011.07.18.00.35.43;	author tg;	state Exp;
branches;
next	1.29;
commitid	1004E237FF1656D5846;

1.29
date	2011.07.06.22.21.53;	author tg;	state Exp;
branches;
next	1.28;
commitid	1004E14E010182825E7;

1.28
date	2009.11.22.18.23.38;	author tg;	state Exp;
branches;
next	1.27;
commitid	1004B0981B210A68B89;

1.27
date	2009.11.17.21.28.25;	author tg;	state Exp;
branches;
next	1.26;
commitid	1004B0315904EBABBA5;

1.26
date	2009.11.17.21.20.42;	author tg;	state Exp;
branches;
next	1.25;
commitid	1004B0313C2207233C4;

1.25
date	2009.11.09.17.29.03;	author tg;	state Exp;
branches;
next	1.24;
commitid	1004AF851761B1DA0DE;

1.24
date	2009.08.27.18.04.54;	author tg;	state Exp;
branches;
next	1.23;
commitid	1004A96CACF7D07E95E;

1.23
date	2009.06.26.21.52.20;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004A4542EC09E552F9;

1.22
date	2009.05.17.14.09.25;	author tg;	state Exp;
branches;
next	1.21;
commitid	1004A101A5960DAB717;

1.21
date	2008.04.17.20.34.12;	author tg;	state Exp;
branches;
next	1.20;
commitid	1004807B45403FC459E;

1.20
date	2008.03.14.16.46.00;	author tg;	state Exp;
branches;
next	1.19;
commitid	10047DAABDD118A6FDD;

1.19
date	2008.03.13.00.25.46;	author tg;	state Exp;
branches;
next	1.18;
commitid	10047D8749204883D6C;

1.18
date	2008.03.12.23.17.19;	author tg;	state Exp;
branches;
next	1.17;
commitid	10047D86495134E62E4;

1.17
date	2007.07.07.18.05.05;	author tg;	state Exp;
branches;
next	1.16;
commitid	100468FD5E40040BAA3;

1.16
date	2007.07.04.01.30.40;	author tg;	state Exp;
branches;
next	1.15;
commitid	100468AF82A49C1B15D;

1.15
date	2007.05.07.15.21.14;	author tg;	state Exp;
branches;
next	1.14;
commitid	100463F43D3067E6553;

1.14
date	2007.05.07.14.06.04;	author tg;	state Exp;
branches;
next	1.13;
commitid	100463F322D3CC3A59A;

1.13
date	2007.03.12.20.26.04;	author tg;	state Exp;
branches;
next	1.12;
commitid	10045F5B71216F366DE;

1.12
date	2006.09.17.20.05.14;	author tg;	state Exp;
branches;
next	1.11;
commitid	100450DAA8B4F62B6C3;

1.11
date	2006.09.17.19.28.57;	author tg;	state Exp;
branches;
next	1.10;
commitid	100450DA20303EFF79D;

1.10
date	2006.06.04.11.46.49;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004482C8223FB04DD1;

1.9
date	2006.05.26.11.55.16;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004476ECB0544641F5;

1.8
date	2006.05.25.12.33.08;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004475A41627A214CB;

1.7
date	2006.05.09.22.55.36;	author tg;	state Exp;
branches;
next	1.6;
commitid	10044611DC32012DAD5;

1.6
date	2006.05.09.22.19.06;	author tg;	state Exp;
branches;
next	1.5;
commitid	10044611571123605D9;

1.5
date	2006.05.09.22.17.33;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004461151461D91848;

1.4
date	2005.10.21.11.02.35;	author tg;	state Exp;
branches
	1.4.2.1;
next	1.3;
commitid	6c0b4358cac0ef88;

1.3
date	2005.03.16.17.19.06;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.18.55.22;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.22.06;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.4.2.1
date	2006.05.10.17.51.07;	author tg;	state Exp;
branches;
next	;
commitid	1004462281503DB3DA7;

1.1.1.1
date	2005.02.05.17.22.06;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.45.23;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.35
log
@mention crc32b as standard-ish alias name for sfv

todo:
- Added crc32c hash using Castagnoli's polynomial. This CRC32 variant is
  used by storage systems, such as iSCSI, SCTP, Btrfs and ext4.
+ crc32b is sfv; also more, touched by this, contained within php 7.4:
  https://patch-diff.githubusercontent.com/raw/php/php-src/pull/3913.diff
@
text
@.\"	$MirOS: src/bin/md5/cksum.1,v 1.33 2018/10/07 01:10:10 tg Exp $
.\"	$OpenBSD: cksum.1,v 1.5 2005/03/07 23:41:53 jmc Exp $
.\"
.\" Copyright (c) 2006, 2007, 2008, 2009, 2011, 2014, 2016, 2018, 2020
.\"	mirabilos <m@@mirbsd.org>
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)cksum.1	8.2 (Berkeley) 4/28/95
.\"
.\"-
.\" Try to make GNU groff and AT&T nroff more compatible
.\" * ` generates ‘ in gnroff, so use \`
.\" * ' generates ’ in gnroff, \' generates ´, so use \*(aq
.\" * - generates ‐ in gnroff, \- generates −, so .tr it to -
.\"   thus use - for hyphens and \- for minus signs and option dashes
.\" * ~ is size-reduced and placed atop in groff, so use \*(TI
.\" * ^ is size-reduced and placed atop in groff, so use \*(ha
.\" * \(en does not work in nroff, so use \*(en
.\" * <>| are problematic, so redefine and use \*(Lt\*(Gt\*(Ba
.\" Also make sure to use \& *before* a punctuation char that is to not
.\" be interpreted as punctuation, and especially with two-letter words
.\" but also (after) a period that does not end a sentence (“e.g.\&”).
.\" The section after the "doc" macropackage has been loaded contains
.\" additional code to convene between the UCB mdoc macropackage (and
.\" its variant as BSD mdoc in groff) and the GNU mdoc macropackage.
.\"
.ie \n(.g \{\
.	if \*[.T]ascii .tr \-\N'45'
.	if \*[.T]latin1 .tr \-\N'45'
.	if \*[.T]utf8 .tr \-\N'45'
.	ds <= \[<=]
.	ds >= \[>=]
.	ds Rq \[rq]
.	ds Lq \[lq]
.	ds sL \(aq
.	ds sR \(aq
.	if \*[.T]utf8 .ds sL `
.	if \*[.T]ps .ds sL `
.	if \*[.T]utf8 .ds sR '
.	if \*[.T]ps .ds sR '
.	ds aq \(aq
.	ds TI \(ti
.	ds ha \(ha
.	ds en \(en
.\}
.el \{\
.	ds aq '
.	ds TI ~
.	ds ha ^
.	ds en \(em
.\}
.\"
.\" Implement .Dd with the Mdocdate RCS keyword
.\"
.rn Dd xD
.de Dd
.ie \\$1$Mdocdate: \{\
.	xD \\$2 \\$3, \\$4
.\}
.el .xD \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8
..
.\"
.\" .Dd must come before definition of .Mx, because when called
.\" with -mandoc, it might implement .Mx itself, but we want to
.\" use our own definition. And .Dd must come *first*, always.
.\"
.Dd $Mdocdate: October 7 2018 $
.\"
.\" Check which macro package we use, and do other -mdoc setup.
.\"
.ie \n(.g \{\
.	if \*[.T]utf8 .tr \[la]\*(Lt
.	if \*[.T]utf8 .tr \[ra]\*(Gt
.	ie d volume-ds-1 .ds tT gnu
.	el .ie d doc-volume-ds-1 .ds tT gnp
.	el .ds tT bsd
.\}
.el .ds tT ucb
.\"
.\" Implement .Mx (MirBSD)
.\"
.ie "\*(tT"gnu" \{\
.	eo
.	de Mx
.	nr curr-font \n[.f]
.	nr curr-size \n[.ps]
.	ds str-Mx \f[\n[curr-font]]\s[\n[curr-size]u]
.	ds str-Mx1 \*[Tn-font-size]\%MirBSD\*[str-Mx]
.	if !\n[arg-limit] \
.	if \n[.$] \{\
.	ds macro-name Mx
.	parse-args \$@@
.	\}
.	if (\n[arg-limit] > \n[arg-ptr]) \{\
.	nr arg-ptr +1
.	ie (\n[type\n[arg-ptr]] == 2) \
.	as str-Mx1 \~\*[arg\n[arg-ptr]]
.	el \
.	nr arg-ptr -1
.	\}
.	ds arg\n[arg-ptr] "\*[str-Mx1]
.	nr type\n[arg-ptr] 2
.	ds space\n[arg-ptr] "\*[space]
.	nr num-args (\n[arg-limit] - \n[arg-ptr])
.	nr arg-limit \n[arg-ptr]
.	if \n[num-args] \
.	parse-space-vector
.	print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[Tn-font-size]
.\}
.el .ie "\*(tT"gnp" \{\
.	eo
.	de Mx
.	nr doc-curr-font \n[.f]
.	nr doc-curr-size \n[.ps]
.	ds doc-str-Mx \f[\n[doc-curr-font]]\s[\n[doc-curr-size]u]
.	ds doc-str-Mx1 \*[doc-Tn-font-size]\%MirBSD\*[doc-str-Mx]
.	if !\n[doc-arg-limit] \
.	if \n[.$] \{\
.	ds doc-macro-name Mx
.	doc-parse-args \$@@
.	\}
.	if (\n[doc-arg-limit] > \n[doc-arg-ptr]) \{\
.	nr doc-arg-ptr +1
.	ie (\n[doc-type\n[doc-arg-ptr]] == 2) \
.	as doc-str-Mx1 \~\*[doc-arg\n[doc-arg-ptr]]
.	el \
.	nr doc-arg-ptr -1
.	\}
.	ds doc-arg\n[doc-arg-ptr] "\*[doc-str-Mx1]
.	nr doc-type\n[doc-arg-ptr] 2
.	ds doc-space\n[doc-arg-ptr] "\*[doc-space]
.	nr doc-num-args (\n[doc-arg-limit] - \n[doc-arg-ptr])
.	nr doc-arg-limit \n[doc-arg-ptr]
.	if \n[doc-num-args] \
.	doc-parse-space-vector
.	doc-print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[doc-Tn-font-size]
.\}
.el \{\
.	de Mx
.	nr cF \\n(.f
.	nr cZ \\n(.s
.	ds aa \&\f\\n(cF\s\\n(cZ
.	if \\n(aC==0 \{\
.		ie \\n(.$==0 \&MirBSD\\*(aa
.		el .aV \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8 \\$9
.	\}
.	if \\n(aC>\\n(aP \{\
.		nr aP \\n(aP+1
.		ie \\n(C\\n(aP==2 \{\
.			as b1 \&MirBSD\ #\&\\*(A\\n(aP\\*(aa
.			ie \\n(aC>\\n(aP \{\
.				nr aP \\n(aP+1
.				nR
.			\}
.			el .aZ
.		\}
.		el \{\
.			as b1 \&MirBSD\\*(aa
.			nR
.		\}
.	\}
..
.\}
.\"-
.Dt CKSUM 1
.Os
.Sh NAME
.Nm cksum ,
.Nm sum
.Nd display file checksums and block counts
.Sh SYNOPSIS
.Nm cksum
.Bk -words
.Op Fl a Ar algorithms
.Op Fl o Ar 1 | 2
.Op Fl b
.Oo
.Fl p | s Ar string |
.Ar file ...
.Oc
.Ek
.Nm cksum
.Bk -words
.Op Fl a Ar algorithms
.Op Fl o Ar 1 | 2
.Fl G
.Op Ar file ...
.Ek
.Nm cksum
.Bk -words
.Op Fl a Ar algorithms
.Op Fl o Ar 1 | 2
.Fl t | x |
.Fl c Op Ar checklist ...
.Ek
.Nm sum
.Op Ar file ...
.Sh DESCRIPTION
The
.Nm cksum
utility writes to the standard output a single line for each input file.
The format of this line varies with the algorithm being used as follows:
.Bl -tag -width allXothers
.It Ar cksum
The output line consists of three whitespace separated fields: a
.Tn CRC
checksum, the number of octets in the input,
and name of the file or string.
Binary output consists of two 64-bit parts,
corresponding to the checksum and length, respectively.
If no file name is specified, the standard input is used and no file name
is written.
.It Ar sum
The output line consists of three whitespace separated fields: a
.Tn CRC
checksum, the number of kilobytes in the input,
and name of the file or string.
Binary output consists of two 64-bit parts,
corresponding to the checksum and length, respectively.
If no file name is specified, the standard input is used and no file name
is written.
.It Ar sysvsum
The output line consists of three whitespace separated fields: a
.Tn CRC
checksum, the number of 512-byte blocks in the input,
and name of the file or string.
Binary output consists of two 64-bit parts,
corresponding to the checksum and length, respectively.
If no file name is specified, the standard input is used and no file name
is written.
.It Ar sfv
The output line consists of the file name followed by a space,
unless the data to be processed is read from standard input,
followed by a
.Xr cksfv 1
compatible
.Tn CRC
expressed as eight sedecimal numbers.
This algorithm is also called
.Ic crc32b
or (vulgarily) just CRC32 or even CRC,
for instance for verifying the integrity of downloads from
a certain Redmond software house or by Anime fansub groups.
.Pp
You might want to add a comment generated by the following commands
before the block of SFV hashes:
.Bd -literal
$ stat \-L \-f \*(aq; %12z  %Sm %N\*(aq \-t \*(aq%H:%M.%S %F\*(aq file ...
.Ed
.It Ar all others
The output line consists of four whitespace separated fields:
the name of the algorithm used, the name of the file or string in
parentheses, an equals sign, and the cryptographic hash of the input.
Binary output consists of simply the sedecimal hash value, read from left
to right (big endian), converted into bytes; the length is not encoded.
If no file name is specified, the standard input is used and only
the cryptographic hash is output.
In the
.Ar cdb
case, the output is the DJB
.Pq CDB
hash of the input string.
In the
.Ar oaat
case, the output is Jenkins' one-at-a-time hash of the input string.
The
.Ar oaat1
and
.Ar oaat1s
hashes use 0x100 instead of 0 as initial hash value, and
.Ar oaat1s
also uses RFC1321-style length padding on the input string.
In the
.Ar bafh ,
.Ar nzaat
or
.Ar nzat
case, this is a
.Mx
invented hash based on
.Ar oaat .
.Ar bafh
is also partially based on AES.
In the
.Ar suma
case, the output is a 33-bit
.Tn CRC
over the file, expressed as eight sedecimal numbers.
Both input processing and binary output are in little-endian convention.
In the
.Ar size
case, the output is a decimal unsigned 64-bit quantity denominating the
size of the data read; binary representation is big-endian.
.El
.Pp
The
.Nm sum
utility is identical to the
.Nm cksum
utility, except that it defaults to using historic algorithm 1, as
described below.
It is provided for compatibility only.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl a Ar algorithms
Use the specified algorithm(s) instead of the default (cksum).
Supported algorithms include
.Ar adler32 ,
.Ar bafh ,
.Ar cdb ,
.Ar cksum ,
.Ar md4 ,
.Ar md5 ,
.Ar nzat ,
.Ar nzaat ,
.Ar oaat ,
.Ar oaat1 ,
.Ar oaat1s ,
.Ar rmd160 ,
.Ar sfv ,
.Ar sha1 ,
.Ar sha256 ,
.Ar sha384 ,
.Ar sha512 ,
.Ar size ,
.Ar sum ,
.Ar suma ,
.Ar sysvsum ,
.Ar tiger ,
and
.Ar whirlpool .
Multiple algorithms may be specified, separated by a comma or whitespace.
Additionally, multiple
.Fl a
options may be specified on the command line.
If an algorithm is repeated, only the first instance is used.
Case is ignored when matching algorithms.
.It Fl b
Print the checksum as binary to stdout.
.It Fl c Op Ar checklist ...
Compares all checksums contained in the file
.Ar checklist
with newly computed checksums for the corresponding files.
Output consists of the digest used, the file name,
and an OK or FAILED for the result of the comparison.
This will validate any of the supported checksums.
If no file is given, stdin is used.
The
.Fl c
option may not be used in conjunction with more than a single
.Fl a
option.
.Pp
The
.Ar checklist
must either be in normal
.Nm
format or in GNU
.Nm md5sum
compatible format.
Verifying
.Nm cksfv Ns -style
input is not supported.
.It Fl G
Be somewhat compatible to the GNU
.Nm md5sum
tool in our output.
This will also be invoked if this program is called as
.Nm md5sum ,
.Nm sha1sum , ...
Note that only the
.Fl b
and
.Fl t
options are somewhat recognised (and ignored), the
.Fl c
and
.Fl w
options and any GNU long options are rejected, and this
output mode does not make any sense for many algorithms, such as
.Ar adler32 ,
.Ar bafh ,
.Ar cdb ,
.Ar cksum ,
.Ar nzat ,
.Ar nzaat ,
.Ar oaat ,
.Ar oaat1 ,
.Ar oaat1s ,
.Ar sfv ,
.Ar size ,
.Ar sum ,
.Ar suma ,
and
.Ar sysvsum .
.It Fl o Ar 1 | 2
Use historic algorithms instead of the (superior) default one
(see below).
.It Fl p
Echoes stdin to stdout and appends the
checksum to stdout.
.It Fl s Ar string
Prints a checksum of the given
.Ar string .
.It Fl t
Runs a built-in time trial.
.It Fl x
Runs a built-in test script.
The output conforms to the NESSIE test vector format, Set 1.
.El
.Pp
Algorithm 1 (aka
.Ar sum )
is the algorithm used by historic
.Bx
systems as the
.Nm sum
algorithm and by historic
.At V
systems as the
.Nm sum
algorithm when using the
.Fl r
option.
This is a 16-bit checksum, with a right rotation before each addition;
overflow is discarded.
.Pp
Algorithm 2 (aka
.Ar sysvsum )
is the algorithm used by historic
.At V
systems as the
default
.Nm sum
algorithm.
This is a 32-bit checksum, and is defined as follows:
.Bd -unfilled -offset indent
s = sum of all bytes;
r = s % 2\*(ha16 + (s % 2\*(ha32) / 2\*(ha16;
cksum = (r % 2\*(ha16) + r / 2\*(ha16;
.Ed
.Pp
Both algorithm 1 and 2 write to the standard output the same fields as
the default algorithm, except that the size of the file in bytes is
replaced with the size of the file in blocks.
For historic reasons, the block size is 1024 for algorithm 1 and 512
for algorithm 2.
Partial blocks are rounded up.
.Pp
The default
.Tn CRC
used is based on the polynomial used for
.Tn CRC
error checking
in the networking standard
.St -iso8802-3 .
The
.Tn CRC
checksum encoding is defined by the generating polynomial:
.Bd -unfilled -offset indent
G(x) = x\*(ha32 + x\*(ha26 + x\*(ha23 + x\*(ha22 + x\*(ha16 + x\*(ha12 +
     x\*(ha11 + x\*(ha10 + x\*(ha8 + x\*(ha7 + x\*(ha5 + x\*(ha4 + x\*(ha2 + x + 1
.Ed
.Pp
Mathematically, the
.Tn CRC
value corresponding to a given file is defined by
the following procedure:
.Bd -filled -offset indent
The
.Ar n
bits to be evaluated are considered to be the coefficients of a mod 2
polynomial M(x) of degree
.Ar n Ns \-1 .
These
.Ar n
bits are the bits from the file, with the most significant bit being the most
significant bit of the first octet of the file and the last bit being the least
significant bit of the last octet, padded with zero bits (if necessary) to
achieve an integral number of octets, followed by one or more octets
representing the length of the file as a binary value, least significant octet
first.
The smallest number of octets capable of representing this integer are used.
.Pp
M(x) is multiplied by x\*(ha32 (i.e., shifted left 32 bits) and divided by
G(x) using mod 2 division, producing a remainder R(x) of degree \*(Lt= 31.
.Pp
The coefficients of R(x) are considered to be a 32-bit sequence.
.Pp
The bit sequence is complemented and the result is the CRC.
.Ed
.Pp
The
.Ar sfv
.Tn CRC
is undocumented, cf.\&
.Pa http://www.fodder.org/cksfv/
.br
It seems to be widely known, though, and appears to use the same
polynomial and conventions as the (non-ADLER32) crc32 function of
.Xr gzip 1 .
.Pp
The
.Ar suma
.Tn CRC
uses little endian 32-bit block reading conventions,
initialisation of the CRC with an all-ones word and a
different 33-bit polynomial.
.Pp
The other available algorithms are described in their respective
man pages in section 3 of the manual.
.Sh DIAGNOSTICS
The
.Nm cksum
and
.Nm sum
utilities exit 0 on success or \*(Gt0 if an error occurred.
.Sh SEE ALSO
.Xr md5 1 ,
.Xr rmd160 1 ,
.Xr sha1 1 ,
.Xr stat 1 ,
.Xr adler32 3 ,
.Xr md4 3 ,
.Xr md5 3 ,
.Xr rmd160 3 ,
.Xr sfv 3 ,
.Xr sha1 3 ,
.Xr sha2 3 ,
.Xr suma 3 ,
.Xr tiger 3 ,
.Xr whirlpool 3
.Pp
The default calculation is identical to that given in pseudo-code
in the following
.Tn ACM
article:
.Rs
.%T "Computation of Cyclic Redundancy Checks Via Table Lookup"
.%A Dilip V. Sarwate
.%J "Communications of the \\*(tNACM\\*(sP"
.%D "August 1988"
.Re
.Pp
.Pa http://www.cryptonessie.org/
.Sh STANDARDS
The
.Nm cksum
utility is compliant with the
.St -p1003.2-92
specification.
.Pp
The
.Ar sfv
format and the comment format given above are compatible with
the output generated by Bryan Call's
.Nm cksfv .
.Sh HISTORY
A
.Nm sum
command appeared in
.At v2 .
The
.Nm cksum
utility appeared in
.Bx 4.4
and has been enhanced by new algorithms in
.Ox
and several times in
.Mx .
.Sh CAVEATS
Do not use the
.Ar adler32 ,
.Ar bafh ,
.Ar cdb ,
.Ar cksum ,
.Ar md4 ,
.Ar md5 ,
.Ar nzat ,
.Ar nzaat ,
.Ar oaat ,
.Ar oaat1 ,
.Ar oaat1s ,
.Ar sfv ,
.Ar sha1 ,
.Ar size ,
.Ar sum ,
.Ar suma ,
.Ar sysvsum ,
or
.Ar tiger
algorithms to detect hostile binary modifications.
For most of the algorithms listed above, an attacker can trivially produce
backdoored daemons which have the same checksum as the standard versions.
Even
.Ar md4
has been long broken, collisions for
.Ar md5
are published and picked up by script kiddies, and the attack used for
.Ar md5
has already been successfully mounted on a reduced form of
.Ar sha1 .
Use a cryptographically strong checksum (such as RIPEMD\-160) instead,
or combine two algorithms from different families, for example,
.Xr rmd160 ,
.Xr whirlpool ,
and, optionally, one of the CRCs.
@


1.34
log
@update from contrib/samples/portmdoc,v 1.11
@
text
@d4 1
a4 1
.\" Copyright (c) 2006, 2007, 2008, 2009, 2011, 2014, 2016, 2018
d95 1
a95 1
.Dd $Mdocdate: December 25 2018 $
d275 3
a277 1
The algorithm is often vulgarly called CRC32 or even CRC,
@


1.33
log
@spelling cleanup: “programme” is distinct from “program”; even in
British English, the latter is used for computer programs, while
the former serves for things like the TV programme, or a programme
to plant trees
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.32 2016/02/11 20:12:08 tg Exp $
d4 1
a4 1
.\" Copyright (c) 2006, 2007, 2008, 2009, 2011, 2014, 2016
d95 1
a95 1
.Dd $Mdocdate: February 11 2016 $
d103 1
d116 1
a116 1
.	ds str-Mx1 \*[Tn-font-size]\%MirOS\*[str-Mx]
d142 32
d180 1
a180 1
.		ie \\n(.$==0 \&MirOS\\*(aa
d186 1
a186 1
.			as b1 \&MirOS\ #\&\\*(A\\n(aP\\*(aa
d194 1
a194 1
.			as b1 \&MirOS\\*(aa
@


1.32
log
@merge most recent portmdoc into a̲l̲l̲ of its users; fixup .\& into \&. like
in mksh(1), for Schillix ditroff
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.30 2011/07/18 00:35:43 tg Exp $
d95 1
a95 1
.Dd $Mdocdate: July 18 2011 $
d370 1
a370 1
This will also be invoked if this programme is called as
@


1.31
log
@add BAFH; consider deprecating OAAT1S
@
text
@d4 2
a5 2
.\" Copyright (c) 2006, 2007, 2008, 2009, 2011, 2014
.\"	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
d47 4
d97 1
a97 1
.\" Check which macro package we use
d100 2
@


1.30
log
@now that I got Hash.cs compiled and run, I’m amazed; make NZAAT (and NZAT!) all green with a small tweak; bit distribution and χ2 look OK as well
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.29 2011/07/06 22:21:53 tg Exp $
d4 1
a4 1
.\" Copyright (c) 2006, 2007, 2008, 2009, 2011
d91 1
a91 1
.Dd $Mdocdate: July 6 2011 $
d269 1
d277 2
d305 1
d378 1
d570 1
@


1.29
log
@replace uses of OAAT hash in all its variants by NZAT (mksh internal) or NZAAT (all others)
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.28 2009/11/22 18:23:38 tg Exp $
d91 1
a91 1
.Dd $Mdocdate: November 22 2009 $
d272 3
a274 1
case, this is a hash based on
@


1.28
log
@fix more manpages
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.27 2009/11/17 21:28:25 tg Exp $
d4 1
a4 1
.\" Copyright (c) 2006, 2007, 2008, 2009
d91 1
a91 1
.Dd $Mdocdate: November 17 2009 $
d269 6
d304 2
d374 2
d567 2
@


1.27
log
@fix an editing mistake
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.26 2009/11/17 21:20:42 tg Exp $
d465 1
a465 1
G(x) using mod 2 division, producing a remainder R(x) of degree <= 31.
d496 1
a496 1
utilities exit 0 on success or >0 if an error occurred.
@


1.26
log
@these are the first to use the new portmdoc
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.25 2009/11/09 17:29:03 tg Exp $
d134 1
@


1.25
log
@new hashes oaat1 (= oaat with 0x100 ipv 0 as IV) and oaat1s (= oaat1 but
with RFC1321-style length padding added)

note that the padding vector is .rodata here (.data in libc/hash/) and
should normally be exported by libc/libmirmake for all hashes at once;
note also that my padding size formula is cooler and doesn’t use an if
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.24 2009/08/27 18:04:54 tg Exp $
d40 3
a42 3
.\" * ` generates ‘ in groff, so use \`
.\" * ' generates ’ in groff, \' generates ´, so use \*(aq
.\" * - generates ‐ in groff, \- generates −, fixed in tmac/mdoc/doc-groff
d47 4
d52 13
d78 1
d90 10
a99 1
.Dd $Mdocdate: August 27 2009 $
d102 53
a154 14
.de Mx
.nr cF \\n(.f
.nr cZ \\n(.s
.ds aa \&\f\\n(cF\s\\n(cZ
.if \\n(aC==0 \{\
.	ie \\n(.$==0 \&MirOS\\*(aa
.	el .aV \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8 \\$9
.\}
.if \\n(aC>\\n(aP \{\
.	nr aP \\n(aP+1
.	ie \\n(C\\n(aP==2 \{\
.		as b1 \&MirOS\ #\&\\*(A\\n(aP\\*(aa
.		ie \\n(aC>\\n(aP \{\
.			nr aP \\n(aP+1
a156 5
.		el .aZ
.	\}
.	el \{\
.		as b1 \&MirOS\\*(aa
.		nR
d158 1
d160 1
a160 1
..
@


1.24
log
@implementing Jenkins' one-at-a-time hash, one at a time :)
this time, in cksum(1)
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.23 2009/06/26 21:52:20 tg Exp $
d72 1
a72 1
.Dd $Mdocdate: June 26 2009 $
d198 7
d236 2
d304 2
d495 2
@


1.23
log
@* add CDB too, just for the fun of it
* TIGER is cryptographically broken, according to gebi from #grml, so
  don't recommend it for integrity checks either
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.22 2009/05/17 14:09:25 tg Exp $
d72 1
a72 1
.Dd $Mdocdate: May 17 2009 $
d193 5
a197 2
.Pq CDB hash
of the input string.
d228 1
d294 1
d483 1
@


1.22
log
@implement GNU md5sum compatible mode, two-way
• argv[0] = ${algo}sum
• .Fl G

The former accepts (and ignores) either -b or -t (but not both,
due to the rest of the code¹) but rejects -c (not implemented¹)
and -w (unknown) as well as --gnu-long-options.
The latter is more picky but can be called more easily.

① pending rewrite?
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.21 2008/04/17 20:34:12 tg Exp $
d72 1
a72 1
.Dd $Mdocdate: April 17 2008 $
d191 5
d221 1
d288 1
d474 1
d483 1
d485 1
a485 1
.Ar sysvsum
a499 3
either
.Xr tiger
or
@


1.21
log
@oops, fix replaco in r1.19
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.20 2008/03/14 16:46:00 tg Exp $
d4 2
a5 2
.\" Copyright (c) 2006, 2007, 2008
.\"	Thorsten “mirabilos” Glaser <tg@@mirbsd.de>
d72 1
a72 1
.Dd $Mdocdate: March 14 2008 $
d108 2
d115 3
d120 2
a124 1
.Fl t | x
d127 2
d264 25
@


1.20
log
@use .Dd before (re)defining .Mx, otherwise tmac.andoc fucks up on mnbsd
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.19 2008/03/13 00:25:46 tg Exp $
d72 1
a72 1
.Dd $Mdocdate$
d172 1
a172 1
$ stat \-L \-f *(aq; %12z  %Sm %N*(aq \-t *(aq%H:%M.%S %F*(aq file ...
d299 2
a300 2
r = s % 2*(ha16 + (s % 2*(ha32) / 2*(ha16;
cksum = (r % 2*(ha16) + r / 2*(ha16;
d321 2
a322 2
G(x) = x*(ha32 + x*(ha26 + x*(ha23 + x*(ha22 + x*(ha16 + x*(ha12 +
     x*(ha11 + x*(ha10 + x*(ha8 + x*(ha7 + x*(ha5 + x*(ha4 + x*(ha2 + x + 1
d345 1
a345 1
M(x) is multiplied by x*(ha32 (i.e., shifted left 32 bits) and divided by
@


1.19
log
@mdocdate, groffify, fix \. → .\&
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.18 2008/03/12 23:17:19 tg Exp $
d69 5
a98 1
.Dd $Mdocdate$
@


1.18
log
@declare .Dd and .Mx
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.17 2007/07/07 18:05:05 tg Exp $
d4 2
a5 2
.\" Copyright (c) 2006, 2007
.\"	Thorsten Glaser <tg@@mirbsd.de>
d94 1
a94 1
.Dd July 7, 2007
d168 1
a168 1
$ stat -L -f '; %12z  %Sm %N' -t '%H:%M.%S %F' file ...
d295 2
a296 2
r = s % 2^16 + (s % 2^32) / 2^16;
cksum = (r % 2^16) + r / 2^16;
d317 2
a318 2
G(x) = x^32 + x^26 + x^23 + x^22 + x^16 + x^12 +
     x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1
d341 1
a341 1
M(x) is multiplied by x^32 (i.e., shifted left 32 bits) and divided by
d352 1
a352 1
is undocumented, cf\.
@


1.17
log
@implement -bs
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.16 2007/07/04 01:30:40 tg Exp $
d38 56
@


1.16
log
@more insights on the sfv(3) algorithm

(no $Mdocdate on stuff we distribute as subprojects,
except the stuff pulled in by mirmake since that's
not part of the cvs module)
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.15 2007/05/07 15:21:14 tg Exp $
d38 1
a38 1
.Dd May 7, 2007
d48 1
d50 1
a50 5
.Oo Fl b Oc
.Fl p | t | x |
.Fl c Oo Ar checklist ... Oc |
.Fl s Ar string |
.Oo Fl b Oc
d56 6
@


1.15
log
@add suma and sfv hashes in the standard format, too
(can't do adler32 that easily for now, later; sum/cksum/sysvsum differ, never)
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.14 2007/05/07 14:06:04 tg Exp $
d102 3
d295 4
@


1.14
log
@introduce the whirlpool hash function (finally!)
code taken from TNF pkgsrc® pkgtools/digest tool
actual source is the public domain reference implementation

XXX test this on big-endian platforms
XXX adjust mirmake

this libc addition rides on yesterday's minor bump
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.13 2007/03/12 20:26:04 tg Exp $
d38 1
a38 1
.Dd March 12, 2007
d317 1
d320 1
@


1.13
log
@show a way to generate ports/misc/cksfv-like comments
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.12 2006/09/17 20:05:14 tg Exp $
d4 1
a4 1
.\" Copyright (c) 2006
d155 1
d157 1
a157 1
.Ar tiger .
d319 2
a320 1
.Xr tiger 3
d386 4
a389 1
.Xr tiger ,
@


1.12
log
@who says we can't have a SIZE checksum as well?
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.11 2006/09/17 19:28:57 tg Exp $
d38 1
a38 1
.Dd September 17, 2006
d102 6
d311 1
d338 6
@


1.11
log
@add the SFV (from cksfv) and TIGER hashes
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.10 2006/06/04 11:46:49 tg Exp $
d38 1
a38 1
.Dd March 16, 2005
d116 4
d145 1
d352 1
@


1.10
log
@fix endianness of 'suma -b' output (must be little endian,
for certain reasons)

sorry, this commit is too late for today's snapshot, tho
(found out during checksumming the ISO)
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.9 2006/05/26 11:55:16 tg Exp $
d66 2
a67 2
.Bl -tag -width Ds
.It cksum
d76 1
a76 1
.It sum
d85 1
a85 1
.It sysvsum
d94 9
a102 1
.It all others
d110 3
a112 2
.It suma
The output is a 33-bit
d114 1
a114 1
over the file, expressed as eight sedecimal numbers, in the above format.
d136 1
d143 1
d145 1
a145 1
.Ar sysvsum .
d167 11
d191 1
d276 6
d283 2
a284 1
CRC uses little endian 32-bit block reading conventions,
d300 7
a306 1
.Xr adler32 3
d318 2
d334 6
a339 2
.Bx 4.4 .
.Sh WARNING
d344 3
d352 15
a366 3
An attacker can trivially produce backdoored daemons which have the same
checksum as the standard versions.
Use a cryptographically strong checksum (such as RIPEMD-160) instead.
@


1.9
log
@add adler32 (libz-based and my own asm code)
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.8 2006/05/25 12:33:08 tg Exp $
d106 1
@


1.8
log
@allow multiple -a with -b
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.7 2006/05/09 22:55:36 tg Exp $
d121 1
d268 2
a269 1
.Xr sha1 1
d298 1
d302 1
@


1.7
log
@fix -b for all supported algorithms (in general, for all "standard"
hashes with an even length of the digest, and for all "traditional"
CRCs with a two-component result and no longer CRC than x^65)

candidate for MFC
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.6 2006/05/09 22:19:06 tg Exp $
d136 1
a136 3
options may be specified on the command line, unless
.Fl b
is used.
@


1.6
log
@fix suma description
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.5 2006/05/09 22:17:33 tg Exp $
d72 2
d81 2
d90 2
d98 2
@


1.5
log
@fix description and usage of the -b option
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.4 2005/10/21 11:02:35 tg Exp $
a80 7
.It suma
The output is a 33-bit
.Tn CRC
over the file, expressed as eight sedecimal numbers,
followed by the input file name.
If no file name is specified, the standard input is used
and no file name is written.
d94 4
@


1.4
log
@* merge bin and lib completely
* convert some ancient RCSID styles etc. to more modern stuff
* fix use of CDIAGFLAGS+=, CFLAGS+= and COPTS+= to the correct
  variant (include bsd.own.mk _then_ COPTS+=) so they're added
  after any user-specified flags
  (this is probably lurking in more places than I can imagine)
* fix some indenting, comments, etc.
* make stuff compile (fix warnings/errors)
* add script to review _all_ shlib_version after an openbsd import
* remove two more obsolete /usr/lib/debug/ references
* bin/ps: comment out some SMP code
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.3 2005/03/16 17:19:06 tg Exp $
d4 2
d49 2
a50 1
.Fl b | p | t | x |
d53 1
d131 3
a133 1
options may be specified on the command line.
@


1.4.2.1
log
@MFC src/bin/md5,-rHEAD

ok bsiegert@@
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/md5/cksum.1,v 1.7 2006/05/09 22:55:36 tg Exp $
a3 2
.\" Copyright (c) 2006
.\"	Thorsten Glaser <tg@@mirbsd.de>
d47 1
a47 2
.Oo Fl b Oc
.Fl p | t | x |
a49 1
.Oo Fl b Oc
a67 2
Binary output consists of two 64-bit parts,
corresponding to the checksum and length, respectively.
a74 2
Binary output consists of two 64-bit parts,
corresponding to the checksum and length, respectively.
d77 7
a88 2
Binary output consists of two 64-bit parts,
corresponding to the checksum and length, respectively.
a94 2
Binary output consists of simply the sedecimal hash value, read from left
to right (big endian), converted into bytes; the length is not encoded.
a96 4
.It suma
The output is a 33-bit
.Tn CRC
over the file, expressed as eight sedecimal numbers, in the above format.
d127 1
a127 3
options may be specified on the command line, unless
.Fl b
is used.
@


1.3
log
@add a traditional CRC algorithm of mine to the pool
looks like message digests in output, very cool ;-)

at the moment, x86-only. Wish C had a carry flag!
@
text
@d1 2
a2 2
.\"	$MirOS: src/bin/md5/cksum.1,v 1.2 2005/03/06 18:55:22 tg Exp $
.\"	$OpenBSD: cksum.1,v 1.3 2004/12/29 17:32:44 millert Exp $
d132 1
a132 4
.It Xo
.Fl c
.Oo Ar checklist ... Oc
.Xc
@


1.2
log
@merge src/bin
@
text
@d1 1
a1 1
.\"	$MirOS$
d36 1
a36 1
.Dd April 30, 2004
d77 7
d121 1
d244 6
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
.Fl p | t | x |
d122 2
d284 1
a284 1
Use a cryptographic-strength checksum (such as MD5) instead.
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
.\"	$OpenBSD: cksum.1,v 1.5 2005/03/07 23:41:53 jmc Exp $
d121 4
a124 1
.It Fl c Op Ar checklist ...
d281 1
a281 1
Use a cryptographic checksum instead.
@

