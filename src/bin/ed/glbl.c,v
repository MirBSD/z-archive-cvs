head	1.5;
access;
symbols
	cvs-201804291800:1.1.1.4
	cvs-201704021600:1.1.1.3
	cvs-201611061700:1.1.1.3
	cvs-201104091530:1.1.1.2
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2018.04.29.18.17.37;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005AE60C5B58CC813A;

1.4
date	2016.11.06.19.42.54;	author tg;	state Exp;
branches;
next	1.3;
commitid	100581F87D82ABC7C17;

1.3
date	2016.11.06.18.58.44;	author tg;	state Exp;
branches;
next	1.2;
commitid	100581F7D79676B0355;

1.2
date	2011.04.09.16.47.07;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004DA08DA1052D2486;

1.1
date	2005.02.05.17.22.04;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.22.04;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.04.09.15.54.12;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	1004DA081363B8A3AA8;

1.1.1.3
date	2016.11.06.17.31.57;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	100581F69214EA355AF;

1.1.1.4
date	2018.04.29.18.11.52;	author tg;	state Exp;
branches;
next	;
commitid	1005AE60AF7585D8E88;


desc
@@


1.5
log
@fullmerge
@
text
@/*	$OpenBSD: glbl.c,v 1.19 2017/04/26 21:25:43 naddy Exp $	*/
/*	$NetBSD: glbl.c,v 1.2 1995/03/21 09:04:41 cgd Exp $	*/

/* glob.c: This file contains the global command routines for the ed line
   editor */
/*-
 * Copyright (c) 1993 Andrew Moore, Talke Studio.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/ioctl.h>
#include <sys/wait.h>

#include <regex.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ed.h"

__RCSID("$MirOS: src/bin/ed/glbl.c,v 1.4 2016/11/06 19:42:54 tg Exp $");

static int set_active_node(line_t *);
static line_t *next_active_node(void);

/* build_active_list:  add line matching a pattern to the global-active list */
int
build_active_list(int isgcmd)
{
	regex_t *pat;
	line_t *lp;
	int n;
	char *s;
	char delimiter;

	if ((delimiter = *ibufp) == ' ' || delimiter == '\n') {
		seterrmsg("invalid pattern delimiter");
		return ERR;
	} else if ((pat = get_compiled_pattern()) == NULL)
		return ERR;
	else if (*ibufp == delimiter)
		ibufp++;
	clear_active_list();
	lp = get_addressed_line_node(first_addr);
	for (n = first_addr; n <= second_addr; n++, lp = lp->q_forw) {
		if ((s = get_sbuf_line(lp)) == NULL)
			return ERR;
		if (isbinary)
			NUL_TO_NEWLINE(s, lp->len);
		if ((!regexec(pat, s, 0, NULL, 0)) == isgcmd &&
		    set_active_node(lp) < 0)
			return ERR;
	}
	return 0;
}

#ifdef BACKWARDS
static char nullcmd[] = "p\n";
#endif

/* exec_global: apply command list in the command buffer to the active
   lines in a range; return command status */
int
exec_global(int interact, int gflag)
{
	static char *ocmd = NULL;
	static int ocmdsz = 0;

	line_t *lp = NULL;
	int status;
	int n;
	char *cmd = NULL;

#ifdef BACKWARDS
	if (!interact) {
		if (!strcmp(ibufp, "\n"))
			/* null cmd-list = "p" */
			cmd = nullcmd;
		else if ((cmd = get_extended_line(&n, 0)) == NULL)
			return ERR;
	}
#else
	if (!interact && (cmd = get_extended_line(&n, 0)) == NULL)
		return ERR;
#endif
	clear_undo_stack();
	while ((lp = next_active_node()) != NULL) {
		if ((current_addr = get_line_node_addr(lp)) < 0)
			return ERR;
		if (interact) {
			/* print current_addr; get a command in global syntax */
			if (display_lines(current_addr, current_addr, gflag) < 0)
				return ERR;
			while ((n = get_tty_line()) > 0 &&
			    ibuf[n - 1] != '\n')
				clearerr(stdin);
			if (n < 0)
				return ERR;
			else if (n == 0) {
				seterrmsg("unexpected end-of-file");
				return ERR;
			} else if (n == 1 && !strcmp(ibuf, "\n"))
				continue;
			else if (n == 2 && !strcmp(ibuf, "&\n")) {
				if (cmd == NULL) {
					seterrmsg("no previous command");
					return ERR;
				} else cmd = ocmd;
			} else if ((cmd = get_extended_line(&n, 0)) == NULL)
				return ERR;
			else {
				REALLOC(ocmd, ocmdsz, n + 1, ERR);
				memcpy(ocmd, cmd, n + 1);
				cmd = ocmd;
			}

		}
		ibufp = cmd;
		for (; *ibufp;)
			if ((status = extract_addr_range()) < 0 ||
			    (status = exec_command()) < 0 ||
			    (status > 0 && (status = display_lines(
			    current_addr, current_addr, status)) < 0))
				return status;
	}
	return 0;
}


static line_t **active_list;	/* list of lines active in a global command */
static int active_last;		/* index of last active line in active_list */
static int active_size;		/* size of active_list */
static int active_ptr;		/* active_list index (non-decreasing) */
static int active_ndx;		/* active_list index (modulo active_last) */

/* set_active_node: add a line node to the global-active list */
static int
set_active_node(line_t *lp)
{
	if (active_last + 1 > active_size) {
		int ti = active_size;
		line_t **ts;
		SPL1();
		if ((ts = reallocarray(active_list,
		    (ti += MINBUFSZ), sizeof(line_t **))) == NULL) {
			perror(NULL);
			seterrmsg("out of memory");
			SPL0();
			return ERR;
		}
		active_size = ti;
		active_list = ts;
		SPL0();
	}
	active_list[active_last++] = lp;
	return 0;
}


/* unset_active_nodes: remove a range of lines from the global-active list */
void
unset_active_nodes(line_t *np, line_t *mp)
{
	line_t *lp;
	int i;

	for (lp = np; lp != mp; lp = lp->q_forw)
		for (i = 0; i < active_last; i++)
			if (active_list[active_ndx] == lp) {
				active_list[active_ndx] = NULL;
				active_ndx = INC_MOD(active_ndx, active_last - 1);
				break;
			} else	active_ndx = INC_MOD(active_ndx, active_last - 1);
}


/* next_active_node: return the next global-active line node */
static line_t *
next_active_node(void)
{
	while (active_ptr < active_last && active_list[active_ptr] == NULL)
		active_ptr++;
	return (active_ptr < active_last) ? active_list[active_ptr++] : NULL;
}


/* clear_active_list: clear the global-active list */
void
clear_active_list(void)
{
	SPL1();
	active_size = active_last = active_ptr = active_ndx = 0;
	free(active_list);
	active_list = NULL;
	SPL0();
}
@


1.4
log
@warning-free (ed code) with GCC 6; from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.18 2016/03/22 17:58:28 mmcc Exp $	*/
d43 1
a43 1
__RCSID("$MirOS: src/bin/ed/glbl.c,v 1.3 2016/11/06 18:58:44 tg Exp $");
@


1.3
log
@preliminary merge
@
text
@d43 1
a43 1
__RCSID("$MirOS: src/bin/ed/glbl.c,v 1.2 2011/04/09 16:47:07 tg Exp $");
d72 1
a72 1
		if (!regexec(pat, s, 0, NULL, 0) == isgcmd &&
@


1.2
log
@make __CRAZY clean
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.12 2009/10/27 23:59:21 deraadt Exp $	*/
d35 6
d43 4
a46 1
__RCSID("$MirOS$");
d52 1
a52 1
	pattern_t *pat;
d152 5
a156 5
line_t **active_list;		/* list of lines active in a global command */
int active_last;		/* index of last active line in active_list */
int active_size;		/* size of active_list */
int active_ptr;			/* active_list index (non-decreasing) */
int active_ndx;			/* active_list index (modulo active_last) */
d159 1
a159 1
int
d166 6
a171 19
#if defined(sun) || defined(NO_REALLOC_NULL)
		if (active_list != NULL) {
#endif
			if ((ts = (line_t **) realloc(active_list,
			    (ti += MINBUFSZ) * sizeof(line_t **))) == NULL) {
				perror(NULL);
				seterrmsg("out of memory");
				SPL0();
				return ERR;
			}
#if defined(sun) || defined(NO_REALLOC_NULL)
		} else {
			if ((ts = (line_t **) calloc(ti += MINBUFSZ,
			    sizeof(line_t **))) == NULL) {
				perror(NULL);
				seterrmsg("out of memory");
				SPL0();
				return ERR;
			}
a172 1
#endif
d200 1
a200 1
line_t *
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.10 2003/06/11 23:42:12 deraadt Exp $	*/
a31 8
#ifndef lint
#if 0
static char *rcsid = "@@(#)glob.c,v 1.1 1994/02/01 00:34:40 alm Exp";
#else
static char rcsid[] = "$OpenBSD: glbl.c,v 1.10 2003/06/11 23:42:12 deraadt Exp $";
#endif
#endif /* not lint */

d37 1
d70 3
d90 2
a91 1
			cmd = "p\n";		/* null cmd-list == `p' */
d169 1
a169 1
			if ((ts = (line_t **) malloc((ti += MINBUFSZ) *
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@pull latest ed from openbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.12 2009/10/27 23:59:21 deraadt Exp $	*/
d32 8
d172 1
a172 1
			if ((ts = (line_t **) calloc(ti += MINBUFSZ,
@


1.1.1.3
log
@Updates for ed(1) from Ox
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.18 2016/03/22 17:58:28 mmcc Exp $	*/
a34 6
#include <regex.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

a36 2
static int set_active_node(line_t *);
static line_t *next_active_node(void);
d42 1
a42 1
	regex_t *pat;
d138 5
a142 5
static line_t **active_list;	/* list of lines active in a global command */
static int active_last;		/* index of last active line in active_list */
static int active_size;		/* size of active_list */
static int active_ptr;		/* active_list index (non-decreasing) */
static int active_ndx;		/* active_list index (modulo active_last) */
d145 1
a145 1
static int
d152 19
a170 6
		if ((ts = reallocarray(active_list,
		    (ti += MINBUFSZ), sizeof(line_t **))) == NULL) {
			perror(NULL);
			seterrmsg("out of memory");
			SPL0();
			return ERR;
d172 1
d200 1
a200 1
static line_t *
@


1.1.1.4
log
@The “let’s obsolete mwl’s book just after its release” import
@
text
@d1 1
a1 1
/*	$OpenBSD: glbl.c,v 1.19 2017/04/26 21:25:43 naddy Exp $	*/
d70 1
a70 1
		if ((!regexec(pat, s, 0, NULL, 0)) == isgcmd &&
@


