head	1.4;
access;
symbols
	paxmirabilis-20190825:1.4
	paxmirabilis-20190224:1.4
	paxmirabilis-20190210:1.3
	npax:1.1.0.2;
locks; strict;
comment	@ * @;


1.4
date	2019.02.23.23.24.54;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005C71D6461A38EAB3;

1.3
date	2019.02.10.21.50.07;	author tg;	state Exp;
branches;
next	1.2;
commitid	1005C609C8F43A9BDCB;

1.2
date	2018.12.12.18.08.42;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005C114EA81986F5EC;

1.1
date	2018.12.12.04.04.48;	author tg;	state dead;
branches
	1.1.2.1;
next	;
commitid	1005C1088F174324DE8;

1.1.2.1
date	2018.12.12.04.04.48;	author tg;	state Exp;
branches;
next	1.1.2.2;
commitid	1005C1088F174324DE8;

1.1.2.2
date	2018.12.12.06.25.15;	author tg;	state Exp;
branches;
next	1.1.2.3;
commitid	1005C10A9DB34B11C85;

1.1.2.3
date	2018.12.12.06.47.37;	author tg;	state Exp;
branches;
next	1.1.2.4;
commitid	1005C10AF1965896ABA;

1.1.2.4
date	2018.12.12.06.53.12;	author tg;	state Exp;
branches;
next	1.1.2.5;
commitid	1005C10B06C02071195;

1.1.2.5
date	2018.12.12.08.18.58;	author tg;	state Exp;
branches;
next	1.1.2.6;
commitid	1005C10C48822E4378D;

1.1.2.6
date	2018.12.12.09.08.56;	author tg;	state Exp;
branches;
next	1.1.2.7;
commitid	1005C10D0381A00BE25;

1.1.2.7
date	2018.12.12.10.41.25;	author tg;	state Exp;
branches;
next	1.1.2.8;
commitid	1005C10E5E87909E6FC;

1.1.2.8
date	2018.12.12.14.32.27;	author tg;	state Exp;
branches;
next	1.1.2.9;
commitid	1005C111C134DFE1BC0;

1.1.2.9
date	2018.12.12.15.00.24;	author tg;	state Exp;
branches;
next	1.1.2.10;
commitid	1005C11229872472EAF;

1.1.2.10
date	2018.12.12.15.05.24;	author tg;	state Exp;
branches;
next	;
commitid	1005C1123C435C5AC83;


desc
@@


1.4
log
@work around bugs in old glibc to ensure LLONG_MIN et al. are defined

for the gory details, see the commits leading up to and including
https://evolvis.org/plugins/scmgit/cgi-bin/gitweb.cgi?p=alioth/pax.git;a=commit;h=878bbdcfedc82eda1c4b942fafb13cec4e163c58
@
text
@/*-
 * Copyright © 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
 *	       2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
 *	       2019
 *	mirabilos <m@@mirbsd.org>
 * Copyright © 2018
 *	mirabilos <t.glaser@@tarent.de>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un‐
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person’s immediate fault when using the work as intended.
 */

#ifndef PAX_COMPAT_H
#define PAX_COMPAT_H

#if HAVE_SYS_MKDEV_H
#include <sys/mkdev.h>
#endif
#if HAVE_SYS_SYSMACROS_H
#include <sys/sysmacros.h>
#endif
#if HAVE_STDINT_H
#include <stdint.h>
#endif

#undef __attribute__
#if HAVE_ATTRIBUTE_BOUNDED
#define MKSH_A_BOUNDED(x,y,z)	__attribute__((__bounded__(x, y, z)))
#else
#define MKSH_A_BOUNDED(x,y,z)	/* nothing */
#endif
#if HAVE_ATTRIBUTE_FORMAT
#define MKSH_A_FORMAT(x,y,z)	__attribute__((__format__(x, y, z)))
#else
#define MKSH_A_FORMAT(x,y,z)	/* nothing */
#endif
#if HAVE_ATTRIBUTE_NONNULL
#define MKSH_A_NONNULL(x)	__attribute__((__nonnull__(x)))
#else
#define MKSH_A_NONNULL(x)	/* nothing */
#endif
#if HAVE_ATTRIBUTE_NORETURN
#define MKSH_A_NORETURN		__attribute__((__noreturn__))
#else
#define MKSH_A_NORETURN		/* nothing */
#endif
#if HAVE_ATTRIBUTE_PURE
#define MKSH_A_PURE		__attribute__((__pure__))
#else
#define MKSH_A_PURE		/* nothing */
#endif
#if HAVE_ATTRIBUTE_UNUSED
#define MKSH_A_UNUSED		__attribute__((__unused__))
#else
#define MKSH_A_UNUSED		/* nothing */
#endif
#if HAVE_ATTRIBUTE_USED
#define MKSH_A_USED		__attribute__((__used__))
#else
#define MKSH_A_USED		/* nothing */
#endif

#if defined(MirBSD) && (MirBSD >= 0x09A1) && \
    defined(__ELF__) && defined(__GNUC__) && \
    !defined(__llvm__) && !defined(__NWCC__)
/*
 * We got usable __IDSTRING __COPYRIGHT __RCSID __SCCSID macros
 * which work for all cases; no need to redefine them using the
 * "portable" macros from below when we might have the "better"
 * gcc+ELF specific macros or other system dependent ones.
 */
#else
#undef __IDSTRING
#undef __IDSTRING_CONCAT
#undef __IDSTRING_EXPAND
#undef __COPYRIGHT
#undef __RCSID
#undef __SCCSID
#define __IDSTRING_CONCAT(l,p)		__LINTED__ ## l ## _ ## p
#define __IDSTRING_EXPAND(l,p)		__IDSTRING_CONCAT(l,p)
#ifdef MKSH_DONT_EMIT_IDSTRING
#define __IDSTRING(prefix, string)	/* nothing */
#else
#define __IDSTRING(prefix, string)				\
	static const char __IDSTRING_EXPAND(__LINE__,prefix) []	\
	    MKSH_A_USED = "@@(""#)" #prefix ": " string
#endif
#define __COPYRIGHT(x)		__IDSTRING(copyright,x)
#define __RCSID(x)		__IDSTRING(rcsid,x)
#define __SCCSID(x)		__IDSTRING(sccsid,x)
#endif

#ifdef EXTERN
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.3 2019/02/10 21:50:07 tg Exp $");
#endif

/* possibly missing types */

#if !HAVE_CAN_INTTYPES
#if !HAVE_CAN_UCBINTS
typedef signed int int32_t;
typedef unsigned int uint32_t;
#else
typedef u_int32_t uint32_t;
#endif
#endif
#if !HAVE_CAN_INT16TYPE
#if !HAVE_CAN_UCBINT16
typedef unsigned short int uint16_t;
#else
typedef u_int16_t uint16_t;
#endif
#endif

#ifdef MKSH_TYPEDEF_SSIZE_T
typedef MKSH_TYPEDEF_SSIZE_T ssize_t;
#endif

#if !HAVE_CAN_ULONG
typedef unsigned long u_long;
#endif

/* missing macros / header bug workarounds */

#if !defined(LLONG_MIN) && defined(LONG_LONG_MIN)
#define LLONG_MIN LONG_LONG_MIN
#define LLONG_MAX LONG_LONG_MAX
#define ULLONG_MAX ULONG_LONG_MAX
#endif

/* macros dealing with types differing across systems */

#if HAVE_OFFT_LONG
#define OT_FMT "lu"
#else
#define OT_FMT "llu"
#endif

/* macros dealing with struct stat.sb_[acm]time */

#ifndef timespeccmp
#define	timespeccmp(tsp, usp, cmp)					\
	(((tsp)->tv_sec == (usp)->tv_sec) ?				\
	    ((tsp)->tv_nsec cmp (usp)->tv_nsec) :			\
	    ((tsp)->tv_sec cmp (usp)->tv_sec))
#endif

#if HAVE_ST_MTIM
#define st_timecmp(x,sbpa,sbpb,op) \
	timespeccmp(&(sbpa)->st_ ## x ## tim, &(sbpb)->st_ ## x ## tim, op)
#define st_timecpy(x,sbpd,sbps) do {					\
	(sbpd)->st_ ## x ## tim = (sbps)->st_ ## x ## tim;		\
} while (/* CONSTCOND */ 0)
#define st_timexp(x,ts,sbp) do {					\
	(ts)->tv_sec = (sbp)->st_ ## x ## tim.tv_sec;			\
	(ts)->tv_nsec = (sbp)->st_ ## x ## tim.tv_nsec;			\
} while (/* CONSTCOND */ 0)
#elif HAVE_ST_MTIMENSEC
#define st_timecmp(x,sbpa,sbpb,op) ( \
	((sbpa)->st_ ## x ## time == (sbpb)->st_ ## x ## time) ? \
	    ((sbpa)->st_ ## x ## timensec op (sbpb)->st_ ## x ## timensec) : \
	    ((sbpa)->st_ ## x ## time op (sbpb)->st_ ## x ## time) \
	)
#define st_timecpy(x,sbpd,sbps) do {					\
	(sbpd)->st_ ## x ## time = (sbps)->st_ ## x ## time;		\
	(sbpd)->st_ ## x ## timensec = (sbps)->st_ ## x ## timensec;	\
} while (/* CONSTCOND */ 0)
#define st_timexp(x,ts,sbp) do {					\
	(ts)->tv_sec = (sbp)->st_ ## x ## time;				\
	(ts)->tv_nsec = (sbp)->st_ ## x ## timensec;			\
} while (/* CONSTCOND */ 0)
#else
#define st_timecmp(x,sbpa,sbpb,op) \
	((sbpa)->st_ ## x ## time op (sbpb)->st_ ## x ## time)
#define st_timecpy(x,sbpd,sbps) do {					\
	(sbpd)->st_ ## x ## time = (sbps)->st_ ## x ## time;		\
} while (/* CONSTCOND */ 0)
#define st_timexp(x,ts,sbp) do {					\
	(ts)->tv_sec = (sbp)->st_ ## x ## time;				\
	(ts)->tv_nsec = 0;						\
} while (/* CONSTCOND */ 0)
#endif

/* compat.c */

#define BO__TWO		0x01	/* (internal use only) */
#define BO_CLEXEC	0x02	/* set close-on-exec flag or warn */
#define BO_MAYBE_DIR	0x04	/* add O_DIRECTORY if defined */
#define binopen2(feat,path,flags) binopen3((feat) | BO__TWO, (path), (flags), 0)
int binopen3(int, const char *, int, mode_t)
    MKSH_A_NONNULL(2);

ssize_t dwrite(int, const void *, size_t)
    MKSH_A_BOUNDED(__buffer__, 2, 3);

/* exclude system replacement functions in early link check */
#ifndef MIRTOCONF_EARLY

#if !HAVE_DPRINTF
/* replacement only as powerful as needed for this */
void dprintf(int, const char *, ...)
    MKSH_A_NONNULL(2)
    MKSH_A_FORMAT(__printf__, 2, 3);
#endif

#if !HAVE_REALLOCARRAY
void *reallocarray(void *, size_t, size_t);
#endif

#if !HAVE_STRLCPY
size_t strlcat(char *, const char *, size_t)
    MKSH_A_BOUNDED(__string__, 1, 3);
size_t strlcpy(char *, const char *, size_t)
    MKSH_A_BOUNDED(__string__, 1, 3);
#endif

#if !HAVE_STRMODE
void strmode(mode_t, char *);
#endif

#if !HAVE_STRTONUM
long long strtonum(const char *, long long, long long, const char **);
#endif

#endif /* !MIRTOCONF_EARLY */

#endif
@


1.3
log
@port to Debian sid/{amd64,i386,hurd-i386,x32}, {stretch,jessie}/{amd64,i386}
@
text
@d106 1
a106 1
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.2 2018/12/12 18:08:42 tg Exp $");
d135 10
@


1.2
log
@merge the npax branch into MAIN

asides from a missing dprintf and portability, this ought to be
good enough for people (well me) to play with for now
@
text
@d3 2
a4 1
 *	       2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018
d106 1
a106 1
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.1.2.10 2018/12/12 15:05:24 tg Exp $");
d135 6
d143 7
d198 3
d223 6
@


1.1
log
@file compat.h was initially added on branch npax.
@
text
@d1 206
@


1.1.2.1
log
@pax.h needs <sys/stat.h> so pull this out
@
text
@a0 169
/*-
 * Copyright © 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
 *	       2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018
 *	mirabilos <m@@mirbsd.org>
 * Copyright © 2018
 *	mirabilos <t.glaser@@tarent.de>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un‐
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person’s immediate fault when using the work as intended.
 */

#ifndef PAX_COMPAT_H
#define PAX_COMPAT_H

#if HAVE_SYS_MKDEV_H
#include <sys/mkdev.h>
#endif
#if HAVE_SYS_SYSMACROS_H
#include <sys/sysmacros.h>
#endif
#if HAVE_STDINT_H
#include <stdint.h>
#endif

#undef __attribute__
#if HAVE_ATTRIBUTE_BOUNDED
#define MKSH_A_BOUNDED(x,y,z)	__attribute__((__bounded__(x, y, z)))
#else
#define MKSH_A_BOUNDED(x,y,z)	/* nothing */
#endif
#if HAVE_ATTRIBUTE_FORMAT
#define MKSH_A_FORMAT(x,y,z)	__attribute__((__format__(x, y, z)))
#else
#define MKSH_A_FORMAT(x,y,z)	/* nothing */
#endif
#if HAVE_ATTRIBUTE_NONNULL
#define MKSH_A_NONNULL(x)	__attribute__((__nonnull__(x)))
#else
#define MKSH_A_NONNULL(x)	/* nothing */
#endif
#if HAVE_ATTRIBUTE_NORETURN
#define MKSH_A_NORETURN		__attribute__((__noreturn__))
#else
#define MKSH_A_NORETURN		/* nothing */
#endif
#if HAVE_ATTRIBUTE_PURE
#define MKSH_A_PURE		__attribute__((__pure__))
#else
#define MKSH_A_PURE		/* nothing */
#endif
#if HAVE_ATTRIBUTE_UNUSED
#define MKSH_A_UNUSED		__attribute__((__unused__))
#else
#define MKSH_A_UNUSED		/* nothing */
#endif
#if HAVE_ATTRIBUTE_USED
#define MKSH_A_USED		__attribute__((__used__))
#else
#define MKSH_A_USED		/* nothing */
#endif

#if defined(MirBSD) && (MirBSD >= 0x09A1) && \
    defined(__ELF__) && defined(__GNUC__) && \
    !defined(__llvm__) && !defined(__NWCC__)
/*
 * We got usable __IDSTRING __COPYRIGHT __RCSID __SCCSID macros
 * which work for all cases; no need to redefine them using the
 * "portable" macros from below when we might have the "better"
 * gcc+ELF specific macros or other system dependent ones.
 */
#else
#undef __IDSTRING
#undef __IDSTRING_CONCAT
#undef __IDSTRING_EXPAND
#undef __COPYRIGHT
#undef __RCSID
#undef __SCCSID
#define __IDSTRING_CONCAT(l,p)		__LINTED__ ## l ## _ ## p
#define __IDSTRING_EXPAND(l,p)		__IDSTRING_CONCAT(l,p)
#ifdef MKSH_DONT_EMIT_IDSTRING
#define __IDSTRING(prefix, string)	/* nothing */
#else
#define __IDSTRING(prefix, string)				\
	static const char __IDSTRING_EXPAND(__LINE__,prefix) []	\
	    MKSH_A_USED = "@@(""#)" #prefix ": " string
#endif
#define __COPYRIGHT(x)		__IDSTRING(copyright,x)
#define __RCSID(x)		__IDSTRING(rcsid,x)
#define __SCCSID(x)		__IDSTRING(sccsid,x)
#endif

#ifdef EXTERN
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/pax.h,v 1.1.1.8.2.4 2018/12/12 04:01:21 tg Exp $");
#endif

/* arithmetic types: C implementation */
#if !HAVE_CAN_INTTYPES
#if !HAVE_CAN_UCBINTS
typedef signed int int32_t;
typedef unsigned int uint32_t;
#else
typedef u_int32_t uint32_t;
#endif
#endif
#if !HAVE_CAN_INT16TYPE
#if !HAVE_CAN_UCBINT16
typedef unsigned short int uint16_t;
#else
typedef u_int16_t uint16_t;
#endif
#endif

#ifdef MKSH_TYPEDEF_SSIZE_T
typedef MKSH_TYPEDEF_SSIZE_T ssize_t;
#endif

#if HAVE_ST_MTIM
#define st_atim_cmp(sbpa,sbpb,op) \
		timespeccmp(&(sbpa)->st_atim, &(sbpb)->st_atim, op)
#define st_ctim_cmp(sbpa,sbpb,op) \
		timespeccmp(&(sbpa)->st_ctim, &(sbpb)->st_ctim, op)
#define st_mtim_cmp(sbpa,sbpb,op) \
		timespeccmp(&(sbpa)->st_mtim, &(sbpb)->st_mtim, op)
#elif HAVE_ST_MTIMENSEC
#define st_atim_cmp(sbpa,sbpb,op) ( \
		((sbpa)->st_atime == (sbpb)->st_atime) ? \
		    ((sbpa)->st_atimensec op (sbpb)->st_atimensec) : \
		    ((sbpa)->st_atime op (sbpb)->st_atime) \
		)
#define st_ctim_cmp(sbpa,sbpb,op) ( \
		((sbpa)->st_ctime == (sbpb)->st_ctime) ? \
		    ((sbpa)->st_ctimensec op (sbpb)->st_ctimensec) : \
		    ((sbpa)->st_ctime op (sbpb)->st_ctime) \
		)
#define st_mtim_cmp(sbpa,sbpb,op) ( \
		((sbpa)->st_mtime == (sbpb)->st_mtime) ? \
		    ((sbpa)->st_mtimensec op (sbpb)->st_mtimensec) : \
		    ((sbpa)->st_mtime op (sbpb)->st_mtime) \
		)
#else
#define st_atim_cmp(sbpa,sbpb,op) \
		((sbpa)->st_atime op (sbpb)->st_atime)
#define st_ctim_cmp(sbpa,sbpb,op) \
		((sbpa)->st_ctime op (sbpb)->st_ctime)
#define st_mtim_cmp(sbpa,sbpb,op) \
		((sbpa)->st_mtime op (sbpb)->st_mtime)
#endif

/* compat.c */

#if !HAVE_DPRINTF
/* replacement only as powerful as needed for this */
void dprintf(int, const char *, ...)
    MKSH_A_FORMAT(__printf__, 2, 3);
#endif

#endif
@


1.1.2.2
log
@do extern.h, but we’ll have to do something about time values
@
text
@d105 1
a105 1
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.1.2.1 2018/12/12 04:04:48 tg Exp $");
a165 1
    MKSH_A_NONNULL(2)
a168 11
#if !HAVE_STRLCPY
size_t strlcat(char *, const char *, size_t)
    MKSH_A_BOUNDED(__string__, 1, 3);
size_t strlcpy(char *, const char *, size_t)
    MKSH_A_BOUNDED(__string__, 1, 3);
#endif

#if !HAVE_STRMODE
void strmode(mode_t, char *);
#endif

@


1.1.2.3
log
@use generic macros, to compensate a bit for this insanity
@
text
@d105 1
a105 1
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.1.2.2 2018/12/12 06:25:15 tg Exp $");
d130 6
a135 2
#define st_timecmp(x,sbpa,sbpb,op) \
	timespeccmp(&(sbpa)->st_ ## x ## tim, &(sbpb)->st_ ## x ## tim, op)
d137 15
a151 5
#define st_timecmp(x,sbpa,sbpb,op) ( \
	((sbpa)->st_ ## x ## time == (sbpb)->st_ ## x ## time) ? \
	    ((sbpa)->st_ ## x ## timensec op (sbpb)->st_ ## x ## timensec) : \
	    ((sbpa)->st_ ## x ## time op (sbpb)->st_ ## x ## time) \
	)
d153 6
a158 2
#define st_timecmp(x,sbpa,sbpb,op) \
	((sbpa)->st_ ## x ## time op (sbpb)->st_ ## x ## time)
@


1.1.2.4
log
@another macro to fight this Irrsinn
@
text
@d105 1
a105 1
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.1.2.3 2018/12/12 06:47:37 tg Exp $");
a131 3
#define st_timecpy(x,sbpd,sbps) do {					\
	(sbpd)->st_ ## x ## tim = (sbps)->st_ ## x ## tim;		\
} while (/* CONSTCOND */ 0)
a137 4
#define st_timecpy(x,sbpd,sbps) do {					\
	(sbpd)->st_ ## x ## time = (sbps)->st_ ## x ## time;		\
	(sbpd)->st_ ## x ## timensec = (sbps)->st_ ## x ## timensec;	\
} while (/* CONSTCOND */ 0)
a140 3
#define st_timecpy(x,sbpd,sbps) do {					\
	(sbpd)->st_ ## x ## time = (sbps)->st_ ## x ## time;		\
} while (/* CONSTCOND */ 0)
@


1.1.2.5
log
@fixup the chaos
@
text
@d105 1
a105 1
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.1.2.4 2018/12/12 06:53:12 tg Exp $");
a134 4
#define st_timexp(x,ts,sbp) do {					\
	(ts)->tv_sec = (sbp)->st_ ## x ## tim.tv_sec;			\
	(ts)->tv_nsec = (sbp)->st_ ## x ## tim.tv_nsec;			\
} while (/* CONSTCOND */ 0)
a144 4
#define st_timexp(x,ts,sbp) do {					\
	(ts)->tv_sec = (sbp)->st_ ## x ## time;				\
	(ts)->tv_nsec = (sbp)->st_ ## x ## timensec;			\
} while (/* CONSTCOND */ 0)
a149 4
#define st_timexp(x,ts,sbp) do {					\
	(ts)->tv_sec = (sbp)->st_ ## x ## time;				\
	(ts)->tv_nsec = 0;						\
} while (/* CONSTCOND */ 0)
@


1.1.2.6
log
@merge ‘g’ and switch to a global “now”
@
text
@d105 1
a105 1
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.1.2.5 2018/12/12 08:18:58 tg Exp $");
a173 4
#if !HAVE_REALLOCARRAY
void *reallocarray(void *, size_t, size_t);
#endif

@


1.1.2.7
log
@some more tweaks
@
text
@d105 1
a105 1
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.1.2.6 2018/12/12 09:08:56 tg Exp $");
a157 1
} while (/* CONSTCOND */ 0)
d162 1
@


1.1.2.8
log
@some more goodies
@
text
@d105 1
a105 1
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.1.2.7 2018/12/12 10:41:25 tg Exp $");
a166 3
ssize_t dwrite(int, const void *, size_t)
    MKSH_A_BOUNDED(__buffer__, 2, 3);

@


1.1.2.9
log
@solution for rare open flags, also uses O_BINARY like in mksh
@
text
@d105 1
a105 1
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.1.2.8 2018/12/12 14:32:27 tg Exp $");
a166 7
#define BO__TWO		0x01	/* (internal use only) */
#define BO_CLEXEC	0x02	/* set close-on-exec flag or warn */
#define BO_MAYBE_DIR	0x04	/* add O_DIRECTORY if defined */
#define binopen2(feat,path,flags) binopen3((feat) | BO__TWO, (path), (flags), 0)
int binopen3(int, const char *, int, mode_t)
    MKSH_A_NONNULL(2);

@


1.1.2.10
log
@drop last remaining vestiges of UCB int types
@
text
@d105 1
a105 1
__IDSTRING(rcsid_compat_h, "$MirOS: src/bin/pax/compat.h,v 1.1.2.9 2018/12/12 15:00:24 tg Exp $");
d108 1
a108 2
/* possibly missing types */

a128 6
#if !HAVE_CAN_ULONG
typedef unsigned long u_long;
#endif

/* macros dealing with struct stat.sb_[acm]time */

@


