head	1.24;
access;
symbols
	paxmirabilis-20190825:1.24
	paxmirabilis-20190224:1.24
	paxmirabilis-20190210:1.23
	npax:1.1.1.8.0.2
	cvs-20181212:1.1.1.8
	paxmirabilis-20171021:1.19
	paxmirabilis-20161104:1.17
	paxmirabilis-20161031:1.17
	paxmirabilis-20161025:1.17
	paxmirabilis-20160306:1.14
	cvs-201603041945:1.1.1.3
	paxmirabilis-20151013:1.12
	paxmirabilis-20140703:1.12
	paxmirabilis-20120606:1.12
	paxmirabilis-20120605:1.12
	cvs-201206051745:1.1.1.2
	paxmirabilis-20120520:1.12
	paxmirabilis-20120216:1.12
	paxmirabilis-20120212:1.10
	cvs-201202112230:1.1.1.2
	paxmirabilis-20110817:1.9
	MIRBSD_10:1.6.0.2
	MIRBSD_10_BASE:1.6
	cvs-200710231945:1.1.1.2
	cvs-200606232242:1.1.1.2
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200507211800:1.1.1.1
	cvs-200504291700:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2019.02.24.01.49.18;	author tg;	state Exp;
branches;
next	1.23;
commitid	1005C71F80D12F84641;

1.23
date	2019.02.10.21.50.08;	author tg;	state Exp;
branches;
next	1.22;
commitid	1005C609C8F43A9BDCB;

1.22
date	2018.12.13.07.09.11;	author tg;	state Exp;
branches;
next	1.21;
commitid	1005C1205A44B32AFA4;

1.21
date	2018.12.12.18.08.46;	author tg;	state Exp;
branches;
next	1.20;
commitid	1005C114EA81986F5EC;

1.20
date	2018.12.12.00.23.07;	author tg;	state Exp;
branches;
next	1.19;
commitid	1005C1054FE750D63F3;

1.19
date	2017.10.14.22.03.32;	author tg;	state Exp;
branches;
next	1.18;
commitid	10059E289C94A3ADF42;

1.18
date	2017.08.07.20.10.17;	author tg;	state Exp;
branches;
next	1.17;
commitid	1005988C69344442E37;

1.17
date	2016.10.25.19.04.26;	author tg;	state Exp;
branches;
next	1.16;
commitid	100580FACCE7785F0A8;

1.16
date	2016.10.25.18.57.56;	author tg;	state Exp;
branches;
next	1.15;
commitid	100580FAB4B20AD4FA2;

1.15
date	2016.03.12.20.53.12;	author tg;	state Exp;
branches;
next	1.14;
commitid	10056E481C030395179;

1.14
date	2016.03.06.14.12.28;	author tg;	state Exp;
branches;
next	1.13;
commitid	10056DC3ADA1858410D;

1.13
date	2016.03.06.13.47.50;	author tg;	state Exp;
branches;
next	1.12;
commitid	10056DC351700BAF310;

1.12
date	2012.02.16.17.27.32;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004F3D3C992B2187A1;

1.11
date	2012.02.16.17.11.46;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004F3D38626EFD0781;

1.10
date	2012.02.12.00.44.57;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004F370B9F1314ECC5;

1.9
date	2011.08.16.21.32.48;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004E4AE1EF00AF3003;

1.8
date	2011.08.16.13.57.14;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004E4A774D3CB07A5D;

1.7
date	2008.03.14.15.55.21;	author tg;	state Exp;
branches;
next	1.6;
commitid	10047DA9FD457B61B40;

1.6
date	2007.01.23.11.55.54;	author tg;	state Exp;
branches;
next	1.5;
commitid	10045B5F7D62388E117;

1.5
date	2007.01.17.16.25.40;	author tg;	state Exp;
branches;
next	1.4;
commitid	10045AE4DFA0EEDC1D2;

1.4
date	2006.06.23.23.03.57;	author tg;	state Exp;
branches;
next	1.3;
commitid	100449C736877C98FFB;

1.3
date	2005.11.16.14.27.28;	author tg;	state Exp;
branches;
next	1.2;
commitid	513b437b415971b7;

1.2
date	2005.04.13.20.03.35;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.22.06;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.22.06;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.23.23.00.16;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	100449C727D31170AA3;

1.1.1.3
date	2016.03.04.19.46.09;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	10056D9E61429EE6550;

1.1.1.4
date	2016.03.04.20.55.03;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10056D9F62E152ECBA5;

1.1.1.5
date	2016.03.06.13.29.55;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10056DC30960F3F5FA0;

1.1.1.6
date	2016.10.25.18.46.11;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	100580FA88137705D31;

1.1.1.7
date	2018.12.12.00.15.07;	author tg;	state Exp;
branches;
next	1.1.1.8;
commitid	1005C1052FA5E745A2C;

1.1.1.8
date	2018.12.12.00.24.23;	author tg;	state Exp;
branches
	1.1.1.8.2.1;
next	;
commitid	1005C1055452C78F9E4;

1.1.1.8.2.1
date	2018.12.12.00.53.00;	author tg;	state Exp;
branches;
next	1.1.1.8.2.2;
commitid	1005C105BC86262A0B7;

1.1.1.8.2.2
date	2018.12.12.01.05.52;	author tg;	state Exp;
branches;
next	1.1.1.8.2.3;
commitid	1005C105F03799CC958;

1.1.1.8.2.3
date	2018.12.12.03.13.34;	author tg;	state Exp;
branches;
next	1.1.1.8.2.4;
commitid	1005C107CE315DC51F3;

1.1.1.8.2.4
date	2018.12.12.04.01.21;	author tg;	state Exp;
branches;
next	1.1.1.8.2.5;
commitid	1005C108824649A94FE;

1.1.1.8.2.5
date	2018.12.12.04.04.49;	author tg;	state Exp;
branches;
next	1.1.1.8.2.6;
commitid	1005C1088F174324DE8;

1.1.1.8.2.6
date	2018.12.12.06.03.14;	author tg;	state Exp;
branches;
next	1.1.1.8.2.7;
commitid	1005C10A4B12E5998CE;

1.1.1.8.2.7
date	2018.12.12.06.44.40;	author tg;	state Exp;
branches;
next	1.1.1.8.2.8;
commitid	1005C10AE69584968B6;

1.1.1.8.2.8
date	2018.12.12.08.48.15;	author tg;	state Exp;
branches;
next	1.1.1.8.2.9;
commitid	1005C10CB641D052FC1;

1.1.1.8.2.9
date	2018.12.12.10.41.27;	author tg;	state Exp;
branches;
next	1.1.1.8.2.10;
commitid	1005C10E5E87909E6FC;

1.1.1.8.2.10
date	2018.12.12.12.43.15;	author tg;	state Exp;
branches;
next	1.1.1.8.2.11;
commitid	1005C1102747A3732E3;

1.1.1.8.2.11
date	2018.12.12.13.21.35;	author tg;	state Exp;
branches;
next	;
commitid	1005C110B68691D809E;


desc
@@


1.24
log
@deprecate some old earliest MirCPIO extensions:

• tar -R and -S (also dedocumented)
• the dist, v4norm, v4root formats (which already were undocumented)

but indicate in tar(1) that YMMV
@
text
@/*	$OpenBSD: pax.h,v 1.29 2017/09/12 17:11:11 otto Exp $	*/
/*	$NetBSD: pax.h,v 1.3 1995/03/21 09:07:41 cgd Exp $	*/

/*-
 * Copyright (c) 2006, 2009, 2011, 2012, 2016, 2017, 2019
 *	mirabilos <m@@mirbsd.org>
 * Copyright (c) 1992 Keith Muller.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Keith Muller of the University of California, San Diego.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)pax.h	8.2 (Berkeley) 4/18/94
 */

#include "compat.h"

#ifdef EXTERN
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/pax/pax.h,v 1.22 2018/12/13 07:09:11 tg Exp $");
#endif

/*
 * BSD PAX global data structures and constants.
 */

#define	MAXBLK		64512	/* MAX blocksize supported (posix SPEC) */
				/* WARNING: increasing MAXBLK past 32256 */
				/* will violate posix spec. */
#define	MAXBLK_POSIX	32256	/* MAX blocksize supported as per POSIX */
#define BLKMULT		512	/* blocksize must be even mult of 512 bytes */
				/* Don't even think of changing this */
#define DEVBLK		8192	/* default read blksize for devices */
#define FILEBLK		10240	/* default read blksize for files */
#define PAXPATHLEN	3072	/* maximum path length for pax. MUST be */
				/* longer than the system PATH_MAX */

/*
 * pax modes of operation
 */
#define ERROR		-1	/* nothing selected */
#define	LIST		0	/* List the file in an archive */
#define	EXTRACT		1	/* extract the files in an archive */
#define ARCHIVE		2	/* write a new archive */
#define APPND		3	/* append to the end of an archive */
#define	COPY		4	/* copy files to destination dir */

/*
 * Device type of the current archive volume
 */
#define ISREG		0	/* regular file */
#define ISCHR		1	/* character device */
#define ISBLK		2	/* block device */
#define ISTAPE		3	/* tape drive */
#define ISPIPE		4	/* pipe/socket */

/*
 * Pattern matching structure
 *
 * Used to store command line patterns
 */
typedef struct pattern {
	char		*pstr;		/* pattern to match, user supplied */
	char		*pend;		/* end of a prefix match */
	char		*chdname;	/* the dir to change to if not NULL.  */
	size_t		plen;		/* length of pstr */
	int		flgs;		/* processing/state flags */
#define MTCH		0x1		/* pattern has been matched */
#define DIR_MTCH	0x2		/* pattern matched a directory */
	struct pattern	*fow;		/* next pattern */
} PATTERN;

/*
 * General Archive Structure (used internal to pax)
 *
 * This structure is used to pass information about archive members between
 * the format independent routines and the format specific routines. When
 * new archive formats are added, they must accept requests and supply info
 * encoded in a structure of this type. The name fields are declared statically
 * here, as there is only ONE of these floating around, size is not a major
 * consideration. Eventually converting the name fields to a dynamic length
 * may be required if and when the supporting operating system removes all
 * restrictions on the length of pathnames it will resolve.
 */
typedef struct {
	int nlen;			/* file name length */
	char name[PAXPATHLEN+1];	/* file name */
	int ln_nlen;			/* link name length */
	char ln_name[PAXPATHLEN+1];	/* name to link to (if any) */
	char *org_name;			/* orig name in filesystem */
	PATTERN *pat;			/* ptr to pattern match (if any) */
	struct stat sb;			/* stat buffer see stat(2) */
	off_t pad;			/* bytes of padding after file xfer */
	off_t skip;			/* bytes of real data after header */
					/* IMPORTANT. The st_size field does */
					/* not always indicate the amount of */
					/* data following the header. */
	uint32_t crc;			/* file crc */
	int type;			/* type of file node */
#define PAX_DIR		1		/* directory */
#define PAX_CHR		2		/* character device */
#define PAX_BLK		3		/* block device */
#define PAX_REG		4		/* regular file */
#define PAX_SLK		5		/* symbolic link */
#define PAX_SCK		6		/* socket */
#define PAX_FIF		7		/* FIFO */
#define PAX_HLK		8		/* hard link */
#define PAX_HRG		9		/* hard link to a regular file */
#define PAX_CTG		10		/* high performance file */
#define PAX_GLL		11		/* GNU long symlink */
#define PAX_GLF		12		/* GNU long file */
#define PAX_LINKOR	0x80000000	/* hard link detection OR */
} ARCHD;

#define PAX_IS_REG(type)	((type) == PAX_REG || (type) == PAX_CTG)
#define PAX_IS_HARDLINK(type)	((type) == PAX_HLK || (type) == PAX_HRG)
#define PAX_IS_LINK(type)	((type) == PAX_SLK || PAX_IS_HARDLINK(type))

/*
 * Format Specific Routine Table
 *
 * The format specific routine table allows new archive formats to be quickly
 * added. Overall pax operation is independent of the actual format used to
 * form the archive. Only those routines which deal directly with the archive
 * are tailored to the oddities of the specific format. All other routines are
 * independent of the archive format. Data flow in and out of the format
 * dependent routines pass pointers to ARCHD structure (described below).
 */
typedef struct {
	const char *name;	/* name of format, this is the name the user */
				/* gives to -x option to select it. */
	int bsz;		/* default block size. used when the user */
				/* does not specify a blocksize for writing */
				/* Appends continue to with the blocksize */
				/* the archive is currently using. */
	unsigned short hsz;	/* Header size in bytes. this is the size of */
				/* the smallest header this format supports. */
				/* Headers are assumed to fit in a BLKMULT. */
				/* If they are bigger, get_head() and */
				/* get_arc() must be adjusted */
	char udev;		/* does append require unique dev/ino? some */
				/* formats use the device and inode fields */
				/* to specify hard links. when members in */
				/* the archive have the same inode/dev they */
				/* are assumed to be hard links. During */
				/* append we may have to generate unique ids */
				/* to avoid creating incorrect hard links */
	char hlk;		/* does archive store hard links info? if */
				/* not, we do not bother to look for them */
				/* during archive write operations */
	int blkalgn;		/* writes must be aligned to blkalgn boundary */
	int (*id)(char *,	/* checks if a buffer is a valid header */
	    int);		/* returns 1 if it is, o.w. returns a 0 */
	int (*st_rd)(void);	/* initialise routine for read. so format */
				/* can set up tables etc before it starts */
				/* reading an archive */
	int (*rd)(ARCHD *,	/* read header routine. passed a pointer to */
	    char *);		/* ARCHD. It must extract the info from the */
				/* format and store it in the ARCHD struct. */
				/* This routine is expected to fill all the */
				/* fields in the ARCHD (including stat buf) */
				/* 0 is returned when a valid header is */
				/* found. -1 when not valid. This routine */
				/* set the skip and pad fields so the format */
				/* independent routines know the amount of */
				/* padding and the number of bytes of data */
				/* which follow the header. This info is */
				/* used skip to the next file header */
	off_t (*end_rd)(void);	/* read cleanup. Allows format to clean up */
				/* and MUST RETURN THE LENGTH OF THE TRAILER */
				/* RECORD (so append knows how many bytes */
				/* to move back to rewrite the trailer) */
	int (*st_wr)(int);	/* initialise routine for write operations */
	int (*wr)(ARCHD *);	/* write archive header. Passed an ARCHD */
				/* filled with the specs on the next file to */
				/* archived. Returns a 1 if no file data is */
				/* is to be stored; 0 if file data is to be */
				/* added. A -1 is returned if a write */
				/* operation to the archive failed. this */
				/* function sets the skip and pad fields so */
				/* the proper padding can be added after */
				/* file data. This routine must NEVER write */
				/* a flawed archive header. */
	int (*end_wr)(void);	/* end write. write the trailer and do any */
				/* other format specific functions needed */
				/* at the end of an archive write */
	int (*trail)(ARCHD *,	/* returns 0 if a valid trailer, -1 if not */
	    char *, int,	/* For formats which encode the trailer */
	    int *);		/* outside of a valid header, a return value */
				/* of 1 indicates that the block passed to */
				/* it can never contain a valid header (skip */
				/* this block, no point in looking at it)  */
				/* CAUTION: parameters to this function are */
				/* different for trailers inside or outside */
				/* of headers. See get_head() for details */
	int (*rd_data)(ARCHD *,	/* read/process file data from the archive */
	    int, off_t *);
	int (*wr_data)(ARCHD *,	/* write/process file data to the archive */
	    int, off_t *);
	int (*options)(void);	/* process format specific options (-o) */
	char inhead;		/* is the trailer encoded in a valid header? */
				/* if not, trailers are assumed to be found */
				/* in invalid headers (i.e like tar) */
	char is_uar;		/* is Unix Archiver (sequential, no trailer) */
} FSUB;

/*
 * Format Specific Options List
 *
 * Used to pass format options to the format options handler
 */
typedef struct oplist {
	char		*name;		/* option variable name e.g. name= */
	char		*value;		/* value for option variable */
	struct oplist	*fow;		/* next option */
} OPLIST;

/*
 * Archive manipulation code
 */

#define	ANON_INODES	0x0001
#define	ANON_HARDLINKS	0x0002
#define	ANON_MTIME	0x0004
#define	ANON_UIDGID	0x0008
#define	ANON_VERBOSE	0x0010
#define	ANON_DEBUG	0x0020
#define	ANON_LNCP	0x0040
#define	ANON_NUMID	0x0080
#define	ANON_DIRSLASH	0x0100
#define	ANON_MAXVAL	0x01FF

/* format table, see FSUB fsub[] in options.c */

enum fsub_order {
#ifndef SMALL
	FSUB_AR,
	FSUB_BCPIO,
#endif
	FSUB_CPIO,
#ifndef SMALL
	FSUB_DIST,
#endif
	FSUB_SV4CPIO,
	FSUB_SV4CRC,
#ifndef SMALL
	FSUB_TAR,
#endif
	FSUB_USTAR,
#ifndef SMALL
	FSUB_V4NORM,
	FSUB_V4ROOT,
	FSUBFAIL_Z,
	FSUBFAIL_XZ,
	FSUBFAIL_BZ2,
	FSUBFAIL_GZ,
#endif
	FSUB_MAX
};

/*
 * General Macros
 */
#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))
#define MAJOR(x)	major(x)
#define MINOR(x)	minor(x)
#ifdef __INTERIX
#define TODEV		mkdev
#else
#define TODEV		makedev
#endif

#define FILEBITS	(S_ISVTX | S_IRWXU | S_IRWXG | S_IRWXO)
#define SETBITS		(S_ISUID | S_ISGID)
#define ABITS		(FILEBITS | SETBITS)

/*
 * General Defines
 */
#define HEX		16
#define OCT		8
#define _PAX_		1
#define _TFILE_BASE	"paxXXXXXXXXXX"
#if HAVE_TIMET_LONG
#define MAX_TIME_T	LONG_MAX
#else
#define MAX_TIME_T	LLONG_MAX
#endif
@


1.23
log
@port to Debian sid/{amd64,i386,hurd-i386,x32}, {stretch,jessie}/{amd64,i386}
@
text
@d265 1
d267 1
d274 1
a276 1
#ifndef SMALL
@


1.22
log
@fixing and string pooling and int shortening offensive
@
text
@d5 1
a5 1
 * Copyright (c) 2006, 2009, 2011, 2012, 2016, 2017
d44 1
a44 1
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/pax/pax.h,v 1.21 2018/12/12 18:08:46 tg Exp $");
d306 3
a308 1
#if HAVE_TIMET_LLONG
a309 2
#else
#define MAX_TIME_T	LONG_MAX
@


1.21
log
@merge the npax branch into MAIN

asides from a missing dprintf and portability, this ought to be
good enough for people (well me) to play with for now
@
text
@d44 1
a44 1
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/pax/pax.h,v 1.1.1.8.2.11 2018/12/12 13:21:35 tg Exp $");
d130 1
a130 1
#define PAX_FIF		7		/* fifo */
d160 1
a160 1
	int hsz;		/* Header size in bytes. this is the size of */
d165 1
a165 1
	int udev;		/* does append require unique dev/ino? some */
d172 1
a172 1
	int hlk;		/* does archive store hard links info? if */
a175 3
	int inhead;		/* is the trailer encoded in a valid header? */
				/* if not, trailers are assumed to be found */
				/* in invalid headers (i.e like tar) */
d225 3
@


1.20
log
@slowmerge (untested though)
@
text
@d5 1
a5 1
 * Copyright (c) 2011, 2012, 2016, 2017
d41 5
a45 2
#ifndef MIRCPIO_PAX_H
#define MIRCPIO_PAX_H "$MirOS: src/bin/pax/pax.h,v 1.19 2017/10/14 22:03:32 tg Exp $"
d60 1
a60 1
				/* longer than the system MAXPATHLEN */
d122 1
a122 1
	u_int32_t crc;			/* file crc */
d139 4
a231 14
 * Time data for a given file.  This is usually embedded in a structure
 * indexed by dev+ino, by name, by order in the archive, etc.  set_attr()
 * takes one of these and will only change the times or mode if the file
 * at the given name has the indicated dev+ino.
 */
struct file_times {
	ino_t	ft_ino;		/* inode number to verify */
	time_t	ft_mtime;	/* times to set */
	time_t	ft_atime;
	char	*ft_name;	/* name of file to set the times on */
	dev_t	ft_dev;		/* device number to verify */
};

/*
d243 1
a243 1
 * General Macros
d245 18
a262 2
#ifndef MIN
#define MIN(a,b)	(((a)<(b))?(a):(b))
d264 6
a269 2
#ifdef __INTERIX
#include <sys/mkdev.h>
d271 8
a278 2
#ifdef HAVE_SYS_SYSMACROS_H
#include <sys/sysmacros.h>
d280 7
d295 3
a297 39
#if !defined(__INTERIX) && !defined(__APPLE__)
#define HAS_TAPE	1
#else
#define HAS_TAPE	0
#endif

#if defined(MirBSD) && (MirBSD >= 0x09A1) && \
    defined(__ELF__) && defined(__GNUC__) && \
    !defined(__llvm__) && !defined(__NWCC__)
/*
 * We got usable __IDSTRING __COPYRIGHT __RCSID __SCCSID macros
 * which work for all cases; no need to redefine them using the
 * "portable" macros from below when we might have the "better"
 * gcc+ELF specific macros or other system dependent ones.
 */
#else
#undef __IDSTRING
#undef __IDSTRING_CONCAT
#undef __IDSTRING_EXPAND
#undef __COPYRIGHT
#undef __RCSID
#undef __SCCSID
#define __IDSTRING_CONCAT(l,p)		__LINTED__ ## l ## _ ## p
#define __IDSTRING_EXPAND(l,p)		__IDSTRING_CONCAT(l,p)
#ifdef MKSH_DONT_EMIT_IDSTRING
#define __IDSTRING(prefix, string)	/* nothing */
#else
#define __IDSTRING(prefix, string)				\
	static const char __IDSTRING_EXPAND(__LINE__,prefix) []	\
	    __attribute__((__used__)) = "@@(""#)" #prefix ": " string
#endif
#define __COPYRIGHT(x)		__IDSTRING(copyright,x)
#define __RCSID(x)		__IDSTRING(rcsid,x)
#define __SCCSID(x)		__IDSTRING(sccsid,x)
#endif

#define FILEBITS		(S_ISVTX | S_IRWXU | S_IRWXG | S_IRWXO)
#define SETBITS			(S_ISUID | S_ISGID)
#define ABITS			(FILEBITS | SETBITS)
d306 2
a307 6
#define MAX_TIME_T	(sizeof(time_t) == sizeof(long long) ? \
			    LLONG_MAX : INT_MAX)

#ifndef LONG_OFF_T
#define OT_FMT		"llu"
typedef unsigned long long ot_type;
d309 1
a309 6
#define OT_FMT		"lu"
typedef unsigned long ot_type;
#endif

void sig_cleanup(int) __attribute__((__noreturn__));

@


1.19
log
@prevent an entire class of errors: integer overflow in rd_skip() arg

Reported as: Debian #878512

Turns out that “rd_skip(arcn->skip + arcn->pad);” is often called
without checking for negative (error) return, or even throwing away
the result entirely (õÕ) and is called often enough that checking
before calling would be tremendous effort, and to split it up à la
calloc() is certainly another option but this catches it good enough.
We (ab|re)use the signal handler exit function to do some cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: pax.h,v 1.17 +1.28 2005/11/09 19:59:06 otto Exp $	*/
d42 1
a42 1
#define MIRCPIO_PAX_H "$MirOS: src/bin/pax/pax.h,v 1.18 2017/08/07 20:10:17 tg Exp $"
d316 2
@


1.18
log
@filesystem
@
text
@d5 1
a5 1
 * Copyright (c) 2011, 2012, 2016
d42 1
a42 1
#define MIRCPIO_PAX_H "$MirOS: src/bin/pax/pax.h,v 1.17 2016/10/25 19:04:26 tg Exp $"
d325 2
@


1.17
log
@remove all <tzfile.h> remains
@
text
@d42 1
a42 1
#define MIRCPIO_PAX_H "$MirOS: src/bin/pax/pax.h,v 1.16 2016/10/25 18:57:56 tg Exp $"
d111 1
a111 1
	char *org_name;			/* orig name in file system */
@


1.16
log
@fastmerge
@
text
@d42 1
a42 1
#define MIRCPIO_PAX_H "$MirOS: src/bin/pax/pax.h,v 1.15 2016/03/12 20:53:12 tg Exp $"
a316 9
/* copied from <tzfile.h> */
#define SECSPERMIN	60
#define MINSPERHOUR	60
#define HOURSPERDAY	24
#define DAYSPERNYEAR	365
#define SECSPERHOUR	(SECSPERMIN * MINSPERHOUR)
#define SECSPERDAY	((long)SECSPERHOUR * HOURSPERDAY)
#define TM_YEAR_BASE	1900

@


1.15
log
@SpanKY (gentoo-dev) requests <sys/sysmacros.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: pax.h,v 1.17 2005/11/09 19:59:06 otto Exp $	*/
d42 1
a42 1
#define MIRCPIO_PAX_H "$MirOS: src/bin/pax/pax.h,v 1.14 2016/03/06 14:12:28 tg Exp $"
d87 1
a87 1
	int		plen;		/* length of pstr */
@


1.14
log
@version the *.h files as idstrings, too
@
text
@d42 1
a42 1
#define MIRCPIO_PAX_H "$MirOS$"
d258 3
@


1.13
log
@merge CVE fixes from openbsd branch
@
text
@a0 1
/**	$MirOS: src/bin/pax/pax.h,v 1.11 2012/02/16 17:11:46 tg Exp $ */
d5 1
a5 1
 * Copyright (c) 2011, 2012
d41 3
d330 2
@


1.12
log
@clean up some ugliness
@
text
@d7 1
a7 1
 *	Thorsten Glaser <tg@@debian.org>
d223 14
d300 4
@


1.11
log
@Debian GNU/kFreeBSD can be more difficult to deal with than GNU/Hurd at times.

• switch from quad_t to using unsigned long / unsigned long long
• sanitise use of off_t-relevant types
• cast when printing off_t; use a once-defined type and format specifier
• convert “This define is important” into actual compile-time assertion
• simplify ifdef mess by always defining off_t specific routines
  instead of reusing those for long if off_t is just long
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/pax/pax.h,v 1.10 2012/02/12 00:44:57 tg Exp $ */
d58 1
a58 1
 * Pax modes of operation
@


1.10
log
@spelling
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/pax/pax.h,v 1.9 2011/08/16 21:32:48 tg Exp $ */
d6 2
a7 1
 * Copyright (c) 2011 Thorsten Glaser.
d300 1
a300 1
#define SECSPERDAY	((long) SECSPERHOUR * HOURSPERDAY)
d302 8
@


1.9
log
@backend for Unix Archiver libraries – ar(5) and deb(5) format files
(since GNU binutils on ELF systems thinks SYSV style ar is used…)
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/pax/pax.h,v 1.8 2011/08/16 13:57:14 tg Exp $ */
d171 1
a171 1
	int (*st_rd)(void);	/* initialize routine for read. so format */
d190 1
a190 1
	int (*st_wr)(int);	/* initialize routine for write operations */
@


1.8
log
@portability overhaul
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/pax/pax.h,v 1.7 2008/03/14 15:55:21 tg Exp $ */
d190 1
a190 1
	int (*st_wr)(void);	/* initialize routine for write operations */
d218 1
@


1.7
log
@remove dependency on <tzfile.h> for portable MirCpio

while I don't think the number of seconds per hour is ever going to
change, and preprocessor definitions for that are pointless, I keep
them because BSD policy is to not have magic numbers all over the code
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/pax/pax.h,v 1.6 2007/01/23 11:55:54 tg Exp $ */
d6 1
d235 1
a235 1
#define	MIN(a,b) (((a)<(b))?(a):(b))
d243 1
a243 1
#define	TODEV(x, y)	mkdev((x), (y))
d245 37
a281 1
#define TODEV(x, y)	makedev((x), (y))
@


1.6
log
@fix DEFOP vs ERROR botch when merging from TNF
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/pax/pax.h,v 1.5 2007/01/17 16:25:40 tg Exp $ */
d254 9
@


1.5
log
@  * The flags "crtux" are mutually exclusive for tar.
  * The flags "ipt" and "oA" are mutually exclusive for cpio.
(from NetBSD® PR#35432)
  * fix some const warnings
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/pax/pax.h,v 1.4 2006/06/23 23:03:57 tg Exp $ */
a63 1
#define DEFOP		LIST	/* if no flags default is to LIST */
@


1.4
log
@merge the OpenBSD import (bugfix)
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/pax/pax.h,v 1.3 2005/11/16 14:27:28 tg Exp $ */
d58 1
d144 1
a144 1
	char *name;		/* name of format, this is the name the user */
@


1.3
log
@In my new formats (v4norm and v4root), do *not* store the file contents
of files which are hard links twice - instead, hard links' file sizes
are set to 0. This goes along with forward link table creation, and
sort of clones the chk_lnk behaviour for tar/ustar but differently
(including inode number anonymisation).

This does not matter because on extraction, no file is written, instead
a hard link is created. If hard links are on different filesystems during
extraction, an error is generated and no file is being written - same as
with regular cpio/sv4cpio/sv4crc.

This change does not affect the other file formats, because I do not
have access to the SV4CPIO and POSIX CPIO specifications, respectively
cannot easily see whether it breaks the specs.

WFM.
@
text
@d1 2
a2 2
/**	$MirOS: src/bin/pax/pax.h,v 1.2 2005/04/13 20:03:35 tg Exp $ */
/*	$OpenBSD: pax.h,v 1.16 2003/10/20 06:22:27 jmc Exp $	*/
d115 1
a115 1
	u_long crc;			/* file crc */
@


1.2
log
@these are the compile time fixes
this commit message provided by interix ;)
@
text
@d1 1
a1 1
/**	$MirOS$ */
d129 1
@


1.1
log
@Initial revision
@
text
@d1 1
d235 3
d240 3
d244 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@One "miserable" byte in filenames is worth an import

agreed bsiegert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pax.h,v 1.17 2005/11/09 19:59:06 otto Exp $	*/
d114 1
a114 1
	u_int32_t crc;			/* file crc */
@


1.1.1.3
log
@pull newer paxtar from OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: pax.h,v 1.28 2015/11/17 19:01:34 mmcc Exp $	*/
d52 1
a52 1
				/* longer than the system PATH_MAX */
d82 1
a82 1
	size_t		plen;		/* length of pstr */
a129 4
#define PAX_IS_REG(type)	((type) == PAX_REG || (type) == PAX_CTG)
#define PAX_IS_HARDLINK(type)	((type) == PAX_HLK || (type) == PAX_HRG)
#define PAX_IS_LINK(type)	((type) == PAX_SLK || PAX_IS_HARDLINK(type))

d210 4
a217 14
 * Time data for a given file.  This is usually embedded in a structure
 * indexed by dev+ino, by name, by order in the archive, etc.  set_attr()
 * takes one of these and will only change the times or mode if the file
 * at the given name has the indicated dev+ino.
 */
struct file_times {
	ino_t	ft_ino;			/* inode number to verify */
	struct	timespec ft_mtim;	/* times to set */
	struct	timespec ft_atim;
	char	*ft_name;		/* name of file to set the times on */
	dev_t	ft_dev;			/* device number to verify */
};

/*
d231 3
a233 1
#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))
a237 4
#define FILEBITS		(S_ISVTX | S_IRWXU | S_IRWXG | S_IRWXO)
#define SETBITS			(S_ISUID | S_ISGID)
#define ABITS			(FILEBITS | SETBITS)

@


1.1.1.4
log
@revert the import; we’ll just backport the CVE fixes, for now ☹
@
text
@d1 1
a1 1
/*	$OpenBSD: pax.h,v 1.17 2005/11/09 19:59:06 otto Exp $	*/
d52 1
a52 1
				/* longer than the system MAXPATHLEN */
d82 1
a82 1
	int		plen;		/* length of pstr */
d130 4
a213 4
	int (*rd_data)(ARCHD *,	/* read/process file data from the archive */
	    int, off_t *);
	int (*wr_data)(ARCHD *,	/* write/process file data to the archive */
	    int, off_t *);
d218 14
d245 1
a245 3
#ifndef MIN
#define	MIN(a,b) (((a)<(b))?(a):(b))
#endif
d250 4
@


1.1.1.5
log
@backport OpenBSD pax erratum, more specifically:

• directory bug, symlinks with -C bug
• escaping with .. and symlinks
• tar without -P
• validate directories touched in the cleanup phase
@
text
@a217 14
 * Time data for a given file.  This is usually embedded in a structure
 * indexed by dev+ino, by name, by order in the archive, etc.  set_attr()
 * takes one of these and will only change the times or mode if the file
 * at the given name has the indicated dev+ino.
 */
struct file_times {
	ino_t	ft_ino;		/* inode number to verify */
	time_t	ft_mtime;	/* times to set */
	time_t	ft_atime;
	char	*ft_name;	/* name of file to set the times on */
	dev_t	ft_dev;		/* device number to verify */
};

/*
a237 4
#define FILEBITS		(S_ISVTX | S_IRWXU | S_IRWXG | S_IRWXO)
#define SETBITS			(S_ISUID | S_ISGID)
#define ABITS			(FILEBITS | SETBITS)

@


1.1.1.6
log
@bunch of cherry-picks from OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: pax.h,v 1.17 +1.28 2005/11/09 19:59:06 otto Exp $	*/
d82 1
a82 1
	size_t		plen;		/* length of pstr */
@


1.1.1.7
log
@merge what OpenBSD did between our last cherry-pick and today minus one commit

(“Use the new libc uid_from_user() and gid_from_group() instead of
  the pax-specific functions in cache.c” is ignored, for now)
@
text
@d1 1
a1 1
/*	$OpenBSD: pax.h,v 1.29 2017/09/12 17:11:11 otto Exp $	*/
a262 2
#define MAX_TIME_T	(sizeof(time_t) == sizeof(long long) ? \
			    LLONG_MAX : INT_MAX)
@


1.1.1.8
log
@Import latest OpenBSD paxtar, unmodified, into vendor branch
@
text
@d52 1
a52 1
				/* longer than the system PATH_MAX */
a129 4
#define PAX_IS_REG(type)	((type) == PAX_REG || (type) == PAX_CTG)
#define PAX_IS_HARDLINK(type)	((type) == PAX_HLK || (type) == PAX_HRG)
#define PAX_IS_LINK(type)	((type) == PAX_SLK || PAX_IS_HARDLINK(type))

d210 4
d224 5
a228 5
	ino_t	ft_ino;			/* inode number to verify */
	struct	timespec ft_mtim;	/* times to set */
	struct	timespec ft_atim;
	char	*ft_name;		/* name of file to set the times on */
	dev_t	ft_dev;			/* device number to verify */
d245 3
a247 1
#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))
@


1.1.1.8.2.1
log
@Wrangle the OpenBSD branch into shape as starting point:

• Revert “Use the new libc uid_from_user() and gid_from_group()
  instead of the pax-specific functions in cache.c” (revisit later)
• fix MAX_TIME_T (plain wrong), mirtoconf later
• drop all NOCPIO
• Revert “Replace name_{uid,gid}() with the libc routines
  user_from_uid() and group_from_gid()”
@
text
@d262 1
a262 1
			    LLONG_MAX : LONG_MAX)
@


1.1.1.8.2.2
log
@a little KNF: sort the includes
@
text
@d250 3
a252 3
#define FILEBITS	(S_ISVTX | S_IRWXU | S_IRWXG | S_IRWXO)
#define SETBITS		(S_ISUID | S_ISGID)
#define ABITS		(FILEBITS | SETBITS)
@


1.1.1.8.2.3
log
@extremely rudimentary conversion to mirtoconf, doesn’t even build yet
@
text
@a4 24
 * Copyright © 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
 *	       2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018
 *	mirabilos <m@@mirbsd.org>
 * Copyright © 2018
 *	mirabilos <t.glaser@@tarent.de>
 * The UCB copyright below is considered part of this notice.
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un‐
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person’s immediate fault when using the work as intended.
 */

/*-
a38 110
#if HAVE_SYS_MKDEV_H
#include <sys/mkdev.h>
#endif
#if HAVE_SYS_SYSMACROS_H
#include <sys/sysmacros.h>
#endif
#if HAVE_STDINT_H
#include <stdint.h>
#endif

#undef __attribute__
#if HAVE_ATTRIBUTE_BOUNDED
#define MKSH_A_BOUNDED(x,y,z)	__attribute__((__bounded__(x, y, z)))
#else
#define MKSH_A_BOUNDED(x,y,z)	/* nothing */
#endif
#if HAVE_ATTRIBUTE_FORMAT
#define MKSH_A_FORMAT(x,y,z)	__attribute__((__format__(x, y, z)))
#else
#define MKSH_A_FORMAT(x,y,z)	/* nothing */
#endif
#if HAVE_ATTRIBUTE_NONNULL
#define MKSH_A_NONNULL(x)	__attribute__((__nonnull__(x)))
#else
#define MKSH_A_NONNULL(x)	/* nothing */
#endif
#if HAVE_ATTRIBUTE_NORETURN
#define MKSH_A_NORETURN		__attribute__((__noreturn__))
#else
#define MKSH_A_NORETURN		/* nothing */
#endif
#if HAVE_ATTRIBUTE_PURE
#define MKSH_A_PURE		__attribute__((__pure__))
#else
#define MKSH_A_PURE		/* nothing */
#endif
#if HAVE_ATTRIBUTE_UNUSED
#define MKSH_A_UNUSED		__attribute__((__unused__))
#else
#define MKSH_A_UNUSED		/* nothing */
#endif
#if HAVE_ATTRIBUTE_USED
#define MKSH_A_USED		__attribute__((__used__))
#else
#define MKSH_A_USED		/* nothing */
#endif

#if defined(MirBSD) && (MirBSD >= 0x09A1) && \
    defined(__ELF__) && defined(__GNUC__) && \
    !defined(__llvm__) && !defined(__NWCC__)
/*
 * We got usable __IDSTRING __COPYRIGHT __RCSID __SCCSID macros
 * which work for all cases; no need to redefine them using the
 * "portable" macros from below when we might have the "better"
 * gcc+ELF specific macros or other system dependent ones.
 */
#else
#undef __IDSTRING
#undef __IDSTRING_CONCAT
#undef __IDSTRING_EXPAND
#undef __COPYRIGHT
#undef __RCSID
#undef __SCCSID
#define __IDSTRING_CONCAT(l,p)		__LINTED__ ## l ## _ ## p
#define __IDSTRING_EXPAND(l,p)		__IDSTRING_CONCAT(l,p)
#ifdef MKSH_DONT_EMIT_IDSTRING
#define __IDSTRING(prefix, string)	/* nothing */
#else
#define __IDSTRING(prefix, string)				\
	static const char __IDSTRING_EXPAND(__LINE__,prefix) []	\
	    MKSH_A_USED = "@@(""#)" #prefix ": " string
#endif
#define __COPYRIGHT(x)		__IDSTRING(copyright,x)
#define __RCSID(x)		__IDSTRING(rcsid,x)
#define __SCCSID(x)		__IDSTRING(sccsid,x)
#endif

#ifdef EXTERN
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/mksh/sh.h,v 1.868 2018/12/04 21:13:47 tg Exp $");
#endif

/* arithmetic types: C implementation */
#if !HAVE_CAN_INTTYPES
#if !HAVE_CAN_UCBINTS
typedef signed int int32_t;
typedef unsigned int uint32_t;
#else
typedef u_int32_t uint32_t;
#endif
#endif
#if !HAVE_CAN_INT16TYPE
#if !HAVE_CAN_UCBINT16
typedef unsigned short int uint16_t;
#else
typedef u_int16_t uint16_t;
#endif
#endif

#ifdef MKSH_TYPEDEF_SSIZE_T
typedef MKSH_TYPEDEF_SSIZE_T ssize_t;
#endif

/* compat.c */

#if !HAVE_DPRINTF
/* replacement only as powerful as needed for this */
void dprintf(int, const char *, ...)
    MKSH_A_FORMAT(__printf__, 2, 3);
#endif

d114 1
a114 1
	uint32_t crc;			/* file crc */
@


1.1.1.8.2.4
log
@make inroads on portability
@
text
@d141 1
a141 1
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/pax/pax.h,v 1.1.1.8.2.3 2018/12/12 03:13:34 tg Exp $");
a164 32
#if HAVE_ST_MTIM
#define st_atim_cmp(sbpa,sbpb,op) \
		timespeccmp(&(sbpa)->st_atim, &(sbpb)->st_atim, op)
#define st_ctim_cmp(sbpa,sbpb,op) \
		timespeccmp(&(sbpa)->st_ctim, &(sbpb)->st_ctim, op)
#define st_mtim_cmp(sbpa,sbpb,op) \
		timespeccmp(&(sbpa)->st_mtim, &(sbpb)->st_mtim, op)
#elif HAVE_ST_MTIMENSEC
#define st_atim_cmp(sbpa,sbpb,op) ( \
		((sbpa)->st_atime == (sbpb)->st_atime) ? \
		    ((sbpa)->st_atimensec op (sbpb)->st_atimensec) : \
		    ((sbpa)->st_atime op (sbpb)->st_atime) \
		)
#define st_ctim_cmp(sbpa,sbpb,op) ( \
		((sbpa)->st_ctime == (sbpb)->st_ctime) ? \
		    ((sbpa)->st_ctimensec op (sbpb)->st_ctimensec) : \
		    ((sbpa)->st_ctime op (sbpb)->st_ctime) \
		)
#define st_mtim_cmp(sbpa,sbpb,op) ( \
		((sbpa)->st_mtime == (sbpb)->st_mtime) ? \
		    ((sbpa)->st_mtimensec op (sbpb)->st_mtimensec) : \
		    ((sbpa)->st_mtime op (sbpb)->st_mtime) \
		)
#else
#define st_atim_cmp(sbpa,sbpb,op) \
		((sbpa)->st_atime op (sbpb)->st_atime)
#define st_ctim_cmp(sbpa,sbpb,op) \
		((sbpa)->st_ctime op (sbpb)->st_ctime)
#define st_mtim_cmp(sbpa,sbpb,op) \
		((sbpa)->st_mtime op (sbpb)->st_mtime)
#endif

d395 2
a396 5
#if HAVE_TIMET_LLONG
#define MAX_TIME_T	LLONG_MAX
#else
#define MAX_TIME_T	LONG_MAX
#endif
@


1.1.1.8.2.5
log
@pax.h needs <sys/stat.h> so pull this out
@
text
@d5 24
d63 76
a138 1
#include "compat.h"
d141 62
a202 1
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/pax/pax.h,v 1.1.1.8.2.4 2018/12/12 04:01:21 tg Exp $");
@


1.1.1.8.2.6
log
@do the ‘c’s
@
text
@d42 1
a42 1
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/pax/pax.h,v 1.1.1.8.2.5 2018/12/12 04:04:49 tg Exp $");
d112 1
a112 1
	char *org_name;			/* orig name in filesystem */
@


1.1.1.8.2.7
log
@shove stuff into same-looking structures
@
text
@d42 1
a42 1
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/pax/pax.h,v 1.1.1.8.2.6 2018/12/12 06:03:14 tg Exp $");
d230 3
a232 13
	struct {
#if HAVE_ST_MTIM
		struct timespec st_atim;
		struct timespec st_mtim;
#else
		time_t st_atime;
		time_t st_mtime;
#if HAVE_ST_MTIMENSEC
		long st_atimensec;
		long st_mtimensec;
#endif
#endif
	} sb;				/* times to set */
a233 1
	ino_t	ft_ino;			/* inode number to verify */
@


1.1.1.8.2.8
log
@do the ‘f’s
@
text
@d42 1
a42 1
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/pax/pax.h,v 1.1.1.8.2.7 2018/12/12 06:44:40 tg Exp $");
d178 1
a178 1
	int (*st_rd)(void);	/* initialise routine for read. so format */
d197 1
a197 1
	int (*st_wr)(void);	/* initialise routine for write operations */
@


1.1.1.8.2.9
log
@some more tweaks
@
text
@d42 1
a42 1
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/pax/pax.h,v 1.1.1.8.2.8 2018/12/12 08:48:15 tg Exp $");
a219 4
	int (*rd_data)(ARCHD *,	/* read/process file data from the archive */
	    int, off_t *);
	int (*wr_data)(ARCHD *,	/* write/process file data to the archive */
	    int, off_t *);
a220 1
	char is_uar;		/* is Unix Archiver (sequential, no trailer) */
d224 25
a259 41
 * Archive manipulation code
 */

#define	ANON_INODES	0x0001
#define	ANON_HARDLINKS	0x0002
#define	ANON_MTIME	0x0004
#define	ANON_UIDGID	0x0008
#define	ANON_VERBOSE	0x0010
#define	ANON_DEBUG	0x0020
#define	ANON_LNCP	0x0040
#define	ANON_NUMID	0x0080
#define	ANON_DIRSLASH	0x0100
#define	ANON_MAXVAL	0x01FF

/* format table, see FSUB fsub[] in options.c */

enum fsub_order {
#ifndef SMALL
	FSUB_AR,
	FSUB_BCPIO,
#endif
	FSUB_CPIO,
	FSUB_DIST,
	FSUB_SV4CPIO,
	FSUB_SV4CRC,
#ifndef SMALL
	FSUB_TAR,
#endif
	FSUB_USTAR,
	FSUB_V4NORM,
	FSUB_V4ROOT,
#ifndef SMALL
	FSUBFAIL_Z,
	FSUBFAIL_XZ,
	FSUBFAIL_BZ2,
	FSUBFAIL_GZ,
#endif
	FSUB_MAX
};

/*
@


1.1.1.8.2.10
log
@pax without .h, modulo setpgent and O_CLOEXEC
@
text
@a4 2
 * Copyright (c) 2006, 2009, 2011, 2016
 *	mirabilos <m@@mirbsd.org>
d42 1
a42 1
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/pax/pax.h,v 1.1.1.8.2.9 2018/12/12 10:41:27 tg Exp $");
@


1.1.1.8.2.11
log
@pax.h, and apparently it’s now ok to assume to cast off_t to long long works
@
text
@d5 1
a5 1
 * Copyright (c) 2006, 2009, 2011, 2012, 2016, 2017
d44 1
a44 1
__IDSTRING(rcsid_pax_h, "$MirOS: src/bin/pax/pax.h,v 1.1.1.8.2.10 2018/12/12 12:43:15 tg Exp $");
d63 1
a63 1
 * pax modes of operation
a64 1
#define ERROR		-1	/* nothing selected */
d70 1
a135 1
#define PAX_LINKOR	0x80000000	/* hard link detection OR */
d153 1
a153 1
	const char *name;	/* name of format, this is the name the user */
d199 1
a199 1
	int (*st_wr)(int);	/* initialise routine for write operations */
d288 1
a288 5
#ifdef __INTERIX
#define TODEV		mkdev
#else
#define TODEV		makedev
#endif
@


