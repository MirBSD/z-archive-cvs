head	1.11;
access;
symbols
	paxmirabilis-20190825:1.11
	paxmirabilis-20190224:1.11
	paxmirabilis-20190210:1.11
	npax:1.1.1.5.0.2
	paxmirabilis-20171021:1.9
	paxmirabilis-20161104:1.9
	paxmirabilis-20161031:1.9
	paxmirabilis-20161025:1.9
	paxmirabilis-20160306:1.9
	cvs-201603041945:1.1.1.3
	paxmirabilis-20151013:1.8
	paxmirabilis-20140703:1.8
	paxmirabilis-20120606:1.7
	paxmirabilis-20120605:1.7
	cvs-201206051745:1.1.1.2
	paxmirabilis-20120520:1.7
	paxmirabilis-20120216:1.6
	paxmirabilis-20120212:1.6
	cvs-201202112230:1.1.1.2
	paxmirabilis-20110817:1.4
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	cvs-200710231945:1.1.1.1
	cvs-200606232242:1.1.1.1
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	cvs-200507211800:1.1.1.1
	cvs-200504291700:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2018.12.13.07.09.09;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005C1205A44B32AFA4;

1.10
date	2018.12.12.18.08.41;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005C114EA81986F5EC;

1.9
date	2016.03.06.14.12.26;	author tg;	state Exp;
branches;
next	1.8;
commitid	10056DC3ADA1858410D;

1.8
date	2012.06.08.14.52.47;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004FD211D64D68346D;

1.7
date	2012.05.20.16.13.16;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004FB918314D2FECC0;

1.6
date	2012.02.12.01.02.05;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004F370F971B022B7C;

1.5
date	2012.02.12.00.27.15;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004F3707786D20BF4A;

1.4
date	2007.02.17.04.52.40;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045D68A2D54E2C558;

1.3
date	2006.07.16.17.55.18;	author tg;	state Exp;
branches;
next	1.2;
commitid	10044BA7D99093CFC29;

1.2
date	2005.04.13.20.03.35;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.22.06;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.22.06;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.02.11.22.47.21;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	1004F36F008225F3522;

1.1.1.3
date	2016.03.04.19.46.09;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	10056D9E61429EE6550;

1.1.1.4
date	2016.03.04.20.54.58;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10056D9F62E152ECBA5;

1.1.1.5
date	2018.12.12.00.45.58;	author tg;	state Exp;
branches
	1.1.1.5.2.1;
next	;
commitid	1005C105A5523F8A80B;

1.1.1.5.2.1
date	2018.12.12.00.52.58;	author tg;	state Exp;
branches;
next	1.1.1.5.2.2;
commitid	1005C105BC86262A0B7;

1.1.1.5.2.2
date	2018.12.12.00.54.15;	author tg;	state Exp;
branches;
next	1.1.1.5.2.3;
commitid	1005C105C48612B0194;

1.1.1.5.2.3
date	2018.12.12.03.13.30;	author tg;	state Exp;
branches;
next	1.1.1.5.2.4;
commitid	1005C107CE315DC51F3;

1.1.1.5.2.4
date	2018.12.12.06.03.10;	author tg;	state Exp;
branches;
next	1.1.1.5.2.5;
commitid	1005C10A4B12E5998CE;

1.1.1.5.2.5
date	2018.12.12.15.33.05;	author tg;	state Exp;
branches;
next	;
commitid	1005C112A434F807902;


desc
@@


1.11
log
@fixing and string pooling and int shortening offensive
@
text
@/*	$OpenBSD: cache.c,v 1.23 2016/08/26 04:08:18 guenther Exp $	*/
/*	$NetBSD: cache.c,v 1.4 1995/03/21 09:07:10 cgd Exp $	*/

/*-
 * Copyright (c) 2018 mirabilos
 * Copyright (c) 1992 Keith Muller.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Keith Muller of the University of California, San Diego.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#if HAVE_GRP_H
#include <grp.h>
#endif
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#if HAVE_STRINGS_H
#include <strings.h>
#endif

#include "pax.h"
#include "extern.h"

#if HAVE_UGID_FROM_UG
# error do not include this file if you do not need it
#endif

__RCSID("$MirOS: src/bin/pax/cache.c,v 1.10 2018/12/12 18:08:41 tg Exp $");

/*
 * Constants and data structures used to implement group and password file
 * caches. Traditional passwd/group cache routines perform quite poorly with
 * archives. The chances of hitting a valid lookup with an archive is quite a
 * bit worse than with files already resident on the filesystem. These misses
 * create a MAJOR performance cost. To address this problem, these routines
 * cache both hits and misses.
 *
 * NOTE:  name lengths must be as large as those stored in ANY PROTOCOL and
 * as stored in the passwd and group files. CACHE SIZES MUST BE PRIME
 */
#define UNMLEN		32	/* >= user name found in any protocol */
#define GNMLEN		32	/* >= group name found in any protocol */
#define UID_SZ		317	/* size of user_name/uid cache */
#define UNM_SZ		317	/* size of user_name/uid cache */
#define GID_SZ		251	/* size of gid cache */
#define GNM_SZ		317	/* size of group name cache */
#define VALID		1	/* entry and name are valid */
#define INVALID		2	/* entry valid, name NOT valid */

/*
 * Node structures used in the user, group, uid, and gid caches.
 */

typedef struct uidc {
	int valid;		/* is this a valid or a miss entry */
	char name[UNMLEN];	/* uid name */
	uid_t uid;		/* cached uid */
} UIDC;

typedef struct gidc {
	int valid;		/* is this a valid or a miss entry */
	char name[GNMLEN];	/* gid name */
	gid_t gid;		/* cached gid */
} GIDC;

/*
 * routines that control user, group, uid and gid caches (for the archive
 * member print routine).
 * IMPORTANT:
 * these routines cache BOTH hits and misses, a major performance improvement
 */

static	int pwopn = 0;		/* is password file open */
static	int gropn = 0;		/* is group file open */
#if !HAVE_UG_FROM_UGID
static UIDC **uidtb = NULL;	/* uid to name cache */
static GIDC **gidtb = NULL;	/* gid to name cache */
#endif
static UIDC **usrtb = NULL;	/* user name to uid cache */
static GIDC **grptb = NULL;	/* group name to gid cache */

#if !HAVE_UG_FROM_UGID
/*
 * uidtb_start
 *	creates an empty uidtb
 * Return:
 *	0 if ok, -1 otherwise
 */

int
uidtb_start(void)
{
	static int fail = 0;

	if (uidtb != NULL)
		return(0);
	if (fail)
		return(-1);
	if ((uidtb = calloc(UID_SZ, sizeof(UIDC *))) == NULL) {
		++fail;
		paxwarn(1, "%s for %s", "Out of memory",
		    "user id cache table");
		return (-1);
	}
	return(0);
}

/*
 * gidtb_start
 *	creates an empty gidtb
 * Return:
 *	0 if ok, -1 otherwise
 */

int
gidtb_start(void)
{
	static int fail = 0;

	if (gidtb != NULL)
		return(0);
	if (fail)
		return(-1);
	if ((gidtb = calloc(GID_SZ, sizeof(GIDC *))) == NULL) {
		++fail;
		paxwarn(1, "%s for %s", "Out of memory",
		    "group id cache table");
		return (-1);
	}
	return(0);
}
#endif

/*
 * usrtb_start
 *	creates an empty usrtb
 * Return:
 *	0 if ok, -1 otherwise
 */

int
usrtb_start(void)
{
	static int fail = 0;

	if (usrtb != NULL)
		return(0);
	if (fail)
		return(-1);
	if ((usrtb = calloc(UNM_SZ, sizeof(UIDC *))) == NULL) {
		++fail;
		paxwarn(1, "%s for %s", "Out of memory",
		    "user name cache table");
		return (-1);
	}
	return(0);
}

/*
 * grptb_start
 *	creates an empty grptb
 * Return:
 *	0 if ok, -1 otherwise
 */

int
grptb_start(void)
{
	static int fail = 0;

	if (grptb != NULL)
		return(0);
	if (fail)
		return(-1);
	if ((grptb = calloc(GNM_SZ, sizeof(GIDC *))) == NULL) {
		++fail;
		paxwarn(1,"%s for %s", "Out of memory",
		    "group name cache table");
		return (-1);
	}
	return(0);
}

#if !HAVE_UG_FROM_UGID
/*
 * name_uid()
 *	caches the name (if any) for the uid. If frc set, we always return the
 *	the stored name (if valid or invalid match). We use a simple hash table.
 * Return
 *	Pointer to stored name (or a empty string)
 */

const char *
name_uid(uid_t uid, int frc)
{
	struct passwd *pw;
	UIDC *ptr;

	if ((uidtb == NULL) && (uidtb_start() < 0))
		return("");

	/*
	 * see if we have this uid cached
	 */
	ptr = uidtb[uid % UID_SZ];
	if ((ptr != NULL) && (ptr->valid > 0) && (ptr->uid == uid)) {
		/*
		 * have an entry for this uid
		 */
		if (frc || (ptr->valid == VALID))
			return(ptr->name);
		return("");
	}

	/*
	 * No entry for this uid, we will add it
	 */
	if (!pwopn) {
#if HAVE_SETPGENT
		setpassent(1);
#else
		setpwent();
#endif
		++pwopn;
	}
	if (ptr == NULL)
		ptr = uidtb[uid % UID_SZ] = malloc(sizeof(UIDC));

	if ((pw = getpwuid(uid)) == NULL) {
		/*
		 * no match for this uid in the local password file
		 * a string that is the uid in numeric format
		 */
		if (ptr == NULL)
			return("");
		ptr->uid = uid;
		ptr->valid = INVALID;
		(void)snprintf(ptr->name, sizeof(ptr->name), "%lu",
			       (unsigned long)uid);
		if (frc == 0)
			return("");
	} else {
		/*
		 * there is an entry for this uid in the password file
		 */
		if (ptr == NULL)
			return(pw->pw_name);
		ptr->uid = uid;
		(void)strlcpy(ptr->name, pw->pw_name, sizeof(ptr->name));
		ptr->valid = VALID;
	}
	return(ptr->name);
}

/*
 * name_gid()
 *	caches the name (if any) for the gid. If frc set, we always return the
 *	the stored name (if valid or invalid match). We use a simple hash table.
 * Return
 *	Pointer to stored name (or a empty string)
 */

const char *
name_gid(gid_t gid, int frc)
{
	struct group *gr;
	GIDC *ptr;

	if ((gidtb == NULL) && (gidtb_start() < 0))
		return("");

	/*
	 * see if we have this gid cached
	 */
	ptr = gidtb[gid % GID_SZ];
	if ((ptr != NULL) && (ptr->valid > 0) && (ptr->gid == gid)) {
		/*
		 * have an entry for this gid
		 */
		if (frc || (ptr->valid == VALID))
			return(ptr->name);
		return("");
	}

	/*
	 * No entry for this gid, we will add it
	 */
	if (!gropn) {
#if HAVE_SETPGENT
		setgroupent(1);
#else
		setgrent();
#endif
		++gropn;
	}
	if (ptr == NULL)
		ptr = gidtb[gid % GID_SZ] = malloc(sizeof(GIDC));

	if ((gr = getgrgid(gid)) == NULL) {
		/*
		 * no match for this gid in the local group file, put in
		 * a string that is the gid in numeric format
		 */
		if (ptr == NULL)
			return("");
		ptr->gid = gid;
		ptr->valid = INVALID;
		(void)snprintf(ptr->name, sizeof(ptr->name), "%lu",
			       (unsigned long)gid);
		if (frc == 0)
			return("");
	} else {
		/*
		 * there is an entry for this group in the group file
		 */
		if (ptr == NULL)
			return(gr->gr_name);
		ptr->gid = gid;
		(void)strlcpy(ptr->name, gr->gr_name, sizeof(ptr->name));
		ptr->valid = VALID;
	}
	return(ptr->name);
}
#endif

/*
 * uid_name()
 *	caches the uid for a given user name. We use a simple hash table.
 * Return
 *	the uid (if any) for a user name, or a -1 if no match can be found
 */

int
uid_name(const char *name, uid_t *uid)
{
	struct passwd *pw;
	UIDC *ptr;
	int namelen;

	/*
	 * return -1 for mangled names
	 */
	if (((namelen = strlen(name)) == 0) || (name[0] == '\0'))
		return(-1);
	if ((usrtb == NULL) && (usrtb_start() < 0))
		return(-1);

	/*
	 * look up in hash table, if found and valid return the uid,
	 * if found and invalid, return a -1
	 */
	ptr = usrtb[st_hash(name, namelen, UNM_SZ)];
	if ((ptr != NULL) && (ptr->valid > 0) && !strcmp(name, ptr->name)) {
		if (ptr->valid == INVALID)
			return(-1);
		*uid = ptr->uid;
		return(0);
	}

	if (!pwopn) {
#if HAVE_SETPGENT
		setpassent(1);
#else
		setpwent();
#endif
		++pwopn;
	}

	if (ptr == NULL)
		ptr = usrtb[st_hash(name, namelen, UNM_SZ)] =
		  malloc(sizeof(UIDC));

	/*
	 * no match, look it up, if no match store it as an invalid entry,
	 * or store the matching uid
	 */
	if (ptr == NULL) {
		if ((pw = getpwnam(name)) == NULL)
			return(-1);
		*uid = pw->pw_uid;
		return(0);
	}
	(void)strlcpy(ptr->name, name, sizeof(ptr->name));
	if ((pw = getpwnam(name)) == NULL) {
		ptr->valid = INVALID;
		return(-1);
	}
	ptr->valid = VALID;
	*uid = ptr->uid = pw->pw_uid;
	return(0);
}

/*
 * gid_name()
 *	caches the gid for a given group name. We use a simple hash table.
 * Return
 *	the gid (if any) for a group name, or a -1 if no match can be found
 */

int
gid_name(const char *name, gid_t *gid)
{
	struct group *gr;
	GIDC *ptr;
	int namelen;

	/*
	 * return -1 for mangled names
	 */
	if (((namelen = strlen(name)) == 0) || (name[0] == '\0'))
		return(-1);
	if ((grptb == NULL) && (grptb_start() < 0))
		return(-1);

	/*
	 * look up in hash table, if found and valid return the uid,
	 * if found and invalid, return a -1
	 */
	ptr = grptb[st_hash(name, namelen, GID_SZ)];
	if ((ptr != NULL) && (ptr->valid > 0) && !strcmp(name, ptr->name)) {
		if (ptr->valid == INVALID)
			return(-1);
		*gid = ptr->gid;
		return(0);
	}

	if (!gropn) {
#if HAVE_SETPGENT
		setgroupent(1);
#else
		setgrent();
#endif
		++gropn;
	}
	if (ptr == NULL)
		ptr = grptb[st_hash(name, namelen, GID_SZ)] =
		  malloc(sizeof(GIDC));

	/*
	 * no match, look it up, if no match store it as an invalid entry,
	 * or store the matching gid
	 */
	if (ptr == NULL) {
		if ((gr = getgrnam(name)) == NULL)
			return(-1);
		*gid = gr->gr_gid;
		return(0);
	}

	(void)strlcpy(ptr->name, name, sizeof(ptr->name));
	if ((gr = getgrnam(name)) == NULL) {
		ptr->valid = INVALID;
		return(-1);
	}
	ptr->valid = VALID;
	*gid = ptr->gid = gr->gr_gid;
	return(0);
}

int
uid_uncached(const char *name, uid_t *uid)
{
	struct passwd *pw;

	if ((pw = getpwnam(name)) == NULL)
		return (-1);
	*uid = pw->pw_uid;
	return (0);
}

int
gid_uncached(const char *name, gid_t *gid)
{
	struct group *gr;

	if ((gr = getgrnam(name)) == NULL)
		return (-1);
	*gid = gr->gr_gid;
	return (0);
}
@


1.10
log
@merge the npax branch into MAIN

asides from a missing dprintf and portability, this ought to be
good enough for people (well me) to play with for now
@
text
@d58 1
a58 1
__RCSID("$MirOS: src/bin/pax/cache.c,v 1.7 2012/05/20 16:13:16 tg Exp $");
d131 3
a133 2
		paxwarn(1, "Unable to allocate memory for user id cache table");
		return(-1);
d156 3
a158 2
		paxwarn(1, "Unable to allocate memory for group id cache table");
		return(-1);
d182 3
a184 2
		paxwarn(1, "Unable to allocate memory for user name cache table");
		return(-1);
d207 3
a209 2
		paxwarn(1,"Unable to allocate memory for group name cache table");
		return(-1);
@


1.9
log
@version the *.h files as idstrings, too
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.c,v 1.19 2009/12/22 12:09:36 jasper Exp $	*/
d5 1
d38 1
a38 2
#include <sys/param.h>
#include <sys/time.h>
d40 4
a43 1
#include <string.h>
a44 3
#include <pwd.h>
#include <grp.h>
#include <unistd.h>
d46 5
a50 1
#include <time.h>
a51 1
#include "cache.h"
d54 4
d59 36
a94 1
__IDSTRING(rcsid_cache_h, MIRCPIO_CACHE_H);
d105 1
d108 1
d112 1
d129 1
a129 1
	if ((uidtb = (UIDC **)calloc(UID_SZ, sizeof(UIDC *))) == NULL) {
d153 1
a153 1
	if ((gidtb = (GIDC **)calloc(GID_SZ, sizeof(GIDC *))) == NULL) {
d160 1
d178 1
a178 1
	if ((usrtb = (UIDC **)calloc(UNM_SZ, sizeof(UIDC *))) == NULL) {
d202 1
a202 1
	if ((grptb = (GIDC **)calloc(GNM_SZ, sizeof(GIDC *))) == NULL) {
d210 1
d245 3
a247 1
#if defined(__GLIBC__)
a248 2
#elif !defined(__INTERIX)
		setpassent(1);
d315 3
a317 1
#if defined(__GLIBC__)
a318 2
#elif !defined(__INTERIX) && !defined(__CYGWIN__)
		setgroupent(1);
d350 1
d387 3
a389 1
#if defined(__GLIBC__)
a390 2
#elif !defined(__INTERIX)
		setpassent(1);
d397 1
a397 1
		  (UIDC *)malloc(sizeof(UIDC));
d454 3
a456 1
#if defined(__GLIBC__)
a457 2
#elif !defined(__INTERIX) && !defined(__CYGWIN__)
		setgroupent(1);
d463 1
a463 1
		  (GIDC *)malloc(sizeof(GIDC));
d485 22
@


1.8
log
@build on cygwin
@
text
@d52 1
@


1.7
log
@get rid of extern.h including other headers
@
text
@d51 1
a51 1
__RCSID("$MirOS: src/bin/pax/cache.c,v 1.6 2012/02/12 01:02:05 tg Exp $");
d269 1
a269 1
#elif !defined(__INTERIX)
d407 1
a407 1
#elif !defined(__INTERIX)
@


1.6
log
@add most misc. patches from Debian (reopen #609825 as the test is bogus)
@
text
@d46 1
d51 1
a51 1
__RCSID("$MirOS: src/bin/pax/cache.c,v 1.5 2012/02/12 00:27:15 tg Exp $");
@


1.5
log
@merge OpenBSD
@
text
@d50 1
a50 1
__RCSID("$MirOS: src/bin/pax/cache.c,v 1.4 2007/02/17 04:52:40 tg Exp $");
d196 3
a198 1
#if !defined(__INTERIX) && !defined(__GLIBC__)
d266 3
a268 1
#if !defined(__INTERIX) && !defined(__GLIBC__)
d337 3
a339 1
#if !defined(__INTERIX) && !defined(__GLIBC__)
d404 3
a406 1
#if !defined(__INTERIX) && !defined(__GLIBC__)
@


1.4
log
@__CRAZY clean
@
text
@d1 1
a1 2
/**	$MirOS: src/bin/pax/cache.c,v 1.3 2006/07/16 17:55:18 tg Exp $ */
/*	$OpenBSD: cache.c,v 1.17 2004/03/16 03:28:34 tedu Exp $	*/
d50 1
a50 2
__SCCSID("@@(#)cache.c	8.1 (Berkeley) 5/31/93");
__RCSID("$MirOS: src/bin/pax/cache.c,v 1.3 2006/07/16 17:55:18 tg Exp $");
d275 1
a275 1
		 * a string that is the gid in numberic format
@


1.3
log
@certain things (glibc) are as limited as Interix
@
text
@d1 1
a1 1
/**	$MirOS: src/bin/pax/cache.c,v 1.2 2005/04/13 20:03:35 tg Exp $ */
d38 1
a38 1
#include <sys/types.h>
a40 1
#include <sys/param.h>
d52 1
a52 1
__RCSID("$MirOS: src/bin/pax/cache.c,v 1.2 2005/04/13 20:03:35 tg Exp $");
d172 1
a172 1
char *
d240 1
a240 1
char *
d308 1
a308 1
uid_name(char *name, uid_t *uid)
d373 1
a373 1
gid_name(char *name, gid_t *gid)
@


1.2
log
@these are the compile time fixes
this commit message provided by interix ;)
@
text
@d1 1
a1 1
/**	$MirOS$ */
d53 1
a53 1
__RCSID("$MirOS$");
d199 1
a199 1
#ifndef __INTERIX
d267 1
a267 1
#ifndef __INTERIX
d336 1
a336 1
#ifndef __INTERIX
d401 1
a401 1
#ifndef __INTERIX
@


1.1
log
@Initial revision
@
text
@d1 1
a37 8
#ifndef lint
#if 0
static const char sccsid[] = "@@(#)cache.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: cache.c,v 1.17 2004/03/16 03:28:34 tedu Exp $";
#endif
#endif /* not lint */

d52 3
d199 1
d201 1
d267 1
d269 1
d336 1
d338 1
d401 1
d403 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@import up-to-date pax from OpenBSD 5.1-current
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.c,v 1.19 2009/12/22 12:09:36 jasper Exp $	*/
d37 8
d278 1
a278 1
		 * a string that is the gid in numeric format
@


1.1.1.3
log
@pull newer paxtar from OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.c,v 1.21 2014/05/24 18:51:00 guenther Exp $	*/
d40 1
d81 1
a81 1
	if ((uidtb = calloc(UID_SZ, sizeof(UIDC *))) == NULL) {
d105 1
a105 1
	if ((gidtb = calloc(GID_SZ, sizeof(GIDC *))) == NULL) {
d129 1
a129 1
	if ((usrtb = calloc(UNM_SZ, sizeof(UIDC *))) == NULL) {
d153 1
a153 1
	if ((grptb = calloc(GNM_SZ, sizeof(GIDC *))) == NULL) {
d334 1
a334 1
		  malloc(sizeof(UIDC));
d396 1
a396 1
		  malloc(sizeof(GIDC));
@


1.1.1.4
log
@revert the import; we’ll just backport the CVE fixes, for now ☹
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.c,v 1.19 2009/12/22 12:09:36 jasper Exp $	*/
a39 1
#include <sys/param.h>
d80 1
a80 1
	if ((uidtb = (UIDC **)calloc(UID_SZ, sizeof(UIDC *))) == NULL) {
d104 1
a104 1
	if ((gidtb = (GIDC **)calloc(GID_SZ, sizeof(GIDC *))) == NULL) {
d128 1
a128 1
	if ((usrtb = (UIDC **)calloc(UNM_SZ, sizeof(UIDC *))) == NULL) {
d152 1
a152 1
	if ((grptb = (GIDC **)calloc(GNM_SZ, sizeof(GIDC *))) == NULL) {
d333 1
a333 1
		  (UIDC *)malloc(sizeof(UIDC));
d395 1
a395 1
		  (GIDC *)malloc(sizeof(GIDC));
@


1.1.1.5
log
@Update cache.c to 1.23 (last revision before 1.24 dead)
@
text
@d1 1
a1 1
/*	$OpenBSD: cache.c,v 1.23 2016/08/26 04:08:18 guenther Exp $	*/
d38 1
d40 4
d45 1
a45 2
#include <pwd.h>
#include <stdio.h>
a46 2
#include <string.h>

d48 1
d52 4
a55 9
 * Constants and data structures used to implement group and password file
 * caches. Traditional passwd/group cache routines perform quite poorly with
 * archives. The chances of hitting a valid lookup with an archive is quite a
 * bit worse than with files already resident on the file system. These misses
 * create a MAJOR performance cost. To address this problem, these routines
 * cache both hits and misses.
 *
 * NOTE:  name lengths must be as large as those stored in ANY PROTOCOL and
 * as stored in the passwd and group files. CACHE SIZES MUST BE PRIME
d57 7
a63 6
#define UNMLEN		32	/* >= user name found in any protocol */
#define GNMLEN		32	/* >= group name found in any protocol */
#define UNM_SZ		317	/* size of uid_name() cache */
#define GNM_SZ		317	/* size of gid_name() cache */
#define VALID		1	/* entry and name are valid */
#define INVALID		2	/* entry valid, name NOT valid */
d66 4
a69 1
 * Node structures used in the user, group, uid, and gid caches.
d72 4
a75 11
typedef struct uidc {
	int valid;		/* is this a valid or a miss entry */
	char name[UNMLEN];	/* uid name */
	uid_t uid;		/* cached uid */
} UIDC;

typedef struct gidc {
	int valid;		/* is this a valid or a miss entry */
	char name[GNMLEN];	/* gid name */
	gid_t gid;		/* cached gid */
} GIDC;
d77 11
d90 4
a93 4
 * routines that control user, group, uid and gid caches (for the archive
 * member print routine).
 * IMPORTANT:
 * these routines cache BOTH hits and misses, a major performance improvement
d96 16
a111 4
static	int pwopn = 0;		/* is password file open */
static	int gropn = 0;		/* is group file open */
static UIDC **usrtb = NULL;	/* user name to uid cache */
static GIDC **grptb = NULL;	/* group name to gid cache */
d129 1
a129 1
	if ((usrtb = calloc(UNM_SZ, sizeof(UIDC *))) == NULL) {
d153 1
a153 1
	if ((grptb = calloc(GNM_SZ, sizeof(GIDC *))) == NULL) {
d162 132
d334 1
a334 1
		  malloc(sizeof(UIDC));
d382 1
a382 1
	ptr = grptb[st_hash(name, namelen, GNM_SZ)];
d395 2
a396 2
		ptr = grptb[st_hash(name, namelen, GNM_SZ)] =
		  malloc(sizeof(GIDC));
@


1.1.1.5.2.1
log
@Wrangle the OpenBSD branch into shape as starting point:

• Revert “Use the new libc uid_from_user() and gid_from_group()
  instead of the pax-specific functions in cache.c” (revisit later)
• fix MAX_TIME_T (plain wrong), mirtoconf later
• drop all NOCPIO
• Revert “Replace name_{uid,gid}() with the libc routines
  user_from_uid() and group_from_gid()”
@
text
@d61 2
a62 4
#define UID_SZ		317	/* size of user_name/uid cache */
#define UNM_SZ		317	/* size of user_name/uid cache */
#define GID_SZ		251	/* size of gid cache */
#define GNM_SZ		317	/* size of group name cache */
a91 2
static UIDC **uidtb = NULL;	/* uid to name cache */
static GIDC **gidtb = NULL;	/* gid to name cache */
a95 48
 * uidtb_start
 *	creates an empty uidtb
 * Return:
 *	0 if ok, -1 otherwise
 */

int
uidtb_start(void)
{
	static int fail = 0;

	if (uidtb != NULL)
		return(0);
	if (fail)
		return(-1);
	if ((uidtb = calloc(UID_SZ, sizeof(UIDC *))) == NULL) {
		++fail;
		paxwarn(1, "Unable to allocate memory for user id cache table");
		return(-1);
	}
	return(0);
}

/*
 * gidtb_start
 *	creates an empty gidtb
 * Return:
 *	0 if ok, -1 otherwise
 */

int
gidtb_start(void)
{
	static int fail = 0;

	if (gidtb != NULL)
		return(0);
	if (fail)
		return(-1);
	if ((gidtb = calloc(GID_SZ, sizeof(GIDC *))) == NULL) {
		++fail;
		paxwarn(1, "Unable to allocate memory for group id cache table");
		return(-1);
	}
	return(0);
}

/*
a143 132
 * name_uid()
 *	caches the name (if any) for the uid. If frc set, we always return the
 *	the stored name (if valid or invalid match). We use a simple hash table.
 * Return
 *	Pointer to stored name (or a empty string)
 */

char *
name_uid(uid_t uid, int frc)
{
	struct passwd *pw;
	UIDC *ptr;

	if ((uidtb == NULL) && (uidtb_start() < 0))
		return("");

	/*
	 * see if we have this uid cached
	 */
	ptr = uidtb[uid % UID_SZ];
	if ((ptr != NULL) && (ptr->valid > 0) && (ptr->uid == uid)) {
		/*
		 * have an entry for this uid
		 */
		if (frc || (ptr->valid == VALID))
			return(ptr->name);
		return("");
	}

	/*
	 * No entry for this uid, we will add it
	 */
	if (!pwopn) {
		setpassent(1);
		++pwopn;
	}
	if (ptr == NULL)
		ptr = uidtb[uid % UID_SZ] = malloc(sizeof(UIDC));

	if ((pw = getpwuid(uid)) == NULL) {
		/*
		 * no match for this uid in the local password file
		 * a string that is the uid in numeric format
		 */
		if (ptr == NULL)
			return("");
		ptr->uid = uid;
		ptr->valid = INVALID;
		(void)snprintf(ptr->name, sizeof(ptr->name), "%lu",
			       (unsigned long)uid);
		if (frc == 0)
			return("");
	} else {
		/*
		 * there is an entry for this uid in the password file
		 */
		if (ptr == NULL)
			return(pw->pw_name);
		ptr->uid = uid;
		(void)strlcpy(ptr->name, pw->pw_name, sizeof(ptr->name));
		ptr->valid = VALID;
	}
	return(ptr->name);
}

/*
 * name_gid()
 *	caches the name (if any) for the gid. If frc set, we always return the
 *	the stored name (if valid or invalid match). We use a simple hash table.
 * Return
 *	Pointer to stored name (or a empty string)
 */

char *
name_gid(gid_t gid, int frc)
{
	struct group *gr;
	GIDC *ptr;

	if ((gidtb == NULL) && (gidtb_start() < 0))
		return("");

	/*
	 * see if we have this gid cached
	 */
	ptr = gidtb[gid % GID_SZ];
	if ((ptr != NULL) && (ptr->valid > 0) && (ptr->gid == gid)) {
		/*
		 * have an entry for this gid
		 */
		if (frc || (ptr->valid == VALID))
			return(ptr->name);
		return("");
	}

	/*
	 * No entry for this gid, we will add it
	 */
	if (!gropn) {
		setgroupent(1);
		++gropn;
	}
	if (ptr == NULL)
		ptr = gidtb[gid % GID_SZ] = malloc(sizeof(GIDC));

	if ((gr = getgrgid(gid)) == NULL) {
		/*
		 * no match for this gid in the local group file, put in
		 * a string that is the gid in numeric format
		 */
		if (ptr == NULL)
			return("");
		ptr->gid = gid;
		ptr->valid = INVALID;
		(void)snprintf(ptr->name, sizeof(ptr->name), "%lu",
			       (unsigned long)gid);
		if (frc == 0)
			return("");
	} else {
		/*
		 * there is an entry for this group in the group file
		 */
		if (ptr == NULL)
			return(gr->gr_name);
		ptr->gid = gid;
		(void)strlcpy(ptr->name, gr->gr_name, sizeof(ptr->name));
		ptr->valid = VALID;
	}
	return(ptr->name);
}

/*
d232 1
a232 1
	ptr = grptb[st_hash(name, namelen, GID_SZ)];
d245 1
a245 1
		ptr = grptb[st_hash(name, namelen, GID_SZ)] =
@


1.1.1.5.2.2
log
@normalise whitespace at EOL, EOF, adjacent newlines
@
text
@d84 1
@


1.1.1.5.2.3
log
@extremely rudimentary conversion to mirtoconf, doesn’t even build yet
@
text
@a38 1
#if HAVE_GRP_H
a39 1
#endif
a43 3
#if HAVE_STRINGS_H
#include <strings.h>
#endif
@


1.1.1.5.2.4
log
@do the ‘c’s
@
text
@a4 1
 * Copyright (c) 2018 mirabilos
d57 1
a57 1
 * bit worse than with files already resident on the filesystem. These misses
d207 1
a207 1
const char *
a232 1
#if HAVE_SETPGENT
a233 3
#else
		setpwent();
#endif
d273 1
a273 1
const char *
a298 1
#if HAVE_SETPGENT
a299 3
#else
		setgrent();
#endif
d339 1
a339 1
uid_name(const char *name, uid_t *uid)
a365 1
#if HAVE_SETPGENT
a366 3
#else
		setpwent();
#endif
d402 1
a402 1
gid_name(const char *name, gid_t *gid)
a428 1
#if HAVE_SETPGENT
a429 3
#else
		setgrent();
#endif
@


1.1.1.5.2.5
log
@revisit all those initial reverts
@
text
@a53 4
#if HAVE_UGID_FROM_UG
# error do not include this file if you do not need it
#endif

a98 1
#if !HAVE_UG_FROM_UGID
a100 1
#endif
a103 1
#if !HAVE_UG_FROM_UGID
a150 1
#endif
a199 1
#if !HAVE_UG_FROM_UGID
a338 1
#endif
a472 22

int
uid_uncached(const char *name, uid_t *uid)
{
	struct passwd *pw;

	if ((pw = getpwnam(name)) == NULL)
		return (-1);
	*uid = pw->pw_uid;
	return (0);
}

int
gid_uncached(const char *name, gid_t *gid)
{
	struct group *gr;

	if ((gr = getgrnam(name)) == NULL)
		return (-1);
	*gid = gr->gr_gid;
	return (0);
}
@


