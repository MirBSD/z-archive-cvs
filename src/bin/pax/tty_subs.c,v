head	1.13;
access;
symbols
	paxmirabilis-20190825:1.13
	paxmirabilis-20190224:1.13
	paxmirabilis-20190210:1.13
	npax:1.1.1.5.0.2
	cvs-20181212:1.1.1.5
	paxmirabilis-20171021:1.12
	paxmirabilis-20161104:1.12
	paxmirabilis-20161031:1.12
	paxmirabilis-20161025:1.12
	paxmirabilis-20160306:1.12
	cvs-201603041945:1.1.1.3
	paxmirabilis-20151013:1.11
	paxmirabilis-20140703:1.11
	paxmirabilis-20120606:1.10
	paxmirabilis-20120605:1.9
	cvs-201206051745:1.1.1.2
	paxmirabilis-20120520:1.5
	paxmirabilis-20120216:1.4
	paxmirabilis-20120212:1.3
	cvs-201202112230:1.1.1.2
	paxmirabilis-20110817:1.2
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	cvs-200710231945:1.1.1.1
	cvs-200606232242:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200504291700:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2018.12.12.18.08.48;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005C114EA81986F5EC;

1.12
date	2016.03.06.13.47.12;	author tg;	state Exp;
branches;
next	1.11;
commitid	10056DC34E25F0AA0A6;

1.11
date	2014.07.03.19.51.55;	author tg;	state Exp;
branches;
next	1.10;
commitid	10053B5B46E233C295B;

1.10
date	2012.06.05.22.41.55;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004FCE8B421E487311;

1.9
date	2012.06.05.20.20.28;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004FCE6A245928E2B7;

1.8
date	2012.06.05.19.19.45;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004FCE5BE75FB3BEF7;

1.7
date	2012.06.05.19.09.41;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004FCE598C750277B2;

1.6
date	2012.06.05.18.52.16;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004FCE55470EF2C532;

1.5
date	2012.05.20.16.13.20;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004FB918314D2FECC0;

1.4
date	2012.02.16.16.01.09;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004F3D28152C6F33B8;

1.3
date	2012.02.12.00.27.19;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004F3707786D20BF4A;

1.2
date	2007.02.17.04.52.41;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045D68A2D54E2C558;

1.1
date	2005.02.05.17.22.06;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.22.06;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.02.11.22.47.22;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	1004F36F008225F3522;

1.1.1.3
date	2016.03.04.19.46.09;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	10056D9E61429EE6550;

1.1.1.4
date	2016.03.04.20.55.05;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10056D9F62E152ECBA5;

1.1.1.5
date	2018.12.12.00.24.23;	author tg;	state Exp;
branches
	1.1.1.5.2.1;
next	;
commitid	1005C1055452C78F9E4;

1.1.1.5.2.1
date	2018.12.12.03.13.36;	author tg;	state Exp;
branches;
next	1.1.1.5.2.2;
commitid	1005C107CE315DC51F3;

1.1.1.5.2.2
date	2018.12.12.14.32.28;	author tg;	state Exp;
branches;
next	1.1.1.5.2.3;
commitid	1005C111C134DFE1BC0;

1.1.1.5.2.3
date	2018.12.12.15.00.27;	author tg;	state Exp;
branches;
next	1.1.1.5.2.4;
commitid	1005C11229872472EAF;

1.1.1.5.2.4
date	2018.12.12.15.57.34;	author tg;	state Exp;
branches;
next	;
commitid	1005C11300575B1CEE0;


desc
@@


1.13
log
@merge the npax branch into MAIN

asides from a missing dprintf and portability, this ought to be
good enough for people (well me) to play with for now
@
text
@/*	$OpenBSD: tty_subs.c,v 1.17 2016/08/26 04:22:13 guenther Exp $	*/
/*	$NetBSD: tty_subs.c,v 1.5 1995/03/21 09:07:52 cgd Exp $	*/

/*-
 * Copyright (c) 2012, 2014, 2016
 *	mirabilos <m@@mirbsd.org>
 * Copyright (c) 1992 Keith Muller.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Keith Muller of the University of California, San Diego.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <errno.h>
#include <fcntl.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#if HAVE_STRINGS_H
#include <strings.h>
#endif
#include <unistd.h>

#include "pax.h"
#include "extern.h"

__RCSID("$MirOS: src/bin/pax/tty_subs.c,v 1.10 2012/06/05 22:41:55 tg Exp $");

/*
 * routines that deal with I/O to and from the user
 */

/* device for interactive I/O */
static const char devtty[] = "/dev/tty";
/* file descriptor for accessing it */
static int ttyfd;

/*
 * tty_init()
 *	try to open the controlling terminal (if any) for this process. if the
 *	open fails, future ops that require user input will get an EOF
 */

int
tty_init(void)
{
	if ((ttyfd = binopen2(BO_CLEXEC, devtty, O_RDWR)) == -1 && iflag) {
		syswarn(1, errno, "Fatal error, cannot open %s", devtty);
		return (-1);
	}

	return (0);
}

/*
 * tty_prnt()
 *	print a message using the specified format to the controlling tty
 *	if there is no controlling terminal, just return.
 */

void
tty_prnt(const char *fmt, ...)
{
	va_list ap;
	char *cp;
	int len;

	va_start(ap, fmt);
	if (ttyfd != -1) {
		len = vasprintf(&cp, fmt, ap);
		if (len != -1) {
			dwrite(ttyfd, cp, len);
			free(cp);
		}
	}
	va_end(ap);
}

/*
 * tty_rd()
 *	read a string from the controlling terminal if it is open
 * Return:
 *	pointer caller must free if data was read, NULL otherwise
 */

char *
tty_rd(void)
{
	return (ttyfd == -1 ? NULL : fdgetline(ttyfd));
}

/*
 * paxwarn()
 *	write a warning message to stderr. if "set" the exit value of pax
 *	will be non-zero.
 */

void
paxwarn(int set, const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	if (set)
		exit_val = 1;
	/*
	 * when vflag we better ship out an extra \n to get this message on a
	 * line by itself
	 */
	if (vfpart) {
		(void)fflush(listf);
		(void)fputc('\n', stderr);
		vfpart = 0;
	}
	(void)fprintf(stderr, "%s: ", argv0);
	(void)vfprintf(stderr, fmt, ap);
	va_end(ap);
	(void)fputc('\n', stderr);
}

/*
 * syswarn()
 *	write a warning message to stderr. if "set" the exit value of pax
 *	will be non-zero.
 */

void
syswarn(int set, int errnum, const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	if (set)
		exit_val = 1;
	/*
	 * when vflag we better ship out an extra \n to get this message on a
	 * line by itself
	 */
	if (vfpart) {
		(void)fflush(listf);
		(void)fputc('\n', stderr);
		vfpart = 0;
	}
	(void)fprintf(stderr, "%s: ", argv0);
	(void)vfprintf(stderr, fmt, ap);
	va_end(ap);

	/*
	 * format and print the errno
	 */
	if (errnum > 0)
		(void)fprintf(stderr, ": %s", strerror(errnum));
	(void)fputc('\n', stderr);
}

/*
 * fdgetline()
 *	read a line from a file descriptor, similar to fgetln(3).
 *	caller must free(3) the result string.
 */

char fdgetline_err;

char *
fdgetline(int fd)
{
	size_t n = 0;
	char *rv = NULL;
	size_t z = 32;
	ssize_t rdr;
	char *np;
	int term;

	term = zeroflag ? '\0' : '\n';	/* path termination character */

	goto fdgetline_alloc;

	do {
		if (n == z) {
			z <<= 1;
			if (z < n) {
				/* overflow */
				break;
			}
 fdgetline_alloc:
			if ((np = realloc(rv, z)) == NULL) {
				/* allocation error */
				break;
			}
			rv = np;
		}

		rdr = read(fd, rv + n, 1);
		if (rdr == 0 && n == 0) {
			/* EOF reached, but nothing ever read */
			free(rv);
			rv = NULL;
			goto fdgetline_eod;
		}
		if (rdr == 0 || (rdr == 1 && rv[n] == term)) {
			/* EOF or EOL */
			rv[n++] = 0;
			if ((np = realloc(rv, n)) != NULL)
				rv = np;
 fdgetline_eod:
			fdgetline_err = 0;
			return (rv);
		}
		++n;
	} while (rdr == 1);

	/* fall through do-while if rdr > 1 (read too much) or < 0 (error) */
	/* get here via break on memory allocation errors */

	free(rv);
	fdgetline_err = 1;
	return (NULL);
}
@


1.12
log
@apply changes from mpax-erstmalnurderbackport branch not related to the CVEs
@
text
@d1 1
a1 1
/*	$OpenBSD: tty_subs.c,v 1.14 2009/10/27 23:59:22 deraadt Exp $	*/
d39 1
a39 3
#define _GNU_SOURCE
#include <sys/param.h>
#include <sys/time.h>
d41 1
d43 1
a44 3
#include <errno.h>
#include <unistd.h>
#include <stdarg.h>
d47 5
a51 1
#include <time.h>
d75 2
a76 2
	if ((ttyfd = open(devtty, O_RDWR)) == -1 && iflag) {
		paxwarn(1, "Fatal error, cannot open %s", devtty);
d100 1
a100 6
#ifdef _FORTIFY_SOURCE
			/* booh */
			len = write(ttyfd, cp, len);
#else
			write(ttyfd, cp, len);
#endif
d109 1
a109 2
 *	read a string from the controlling terminal if it is open into the
 *	supplied buffer
d111 1
a111 1
 *	pointer caller must free if data was read, NULL otherwise.
@


1.11
log
@oops, the input routines too
@
text
@d5 2
a6 2
 * Copyright (c) 2012, 2014
 *	Thorsten Glaser <tg@@mirbsd.org>
@


1.10
log
@oops, I made mist during rewriting this function
@
text
@d5 1
a5 1
 * Copyright (c) 2012
d54 1
a54 1
__RCSID("$MirOS: src/bin/pax/tty_subs.c,v 1.9 2012/06/05 20:20:28 tg Exp $");
d205 3
d233 1
a233 1
		if (rdr == 0 || (rdr == 1 && rv[n] == '\n')) {
@


1.9
log
@_FORTIFY_MY_ARSE
@
text
@d54 1
a54 1
__RCSID("$MirOS: src/bin/pax/tty_subs.c,v 1.8 2012/06/05 19:19:45 tg Exp $");
d74 1
a74 1
	if ((ttyfd = open(devtty, O_RDWR)) == -1) {
@


1.8
log
@get rid of fgetln wrapped by get_line
@
text
@d54 1
a54 1
__RCSID("$MirOS: src/bin/pax/tty_subs.c,v 1.7 2012/06/05 19:09:41 tg Exp $");
d99 4
d104 1
@


1.7
log
@change tty_read(buf,sz) to buf=tty_rd() in callers so fdgetline() conversion makes sense
@
text
@d5 2
d54 1
a54 1
__RCSID("$MirOS: src/bin/pax/tty_subs.c,v 1.6 2012/06/05 18:52:16 tg Exp $");
@


1.6
log
@• add a fdgetline() helper function to prepare to get rid off stdio
  almost entirely (save {,v}asprintf and fprintf(stderr, …) calls)
• just use UNIX I/O in tty_subs
@
text
@d52 1
a52 1
__RCSID("$MirOS: src/bin/pax/tty_subs.c,v 1.5 2012/05/20 16:13:20 tg Exp $");
d105 1
a105 1
 * tty_read()
d109 1
a109 1
 *	0 if data was read, -1 otherwise.
d112 2
a113 2
int
tty_read(char *str, int len)
d115 1
a115 7
	char *cp;

	if (ttyfd == -1 || (cp = fdgetline(ttyfd)) == NULL)
		return (-1);
	strlcpy(str, cp, len);
	free(cp);
	return (0);
@


1.5
log
@get rid of extern.h including other headers
@
text
@d37 1
d52 1
a52 1
__RCSID("$MirOS: src/bin/pax/tty_subs.c,v 1.4 2012/02/16 16:01:09 tg Exp $");
d58 4
a61 3
#define DEVTTY		"/dev/tty"	/* device for interactive i/o */
static FILE *ttyoutf = NULL;		/* output pointing at control tty */
static FILE *ttyinf = NULL;		/* input pointing at control tty */
d72 3
a74 9
	int ttyfd;

	if ((ttyfd = open(DEVTTY, O_RDWR)) >= 0) {
		if ((ttyoutf = fdopen(ttyfd, "w")) != NULL) {
			if ((ttyinf = fdopen(ttyfd, "r")) != NULL)
				return(0);
			(void)fclose(ttyoutf);
		}
		(void)close(ttyfd);
d77 1
a77 5
	if (iflag) {
		paxwarn(1, "Fatal error, cannot open %s", DEVTTY);
		return(-1);
	}
	return(0);
d90 2
d94 6
a99 3
	if (ttyoutf == NULL) {
		va_end(ap);
		return;
a100 1
	(void)vfprintf(ttyoutf, fmt, ap);
a101 1
	(void)fflush(ttyoutf);
d115 1
a115 2
	if (ttyinf == NULL || fgets(str, len, ttyinf) == NULL)
		return(-1);
d117 5
a121 5
	/*
	 * strip off that trailing newline
	 */
	str[strcspn(str, "\n")] = '\0';
	return(0);
d187 61
@


1.4
log
@implement the GNU cpio option -V (print a dot per file processed)
sponsored by tarent solutions GmbH for work on evolvis (FusionForge)
@
text
@d44 1
d47 1
a49 1
#include <stdarg.h>
d51 1
a51 1
__RCSID("$MirOS: src/bin/pax/tty_subs.c,v 1.3 2012/02/12 00:27:19 tg Exp $");
@


1.3
log
@merge OpenBSD
@
text
@d50 1
a50 1
__RCSID("$MirOS: src/bin/pax/tty_subs.c,v 1.2 2007/02/17 04:52:41 tg Exp $");
d147 1
a147 1
	if (vflag && vfpart) {
d176 1
a176 1
	if (vflag && vfpart) {
@


1.2
log
@__CRAZY clean
@
text
@d1 1
a1 1
/*	$OpenBSD: tty_subs.c,v 1.12 2003/06/02 23:32:09 millert Exp $	*/
d50 1
a50 2
__SCCSID("@@(#)tty_subs.c	8.2 (Berkeley) 4/18/94");
__RCSID("$MirOS$");
d119 1
a119 3
	char *pt;

	if ((--len <= 0) || (ttyinf == NULL) || (fgets(str,len,ttyinf) == NULL))
a120 1
	*(str + len) = '\0';
d125 1
a125 2
	if ((pt = strchr(str, '\n')) != NULL)
		*pt = '\0';
@


1.1
log
@Initial revision
@
text
@d37 1
a37 9
#ifndef lint
#if 0
static const char sccsid[] = "@@(#)tty_subs.c	8.2 (Berkeley) 4/18/94";
#else
static const char rcsid[] = "$OpenBSD: tty_subs.c,v 1.12 2003/06/02 23:32:09 millert Exp $";
#endif
#endif /* not lint */

#include <sys/types.h>
a39 1
#include <sys/param.h>
d50 3
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@import up-to-date pax from OpenBSD 5.1-current
@
text
@d1 1
a1 1
/*	$OpenBSD: tty_subs.c,v 1.14 2009/10/27 23:59:22 deraadt Exp $	*/
d37 8
d126 3
a128 1
	if (ttyinf == NULL || fgets(str, len, ttyinf) == NULL)
d130 1
d135 2
a136 1
	str[strcspn(str, "\n")] = '\0';
@


1.1.1.3
log
@pull newer paxtar from OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: tty_subs.c,v 1.16 2014/11/23 05:28:12 guenther Exp $	*/
d40 1
d70 1
a70 1
	if ((ttyfd = open(DEVTTY, O_RDWR | O_CLOEXEC)) >= 0) {
@


1.1.1.4
log
@revert the import; we’ll just backport the CVE fixes, for now ☹
@
text
@d1 1
a1 1
/*	$OpenBSD: tty_subs.c,v 1.14 2009/10/27 23:59:22 deraadt Exp $	*/
a39 1
#include <sys/param.h>
d69 1
a69 1
	if ((ttyfd = open(DEVTTY, O_RDWR)) >= 0) {
@


1.1.1.5
log
@Import latest OpenBSD paxtar, unmodified, into vendor branch
@
text
@d1 1
a1 1
/*	$OpenBSD: tty_subs.c,v 1.17 2016/08/26 04:22:13 guenther Exp $	*/
d38 1
d40 1
a41 1
#include <stdarg.h>
d43 3
a46 2
#include <unistd.h>

d49 1
d70 1
a70 1
	if ((ttyfd = open(DEVTTY, O_RDWR | O_CLOEXEC)) >= 0) {
@


1.1.1.5.2.1
log
@extremely rudimentary conversion to mirtoconf, doesn’t even build yet
@
text
@a42 3
#if HAVE_STRINGS_H
#include <strings.h>
#endif
@


1.1.1.5.2.2
log
@some more goodies
@
text
@a4 2
 * Copyright (c) 2012, 2014, 2016
 *	mirabilos <m@@mirbsd.org>
d55 3
a57 4
/* device for interactive I/O */
static const char devtty[] = "/dev/tty";
/* file descriptor for accessing it */
static int ttyfd;
d68 9
a76 3
	if ((ttyfd = open(devtty, O_RDWR | O_CLOEXEC)) == -1 && iflag) {
		syswarn(1, errno, "Fatal error, cannot open %s", devtty);
		return (-1);
d79 5
a83 1
	return (0);
a95 2
	char *cp;
	int len;
d98 3
a100 6
	if (ttyfd != -1) {
		len = vasprintf(&cp, fmt, ap);
		if (len != -1) {
			dwrite(ttyfd, cp, len);
			free(cp);
		}
d102 1
d104 1
d108 3
a110 2
 * tty_rd()
 *	read a string from the controlling terminal if it is open
d112 1
a112 1
 *	pointer caller must free if data was read, NULL otherwise
d115 2
a116 2
char *
tty_rd(void)
d118 8
a125 1
	return (ttyfd == -1 ? NULL : fdgetline(ttyfd));
d146 1
a146 1
	if (vfpart) {
d175 1
a175 1
	if (vfpart) {
a190 64

/*
 * fdgetline()
 *	read a line from a file descriptor, similar to fgetln(3).
 *	caller must free(3) the result string.
 */

char fdgetline_err;

char *
fdgetline(int fd)
{
	size_t n = 0;
	char *rv = NULL;
	size_t z = 32;
	ssize_t rdr;
	char *np;
	int term;

	term = zeroflag ? '\0' : '\n';	/* path termination character */

	goto fdgetline_alloc;

	do {
		if (n == z) {
			z <<= 1;
			if (z < n) {
				/* overflow */
				break;
			}
 fdgetline_alloc:
			if ((np = realloc(rv, z)) == NULL) {
				/* allocation error */
				break;
			}
			rv = np;
		}

		rdr = read(fd, rv + n, 1);
		if (rdr == 0 && n == 0) {
			/* EOF reached, but nothing ever read */
			free(rv);
			rv = NULL;
			goto fdgetline_eod;
		}
		if (rdr == 0 || (rdr == 1 && rv[n] == term)) {
			/* EOF or EOL */
			rv[n++] = 0;
			if ((np = realloc(rv, n)) != NULL)
				rv = np;
 fdgetline_eod:
			fdgetline_err = 0;
			return (rv);
		}
		++n;
	} while (rdr == 1);

	/* fall through do-while if rdr > 1 (read too much) or < 0 (error) */
	/* get here via break on memory allocation errors */

	free(rv);
	fdgetline_err = 1;
	return (NULL);
}
@


1.1.1.5.2.3
log
@solution for rare open flags, also uses O_BINARY like in mksh
@
text
@d71 1
a71 1
	if ((ttyfd = binopen2(BO_CLEXEC, devtty, O_RDWR)) == -1 && iflag) {
@


1.1.1.5.2.4
log
@huh… it builds
@
text
@a40 1
#include <errno.h>
a43 1
#include <stdlib.h>
@


