head	1.11;
access;
symbols
	MIRBSD_10:1.5.0.2
	MIRBSD_10_BASE:1.5
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200507211800:1.1.1.2
	cvs-200507091450:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2017.08.07.20.10.26;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005988C69344442E37;

1.10
date	2016.01.02.21.32.58;	author tg;	state Exp;
branches;
next	1.9;
commitid	10056884200442406AA;

1.9
date	2015.02.26.21.13.28;	author tg;	state Exp;
branches;
next	1.8;
commitid	10054EF8C79263CAECC;

1.8
date	2010.09.21.21.24.02;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004C992261692DCA0F;

1.7
date	2009.01.17.11.27.05;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004971C0833901631B;

1.6
date	2008.03.30.20.05.47;	author tg;	state Exp;
branches;
next	1.5;
commitid	10047EFF2A915A39C7A;

1.5
date	2008.03.02.20.20.45;	author tg;	state Exp;
branches
	1.5.2.1;
next	1.4;
commitid	10047CB0C3460276F0B;

1.4
date	2008.03.02.20.08.56;	author tg;	state Exp;
branches;
next	1.3;
commitid	10047CB08ED6D7C3932;

1.3
date	2008.03.02.19.45.04;	author tg;	state Exp;
branches;
next	1.2;
commitid	10047CB03A13133C261;

1.2
date	2007.07.05.23.09.33;	author tg;	state Exp;
branches;
next	1.1;
commitid	100468D7A224CDB6D5A;

1.1
date	2005.02.05.17.22.06;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.5.2.1
date	2008.03.30.20.08.00;	author tg;	state Exp;
branches;
next	;
commitid	10047EFF32D0A396A42;

1.1.1.1
date	2005.02.05.17.22.06;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.09.14.53.46;	author tg;	state Exp;
branches;
next	;
commitid	7f8f42cfe50a2498;


desc
@@


1.11
log
@filesystem
@
text
@/* $MirOS: src/bin/rm/rm.c,v 1.10 2016/01/02 21:32:58 tg Exp $ */
/* $NetBSD: rm.c,v 1.46 2007/06/24 17:59:31 christos Exp $ */
/* $OpenBSD: rm.c,v 1.18 2005/06/14 19:15:35 millert Exp $ */

/*-
 * Copyright (c) 1990, 1993, 1994, 2003
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/cdefs.h>
__COPYRIGHT("@@(#) Copyright (c) 1990, 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n");
__SCCSID("@@(#)rm.c	8.8 (Berkeley) 4/27/95");
__RCSID("$NetBSD: rm.c,v 1.46 2007/06/24 17:59:31 christos Exp $");
__RCSID("$MirOS: src/bin/rm/rm.c,v 1.10 2016/01/02 21:32:58 tg Exp $");

#include <sys/param.h>
#include <sys/stat.h>
#include <sys/mount.h>

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <fts.h>
#include <grp.h>
#include <libgen.h>
#include <locale.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pwd.h>
#include <grp.h>

extern const char *__progname;

int dflag, eval, fflag, iflag, Pflag, stdin_ok, vflag;

int	check(char *, char *, struct stat *);
void	checkdot(char **);
void	rm_file(char **);
int	rm_overwrite(char *, struct stat *);
void	rm_tree(char **);
void	usage(void) __dead;

/*
 * For the sake of the `-f' flag, check whether an error number indicates the
 * failure of an operation due to an non-existent file, either per se (ENOENT)
 * or because its filename argument was illegal (ENAMETOOLONG, ENOTDIR).
 */
#define NONEXISTENT(x) \
    ((x) == ENOENT || (x) == ENAMETOOLONG || (x) == ENOTDIR)

/*
 * rm --
 *	This rm is different from historic rms, but is expected to match
 *	POSIX 1003.2 behavior.  The most visible difference is that -f
 *	has two specific effects now, ignore non-existent files and force
 *	file removal.
 */
int
main(int argc, char *argv[])
{
	int ch, rflag;

	setlocale(LC_ALL, "");

	Pflag = rflag = 0;
	while ((ch = getopt(argc, argv, "dfiPRrv")) != -1)
		switch (ch) {
		case 'd':
			dflag = 1;
			break;
		case 'f':
			fflag = 1;
			iflag = 0;
			break;
		case 'i':
			fflag = 0;
			iflag = 1;
			break;
		case 'P':
			Pflag = 1;
			break;
		case 'R':
		case 'r':			/* Compatibility. */
			rflag = 1;
			break;
		case 'v':
			vflag = 1;
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc < 1 && fflag == 0)
		usage();

	checkdot(argv);

	if (*argv) {
		stdin_ok = isatty(STDIN_FILENO);

		if (rflag)
			rm_tree(argv);
		else
			rm_file(argv);
	}

	exit(eval);
	/* NOTREACHED */
}

#define TRYRENAME(fn, func, rv) do {				\
	char dname[MAXPATHLEN];					\
	size_t dcount = strlen(fn);				\
	uint64_t dhash = dcount * (intptr_t)(fn);		\
	const char *dnp = dname;				\
								\
	/* for fun: push back hash of original pathname */	\
	while (dcount--)					\
		dhash += (fn)[dcount] * dcount;			\
	arc4random_pushb_fast(&dhash, sizeof(dhash));		\
								\
	/* try to rename entry randomly before removal */	\
	errno = 0;						\
	do {							\
		if (NONEXISTENT(errno)) {			\
			dnp = (fn);				\
			break;					\
		}						\
		if ((size_t)snprintf(dname, sizeof (dname),	\
		    "%s/rm.%08X", dirname(fn),			\
		    arc4random()) >= (sizeof(dname) + 5)) {	\
			/* resulting path would be too long */	\
			memcpy(dname, (fn), strlen(fn) + 1);	\
			break;					\
		}						\
	} while (rename((fn), dname));				\
	rv = func(dnp);						\
} while (/* CONSTCOND */ 0)

void
rm_tree(char **argv)
{
	FTS *fts;
	FTSENT *p;
	int flags, needstat, rval;

	/*
	 * Remove a file hierarchy.  If forcing removal (-f), or interactive
	 * (-i) or can't ask anyway (stdin_ok), don't stat the file.
	 */
	needstat = !fflag && !iflag && stdin_ok;

	/*
	 * If the -i option is specified, the user can skip on the pre-order
	 * visit.  The fts_number field flags skipped directories.
	 */
#define	SKIPPED	1

	flags = FTS_PHYSICAL;
	if (!needstat)
		flags |= FTS_NOSTAT;
	if (!(fts = fts_open(argv, flags,
	    (int (*)(const FTSENT **, const FTSENT **))NULL)))
		err(1, NULL);
	while ((p = fts_read(fts)) != NULL) {

		switch (p->fts_info) {
		case FTS_DNR:
			if (!fflag || p->fts_errno != ENOENT) {
				warnx("%s: %s", p->fts_path,
				    strerror(p->fts_errno));
				eval = 1;
			}
			continue;
		case FTS_ERR:
			errx(EXIT_FAILURE, "%s: %s", p->fts_path,
			    strerror(p->fts_errno));
			/* NOTREACHED */
		case FTS_NS:
			/*
			 * FTS_NS: assume that if can't stat the file, it
			 * can't be unlinked.
			 */
			if (fflag && NONEXISTENT(p->fts_errno))
				continue;
			if (needstat) {
				warnx("%s: %s", p->fts_path,
				    strerror(p->fts_errno));
				eval = 1;
				continue;
			}
			break;
		case FTS_D:
			/* Pre-order: give user chance to skip. */
			if (!fflag && !check(p->fts_path, p->fts_accpath,
			    p->fts_statp)) {
				(void)fts_set(fts, p, FTS_SKIP);
				p->fts_number = SKIPPED;
			}
			continue;
		case FTS_DP:
			/* Post-order: see if user skipped. */
			if (p->fts_number == SKIPPED)
				continue;
			break;
		default:
			if (!fflag &&
			    !check(p->fts_path, p->fts_accpath, p->fts_statp))
				continue;
		}

		rval = 0;
		/*
		 * If we can't read or search the directory, may still be
		 * able to remove it.  Don't print out the un{read,search}able
		 * message unless the remove fails.
		 */
		switch (p->fts_info) {
		case FTS_DP:
		case FTS_DNR:
			if (Pflag)
				TRYRENAME(p->fts_accpath, rmdir, rval);
			else
				rval = rmdir(p->fts_accpath);
			if (rval != 0 && fflag && errno == ENOENT)
				continue;
			break;

		default:
			if (Pflag) {
				if (rm_overwrite(p->fts_accpath, NULL))
					continue;
				TRYRENAME(p->fts_accpath, unlink, rval);
			} else
				rval = unlink(p->fts_accpath);
			if (rval != 0 && fflag && NONEXISTENT(errno))
				continue;
			break;
		}
		if (rval != 0) {
			warn("%s", p->fts_path);
			eval = 1;
		} else if (vflag)
			(void)printf("%s\n", p->fts_path);
	}
	if (errno)
		err(1, "fts_read");
	fts_close(fts);
}

void
rm_file(char **argv)
{
	struct stat sb;
	int rval;
	char *f;

	/*
	 * Remove a file.  POSIX 1003.2 states that, by default, attempting
	 * to remove a directory is an error, so must always stat the file.
	 */
	while ((f = *argv++) != NULL) {
		/* Assume if can't stat the file, can't unlink it. */
		if (lstat(f, &sb)) {
			if (!fflag || !NONEXISTENT(errno)) {
				warn("%s", f);
				eval = 1;
			}
			continue;
		}

		if (S_ISDIR(sb.st_mode) && !dflag) {
			warnx("%s: is a directory", f);
			eval = 1;
			continue;
		}
		if (!fflag && !check(f, f, &sb))
			continue;
		else if (S_ISDIR(sb.st_mode)) {
			if (Pflag)
				TRYRENAME(f, rmdir, rval);
			else
				rval = rmdir(f);
		} else {
			if (Pflag) {
				if (rm_overwrite(f, &sb))
					continue;
				TRYRENAME(f, unlink, rval);
			} else
				rval = unlink(f);
		}
		if (rval && (!fflag || !NONEXISTENT(errno))) {
			warn("%s", f);
			eval = 1;
		}
		if (vflag && rval == 0)
			(void)printf("%s\n", f);
	}
}

/*
 * rm_overwrite --
 *	Overwrite the file 3 times with varying bit patterns.
 *
 * This is an expensive way to keep people from recovering files from your
 * non-snapshotted FFS filesystems using fsdb(8).  Really.  No more.  Only
 * regular files are deleted, directories will remain.
 * However, names are no longer recoverable as any entries deleted with -P
 * are renamed to entries with the basename “rm.XXXXXXXX” (where ‘X’en are
 * generated randomly) in the same parent directory first if the length of
 * the entire pathname (including that “/rm.XXXXXXXX”) is smaller than the
 * maximum allowed pathname length, i.e. 1024 on MirBSD.
 * Also, this assumes a fixed-block filesystem (like FFS, or a V7 or a
 * System V filesystem).  In a logging filesystem, you'll have to have
 * kernel support.
 *
 * A note on standards:  U.S. DoD 5220.22-M "National Industrial Security
 * Program Operating Manual" ("NISPOM") is often cited as a reference
 * for clearing and sanitizing magnetic media.  In fact, a matrix of
 * "clearing" and "sanitization" methods for various media was given in
 * Chapter 8 of the original 1995 version of NISPOM.  However, that
 * matrix was *removed from the document* when Chapter 8 was rewritten
 * in Change 2 to the document in 2001.  Recently, the Defense Security
 * Service has made a revised clearing and sanitization matrix available
 * in Microsoft Word format on the DSS web site.  The standardization
 * status of this matrix is unclear.  Furthermore, one must be very
 * careful when referring to this matrix: it is intended for the "clearing"
 * prior to reuse or "sanitization" prior to disposal of *entire media*,
 * not individual files and the only non-physically-destructive method of
 * "sanitization" that is permitted for magnetic disks of any kind is
 * specifically noted to be prohibited for media that have contained
 * Top Secret data.
 *
 * It is impossible to actually conform to the exact procedure given in
 * the matrix if one is overwriting a file, not an entire disk, because
 * the procedure requires examination and comparison of the disk's defect
 * lists.  Any program that claims to securely erase *files* while
 * conforming to the standard, then, is not correct.  We do as much of
 * what the standard requires as can actually be done when erasing a
 * file, rather than an entire disk; but that does not make us conformant.
 *
 * Furthermore, the presence of track caches, disk and controller write
 * caches, and so forth make it extremely difficult to ensure that data
 * have actually been written to the disk, particularly when one tries
 * to repeatedly overwrite the same sectors in quick succession.  We call
 * fsync(), but controllers with nonvolatile cache, as well as IDE disks
 * that just plain lie about the stable storage of data, will defeat this.
 *
 * Finally, widely respected research suggests that the given procedure
 * is nowhere near sufficient to prevent the recovery of data using special
 * forensic equipment and techniques that are well-known.  This is
 * presumably one reason that the matrix requires physical media destruction,
 * rather than any technique of the sort attempted here, for secret data.
 *
 * Caveat Emptor.
 *
 * rm_overwrite will return 0 on success.
 */
int
rm_overwrite(char *file, struct stat *sbp)
{
	struct statfs fsb;
	size_t bsize;
	char *buf = NULL;

	struct stat sb;
	int fd;
	char randchar;

	fd = -1;
	if (sbp == NULL) {
		if (lstat(file, &sb))
			goto err;
		sbp = &sb;
	}
	if (!S_ISREG(sbp->st_mode))
		return (0);
	if (sbp->st_nlink > 1) {
		warnx("%s (inode %u): not overwritten due to multiple links",
		    file, sbp->st_ino);
		/* if -f return success else failure */
		return (fflag ? 0 : 1);
	}

	/* flags to try to defeat hidden caching by forcing seeks */
	if ((fd = open(file, O_RDWR|O_SYNC|O_RSYNC, 0)) == -1)
		goto err;

	/* find out optimal transfer size */
	if (fstatfs(fd, &fsb) == -1)
		goto err;
	bsize = MAX(fsb.f_iosize, 131072U);
	if ((buf = malloc(bsize)) == NULL)
		err(1, "%s: malloc", file);

#define RAND_BYTES	1
#define THIS_BYTE	0

#define	WRITE_PASS(mode, byte, buf, bufsz) do {				\
	off_t len;							\
	size_t wlen;							\
									\
	if (fsync(fd) || lseek(fd, (off_t)0, SEEK_SET))			\
		goto err;						\
									\
	if (mode == THIS_BYTE)						\
		memset(buf, byte, bufsz);				\
	for (len = sbp->st_size; len > 0; len -= wlen) {		\
		wlen = MIN(len, bufsz);					\
		if (mode == RAND_BYTES)					\
			arc4random_buf(buf, wlen);			\
		if ((size_t)write(fd, buf, wlen) != wlen)		\
			goto err;					\
	}								\
	sync();		/* another poke at hidden caches */		\
} while (/* CONSTCOND */ 0)

#define READ_PASS(byte, buf, bufsz) do {				\
	off_t len;							\
	size_t rlen;							\
	char pattern[bufsz];						\
									\
	if (fsync(fd) || lseek(fd, (off_t)0, SEEK_SET))			\
		goto err;						\
									\
	memset(pattern, byte, bufsz);					\
	for (len = sbp->st_size; len > 0; len -= rlen) {		\
		rlen = MIN(len, bufsz);					\
		if ((size_t)read(fd, buf, rlen) != rlen)		\
			goto err;					\
		if (memcmp(buf, pattern, rlen))				\
			goto err;					\
	}								\
	sync();		/* another poke at hidden caches */		\
} while (/* CONSTCOND */ 0)

	/*
	 * DSS sanitization matrix "clear" for magnetic disks:
	 * option 'c' "Overwrite all addressable locations with a single
	 * character."
	 */
	randchar = (char)arc4random();
	WRITE_PASS(THIS_BYTE, randchar, buf, bsize);

	/*
	 * DSS sanitization matrix "sanitize" for magnetic disks:
	 * option 'd', sub 2 "Overwrite all addressable locations with a
	 * character, then its complement.  Verify "complement" character
	 * was written successfully to all addressable locations, then
	 * overwrite all addressable locations with random characters; or
	 * verify third overwrite of random characters."  The rest of the
	 * text in d-sub-2 specifies requirements for overwriting spared
	 * sectors; we cannot conform to it when erasing only a file, thus
	 * we do not conform to the standard.
	 */

	/* 1. "a character" */
	WRITE_PASS(THIS_BYTE, 0xAA, buf, bsize);

	/* 2. "its complement" */
	WRITE_PASS(THIS_BYTE, 0x55, buf, bsize);

	/* 3. "Verify 'complement' character" */
	READ_PASS(0x55, buf, bsize);

	/* 4. "overwrite all addressable locations with random characters" */

	WRITE_PASS(RAND_BYTES, 0, buf, bsize);

	/*
	 * As the file might be huge, and we note that this revision of
	 * the matrix says "random characters", not "a random character"
	 * as the original did, we do not verify the random-character
	 * write; the "or" in the standard allows this.
	 */

	if (buf != NULL) {
		free(buf);
		buf = NULL;
	}

	if (close(fd) == -1) {
		fd = -1;
		goto err;
	}

	return (0);

err:	eval = 1;
	if (buf != NULL)
		free(buf);
	warn("%s", file);
	if (fd != -1)
		close(fd);
	return (1);
}

int
check(char *path, char *name, struct stat *sp)
{
	int ch, first;
	char modep[15];

	/* Check -i first. */
	if (iflag)
		(void)fprintf(stderr, "remove '%s'? ", path);
	else {
		/*
		 * If it's not a symbolic link and it's unwritable and we're
		 * talking to a terminal, ask.  Symbolic links are excluded
		 * because their permissions are meaningless.  Check stdin_ok
		 * first because we may not have stat'ed the file.
		 */
		errno = 0;
		if (!stdin_ok || S_ISLNK(sp->st_mode) ||
		    !(access(name, W_OK) && (errno != ETXTBSY)))
			return (1);
		if (NONEXISTENT(errno))
			return (0);
		strmode(sp->st_mode, modep);
		if (Pflag) {
			warnx(
			    "%s: -P was specified but file could not"
			    " be overwritten", path);
			return 0;
		}
		(void)fprintf(stderr, "override %s%s%s:%s for '%s'? ",
		    modep + 1, modep[9] == ' ' ? "" : " ",
		    user_from_uid(sp->st_uid, 0),
		    group_from_gid(sp->st_gid, 0), path);
	}
	(void)fflush(stderr);

	first = ch = getchar();
	while (ch != '\n' && ch != EOF)
		ch = getchar();
	return (first == 'y' || first == 'Y');
}

/*
 * POSIX.2 requires that if "." or ".." are specified as the basename
 * portion of an operand, a diagnostic message be written to standard
 * error and nothing more be done with such operands.
 *
 * Since POSIX.2 defines basename as the final portion of a path after
 * trailing slashes have been removed, we'll remove them here.
 */
#define ISDOT(a)	((a)[0] == '.' && (!(a)[1] || ((a)[1] == '.' && !(a)[2])))
void
checkdot(char **argv)
{
	char *p, **save, **t;
	int complained;

	complained = 0;
	for (t = argv; *t;) {
		/* strip trailing slashes */
		p = strrchr(*t, '\0');
		while (--p > *t && *p == '/')
			*p = '\0';

		/* extract basename */
		if ((p = strrchr(*t, '/')) != NULL)
			++p;
		else
			p = *t;

		if (ISDOT(p)) {
			if (!complained++)
				warnx("\".\" and \"..\" may not be removed");
			eval = 1;
			for (save = t; (t[0] = t[1]) != NULL; ++t)
				continue;
			t = save;
		} else
			++t;
	}
}

void
usage(void)
{
	(void)fprintf(stderr, "usage: %s [-f|-i] [-dPRrv] file ...\n",
	    __progname);
	exit(1);
	/* NOTREACHED */
}
@


1.10
log
@remove #ifndef __MirBSD__ before setlocale(); related changes
@
text
@d1 1
a1 1
/* $MirOS: src/bin/rm/rm.c,v 1.9 2015/02/26 21:13:28 tg Exp $ */
d39 1
a39 1
__RCSID("$MirOS: src/bin/rm/rm.c,v 1.9 2015/02/26 21:13:28 tg Exp $");
d343 2
a344 2
 * Also, this assumes a fixed-block file system (like FFS, or a V7 or a
 * System V file system).  In a logging file system, you'll have to have
@


1.9
log
@don’t loop endlessly, nor bitch, if someone else removed something
in a directory during an “rm -Pr” run; also, get rid of unused vars
@
text
@d1 1
a1 1
/* $MirOS: src/bin/rm/rm.c,v 1.8 2010/09/21 21:24:02 tg Exp $ */
d39 1
a39 1
__RCSID("$MirOS: src/bin/rm/rm.c,v 1.8 2010/09/21 21:24:02 tg Exp $");
a90 1
#ifndef __MirBSD__	/* irrelevant, as there is only one locale */
a91 1
#endif
@


1.8
log
@use arc4random() a bit more efficiently
@
text
@d1 1
a1 1
/* $MirOS: src/bin/rm/rm.c,v 1.7 2009/01/17 11:27:05 tg Exp $ */
d39 1
a39 1
__RCSID("$MirOS: src/bin/rm/rm.c,v 1.7 2009/01/17 11:27:05 tg Exp $");
d147 1
d155 1
d157 4
d169 1
a169 1
	rv = func(dname);					\
d433 1
a433 2
	size_t wlen, i;							\
	u_int32_t *qbuf = (u_int32_t *)buf;				\
d546 1
d550 2
@


1.7
log
@do not rename to 「.rm.*」 but 「rm.*」 so that the user doesn’t oversee
the files left if the rename op fails
@
text
@d1 1
a1 1
/* $MirOS: src/bin/rm/rm.c,v 1.6 2008/03/30 20:05:47 tg Exp $ */
d39 1
a39 1
__RCSID("$MirOS: src/bin/rm/rm.c,v 1.6 2008/03/30 20:05:47 tg Exp $");
d151 1
a151 1
	arc4random_pushb(&dhash, sizeof (dhash));		\
d157 1
a157 1
		    arc4random()) >= (sizeof (dname) + 5)) {	\
a435 5
		if (mode == RAND_BYTES) {				\
			i = 0;						\
			while (i < (bufsz / sizeof (u_int32_t)))	\
				qbuf[i++] = arc4random();		\
		}							\
d437 2
@


1.6
log
@plug a memory leak in the -P option (not normally used)
@
text
@d1 1
a1 1
/* $MirOS: src/bin/rm/rm.c,v 1.5 2008/03/02 20:20:45 tg Exp $ */
d39 1
a39 1
__RCSID("$MirOS: src/bin/rm/rm.c,v 1.5 2008/03/02 20:20:45 tg Exp $");
d156 1
a156 1
		    "%s/.rm.%08X", dirname(fn),			\
d335 1
a335 1
 * are renamed to an entry with the basename “.rm.XXXXXXXX” (where ‘X’ are
d337 1
a337 1
 * the entire pathname (including the “/.rm.XXXXXXXX”) is smaller than the
@


1.5
log
@shorten (use a macro) and use arc4random_pushb
@
text
@d1 1
a1 1
/* $MirOS: src/bin/rm/rm.c,v 1.4 2008/03/02 20:08:56 tg Exp $ */
d39 1
a39 1
__RCSID("$MirOS: src/bin/rm/rm.c,v 1.4 2008/03/02 20:08:56 tg Exp $");
d507 5
d520 2
@


1.5.2.1
log
@MFC: plug a memory leak in normally not used -P option
@
text
@d1 1
a1 1
/* $MirOS: src/bin/rm/rm.c,v 1.6 2008/03/30 20:05:47 tg Exp $ */
d39 1
a39 1
__RCSID("$MirOS: src/bin/rm/rm.c,v 1.6 2008/03/30 20:05:47 tg Exp $");
a506 5
	if (buf != NULL) {
		free(buf);
		buf = NULL;
	}

a514 2
	if (buf != NULL)
		free(buf);
@


1.4
log
@rename pathnames (of files, directories, and all other entries) to
randomly generated basenames within the same parent directory before
removing (unlink(2), rmdir(2)) them, if -P is given
@
text
@d1 1
a1 1
/* $MirOS: src/bin/rm/rm.c,v 1.3 2008/03/02 19:45:04 tg Exp $ */
d39 1
a39 1
__RCSID("$MirOS: src/bin/rm/rm.c,v 1.3 2008/03/02 19:45:04 tg Exp $");
d143 23
d247 3
a249 19
			if (Pflag) {
				char dname[MAXPATHLEN];

				do {
					/* rename directory before unlinking,
					 * unless the pathname is too long
					 */
					if ((size_t)snprintf(dname,
					    sizeof (dname),
					    "%s/.rm.%08X",
					    dirname(p->fts_accpath),
					    arc4random()) >= sizeof (dname)) {
						memcpy(dname, p->fts_accpath,
						    strlen(p->fts_accpath) + 1);
						break;
					}
				} while (rename(p->fts_accpath, dname));
				rval = rmdir(dname);
			} else
a256 2
				char dname[MAXPATHLEN];

d259 1
a259 15
				do {
					/* rename file before unlinking,
					 * unless the pathname is too long
					 */
					if ((size_t)snprintf(dname,
					    sizeof (dname),
					    "%s/.rm.%08X",
					    dirname(p->fts_accpath),
					    arc4random()) >= sizeof (dname)) {
						memcpy(dname, p->fts_accpath,
						    strlen(p->fts_accpath) + 1);
						break;
					}
				} while (rename(p->fts_accpath, dname));
				rval = unlink(dname);
d306 3
a308 19
			if (Pflag) {
				char dname[MAXPATHLEN];

				do {
					/* rename directory before unlinking,
					 * unless the pathname is too long
					 */
					if ((size_t)snprintf(dname,
					    sizeof (dname),
					    "%s/.rm.%08X",
					    dirname(f),
					    arc4random()) >= sizeof (dname)) {
						memcpy(dname, f,
						    strlen(f) + 1);
						break;
					}
				} while (rename(f, dname));
				rval = rmdir(dname);
			} else
a311 2
				char dname[MAXPATHLEN];

d314 1
a314 14
				do {
					/* rename file before unlinking,
					 * unless the pathname is too long
					 */
					if ((size_t)snprintf(dname,
					    sizeof (dname),
					    "%s/.rm.%08X",
					    dirname(f),
					    arc4random()) >= sizeof (dname)) {
						memcpy(dname, f, strlen(f) + 1);
						break;
					}
				} while (rename(f, dname));
				rval = unlink(dname);
@


1.3
log
@sync with TNF, but use 0x55 and 0xAA as patterns ipv. 0x00 and 0xFF,
and preserve not -P‐overwriting hardlinked files (but they are still
removed if the -f option is given, as a new feature)
@
text
@d1 1
a1 1
/* $MirOS$ */
d39 1
a39 1
__RCSID("$MirOS$");
d50 1
d224 20
a243 1
			rval = rmdir(p->fts_accpath);
d249 22
a270 3
			if (Pflag && rm_overwrite(p->fts_accpath, NULL))
				continue;
			rval = unlink(p->fts_accpath);
d314 22
a335 3
		else if (S_ISDIR(sb.st_mode))
			rval = rmdir(f);
		else {
d337 2
d341 16
a356 2
			}
			rval = unlink(f);
d373 6
a378 1
 * regular files are deleted, directories (and therefore names) will remain.
@


1.2
log
@• #ifdef __MirBSD__
  do not use setlocale() and nl_langinfo(), hardcode it
  #endif
• rcs ids

should greatly reduce space usage of ramdisc
@
text
@d1 3
a3 2
/*	$OpenBSD: rm.c,v 1.18 2005/06/14 19:15:35 millert Exp $	*/
/*	$NetBSD: rm.c,v 1.19 1995/09/07 06:48:50 jtc Exp $	*/
d6 1
a6 1
 * Copyright (c) 1990, 1993, 1994
d38 1
d41 1
a41 1
#include <sys/types.h>
a42 1
#include <sys/param.h>
a44 1
#include <locale.h>
d49 3
d59 1
a59 1
extern char *__progname;
d61 1
a61 1
int dflag, eval, fflag, iflag, Pflag, stdin_ok;
a66 1
int	pass(int, int, off_t, char *, size_t);
d68 9
a76 1
void	usage(void);
d80 1
a80 1
 *	This rm is different from historic rm's, but is expected to match
d83 1
a83 1
 * 	file removal.
d90 1
a90 1
#ifndef __MirBSD__
d95 2
a96 2
	while ((ch = getopt(argc, argv, "dfiPRr")) != -1)
		switch(ch) {
d115 3
d138 2
a139 1
	exit (eval);
d147 1
a147 2
	int needstat;
	int flags;
d164 2
a165 1
	if (!(fts = fts_open(argv, flags, NULL)))
d168 1
d172 2
a173 2
				warnx("%s: %s",
				    p->fts_path, strerror(p->fts_errno));
d178 3
a180 1
			errx(1, "%s: %s", p->fts_path, strerror(p->fts_errno));
d186 5
a190 5
			if (!needstat)
				break;
			if (!fflag || p->fts_errno != ENOENT) {
				warnx("%s: %s",
				    p->fts_path, strerror(p->fts_errno));
d192 1
d194 1
a194 1
			continue;
d214 1
d223 2
a224 2
			if (!rmdir(p->fts_accpath) ||
			    (fflag && errno == ENOENT))
d229 4
a232 5
			if (Pflag)
				if (!rm_overwrite(p->fts_accpath, NULL))
					continue;
			if (!unlink(p->fts_accpath) ||
			    (fflag && errno == ENOENT))
d234 1
d236 5
a240 2
		warn("%s", p->fts_path);
		eval = 1;
d244 1
d261 1
a261 1
			if (!fflag || errno != ENOENT) {
d278 2
a279 2
			if (Pflag)
				if (!rm_overwrite(f, &sb))
d281 1
d284 1
a284 1
		if (rval && (!fflag || errno != ENOENT)) {
d288 2
d297 3
a299 3
 * XXX
 * This is a cheap way to *really* delete files.  Note that only regular
 * files are deleted, directories (and therefore names) will remain.
d303 42
a344 1
 * Returns 1 for success.
a348 1
	struct stat sb;
d351 3
d355 1
a355 1
	char *buf = NULL;
d364 1
a364 1
		return (1);
d368 2
a369 1
		return (0);
d371 3
a373 1
	if ((fd = open(file, O_WRONLY, 0)) == -1)
d375 2
d379 1
a379 1
	bsize = MAX(fsb.f_iosize, 1024U);
d383 87
a469 2
	if (!pass(0xff, fd, sbp->st_size, buf, bsize) || fsync(fd) ||
	    lseek(fd, (off_t)0, SEEK_SET))
d471 1
a471 8
	if (!pass(0x00, fd, sbp->st_size, buf, bsize) || fsync(fd) ||
	    lseek(fd, (off_t)0, SEEK_SET))
		goto err;
	if (!pass(0xff, fd, sbp->st_size, buf, bsize) || fsync(fd))
		goto err;
	close(fd);
	free(buf);
	return (1);
a472 5
err:
	warn("%s", file);
	close(fd);
	eval = 1;
	free(buf);
a473 1
}
d475 4
a478 11
int
pass(int val, int fd, off_t len, char *buf, size_t bsize)
{
	size_t wlen;

	memset(buf, val, bsize);
	for (; len > 0; len -= wlen) {
		wlen = len < bsize ? len : bsize;
		if (write(fd, buf, wlen) != wlen)
			return (0);
	}
d490 1
a490 1
		(void)fprintf(stderr, "remove %s? ", path);
d498 2
a499 1
		if (!stdin_ok || S_ISLNK(sp->st_mode) || !access(name, W_OK))
d502 7
a508 1
		(void)fprintf(stderr, "override %s%s%s/%s for %s? ",
d539 1
a539 1
		p = strrchr (*t, '\0');
d564 2
a565 1
	(void)fprintf(stderr, "usage: %s [-dfiPRrW] file ...\n", __progname);
d567 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: rm.c,v 1.15 2003/06/02 23:32:09 millert Exp $	*/
d33 5
a37 13
#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1990, 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)rm.c	8.8 (Berkeley) 4/27/95";
#else
static char rcsid[] = "$OpenBSD: rm.c,v 1.15 2003/06/02 23:32:09 millert Exp $";
#endif
#endif /* not lint */
d58 1
a58 1
int dflag, eval, fflag, iflag, Pflag, Wflag, stdin_ok;
d63 2
a64 1
void	rm_overwrite(char *, struct stat *);
d80 1
d82 1
d85 1
a85 1
	while ((ch = getopt(argc, argv, "dfiPRrW")) != -1)
a104 3
		case 'W':
			Wflag = 1;
			break;
a150 2
	if (Wflag)
		flags |= FTS_WHITEOUT;
a208 6
		case FTS_W:
			if (!undelete(p->fts_accpath) ||
			    (fflag && errno == ENOENT))
				continue;
			break;

d211 2
a212 1
				rm_overwrite(p->fts_accpath, NULL);
d238 3
a240 8
			if (Wflag) {
				sb.st_mode = S_IFWHT|S_IWUSR|S_IRUSR;
			} else {
				if (!fflag || errno != ENOENT) {
					warn("%s", f);
					eval = 1;
				}
				continue;
a241 3
		} else if (Wflag) {
			warnx("%s: %s", f, strerror(EEXIST));
			eval = 1;
d250 1
a250 1
		if (!fflag && !S_ISWHT(sb.st_mode) && !check(f, f, &sb))
a251 2
		if (S_ISWHT(sb.st_mode))
			rval = undelete(f);
d256 2
a257 1
				rm_overwrite(f, &sb);
d277 1
d279 1
a279 1
void
d284 2
a285 2
	off_t len;
	int bsize, fd, wlen;
d295 1
a295 1
		return;
d299 1
a299 1
		return;
d305 1
a305 1
	bsize = MAX(fsb.f_iosize, 1024);
d307 1
a307 1
		err(1, "malloc");
d309 5
a313 10
#define	PASS(byte) {							\
	memset(buf, byte, bsize);					\
	for (len = sbp->st_size; len > 0; len -= wlen) {		\
		wlen = len < bsize ? len : bsize;			\
		if (write(fd, buf, wlen) != wlen)			\
			goto err;					\
	}								\
}
	PASS(0xff);
	if (fsync(fd) || lseek(fd, (off_t)0, SEEK_SET))
d315 1
a315 2
	PASS(0x00);
	if (fsync(fd) || lseek(fd, (off_t)0, SEEK_SET))
d317 3
a319 5
	PASS(0xff);
	if (!fsync(fd) && !close(fd)) {
		free(buf);
		return;
	}
d321 1
a321 3
err:	eval = 1;
	if (buf)
		free(buf);
d323 4
d329 13
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@No undelete any more.
@
text
@d1 1
a1 1
/*	$OpenBSD: rm.c,v 1.18 2005/06/14 19:15:35 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: rm.c,v 1.18 2005/06/14 19:15:35 millert Exp $";
d66 1
a66 1
int dflag, eval, fflag, iflag, Pflag, stdin_ok;
d71 1
a71 2
int	rm_overwrite(char *, struct stat *);
int	pass(int, int, off_t, char *, size_t);
d90 1
a90 1
	while ((ch = getopt(argc, argv, "dfiPRr")) != -1)
d110 3
d159 2
d219 6
d227 1
a227 2
				if (!rm_overwrite(p->fts_accpath, NULL))
					continue;
d253 8
a260 3
			if (!fflag || errno != ENOENT) {
				warn("%s", f);
				eval = 1;
d262 3
d273 1
a273 1
		if (!fflag && !check(f, f, &sb))
d275 2
d281 1
a281 2
				if (!rm_overwrite(f, &sb))
					continue;
a300 1
 * Returns 1 for success.
d302 1
a302 1
int
d307 2
a308 2
	size_t bsize;
	int fd;
d318 1
a318 1
		return (1);
d322 1
a322 1
		return (0);
d328 1
a328 1
	bsize = MAX(fsb.f_iosize, 1024U);
d330 1
a330 1
		err(1, "%s: malloc", file);
d332 10
a341 2
	if (!pass(0xff, fd, sbp->st_size, buf, bsize) || fsync(fd) ||
	    lseek(fd, (off_t)0, SEEK_SET))
d343 2
a344 2
	if (!pass(0x00, fd, sbp->st_size, buf, bsize) || fsync(fd) ||
	    lseek(fd, (off_t)0, SEEK_SET))
d346 5
a350 5
	if (!pass(0xff, fd, sbp->st_size, buf, bsize) || fsync(fd))
		goto err;
	close(fd);
	free(buf);
	return (1);
d352 3
a354 1
err:
a355 4
	close(fd);
	eval = 1;
	free(buf);
	return (0);
a357 13
int
pass(int val, int fd, off_t len, char *buf, size_t bsize)
{
	size_t wlen;

	memset(buf, val, bsize);
	for (; len > 0; len -= wlen) {
		wlen = len < bsize ? len : bsize;
		if (write(fd, buf, wlen) != wlen)
			return (0);
	}
	return (1);
}
@

