head	1.473;
access;
symbols
	mksh-R57:1.463
	mksh-R56c:1.451
	mksh-R56b:1.451
	mksh-R56:1.449
	mksh-R55:1.442
	mksh-R54:1.420
	mksh-R53a:1.413
	mksh-R53:1.413
	mksh-R52c:1.392
	mksh-R52b:1.388
	mksh-R52:1.383
	mksh-R51:1.377
	mksh-R50f:1.344.2.5
	mksh-R50e:1.344.2.3
	mksh-R50stable:1.344.0.2
	mksh-R50d:1.344
	mksh-R50c:1.343
	mksh-R50b:1.340
	mksh-R50:1.336
	mksh-R49:1.329
	mksh-R48b:1.320
	mksh-R48:1.320
	mksh-R47:1.318
	mksh-R46:1.315
	mksh-R45:1.310
	mksh-R44:1.305
	mksh-R43:1.305
	mksh-R42b:1.304
	mksh-R41c:1.301
	mksh-R41b:1.301
	mksh-R42:1.304
	mksh-R41:1.301
	mksh-R41stable:1.301.0.2
	mksh-wheezy:1.288.0.2
	tg-multikey-bind:1.285.0.2
	mksh-R40f:1.269.2.9
	mksh-R40e:1.269.2.9
	mksh-R40d:1.269.2.8
	mksh-R40c:1.269.2.6
	mksh-R40b:1.269.2.4
	mksh-R40stable:1.269.0.2
	mksh-R40:1.263
	mksh-R39c:1.217
	mksh-R39b:1.215
	tg-wcswidth-behaviour:1.201.0.2
	tg-nameref:1.178.0.2
	mksh-R39:1.174
	tg-mksh-printf-builtin:1.174.0.2
	mksh-R38c:1.169
	mksh-R38b:1.169
	mksh-R38:1.168
	mksh-R37c:1.157
	mksh-R37b:1.155
	mksh-R37:1.154
	mksh-R36b:1.145.2.1
	mksh-R36:1.144
	mksh-R35b:1.131
	mksh-R35:1.131
	mksh-R33d:1.115
	mksh-R33c:1.115
	mksh-R33b:1.114
	MIRBSD_10:1.113.0.2
	MIRBSD_10_BASE:1.113
	mksh-R33:1.111
	mksh-R32:1.104
	mksh-R31d:1.102
	mksh-R31c:1.100
	mksh-R31b:1.100
	mksh-R31:1.99
	mksh-R30:1.92
	mksh-R29g:1.84
	mksh-R29f:1.84
	mksh-R29e:1.84
	mksh-R29stable:1.84.0.2
	mksh-R29d:1.84
	mksh-R29c:1.83
	mksh-R29b:1.81
	mksh-R29:1.79
	mksh-R28:1.58
	tg-mksh-plan9ape_BASE:1.57
	tg-mksh-plan9ape:1.56.0.2
	mksh-R27e:1.37
	MIRBSD_9_BASE:1.36
	mksh-R27d:1.36
	mksh-R27:1.35
	mksh-R26c:1.28
	mksh-R26b:1.27
	MIRBSD_8:1.25.0.2
	MIRBSD_8_BASE:1.25
	mksh-R26:1.25
	mksh-R25:1.23
	mksh-R24c:1.19
	mksh-R24b:1.16
	mksh-R24:1.14
	mksh-R23:1.9
	mksh-R22:1.5
	mksh-R21:1.2;
locks; strict;
comment	@.\" @;


1.473
date	2020.01.24.18.57.09;	author tg;	state Exp;
branches;
next	1.472;
commitid	1005E2B3E112367CDDF;

1.472
date	2020.01.11.21.12.29;	author tg;	state Exp;
branches;
next	1.471;
commitid	1005E1A3A23554E3635;

1.471
date	2019.12.30.04.18.51;	author tg;	state Exp;
branches;
next	1.470;
commitid	1005E097AAE107DC225;

1.470
date	2019.12.29.23.53.48;	author tg;	state Exp;
branches;
next	1.469;
commitid	1005E093C9B19E65557;

1.469
date	2019.12.29.23.40.40;	author tg;	state Exp;
branches;
next	1.468;
commitid	1005E09394D04739973;

1.468
date	2019.12.11.21.47.28;	author tg;	state Exp;
branches;
next	1.467;
commitid	1005DF163FC1B2BE44D;

1.467
date	2019.12.11.20.11.14;	author tg;	state Exp;
branches;
next	1.466;
commitid	1005DF14D4D1BAFC22E;

1.466
date	2019.09.10.19.52.53;	author tg;	state Exp;
branches;
next	1.465;
commitid	1005D77FF244A8936BA;

1.465
date	2019.04.24.20.56.29;	author tg;	state Exp;
branches;
next	1.464;
commitid	1005CC0CD7B2A3E9776;

1.464
date	2019.03.23.16.13.54;	author tg;	state Exp;
branches;
next	1.463;
commitid	1005C965A2F2710EADA;

1.463
date	2019.03.01.16.17.31;	author tg;	state Exp;
branches;
next	1.462;
commitid	1005C795B227B7FBF72;

1.462
date	2019.01.05.12.54.49;	author tg;	state Exp;
branches;
next	1.461;
commitid	1005C30A92B6CE3819C;

1.461
date	2018.12.25.19.38.08;	author tg;	state Exp;
branches;
next	1.460;
commitid	1005C22871909EC7FE2;

1.460
date	2018.08.17.20.33.08;	author tg;	state Exp;
branches;
next	1.459;
commitid	1005B77311404AE5E77;

1.459
date	2018.08.10.02.53.36;	author tg;	state Exp;
branches;
next	1.458;
commitid	1005B6CFE0B5BDFE404;

1.458
date	2018.07.15.17.21.22;	author tg;	state Exp;
branches;
next	1.457;
commitid	1005B4B82617DF9E3F8;

1.457
date	2018.07.15.13.57.18;	author tg;	state Exp;
branches;
next	1.456;
commitid	1005B4B52CF2EB9391F;

1.456
date	2018.04.28.07.03.17;	author tg;	state Exp;
branches;
next	1.455;
commitid	1005AE41CB32282F9D2;

1.455
date	2018.04.27.17.20.39;	author tg;	state Exp;
branches;
next	1.454;
commitid	1005AE35BEF019DE28E;

1.454
date	2018.04.27.17.10.39;	author tg;	state Exp;
branches;
next	1.453;
commitid	1005AE3599B42FD5067;

1.453
date	2018.04.16.00.32.35;	author tg;	state Exp;
branches;
next	1.452;
commitid	1005AD3EEFB69329F0A;

1.452
date	2018.04.16.00.22.28;	author tg;	state Exp;
branches;
next	1.451;
commitid	1005AD3ECCD7C3108C6;

1.451
date	2017.08.16.21.40.14;	author tg;	state Exp;
branches;
next	1.450;
commitid	1005994BBCB20A98B44;

1.450
date	2017.08.10.19.25.12;	author tg;	state Exp;
branches;
next	1.449;
commitid	100598CB32730354517;

1.449
date	2017.08.07.21.16.32;	author tg;	state Exp;
branches;
next	1.448;
commitid	1005988D8C64668C04F;

1.448
date	2017.08.07.20.49.42;	author tg;	state Exp;
branches;
next	1.447;
commitid	1005988D271333D0EFB;

1.447
date	2017.05.05.22.45.57;	author tg;	state Exp;
branches;
next	1.446;
commitid	100590D00B820B45C19;

1.446
date	2017.04.28.03.37.44;	author tg;	state Exp;
branches;
next	1.445;
commitid	1005902B9086FFD0E52;

1.445
date	2017.04.27.23.33.19;	author tg;	state Exp;
branches;
next	1.444;
commitid	10059027FC444EF0ED1;

1.444
date	2017.04.21.19.08.18;	author tg;	state Exp;
branches;
next	1.443;
commitid	10058FA58B011749B28;

1.443
date	2017.04.20.20.50.12;	author tg;	state Exp;
branches;
next	1.442;
commitid	10058F91F0E764A8514;

1.442
date	2017.04.12.18.30.58;	author tg;	state Exp;
branches;
next	1.441;
commitid	10058EE7277202AF94A;

1.441
date	2017.04.12.17.38.45;	author tg;	state Exp;
branches;
next	1.440;
commitid	10058EE65E065F6F62F;

1.440
date	2017.04.11.17.40.41;	author tg;	state Exp;
branches;
next	1.439;
commitid	10058ED152810BB9513;

1.439
date	2017.04.06.19.02.05;	author tg;	state Exp;
branches;
next	1.438;
commitid	10058E690B12E36D308;

1.438
date	2017.04.06.00.53.33;	author tg;	state Exp;
branches;
next	1.437;
commitid	10058E5919F0E16D269;

1.437
date	2017.04.03.02.10.49;	author tg;	state Exp;
branches;
next	1.436;
commitid	10058E1AF3F24A3D839;

1.436
date	2017.04.02.14.14.07;	author tg;	state Exp;
branches;
next	1.435;
commitid	10058E106EA70D8ABF7;

1.435
date	2017.03.19.22.31.27;	author tg;	state Exp;
branches;
next	1.434;
commitid	10058CF06C37397F386;

1.434
date	2017.03.19.22.04.49;	author tg;	state Exp;
branches;
next	1.433;
commitid	10058CF0091027039E4;

1.433
date	2017.03.19.20.59.27;	author tg;	state Exp;
branches;
next	1.432;
commitid	10058CEF1322163CCA4;

1.432
date	2017.03.19.20.36.08;	author tg;	state Exp;
branches;
next	1.431;
commitid	10058CEEBC01764DE9F;

1.431
date	2017.03.19.18.05.29;	author tg;	state Exp;
branches;
next	1.430;
commitid	10058CEC80C3DBAE4A3;

1.430
date	2017.03.19.16.48.51;	author tg;	state Exp;
branches;
next	1.429;
commitid	10058CEB67A31609D22;

1.429
date	2017.03.17.22.45.51;	author tg;	state Exp;
branches;
next	1.428;
commitid	10058CC671F1DF58730;

1.428
date	2017.03.14.11.32.56;	author tg;	state Exp;
branches;
next	1.427;
commitid	10058C7D4F238D5BDAB;

1.427
date	2017.03.12.02.34.54;	author tg;	state Exp;
branches;
next	1.426;
commitid	10058C4B3DF6EC558A4;

1.426
date	2017.03.12.02.31.02;	author tg;	state Exp;
branches;
next	1.425;
commitid	10058C4B2EC5EA5315F;

1.425
date	2017.03.11.23.10.41;	author tg;	state Exp;
branches;
next	1.424;
commitid	10058C483F21463C185;

1.424
date	2017.02.27.16.08.04;	author tg;	state Exp;
branches;
next	1.423;
commitid	10058B44ED751069738;

1.423
date	2017.02.17.22.28.26;	author tg;	state Exp;
branches;
next	1.422;
commitid	10058A7787B2AD8F280;

1.422
date	2017.02.17.20.41.56;	author tg;	state Exp;
branches;
next	1.421;
commitid	10058A760274A0EB05B;

1.421
date	2017.02.17.20.38.16;	author tg;	state Exp;
branches;
next	1.420;
commitid	10058A75F4B25DF944F;

1.420
date	2016.11.11.23.31.36;	author tg;	state Exp;
branches;
next	1.419;
commitid	100582654B972655F84;

1.419
date	2016.11.11.22.17.09;	author tg;	state Exp;
branches;
next	1.418;
commitid	100582643716D65E29A;

1.418
date	2016.11.11.21.37.44;	author tg;	state Exp;
branches;
next	1.417;
commitid	10058263A4243668C9B;

1.417
date	2016.09.29.09.04.56;	author tg;	state Exp;
branches;
next	1.416;
commitid	10057ECD93254C3ED88;

1.416
date	2016.08.24.20.40.00;	author tg;	state Exp;
branches;
next	1.415;
commitid	10057BE062C465118E3;

1.415
date	2016.08.24.19.36.26;	author tg;	state Exp;
branches;
next	1.414;
commitid	10057BDF75022FF03B8;

1.414
date	2016.08.24.19.35.26;	author tg;	state Exp;
branches;
next	1.413;
commitid	10057BDF700102FA925;

1.413
date	2016.08.10.18.20.05;	author tg;	state Exp;
branches;
next	1.412;
commitid	10057AB706B2E3BA65B;

1.412
date	2016.08.10.18.15.18;	author tg;	state Exp;
branches;
next	1.411;
commitid	10057AB6F4374A7108F;

1.411
date	2016.08.04.09.27.59;	author tg;	state Exp;
branches;
next	1.410;
commitid	10057A30AA63D5B6406;

1.410
date	2016.08.03.17.34.12;	author tg;	state Exp;
branches;
next	1.409;
commitid	10057A22AFB5A12A1F9;

1.409
date	2016.08.01.21.38.04;	author tg;	state Exp;
branches;
next	1.408;
commitid	100579FC12F14735847;

1.408
date	2016.08.01.19.40.00;	author tg;	state Exp;
branches;
next	1.407;
commitid	100579FA5A0034ED042;

1.407
date	2016.08.01.19.11.27;	author tg;	state Exp;
branches;
next	1.406;
commitid	100579F9EEF7227EBDA;

1.406
date	2016.07.26.21.50.45;	author tg;	state Exp;
branches;
next	1.405;
commitid	1005797DB49584A72A4;

1.405
date	2016.07.26.21.37.26;	author tg;	state Exp;
branches;
next	1.404;
commitid	1005797D80749BA13A1;

1.404
date	2016.07.25.21.05.23;	author tg;	state Exp;
branches;
next	1.403;
commitid	10057967F184AB0E82A;

1.403
date	2016.07.25.20.41.23;	author tg;	state Exp;
branches;
next	1.402;
commitid	1005796798377E704E1;

1.402
date	2016.07.25.20.38.04;	author tg;	state Exp;
branches;
next	1.401;
commitid	100579678BA313AF68F;

1.401
date	2016.07.24.23.11.51;	author tg;	state Exp;
branches;
next	1.400;
commitid	10057954B4566C36674;

1.400
date	2016.07.24.23.05.52;	author tg;	state Exp;
branches;
next	1.399;
commitid	100579549C8761C6547;

1.399
date	2016.06.25.23.52.06;	author tg;	state Exp;
branches;
next	1.398;
commitid	100576F19385EB7B5DC;

1.398
date	2016.06.25.23.51.21;	author tg;	state Exp;
branches;
next	1.397;
commitid	100576F190E3BAED86C;

1.397
date	2016.06.25.23.49.13;	author tg;	state Exp;
branches;
next	1.396;
commitid	100576F188B17A582E9;

1.396
date	2016.06.25.23.48.10;	author tg;	state Exp;
branches;
next	1.395;
commitid	100576F184D3E0F8207;

1.395
date	2016.05.05.22.45.58;	author tg;	state Exp;
branches;
next	1.394;
commitid	100572BCD1534586213;

1.394
date	2016.03.12.20.45.38;	author tg;	state Exp;
branches;
next	1.393;
commitid	10056E47FF5589E16B2;

1.393
date	2016.03.06.21.01.28;	author tg;	state Exp;
branches;
next	1.392;
commitid	10056DC9ABB1F429912;

1.392
date	2016.03.04.18.28.41;	author tg;	state Exp;
branches;
next	1.391;
commitid	10056D9D3E84E42085B;

1.391
date	2016.03.01.19.22.31;	author tg;	state Exp;
branches;
next	1.390;
commitid	10056D5EBFF7582D948;

1.390
date	2016.02.26.19.38.42;	author tg;	state Exp;
branches;
next	1.389;
commitid	10056D0A9BB5B8D2FFD;

1.389
date	2016.02.11.19.00.50;	author tg;	state Exp;
branches;
next	1.388;
commitid	10056BCDA61649EA9B4;

1.388
date	2016.01.20.22.04.54;	author tg;	state Exp;
branches;
next	1.387;
commitid	10056A0049F1325E3B0;

1.387
date	2016.01.14.23.18.09;	author tg;	state Exp;
branches;
next	1.386;
commitid	10056982CC2089C928B;

1.386
date	2016.01.13.17.20.50;	author tg;	state Exp;
branches;
next	1.385;
commitid	1005696877B782808CD;

1.385
date	2016.01.12.16.33.17;	author tg;	state Exp;
branches;
next	1.384;
commitid	10056952ADB09050C63;

1.384
date	2015.12.31.20.25.48;	author tg;	state Exp;
branches;
next	1.383;
commitid	10056858F3B37548534;

1.383
date	2015.12.12.22.25.14;	author tg;	state Exp;
branches;
next	1.382;
commitid	100566C9EDD3DC6C239;

1.382
date	2015.10.09.21.36.57;	author tg;	state Exp;
branches;
next	1.381;
commitid	100561833456A230F8F;

1.381
date	2015.10.09.20.43.11;	author tg;	state Exp;
branches;
next	1.380;
commitid	100561826DC7C7EF4E6;

1.380
date	2015.09.05.19.19.08;	author tg;	state Exp;
branches;
next	1.379;
commitid	10055EB402C54C3076B;

1.379
date	2015.08.13.22.09.10;	author tg;	state Exp;
branches;
next	1.378;
commitid	10055CD159C547D194A;

1.378
date	2015.07.12.19.09.50;	author tg;	state Exp;
branches;
next	1.377;
commitid	10055A2BB836D1993DD;

1.377
date	2015.07.10.19.35.39;	author tg;	state Exp;
branches;
next	1.376;
commitid	10055A01DFB1CC800D3;

1.376
date	2015.07.10.18.41.07;	author tg;	state Exp;
branches;
next	1.375;
commitid	10055A0115F077A1AC9;

1.375
date	2015.07.09.20.20.43;	author tg;	state Exp;
branches;
next	1.374;
commitid	100559ED7A80A374D9C;

1.374
date	2015.07.09.19.50.44;	author tg;	state Exp;
branches;
next	1.373;
commitid	100559ED0A46DACC43B;

1.373
date	2015.07.06.17.48.35;	author tg;	state Exp;
branches;
next	1.372;
commitid	100559ABF230C8CC8EB;

1.372
date	2015.07.05.19.37.17;	author tg;	state Exp;
branches;
next	1.371;
commitid	1005599876B5247136B;

1.371
date	2015.07.05.17.50.40;	author tg;	state Exp;
branches;
next	1.370;
commitid	10055996E6F5E6AD356;

1.370
date	2015.07.05.15.45.18;	author tg;	state Exp;
branches;
next	1.369;
commitid	100559951194B011855;

1.369
date	2015.07.05.15.22.41;	author tg;	state Exp;
branches;
next	1.368;
commitid	10055994BDA0AB76291;

1.368
date	2015.06.28.14.57.25;	author tg;	state Exp;
branches;
next	1.367;
commitid	10055900B357361C966;

1.367
date	2015.05.23.17.43.20;	author tg;	state Exp;
branches;
next	1.366;
commitid	1005560BBB87BB0247C;

1.366
date	2015.04.29.20.44.36;	author tg;	state Exp;
branches;
next	1.365;
commitid	100554142C5624212CA;

1.365
date	2015.04.29.20.13.26;	author tg;	state Exp;
branches;
next	1.364;
commitid	10055413B7061DD6847;

1.364
date	2015.04.29.18.56.00;	author tg;	state Exp;
branches;
next	1.363;
commitid	1005541294E1588A2DC;

1.363
date	2015.04.29.18.54.05;	author tg;	state Exp;
branches;
next	1.362;
commitid	100554128E56FBE2190;

1.362
date	2015.04.19.19.18.05;	author tg;	state Exp;
branches;
next	1.361;
commitid	1005533FF4D64965277;

1.361
date	2015.04.12.22.32.12;	author tg;	state Exp;
branches;
next	1.360;
commitid	100552AF26A429AA816;

1.360
date	2015.04.11.23.28.19;	author tg;	state Exp;
branches;
next	1.359;
commitid	1005529AD8D33CF99B9;

1.359
date	2015.04.11.22.35.10;	author tg;	state Exp;
branches;
next	1.358;
commitid	1005529A16835B637CB;

1.358
date	2015.04.11.22.09.49;	author tg;	state Exp;
branches;
next	1.357;
commitid	10055299BC3547AB433;

1.357
date	2015.03.21.00.12.46;	author tg;	state Exp;
branches;
next	1.356;
commitid	100550CB7886DC367A3;

1.356
date	2015.03.20.21.23.52;	author tg;	state Exp;
branches;
next	1.355;
commitid	100550C8FE4564E407D;

1.355
date	2015.03.14.05.23.16;	author tg;	state Exp;
branches;
next	1.354;
commitid	1005503C5CA29059CD3;

1.354
date	2015.03.14.05.17.17;	author tg;	state Exp;
branches;
next	1.353;
commitid	1005503C4736496672D;

1.353
date	2015.03.08.22.54.34;	author tg;	state Exp;
branches;
next	1.352;
commitid	10054FCD1444FC13F3C;

1.352
date	2015.03.07.20.46.29;	author tg;	state Exp;
branches;
next	1.351;
commitid	10054FB63890799A9FA;

1.351
date	2015.03.05.13.30.57;	author tg;	state Exp;
branches;
next	1.350;
commitid	10054F85A8535412509;

1.350
date	2015.03.01.15.43.09;	author tg;	state Exp;
branches;
next	1.349;
commitid	10054F33364551D895A;

1.349
date	2015.02.06.10.56.47;	author tg;	state Exp;
branches;
next	1.348;
commitid	10054D49DF4344D0AFC;

1.348
date	2015.01.25.15.23.42;	author tg;	state Exp;
branches;
next	1.347;
commitid	10054C50A720861330B;

1.347
date	2014.12.18.20.51.12;	author tg;	state Exp;
branches;
next	1.346;
commitid	10054933E58295E7CFC;

1.346
date	2014.12.15.23.26.36;	author tg;	state Exp;
branches;
next	1.345;
commitid	100548F6E3443B3D986;

1.345
date	2014.11.25.22.46.47;	author tg;	state Exp;
branches;
next	1.344;
commitid	100547506EF278BE75E;

1.344
date	2014.10.07.15.30.12;	author tg;	state Exp;
branches
	1.344.2.1;
next	1.343;
commitid	100543406F64EA67AF8;

1.343
date	2014.10.03.12.35.38;	author tg;	state Exp;
branches;
next	1.342;
commitid	100542E98320E8AC7A6;

1.342
date	2014.09.24.10.47.11;	author tg;	state Exp;
branches;
next	1.341;
commitid	1005422A14038E085EC;

1.341
date	2014.09.12.20.23.33;	author tg;	state Exp;
branches;
next	1.340;
commitid	1005413562C19BFAEF1;

1.340
date	2014.07.29.17.26.24;	author tg;	state Exp;
branches;
next	1.339;
commitid	10053D7D94C098105CA;

1.339
date	2014.07.25.21.38.51;	author tg;	state Exp;
branches;
next	1.338;
commitid	10053D2CD885F1C1F1E;

1.338
date	2014.07.21.08.06.16;	author tg;	state Exp;
branches;
next	1.337;
commitid	10053CCC9A4099AB4D9;

1.337
date	2014.07.03.20.47.56;	author tg;	state Exp;
branches;
next	1.336;
commitid	10053B5C1936557CC6E;

1.336
date	2014.06.24.20.47.44;	author tg;	state Exp;
branches;
next	1.335;
commitid	10053A9E3FD4EC55000;

1.335
date	2014.06.09.12.28.17;	author tg;	state Exp;
branches;
next	1.334;
commitid	1005395A8677E96EF7B;

1.334
date	2014.06.09.11.22.50;	author tg;	state Exp;
branches;
next	1.333;
commitid	1005395991F09C40DAE;

1.333
date	2014.06.06.23.50.22;	author tg;	state Exp;
branches;
next	1.332;
commitid	100539253BB0C220BFE;

1.332
date	2014.03.07.22.47.49;	author tg;	state Exp;
branches;
next	1.331;
commitid	100531A4C8A59FFB0C6;

1.331
date	2014.02.05.18.07.29;	author tg;	state Exp;
branches;
next	1.330;
commitid	10052F27DD03A247229;

1.330
date	2014.01.21.20.58.32;	author tg;	state Exp;
branches;
next	1.329;
commitid	10052DEDF906822824C;

1.329
date	2014.01.11.18.09.41;	author tg;	state Exp;
branches;
next	1.328;
commitid	10052D188DD7DFEC194;

1.328
date	2014.01.05.21.57.27;	author tg;	state Exp;
branches;
next	1.327;
commitid	10052C9D445413B34DF;

1.327
date	2014.01.05.19.14.16;	author tg;	state Exp;
branches;
next	1.326;
commitid	10052C9AF1F443DA345;

1.326
date	2013.12.18.16.54.20;	author tg;	state Exp;
branches;
next	1.325;
commitid	10052B1D32B0751D694;

1.325
date	2013.11.30.18.16.54;	author tg;	state Exp;
branches;
next	1.324;
commitid	100529A2BA029678B19;

1.324
date	2013.11.17.22.24.06;	author tg;	state Exp;
branches;
next	1.323;
commitid	1005289421A21CDEEEB;

1.323
date	2013.11.17.22.20.21;	author tg;	state Exp;
branches;
next	1.322;
commitid	100528941373127E2E8;

1.322
date	2013.09.10.17.33.02;	author tg;	state Exp;
branches;
next	1.321;
commitid	100522F57C13E265FDE;

1.321
date	2013.08.23.14.07.37;	author tg;	state Exp;
branches;
next	1.320;
commitid	10052176CB912FE954B;

1.320
date	2013.08.10.14.11.39;	author tg;	state Exp;
branches;
next	1.319;
commitid	10052064A32246FBD0C;

1.319
date	2013.08.10.13.44.31;	author tg;	state Exp;
branches;
next	1.318;
commitid	100520643B4127D9BCA;

1.318
date	2013.07.21.18.47.21;	author tg;	state Exp;
branches;
next	1.317;
commitid	10051EC2CBD68BDF6A5;

1.317
date	2013.07.21.18.36.02;	author tg;	state Exp;
branches;
next	1.316;
commitid	10051EC29F9411252FA;

1.316
date	2013.06.03.22.28.06;	author tg;	state Exp;
branches;
next	1.315;
commitid	10051AD188C1F05BE20;

1.315
date	2013.05.02.21.59.50;	author tg;	state Exp;
branches;
next	1.314;
commitid	1005182E1E55272FF6B;

1.314
date	2013.05.02.20.28.13;	author tg;	state Exp;
branches;
next	1.313;
commitid	1005182CC714DDF0A48;

1.313
date	2013.05.02.15.33.30;	author tg;	state Exp;
branches;
next	1.312;
commitid	1005182874A0CAD1AA6;

1.312
date	2013.04.27.19.16.25;	author tg;	state Exp;
branches;
next	1.311;
commitid	100517C240B5F21EA3E;

1.311
date	2013.04.27.18.50.24;	author tg;	state Exp;
branches;
next	1.310;
commitid	100517C1D840086DC8F;

1.310
date	2013.04.26.21.22.47;	author tg;	state Exp;
branches;
next	1.309;
commitid	100517AEF6C22DD1AE7;

1.309
date	2013.04.14.13.36.53;	author tg;	state Exp;
branches;
next	1.308;
commitid	100516AAFB97CDEA9BA;

1.308
date	2013.03.24.21.34.14;	author tg;	state Exp;
branches;
next	1.307;
commitid	100514F71661744EE30;

1.307
date	2013.03.24.15.01.49;	author tg;	state Exp;
branches;
next	1.306;
commitid	100514F15711E9EFAB7;

1.306
date	2013.03.24.00.56.23;	author tg;	state Exp;
branches;
next	1.305;
commitid	100514E4F1D5C90862C;

1.305
date	2013.02.19.18.45.20;	author tg;	state Exp;
branches;
next	1.304;
commitid	1005123C815760131DF;

1.304
date	2013.02.11.17.17.59;	author tg;	state Exp;
branches;
next	1.303;
commitid	100511927C6725DFF45;

1.303
date	2013.02.10.23.58.19;	author tg;	state Exp;
branches;
next	1.302;
commitid	10051183433691CECC9;

1.302
date	2013.01.19.17.27.05;	author tg;	state Exp;
branches;
next	1.301;
commitid	10050FAD78105C4140D;

1.301
date	2012.11.30.19.25.05;	author tg;	state Exp;
branches;
next	1.300;
commitid	10050B907135D4B5928;

1.300
date	2012.11.26.22.49.49;	author tg;	state Exp;
branches;
next	1.299;
commitid	10050B3F2237B099269;

1.299
date	2012.11.20.18.25.12;	author tg;	state Exp;
branches;
next	1.298;
commitid	10050ABCB0765A75FF5;

1.298
date	2012.11.20.18.07.43;	author tg;	state Exp;
branches;
next	1.297;
commitid	10050ABC70641D0E46B;

1.297
date	2012.11.20.17.42.30;	author tg;	state Exp;
branches;
next	1.296;
commitid	10050ABC11D40F1EAFA;

1.296
date	2012.10.22.20.19.14;	author tg;	state Exp;
branches;
next	1.295;
commitid	1005085AA537A17A752;

1.295
date	2012.10.21.17.42.51;	author tg;	state Exp;
branches;
next	1.294;
commitid	100508434271908E80C;

1.294
date	2012.10.14.14.04.05;	author tg;	state Exp;
branches;
next	1.293;
commitid	100507AC66D0E3990D6;

1.293
date	2012.08.17.18.34.22;	author tg;	state Exp;
branches;
next	1.292;
commitid	100502E8EAA4BFCF410;

1.292
date	2012.08.03.18.34.31;	author tg;	state Exp;
branches;
next	1.291;
commitid	100501C19CF7F5260DA;

1.291
date	2012.07.30.21.37.13;	author tg;	state Exp;
branches;
next	1.290;
commitid	1005016FE9B27F9F4DC;

1.290
date	2012.07.25.19.40.40;	author tg;	state Exp;
branches;
next	1.289;
commitid	10050104BD04554376D;

1.289
date	2012.07.20.23.22.11;	author tg;	state Exp;
branches;
next	1.288;
commitid	1005009E802250C41C1;

1.288
date	2012.06.29.08.11.45;	author tg;	state Exp;
branches;
next	1.287;
commitid	1004FED63573BE6A68A;

1.287
date	2012.06.28.20.05.09;	author tg;	state Exp;
branches;
next	1.286;
commitid	1004FECB8FB4B2757ED;

1.286
date	2012.06.25.16.22.59;	author tg;	state Exp;
branches;
next	1.285;
commitid	1004FE89079633224BA;

1.285
date	2012.04.22.21.50.32;	author tg;	state Exp;
branches
	1.285.2.1;
next	1.284;
commitid	1004F947C3646B6F432;

1.284
date	2012.04.14.12.51.34;	author tg;	state Exp;
branches;
next	1.283;
commitid	1004F8972E17EE84C7E;

1.283
date	2012.04.07.11.19.49;	author tg;	state Exp;
branches;
next	1.282;
commitid	1004F8022E670BC1C0E;

1.282
date	2012.03.23.23.25.27;	author tg;	state Exp;
branches;
next	1.281;
commitid	1004F6D064C65BE58AA;

1.281
date	2011.12.10.13.34.16;	author tg;	state Exp;
branches;
next	1.280;
commitid	1004EE35FEC458C37A0;

1.280
date	2011.12.03.00.09.15;	author tg;	state Exp;
branches;
next	1.279;
commitid	1004ED968B40F052B64;

1.279
date	2011.11.30.21.34.14;	author tg;	state Exp;
branches;
next	1.278;
commitid	1004ED6A06C18CCDBE5;

1.278
date	2011.11.11.22.14.02;	author tg;	state Exp;
branches;
next	1.277;
commitid	1004EBD9E41512A7BD5;

1.277
date	2011.11.11.22.10.52;	author tg;	state Exp;
branches;
next	1.276;
commitid	1004EBD9D834DE59D3F;

1.276
date	2011.10.24.19.41.11;	author tg;	state Exp;
branches;
next	1.275;
commitid	1004EA5BF6B41948165;

1.275
date	2011.10.07.19.51.29;	author tg;	state Exp;
branches;
next	1.274;
commitid	1004E8F58575DF1C9F8;

1.274
date	2011.09.13.18.46.46;	author tg;	state Exp;
branches;
next	1.273;
commitid	1004E6FA52E2B3D1248;

1.273
date	2011.08.13.22.19.40;	author tg;	state Exp;
branches;
next	1.272;
commitid	1004E46F8814937CBB6;

1.272
date	2011.07.16.17.08.20;	author tg;	state Exp;
branches;
next	1.271;
commitid	1004E21C5974E8E1C5E;

1.271
date	2011.07.16.17.08.04;	author tg;	state Exp;
branches;
next	1.270;
commitid	1004E21C5897BC0B2FC;

1.270
date	2011.07.16.17.07.48;	author tg;	state Exp;
branches;
next	1.269;
commitid	1004E21C57833BDA52B;

1.269
date	2011.07.07.21.24.53;	author tg;	state Exp;
branches
	1.269.2.1;
next	1.268;
commitid	1004E16241A43F1A588;

1.268
date	2011.07.06.22.21.58;	author tg;	state Exp;
branches;
next	1.267;
commitid	1004E14E010182825E7;

1.267
date	2011.07.05.20.19.18;	author tg;	state Exp;
branches;
next	1.266;
commitid	1004E1371A20E4D9A36;

1.266
date	2011.07.02.17.57.24;	author tg;	state Exp;
branches;
next	1.265;
commitid	1004E0F5C1A676154AF;

1.265
date	2011.06.21.22.02.09;	author tg;	state Exp;
branches;
next	1.264;
commitid	1004E0114F81FB4281B;

1.264
date	2011.06.12.15.37.09;	author tg;	state Exp;
branches;
next	1.263;
commitid	1004DF4DD33162FB258;

1.263
date	2011.06.12.15.34.19;	author tg;	state Exp;
branches;
next	1.262;
commitid	1004DF4DC924CA309D6;

1.262
date	2011.05.29.17.01.26;	author tg;	state Exp;
branches;
next	1.261;
commitid	1004DE27BFC7AA381FE;

1.261
date	2011.05.29.02.18.54;	author tg;	state Exp;
branches;
next	1.260;
commitid	1004DE1AD11046BEFFC;

1.260
date	2011.05.06.15.41.24;	author tg;	state Exp;
branches;
next	1.259;
commitid	1004DC416672F61DF37;

1.259
date	2011.05.05.00.04.58;	author tg;	state Exp;
branches;
next	1.258;
commitid	1004DC1E8D640072140;

1.258
date	2011.05.04.23.16.03;	author tg;	state Exp;
branches;
next	1.257;
commitid	1004DC1DE466716BC29;

1.257
date	2011.05.02.22.57.22;	author tg;	state Exp;
branches;
next	1.256;
commitid	1004DBF36D74BE081E8;

1.256
date	2011.04.23.10.40.27;	author tg;	state Exp;
branches;
next	1.255;
commitid	1004DB2AC97511B8F26;

1.255
date	2011.04.17.15.43.12;	author tg;	state Exp;
branches;
next	1.254;
commitid	1004DAB0A835F2F6AAB;

1.254
date	2011.03.26.21.46.04;	author tg;	state Exp;
branches;
next	1.253;
commitid	1004D8E5E8E09438DF7;

1.253
date	2011.03.13.16.35.54;	author tg;	state Exp;
branches;
next	1.252;
commitid	1004D7CF28143D2092B;

1.252
date	2011.03.06.01.50.09;	author tg;	state Exp;
branches;
next	1.251;
commitid	1004D72E7B5122D1766;

1.251
date	2011.02.18.22.26.11;	author tg;	state Exp;
branches;
next	1.250;
commitid	1004D5EF0ED2C0C9394;

1.250
date	2011.02.11.01.18.19;	author tg;	state Exp;
branches;
next	1.249;
commitid	1004D548C4E66D17A12;

1.249
date	2011.02.11.00.41.35;	author tg;	state Exp;
branches;
next	1.248;
commitid	1004D5485D4414A9BFE;

1.248
date	2011.02.09.13.08.18;	author tg;	state Exp;
branches;
next	1.247;
commitid	1004D5291D85379A94E;

1.247
date	2011.01.21.22.25.33;	author tg;	state Exp;
branches;
next	1.246;
commitid	1004D3A07DC22BE01C9;

1.246
date	2011.01.21.22.00.14;	author tg;	state Exp;
branches;
next	1.245;
commitid	1004D3A01F81243EE3A;

1.245
date	2011.01.21.21.04.45;	author tg;	state Exp;
branches;
next	1.244;
commitid	1004D39F4C639F3DCA7;

1.244
date	2011.01.09.21.57.27;	author tg;	state Exp;
branches;
next	1.243;
commitid	1004D2A2F086B2268F4;

1.243
date	2010.12.19.20.00.55;	author tg;	state Exp;
branches;
next	1.242;
commitid	1004D0E647B738BDF7F;

1.242
date	2010.10.08.17.30.05;	author tg;	state Exp;
branches;
next	1.241;
commitid	1004CAF552E665E7BB8;

1.241
date	2010.09.24.20.21.43;	author tg;	state Exp;
branches;
next	1.240;
commitid	1004C9D0857247AF521;

1.240
date	2010.09.05.20.43.37;	author tg;	state Exp;
branches;
next	1.239;
commitid	1004C84010609AF79B4;

1.239
date	2010.09.05.19.51.33;	author tg;	state Exp;
branches;
next	1.238;
commitid	1004C83F4BE00D43672;

1.238
date	2010.09.05.19.12.24;	author tg;	state Exp;
branches;
next	1.237;
commitid	1004C83EBAF6FD4B356;

1.237
date	2010.08.28.21.22.24;	author tg;	state Exp;
branches;
next	1.236;
commitid	1004C797E270E2A9B40;

1.236
date	2010.08.28.17.21.44;	author tg;	state Exp;
branches;
next	1.235;
commitid	1004C7945A20EB8DDA4;

1.235
date	2010.08.24.14.42.03;	author tg;	state Exp;
branches;
next	1.234;
commitid	1004C73D9D62A68EAE7;

1.234
date	2010.08.14.20.13.10;	author tg;	state Exp;
branches;
next	1.233;
commitid	1004C66F8DC059B7807;

1.233
date	2010.08.14.19.55.37;	author tg;	state Exp;
branches;
next	1.232;
commitid	1004C66F4CD0513CEC3;

1.232
date	2010.07.17.22.09.37;	author tg;	state Exp;
branches;
next	1.231;
commitid	1004C42295452E71B6E;

1.231
date	2010.07.17.20.21.18;	author tg;	state Exp;
branches;
next	1.230;
commitid	1004C4210AE414A87C0;

1.230
date	2010.07.13.13.12.30;	author tg;	state Exp;
branches;
next	1.229;
commitid	1004C3C662810A34ABB;

1.229
date	2010.07.13.13.07.56;	author tg;	state Exp;
branches;
next	1.228;
commitid	1004C3C65071B4AEB31;

1.228
date	2010.07.11.11.17.31;	author tg;	state Exp;
branches;
next	1.227;
commitid	1004C39A83931615597;

1.227
date	2010.07.04.17.33.56;	author tg;	state Exp;
branches;
next	1.226;
commitid	1004C30C5ED28DF693B;

1.226
date	2010.05.13.18.47.50;	author tg;	state Exp;
branches;
next	1.225;
commitid	1004BEC496133C0E6F8;

1.225
date	2010.05.13.18.44.10;	author tg;	state Exp;
branches;
next	1.224;
commitid	1004BEC488A683B9F85;

1.224
date	2010.04.09.18.59.30;	author tg;	state Exp;
branches;
next	1.223;
commitid	1004BBF79255AF0EE02;

1.223
date	2010.04.08.13.21.06;	author tg;	state Exp;
branches;
next	1.222;
commitid	1004BBDD84556472D84;

1.222
date	2010.03.27.20.36.26;	author tg;	state Exp;
branches;
next	1.221;
commitid	1004BAE6C4B05F1BFE4;

1.221
date	2010.03.27.16.51.38;	author tg;	state Exp;
branches;
next	1.220;
commitid	1004BAE37A00499B2F0;

1.220
date	2010.03.15.18.14.40;	author tg;	state Exp;
branches;
next	1.219;
commitid	1004B9E79214E9696C9;

1.219
date	2010.03.06.20.08.18;	author tg;	state Exp;
branches;
next	1.218;
commitid	1004B92B6455711053A;

1.218
date	2010.02.28.14.06.56;	author tg;	state Exp;
branches;
next	1.217;
commitid	1004B8A789550B1BC1B;

1.217
date	2010.02.25.21.05.00;	author tg;	state Exp;
branches;
next	1.216;
commitid	1004B86E60E727B11FD;

1.216
date	2010.02.25.20.18.16;	author tg;	state Exp;
branches;
next	1.215;
commitid	1004B86DB1A7C6BCE8B;

1.215
date	2010.01.28.20.58.33;	author tg;	state Exp;
branches;
next	1.214;
commitid	1004B61FA7F4ADB96C5;

1.214
date	2010.01.28.15.33.11;	author tg;	state Exp;
branches;
next	1.213;
commitid	1004B61AE3A73497589;

1.213
date	2010.01.28.15.23.03;	author tg;	state Exp;
branches;
next	1.212;
commitid	1004B61ABEA32C539F5;

1.212
date	2010.01.28.15.18.50;	author tg;	state Exp;
branches;
next	1.211;
commitid	1004B61A9B525E85DF5;

1.211
date	2010.01.27.18.36.19;	author tg;	state Exp;
branches;
next	1.210;
commitid	1004B6087B739B66199;

1.210
date	2010.01.27.18.16.14;	author tg;	state Exp;
branches;
next	1.209;
commitid	1004B6082C7251376BC;

1.209
date	2010.01.25.16.12.56;	author tg;	state Exp;
branches;
next	1.208;
commitid	1004B5DC2A56A6AB278;

1.208
date	2010.01.25.14.25.15;	author tg;	state Exp;
branches;
next	1.207;
commitid	1004B5DA9D162A0E82B;

1.207
date	2010.01.25.14.11.27;	author tg;	state Exp;
branches;
next	1.206;
commitid	1004B5DA60A56BFB604;

1.206
date	2010.01.08.22.21.05;	author tg;	state Exp;
branches;
next	1.205;
commitid	1004B47AF75223D4923;

1.205
date	2010.01.06.18.29.01;	author tg;	state Exp;
branches;
next	1.204;
commitid	1004B44D67C48B18807;

1.204
date	2010.01.01.18.02.01;	author tg;	state Exp;
branches;
next	1.203;
commitid	1004B3E388722B20246;

1.203
date	2010.01.01.17.44.08;	author tg;	state Exp;
branches;
next	1.202;
commitid	1004B3E342E71FBD2B2;

1.202
date	2009.12.01.19.15.33;	author tg;	state Exp;
branches;
next	1.201;
commitid	1004B156B29488E0456;

1.201
date	2009.11.23.12.49.55;	author tg;	state Exp;
branches;
next	1.200;
commitid	1004B0A85085D0FDE63;

1.200
date	2009.11.22.18.23.38;	author tg;	state Exp;
branches;
next	1.199;
commitid	1004B0981B210A68B89;

1.199
date	2009.11.22.14.23.21;	author tg;	state Exp;
branches;
next	1.198;
commitid	1004B09496216A51B3F;

1.198
date	2009.11.21.23.23.18;	author tg;	state Exp;
branches;
next	1.197;
commitid	1004B08764D5928E063;

1.197
date	2009.11.21.23.21.23;	author tg;	state Exp;
branches;
next	1.196;
commitid	1004B0876086B55C49A;

1.196
date	2009.11.17.21.49.42;	author tg;	state Exp;
branches;
next	1.195;
commitid	1004B031A84371452D3;

1.195
date	2009.10.17.21.16.03;	author tg;	state Exp;
branches;
next	1.194;
commitid	1004ADA339B53B8111A;

1.194
date	2009.10.10.21.17.30;	author tg;	state Exp;
branches;
next	1.193;
commitid	1004AD0F97B0E1CF3C3;

1.193
date	2009.10.02.18.08.35;	author tg;	state Exp;
branches;
next	1.192;
commitid	1004AC641341D9D9D02;

1.192
date	2009.09.26.03.40.00;	author tg;	state Exp;
branches;
next	1.191;
commitid	1004ABD8CE62D55CFD8;

1.191
date	2009.09.20.17.23.51;	author tg;	state Exp;
branches;
next	1.190;
commitid	1004AB6650915B0514A;

1.190
date	2009.09.20.16.40.56;	author tg;	state Exp;
branches;
next	1.189;
commitid	1004AB65AF3542D0922;

1.189
date	2009.09.20.12.12.00;	author tg;	state Exp;
branches;
next	1.188;
commitid	1004AB61C274A8E3912;

1.188
date	2009.09.19.21.54.45;	author tg;	state Exp;
branches;
next	1.187;
commitid	1004AB552F7546C611E;

1.187
date	2009.09.19.19.08.47;	author tg;	state Exp;
branches;
next	1.186;
commitid	1004AB52C3C201A31B8;

1.186
date	2009.09.19.18.36.58;	author tg;	state Exp;
branches;
next	1.185;
commitid	1004AB524D471D78F40;

1.185
date	2009.09.19.15.16.04;	author tg;	state Exp;
branches;
next	1.184;
commitid	1004AB4F5B430F7AA5A;

1.184
date	2009.09.07.17.24.49;	author tg;	state Exp;
branches;
next	1.183;
commitid	1004AA541E5370FC6A6;

1.183
date	2009.09.06.18.17.51;	author tg;	state Exp;
branches;
next	1.182;
commitid	1004AA3FCD70BDA3047;

1.182
date	2009.09.06.17.55.54;	author tg;	state Exp;
branches;
next	1.181;
commitid	1004AA3F6E1614843D5;

1.181
date	2009.09.06.17.42.13;	author tg;	state Exp;
branches;
next	1.180;
commitid	1004AA3F479204C1E97;

1.180
date	2009.09.05.17.12.49;	author tg;	state Exp;
branches;
next	1.179;
commitid	1004AA29C1921520BDF;

1.179
date	2009.08.30.21.02.00;	author tg;	state Exp;
branches;
next	1.178;
commitid	1004A9AE8B12FB2C70D;

1.178
date	2009.08.30.11.38.44;	author tg;	state Exp;
branches
	1.178.2.1;
next	1.177;
commitid	1004A9A64D045031C5F;

1.177
date	2009.08.28.22.46.20;	author tg;	state Exp;
branches;
next	1.176;
commitid	1004A985E1C5618CC94;

1.176
date	2009.08.28.21.51.52;	author tg;	state Exp;
branches;
next	1.175;
commitid	1004A9851823C1B9AD2;

1.175
date	2009.08.14.09.00.30;	author tg;	state Exp;
branches;
next	1.174;
commitid	1004A8527A9607FCE48;

1.174
date	2009.07.16.15.06.44;	author tg;	state Rel;
branches;
next	1.173;
commitid	1004A5F412E6BBABCED;

1.173
date	2009.07.08.10.37.24;	author tg;	state Exp;
branches;
next	1.172;
commitid	1004A5476EF7519724C;

1.172
date	2009.07.06.15.06.24;	author tg;	state Exp;
branches;
next	1.171;
commitid	1004A5212AD490123A5;

1.171
date	2009.07.06.09.37.03;	author tg;	state Exp;
branches;
next	1.170;
commitid	1004A51C5AF74300067;

1.170
date	2009.06.21.15.43.17;	author tg;	state Exp;
branches;
next	1.169;
commitid	1004A3E551C5B00CF3D;

1.169
date	2009.05.31.17.41.09;	author tg;	state Rel;
branches;
next	1.168;
commitid	1004A22C14070CB3A5F;

1.168
date	2009.05.27.19.52.37;	author tg;	state Exp;
branches;
next	1.167;
commitid	1004A1D99540BF61ECF;

1.167
date	2009.05.21.14.28.34;	author tg;	state Exp;
branches;
next	1.166;
commitid	1004A156526780370CA;

1.166
date	2009.05.16.18.40.08;	author tg;	state Exp;
branches;
next	1.165;
commitid	1004A0F087409E93A5D;

1.165
date	2009.05.16.16.59.38;	author tg;	state Exp;
branches;
next	1.164;
commitid	1004A0EF0664EF4168D;

1.164
date	2009.05.16.15.53.01;	author tg;	state Exp;
branches;
next	1.163;
commitid	1004A0EE0AF7BF1B8E7;

1.163
date	2009.05.16.14.45.40;	author tg;	state Exp;
branches;
next	1.162;
commitid	1004A0ED19A31E8465B;

1.162
date	2009.05.16.14.44.37;	author tg;	state Exp;
branches;
next	1.161;
commitid	1004A0ED14E22CD2057;

1.161
date	2009.05.16.14.34.58;	author tg;	state Exp;
branches;
next	1.160;
commitid	1004A0ECF2708D4D1D0;

1.160
date	2009.05.16.14.19.22;	author tg;	state Exp;
branches;
next	1.159;
commitid	1004A0ECB577CA34B34;

1.159
date	2009.05.16.14.17.39;	author tg;	state Exp;
branches;
next	1.158;
commitid	1004A0ECB0E16A7C191;

1.158
date	2009.04.22.16.25.12;	author tg;	state Exp;
branches;
next	1.157;
commitid	10049EF448F5F89A278;

1.157
date	2009.04.07.21.23.28;	author tg;	state Exp;
branches;
next	1.156;
commitid	10049DBC4671D9A8284;

1.156
date	2009.04.07.19.46.55;	author tg;	state Exp;
branches;
next	1.155;
commitid	10049DBADC061BCDBC4;

1.155
date	2009.04.05.12.45.25;	author tg;	state Exp;
branches;
next	1.154;
commitid	10049D8A7E21CA91CFB;

1.154
date	2009.03.23.12.21.02;	author tg;	state Exp;
branches;
next	1.153;
commitid	10049C77EC65DC612C7;

1.153
date	2009.03.23.12.16.58;	author tg;	state Exp;
branches;
next	1.152;
commitid	10049C77DD116FDACED;

1.152
date	2009.03.23.12.15.33;	author tg;	state Exp;
branches;
next	1.151;
commitid	10049C77D4152E00BA3;

1.151
date	2009.03.22.18.09.17;	author tg;	state Exp;
branches;
next	1.150;
commitid	10049C67ED920BB5FB5;

1.150
date	2009.03.14.18.12.53;	author tg;	state Exp;
branches;
next	1.149;
commitid	10049BBF38A0ADEDD54;

1.149
date	2008.12.29.21.34.20;	author tg;	state Exp;
branches;
next	1.148;
commitid	10049594263416D2C1C;

1.148
date	2008.12.17.19.39.22;	author tg;	state Exp;
branches;
next	1.147;
commitid	100494955754640680F;

1.147
date	2008.12.17.19.32.47;	author tg;	state Exp;
branches;
next	1.146;
commitid	100494953D10C256C62;

1.146
date	2008.12.17.19.25.54;	author tg;	state Exp;
branches;
next	1.145;
commitid	100494952583CBCF2C5;

1.145
date	2008.12.04.18.11.07;	author tg;	state Exp;
branches
	1.145.2.1;
next	1.144;
commitid	10049381D2D4EEC022C;

1.144
date	2008.10.24.21.27.20;	author tg;	state Exp;
branches;
next	1.143;
commitid	10049023DB13F8A4B92;

1.143
date	2008.10.20.19.52.07;	author tg;	state Exp;
branches;
next	1.142;
commitid	10048FCE17308B3AD66;

1.142
date	2008.10.20.19.29.24;	author tg;	state Exp;
branches;
next	1.141;
commitid	10048FCDBAF5C7D98EB;

1.141
date	2008.10.19.20.15.44;	author tg;	state Exp;
branches;
next	1.140;
commitid	10048FB954E53F4A93C;

1.140
date	2008.10.04.23.22.13;	author tg;	state Exp;
branches;
next	1.139;
commitid	10048E7FAB20F0BD07D;

1.139
date	2008.10.04.23.08.03;	author tg;	state Exp;
branches;
next	1.138;
commitid	10048E7F7686DB8B02F;

1.138
date	2008.09.30.18.48.01;	author tg;	state Exp;
branches;
next	1.137;
commitid	10048E2747330A21574;

1.137
date	2008.09.30.18.43.07;	author tg;	state Exp;
branches;
next	1.136;
commitid	10048E2733A0C205E40;

1.136
date	2008.09.17.19.31.30;	author tg;	state Exp;
branches;
next	1.135;
commitid	10048D15ABE2EA76C75;

1.135
date	2008.09.17.19.27.16;	author tg;	state Exp;
branches;
next	1.134;
commitid	10048D15A291B1B8062;

1.134
date	2008.09.14.20.56.06;	author tg;	state Exp;
branches;
next	1.133;
commitid	10048CD7A3A1DDAAC9A;

1.133
date	2008.08.14.17.39.30;	author tg;	state Exp;
branches;
next	1.132;
commitid	10048A46DE62B3B8848;

1.132
date	2008.08.02.00.57.28;	author tg;	state Exp;
branches;
next	1.131;
commitid	1004893B0F044346401;

1.131
date	2008.07.09.21.32.43;	author tg;	state Exp;
branches;
next	1.130;
commitid	10048752E6271CABA24;

1.130
date	2008.06.28.22.51.55;	author tg;	state Exp;
branches;
next	1.129;
commitid	1004866BFA427FDEFB9;

1.129
date	2008.06.08.16.57.52;	author tg;	state Exp;
branches;
next	1.128;
commitid	100484C0F9A4AB3B79B;

1.128
date	2008.05.17.18.27.56;	author tg;	state Exp;
branches;
next	1.127;
commitid	100482F238341D5E08C;

1.127
date	2008.05.15.15.24.10;	author tg;	state Exp;
branches;
next	1.126;
commitid	100482C558039271D26;

1.126
date	2008.05.10.18.10.02;	author tg;	state Exp;
branches;
next	1.125;
commitid	1004825E50D4E209A0B;

1.125
date	2008.05.04.01.58.15;	author tg;	state Exp;
branches;
next	1.124;
commitid	100481D183D7217B8F3;

1.124
date	2008.05.04.01.51.30;	author tg;	state Exp;
branches;
next	1.123;
commitid	100481D16AF3E4A7EEA;

1.123
date	2008.04.20.21.30.29;	author tg;	state Exp;
branches;
next	1.122;
commitid	100480BB5E564A443DA;

1.122
date	2008.04.20.01.47.59;	author tg;	state Exp;
branches;
next	1.121;
commitid	100480AA0D92E78C7B4;

1.121
date	2008.04.20.01.12.52;	author tg;	state Exp;
branches;
next	1.120;
commitid	100480A987E0448546D;

1.120
date	2008.04.20.00.24.25;	author tg;	state Exp;
branches;
next	1.119;
commitid	100480A8D4556C8D90D;

1.119
date	2008.04.19.23.49.59;	author tg;	state Exp;
branches;
next	1.118;
commitid	100480A853206FB56FA;

1.118
date	2008.04.19.22.15.04;	author tg;	state Exp;
branches;
next	1.117;
commitid	100480A6CC85EC0197B;

1.117
date	2008.04.19.21.18.52;	author tg;	state Exp;
branches;
next	1.116;
commitid	100480A60CA1467D1B5;

1.116
date	2008.04.16.21.56.02;	author tg;	state Exp;
branches;
next	1.115;
commitid	100480675E12E8ACD98;

1.115
date	2008.04.01.21.07.20;	author tg;	state Exp;
branches;
next	1.114;
commitid	10047F2A3D72AA337FC;

1.114
date	2008.03.23.22.09.58;	author tg;	state Exp;
branches;
next	1.113;
commitid	10047E6D4C4222CC17E;

1.113
date	2008.03.04.00.09.34;	author tg;	state Exp;
branches
	1.113.2.1;
next	1.112;
commitid	10047CC921C5CA48A48;

1.112
date	2008.03.03.22.38.41;	author tg;	state Exp;
branches;
next	1.111;
commitid	10047CC7D5E430232EF;

1.111
date	2008.03.01.02.21.37;	author tg;	state Exp;
branches;
next	1.110;
commitid	10047C8BDBC04C448EC;

1.110
date	2008.02.29.18.20.16;	author tg;	state Exp;
branches;
next	1.109;
commitid	10047C84CF770E1F8B3;

1.109
date	2008.02.29.11.03.55;	author tg;	state Exp;
branches;
next	1.108;
commitid	10047C7E6A15513F031;

1.108
date	2008.02.27.11.24.12;	author tg;	state Exp;
branches;
next	1.107;
commitid	10047C5484566B4BB83;

1.107
date	2008.02.26.20.43.11;	author tg;	state Exp;
branches;
next	1.106;
commitid	10047C479E866D4A3E1;

1.106
date	2008.02.25.00.58.26;	author tg;	state Exp;
branches;
next	1.105;
commitid	10047C2102904204374;

1.105
date	2008.02.24.15.48.43;	author tg;	state Exp;
branches;
next	1.104;
commitid	10047C190EF15EAB550;

1.104
date	2007.10.25.13.51.18;	author tg;	state Exp;
branches;
next	1.103;
commitid	10047209F6430D35627;

1.103
date	2007.10.18.20.32.32;	author tg;	state Exp;
branches;
next	1.102;
commitid	1004717C2CE427DDAE7;

1.102
date	2007.10.14.13.43.17;	author tg;	state Exp;
branches;
next	1.101;
commitid	10047121CFF53E775E9;

1.101
date	2007.09.26.19.26.58;	author tg;	state Exp;
branches;
next	1.100;
commitid	10046FAB284311E6B67;

1.100
date	2007.09.09.19.18.59;	author tg;	state Exp;
branches;
next	1.99;
commitid	10046E4472E1F4A66E1;

1.99
date	2007.08.19.22.06.26;	author tg;	state Exp;
branches;
next	1.98;
commitid	10046C8BEC1249CCADD;

1.98
date	2007.08.18.01.20.28;	author tg;	state Exp;
branches;
next	1.97;
commitid	10046C64959337B7951;

1.97
date	2007.08.18.00.22.08;	author tg;	state Exp;
branches;
next	1.96;
commitid	10046C63BBA357F61D4;

1.96
date	2007.08.13.19.39.20;	author tg;	state Exp;
branches;
next	1.95;
commitid	10046C0B31A6F414C8F;

1.95
date	2007.08.12.14.01.38;	author tg;	state Exp;
branches;
next	1.94;
commitid	10046BF12C653F309AD;

1.94
date	2007.08.12.13.42.22;	author tg;	state Exp;
branches;
next	1.93;
commitid	10046BF0E4F7055959B;

1.93
date	2007.07.31.15.29.40;	author tg;	state Exp;
branches;
next	1.92;
commitid	10046AF54DA06B43D9B;

1.92
date	2007.07.26.13.32.16;	author tg;	state Exp;
branches;
next	1.91;
commitid	10046A8A26E4E66F962;

1.91
date	2007.07.06.02.22.56;	author tg;	state Exp;
branches;
next	1.90;
commitid	100468DA78E140683C0;

1.90
date	2007.06.27.23.12.59;	author tg;	state Exp;
branches;
next	1.89;
commitid	1004682EDC82ADECDD6;

1.89
date	2007.06.23.19.07.14;	author tg;	state Exp;
branches;
next	1.88;
commitid	100467D6F5A57860A31;

1.88
date	2007.06.22.23.34.41;	author tg;	state Exp;
branches;
next	1.87;
commitid	100467C5C9519B9C52A;

1.87
date	2007.06.17.00.50.08;	author tg;	state Exp;
branches;
next	1.86;
commitid	100467485062D380C8D;

1.86
date	2007.06.16.15.02.56;	author tg;	state Exp;
branches;
next	1.85;
commitid	1004673FBB32FC07FD4;

1.85
date	2007.06.15.22.04.06;	author tg;	state Exp;
branches;
next	1.84;
commitid	10046730CE76D2A6FBB;

1.84
date	2007.04.30.19.16.30;	author tg;	state Exp;
branches;
next	1.83;
commitid	1004636407F55D14D47;

1.83
date	2007.04.23.11.41.47;	author tg;	state Exp;
branches;
next	1.82;
commitid	100462C9B8A5B92782F;

1.82
date	2007.04.15.12.28.38;	author tg;	state Exp;
branches;
next	1.81;
commitid	10046221A4C48C9FA1F;

1.81
date	2007.03.10.21.14.07;	author tg;	state Exp;
branches;
next	1.80;
commitid	10045F31FAA1695A58D;

1.80
date	2007.03.10.00.34.54;	author tg;	state Exp;
branches;
next	1.79;
commitid	10045F1FD3C06CBB5D4;

1.79
date	2007.03.04.03.04.26;	author tg;	state Exp;
branches;
next	1.78;
commitid	10045EA374B3374AB35;

1.78
date	2007.01.18.16.23.52;	author tg;	state Exp;
branches;
next	1.77;
commitid	10045AF9F2F680EED96;

1.77
date	2007.01.18.00.00.27;	author tg;	state Exp;
branches;
next	1.76;
commitid	10045AEB8A554AA0ACF;

1.76
date	2007.01.17.23.47.15;	author tg;	state Exp;
branches;
next	1.75;
commitid	10045AEB50A4F8328BF;

1.75
date	2007.01.14.01.56.23;	author tg;	state Exp;
branches
	1.75.2.1;
next	1.74;
commitid	10045A98D530BE57204;

1.74
date	2007.01.14.01.09.09;	author tg;	state Exp;
branches;
next	1.73;
commitid	10045A982725C7995A4;

1.73
date	2007.01.06.18.48.26;	author tg;	state Exp;
branches;
next	1.72;
commitid	100459FEF0A70C6A5DA;

1.72
date	2006.12.11.20.00.28;	author tg;	state Exp;
branches;
next	1.71;
commitid	100457DB8B52414E449;

1.71
date	2006.12.06.13.46.27;	author tg;	state Exp;
branches;
next	1.70;
commitid	1004576C9B26DDF99FB;

1.70
date	2006.11.19.20.43.13;	author tg;	state Exp;
branches;
next	1.69;
commitid	1004560C1B06C73EF4A;

1.69
date	2006.11.19.17.00.32;	author tg;	state Exp;
branches;
next	1.68;
commitid	10045608D7E7F2AD0E8;

1.68
date	2006.11.19.16.43.42;	author tg;	state Exp;
branches;
next	1.67;
commitid	1004560891159DD45F6;

1.67
date	2006.11.16.13.05.39;	author tg;	state Exp;
branches;
next	1.66;
commitid	100455C623A6CBC295B;

1.66
date	2006.11.12.10.44.42;	author tg;	state Exp;
branches;
next	1.65;
commitid	1004556FB165B715FFA;

1.65
date	2006.11.10.05.23.12;	author tg;	state Exp;
branches;
next	1.64;
commitid	10045540CCB39485995;

1.64
date	2006.11.09.22.11.08;	author tg;	state Exp;
branches;
next	1.63;
commitid	1004553A78E6D004CA4;

1.63
date	2006.11.08.23.49.01;	author tg;	state Exp;
branches;
next	1.62;
commitid	10045526CFC5A5B9A07;

1.62
date	2006.11.08.20.32.44;	author tg;	state Exp;
branches;
next	1.61;
commitid	10045523EEF58209E1A;

1.61
date	2006.11.08.20.27.26;	author tg;	state Exp;
branches;
next	1.60;
commitid	10045523DAC2422ECEB;

1.60
date	2006.11.05.17.01.46;	author tg;	state Exp;
branches;
next	1.59;
commitid	100454E18FF508FB3FE;

1.59
date	2006.09.13.16.14.29;	author tg;	state Exp;
branches;
next	1.58;
commitid	10045082E5163460F25;

1.58
date	2006.08.28.03.31.01;	author tg;	state Exp;
branches;
next	1.57;
commitid	10044F26318252337EB;

1.57
date	2006.08.22.22.49.36;	author tg;	state Exp;
branches;
next	1.56;
commitid	10044EB89CB27D175DB;

1.56
date	2006.08.14.20.41.21;	author tg;	state Exp;
branches
	1.56.2.1;
next	1.55;
commitid	10044E0DFE179777366;

1.55
date	2006.08.11.13.46.32;	author tg;	state Exp;
branches;
next	1.54;
commitid	10044DC8A46577080CA;

1.54
date	2006.08.09.20.44.15;	author tg;	state Exp;
branches;
next	1.53;
commitid	10044DA49163318158B;

1.53
date	2006.08.09.20.27.18;	author tg;	state Exp;
branches;
next	1.52;
commitid	10044DA452F1352F014;

1.52
date	2006.08.08.20.19.14;	author tg;	state Exp;
branches;
next	1.51;
commitid	10044D8F1D34495B5EF;

1.51
date	2006.08.08.20.17.21;	author tg;	state Exp;
branches;
next	1.50;
commitid	10044D8F142232C4BC7;

1.50
date	2006.08.08.20.07.53;	author tg;	state Exp;
branches;
next	1.49;
commitid	10044D8EEEE696BEC43;

1.49
date	2006.08.02.14.02.55;	author tg;	state Exp;
branches;
next	1.48;
commitid	10044D0B08F6BDAF5CF;

1.48
date	2006.08.02.14.00.19;	author tg;	state Exp;
branches;
next	1.47;
commitid	10044D0AFEA217B8066;

1.47
date	2006.08.02.13.34.02;	author tg;	state Exp;
branches;
next	1.46;
commitid	10044D0A9BF316488D2;

1.46
date	2006.08.02.13.32.18;	author tg;	state Exp;
branches;
next	1.45;
commitid	10044D0A93A6E3C2419;

1.45
date	2006.08.02.11.50.28;	author tg;	state Exp;
branches;
next	1.44;
commitid	10044D091507AB5F673;

1.44
date	2006.08.02.10.41.03;	author tg;	state Exp;
branches;
next	1.43;
commitid	10044D080B163DF8431;

1.43
date	2006.08.01.14.09.19;	author tg;	state Exp;
branches;
next	1.42;
commitid	10044CF609314C13CBE;

1.42
date	2006.08.01.12.44.17;	author tg;	state Exp;
branches;
next	1.41;
commitid	10044CF4CA571D18180;

1.41
date	2006.07.27.14.45.30;	author tg;	state Exp;
branches;
next	1.40;
commitid	10044C8D0F0331A5ACD;

1.40
date	2006.07.23.14.35.44;	author tg;	state Exp;
branches;
next	1.39;
commitid	10044C38956068FA76E;

1.39
date	2006.07.23.14.35.10;	author tg;	state Exp;
branches;
next	1.38;
commitid	10044C3891E541BA20E;

1.38
date	2006.07.21.21.47.43;	author tg;	state Exp;
branches;
next	1.37;
commitid	10044C14B8405419AA1;

1.37
date	2006.07.03.12.19.43;	author tg;	state Exp;
branches;
next	1.36;
commitid	10044A90B712AD8EBB7;

1.36
date	2006.06.21.19.27.35;	author tg;	state Exp;
branches;
next	1.35;
commitid	10044999D9B6AABE232;

1.35
date	2006.05.10.19.30.33;	author tg;	state Exp;
branches;
next	1.34;
commitid	10044623F60676FC8A1;

1.34
date	2006.05.10.18.54.11;	author tg;	state Exp;
branches;
next	1.33;
commitid	100446236E6726083C8;

1.33
date	2006.05.08.12.12.36;	author tg;	state Exp;
branches;
next	1.32;
commitid	100445F35B73C74FA3D;

1.32
date	2006.05.08.11.59.41;	author tg;	state Exp;
branches;
next	1.31;
commitid	100445F328D5580A1BA;

1.31
date	2006.05.08.11.42.36;	author tg;	state Exp;
branches;
next	1.30;
commitid	100445F2E0E7C37DD2F;

1.30
date	2006.02.16.11.48.32;	author tg;	state Exp;
branches;
next	1.29;
commitid	10043F4664F31176871;

1.29
date	2006.01.30.12.37.23;	author tg;	state Exp;
branches;
next	1.28;
commitid	10043DE088533ED5341;

1.28
date	2006.01.29.20.04.52;	author tg;	state Exp;
branches;
next	1.27;
commitid	10043DD1FE6328EF386;

1.27
date	2006.01.27.10.59.30;	author tg;	state Exp;
branches;
next	1.26;
commitid	10043D9FD251679E862;

1.26
date	2006.01.27.10.58.36;	author tg;	state Exp;
branches;
next	1.25;
commitid	10043D9FCAF42A96190;

1.25
date	2005.11.22.18.36.20;	author tg;	state Exp;
branches;
next	1.24;
commitid	659a438364faa8a1;

1.24
date	2005.11.22.18.09.18;	author tg;	state Exp;
branches;
next	1.23;
commitid	489343835ed5b8c0;

1.23
date	2005.10.21.12.41.55;	author tg;	state Exp;
branches;
next	1.22;
commitid	657d4358e1e6ede8;

1.22
date	2005.10.08.19.34.39;	author tg;	state Exp;
branches;
next	1.21;
commitid	139c43481f5ec2c0;

1.21
date	2005.10.08.19.30.59;	author tg;	state Exp;
branches;
next	1.20;
commitid	512643481e5274c0;

1.20
date	2005.10.07.18.36.19;	author tg;	state Exp;
branches;
next	1.19;
commitid	e4a4346c02fbea7;

1.19
date	2005.09.11.14.47.27;	author tg;	state Exp;
branches;
next	1.18;
commitid	4d474324438e9461;

1.18
date	2005.08.26.22.03.56;	author tg;	state Exp;
branches;
next	1.17;
commitid	57a8430f91c30d91;

1.17
date	2005.08.26.21.54.05;	author tg;	state Exp;
branches;
next	1.16;
commitid	3093430f8f78fd53;

1.16
date	2005.08.21.13.02.17;	author tg;	state Exp;
branches;
next	1.15;
commitid	521743087b5a03be;

1.15
date	2005.08.02.12.35.26;	author tg;	state Exp;
branches;
next	1.14;
commitid	6dd542ef687afd87;

1.14
date	2005.07.06.00.02.06;	author tg;	state Exp;
branches;
next	1.13;
commitid	3c3f42cb1f724a1e;

1.13
date	2005.07.04.12.34.23;	author tg;	state Exp;
branches;
next	1.12;
commitid	4a8342c92cd61cc3;

1.12
date	2005.07.04.12.27.27;	author tg;	state Exp;
branches;
next	1.11;
commitid	3ec342c92b3a8874;

1.11
date	2005.07.04.12.07.40;	author tg;	state Exp;
branches;
next	1.10;
commitid	638742c926619991;

1.10
date	2005.07.04.11.57.55;	author tg;	state Exp;
branches;
next	1.9;
commitid	347442c9243dac0e;

1.9
date	2005.06.08.21.51.21;	author tg;	state Exp;
branches;
next	1.8;
commitid	318442a76849872f;

1.8
date	2005.06.08.10.59.41;	author tg;	state Exp;
branches;
next	1.7;
commitid	277b42a6cf9bb320;

1.7
date	2005.06.08.10.25.40;	author tg;	state Exp;
branches;
next	1.6;
commitid	173f42a6c7adc00f;

1.6
date	2005.06.08.10.14.09;	author tg;	state Exp;
branches;
next	1.5;
commitid	117142a6c4f4d0f4;

1.5
date	2005.05.25.23.31.07;	author tg;	state Exp;
branches;
next	1.4;
commitid	6fd242950a6e73e0;

1.4
date	2005.05.25.14.15.40;	author tg;	state Exp;
branches;
next	1.3;
commitid	56704294889d68b3;

1.3
date	2005.05.25.10.01.24;	author tg;	state Exp;
branches;
next	1.2;
commitid	25ba42944cf49660;

1.2
date	2005.05.23.13.44.13;	author tg;	state Exp;
branches;
next	1.1;
commitid	7474291de2cf9e6;

1.1
date	2005.05.23.03.06.09;	author tg;	state Exp;
branches;
next	;
commitid	1a89429147b8402d;

1.344.2.1
date	2015.01.11.22.39.51;	author tg;	state Exp;
branches;
next	1.344.2.2;
commitid	10054B2FBC1440F88AD;

1.344.2.2
date	2015.01.25.15.35.49;	author tg;	state Exp;
branches;
next	1.344.2.3;
commitid	10054C50D442D861FBF;

1.344.2.3
date	2015.03.01.15.43.03;	author tg;	state Exp;
branches;
next	1.344.2.4;
commitid	10054F33364551D895A;

1.344.2.4
date	2015.03.20.22.21.05;	author tg;	state Exp;
branches;
next	1.344.2.5;
commitid	100550C9D521FCB4274;

1.344.2.5
date	2015.04.12.22.32.30;	author tg;	state Exp;
branches;
next	1.344.2.6;
commitid	100552AF26A429AA816;

1.344.2.6
date	2015.04.29.21.00.46;	author tg;	state Exp;
branches;
next	;
commitid	1005541468303AD54CF;

1.285.2.1
date	2013.03.24.21.34.08;	author tg;	state Exp;
branches;
next	;
commitid	100514F71661744EE30;

1.269.2.1
date	2011.07.07.21.42.15;	author tg;	state Exp;
branches;
next	1.269.2.2;
commitid	1004E162810137500DE;

1.269.2.2
date	2011.07.16.13.59.08;	author tg;	state Exp;
branches;
next	1.269.2.3;
commitid	1004E2199203D26F654;

1.269.2.3
date	2011.07.16.15.47.53;	author tg;	state Exp;
branches;
next	1.269.2.4;
commitid	1004E21B2B65833F3DD;

1.269.2.4
date	2011.07.16.16.04.13;	author tg;	state Exp;
branches;
next	1.269.2.5;
commitid	1004E21B64E3A80D0DC;

1.269.2.5
date	2011.10.25.22.50.36;	author tg;	state Exp;
branches;
next	1.269.2.6;
commitid	1004EA73D456165B188;

1.269.2.6
date	2011.11.19.22.21.57;	author tg;	state Exp;
branches;
next	1.269.2.7;
commitid	1004EC82C02177E0E27;

1.269.2.7
date	2011.12.04.19.59.51;	author tg;	state Exp;
branches;
next	1.269.2.8;
commitid	1004EDBD1266A61D50A;

1.269.2.8
date	2011.12.11.18.18.25;	author tg;	state Exp;
branches;
next	1.269.2.9;
commitid	1004EE4F3FF0C99C8CA;

1.269.2.9
date	2011.12.31.02.25.29;	author tg;	state Exp;
branches;
next	1.269.2.10;
commitid	1004EFE72A268DB0925;

1.269.2.10
date	2012.03.24.21.22.40;	author tg;	state Exp;
branches;
next	1.269.2.11;
commitid	1004F6E3A967ACCD93A;

1.269.2.11
date	2012.03.24.23.29.24;	author tg;	state Exp;
branches;
next	1.269.2.12;
commitid	1004F6E58E3054890A7;

1.269.2.12
date	2012.04.07.11.18.10;	author tg;	state Exp;
branches;
next	;
commitid	1004F80227C595EC20D;

1.178.2.1
date	2009.08.30.20.56.07;	author tg;	state Exp;
branches;
next	;
commitid	1004A9AE59203C5D0BB;

1.145.2.1
date	2008.12.13.17.44.42;	author tg;	state Exp;
branches;
next	;
commitid	1004943F49B60719DDD;

1.113.2.1
date	2008.04.22.13.29.31;	author tg;	state Exp;
branches;
next	1.113.2.2;
commitid	100480DE80F32BAA72D;

1.113.2.2
date	2008.05.19.18.41.28;	author tg;	state Exp;
branches;
next	1.113.2.3;
commitid	1004831C9A63DA06745;

1.113.2.3
date	2008.07.11.11.49.28;	author tg;	state Exp;
branches;
next	1.113.2.4;
commitid	100487748D62394D033;

1.113.2.4
date	2008.12.14.00.07.46;	author tg;	state Exp;
branches;
next	;
commitid	10049444E5325915C76;

1.75.2.1
date	2007.03.03.21.37.57;	author tg;	state Exp;
branches;
next	;
commitid	10045E9EAC27ABA6ADF;

1.56.2.1
date	2006.08.24.20.52.13;	author tg;	state Exp;
branches;
next	1.56.2.2;
commitid	10044EE117A130AF943;

1.56.2.2
date	2006.08.28.01.49.19;	author tg;	state Exp;
branches;
next	;
commitid	10044F24B9666020C36;


desc
@MirBSD Korn Shell - Manual Pages
@


1.473
log
@explain state of vi mode better

inspired and reviewed by veedeeh in IRC
@
text
@.\" $MirOS: src/bin/mksh/mksh.1,v 1.472 2020/01/11 21:12:29 tg Exp $
.\" $OpenBSD: ksh.1,v 1.160 2015/07/04 13:27:04 feinerer Exp $
.\"-
.\" Copyright © 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
.\"		2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
.\"		2018, 2019, 2020
.\"	mirabilos <m@@mirbsd.org>
.\"
.\" Provided that these terms and disclaimer and all copyright notices
.\" are retained or reproduced in an accompanying document, permission
.\" is granted to deal in this work without restriction, including un‐
.\" limited rights to use, publicly perform, distribute, sell, modify,
.\" merge, give away, or sublicence.
.\"
.\" This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
.\" the utmost extent permitted by applicable law, neither express nor
.\" implied; without malicious intent or gross negligence. In no event
.\" may a licensor, author or contributor be held liable for indirect,
.\" direct, other damage, loss, or other issues arising in any way out
.\" of dealing in the work, even if advised of the possibility of such
.\" damage or existence of a defect, except proven that it results out
.\" of said person’s immediate fault when using the work as intended.
.\"-
.\" Try to make GNU groff and AT&T nroff more compatible
.\" * ` generates ‘ in gnroff, so use \`
.\" * ' generates ’ in gnroff, \' generates ´, so use \*(aq
.\" * - generates ‐ in gnroff, \- generates −, so .tr it to -
.\"   thus use - for hyphens and \- for minus signs and option dashes
.\" * ~ is size-reduced and placed atop in groff, so use \*(TI
.\" * ^ is size-reduced and placed atop in groff, so use \*(ha
.\" * \(en does not work in nroff, so use \*(en
.\" * <>| are problematic, so redefine and use \*(Lt\*(Gt\*(Ba
.\" Also make sure to use \& *before* a punctuation char that is to not
.\" be interpreted as punctuation, and especially with two-letter words
.\" but also (after) a period that does not end a sentence (“e.g.\&”).
.\" The section after the "doc" macropackage has been loaded contains
.\" additional code to convene between the UCB mdoc macropackage (and
.\" its variant as BSD mdoc in groff) and the GNU mdoc macropackage.
.\"
.ie \n(.g \{\
.	if \*[.T]ascii .tr \-\N'45'
.	if \*[.T]latin1 .tr \-\N'45'
.	if \*[.T]utf8 .tr \-\N'45'
.	ds <= \[<=]
.	ds >= \[>=]
.	ds Rq \[rq]
.	ds Lq \[lq]
.	ds sL \(aq
.	ds sR \(aq
.	if \*[.T]utf8 .ds sL `
.	if \*[.T]ps .ds sL `
.	if \*[.T]utf8 .ds sR '
.	if \*[.T]ps .ds sR '
.	ds aq \(aq
.	ds TI \(ti
.	ds ha \(ha
.	ds en \(en
.\}
.el \{\
.	ds aq '
.	ds TI ~
.	ds ha ^
.	ds en \(em
.\}
.\"
.\" Implement .Dd with the Mdocdate RCS keyword
.\"
.rn Dd xD
.de Dd
.ie \\$1$Mdocdate: \{\
.	xD \\$2 \\$3, \\$4
.\}
.el .xD \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8
..
.\"
.\" .Dd must come before definition of .Mx, because when called
.\" with -mandoc, it might implement .Mx itself, but we want to
.\" use our own definition. And .Dd must come *first*, always.
.\"
.Dd $Mdocdate: January 11 2020 $
.\"
.\" Check which macro package we use, and do other -mdoc setup.
.\"
.ie \n(.g \{\
.	if \*[.T]utf8 .tr \[la]\*(Lt
.	if \*[.T]utf8 .tr \[ra]\*(Gt
.	ie d volume-ds-1 .ds tT gnu
.	el .ie d doc-volume-ds-1 .ds tT gnp
.	el .ds tT bsd
.\}
.el .ds tT ucb
.\"
.\" Implement .Mx (MirBSD)
.\"
.ie "\*(tT"gnu" \{\
.	eo
.	de Mx
.	nr curr-font \n[.f]
.	nr curr-size \n[.ps]
.	ds str-Mx \f[\n[curr-font]]\s[\n[curr-size]u]
.	ds str-Mx1 \*[Tn-font-size]\%MirBSD\*[str-Mx]
.	if !\n[arg-limit] \
.	if \n[.$] \{\
.	ds macro-name Mx
.	parse-args \$@@
.	\}
.	if (\n[arg-limit] > \n[arg-ptr]) \{\
.	nr arg-ptr +1
.	ie (\n[type\n[arg-ptr]] == 2) \
.	as str-Mx1 \~\*[arg\n[arg-ptr]]
.	el \
.	nr arg-ptr -1
.	\}
.	ds arg\n[arg-ptr] "\*[str-Mx1]
.	nr type\n[arg-ptr] 2
.	ds space\n[arg-ptr] "\*[space]
.	nr num-args (\n[arg-limit] - \n[arg-ptr])
.	nr arg-limit \n[arg-ptr]
.	if \n[num-args] \
.	parse-space-vector
.	print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[Tn-font-size]
.\}
.el .ie "\*(tT"gnp" \{\
.	eo
.	de Mx
.	nr doc-curr-font \n[.f]
.	nr doc-curr-size \n[.ps]
.	ds doc-str-Mx \f[\n[doc-curr-font]]\s[\n[doc-curr-size]u]
.	ds doc-str-Mx1 \*[doc-Tn-font-size]\%MirBSD\*[doc-str-Mx]
.	if !\n[doc-arg-limit] \
.	if \n[.$] \{\
.	ds doc-macro-name Mx
.	doc-parse-args \$@@
.	\}
.	if (\n[doc-arg-limit] > \n[doc-arg-ptr]) \{\
.	nr doc-arg-ptr +1
.	ie (\n[doc-type\n[doc-arg-ptr]] == 2) \
.	as doc-str-Mx1 \~\*[doc-arg\n[doc-arg-ptr]]
.	el \
.	nr doc-arg-ptr -1
.	\}
.	ds doc-arg\n[doc-arg-ptr] "\*[doc-str-Mx1]
.	nr doc-type\n[doc-arg-ptr] 2
.	ds doc-space\n[doc-arg-ptr] "\*[doc-space]
.	nr doc-num-args (\n[doc-arg-limit] - \n[doc-arg-ptr])
.	nr doc-arg-limit \n[doc-arg-ptr]
.	if \n[doc-num-args] \
.	doc-parse-space-vector
.	doc-print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[doc-Tn-font-size]
.\}
.el \{\
.	de Mx
.	nr cF \\n(.f
.	nr cZ \\n(.s
.	ds aa \&\f\\n(cF\s\\n(cZ
.	if \\n(aC==0 \{\
.		ie \\n(.$==0 \&MirBSD\\*(aa
.		el .aV \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8 \\$9
.	\}
.	if \\n(aC>\\n(aP \{\
.		nr aP \\n(aP+1
.		ie \\n(C\\n(aP==2 \{\
.			as b1 \&MirBSD\ #\&\\*(A\\n(aP\\*(aa
.			ie \\n(aC>\\n(aP \{\
.				nr aP \\n(aP+1
.				nR
.			\}
.			el .aZ
.		\}
.		el \{\
.			as b1 \&MirBSD\\*(aa
.			nR
.		\}
.	\}
..
.\}
.\"-
.Dt MKSH 1
.Os MirBSD
.Sh NAME
.Nm mksh ,
.Nm sh
.Nd MirBSD Korn shell
.Sh SYNOPSIS
.Nm
.Bk -words
.Op Fl +abCefhiklmnprUuvXx
.Oo
.Fl T Oo Ar \&! Oc Ns Ar tty
\*(Ba
.Ar \&\-
.Oc
.Op Fl +o Ar option
.Oo
.Fl c Ar string \*(Ba
.Fl s \*(Ba
.Ar file
.Op Ar argument ...
.Oc
.Ek
.Nm builtin-name
.Op Ar argument ...
.Sh DESCRIPTION
.Nm
is a command interpreter intended for both interactive and shell
script use.
Its command language is a superset of the
.Xr sh C
shell language and largely compatible to the original Korn shell.
At times, this manual page may give scripting advice; while it
sometimes does take portable shell scripting or various standards
into account all information is first and foremost presented with
.Nm
in mind and should be taken as such.
.Ss I use Android, OS/2, etc. so what...?
Please refer to:
.Pa http://www.mirbsd.org/mksh\-faq.htm#sowhatismksh
.Ss Invocation
Most builtins can be called directly, for example if a link points from its
name to the shell; not all make sense, have been tested or work at all though.
.Pp
The options are as follows:
.Bl -tag -width XcXstring
.It Fl c Ar string
.Nm
will execute the command(s) contained in
.Ar string .
.It Fl i
Interactive shell.
A shell that reads commands from standard input is
.Dq interactive
if this
option is used or if both standard input and standard error are attached
to a
.Xr tty 4 .
An interactive shell has job control enabled, ignores the
.Dv SIGINT ,
.Dv SIGQUIT
and
.Dv SIGTERM
signals, and prints prompts before reading input (see the
.Ev PS1
and
.Ev PS2
parameters).
It also processes the
.Ev ENV
parameter or the
.Pa mkshrc
file (see below).
For non-interactive shells, the
.Ic trackall
option is on by default (see the
.Ic set
command below).
.It Fl l
Login shell.
If the basename the shell is called with (i.e. argv[0])
starts with
.Ql \-
or if this option is used,
the shell is assumed to be a login shell; see
.Sx Startup files
below.
.It Fl p
Privileged shell.
A shell is
.Dq privileged
if the real user ID or group ID does not match the
effective user ID or group ID (see
.Xr getuid 2
and
.Xr getgid 2 ) .
Clearing the privileged option causes the shell to set
its effective user ID (group ID) to its initial real user ID (group ID).
For further implications, see
.Sx Startup files .
If the shell is privileged and this flag is not explicitly set, the
.Dq privileged
option is cleared automatically after processing the startup files.
.It Fl r
Restricted shell.
A shell is
.Dq restricted
if this
option is used.
The following restrictions come into effect after the shell processes any
profile and
.Ev ENV
files:
.Pp
.Bl -bullet -compact
.It
The
.Ic cd
.Po and Ic chdir Pc
command is disabled.
.It
The
.Ev SHELL ,
.Ev ENV
and
.Ev PATH
parameters cannot be changed.
.It
Command names can't be specified with absolute or relative paths.
.It
The
.Fl p
option of the built-in command
.Ic command
can't be used.
.It
Redirections that create files can't be used (i.e.\&
.Dq Li \*(Gt ,
.Dq Li \*(Gt\*(Ba ,
.Dq Li \*(Gt\*(Gt ,
.Dq Li \*(Lt\*(Gt ) .
.El
.It Fl s
The shell reads commands from standard input; all non-option arguments
are positional parameters.
.It Fl T Ar name
Spawn
.Nm
on the
.Xr tty 4
device given.
The paths
.Ar name ,
.Pa /dev/ttyC Ns Ar name
and
.Pa /dev/tty Ns Ar name
are attempted in order.
Unless
.Ar name
begins with an exclamation mark
.Pq Ql \&! ,
this is done in a subshell and returns immediately.
If
.Ar name
is a dash
.Pq Ql \&\- ,
detach from controlling terminal (daemonise) instead.
.El
.Pp
In addition to the above, the options described in the
.Ic set
built-in command can also be used on the command line:
both
.Op Fl +abCefhkmnuvXx
and
.Op Fl +o Ar option
can be used for single letter or long options, respectively.
.Pp
If neither the
.Fl c
nor the
.Fl s
option is specified, the first non-option argument specifies the name
of a file the shell reads commands from.
If there are no non-option
arguments, the shell reads commands from the standard input.
The name of the shell (i.e. the contents of $0)
is determined as follows: if the
.Fl c
option is used and there is a non-option argument, it is used as the name;
if commands are being read from a file, the file is used as the name;
otherwise, the basename the shell was called with (i.e. argv[0]) is used.
.Pp
The exit status of the shell is 127 if the command file specified on the
command line could not be opened, or non-zero if a fatal syntax error
occurred during the execution of a script.
In the absence of fatal errors,
the exit status is that of the last command executed, or zero if no
command is executed.
.Ss Startup files
For the actual location of these files, see
.Sx FILES .
A login shell processes the system profile first.
A privileged shell then processes the suid profile.
A non-privileged login shell processes the user profile next.
A non-privileged interactive shell checks the value of the
.Ev ENV
parameter after subjecting it to parameter, command, arithmetic and tilde
.Pq Ql \*(TI
substitution; if unset or empty, the user mkshrc profile is processed;
otherwise, if a file whose name is the substitution result exists,
it is processed; non-existence is silently ignored.
A privileged shell then drops privileges if neither was the
.Fl p
option given on the command line nor set during execution of the startup files.
.Ss Command syntax
The shell begins parsing its input by removing any backslash-newline
combinations, then breaking it into
.Em words .
Words (which are sequences of characters) are delimited by unquoted whitespace
characters (space, tab and newline) or meta-characters
.Po
.Ql \*(Lt ,
.Ql \*(Gt ,
.Ql \*(Ba ,
.Ql \&; ,
.Ql \&( ,
.Ql \&)
and
.Ql &
.Pc .
Aside from delimiting words, spaces and tabs are ignored, while newlines
usually delimit commands.
The meta-characters are used in building the following
.Em tokens :
.Dq Li \*(Lt ,
.Dq Li \*(Lt& ,
.Dq Li \*(Lt\*(Lt ,
.Dq Li \*(Lt\*(Lt\*(Lt ,
.Dq Li \*(Gt ,
.Dq Li \*(Gt& ,
.Dq Li \*(Gt\*(Gt ,
.Dq Li &\*(Gt ,
etc. are used to specify redirections (see
.Sx Input/output redirection
below);
.Dq Li \*(Ba
is used to create pipelines;
.Dq Li \*(Ba&
is used to create co-processes (see
.Sx Co-processes
below);
.Dq Li \&;
is used to separate commands;
.Dq Li &
is used to create asynchronous pipelines;
.Dq Li &&
and
.Dq Li \*(Ba\*(Ba
are used to specify conditional execution;
.Dq Li \&;; ,
.Dq Li \&;&
and
.Dq Li \&;\*(Ba
are used in
.Ic case
statements;
.Dq Li \&(( ... \&))
is used in arithmetic expressions;
and lastly,
.Dq Li \&( ... \&)
is used to create subshells.
.Pp
Whitespace and meta-characters can be quoted individually using a backslash
.Pq Ql \e ,
or in groups using double
.Pq Ql \&"
or single
.Pq Dq Li \*(aq
quotes.
Note that the following characters are also treated specially by the
shell and must be quoted if they are to represent themselves:
.Ql \e ,
.Ql \&" ,
.Dq Li \*(aq ,
.Ql # ,
.Ql $ ,
.Ql \` ,
.Ql \*(TI ,
.Ql { ,
.Ql } ,
.Ql * ,
.Ql \&?
and
.Ql \&[ .
The first three of these are the above mentioned quoting characters (see
.Sx Quoting
below);
.Ql # ,
if used at the beginning of a word, introduces a comment \*(en everything after
the
.Ql #
up to the nearest newline is ignored;
.Ql $
is used to introduce parameter, command and arithmetic substitutions (see
.Sx Substitution
below);
.Ql \`
introduces an old-style command substitution (see
.Sx Substitution
below);
.Ql \*(TI
begins a directory expansion (see
.Sx Tilde expansion
below);
.Ql {
and
.Ql }
delimit
.Xr csh 1 Ns -style
alternations (see
.Sx Brace expansion
below);
and finally,
.Ql * ,
.Ql \&?
and
.Ql \&[
are used in file name generation (see
.Sx File name patterns
below).
.Pp
As words and tokens are parsed, the shell builds commands, of which there
are two basic types:
.Em simple-commands ,
typically programmes that are executed, and
.Em compound-commands ,
such as
.Ic for
and
.Ic if
statements, grouping constructs and function definitions.
.Pp
A simple-command consists of some combination of parameter assignments
(see
.Sx Parameters
below),
input/output redirections (see
.Sx Input/output redirections
below)
and command words; the only restriction is that parameter assignments come
before any command words.
The command words, if any, define the command
that is to be executed and its arguments.
The command may be a shell built-in command, a function
or an external command
(i.e. a separate executable file that is located using the
.Ev PATH
parameter; see
.Sx Command execution
below).
Note that all command constructs have an exit status: for external commands,
this is related to the status returned by
.Xr wait 2
(if the command could not be found, the exit status is 127; if it could not
be executed, the exit status is 126); the exit status of other command
constructs (built-in commands, functions, compound-commands, pipelines, lists,
etc.) are all well-defined and are described where the construct is
described.
The exit status of a command consisting only of parameter
assignments is that of the last command substitution performed during the
parameter assignment or 0 if there were no command substitutions.
.Pp
Commands can be chained together using the
.Dq Li \*(Ba
token to form pipelines, in which the standard output of each command but the
last is piped (see
.Xr pipe 2 )
to the standard input of the following command.
The exit status of a pipeline is that of its last command, unless the
.Ic pipefail
option is set (see there).
All commands of a pipeline are executed in separate subshells;
this is allowed by POSIX but differs from both variants of
.At
.Nm ksh ,
where all but the last command were executed in subshells; see the
.Ic read
builtin's description for implications and workarounds.
A pipeline may be prefixed by the
.Dq Li \&!
reserved word which causes the exit status of the pipeline to be logically
complemented: if the original status was 0, the complemented status will be 1;
if the original status was not 0, the complemented status will be 0.
.Pp
.Em Lists
of commands can be created by separating pipelines by any of the following
tokens:
.Dq Li && ,
.Dq Li \*(Ba\*(Ba ,
.Dq Li & ,
.Dq Li \*(Ba&
and
.Dq Li \&; .
The first two are for conditional execution:
.Dq Ar cmd1 No && Ar cmd2
executes
.Ar cmd2
only if the exit status of
.Ar cmd1
is zero;
.Dq Li \*(Ba\*(Ba
is the opposite \*(en
.Ar cmd2
is executed only if the exit status of
.Ar cmd1
is non-zero.
.Dq Li &&
and
.Dq Li \*(Ba\*(Ba
have equal precedence which is higher than that of
.Dq Li & ,
.Dq Li \*(Ba&
and
.Dq Li \&; ,
which also have equal precedence.
Note that the
.Dq Li &&
and
.Dq Li \*(Ba\*(Ba
operators are
.Qq left-associative .
For example, both of these commands will print only
.Qq bar :
.Bd -literal -offset indent
$ false && echo foo \*(Ba\*(Ba echo bar
$ true \*(Ba\*(Ba echo foo && echo bar
.Ed
.Pp
The
.Dq Li &
token causes the preceding command to be executed asynchronously; that is,
the shell starts the command but does not wait for it to complete (the shell
does keep track of the status of asynchronous commands; see
.Sx Job control
below).
When an asynchronous command is started when job control is disabled
(i.e. in most scripts), the command is started with signals
.Dv SIGINT
and
.Dv SIGQUIT
ignored and with input redirected from
.Pa /dev/null
(however, redirections specified in the asynchronous command have precedence).
The
.Dq Li \*(Ba&
operator starts a co-process which is a special kind of asynchronous process
(see
.Sx Co-processes
below).
Note that a command must follow the
.Dq Li &&
and
.Dq Li \*(Ba\*(Ba
operators, while it need not follow
.Dq Li & ,
.Dq Li \*(Ba&
or
.Dq Li \&; .
The exit status of a list is that of the last command executed, with the
exception of asynchronous lists, for which the exit status is 0.
.Pp
Compound commands are created using the following reserved words.
These words
are only recognised if they are unquoted and if they are used as the first
word of a command (i.e. they can't be preceded by parameter assignments or
redirections):
.Bd -literal -offset indent
case     else     function     then      !       (
do       esac     if           time      [[      ((
done     fi       in           until     {
elif     for      select       while     }
.Ed
.Pp
In the following compound command descriptions, command lists (denoted as
.Em list )
that are followed by reserved words must end with a semicolon, a newline or
a (syntactically correct) reserved word.
For example, the following are all valid:
.Bd -literal -offset indent
$ { echo foo; echo bar; }
$ { echo foo; echo bar\*(Ltnewline\*(Gt}
$ { { echo foo; echo bar; } }
.Ed
.Pp
This is not valid:
.Pp
.Dl $ { echo foo; echo bar }
.Bl -tag -width 4n
.It Pq Ar list
Execute
.Ar list
in a subshell.
There is no implicit way to pass environment changes from a
subshell back to its parent.
.It { Ar list ; No }
Compound construct;
.Ar list
is executed, but not in a subshell.
Note that
.Dq Li {
and
.Dq Li }
are reserved words, not meta-characters.
.It Xo case Ar word No in
.Oo Op \&(
.Ar pattern
.Op \*(Ba Ar pattern
.No ... Ns )
.Ar list
.Ic terminator
.Oc No ... esac
.Xc
The
.Ic case
statement attempts to match
.Ar word
against a specified
.Ar pattern ;
the
.Ar list
associated with the first successfully matched pattern is executed.
Patterns used in
.Ic case
statements are the same as those used for file name patterns except that the
restrictions regarding
.Ql \&.
and
.Ql /
are dropped.
Note that any unquoted space before and after a pattern is
stripped; any space within a pattern must be quoted.
Both the word and the
patterns are subject to parameter, command and arithmetic substitution, as
well as tilde substitution.
.Pp
For historical reasons, open and close braces may be used instead of
.Ic in
and
.Ic esac
e.g.\&
.Ic case $foo { *) echo bar ;; } .
.Pp
The list
.Ic terminator Ns s
are:
.Bl -tag -width 4n
.It Dq Li ;;
Terminate after the list.
.It Dq Li \&;&
Fall through into the next list.
.It Dq Li \&;\*(Ba
Evaluate the remaining pattern-list tuples.
.El
.Pp
The exit status of a
.Ic case
statement is that of the executed
.Ar list ;
if no
.Ar list
is executed, the exit status is zero.
.It Xo for Ar name
.Oo in Ar word No ... Oc ;
.No do Ar list ; No done
.Xc
For each
.Ar word
in the specified word list, the parameter
.Ar name
is set to the word and
.Ar list
is executed.
If
.Ic in
is not used to specify a word list, the positional parameters ($1, $2,
etc.) are used instead.
For historical reasons, open and close braces may be used instead of
.Ic do
and
.Ic done
e.g.\&
.Ic for i; { echo $i; } .
The exit status of a
.Ic for
statement is the last exit status of
.Ar list ;
if
.Ar list
is never executed, the exit status is zero.
.It Xo if Ar list ;
.No then Ar list ;
.Oo elif Ar list ;
.No then Ar list ; Oc
.No ...
.Oo else Ar list ; Oc
.No fi
.Xc
If the exit status of the first
.Ar list
is zero, the second
.Ar list
is executed; otherwise, the
.Ar list
following the
.Ic elif ,
if any, is executed with similar consequences.
If all the lists following the
.Ic if
and
.Ic elif Ns s
fail (i.e. exit with non-zero status), the
.Ar list
following the
.Ic else
is executed.
The exit status of an
.Ic if
statement is that of non-conditional
.Ar list
that is executed; if no non-conditional
.Ar list
is executed, the exit status is zero.
.It Xo select Ar name
.Oo in Ar word No ... Oc ;
.No do Ar list ; No done
.Xc
The
.Ic select
statement provides an automatic method of presenting the user with a menu and
selecting from it.
An enumerated list of the specified
.Ar word Ns (s)
is printed on standard error, followed by a prompt
.Po
.Ev PS3 :
normally
.Dq Li #?\ \&
.Pc .
A number corresponding to one of the enumerated words is then read from
standard input,
.Ar name
is set to the selected word (or unset if the selection is not valid),
.Ev REPLY
is set to what was read (leading/trailing space is stripped), and
.Ar list
is executed.
If a blank line (i.e. zero or more
.Ev IFS
octets) is entered, the menu is reprinted without executing
.Ar list .
.Pp
When
.Ar list
completes, the enumerated list is printed if
.Ev REPLY
is empty, the prompt is printed, and so on.
This process continues until an end-of-file
is read, an interrupt is received, or a
.Ic break
statement is executed inside the loop.
If
.Dq in Ar word ...
is omitted, the positional parameters are used
(i.e. $1, $2, etc.).
For historical reasons, open and close braces may be used instead of
.Ic do
and
.Ic done
e.g.\&
.Ic select i; { echo $i; } .
The exit status of a
.Ic select
statement is zero if a
.Ic break
statement is used to exit the loop, non-zero otherwise.
.It Xo until Ar list ;
.No do Ar list ;
.No done
.Xc
This works like
.Ic while ,
except that the body is executed only while the exit status of the first
.Ar list
is non-zero.
.It Xo while Ar list ;
.No do Ar list ;
.No done
.Xc
A
.Ic while
is a pre-checked loop.
Its body is executed as often as the exit status of the first
.Ar list
is zero.
The exit status of a
.Ic while
statement is the last exit status of the
.Ar list
in the body of the loop; if the body is not executed, the exit status is zero.
.It Xo function Ar name
.No { Ar list ; No }
.Xc
Defines the function
.Ar name
(see
.Sx Functions
below).
Note that redirections specified after a function definition are
performed whenever the function is executed, not when the function definition
is executed.
.It Ar name Ns \&() Ar command
Mostly the same as
.Ic function
(see
.Sx Functions
below).
Whitespace (space or tab) after
.Ar name
will be ignored most of the time.
.It Xo function Ar name Ns \&()
.No { Ar list ; No }
.Xc
The same as
.Ar name Ns \&()
.Pq Nm bash Ns ism .
The
.Ic function
keyword is ignored.
.It Xo Ic time Op Fl p
.Op Ar pipeline
.Xc
The
.Sx Command execution
section describes the
.Ic time
reserved word.
.It \&(( Ar expression No ))
The arithmetic expression
.Ar expression
is evaluated; equivalent to
.Dq Li let \&" Ns Ar expression Ns \&"
(see
.Sx Arithmetic expressions
and the
.Ic let
command, below) in a compound construct.
.It Bq Bq Ar \ \&expression\ \&
Similar to the
.Ic test
and
.Ic \&[ ... \&]
commands (described later), with the following exceptions:
.Bl -bullet
.It
Field splitting and file name generation are not performed on arguments.
.It
The
.Fl a
.Pq AND
and
.Fl o
.Pq OR
operators are replaced with
.Dq Li &&
and
.Dq Li \*(Ba\*(Ba ,
respectively.
.It
Operators (e.g.\&
.Dq Li \-f ,
.Dq Li = ,
.Dq Li \&! )
must be unquoted.
.It
Parameter, command and arithmetic substitutions are performed as expressions
are evaluated and lazy expression evaluation is used for the
.Dq Li &&
and
.Dq Li \*(Ba\*(Ba
operators.
This means that in the following statement,
.Ic $(\*(Ltfoo)
is evaluated if and only if the file
.Pa foo
exists and is readable:
.Bd -literal -offset indent
$ [[ \-r foo && $(\*(Ltfoo) = b*r ]]
.Ed
.It
The second operand of the
.Dq Li !=
and
.Dq Li =
expressions are a subset of patterns (e.g. the comparison
.Ic \&[[ foobar = f*r ]]
succeeds).
This even works indirectly:
.Bd -literal -offset indent
$ bar=foobar; baz=\*(aqf*r\*(aq
$ [[ $bar = $baz ]]; echo $?
$ [[ $bar = \&"$baz" ]]; echo $?
.Ed
.Pp
Perhaps surprisingly, the first comparison succeeds,
whereas the second doesn't.
This does not apply to all extglob metacharacters, currently.
.El
.El
.Ss Quoting
Quoting is used to prevent the shell from treating characters or words
specially.
There are three methods of quoting.
First,
.Ql \e
quotes the following character, unless it is at the end of a line, in which
case both the
.Ql \e
and the newline are stripped.
Second, a single quote
.Pq Dq Li \*(aq
quotes everything up to the next single quote (this may span lines).
Third, a double quote
.Pq Ql \&"
quotes all characters, except
.Ql $ ,
.Ql \e
and
.Ql \` ,
up to the next unescaped double quote.
.Ql $
and
.Ql \`
inside double quotes have their usual meaning (i.e. parameter, arithmetic
or command substitution) except no field splitting is carried out on the
results of double-quoted substitutions, and the old-style form of command
substitution has backslash-quoting for double quotes enabled.
If a
.Ql \e
inside a double-quoted string is followed by
.Ql \&" ,
.Ql $ ,
.Ql \e
or
.Ql \` ,
only the
.Ql \e
is removed, i.e. the combination is replaced by the second character;
if it is followed by a newline, both the
.Ql \e
and the newline are stripped; otherwise, both the
.Ql \e
and the character following are unchanged.
.Pp
If a single-quoted string is preceded by an unquoted
.Ql $ ,
C style backslash expansion (see below) is applied (even single quote
characters inside can be escaped and do not terminate the string then);
the expanded result is treated as any other single-quoted string.
If a double-quoted string is preceded by an unquoted
.Ql $ ,
the
.Ql $
is simply ignored.
.Ss Backslash expansion
In places where backslashes are expanded, certain C and
.At
.Nm ksh
or GNU
.Nm bash
style escapes are translated.
These include
.Dq Li \ea ,
.Dq Li \eb ,
.Dq Li \ef ,
.Dq Li \en ,
.Dq Li \er ,
.Dq Li \et ,
.Dq Li \eU######## ,
.Dq Li \eu####
and
.Dq Li \ev .
For
.Dq Li \eU########
and
.Dq Li \eu#### ,
.Dq #
means a hexadecimal digit, of which there may be none up to four or eight;
these escapes translate a Universal Coded Character Set codepoint to UTF-8.
Furthermore,
.Dq Li \eE
and
.Dq Li \ee
expand to the escape character.
.Pp
In the
.Ic print
builtin mode,
.Dq Li \e" ,
.Dq Li \e\*(aq
and
.Dq Li \e?
are explicitly excluded;
octal sequences must have the none up to three octal digits
.Dq #
prefixed with the digit zero
.Pq Dq Li \e0### ;
hexadecimal sequences
.Dq Li \ex##
are limited to none up to two hexadecimal digits
.Dq # ;
both octal and hexadecimal sequences convert to raw octets;
.Dq Li \e# ,
where # is none of the above, translates to \e# (backslashes are retained).
.Pp
Backslash expansion in the C style mode slightly differs: octal sequences
.Dq Li \e###
must have no digit zero prefixing the one up to three octal digits
.Dq #
and yield raw octets; hexadecimal sequences
.Dq Li \ex#*
greedily eat up as many hexadecimal digits
.Dq #
as they can and terminate with the first non-hexadecimal digit;
these translate a Universal Coded Character Set codepoint to UTF-8.
The sequence
.Dq Li \ec# ,
where
.Dq #
is any octet, translates to Ctrl-# (which basically means,
.Dq Li \ec?
becomes DEL, everything else is bitwise ANDed with 0x1F).
Finally,
.Dq Li \e# ,
where # is none of the above, translates to # (has the backslash trimmed),
even if it is a newline.
.Ss Aliases
There are two types of aliases: normal command aliases and tracked aliases.
Command aliases are normally used as a short hand for a long or often used
command.
The shell expands command aliases (i.e. substitutes the alias name
for its value) when it reads the first word of a command.
An expanded alias is re-processed to check for more aliases.
If a command alias ends in a
space or tab, the following word is also checked for alias expansion.
The alias expansion process stops when a word that is not an alias is found,
when a quoted word is found, or when an alias word that is currently being
expanded is found.
Aliases are specifically an interactive feature: while they do happen
to work in scripts and on the command line in some cases, aliases are
expanded during lexing, so their use must be in a separate command tree
from their definition; otherwise, the alias will not be found.
Noticeably, command lists (separated by semicolon, in command substitutions
also by newline) may be one same parse tree.
.Pp
The following command aliases are defined automatically by the shell:
.Bd -literal -offset indent
autoload=\*(aq\e\ebuiltin typeset \-fu\*(aq
functions=\*(aq\e\ebuiltin typeset \-f\*(aq
hash=\*(aq\e\ebuiltin alias \-t\*(aq
history=\*(aq\e\ebuiltin fc \-l\*(aq
integer=\*(aq\e\ebuiltin typeset \-i\*(aq
local=\*(aq\e\ebuiltin typeset\*(aq
login=\*(aq\e\ebuiltin exec login\*(aq
nameref=\*(aq\e\ebuiltin typeset \-n\*(aq
nohup=\*(aqnohup \*(aq
r=\*(aq\e\ebuiltin fc \-e \-\*(aq
type=\*(aq\e\ebuiltin whence \-v\*(aq
.Ed
.Pp
Tracked aliases allow the shell to remember where it found a particular
command.
The first time the shell does a path search for a command that is
marked as a tracked alias, it saves the full path of the command.
The next
time the command is executed, the shell checks the saved path to see that it
is still valid, and if so, avoids repeating the path search.
Tracked aliases can be listed and created using
.Ic alias Fl t .
Note that changing the
.Ev PATH
parameter clears the saved paths for all tracked aliases.
If the
.Ic trackall
option is set (i.e.\&
.Ic set Fl o Ic trackall
or
.Ic set Fl h ) ,
the shell tracks all commands.
This option is set automatically for non-interactive shells.
For interactive shells, only the following commands are
automatically tracked:
.Xr cat 1 ,
.Xr cc 1 ,
.Xr chmod 1 ,
.Xr cp 1 ,
.Xr date 1 ,
.Xr ed 1 ,
.Xr emacs 1 ,
.Xr grep 1 ,
.Xr ls 1 ,
.Xr make 1 ,
.Xr mv 1 ,
.Xr pr 1 ,
.Xr rm 1 ,
.Xr sed 1 ,
.Xr sh 1 ,
.Xr vi 1
and
.Xr who 1 .
.Ss Substitution
The first step the shell takes in executing a simple-command is to perform
substitutions on the words of the command.
There are three kinds of
substitution: parameter, command and arithmetic.
Parameter substitutions,
which are described in detail in the next section, take the form
.Pf $ Ns Ar name
or
.Pf ${ Ns Ar ... Ns } ;
command substitutions take the form
.Pf $( Ns Ar command Ns \&)
or (deprecated)
.Pf \` Ns Ar command Ns \`
or (executed in the current environment)
.Pf ${\ \& Ar command Ns \&;}
and strip trailing newlines;
and arithmetic substitutions take the form
.Pf $(( Ns Ar expression Ns )) .
Parsing the current-environment command substitution requires a space,
tab or newline after the opening brace and that the closing brace be
recognised as a keyword (i.e. is preceded by a newline or semicolon).
They are also called funsubs (function substitutions) and behave like
functions in that
.Ic local
and
.Ic return
work, and in that
.Ic exit
terminates the parent shell; shell options are shared.
.Pp
Another variant of substitution are the valsubs (value substitutions)
.Pf ${\*(Ba\& Ns Ar command Ns \&;}
which are also executed in the current environment, like funsubs, but
share their I/O with the parent; instead, they evaluate to whatever
the, initially empty, expression-local variable
.Ev REPLY
is set to within the
.Ar command Ns s .
.Pp
If a substitution appears outside of double quotes, the results of the
substitution are generally subject to word or field splitting according to
the current value of the
.Ev IFS
parameter.
The
.Ev IFS
parameter specifies a list of octets which are used to break a string up
into several words; any octets from the set space, tab and newline that
appear in the
.Ev IFS
octets are called
.Dq IFS whitespace .
Sequences of one or more
.Ev IFS
whitespace octets, in combination with zero or one
.Pf non- Ev IFS
whitespace octets, delimit a field.
As a special case, leading and trailing
.Ev IFS
whitespace is stripped (i.e. no leading or trailing empty field
is created by it); leading or trailing
.Pf non- Ev IFS
whitespace does create an empty field.
.Pp
Example: If
.Ev IFS
is set to
.Dq Li \*(Ltspace\*(Gt:
and VAR is set to
.Dq Li \*(Ltspace\*(GtA\*(Ltspace\*(Gt:\*(Ltspace\*(Gt\*(Ltspace\*(GtB::D ,
the substitution for $VAR results in four fields:
.Dq Li A ,
.Dq Li B ,
.Dq
(an empty field) and
.Dq Li D .
Note that if the
.Ev IFS
parameter is set to the empty string, no field splitting is done;
if it is unset, the default value of space, tab and newline is used.
.Pp
Also, note that the field splitting applies only to the immediate result of
the substitution.
Using the previous example, the substitution for $VAR:E
results in the fields:
.Dq Li A ,
.Dq Li B ,
.Dq
and
.Dq Li D:E ,
not
.Dq Li A ,
.Dq Li B ,
.Dq ,
.Dq Li D
and
.Dq Li E .
This behavior is POSIX compliant, but incompatible with some other shell
implementations which do field splitting on the word which contained the
substitution or use
.Dv IFS
as a general whitespace delimiter.
.Pp
The results of substitution are, unless otherwise specified, also subject to
brace expansion and file name expansion (see the relevant sections below).
.Pp
A command substitution is replaced by the output generated by the specified
command which is run in a subshell.
For
.Pf $( Ns Ar command Ns \&)
and
.Pf ${\*(Ba\& Ns Ar command Ns \&;}
and
.Pf ${\ \& Ar command Ns \&;}
substitutions, normal quoting rules are used when
.Ar command
is parsed; however, for the deprecated
.Pf \` Ns Ar command Ns \`
form, a
.Ql \e
followed by any of
.Ql $ ,
.Ql \`
or
.Ql \e
is stripped (as is
.Ql \&"
when the substitution is part of a double-quoted string); a backslash
.Ql \e
followed by any other character is unchanged.
As a special case in command substitutions, a command of the form
.Pf \*(Lt Ar file
is interpreted to mean substitute the contents of
.Ar file .
Note that
.Ic $(\*(Ltfoo)
has the same effect as
.Ic $(cat foo) .
.Pp
Note that some shells do not use a recursive parser for command substitutions,
leading to failure for certain constructs; to be portable, use as workaround
.Dq Li x=$(cat) \*(Lt\*(Lt\eEOF
(or the newline-keeping
.Dq Li x=\*(Lt\*(Lt\eEOF
extension) instead to merely slurp the string.
.St -p1003.1
recommends using case statements of the form
.Li "x=$(case $foo in (bar) echo $bar ;; (*) echo $baz ;; esac)"
instead, which would work but not serve as example for this portability issue.
.Bd -literal -offset indent
x=$(case $foo in bar) echo $bar ;; *) echo $baz ;; esac)
# above fails to parse on old shells; below is the workaround
x=$(eval $(cat)) \*(Lt\*(Lt\eEOF
case $foo in bar) echo $bar ;; *) echo $baz ;; esac
EOF
.Ed
.Pp
Arithmetic substitutions are replaced by the value of the specified expression.
For example, the command
.Ic print $((2+3*4))
displays 14.
See
.Sx Arithmetic expressions
for a description of an expression.
.Ss Parameters
Parameters are shell variables; they can be assigned values and their values
can be accessed using a parameter substitution.
A parameter name is either one
of the special single punctuation or digit character parameters described
below, or a letter followed by zero or more letters or digits
.Po
.Ql _
counts as a letter
.Pc .
The latter form can be treated as arrays by appending an array index of the
form
.Op Ar expr
where
.Ar expr
is an arithmetic expression.
Array indices in
.Nm
are limited to the range 0 through 4294967295, inclusive.
That is, they are a 32-bit unsigned integer.
.Pp
Parameter substitutions take the form
.Pf $ Ns Ar name ,
.Pf ${ Ns Ar name Ns }
or
.Sm off
.Pf ${ Ar name Oo Ar expr Oc }
.Sm on
where
.Ar name
is a parameter name.
Substitutions of an an array in scalar context, i.e. without an
.Ar expr
in the latter form mentioned above, expand the element with the key
.Dq 0 .
Substitution of all array elements with
.Pf ${ Ns Ar name Ns \&[*]}
and
.Pf ${ Ns Ar name Ns \&[@@]}
works equivalent to $* and $@@ for positional parameters.
If substitution is performed on a parameter
(or an array parameter element)
that is not set, an empty string is substituted unless the
.Ic nounset
option
.Pq Ic set Fl u
is set, in which case an error occurs.
.Pp
Parameters can be assigned values in a number of ways.
First, the shell implicitly sets some parameters like
.Dq Li # ,
.Dq Li PWD
and
.Dq Li $ ;
this is the only way the special single character parameters are set.
Second, parameters are imported from the shell's environment at startup.
Third, parameters can be assigned values on the command line: for example,
.Ic FOO=bar
sets the parameter
.Dq Li FOO
to
.Dq Li bar ;
multiple parameter assignments can be given on a single command line and they
can be followed by a simple-command, in which case the assignments are in
effect only for the duration of the command (such assignments are also
exported; see below for the implications of this).
Note that both the parameter name and the
.Ql =
must be unquoted for the shell to recognise a parameter assignment.
The construct
.Ic FOO+=baz
is also recognised;
the old and new values are string-concatenated with no separator.
The fourth way of setting a parameter is with the
.Ic export ,
.Ic global ,
.Ic readonly
and
.Ic typeset
commands; see their descriptions in the
.Sx Command execution
section.
Fifth,
.Ic for
and
.Ic select
loops set parameters as well as the
.Ic getopts ,
.Ic read
and
.Ic set Fl A
commands.
Lastly, parameters can be assigned values using assignment operators
inside arithmetic expressions (see
.Sx Arithmetic expressions
below) or using the
.Sm off
.Pf ${ Ar name No = Ar value No }
.Sm on
form of the parameter substitution (see below).
.Pp
Parameters with the export attribute (set using the
.Ic export
or
.Ic typeset Fl x
commands, or by parameter assignments followed by simple commands) are put in
the environment (see
.Xr environ 7 )
of commands run by the shell as
.Ar name Ns = Ns Ar value
pairs.
The order in which parameters appear in the environment of a command is
unspecified.
When the shell starts up, it extracts parameters and their values
from its environment and automatically sets the export attribute for those
parameters.
.Pp
Modifiers can be applied to the
.Pf ${ Ns Ar name Ns }
form of parameter substitution:
.Bl -tag -width Ds
.Sm off
.It ${ Ar name No :\- Ar word No }
.Sm on
If
.Ar name
is set and not empty,
it is substituted; otherwise,
.Ar word
is substituted.
.Sm off
.It ${ Ar name No :+ Ar word No }
.Sm on
If
.Ar name
is set and not empty,
.Ar word
is substituted; otherwise, nothing is substituted.
.Sm off
.It ${ Ar name No := Ar word No }
.Sm on
If
.Ar name
is set and not empty,
it is substituted; otherwise, it is assigned
.Ar word
and the resulting value of
.Ar name
is substituted.
.Sm off
.It ${ Ar name No :? Ar word No }
.Sm on
If
.Ar name
is set and not empty,
it is substituted; otherwise,
.Ar word
is printed on standard error (preceded by
.Ar name : )
and an error occurs (normally causing termination of a shell script, function,
or a script sourced using the
.Dq Li \&.
built-in).
If
.Ar word
is omitted, the string
.Dq Li parameter null or not set
is used instead.
.El
.Pp
Note that, for all of the above,
.Ar word
is actually considered quoted, and special parsing rules apply.
The parsing rules also differ on whether the expression is double-quoted:
.Ar word
then uses double-quoting rules, except for the double quote itself
.Pq Ql \&"
and the closing brace, which, if backslash escaped, gets quote removal applied.
.Pp
In the above modifiers, the
.Ql \&:
can be omitted, in which case the conditions only depend on
.Ar name
being set (as opposed to set and not empty).
If
.Ar word
is needed, parameter, command, arithmetic and tilde substitution are performed
on it; if
.Ar word
is not needed, it is not evaluated.
.Pp
The following forms of parameter substitution can also be used:
.Pp
.Bl -tag -width Ds -compact
.It Pf ${# Ns Ar name Ns \&}
The number of positional parameters if
.Ar name
is
.Dq Li * ,
.Dq Li @@
or not specified; otherwise the length
.Pq in characters
of the string value of parameter
.Ar name .
.Pp
.It Pf ${# Ns Ar name Ns \&[*]}
.It Pf ${# Ns Ar name Ns \&[@@]}
The number of elements in the array
.Ar name .
.Pp
.It Pf ${% Ns Ar name Ns \&}
The width
.Pq in screen columns
of the string value of parameter
.Ar name ,
or \-1 if
.Pf ${ Ns Ar name Ns }
contains a control character.
.Pp
.It Pf ${! Ns Ar name Ns }
The name of the variable referred to by
.Ar name .
This will be
.Ar name
except when
.Ar name
is a name reference (bound variable), created by the
.Ic nameref
command (which is an alias for
.Ic typeset Fl n ) .
.Ar name
cannot be one of most special parameters (see below).
.Pp
.It Pf ${! Ns Ar name Ns \&[*]}
.It Pf ${! Ns Ar name Ns \&[@@]}
The names of indices (keys) in the array
.Ar name .
.Pp
.Sm off
.It Xo
.Pf ${ Ar name
.Pf # Ar pattern No }
.Xc
.It Xo
.Pf ${ Ar name
.Pf ## Ar pattern No }
.Xc
.Sm on
If
.Ar pattern
matches the beginning of the value of parameter
.Ar name ,
the matched text is deleted from the result of substitution.
A single
.Ql #
results in the shortest match, and two
of them result in the longest match.
Cannot be applied to a vector
.Pq ${*} or ${@@} or ${array[*]} or ${array[@@]} .
.Pp
.Sm off
.It Xo
.Pf ${ Ar name
.Pf % Ar pattern No }
.Xc
.It Xo
.Pf ${ Ar name
.Pf %% Ar pattern No }
.Xc
.Sm on
Like ${...#...} substitution, but it deletes from the end of the value.
Cannot be applied to a vector.
.Pp
.Sm off
.It Xo
.Pf ${ Ar name
.Pf / Ar pattern / Ar string No }
.Xc
.It Xo
.Pf ${ Ar name
.Pf /# Ar pattern / Ar string No }
.Xc
.It Xo
.Pf ${ Ar name
.Pf /% Ar pattern / Ar string No }
.Xc
.It Xo
.Pf ${ Ar name
.Pf // Ar pattern / Ar string No }
.Xc
.Sm on
The longest match of
.Ar pattern
in the value of parameter
.Ar name
is replaced with
.Ar string
(deleted if
.Ar string
is empty; the trailing slash
.Pq Ql /
may be omitted in that case).
A leading slash followed by
.Ql #
or
.Ql %
causes the pattern to be anchored at the beginning or end of
the value, respectively; empty unanchored
.Ar pattern Ns s
cause no replacement; a single leading slash or use of a
.Ar pattern
that matches the empty string causes the replacement to
happen only once; two leading slashes cause all occurrences
of matches in the value to be replaced.
Cannot be applied to a vector.
Inefficiently implemented, may be slow.
.Pp
.Sm off
.It Xo
.Pf ${ Ar name
.Pf @@/ Ar pattern / Ar string No }
.Xc
.Sm on
The same as
.Sm off
.Xo
.Pf ${ Ar name
.Pf // Ar pattern / Ar string No } ,
.Xc
.Sm on
except that both
.Ar pattern
and
.Ar string
are expanded anew for each iteration.
.Pp
.Sm off
.It Xo
.Pf ${ Ar name : Ns Ar pos
.Pf : Ns Ar len Ns }
.Xc
.Sm on
The first
.Ar len
characters of
.Ar name ,
starting at position
.Ar pos ,
are substituted.
Both
.Ar pos
and
.Pf : Ns Ar len
are optional.
If
.Ar pos
is negative, counting starts at the end of the string; if it
is omitted, it defaults to 0.
If
.Ar len
is omitted or greater than the length of the remaining string,
all of it is substituted.
Both
.Ar pos
and
.Ar len
are evaluated as arithmetic expressions.
Currently,
.Ar pos
must start with a space, opening parenthesis or digit to be recognised.
Cannot be applied to a vector.
.Pp
.It Pf ${ Ns Ar name Ns @@#}
The hash (using the BAFH algorithm) of the expansion of
.Ar name .
This is also used internally for the shell's hashtables.
.Pp
.It Pf ${ Ns Ar name Ns @@Q}
A quoted expression safe for re-entry, whose value is the value of the
.Ar name
parameter, is substituted.
.El
.Pp
Note that
.Ar pattern
may need extended globbing pattern
.Pq @@(...) ,
single
.Pq \&\*(aq...\&\*(aq
or double
.Pq \&"...\&"
quote escaping unless
.Fl o Ic sh
is set.
.Pp
The following special parameters are implicitly set by the shell and cannot be
set directly using assignments:
.Bl -tag -width "1 .. 9"
.It Ev \&!
Process ID of the last background process started.
If no background processes have been started, the parameter is not set.
.It Ev \&#
The number of positional parameters ($1, $2, etc.).
.It Ev \&$
The PID of the shell or, if it is a subshell, the PID of the original shell.
Do
.Em NOT
use this mechanism for generating temporary file names; see
.Xr mktemp 1
instead.
.It Ev \-
The concatenation of the current single letter options (see the
.Ic set
command below for a list of options).
.It Ev \&?
The exit status of the last non-asynchronous command executed.
If the last command was killed by a signal,
.Ic \&$?
is set to 128 plus the signal number, but at most 255.
.It Ev 0
The name of the shell, determined as follows:
the first argument to
.Nm
if it was invoked with the
.Fl c
option and arguments were given; otherwise the
.Ar file
argument, if it was supplied;
or else the basename the shell was invoked with (i.e.\&
.Li argv[0] ) .
.Ev $0
is also set to the name of the current script or
the name of the current function, if it was defined with the
.Ic function
keyword (i.e. a Korn shell style function).
.It Ev 1 No .. Ev 9
The first nine positional parameters that were supplied to the shell, function,
or script sourced using the
.Dq Li \&.
built-in.
Further positional parameters may be accessed using
.Pf ${ Ar number Ns } .
.It Ev *
All positional parameters (except 0), i.e. $1, $2, $3, ...
.br
If used
outside of double quotes, parameters are separate words (which are subjected
to word splitting); if used within double quotes, parameters are separated
by the first character of the
.Ev IFS
parameter (or the empty string if
.Ev IFS
is unset.
.It Ev @@
Same as
.Ic $* ,
unless it is used inside double quotes, in which case a separate word is
generated for each positional parameter.
If there are no positional parameters, no word is generated.
.Ic \&"$@@"
can be used to access arguments, verbatim, without losing
empty arguments or splitting arguments with spaces (IFS, actually).
.El
.Pp
The following parameters are set and/or used by the shell:
.Bl -tag -width "KSH_VERSION"
.It Ev _
.Pq underscore
When an external command is executed by the shell, this parameter is set in the
environment of the new process to the path of the executed command.
In interactive use, this parameter is also set in the parent shell to the last
word of the previous command.
.It Ev BASHPID
The PID of the shell or subshell.
.It Ev CDPATH
Like
.Ev PATH ,
but used to resolve the argument to the
.Ic cd
built-in command.
Note that if
.Ev CDPATH
is set and does not contain
.Dq Li \&.
or an empty string element, the current directory is not searched.
Also, the
.Ic cd
built-in command will display the resulting directory when a match is found
in any search path other than the empty path.
.It Ev COLUMNS
Set to the number of columns on the terminal or window.
If never unset and not imported, always set dynamically;
unless the value as reported by
.Xr stty 1
is non-zero and sane enough (minimum is 12x3), defaults to 80; similar for
.Ev LINES .
This parameter is used by the interactive line editing modes and by the
.Ic select ,
.Ic set Fl o
and
.Ic kill Fl l
commands to format information columns.
Importing from the environment or unsetting this parameter removes the
binding to the actual terminal size in favour of the provided value.
.It Ev ENV
If this parameter is found to be set after any profile files are executed, the
expanded value is used as a shell startup file.
It typically contains function and alias definitions.
.It Ev EPOCHREALTIME
Time since the epoch, as returned by
.Xr gettimeofday 2 ,
formatted as decimal
.Va tv_sec
followed by a dot
.Pq Ql \&.
and
.Va tv_usec
padded to exactly six decimal digits.
.It Ev EXECSHELL
If set, this parameter is assumed to contain the shell that is to be used to
execute commands that
.Xr execve 2
fails to execute and which do not start with a
.Dq Li #! Ns Ar shell
sequence.
.It Ev FCEDIT
The editor used by the
.Ic fc
command (see below).
.It Ev FPATH
Like
.Ev PATH ,
but used when an undefined function is executed to locate the file defining the
function.
It is also searched when a command can't be found using
.Ev PATH .
See
.Sx Functions
below for more information.
.It Ev HISTFILE
The name of the file used to store command history.
When assigned to or unset, the file is opened, history is truncated
then loaded from the file; subsequent new commands (possibly consisting
of several lines) are appended once they successfully compiled.
Also, several invocations of the shell will share history if their
.Ev HISTFILE
parameters all point to the same file.
.Pp
.Sy Note :
If
.Ev HISTFILE
is unset or empty, no history file is used.
This is different from
.At
.Nm ksh .
.It Ev HISTSIZE
The number of commands normally stored for history.
The default is 2047.
The maximum is 65535.
.It Ev HOME
The default directory for the
.Ic cd
command and the value substituted for an unqualified
.Ic \*(TI
(see
.Sx Tilde expansion
below).
.It Ev IFS
Internal field separator, used during substitution and by the
.Ic read
command, to split values into distinct arguments; normally set to space, tab
and newline.
See
.Sx Substitution
above for details.
.Pp
.Sy Note :
This parameter is not imported from the environment when the shell is
started.
.It Ev KSHEGID
The effective group id of the shell at startup.
.It Ev KSHGID
The real group id of the shell at startup.
.It Ev KSHUID
The real user id of the shell at startup.
.It Ev KSH_MATCH
The last matched string.
In a future version, this will be an indexed array,
with indexes 1 and up capturing matching groups.
Set by string comparisons (= and !=) in double-bracket test
expressions when a match is found (when != returns false), by
.Ic case
when a match is encountered, and by the substitution operations
.Sm off
.Xo
.Pf ${ Ar x
.Pf # Ar pat No } ,
.Sm on
.Xc
.Sm off
.Xo
.Pf ${ Ar x
.Pf ## Ar pat No } ,
.Sm on
.Xc
.Sm off
.Xo
.Pf ${ Ar x
.Pf % Ar pat No } ,
.Sm on
.Xc
.Sm off
.Xo
.Pf ${ Ar x
.Pf %% Ar pat No } ,
.Sm on
.Xc
.Sm off
.Xo
.Pf ${ Ar x
.Pf / Ar pat / Ar rpl No } ,
.Sm on
.Xc
.Sm off
.Xo
.Pf ${ Ar x
.Pf /# Ar pat / Ar rpl No } ,
.Sm on
.Xc
.Sm off
.Xo
.Pf ${ Ar x
.Pf /% Ar pat / Ar rpl No } ,
.Sm on
.Xc
.Sm off
.Xo
.Pf ${ Ar x
.Pf // Ar pat / Ar rpl No } ,
.Sm on
.Xc
and
.Sm off
.Xo
.Pf ${ Ar x
.Pf @@/ Ar pat / Ar rpl No } .
.Sm on
.Xc
See the end of the Emacs editing mode documentation for an example.
.It Ev KSH_VERSION
The name and version of the shell (read-only).
See also the version commands in
.Sx Emacs editing mode
and
.Sx Vi editing mode
sections, below.
.It Ev LINENO
The line number of the function or shell script that is currently being
executed.
.It Ev LINES
Set to the number of lines on the terminal or window.
Defaults to 24; always set, unless imported or unset.
See
.Ev COLUMNS .
.It Ev OLDPWD
The previous working directory.
Unset if
.Ic cd
has not successfully changed directories since the shell started or if the
shell doesn't know where it is.
.It Ev OPTARG
When using
.Ic getopts ,
it contains the argument for a parsed option, if it requires one.
.It Ev OPTIND
The index of the next argument to be processed when using
.Ic getopts .
Assigning 1 to this parameter causes
.Ic getopts
to process arguments from the beginning the next time it is invoked.
.It Ev PATH
A colon (semicolon on OS/2) separated list of directories that are
searched when looking for commands and files sourced using the
.Dq Li \&.
command (see below).
An empty string resulting from a leading or trailing
(semi)colon, or two adjacent ones, is treated as a
.Dq Li \&.
(the current directory).
.It Ev PATHSEP
A colon (semicolon on OS/2), for the user's convenience.
.It Ev PGRP
The process ID of the shell's process group leader.
.It Ev PIPESTATUS
An array containing the errorlevel (exit status) codes,
one by one, of the last pipeline run in the foreground.
.It Ev PPID
The process ID of the shell's parent.
.It Ev PS1
The primary prompt for interactive shells.
Parameter, command and arithmetic
substitutions are performed, and
.Ql \&!
is replaced with the current command number (see the
.Ic fc
command below).
A literal
.Ql \&!
can be put in the prompt by placing
.Dq Li !!
in
.Ev PS1 .
.Pp
The default prompt is
.Dq Li $\ \&
for non-root users,
.Dq Li #\ \&
for root.
If
.Nm
is invoked by root and
.Ev PS1
does not contain a
.Ql #
character, the default value will be used even if
.Ev PS1
already exists in the environment.
.Pp
The
.Nm
distribution comes with a sample
.Pa dot.mkshrc
containing a sophisticated example, but you might like the following one
(note that ${HOSTNAME:=$(hostname)} and the
root-vs-user distinguishing clause are (in this example) executed at
.Ev PS1
assignment time, while the $USER and $PWD are escaped
and thus will be evaluated each time a prompt is displayed):
.Bd -literal
PS1=\*(aq${USER:=$(id \-un)}\*(aq"@@${HOSTNAME:=$(hostname)}:\e$PWD $(
	if (( USER_ID )); then print \e$; else print \e#; fi) "
.Ed
.Pp
Note that since the command-line editors try to figure out how long the prompt
is (so they know how far it is to the edge of the screen), escape codes in
the prompt tend to mess things up.
You can tell the shell not to count certain
sequences (such as escape codes) by prefixing your prompt with a
character (such as Ctrl-A) followed by a carriage return and then delimiting
the escape codes with this character.
Any occurrences of that character in the prompt are not printed.
By the way, don't blame me for
this hack; it's derived from the original
.Xr ksh88 1 ,
which did print the delimiter character so you were out of luck
if you did not have any non-printing characters.
.Pp
Since backslashes and other special characters may be
interpreted by the shell, to set
.Ev PS1
either escape the backslash itself
or use double quotes.
The latter is more practical.
This is a more complex example,
avoiding to directly enter special characters (for example with
.Ic \*(haV
in the emacs editing mode),
which embeds the current working directory,
in reverse video
.Pq colour would work, too ,
in the prompt string:
.Bd -literal -offset indent
x=$(print \e\e001) # otherwise unused char
PS1="$x$(print \e\er)$x$(tput so)$x\e$PWD$x$(tput se)$x\*(Gt "
.Ed
.Pp
Due to a strong suggestion from David G. Korn,
.Nm
now also supports the following form:
.Bd -literal -offset indent
PS1=$\*(aq\e1\er\e1\ee[7m\e1$PWD\e1\ee[0m\e1\*(Gt \*(aq
.Ed
.It Ev PS2
Secondary prompt string, by default
.Dq Li \*(Gt\ \& ,
used when more input is needed to complete a command.
.It Ev PS3
Prompt used by the
.Ic select
statement when reading a menu selection.
The default is
.Dq Li #?\ \& .
.It Ev PS4
Used to prefix commands that are printed during execution tracing (see the
.Ic set Fl x
command below).
Parameter, command and arithmetic substitutions are performed
before it is printed.
The default is
.Dq Li +\ \& .
You may want to set it to
.Dq Li \&[$EPOCHREALTIME]\ \&
instead, to include timestamps.
.It Ev PWD
The current working directory.
May be unset or empty if the shell doesn't know where it is.
.It Ev RANDOM
Each time
.Ev RANDOM
is referenced, it is assigned a number between 0 and 32767 from
a Linear Congruential PRNG first.
.It Ev REPLY
Default parameter for the
.Ic read
command if no names are given.
Also used in
.Ic select
loops to store the value that is read from standard input.
.It Ev SECONDS
The number of seconds since the shell started or, if the parameter has been
assigned an integer value, the number of seconds since the assignment plus the
value that was assigned.
.It Ev TMOUT
If set to a positive integer in an interactive shell, it specifies the maximum
number of seconds the shell will wait for input after printing the primary
prompt
.Pq Ev PS1 .
If the time is exceeded, the shell exits.
.It Ev TMPDIR
The directory temporary shell files are created in.
If this parameter is not
set or does not contain the absolute path of a writable directory, temporary
files are created in
.Pa /tmp .
.It Ev USER_ID
The effective user id of the shell at startup.
.El
.Ss Tilde expansion
Tilde expansion, which is done in parallel with parameter substitution,
is applied to words starting with an unquoted
.Ql \*(TI .
In parameter assignments (such as those preceding a simple-command or those
occurring in the arguments of a declaration utility), tilde expansion is done
after any assignment (i.e. after the equals sign) or after an unquoted colon
.Pq Ql \&: ;
login names are also delimited by colons.
The Korn shell, except in POSIX mode, always expands tildes after unquoted
equals signs, not just in assignment context (see below), and enables tab
completion for tildes after all unquoted colons during command line editing.
.Pp
The characters following the tilde, up to the first
.Ql / ,
if any, are assumed to be a login name.
If the login name is empty,
.Ql +
or
.Ql \- ,
the simplified value of the
.Ev HOME ,
.Ev PWD
or
.Ev OLDPWD
parameter is substituted, respectively.
Otherwise, the password file is
searched for the login name, and the tilde expression is substituted with the
user's home directory.
If the login name is not found in the password file or
if any quoting or parameter substitution occurs in the login name, no
substitution is performed.
.Pp
The home directory of previously expanded login names are cached and re-used.
The
.Ic alias Fl d
command may be used to list, change and add to this cache (e.g.\&
.Ic alias \-d fac=/usr/local/facilities; cd \*(TIfac/bin ) .
.Ss Brace expansion (alternation)
Brace expressions take the following form:
.Bd -unfilled -offset indent
.Sm off
.Xo
.Ar prefix No { Ar str1 No ,...,
.Ar strN No } Ar suffix
.Xc
.Sm on
.Ed
.Pp
The expressions are expanded to
.Ar N
words, each of which is the concatenation of
.Ar prefix ,
.Ar str Ns i
and
.Ar suffix
(e.g.\&
.Dq Li a{c,b{X,Y},d}e
expands to four words:
.Dq Li ace ,
.Dq Li abXe ,
.Dq Li abYe
and
.Dq Li ade ) .
As noted in the example, brace expressions can be nested and the resulting
words are not sorted.
Brace expressions must contain an unquoted comma
.Pq Ql \&,
for expansion to occur (e.g.\&
.Ic {}
and
.Ic {foo}
are not expanded).
Brace expansion is carried out after parameter substitution
and before file name generation.
.Ss File name patterns
A file name pattern is a word containing one or more unquoted
.Ql \&? ,
.Ql * ,
.Ql + ,
.Ql @@
or
.Ql \&!
characters or
.Dq Li \&[...]
sequences.
Once brace expansion has been performed, the shell replaces file
name patterns with the sorted names of all the files that match the pattern
(if no files match, the word is left unchanged).
The pattern elements have the following meaning:
.Bl -tag -width Ds
.It \&?
Matches any single character.
.It \&*
Matches any sequence of octets.
.It \&[...]
Matches any of the octets inside the brackets.
Ranges of octets can be specified by separating two octets by a
.Ql \-
(e.g.\&
.Dq Li \&[a0\-9]
matches the letter
.Ql a
or any digit).
In order to represent itself, a
.Ql \-
must either be quoted or the first or last octet in the octet list.
Similarly, a
.Ql \&]
must be quoted or the first octet in the list if it is to represent itself
instead of the end of the list.
Also, a
.Ql \&!
appearing at the start of the list has special meaning (see below), so to
represent itself it must be quoted or appear later in the list.
.It \&[!...]
Like [...],
except it matches any octet not inside the brackets.
.Sm off
.It *( Ar pattern\*(Ba No ...\*(Ba Ar pattern )
.Sm on
Matches any string of octets that matches zero or more occurrences of the
specified patterns.
Example: The pattern
.Ic *(foo\*(Babar)
matches the strings
.Dq ,
.Dq Li foo ,
.Dq Li bar ,
.Dq Li foobarfoo ,
etc.
.Sm off
.It +( Ar pattern\*(Ba No ...\*(Ba Ar pattern )
.Sm on
Matches any string of octets that matches one or more occurrences of the
specified patterns.
Example: The pattern
.Ic +(foo\*(Babar)
matches the strings
.Dq Li foo ,
.Dq Li bar ,
.Dq Li foobar ,
etc.
.Sm off
.It ?( Ar pattern\*(Ba No ...\*(Ba Ar pattern )
.Sm on
Matches the empty string or a string that matches one of the specified
patterns.
Example: The pattern
.Ic ?(foo\*(Babar)
only matches the strings
.Dq ,
.Dq Li foo
and
.Dq Li bar .
.Sm off
.It @@( Ar pattern\*(Ba No ...\*(Ba Ar pattern )
.Sm on
Matches a string that matches one of the specified patterns.
Example: The pattern
.Ic @@(foo\*(Babar)
only matches the strings
.Dq Li foo
and
.Dq Li bar .
.Sm off
.It !( Ar pattern\*(Ba No ...\*(Ba Ar pattern )
.Sm on
Matches any string that does not match one of the specified patterns.
Examples: The pattern
.Ic !(foo\*(Babar)
matches all strings except
.Dq Li foo
and
.Dq Li bar ;
the pattern
.Ic \&!(*)
matches no strings; the pattern
.Ic \&!(?)*
matches all strings (think about it).
.El
.Pp
Note that complicated globbing, especially with alternatives,
is slow; using separate comparisons may (or may not) be faster.
.Pp
Note that
.Nm mksh
.Po and Nm pdksh Pc
never matches
.Dq Li \&.
and
.Dq Li .. ,
but
.At
.Nm ksh ,
Bourne
.Nm sh
and GNU
.Nm bash
do.
.Pp
Note that none of the above pattern elements match either a period
.Pq Ql \&.
at the start of a file name or a slash
.Pq Ql / ,
even if they are explicitly used in a [...] sequence; also, the names
.Dq Li \&.
and
.Dq Li ..
are never matched, even by the pattern
.Dq Li .* .
.Pp
If the
.Ic markdirs
option is set, any directories that result from file name generation are marked
with a trailing
.Ql / .
.Ss Input/output redirection
When a command is executed, its standard input, standard output and standard
error (file descriptors 0, 1 and 2, respectively) are normally inherited from
the shell.
Three exceptions to this are commands in pipelines, for which
standard input and/or standard output are those set up by the pipeline,
asynchronous commands created when job control is disabled, for which standard
input is initially set to
.Pa /dev/null ,
and commands for which any of the following redirections have been specified:
.Bl -tag -width XXxxmarker
.It \*(Gt Ns Ar file
Standard output is redirected to
.Ar file .
If
.Ar file
does not exist, it is created; if it does exist, is a regular file, and the
.Ic noclobber
option is set, an error occurs; otherwise, the file is truncated.
Note that this means the command
.Ic cmd \*(Ltfoo \*(Gtfoo
will open
.Ar foo
for reading and then truncate it when it opens it for writing, before
.Ar cmd
gets a chance to actually read
.Ar foo .
.It \*(Gt\*(Ba Ns Ar file
Same as
.Ic \*(Gt ,
except the file is truncated, even if the
.Ic noclobber
option is set.
.It \*(Gt\*(Gt Ns Ar file
Same as
.Ic \*(Gt ,
except if
.Ar file
exists it is appended to instead of being truncated.
Also, the file is opened
in append mode, so writes always go to the end of the file (see
.Xr open 2 ) .
.It \*(Lt Ns Ar file
Standard input is redirected from
.Ar file ,
which is opened for reading.
.It \*(Lt\*(Gt Ns Ar file
Same as
.Ic \*(Lt ,
except the file is opened for reading and writing.
.It \*(Lt\*(Lt Ns Ar marker
After reading the command line containing this kind of redirection (called a
.Dq here document ) ,
the shell copies lines from the command source into a temporary file until a
line matching
.Ar marker
is read.
When the command is executed, standard input is redirected from the
temporary file.
If
.Ar marker
contains no quoted characters, the contents of the temporary file are processed
as if enclosed in double quotes each time the command is executed, so
parameter, command and arithmetic substitutions are performed, along with
backslash
.Pq Ql \e
escapes for
.Ql $ ,
.Ql \` ,
.Ql \e
and
.Dq Li \enewline ,
but not for
.Ql \&" .
If multiple here documents are used on the same command line, they are saved in
order.
.Pp
If no
.Ar marker
is given, the here document ends at the next
.Ic \*(Lt\*(Lt
and substitution will be performed.
If
.Ar marker
is only a set of either single
.Dq Li \*(aq\*(aq
or double
.Ql \&""
quotes with nothing in between, the here document ends at the next empty line
and substitution will not be performed.
.It \*(Lt\*(Lt\- Ns Ar marker
Same as
.Ic \*(Lt\*(Lt ,
except leading tabs are stripped from lines in the here document.
.It \*(Lt\*(Lt\*(Lt Ns Ar word
Same as
.Ic \*(Lt\*(Lt ,
except that
.Ar word
.Em is
the here document.
This is called a here string.
.It \*(Lt& Ns Ar fd
Standard input is duplicated from file descriptor
.Ar fd .
.Ar fd
can be a single digit, indicating the number of an existing file descriptor;
the letter
.Ql p ,
indicating the file descriptor associated with the output of the current
co-process; or the character
.Ql \- ,
indicating standard input is to be closed.
.It \*(Gt& Ns Ar fd
Same as
.Ic \*(Lt& ,
except the operation is done on standard output.
.It &\*(Gt Ns Ar file
Same as
.Ic \*(Gt Ns Ar file 2\*(Gt&1 .
This is a deprecated (legacy) GNU
.Nm bash
extension supported by
.Nm
which also supports the preceding explicit fd digit, for example,
.Ic 3&\*(Gt Ns Ar file
is the same as
.Ic 3\*(Gt Ns Ar file 2\*(Gt&3
in
.Nm
but a syntax error in GNU
.Nm bash .
.It Xo
.No &\*(Gt\*(Ba Ns Ar file ,
.No &\*(Gt\*(Gt Ns Ar file ,
.No &\*(Gt& Ns Ar fd
.Xc
Same as
.Ic \*(Gt\*(Ba Ns Ar file ,
.Ic \*(Gt\*(Gt Ns Ar file
or
.Ic \*(Gt& Ns Ar fd ,
followed by
.Ic 2\*(Gt&1 ,
as above.
These are
.Nm
extensions.
.El
.Pp
In any of the above redirections, the file descriptor that is redirected
(i.e. standard input or standard output)
can be explicitly given by preceding the
redirection with a single digit.
Parameter, command and arithmetic
substitutions, tilde substitutions, and, if the shell is interactive,
file name generation are all performed on the
.Ar file ,
.Ar marker
and
.Ar fd
arguments of redirections.
Note, however, that the results of any file name
generation are only used if a single file is matched; if multiple files match,
the word with the expanded file name generation characters is used.
Note
that in restricted shells, redirections which can create files cannot be used.
.Pp
For simple-commands, redirections may appear anywhere in the command; for
compound-commands
.Po
.Ic if
statements, etc.
.Pc ,
any redirections must appear at the end.
Redirections are processed after
pipelines are created and in the order they are given, so the following
will print an error with a line number prepended to it:
.Pp
.Dl $ cat /foo/bar 2\*(Gt&1 \*(Gt/dev/null \*(Ba pr \-n \-t
.Pp
File descriptors created by I/O redirections are private to the shell.
.Ss Arithmetic expressions
Integer arithmetic expressions can be used with the
.Ic let
command, inside $((...)) expressions, inside array references (e.g.\&
.Ar name Ns Bq Ar expr ) ,
as numeric arguments to the
.Ic test
command, and as the value of an assignment to an integer parameter.
.Em Warning :
This also affects implicit conversion to integer, for example as done by the
.Ic let
command.
.Em Never
use unchecked user input, e.g. from the environment, in an arithmetic context!
.Pp
Expressions are calculated using signed arithmetic and the
.Vt mksh_ari_t
type (a 32-bit signed integer), unless they begin with a sole
.Ql #
character, in which case they use
.Vt mksh_uari_t
.Po a 32-bit unsigned integer Pc .
.Pp
Expressions may contain alpha-numeric parameter identifiers, array references
and integer constants and may be combined with the following C operators
(listed and grouped in increasing order of precedence):
.Pp
Unary operators:
.Bd -literal -offset indent
+ \- ! \*(TI ++ \-\-
.Ed
.Pp
Binary operators:
.Bd -literal -offset indent
,
= += \-= *= /= %= \*(Lt\*(Lt= \*(Gt\*(Gt= \*(ha\*(Lt= \*(ha\*(Gt= &= \*(ha= \*(Ba=
\*(Ba\*(Ba
&&
\*(Ba
\*(ha
&
== !=
\*(Lt \*(Lt= \*(Gt \*(Gt=
\*(Lt\*(Lt \*(Gt\*(Gt \*(ha\*(Lt \*(ha\*(Gt
+ \-
* / %
.Ed
.Pp
Ternary operators:
.Bd -literal -offset indent
?: (precedence is immediately higher than assignment)
.Ed
.Pp
Grouping operators:
.Bd -literal -offset indent
( )
.Ed
.Pp
Integer constants and expressions are calculated using an exactly 32-bit
wide, signed or unsigned, type with silent wraparound on integer overflow.
Integer constants may be specified with arbitrary bases using the notation
.Ar base Ns # Ns Ar number ,
where
.Ar base
is a decimal integer specifying the base (up to 36), and
.Ar number
is a number in the specified base.
Additionally, base-16 integers may be specified by prefixing them with
.Dq Li 0x
.Pq case-insensitive
in all forms of arithmetic expressions, except as numeric arguments to the
.Ic test
built-in utility.
Prefixing numbers with a sole digit zero
.Pq Dq Li 0
does not cause interpretation as octal (except in POSIX mode,
as required by the standard), as that's unsafe to do.
.Pp
As a special
.Nm mksh
extension, numbers to the base of one are treated as either (8-bit
transparent) ASCII or Universal Coded Character Set codepoints,
depending on the shell's
.Ic utf8\-mode
flag (current setting).
The
.At
.Nm ksh93
syntax of
.Dq Li \*(aqx\*(aq
instead of
.Dq Li 1#x
is also supported.
Note that NUL bytes (integral value of zero) cannot be used.
An unset or empty parameter evaluates to 0 in integer context.
In UTF-8 mode, raw octets are mapped into the range EF80..EFFF as in
OPTU-8, which is in the PUA and has been assigned by CSUR for this use.
If more than one octet in ASCII mode, or a sequence of more than one
octet not forming a valid and minimal CESU-8 sequence is passed, the
behaviour is undefined (usually, the shell aborts with a parse error,
but rarely, it succeeds, e.g. on the sequence C2 20).
That's why you should always use ASCII mode unless you know that the
input is well-formed UTF-8 in the range of 0000..FFFD if you use this
feature, as opposed to
.Ic read Fl a .
.Pp
The operators are evaluated as follows:
.Bl -tag -width Ds -offset indent
.It unary +
Result is the argument (included for completeness).
.It unary \-
Negation.
.It \&!
Logical NOT;
the result is 1 if argument is zero, 0 if not.
.It \*(TI
Arithmetic (bit-wise) NOT.
.It ++
Increment; must be applied to a parameter (not a literal or other expression).
The parameter is incremented by 1.
When used as a prefix operator, the result
is the incremented value of the parameter; when used as a postfix operator, the
result is the original value of the parameter.
.It \-\-
Similar to
.Ic ++ ,
except the parameter is decremented by 1.
.It \&,
Separates two arithmetic expressions; the left-hand side is evaluated first,
then the right.
The result is the value of the expression on the right-hand side.
.It =
Assignment; the variable on the left is set to the value on the right.
.It Xo
.No += \-= *= /= %= \*(Lt\*(Lt= \*(Gt\*(Gt=
.No \*(ha\*(Lt= \*(ha\*(Gt= &= \*(ha= \*(Ba=
.Xc
Assignment operators.
.Sm off
.Ao Ar var Ac Xo
.Aq Ar op
.No = Aq Ar expr
.Xc
.Sm on
is the same as
.Sm off
.Ao Ar var Ac Xo
.No = Aq Ar var
.Aq Ar op
.Aq Ar expr ,
.Xc
.Sm on
with any operator precedence in
.Aq Ar expr
preserved.
For example,
.Dq Li var1 *= 5 + 3
is the same as specifying
.Dq Li var1 = var1 * (5 + 3) .
.It \*(Ba\*(Ba
Logical OR;
the result is 1 if either argument is non-zero, 0 if not.
The right argument is evaluated only if the left argument is zero.
.It &&
Logical AND;
the result is 1 if both arguments are non-zero, 0 if not.
The right argument is evaluated only if the left argument is non-zero.
.It \*(Ba
Arithmetic (bit-wise) OR.
.It \*(ha
Arithmetic (bit-wise) XOR
(exclusive-OR).
.It &
Arithmetic (bit-wise) AND.
.It ==
Equal; the result is 1 if both arguments are equal, 0 if not.
.It !=
Not equal; the result is 0 if both arguments are equal, 1 if not.
.It \*(Lt
Less than; the result is 1 if the left argument is less than the right, 0 if
not.
.It \*(Lt= \*(Gt \*(Gt=
Less than or equal, greater than, greater than or equal.
See
.Ic \*(Lt .
.It \*(Lt\*(Lt \*(Gt\*(Gt
Shift left (right); the result is the left argument with its bits
arithmetically (signed operation) or logically (unsigned expression)
shifted left (right) by the amount given in the right argument.
.It \*(ha\*(Lt \*(ha\*(Gt
Rotate left (right); the result is similar to shift,
except that the bits shifted out at one end are shifted in
at the other end, instead of zero or sign bits.
.It + \- * /
Addition, subtraction, multiplication and division.
.It %
Remainder; the result is the symmetric remainder of the division of the left
argument by the right.
To get the mathematical modulus of
.Dq a Ic mod No b ,
use the formula
.Do
.Pq a % b + b
.No % b
.Dc .
.It Xo
.Sm off
.Aq Ar arg1 ?
.Aq Ar arg2 :
.Aq Ar arg3
.Sm on
.Xc
If
.Aq Ar arg1
is non-zero, the result is
.Aq Ar arg2 ;
otherwise the result is
.Aq Ar arg3 .
The non-result argument is not evaluated.
.El
.Ss Co-processes
A co-process (which is a pipeline created with the
.Dq Li \*(Ba&
operator) is an asynchronous process that the shell can both write to (using
.Ic print Fl p )
and read from (using
.Ic read Fl p ) .
The input and output of the co-process can also be manipulated using
.Ic \*(Gt&p
and
.Ic \*(Lt&p
redirections, respectively.
Once a co-process has been started, another can't
be started until the co-process exits, or until the co-process's input has been
redirected using an
.Ic exec Ar n Ns Ic \*(Gt&p
redirection.
If a co-process's input is redirected in this way, the next
co-process to be started will share the output with the first co-process,
unless the output of the initial co-process has been redirected using an
.Ic exec Ar n Ns Ic \*(Lt&p
redirection.
.Pp
Some notes concerning co-processes:
.Bl -bullet
.It
The only way to close the co-process's input (so the co-process reads an
end-of-file) is to redirect the input to a numbered file descriptor and then
close that file descriptor:
.Ic exec 3\*(Gt&p; exec 3\*(Gt&\-
.It
In order for co-processes to share a common output, the shell must keep the
write portion of the output pipe open.
This means that end-of-file will not be
detected until all co-processes sharing the co-process's output have exited
(when they all exit, the shell closes its copy of the pipe).
This can be
avoided by redirecting the output to a numbered file descriptor (as this also
causes the shell to close its copy).
Note that this behaviour is slightly
different from the original Korn shell which closes its copy of the write
portion of the co-process output when the most recently started co-process
(instead of when all sharing co-processes) exits.
.It
.Ic print Fl p
will ignore
.Dv SIGPIPE
signals during writes if the signal is not being trapped or ignored; the same
is true if the co-process input has been duplicated to another file descriptor
and
.Ic print Fl u Ns Ar n
is used.
.El
.Ss Functions
Functions are defined using either Korn shell
.Ic function Ar function-name
syntax or the Bourne/POSIX shell
.Ar function-name Ns \&()
syntax (see below for the difference between the two forms).
Functions are like
.Li .\(hyscripts
(i.e. scripts sourced using the
.Dq Li \&.
built-in)
in that they are executed in the current environment.
However, unlike
.Li .\(hyscripts ,
shell arguments (i.e. positional parameters $1, $2, etc.)\&
are never visible inside them.
When the shell is determining the location of a command, functions
are searched after special built-in commands, before builtins and the
.Ev PATH
is searched.
.Pp
An existing function may be deleted using
.Ic unset Fl f Ar function-name .
A list of functions can be obtained using
.Ic typeset +f
and the function definitions can be listed using
.Ic typeset Fl f .
The
.Ic autoload
command (which is an alias for
.Ic typeset Fl fu )
may be used to create undefined functions: when an undefined function is
executed, the shell searches the path specified in the
.Ev FPATH
parameter for a file with the same name as the function which, if found, is
read and executed.
If after executing the file the named function is found to
be defined, the function is executed; otherwise, the normal command search is
continued (i.e. the shell searches the regular built-in command table and
.Ev PATH ) .
Note that if a command is not found using
.Ev PATH ,
an attempt is made to autoload a function using
.Ev FPATH
(this is an undocumented feature of the original Korn shell).
.Pp
Functions can have two attributes,
.Dq trace
and
.Dq export ,
which can be set with
.Ic typeset Fl ft
and
.Ic typeset Fl fx ,
respectively.
When a traced function is executed, the shell's
.Ic xtrace
option is turned on for the function's duration.
The
.Dq export
attribute of functions is currently not used.
.Pp
Since functions are executed in the current shell environment, parameter
assignments made inside functions are visible after the function completes.
If this is not the desired effect, the
.Ic typeset
command can be used inside a function to create a local parameter.
Note that
.At
.Nm ksh93
uses static scoping (one global scope, one local scope per function)
and allows local variables only on Korn style functions, whereas
.Nm mksh
uses dynamic scoping (nested scopes of varying locality).
Note that special parameters (e.g.\&
.Ic \&$$ , $! )
can't be scoped in this way.
.Pp
The exit status of a function is that of the last command executed in the
function.
A function can be made to finish immediately using the
.Ic return
command; this may also be used to explicitly specify the exit status.
Note that when called in a subshell,
.Ic return
will only exit that subshell and will not cause the original shell to exit
a running function (see the
.Ic while Ns Li \&... Ns Ic read
loop FAQ).
.Pp
Functions defined with the
.Ic function
reserved word are treated differently in the following ways from functions
defined with the
.Ic \&()
notation:
.Bl -bullet
.It
The $0 parameter is set to the name of the function
(Bourne-style functions leave $0 untouched).
.It
.Ev OPTIND
is saved/reset and restored on entry and exit from the function so
.Ic getopts
can be used properly both inside and outside the function (Bourne-style
functions leave
.Ev OPTIND
untouched, so using
.Ic getopts
inside a function interferes with using
.Ic getopts
outside the function).
.It
Shell options
.Pq Ic set Fl o
have local scope, i.e. changes inside a function are reset upon its exit.
.El
.Pp
In the future, the following differences may also be added:
.Bl -bullet
.It
A separate trap/signal environment will be used during the execution of
functions.
This will mean that traps set inside a function will not affect the
shell's traps and signals that are not ignored in the shell (but may be
trapped) will have their default effect in a function.
.It
The EXIT trap, if set in a function, will be executed after the function
returns.
.El
.Ss Command execution
After evaluation of command-line arguments, redirections and parameter
assignments, the type of command is determined: a special built-in command,
a function, a normal builtin or the name of a file to execute found using the
.Ev PATH
parameter.
The checks are made in the above order.
Special built-in commands differ from other commands in that the
.Ev PATH
parameter is not used to find them, an error during their execution can
cause a non-interactive shell to exit, and parameter assignments that are
specified before the command are kept after the command completes.
Regular built-in commands are different only in that the
.Ev PATH
parameter is not used to find them.
.Pp
The original
.Nm ksh
and POSIX differ somewhat in which commands are considered
special or regular.
.Pp
POSIX special built-in utilities:
.Pp
.Ic \&. , \&: , break , continue ,
.Ic eval , exec , exit , export ,
.Ic readonly , return , set , shift ,
.Ic times , trap , unset
.Pp
Additional
.Nm
commands keeping assignments:
.Pp
.Ic global , source , typeset
.Pp
Builtins that are not special:
.Pp
.Ic [ , alias , bg , bind ,
.Ic builtin , cat , cd , command ,
.Ic echo , false , fc , fg ,
.Ic getopts , jobs , kill , let ,
.Ic print , pwd , read , realpath ,
.Ic rename , sleep , suspend , test ,
.Ic true , ulimit , umask , unalias ,
.Ic wait , whence
.Pp
Once the type of command has been determined, any command-line parameter
assignments are performed and exported for the duration of the command.
.Pp
The following describes the special and regular built-in commands and
builtin-like reserved words:
.Pp
.Bl -tag -width false -compact
.It Ic \&. Ar file Op Ar arg ...
This is called the
.Dq dot
command.
Execute the commands in
.Ar file
in the current environment.
The file is searched for in the directories of
.Ev PATH .
If arguments are given, the positional parameters may be used to access them
while
.Ar file
is being executed.
If no arguments are given, the positional parameters are
those of the environment the command is used in.
.Pp
.It Ic \&: Op Ar ...
The null command.
Exit status is set to zero.
.Pp
.It Ic \&[ Ar expression Ic \&]
See
.Ic test .
.Pp
.It Xo Ic alias
.Oo Fl d \*(Ba t Oo Fl r Oc \*(Ba
.Cm +\-x Oc
.Op Fl p
.Op Cm +
.Oo Ar name
.Op Ns = Ns Ar value
.Ar ... Oc
.Xc
Without arguments,
.Ic alias
lists all aliases.
For any name without a value, the existing alias is listed.
Any name with a value defines an alias; see
.Sx Aliases
above.
.Li \&[][A\-Za\-z0\-9_!%,.@@:\-]
are valid in names, except they may not begin with a hyphen-minus, and
.Ic \&[[
is not a valid alias name.
.Pp
When listing aliases, one of two formats is used.
Normally, aliases are listed as
.Ar name Ns = Ns Ar value ,
where
.Ar value
is quoted.
If options were preceded with
.Ql + ,
or a lone
.Ql +
is given on the command line, only
.Ar name
is printed.
.Pp
The
.Fl d
option causes directory aliases which are used in tilde expansion to be
listed or set (see
.Sx Tilde expansion
above).
.Pp
If the
.Fl p
option is used, each alias is prefixed with the string
.Dq Li alias\ \& .
.Pp
The
.Fl t
option indicates that tracked aliases are to be listed/set (values specified on
the command line are ignored for tracked aliases).
The
.Fl r
option indicates that all tracked aliases are to be reset.
.Pp
The
.Fl x
option sets
.Pq Ic +x No clears
the export attribute of an alias, or, if no names are given, lists the aliases
with the export attribute (exporting an alias has no effect).
.Pp
.It Ic bg Op Ar job ...
Resume the specified stopped job(s) in the background.
If no jobs are specified,
.Ic %+
is assumed.
See
.Sx Job control
below for more information.
.Pp
.It Ic bind Op Fl l
The current bindings are listed.
If the
.Fl l
flag is given,
.Ic bind
instead lists the names of the functions to which keys may be bound.
See
.Sx Emacs editing mode
for more information.
.Pp
.It Xo Ic bind Op Fl m
.Ar string Ns = Ns Op Ar substitute
.Ar ...
.Xc
.It Xo Ic bind
.Ar string Ns = Ns Op Ar editing-command
.Ar ...
.Xc
The specified editing command is bound to the given
.Ar string ,
which should consist of a control character
optionally preceded by one of the two prefix characters
and optionally succeeded by a tilde character.
Future input of the
.Ar string
will cause the editing command to be immediately invoked.
If the
.Fl m
flag is given, the specified input
.Ar string
will afterwards be immediately replaced by the given
.Ar substitute
string which may contain editing commands but not other macros.
If a tilde postfix is given, a tilde trailing the one or
two prefices and the control character is ignored, any
other trailing character will be processed afterwards.
.Pp
Control characters may be written using caret notation
i.e. \*(haX represents Ctrl-X.
The caret itself can be escaped by a backslash, which also escapes itself.
Note that although only three prefix characters (usually ESC, \*(haX and NUL)
are supported, some multi-character sequences can be supported.
.Pp
The following default bindings show how the arrow keys, the home, end and
delete key on a BSD wsvt25, xterm\-xfree86 or GNU screen terminal are bound
(of course some escape sequences won't work out quite this nicely):
.Bd -literal -offset indent
bind \*(aq\*(haX\*(aq=prefix\-2
bind \*(aq\*(ha[[\*(aq=prefix\-2
bind \*(aq\*(haXA\*(aq=up\-history
bind \*(aq\*(haXB\*(aq=down\-history
bind \*(aq\*(haXC\*(aq=forward\-char
bind \*(aq\*(haXD\*(aq=backward\-char
bind \*(aq\*(haX1\*(TI\*(aq=beginning\-of\-line
bind \*(aq\*(haX7\*(TI\*(aq=beginning\-of\-line
bind \*(aq\*(haXH\*(aq=beginning\-of\-line
bind \*(aq\*(haX4\*(TI\*(aq=end\-of\-line
bind \*(aq\*(haX8\*(TI\*(aq=end\-of\-line
bind \*(aq\*(haXF\*(aq=end\-of\-line
bind \*(aq\*(haX3\*(TI\*(aq=delete\-char\-forward
.Ed
.Pp
.It Ic break Op Ar level
Exit the
.Ar level Ns th
inner-most
.Ic for ,
.Ic select ,
.Ic until
or
.Ic while
loop.
.Ar level
defaults to 1.
.Pp
.It Xo
.Ic builtin
.Op Fl \-
.Ar command Op Ar arg ...
.Xc
Execute the built-in command
.Ar command .
.Pp
.It Xo
.Ic \ebuiltin
.Ar command Op Ar arg ...
.Xc
Same as
.Ic builtin .
Additionally acts as declaration utility forwarder, i.e. this is a
declaration utility (see
.Sx Tilde expansion )
.No iff Ar command
is a declaration utility.
.Pp
.It Xo
.Ic cat
.Op Fl u
.Op Ar
.Xc
Read files sequentially, in command line order, and write them to
standard output.
If a
.Ar file
is a single dash
.Pq Dq Li \-
or absent, read from standard input.
For direct builtin calls, the
.Tn POSIX
.Fl u
option is supported as a no-op.
For calls from shell, if any options are given, an external
.Xr cat 1
utility is preferred over the builtin.
.Pp
.It Xo
.Ic cd
.Op Fl L
.Op Ar dir
.Xc
.It Xo
.Ic cd
.Fl P Op Fl e
.Op Ar dir
.Xc
.It Xo
.Ic chdir
.Op Fl eLP
.Op Ar dir
.Xc
Set the working directory to
.Ar dir .
If the parameter
.Ev CDPATH
is set, it lists the search path for the directory containing
.Ar dir .
An unset or empty path means the current directory.
If
.Ar dir
is found in any component of the
.Ev CDPATH
search path other than an unset or empty path,
the name of the new working directory will be written to standard output.
If
.Ar dir
is missing, the home directory
.Ev HOME
is used.
If
.Ar dir
is
.Dq Li \- ,
the previous working directory is used (see the
.Ev OLDPWD
parameter).
.Pp
If the
.Fl L
option (logical path) is used or if the
.Ic physical
option isn't set (see the
.Ic set
command below), references to
.Dq Li ..
in
.Ar dir
are relative to the path used to get to the directory.
If the
.Fl P
option (physical path) is used or if the
.Ic physical
option is set,
.Dq Li ..
is relative to the filesystem directory tree.
The
.Ev PWD
and
.Ev OLDPWD
parameters are updated to reflect the current and old working directory,
respectively.
If the
.Fl e
option is set for physical filesystem traversal and
.Ev PWD
could not be set, the exit code is 1; greater than 1 if an
error occurred, 0 otherwise.
.Pp
.It Xo
.Ic cd
.Op Fl eLP
.Ar old new
.Xc
.It Xo
.Ic chdir
.Op Fl eLP
.Ar old new
.Xc
The string
.Ar new
is substituted for
.Ar old
in the current directory, and the shell attempts to change to the new
directory.
.Pp
.It Xo
.Ic command
.Op Fl pVv
.Ar cmd
.Op Ar arg ...
.Xc
If neither the
.Fl v
nor
.Fl V
option is given,
.Ar cmd
is executed exactly as if
.Ic command
had not been specified, with two exceptions:
firstly,
.Ar cmd
cannot be a shell function;
and secondly, special built-in commands lose their specialness
(i.e. redirection and utility errors do not cause the shell to
exit, and command assignments are not permanent).
The declaration utility property is not reset.
.Pp
If the
.Fl p
option is given, a default search path is used instead of the current value of
.Ev PATH ,
the actual value of which is system dependent.
.Pp
If the
.Fl v
option is given, instead of executing
.Ar cmd ,
information about what would be executed is given (and the same is done for
.Ar arg ... ) .
For builtins, functions and keywords, their names are simply printed;
for aliases, a command that defines them is printed;
for utilities found by searching the
.Ev PATH
parameter, the full path of the command is printed.
If no command is found
(i.e. the path search fails), nothing is printed and
.Ic command
exits with a non-zero status.
The
.Fl V
option is like the
.Fl v
option, except it is more verbose.
.Pp
.It Ic continue Op Ar level
Jumps to the beginning of the
.Ar level Ns th
inner-most
.Ic for ,
.Ic select ,
.Ic until
or
.Ic while
loop.
.Ar level
defaults to 1.
.Pp
.It Xo
.Ic echo
.Op Fl Een
.Op Ar arg ...
.Xc
.Em Warning:
this utility is not portable; use the Korn shell builtin
.Ic print
instead.
.Pp
Prints its arguments (separated by spaces) followed by a newline, to the
standard output.
The newline is suppressed if any of the arguments contain the
backslash sequence
.Dq Li \ec .
See the
.Ic print
command below for a list of other backslash sequences that are recognised.
.Pp
The options are provided for compatibility with
.Bx
shell scripts.
The
.Fl n
option suppresses the trailing newline,
.Fl e
enables backslash interpretation (a no-op, since this is normally done), and
.Fl E
suppresses backslash interpretation.
.Pp
If the
.Ic posix
or
.Ic sh
option is set or this is a direct builtin call or
.Ic print
.Fl R ,
only the first argument is treated as an option, and only if it is exactly
.Dq Li \-n .
Backslash interpretation is disabled.
.Pp
.It Ic eval Ar command ...
The arguments are concatenated (with spaces between them) to form a single
string which the shell then parses and executes in the current environment.
.Pp
.It Xo
.Ic exec
.Op Fl a Ar argv0
.Op Fl c
.Op Ar command Op Ar arg ...
.Xc
The command is executed without forking, replacing the shell process.
This is currently absolute, i.e.\&
.Ic exec
never returns, even if the
.Ar command
is not found.
The
.Fl a
option permits setting a different
.Li argv[0]
value, and
.Fl c
clears the environment before executing the child process, except for the
.Ev _
variable and direct assignments.
.Pp
If no command is given except for I/O redirection, the I/O redirection is
permanent and the shell is
not replaced.
Any file descriptors greater than 2 which are opened or
.Xr dup 2 Ns 'd
in this way are not made available to other executed commands (i.e. commands
that are not built-in to the shell).
Note that the Bourne shell differs here;
it does pass these file descriptors on.
.Pp
.It Ic exit Op Ar status
The shell or subshell exits with the specified exit status.
If
.Ar status
is not specified, the exit status is the current value of the
.Ic \&$?
parameter.
.Pp
.It Xo
.Ic export
.Op Fl p
.Op Ar parameter Ns Op = Ns Ar value
.Xc
Sets the export attribute of the named parameters.
Exported parameters are passed in the environment to executed commands.
If values are specified, the named parameters are also assigned.
This is a declaration utility.
.Pp
If no parameters are specified, all parameters with the export attribute
set are printed one per line; either their names, or, if a
.Dq Li \-
with no option letter is specified, name=value pairs, or, with
.Fl p ,
.Ic export
commands suitable for re-entry.
.Pp
.It Ic false
A command that exits with a non-zero status.
.Pp
.It Xo
.Ic fc
.Oo Fl e Ar editor \*(Ba
.Fl l Op Fl n Oc
.Op Fl r
.Op Ar first Op Ar last
.Xc
.Ar first
and
.Ar last
select commands from the history.
Commands can be selected by history number
(negative numbers go backwards from the current, most recent, line)
or a string specifying the most recent command starting with that string.
The
.Fl l
option lists the command on standard output, and
.Fl n
inhibits the default command numbers.
The
.Fl r
option reverses the order of the list.
Without
.Fl l ,
the selected commands are edited by the editor specified with the
.Fl e
option or, if no
.Fl e
is specified, the editor specified by the
.Ev FCEDIT
parameter (if this parameter is not set,
.Pa /bin/ed
is used), and then executed by the shell.
.Pp
.It Xo
.Ic fc
.Cm \-e \- \*(Ba Fl s
.Op Fl g
.Op Ar old Ns = Ns Ar new
.Op Ar prefix
.Xc
Re-execute the selected command (the previous command by default) after
performing the optional substitution of
.Ar old
with
.Ar new .
If
.Fl g
is specified, all occurrences of
.Ar old
are replaced with
.Ar new .
The meaning of
.Cm \-e \-
and
.Fl s
is identical: re-execute the selected command without invoking an editor.
This command is usually accessed with the predefined:
.Ic alias r=\*(aqfc \-e \-\*(aq
.Pp
.It Ic fg Op Ar job ...
Resume the specified job(s) in the foreground.
If no jobs are specified,
.Ic %+
is assumed.
See
.Sx Job control
below for more information.
.Pp
.It Xo
.Ic getopts
.Ar optstring name
.Op Ar arg ...
.Xc
Used by shell procedures to parse the specified arguments (or positional
parameters, if no arguments are given) and to check for legal options.
.Ar optstring
contains the option letters that
.Ic getopts
is to recognise.
If a letter is followed by a colon, the option is expected to
have an argument.
Options that do not take arguments may be grouped in a single argument.
If an option takes an argument and the option character is not the
last character of the argument it is found in, the remainder of the argument is
taken to be the option's argument; otherwise, the next argument is the option's
argument.
.Pp
Each time
.Ic getopts
is invoked, it places the next option in the shell parameter
.Ar name
and the index of the argument to be processed by the next call to
.Ic getopts
in the shell parameter
.Ev OPTIND .
If the option was introduced with a
.Ql + ,
the option placed in
.Ar name
is prefixed with a
.Ql + .
When an option requires an argument,
.Ic getopts
places it in the shell parameter
.Ev OPTARG .
.Pp
When an illegal option or a missing option argument is encountered, a question
mark or a colon is placed in
.Ar name
(indicating an illegal option or missing argument, respectively) and
.Ev OPTARG
is set to the option character that caused the problem.
Furthermore, if
.Ar optstring
does not begin with a colon, a question mark is placed in
.Ar name ,
.Ev OPTARG
is unset, and an error message is printed to standard error.
.Pp
When the end of the options is encountered,
.Ic getopts
exits with a non-zero exit status.
Options end at the first (non-option
argument) argument that does not start with a
.Ql \- ,
or when a
.Dq Li \-\-
argument is encountered.
.Pp
Option parsing can be reset by setting
.Ev OPTIND
to 1 (this is done automatically whenever the shell or a shell procedure is
invoked).
.Pp
Warning: Changing the value of the shell parameter
.Ev OPTIND
to a value other than 1 or parsing different sets of arguments without
resetting
.Ev OPTIND
may lead to unexpected results.
.Pp
.It Xo
.Ic global
.Op Ic +\-aglpnrtUux
.Oo Fl L Ns Op Ar n
.No \*(Ba Fl R Ns Op Ar n
.No \*(Ba Fl Z Ns Op Ar n Oc
.Op Fl i Ns Op Ar n
.Oo Ar name
.Op Ns = Ns Ar value
.Ar ... Oc
.Xc
See
.Ic typeset Fl g .
.No Deprecated , Em will
be removed from a future version of
.Nm .
.Pp
.It Xo
.Ic hash
.Op Fl r
.Op Ar name ...
.Xc
Without arguments, any hashed executable command pathnames are listed.
The
.Fl r
option causes all hashed commands to be removed from the hash table.
Each
.Ar name
is searched as if it were a command name and added to the hash table if it is
an executable command.
.Pp
.It Xo
.Ic jobs
.Op Fl lnp
.Op Ar job ...
.Xc
Display information about the specified job(s); if no jobs are specified, all
jobs are displayed.
The
.Fl n
option causes information to be displayed only for jobs that have changed
state since the last notification.
If the
.Fl l
option is used, the process ID of each process in a job is also listed.
The
.Fl p
option causes only the process group of each job to be printed.
See
.Sx Job control
below for the format of
.Ar job
and the displayed job.
.Pp
.It Xo
.Ic kill
.Oo Fl s Ar signame \*(Ba
.No \- Ns Ar signum \*(Ba
.No \- Ns Ar signame Oc
.No { Ar job \*(Ba pid \*(Ba pgrp No }
.Ar ...
.Xc
Send the specified signal to the specified jobs, process IDs or process
groups.
If no signal is specified, the
.Dv TERM
signal is sent.
If a job is specified, the signal is sent to the job's process group.
See
.Sx Job control
below for the format of
.Ar job .
.Pp
.It Xo
.Ic kill
.Fl l
.Op Ar exit-status ...
.Xc
Print the signal name corresponding to
.Ar exit-status .
If no arguments are specified, a list of all the signals with their numbers
and a short description of each are printed.
.Pp
.It Ic let Op Ar expression ...
Each expression is evaluated (see
.Sx Arithmetic expressions
above).
If all expressions are successfully evaluated, the exit status is 0 (1)
if the last expression evaluated to non-zero (zero).
If an error occurs during
the parsing or evaluation of an expression, the exit status is greater than 1.
Since expressions may need to be quoted,
.No \&(( Ar expr No ))
is syntactic sugar for:
.Dl "{ \e\ebuiltin let \*(aq" Ns Ar expr Ns "\*(aq; }"
.Pp
.It Xo
.Ic mknod
.Op Fl m Ar mode
.Ar name
.Cm b\*(Bac
.Ar major minor
.Xc
.It Xo
.Ic mknod
.Op Fl m Ar mode
.Ar name
.Cm p
.Xc
Create a device special file.
The file type may be
.Cm b
(block type device),
.Cm c
(character type device)
or
.Cm p
.Pq named pipe , Tn FIFO .
The file created may be modified according to its
.Ar mode
(via the
.Fl m
option),
.Ar major
(major device number),
and
.Ar minor
(minor device number).
This is not normally part of
.Nm mksh ;
however, distributors may have added this as builtin as a speed hack.
.Pp
.It Xo
.Ic print
.Oo Fl AcelNnprsu Ns Oo Ar n Oc \*(Ba
.Fl R Op Fl n Oc
.Op Ar argument ...
.Xc
Print the specified argument(s) on the standard output,
separated by spaces, terminated with a newline.
The escapes mentioned in
.Sx Backslash expansion
above, as well as
.Dq Li \ec ,
which is equivalent to using the
.Fl n
option, are interpreted.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl A
Each
.Ar argument
is arithmetically evaluated; the character corresponding to the
resulting value is printed.
Empty
.Ar argument Ns s
separate input words.
.It Fl c
The output is printed columnised, line by line, similar to how the
.Xr rs 1
utility, tab completion, the
.Ic kill Fl l
built-in utility and the
.Ic select
statement do.
.It Fl e
Restore backslash expansion after a previous
.Fl r .
.It Fl l
Change the output word separator to newline.
.It Fl N
Change the output word and line separator to ASCII NUL.
.It Fl n
Do not print the trailing line separator.
.It Fl p
Print to the co-process (see
.Sx Co-processes
above).
.It Fl r
Inhibit backslash expansion.
.It Fl s
Print to the history file instead of standard output.
.It Fl u Ns Op Ar n
Print to the file descriptor
.Ar n Pq defaults to 1 if omitted
instead of standard output.
.El
.Pp
The
.Fl R
option mostly emulates the
.Bx
.Xr echo 1
command which does not expand backslashes and interprets
its first argument as option only if it is exactly
.Dq Li \-n
.Pq to suppress the trailing newline .
.Pp
.It Ic pwd Op Fl LP
Print the present working directory.
If the
.Fl L
option is used or if the
.Ic physical
option isn't set (see the
.Ic set
command below), the logical path is printed (i.e. the path used to
.Ic cd
to the current directory).
If the
.Fl P
option (physical path) is used or if the
.Ic physical
option is set, the path determined from the filesystem (by following
.Dq Li ..
directories to the root directory) is printed.
.Pp
.It Xo
.Ic read
.Op Fl A \*(Ba Fl a
.Op Fl d Ar x
.Oo Fl N Ar z \*(Ba
.Fl n Ar z Oc
.Oo Fl p \*(Ba
.Fl u Ns Op Ar n
.Oc Op Fl t Ar n
.Op Fl rs
.Op Ar p ...
.Xc
Reads a line of input, separates the input into fields using the
.Ev IFS
parameter (see
.Sx Substitution
above), and assigns each field to the specified parameters
.Ar p .
If no parameters are specified, the
.Ev REPLY
parameter is used to store the result.
With the
.Fl A
and
.Fl a
options, only no or one parameter is accepted.
If there are more parameters than fields, the extra parameters are set to
the empty string or 0; if there are more fields than parameters, the last
parameter is assigned the remaining fields (including the word separators).
.Pp
The options are as follows:
.Bl -tag -width XuXnX
.It Fl A
Store the result into the parameter
.Ar p
(or
.Ev REPLY )
as array of words.
.It Fl a
Store the result without word splitting into the parameter
.Ar p
(or
.Ev REPLY )
as array of characters (wide characters if the
.Ic utf8\-mode
option is enacted, octets otherwise); the codepoints are
encoded as decimal numbers by default.
.It Fl d Ar x
Use the first byte of
.Ar x ,
.Dv NUL
if empty, instead of the ASCII newline character as input line delimiter.
.It Fl N Ar z
Instead of reading till end-of-line, read exactly
.Ar z
bytes.
Upon EOF, a partial read is returned with exit status 1.
After timeout, a partial read is returned with an exit status as if
.Dv SIGALRM
were caught.
.It Fl n Ar z
Instead of reading till end-of-line, read up to
.Ar z
bytes but return as soon as any bytes are read, e.g.\& from a
slow terminal device, or if EOF or a timeout occurs.
.It Fl p
Read from the currently active co-process, see
.Sx Co-processes
above for details on this.
.It Fl u Ns Op Ar n
Read from the file descriptor
.Ar n
(defaults to 0, i.e.\& standard input).
The argument must immediately follow the option character.
.It Fl t Ar n
Interrupt reading after
.Ar n
seconds (specified as positive decimal value with an optional fractional part).
The exit status of
.Nm read
is the same as if
.Dv SIGALRM
were caught if the timeout occurred, but partial reads may still be returned.
.It Fl r
Normally, the ASCII backslash character escapes the special
meaning of the following character and is stripped from the input;
.Ic read
does not stop when encountering a backslash-newline sequence and
does not store that newline in the result.
This option enables raw mode, in which backslashes are not processed.
.It Fl s
The input line is saved to the history.
.El
.Pp
If the input is a terminal, both the
.Fl N
and
.Fl n
options set it into raw mode;
they read an entire file if \-1 is passed as
.Ar z
argument.
.Pp
The first parameter may have a question mark and a string appended to it, in
which case the string is used as a prompt (printed to standard error before
any input is read) if the input is a
.Xr tty 4
(e.g.\&
.Ic read nfoo?\*(aqnumber of foos: \*(aq ) .
.Pp
If no input is read or a timeout occurred,
.Ic read
exits with a non-zero status.
.Pp
.It Xo
.Ic readonly
.Op Fl p
.Oo Ar parameter
.Op Ns = Ns Ar value
.Ar ... Oc
.Xc
Sets the read-only attribute of the named parameters.
This is a declaration utility.
If values are given,
parameters are set to them before setting the attribute.
Once a parameter is
made read-only, it cannot be unset and its value cannot be changed.
.Pp
If no parameters are specified, the names of all parameters with the read-only
attribute are printed one per line, unless the
.Fl p
option is used, in which case
.Ic readonly
commands defining all read-only parameters, including their values, are
printed.
.Pp
.It Xo
.Ic realpath
.Op Fl \-
.Ar name
.Xc
Prints the resolved absolute pathname corresponding to
.Ar name .
If
.Ar name
ends with a slash
.Pq Ql / ,
it's also checked for existence and whether it is a directory; otherwise,
.Ic realpath
returns 0 if the pathname either exists or can be created immediately,
i.e. all but the last component exist and are directories.
For calls from the shell, if any options are given, an external
.Xr realpath 1
utility is preferred over the builtin.
.Pp
.It Xo
.Ic rename
.Op Fl \-
.Ar from to
.Xc
Renames the file
.Ar from
to
.Ar to .
Both must be complete pathnames and on the same device.
An external utility is preferred over this builtin,
which is intended for emergency situations
.Pq where Pa /bin/mv No becomes unusable
and directly calls
.Xr rename 2 .
.Pp
.It Ic return Op Ar status
Returns from a function or
.Ic \&.
script, with exit status
.Ar status .
If no
.Ar status
is given, the exit status of the last executed command is used.
If used outside of a function or
.Ic \&.
script, it has the same effect as
.Ic exit .
Note that
.Nm
treats both profile and
.Ev ENV
files as
.Ic \&.
scripts, while the original Korn shell only treats profiles as
.Ic \&.
scripts.
.Pp
.It Xo
.Ic set Op Ic +\-abCefhiklmnprsUuvXx
.Op Ic +\-o Ar option
.Op Ic +\-A Ar name
.Op Fl \-
.Op Ar arg ...
.Xc
The
.Ic set
command can be used to set
.Pq Ic \-
or clear
.Pq Ic +
shell options, set the positional parameters, or set an array parameter.
Options can be changed using the
.Cm +\-o Ar option
syntax, where
.Ar option
is the long name of an option, or using the
.Cm +\- Ns Ar letter
syntax, where
.Ar letter
is the option's single letter name (not all options have a single letter name).
The following table lists both option letters (if they exist) and long names
along with a description of what the option does:
.Bl -tag -width 3n
.It Fl A Ar name
Sets the elements of the array parameter
.Ar name
to
.Ar arg ...
If
.Fl A
is used, the array is reset (i.e. emptied) first; if
.Ic +A
is used, the first N elements are set (where N is the number of arguments);
the rest are left untouched.
.Pp
An alternative syntax for the command
.Ic set \-A foo \-\- a b c
which is compatible to
.Tn GNU
.Nm bash
and also supported by
.At
.Nm ksh93
is:
.Ic foo=(a b c); foo+=(d e)
.It Fl a \*(Ba Fl o Ic allexport
All new parameters are created with the export attribute.
.It Fl b \*(Ba Fl o Ic notify
Print job notification messages asynchronously, instead of just before the
prompt.
Only used if job control is enabled
.Pq Fl m .
.It Fl C \*(Ba Fl o Ic noclobber
Prevent \*(Gt redirection from overwriting existing files.
Instead, \*(Gt\*(Ba must be used to force an overwrite.
Note that this is not safe to use for creation of temporary files or
lockfiles due to a TOCTOU in a check allowing one to redirect output to
.Pa /dev/null
or other device files even in
.Ic noclobber
mode.
.It Fl e \*(Ba Fl o Ic errexit
Exit (after executing the
.Dv ERR
trap) as soon as an error occurs or a command fails (i.e. exits with a
non-zero status).
This does not apply to commands whose exit status is
explicitly tested by a shell construct such as
.Ic if ,
.Ic until ,
.Ic while
or
.Ic \&!
statements.
For
.Ic &&
or
.Ic \*(Ba\*(Ba ,
only the status of the last command is tested.
.It Fl f \*(Ba Fl o Ic noglob
Do not expand file name patterns.
.It Fl h \*(Ba Fl o Ic trackall
Create tracked aliases for all executed commands (see
.Sx Aliases
above).
Enabled by default for non-interactive shells.
.It Fl i \*(Ba Fl o Ic interactive
The shell is an interactive shell.
This option can only be used when the shell is invoked.
See above for a description of what this means.
.It Fl k \*(Ba Fl o Ic keyword
Parameter assignments are recognised anywhere in a command.
.It Fl l \*(Ba Fl o Ic login
The shell is a login shell.
This option can only be used when the shell is invoked.
See above for a description of what this means.
.It Fl m \*(Ba Fl o Ic monitor
Enable job control (default for interactive shells).
.It Fl n \*(Ba Fl o Ic noexec
Do not execute any commands.
Useful for checking the syntax of scripts
(ignored if interactive).
.It Fl p \*(Ba Fl o Ic privileged
The shell is a privileged shell.
It is set automatically if, when the shell starts,
the real UID or GID does not match
the effective UID (EUID) or GID (EGID), respectively.
See above for a description of what this means.
.Pp
If the shell is privileged, setting this flag after startup files
have been processed let it go full setuid and/or setgid.
Clearing this flag makes the shell drop privileges.
Changing this flag resets the groups vector.
.It Fl r \*(Ba Fl o Ic restricted
The shell is a restricted shell.
This option can only be used when the shell is invoked.
See above for a description of what this means.
.It Fl s \*(Ba Fl o Ic stdin
If used when the shell is invoked, commands are read from standard input.
Set automatically if the shell is invoked with no arguments.
.Pp
When
.Fl s
is used with the
.Ic set
command it causes the specified arguments to be sorted before assigning them to
the positional parameters (or to array
.Ar name ,
if
.Fl A
is used).
.It Fl U \*(Ba Fl o Ic utf8\-mode
Enable UTF-8 support in the
.Sx Emacs editing mode
and internal string handling functions.
This flag is disabled by default, but can be enabled by setting it on the
shell command line; is enabled automatically for interactive shells if
requested at compile time, your system supports
.Fn setlocale LC_CTYPE \&""
and optionally
.Fn nl_langinfo CODESET ,
or the
.Ev LC_ALL ,
.Ev LC_CTYPE
or
.Ev LANG
environment variables,
and at least one of these returns something that matches
.Dq UTF\-8
or
.Dq utf8
case-insensitively; for direct builtin calls depending on the
aforementioned environment variables; or for stdin or scripts,
if the input begins with a UTF-8 Byte Order Mark.
.Pp
In near future, locale tracking will be implemented, which means that
.Ic set Fl +U
is changed whenever one of the
.Tn POSIX
locale-related environment variables changes.
.It Fl u \*(Ba Fl o Ic nounset
Referencing of an unset parameter, other than
.Dq Li $@@
or
.Dq Li $* ,
is treated as an error, unless one of the
.Ql \- ,
.Ql +
or
.Ql =
modifiers is used.
.It Fl v \*(Ba Fl o Ic verbose
Write shell input to standard error as it is read.
.It Fl X \*(Ba Fl o Ic markdirs
Mark directories with a trailing
.Ql /
during file name generation.
.It Fl x \*(Ba Fl o Ic xtrace
Print command trees when they are executed, preceded by
the value of
.Ev PS4 .
.It Fl o Ic bgnice
Background jobs are run with lower priority.
.It Fl o Ic braceexpand
Enable brace expansion (a.k.a. alternation).
This is enabled by default.
.It Fl o Ic emacs
Enable BRL emacs-like command-line editing (interactive shells only); see
.Sx Emacs editing mode .
.It Fl o Ic gmacs
Enable gmacs-like command-line editing (interactive shells only).
Currently identical to emacs editing except that transpose\-chars (\*(haT) acts
slightly differently.
.It Fl o Ic ignoreeof
The shell will not (easily) exit when end-of-file is read;
.Ic exit
must be used.
To avoid infinite loops, the shell will exit if
.Dv EOF
is read 13 times in a row.
.It Fl o Ic inherit\-xtrace
Do not reset
.Fl o Ic xtrace
upon entering functions.
This is enabled by default.
.It Fl o Ic nohup
Do not kill running jobs with a
.Dv SIGHUP
signal when a login shell exits.
Currently set by default, but this may
change in the future to be compatible with
.At
.Nm ksh ,
which
doesn't have this option, but does send the
.Dv SIGHUP
signal.
.It Fl o Ic nolog
No effect.
In the original Korn shell, this prevents function definitions from
being stored in the history file.
.It Fl o Ic physical
Causes the
.Ic cd
and
.Ic pwd
commands to use
.Dq physical
(i.e. the filesystem's)
.Dq Li ..
directories instead of
.Dq logical
directories (i.e. the shell handles
.Dq Li .. ,
which allows the user to be oblivious of symbolic links to directories).
Clear by default.
Note that setting this option does not affect the current value of the
.Ev PWD
parameter; only the
.Ic cd
command changes
.Ev PWD .
See the
.Ic cd
and
.Ic pwd
commands above for more details.
.It Fl o Ic pipefail
Make the exit status of a pipeline (before logically complementing) the
rightmost non-zero errorlevel, or zero if all commands exited with zero.
.It Fl o Ic posix
Behave closer to the standards
(see
.Sx POSIX mode
for details).
Automatically enabled if the basename of the shell invocation begins with
.Dq sh
and this autodetection feature is compiled in
.Pq not in MirBSD .
As a side effect, setting this flag turns off the
.Ic braceexpand
and
.Ic utf8\-mode
flags, which can be turned back on manually, and
.Ic sh
mode (unless both are enabled at the same time).
.It Fl o Ic sh
Enable
.Pa /bin/sh
.Pq kludge
mode (see
.Sx SH mode ) .
Automatically enabled if the basename of the shell invocation begins with
.Dq sh
and this autodetection feature is compiled in
.Pq not in MirBSD .
As a side effect, setting this flag turns off
.Ic braceexpand
mode, which can be turned back on manually, and
.Ic posix
mode (unless both are enabled at the same time).
.It Fl o Ic vi
Enable
.Xr vi 1 Ns -like
command-line editing (interactive shells only).
See
.Sx Vi editing mode
for documentation and limitations.
.It Fl o Ic vi\-esccomplete
In vi command-line editing, do command and file name completion when escape
(\*(ha[) is entered in command mode.
.It Fl o Ic vi\-tabcomplete
In vi command-line editing, do command and file name completion when tab (\*(haI)
is entered in insert mode.
This is the default.
.It Fl o Ic viraw
No effect.
In the original Korn shell, unless
.Ic viraw
was set, the vi command-line mode would let the
.Xr tty 4
driver do the work until ESC (\*(ha[) was entered.
.Nm
is always in viraw mode.
.El
.Pp
These options can also be used upon invocation of the shell.
The current set of
options (with single letter names) can be found in the parameter
.Dq Li $\- .
.Ic set Fl o
with no option name will list all the options and whether each is on or off;
.Ic set +o
will print the long names of all options that are currently on.
In a future version,
.Ic set +o
will behave
.Tn POSIX
compliant and print commands to restore the current options instead.
.Pp
Remaining arguments, if any, are positional parameters and are assigned, in
order, to the positional parameters (i.e. $1, $2, etc.).
If options end with
.Dq Li \-\-
and there are no remaining arguments, all positional parameters are cleared.
If no options or arguments are given, the values of all names are printed.
For unknown historical reasons, a lone
.Dq Li \-
option is treated specially \*(en it clears both the
.Fl v
and
.Fl x
options.
.Pp
.It Ic shift Op Ar number
The positional parameters
.Ar number Ns +1 ,
.Ar number Ns +2 ,
etc. are renamed to 1, 2, etc.
.Ar number
defaults to 1.
.Pp
.It Ic sleep Ar seconds
Suspends execution for a minimum of the
.Ar seconds
specified as positive decimal value with an optional fractional part.
Signal delivery may continue execution earlier.
.Pp
.It Ic source Ar file Op Ar arg ...
Like
.Ic \&. Po Do dot Dc Pc ,
except that the current working directory is appended to the
search path (GNU
.Nm bash
extension).
.Pp
.It Ic suspend
Stops the shell as if it had received the suspend character from
the terminal.
It is not possible to suspend a login shell unless the parent process
is a member of the same terminal session but is a member of a different
process group.
As a general rule, if the shell was started by another shell or via
.Xr su 1 ,
it can be suspended.
.Pp
.It Ic test Ar expression
.It Ic \&[ Ar expression Ic \&]
.Ic test
evaluates the
.Ar expression
and returns zero status if true, 1 if false, or greater than 1 if there
was an error.
It is normally used as the condition command of
.Ic if
and
.Ic while
statements.
Symbolic links are followed for all
.Ar file
expressions except
.Fl h
and
.Fl L .
.Pp
The following basic expressions are available:
.Bl -tag -width 17n
.It Fl a Ar file
.Ar file
exists.
.It Fl b Ar file
.Ar file
is a block special device.
.It Fl c Ar file
.Ar file
is a character special device.
.It Fl d Ar file
.Ar file
is a directory.
.It Fl e Ar file
.Ar file
exists.
.It Fl f Ar file
.Ar file
is a regular file.
.It Fl G Ar file
.Ar file Ns 's
group is the shell's effective group ID.
.It Fl g Ar file
.Ar file Ns 's
mode has the setgid bit set.
.It Fl H Ar file
.Ar file
is a context dependent directory (only useful on HP-UX).
.It Fl h Ar file
.Ar file
is a symbolic link.
.It Fl k Ar file
.Ar file Ns 's
mode has the
.Xr sticky 8
bit set.
.It Fl L Ar file
.Ar file
is a symbolic link.
.It Fl O Ar file
.Ar file Ns 's
owner is the shell's effective user ID.
.It Fl p Ar file
.Ar file
is a named pipe
.Pq Tn FIFO .
.It Fl r Ar file
.Ar file
exists and is readable.
.It Fl S Ar file
.Ar file
is a
.Xr unix 4 Ns -domain
socket.
.It Fl s Ar file
.Ar file
is not empty.
.It Fl t Ar fd
File descriptor
.Ar fd
is a
.Xr tty 4
device.
.It Fl u Ar file
.Ar file Ns 's
mode has the setuid bit set.
.It Fl w Ar file
.Ar file
exists and is writable.
.It Fl x Ar file
.Ar file
exists and is executable.
.It Ar file1 Fl nt Ar file2
.Ar file1
is newer than
.Ar file2
or
.Ar file1
exists and
.Ar file2
does not.
.It Ar file1 Fl ot Ar file2
.Ar file1
is older than
.Ar file2
or
.Ar file2
exists and
.Ar file1
does not.
.It Ar file1 Fl ef Ar file2
.Ar file1
is the same file as
.Ar file2 .
.It Ar string
.Ar string
has non-zero length.
.It Fl n Ar string
.Ar string
is not empty.
.It Fl z Ar string
.Ar string
is empty.
.It Fl v Ar name
The shell parameter
.Ar name
is set.
.It Fl o Ar option
Shell
.Ar option
is set (see the
.Ic set
command above for a list of options).
As a non-standard extension, if the option starts with a
.Ql \&! ,
the test is negated; the test always fails if
.Ar option
doesn't exist (so [ \-o foo \-o \-o !foo ] returns true if and only if option
.Ar foo
exists).
The same can be achieved with [ \-o ?foo ] like in
.At
.Nm ksh93 .
.Ar option
can also be the short flag led by either
.Ql \-
or
.Ql +
.Pq no logical negation ,
for example
.Dq Li \-x
or
.Dq Li +x
instead of
.Dq Li xtrace .
.It Ar string No = Ar string
Strings are equal.
If the right-hand side is not quoted, pattern matching occurs.
.It Ar string No == Ar string
Same as
.Sq =
.Pq deprecated .
.It Ar string No \*(Gt Ar string
First string operand is greater than second string operand.
.It Ar string No \*(Lt Ar string
First string operand is less than second string operand.
.It Ar string No != Ar string
Strings are not equal.
See
.Sq =
regarding pattern matching.
.It Ar number Fl eq Ar number
Numbers compare equal.
.It Ar number Fl ne Ar number
Numbers compare not equal.
.It Ar number Fl ge Ar number
Numbers compare greater than or equal.
.It Ar number Fl gt Ar number
Numbers compare greater than.
.It Ar number Fl le Ar number
Numbers compare less than or equal.
.It Ar number Fl \&lt Ar number
Numbers compare less than.
.El
.Pp
The above basic expressions, in which unary operators have precedence over
binary operators, may be combined with the following operators (listed in
increasing order of precedence):
.Bd -literal -offset indent
expr \-o expr		Logical OR.
expr \-a expr		Logical AND.
! expr			Logical NOT.
( expr )		Grouping.
.Ed
.Pp
Note that a number actually may be an arithmetic expression, such as
a mathematical term or the name of an integer variable:
.Bd -literal -offset indent
x=1; [ "x" \-eq 1 ]	evaluates to true
.Ed
.Pp
Note that some special rules are applied (courtesy of
.Px
) if the number of arguments to
.Ic test
or inside the brackets
.Ic \&[ ... \&]
is less than five: if leading
.Dq Li \&!
arguments can be stripped such that only one to three arguments remain,
then the lowered comparison is executed; (thanks to XSI) parentheses
.Ic \e( ... \e)
lower four- and three-argument forms to two- and one-argument forms,
respectively; three-argument forms ultimately prefer binary operations,
followed by negation and parenthesis lowering; two- and four-argument forms
prefer negation followed by parenthesis; the one-argument form always implies
.Fl n .
.Pp
.Sy Note :
A common mistake is to use
.Dq Li if \&[ $foo = bar \&]
which fails if parameter
.Dq foo
is empty or unset, if it has embedded spaces (i.e.\&
.Ev IFS
octets) or if it is a unary operator like
.Dq Li \&!
or
.Dq Li \-n .
Use tests like
.Dq Li if \&[ x\&"$foo\&" = x"bar" \&]
instead, or the double-bracket operator
.Dq Li if \&[[ $foo = bar \&]]
or, to avoid pattern matching (see
.Ic \&[[
above):
.Dq Li if \&[[ $foo = \&"$bar" \&]]
.Pp
The
.Ic \&[[ ... \&]]
construct is not only more secure to use but also often faster.
.Pp
.It Xo
.Ic time
.Op Fl p
.Op Ar pipeline
.Xc
If a
.Ar pipeline
is given, the times used to execute the pipeline are reported.
If no pipeline
is given, then the user and system time used by the shell itself, and all the
commands it has run since it was started, are reported.
The times reported are the real time (elapsed time from start to finish),
the user CPU time (time spent running in user mode), and the system CPU time
(time spent running in kernel mode).
Times are reported to standard error; the format of the output is:
.Pp
.Dl "0m0.03s real     0m0.02s user     0m0.01s system"
.Pp
If the
.Fl p
option is given the output is slightly longer:
.Bd -literal -offset indent
real     0.03
user     0.02
sys      0.01
.Ed
.Pp
It is an error to specify the
.Fl p
option unless
.Ar pipeline
is a simple command.
.Pp
Simple redirections of standard error do not affect the output of the
.Ic time
command:
.Pp
.Dl $ time sleep 1 2\*(Gtafile
.Dl $ { time sleep 1; } 2\*(Gtafile
.Pp
Times for the first command do not go to
.Dq afile ,
but those of the second command do.
.Pp
.It Ic times
Print the accumulated user and system times used both by the shell
and by processes that the shell started which have exited.
The format of the output is:
.Bd -literal -offset indent
0m0.01s 0m0.00s
0m0.04s 0m0.02s
.Ed
.Pp
.It Ic trap Ar n Op Ar signal ...
If the first operand is a decimal unsigned integer, this resets all
specified signals to the default action, i.e. is the same as calling
.Ic trap
with a dash
.Pq Dq Li \-
as
.Ar handler ,
followed by the arguments
.Pq Ar n Op Ar signal ... ,
all of which are treated as signals.
.Pp
.It Ic trap Op Ar handler signal ...
Sets a trap handler that is to be executed when any of the specified
.Ar signal Ns s
are received.
.Ar handler
is either an empty string, indicating the signals are to be ignored, a dash
.Pq Dq Li \- ,
indicating that the default action is to be taken for the signals
.Pq see Xr signal 3 ,
or a string containing shell commands to be executed at the first opportunity
(i.e. when the current command completes or before printing the next
.Ev PS1
prompt) after receipt of one of the signals.
.Ar signal
is the name of a signal
.Pq e.g.\& Dv PIPE or Dv ALRM
or the number of the signal (see the
.Ic kill Fl l
command above).
.Pp
There are two special signals:
.Dv EXIT
.Pq also known as 0 ,
which is executed when the shell is about to exit, and
.Dv ERR ,
which is executed after an error occurs; an error is something
that would cause the shell to exit if the
.Ic set Fl e
or
.Ic set Fl o Ic errexit
option were set.
.Dv EXIT
handlers are executed in the environment of the last executed command.
.Pp
Note that, for non-interactive shells, the trap handler cannot be changed
for signals that were ignored when the shell started.
.Pp
With no arguments, the current state of the traps that have been set since
the shell started is shown as a series of
.Ic trap
commands.
Note that the output of
.Ic trap
cannot be usefully piped to another process (an artifact of the fact that
traps are cleared when subprocesses are created).
.Pp
The original Korn shell's
.Dv DEBUG
trap and the handling of
.Dv ERR
and
.Dv EXIT
traps in functions are not yet implemented.
.Pp
.It Ic true
A command that exits with a zero value.
.Pp
.It Xo
.Ic typeset
.Op Ic +\-aglpnrtUux
.Oo Fl L Ns Op Ar n
.No \*(Ba Fl R Ns Op Ar n
.No \*(Ba Fl Z Ns Op Ar n Oc
.Op Fl i Ns Op Ar n
.Oo Ar name
.Op Ns = Ns Ar value
.Ar ... Oc
.Xc
.It Xo
.Ic typeset
.Fl f Op Fl tux
.Op Ar name ...
.Xc
Display or set parameter attributes.
This is a declaration utility.
With no
.Ar name
arguments, parameter attributes are displayed; if no options are used, the
current attributes of all parameters are printed as
.Ic typeset
commands; if an option is given (or
.Dq Li \-
with no option letter), all parameters and their values with the specified
attributes are printed; if options are introduced with
.Ql + ,
parameter values are not printed.
.Pp
If
.Ar name
arguments are given, the attributes of the named parameters are set
.Pq Ic \&\-
or cleared
.Pq Ic \&+ ;
inside a function, this will cause the parameters to be created
(with no value) in the local scope (but see
.Fl g ) .
Values for parameters may optionally be specified.
For
.Ar name Ns \&[*] ,
the change affects all elements of the array, and no value may be specified.
.Pp
When
.Fl f
is used,
.Ic typeset
operates on the attributes of functions.
As with parameters, if no
.Ar name
arguments are given,
functions are listed with their values (i.e. definitions) unless
options are introduced with
.Ql + ,
in which case only the function names are reported.
.Bl -tag -width Ds
.It Fl a
Indexed array attribute.
.It Fl f
Function mode.
Display or set functions and their attributes, instead of parameters.
.It Fl g
Do not cause named parameters to be created in
the local scope when called inside a function.
.It Fl i Ns Op Ar n
Integer attribute.
.Ar n
specifies the base to use when displaying the integer (if not specified, the
base given in the first assignment is used).
Parameters with this attribute may
be assigned values containing arithmetic expressions.
.It Fl L Ns Op Ar n
Left justify attribute.
.Ar n
specifies the field width.
If
.Ar n
is not specified, the current width of a parameter (or the width of its first
assigned value) is used.
Leading whitespace (and zeros, if used with the
.Fl Z
option) is stripped.
If necessary, values are either truncated or space padded
to fit the field width.
.It Fl l
Lower case attribute.
All upper case ASCII characters in values are converted to lower case.
(In the original Korn shell, this parameter meant
.Dq long integer
when used with the
.Fl i
option.)
.It Fl n
Create a bound variable (name reference): any access to the variable
.Ar name
will access the variable
.Ar value
in the current scope (this is different from
.At
.Nm ksh93 ! )
instead.
Also different from
.At
.Nm ksh93
is that
.Ar value
is lazily evaluated at the time
.Ar name
is accessed.
This can be used by functions to access variables whose names are
passed as parameters, instead of using
.Ic eval .
.It Fl p
Print complete
.Ic typeset
commands that can be used to re-create the attributes and values of
parameters.
.It Fl R Ns Op Ar n
Right justify attribute.
.Ar n
specifies the field width.
If
.Ar n
is not specified, the current width of a parameter (or the width of its first
assigned value) is used.
Trailing whitespace is stripped.
If necessary, values are either stripped of leading characters or space
padded to make them fit the field width.
.It Fl r
Read-only attribute.
Parameters with this attribute may not be assigned to or unset.
Once this attribute is set, it cannot be turned off.
.It Fl t
Tag attribute.
Has no meaning to the shell; provided for application use.
.Pp
For functions,
.Fl t
is the trace attribute.
When functions with the trace attribute are executed, the
.Ic xtrace
.Pq Fl x
shell option is temporarily turned on.
.It Fl U
Unsigned integer attribute.
Integers are printed as unsigned values (combine with the
.Fl i
option).
This option is not in the original Korn shell.
.It Fl u
Upper case attribute.
All lower case ASCII characters in values are converted to upper case.
(In the original Korn shell, this parameter meant
.Dq unsigned integer
when used with the
.Fl i
option which meant upper case letters would never be used for bases greater
than 10.
See
.Fl U
above.)
.Pp
For functions,
.Fl u
is the undefined attribute.
See
.Sx Functions
above for the implications of this.
.It Fl x
Export attribute.
Parameters are placed in the environment of any executed commands.
Functions cannot be exported for security reasons
.Pq Dq shellshock .
.It Fl Z Ns Op Ar n
Zero fill attribute.
If not combined with
.Fl L ,
this is the same as
.Fl R ,
except zero padding is used instead of space padding.
For integers, the number is padded, not the base.
.El
.Pp
If any of the
.\" long integer ,
.Fl i ,
.Fl L ,
.Fl l ,
.Fl R ,
.Fl U ,
.Fl u
or
.Fl Z
options are changed, all others from this set are cleared,
unless they are also given on the same command line.
.Pp
.It Xo
.Ic ulimit
.Op Fl aBCcdefHilMmnOPpqrSsTtVvwx
.Op Ar value
.Xc
Display or set process limits.
If no options are used, the file size limit
.Pq Fl f
is assumed.
.Ar value ,
if specified, may be either an arithmetic expression or the word
.Dq unlimited .
The limits affect the shell and any processes created by the shell after a
limit is imposed.
Note that some systems may not allow limits to be increased
once they are set.
Also note that the types of limits available are system
dependent \*(en some systems have only the
.Fl f
limit, or not even that, or can set only the soft limits
.Bl -tag -width 5n
.It Fl a
Display all limits; unless
.Fl H
is used, soft limits are displayed.
.It Fl B Ar n
Set the socket buffer size to
.Ar n
kibibytes.
.It Fl C Ar n
Set the number of cached threads to
.Ar n .
.It Fl c Ar n
Impose a size limit of
.Ar n
blocks on the size of core dumps.
.It Fl d Ar n
Impose a size limit of
.Ar n
kibibytes on the size of the data area.
.It Fl e Ar n
Set the maximum niceness to
.Ar n .
.It Fl f Ar n
Impose a size limit of
.Ar n
blocks on files written by the shell and its child processes (files of any
size may be read).
.It Fl H
Set the hard limit only (the default is to set both hard and soft limits).
.It Fl i Ar n
Set the number of pending signals to
.Ar n .
.It Fl l Ar n
Impose a limit of
.Ar n
kibibytes on the amount of locked (wired) physical memory.
.It Fl M Ar n
Set the AIO locked memory to
.Ar n
kibibytes.
.It Fl m Ar n
Impose a limit of
.Ar n
kibibytes on the amount of physical memory used.
.It Fl n Ar n
Impose a limit of
.Ar n
file descriptors that can be open at once.
.It Fl O Ar n
Set the number of AIO operations to
.Ar n .
.It Fl P Ar n
Limit the number of threads per process to
.Ar n .
.Pp
This option mostly matches
.At
.Nm ksh93 Ns 's
.Fl T ;
on
.Tn AIX ,
see
.Fl r
.Pq as used by its Nm ksh
though.
.It Fl p Ar n
Impose a limit of
.Ar n
processes that can be run by the user at any one time.
.It Fl q Ar n
Limit the size of
.Tn POSIX
message queues to
.Ar n
bytes.
.It Fl r Ar n
.Pq Cm AIX
Limit the number of threads per process to
.Ar n .
.br
.Pq Cm Linux
Set the maximum real-time priority to
.Ar n .
.It Fl S
Set the soft limit only (the default is to set both hard and soft limits).
.It Fl s Ar n
Impose a size limit of
.Ar n
kibibytes on the size of the stack area.
.It Fl T Ar n
Impose a time limit of
.Ar n
real seconds to be used by each process.
.It Fl t Ar n
Impose a time limit of
.Ar n
CPU seconds spent in user mode to be used by each process.
.It Fl V Ar n
Set the number of vnode monitors on Haiku to
.Ar n .
.It Fl v Ar n
Impose a limit of
.Ar n
kibibytes on the amount of virtual memory (address space) used.
.It Fl w Ar n
Impose a limit of
.Ar n
kibibytes on the amount of swap space used.
.It Fl x Ar n
Set the maximum number of file locks to
.Ar n .
.El
.Pp
As far as
.Ic ulimit
is concerned, a block is 512 bytes.
.Pp
.It Xo
.Ic umask
.Op Fl S
.Op Ar mask
.Xc
Display or set the file permission creation mask or umask (see
.Xr umask 2 ) .
If the
.Fl S
option is used, the mask displayed or set is symbolic; otherwise, it is an
octal number.
.Pp
Symbolic masks are like those used by
.Xr chmod 1 .
When used, they describe what permissions may be made available (as opposed to
octal masks in which a set bit means the corresponding bit is to be cleared).
For example,
.Dq Li ug=rwx,o=
sets the mask so files will not be readable, writable or executable by
.Dq others ,
and is equivalent (on most systems) to the octal mask
.Dq Li 007 .
.Pp
.It Xo
.Ic unalias
.Op Fl adt
.Op Ar name ...
.Xc
The aliases for the given names are removed.
If the
.Fl a
option is used, all aliases are removed.
If the
.Fl t
or
.Fl d
options are used, the indicated operations are carried out on tracked or
directory aliases, respectively.
.Pp
.It Xo
.Ic unset
.Op Fl fv
.Ar parameter ...
.Xc
Unset the named parameters
.Po
.Fl v ,
the default
.Pc
or functions
.Pq Fl f .
With
.Ar parameter Ns \&[*] ,
attributes are kept, only values are unset.
.Pp
The exit status is non-zero if any of the parameters have the read-only
attribute set, zero otherwise.
.Pp
.It Ic wait Op Ar job ...
Wait for the specified job(s) to finish.
The exit status of
.Ic wait
is that of the last specified job; if the last job is killed by a signal, the
exit status is 128 + the number of the signal (see
.Ic kill Fl l Ar exit-status
above); if the last specified job can't be found (because it never existed or
had already finished), the exit status of
.Ic wait
is 127.
See
.Sx Job control
below for the format of
.Ar job .
.Ic wait
will return if a signal for which a trap has been set is received or if a
.Dv SIGHUP ,
.Dv SIGINT
or
.Dv SIGQUIT
signal is received.
.Pp
If no jobs are specified,
.Ic wait
waits for all currently running jobs (if any) to finish and exits with a zero
status.
If job monitoring is enabled, the completion status of jobs is printed
(this is not the case when jobs are explicitly specified).
.Pp
.It Xo
.Ic whence
.Op Fl pv
.Op Ar name ...
.Xc
Without the
.Fl v
option, it is the same as
.Ic command Fl v ,
except aliases are not printed as alias command.
With the
.Fl v
option, it is exactly the same as
.Ic command Fl V .
In either case, the
.Fl p
option differs: the search path is not affected in
.Ic whence ,
but the search is restricted to the path.
.El
.Ss Job control
Job control refers to the shell's ability to monitor and control jobs which
are processes or groups of processes created for commands or pipelines.
At a minimum, the shell keeps track of the status of the background (i.e.\&
asynchronous) jobs that currently exist; this information can be displayed
using the
.Ic jobs
commands.
If job control is fully enabled (using
.Ic set Fl m
or
.Ic set Fl o Ic monitor ) ,
as it is for interactive shells, the processes of a job are placed in their
own process group.
Foreground jobs can be stopped by typing the suspend character from
the terminal (normally \*(haZ); jobs can be restarted in either the
foreground or background using the commands
.Ic fg
and
.Ic bg .
.Pp
Note that only commands that create processes (e.g. asynchronous commands,
subshell commands and non-built-in, non-function commands) can be stopped;
commands like
.Ic read
cannot be.
.Pp
When a job is created, it is assigned a job number.
For interactive shells, this number is printed inside
.Dq Li \&[...] ,
followed by the process IDs of the processes in the job when an asynchronous
command is run.
A job may be referred to in the
.Ic bg ,
.Ic fg ,
.Ic jobs ,
.Ic kill
and
.Ic wait
commands either by the process ID of the last process in the command pipeline
(as stored in the
.Ic \&$!
parameter) or by prefixing the job number with a percent sign
.Pq Ql % .
Other percent sequences can also be used to refer to jobs:
.Bl -tag -width "%+ x %% x %XX"
.It %+ \*(Ba %% \*(Ba %
The most recently stopped job or, if there are no stopped jobs, the oldest
running job.
.It %\-
The job that would be the
.Ic %+
job if the latter did not exist.
.It % Ns Ar n
The job with job number
.Ar n .
.It %? Ns Ar string
The job with its command containing the string
.Ar string
(an error occurs if multiple jobs are matched).
.It % Ns Ar string
The job with its command starting with the string
.Ar string
(an error occurs if multiple jobs are matched).
.El
.Pp
When a job changes state (e.g. a background job finishes or foreground job is
stopped), the shell prints the following status information:
.Pp
.D1 [ Ns Ar number ] Ar flag status command
.Pp
where...
.Bl -tag -width "command"
.It Ar number
is the job number of the job;
.It Ar flag
is the
.Ql +
or
.Ql \-
character if the job is the
.Ic %+
or
.Ic %\-
job, respectively, or space if it is neither;
.It Ar status
indicates the current state of the job and can be:
.Bl -tag -width "RunningXX"
.It Done Op Ar number
The job exited.
.Ar number
is the exit status of the job which is omitted if the status is zero.
.It Running
The job has neither stopped nor exited (note that running does not necessarily
mean consuming CPU time \*(en
the process could be blocked waiting for some event).
.It Stopped Op Ar signal
The job was stopped by the indicated
.Ar signal
(if no signal is given, the job was stopped by
.Dv SIGTSTP ) .
.It Ar signal-description Op Dq core dumped
The job was killed by a signal (e.g. memory fault, hangup); use
.Ic kill Fl l
for a list of signal descriptions.
The
.Dq Li core dumped
message indicates the process created a core file.
.El
.It Ar command
is the command that created the process.
If there are multiple processes in
the job, each process will have a line showing its
.Ar command
and possibly its
.Ar status ,
if it is different from the status of the previous process.
.El
.Pp
When an attempt is made to exit the shell while there are jobs in the stopped
state, the shell warns the user that there are stopped jobs and does not exit.
If another attempt is immediately made to exit the shell, the stopped jobs are
sent a
.Dv SIGHUP
signal and the shell exits.
Similarly, if the
.Ic nohup
option is not set and there are running jobs when an attempt is made to exit
a login shell, the shell warns the user and does not exit.
If another attempt
is immediately made to exit the shell, the running jobs are sent a
.Dv SIGHUP
signal and the shell exits.
.Ss Terminal state
The state of the controlling terminal can be modified by a command
executed in the foreground, whether or not job control is enabled, but
the modified terminal state is only kept past the job's lifetime and used
for later command invocations if the command exits successfully (i.e.\&
with an exit status of 0).
When such a job is momentarily stopped or restarted, the terminal state
is saved and restored, respectively, but it will not be kept afterwards.
In interactive mode, when line editing is enabled, the terminal state is
saved before being reconfigured by the shell for the line editor, then
restored before running a command.
.Ss POSIX mode
Entering
.Ic set Fl o Ic posix
mode will cause
.Nm
to behave even more
.Tn POSIX
compliant in places where the defaults or opinions differ.
Note that
.Nm mksh
will still operate with unsigned 32-bit arithmetic; use
.Nm lksh
if arithmetic on the host
.Vt long
data type, complete with ISO C Undefined Behaviour, is required;
refer to the
.Xr lksh 1
manual page for details.
Most other historic,
.At
.Nm ksh Ns -compatible
or opinionated differences can be disabled by using this mode; these are:
.Bl -bullet
.It
The incompatible GNU
.Nm bash
I/O redirection
.Ic &\*(Gt Ns Ar file
is not supported.
.It
File descriptors created by I/O redirections are inherited by
child processes.
.It
Numbers with a leading digit zero are interpreted as octal.
.It
The
.Nm echo
builtin does not interpret backslashes and only supports the exact option
.Fl n .
.It
Alias expansion with a trailing space only reruns on command words.
.It
Tilde expansion follows POSIX instead of Korn shell rules.
.It
The exit status of
.Ic fg
is always 0.
.It
.Ic kill
.Fl l
only lists signal names, all in one line.
.It
.Ic getopts
does not accept options with a leading
.Ql + .
.It
.Ic exec
skips builtins, functions and other commands and uses a
.Ev PATH
search to determine the utility to execute.
.El
.Ss SH mode
Compatibility mode; intended for use with legacy scripts that
cannot easily be fixed; the changes are as follows:
.Bl -bullet
.It
The incompatible GNU
.Nm bash
I/O redirection
.Ic &\*(Gt Ns Ar file
is not supported.
.It
File descriptors created by I/O redirections are inherited by
child processes.
.It
The
.Nm echo
builtin does not interpret backslashes and only supports the exact option
.Fl n ,
unless built with
.Ev \-DMKSH_MIDNIGHTBSD01ASH_COMPAT .
.It
The substitution operations
.Sm off
.Xo
.Pf ${ Ar x
.Pf # Ar pat No } ,
.Sm on
.Xc
.Sm off
.Xo
.Pf ${ Ar x
.Pf ## Ar pat No } ,
.Sm on
.Xc
.Sm off
.Xo
.Pf ${ Ar x
.Pf % Ar pat No } ,
.Sm on
.Xc
and
.Sm off
.Xo
.Pf ${ Ar x
.Pf %% Ar pat No }
.Sm on
.Xc
wrongly do not require a parenthesis to be escaped and do not parse extglobs.
.It
The getopt construct from
.Xr lksh 1
passes through the errorlevel.
.It
.Nm sh
.Fl c
eats a leading
.Fl \-
if built with
.Ev \-DMKSH_MIDNIGHTBSD01ASH_COMPAT .
.El
.Ss Interactive input line editing
The shell supports three modes of reading command lines from a
.Xr tty 4
in an interactive session, controlled by the
.Ic emacs ,
.Ic gmacs
and
.Ic vi
options (at most one of these can be set at once).
The default is
.Ic emacs .
Editing modes can be set explicitly using the
.Ic set
built-in.
If none of these options are enabled,
the shell simply reads lines using the normal
.Xr tty 4
driver.
If the
.Ic emacs
or
.Ic gmacs
option is set, the shell allows emacs-like editing of the command; similarly,
if the
.Ic vi
option is set, the shell allows vi-like editing of the command.
These modes are described in detail in the following sections.
.Pp
In these editing modes, if a line is longer than the screen width (see the
.Ev COLUMNS
parameter),
a
.Ql \*(Gt ,
.Ql +
or
.Ql \*(Lt
character is displayed in the last column indicating that there are more
characters after, before and after, or before the current position,
respectively.
The line is scrolled horizontally as necessary.
.Pp
Completed lines are pushed into the history, unless they begin with an
IFS octet or IFS white space or are the same as the previous line.
.Ss Emacs editing mode
When the
.Ic emacs
option is set, interactive input line editing is enabled.
Warning: This mode is
slightly different from the emacs mode in the original Korn shell.
In this mode, various editing commands
(typically bound to one or more control characters) cause immediate actions
without waiting for a newline.
Several editing commands are bound to particular
control characters when the shell is invoked; these bindings can be changed
using the
.Ic bind
command.
.Pp
The following is a list of available editing commands.
Each description starts with the name of the command,
suffixed with a colon;
an
.Op Ar n
(if the command can be prefixed with a count); and any keys the command is
bound to by default, written using caret notation
e.g. the ASCII ESC character is written as \*(ha[.
These control sequences are not case sensitive.
A count prefix for a command is entered using the sequence
.Pf \*(ha[ Ns Ar n ,
where
.Ar n
is a sequence of 1 or more digits.
Unless otherwise specified, if a count is
omitted, it defaults to 1.
.Pp
Note that editing command names are used only with the
.Ic bind
command.
Furthermore, many editing commands are useful only on terminals with
a visible cursor.
The user's
.Xr tty 4
characters (e.g.\&
.Dv ERASE )
are bound to
reasonable substitutes and override the default bindings;
their customary values are shown in parentheses below.
The default bindings were chosen to resemble corresponding
Emacs key bindings:
.Bl -tag -width Ds
.It Xo abort:
.No INTR Pq \*(haC ,
.No \*(haG
.Xc
Abort the current command, save it to the history, empty the line buffer and
set the exit state to interrupted.
.It auto\-insert: Op Ar n
Simply causes the character to appear as literal input.
Most ordinary characters are bound to this.
.It Xo backward\-char:
.Op Ar n
.No \*(haB , \*(haXD , ANSI-CurLeft , PC-CurLeft
.Xc
Moves the cursor backward
.Ar n
characters.
.It Xo backward\-word:
.Op Ar n
.No \*(ha[b , ANSI-Ctrl-CurLeft , ANSI-Alt-CurLeft
.Xc
Moves the cursor backward to the beginning of the word; words consist of
alphanumerics, underscore
.Pq Ql _
and dollar sign
.Pq Ql $
characters.
.It beginning\-of\-history: \*(ha[\*(Lt
Moves to the beginning of the history.
.It beginning\-of\-line: \*(haA, ANSI-Home, PC-Home
Moves the cursor to the beginning of the edited input line.
.It Xo capitalise\-word:
.Op Ar n
.No \*(ha[C , \*(ha[c
.Xc
Uppercase the first ASCII character in the next
.Ar n
words, leaving the cursor past the end of the last word.
.It clear\-screen: \*(ha[\*(haL
Prints a compile-time configurable sequence to clear the screen and home
the cursor, redraws the last line of the prompt string and the currently
edited input line.
The default sequence works for almost all standard terminals.
.It comment: \*(ha[#
If the current line does not begin with a comment character, one is added at
the beginning of the line and the line is entered (as if return had been
pressed); otherwise, the existing comment characters are removed and the cursor
is placed at the beginning of the line.
.It complete: \*(ha[\*(ha[
Automatically completes as much as is unique of the command name or the file
name containing the cursor.
If the entire remaining command or file name is
unique, a space is printed after its completion, unless it is a directory name
in which case
.Ql /
is appended.
If there is no command or file name with the current partial word
as its prefix, a bell character is output (usually causing a beep to be
sounded).
.It complete\-command: \*(haX\*(ha[
Automatically completes as much as is unique of the command name having the
partial word up to the cursor as its prefix, as in the
.Ic complete
command above.
.It complete\-file: \*(ha[\*(haX
Automatically completes as much as is unique of the file name having the
partial word up to the cursor as its prefix, as in the
.Ic complete
command described above.
.It complete\-list: \*(haI, \*(ha[=
Complete as much as is possible of the current word
and list the possible completions for it.
If only one completion is possible,
match as in the
.Ic complete
command above.
Note that \*(haI is usually generated by the TAB (tabulator) key.
.It Xo delete\-char\-backward:
.Op Ar n
.No ERASE Pq \*(haH ,
.No \*(ha? , \*(haH
.Xc
Deletes
.Ar n
characters before the cursor.
.It Xo delete\-char\-forward:
.Op Ar n
.No ANSI-Del , PC-Del
.Xc
Deletes
.Ar n
characters after the cursor.
.It Xo delete\-word\-backward:
.Op Ar n
.No Pfx1+ERASE Pq \*(ha[\*(haH ,
.No WERASE Pq \*(haW ,
.No \*(ha[\*(ha? , \*(ha[\*(haH , \*(ha[h
.Xc
Deletes
.Ar n
words before the cursor.
.It Xo delete\-word\-forward:
.Op Ar n
.No \*(ha[d
.Xc
Deletes characters after the cursor up to the end of
.Ar n
words.
.It Xo down\-history:
.Op Ar n
.No \*(haN , \*(haXB , ANSI-CurDown , PC-CurDown
.Xc
Scrolls the history buffer forward
.Ar n
lines (later).
Each input line originally starts just after the last entry
in the history buffer, so
.Ic down\-history
is not useful until either
.Ic search\-history ,
.Ic search\-history\-up
or
.Ic up\-history
has been performed.
.It Xo downcase\-word:
.Op Ar n
.No \*(ha[L , \*(ha[l
.Xc
Lowercases the next
.Ar n
words.
.It Xo edit\-line:
.Op Ar n
.No \*(haXe
.Xc
Edit line
.Ar n
or the current line, if not specified, interactively.
The actual command executed is
.Ic fc \-e ${VISUAL:\-${EDITOR:\-vi}} Ar n .
.It end\-of\-history: \*(ha[\*(Gt
Moves to the end of the history.
.It end\-of\-line: \*(haE, ANSI-End, PC-End
Moves the cursor to the end of the input line.
.It eot: \*(ha_
Acts as an end-of-file; this is useful because edit-mode input disables
normal terminal input canonicalisation.
.It Xo eot\-or\-delete:
.Op Ar n
.No EOF Pq \*(haD
.Xc
If alone on a line, same as
.Ic eot ,
otherwise,
.Ic delete\-char\-forward .
.It error: (not bound)
Error (ring the bell).
.It evaluate\-region: \*(ha[\*(haE
Evaluates the text between the mark and the cursor position
.Pq the entire line if no mark is set
as function substitution (if it cannot be parsed, the editing state is
unchanged and the bell is rung to signal an error); $? is updated accordingly.
.It exchange\-point\-and\-mark: \*(haX\*(haX
Places the cursor where the mark is and sets the mark to where the cursor was.
.It expand\-file: \*(ha[*
Appends a
.Ql *
to the current word and replaces the word with the result of performing file
globbing on the word.
If no files match the pattern, the bell is rung.
.It Xo forward\-char:
.Op Ar n
.No \*(haF , \*(haXC , ANSI-CurRight , PC-CurRight
.Xc
Moves the cursor forward
.Ar n
characters.
.It Xo forward\-word:
.Op Ar n
.No \*(ha[f , ANSI-Ctrl-CurRight , ANSI-Alt-CurRight
.Xc
Moves the cursor forward to the end of the
.Ar n Ns th
word.
.It Xo goto\-history:
.Op Ar n
.No \*(ha[g
.Xc
Goes to history number
.Ar n .
.It Xo kill\-line:
.No KILL Pq \*(haU
.Xc
Deletes the entire input line.
.It kill\-region: \*(haW
Deletes the input between the cursor and the mark.
.It Xo kill\-to\-eol:
.Op Ar n
.No \*(haK
.Xc
Deletes the input from the cursor to the end of the line if
.Ar n
is not specified; otherwise deletes characters between the cursor and column
.Ar n .
.It list: \*(ha[?
Prints a sorted, columnated list of command names or file names (if any) that
can complete the partial word containing the cursor.
Directory names have
.Ql /
appended to them.
.It list\-command: \*(haX?
Prints a sorted, columnated list of command names (if any) that can complete
the partial word containing the cursor.
.It list\-file: \*(haX\*(haY
Prints a sorted, columnated list of file names (if any) that can complete the
partial word containing the cursor.
File type indicators are appended as described under
.Ic list
above.
.It newline: \*(haJ , \*(haM
Causes the current input line to be processed by the shell.
The current cursor position may be anywhere on the line.
.It newline\-and\-next: \*(haO
Causes the current input line to be processed by the shell, and the next line
from history becomes the current line.
This is only useful after an
.Ic up\-history ,
.Ic search\-history
or
.Ic search\-history\-up .
.It Xo no\-op:
.No QUIT Pq \*(ha\e
.Xc
This does nothing.
.It prefix\-1: \*(ha[
Introduces a 2-character command sequence.
.It prefix\-2: \*(haX , \*(ha[[ , \*(ha[O
Introduces a multi-character command sequence.
.It Xo prev\-hist\-word:
.Op Ar n
.No \*(ha[. , \*(ha[_
.Xc
The last word or, if given, the
.Ar n Ns th
word (zero-based) of the previous (on repeated execution, second-last,
third-last, etc.) command is inserted at the cursor.
Use of this editing command trashes the mark.
.It quote: \*(ha\*(ha , \*(haV
The following character is taken literally rather than as an editing command.
.It redraw: \*(haL
Reprints the last line of the prompt string and the current input line
on a new line.
.It Xo search\-character\-backward:
.Op Ar n
.No \*(ha[\*(ha]
.Xc
Search backward in the current line for the
.Ar n Ns th
occurrence of the next character typed.
.It Xo search\-character\-forward:
.Op Ar n
.No \*(ha]
.Xc
Search forward in the current line for the
.Ar n Ns th
occurrence of the next character typed.
.It search\-history: \*(haR
Enter incremental search mode.
The internal history list is searched
backwards for commands matching the input.
An initial
.Ql \*(ha
in the search string anchors the search.
The escape key will leave search mode.
Other commands, including sequences of escape as
.Ic prefix\-1
followed by a
.Ic prefix\-1
or
.Ic prefix\-2
key will be executed after leaving search mode.
The
.Ic abort Pq \*(haG
command will restore the input line before search started.
Successive
.Ic search\-history
commands continue searching backward to the next previous occurrence of the
pattern.
The history buffer retains only a finite number of lines; the oldest
are discarded as necessary.
.It search\-history\-up: ANSI-PgUp, PC-PgUp
Search backwards through the history buffer for commands whose beginning match
the portion of the input line before the cursor.
When used on an empty line, this has the same effect as
.Ic up\-history .
.It search\-history\-down: ANSI-PgDn, PC-PgDn
Search forwards through the history buffer for commands whose beginning match
the portion of the input line before the cursor.
When used on an empty line, this has the same effect as
.Ic down\-history .
This is only useful after an
.Ic up\-history ,
.Ic search\-history
or
.Ic search\-history\-up .
.It set\-mark\-command: \*(ha[ Ns Aq space
Set the mark at the cursor position.
.It transpose\-chars: \*(haT
If at the end of line or, if the
.Ic gmacs
option is set, this exchanges the two previous characters; otherwise, it
exchanges the previous and current characters and moves the cursor one
character to the right.
.It Xo up\-history:
.Op Ar n
.No \*(haP , \*(haXA , ANSI-CurUp , PC-CurUp
.Xc
Scrolls the history buffer backward
.Ar n
lines (earlier).
.It Xo upcase\-word:
.Op Ar n
.No \*(ha[U , \*(ha[u
.Xc
Uppercase the next
.Ar n
words.
.It version: \*(ha[\*(haV
Display the version of
.Nm mksh .
The current edit buffer is restored as soon as a key is pressed.
The restoring keypress is processed, unless it is a space.
.It yank: \*(haY
Inserts the most recently killed text string at the current cursor position.
.It yank\-pop: \*(ha[y
Immediately after a
.Ic yank ,
replaces the inserted text string with the next previously killed text string.
.El
.Pp
The tab completion escapes characters the same way as the following code:
.Bd -literal
print \-nr \-\- "${x@@/[\e"\-\e$\e&\-*:\-?[\e\e\e\`{\-\e}${IFS\-$\*(aq \et\en\*(aq}]/\e\e$KSH_MATCH}"
.Ed
.Ss Vi editing mode
.Em Note:
The vi command-line editing mode has not yet been brought up to the
same quality and feature set as the emacs mode.
It is 8-bit clean but specifically does not support UTF-8 or MBCS.
.Pp
The vi command-line editor in
.Nm
has basically the same commands as the
.Xr vi 1
editor with the following exceptions:
.Bl -bullet
.It
You start out in insert mode.
.It
There are file name and command completion commands:
=, \e, *, \*(haX, \*(haE, \*(haF and, optionally,
.Aq tab
and
.Aq esc .
.It
The
.Ic _
command is different (in
.Nm mksh ,
it is the last argument command; in
.Xr vi 1
it goes to the start of the current line).
.It
The
.Ic /
and
.Ic G
commands move in the opposite direction to the
.Ic j
command.
.It
Commands which don't make sense in a single line editor are not available
(e.g. screen movement commands and
.Xr ex 1 Ns -style
colon
.Pq Ic \&:
commands).
.El
.Pp
Like
.Xr vi 1 ,
there are two modes:
.Dq insert
mode and
.Dq command
mode.
In insert mode, most characters are simply put in the buffer at the
current cursor position as they are typed; however, some characters are
treated specially.
In particular, the following characters are taken from current
.Xr tty 4
settings
(see
.Xr stty 1 )
and have their usual meaning (normal values are in parentheses): kill (\*(haU),
erase (\*(ha?), werase (\*(haW), eof (\*(haD), intr (\*(haC) and quit (\*(ha\e).
In addition to
the above, the following characters are also treated specially in insert mode:
.Bl -tag -width XJXXXXM
.It \*(haE
Command and file name enumeration (see below).
.It \*(haF
Command and file name completion (see below).
If used twice in a row, the
list of possible completions is displayed; if used a third time, the completion
is undone.
.It \*(haH
Erases previous character.
.It \*(haJ \*(Ba \*(haM
End of line.
The current line is read, parsed and executed by the shell.
.It \*(haV
Literal next.
The next character typed is not treated specially (can be used
to insert the characters being described here).
.It \*(haX
Command and file name expansion (see below).
.It Aq esc
Puts the editor in command mode (see below).
.It Aq tab
Optional file name and command completion (see
.Ic \*(haF
above), enabled with
.Ic set Fl o Ic vi\-tabcomplete .
.El
.Pp
In command mode, each character is interpreted as a command.
Characters that
don't correspond to commands, are illegal combinations of commands, or are
commands that can't be carried out, all cause beeps.
In the following command descriptions, an
.Op Ar n
indicates the command may be prefixed by a number (e.g.\&
.Ic 10l
moves right 10 characters); if no number prefix is used,
.Ar n
is assumed to be 1 unless otherwise specified.
The term
.Dq current position
refers to the position between the cursor and the character preceding the
cursor.
A
.Dq word
is a sequence of letters, digits and underscore characters or a sequence of
non-letter, non-digit, non-underscore and non-whitespace characters (e.g.\&
.Dq Li ab2*&\*(ha
contains two words) and a
.Dq big-word
is a sequence of non-whitespace characters.
.Pp
Special
.Nm
vi commands:
.Pp
The following commands are not in, or are different from, the normal vi file
editor:
.Bl -tag -width 10n
.It Xo
.Oo Ar n Oc Ns _
.Xc
Insert a space followed by the
.Ar n Ns th
big-word from the last command in the history at the current position and enter
insert mode; if
.Ar n
is not specified, the last word is inserted.
.It #
Insert the comment character
.Pq Ql #
at the start of the current line and return the line to the shell (equivalent
to
.Ic I#\*(haJ ) .
.It Xo
.Oo Ar n Oc Ns g
.Xc
Like
.Ic G ,
except if
.Ar n
is not specified, it goes to the most recent remembered line.
.It Xo
.Oo Ar n Oc Ns v
.Xc
Edit line
.Ar n
using the
.Xr vi 1
editor; if
.Ar n
is not specified, the current line is edited.
The actual command executed is
.Ic fc \-e ${VISUAL:\-${EDITOR:\-vi}} Ar n .
.It * and \*(haX
Command or file name expansion is applied to the current big-word (with an
appended
.Ql *
if the word contains no file globbing characters) \*(en the big-word is replaced
with the resulting words.
If the current big-word is the first on the line
or follows one of the characters
.Ql \&; ,
.Ql \*(Ba ,
.Ql & ,
.Ql \&(
or
.Ql \&)
and does not contain a slash
.Pq Ql / ,
then command expansion is done; otherwise file name expansion is done.
Command expansion will match the big-word against all aliases, functions and
built-in commands as well as any executable files found by searching the
directories in the
.Ev PATH
parameter.
File name expansion matches the big-word against the files in the
current directory.
After expansion, the cursor is placed just past the last
word and the editor is in insert mode.
.It Xo
.Oo Ar n Oc Ns \e ,
.Oo Ar n Oc Ns \*(haF ,
.Oo Ar n Oc Ns Aq tab ,
.No and
.Oo Ar n Oc Ns Aq esc
.Xc
Command/file name completion.
Replace the current big-word with the
longest unique match obtained after performing command and file name expansion.
.Aq tab
is only recognised if the
.Ic vi\-tabcomplete
option is set, while
.Aq esc
is only recognised if the
.Ic vi\-esccomplete
option is set (see
.Ic set Fl o ) .
If
.Ar n
is specified, the
.Ar n Ns th
possible completion is selected (as reported by the command/file name
enumeration command).
.It = and \*(haE
Command/file name enumeration.
List all the commands or files that match the current big-word.
.It \*(haV
Display the version of
.Nm mksh .
The current edit buffer is restored as soon as a key is pressed.
The restoring keypress is ignored.
.It @@ Ns Ar c
Macro expansion.
Execute the commands found in the alias
.Ar c .
.El
.Pp
Intra-line movement commands:
.Bl -tag -width Ds
.It Xo
.Oo Ar n Oc Ns h and
.Oo Ar n Oc Ns \*(haH
.Xc
Move left
.Ar n
characters.
.It Xo
.Oo Ar n Oc Ns l and
.Oo Ar n Oc Ns Aq space
.Xc
Move right
.Ar n
characters.
.It 0
Move to column 0.
.It \*(ha
Move to the first non-whitespace character.
.It Xo
.Oo Ar n Oc Ns \*(Ba
.Xc
Move to column
.Ar n .
.It $
Move to the last character.
.It Xo
.Oo Ar n Oc Ns b
.Xc
Move back
.Ar n
words.
.It Xo
.Oo Ar n Oc Ns B
.Xc
Move back
.Ar n
big-words.
.It Xo
.Oo Ar n Oc Ns e
.Xc
Move forward to the end of the word,
.Ar n
times.
.It Xo
.Oo Ar n Oc Ns E
.Xc
Move forward to the end of the big-word,
.Ar n
times.
.It Xo
.Oo Ar n Oc Ns w
.Xc
Move forward
.Ar n
words.
.It Xo
.Oo Ar n Oc Ns W
.Xc
Move forward
.Ar n
big-words.
.It %
Find match.
The editor looks forward for the nearest parenthesis, bracket or
brace and then moves the cursor to the matching parenthesis, bracket or brace.
.It Xo
.Oo Ar n Oc Ns f Ns Ar c
.Xc
Move forward to the
.Ar n Ns th
occurrence of the character
.Ar c .
.It Xo
.Oo Ar n Oc Ns F Ns Ar c
.Xc
Move backward to the
.Ar n Ns th
occurrence of the character
.Ar c .
.It Xo
.Oo Ar n Oc Ns t Ns Ar c
.Xc
Move forward to just before the
.Ar n Ns th
occurrence of the character
.Ar c .
.It Xo
.Oo Ar n Oc Ns T Ns Ar c
.Xc
Move backward to just before the
.Ar n Ns th
occurrence of the character
.Ar c .
.It Xo
.Oo Ar n Oc Ns \&;
.Xc
Repeats the last
.Ic f , F , t
or
.Ic T
command.
.It Xo
.Oo Ar n Oc Ns \&,
.Xc
Repeats the last
.Ic f , F , t
or
.Ic T
command, but moves in the opposite direction.
.El
.Pp
Inter-line movement commands:
.Bl -tag -width Ds
.It Xo
.Oo Ar n Oc Ns j ,
.Oo Ar n Oc Ns + ,
.No and
.Oo Ar n Oc Ns \*(haN
.Xc
Move to the
.Ar n Ns th
next line in the history.
.It Xo
.Oo Ar n Oc Ns k ,
.Oo Ar n Oc Ns \- ,
.No and
.Oo Ar n Oc Ns \*(haP
.Xc
Move to the
.Ar n Ns th
previous line in the history.
.It Xo
.Oo Ar n Oc Ns G
.Xc
Move to line
.Ar n
in the history; if
.Ar n
is not specified, the number of the first remembered line is used.
.It Xo
.Oo Ar n Oc Ns g
.Xc
Like
.Ic G ,
except if
.Ar n
is not specified, it goes to the most recent remembered line.
.It Xo
.Oo Ar n Oc Ns / Ns Ar string
.Xc
Search backward through the history for the
.Ar n Ns th
line containing
.Ar string ;
if
.Ar string
starts with
.Ql \*(ha ,
the remainder of the string must appear at the start of the history line for
it to match.
.It Xo
.Oo Ar n Oc Ns \&? Ns Ar string
.Xc
Same as
.Ic / ,
except it searches forward through the history.
.It Xo
.Oo Ar n Oc Ns n
.Xc
Search for the
.Ar n Ns th
occurrence of the last search string;
the direction of the search is the same as the last search.
.It Xo
.Oo Ar n Oc Ns N
.Xc
Search for the
.Ar n Ns th
occurrence of the last search string;
the direction of the search is the opposite of the last search.
.It Ar ANSI-CurUp , PC-PgUp
Take the characters from the beginning of the line to the current
cursor position as search string and do a backwards history search
for lines beginning with this string; keep the cursor position.
This works only in insert mode and keeps it enabled.
.El
.Pp
Edit commands
.Bl -tag -width Ds
.It Xo
.Oo Ar n Oc Ns a
.Xc
Append text
.Ar n
times; goes into insert mode just after the current position.
The append is
only replicated if command mode is re-entered i.e.\&
.Aq esc
is used.
.It Xo
.Oo Ar n Oc Ns A
.Xc
Same as
.Ic a ,
except it appends at the end of the line.
.It Xo
.Oo Ar n Oc Ns i
.Xc
Insert text
.Ar n
times; goes into insert mode at the current position.
The insertion is only
replicated if command mode is re-entered i.e.\&
.Aq esc
is used.
.It Xo
.Oo Ar n Oc Ns I
.Xc
Same as
.Ic i ,
except the insertion is done just before the first non-blank character.
.It Xo
.Oo Ar n Oc Ns s
.Xc
Substitute the next
.Ar n
characters (i.e. delete the characters and go into insert mode).
.It S
Substitute whole line.
All characters from the first non-blank character to the
end of the line are deleted and insert mode is entered.
.It Xo
.Oo Ar n Oc Ns c Ns Ar move-cmd
.Xc
Change from the current position to the position resulting from
.Ar n move-cmd Ns s
(i.e. delete the indicated region and go into insert mode); if
.Ar move-cmd
is
.Ic c ,
the line starting from the first non-blank character is changed.
.It C
Change from the current position to the end of the line (i.e. delete to the
end of the line and go into insert mode).
.It Xo
.Oo Ar n Oc Ns x
.Xc
Delete the next
.Ar n
characters.
.It Xo
.Oo Ar n Oc Ns X
.Xc
Delete the previous
.Ar n
characters.
.It D
Delete to the end of the line.
.It Xo
.Oo Ar n Oc Ns d Ns Ar move-cmd
.Xc
Delete from the current position to the position resulting from
.Ar n move-cmd Ns s ;
.Ar move-cmd
is a movement command (see above) or
.Ic d ,
in which case the current line is deleted.
.It Xo
.Oo Ar n Oc Ns r Ns Ar c
.Xc
Replace the next
.Ar n
characters with the character
.Ar c .
.It Xo
.Oo Ar n Oc Ns R
.Xc
Replace.
Enter insert mode but overwrite existing characters instead of
inserting before existing characters.
The replacement is repeated
.Ar n
times.
.It Xo
.Oo Ar n Oc Ns \*(TI
.Xc
Change the case of the next
.Ar n
characters.
.It Xo
.Oo Ar n Oc Ns y Ns Ar move-cmd
.Xc
Yank from the current position to the position resulting from
.Ar n move-cmd Ns s
into the yank buffer; if
.Ar move-cmd
is
.Ic y ,
the whole line is yanked.
.It Y
Yank from the current position to the end of the line.
.It Xo
.Oo Ar n Oc Ns p
.Xc
Paste the contents of the yank buffer just after the current position,
.Ar n
times.
.It Xo
.Oo Ar n Oc Ns P
.Xc
Same as
.Ic p ,
except the buffer is pasted at the current position.
.El
.Pp
Miscellaneous vi commands
.Bl -tag -width Ds
.It \*(haJ and \*(haM
The current line is read, parsed and executed by the shell.
.It \*(haL and \*(haR
Redraw the current line.
.It Xo
.Oo Ar n Oc Ns \&.
.Xc
Redo the last edit command
.Ar n
times.
.It u
Undo the last edit command.
.It U
Undo all changes that have been made to the current line.
.It PC Home, End, Del and cursor keys
They move as expected, both in insert and command mode.
.It Ar intr No and Ar quit
The interrupt and quit terminal characters cause the current line to be
removed to the history and a new prompt to be printed.
.El
.Sh FILES
.Bl -tag -width XetcXsuid_profile -compact
.It Pa \*(TI/.mkshrc
User mkshrc profile (non-privileged interactive shells); see
.Sx Startup files.
The location can be changed at compile time (e.g. for embedded systems);
AOSP Android builds use
.Pa /system/etc/mkshrc .
.It Pa \*(TI/.profile
User profile (non-privileged login shells); see
.Sx Startup files
near the top of this manual.
.It Pa /etc/profile
System profile (login shells); see
.Sx Startup files.
.It Pa /etc/shells
Shell database.
.It Pa /etc/suid_profile
Privileged shells' profile (sugid); see
.Sx Startup files.
.El
.Pp
Note: On Android,
.Pa /system/etc/
contains the system and suid profile.
.Sh SEE ALSO
.Xr awk 1 ,
.Xr cat 1 ,
.Xr ed 1 ,
.Xr getopt 1 ,
.Xr lksh 1 ,
.Xr sed 1 ,
.Xr sh 1 ,
.Xr stty 1 ,
.Xr dup 2 ,
.Xr execve 2 ,
.Xr getgid 2 ,
.Xr getuid 2 ,
.Xr mknod 2 ,
.Xr mkfifo 2 ,
.Xr open 2 ,
.Xr pipe 2 ,
.Xr rename 2 ,
.Xr wait 2 ,
.Xr getopt 3 ,
.Xr nl_langinfo 3 ,
.Xr setlocale 3 ,
.Xr signal 3 ,
.Xr system 3 ,
.Xr tty 4 ,
.Xr shells 5 ,
.Xr environ 7 ,
.Xr script 7 ,
.Xr utf\-8 7 ,
.Xr mknod 8
.Pp
The FAQ at
.Pa http://www.mirbsd.org/mksh\-faq.htm
or in the
.Pa mksh.faq
file.
.Pp
.Pa http://www.mirbsd.org/ksh\-chan.htm
.Rs
.%A Morris Bolsky
.%B "The KornShell Command and Programming Language"
.%D 1989
.%I "Prentice Hall PTR"
.%P "xvi\ +\ 356 pages"
.%O "ISBN 978\-0\-13\-516972\-8 (0\-13\-516972\-0)"
.Re
.Rs
.%A Morris I. Bolsky
.%A David G. Korn
.%B "The New KornShell Command and Programming Language (2nd Edition)"
.%D 1995
.%I "Prentice Hall PTR"
.%P "xvi\ +\ 400 pages"
.%O "ISBN 978\-0\-13\-182700\-4 (0\-13\-182700\-6)"
.Re
.Rs
.%A Stephen G. Kochan
.%A Patrick H. Wood
.%B "\\*(tNUNIX\\*(sP Shell Programming"
.%V "3rd Edition"
.%D 2003
.%I "Sams"
.%P "xiii\ +\ 437 pages"
.%O "ISBN 978\-0\-672\-32490\-1 (0\-672\-32490\-3)"
.Re
.Rs
.%A "IEEE Inc."
.%T "\\*(tNIEEE\\*(sP Standard for Information Technology \*(en Portable Operating System Interface (POSIX)"
.%V "Part 2: Shell and Utilities"
.%D 1993
.%I "IEEE Press"
.%P "xvii\ +\ 1195 pages"
.%O "ISBN 978\-1\-55937\-255\-8 (1\-55937\-255\-9)"
.Re
.Rs
.%A Bill Rosenblatt
.%B "Learning the Korn Shell"
.%D 1993
.%I "O'Reilly"
.%P "360 pages"
.%O "ISBN 978\-1\-56592\-054\-5 (1\-56592\-054\-6)"
.Re
.Rs
.%A Bill Rosenblatt
.%A Arnold Robbins
.%B "Learning the Korn Shell, Second Edition"
.%D 2002
.%I "O'Reilly"
.%P "432 pages"
.%O "ISBN 978\-0\-596\-00195\-7 (0\-596\-00195\-9)"
.Re
.Rs
.%A Barry Rosenberg
.%B "KornShell Programming Tutorial"
.%D 1991
.%I "Addison-Wesley Professional"
.%P "xxi\ +\ 324 pages"
.%O "ISBN 978\-0\-201\-56324\-5 (0\-201\-56324\-X)"
.Re
.Sh AUTHORS
.An -nosplit
.Nm "The MirBSD Korn Shell"
is developed by
.An mirabilos Aq Mt m@@mirbsd.org
as part of The MirOS Project.
This shell is based on the public domain 7th edition Bourne shell clone by
.An Charles Forsyth ,
who kindly agreed to, in countries where the Public Domain status of the work
may not be valid, grant a copyright licence to the general public to deal in
the work without restriction and permission to sublicence derivatives under
the terms of any (OSI approved) Open Source licence,
and parts of the BRL shell by
.An Doug A. Gwyn ,
.An Doug Kingston ,
.An Ron Natalie ,
.An Arnold Robbins ,
.An Lou Salkind
and others.
The first release of
.Nm pdksh
was created by
.An Eric Gisin ,
and it was subsequently maintained by
.An John R. MacMillan ,
.An Simon J. Gerraty
and
.An Michael Rendell .
The effort of several projects, such as Debian and OpenBSD, and other
contributors including our users, to improve the shell is appreciated.
See the documentation, website and source code (CVS) for details.
.Pp
.Nm mksh\-os2
is developed by
.An KO Myung-Hun Aq Mt komh@@chollian.net .
.Pp
.Nm mksh\-w32
is developed by
.An Michael Langguth Aq Mt lan@@scalaris.com .
.Pp
.Nm mksh Ns / Ns Tn z/OS
is contributed by
.An Daniel Richard G. Aq Mt skunk@@iSKUNK.ORG .
.Pp
The BSD daemon is Copyright \(co Marshall Kirk McKusick.
The complete legalese is at:
.Pa http://www.mirbsd.org/TaC\-mksh.txt
.\"
.\" This boils down to: feel free to use mksh.ico as application icon
.\" or shortcut for mksh or mksh/Win32 or OS/2; distro patches are ok
.\" (but we request they amend $KSH_VERSION when modifying mksh).
.\" Authors are Marshall Kirk McKusick (UCB), Rick Collette (ekkoBSD),
.\" mirabilos, Benny Siegert (MirBSD), Michael Langguth (mksh/Win32),
.\" KO Myung-Hun (mksh for OS/2).
.\"
.\" As far as MirBSD is concerned, the files themselves are free
.\" to modification and distribution under BSD/MirOS Licence, the
.\" restriction on use stems only from trademark law's requirement
.\" to protect it or lose it, which McKusick almost did.
.\"
.Sh CAVEATS
.Nm mksh
provides a consistent, clear interface normally.
This may deviate from POSIX in historic or opinionated places.
.Ic set Fl o Ic posix
(see
.Sx POSIX mode
for details)
will make the shell more conformant, but mind the FAQ (see
.Sx SEE ALSO ) ,
especially regarding locales.
.Nm mksh
.Pq but not Nm lksh
provides a consistent 32-bit integer arithmetic implementation, both
signed and unsigned, with sign of the result of a remainder operation
and wraparound defined, even (defying POSIX) on 36-bit and 64-bit systems.
.Sh BUGS
Suspending (using \*(haZ) pipelines like the one below will only suspend
the currently running part of the pipeline; in this example,
.Dq Li fubar
is immediately printed on suspension (but not later after an
.Ic fg ) .
.Bd -literal -offset indent
$ /bin/sleep 666 && echo fubar
.Ed
.Pp
The truncation process involved when changing
.Ev HISTFILE
does not free old history entries (leaks memory) and leaks
old entries into the new history if their line numbers are
not overwritten by same-number entries from the persistent
history file; truncating the on-disc file to
.Ev HISTSIZE
lines has always been broken and prone to history file corruption
when multiple shells are accessing the file; the rollover process
for the in-memory portion of the history is slow, should use
.Xr memmove 3 .
.Pp
This document attempts to describe
.Nm mksh\ R58
and up,
.\" with vendor patches from insert-your-name-here,
compiled without any options impacting functionality, such as
.Dv MKSH_SMALL ,
when not called as
.Pa /bin/sh
which, on some systems only, enables
.Ic set Fl o Ic posix
or
.Ic set Fl o Ic sh
automatically (whose behaviour differs across targets),
for an operating environment supporting all of its advanced needs.
.Pp
Please report bugs in
.Nm
to the public development mailing list at
.Aq Mt miros\-mksh@@mirbsd.org
(please note the EU-DSGVO/GDPR notice on
.Pa http://www.mirbsd.org/rss.htm#lists
and in the SMTP banner!) or in the
.Li \&#\&!/bin/mksh
.Pq or Li \&#ksh
IRC channel at
.Pa irc.freenode.net
.Pq Port 6697 SSL, 6667 unencrypted ,
or at:
.Pa https://launchpad.net/mksh
@


1.472
log
@improve = documentation and clearly mark == as deprecated (bash compat,
now also ksh93 compat; via IRC discussion by veedeeh/jvdh)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.469 2019/12/29 23:40:40 tg Exp $
d80 1
a80 1
.Dd $Mdocdate: December 29 2019 $
d5960 2
a5961 1
The vi command-line editing mode is orphaned, yet still functional.
@


1.471
log
@handle POSIX-style functions like ksh-style functions and external utilities

cf. Debian #935115
@
text
@d6 1
a6 1
.\"		2018, 2019
d1960 1
a1960 1
Set by string comparisons (== and !=) in double-bracket test
d4610 1
d4612 3
a4614 1
Strings are equal.
d4621 3
@


1.470
log
@document += is more consistent, semantically, in mksh than elsewhere

LP#1857702
@
text
@a2980 3
Parameter assignments preceding function calls are not kept in the shell
environment (executing Bourne-style functions will keep assignments).
.It
d6736 1
a6736 1
.Nm mksh\ R57
@


1.469
log
@merge the mksh FAQ into one quill-moving place

(hts-.inc-format file in mksh source tree, linked into HTML, not installed)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.467 2019/12/11 20:11:14 tg Exp $
d80 1
a80 1
.Dd $Mdocdate: December 11 2019 $
d1442 2
a1443 1
is also recognised; the old and new values are immediately concatenated.
@


1.468
log
@empty out auxilliary groups vector when playing with privilegues
@
text
@d224 2
a225 1
Please see the FAQ at the end of this document.
d2967 1
a2967 1
loop FAQ below).
d6571 6
a6700 5
provides a consistent 32-bit integer arithmetic implementation, both
signed and unsigned, with sign of the result of a remainder operation
and wraparound defined, even (defying POSIX) on 36-bit and 64-bit systems.
.Pp
.Nm mksh
d6707 3
a6709 4
will cause the shell to behave more conformant.
.Pp
For the purpose of
.Tn POSIX ,
d6711 4
a6714 48
supports only the
.Dq C
locale.
.Nm mksh Ns 's
.Ic utf8\-mode
.Em must
be disabled in POSIX mode, and it
only supports the BMP (Basic Multilingual Plane) of UCS and maps
raw octets into the U+EF80..U+EFFF wide character range; compare
.Sx Arithmetic expressions .
The following
.Tn POSIX
.Nm sh Ns -compatible
code toggles the
.Ic utf8\-mode
option dependent on the current
.Tn POSIX
locale for mksh to allow using the UTF-8 mode, within the constraints
outlined above, in code portable across various shell implementations:
.Bd -literal -offset indent
case ${KSH_VERSION:\-} in
*MIRBSD\ KSH*\*(Ba*LEGACY\ KSH*)
	case ${LC_ALL:\-${LC_CTYPE:\-${LANG:\-}}} in
	*[Uu][Tt][Ff]8*\*(Ba*[Uu][Tt][Ff]\-8*) set \-U ;;
	*) set +U ;;
	esac ;;
esac
.Ed
In near future, (UTF-8) locale tracking will be implemented though.
.Pp
Using
.Ic set Fl o Ic pipefail
makes the following construct error out:
.Bd -literal -offset indent
set \-e
for x in 1 2; do
	false && echo $x
done \*(Ba cat
.Ed
This is because, while the
.Dq Li &&\&
ensures that the inner command's failure is not taken, it sets
the entire for..done loop's errorlevel, which is passed on by
.Fl o Ic pipefail .
Invert the inner command:
.Li true \*(Ba\*(Ba echo $x
.Pp
See also the FAQ below.
a6765 184
.Sh FREQUENTLY ASKED QUESTIONS
This FAQ attempts to document some of the questions users of
.Nm
or readers of this manual page may encounter.
.Ss I'm an Android user, so what's mksh?
.Nm mksh
is a
.Ux
shell / command interpreter, similar to
.Nm COMMAND.COM
or
.Nm CMD.EXE ,
which has been included with
.Tn Android Open Source Project
for a while now.
Basically, it's a program that runs in a terminal (console window),
takes user input and runs commands or scripts, which it can also
be asked to do by other programs, even in the background.
Any privilege pop-ups you might be encountering are thus not
.Nm mksh
issues but questions by some other program utilising it.
.Ss "I'm an OS/2 user, what do I need to know?"
Unlike the native command prompt, the current working directory is,
for security reasons common on Unix systems which the shell is designed for,
not in the search path at all; if you really need this, run the command
.Li PATH=.$PATHSEP$PATH
or add that to a suitable initialisation file.
.Pp
There are two different newline modes for mksh-os2: standard (Unix) mode,
in which only LF (0A hex) is supported as line separator, and "textmode",
which also accepts ASCII newlines (CR+LF), like most other tools on OS/2,
but creating an incompatibility with standard
.Nm .
If you compiled mksh from source, you will get the standard Unix mode unless
.Fl T
is added during compilation; you will most likely have gotten this shell
through komh's port on Hobbes, or from his OS/2 Factory on eComStation
Korea, which uses "textmode", though.
Most OS/2 users will want to use "textmode" unless they need absolute
compatibility with Unix
.Nm .
.Ss "How do I start mksh on a specific terminal?"
Normally:
.Dl mksh \-T/dev/tty2
.Pp
However, if you want for it to return (e.g. for an embedded
system rescue shell), use this on your real console device instead:
.Dl mksh \-T!/dev/ttyACM0
.Pp
.Nm
can also daemonise (send to the background):
.Dl mksh \-T\- \-c \*(aqexec cdio lock\*(aq
.Ss "POSIX says..."
Run the shell in POSIX mode (and possibly
.Nm lksh
instead of
.Nm mksh ) :
.Dl set \-o posix
.Ss "I forbid stat(2) in my SELinux policy, and some things do not work!"
Don't break Unix.
Read up on the GIGO principle.
Duh.
.Ss "My prompt from <some other shell> does not work!"
Contact us on the mailing list or on IRC, we'll convert it for you.
.Ss "Something is going wrong with my while...read loop"
Most likely, you've encountered the problem in which the shell runs
all parts of a pipeline as subshell.
The inner loop will be executed in a subshell and variable changes
cannot be propagated if run in a pipeline:
.Bd -literal -offset indent
bar \*(Ba baz \*(Ba while read foo; do ...; done
.Ed
.Pp
Note that
.Ic exit
in the inner loop will only exit the subshell and not the original shell.
Likewise, if the code is inside a function,
.Ic return
in the inner loop will only exit the subshell and won't terminate the function.
.Pp
Use co-processes instead:
.Bd -literal -offset indent
bar \*(Ba baz \*(Ba&
while read \-p foo; do ...; done
exec 3\*(Gt&p; exec 3\*(Gt&\-
.Ed
.Pp
If
.Ic read
is run in a loop such as
.Ic while read foo; do ...; done
then leading whitespace will be removed (IFS) and backslashes processed.
You might want to use
.Ic while IFS= read \-r foo; do ...; done
for pristine I/O.
Similarly, when using the
.Fl a
option, use of the
.Fl r
option might be prudent
.Pq Dq Li read \-raN\-1 arr \*(Ltfile ;
the same applies for NUL-terminated lines:
.Bd -literal -offset indent
find . \-type f \-print0 \*(Ba& \e
    while IFS= read \-d \*(aq\*(aq \-pr filename; do
	print \-r \-\- "found \*(Lt${filename#./}\*(Gt"
done
.Ed
.Pp
.Ss "What differences in function-local scopes are there?"
.Nm
has a different scope model from
.At
.Nm ksh ,
which leads to subtle differences in semantics for identical builtins.
This can cause issues with a
.Ic nameref
to suddenly point to a local variable by accident.
.Pp
.Tn GNU
.Nm bash
allows unsetting local variables; in
.Nm ,
doing so in a function allows back access to the global variable
(actually the one in the next scope up) with the same name.
The following code, when run before the function definitions, changes
the behaviour of
.Ic unset
to behave like other shells (the alias can be removed after the definitions):
.Bd -literal -offset indent
case ${KSH_VERSION:\-} in
*MIRBSD\ KSH*\*(Ba*LEGACY\ KSH*)
	function unset_compat {
		\e\ebuiltin typeset unset_compat_x

		for unset_compat_x in "$@@"; do
			eval "\e\e\e\ebuiltin unset $unset_compat_x[*]"
		done
	}
	\e\ebuiltin alias unset=unset_compat
	;;
esac
.Ed
.Pp
When a local variable is created (e.g. using
.Ic local ,
.Ic typeset ,
.Ic integer ,
.Ic \e\ebuiltin typeset )
it does not, like in other shells, inherit the value from the global
(next scope up) variable with the same name; it is rather created
without any value (unset but defined).
.Ss "I get an error in this regex comparison"
Use extglobs instead of regexes:
.Dl "[[ foo =~ (foo\*(Babar).*baz ]]	# becomes"
.Dl "[[ foo = *@@(foo\*(Babar)*baz* ]]	# instead"
.Ss "Are there any extensions to avoid?"
.Tn GNU
.Nm bash
supports
.Dq Li &\*(Gt
.Pq and Dq Li \*(Ba&
to redirect both stdout and stderr in one go, but this breaks POSIX
and Korn Shell syntax; use POSIX redirections instead:
.Dl "foo \*(Ba& bar \*(Ba& baz &\*(Gtlog			     # GNU bash"
.Dl "foo 2\*(Gt&1 \*(Ba bar 2\*(Gt&1 \*(Ba baz \*(Gtlog 2\*(Gt&1	# POSIX"
.Ss "\*(haL (Ctrl-L) does not clear the screen"
Use \*(ha[\*(haL (Escape+Ctrl-L) or rebind it:
.Dl bind \*(aq\*(haL=clear-screen\*(aq
.Ss "\*(haU (Ctrl-U) clears the entire line"
If it should only delete the line up to the cursor, use:
.Dl bind \-m \*(haU=\*(aq\*(ha[0\*(haK\*(aq
.Ss "Cursor Up behaves differently from zsh"
Some shells make Cursor Up search in the history only for
commands starting with what was already entered.
.Nm
separates the shortcuts: Cursor Up goes up one command
and PgUp searches the history as described above.
.Ss "My question is not answered here!"
Check
.Pa http://www.mirbsd.org/mksh\-faq.htm
which contains a collection of frequently asked questions about
.Nm
in general, for packagers, etc. while these above are in user scope.
@


1.467
log
@implement run-time setting of privileged option to realise setugid fully

to avoid needing an extra tool in cases like Debian #946599

set +p drops privs fully and irrevocably of course
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.465 2019/04/24 20:56:29 tg Exp $
d80 1
a80 1
.Dd $Mdocdate: April 24 2019 $
d4200 1
@


1.466
log
@limit HISTSIZE to 65535 as long-announced
@
text
@d282 1
a282 1
its effective user ID (group ID) to its real user ID (group ID).
d1949 1
a1949 1
The effective group id of the shell.
d1951 1
a1951 1
The real group id of the shell.
d1953 1
a1953 1
The real user id of the shell.
d2204 1
a2204 1
The effective user id of the shell.
d4196 4
d6518 1
a6518 1
The location can be changed at compile time (for embedded systems);
d6531 1
a6531 1
Suid profile (privileged shells); see
@


1.465
log
@add two more ulimits; rlimits.opt patch and cursory descriptions are
From: Todd C. Miller <Todd.Miller@@sudo.ws>
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.462 2019/01/05 12:54:49 tg Exp $
d80 1
a80 1
.Dd $Mdocdate: January 5 2019 $
d1927 1
a1927 3
Do not set this value to insanely high values such as 1000000000 because
.Nm
can then not allocate enough memory for the history and will not start.
@


1.464
log
@lintian: hyphen-used-as-minus-sign

(why this is not found on post-jessie beats me, though…)
@
text
@d5008 1
a5008 1
.Op Fl aBCcdefHilMmnOPpqrSsTtVvw
d5081 11
d5103 5
d5135 3
@


1.463
log
@Mach’ halt Dein Unix nicht kaputt, basta! (LP#1817959)
@
text
@d6722 1
a6722 1
set -e
@


1.462
log
@document LP#1804504
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.460 2018/08/17 20:33:08 tg Exp $
d80 1
a80 1
.Dd $Mdocdate: August 17 2018 $
d6845 4
@


1.461
log
@update from contrib/samples/portmdoc,v 1.11
@
text
@d6 1
a6 1
.\"		2018
d80 1
a80 1
.Dd $Mdocdate: December 25 2018 $
d6718 17
@


1.460
log
@do not repeat 0m0.00s

via https://bugzilla.redhat.com/show_bug.cgi?id=1612173
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.458 2018/07/15 17:21:22 tg Exp $
d80 1
a80 1
.Dd $Mdocdate: July 15 2018 $
d88 1
d101 1
a101 1
.	ds str-Mx1 \*[Tn-font-size]\%MirOS\*[str-Mx]
d127 32
d165 1
a165 1
.		ie \\n(.$==0 \&MirOS\\*(aa
d171 1
a171 1
.			as b1 \&MirOS\ #\&\\*(A\\n(aP\\*(aa
d179 1
a179 1
.			as b1 \&MirOS\\*(aa
@


1.459
log
@same as in commitid 1005B6CF36E3932B560, plus assorted cleanup
@
text
@d4670 1
a4670 1
.Dl "0m0.00s real     0m0.00s user     0m0.00s system"
d4676 3
a4678 3
real     0.00
user     0.00
sys      0.00
d4703 2
a4704 2
0m0.00s 0m0.00s
0m0.00s 0m0.00s
@


1.458
log
@against better judgement, allow unsetting COLUMNS:
• GNU coreutils’ test suite insists on it, even despite it can run
  successfully without doing it (WTF‽)…
• we already unspecial, explicitly commented as “hands-off” it,
  when imported from the environment
• it was already changeable (though that didn’t unspecial it on the
  command line)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.452 2018/04/16 00:22:28 tg Exp $
d80 1
a80 1
.Dd $Mdocdate: April 16 2018 $
d1050 1
a1050 1
these escapes translate a Unicode codepoint to UTF-8.
d1086 1
a1086 1
these translate a Unicode codepoint to UTF-8.
d2655 2
a2656 1
transparent) ASCII or Unicode codepoints, depending on the shell's
d2669 1
a2669 1
In Unicode mode, raw octets are mapped into the range EF80..EFFF as in
d6662 1
a6662 1
only supports the Unicode BMP (Basic Multilingual Plane) and maps
d6683 1
a6683 1
In near future, (Unicode) locale tracking will be implemented though.
@


1.457
log
@add EU-DSGVO (GDPR) notice for the mailing list
@
text
@d1827 2
a1828 2
Always set, defaults to 80, unless the
value as reported by
d1830 1
a1830 1
is non-zero and sane enough (minimum is 12x3); similar for
d1999 1
a1999 1
Always set, defaults to 24.
d6708 1
a6708 1
.Nm mksh\ R56
@


1.456
log
@contrary to what I said in revision 1.453 we evidently d̲o̲ export arrays…

(XXX there’s a comment in var.c:typeset() still to the contrary, with assumptions…)
@
text
@d6724 1
a6724 1
to the
d6726 3
a6728 2
mailing list
or in the
@


1.455
log
@move subsection on tty below job control one, pull all stuff into it
@
text
@d4946 1
a4946 4
Parameters are placed in the environment of any executed commands;
this includes the array member with the key
.Dq 0
if the parameter is an array.
@


1.454
log
@document some more on how the terminal state is affected
From: G.raud Meyer <graud@@gmx.com> (mostly)
@
text
@a5201 9
.Ss Terminal state
The state of the controlling terminal can be modified by a command executed
in the shell, whether or not job control is enabled.
The modified terminal state is not retained when the command exits
unsuccessfully (i.e.\& with a non-zero status), or when job control is
enabled and the command had been momentarily stopped (then restarted).
In interactive mode, when line editing is enabled, the terminal state is
saved before being reconfigured by the shell for the line editor, then
restored before running a command.
a5221 2
The state of the terminal is saved or restored when a job initially
started in the foreground is stopped or restarted, respectively.
d5335 11
@


1.453
log
@improve exporting documentation:

• reference “shellshock” of GNU bash for exporting functions
• mention we don’t export arrays (just their "0" members) as
  ksh93 and GNU bash don’t do it either, the latter documen‐
  ting it even
@
text
@d5202 9
d5225 3
a5227 3
Foreground jobs can be stopped by typing the suspend
character from the terminal (normally \*(haZ), jobs can be restarted in either the
foreground or background using the
d5230 3
a5232 3
.Ic bg
commands, and the state of the terminal is saved or restored when a foreground
job is stopped or restarted, respectively.
@


1.452
log
@move text on ${array} => ${array[0]} implicitly, it is more global
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.441 2017/04/12 17:38:45 tg Exp $
d80 1
a80 1
.Dd $Mdocdate: April 12 2017 $
a2906 2
In the original Korn shell,
exported functions are visible to shell scripts that are executed.
d4934 1
a4934 1
See the
d4936 1
a4936 1
option.)
d4946 6
a4951 3
Parameters (or functions) are placed in the environment of
any executed commands.
Exported functions are not yet implemented.
d4959 1
a4959 1
For integers, the number instead of the base is padded.
@


1.451
log
@fix documentation bug, thanks panpo and Riviera for spotting
@
text
@d5 2
a6 1
.\"		2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017
d1368 4
d1527 1
a1527 5
The following forms of parameter substitution can also be used (if
.Ar name
is an array, the element with the key
.Dq 0
will be substituted in scalar context):
@


1.450
log
@we have a FAQ now! (well, two of them, different scope though)
@
text
@d5585 2
a5586 1
the cursor, redraws the entire prompt and the currently edited input line.
@


1.449
log
@fuck POSIX
@
text
@d2094 1
a2094 1
Since Backslashes and other special characters may be
d2109 1
a2109 1
x=$(print \e\e001)
d6900 6
@


1.448
log
@turn off UTF-8 mode upon entering POSIX mode, for J�rg
@
text
@d5390 5
d6699 1
a6699 1
.Nm mksh\ R55
@


1.447
log
@add EBCDIC primer and attribution for iSKUNK
@
text
@d4311 1
a4311 1
As a side effect, setting this flag turns off
d4313 3
a4315 1
mode, which can be turned back on manually, and
d6645 2
d6652 1
a6652 1
.Nm sh
@


1.446
log
@allow backslash escapes for bind for ^ and \ o̲n̲l̲y̲; also more EBCDIC-friendly
@
text
@d6590 1
a6590 1
See the documentation, web site and CVS for details.
d6600 4
@


1.445
log
@allow : and [ in alias names (but forbid [[ explicitly)
to make 'enable' completely work again
@
text
@d3167 2
a3168 1
Note that although only two prefix characters (usually ESC and \*(haX)
@


1.444
log
@on ^C (INTR, QUIT edchars), shove input line into history
@
text
@d3072 4
a3075 2
.Li \&[A\-Za\-z0\-9_!%,.@@\-]
are valid in names except they may not begin with a hyphen-minus.
@


1.443
log
@restore ‘.’ as allowed char in alias names
@
text
@d5540 1
a5540 1
Abort the current command, empty the line buffer and
d6437 1
a6437 1
deleted and a new prompt to be printed.
@


1.442
log
@finally document FPOSIX and FSH delta
@
text
@d3069 1
a3069 1
Any name with a value defines an alias (see
d3071 2
a3072 2
above).
.Li \&[A\-Za\-z0\-9_!%,@@\-]
@


1.441
log
@add test -v, initially from Martijn Dekker
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.436 2017/04/02 14:14:07 tg Exp $
d79 1
a79 1
.Dd $Mdocdate: April 2 2017 $
d5354 1
a5354 1
The GNU
d5358 1
a5358 1
is no longer supported.
d5368 13
a5380 1
.Dq Li \-n .
d5382 3
a5384 1
\&... (list is incomplete and may change for R54)
d5391 1
a5391 1
The GNU
d5395 1
a5395 1
is no longer supported.
d5403 3
a5405 1
.Dq Li \-n .
d5435 10
a5444 1
\&... (list is incomplete and may change for R54)
@


1.440
log
@Clarify the effect of exit and return in a subshell
From: Jean Delvare <jdelvare@@suse.de>
@
text
@a4474 28
.It Fl o Ar option
Shell
.Ar option
is set (see the
.Ic set
command above for a list of options).
As a non-standard extension, if the option starts with a
.Ql \&! ,
the test is negated; the test always fails if
.Ar option
doesn't exist (so [ \-o foo \-o \-o !foo ] returns true if and only if option
.Ar foo
exists).
The same can be achieved with [ \-o ?foo ] like in
.At
.Nm ksh93 .
.Ar option
can also be the short flag led by either
.Ql \-
or
.Ql +
.Pq no logical negation ,
for example
.Dq Li \-x
or
.Dq Li +x
instead of
.Dq Li xtrace .
d4536 32
@


1.439
log
@put the hyphen-minus back into the allowed alias name characters, for
Steffen Nurpmeso <steffen@@sdaoden.eu>, except disallow it at the start
@
text
@d2930 6
d3470 1
a3470 1
The shell exits with the specified exit status.
d6750 7
@


1.438
log
@limit alias characters to what POSIX requires
@
text
@d3066 2
a3067 2
.Li \&[A\-Za\-z0\-9_!%,@@]
are valid in names.
@


1.437
log
@fix small inaccuracy
@
text
@d3066 2
@


1.436
log
@introduce the -T flag to set TEXTMODE (ASCII CR+LF newline support)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.423 2017/02/17 22:28:26 tg Exp $
d79 1
a79 1
.Dd $Mdocdate: February 17 2017 $
d6709 1
a6709 1
through komh's port on OS/2World, or from his OS/2 Factory on eComStation
@


1.435
log
@add standard variable PATHSEP, for better and easier OS/2 support
@
text
@d6458 1
a6458 1
.Pa https://www.mirbsd.org/ksh\-chan.htm
d6552 8
d6562 1
a6562 1
.Pa https://www.mirbsd.org/TaC\-mksh.txt
d6701 13
a6713 3
You will have gotten this shell through komh's port on Shellworld
most likely. It differs from standard mksh in that ASCII (CR+LF)
newlines are accepted in many places.
@


1.434
log
@introduce a FAQ, move lots of stuff there and add lots of stuff
@
text
@d2023 1
a2023 1
colon, or two adjacent colons, is treated as a
d2026 2
d6687 4
a6690 5
Unlike the native command prompt, the current working directory is
not in the search path at all, for security reasons common on Unix
systems (the shell is designed for Unix-like systems); if you really
need this, run the command
.Li PATH=".;$PATH"
@


1.433
log
@use \\builtin ipv \let] and \set internally
@
text
@d189 2
a190 24
.Ss I'm an Android user, so what's mksh?
.Nm mksh
is a
.Ux
shell / command interpreter, similar to
.Nm COMMAND.COM
or
.Nm CMD.EXE ,
which has been included with
.Tn Android Open Source Project
for a while now.
Basically, it's a program that runs in a terminal (console window),
takes user input and runs commands or scripts, which it can also
be asked to do by other programs, even in the background.
Any privilege pop-ups you might be encountering are thus not
.Nm mksh
issues but questions by some other program utilising it.
.Ss "I'm an OS/2 user, what do I need to know?"
Unlike the native command prompt, the current working directory is
not in the search path at all, for security reasons common on Unix
systems (the shell is designed for Unix-like systems); if you really
need this, run the command
.Li PATH=".;$PATH"
or add that to a suitable initialisation file.
d2115 1
a2115 1
PS1=$'\e1\er\e1\ee[7m\e1$PWD\e1\ee[0m\e1\*(Gt '
d2568 1
a2568 1
.D1 $ cat /foo/bar 2\*(Gt&1 \*(Gt/dev/null \*(Ba pr \-n \-t
d3724 1
a3724 1
.Dl "{ \e\ebuiltin let '" Ns Ar expr Ns "'; }"
a3961 34
Another handy set of tricks:
If
.Ic read
is run in a loop such as
.Ic while read foo; do ...; done
then leading whitespace will be removed (IFS) and backslashes processed.
You might want to use
.Ic while IFS= read \-r foo; do ...; done
for pristine I/O.
Similarly, when using the
.Fl a
option, use of the
.Fl r
option might be prudent; the same applies for:
.Bd -literal -offset indent
find . \-type f \-print0 \*(Ba& \e
    while IFS= read \-d \*(aq\*(aq \-pr filename; do
	print \-r \-\- "found \*(Lt${filename#./}\*(Gt"
done
.Ed
.Pp
The inner loop will be executed in a subshell and variable changes
cannot be propagated if executed in a pipeline:
.Bd -literal -offset indent
bar \*(Ba baz \*(Ba while read foo; do ...; done
.Ed
.Pp
Use co-processes instead:
.Bd -literal -offset indent
bar \*(Ba baz \*(Ba&
while read \-p foo; do ...; done
exec 3\*(Gt&p; exec 3\*(Gt&\-
.Ed
.Pp
a5688 3
If Ctrl-U should only delete the line up to the cursor, use:
.Pp
.D1 $ bind \-m \*(haU='\*(ha[0\*(haK'
a6566 18
.Nm
has a different scope model from
.At
.Nm ksh ,
which leads to subtle differences in semantics for identical builtins.
This can cause issues with a
.Ic nameref
to suddenly point to a local variable by accident; fixing this is hard.
.Pp
The parts of a pipeline, like below, are executed in subshells.
Thus, variable assignments inside them are not visible in the
surrounding execution environment.
Use co-processes instead.
.Bd -literal -offset indent
foo \*(Ba bar \*(Ba read baz            # will not change $baz
foo \*(Ba bar \*(Ba& read \-p baz        # will, however, do so
.Ed
.Pp
d6611 2
d6663 158
@


1.432
log
@use the new “\builtin” builtin for quoting, everywhere
@
text
@d3745 2
a3746 6
is syntactic sugar for
.No "{ let '" Ns Ar expr Ns "'; }" .
.Pp
.It Ic let]
Internally used alias for
.Ic let .
@


1.431
log
@Haiku-related ulimit overhaul:
• print ulimit -a with the flag, like most other shells do
• move ulimit-1 regression test to ulimit-2 and exclude on Haiku:
  it can only set the -n and -V limits AFAICT
• document that some OSes (here: Haiku) can only set the soft limits
  (so “ulimit -nS 1024” is okay but -S is required)
• check “ulimit -c 0”, which dot.mkshrc uses, everywhere
  (if it errors out, hack around it or stub it out with MKSH_NO_LIMITS)
@
text
@d1140 8
a1147 8
autoload=\*(aq\etypeset \-fu\*(aq
functions=\*(aq\etypeset \-f\*(aq
hash=\*(aq\ebuiltin alias \-t\*(aq
history=\*(aq\ebuiltin fc \-l\*(aq
integer=\*(aq\etypeset \-i\*(aq
local=\*(aq\etypeset\*(aq
login=\*(aq\eexec login\*(aq
nameref=\*(aq\etypeset \-n\*(aq
d1149 2
a1150 2
r=\*(aq\ebuiltin fc \-e \-\*(aq
type=\*(aq\ebuiltin whence \-v\*(aq
@


1.430
log
@further change typeset scope description, inspired by Martijn Dekker
@
text
@d5033 1
a5033 1
limit.
@


1.429
log
@implement “typeset -g”, From: Martijn Dekker <martijn@@inlv.org>
also deprecate “global”; thanks!
@
text
@d4850 1
a4850 1
.Pq Ic \-
d4852 4
a4855 1
.Pq Ic + .
d4859 1
a4859 4
the change affects the entire array, and no value may be specified.
Any parameters created by
.Ic typeset
have local scope by default.
d4880 2
a4881 1
Create parameters in global scope, not in local scope.
@


1.428
log
@fix GNU groff-only formatting bug in the manpage
From: Jean Delvare <jdelvare@@suse.de>
@
text
@d3652 11
a3662 1
.It global Ar ...
d3664 4
a3667 1
.Ic typeset .
d4818 5
a4822 5
.Ic global
.Oo Op Ic +\-alpnrtUux
.Op Fl L Ns Op Ar n
.Op Fl R Ns Op Ar n
.Op Fl Z Ns Op Ar n
a4823 1
.No \*(Ba Fl f Op Fl tux Oc
d4830 2
a4831 7
.Oo Op Ic +\-alpnrtUux
.Op Fl LRZ Ns Op Ar n
.Op Fl i Ns Op Ar n
.No \*(Ba Fl f Op Fl tux Oc
.Oo Ar name
.Op Ns = Ns Ar value
.Ar ... Oc
d4857 1
a4857 2
.Pp
If
d4859 1
a4859 11
is used inside a function, any parameters specified are localised.
This is not done by the otherwise identical
.Ic global .
.Em Note :
This means that
.Nm Ns 's Ic global
command is
.Em not
equivalent to other programming languages' as it does not allow a
function called from another function to access a parameter at truly
global scope, but only prevents putting an accessed one into local scope.
d4879 2
@


1.427
log
@add OS/2 PATH note, for komh
@
text
@d4858 1
a4858 1
.Nm No 's Ic global
@


1.426
log
@document the declaration utility stuff and the new \builtin
also, make global a declaration utility
@
text
@d206 7
@


1.425
log
@make “builtin” and “wait” not special

(“\builtin” likely also doesn’t need it, as “command” isn’t)
@
text
@d2188 2
a2189 2
Tilde expansion which is done in parallel with parameter substitution, is done
on words starting with an unquoted
d2191 9
a2219 15
In parameter assignments
(such as those preceding a simple-command or those occurring
in the arguments of
.Ic alias ,
.Ic export ,
.Ic global ,
.Ic readonly
and
.Ic typeset ) ,
tilde expansion is done after any assignment
(i.e. after the equals sign)
or after an unquoted colon
.Pq Ql \&: ;
login names are also delimited by colons.
.Pp
d3214 12
d3355 1
d3490 1
d4010 1
a4264 1
If disabled, tilde expansion after an equals sign is disabled as a side effect.
d4820 1
@


1.424
log
@add missing -e to print synopsis; From: Jean Delvare <jdelvare@@suse.de>
also add missing .Ns (no space) between -u and [n] in its option list
@
text
@d3025 1
a3025 2
.Ic builtin , global , source , typeset ,
.Ic wait
d3030 7
a3036 6
.Ic cat , cd , command , echo ,
.Ic false , fc , fg , getopts ,
.Ic jobs , kill , let , print ,
.Ic pwd , read , realpath , rename ,
.Ic sleep , suspend , test , true ,
.Ic ulimit , umask , unalias , whence
@


1.423
log
@there’s no evidence for -e in any BSD echo (but in ksh93 print)

spotted by Jean Delvare <jdelvare@@suse.de> and Werner Fink <werner@@suse.de>
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.418 2016/11/11 21:37:44 tg Exp $
d79 1
a79 1
.Dd $Mdocdate: November 11 2016 $
d3762 1
a3762 1
.Oo Fl AclNnprsu Ns Oo Ar n Oc \*(Ba
d3811 1
a3811 1
.It Fl u Op Ar n
@


1.422
log
@improve rendering of contact information
@
text
@d5 1
a5 1
.\"		2010, 2011, 2012, 2013, 2014, 2015, 2016
d3424 4
a3427 2
option is set or this is a direct builtin call, only the first argument
is treated as an option, and only if it is exactly
d3763 1
a3763 1
.Fl R Op Fl en Oc
d3768 1
a3768 1
The C escapes mentioned in
d3794 3
d3819 1
a3819 1
option is used to emulate, to some degree, the
d3822 4
a3825 8
command which does not process
.Ql \e
sequences unless the
.Fl e
option is given.
As above, the
.Fl n
option suppresses the trailing newline.
d6700 1
a6700 1
.Nm mksh\ R54
@


1.421
log
@undocument printf(1), it causes user confusion
@
text
@a6715 2
.Mx
mailing list at
d6717 1
@


1.420
log
@collective R54 release preparation multi-merger:

install both lksh and mksh manpages from Build.sh (Martijn Dekker)
spelling fixes (Larry Hynes)
manpage improvements (Martijn Dekker)
initial port to Harvey-OS’ APEX (Ronald G. Minnich, Elbing Miss, Álvaro Jurado)
more from komh’s OS/2 port (KO Myung-Hun)
@
text
@a3825 14
.It Ic printf Ar format Op Ar arguments ...
Formatted output.
Approximately the same as the
.Xr printf 1 ,
utility, except it uses the same
.Sx Backslash expansion
and I/O code and does not handle floating point as the rest of
.Nm mksh .
An external utility is preferred over the builtin.
This is not normally part of
.Nm mksh ;
however, distributors may have added this as builtin as a speed hack.
Do not use in new code.
.Pp
@


1.419
log
@return 128+SIGALRM if read with timeout timeouts, inspired by GNU bash
@
text
@d1063 1
a1063 1
means a hexadecimal digit, of thich there may be none up to four or eight;
d2605 1
a2605 1
use unchecked user input, e.g. from the environment, in arithmetics!
d4902 1
a4902 1
All upper case characters in values are converted to lower case.
d4926 1
a4926 1
passed as parametres, instead of using
d4967 1
a4967 1
All lower case characters in values are converted to upper case.
d5384 1
a5384 1
will still operate with unsigned 32-bit arithmetics; use
d5386 1
a5386 1
if arithmetics on the host
d5388 1
a5388 1
data type, complete with ISO C Undefined Behaviour, are required;
d5589 1
a5589 1
Uppercase the first character in the next
d6589 2
a6590 2
the work without restriction and permission to sublicence derivates under the
terms of any (OSI approved) Open Source licence,
d6632 1
a6632 1
which leads to subtile differences in semantics for identical builtins.
d6647 3
a6649 3
provides a consistent set of 32-bit integer arithmetics, both signed
and unsigned, with defined wraparound and sign of the result of a
remainder operation, even (defying POSIX) on 36-bit and 64-bit systems.
d6704 1
a6704 1
not overwritten by same-numer entries from the persistent
@


1.418
log
@document print builtin changes
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.398 2016/06/25 23:51:21 tg Exp $
d79 1
a79 1
.Dd $Mdocdate: June 25 2016 $
d3915 4
a3918 1
If EOF or a timeout occurs, a partial read is returned with exit status 1.
d3939 3
a3941 1
is 1 if the timeout occurred, but partial reads may still be returned.
@


1.417
log
@today, Andreas Buschka learnt that the Oxford comma is an american thing
(except for exactly the University of Oxford or to disambiguate)
@
text
@d3760 1
a3760 1
.Oo Fl Anprsu Ns Oo Ar n Oc \*(Ba
d3764 3
a3766 8
.Ic print
prints its arguments on the standard output, separated by spaces and
terminated with a newline.
The
.Fl n
option suppresses the newline.
By default, certain C escapes are translated.
These include these mentioned in
d3772 28
a3799 17
option.
Backslash expansion may be inhibited with the
.Fl r
option.
The
.Fl s
option prints to the history file instead of standard output; the
.Fl u
option prints to file descriptor
.Ar n
.Po
.Ar n
defaults to 1 if omitted
.Pc ;
and the
.Fl p
option prints to the co-process (see
d3802 9
a3810 4
The
.Fl A
option prints the character corresponding to each
.Ar argument Ns 's value .
d6708 1
a6708 1
.Nm mksh\ R53
@


1.416
log
@simplify manpage and code; streamline manpage formatting and Satzzeichen
@
text
@d226 1
a226 1
.Dv SIGQUIT ,
d289 1
a289 1
.Ev ENV ,
d363 1
a363 1
the exit status is that of the last command executed, or zero, if no
d386 1
a386 1
characters (space, tab, and newline) or meta-characters
d393 1
a393 1
.Ql \&) ,
d458 1
a458 1
.Ql \&? ,
d470 1
a470 1
is used to introduce parameter, command, and arithmetic substitutions (see
d491 1
a491 1
.Ql \&? ,
d507 1
a507 1
statements, grouping constructs, and function definitions.
d515 1
a515 1
below),
d520 1
a520 1
The command may be a shell built-in command, a function,
d567 1
a567 1
.Dq Li \*(Ba& ,
d588 1
a588 1
.Dq Li \*(Ba& ,
d632 1
a632 1
.Dq Li \*(Ba& ,
d652 1
a652 1
that are followed by reserved words must end with a semicolon, a newline, or
d709 1
a709 1
patterns are subject to parameter, command, and arithmetic substitution, as
d951 1
a951 1
Parameter, command, and arithmetic substitutions are performed as expressions
d1002 1
a1002 1
.Ql \e ,
d1009 1
a1009 1
inside double quotes have their usual meaning (i.e. parameter, arithmetic,
d1018 1
a1018 1
.Ql \e ,
d1055 1
a1055 1
.Dq Li \eu#### ,
d1075 1
a1075 1
.Dq Li \e\*(aq ,
d1183 1
a1183 1
.Xr vi 1 ,
d1190 1
a1190 1
substitution: parameter, command, and arithmetic.
d1234 1
a1234 1
into several words; any octets from the set space, tab, and newline that
d1254 1
a1254 1
.Dq Li \*(Ltspace\*(Gt: ,
d1261 1
a1261 2
(an empty field),
and
d1266 1
a1266 1
if it is unset, the default value of space, tab, and newline is used.
d1274 1
a1274 1
.Dq ,
d1281 1
a1281 1
.Dq Li D ,
d1309 1
a1309 1
.Ql \` ,
d1374 1
a1374 1
.Pf ${ Ns Ar name Ns } ,
d1398 1
a1398 1
.Dq Li PWD ,
d1422 1
a1422 1
.Ic readonly ,
d1434 1
a1434 1
.Ic read ,
d1506 1
a1506 1
or script sourced using the
d1532 1
a1532 1
is needed, parameter, command, arithmetic, and tilde substitution are performed
d1549 1
a1549 1
.Dq Li @@ ,
d1754 1
a1754 1
The PID of the shell, or the PID of the original shell if it is a subshell.
d1846 1
a1846 1
This parameter is used by the interactive line editing modes, and by the
d1848 1
a1848 1
.Ic set Fl o ,
d1922 1
a1922 1
command, to split values into distinct arguments; normally set to space, tab,
d2020 1
a2020 1
has not successfully changed directories since the shell started, or if the
d2050 1
a2050 1
Parameter, command, and arithmetic
d2110 1
a2110 1
either escape the backslash itself,
d2146 1
a2146 1
Parameter, command, and arithmetic substitutions are performed
d2181 1
a2181 1
set, or does not contain the absolute path of a writable directory, temporary
d2195 1
a2195 1
.Ql + ,
d2200 1
a2200 1
.Ev PWD ,
d2217 1
a2217 1
.Ic readonly ,
d2229 1
a2229 1
command may be used to list, change, and add to this cache (e.g.\&
d2246 1
a2246 1
.Ar str Ns i ,
d2254 1
a2254 1
.Dq Li abYe ,
d2273 1
a2273 1
.Ql @@ ,
d2345 1
a2345 1
.Dq Li foo ,
d2389 1
a2389 1
.Nm sh ,
d2411 2
a2412 2
When a command is executed, its standard input, standard output, and standard
error (file descriptors 0, 1, and 2, respectively) are normally inherited from
d2473 1
a2473 1
parameter, command, and arithmetic substitutions are performed, along with
d2479 1
a2479 1
.Ql \e ,
d2549 1
a2549 1
.Ic \*(Gt\*(Gt Ns Ar file ,
d2564 2
a2565 2
Parameter, command, and arithmetic
substitutions, tilde substitutions, and (if the shell is interactive)
d2568 1
a2568 1
.Ar marker ,
d2615 1
a2615 1
Expressions may contain alpha-numeric parameter identifiers, array references,
d2785 1
a2785 1
Addition, subtraction, multiplication, and division.
d2994 1
a2994 1
After evaluation of command-line arguments, redirections, and parameter
d2996 1
a2996 1
a function, a normal builtin, or the name of a file to execute found using the
d3204 1
a3204 1
.Ic until ,
d3306 1
a3306 1
option is set for physical filesystem traversal, and
d3383 1
a3383 1
.Ic until ,
d3519 1
a3519 1
option, or if no
d3630 1
a3630 1
to a value other than 1, or parsing different sets of arguments without
d3632 1
a3632 1
.Ev OPTIND ,
d3684 1
a3684 1
Send the specified signal to the specified jobs, process IDs, or process
d3702 2
a3703 2
If no arguments are specified, a list of all the signals, their numbers, and
a short description of them are printed.
d3740 1
a3740 1
(character type device),
d4142 1
a4142 1
.Ic while ,
d4210 1
a4210 1
.Ev LC_CTYPE ,
d4234 1
a4234 1
.Ql + ,
d4647 1
a4647 1
octets), or if it is a unary operator like
d4739 1
a4739 1
(i.e. when the current command completes, or before printing the next
d4990 1
a4990 1
.Fl u ,
d5120 1
a5120 1
Display or set the file permission creation mask, or umask (see
d5133 1
a5133 1
sets the mask so files will not be readable, writable, or executable by
d5180 1
a5180 1
above); if the last specified job can't be found (because it never existed, or
d5189 1
a5189 1
will return if a signal for which a trap has been set is received, or if a
d5191 1
a5191 1
.Dv SIGINT ,
d5247 1
a5247 1
subshell commands, and non-built-in, non-function commands) can be stopped;
d5261 1
a5261 1
.Ic kill ,
d5272 1
a5272 1
The most recently stopped job, or, if there are no stopped jobs, the oldest
d5378 1
a5378 1
.Nm ksh Ns -compatible ,
d5454 1
a5454 1
.Ic gmacs ,
d5482 1
a5482 1
.Ql + ,
d5491 1
a5491 1
IFS octet or IFS white space, or are the same as the previous line.
d5561 1
a5561 1
.Pq Ql _ ,
d5607 1
a5607 1
Complete as much as is possible of the current word,
d5782 1
a5782 1
The last word, or, if given, the
d5848 1
a5848 1
If at the end of line, or if the
d5899 1
a5899 1
=, \e, *, \*(haX, \*(haE, \*(haF, and, optionally,
d5944 1
a5944 1
erase (\*(ha?), werase (\*(haW), eof (\*(haD), intr (\*(haC), and quit (\*(ha\e).
d5959 1
a5959 1
The current line is read, parsed, and executed by the shell.
d5992 2
a5993 2
is a sequence of letters, digits, and underscore characters or a sequence of
non-letter, non-digit, non-underscore, and non-whitespace characters (e.g.\&
d6052 1
a6052 1
.Ql \&( ,
d6054 1
a6054 1
.Ql \&) ,
d6058 1
a6058 1
Command expansion will match the big-word against all aliases, functions, and
d6171 2
a6172 2
The editor looks forward for the nearest parenthesis, bracket, or
brace and then moves the cursor to the matching parenthesis, bracket, or brace.
d6205 1
a6205 1
.Ic f , F , t ,
d6213 1
a6213 1
.Ic f , F , t ,
d6426 1
a6426 1
The current line is read, parsed, and executed by the shell.
d6439 1
a6439 1
.It PC Home, End, Del, and cursor keys
d6580 1
a6580 1
.An Lou Salkind ,
d6588 1
a6588 1
.An Simon J. Gerraty ,
d6593 1
a6593 1
See the documentation, CVS, and web site for details.
@


1.415
log
@this bug has long been fixed
@
text
@d303 4
a306 4
.Ql \*(Gt ,
.Ql \*(Gt\*(Ba ,
.Ql \*(Gt\*(Gt ,
.Ql \*(Lt\*(Gt ) .
d326 1
a326 1
.Pq Sq \&! ,
d331 1
a331 1
.Pq Sq \&\- ,
d374 1
a374 1
.Pq Sq \*(TI
d401 8
a408 8
.Ql \*(Lt ,
.Ql \*(Lt& ,
.Ql \*(Lt\*(Lt ,
.Ql \*(Lt\*(Lt\*(Lt ,
.Ql \*(Gt ,
.Ql \*(Gt& ,
.Ql \*(Gt\*(Gt ,
.Ql &\*(Gt ,
d412 1
a412 1
.Ql \*(Ba
d414 1
a414 1
.Ql \*(Ba&
d418 1
a418 1
.Ql \&;
d420 1
a420 1
.Ql &
d422 1
a422 1
.Ql &&
d424 1
a424 1
.Ql \*(Ba\*(Ba
d426 2
a427 2
.Ql ;; ,
.Ql ;&\&
d429 1
a429 1
.Ql ;\*(Ba\&
d433 1
a433 1
.Ql \&(( .. ))
d436 1
a436 1
.Ql \&( .. \&)
d440 1
a440 1
.Pq Sq \e ,
d442 1
a442 1
.Pq Sq \&"
d444 1
a444 1
.Pq Dq \*(aq
d450 1
a450 1
.Ql \*(aq ,
d540 1
a540 1
.Ql \*(Ba
d556 1
a556 1
.Ql \&!
d564 4
a567 4
.Ql && ,
.Ql \*(Ba\*(Ba ,
.Ql & ,
.Ql \*(Ba& ,
d569 1
a569 1
.Ql \&; .
d577 1
a577 1
.Ql \*(Ba\*(Ba
d583 1
a583 1
.Ql &&
d585 1
a585 1
.Ql \*(Ba\*(Ba
d587 2
a588 2
.Ql & ,
.Ql \*(Ba& ,
d590 1
a590 1
.Ql \&; ,
d593 1
a593 1
.Ql &&
d595 1
a595 1
.Ql \*(Ba\*(Ba
d606 1
a606 1
.Ql &
d621 1
a621 1
.Ql \*(Ba&
d627 1
a627 1
.Ql &&
d629 1
a629 1
.Ql \*(Ba\*(Ba
d631 2
a632 2
.Ql & ,
.Ql \*(Ba& ,
d634 1
a634 1
.Ql \&; .
d676 1
a676 1
.Ql {
d678 1
a678 1
.Ql }
d723 1
a723 1
.It Ql ;;
d725 1
a725 1
.It Ql ;&\&
d727 1
a727 1
.It Ql ;\*(Ba\&
d751 2
a752 3
is not used to specify a word list, the positional parameters
($1, $2, etc.)\&
are used instead.
d811 3
a813 2
.Ev PS3: normally
.Sq #?\ \&
d838 1
a838 1
.Dq in word ...
d917 1
a917 1
.Dq let expression
d940 1
a940 1
.Ql &&
d942 1
a942 1
.Ql \*(Ba\*(Ba ,
d946 3
a948 3
.Sq Fl f ,
.Sq = ,
.Sq \&! )
d953 1
a953 1
.Ql &&
d955 1
a955 1
.Ql \*(Ba\*(Ba
d967 1
a967 1
.Sq !=
d969 1
a969 1
.Sq =
d996 1
a996 1
.Pq Dq \*(aq
d999 1
a999 1
.Pq Sq \&"
d1048 8
a1055 8
.Ql \ea ,
.Ql \eb ,
.Ql \ef ,
.Ql \en ,
.Ql \er ,
.Ql \et ,
.Ql \eU######## ,
.Ql \eu#### ,
d1057 1
a1057 1
.Ql \ev .
d1059 1
a1059 1
.Ql \eU########
d1061 1
a1061 1
.Ql \eu#### ,
d1066 1
a1066 1
.Ql \eE
d1068 1
a1068 1
.Ql \ee
d1074 2
a1075 2
.Ql \e" ,
.Ql \e\*(aq ,
d1077 1
a1077 1
.Ql \e?
d1082 1
a1082 1
.Pq Ql \e0### ;
d1084 1
a1084 1
.Ql \ex##
d1088 1
a1088 1
.Ql \e# ,
d1092 1
a1092 1
.Ql \e###
d1096 1
a1096 1
.Ql \ex#*
d1102 1
a1102 1
.Ql \ec# ,
d1106 1
a1106 1
.Ql \ec?
d1109 1
a1109 1
.Ql \e# ,
d1254 1
a1254 1
.Dq \*(Ltspace\*(Gt: ,
d1256 1
a1256 1
.Dq \*(Ltspace\*(GtA\*(Ltspace\*(Gt:\*(Ltspace\*(Gt\*(Ltspace\*(GtB::D ,
d1258 3
a1260 3
.Sq A ,
.Sq B ,
.Sq
d1263 1
a1263 1
.Sq D .
d1273 3
a1275 3
.Sq A ,
.Sq B ,
.Sq ,
d1277 1
a1277 1
.Sq D:E ,
d1279 4
a1282 4
.Sq A ,
.Sq B ,
.Sq ,
.Sq D ,
d1284 1
a1284 1
.Sq E .
d1329 1
a1329 1
.Ql x=$(cat) \*(Lt\*(Lt"EOF"
d1331 1
a1331 1
.Ql x=\*(Lt\*(Lt"EOF"
d1334 2
a1335 2
recommends to use case statements of the form
.Ql "x=$(case $foo in (bar) echo $bar ;; (*) echo $baz ;; esac)"
d1340 1
a1340 1
x=$(eval $(cat)) \*(Lt\*(Lt"EOF"
d1398 2
a1399 2
.Ql # ,
.Ql PWD ,
d1401 1
a1401 1
.Ql $ ;
d1407 1
a1407 1
.Dq FOO
d1409 1
a1409 1
.Dq bar ;
d1508 1
a1508 1
.Sq \&.
d1513 1
a1513 1
.Dq parameter null or not set
d1523 1
a1523 1
.Pq Sq \&"
d1549 2
a1550 2
.Ql * ,
.Ql @@ ,
d1621 1
a1621 1
Like ${..#..} substitution, but it deletes from the end of the value.
d1768 1
a1768 1
.Ic $?\&
d1789 1
a1789 1
.Sq \&.
d1834 1
a1834 1
.Sq \&.
d1865 1
a1865 1
.Pq Sq \&.
d1874 1
a1874 1
.Dq #! Ns Ar shell
d2036 1
a2036 1
.Sq \&.
d2040 1
a2040 1
.Sq \&.
d2060 1
a2060 1
.Ql !!
d2065 1
a2065 1
.Sq $\ \&
d2067 1
a2067 1
.Sq #\ \&
d2074 1
a2074 1
.Sq #
d2135 1
a2135 1
.Sq \*(Gt\ \& ,
d2142 1
a2142 1
.Sq #?\ \& .
d2150 1
a2150 1
.Sq +\ \& .
d2152 1
a2152 1
.Sq \&[$EPOCHREALTIME]\ \&
d2224 1
a2224 1
.Pq Sq \&: ;
d2251 1
a2251 1
.Dq a{c,b{X,Y},d}e
d2253 3
a2255 3
.Dq ace ,
.Dq abXe ,
.Dq abYe ,
d2257 1
a2257 1
.Dq ade ) .
d2261 1
a2261 1
.Pq Sq \&,
d2278 1
a2278 1
.Dq \&[..]
d2289 1
a2289 1
.It \&[..]
d2294 1
a2294 1
.Dq \&[a0\-9]
d2296 1
a2296 1
.Sq a
d2309 2
a2310 2
.It \&[!..]
Like [..],
d2321 3
a2323 3
.Dq foo ,
.Dq bar ,
.Dq foobarfoo ,
d2333 3
a2335 3
.Dq foo ,
.Dq bar ,
.Dq foobar ,
d2346 1
a2346 1
.Dq foo ,
d2348 1
a2348 1
.Dq bar .
d2356 1
a2356 1
.Dq foo
d2358 1
a2358 1
.Dq bar .
d2366 1
a2366 1
.Dq foo
d2368 1
a2368 1
.Dq bar ;
d2370 1
a2370 1
.Ic !(*)
d2372 1
a2372 1
.Ic !(?)*\&
d2383 1
a2383 1
.Sq \&.
d2385 1
a2385 1
.Sq .. ,
d2396 1
a2396 1
.Pq Sq \&.
d2398 3
a2400 3
.Pq Sq / ,
even if they are explicitly used in a [..] sequence; also, the names
.Sq \&.
d2402 1
a2402 1
.Sq ..
d2404 1
a2404 1
.Sq .* .
d2476 1
a2476 1
.Pq Sq \e
d2482 1
a2482 1
.Ql \enewline ,
d2496 1
a2496 1
.Dq \*(aq\*(aq
d2498 1
a2498 1
.Sq \&""
d2596 1
a2596 1
command, inside $((..)) expressions, inside array references (e.g.\&
d2611 1
a2611 1
.Sq #
d2661 1
a2661 1
.Sq 0x
d2667 1
a2667 1
.Pq Sq 0
d2681 1
a2681 1
.Dq \*(aqx\*(aq
d2683 1
a2683 1
.Dq 1#x
d2748 1
a2748 1
.Dq var1 *= 5 + 3
d2750 1
a2750 1
.Dq var1 = var1 * (5 + 3) .
d2814 1
a2814 1
.Sq \*(Ba&
d2874 1
a2874 1
.Sq \&.
d3111 1
a3111 1
.Dq alias\ \& .
d3230 1
a3230 1
.Pq Sq -
d3276 1
a3276 1
.Ql \- ,
d3288 1
a3288 1
.Sq ..
d3297 1
a3297 1
.Sq ..
d3405 1
a3405 1
.Ql \ec .
d3427 1
a3427 1
.Dq Fl n .
d3471 1
a3471 1
.Ic $?\&
d3485 1
a3485 1
.Ql \-
d3621 1
a3621 1
.Ql \-\-
d3775 1
a3775 1
.Ql \ec ,
d3846 1
a3846 1
.Sq ..
d4023 1
a4023 1
.Pq Sq / ,
d4230 1
a4230 1
.Dq $@@
d4232 1
a4232 1
.Dq $* ,
d4298 1
a4298 1
.Sq ..
d4302 1
a4302 1
.Sq .. ,
d4376 1
a4376 1
.Sq $\- .
d4390 1
a4390 1
.Ql \-\-
d4394 1
a4394 1
.Ql \-
d4405 1
a4405 4
etc. are renamed to
.Sq 1 ,
.Sq 2 ,
etc.
d4518 1
a4518 1
.Ql \-x
d4520 1
a4520 1
.Ql +x
d4522 1
a4522 1
.Ql xtrace .
d4631 1
a4631 1
.Ql \&!
d4643 1
a4643 1
.Dq if \&[ $foo = bar \&]
d4649 1
a4649 1
.Sq \&!
d4651 1
a4651 1
.Sq Fl n .
d4653 1
a4653 1
.Dq if \&[ x\&"$foo\&" = x"bar" \&]
d4655 1
a4655 1
.Dq if \&[[ $foo = bar \&]]
d4659 1
a4659 1
.Dq if \&[[ $foo = \&"$bar" \&]]
d4662 1
a4662 1
.Ic \&[[ ... ]]
d4722 2
a4723 2
with a minus sign
.Pq Sq \-
d4735 2
a4736 3
is either an empty string, indicating the signals are to be ignored,
a minus sign
.Pq Sq \- ,
d4816 1
a4816 1
.Ql \-
d5133 1
a5133 1
.Dq ug=rwx,o=
d5137 1
a5137 1
.Dq 007 .
d5255 1
a5255 1
.Dq \&[..] ,
d5267 3
a5269 4
.Ic $!\&
parameter) or by prefixing the job number with a percent
sign
.Pq Sq % .
d5332 1
a5332 1
.Dq core dumped
d5397 1
a5397 1
.Dq Fl n .
d5418 1
a5418 1
.Dq Fl n .
d5562 1
a5562 1
.Pq Sq _ ,
d5564 1
a5564 1
.Pq Sq $
d5995 1
a5995 1
.Dq ab2*&\*(ha
d6018 1
a6018 1
.Pq Sq #
d6057 1
a6057 1
.Pq Sq / ,
d6678 1
a6678 1
.Dq fubar
@


1.414
log
@remove all mentions of “the null string”, it’s an empty string (in most
cases), or an unset parameter (in some cases)
@
text
@a1514 4
Currently a bug, if
.Ar word
is a variable which expands to the empty string, the
error message is also printed.
@


1.413
log
@fixes
@
text
@d832 1
a832 3
is
.Dv NULL ,
the prompt is printed, and so on.
d1390 1
a1390 1
that is not set, a null string is substituted unless the
d1393 1
a1393 5
.Po
.Ic set Fl o Ic nounset
or
.Ic set Fl u
.Pc
d1473 1
a1473 2
is set and not
.Dv NULL ,
d1482 1
a1482 2
is set and not
.Dv NULL ,
d1490 1
a1490 2
is set and not
.Dv NULL ,
d1501 1
a1501 2
is set and not
.Dv NULL ,
d1517 1
a1517 1
is a variable which expands to the null string, the
d1534 1
a1534 2
being set (as opposed to set and not
.Dv NULL ) .
d1807 1
a1807 2
is
.Dv NULL ) .
d1814 1
a1814 1
.Ic $@@
d1816 1
a1816 2
.Dv NULL
arguments or splitting arguments with spaces.
d2160 1
a2160 3
May be unset or
.Dv NULL
if the shell doesn't know where it is.
d2422 1
a2422 1
input is initially set to be from
d3265 1
a3265 3
A
.Dv NULL
path means the current directory.
d3270 2
a3271 3
search path other than the
.Dv NULL
path, the name of the new working directory will be written to standard output.
d4653 1
a4653 3
is
.Dv NULL
or unset, if it has embedded spaces (i.e.\&
@


1.412
log
@mention bases can (naturally…) only go up to 36, requested by izabera
@
text
@d2684 1
a2684 1
built-in command.
d2687 2
a2688 1
does not cause interpretation as octal, as that's unsafe to do.
d5428 1
a5428 1
\&... (list is incomplete and may change for R53)
d5449 29
a5477 1
\&... (list is incomplete and may change for R53)
@


1.411
log
@fix groff issue pointed out by lintian

surprisingly enough, no changes needed for the gcc6 switch in Debian sid…
@
text
@d2676 1
a2676 1
is a decimal integer specifying the base, and
@


1.410
log
@quote the &, for POSIX:

   An  ordinary  character  is  a  pattern  that  shall  match itself. It can be any
   character  in  the  supported  character  set except for NUL, those special shell
   characters  in [199]Quoting that require quoting, and the following three special
			⇓
   The  application  shall  quote  the following characters if they are to represent
   themselves:

|  &  ;  <  >  (  )  $  `  \  "  '  <space>  <tab>  <newline>
@
text
@d1967 1
d1969 1
d1973 1
d1975 1
d1979 1
d1981 1
d1985 1
d1987 1
d1991 1
d1993 1
d1997 1
d1999 1
d2003 1
d2005 1
d2009 1
d2012 1
d2016 1
a2017 1
.Sm on
@


1.409
log
@implement $KSH_MATCH and, to make it usable, ${foo@@/bar/baz};
add a real-life example (for slagtc’s programmable tab completion)
to the manpage
@
text
@d5867 1
a5867 1
print \-nr \-\- "${x@@/[\e"\-\e$&\-*:\-?[\e\e\e\`{\-\e}${IFS\-$\*(aq \et\en\*(aq}]/\e\e$KSH_MATCH}"
@


1.408
log
@move EPOCHREALTIME to correct location, drop ERRNO (wtf?)
@
text
@d1685 19
d1955 48
d5864 5
@


1.407
log
@>>> is not needed (LP#1608505)
@
text
@d1857 10
a1866 6
.It Ev ERRNO
Integer value of the shell's
.Va errno
variable.
It indicates the reason the last system call failed.
Not yet implemented.
a1950 10
.It Ev EPOCHREALTIME
Time since the epoch, as returned by
.Xr gettimeofday 2 ,
formatted as decimal
.Va tv_sec
followed by a dot
.Pq Sq \&.
and
.Va tv_usec
padded to exactly six decimal digits.
@


1.406
log
@defer to external rename(1) too
@
text
@d2719 2
a2720 1
Shift left (right); the result is the left argument with its bits logically
a2721 5
.It \*(Gt\*(Gt\*(Gt
Shift arithmetically right; the result is similar to shift,
except that the top-most bit is repeated instead of filling
the newly shifted-in bits with zero.
.Em Scheduled to be implemented in R54 !
@


1.405
log
@implement new evaluate-region editing command (!MKSH_SMALL)

while here, fixup x_redraw refactoring x_clrtoeol, x_pprompt, and x_lastpos
@
text
@d3990 4
a3993 3
This builtin is intended for emergency situations where
.Pa /bin/mv
becomes unusable, and directly calls
@


1.404
log
@remove fd>9 support in favour of upcoming named file descriptors; bump
@
text
@d5621 5
@


1.403
log
@use ^< and ^> for ROL and ROR in R53, schedule >>> as SAR for R54

cf. http://david.tribble.com/text/c0xrot.htm
@
text
@a2465 6
.Pp
Note that the current version of
.Nm
supports some two-digit fd numbers in some environments;
this feature is deprecated and will be removed from a subsequent release
in favour of a ksh93-/perl-style "named file descriptors" feature.
@


1.402
log
@add print -A for R53
@
text
@d2576 1
a2576 1
= += \-= *= /= %= \*(Lt\*(Lt\*(Lt= \*(Gt\*(Gt\*(Gt= \*(Lt\*(Lt= \*(Gt\*(Gt= &= \*(ha= \*(Ba=
d2584 1
a2584 1
\*(Lt\*(Lt\*(Lt \*(Gt\*(Gt\*(Gt \*(Lt\*(Lt \*(Gt\*(Gt
d2673 2
a2674 2
.No += \-= *= /= %= \*(Lt\*(Lt\*(Lt= \*(Gt\*(Gt\*(Gt=
.No \*(Lt\*(Lt= \*(Gt\*(Gt= &= \*(ha= \*(Ba=
a2723 11
.It \*(Lt\*(Lt\*(Lt \*(Gt\*(Gt\*(Gt
Rotate left (right); the result is similar to shift (see
.Ic \*(Lt\*(Lt )
except that the bits shifted out at one end are shifted in
at the other end, instead of zero or sign bits.
.Pp
.Em Note :
These operators are deprecated; in a subsequent mksh release,
.Ic \*(ha\*(Lt No and Ic \*(ha\*(Gt
.No will replace them, and Ic \*(Gt\*(Gt\*(Gt
will be an arithmetic right shift.
d2727 9
d6620 1
a6620 1
.Nm mksh\ R52d
@


1.401
log
@re-add realpath to prefer-external-if-argument, needed by Debian
@
text
@d3717 1
a3717 1
.Oo Fl nprsu Ns Oo Ar n Oc \*(Ba
d3753 4
@


1.400
log
@fix issues with home directory replacement, from Torsten Sillke:
• if $PWD = ${HOME}foo, no longer show as ~foo in PS1
• simplify ~, ~+, and ~- exactly as $PWD is upon shell entry
  (fixes HOME=/home/./foo but PWD=/home/foo)
@
text
@d3980 3
@


1.399
log
@document ^U key binding advice

this is “GNU bash mode”, for bleb via IRC
@
text
@d2141 1
a2141 1
the value of the
@


1.398
log
@improve description of default Emacs mode keybindings
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.385 2016/01/12 16:33:17 tg Exp $
d79 1
a79 1
.Dd $Mdocdate: January 12 2016 $
d5654 3
d6615 1
a6615 1
.Nm mksh\ R52c+CVS
@


1.397
log
@deprecate *not* using MKSH_CONSERVATIVE_FDS; named fds coming soon

partially reverts commitid 10048752E6271CABA24 (the manpage, mostly)
and adds a deprecation warning at build time; suggested by izabera
@
text
@a5456 2
The default bindings were chosen to resemble corresponding
Emacs key bindings.
d5462 4
a5465 1
reasonable substitutes and override the default bindings.
d5467 4
a5470 1
.It abort: \*(haC, \*(haG
d5544 2
a5545 1
.No ERASE , \*(ha? , \*(haH
d5559 3
a5561 1
.No WERASE , \*(ha[\*(ha? , \*(ha[\*(haH , \*(ha[h
d5611 1
a5611 1
normal terminal input canonicalization.
d5614 1
a5614 1
.No \*(haD
d5616 3
a5618 3
Acts as
.Ic eot
if alone on a line; otherwise acts as
d5650 3
a5652 1
.It kill\-line: KILL
d5690 3
a5692 1
.It no\-op: QUIT
d5697 1
a5697 1
Introduces a 2-character command sequence.
@


1.396
log
@premark <<< for deletion, >>> for SAR, ^< and ^> for ROL/ROR

cf. http://david.tribble.com/text/c0xrot.htm

noted by izabera
@
text
@d2459 1
a2459 1
can be a number, indicating the number of an existing file descriptor;
d2466 6
a2471 3
Note that
.Ar fd
is limited to a single digit in most shell implementations.
d2483 1
a2483 1
which also supports the preceding explicit fd number, for example,
d2512 1
a2512 1
redirection with a number (portably, only a single digit).
@


1.395
log
@give C_VAR1 precedence over display variable name; izabera pointed out,
rightfully, that, in POSIX shell, ${!#} is defined, and ${!#123} should work
@
text
@d2726 6
d2733 2
a2734 2
Shift left (right); the result is the left argument with its bits shifted left
(right) by the amount given in the right argument.
@


1.394
log
@pass on RCSID
@
text
@d1596 2
d6592 1
a6592 1
.Nm mksh\ R52c
@


1.393
log
@lintian has new spelling warnings
@
text
@d1004 1
a1004 1
.Ql \`
d1006 1
a1006 1
.Ql \e ,
d1018 2
d1021 1
a1021 1
.Ql $ ,
d1023 4
a1026 4
or
.Ql \&" ,
it is replaced by the second character; if it is followed by a newline, both
the
@


1.392
log
@document upcoming set +o changes; bump
@
text
@d3100 1
a3100 1
and optionally succeded by a tilde character.
d3906 1
a3906 1
Similarily, when using the
@


1.391
log
@there was a comment on 1015; change comments to match, no code change
@
text
@d4316 5
d6588 1
a6588 1
.Nm mksh\ R52b+CVS
@


1.390
log
@bring documentation of command up to date wrt. POSIX and whence wrt. command
(inspired from a bugreport by Martijn Dekker who noted this is currently broken)
@
text
@d1007 1
a1007 1
up to the next unquoted double quote.
d1013 2
a1014 1
results of double-quoted substitutions.
a1310 2
.Ql \&"
.Pq currently, and violating Tn POSIX ,
d1313 3
a1315 1
is stripped (a
d1317 1
a1317 1
followed by any other character is unchanged).
a6581 12
Handling of backslash plus double-quote inside the (deprecated)
.Pf \` Ns Ar command Ns \`
form of command substitution when the substitution itself is
also inside double quotes currently deliberately violates
.Tn POSIX
even in
.Fl o Ic posix
mode until Austin group bug 1015 has been resolved either way,
as the current wording of the standard prohibits the current
and historic practice of several shells which several scripts
(admittedly wrongly) depend on.
.Pp
@


1.389
log
@fix working with ditroff on Schillix, confirmed by Jvrg
@
text
@a5143 9
For each
.Ar name ,
the type of command is listed (reserved word, built-in, alias,
function, tracked alias, or executable).
If the
.Fl p
option is used, a path search is performed even if
.Ar name
is a reserved word, alias, etc.
d5146 3
a5148 7
option,
.Ic whence
is similar to
.Ic command Fl v
except that
.Ic whence
will find reserved words and won't print aliases as alias commands.
d5151 1
a5151 3
option,
.Ic whence
is the same as
d5153 3
a5155 1
Note that for
d5157 1
a5157 6
the
.Fl p
option does not affect the search path used, as it does for
.Ic command .
If the type of one or more of the names could not be determined, the exit
status is non-zero.
d6594 1
a6594 1
.Nm mksh\ R52b
@


1.388
log
@update
@
text
@d32 3
a34 1
.\" Also make sure to use \& especially with two-letter words.
d436 1
a436 1
.Ql \&( .. )\&
d1948 1
a1948 1
.Pq Sq .\&
d3984 1
a3984 1
.Ic .\&
d3991 1
a3991 1
.Ic .\&
d3999 1
a3999 1
.Ic .\&
d4001 1
a4001 1
.Ic .\&
d4079 1
a4079 1
.Ic !\&
@


1.387
log
@incorporate more feedback from schily
@
text
@d442 1
a442 1
.Pq Sq \*(aq
d996 1
a996 1
.Pq Sq \*(aq
d1009 2
a1010 2
inside double quotes have their usual meaning (i.e. parameter, command, or
arithmetic substitution) except no field splitting is carried out on the
d1034 3
a1036 1
the latter is ignored.
d1296 2
d1308 2
d6597 12
d6610 1
a6610 1
.Nm mksh\ R52
@


1.386
log
@incorporate suggestions by J�rg Schilling
@
text
@d182 5
d1752 1
a1752 1
is set to 128 plus the signal number.
@


1.385
log
@be clearer on what we do to the array on read -a other than clearing it
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.377 2015/07/10 19:35:39 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: July 10 2015 $
d2968 2
a2969 1
The following describes the special and regular built-in commands:
@


1.384
log
@future directions; izabera’s got a point and we’ll need two locales (C and
C.UTF-8), but we’ll need this in MirBSD a̲n̲d̲ audit its scripts first
@
text
@d5 1
a5 1
.\"		2010, 2011, 2012, 2013, 2014, 2015
d3818 2
a3819 1
option is enacted, octets otherwise).
@


1.383
log
@update for recent changes
@
text
@d4141 6
d6561 1
@


1.382
log
@make “source” into a built-in command (keepasn, to match ksh93 and “dot”);
remove the “stop” alias and drop old Android and OS/2 hacks and auto-unalias
@
text
@d917 1
a917 1
command, below).
d1628 8
d1639 1
a1639 5
Similar to ${..##..} substitution, but it replaces the longest match of
.Ar pattern ,
anchored anywhere in the value, with
.Ar string .
If
d1641 17
a1657 14
begins with
.Ql # ,
it is anchored at the beginning of the value; if it begins with
.Ql % ,
it is anchored at the end.
Empty patterns cause no replacement to happen.
A single leading
.Ql /
or use of a pattern that matches the empty string causes the
replacement to happen only once; two leading slashes cause
all occurrences of matches in the value to be replaced.
If the trailing
.Pf / Ar string
is omitted, any matches of
d1659 3
a1661 1
are replaced by the empty string, i.e. deleted.
d3645 1
a3645 1
.No let \&" Ns Ar expr Ns \&" .
d5332 1
a5332 1
\&... (list is incomplete)
d5353 1
a5353 1
\&... (list is incomplete)
d6357 1
d6578 1
a6578 1
.Nm mksh\ R51 Ns -CVS
@


1.381
log
@some doc overhaul/bugfixes; TODO: document all of FPOSIX, FSH deltas
(after working through lksh.1 and deciding on them)
@
text
@a1132 2
source=\*(aqPATH=$PATH:. \ecommand .\*(aq
stop=\*(aq\ekill \-STOP\*(aq
d2943 2
a2944 1
.Ic builtin , global , typeset , wait
d2951 4
a2954 5
.Ic jobs , kill , let , mknod ,
.Ic print , pwd , read , realpath ,
.Ic rename , sleep , suspend , test ,
.Ic true , ulimit , umask , unalias ,
.Ic whence
a3673 4
.Pp
See
.Xr mknod 8
for further information.
d4321 1
a4321 2
.Ev PATH
in GNU
d4323 1
a4323 7
and
.Nm mksh .
In
.Nm ksh93
and
.Nm mksh ,
this is implemented as a shell alias instead of a builtin.
d6568 1
a6568 1
.Nm mksh\ R51
@


1.380
log
@oksh sync, simplify *all* if(x)free(x); constructs, simplify x_push() and sync boilerplate while here
@
text
@d6 1
a6 1
.\"	mirabilos <tg@@mirbsd.org>
d2339 1
a2339 1
.It \*(Gt Ar file
d2355 1
a2355 1
.It \*(Gt\*(Ba Ar file
d2361 1
a2361 1
.It \*(Gt\*(Gt Ar file
d2370 1
a2370 1
.It \*(Lt Ar file
d2374 1
a2374 1
.It \*(Lt\*(Gt Ar file
d2378 1
a2378 1
.It \*(Lt\*(Lt Ar marker
d2418 1
a2418 1
.It \*(Lt\*(Lt\- Ar marker
d2422 1
a2422 1
.It \*(Lt\*(Lt\*(Lt Ar word
d2430 1
a2430 1
.It \*(Lt& Ar fd
d2444 1
a2444 1
.It \*(Gt& Ar fd
d2448 1
a2448 1
.It &\*(Gt Ar file
d2450 2
a2451 2
.Ic \*(Gt Ar file 2\*(Gt&1 .
This is a GNU
d2456 1
a2456 1
.Ic 3&\*(Gt Ar file
d2458 1
a2458 1
.Ic 3\*(Gt Ar file 2\*(Gt&3
d2463 4
a2466 11
Setting the
.Fl o Ar posix
or
.Fl o Ar sh
shell options disable parsing of this redirection;
it's a compatibility feature to legacy scripts, to
not be used when writing new shell code.
.It Xo
.No &\*(Gt\*(Ba Ar file ,
.No &\*(Gt\*(Gt Ar file ,
.No &\*(Gt& Ar fd
d2469 2
a2470 2
.Ic \*(Gt\*(Ba Ar file ,
.Ic \*(Gt\*(Gt Ar file ,
d2472 1
a2472 1
.Ic \*(Gt& Ar fd ,
d2512 1
a2512 6
File descriptors created by input/output redirections are private to the
Korn shell, but passed to sub-processes if
.Fl o Ic posix
or
.Fl o Ic sh
is set.
d2588 2
a2589 6
leads to the shell interpreting it as base-8 (octal) integer in
.Ic posix
mode
.Em only ;
historically, (pd)ksh has never done so either anyway,
and it's unsafe to do that, but POSIX demands it nowadays.
d2613 3
a2615 1
input is well-formed UTF-8 in the range of 0000..FFFD.
d4230 8
a4237 3
Enable a somewhat more
.Px
ish mode.
d4242 1
a4242 1
mode.
d4247 2
a4248 1
mode.
d4257 1
a4257 1
mode.
d5296 63
d6452 2
a6453 2
.An mirabilos Aq tg@@mirbsd.org
and currently maintained as part of The MirOS Project.
d6472 2
a6473 2
.An John R. MacMillan Aq Mt change!john@@sq.sq.com ,
.An Simon J. Gerraty Aq Mt sjg@@zen.void.oz.au ,
d6475 1
a6475 1
.An Michael Rendell Aq Mt michael@@cs.mun.ca .
d6518 1
a6518 6
remainder operation, even (defying POSIX) on 64-bit systems.
If you require 64-bit integer arithmetics, use
.Nm lksh Pq legacy mksh
instead, but be aware that, in POSIX, it's legal for the OS to make
.Li print $((2147483647 + 1))
delete all files on your system, as it's Undefined Behaviour.
d6522 1
a6522 2
This may deviate from POSIX in optional or opinionated places, such
as whether leading-digit-zero numbers should be interpreted as octal.
d6524 4
a6527 5
will cause the shell (either
.Nm mksh
or
.Nm lksh )
to behave more like the standard expects.
d6600 1
a6600 1
.Aq miros\-mksh@@mirbsd.org
@


1.379
log
@; on OS/2
@
text
@d6 1
a6 1
.\"	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
d6397 1
a6397 1
.An Thorsten Glaser Aq tg@@mirbsd.org
d6430 5
a6434 4
.\" or shortcut for mksh or mksh/Win32; distro patches are ok (but we
.\" request they amend $KSH_VERSION when modifying mksh). Authors are
.\" Marshall Kirk McKusick (UCB), Rick Collette (ekkoBSD), Thorsten
.\" Glaser, Benny Siegert (MirBSD), Michael Langguth (mksh/Win32).
@


1.378
log
@documentation update (external links), from _0bitcount via IRC
@
text
@d1949 2
a1950 2
A colon separated list of directories that are searched when looking for
commands and files sourced using the
@


1.377
log
@POSIX doesn’t like the OPTU encoding scheme due to btowc/mbtowc asymmetry,
so make all utf8-mode behaviour implementation-defined (and document the
raw octet mapping more explicitly)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.346 2014/12/15 23:26:36 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: December 15 2014 $
a6330 2
.Pa http://docsrv.sco.com:507/en/man/html.C/sh.C.html
.Pp
@


1.376
log
@implement support for PC scancodes à la CHR$(0)+CHR$(&h48)
superseding an mksh-os2 patch which confirmed this is needed

Reference: my copy of the Schneider EURO PC manual 50032 for
Microsoft® GW-BASIC
@
text
@a6443 3
only supports the Unicode BMP (Basic Multilingual Plane).
.Pp
.Nm
d6488 14
a6501 2
For users of UTF-8 locales, the following sh code makes the shell
match the locale:
@


1.375
log
@apply the new cat hack to printf, too, to prefer it over the builtin
@
text
@d5401 1
a5401 1
.No \*(haB , \*(haXD , ANSI-CurLeft
d5418 1
a5418 1
.It beginning\-of\-line: \*(haA, ANSI-Home
d5474 1
a5474 1
.No ANSI-Del
d5495 1
a5495 1
.No \*(haN , \*(haXB , ANSI-CurDown
d5527 1
a5527 1
.It end\-of\-line: \*(haE, ANSI-End
d5552 1
a5552 1
.No \*(haF , \*(haXC , ANSI-CurRight
d5666 1
a5666 1
.It search\-history\-up: ANSI-PgUp
d5671 1
a5671 1
.It search\-history\-down: ANSI-PgDn
d5691 1
a5691 1
.No \*(haP , \*(haXA , ANSI-CurUp
d6119 1
a6119 1
.It Ar ANSI-CurUp
d6270 2
@


1.374
log
@point out mknod is not normally part of mksh either
@
text
@d3759 1
@


1.373
log
@• revert the cat hack for realpath and rename
  ‣ I was convinced by several that more magic is never the solution
• fix a comment: function cat already had precedence
• change cat loader to look for existence, FPATH included, before
  ditching the builtin; note that in manpage
@
text
@d3694 3
d3757 1
a3757 1
and I/O code and does hot handle floating point as the rest of
@


1.372
log
@implement completely new multiline code by delaying history store

this commit is valgrind-tested
@
text
@a3163 5
Unless compiled with
.Dv MKSH_NO_EXTERNAL_CAT ,
if any options are given, an external
.Xr cat 1
utility is invoked instead if called from the shell.
d3168 3
a3958 6
Unless compiled with
.Dv MKSH_NO_EXTERNAL_REALPATH ,
if any options are given and this is not a direct builtin call, an external
.Xr realpath 1
utility is invoked instead.
.Pp
a3972 5
Unless compiled with
.Dv MKSH_NO_EXTERNAL_RENAME ,
if any options are given and this is not a direct builtin call, an external
.Xr rename 1
utility is invoked instead.
@


1.371
log
@fix 'command -v' for "shell reserved words"
From: Martijn Dekker <martijn@@inlv.org>

also adjust manpage accordingly
@
text
@d1862 2
a1863 1
then loaded from the file; subsequent new lines are appended.
@


1.370
log
@implement cat thing for realpath and rename too: if flag, call external
@
text
@d3299 3
a3301 3
For special and regular built-in commands and functions, their names are simply
printed; for aliases, a command that defines them is printed; and for commands
found by searching the
@


1.369
log
@merge spelling stuff from oksh
@
text
@d3960 6
d3980 5
@


1.368
log
@permit read -N n (n ≠ -1) and read -t to return partial reads with $? == 1

issue spotted by carstenh, could have been a documentation ambiguity issue
(as -N was designed to read and return exactly n bytes), but this resolves
it in a way both backwards-compatible and user-pleasing
@
text
@d2 1
a2 1
.\" $OpenBSD: ksh.1,v 1.159 2015/03/25 12:10:52 jca Exp $
d479 1
a479 1
alterations (see
d2148 1
a2148 1
.Ss Brace expansion (alteration)
@


1.367
log
@The check for empty patterns and patterns matching the empty string
in commitid 1004D8283F068C41C3C was bogus; it fixed Jb_boin’s issue
but izabers’s 「var=foo; echo "${var/*/x}"」 was broken; in fact we
only want to not do the looping for // if the pattern matches much.

Also, fix a spelling mistake in the manpage and change some wording
to also work with associative arrays (in the future; no change).
@
text
@d3835 2
a3836 1
bytes; less if EOF or a timeout occurs.
d3855 3
@


1.366
log
@overhaul the signal handling:
• support NSIG_MAX from http://austingroupbugs.net/view.php?id=741
  and make a TODO for later to use sysconf(_SC_NSIG) at runtime
• bounds-check signals (e.g. no smaller than 1, but smaller than NSIG)
• align trap errorlevel with other shells
• make trap match what’s in POSIX and fixup the manpage
• refactor some code related to signals
• hide from kill builtin both EXIT and ERR pseudo-signals
@
text
@d1541 3
a1543 1
is an array, its element #0 will be substituted in a scalar context):
d1633 1
a1633 1
Like ${..#..} substitution, but it replaces the longest match of
d1644 2
a1645 2
Patterns that are empty or consist only of wildcards are invalid.
A single
d1647 4
a1650 4
replaces the first occurence of the search
.Ar pattern ,
and two of them replace all occurences.
If
d1652 1
a1652 1
is omitted, the
d1654 1
a1654 1
is replaced by the empty string, i.e. deleted.
d2015 1
a2015 1
Any occurences of that character in the prompt are not printed.
@


1.365
log
@manpage fixes (mostly \-x to Fl x inline)
@
text
@d4634 12
d4647 3
a4649 2
Sets a trap handler that is to be executed when any of the specified signals are
received.
d4651 2
a4652 3
is either a
.Dv NULL
string, indicating the signals are to be ignored, a minus sign
d4654 4
a4657 5
indicating that the default action is to be taken for the signals (see
.Xr signal 3 ) ,
or a string containing shell commands to be evaluated and executed at the first
opportunity (i.e. when the current command completes, or before printing the
next
d4661 2
a4662 4
is the name of a signal (e.g.\&
.Dv PIPE
or
.Dv ALRM )
d4664 1
a4664 1
.Ic kill \-l
d4669 2
a4670 1
(also known as 0) which is executed when the shell is about to exit, and
d4672 3
a4674 3
which is executed after an error occurs (an error is something that would cause
the shell to exit if the
.Fl e
d4676 2
a4677 4
.Ic errexit
option were set \*(en see the
.Ic set
command above).
a4679 3
Note
that for non-interactive shells, the trap handler cannot be changed for signals
that were ignored when the shell started.
d4681 5
a4685 1
With no arguments,
d4687 1
a4687 4
lists, as a series of
.Ic trap
commands, the current state of the traps that have been set since the shell
started.
@


1.364
log
@fix lies; this had to be taken out for security reasons some time ago
@
text
@d1146 1
a1146 1
.Ic alias \-t .
d1153 1
a1153 1
.Ic set \-o Ic trackall
d1155 1
a1155 1
.Ic set \-h ) ,
d1216 1
a1216 1
.Ar command Ns No s .
d1429 1
a1429 1
.Ic set \-A
d1820 1
a1820 1
.Ic set \-o ,
d1822 1
a1822 1
.Ic kill \-l
d2143 1
a2143 1
.Ic alias \-d
d2746 1
a2746 1
.Ic print \-p )
d2748 1
a2748 1
.Ic read \-p ) .
d2786 1
a2786 1
.Ic print \-p
d2792 1
a2792 1
.Ic print \-u Ns Ar n
d2821 1
a2821 1
.Ic typeset \-f .
d2825 1
a2825 1
.Ic typeset \-fu )
d2846 1
a2846 1
.Ic typeset \-ft
d2848 1
a2848 1
.Ic typeset \-fx ,
d5091 1
a5091 1
.Ic kill \-l Ar exit-status
d5162 1
a5162 1
.Ic set \-m
d5164 1
a5164 1
.Ic set \-o monitor ) ,
d5259 1
a5259 1
.Ic kill \-l
d5788 1
a5788 1
.Ic set \-o vi\-tabcomplete .
d5901 1
a5901 1
.Ic set \-o ) .
d6461 1
a6461 1
.Ic set \-o posix
d6516 1
a6516 1
.Ic set \-o posix
d6518 1
a6518 1
.Ic set \-o sh
@


1.363
log
@give a better suggestion: find|read → find|&read
@
text
@a4038 17
.Pp
Another
.At
.Nm ksh93
and
.Tn GNU
.Nm bash
extension allows specifying the indices used for
.Ar arg ...
.Pq from the above example, Ic a b c
like this:
.Ic set \-A foo \-\- [0]=a [1]=b [2]=c
or
.Ic foo=([0]=a [1]=b [2]=c)
which can also be written
.Ic foo=([0]=a b c)
because indices are incremented automatically.
@


1.362
log
@MFC remaining fixes; tested locally a lot, plus remotely with
GNU C11 (Debian 20150413-1) version 5.0.1 20150413 (prerelease) [gcc-5-branch revision 222050] (x86_64-linux-gnu)
including ASan (testsuite) and Valgrind (short)
@
text
@d3898 2
a3899 2
find . \-type f \-print0 \*(Ba \e
    while IFS= read \-d \*(aq\*(aq \-r filename; do
@


1.361
log
@MFC most things (see mksh.hts) to R50-stable; sync clog
@
text
@d1133 1
a1133 1
source=\*(aqPATH=$PATH:. \ecommand .'
@


1.360
log
@Implement the “FKSH functions have local scope for shell options” feature
for mksh but not lksh; bump to R51-alpha.

While here, tweak build scripts a bit, fixup MirBSD-specific Makefile
things, remove part of a comment that’s uninteresting.
@
text
@d1207 1
a1207 1
terminates the parent shell; flags are shared.
@


1.359
log
@document code to make mksh set ±U match the user locale from the environment

cf. http://thread.gmane.org/gmane.linux.debian.devel.bugs.general/1246729/focus=606
@
text
@d1207 1
a1207 1
terminates the parent shell.
d2906 4
a2922 4
.It
Shell options
.Pq Ic set Fl o
have local scope, i.e. changes inside a function are reset upon its exit.
@


1.358
log
@just another oksh rcsid-only sync (we bind to the Delete key since forever)
@
text
@d6484 18
@


1.357
log
@sync clog
@
text
@d2 1
a2 1
.\" $OpenBSD: ksh.1,v 1.158 2015/03/15 14:33:21 jmc Exp $
@


1.356
log
@oksh rcsid-only sync, plus a fix in the commit whose body I skipped
sync’ing, plus a bonus fix inspired by their commits in sh.1…
@
text
@a2905 4
.It
Bourne-style function definitions take precedence over alias dereferences
and remove alias definitions upon encounter, while aliases take precedence
over Korn-style functions.
@


1.355
log
@“local x=$1” is supposed to not field-split and so
@
text
@d2 1
a2 1
.\" $OpenBSD: ksh.1,v 1.157 2015/03/13 19:58:40 jmc Exp $
d1258 2
a1259 4
parameter is set to the
.Dv NULL
string, no field splitting is done; if the parameter is unset, the default
value of space, tab, and newline is used.
d1797 3
a1799 1
Search path for the
a1801 7
It works the same way as
.Ev PATH
for those directories not beginning with
.Ql /
in
.Ic cd
commands.
d1806 1
a1806 1
or contains an empty path, the current directory is not searched.
@


1.354
log
@oksh rcsid sync; we have no set -o csh-history, and the manpage changes are just wrong, so, a nop
@
text
@d1123 2
a1124 2
autoload=\*(aq\ebuiltin typeset \-fu\*(aq
functions=\*(aq\ebuiltin typeset \-f\*(aq
d1127 2
a1128 2
integer=\*(aq\ebuiltin typeset \-i\*(aq
local=\*(aq\ebuiltin typeset\*(aq
d1130 1
a1130 1
nameref=\*(aq\ebuiltin typeset \-n\*(aq
@


1.353
log
@• protect POSIX builtins and utilities from aliases, e.g:
  ‣ : → \:
  ‣ alias → \alias
    ⇒ except in some internally used cases, where we use \builtin alias
  ‣ command . → \command .
• protect Korn Shell builtins from aliases and functions, e.g:
  ‣ typeset → \builtin typeset
    ⇒ also unravels the “local” alias used
  ‣ print → \builtin print
• protect internally-used things from aliases
  ‣ “let]” is not a valid function name
  ‣ “set” is POSIX so we don’t expect anyone to override it in a function
• use “command -v” instead of “whence -p” (“which”) in most
  places; thanks izabera from #ed on IRC for pointing out
  that “command -v” is POSIX – except, “whence -p” a̲l̲w̲a̲y̲s̲ looks
  for an executable and shows its full pathname; “command -v”
  also resolves to aliases, functions and builtins, so only use
  it where it makes any sense (both never output to stderr)
• make most of dot.mkshrc work in the face of such aliases
  ‣ “ulimit -c” is used; this is not POSIX, and not portable;
    maybe we should make ulimit accept-and-ignore the most
    common limits even if the OS doesn’t use them?
• update list of builtin aliases in the manpage
@
text
@d2 1
a2 1
.\" $OpenBSD: ksh.1,v 1.156 2015/01/16 15:32:32 schwarze Exp $
@


1.352
log
@SECURITY: make “unset HISTFILE” really work

additionally, make “HISTFILE=” the same, document the truncation and
re-reading process’ further and already-known bugs; this needs work
@
text
@d1123 8
a1130 8
autoload=\*(aqtypeset \-fu\*(aq
functions=\*(aqtypeset \-f\*(aq
hash=\*(aqalias \-t\*(aq
history=\*(aqfc \-l\*(aq
integer=\*(aqtypeset \-i\*(aq
local=\*(aqtypeset\*(aq
login=\*(aqexec login\*(aq
nameref=\*(aqtypeset \-n\*(aq
d1132 4
a1135 3
r=\*(aqfc \-e \-\*(aq
stop=\*(aqkill \-STOP\*(aq
type=\*(aqwhence \-v\*(aq
d6518 1
a6518 1
.Nm mksh\ R50f
@


1.351
log
@it’s probably useful to define a marker like this, for automated patching,
e.g. in SuSE’s shells/mksh specfile, since they insist on a vendor patch,
as PLD does
@
text
@d1865 2
a1866 1
When assigned to, history is loaded from the specified file.
d1874 1
a1874 1
isn't set, no history file is used.
d6504 12
d6517 1
a6517 1
.Nm mksh\ R50e
@


1.350
log
@MFC everything except the igli-inspired changes to jobs.c and the
.Ox Ns -inspired integer base changes .
That means: bugfixes, plus the new arguments to exec (feature)
@
text
@d6506 1
@


1.349
log
@add getopts for exec (unbreaks “exec -- /bin/ls”) and steal -a and -c from ksh93
@
text
@d6504 1
a6504 1
.Nm mksh\ R51beta
@


1.348
log
@rcsid sync from obsd; misc sync; small improvements
• mksh testsuite no longer uses printf, again
• use MAXPATHLEN from <sys/param.h> as PATH_MAX fallback
@
text
@d6 1
a6 1
.\"	Thorsten Glaser <tg@@mirbsd.org>
d3379 2
d3384 14
d6504 1
a6504 1
.Nm mksh\ R50
@


1.347
log
@future directions
@
text
@d2 1
a2 1
.\" $OpenBSD: ksh.1,v 1.155 2014/12/09 15:37:13 schwarze Exp $
d5 1
a5 1
.\"		2010, 2011, 2012, 2013, 2014
d676 1
a676 1
.Op \*(Ba Ar pat
d679 2
a680 2
.Op ;; \*(Ba ;&\& \*(Ba ;\*(Ba\ \&
.Oc ... esac
d710 1
a710 1
.Ic case $foo { *) echo bar;; } .
d712 3
a714 1
The list terminators are:
@


1.346
log
@oksh sync RCSIDs only:
• expr.c long done already
• mksh.1 does not apply to us (no character classes)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.344 2014/10/07 15:30:12 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: October 7 2014 $
d2926 4
@


1.345
log
@bit more on POSIX
@
text
@d2 1
a2 1
.\" $OpenBSD: ksh.1,v 1.153 2014/08/17 07:15:41 jmc Exp $
@


1.344
log
@add a warning about not using tainted user input in arithmetics;
Stéphane Chazelas may write something more detailed we can then link to
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.343 2014/10/03 12:35:38 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: October 3 2014 $
d6460 11
d6489 2
d6494 1
@


1.344.2.1
log
@On the basis of what was uploaded to Debian jessie, open R50-stable branch:

MFC the following file changes:
• pull check.t,v up to 1.672 from 1.667
• pull dot.mkshrc,v up to 1.91 from 1.89
• pull edit.c,v up to 1.277 from 1.276
• pull exec.c,v up to 1.139 from 1.137
• pull lex.c,v up to 1.195 from 1.193
• pull mksh.1,v up to 1.347 from 1.344
MFC the following file revisions:
• apply funcs.c,v 1.263 and 1.264
MFC parts of the following file revisions:
• apply part of eval.c,v 1.160

This affects the following commits (ignoring KSH_VERSION/RCSID-only changes):

100544A426A79659D90 complete (check.t)
	printf is the wrong tool, use showargs
10054665F6C45FC6BEA complete (edit.c)
	Get rid of left over NULL elements in x_ftab as NELEM() is used instead
1005466644F12462973 complete (check.t)
	mark two ($@@/$* expansion-related) testcases as expected-fail
100546CE4F2089B6886 complete (check.t, lex.c)
	fix buffer overflow found by zacts from IRC (bad length calculation)
1005474F00E09321C83 partial
	(check.t) fix a testcase (sed could exit false, but we don't care)
	(eval.c) fix tilde_ok data type (only unsigned may shl constantly)
	(exec.c) fix shebang buf array accesses to always go via uint8_t *
100547506EF278BE75E complete (mksh.1)
	bit more on POSIX
100547506FA45A0AA5E complete (exec.c)
	fix shebang/magic decoding
100548F65AB2DD01C69 complete (check.t, lex.c)
	fix here string parsing problem
10054933E58295E7CFC complete (mksh.1)
	future directions
10054A9A4AF36B9DAFC complete (funcs.c)
	fix regression: empty line after “whence -v” with not found
10054A9ABCF7F3049A5 complete (funcs.c)
	better (whence builtin)
10054AC4B920847DDCC complete (dot.mkshrc)
	use arrname[*] to change type of all array elements
10054B1C263136FD7D2 complete (dot.mkshrc)
	typeset args are glob-prone

Finally, bump the version number.
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.347 2014/12/18 20:51:12 tg Exp $
.\" $OpenBSD: ksh.1,v 1.155 2014/12/09 15:37:13 schwarze Exp $
d77 1
a77 1
.Dd $Mdocdate: December 18 2014 $
a2925 4
.It
Shell options
.Pq Ic set Fl o
have local scope, i.e. changes inside a function are reset upon its exit.
a6459 11
.Pp
.Nm mksh
provides a consistent, clear interface normally.
This may deviate from POSIX in optional or opinionated places, such
as whether leading-digit-zero numbers should be interpreted as octal.
.Ic set \-o posix
will cause the shell (either
.Nm mksh
or
.Nm lksh )
to behave more like the standard expects.
a6477 2
.Ic set \-o posix
or
a6480 1
.Pp
@


1.344.2.2
log
@MFC:
• portability improvements and bugfixes (ptrdiff_t → size_t,
  newer GCC, older GNU bash, no printf(1) use in testsuite,
  rename tilde function, setugid ordering)
• drop old/useless asserts
• manpage fixes
• missing brace in syn.c
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.348 2015/01/25 15:23:42 tg Exp $
.\" $OpenBSD: ksh.1,v 1.156 2015/01/16 15:32:32 schwarze Exp $
d5 1
a5 1
.\"		2010, 2011, 2012, 2013, 2014, 2015
d77 1
a77 1
.Dd $Mdocdate: January 11 2015 $
d676 1
a676 1
.Op \*(Ba Ar pattern
d679 2
a680 2
.Ic terminator
.Oc No ... esac
d710 1
a710 1
.Ic case $foo { *) echo bar ;; } .
d712 1
a712 3
The list
.Ic terminator Ns s
are:
@


1.344.2.3
log
@MFC everything except the igli-inspired changes to jobs.c and the
.Ox Ns -inspired integer base changes .
That means: bugfixes, plus the new arguments to exec (feature)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.344.2.2 2015/01/25 15:35:49 tg Exp $
d6 1
a6 1
.\"	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
d77 1
a77 1
.Dd $Mdocdate: January 25 2015 $
a3378 2
.Op Fl a Ar argv0
.Op Fl c
a3381 14
This is currently absolute, i.e.\&
.Ic exec
never returns, even if the
.Ar command
is not found.
The
.Fl a
option permits setting a different
.Li argv[0]
value, and
.Fl c
clears the environment before executing the child process, except for the
.Ev _
variable and direct assignments.
d6488 1
a6488 1
.Nm mksh\ R50e
@


1.344.2.4
log
@MFC most of mksh-current into R50-stable:
• alias protection of local=\typeset
• use of “command -v” in dot.mkshrc
• oksh RCSID sync, where appropriate
• fix “read -n-1”
• SECURITY (privacy): make “unset HISTFILE” work
• strip_nuls() rewrite
• manpage fixes and improvements and replacement hook
• dead constant elimination
remaining differences:
• integer-base interpretation change
• default alias protection
• dot.mkshrc “enable” support
• j_waitj() refactoring
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.344.2.3 2015/03/01 15:43:03 tg Exp $
.\" $OpenBSD: ksh.1,v 1.158 2015/03/15 14:33:21 jmc Exp $
d77 1
a77 1
.Dd $Mdocdate: March 1 2015 $
d1128 1
a1128 1
local=typeset
a1132 1
source=\*(aqPATH=$PATH:. command .\*(aq
d1257 4
a1260 2
parameter is set to the empty string, no field splitting is done;
if it is unset, the default value of space, tab, and newline is used.
d1798 1
a1798 3
Like
.Ev PATH ,
but used to resolve the argument to the
d1801 7
d1812 1
a1812 1
or an empty string element, the current directory is not searched.
d1865 1
a1865 2
When assigned to or unset, the file is opened, history is truncated
then loaded from the file; subsequent new lines are appended.
d1873 1
a1873 1
is unset or empty, no history file is used.
a6502 12
The truncation process involved when changing
.Ev HISTFILE
does not free old history entries (leaks memory) and leaks
old entries into the new history if their line numbers are
not overwritten by same-numer entries from the persistent
history file; truncating the on-disc file to
.Ev HISTSIZE
lines has always been broken and prone to history file corruption
when multiple shells are accessing the file; the rollover process
for the in-memory portion of the history is slow, should use
.Xr memmove 3 .
.Pp
a6505 1
.\" with vendor patches from insert-your-name-here,
@


1.344.2.5
log
@MFC most things (see mksh.hts) to R50-stable; sync clog
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.344.2.4 2015/03/20 22:21:05 tg Exp $
.\" $OpenBSD: ksh.1,v 1.159 2015/03/25 12:10:52 jca Exp $
d77 1
a77 1
.Dd $Mdocdate: March 20 2015 $
d1207 1
a1207 1
terminates the parent shell; shell options are shared.
a6487 18
.Pp
For the purpose of
.Tn POSIX ,
.Nm mksh
supports only the
.Dq C
locale.
For users of UTF-8 locales, the following sh code makes the shell
match the locale:
.Bd -literal -offset indent
case ${KSH_VERSION:\-} in
*MIRBSD\ KSH*\*(Ba*LEGACY\ KSH*)
	case ${LC_ALL:\-${LC_CTYPE:\-${LANG:\-}}} in
	*[Uu][Tt][Ff]8*\*(Ba*[Uu][Tt][Ff]\-8*) set \-U ;;
	*) set +U ;;
	esac ;;
esac
.Ed
@


1.344.2.6
log
@MFC a bugfix in the manpage (x=([1]=x) is gone) and checksuite driver
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.344.2.5 2015/04/12 22:32:30 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: April 12 2015 $
d4043 17
@


1.343
log
@wording
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.342 2014/09/24 10:47:11 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: September 24 2014 $
d2533 6
@


1.342
log
@document HISTSIZE limit
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.341 2014/09/12 20:23:33 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: September 12 2014 $
d1878 1
a1878 1
Do not set this value as high as 1000000000 because otherwise,
d1880 1
a1880 1
cannot allocate enough memory for keeping the history and will not start.
@


1.341
log
@keeping up with the jones; RCS ID sync only:
we already fixed the list of builtins ages ago,
and don’t use weird unportable ioctl(2)s
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.340 2014/07/29 17:26:24 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: July 29 2014 $
d1878 3
@


1.340
log
@fix lies introduced in mksh R17, as part of the undergoing IFS investigation
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.338 2014/07/21 08:06:16 tg Exp $
.\" $OpenBSD: ksh.1,v 1.152 2014/02/12 16:28:13 schwarze Exp $
d77 1
a77 1
.Dd $Mdocdate: July 21 2014 $
@


1.339
log
@document symmetric remainder is used by % and how to get mathematic modulus
researched during trying to figure out wtf LP#1348614 item 3 i̲s̲
@
text
@d1235 2
a1236 4
whitespace and trailing
.Ev IFS
non-whitespace are stripped (i.e. no leading or trailing empty field
is created by it); leading
@


1.338
log
@make it clearer when a shell is interactive
spotted, and help with sentence structuring, by Andreas Buschka
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.337 2014/07/03 20:47:56 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: July 3 2014 $
d2714 9
a2722 2
Remainder; the result is the remainder of the division of the left argument by
the right.
d6446 2
a6447 2
and unsigned, with defined wraparound and sign of the result of a modulo
operation, even (defying POSIX) on 64-bit systems.
@


1.337
log
@fix manpage; From: Ypnose <ypnx@@mailoo.org>
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.336 2014/06/24 20:47:44 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: June 24 2014 $
d211 1
a211 1
A shell is
@


1.336
log
@bump
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.333 2014/06/06 23:50:22 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: June 6 2014 $
d2700 1
a2700 1
Less than or equal, greater than or equal, greater than.
@


1.335
log
@fix the “set ±p” issue for good
cf. http://blog.cmpxchg8b.com/2013/08/security-debianisms.html
@
text
@d6369 1
@


1.334
log
@oksh sync
@
text
@d250 1
a250 2
if this option is used
or if the real user ID or group ID does not match the
d259 3
d371 3
a373 9
.Pp
The suid profile probably should run
.Ic set +p
unless the shell was explicitly started with
.Fl p .
This isn't easily implemented but
.Pq just always run Ic set +p
a stopgap measure for:
.Pa http://blog.cmpxchg8b.com/2013/08/security\-debianisms.html
d6456 1
a6456 1
.Nm mksh\ R49
@


1.333
log
@doc issue (because no regression… even if it works in ksh93):
19:09 < nDuff> I'm reading the following behavior as contrary to the documentation. Could someone clarify?
19:09 < nDuff> $ words_pat='*@@(cat|mice)*'; [[ 'there is a {cat}' = $words_pat ]]; echo $?
19:09 < nDuff> 1
19:09 < nDuff> $ [[ 'there is a {cat}' = *@@(cat|mice)* ]]; echo $?
19:09 < nDuff> 0
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.332 2014/03/07 22:47:49 tg Exp $
.\" $OpenBSD: ksh.1,v 1.151 2014/01/28 14:16:59 jmc Exp $
d77 1
a77 1
.Dd $Mdocdate: March 7 2014 $
d6377 24
a6400 14
This shell is based upon the Public Domain Korn SHell.
The developer of mksh recognises the efforts of the pdksh authors,
who had dedicated their work into Public Domain, our users, and
all contributors, such as the Debian and OpenBSD projects.
.\"
.\" Charles Forsyth, author of the (Public Domain) Bourne Shell clone,
.\" which mksh is derived from, agreed to the following:
.\"
.\" In countries where the Public Domain status of the work may not be
.\" valid, its primary author hereby grants a copyright licence to the
.\" general public to deal in the work without restriction and permis-
.\" sion to sublicence derivates under the terms of any (OSI approved)
.\" Open Source licence.
.\"
@


1.332
log
@use termcap(5) names, not terminfo(5) names, in tput(1) examples,
since only the former work in FreeBSD/MidnightBSD

thanks to jilles, discovered by pekster, on IRC
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.331 2014/02/05 18:07:29 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: February 5 2014 $
d967 1
a967 1
expressions are patterns (e.g. the comparison
d979 1
@


1.331
log
@oksh sync, mostly

• keep the Kochan book at 3rd edition because 4th is not a paper book

• keep POSIX at 1993 because I’m actually unable to find an ISBN or
  other bib ref for the 2013 version…
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.330 2014/01/21 20:58:32 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: January 21 2014 $
d2041 1
a2041 1
PS1="$x$(print \e\er)$x$(tput smso)$x\e$PWD$x$(tput rmso)$x\*(Gt "
@


1.330
log
@hint more on vi mode limitations; requested by Philipp von Bassewitz
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.329 2014/01/11 18:09:41 tg Exp $
.\" $OpenBSD: ksh.1,v 1.149 2013/12/18 13:53:11 millert Exp $
d77 1
a77 1
.Dd $Mdocdate: January 11 2014 $
d6331 5
a6335 5
.%V "Revised Edition"
.%D 1990
.%I "Hayden"
.%P "xi\ +\ 490 pages"
.%O "ISBN 978\-0\-672\-48448\-3 (0\-672\-48448\-X)"
d6339 1
a6339 1
.%B "\\*(tNIEEE\\*(sP Standard for Information Technology \*(en Portable Operating System Interface (POSIX)"
@


1.329
log
@• use BAFH for hash ipv NZAAT
• prep for release
• fix minor nits in manpage and tests
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.328 2014/01/05 21:57:27 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: January 5 2014 $
d4254 3
d5696 1
@


1.328
log
@• fix ${12345678901234567890} segfault (OOB access / integer overflow)
  ‣ not like oksh did, but using mksh’s built-in features
• handle suggested __pure additions
• revert cid 1004F7F096867C83CF0
  ‣ always use our wcwidth code
  ‣ only use our strlcpy code if none found
• fix a couple of gcc-snapshot and clang/scan-build warnings
• mksh R49~rc1
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.326 2013/12/18 16:54:20 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: December 18 2013 $
d1696 4
a1699 11
.It Xo
.Pf ${ Ar name
.Pf @@# Ns Oo Ar seed Oc Ns }
.Xc
The internal hash of the expansion of
.Ar name ,
with an optional (defaulting to zero)
.Op Ar seed .
At the moment, this is NZAAT (a 32-bit hash based on
Bob Jenkins' one-at-a-time hash), but this is not set.
This is the hash the shell uses internally for its associative arrays.
d3629 1
a3629 1
.It let]
@


1.327
log
@oksh bumped array indicēs again, INT_MAX this time, still less than mksh…
@
text
@d5 1
a5 1
.\"		2010, 2011, 2012, 2013
d374 3
a376 1
This isn't easily implemented but a stopgap measure for:
d6452 1
a6452 1
.Nm mksh\ R48+CVS
@


1.326
log
@make octal in arithmetics better greppable (cf. Debian #732509)

XXX maybe make an entire .Ss or .Sh out of delta against posix? other sh?
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.325 2013/11/30 18:16:54 tg Exp $
.\" $OpenBSD: ksh.1,v 1.148 2013/09/04 15:49:18 millert Exp $
d77 1
a77 1
.Dd $Mdocdate: November 30 2013 $
@


1.325
log
@note that even set -o noclobber can be coërced into dropping O_EXCL by a TOCTOU
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.324 2013/11/17 22:24:06 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: November 17 2013 $
d2601 1
a2601 1
leads to the shell interpreting it as base-8 integer in
@


1.324
log
@mention negative history numbers (thanks odc:#!/bin/mksh for noticing)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.320 2013/08/10 14:11:39 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: August 10 2013 $
d4047 6
@


1.323
log
@drop RLIMIT_LOCKS completely, it was for early Linux 2.4 versions only
@
text
@d3421 1
@


1.322
log
@integrate latest changes from oksh: Wed Sep 4 15:49:19 2013 UTC by millert

Add a proper suspend builtin that saves/restores the tty and pgrp
as needed instead of an alias that just sends SIGSTOP.  Login shells
may be suspended if they are not running in an orphan process group.
@
text
@d4898 1
a4898 1
.Op Fl aBCcdefHiLlMmnOPpqrSsTtVvw
a4948 2
.It Fl L Ar n
Control flocks; documentation is missing.
@


1.321
log
@SECURITY: Unbreak “set +p”, broken by OpenBSD ksh change.

TODO: I am seriously considering following Chet and changing
the way this works, by explicitly dropping privs unless the
shell is run with -p. Every other shell does it like mksh,
except Heirloom sh, which on the other hand doesn’t know any
explicit set -p or set +p (though it doesn’t know set +foo
for any foo either).

┌──┤ QUESTION: Do we need the ability to do this:
│ tg@@blau:~ $ ./suidmksh -p -c 'whoami; set +p; whoami'
│ root
│ tg

If not, I’m seriously considering to drop set ±p as well,
only parse -p on the command line, with +p being the default,
and dropping FPRIVILEGED.

Thanks to RT for noticing and jilles for initial follow-up
discussion, as well as Chet Ramey for doing the sane/secure
thing instead of following Debian.
@
text
@d2 1
a2 1
.\" $OpenBSD: ksh.1,v 1.147 2013/06/13 19:43:09 millert Exp $
a1132 1
suspend=\*(aqkill \-STOP $$\*(aq
d2962 3
a2964 2
.Ic rename , sleep , test , true ,
.Ic ulimit , umask , unalias , whence
d4325 10
d6445 1
a6445 1
.Nm mksh\ R48c
@


1.320
log
@try to be even more clear
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.319 2013/08/10 13:44:31 tg Exp $
d369 7
d6435 1
a6435 1
.Nm mksh\ R48
@


1.319
log
@reduce amount of .bss memory needed; initialise via AEDIT at x_init
or even first run of x_vi
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.318 2013/07/21 18:47:21 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: July 21 2013 $
d6381 5
@


1.318
log
@Fix most “set -x” problems (LP#1179287)

• “set -x” manually (cmdline too) snapshots fd#2 now
• “set -o inherit-xtrace” introduced; default still enabled
• reverted iodup printing to pre-R45 behaviour
• made Flag(FXTRACE) a proper state machine
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.316 2013/06/03 22:28:06 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: June 3 2013 $
d6370 11
d6395 2
a6396 1
Thus, variable assignments inside them fail.
d6423 1
a6423 1
.Nm mksh\ R47
@


1.317
log
@partial merge and full RCS ID sync with oksh

merged:
• new regression tests
• check.pl (tests/th) better tmpfile handling
• exec.c 1.50: POSIX specifies that for an AND/OR list,
  only the last command's exit status matters for "set -e"
• ksh.1 1.147: document the above
• eval.c 1.39: “Make $(< /nonexistent) have the same behaviour
  as $(cat /nonexistent) wrt. errors (do not unwind and do not
  treat this as fatal if set -e is used).”
  ‣ additionally make shf_open() return errno and actually show
    the error message from the system
• regression-39 test: remove the “maybe” marker
  ‣ but decide on correct POSIX behaviour

already been fixed in mksh:
• check.pl (tests/th) exit 1 if tests fail

not merged:
• main.c 1.52: run traps in unwind() before exiting;
  I’m pretty sure this is already working as-should in mksh
• eval.c 1.38: “Commands executed via `foo` or $( bar ) should
  not inherit "set -e" status.” As discussed in IRC, this is
  just plainly WRONG.
@
text
@d4168 5
@


1.316
log
@support n̲o̲t̲ fork(2)ing for -T (by prepending the tty with ‘!’); especially useful on Linux since our own setsid(2) is more annoying; gets rid of the need for oneit_lite and similar hacks; WARNING: also removes chown/chmod on the tty!
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.313 2013/05/02 15:33:30 tg Exp $
.\" $OpenBSD: ksh.1,v 1.146 2013/03/18 11:10:52 mpi Exp $
d77 1
a77 1
.Dd $Mdocdate: May 2 2013 $
a4048 2
.Ic && ,
.Ic \*(Ba\*(Ba ,
d4052 5
@


1.315
log
@implement VALSUBs
@
text
@d160 5
a164 1
.Op Fl T Ar /dev/ttyCn \*(Ba \-
d302 1
a302 1
.It Fl T Ar tty
d308 11
a318 1
Superuser only.
d320 4
a323 2
.Ar tty
is a dash, detach from controlling terminal (daemonise) instead.
d6403 1
a6403 1
.Nm mksh\ R46
@


1.314
log
@implement set -o pipefail
@
text
@d1185 9
@


1.313
log
@for Yofuh: implement Emacs mode PgUp as Vi insert mode CurUp
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.312 2013/04/27 19:16:25 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: April 27 2013 $
d517 3
a519 1
The exit status of a pipeline is that of its last command.
d4182 3
@


1.312
log
@sync and be even more explicit

XXX some day, write the *precise* delta of MKSH_LEGACY_MODE into lksh.1
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.311 2013/04/27 18:50:24 tg Exp $
d6038 5
@


1.311
log
@after enough complaints by POSIX sh advocates,
• make parsing numbers with leading digit-zero as octal independent of
  mksh/lksh and dependent on set -o posix; adjust manpages to match
• warn about these changes and why mksh uses 32-bit consistent arithmetics
  and point people to lksh for host-long undefined-behaviour arithmetics
• point out, explicitly, that it is *legal* for the operating environment
  to make 'print $((2147483647 + 1))' (on a 32-bit system; adjust for a
  64-bit system) to run 'rm -rf ~ /' instead
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.310 2013/04/26 21:22:47 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: April 26 2013 $
d6330 3
a6332 1
It has a different scope model from
d6336 3
@


1.310
log
@Oh well… this looks well, is done done, and gcc-snapshot doesn’t complain:
• correct order of built-in commands; use POSIX special versus “all others”
  plus “keeps assignments” as distinction, no longer play POSIX regular vs.
  others game; sync manpage
• fix LP#1156707: map (( internally to “let]” which is no valid function
  name and so can’t be overridden but is unlikely to be used otherwhere
  and not strictly permitted (by POSIX) anyway
• we do not need -Wno-overflow any more, either
• bump to R45
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.309 2013/04/14 13:36:53 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: April 14 2013 $
d2566 8
a2573 3
It is discouraged to prefix numbers with a sole zero
.Pq Sq 0 ,
because some shells may interpret them as base-8 integers.
d6342 10
d6363 1
a6363 1
.Nm mksh\ R45
@


1.309
log
@another intermediate step/commit to get arithmetics right:

do the correct operations for comparisons (just keep using the
signed/unsigned switch from bivui for them), division (by working
on absolutes and adding the sign at the end), modulo (stupidly by
divising in signed, multiplying and subtracting, to get the sign
of the result right)

also adds rotation

XXX to check: do we need to AND before assigning the result in division?
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.308 2013/03/24 21:34:14 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: March 24 2013 $
d2771 1
a2771 2
are searched after special built-in commands, before regular and
non-regular built-ins, and before the
d2885 2
a2886 2
assignments, the type of command is determined: a special built-in, a
function, a regular built-in, or the name of a file to execute found using the
d2902 1
a2902 1
special or regular:
d2904 1
a2904 1
POSIX special commands
d2909 1
a2909 1
.Ic trap , unset , wait
d2913 1
a2913 1
special commands
d2915 1
a2915 1
.Ic builtin , global , times , typeset
d2917 1
a2917 2
Very special commands
.Pq non-POSIX
d2919 2
a2920 5
.Ic alias , readonly , set , typeset
.Pp
POSIX regular commands
.Pp
.Ic alias , bg , cd , command ,
d2922 4
a2925 16
.Ic jobs , kill , read , true ,
.Ic umask , unalias
.Pp
Additional
.Nm
regular commands
.Pp
.Ic \&[ , chdir , bind , cat ,
.Ic echo , let , mknod , print ,
.Ic pwd , realpath , rename , sleep ,
.Ic test , ulimit , whence
.Pp
In the future, the additional
.Nm
special and regular commands may be treated
differently from the POSIX special and regular commands.
d2953 4
d3511 4
d3594 4
@


1.308
log
@RCSID sync w/ oksh; whitespace (KNF)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.307 2013/03/24 15:01:49 tg Exp $
d2528 1
a2528 1
= *= /= %= += \-= \*(Lt\*(Lt= \*(Gt\*(Gt= &= \*(ha= \*(Ba=
d2535 2
a2536 2
\*(Lt \*(Lt= \*(Gt= \*(Gt
\*(Lt\*(Lt \*(Gt\*(Gt
d2622 2
a2623 2
.No *= /= += \-= \*(Lt\*(Lt=
.No \*(Gt\*(Gt= &= \*(ha= \*(Ba=
d2669 1
a2669 1
.It \*(Lt= \*(Gt= \*(Gt
d2673 5
a2685 1
The sign of the result is unspecified if either argument is negative.
d2699 1
d6353 1
a6353 1
.Nm mksh\ R44
@


1.307
log
@disable parsing of &> as GNU bash iop if -o posix or -o sh, based on IRC discussion where jilles(IIRC) pointed out it breaks existing valid scripts
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.306 2013/03/24 00:56:23 tg Exp $
.\" $OpenBSD: ksh.1,v 1.145 2013/01/17 21:20:25 jmc Exp $
@


1.306
log
@• let mksh “set -x” print whole TCOM trees
• plug some memory leaks in debug (“set -x”) and warning paths while here
• one from Florian (friend of Natureshadow) for WTF
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.305 2013/02/19 18:45:20 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: February 19 2013 $
d2437 7
@


1.305
log
@one more int → bool; mention “set -o sh” may (on raare OSes) be enabled
automatically (and it differs between targets); test MidnightBSD 0.1 ash
compat code and adjust the testsuite so it passes with it enabled
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.304 2013/02/11 17:17:59 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: February 11 2013 $
d2040 3
d4103 1
a4103 1
Print commands and parameter assignments when they are executed, preceded by
d6341 1
a6341 1
.Nm mksh\ R43
@


1.304
log
@• Document invalid ${a/b/c} patterns in manpage (Debian #698678)
• add speed hints and misc improvements; bump version
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.302 2013/01/19 17:27:05 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: January 19 2013 $
d6338 1
a6338 1
.Nm mksh\ R42
d6342 5
d6359 3
a6361 1
.Pq Port 6697 SSL, 6667 unencrypted .
@


1.303
log
@sync description for funsubs
@
text
@d1611 1
d1623 1
a1623 1
Inefficiently implemented.
d1668 1
a1668 1
.Ar seed .
d2264 3
d4495 4
d6338 1
a6338 1
.Nm mksh\ R41
@


1.302
log
@rcsid-only sync
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.301 2012/11/30 19:25:05 tg Exp $
d5 1
a5 1
.\"		2010, 2011, 2012
d77 1
a77 1
.Dd $Mdocdate: November 30 2012 $
d1174 8
@


1.301
log
@implement tty tracking and bump to R41 for feature completeness

• tty_fd is now never closed
• new tty_hasstate tracks tty_state (cf. thread around
  http://article.gmane.org/gmane.os.miros.mksh/79 and PLD bug)
• as users requested, importing COLUMNS or LINES from the environment
  now removes its special-ness as does unsetting it
• otherwise, setting COLUMNS or LINES is honoured until the next SIGWINCH
  arrives or change_winsz is otherwise run (e.g. before displaying the
  prompt in the interactive command line editing modes)
• SIGWINCH is now honoured before each reading of $COLUMNS and $LINES too
• change the Uhr to match – it no longer calls stty(1) ☺
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.300 2012/11/26 22:49:49 tg Exp $
.\" $OpenBSD: ksh.1,v 1.144 2012/07/08 08:13:20 guenther Exp $
d77 1
a77 1
.Dd $Mdocdate: November 26 2012 $
@


1.300
log
@use EPOCHREALTIME as variable, somewhat compatible with “zmodload zsh/datetime”, as ormaaj belatedly found out
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.299 2012/11/20 18:25:12 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: November 20 2012 $
d1788 1
a1788 1
is non-zero and sane enough; similar for
d1796 2
d1885 2
d3672 1
a3672 1
and I/O code as the rest of
@


1.299
log
@• update documentation and references
• say R41, we’re almost feature-complete, and the missing one
  will not require documentation updates
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.296 2012/10/22 20:19:14 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: October 22 2012 $
d1883 1
a1883 1
.It Ev MKSH_UNIXTIME
@


1.298
log
@add MKSH_UNIXTIME
@
text
@d178 18
a195 1
.Pp
d2796 2
a2797 1
uses static scoping (one global scope, one local scope per function), whereas
d2841 1
a2841 1
In the future, the following differences will also be added:
d6209 2
d6318 1
a6318 1
.Nm mksh\ R40+CVS
@


1.297
log
@introduce $BASHPID for ormaaj from #ksh
@
text
@d1866 10
@


1.296
log
@bring back ${ foo;} sans dot.mkshrc patch, using a temporary file, and as experimental feature
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.295 2012/10/21 17:42:51 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: October 21 2012 $
d1744 2
@


1.295
log
@point out the miros-mksh@@ mailing list, thanks Andrew Kudryashov
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.294 2012/10/14 14:04:05 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: October 14 2012 $
d1149 2
d1154 3
d1234 2
@


1.294
log
@fix default for HISTSIZE as pointed out by Andrew Kudryashov (thanks!)

XXX still, only the !MKSH_SMALL case is handled in the manpage
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.293 2012/08/17 18:34:22 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: August 17 2012 $
d6289 1
a6289 1
.Aq miros\-discuss@@mirbsd.org
@


1.293
log
@remove ${ foo;} from mksh again due to buffering issues jilles found
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.292 2012/08/03 18:34:31 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: August 3 2012 $
d1817 1
a1817 1
The default is 500.
@


1.292
log
@do not advertise printf(1)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.291 2012/07/30 21:37:13 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: July 30 2012 $
a1148 2
or (executed in the current environment)
.Pf ${\ \& Ar command Ns \&;}
a1151 3
Parsing the current-environment command substitution requires a space,
tab or newline after the opening brace and that the closing brace be
recognised as a keyword (i.e. is preceded by a newline or semicolon).
a1228 2
and
.Pf ${\ \& Ar command Ns \&;}
@


1.291
log
@implement ksh93 feature ${ foo;}
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.289 2012/07/20 23:22:11 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: July 20 2012 $
d2875 2
a2876 2
.Ic printf , pwd , realpath , rename ,
.Ic sleep , test , ulimit , whence
a3242 2
or the much slower POSIX utility
.Ic printf
d3634 3
a3636 3
Approximately the same as the utility
.Ic printf ,
except that it uses the same
d3643 1
a6152 1
.Xr printf 1 ,
@


1.290
log
@another rcsid-only sync
@
text
@d1148 4
a1151 1
.Pf \` Ns Ar command Ns \` ;
d1154 3
d1234 2
d1974 1
a1974 1
Due to pressure from David G. Korn,
@


1.289
log
@do implement quoting, as ${foo@@Q} though, as hommage at mirmake
dedicate this “release” to Andi
and use tomorrow’s (UTC) day for version, to cover up my debian fuckup
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.288 2012/06/29 08:11:45 tg Exp $
.\" $OpenBSD: ksh.1,v 1.143 2012/06/19 16:41:00 jmc Exp $
d77 1
a77 1
.Dd $Mdocdate: June 29 2012 $
@


1.288
log
@lksh: mention IRC and ML; mksh: mention SSL
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.287 2012/06/28 20:05:09 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: June 28 2012 $
d1638 5
@


1.287
log
@hackish work-around the lexer to make alias definitions in mksh -c
work (Closes: #517009) and mention in the manpage why they sometimes
do not work (doing so for COMSUBs is not worth the effort)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.286 2012/06/25 16:22:59 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: June 25 2012 $
d6290 2
a6291 1
.Pa irc.freenode.net:6667 .
@


1.286
log
@sync w/ oksh
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.285 2012/04/22 21:50:32 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: April 22 2012 $
d1071 6
@


1.285
log
@after discussion with ciruZ, switch mksh from NZAT to NZAAT fully
to get rid of the bias introduced by making the hash never zero

… he also pointed out a memory (heap) usage optimisation… which
may impact code size a bit though as I’d need to pass an additional
argument on hashtable function calls… or, forgo the benefit of not
having to pointer-align the key in the structure, which can be as
much as 3/7 octets per item, heap storage… OTOH the saved space is
4/8 octets per not-allocated item, possibly some code (use of an
multiply-add opcode), but the function call overhead/cost would
possibly be quite a bit… I guess I’ll have to measure…
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.284 2012/04/14 12:51:34 tg Exp $
.\" $OpenBSD: ksh.1,v 1.141 2011/09/03 22:59:08 jmc Exp $
d77 1
a77 1
.Dd $Mdocdate: April 14 2012 $
d2510 1
@


1.285.2.1
log
@RCSID sync w/ oksh; whitespace (KNF)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.285 2012/04/22 21:50:32 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: April 22 2012 $
a5445 1
.\"XXX update these when multikey binds are implemented
@


1.284
log
@update to latest portmdoc; apply the Lt/Gt/Ba rule again
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.283 2012/04/07 11:19:49 tg Exp $
d77 1
a77 1
.Dd $Mdocdate: March 15 2010 $
d1629 1
a1629 1
At the moment, this is NZAT (a never-zero 32-bit hash based on
@


1.283
log
@drop all deprecated code, you have been warned
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.282 2012/03/23 23:25:27 tg Exp $
d31 2
d77 1
a77 1
.Dd $Mdocdate: March 23 2012 $
d79 1
a79 1
.\" Check which macro package we use
d82 2
d160 1
a160 1
.Op Fl T Ar /dev/ttyCn | \-
d3647 1
a3647 1
.Op Fl A | Fl a
d3766 1
a3766 1
	print \-r \-\- "found <${filename#./}>"
@


1.282
log
@huh, I thought I had extended ${parameter@@#hash} already; make it so now,
but not yet things like ${parameter@@Fi} (1 if integer, 0 otherwise), etc.
also bump patchlevel and © years in recently changed files
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.281 2011/12/10 13:34:16 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: December 10 2011 $
d2483 2
a2484 1
.Sq 0x Pq case-insensitive
d2488 3
a2490 4
Base-8 integers may be specified by prefixing them with
.Sq 0 ,
but this is deprecated and will be removed in the next version of
.Nm .
d3356 1
a3356 1
This command is usually accessed with the predefined
a3357 3
or (deprecated; will be removed RSN) by prefixing an interactive mode input line with
.Sq \&!
.Pq wbx extension .
@


1.281
log
@• finally, the code and manual page text to deprecate, and code to not
  handle any more, octal 010 style constants, as promised
• overhaul the manpage re. arithmetic expressions, make the guarantees
  mksh code has explicitly, precisely, clear
• to reduce burden of the compiler, getint() now operates on mksh_uari_t
  internally; it already applied the sign after operation, anyway (C99
  guarantees wraparound on unsigned types, but for signed types we need
  specific compiler support; apparently, this comes from hardware limits)
• use const and shuffle order of locals around while here
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.280 2011/12/03 00:09:15 tg Exp $
d5 1
a5 1
.\"		2010, 2011
d75 1
a75 1
.Dd $Mdocdate: December 3 2011 $
d1617 4
a1620 1
.It Pf ${ Ns Ar name Ns @@#}
d1622 3
a1624 1
.Ar name .
@


1.280
log
@add note that mksh's global is not php/python's
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.279 2011/11/30 21:34:14 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: November 30 2011 $
d2468 2
a2469 8
Integer constants and expressions are calculated using the
.Vt mksh_ari_t
.Po if signed Pc
or
.Vt mksh_uari_t
.Po if unsigned Pc
type, and are limited to 32 bits.
Overflows wrap silently.
d2477 3
a2479 14
Additionally,
integers may be prefixed with
.Sq 0X
or
.Sq 0x
(specifying base 16), similar to
.At
.Nm ksh ,
or
.Sq 0
(base 8), as an
.Nm
extension, in all forms of arithmetic expressions,
except as numeric arguments to the
d2481 5
a2485 1
command.
@


1.279
log
@rewrite funcs.c:c_test(), i.e. test(1) and [(1), to follow POSIX and XSI
in the cases where they are defined unambiguously; bug reported by
Jilles Tjoelker in <20111129232526.GC14357@@stack.nl> due to a report
by Stefano Lattarini on bug-autoconf

in the ambiguous case, I stick to traditional pdksh behaviour, which means
	test ! a = b	vs.	test a = b
and
	test ! a -o b	vs.	test a -o b
behave different from each other (in the second case, the NOT operator
binds strong; POSIX demands a reduction to 3 arguments and negating
that result in the first case), so we're at two known not-ok in the
FreeBSD® testsuite. (81 and 82 in regress.sh,v 1.3)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.278 2011/11/11 22:14:02 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: November 11 2011 $
d4605 8
@


1.278
log
@deprecate the UGLY input line beginning with ! hack
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.277 2011/11/11 22:10:52 tg Exp $
d3552 1
a3552 1
(named pipe).
d4299 2
a4300 1
is a named pipe.
d4398 3
a4400 3
Note that some special rules are applied (courtesy of POSIX)
if the number of
arguments to
d4402 1
a4402 1
or
d4406 8
a4413 8
arguments can be stripped such that only one argument remains then a string
length test is performed (again, even if the argument is a unary operator); if
leading
.Ql \&!
arguments can be stripped such that three arguments remain and the second
argument is a binary operator, then the binary operation is performed (even
if the first argument is a unary operator, including an unstripped
.Ql \&! ) .
@


1.277
log
@fix: "foo" in nroff is quoted, \&"foo" contains literal gänsebeinchen
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.276 2011/10/24 19:41:11 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: October 24 2011 $
d3366 1
a3366 1
or by prefixing an interactive mode input line with
@


1.276
log
@document “export -” accident found by Snader_LB
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.275 2011/10/07 19:51:29 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: October 7 2011 $
d926 1
a926 1
$ [[ $bar = "$baz" ]]; echo $?
d4434 1
a4434 1
.Dq if \&[[ $foo = "$bar" \&]]
@


1.275
log
@remaining sync with oksh (pointless rcsid, no code diff)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.274 2011/09/13 18:46:46 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: September 13 2011 $
d3297 5
a3301 4
If no parameters are specified, the names of all parameters with the export
attribute are printed one per line, unless the
.Fl p
option is used, in which case
d3303 1
a3303 1
commands defining all exported parameters, including their values, are printed.
@


1.274
log
@Message-ID: <CAOw7k5gBmt+WqzQxgK8xrjMvCh3iBHcQ7cU78cy1WbzRf8d_Hg@@mail.gmail.com>
just to make sure, got a copyright licence for this
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.272 2011/07/16 17:08:20 tg Exp $
.\" $OpenBSD: ksh.1,v 1.140 2011/04/23 10:14:59 sobrado Exp $
d75 1
a75 1
.Dd $Mdocdate: July 16 2011 $
@


1.273
log
@dict.leo.org says this is correct
@
text
@d6228 10
@


1.272
log
@‣ merge from mksh R40-stable
move /etc/{,suid_}profile to /system/etc/ for Android (but do not make
the location of /etc configurable); rewrite manpage section about
/etc/{,suid_}profile, .profile, .mkshrc
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.271 2011/07/16 17:08:04 tg Exp $
d929 1
a929 1
Perhaps surprisingly, the first comparision succeeds,
@


1.271
log
@‣ merge from mksh R40-stable
first part of long-overdue manpage improvements
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.270 2011/07/16 17:07:48 tg Exp $
d204 3
a206 3
parameter or
.Pa $HOME/.mkshrc
(see below).
d218 3
a220 6
the shell is assumed to be a login shell and the shell reads and executes
the contents of
.Pa /etc/profile
and
.Pa $HOME/.profile
if they exist and are readable.
a230 10
A privileged shell does not process
.Pa $HOME/.profile
nor the
.Ev ENV
parameter or
.Pa $HOME/.mkshrc
(see below).
Instead, the file
.Pa /etc/suid_profile
is processed.
d233 2
a312 19
If the
.Ev ENV
parameter is set when an interactive shell starts (or, in the case of login
shells, after any profiles are processed), its value is subjected to
parameter, command, arithmetic, and tilde
.Pq Sq \*(TI
substitution and the resulting file
(if any) is read and executed.
If the
.Ev ENV
variable is unset or empty, the file
.Pa $HOME/.mkshrc
is read and processed like above instead, leaving
.Ev ENV
unchanged.
This processing does not occur if
.Ev ENV
is set to a non-existing filename.
.Pp
d319 13
d6102 1
a6102 1
.Bl -tag -width "/etc/suid_profileXX" -compact
d6104 5
a6108 5
User's startup script (interactive shells).
Used only if
.Ev ENV
is unset or empty.
The location can be changed at compile time (for embedded systems).
d6110 3
a6112 1
User's login profile.
d6114 2
a6115 1
System login profile.
d6119 2
a6120 1
Privileged shell profile.
d6122 4
@


1.270
log
@‣ merge from mksh R40-stable
document the unportability of the echo utility;
arekm's non-bug report inspired this
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.269 2011/07/07 21:24:53 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: July 7 2011 $
d179 1
a179 1
.Bl -tag -width Ds
d630 1
a630 1
.Bl -tag -width Ds
d685 9
a693 7
The list terminators are
.Ql ;;
(terminate after the list),
.Ql ;&\&
(fall through into the next list) and
.Ql ;\*(Ba\&
(evaluate the remaining pattern-list tuples).
d875 2
d878 1
a878 3
reserved word is described in the
.Sx Command execution
section.
d895 1
a895 1
.Bl -bullet -offset indent
d1656 1
a1656 1
.Bl -tag -width "1 ... 9"
d1694 1
a1694 1
.It Ev 1 No ... Ev 9
d1702 2
a1703 1
All positional parameters (except parameter 0) i.e. $1, $2, $3, ...
d1920 1
a1920 1
(note that ${HOSTNAME:=$(hostname \-s)} and the
d1926 1
a1926 1
PS1=\*(aq${USER:=$(id \-un)}\*(aq"@@${HOSTNAME:=$(hostname \-s)}:\e$PWD $(
d3905 1
a3905 1
.Bl -tag -width 15n
d3945 1
a3945 1
.It Fl a \*(Ba Ic allexport
d3947 1
a3947 1
.It Fl b \*(Ba Ic notify
d3952 1
a3952 1
.It Fl C \*(Ba Ic noclobber
d3955 1
a3955 1
.It Fl e \*(Ba Ic errexit
d3970 1
a3970 1
.It Fl f \*(Ba Ic noglob
d3972 1
a3972 1
.It Fl h \*(Ba Ic trackall
d3977 1
a3977 1
.It Fl i \*(Ba Ic interactive
d3981 1
a3981 1
.It Fl k \*(Ba Ic keyword
d3983 1
a3983 1
.It Fl l \*(Ba Ic login
d3987 1
a3987 1
.It Fl m \*(Ba Ic monitor
d3989 1
a3989 1
.It Fl n \*(Ba Ic noexec
d3993 1
a3993 1
.It Fl p \*(Ba Ic privileged
d3999 1
a3999 1
.It Fl r \*(Ba Ic restricted
d4003 1
a4003 1
.It Fl s \*(Ba Ic stdin
d4017 1
a4017 1
.It Fl U \*(Ba Ic utf8\-mode
d4040 1
a4040 1
.It Fl u \*(Ba Ic nounset
d4051 1
a4051 1
.It Fl v \*(Ba Ic verbose
d4053 1
a4053 1
.It Fl X \*(Ba Ic markdirs
d4057 1
a4057 1
.It Fl x \*(Ba Ic xtrace
d4061 1
a4061 1
.It Ic bgnice
d4063 1
a4063 1
.It Ic braceexpand
d4067 1
a4067 1
.It Ic emacs
d4070 1
a4070 1
.It Ic gmacs
d4074 1
a4074 1
.It Ic ignoreeof
d4081 1
a4081 1
.It Ic nohup
d4093 1
a4093 1
.It Ic nolog
d4097 1
a4097 1
.It Ic physical
d4123 1
a4123 1
.It Ic posix
d4132 1
a4132 1
.It Ic sh
d4146 1
a4146 1
.It Ic vi
d4150 1
a4150 1
.It Ic vi\-esccomplete
d4153 1
a4153 1
.It Ic vi\-tabcomplete
d4157 1
a4157 1
.It Ic viraw
d5627 1
a5627 1
.Bl -tag -width 10n
@


1.269
log
@introduce MKSH_NO_EXTERNAL_CAT skipping the “call /bin/cat if we have an
option” nonsense, intended for Android, Plan 9, and other systems which
honour that cat -v is deemed harmful
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.268 2011/07/06 22:21:58 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: July 6 2011 $
d3238 7
d3637 1
a3637 1
.Xr printf 1 ,
d6137 1
@


1.269.2.1
log
@time to open the mksh R40-stable branch:
• bring back deprecated {build options,set ±o arc4random,OAAT1 internal hash}
• change version number in TFM
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.269 2011/07/07 21:24:53 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: July 7 2011 $
d1635 2
a1636 2
At the moment, this is OAAT1 (Bob Jenkins' one-at-a-time hash with
an initialisation value of 0x00000100), this will change for R41.
a4050 5
.It Ic arc4random
Deprecated, will be removed in
.Nm
R41.
Do not use, emits a warning to stderr.
d6253 1
a6253 1
.Nm mksh\ R40b
@


1.269.2.2
log
@document the unportability of the echo utility;
arekm's non-bug report inspired this
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.269.2.1 2011/07/07 21:42:15 tg Exp $
a3237 7
.Em Warning:
this utility is not portable; use the Korn shell builtin
.Ic print
or the much slower POSIX utility
.Ic printf
instead.
.Pp
d3630 1
a3630 1
.Ic printf ,
a6134 1
.Xr printf 1 ,
@


1.269.2.3
log
@first part of long-overdue manpage improvements
@
text
@d179 1
a179 1
.Bl -tag -width XcXstring
d630 1
a630 1
.Bl -tag -width 4n
d685 7
a691 9
The list terminators are:
.Bl -tag -width 4n
.It Ql ;;
Terminate after the list.
.It Ql ;&\&
Fall through into the next list.
.It Ql ;\*(Ba\&
Evaluate the remaining pattern-list tuples.
.El
d873 2
d876 1
a876 3
section describes the
.Ic time
reserved word.
d893 1
a893 1
.Bl -bullet
d1654 1
a1654 1
.Bl -tag -width "1 .. 9"
d1692 1
a1692 1
.It Ev 1 No .. Ev 9
d1700 1
a1700 2
All positional parameters (except 0), i.e. $1, $2, $3, ...
.br
d1917 1
a1917 1
(note that ${HOSTNAME:=$(hostname)} and the
d1923 1
a1923 1
PS1=\*(aq${USER:=$(id \-un)}\*(aq"@@${HOSTNAME:=$(hostname)}:\e$PWD $(
d3902 1
a3902 1
.Bl -tag -width 3n
d3942 1
a3942 1
.It Fl a \*(Ba Fl o Ic allexport
d3944 1
a3944 1
.It Fl b \*(Ba Fl o Ic notify
d3949 1
a3949 1
.It Fl C \*(Ba Fl o Ic noclobber
d3952 1
a3952 1
.It Fl e \*(Ba Fl o Ic errexit
d3967 1
a3967 1
.It Fl f \*(Ba Fl o Ic noglob
d3969 1
a3969 1
.It Fl h \*(Ba Fl o Ic trackall
d3974 1
a3974 1
.It Fl i \*(Ba Fl o Ic interactive
d3978 1
a3978 1
.It Fl k \*(Ba Fl o Ic keyword
d3980 1
a3980 1
.It Fl l \*(Ba Fl o Ic login
d3984 1
a3984 1
.It Fl m \*(Ba Fl o Ic monitor
d3986 1
a3986 1
.It Fl n \*(Ba Fl o Ic noexec
d3990 1
a3990 1
.It Fl p \*(Ba Fl o Ic privileged
d3996 1
a3996 1
.It Fl r \*(Ba Fl o Ic restricted
d4000 1
a4000 1
.It Fl s \*(Ba Fl o Ic stdin
d4014 1
a4014 1
.It Fl U \*(Ba Fl o Ic utf8\-mode
d4037 1
a4037 1
.It Fl u \*(Ba Fl o Ic nounset
d4048 1
a4048 1
.It Fl v \*(Ba Fl o Ic verbose
d4050 1
a4050 1
.It Fl X \*(Ba Fl o Ic markdirs
d4054 1
a4054 1
.It Fl x \*(Ba Fl o Ic xtrace
d4058 1
a4058 1
.It Fl o Ic arc4random
d4063 1
a4063 1
.It Fl o Ic bgnice
d4065 1
a4065 1
.It Fl o Ic braceexpand
d4069 1
a4069 1
.It Fl o Ic emacs
d4072 1
a4072 1
.It Fl o Ic gmacs
d4076 1
a4076 1
.It Fl o Ic ignoreeof
d4083 1
a4083 1
.It Fl o Ic nohup
d4095 1
a4095 1
.It Fl o Ic nolog
d4099 1
a4099 1
.It Fl o Ic physical
d4125 1
a4125 1
.It Fl o Ic posix
d4134 1
a4134 1
.It Fl o Ic sh
d4148 1
a4148 1
.It Fl o Ic vi
d4152 1
a4152 1
.It Fl o Ic vi\-esccomplete
d4155 1
a4155 1
.It Fl o Ic vi\-tabcomplete
d4159 1
a4159 1
.It Fl o Ic viraw
d5629 1
a5629 1
.Bl -tag -width XJXXXXM
@


1.269.2.4
log
@• move /etc/{,suid_}profile to /system/etc/ for Android (but do not make
  the location of /etc configurable)
• rewrite manpage section about /etc/{,suid_}profile, .profile, .mkshrc
• drop heredoc-weird-3 while here, it’s not deterministic by design(?)
@
text
@d204 3
a206 3
parameter or the
.Pa mkshrc
file (see below).
d218 6
a223 3
the shell is assumed to be a login shell; see
.Sx Startup files
below.
d234 10
a245 2
For further implications, see
.Sx Startup files .
d324 19
a348 13
.Ss Startup files
For the actual location of these files, see
.Sx FILES .
A login shell processes the system profile first.
A privileged shell then processes the suid profile.
A non-privileged login shell processes the user profile next.
A non-privileged interactive shell checks the value of the
.Ev ENV
parameter after subjecting it to parameter, command, arithmetic and tilde
.Pq Sq \*(TI
substitution; if unset or empty, the user mkshrc profile is processed;
otherwise, if a file whose name is the substitution result exists,
it is processed; non-existence is silently ignored.
d6124 1
a6124 1
.Bl -tag -width XetcXsuid_profile -compact
d6126 5
a6130 5
User mkshrc profile (non-privileged interactive shells); see
.Sx Startup files.
The location can be changed at compile time (for embedded systems);
AOSP Android builds use
.Pa /system/etc/mkshrc .
d6132 1
a6132 3
User profile (non-privileged login shells); see
.Sx Startup files
near the top of this manual.
d6134 1
a6134 2
System profile (login shells); see
.Sx Startup files.
d6138 1
a6138 2
Suid profile (privileged shells); see
.Sx Startup files.
a6139 4
.Pp
Note: On Android,
.Pa /system/etc/
contains the system and suid profile.
@


1.269.2.5
log
@MFC from HEAD and adjust version

Build.sh:
- better handling of eval and CPPFLAGS in build system
- partial OPENSTEP support
- fix typo

check.t:
- mark utf8opt-2a as need-pass: no (1.481)

dot.mkshrc:
- do not close stderr (1.65)
- use only printable characters (1.65)

edit.c:
- upper bound Emacs mode command repeat by input line length

funcs.c, sh.h:
- optimise an if away, and possibly even the function bodies…

misc.c:
- jg71 reported -DMKSH_ASSUME_UTF8=* breaks defining stristr

mksh.1, sh.h. var.c:
- fix spelling

mksh.1:
- document "export -"

sh.h:
- undef optarg, optind in case the OE predefines them (1.493)

shf.c:
- handle %zu (size_t), %zd (ssize_t), etc. (1.43)

syn.c:
- avoid (not-)function-local externs (1.68)

multiple:
- do not use macros or identifiers ending with an underscore
- more {,s}size_t, type, lint, other cleanups (edit.c 1.220; eval.c 1.107;
  exec.c 1.95; expr.c 1.48; funcs.c 1.196; histrap.c 1.110; jobs.c 1.81;
  lalloc.c 1.18; lex.c 1.155; main.c 1.198; misc.c 1.171; sh.h 1.493;
  shf.c 1.43; tree.c 1.50; var.c 1.131)
- wrap access(2) (edit.c 1.221; exec.c 1.96; expr.c 1.49; funcs.c 1.197;
  histrap.c 1.111; sh.h 1.494)
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.269.2.4 2011/07/16 16:04:13 tg Exp $
.\" $OpenBSD: ksh.1,v 1.141 2011/09/03 22:59:08 jmc Exp $
d75 1
a75 1
.Dd $Mdocdate: July 16 2011 $
d929 1
a929 1
Perhaps surprisingly, the first comparison succeeds,
d3297 4
a3300 5
If no parameters are specified, all parameters with the export attribute
set are printed one per line; either their names, or, if a
.Ql \-
with no option letter is specified, name=value pairs, or, with
.Fl p ,
d3302 1
a3302 1
commands defining all exported parameters, including their values.
a6232 10
.\"
.\" Charles Forsyth, author of the (Public Domain) Bourne Shell clone,
.\" which mksh is derived from, agreed to the following:
.\"
.\" In countries where the Public Domain status of the work may not be
.\" valid, its primary author hereby grants a copyright licence to the
.\" general public to deal in the work without restriction and permis-
.\" sion to sublicence derivates under the terms of any (OSI approved)
.\" Open Source licence.
.\"
d6260 1
a6260 1
.Nm mksh\ R40c
@


1.269.2.6
log
@MFC mksh-current fixes and upcoming deprecation and promotion; sync clog
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.269.2.5 2011/10/25 22:50:36 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: October 25 2011 $
d926 1
a926 1
$ [[ $bar = \&"$baz" ]]; echo $?
d3366 1
a3366 1
or (deprecated; will be removed RSN) by prefixing an interactive mode input line with
d4439 1
a4439 1
.Dq if \&[[ $foo = \&"$bar" \&]]
@


1.269.2.7
log
@MFC recent changes to R40-stable, validate it, fix a pedantic warning
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.269.2.6 2011/11/19 22:21:57 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: November 19 2011 $
d3303 1
a3303 1
commands suitable for re-entry.
d3552 1
a3552 1
.Pq named pipe , Tn FIFO .
d4304 1
a4304 2
is a named pipe
.Pq Tn FIFO .
d4402 3
a4404 3
Note that some special rules are applied (courtesy of
.Px
) if the number of arguments to
d4406 1
a4406 1
or inside the brackets
d4410 8
a4417 8
arguments can be stripped such that only one to three arguments remain,
then the lowered comparison is executed; (thanks to XSI) parentheses
.Ic \e( ... \e)
lower four- and three-argument forms to two- and one-argument forms,
respectively; three-argument forms ultimately prefer binary operations,
followed by negation and parenthesis lowering; two- and four-argument forms
prefer negation followed by parenthesis; the one-argument form always implies
.Fl n .
a4608 8
.Em Note :
This means that
.Nm No 's Ic global
command is
.Em not
equivalent to other programming languages' as it does not allow a
function called from another function to access a parameter at truly
global scope, but only prevents putting an accessed one into local scope.
d6271 1
a6271 1
.Nm mksh\ R40d
@


1.269.2.8
log
@MFC
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.269.2.7 2011/12/04 19:59:51 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: December 4 2011 $
d2468 8
a2475 2
Integer constants and expressions are calculated using an exactly 32-bit
wide, signed or unsigned, type with silent wraparound on integer overflow.
d2483 14
a2496 3
Additionally, base-16 integers may be specified by prefixing them with
.Sq 0x Pq case-insensitive
in all forms of arithmetic expressions, except as numeric arguments to the
d2498 1
a2498 5
built-in command.
Base-8 integers may be specified by prefixing them with
.Sq 0 ,
but this is deprecated and will be removed in the next version of
.Nm .
@


1.269.2.9
log
@MFC all those nice things (not all parts, by now); sync clog
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.269.2.8 2011/12/11 18:18:25 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: December 11 2011 $
d1621 1
a1621 2
an initialisation value of 0x00000100), this will change for R41,
which will also introduce an explicit initial value.
@


1.269.2.10
log
@• MFC almost everything not breaking backwards compatibility or introducing
  deep changes into R40-stable branch
• Version accordingly: HEAD gets 2012/03/24 (hi Eddy/Chris) so we backdate
  $KSH_VERSION for R40-stable to 2012/03/20 (hi David) as that comes before
  even though it includes today’s latest fixes
• Also, sync clog (including MFC indicators)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.282 2012/03/23 23:25:27 tg Exp $
d5 1
a5 1
.\"		2010, 2011, 2012
d75 1
a75 1
.Dd $Mdocdate: March 23 2012 $
d1617 1
a1617 4
.It Xo
.Pf ${ Ar name
.Pf @@# Ns Oo Ar seed Oc Ns }
.Xc
d1619 4
a1622 5
.Ar name ,
with an optional (defaulting to zero)
.Ar seed .
At the moment, this is NZAT (a never-zero 32-bit hash based on
Bob Jenkins' one-at-a-time hash), but this is not set.
d4033 5
d6268 1
a6268 1
.Nm mksh\ R40e
@


1.269.2.11
log
@oops, I made a fuckup and committed wrong things
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.269.2.9 2011/12/31 02:25:29 tg Exp $
d5 1
a5 1
.\"		2010, 2011
d75 1
a75 1
.Dd $Mdocdate: December 31 2011 $
d1617 4
a1620 1
.It Pf ${ Ns Ar name Ns @@#}
d1622 5
a1626 4
.Ar name .
At the moment, this is OAAT1 (Bob Jenkins' one-at-a-time hash with
an initialisation value of 0x00000100), this will change for R41,
which will also introduce an explicit initial value.
a4036 5
.It Fl o Ic arc4random
Deprecated, will be removed in
.Nm
R41.
Do not use, emits a warning to stderr.
d6267 1
a6267 1
.Nm mksh\ R40d
@


1.269.2.12
log
@fix mdoc
@
text
@d5 1
a5 1
.\"		2010, 2011, 2012
d2479 1
a2479 2
.Sq 0x
.Pq case-insensitive
@


1.268
log
@replace uses of OAAT hash in all its variants by NZAT (mksh internal) or NZAAT (all others)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.267 2011/07/05 20:19:18 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: July 5 2011 $
d3069 3
a3071 1
If any options are given, an external
@


1.267
log
@replace typeset with local, as style(9) now mandates
(keep globals for a while, until it’s widespread, though)

since we don’t export PS1 any longer, no need to stay AT&T ksh compatible
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.266 2011/07/02 17:57:24 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: July 2 2011 $
d1635 2
a1636 2
At the moment, this is OAAT1 (Bob Jenkins' one-at-a-time hash with
an initialisation value of 0x00000100), but this is not set.
@


1.266
log
@add new experimental "global" command
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.265 2011/06/21 22:02:09 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: June 21 2011 $
d1355 1
d2049 1
d2853 1
a2853 1
.Ic builtin , times , typeset
@


1.265
log
@sync clog
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.264 2011/06/12 15:37:09 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: June 12 2011 $
d4556 1
a4556 1
.Ic typeset
d4567 10
d4600 1
d4603 3
a4605 2
is used inside a function, any newly created parameters are local to the
function.
@


1.264
log
@drop long-deprecated 'set ±o arc4random'
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.263 2011/06/12 15:34:19 tg Exp $
d6237 1
a6237 1
.Nm mksh\ R40
@


1.263
log
@drop the RC
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.262 2011/05/29 17:01:26 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: May 29 2011 $
a4046 5
.It Ic arc4random
Deprecated, will be removed in
.Nm
R41.
Do not use, emits a warning to stderr.
@


1.262
log
@hyphen-used-as-minus-sign
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.261 2011/05/29 02:18:54 tg Exp $
d6242 1
a6242 1
.Nm mksh\ R40~rc
@


1.261
log
@mksh R40 Release Candidate 1

Testsuite:
• add new need-pass: {yes|no} attribute, default yes
• exit with 1 if a need-pass test failed unexpectedly
  idea by Kacper Kornet <draenog@@pld-linux.org>
• mark utf8bom-2 as need-pass: no
Infrstructure:
• add housekeeping function for making a tty raw
• switch functions with unused results to void
• struct op: u.charflag contains last char of ;; in TPAT
• var.c:arraysearch is now a global function
Language:
• add ;& (fall through) and ;| (examine next) delimiters
  in addition to ;; (end case) as zsh extensions, because
  POSIX standardised on ;& already
• add -A (read into array), -N (read exactly n bytes),
  -n (read up to n bytes), -t (timeout) flags for read
  from ksh93
• allow read -N -1 or -n -1 to slurp the entire input
• add -a (read into array the input characters) extension
  specific to mksh to read, idea by David Korn
• add -e (exit with error if PWD was not set correctly
  after a physical cd) to cd builtin, mandated by next
  POSIX, and change error codes accordingly
Rewrites:
• full rewrite of read builtin and its manpage section
• add regression tetss for most of the new functionality
• duplicate hexdump demo tests for use of read -a
• use read -raN-1 in dot.mkshrc to get NUL safe base64,
  DJB cdb hash and Jenkins one-at-a-time hash functions
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.260 2011/05/06 15:41:24 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: May 6 2011 $
d3773 1
a3773 1
find . -type f -print0 \*(Ba \e
@


1.260
log
@• add patch from Robert Luberda <robert@@debian.org> fixing the
  four-argument form of test (yet again…), thanks
• drop the obsolete (pre-POSIX) form “test -t” without fd
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.259 2011/05/05 00:04:58 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: May 5 2011 $
d394 5
a398 2
.Ql ;;
is used in
d648 6
a653 4
.Ar \ pattern
.Op \*(Ba Ar pattern
.No ... No )
.Ar list No ;;\ \& Oc ... esac
d677 1
d683 10
a692 1
.Ic case $foo { *) echo bar; } .
d3077 6
a3082 1
.Op Fl LP
d3087 1
a3087 1
.Op Fl LP
d3143 6
d3152 1
a3152 1
.Op Fl LP
d3157 1
a3157 1
.Op Fl LP
d3656 9
a3664 3
.Op Fl d Ar delimiter
.Op Fl prsu Ns Op Ar n
.Op Ar parameter ...
d3666 1
a3666 2
Reads a line of input from the standard input, separates the line into fields
using the
d3670 2
a3671 11
above), and assigns each field to the specified parameters.
Lines are delimited by the first character of
.Ar delimiter ,
.Dv NUL
if empty, if
.Fl d
was used, a newline otherwise.
If there are more parameters than fields, the extra parameters are set to
.Dv NULL ,
or alternatively, if there are more fields than parameters, the last parameter
is assigned the remaining fields (inclusive of any separating spaces).
d3674 56
a3729 6
parameter is used.
If the input line ends in a backslash and the
.Fl r
option was not used, the backslash and the newline are stripped and more input
is read.
If no input is read,
d3731 15
a3745 1
exits with a non-zero status.
d3754 3
a3756 14
The
.Fl u Ns Ar n
and
.Fl p
options cause input to be read from file descriptor
.Ar n
.Pf ( Ar n
defaults to 0 if omitted)
or the current co-process (see
.Sx Co-processes
above for comments on this), respectively.
If the
.Fl s
option is used, input is saved to the history file.
d3767 11
d6242 1
a6242 1
.Nm mksh\ R39c+CVS
@


1.259
log
@• use a flag for determining here strings, don’t parse delimiter every time
• don’t leak memory parsing possible I/O redirection tokens
• get rid of volatile by using more const (also helps codegen, methinks)
• support empty here document markers (mksh extension)
• pimp the manpage
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.258 2011/05/04 23:16:03 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: May 4 2011 $
d4232 1
a4232 1
.It Fl t Op Ar fd
a4237 2
.Ar fd
may be left out, in which case it is taken to be 1.
@


1.258
log
@+= support for variables and arrays
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.257 2011/05/02 22:57:22 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: May 2 2011 $
d1464 3
a1466 1
The following forms of parameter substitution can also be used:
d1530 2
d1544 1
d1577 2
d1614 2
d1626 1
a1626 1
may need to be escaped as an extended globbing pattern
d1628 1
a1628 1
with single quotes
d1630 5
a1634 2
or double quotes
.Pq \&"...\&" .
d1707 3
a1709 2
.Bl -tag -width "PIPESTATUS"
.It Ev _ No (underscore)
d2233 1
a2233 1
.Bl -tag -width Ds
d2299 14
d2403 1
a2403 5
will print an error with a line number prepended to it, if you have a
.Xr cat 1
that supports the
.Fl n
option:
d2405 1
a2405 1
.D1 $ cat /foo/bar 2\*(Gt&1 \*(Gt/dev/null \*(Ba cat \-n
@


1.257
log
@RCS Id sync with oksh (no change; their diff is bogus with nroff and gnroff)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.256 2011/04/23 10:40:27 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: April 23 2011 $
d1335 3
d3804 1
a3804 1
.Ic foo=(a b c)
@


1.256
log
@elaborate on 「${arrname[*]}」 and 「"${arrname[@@]}"」 for wbx@@
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.255 2011/04/17 15:43:12 tg Exp $
.\" $OpenBSD: ksh.1,v 1.139 2011/03/09 09:30:39 okan Exp $
d75 1
a75 1
.Dd $Mdocdate: April 17 2011 $
@


1.255
log
@funnily enough “typeset -ft” description already was “correct” as to
the today’s behaviour (and AT&T ksh’s) but the general function overview
(and description) wasn’t…
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.254 2011/03/26 21:46:04 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: March 26 2011 $
d1282 1
a1282 1
Array indices are currently limited in
d1284 1
a1284 1
to the range 0 through 4294967295, inclusive.
d1286 1
d1297 5
@


1.254
log
@• bring back test -H ifdef S_ISCDF (for HP-UX)
• whitespace, etc.
• bump version for tonight, I’m not gonna hack on c_cd,
  all this pathname stuff is mind-boggling…
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.253 2011/03/13 16:35:54 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: March 13 2011 $
d2701 1
a2701 3
option is turned on for the function's duration; otherwise, the
.Ic xtrace
option is turned off.
@


1.253
log
@sync with oksh (nop, RCS IDs only)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.252 2011/03/06 01:50:09 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: March 6 2011 $
d4143 3
@


1.252
log
@I thought of making COMSUB pass a pointer to the struct op *t->left around
instead, but the parser for the so-called “backticks” (U+0060) still emits
plaintext COMSUB wdstrings, and the evaluation code emits plaintext if the
code is not run (‘-n’ option), so it’s not worth the effort and memory ma-
nagement issues, even though it _would_ optimise the most common case…

Bump version numbers, sync regression tests; add one testcase from the old
webpages too. Sync manpage, this now works, but keep the workaround in, as
“portability issue” with slightly changed wording.

Also, /bin/sleep must be used in one manpage example if sleep is built in.
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.251 2011/02/18 22:26:11 tg Exp $
.\" $OpenBSD: ksh.1,v 1.138 2010/09/20 07:41:17 jmc Exp $
d75 1
a75 1
.Dd $Mdocdate: February 18 2011 $
@


1.251
log
@• add -u option (POSIX: unbuffered ⇒ nop) to the built-in cat
• PIPESTATUS now supported (like bash 2) whose last member
  may actually differ from $? since the latter may not be the
  result of a pipeline partial command
• add regression tests, documentation, etc.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.250 2011/02/11 01:18:19 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: February 11 2011 $
d1241 17
a1257 6
.Sy Note :
.Pf $( Ns Ar command Ns \&)
expressions are currently parsed by finding matching parentheses,
regardless of quoting; comments containing quote characters are
not handled correctly.
This should be fixed soon.
d6121 1
a6121 22
$ sleep 666 && echo fubar
.Ed
.Pp
Some parts of the parser are not recursive; the following
code fails because of the parenthesis asymmetry
.Pq RedHat BZ#496791 .
A workaround exists; use
.Ql x=$(cat) \*(Lt\*(Lt"EOF"
or the newline-keeping
.Ql x=\*(Lt\*(Lt"EOF"
instead to merely slurp the string.
Of course, in this case, the form
.Ql x=$(case $foo in (bar) ...
actually recommended by
.St -p1003.1
would work as well, but we use it as an example of this parser bug.
.Bd -literal -offset indent
x=$(case $foo in bar) echo $bar ;; *) echo $baz ;; esac)
# above fails to parse; below is the workaround
x=$(eval $(cat)) \*(Lt\*(Lt"EOF"
case $foo in bar) echo $bar ;; *) echo $baz ;; esac
EOF
@


1.250
log
@• more comment and int→bool cleanup, add and improve some comments
• in interactive mode, always look up {LC_{ALL,CTYPE},LANG} environment
  variables if setlocale/nl_langinfo(CODESET) doesn’t suffice
• add the ability to call any builtin (some don't make sense or wouldn't
  work) directly by analysing argv[0]
• for direct builtin calls, the {LC_{ALL,CTYPE},LANG} environment
  variables determine utf8-mode, even if MKSH_ASSUME_UTF8 was set
• when called as builtin, echo behaves POSIXish
• add domainname as alias for true on MirBSD only, to be able to link it
• sync mksh Makefiles with Build.sh output
• adjust manpage wrt release plans
• link some things to mksh now that we have callable builtins:
  bin/echo bin/kill bin/pwd bin/sleep (exact matches)
  bin/test bin/[ (were scripts before)
  bin/domainname=usr/bin/true usr/bin/false (move to /bin/ now)
• drop linked utilities and, except for echo and kill, their manpages
• adjust instbin and link a few more there as well
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.249 2011/02/11 00:41:35 tg Exp $
d1675 1
a1675 1
.Bl -tag -width "EXECSHELL"
d1828 3
d3001 1
a3001 1
.Op Fl \-
d3006 1
a3006 1
If
d3013 5
a3017 1
utility is invoked instead.
d4705 1
a4705 1
.Px
@


1.249
log
@add a sleep builtin that can deal with fractions too
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.248 2011/02/09 13:08:18 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: February 9 2011 $
d165 2
d175 3
d3184 2
a3185 2
option is set, only the first argument is treated as an option, and only
if it is exactly
d3873 3
a3875 1
This is enabled automatically for interactive shells if your system supports
d3888 4
a3891 2
.Dq utf8 ,
or if the input begins with a UTF-8 Byte Order Mark.
d3916 1
a3916 1
R40.
d4064 1
@


1.248
log
@fix prev-hist-word again, thanks Jörg-Volker Peetz
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.247 2011/01/21 22:25:33 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: January 21 2011 $
d2808 1
a2808 1
.Ic test , ulimit , whence
d4050 5
@


1.247
log
@${foo@@x} is now special-expansion for values of x, defined for now:
‘#’ = hash of $foo
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.246 2011/01/21 22:00:14 tg Exp $
d5297 4
a5300 4
The last
.Pq Ar n Ns th
word of the previous (on repeated execution, second-last, third-last, etc.)
command is inserted at the cursor.
@


1.246
log
@add read with delimiter, like AT&T ksh93 (thanks Dave for the suggestion)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.245 2011/01/21 21:04:45 tg Exp $
d1582 6
@


1.245
log
@• implement KSHEGID, KSHGID, KSHUID variables by suggestion of Richard K.
  (KSHEUID aka USER_ID already exists)
• simplify, speed up LCG and $RANDOM handling again
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.244 2011/01/09 21:57:27 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: January 9 2011 $
d3571 1
d3581 6
@


1.244
log
@New functionality: assign here document to string variable directly,
without cat and temp files. Hacked in Lëtzebuerg ☺

This was the third try. Where to put this was not palpable… same for =(…)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.243 2010/12/19 20:00:55 tg Exp $
d75 1
a75 1
.Dd $Mdocdate: December 19 2010 $
d1771 6
@


1.243
log
@this is a bashism but might be from ksh93 IIRC… still dead ugly as hell!
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.242 2010/10/08 17:30:05 tg Exp $
d4 2
a5 1
.\" Copyright © 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
d75 1
a75 1
.Dd $Mdocdate: October 8 2010 $
d6077 2
d6080 5
@


1.242
log
@ouch! \c? is DEL, not \c~
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.241 2010/09/24 20:21:43 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: September 24 2010 $
d974 3
@


1.241
log
@partial obsd sync:
- remove some old groff workarounds in SYNOPSIS
- avoid "Op ... Oc" constructions
except where the latter doesn’t work with nroff
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.240 2010/09/05 20:43:37 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: September 5 2010 $
d1040 1
a1040 1
.Ql \ec\*(TI
@


1.240
log
@lintian caught hyphen-used-as-minus-sign
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.239 2010/09/05 19:51:33 tg Exp $
.\" $OpenBSD: ksh.1,v 1.136 2010/07/15 20:04:35 schwarze Exp $
d157 6
a162 3
.Oo Fl c Ar string \*(Ba Fl s \*(Ba
.Ar \ file\ \&
.Op Ar argument ... Oc
@


1.239
log
@optimise error messages, option parsing, and make more builtins
recognise "--", costs us 20 .text 0 .data 0 .bss
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.237 2010/08/28 21:22:24 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: August 28 2010 $
d6053 1
a6053 1
foo \*(Ba bar \*(Ba& read -p baz        # will, however, do so
@


1.238
log
@document workaround for the $(…) parsing bug
@
text
@d2964 5
a2968 1
.It Ic builtin Ar command Op Ar arg ...
d3664 5
a3668 1
.It Ic rename Ar from to
@


1.237
log
@more on the cat
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.236 2010/08/28 17:21:44 tg Exp $
a6034 1
Pipelines are executed in subshells.
d6039 8
d6051 2
a6052 1
is immediately printed on suspension (but not later).
d6057 6
a6062 2
Some parts of the parser are not recursive; things like the following
example will fail because of the parenthesis asymmetry:
d6065 4
a6068 9
.Ed
.Pp
Patches welcome.
.Pp
The parts of a pipeline, like below, are executed in subshells.
Thus, variable assignments inside them fail.
This is actually a feature; use co-processes instead.
.Bd -literal -offset indent
foo \*(Ba bar \*(Ba read baz    # will not change $baz
@


1.236
log
@make cat an mksh builtin, for things like here documents
if any options are given, the external programme is invoked instead
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.235 2010/08/24 14:42:03 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: August 24 2010 $
d1227 1
a1227 2
.Ic $(cat foo) ,
but it is carried out more efficiently because no process is started.
d2329 5
a2333 1
will print an error with a line number prepended to it:
@


1.235
log
@fix realpath builtin’s handling of (source) pathnames with a trailing slash
as per POSIX (if a trailing slash is part of the symlink target it fails as
well, like GNU readlink -f does)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.234 2010/08/14 20:13:10 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: August 14 2010 $
d2783 4
a2786 4
.Ic \&[ , chdir , bind , echo ,
.Ic let , mknod , print , printf ,
.Ic pwd , realpath , rename , test ,
.Ic ulimit , whence
d2966 16
d5929 1
@


1.234
log
@document the [[ $foo = "$bar" ]] thing expressly
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.233 2010/08/14 19:55:37 tg Exp $
d3632 8
@


1.233
log
@portable hogwash
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.232 2010/07/17 22:09:37 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: July 17 2010 $
a890 8
The second operand of the
.Sq !=
and
.Sq =
expressions are patterns (e.g. the comparison
.Ic \&[[ foobar = f*r ]]
succeeds).
.It
d905 17
d4225 1
a4225 1
instead, or the double-bracket operator:
d4227 4
@


1.232
log
@• merge printf from OpenBSD
• deactivate %a and %A since our libc doesn’t have it
• rewrite the mksh integration code to use shf instead of stdio, removing
  floating point support always in the process, as shf doesn’t support it
  ⇒ saves 11114 (6706 text, 168 data, 4240 bss) with dietlibc on Debian
• fix -Wall -Wextra -Wformat -Wstrict-aliasing=2 for gcc (Debian 4.4.4-7)
• fix these and -Wc++-compat for gcc version 4.6.0 20100711 (experimental)
  [trunk revision 162057] (Debian 20100711-1) except:
  – a few enum warnings that relate to eglibc’s {g,s}etrlimit() functions
    taking an enum instead of an int because they’re too stupid to adhere
    to POSIX interfaces they design by themselves
  – all “request for implicit conversion” involving a "void *" on one side
• tweak the manual page somewhat more
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.231 2010/07/17 20:21:18 tg Exp $
a603 9
.Sy Note :
Some shells (but not this one) execute control structure commands in a
subshell when one or more of their file descriptors are redirected, so any
environment changes inside them may fail.
To be portable, the
.Ic exec
statement should be used instead to redirect file descriptors before the
control structure.
.Pp
a898 8
The single argument form of
.Ic test ,
which tests if the argument has a non-zero length, is not portable,
e.g. instead of
.No \&[ Ar str No \&]
use
.No \&[[ \-n Ar str No \&]] .
.It
@


1.231
log
@sync with oksh and remove some unnecessary/legacy portability notes

   Revision 1.136: [7]download - view: [8]text, [9]markup, [10]annotated - [11]select for diffs
   Thu Jul 15 20:04:35 2010 UTC (47 hours, 56 minutes ago) by schwarze
   Branches: [12]MAIN
   CVS tags: [13]HEAD
   Diff to: previous 1.135: [14]preferred, [15]coloured
   Changes since revision 1.135: +7 -7 lines
When the first argument or arguments of a macro are opening delimiters
(parentheses and/or square brackets), both modern groff and mandoc first
output those leading delimiters as plain text, then start the macro scope
after these opening delimiters.  This is similar to printing trailing
punctuation and trailing closing delimiters on a macro line outside and
after the macro scope.  For example, ".Sq ( text )" is "(`text')",
not "`(text)'".  Thus, we now need to quote leading opening delimiters
when we want them inside the macro scope.
These are the cases in src/bin.

"makes sense" jmc@@
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.230 2010/07/13 13:12:30 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: July 13 2010 $
d3512 1
a3512 1
The same as the utility
d3514 1
a3514 1
except that it may use the same
d3516 1
a3516 1
code as the rest of
d3519 1
a3519 1
.Nm mksh ,
@


1.230
log
@partial oksh sync (RCSID and do add some parenthesēs to the list of
reserved words, but really only these which are only recognised at
the beginning of a line as the context says, not blindly all of them)
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.229 2010/07/13 13:07:56 tg Exp $
.\" $OpenBSD: ksh.1,v 1.135 2010/07/12 16:26:45 jmc Exp $
d389 1
a389 1
.Ql (( .. ))
d644 1
a644 1
.Oo Op (
d836 1
a836 1
.It Ar name Ns () Ar command
d845 1
a845 1
.It Xo function Ar name Ns ()
d849 1
a849 1
.Ar name Ns ()
d862 1
a862 1
.It (( Ar expression No ))
d905 1
a905 1
.Ic [[ foobar = f*r ]]
d1268 1
a1268 1
Array indices are currently limited to the range 0 through 4294967295, (for
d1270 1
a1270 1
only; portable maximum is 1023), inclusive.
d1455 2
a1456 2
.It Pf ${# Ns Ar name Ns [*]}
.It Pf ${# Ns Ar name Ns [@@]}
d1481 2
a1482 2
.It Pf ${! Ns Ar name Ns [*]}
.It Pf ${! Ns Ar name Ns [@@]}
d2042 1
a2042 1
.Dq [..]
d2053 1
a2053 1
.It [..]
d2058 1
a2058 1
.Dq [a0\-9]
d2073 1
a2073 1
.It [!..]
a2171 4
.Pp
The POSIX character classes (i.e.\&
.Pf [: Ns Ar class-name Ns :]
inside a [..] expression) are not implemented.
d2614 1
a2614 1
.Ar function-name Ns ()
d2702 1
a2702 1
.Ic ()
d3416 1
a3416 1
.No (( Ar expr No ))
d4386 1
a4386 1
.Ar name Ns [*] ,
d4716 1
a4716 1
.Ar parameter Ns [*] ,
d4821 1
a4821 1
.Dq [..] ,
d6041 1
a6041 1
.Nm mksh\ R39d
@


1.229
log
@compatibility: stick “set ±o arc4random” around for a bit longer,
until R40 is definitively out (so there MAY still be an R39d)

this commit can easily be reverted in its entirety later, when
Build.sh’s compatibility for “-combine” &c. is removed too
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.228 2010/07/11 11:17:31 tg Exp $
.\" $OpenBSD: ksh.1,v 1.134 2010/05/10 21:04:54 jmc Exp $
d74 1
a74 1
.Dd $Mdocdate: July 11 2010 $
d598 2
a599 2
case     else     function     then      !
do       esac     if           time      [[
@


1.228
log
@on obsd/mbsd, entropy is cheap enough for us to do this (codepath in
kernel checked for both) for additional seeding ($RANDOM is still from
the LCG only)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.227 2010/07/04 17:33:56 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: July 4 2010 $
d3855 5
@


1.227
log
@to speed up mksh, get rid of arc4random(3) uses and use the LCG always;
depend on ASLR for seeding
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.226 2010/05/13 18:47:50 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: May 13 2010 $
d1923 1
a1923 1
Every time
d1925 2
a1926 2
is referenced, it is assigned a 15-bit pseudo-random number, i.e. between
0 and 32767, first, which is taken from a Linear Congruential PRNG.
@


1.226
log
@document using $'…' to set $PS1 in an easier manner, after pressure
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.225 2010/05/13 18:44:10 tg Exp $
d1926 1
a1926 5
0 and 32767, first, which is taken from
.Xr arc4random 3
if available,
a Linear Congruential PRNG
otherwise.
a3854 5
.It Ic arc4random
If this shell option, which cannot be unset, exists,
.Xr arc4random 3
is used for the value of
.Ev RANDOM .
a5922 1
.Xr arc4random 3 ,
@


1.225
log
@sync with oksh (comments and docs only)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.224 2010/04/09 18:59:30 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: April 9 2010 $
d1892 7
@


1.224
log
@oksh merge
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.223 2010/04/08 13:21:06 tg Exp $
.\" $OpenBSD: ksh.1,v 1.132 2010/03/27 09:10:01 jmc Exp $
d74 1
a74 1
.Dd $Mdocdate: April 8 2010 $
d4720 3
@


1.223
log
@Fix two more POSIX conformance bugs and minor documentation/comment issues
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.222 2010/03/27 20:36:26 tg Exp $
.\" $OpenBSD: ksh.1,v 1.131 2010/02/26 03:32:39 william Exp $
d74 1
a74 1
.Dd $Mdocdate: March 27 2010 $
d3425 1
a3425 1
.Op Cm b \*(Ba Cm c
@


1.222
log
@allow MKSHRC_PATH to change from 「"~/.mkshrc"」, for Android &c.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.221 2010/03/27 16:51:38 tg Exp $
d1422 5
a1426 3
The parsing rules also differ on whether the expression is
double-quoted with respect to the single quote
.Pq Dq \*(aq .
@


1.221
log
@rework ‘m’ and ‘v’ ulimits; add more (seen at zsh)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.220 2010/03/15 18:14:40 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: March 15 2010 $
d5893 1
@


1.220
log
@document ulimit -V (Haiku only)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.219 2010/03/06 20:08:18 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: March 6 2010 $
d4544 1
a4544 1
.Op Fl acdfHLlmnpSsTtVvw
d4567 7
d4582 3
d4592 3
d4601 4
d4613 6
d4623 9
@


1.219
log
@rcsid sync with oksh, no change
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.218 2010/02/28 14:06:56 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: February 28 2010 $
d4544 1
a4544 1
.Op Fl acdfHLlmnpSsTtvw
d4614 3
d6005 1
a6005 1
.Nm mksh\ R39c
@


1.218
log
@I: mksh: hyphen-used-as-minus-sign usr/share/man/man1/mksh.1.gz:1463
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.217 2010/02/25 21:05:00 tg Exp $
.\" $OpenBSD: ksh.1,v 1.130 2010/02/25 13:45:54 schwarze Exp $
d74 1
a74 1
.Dd $Mdocdate: February 25 2010 $
@


1.217
log
@sync with oksh:
get rid of overlapping blocks discouraged by [16]mdoc.samples(7);
found by and unbreaking the build with [17]mandoc(1);
"fine" jmc@@ sobrado@@
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.216 2010/02/25 20:18:16 tg Exp $
d1463 1
a1463 1
or -1 if
@


1.216
log
@(hopefully) fix the substitution thing for good
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.215 2010/01/28 20:58:33 tg Exp $
.\" $OpenBSD: ksh.1,v 1.129 2009/05/28 06:09:06 jmc Exp $
d74 1
a74 1
.Dd $Mdocdate: January 28 2010 $
d2487 1
a2487 1
.Aq Xo Ar var
d2494 1
a2494 1
.Aq Xo Ar var
@


1.215
log
@• unbreak testsuite for MKSH_SMALL
• sync version and © year
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.214 2010/01/28 15:33:11 tg Exp $
d1419 7
d6002 1
a6002 1
.Nm mksh\ R39b
@


1.214
log
@• document the pipeline thing better
• set -o {posix,sh} also turns off the other, like {emacs,gmacs,vi}
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.213 2010/01/28 15:23:03 tg Exp $
d5995 1
a5995 1
.Nm mksh\ R39+devel
@


1.213
log
@there is no space after .Px
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.212 2010/01/28 15:18:50 tg Exp $
d3594 1
a3594 1
foo \*(Ba bar \*(Ba while read foo; do ...; done
d3599 1
a3599 1
foo \*(Ba bar \*(Ba&
d3916 3
a3918 1
mode, which can be turned back on manually.
d3926 1
a3926 1
and this autodetection feature was requested at compilation time
d3930 3
a3932 1
mode, which can be turned back on manually.
d5987 7
@


1.212
log
@To solve the incompatibility issues between mksh-current, old mksh versions
and vendor pdksh versions, re-introduce FPOSIX alongside FSH. The semantics
are now:
‣ set -o posix ⇒
  • disable brace expansion and FSH when triggered
  • use Debian Policy 10.4 compliant non-XSI “echo” builtin
  • do not keep file descriptors > 2 to ksh
‣ set -o sh ⇒
  • set automatically #ifdef MKSH_BINSHREDUCED
  • disable brace expansion and FPOSIX when triggered
  • use Debian Policy 10.4 compliant non-XSI “echo” builtin
  • do not keep file descriptors > 2 to ksh
  • trigger MKSH_MIDNIGHTBSD01ASH_COMPAT mode if compiled in
  • make “set -- $(getopt ab:c "$@@")” construct work

Note that the set/getopt one used to behave POSIXly only with FSH or
FPOSIX (depending on the mksh version) set and Bourne-ish with it not
set, so this changes default mksh behaviour to POSIX!
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.211 2010/01/27 18:36:19 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: January 27 2010 $
d3913 1
a3913 1
like mode.
@


1.211
log
@grml, better.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.210 2010/01/27 18:16:14 tg Exp $
d2336 2
d3134 2
d3910 7
d3920 1
a3920 1
.Pq POSIX/kludge
@


1.210
log
@document an annoying ^Z bug
(I think this is because the TAND and the Job are not visible to
the code at the same time; patches welcome, as usual)

I don't think this is related to ^Z'd systrace(1)'d programmes
sometimes being unawakable, though.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.209 2010/01/25 16:12:56 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: January 25 2010 $
d5956 4
a5959 1
Suspending (using \*(haZ) pipelines like
d5963 7
a5969 3
will only suspend the currently running part of the pipeline; in this example,
.Dq fubar
is immediately printed on suspension (but not later).
@


1.209
log
@when using persistent history (and not MKSH_SMALL), let the shells
concurrently accessing the same $HISTFILE be more synchronised with
each other: empty lines (just pressing Return) and duplicates (that
are split and written twice by the lines loaded from $HISTFILE in
the meantime); requested by Maximilian “mxey” Gaß in #!/bin/mksh
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.208 2010/01/25 14:25:15 tg Exp $
d5956 9
@


1.208
log
@introduce “typeset -i foo[*]”, rationale see cid 1004B5DA60A56BFB604
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.207 2010/01/25 14:11:27 tg Exp $
d1730 1
a1730 2
Also, several invocations of the shell
running on the same machine will share history if their
@


1.207
log
@Add “unset foo[*]” mksh extension, which allows to unset the *contents*
of foo[0] (but not its attributes), and the rest of the array, so that
later “set +A foo bar” will set foo[0]=bar but retain the attributes.

This is important, because, in the future, arrays will have different
attributes per element, instead of all the same (which, actually, is
not entirely true right now either, since “unset foo[0]” will not mo-
dify the attributes of a foo[1] existing at that point in time), where
foo[$newkey] will inherit from foo[0], but typeset foo will only affect
foo[0] no longer foo[*] in the future. (The rules about typeset=local
will still apply, as they affect creation of variables in a scope.)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.206 2010/01/08 22:21:05 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: January 8 2010 $
d4363 3
@


1.206
log
@While we were supposed to use Ctrl-Arrowkey for wordwise jumping,
some idiotic terminal emulators and/or people seem to use the es-
cape codes normally denoting Alt-Arrowkey instead so let's simply
bind them to the vt_hack as well... (untested)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.205 2010/01/06 18:29:01 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: January 6 2010 $
d4655 3
@


1.205
log
@document that mksh evaluates namerefs lazily but ksh93 doesn't
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.204 2010/01/01 18:02:01 tg Exp $
d4 1
a4 1
.\" Copyright © 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
d74 1
a74 1
.Dd $Mdocdate: January 1 2010 $
d4964 1
a4964 1
.No \*(ha[b , ANSI-Ctrl-CurLeft
d5115 1
a5115 1
.No \*(ha[f , ANSI-Ctrl-CurRight
@


1.204
log
@make [[ -o ‣-U ]] = [[ -o ‣+U ]] = [[ -o ‣utf8-mode ]]
where ‘‣’ is either nothing, ‘!’ or ‘?’ as usual.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.203 2010/01/01 17:44:08 tg Exp $
d4423 8
@


1.203
log
@• re-implement wcswidth-like behaviour for ${%foo} even in !UTFMODE
• merge the rest of branch tg-wcswidth-behaviour
• enhance test cases for wcswidth-like behaviour
• switch hash table collision resolution algorithm to Python’s as announced
• bump vsn
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.202 2009/12/01 19:15:33 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: December 1 2009 $
d3914 2
a3915 1
and this autodetection feature was requested at compilation time.
d4065 12
@


1.202
log
@* fix 'set -A foo -- [2]=a b c' contingency (tested against GNU bash4,
  which, in its latest sid incarnation, even received mksh's ability
  to produce ${!foo[*]} array keys, wow!)
* plug a memory leak while here (ATEMP only, but still)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.201 2009/11/23 12:49:55 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: November 23 2009 $
d1455 4
a1458 1
.Ar name .
@


1.201
log
@lintian: hyphen-used-as-minus-sign
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.200 2009/11/22 18:23:38 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: November 22 2009 $
d3722 3
@


1.200
log
@fix more manpages
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.199 2009/11/22 14:23:21 tg Exp $
d1073 1
a1073 1
nameref=\*(aqtypeset -n\*(aq
@


1.199
log
@IFS (even in AT&T ksh93) are octets, so 'IFS=…' isn’t possible atm
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.198 2009/11/21 23:23:18 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: November 21 2009 $
d2284 1
a2284 1
.No &\*(Gt| Ar file ,
d2289 1
a2289 1
.Ic \*(Gt| Ar file ,
d4745 1
a4745 1
.Bl -tag -width "%+ | %% | %XX"
@


1.198
log
@since we have wcwidth anyway, expose it as ${%strvar} to the user, iff
utf8-mode is enabled (otherwise it'll be a synonym for ${#strvar} aka
the number of octets in it)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.197 2009/11/21 23:21:23 tg Exp $
d772 1
a772 1
characters) is entered, the menu is reprinted without executing
d1145 2
a1146 2
parameter specifies a list of characters which are used to break a string up
into several words; any characters from the set space, tab, and newline that
d1149 1
a1149 1
characters are called
d1153 1
a1153 1
whitespace characters, in combination with zero or one
d1155 1
a1155 2
whitespace
characters, delimit a field.
d3580 1
a3580 2
then leading whitespace will be removed (IFS) and backslashes processed
.Pf ( Fl r ) .
d3583 1
a3583 3
for pristine I/O (variable splitting, as in
.Ic while IFS= read foo bar; do ...; done
is not possible though).
d4186 1
a4186 1
characters), or if it is a unary operator like
d4875 1
a4875 1
IFS character or IFS white space, or are the same as the previous line.
@


1.197
log
@sync with reality
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.196 2009/11/17 21:49:42 tg Exp $
d74 1
a74 1
.Dd $Mdocdate: November 17 2009 $
d1452 6
@


1.196
log
@update portmdoc, sprinke a few more macros that now work
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.195 2009/10/17 21:16:03 tg Exp $
d2033 1
a2033 1
Matches any sequence of characters.
d2035 2
a2036 3
Matches any of the characters inside the brackets.
Ranges of characters can be
specified by separating two characters by a
d2045 1
a2045 1
must either be quoted or the first or last character in the character list.
d2048 1
a2048 1
must be quoted or the first character in the list if it is to represent itself
d2056 1
a2056 1
except it matches any character not inside the brackets.
d2060 1
a2060 1
Matches any string of characters that matches zero or more occurrences of the
d2073 1
a2073 1
Matches any string of characters that matches one or more occurrences of the
d2156 1
a2156 1
inside a [..] expression) are not yet implemented.
@


1.195
log
@• overhaul handling of special variables
• use a combination of the one-at-a-time hash and an LCG for handling
  the $RANDOM special if !HAVE_ARC4RANDOM instead of rand(3)/srand(3)
  and get rid of time(3) usage to reduce import footprint
• raise entropy state (mostly in the !HAVE_ARC4RANDOM case though…)
• simplify handling of the $RANDOM_SPECIAL generally
• tweak hash() to save a temp var for non-optimising compilers
• some int → mksh_ari_t and other type fixes
• general tweaking of code and comments
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.194 2009/10/10 21:17:30 tg Exp $
d23 3
a25 3
.\" * ` generates ‘ in groff, so use \`
.\" * ' generates ’ in groff, \' generates ´, so use \*(aq
.\" * - generates ‐ in groff, \- generates −, fixed in tmac/mdoc/doc-groff
d30 4
d35 13
d59 1
d61 1
d69 75
a144 1
.Dd $Mdocdate: October 10 2009 $
d5863 1
a5863 1
.%B "UNIX Shell Programming"
d5872 1
a5872 1
.%B "IEEE Standard for Information Technology \*(en Portable Operating System Interface (POSIX)"
d5932 2
d5935 1
a5935 1
mailing list or in the
@


1.194
log
@while testing haserl-0.9.26 on MirBSD, I discovered that the echo builtin
in FSH mode did in fact, contrary to POSIX and Debian Policy 10.4 behavi-
our (I think), interpret escape sequences; fix and add testsuite for echo
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.193 2009/10/02 18:08:35 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: October 2 2009 $
d1813 1
a1813 1
.Xr rand 3
a5738 1
.Xr rand 3 ,
a5740 1
.Xr srand 3 ,
@


1.193
log
@* rename "set -o posix" (FPOSIX) to "set -o sh" (FSH) because it's not
  just a "somewhat more POSIX" but also a "/bin/sh legacy kludge" mode
* consistently capitalise POSIX and SUSv3/SUSv4 (same as AT&T ksh) and
  Bourne shell
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.192 2009/09/26 03:40:00 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: September 26 2009 $
d2697 1
a2697 1
.Bl -tag -width Ds -compact
d3037 2
@


1.192
log
@further optimise and simplify the handling of $RANDOM, reads and writes
to it are now either arc4random or rand/srand, but srand retains the old
state; set +o arc4random is no longer possible, but if it's there we use
arc4random(3), if not, we use rand(3) for $RANDOM reads; optimise special
variable handling too and fix a few consts and other minor things
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.191 2009/09/20 17:23:51 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: September 20 2009 $
d2237 1
a2237 1
.Fl o Ic posix
d3033 1
a3033 1
.Ic posix
d3805 5
a3809 2
.It Ic posix
Enable POSIX mode.
@


1.191
log
@Add a hack input function for VT100-style key sequences; support
Ctrl-CurLeft and Ctrl-CurRight (not quite ANSI, but fits the scheme)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.190 2009/09/20 16:40:56 tg Exp $
d1810 5
a1814 4
0 and 32767, first.
See the description of
.Ic set \-o Ic arc4random
below for details.
d3739 1
a3739 1
Use
d3741 2
a3742 9
high-quality random numbers for the value of
.Ev RANDOM
if set (to either 1 or 2), or a semi-predictable sequence from
.Xr rand 3
if unset.
Setting this flag will change its value to 1; the default value is 2,
which means it automatically switches to 0 if
.Ev RANDOM
is written to.
@


1.190
log
@more of this:

• shell flags are now handled in one single place (sh_flags.h)
• sync comments (between enum and array) and manpage with reality
• FMONITOR is now no longer needed for Hartz IV shells
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.189 2009/09/20 12:12:00 tg Exp $
d4844 1
a4844 1
.No \*(ha[b
d4995 1
a4995 1
.No \*(ha[f
@


1.189
log
@document cid 1004AB55AA4341EC755, printf builtin may use $'...' backslash
expansion code instead (and the one from the print builtin for %b), same
as AT&T ksh93 does
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.188 2009/09/19 21:54:45 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: September 19 2009 $
d3564 1
a3564 1
.Ic set Op Ic +\-abCefhkmnpsuvXx
d3657 4
d3663 4
d3679 4
a3768 8
.It Ic interactive
The shell is an interactive shell.
This option can only be used when the shell is invoked.
See above for a description of what this means.
.It Ic login
The shell is a login shell.
This option can only be used when the shell is invoked.
See above for a description of what this means.
d3773 1
a3773 1
Currently set by default, but this will
a3818 4
.It Ic restricted
The shell is a restricted shell.
This option can only be used when the shell is invoked.
See above for a description of what this means.
d3859 2
a3861 2
and
.Fl v
@


1.188
log
@$'…' functionality, documentation improvements, fixes for backslash
expansion in all modes, regression tests for both kinds of backslash
expansion; unbksl() revamp; make CTRL macro available globally
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.187 2009/09/19 19:08:47 tg Exp $
d3399 5
a3403 1
.Xr printf 1 .
@


1.187
log
@align with C standard (optional C style); document differences to C style
for print builtin (align with ksh93 ipv GNU bash)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.186 2009/09/19 18:36:58 tg Exp $
d880 6
a892 5
Explicitly excluded are
.Ql \e" ,
.Ql \e' ,
and
.Ql \e? .
a901 2
.Ql \ev ,
.Ql \ex## ,
d903 55
a957 7
.Ql \e0### ;
.Ql #
is, in the case of \e0###, an octal, or, in the case of \ex##,
\eu#### or \eU########, a hexadecimal digit, of which there may
be none up to two (x), three (0), four (u), or eight (U).
The \ex## and \e0### escapes translate to raw 8-bit octets;
the \eu#### and \eU######## escapes translate a Unicode codepoint to UTF-8.
d1481 1
a1481 1
.Pq \&'...\&'
d1756 1
a1756 1
character (such as control-A) followed by a carriage return and then delimiting
d2823 1
a2823 1
i.e. \*(haX represents Control-X.
d2828 1
a2828 1
delete key on a BSD wsvt25, xterm-xfree86 or GNU screen terminal are bound
d3356 1
a3356 1
These include at least these mentioned in
d3363 1
a3363 5
Contrary to C escapes, the backslash is retained if followed by an
unsupported escape character; octal sequences must be preceded by a
.Sq 0 .
.Ql \e
expansion may be inhibited with the
d5820 8
@


1.186
log
@allow “function stop () {” (bashism, an evil one)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.185 2009/09/19 15:16:04 tg Exp $
d887 5
d3316 3
@


1.185
log
@new function unbksl doing "backslash expansion" independent of c_print();
also make a separate subsection about it in the manpage
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.184 2009/09/07 17:24:49 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: September 7 2009 $
d752 9
@


1.184
log
@another ksh93 feature: test -o ?foo (almost zero cost)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.183 2009/09/06 18:17:51 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: September 6 2009 $
d871 26
d3295 5
a3299 18
These include
.Ql \eb ,
.Ql \ef ,
.Ql \en ,
.Ql \er ,
.Ql \et ,
.Ql \eu#### ,
.Ql \ev ,
.Ql \ex## ,
and
.Ql \e0### ;
.Ql #
is, in the case of \e0###, an octal, or, in the case of \eu####
or \ex##, a hexadecimal digit, of which there may be 0 to 2/3/4.
The \ex## and \e0### escapes translate to raw 8-bit octets;
the \eu#### escape translates a Unicode codepoint to UTF-8.
.Ql \ec
is equivalent to using the
@


1.183
log
@• more on pipelines vs subshells
• remove some superfluous spaces
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.182 2009/09/06 17:55:54 tg Exp $
d3885 3
@


1.182
log
@Support Dave Korn’s alternative 「'a'」 (or 「'…'」) form for base-one
integers in addition to my 「1#a」 (or 「1#…」), which also allows for
finer end-of-character checking. Note that this is locale-dependent in
ksh93, set ±U dependent in mksh, and mksh’s OPTU-16 encoding is used.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.181 2009/09/06 17:42:13 tg Exp $
d409 7
d1997 1
a1997 1
.Ic cmd \*(Lt foo \*(Gt foo
d2145 1
a2145 1
.D1 $ cat /foo/bar 2\*(Gt&1 \*(Gt /dev/null \*(Ba cat \-n
d4059 2
a4060 2
.Dl $ time sleep 1 2\*(Gt afile
.Dl $ { time sleep 1; } 2\*(Gt afile
@


1.181
log
@merge the nameref code, using mksh standard scoping as discussed
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.178.2.1 2009/08/30 20:56:07 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: September 5 2009 $
d2233 8
@


1.180
log
@document more differences to ksh93; here: static vs dynamic scoping
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.179 2009/08/30 21:02:00 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: August 30 2009 $
d886 1
d1265 12
d4126 1
a4126 1
.Oo Op Ic +\-alprtUux
d4207 12
@


1.179
log
@add the chdir builtin from mircvs://contrib/hosted/tg/deb/mksh/ for
better dash compatibility (mksh is now a dash superset if printf is
compiled in)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.178 2009/08/30 11:38:44 tg Exp $
d2457 6
@


1.178
log
@document the _possible_ printf(1) builtin and mark that it’s not supported
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.177 2009/08/28 22:46:20 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: August 28 2009 $
d159 1
d2560 4
a2563 4
.Ic \&[ , bind , echo , let ,
.Ic mknod , print , printf , pwd ,
.Ic realpath , rename , test , ulimit ,
.Ic whence
d2747 5
d2811 5
@


1.178.2.1
log
@Implement bound variables (nameref), complete with testsuite

see http://article.gmane.org/gmane.os.miros.general/8916 for
a reason why arrays-6b fails, and why we cannot change nameref-1
to the more realistic “typeset -n v=$1” or define bar after v;
until this is resolved, the code lives in a branch
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.178 2009/08/30 11:38:44 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: August 30 2009 $
a884 1
nameref=\*(aqtypeset -n\*(aq
a1262 12
.It Pf ${! Ns Ar name Ns }
The name of the variable referred to by
.Ar name .
This will be
.Ar name
except when
.Ar name
is a name reference (bound variable), created by the
.Ic nameref
command (which is an alias for
.Ic typeset Fl n ) .
.Pp
d4096 1
a4096 1
.Oo Op Ic +\-alpnrtUux
a4176 9
.It Fl n
Create a bound variable (name reference): any access to the variable
.Ar name
will access the variable
.Ar value
instead.
This can be used by functions to access variables whose names are
passed as parametres, instead of using
.Ic eval .
@


1.177
log
@documentation and test suite for tonight’s new features, ☾ gn8
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.176 2009/08/28 21:51:52 tg Exp $
d2560 3
a2562 2
.Ic mknod , print , pwd , realpath ,
.Ic rename , test , ulimit , whence
d3278 8
@


1.176
log
@implement "typeset ±a" as no-op
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.175 2009/08/14 09:00:30 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: August 14 2009 $
d1263 5
d3480 14
@


1.175
log
@add the keyword “colour” to the PS1 example, since it wasn’t found in
here in either spelling and smultron@@ wanted to see how it’s done
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.174 2009/07/16 15:06:44 tg Rel $
d51 1
a51 1
.Dd $Mdocdate: July 16 2009 $
d4068 1
a4068 1
.Oo Op Ic +\-lprtUux
d4116 2
d5661 1
a5661 1
.Nm mksh\ R39
@


1.174
log
@ABI bump to R39: adhere to the future POSIX standard regarding -o nounset;
add appropriate regression test (except $_ *is* unset in non-interactive
shells). See the thread at:
http://article.gmane.org/gmane.os.miros.general/8863
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.173 2009/07/08 10:37:24 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: July 8 2009 $
d1663 2
a1664 1
in reverse video,
@


1.173
log
@sync special commands list (XXX why is alias there twice? pdksh.deb too…)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.172 2009/07/06 15:06:24 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: July 6 2009 $
d3554 5
a3558 1
Referencing of an unset parameter is treated as an error, unless one of the
d5658 1
a5658 1
.Nm mksh\ R38
@


1.172
log
@be more robust against things like Debian #535970
reverts and rewrites the code from cid 10047C1EBA57E4F4AF0

XXX find out if this is done right
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.171 2009/07/06 09:37:03 tg Exp $
d2529 1
a2529 1
.Ic trap , unset
d2547 1
a2547 1
.Ic umask , unalias , wait
d2553 3
a2555 3
.Ic \&[ , echo , let , mknod ,
.Ic print , pwd , test , ulimit ,
.Ic whence
@


1.171
log
@note that ${foo//bar/baz} may need the pattern escaped; discovered by me
for # and %, and by Matt Lewandowsky («lewellyn:#ksh») for & as pattern.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.169 2009/05/31 17:41:09 tg Rel $
d51 1
a51 1
.Dd $Mdocdate: May 31 2009 $
d741 3
d2485 4
@


1.170
log
@wbx@@ requested that his feature is not called his feature
@
text
@d1360 9
d2997 1
a2997 1
.Pq extension .
@


1.169
log
@sync with oksh:
   Revision 1.129: [7]download - view: [8]text, [9]markup, [10]annotated - [11]select for diffs
   Thu May 28 06:09:06 2009 UTC (3 days, 11 hours ago) by jmc
   Branches: [12]MAIN
   CVS tags: [13]HEAD
   Diff to: previous 1.128: [14]preferred, [15]coloured
   Changes since revision 1.128: +6 -6 lines
fix missing bracket by slightly rewriting; from Alan R. S. Bueno
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.168 2009/05/27 19:52:37 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: May 27 2009 $
d2988 1
a2988 1
.Pq wbx extension .
@


1.168
log
@implement an extension that an interactive mode input line, when
starting with an ‘!’ exclamation mark at the beginning of a com-
mand (PS1 not PS2), shall have the same effect as the predefined
“r” alias, to be compatible with csh and GNU bash’s “!string” to
«Execute last used command starting with string» – documentation
and feature request provided by wbx@@ (Waldemar Brodkorb)
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.167 2009/05/21 14:28:34 tg Exp $
.\" $OpenBSD: ksh.1,v 1.128 2009/03/06 12:28:36 jmc Exp $
d51 1
a51 1
.Dd $Mdocdate: May 21 2009 $
d5125 2
a5126 2
If the current big-word is the first on the line (or
follows one of the following characters:
d5132 1
a5132 1
.Ql \&)
d5134 1
a5134 1
.Pq Sq /
@


1.167
log
@pgas mentioned ksh93 does [[ $foo ]] (ipv forced [[ -n $foo ]])
and it actually REDUCES code size to allow it as well; mention
in the manpage that it’s merely unportable (and of course exe-
cution time differs); sync clog
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.166 2009/05/16 18:40:08 tg Exp $
d51 1
a51 1
.Dd $Mdocdate: May 16 2009 $
d2985 4
a2988 1
.Ic alias r=\*(aqfc \-e \-\*(aq .
@


1.166
log
@• remove “#if 0” and “#ifdef notdef” style old debugging code
• expose “#ifdef MKSH_MIDNIGHTBSD01ASH_COMPAT” just in case they decide to
  require it and show it in the ksh version automatically
• sync the use of non-ASCII characters over files (unification)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.165 2009/05/16 16:59:38 tg Exp $
d797 2
a798 2
which tests if the argument has a non-zero length, is not valid; explicit
operators must always be used, e.g. instead of
@


1.165
log
@• sync distrib/special/mksh/Makefile with bin/mksh/Build.sh and
  fix the regression test’s results while here, which have been
  broken since cid 10049D9BE5254CE65B8
• get rid of separate copyright file which was intended for De-
  bian; track down commits in all files of oksh-mirbsd and mksh
  to get correct copyright years per-file, as is BSD custom
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.164 2009/05/16 15:53:01 tg Exp $
d4 1
a4 1
.\" Copyright (c) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
@


1.164
log
@this began as a one-word change to the spec (manpage): that
${foo:1:2} operates on characters ipv bytes – which means:
‣ set +U: octets
‣ set -U: MirOS OPTU-8 characters

for consistency I also adapted ${#stringname} to deliver the
length in characters ipv bytes; more may follow; for example
I’d like a way to expose the string width.

you can already get the MirOS OPTU-16 of a character in the
WTF-8 (「set -U」) mode with something like
│ typeset -Uui16 -Z7 x=1#${stringname:position:1}
which will correctly use the PUA EF80‥EFFF mapping for octets.

due to this being an incompatible change, bump to R38

also change the unicode-hexdump sample regression test and
add two news for ${x:1:2} and ${#x} checks in A/W mode ☺
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.163 2009/05/16 14:45:40 tg Exp $
d4 18
@


1.163
log
@bind new search-history-{up,down} to ANSI PgUp and PgDn keys
“because we can”
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.162 2009/05/16 14:44:37 tg Exp $
d1232 3
a1234 1
or not specified; otherwise the length of the string value of parameter
d1314 1
a1314 1
bytes of
d5617 1
a5617 1
.Nm mksh\ R37c
@


1.162
log
@document currently bound ANSI cursor keys (↑↓←→ Home End Del)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.161 2009/05/16 14:34:58 tg Exp $
d4891 1
a4891 1
.It search\-history\-up: (not bound)
d4896 1
a4896 1
.It search\-history\-down: (not bound)
@


1.161
log
@fix typo
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.160 2009/05/16 14:19:22 tg Exp $
d4626 1
a4626 1
.No \*(haB , \*(haXD
d4643 1
a4643 1
.It beginning\-of\-line: \*(haA
d4697 4
a4700 1
.It delete\-char\-forward: Op Ar n
d4720 1
a4720 1
.No \*(haN , \*(haXB
d4752 1
a4752 1
.It end\-of\-line: \*(haE
d4777 1
a4777 1
.No \*(haF , \*(haXC
d4916 1
a4916 1
.No \*(haP , \*(haXA
@


1.160
log
@Add search-history-up and search-history-down keybindings (both unbound
by default) to the Emacs command line editing mode; patch originally by
James Butler <sweetnavelorange@@gmail.com> but slightly modified

10x
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.159 2009/05/16 14:17:39 tg Exp $
d4703 1
a4703 1
.No ERASE , \*(ha[\*(ha? , \*(ha[\*(haH , \*(ha[h
@


1.159
log
@move pdksh and contributor dedication into TFM, preparation for things
to come
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.158 2009/04/22 16:25:12 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: April 22 2009 $
d4726 2
a4727 1
.Ic search\-history
d4826 2
a4827 1
.Ic up\-history
d4829 1
a4829 1
.Ic search\-history .
d4888 15
@


1.158
log
@address RedHat BZ#496791: fix currently not possible, because the code
which escapes $(…) content does not know if an imbedded ‘#’ is a comment
leader or something else like “16#foo”, “${#bla[*]}”, “${foo#bar}”, &c.
and the comment skip code does not know about nesting beforehand
⇒ document this problem in the place where it already documents that
  the current code does not properly handle nested $($(…)) expressions

patches welcome
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.157 2009/04/07 21:23:28 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: April 7 2009 $
d5584 4
d5589 4
a5592 5
It has been developed further by the MirOS project
incorporating changes from the Debian and OpenBSD
projects and patches and suggestions from users
and many other persons, and is currently maintained by
.An Thorsten Glaser Aq tg@@mirbsd.org .
@


1.157
log
@fix an oversight
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.156 2009/04/07 19:46:55 tg Exp $
d1032 2
a1033 1
regardless of quoting.
@


1.156
log
@switch mail address to .org domain
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.155 2009/04/05 12:45:25 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: April 5 2009 $
d5591 1
a5591 1
.Nm mksh\ R37b
@


1.155
log
@• document new (clarified) macro behaviour – bugfix
• make bind ^X vs ^[[ section more clear
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.154 2009/03/23 12:21:02 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: March 23 2009 $
d5588 1
a5588 1
.An Thorsten Glaser Aq tg@@mirbsd.de .
@


1.154
log
@even more clear; ok «gps23»
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.153 2009/03/23 12:16:58 tg Exp $
d2651 1
a2651 1
string which may contain editing commands.
d2665 1
d5591 1
a5591 1
.Nm mksh\ R37
@


1.153
log
@give example
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.152 2009/03/23 12:15:33 tg Exp $
d3865 1
a3865 1
x=1; [ x -eq 1 ]	evaluates to true
@


1.152
log
@document somewhat surprising behaviour
12:58⎜<gps23:#ksh> someone please tell me why:   code=1; if [ "code" -eq 1 ] returns true
13:10⎜<mira|AO:#ksh> hm but I see the problem
13:10⎜<mira|AO:#ksh> code=1; x=code; [ "$x" -eq 1 ]
13:10⎜<mira|AO:#ksh> this is indeed unexpected
13:10⎜«pgas:#ksh» gps23: code=1+1;[ "code" -eq 2 ] && echo true #also works
as of now, we consider
13:13⎜«pgas:#ksh» gps23: when you use -eq there is something like an implicit $(( )) around the
     ⎜    arguments
13:14⎜«pgas:#ksh» [ code -eq 1 ] is the same as [ $((code)) -eq 1 ]
to be documented.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.151 2009/03/22 18:09:17 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: March 22 2009 $
d3863 4
a3866 1
a mathematical term or the name of an integer variable.
@


1.151
log
@merge manpage and sync RCS IDs
not merged: POSuX character class nonsense
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.150 2009/03/14 18:12:53 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: March 14 2009 $
d3862 3
@


1.150
log
@sprinkle mksh_ari_t to limit arithmetics to 32 bit even
on Debian Lenny/amd64 (XXX need more verification; this
can be used for 64 bit arithmetics later too)

PPID, PGRP, RANDOM, USER_ID are now unsigned by default
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.149 2008/12/29 21:34:20 tg Exp $
.\" $OpenBSD: ksh.1,v 1.122 2008/05/17 23:31:52 sobrado Exp $
d33 1
a33 1
.Dd $Mdocdate: December 29 2008 $
d2854 5
d3454 1
d3456 1
a3456 1
.Ic \*(Ba\*(Ba
d4730 1
a4730 1
.Op Ar n 
@


1.149
log
@always set COLUMNS and LINES; make use of the fact in dot.mkshrc
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.148 2008/12/17 19:39:22 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: December 17 2008 $
d2101 2
a2102 2
.Vt long
host type, unless they begin with a sole
d2105 2
a2106 1
.Vt unsigned long .
d2143 7
a2149 4
Currently, integer constants and expressions are calculated using the host
.Vt long
type, although some places, such as array indices, may limit them to 32 bits.
They can be signed or unsigned.
@


1.148
log
@implement unsigned arithmetics as an mksh extension
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.147 2008/12/17 19:32:47 tg Exp $
d1438 1
a1438 2
Currently set to the
.Dq cols
d1441 2
a1442 1
if that value is non-zero.
d1530 1
@


1.147
log
@64 bit mksh do not limit to 32 bit integer variables in *all* places ☹

XXX this has to be sorted out; we want to bump the internal integer
XXX types to 64 bits some day anyway
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.146 2008/12/17 19:25:54 tg Exp $
d2099 7
@


1.146
log
@if we set the S̲pacing m̲ode to off, we must set it back to on too
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.145 2008/12/04 18:11:07 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: December 4 2008 $
d2134 4
a2137 1
Integer constants are currently limited to 32-bit, signed or unsigned.
@


1.145
log
@rename utf8-hack to utf8-mode (use set -U or set +U instead, anyway)
and announce less hackish things
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.144 2008/10/24 21:27:20 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: October 24 2008 $
d1308 1
@


1.145.2.1
log
@document R36(b)
@
text
@d33 1
a33 1
.Dd $Mdocdate: December 4 2008 $
d2162 1
a2162 1
.Ic utf8\-hack
d3471 1
a3471 1
.It Fl U \*(Ba Ic utf8\-hack
d5562 1
a5562 1
.Nm mksh\ R36
@


1.144
log
@replaced (TNF: ahoka) insists on me mentioning that we specify integer
silent wrapping (gcc -fwrapv) as expected behaviour
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.143 2008/10/20 19:52:07 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: October 20 2008 $
d2162 1
a2162 1
.Ic utf8\-hack
d3471 1
a3471 1
.It Fl U \*(Ba Ic utf8\-hack
d3489 1
a3489 1
or if the input begins with a Byte Order Mark.
d5562 1
a5562 1
.Nm mksh\ R36
@


1.143
log
@some more manual page improvements
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.142 2008/10/20 19:29:24 tg Exp $
d1058 1
a1058 1
Array indices are currently limited to the range 0 through 4294967295 (for
d1061 1
d2133 2
@


1.142
log
@• change mksh to only then behave more POSuXish when called as /bin/sh or
  “-sh” if -DMKSH_BINSHREDUCED was passed during compilation, for example
  for Debian, but d̲e̲f̲i̲n̲i̲t̲i̲v̲e̲l̲y̲ n̲̲o̲̲t̲̲ for MirBSD™
• split up regression test to force this behaviour
• remove the gunk from our MirBSD™ startup scripts again
• mention arc4random.c changes on website, sync clog, warn packagers
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.141 2008/10/19 20:15:44 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: October 19 2008 $
d780 1
a780 1
operators must always be used e.g. instead of
d1539 1
a1539 1
The index of the next argument to be processed by
@


1.141
log
@when doing a history search (^R), restore old input line on
abortion (^G – ^C is SIGINT and doesn’t work like this, but
that’s actually good IMO)

prompted by enquiry about the Emacs editing mode by <smultron:#MidnightBSD>
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.140 2008/10/04 23:22:13 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: October 4 2008 $
d3589 2
a3590 1
.Dq sh .
@


1.140
log
@fix botched up manpage diff
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.139 2008/10/04 23:08:03 tg Exp $
d4843 3
@


1.139
log
@implement Message-ID: <20081004171903.GA14184@@boetes.org>
in a somewhat hackish way, and it’s still quite different from zsh,
but probably closer to a desired functionality

XXX this makes state by abusing 「modified」 and 「xmp」 (“the mark”).
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.138 2008/09/30 18:48:01 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: September 30 2008 $
d4806 2
a4807 2
word of the previous command is inserted at the cursor.
On repeated execution, goes back the history.
a4808 1
If this 
@


1.138
log
@fixes
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.137 2008/09/30 18:43:07 tg Exp $
d4807 3
@


1.137
log
@add regression tests, sync manpage, bump version number
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.136 2008/09/17 19:31:30 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: September 17 2008 $
d4536 2
a4537 2
Completed lines are pushed into the history, unless they begin with an IFS
character of IFS white space, or are the same as the previous history line.
d4834 7
a4840 2
Other commands, including sequences of escape as prefix-1 followed by a
prefix-1 or prefix-2 key will be executed after leaving search mode.
@


1.136
log
@• bring back automatic turn-on of FPOSIX if called as sh/-sh
  ‣ only if !MKSH_SMALL
  ‣ add appropriate regression test
• if FPOSIX is set, do not close fds > 2 on exec, Debian #499139
• add appropriate regression tests for keeping fds private or not
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.135 2008/09/17 19:27:16 tg Exp $
d4535 3
d4703 9
d4834 2
a4835 1
Other commands will be executed after leaving search mode.
d5548 1
a5548 1
.Nm mksh\ R35c
@


1.135
log
@sync with reality
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.134 2008/09/14 20:56:06 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: September 14 2008 $
d2083 5
d3588 3
a3590 1
Currently, this just turns off
d3592 1
a3592 1
mode when turned on, which can be turned back on manually.
d5535 1
a5535 1
.Nm mksh\ R35
@


1.134
log
@mention that the vi editing mode is orphaned (almost no users, really no
developers, I understand about 1% of the source code only) yet still
functional (just not en par with the emacs editing mode, but no known
regressions over oksh (in -current) and better functionality than most
other korn shells, according to Yofuh)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.133 2008/08/14 17:39:30 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: August 14 2008 $
d892 1
a892 3
automatically tracked, unless
.Fl o Ic posix
is set:
@


1.133
log
@be more efficient
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.132 2008/08/02 00:57:28 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: August 2 2008 $
d4859 3
@


1.132
log
@mention MirOS OPTU-8 (and OPTU-16) encoding some more
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.131 2008/07/09 21:32:43 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: July 9 2008 $
d1601 1
a1601 1
	if (( $(id \-u) )); then print \e$; else print \e#; fi) "
@


1.131
log
@• bump NUFILE and FDBASE, allowing for more than 10 fds used by scripts
• change the code to accept more than a single digit for an fd
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.130 2008/06/28 22:51:55 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: June 28 2008 $
d2159 2
a2160 2
In Unicode mode, raw octets are mapped into the range EF80..EFFF,
which is in the PUA and has been assigned by CSUR for this use.
@


1.130
log
@• add code to support GNU bash’s “&> file” I/O redirection extension,
  and make it fit into mksh’s model (also gives us a couple of things
  GNU bash doesn’t have
• add regression tests for all of these

Lukas “smultron” Upton from MidnightBSD spotted a script with /bin/sh
shebang invalidly using “&>” in some Apple backup toolkit, 10x

XXX why fds are limited to one digit?
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.129 2008/06/08 16:57:52 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: June 8 2008 $
d2008 1
a2008 1
can be a single digit, indicating the number of an existing file descriptor;
d2015 3
d2029 1
a2029 1
which also supports the preceding explicit fd digit, for example,
d2058 1
a2058 1
redirection with a single digit.
@


1.129
log
@sort argument list, inspired by commit from Igor Sobrado
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.128 2008/05/17 18:27:56 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: May 17 2008 $
d255 1
d2019 31
d5524 1
a5524 1
.Nm mksh\ R34
@


1.128
log
@add new builtin “realpath” calling realpath(3) on its argument, skipping
over “--” for compatibility to Debian realpath(1) and possibly busybox’

“sounds handy” replaced@@TNF
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.127 2008/05/15 15:24:10 tg Exp $
.\" $OpenBSD: ksh.1,v 1.121 2008/03/21 12:51:19 millert Exp $
d33 1
a33 1
.Dd $Mdocdate: May 15 2008 $
d3068 1
a3068 1
.Op Cm c \*(Ba Cm b
@


1.127
log
@mksh:
* initialise the integers PPID, OPTIND, RANDOM, SECONDS, and TMOUT to base-10
* bring back PGRP as base-10 integer to the process group via getpgrp(2)
* initialise USER_ID as base-10 integer to the effective user id as retrieved
  from geteuid(2) = $(id -u)
* use $USER_ID in dot.mkshrc instead of spawning an id(1) process
  -> dot.mkshrc,v 1.34 now requires mksh R34
* convert more int to bool where appropriate
* remove dead code - getpgrp(2) cannot fail
* sync manual page to reality
* bump to mksh R34(beta) - feature freeze

XXX check if our_pgrp in jobs.c is still really needed, the setpgid call
XXX probably just makes us our own pgrp leader, and we might have to use
XXX and update kshpgrp accordingly - need feedback/help here but I think
XXX this simplification should be possible if I grok the code correctly.

etc/profile:
* adjust to $USER_ID changes in mksh (speed-up here, too)

mksh.hts:
* sync changelog
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.126 2008/05/10 18:10:02 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: May 10 2008 $
d3282 8
@


1.126
log
@NUL bytes don’t work
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.125 2008/05/04 01:58:15 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: May 4 2008 $
d1554 2
d1557 1
a1557 1
The process ID of the shell's parent (read-only).
d1688 2
@


1.125
log
@if we don't have setlocale(), just look at the env vars ourselves
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.124 2008/05/04 01:51:30 tg Exp $
d2119 1
@


1.124
log
@remove dead code and ifdefs, speed up configuring
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.123 2008/04/20 21:30:29 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: April 20 2008 $
d3425 6
@


1.123
log
@• revert the oksh code to be able to set multiple ulimits in one
  invocation, until it works with a common idiom: “ulimit -dS 262144”
  (but keep some goodies)
• add a regression test for that
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.122 2008/04/20 01:47:59 tg Exp $
d3419 2
a3420 1
.Sx Emacs editing mode .
@


1.122
log
@make it clearer (and most people don’t know what CESU-8 is, anyway)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.121 2008/04/20 01:12:52 tg Exp $
d4095 2
a4096 2
.Op Fl acdfHLlmnpSsTtvw Op Ar value
.Ar ...
d4103 1
a4103 2
if specified, may be either an arithmetic expression starting with a
number or the word
@


1.121
log
@ok, so instead of removing the “-o utf8-hack” behaviour of the 1#* operator
we just tell the user to only throw valid CESU-8 or single octets on it
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.120 2008/04/20 00:24:25 tg Exp $
d2126 1
a2126 1
input is well-formed CESU-8 (UTF-8 BMP, 0000..FFFD) Unicode.
@


1.120
log
@mostly revert 100480A853206FB56FA and parse utf-8 lead bytes ourselves
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.118 2008/04/19 22:15:04 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: April 19 2008 $
d2121 6
@


1.119
log
@solve the issue (although not quite how I’d like it)
@
text
@a2120 1
Base 1 integers can only be the last part of an assignment.
@


1.118
log
@• more unsigned → unsigned int
• more int → bool
• more regression tests: check if the utf8-hack flag is really disabled
  at non-interactive startup, enabled at interactive startup, if the
  current locale is a UTF-8 one
• make the mksh-local multibyte handling functions globally accessible,
  change their names, syntax and semantics a little (XXX more work needed)
• optimise
• utf_wctomb: src → dst, as we’re writing to that char array (pasto?)
• edit.c:x_e_getmbc(): if the second byte of a 2- or 3-byte multibyte
  sequence is invalid utf-8, ungetc it (not possible for the 3rd byte yet)
• edit.c:x_zotc3(): easier (and faster) handling of UTF-8
• implement, document and test for base-1 numbers: they just get the
  ASCII (8-bit) or Unicode (UTF-8) value of the octet(s) after the ‘1#’,
  or do the same as print \x## or \u#### (depending on the utf8-hack flag),
  plus support the PUA assignment of EF80‥EFFF for the MirBSD encoding “hack”
  (print doesn’t, as it has \x## and \u#### to distinguish, but we cannot use
  base-0 numbers which I had planned to use for raw octets first, as they are
  used internally): http://thread.gmane.org/gmane.os.miros.general/7938
• as an application example, add a hexdumper to the regression tests ☺
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.117 2008/04/19 21:18:52 tg Exp $
d2121 1
@


1.117
log
@mention -Z padding behaviour change (= fix)
pdksh and oksh are wrong here
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.116 2008/04/16 21:56:02 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: April 16 2008 $
d2113 8
@


1.116
log
@_careful_ (feature) sync with oksh:

   (3 weeks, 5 days ago) by millert
Make ulimit able to get and set multiple limits in a single invocation
like bash and zsh do.  Requested by espie@@, OK deraadt@@
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.115 2008/04/01 21:07:20 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: April 1 2008 $
d4063 1
@


1.115
log
@• adjust the regression test so that the behaviour of export and readonly
  matches mksh pre-R29 (the one introducing the bug), and typeset matches
  the behaviour intended with the R29 changes (better AT&T ksh93 compati-
  bility) but never reached
• adjust the man page description of “typeset -p”, as it’s different from
  the “typeset” and “typeset -” actions
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.114 2008/03/23 22:09:58 tg Exp $
.\" $OpenBSD: ksh.1,v 1.120 2007/05/31 20:47:44 otto Exp $
d33 1
a33 1
.Dd $Mdocdate: March 23 2008 $
d4080 2
a4081 2
.Op Fl acdfHLlmnpSsTtvw
.Op Ar value
d4088 2
a4089 1
if specified, may be either an arithmetic expression or the word
d5458 1
a5458 1
.Nm mksh\ R33c
@


1.114
log
@support dæmonisation in mksh, for example
|	csh -cf '/command/svscanboot &'
and
|	/usr/mpkg/bin/pgrphack /usr/mpkg/bin/svscanboot &
can now be replaced with
|	/bin/mksh -T- /usr/mpkg/bin/svscanboot
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.113 2008/03/04 00:09:34 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: March 4 2008 $
d3998 1
a3998 1
commands that can be used to re-create the attributes (but not the values) of
a3999 1
This is the default action (option exists for ksh93 compatibility).
d5457 1
a5457 1
.Nm mksh\ R33b
@


1.113
log
@according to groff_char(7) and my own hard experiences, there is more wrong
with GNU groff – add some special handling to the BSD mdoc macros for it so
that the manual pages look good in both utf8 and ps (PDF) mode; also fix in
mksh wrong display of ` (groff: ‘), ' (groff: ’), \' (groff: ´), \- (groff:
U+2212 −), the en dash (nroff doesn’t have it, use the em dash there ONLY),
and ~ and ^ (groff: placed atop and size-reduced, for use as diacritics, in
manual pages bad since these are control characters there)
→ PDF manpage now has ‘’ “” and good-looking hyphens and mini and ~ and ^
→ utf8 manpage now has ‘’ “”, good-looking hyphens, cut’n’pasteable mini
→ nroff manpage still has '' "" instead of ugly `' ``'' or even `´
→ Debian lintian won’t complain any longer
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.111 2008/03/01 02:21:37 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: March 1 2008 $
d44 1
a44 1
.Op Fl T Ar /dev/ttyCn
d174 3
d5458 1
a5458 1
.Nm mksh\ R33
@


1.113.2.1
log
@MFC: mksh-R33d code, mksh-current dot.mkshrc
(this code is MirBSD-specific, as Build.sh is not included)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.115 2008/04/01 21:07:20 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: April 1 2008 $
d44 1
a44 1
.Op Fl T Ar /dev/ttyCn | \-
a173 3
If
.Ar tty
is a dash, detach from controlling terminal (daemonise) instead.
d3995 1
a3995 1
commands that can be used to re-create the attributes and values of
d3997 1
d5455 1
a5455 1
.Nm mksh\ R33c
@


1.113.2.2
log
@MFC: pull up mksh-R34β since it’ll be required by MirPorts soonish…
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.128 2008/05/17 18:27:56 tg Exp $
.\" $OpenBSD: ksh.1,v 1.121 2008/03/21 12:51:19 millert Exp $
d33 1
a33 1
.Dd $Mdocdate: May 17 2008 $
a1553 2
.It Ev PGRP
The process ID of the shell's process group leader.
d1555 1
a1555 1
The process ID of the shell's parent.
a1685 2
.It Ev USER_ID
The effective user id of the shell.
a2112 15
As a special
.Nm mksh
extension, numbers to the base of one are treated as either (8-bit
transparent) ASCII or Unicode codepoints, depending on the shell's
.Ic utf8\-hack
flag (current setting).
Note that NUL bytes (integral value of zero) cannot be used.
In Unicode mode, raw octets are mapped into the range EF80..EFFF,
which is in the PUA and has been assigned by CSUR for this use.
If more than one octet in ASCII mode, or a sequence of more than one
octet not forming a valid and minimal CESU-8 sequence is passed, the
behaviour is undefined (usually, the shell aborts with a parse error,
but rarely, it succeeds, e.g. on the sequence C2 20).
That's why you should always use ASCII mode unless you know that the
input is well-formed UTF-8 in the range of 0000..FFFD.
a3262 8
.It Xo
.Ic realpath
.Op Fl \-
.Ar name
.Xc
Prints the resolved absolute pathname corresponding to
.Ar name .
.Pp
d3405 1
a3405 2
.Sx Emacs editing mode
and internal string handling functions.
a3409 6
or the
.Ev LC_ALL ,
.Ev LC_CTYPE ,
or
.Ev LANG
environment variables,
a4062 1
For integers, the number instead of the base is padded.
d5457 1
a5457 1
.Nm mksh\ R34
@


1.113.2.3
log
@MFC: mksh R35
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.131 2008/07/09 21:32:43 tg Exp $
.\" $OpenBSD: ksh.1,v 1.122 2008/05/17 23:31:52 sobrado Exp $
d33 1
a33 1
.Dd $Mdocdate: July 9 2008 $
a254 1
.Ql &\*(Gt ,
d2007 1
a2007 1
can be a number, indicating the number of an existing file descriptor;
a2013 3
Note that
.Ar fd
is limited to a single digit in most shell implementations.
a2017 31
.It &\*(Gt Ar file
Same as
.Ic \*(Gt Ar file 2\*(Gt&1 .
This is a GNU
.Nm bash
extension supported by
.Nm
which also supports the preceding explicit fd number, for example,
.Ic 3&\*(Gt Ar file
is the same as
.Ic 3\*(Gt Ar file 2\*(Gt&3
in
.Nm
but a syntax error in GNU
.Nm bash .
.It Xo
.No &\*(Gt| Ar file ,
.No &\*(Gt\*(Gt Ar file ,
.No &\*(Gt& Ar fd
.Xc
Same as
.Ic \*(Gt| Ar file ,
.Ic \*(Gt\*(Gt Ar file ,
or
.Ic \*(Gt& Ar fd ,
followed by
.Ic 2\*(Gt&1 ,
as above.
These are
.Nm
extensions.
d2023 1
a2023 1
redirection with a number (portably, only a single digit).
d3068 1
a3068 1
.Op Cm b \*(Ba Cm c
d5492 1
a5492 1
.Nm mksh\ R35
@


1.113.2.4
log
@MFC: mksh R36b
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.145.2.1 2008/12/13 17:44:42 tg Exp $
d33 1
a33 1
.Dd $Mdocdate: December 13 2008 $
d780 1
a780 1
operators must always be used, e.g. instead of
d892 3
a894 1
automatically tracked:
d1060 1
a1060 1
Array indices are currently limited to the range 0 through 4294967295, (for
a1062 1
That is, they are a 32-bit unsigned integer.
d1541 1
a1541 1
The index of the next argument to be processed when using
d1601 1
a1601 1
	if (( USER_ID )); then print \e$; else print \e#; fi) "
a2084 5
.Pp
File descriptors created by input/output redirections are private to the
Korn shell, but passed to sub-processes if
.Fl o Ic posix
is set.
a2128 2
Integer constants are currently limited to 32-bit, signed or unsigned.
Overflows wrap silently.
d2159 2
a2160 2
In Unicode mode, raw octets are mapped into the range EF80..EFFF as in
OPTU-8, which is in the PUA and has been assigned by CSUR for this use.
d3483 1
a3483 1
or if the input begins with a UTF-8 Byte Order Mark.
d3585 1
a3585 4
Automatically enabled if the basename of the shell invocation begins with
.Dq sh
and this autodetection feature was requested at compilation time.
As a side effect, setting this flag turns off
d3587 1
a3587 1
mode, which can be turned back on manually.
a4529 3
.Pp
Completed lines are pushed into the history, unless they begin with an
IFS character or IFS white space, or are the same as the previous line.
a4694 9
.It Xo edit\-line:
.Op Ar n 
.No \*(haXe
.Xc
Edit line
.Ar n
or the current line, if not specified, interactively.
The actual command executed is
.Ic fc \-e ${VISUAL:\-${EDITOR:\-vi}} Ar n .
d4789 1
a4789 3
word of the previous (on repeated execution, second-last, third-last, etc.)
command is inserted at the cursor.
Use of this editing command trashes the mark.
d4817 1
a4817 10
Other commands, including sequences of escape as
.Ic prefix\-1
followed by a
.Ic prefix\-1
or
.Ic prefix\-2
key will be executed after leaving search mode.
The
.Ic abort Pq \*(haG
command will restore the input line before search started.
a4858 3
.Em Note:
The vi command-line editing mode is orphaned, yet still functional.
.Pp
d5527 1
a5527 1
.Nm mksh\ R36
@


1.112
log
@Patrick “aptituz” Schoenfeld mentioned “lintian -viI mksh*.changes” to
me, which points out that “gnroff -Tutf8” mangles the ‘-’ characters
(hyphen/minus) from the input into ‘‐’ characters (hyphen), which does
not make sense in many cases and prevent copy’n’paste → fix

no change in nrcon output
@
text
@d3 21
a23 1
.\"
d205 1
a205 1
.Pq Sq ~
d284 1
a284 1
.Pq Sq '
d290 1
a290 1
.Ql ' ,
d293 2
a294 2
.Ql ` ,
.Ql ~ ,
d305 1
a305 1
if used at the beginning of a word, introduces a comment \(em everything after
d313 1
a313 1
.Ql `
d317 1
a317 1
.Ql ~
d409 1
a409 1
is the opposite \(em
d808 1
a808 1
.Pq Sq '
d814 1
a814 1
.Ql `
d820 1
a820 1
.Ql `
d829 1
a829 1
.Ql ` ,
d853 12
a864 12
autoload='typeset \-fu'
functions='typeset \-f'
hash='alias \-t'
history='fc \-l'
integer='typeset \-i'
local='typeset'
login='exec login'
nohup='nohup '
r='fc \-e \-'
stop='kill \-STOP'
suspend='kill \-STOP $$'
type='whence \-v'
d922 1
a922 1
.Pf ` Ns Ar command Ns ` ;
d1006 1
a1006 1
.Pf ` Ns Ar command Ns `
d1011 1
a1011 1
.Ql ` ,
d1498 1
a1498 1
.Ic ~
d1594 1
a1594 1
PS1='${USER:=$(id \-un)}'"@@${HOSTNAME:=$(hostname \-s)}:\e$PWD $(
d1620 1
a1620 1
.Ic ^V
d1687 1
a1687 1
.Ql ~ .
d1726 1
a1726 1
.Ic alias \-d fac=/usr/local/facilities; cd ~fac/bin ) .
d1976 1
a1976 1
.Ql ` ,
d2058 1
a2058 1
+ \- ! ~ ++ \-\-
d2064 1
a2064 1
= *= /= %= += \-= \*(Lt\*(Lt= \*(Gt\*(Gt= &= ^= \*(Ba=
d2068 1
a2068 1
^
d2120 1
a2120 1
.It ~
d2140 1
a2140 1
.No \*(Gt\*(Gt= &= ^= \*(Ba=
d2174 1
a2174 1
.It ^
d2578 2
a2579 2
i.e. ^X represents Control-X.
Note that although only two prefix characters (usually ESC and ^X)
d2586 12
a2597 12
bind '^[['=prefix\-2
bind '^XA'=up\-history
bind '^XB'=down\-history
bind '^XC'=forward\-char
bind '^XD'=backward\-char
bind '^X1~'=beginning\-of\-line
bind '^X7~'=beginning\-of\-line
bind '^XH'=beginning\-of\-line
bind '^X4~'=end\-of\-line
bind '^X8~'=end\-of\-line
bind '^XF'=end\-of\-line
bind '^X3~'=delete\-char\-forward
d2879 1
a2879 1
.Ic alias r='fc \-e \-' .
d3196 1
a3196 1
.Ic read nfoo?'number of foos: ' ) .
d3452 1
a3452 1
Currently identical to emacs editing except that transpose\-chars (^T) acts
d3526 1
a3526 1
(^[) is entered in command mode.
d3528 1
a3528 1
In vi command-line editing, do command and file name completion when tab (^I)
d3537 1
a3537 1
driver do the work until ESC (^[) was entered.
d3559 1
a3559 1
option is treated specially \(em it clears both the
d3880 1
a3880 1
option were set \(em see the
d4093 1
a4093 1
dependent \(em some systems have only the
d4297 1
a4297 1
character from the terminal (normally ^Z), jobs can be restarted in either the
d4379 1
a4379 1
mean consuming CPU time \(em
d4480 1
a4480 1
e.g. the ASCII ESC character is written as ^[.
d4483 1
a4483 1
.Pf ^[ Ns Ar n ,
d4504 1
a4504 1
.It abort: ^C, ^G
d4512 1
a4512 1
.No ^B , ^XD
d4519 1
a4519 1
.No ^[b
d4527 1
a4527 1
.It beginning\-of\-history: ^[\*(Lt
d4529 1
a4529 1
.It beginning\-of\-line: ^A
d4533 1
a4533 1
.No ^[C , ^[c
d4538 1
a4538 1
.It clear\-screen: ^[^L
d4542 1
a4542 1
.It comment: ^[#
d4547 1
a4547 1
.It complete: ^[^[
d4558 1
a4558 1
.It complete\-command: ^X^[
d4563 1
a4563 1
.It complete\-file: ^[^X
d4568 1
a4568 1
.It complete\-list: ^I, ^[=
d4575 1
a4575 1
Note that ^I is usually generated by the TAB (tabulator) key.
d4578 1
a4578 1
.No ERASE , ^? , ^H
d4589 1
a4589 1
.No ERASE , ^[^? , ^[^H , ^[h
d4596 1
a4596 1
.No ^[d
d4603 1
a4603 1
.No ^N , ^XB
d4618 1
a4618 1
.No ^[L , ^[l
d4623 1
a4623 1
.It end\-of\-history: ^[\*(Gt
d4625 1
a4625 1
.It end\-of\-line: ^E
d4627 1
a4627 1
.It eot: ^_
d4632 1
a4632 1
.No ^D
d4640 1
a4640 1
.It exchange\-point\-and\-mark: ^X^X
d4642 1
a4642 1
.It expand\-file: ^[*
d4650 1
a4650 1
.No ^F , ^XC
d4657 1
a4657 1
.No ^[f
d4664 1
a4664 1
.No ^[g
d4670 1
a4670 1
.It kill\-region: ^W
d4674 1
a4674 1
.No ^K
d4680 1
a4680 1
.It list: ^[?
d4686 1
a4686 1
.It list\-command: ^X?
d4689 1
a4689 1
.It list\-file: ^X^Y
d4695 1
a4695 1
.It newline: ^J , ^M
d4698 1
a4698 1
.It newline\-and\-next: ^O
d4707 1
a4707 1
.It prefix\-1: ^[
d4709 1
a4709 1
.It prefix\-2: ^X , ^[[ , ^[O
d4713 1
a4713 1
.No ^[. , ^[_
d4718 1
a4718 1
.It quote: ^^ , ^V
d4720 1
a4720 1
.It redraw: ^L
d4725 1
a4725 1
.No ^[^]
d4732 1
a4732 1
.No ^]
d4737 1
a4737 1
.It search\-history: ^R
d4742 1
a4742 1
.Ql ^
d4752 1
a4752 1
.It set\-mark\-command: ^[ Ns Aq space
d4754 1
a4754 1
.It transpose\-chars: ^T
d4762 1
a4762 1
.No ^P , ^XA
d4769 1
a4769 1
.No ^[U , ^[u
d4774 1
a4774 1
.It version: ^[^V
d4779 1
a4779 1
.It yank: ^Y
d4781 1
a4781 1
.It yank\-pop: ^[y
d4797 1
a4797 1
=, \e, *, ^X, ^E, ^F, and, optionally,
d4841 2
a4842 2
and have their usual meaning (normal values are in parentheses): kill (^U),
erase (^?), werase (^W), eof (^D), intr (^C), and quit (^\e).
d4846 1
a4846 1
.It ^E
d4848 1
a4848 1
.It ^F
d4853 1
a4853 1
.It ^H
d4855 1
a4855 1
.It ^J \*(Ba ^M
d4858 1
a4858 1
.It ^V
d4862 1
a4862 1
.It ^X
d4868 1
a4868 1
.Ic ^F
d4892 1
a4892 1
.Dq ab2*&^
d4918 1
a4918 1
.Ic I#^J ) .
d4939 1
a4939 1
.It * and ^X
d4943 1
a4943 1
if the word contains no file globbing characters) \(em the big-word is replaced
d4967 1
a4967 1
.Oo Ar n Oc Ns ^F ,
d4990 1
a4990 1
.It = and ^E
d4993 1
a4993 1
.It ^V
d5008 1
a5008 1
.Oo Ar n Oc Ns ^H
d5022 1
a5022 1
.It ^
d5123 1
a5123 1
.Oo Ar n Oc Ns ^N
d5132 1
a5132 1
.Oo Ar n Oc Ns ^P
d5163 1
a5163 1
.Ql ^ ,
d5285 1
a5285 1
.Oo Ar n Oc Ns ~
d5318 1
a5318 1
.It ^J and ^M
d5320 1
a5320 1
.It ^L and ^R
d5338 1
a5338 1
.It Pa ~/.mkshrc
d5343 1
a5343 1
.It Pa ~/.profile
d5414 1
a5414 1
.%B "IEEE Standard for Information Technology \(em Portable Operating System Interface (POSIX)"
d5463 1
a5463 1
.Aq miros-discuss@@mirbsd.org
@


1.111
log
@we don't need to be special if called as -sh any longer now
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.110 2008/02/29 18:20:16 tg Exp $
d13 1
a13 1
.Dd $Mdocdate: Febuary 29 2008 $
d76 1
a76 1
.Ql -
d759 1
a759 1
.No \&[[ -n Ar str No \&]] .
d773 1
a773 1
$ [[ -r foo && $(\*(Ltfoo) = b*r ]]
d833 5
a837 5
autoload='typeset -fu'
functions='typeset -f'
hash='alias -t'
history='fc -l'
integer='typeset -i'
d841 4
a844 4
r='fc -e -'
stop='kill -STOP'
suspend='kill -STOP $$'
type='whence -v'
d855 1
a855 1
.Ic alias -t .
d862 1
a862 1
.Ic set -o Ic trackall
d864 1
a864 1
.Ic set -h ) ,
d1098 1
a1098 1
.Ic set -A
d1130 1
a1130 1
.It ${ Ar name No :- Ar word No }
d1330 1
a1330 1
.It Ev -
d1421 1
a1421 1
.Ic set -o ,
d1423 1
a1423 1
.Ic kill -l
d1568 1
a1568 1
(note that ${HOSTNAME:=$(hostname -s)} and the
d1574 2
a1575 2
PS1='${USER:=$(id -un)}'"@@${HOSTNAME:=$(hostname -s)}:\e$PWD $(
	if (( $(id -u) )); then print \e$; else print \e#; fi) "
d1638 1
a1638 1
.Ic set -o Ic arc4random
d1674 1
a1674 1
.Ql - ,
d1704 1
a1704 1
.Ic alias -d
d1706 1
a1706 1
.Ic alias -d fac=/usr/local/facilities; cd ~fac/bin ) .
d1768 1
a1768 1
.Ql -
d1770 1
a1770 1
.Dq [a0-9]
d1775 1
a1775 1
.Ql -
d1964 1
a1964 1
.It \*(Lt\*(Lt- Ar marker
d1985 1
a1985 1
.Ql - ,
d2022 1
a2022 1
.D1 $ cat /foo/bar 2\*(Gt&1 \*(Gt /dev/null \*(Ba cat -n
d2038 1
a2038 1
+ - ! ~ ++ --
d2044 1
a2044 1
= *= /= %= += -= \*(Lt\*(Lt= \*(Gt\*(Gt= &= ^= \*(Ba=
d2053 1
a2053 1
+ -
d2095 1
a2095 1
.It unary -
d2108 1
a2108 1
.It --
d2119 1
a2119 1
.No *= /= += -= \*(Lt\*(Lt=
d2173 1
a2173 1
.It + - * /
d2197 1
a2197 1
.Ic print -p )
d2199 1
a2199 1
.Ic read -p ) .
d2222 1
a2222 1
.Ic exec 3\*(Gt&p; exec 3\*(Gt&-
d2237 1
a2237 1
.Ic print -p
d2243 1
a2243 1
.Ic print -u Ns Ar n
d2253 1
a2253 1
.Li .-scripts
d2259 1
a2259 1
.Li .-scripts ,
d2273 1
a2273 1
.Ic typeset -f .
d2277 1
a2277 1
.Ic typeset -fu )
d2298 1
a2298 1
.Ic typeset -ft
d2300 1
a2300 1
.Ic typeset -fx ,
d2454 1
a2454 1
.Cm +-x Oc
d2566 12
a2577 12
bind '^[['=prefix-2
bind '^XA'=up-history
bind '^XB'=down-history
bind '^XC'=forward-char
bind '^XD'=backward-char
bind '^X1~'=beginning-of-line
bind '^X7~'=beginning-of-line
bind '^XH'=beginning-of-line
bind '^X4~'=end-of-line
bind '^X8~'=end-of-line
bind '^XF'=end-of-line
bind '^X3~'=delete-char-forward
d2626 1
a2626 1
.Ql - ,
d2837 1
a2837 1
.Cm -e - \*(Ba Fl s
d2854 1
a2854 1
.Cm -e -
d2859 1
a2859 1
.Ic alias r='fc -e -' .
d2926 1
a2926 1
.Ql - ,
d2928 1
a2928 1
.Ql --
d2983 2
a2984 2
.No - Ns Ar signum \*(Ba
.No - Ns Ar signame Oc
d3201 1
a3201 1
.Ic while IFS= read -r foo; do ...; done
d3215 2
a3216 2
while read -p foo; do ...; done
exec 3\*(Gt&p; exec 3\*(Gt&-
d3274 4
a3277 4
.Ic set Op Ic +-abCefhkmnpsuvXx
.Op Ic +-o Ar option
.Op Ic +-A Ar name
.Op Fl -
d3283 1
a3283 1
.Pq Ic -
d3288 1
a3288 1
.Cm +-o Ar option
d3292 1
a3292 1
.Cm +- Ns Ar letter
d3312 1
a3312 1
.Ic set -A foo -- a b c
d3380 1
a3380 1
.It Fl U \*(Ba Ic utf8-hack
d3388 1
a3388 1
.Dq UTF-8
d3394 1
a3394 1
.Ql - ,
d3432 1
a3432 1
Currently identical to emacs editing except that transpose-chars (^T) acts
d3504 1
a3504 1
.It Ic vi-esccomplete
d3507 1
a3507 1
.It Ic vi-tabcomplete
d3525 1
a3525 1
.Sq $- .
d3534 1
a3534 1
.Ql --
d3538 2
a3539 2
.Ql -
option is treated specially \- it clears both the
d3640 1
a3640 1
doesn't exist (so [ -o foo -o -o !foo ] returns true if and only if option
d3733 2
a3734 2
expr -o expr		Logical OR.
expr -a expr		Logical AND.
d3834 1
a3834 1
.Pq Sq - ,
d3848 1
a3848 1
.Ic kill -l
d3860 1
a3860 1
option were set \- see the
d3893 1
a3893 1
.Oo Op Ic +-lprtUux
d3910 1
a3910 1
.Ql -
d3919 1
a3919 1
.Pq Ic -
d4073 1
a4073 1
dependent \- some systems have only the
d4200 1
a4200 1
.Ic kill -l Ar exit-status
d4271 1
a4271 1
.Ic set -m
d4273 1
a4273 1
.Ic set -o monitor ) ,
d4314 1
a4314 1
.It %-
d4344 1
a4344 1
.Ql -
d4348 1
a4348 1
.Ic %-
d4359 1
a4359 1
mean consuming CPU time \-
d4368 1
a4368 1
.Ic kill -l
d4487 1
a4487 1
.It auto-insert: Op Ar n
d4490 1
a4490 1
.It Xo backward-char:
d4497 1
a4497 1
.It Xo backward-word:
d4507 1
a4507 1
.It beginning-of-history: ^[\*(Lt
d4509 1
a4509 1
.It beginning-of-line: ^A
d4511 1
a4511 1
.It Xo capitalise-word:
d4518 1
a4518 1
.It clear-screen: ^[^L
d4538 1
a4538 1
.It complete-command: ^X^[
d4543 1
a4543 1
.It complete-file: ^[^X
d4548 1
a4548 1
.It complete-list: ^I, ^[=
d4556 1
a4556 1
.It Xo delete-char-backward:
d4563 1
a4563 1
.It delete-char-forward: Op Ar n
d4567 1
a4567 1
.It Xo delete-word-backward:
d4574 1
a4574 1
.It Xo delete-word-forward:
d4581 1
a4581 1
.It Xo down-history:
d4590 1
a4590 1
.Ic down-history
d4592 1
a4592 1
.Ic search-history
d4594 1
a4594 1
.Ic up-history
d4596 1
a4596 1
.It Xo downcase-word:
d4603 1
a4603 1
.It end-of-history: ^[\*(Gt
d4605 1
a4605 1
.It end-of-line: ^E
d4610 1
a4610 1
.It Xo eot-or-delete:
d4617 1
a4617 1
.Ic delete-char-forward .
d4620 1
a4620 1
.It exchange-point-and-mark: ^X^X
d4622 1
a4622 1
.It expand-file: ^[*
d4628 1
a4628 1
.It Xo forward-char:
d4635 1
a4635 1
.It Xo forward-word:
d4642 1
a4642 1
.It Xo goto-history:
d4648 1
a4648 1
.It kill-line: KILL
d4650 1
a4650 1
.It kill-region: ^W
d4652 1
a4652 1
.It Xo kill-to-eol:
d4666 1
a4666 1
.It list-command: ^X?
d4669 1
a4669 1
.It list-file: ^X^Y
d4678 1
a4678 1
.It newline-and-next: ^O
d4682 1
a4682 1
.Ic up-history
d4684 2
a4685 2
.Ic search-history .
.It no-op: QUIT
d4687 1
a4687 1
.It prefix-1: ^[
d4689 1
a4689 1
.It prefix-2: ^X , ^[[ , ^[O
d4691 1
a4691 1
.It Xo prev-hist-word:
d4703 1
a4703 1
.It Xo search-character-backward:
d4710 1
a4710 1
.It Xo search-character-forward:
d4717 1
a4717 1
.It search-history: ^R
d4727 1
a4727 1
.Ic search-history
d4732 1
a4732 1
.It set-mark-command: ^[ Ns Aq space
d4734 1
a4734 1
.It transpose-chars: ^T
d4740 1
a4740 1
.It Xo up-history:
d4747 1
a4747 1
.It Xo upcase-word:
d4761 1
a4761 1
.It yank-pop: ^[y
d4850 1
a4850 1
.Ic set -o vi-tabcomplete .
d4918 1
a4918 1
.Ic fc -e ${VISUAL:-${EDITOR:-vi}} Ar n .
d4923 1
a4923 1
if the word contains no file globbing characters) \- the big-word is replaced
d4957 1
a4957 1
.Ic vi-tabcomplete
d4961 1
a4961 1
.Ic vi-esccomplete
d4963 1
a4963 1
.Ic set -o ) .
d5110 1
a5110 1
.Oo Ar n Oc Ns - ,
d5361 1
a5361 1
.Xr utf-8 7 ,
d5394 1
a5394 1
.%B "IEEE Standard for Information Technology \- Portable Operating System Interface (POSIX)"
d5422 1
a5422 1
.%I "Addison\-Wesley Professional"
@


1.110
log
@two small fixes: ① cvs doesn’t like me; ② .Nm only takes one word argument
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.109 2008/02/29 11:03:55 tg Exp $
d13 1
a13 1
.Dd $Mdocdate: Febuary 28 2008 $
a3492 2
Automatically enabled if the basename of the shell invocation begins with
.Dq sh .
@


1.109
log
@use $Mdocdate here, too (extend .Dd of GNU groff first)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.108 2008/02/27 11:24:12 tg Exp $
d7 3
a9 1
.ie \\$1$Mdocdate: .xD \\$2 \\$3, \\$4
d13 1
a13 1
.Dd $Mdocdate$
d5437 1
a5437 1
.Nm mksh R33
@


1.108
log
@almost hack ${foo//bar/baz} support for real, now
still one corner case left ☹
→ 11:09⎜«Han:#UnixNL» Ik _haat_ bash
⇒ kann ich mich nur anschließen…
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.107 2008/02/26 20:43:11 tg Exp $
d4 8
a11 1
.Dd February 27, 2008
@


1.107
log
@implement “here strings”
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.106 2008/02/25 00:58:26 tg Exp $
d4 1
a4 1
.Dd February 26, 2008
d1238 34
@


1.106
log
@now we don’t need more special FPOSIX behaviour any more
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.105 2008/02/24 15:48:43 tg Exp $
d4 1
a4 1
.Dd February 24, 2008
d219 1
d1925 8
@


1.105
log
@live code from FOSDEM: add print \xDB and \u20AC, including regression test
agreed bsiegert@@
good idea and manpage diff ok'd by some netbsd person sitting next to me
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.104 2007/10/25 13:51:18 tg Exp $
d4 1
a4 1
.Dd October 25, 2007
d821 1
a821 7
The following command aliases are defined automatically by the shell, unless
.Fl o Ic posix
is set, in which case only
.Dq integer
and
.Dq local
are defined to support existing shell scripts:
d5385 1
a5385 1
.Nm mksh R32
@


1.104
log
@• fix for the pipeline-as-coprocess problem
• bump to mksh R32
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.103 2007/10/18 20:32:32 tg Exp $
d3032 1
d3034 1
d3036 1
a3036 2
.Ql \e0###
.Po
d3038 4
a3041 2
is an octal digit, of which there may be 0 to 3
.Pc .
@


1.103
log
@first step towards mksh R32 ☺
allow array indices in the uint32_t range (0‥4294967295) and map negatives
into that range; adjust manual page and regression tests; to be used RSN ☻
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.102 2007/10/14 13:43:17 tg Exp $
d4 1
a4 1
.Dd October 18, 2007
a5401 8
.Pp
By the way, the snippet
.Bd -literal -offset indent
$ print hi \*(Ba read a; print $a   # Does not show hi
.Ed
.Pp
does not work, because commands of a pipe sequence are executed in
a subshell (but you can usually use co-processes instead of pipes).
@


1.102
log
@mention interactive shells processing ~/.mkshrc
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.101 2007/09/26 19:26:58 tg Exp $
d4 1
a4 1
.Dd October 14, 2007
d1032 1
a1032 1
Array indices are currently limited to the range 0 through 2147483647 (for
d5388 1
a5388 1
.Nm mksh R31b
@


1.101
log
@be more accurate but terse regarding pipe sequences
somehow, variables don’t propagate up much more often
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.100 2007/09/09 19:18:59 tg Exp $
d4 1
a4 1
.Dd September 26, 2007
d53 5
@


1.100
log
@sync: “unset” always returns zero as per SUSv3
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.99 2007/08/19 22:06:26 tg Exp $
d4 1
a4 1
.Dd September 9, 2007
d5398 1
a5398 1
By the way, the most frequently reported bug is:
d5403 2
a5404 6
This does not work because the last command of a pipe sequence
is executed in a subshell.
This is an
.Nm
feature which can be depended on by scripts.
Use co-processes to work around if necessary and possible.
@


1.99
log
@new builtin “rename” (this name sounds better than “mksh_mv_rescue” ☻)
to just call rename(2) directly, e.g. if /bin/mv needs /lib/ld-uClibc.so.0

some assorted code cleanup
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.98 2007/08/18 01:20:28 tg Exp $
d4 1
a4 1
.Dd August 19, 2007
a4140 2
The exit status is non-zero if any of the parameters were already unset, zero
otherwise.
d5383 1
a5383 1
.Nm mksh R31
@


1.98
log
@put clear-screen on ESC ^L as suggested by the AT&T ksh people in
http://www.opensolaris.org/os/community/on/flag-days/pages/2007081701/
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.97 2007/08/18 00:22:08 tg Exp $
d4 1
a4 1
.Dd August 18, 2007
d3186 11
d5297 1
@


1.97
log
@feature freeze for mksh R31, to be released as part of MirOS #10
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.96 2007/08/13 19:39:20 tg Exp $
d4457 1
a4457 1
.It clear-screen: (not bound)
@


1.96
log
@Implement the “source” command, as requested by some and agreed bsiegert@@
In contrast to AT&T ksh93, its semantics are like GNU bash in that it ap-
pends the current working directory to the search path; it is implemented
as a shell alias instead of enhancing funcs.c:shbuiltins[] like in ksh93.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.95 2007/08/12 14:01:38 tg Exp $
d4 1
a4 1
.Dd August 12, 2007
@


1.95
log
@mention that $RANDOM is _always_ 15-bit unsigned integer, even arc4random’s
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.94 2007/08/12 13:42:22 tg Exp $
d2382 3
d3493 15
d5373 1
a5373 1
.Nm mksh R30b
@


1.94
log
@add “set -o arc4random”, RTFM for details
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.93 2007/07/31 15:29:40 tg Exp $
d1592 2
a1593 1
is referenced, it is assigned a pseudo-random number first.
@


1.93
log
@add a new bindable command “clear-screen”, which can be bound to the ^L key
so that archite@@midnightbsd won’t have to add evil kludges to oksh again if
they switch their ksh to mksh ☺

both “clear-screen” and “error” aren’t bound; default binding for ^L stays,
as usual, “redraw” (principle of least surprise); however GNU bash converts
also might want to put “bind ^L=clear-screen” into their ~/.mkshrc.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.92 2007/07/26 13:32:16 tg Exp $
d4 1
a4 1
.Dd July 31, 2007
d1593 3
a1595 10
By default,
.Xr arc4random 3
is used to produce unsigned 15\-bit values (0\-32767)
whose quality depends on the operating environment.
If
.Ev RANDOM
is assigned a value, it is used as the seed to
.Xr srand 3
and subsequent references yield a semi-predictable sequence from
.Xr rand 3 .
d3340 12
@


1.92
log
@mention ${foo:2:3} limitations
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.91 2007/07/06 02:22:56 tg Exp $
d4 1
a4 1
.Dd July 26, 2007
d4433 4
d4533 1
a4533 1
.It error:
d5349 1
a5349 1
.Nm mksh R30
@


1.91
log
@fix the rest of it
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.90 2007/06/27 23:12:59 tg Exp $
d4 1
a4 1
.Dd July 5, 2007
d1267 3
@


1.90
log
@this is bash compatibility week, and by suggestion of actual users,
namely Dr. Robert “Pfeffer” Arnold (in this case, in FreeWRT), make
a half-completed attempt at implementing ${foo:2:3} substring evals
(of course, negatives can't work right now and that the numbers are
in face expressions is something I only read later too – this is to
be revisited later, but it's already late)

don't depend on this behaviour yet though

if someone wants to add more regression tests, feel free to…
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.89 2007/06/23 19:07:14 tg Exp $
d4 1
a4 1
.Dd June 27, 2007
d1256 1
a1256 1
.\"is negative, counting starts at the end of the string; if it
d1262 5
a1266 5
.\"Both
.\".Ar pos
.\"and
.\".Ar len
.\"are evaluated as arithmetic expressions.
@


1.89
log
@now that we're definitively at 40 pages for the PDF manual, revert some of
the changes in r1.81, and improve wording further
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.88 2007/06/22 23:34:41 tg Exp $
d4 1
a4 1
.Dd June 23, 2007
d1238 29
@


1.88
log
@implement bash-style array initialisation, as requested by many
still experimental
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.87 2007/06/17 00:50:08 tg Exp $
d4 1
a4 1
.Dd June 22, 2007
d176 1
a176 1
variable is unset or empty, but not set to a non-existing filename, the file
d181 3
d740 4
a743 3
.No \&[ Ar str No \&] ,
which tests if the argument has a non-zero length, is not valid;
use explicit operators instead, i.e.\&
d1002 1
d3935 1
a3935 1
unless listed in the same command.
d4617 2
a4618 2
exchanges the previous and current characters and moves the cursor right
one character.
d4655 1
a4655 1
There are file and command completion commands:
d4663 5
a4667 2
command is the last argument command instead of
going to the start of the current line.
d4726 3
a4728 1
Optional file name and command completion, enabled with
d4756 5
a4760 1
The following special commands are not in, or are different from, the normal vi file
d5315 3
a5317 1
compiled without any options impacting functionality.
d5324 1
a5324 2
or
.Li \&#ksh
@


1.87
log
@make sure that “integer” and “local” are defined even in FPOSIX mode, which
is a compromise anyway; these lunox people will have to live with that, too
many existing korn shell alike scripts depend on it even if not on the full
korn shell syntax availability (note: this doesn't mean using these in some
script with #!/bin/sh is ok)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.86 2007/06/16 15:02:56 tg Exp $
d4 1
a4 1
.Dd June 17, 2007
d3211 11
@


1.86
log
@we can do all that
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.85 2007/06/15 22:04:06 tg Exp $
d4 1
a4 1
.Dd June 15, 2007
d814 5
a818 1
is set:
d855 3
a857 1
automatically tracked:
@


1.85
log
@document the FPOSIX stuff
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.84 2007/04/30 19:16:30 tg Exp $
.\" $OpenBSD: ksh.1,v 1.118 2006/11/30 08:47:58 jmc Exp $
@


1.84
log
@• change version number to “R29 and up” so
  that I don't have to bump it every time…
• amend description of emacs-mode “redraw”
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.83 2007/04/23 11:41:47 tg Exp $
d4 1
a4 1
.Dd April 30, 2007
d812 3
a814 1
The following command aliases are defined automatically by the shell:
d3365 2
d5282 1
a5282 1
.Nm mksh R29d
@


1.83
log
@oops, this of course documents mksh R29c (and up)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.82 2007/04/15 12:28:38 tg Exp $
d4 1
a4 1
.Dd April 23, 2007
d4554 2
a4555 1
Reprints the last line of the prompt string and the current input line.
d5278 2
a5279 1
.Nm mksh R29c ,
@


1.82
log
@if we read an utf-8 BOM, enable the utf8-hack flag (we can test for that on
mirbsd even because the main.c enabling is only run for interactive shells)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.81 2007/03/10 21:14:07 tg Exp $
d4 1
a4 1
.Dd April 15, 2007
d5277 1
a5277 1
.Nm mksh R29b ,
@


1.81
log
@fix a typo and shrink it to 39 DIN A4 pages
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.80 2007/03/10 00:34:54 tg Exp $
d4 1
a4 1
.Dd March 10, 2007
d3272 2
a3273 1
.Dq utf8 .
@


1.80
log
@fix setlocale check descr
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.79 2007/03/04 03:04:26 tg Exp $
d176 1
a176 1
variable is unset or empty, the file
d180 1
a180 4
unset in the shell environment.
This processing does not occur if
.Ev ENV
is set to a non-existing filename.
d737 3
a739 4
which tests if the argument has a non-zero length, is not valid; explicit
operators must always be used e.g. instead of
.No \&[ Ar str No \&]
use
d749 1
a749 1
.Ic $(\*(Lt foo)
d754 1
a754 1
$ [[ -r foo && $(\*(Lt foo) = b*r ]]
d981 1
a981 1
.Ic $(\*(Lt foo)
d988 1
a988 1
expressions are currently parsed by finding the matching parenthesis,
a989 1
This should be fixed soon.
d1380 3
a1382 1
This is different from the original Korn shell.
d1429 1
a1429 1
The index of the next argument to be processed when using
d1548 1
a1548 1
By default, if available,
d3262 2
a3263 2
.It Fl U \(*Ba Ic utf8-hack
Enable an experimental UTF-8 hack for the
d3323 4
a3326 1
change in the future to be compatible with the original Korn shell (which
d3329 1
a3329 1
signal).
d3908 1
a3908 1
unless they are also given on the same command line.
d4589 2
a4590 2
exchanges the previous and current characters and moves the cursor one
character to the right.
d4627 1
a4627 1
There are file name and command completion commands:
d4635 2
a4636 5
command is different (in
.Nm
it is the last argument command; in
.Xr vi 1
it goes to the start of the current line).
d4695 1
a4695 3
Optional file name and command completion (see
.Ic ^F
above), enabled with
d4723 1
a4723 5
Special
.Nm
vi commands:
.Pp
The following commands are not in, or are different from, the normal vi file
d5276 2
a5277 4
.Nm mksh R29 ,
compiled without
.Dv MKSH_SMALL
or other functionality-reducing options.
d5287 1
a5287 1
.Pa irc.freenode.net .
@


1.79
log
@• remove strcasestr.c, use home-grown implementation¹, call it stricmp,
  and have it return an API-correct const char *
• enhance and stylify comments
• a little KNF and simplifications
• #ifdef DEBUG: replace strchr and strstr with ucstrchr and ucstrstr
  that take and return a non-const char *, and fix the violations
• new cstrchr, cstrstr (take and give const char *)
• new vstrchr, vstrstr (take const or not, give boolean value)
• new afreechk(x) = afreechv(x,x) = if (x1) afree(x2, ATEMP)
• new ksh_isdash(str) = (str != NULL) && !strcmp(str, "-")
• replace the only use of strrchr with inlined code to shrink
• minor man page fixes
• Minix 3 signames are autogenerated with gcc
• rename strlfun.c to strlcpy.c since we don't do strlcat(3) anyway,
  only strlcpy(3), and shorten it
• dot.mkshrc: move MKSH=… down to the export line
  to not disturb the PS1 visual impression ☺
• dot.mkshrc: Lstripcom(): optimise
• bump version

¹) side effect from creating API-correct cstrchr, cstrstr, etc.
   uses goto so it must be better ☻

tested on mirbsd-current via both Makefile and Build.sh
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.78 2007/01/18 16:23:52 tg Exp $
d4 1
a4 1
.Dd March 4, 2007
d3273 1
a3273 3
.Dq UTF-8 ,
.Dq utf8 ,
.Dq CESU-8 ,
d3275 1
a3275 1
.Dq cesu8 .
@


1.78
log
@wording
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.77 2007/01/18 00:00:27 tg Exp $
d4 1
a4 1
.Dd January 18, 2007
d5296 1
a5296 1
.Li \&#\&!/bin/mksh Pq \&#mksh
d5312 1
a5312 1
Use co-routines to work around if necessary and possible.
@


1.77
log
@if .Nm is used with arguments, it needs the name, always (groff 1.15)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.76 2007/01/17 23:47:15 tg Exp $
d4 1
a4 1
.Dd January 17, 2007
d5279 1
a5279 3
This shell was based on the public domain korn shell
and is currently maintained by
.An Thorsten Glaser Aq tg@@mirbsd.de .
d5283 2
a5284 1
and many other persons.
@


1.76
log
@* Build.sh, histrap.c: prevent testing of strsignal() if we have sys_siglist[]
* mksh.1: .Nm is never used with "" as argument, fixes GNU groff 1.15
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.75 2007/01/14 01:56:23 tg Exp $
d4609 1
a4609 1
.Nm .
d4828 1
a4828 1
.Nm .
@


1.75
log
@okay, this didn't work out; changing window sizes when we're
actually within a (the emacs) editing mode does not work at
all, whether forced or not, only if we leave the editing mode
(at end of input); probably due to it saving stuff from e.g.
x_cols into xx_cols, etc.

-> remove SIGWINCH handling(!)
-> TIOCGWINSZ is now executed at end of every input line
-> use 'ESC #' if you direly need to change line size
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.74 2007/01/14 01:09:09 tg Exp $
d4 1
a4 1
.Dd January 14, 2007
d5288 1
a5288 1
.Nm "" R29 ,
@


1.75.2.1
log
@merge -rHEAD as of now into the const-correctness branch
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.78 2007/01/18 16:23:52 tg Exp $
d4 1
a4 1
.Dd January 18, 2007
d4609 1
a4609 1
.Nm mksh .
d4828 1
a4828 1
.Nm mksh .
d5279 3
a5281 1
This shell is based upon the Public Domain Korn SHell.
d5285 1
a5285 2
and many other persons, and is currently maintained by
.An Thorsten Glaser Aq tg@@mirbsd.de .
d5288 1
a5288 1
.Nm mksh R29 ,
@


1.74
log
@* do *not* check the terminal size after each line processing,
  only if we got a SIGWINCH -> interactive use speed-up on the
  slower boxen (slowness courtesy of otto@@obsd)
* ^L (redraw line) now (always) checks window size; use this
  instead if required while editing the prompt; changes to the
  variables will still be propagated after the line is entered
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.73 2007/01/06 18:48:26 tg Exp $
a4555 1
Also checks terminal size (columns and lines) as reported by stty for changes.
@


1.73
log
@use RLIMIT_AS, after much RTFM
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.72 2006/12/11 20:00:28 tg Exp $
d4 1
a4 1
.Dd January 6, 2007
d4556 1
@


1.72
log
@CPPFLAGS+=-DMKSH_SMALL is not the only functionality-reducing option,
yet the others are not similar (mostly: OS reduces functionality, eg.
SunOS doesn't do persistent history, Minix some job control, Plan 9!)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.71 2006/12/06 13:46:27 tg Exp $
d4 1
a4 1
.Dd December 11, 2006
d3987 1
a3987 2
kibibytes on the amount of virtual memory (on some
operating systems: total address space) used.
@


1.71
log
@catch up openbsd manpage changes: typos; from alf schlichting,
and revisit the RLIMIT_AS issue
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.70 2006/11/19 20:43:13 tg Exp $
d4 1
a4 1
.Dd November 19, 2006
d5292 1
a5292 1
or similar functionality-reducing options.
@


1.70
log
@remove the "set -o sh" option (dummy anyway),
"set +o emacs-usemeta" and "set -o vi-show8" which are always on now,
since we have proper internationalisation (i.e. utf-8) support, and
assume the user either has a 'C' locale and can't enter 8-bit chars,
his terminal is 8bit-transparent, or he has a 'UTF-8' locale.
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.69 2006/11/19 17:00:32 tg Exp $
.\" $OpenBSD: ksh.1,v 1.116 2006/07/26 10:13:25 jmc Exp $
d5011 2
a5012 2
occurrence of the last search string; the directory of the search is the same
as the last search.
d5018 2
a5019 2
occurrence of the last search string; the directory of the search is the
opposite of the last search.
@


1.69
log
@document hidden behaviour of typeset to clear flags from a certain
set if any other from that set are touched
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.68 2006/11/19 16:43:42 tg Exp $
a3303 8
.It Ic emacs-usemeta
In emacs command-line editing, use the 8th bit as meta (^[) prefix.
This is disabled by default, so you can use high-bit7 characters in pathnames.
If this option is not set, characters in the range 128\-160 are printed as is,
which may cause problems in some locales.
This option has no effect if the
.Ic utf8-hack
option is enabled.
a3370 4
.It Ic sh
This flag only exists for
.Nm pdksh
compatibility and cannot be turned on.
a3377 5
.It Ic vi-show8
Prefix characters with the eighth bit set with
.Sq M- .
If this option is not set, characters in the range 128\-160 are printed as is,
which may cause problems in some locales.
@


1.68
log
@make mksh compatible to the AT&T ksh spec which says, according to
twkm (from #ksh on freenode), that $RANDOM is always an unsigned
15-bit decimal integer.

(RANDOM << 15 | RANDOM) thusly yields 30 bit, which is still more
than 36^5, so we can use it on the baselife CD to speed things up
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.67 2006/11/16 13:05:39 tg Exp $
d3879 1
a3879 2
Integers are printed as unsigned values (only
useful when combined with the
d3916 13
@


1.67
log
@work around a bug in the GNU implementation of the Berkeley mdoc macros
cought by crib in IRC, thanks

(our textproc/groff port is unaffected since it uses the MirOS implementation,
 a BSD derived one with fixes, by default instead but can reproduce the defect
 with -mgdoc instead of -mdoc as parametre)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.66 2006/11/12 10:44:42 tg Exp $
d4 1
a4 1
.Dd November 12, 2006
d1553 1
a1553 1
is used to produce unsigned 31\-bit values (0\-2147483647)
d1559 1
a1559 2
and subsequent references yield a semi-predictable sequence
of unsigned 15\-bit results (0\-32767) employing
a5191 1
.Xr arc4random 1 ,
d5207 1
@


1.66
log
@only auto-enable set -o utf8-hack (set -U) for interactive shells
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.65 2006/11/10 05:23:12 tg Exp $
d202 1
a202 1
.Ql ( ,
d265 1
a265 1
.Ql [ .
d298 1
a298 1
.Ql [
d4790 1
a4790 1
.Ql ( ,
@


1.65
log
@if MKSH_SMALL, disable persistent history code as well (like on Solaris,
where it can't work anyway), and fix that code to shrink
saves 2071t 20d 5i
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.64 2006/11/09 22:11:08 tg Exp $
d4 1
a4 1
.Dd November 10, 2006
d3269 1
a3269 1
This is enabled automatically if your system supports
@


1.64
log
@more getconf/confstr fixes
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.63 2006/11/08 23:49:01 tg Exp $
d4 1
a4 1
.Dd November 9, 2006
d5295 4
a5298 1
.Nm "" R29 .
@


1.63
log
@fix description of setlocale stuff a little
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.62 2006/11/08 20:32:44 tg Exp $
d4 1
a4 1
.Dd November 8, 2006
d2604 2
a2605 4
.Ev PATH
(the actual value of the default path is system dependent: on
POSIX-ish systems, it is the value returned by
.Ic getconf CS_PATH ) .
a5195 1
.Xr getconf 1 ,
@


1.62
log
@* set -o utf8-hack implies set +o emacs-usemeta (the default)
* we're R29 (-beta)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.61 2006/11/08 20:27:26 tg Exp $
d3271 1
a3271 1
This is enabled automatically if your system supports these two calls and
d3273 3
a3275 3
or an afterwards
.Fn nl_langinfo CODESET
return something that matches to
d5213 1
d5215 1
d5223 1
@


1.61
log
@irc is fun. I registered channel #!/bin/mksh in freenode.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.60 2006/11/05 17:01:46 tg Exp $
d3312 3
d5295 1
a5295 1
.Nm "" R28 .
@


1.60
log
@make this R29(beta), mksh -U turn on (or setlocale), and document.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.59 2006/09/13 16:14:29 tg Exp $
d4 1
a4 1
.Dd September 13, 2006
d5298 1
a5298 1
.Li \&#mksh
@


1.59
log
@fix description of $RANDOM, which is not limited to 15 bit any more
as a device to determine whether arc4random(3) is in effect or not.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.58 2006/08/28 03:31:01 tg Exp $
d14 1
a14 1
.Op Fl +abCefhiklmnpruvXx
d3268 13
@


1.58
log
@First result from the PDF review, by myself:
* a mksh -> an mksh
While here:
* fix list of shells that don't match . and .. with .* (pdksh went
  missing in transit)
* Try to make fit on 39 pages by shortening a few
  lines of redundant commentary about non-mksh books
* AT&T -> .At
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.57 2006/08/22 22:49:36 tg Exp $
a2 1
.\" $OpenBSD: sh.1tbl,v 1.53 2004/12/10 01:56:56 jaredy Exp $
d4 1
a4 1
.Dd August 28, 2006
a1547 1
A pseudo-random number generator.
d1550 2
a1551 3
is referenced, it is assigned the next random number in the range
0\-32767.
By default,
d1553 3
a1555 2
is used to produce values.
If the variable
d1557 1
a1557 1
is assigned a value, the value is used as the seed to
d1559 3
a1561 5
and subsequent references of
.Ev RANDOM
will use
.Xr rand 3
to produce values, resulting in a predictable sequence.
@


1.57
log
@* remove redundancy
* integrate compat.h, version.h into sh.h (dependency trick didn't work anyway)
* mention #ksh in mksh(1) since the founder (twkm) said it's on topic too
  (don't remove mention of #mksh despite it's usually empty because of control)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.56 2006/08/14 20:41:21 tg Exp $
d5 1
a5 1
.Dd August 22, 2006
d1780 1
d1785 2
a1786 1
but AT&T
d1997 2
a1998 1
(specifying base 16), similar to AT&T
a5283 21
The O'Reilly book documents the
.At
.Nm KSH88
(in the 1993 first edition) or, respectively, the
.At
.Nm KSH93
(in the 2002 second edition).
The first edition can sometimes be found lurking around
on the internet and is better suited for teaching
.Nm
than the second edition (which is still okay to buy and read)
but this manual page is a more complete reference.
The other books document usually
.At
.Nm ksh
in differing versions, sometimes even
.Nm pdksh ,
but due to its relative novelty, none documents
.Nm mksh
yet.
.Pp
d5302 1
a5302 1
This is a
@


1.56
log
@* document the feature-not-bug status of pipeline-subshell-1
* fix spelling in regression test
* expand test-stlt-1 by reverse logic, just to make sure
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.55 2006/08/11 13:46:32 tg Exp $
d5 1
a5 1
.Dd August 14, 2006
d5304 1
a5304 1
or this manual page to the MirOS Project discussion mailing list at
d5306 1
a5306 1
or in the
d5308 4
a5311 3
channel on the OPN IRC network at
.Pa irc.freenode.net
.Pq port 6667 .
a5317 3
The
.Nm pdksh
author is aware of this and there is no need to report it.
d5319 4
a5322 4
is run in a subshell.
In
.Nm "" ,
this is a feature which can be depended on by scripts.
@


1.56.2.1
log
@move tg-mksh-plan9ape_BASE to current cvs HEAD and sync tg-mksh-plan9ape branch
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.57 2006/08/22 22:49:36 tg Exp $
d5 1
a5 1
.Dd August 22, 2006
d5304 1
a5304 1
to the
d5306 1
a5306 1
mailing list or in the
d5308 3
a5310 4
or
.Li \&#ksh
IRC channel at
.Pa irc.freenode.net .
d5317 3
d5321 4
a5324 4
is executed in a subshell.
This is a
.Nm
feature which can be depended on by scripts.
@


1.56.2.2
log
@merge the latest results of HEAD in here
and bring back the probably-problematic
chunk with a fat comment
@
text
@@


1.55
log
@point people to the IRC channel (#mksh/OPN)
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.54 2006/08/09 20:44:15 tg Exp $
d5 1
a5 1
.Dd August 11, 2006
d5322 4
@


1.54
log
@re-implement "set -o posix" which doesn't do much ;)
but turns off 'braceexpand' when turned on as side effect,
just like oksh/pdksh.
document "set -o sh" too.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.52 2006/08/08 20:19:14 tg Exp $
d5 1
a5 1
.Dd August 9, 2006
d5305 6
a5310 1
.Aq miros-discuss@@mirbsd.org .
@


1.53
log
@fix an omission to delete, and remove confusing ancient comment
@
text
@d5 1
a5 1
.Dd August 8, 2006
d3358 5
d3367 4
@


1.52
log
@correct the description of "abort"
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.51 2006/08/08 20:17:21 tg Exp $
a2293 1
There are some confusions regarding POSIX that is not uber-strictly adhered to.
a3514 1
If the
@


1.51
log
@remove the 'stuff' functionality altogether,
ksh93 doesn't have it, and I don't know, nor
do I care about what "the BRL ^T mini-systat
feature" is.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.50 2006/08/08 20:07:53 tg Exp $
d4330 2
a4331 3
Useful as a response to a request for a
.Ic search-history
pattern in order to abort the search.
d4564 1
a4564 1
The abort key will leave search mode.
@


1.50
log
@* bind ^T to transpose-chars as documented in the manual page,
  not to stuff, even if TIOCSTI is available
* it's transpose-chars not transpose

bug spotted by hondza who wondered that on ^T the line repeats itself forever
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.49 2006/08/02 14:02:55 tg Exp $
a4574 8
.It stuff:
On systems supporting it, pushes the bound character back onto the terminal
input where it may receive special processing by the terminal handler.
This is useful for the BRL ^T mini-systat feature, for example.
.It stuff-reset:
Acts like
.Ic stuff ,
then aborts input the same as an interrupt.
@


1.49
log
@the 'delete' key does *not* act as Ctrl-D (EOT, cf. ascii(7))
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.48 2006/08/02 14:00:19 tg Exp $
d5 1
a5 1
.Dd August 2, 2006
d3303 2
a3304 2
Currently identical to emacs editing except that transpose (^T) acts slightly
differently.
@


1.48
log
@bind xterm-xfree86 and wscons (NetBSD®) wsvt25/vt220 too
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.47 2006/08/02 13:34:02 tg Exp $
d2490 1
a2490 1
bind '^X3~'=eot-or-delete
@


1.47
log
@this is mksh R28 (beta)

I think of implementing multiline editing (bash-style) for R28 final,
but other than that, the new features already suffice for a new major
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.46 2006/08/02 13:32:18 tg Exp $
d2475 2
a2476 2
The following default bindings show how the arrow keys, the
home, end and delete key on an ANSI terminal or xterm are bound
d2485 5
a2490 1
bind '^X4~'=end-of-line
@


1.46
log
@implement a hack whereas you can now bind functions (and macros)
to keys with a trailing tilde (after prefix + control char); the
function is then invoked after prefices, control char and one more
character X are entered; if X is not a tilde, it is ungetc(3)d
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.45 2006/08/02 11:50:28 tg Exp $
d1463 1
a1463 1
.Pp
@


1.45
log
@* Build.sh: fix manpage generation defaults under Cygwin
* mksh.1: rework prompt ($PS1) section, simplify example,
  point to packaged dot.mkshrc example
* mksh.1: fix description of 'redraw' regarding redrawal
  of prompts longer than one screen line
* all: bump version/date
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.44 2006/08/02 10:41:03 tg Exp $
d2454 2
a2455 1
optionally preceded by one of the two prefix characters.
d2466 3
d2475 2
a2476 2
The following default bindings show how the arrow keys
on an ANSI terminal or xterm are bound
d2484 3
d5278 1
a5278 1
.Nm "" R27 .
@


1.44
log
@* Build.sh: fix accidental CR-LF catastrophe
  (yeah, that's what you get from developing with a
  16-bit MS-DOS(R) executable of your favourite text editor)
* lex.c, mksh.1: do not print the delimiting character for
  not-to-be-counted character sequences (i.e. ANSI escapes)
  in prompts any more, mostly because ASCII 01h is printable
  on both Interix and Cygwin and I'm lazy
  (this also fixes prompt width counting if a printable character
  such as 'x' is used as delimiting character)
* lex.c: through printing the prompt character by character,
  also print the delimited sequences if skipping, fixes some
  prompt redrawal not honouring colours stuff while not totally
  redrawing the entire prompt
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.43 2006/08/01 14:09:19 tg Exp $
d5 1
a5 1
.Dd August 1, 2006
d1463 15
d1479 6
a1484 7
More advanced settings
can be found in the file
.Pa /etc/profile
on any MirOS system as well as at
.Pa http://cvs.mirbsd.de/contrib/samples/etc_profile
or on the website), but you might like the following example
(note that ${HOSTNAME:-$(hostname -s)} and the
d1489 3
a1491 7
.Bd -literal -offset indent
PS1="\e${USER}@@${HOSTNAME:-$(hostname -s)}:\e$PWD $(
	if [[ $(id -u) -eq 0 ]]; then
		print '#'
	else
		print '$'
	fi) "
a1506 14
The default prompt is
.Sq $\ \&
for non-root users,
.Sq #\ \&
for root.
If
.Nm
is invoked by root and
.Ev PS1
does not contain a
.Sq #
character, the default value will be used even if
.Ev PS1
already exists in the environment.
d1516 1
a1516 1
.Ic ^^
d1523 1
a1523 1
PS1="$x$(print \e\er)$x$(tput so)$x\e$PWD$x$(tput se)$x\*(Gt "
d4532 1
a4532 1
Reprints the prompt string and the current input line.
@


1.43
log
@(partial) sync with openbsd (and fix after them),
gives us a better wrapping prompt and a manpage wording cleanup
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.42 2006/08/01 12:44:17 tg Exp $
d1488 1
a1488 1
sequences (such as escape codes) by prefixing your prompt with a non-printing
d1490 2
a1491 2
the escape codes with this non-printing character.
If you don't have any non-printing characters, you're out of luck.
d1493 4
a1496 2
this hack; it's in the original
.Xr ksh88 1 .
@


1.42
log
@bring back the 'version' editing command at "ESC ^V" like AT&T ksh93+r
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.41 2006/07/27 14:45:30 tg Exp $
.\" $OpenBSD: ksh.1,v 1.112 2006/04/22 14:10:36 jmc Exp $
d1433 1
a1433 1
The index of the last argument processed when using
d2799 3
a2801 1
and the index of the next argument to be processed in the shell parameter
@


1.41
log
@* add new book reference from #ksh (freenode) topic
* add another ksh book, referenced from amazon
* fix reference mdoc code
* add page count for the books
* fix old 10-digit ISBNs
* add new 13-digit ISBNs
* add myself as current maintainer/developer
* add miros-discuss eMail address for bug reports
* note that no book documents mksh
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.40 2006/07/23 14:35:44 tg Exp $
d5 1
a5 1
.Dd June 27, 2006
d1412 5
d4529 1
a4529 1
.It quote: ^^
d4592 5
a4596 2
.It quote: ^V
Synonym for ^^.
d4811 5
@


1.40
log
@dates
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.39 2006/07/23 14:35:10 tg Exp $
d5 1
a5 1
.Dd June 23, 2006
d5189 14
a5202 4
.%A David Korn
.%T "The KornShell Command and Programming Language"
.%D 1983
.%O "ISBN 0-13-516972-0"
d5207 6
a5212 2
.%T "UNIX Shell Programming"
.%O "Hayden"
d5216 2
a5217 2
.%T "IEEE Standard for Information Technology \- Portable Operating " \
    "System Interface (POSIX) \- Part 2: Shell and Utilities"
d5219 3
a5221 1
.%O "ISBN 1-55937-266-9"
d5225 1
a5225 1
.%T "Learning the Korn Shell"
d5227 3
a5229 1
.%O "O'Reilly, ISBN 1-56592-054-6"
d5234 1
a5234 1
.%T "Learning the Korn Shell, Second Edition"
d5236 11
a5246 1
.%O "O'Reilly, ISBN 0-596-00195-9"
d5249 3
a5251 1
This shell is based on the public domain korn shell.
d5254 2
a5255 1
projects and suggestions from many people.
d5271 9
d5282 2
a5283 1
or this manual page to the MirOS Project discussion mailing list.
@


1.39
log
@simplify, rid use of .Mx macro (portability) and direct users to miros-disgust@@
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.38 2006/07/21 21:47:43 tg Exp $
d5 1
a5 1
.Dd June 21, 2006
@


1.38
log
@while mksh isn't designed to run as sh(1) it _can_ do it,
and in fact, Han Boetes even uses it as /bin/sh on CRUX GNU/Linux
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.37 2006/07/03 12:19:43 tg Exp $
a7 14
.\" for portability
.de Mx
.nr cF \\n(.f
.nr cZ \\n(.s
.ds aa \&\f\\n(cF\s\\n(cZ
.if \\n(aC==0 \{\
.	if \\n(.$==0 \&MirBSD\\*(aa
.\}
.if \\n(.$==1 \{\
.	if "\\$1"."  \&MirBSD\\$1\\*(aa
.	if "\\$1","  \&MirBSD\\$1\\*(aa
.	if "\\$1"MirBSD"  \&MirBSD\\*(aa
.\}
..
d5242 1
a5242 3
or this manual page to the
.Mx
development team.
@


1.37
log
@fix date/version
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.36 2006/06/21 19:27:35 tg Exp $
d23 2
a24 1
.Nm mksh
@


1.36
log
@* process ~/.mksrc only if FTALKING (i.e. interactive shell)
  From: hondza <miscreant@@tiscali.cz>
* document that in the manual page myself
* add regression test for that myself
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.35 2006/05/10 19:30:33 tg Exp $
d5 1
a5 1
.Dd May 10, 2006
@


1.35
log
@* this is almost mksh R27, bump
* add the O'Reilly books as references
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.34 2006/05/10 18:54:11 tg Exp $
d182 3
a184 3
parameter is set when the shell starts (or, in the case of login shells,
after any profiles are processed), its value is subjected to parameter,
command, arithmetic, and tilde
d5157 1
a5157 1
User's startup script.
@


1.34
log
@apply some fixes from OpenBSD and don't apply some others
but sync RCS IDs for easier future adaption:
* Simplify savefd() by removing the "noclose" flag and make noclose
  behavior the default. Almost all uses of savefd() are followed
  by an implicit or explicit close.
* fix typos
* might as well make ksh_getopt() match real getopt(), ie. get rid of that
  stupid EOF concept that was never true. adobriyan@@gmail
* use SEEK_* for lseek()
* fix lint comments, no functional changes
* remove excessive optimization; from adobriyan@@gmail
* only santa checks things twice; from adobriyan@@gmail
* Interpret zero-filled numbers as decimal; PR 4213; from Alexey Dobriyan
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.33 2006/05/08 12:12:36 tg Exp $
d5220 13
d5239 14
d5255 1
a5255 1
to the
@


1.33
log
@illustrate creative use of $PS1
requested by Jari Aalto
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.32 2006/05/08 11:59:41 tg Exp $
.\" $OpenBSD: ksh.1,v 1.109 2005/12/06 20:40:02 jmc Exp $
d5 1
a5 1
.Dd May 22, 2005
@


1.32
log
@* check.t: add two mkshrc-tests (turn on, turn off)
* check.pl, check.t: add mkshrc-test whether "real" $HOME/.mkshrc interfers
* mksh.1: sync with reality: $ENV unset isn't needed, $ENV='' is enough
  to turn on ~/.mkshrc processing
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.31 2006/05/08 11:42:36 tg Exp $
d1472 20
@


1.31
log
@New feature: read ~/.mkshrc during startup, after the profiles
have been read, for non-priviledgued shells only. If $ENV is
set, ~/.mkshrc is ignored (even if the file pointed to by $ENV
does not exist in the first place).
Feature requested by Jari Aalto for portable mksh because some
operating systems' vendors do not allow touching the profile.

Initial diff and manual page addition by Jari Aalto <jari.aalto@@cante.net>
Code changes and manual page correctness by me.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.30 2006/02/16 11:48:32 tg Exp $
d190 1
a190 1
variable is unset, the file
d5140 1
a5140 1
is unset.
@


1.30
log
@* convert most of the interna of edit.c to unsigned where it's
  important for the signedness of the target, to enable using
  high-bit7 characters on the command line (eg. in UTF-8 locales)
* make emacs-usemeta and vi-show8 equivalent and document that
  in the manual page (i.e. beware if you're in a latin1 locale)
* do not reference SUSv3 (helps GNU groff), write \&" out instead
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.29 2006/01/30 12:37:23 tg Exp $
d98 3
a100 1
parameter (see below).
d188 10
d5136 5
@


1.29
log
@* update to mksh R26c
* there is no comma in front of "which" in English, I was taught
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.28 2006/01/29 20:04:52 tg Exp $
d1861 3
a1863 3
.Ql \enewline .
Handling of double quotes follows
.St -susv3 .
d3264 2
d3339 1
a3339 1
which may cause problems.
@


1.28
log
@sync with OpenBSD: remove unused code and vars; name clash with libc
compiles under MirBSD
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.27 2006/01/27 10:59:30 tg Exp $
d197 1
a197 1
Words, which are sequences of characters, are delimited by unquoted whitespace
d355 1
a355 1
reserved word, which causes the exit status of the pipeline to be logically
d965 1
a965 1
command, which is run in a subshell.
d1569 1
a1569 1
Tilde expansion, which is done in parallel with parameter substitution, is done
d2087 1
a2087 1
A co-process, which is a pipeline created with the
d2089 1
a2089 1
operator, is an asynchronous process that the shell can both write to (using
d2174 1
a2174 1
parameter for a file with the same name as the function, which, if found, is
d2376 1
a2376 1
option causes directory aliases, which are used in tilde expansion, to be
d2442 1
a2442 1
string, which may contain editing commands.
d2994 1
a2994 1
command, which does not process
d3670 1
a3670 1
(also known as 0), which is executed when the shell is about to exit, and
d3835 1
a3835 1
option, which meant upper case letters would never be used for bases greater
d4071 1
a4071 1
Job control refers to the shell's ability to monitor and control jobs, which
d4164 1
a4164 1
is the exit status of the job, which is omitted if the status is zero.
@


1.27
log
@mirbsd
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.26 2006/01/27 10:58:36 tg Exp $
.\" $OpenBSD: ksh.1,v 1.107 2005/11/16 12:49:21 jmc Exp $
d1471 1
a1471 1
The default is
d1476 9
@


1.26
log
@* add a few handy tricks (IFS, -r, -p and co-processes) to the description
  of the 'read' builtin (it's not exactly where they belong, but hey, this
  man page is already better than the O'Reilly book)
* replace all | with \*(Ba
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.25 2005/11/22 18:36:20 tg Exp $
d7 1
a7 1
.Os MirOS
d14 1
a14 1
.	if \\n(.$==0 \&MirOS\\*(aa
d17 2
a18 2
.	if "\\$1"."  \&MirOS\\$1\\*(aa
.	if "\\$1","  \&MirOS\\$1\\*(aa
@


1.25
log
@Change interpretation of '\"' in here documents with substitution
according to SUSv3 and other modern shells (POSIX allows both).
Idea for the patch (add another lex state) from OpenBSD, but the
implementation differs slightly (and is better in quality).

Also add two testcases (/bin/sh passes both, old mksh only one),
and document the change in the manual page. Sync RCS IDs with OBSD.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.24 2005/11/22 18:09:18 tg Exp $
d234 1
a234 1
.Ql ||
d347 1
a347 1
.Ql |
d363 1
a363 1
.Ql || ,
d365 1
a365 1
.Ql |& ,
d375 1
a375 1
.Ql ||
d383 1
a383 1
.Ql ||
d386 1
a386 1
.Ql |& ,
d393 1
a393 1
.Ql ||
d399 2
a400 2
$ false && echo foo || echo bar
$ true || echo foo && echo bar
d419 1
a419 1
.Ql |&
d427 1
a427 1
.Ql ||
d430 1
a430 1
.Ql |& ,
d723 1
a723 1
.Ql || ,
d752 1
a752 1
.Ql ||
d1689 1
a1689 1
.Ic *(foo|bar)
d1702 1
a1702 1
.Ic +(foo|bar)
d1714 1
a1714 1
.Ic ?(foo|bar)
d1725 1
a1725 1
.Ic @@(foo|bar)
d1735 1
a1735 1
.Ic !(foo|bar)
d2897 1
a2897 1
.Op Cm c | Cm b
d3061 26
d3189 1
a3189 1
.Ic ||
d4728 1
a4728 1
.Ql | ,
d5186 1
a5186 1
$ print hi | read a; print $a   # Does not show hi
@


1.24
log
@merge OpenBSD (sort order) fix but don't document any kshrc,
we got rid of them some time ago
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.23 2005/10/21 12:41:55 tg Exp $
d1852 3
a1854 3
.Ql \enewline ;
any backslash preceding double quotes is removed (see
.Sx BUGS ) .
d5149 2
a5150 1
incorporating changes from the OpenBSD project.
a5157 8
Quoting rules for here documents are the same as for
double-quoted strings due to legacy reasons; this conforms with
.St -p1003.2-92
interpretation #104 and considered a feature of
.Nm
despite breaking compatibility with
.St -susv3 .
.Pp
@


1.23
log
@follow OpenBSD and add mknod as mksh builtin (mknod <file> p acts as mkfifo)
but write a good chunk of that code myself (better structured, better error
handling, more gotos, less function calls, int -> bool)

passes all tests on mirbsd; this will become mksh R25 once tested on other
supported OSes
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.22 2005/10/08 19:34:39 tg Exp $
.\" $OpenBSD: ksh.1,v 1.106 2005/10/12 19:52:56 bernd Exp $
d5091 2
a5094 2
.It Pa /etc/shells
Shell database.
@


1.22
log
@we have a posix option? No sir.
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.21 2005/10/08 19:30:59 tg Exp $
.\" $OpenBSD: ksh.1,v 1.101 2005/08/01 19:29:57 jmc Exp $
d2302 3
a2304 2
.Ic \&[ , echo , let , print ,
.Ic pwd , test , ulimit , whence
d2894 37
d5109 2
d5122 2
a5123 1
.Xr script 7
@


1.21
log
@our test(1) promises we can do string1 < string2, and
our /bin/test uses mksh... so we pee (literally) on
POSIX and don't accept < and > only for [[ ... ]] operator
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.20 2005/10/07 18:36:19 tg Exp $
d2263 1
a2263 7
Just to confuse things, if the
.Ic posix
option is turned off (see the
.Ic set
command below), some special commands are very special in that no field
splitting, file globbing, brace expansion, nor tilde expansion is performed
on arguments that look like assignments.
a3406 2
.Ic posix
option is not set,
d3408 1
a3408 2
may be left out, in which case it is taken to be 1 (the behaviour differs due
to the special POSIX rules described above).
@


1.20
log
@$LINES is implemented
From Matthias Kilian via obsd
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.19 2005/09/11 14:47:27 tg Exp $
a739 7
There are two additional binary operators,
.Ql \*(Lt
and
.Ql \*(Gt ,
which return true if their first string operand is less than, or greater than,
their second string operand, respectively.
.It
d3462 4
d3524 2
a3525 1
instead.
@


1.19
log
@revert -r1.18 here too
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.17 2005/08/26 21:54:05 tg Exp $
a1424 1
Not yet implemented.
@


1.18
log
@* add printf(1) as mksh(1) builtin on MirOS
  (or, more general, all systems using Makefile
  instead of Build.sh)
* document this fact
@
text
@d2317 1
a2317 2
.Ic printf , pwd , test , ulimit ,
.Ic whence
a2969 9
.It Ic printf Ar format Op Ar arguments
This builtin is not included with portable
.Nm
and only available under
.Mx .
It mimics the
.Xr printf 1
behaviour; see there for a complete reference.
.Pp
a5075 1
.Xr printf 1 ,
@


1.17
log
@* strip .Mx macro copy down to what's needed
* comment about \" vs " in here documents
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.16 2005/08/21 13:02:17 tg Exp $
d2317 2
a2318 1
.Ic pwd , test , ulimit , whence
d2971 9
d5086 1
@


1.16
log
@* make 64-bit clean on GNU/Linux by default
* clean up and remove some .Xr from the man page
* bump version
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.15 2005/08/02 12:35:26 tg Exp $
a16 1
.	if "\\$1"6"  \&MirOS #6\\*(aa
d1861 2
a1862 1
any backslash preceding double quotes is removed.
d5128 8
@


1.15
log
@^V now is quote, not version, even in emacs mode. (From OpenBSD.)
Also, the "version" command got removed in its entirety.
Shaves off another global variable, even.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.14 2005/07/06 00:02:06 tg Exp $
a5072 1
.Xr csh 1 ,
a5073 1
.Xr mg 1 ,
a5078 1
.Xr vi 1 ,
a5087 1
.Xr random 3 ,
a5089 1
.Xr srandom 3 ,
@


1.14
log
@remove Korn's bizarre /dev/fd hack
(only affects Interix!)

Tests on /dev/fd are now officially unsupported in mksh too.
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.13 2005/07/04 12:34:23 tg Exp $
.\" $OpenBSD: ksh.1,v 1.99 2005/05/25 16:52:06 jaredy Exp $
a1420 5
See also the version commands in
.Sx Emacs editing mode
and
.Sx Vi editing mode
sections, below.
d4505 2
a4506 5
.It version: ^V
Display the version of
.Nm .
The current edit buffer is restored as soon as any
key is pressed (the key is then processed, unless it is a space).
a4720 3
.It ^V
Display the version of the shell;
it is displayed until another key is pressed (this key is ignored).
@


1.13
log
@get rid of $PGRP
get rid of special bourne-shell emulating mode
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.12 2005/07/04 12:27:27 tg Exp $
a3500 12
On operating systems not supporting
.Pa /dev/fd/ Ns Ar n
devices (where
.Ar n
is a file descriptor number), the
.Ic test
command will attempt to fake it for all tests that operate on files (except the
.Fl e
test).
For example,
[ -w /dev/fd/2 ] tests if file descriptor 2 is writable.
.Pp
@


1.12
log
@get rid of special "POSIX"ish mode
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.11 2005/07/04 12:07:40 tg Exp $
d25 1
a25 1
.Nd MirBSD Korn/Bourne shell
a1456 2
.It Ev PGRP
The current process group (read-only).
a2263 45
.Ss Strict Bourne shell mode
When the
.Ic sh
option is enabled (see the
.Ic set
command),
.Nm
will behave like
.Xr sh 1
in the following ways:
.Bl -bullet
.It
The parameter
.Ic $_
is not set to:
.Pp
.Bl -dash -compact
.It
the expanded alias' full programme path after entering commands
that are tracked aliases
.It
the last argument on the command line after entering external
commands
.El
.It
File descriptors are left untouched when executing
.Ic exec
with no arguments.
.It
Backslash-escaped special characters are not substituted in
.Ev PS1 .
.It
Sequences of
.Sq ((...))
are not interpreted as arithmetic expressions.
.El
.Pp
This does not make
.Nm
a real bourne shell emulation, though.
Access to many enhanced features is still available, and
.Ql ^
as synonym for
.Ql |
has probably not been in use since the 1980s anyway.
a3271 4
.It Ic sh
Enable strict Bourne shell mode (see
.Sx Strict Bourne shell mode
above).
a5107 1
.Xr getpgrp 2 ,
@


1.11
log
@mksh now does not look at $EDITOR and $VISUAL any more to determine
the editing mode; default is emacs (vi and gmacs off).
mksh also defaults to emacs-usemeta=OFF now.
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.10 2005/07/04 11:57:55 tg Exp $
a812 6
.Pp
.Sy Note :
See
.Sx POSIX mode
below for a special rule regarding
differences in quoting when the shell is in POSIX mode.
a2265 162
.Ss POSIX mode
The shell is intended to be POSIX compliant;
however, in some cases, POSIX behaviour is contrary either to
the original Korn shell behaviour or to user convenience.
How the shell behaves in these cases is determined by the state of the
.Ic posix
option
.Pq Ic set -o posix .
If it is on, the POSIX behaviour is followed; otherwise, it is not.
.Pp
The following is a list of things that are affected by the state of the
.Ic posix
option:
.Bl -bullet
.It
Reading of
.Ev $ENV .
If not in
.Ic posix
mode, the
.Ev ENV
parameter is not expanded and included when the shell starts.
.It
Occurrences of
.Ic \e\&"
inside double quoted
.Ic `..`
command substitutions.
In POSIX mode, the
.Ic \e\&"
is interpreted when the command is interpreted;
in non-POSIX mode,
the backslash is stripped before the command substitution is interpreted.
For example,
.Ic echo \&"`echo \e\&"hi\e\&"`\&"
produces
.Dq \&"hi\&"
in POSIX mode,
.Dq hi
in non-POSIX mode.
To avoid problems, use the
.Ic $(...)\&
form of command substitution.
.It
.Ic kill -l
output.
In POSIX mode, only signal names are listed (in a single line);
in non-POSIX mode,
signal numbers, names, and descriptions are printed (in columns).
In the future, a new option
.Pq Fl v No perhaps
will be added to distinguish the two behaviours.
.It
.Ic fg
exit status.
In POSIX mode, the exit status is 0 if no errors occur;
in non-POSIX mode, the exit status is that of the last foregrounded job.
.It
.Ic eval
exit status.
If
.Ic eval
gets to see an empty command (i.e.\&
.Ic eval `false` ) ,
its exit status in POSIX mode will be 0.
In non-POSIX mode,
it will be the exit status of the last command substitution that was
done in the processing of the arguments to
.Ic eval
(or 0 if there were no command substitutions).
.It
.Ic getopts .
In POSIX mode, options must start with a
.Ql - ;
in non-POSIX mode, options can start with either
.Ql -
or
.Ql + .
.It
Brace expansion (also known as alternation).
In POSIX mode, brace expansion is disabled;
in non-POSIX mode, brace expansion is enabled.
Note that
.Ic set -o posix
automatically turns the
.Ic braceexpand
option off; however, it can be explicitly turned on later.
.It
.Ic set - .
In POSIX mode, this does not clear the
.Ic verbose
or
.Ic xtrace
options; in non-POSIX mode, it does.
.It
.Ic set
exit status.
In POSIX mode, the exit status of
.Ic set
is 0 if there are no errors;
in non-POSIX mode, the exit status is that of any
command substitutions performed in generating the
.Ic set
command.
For example,
.Ic set -- `false`; echo $?\&
prints 0 in POSIX mode, 1 in non-POSIX mode.
This construct is used in most shell scripts that use the old
.Xr getopt 1
command.
.It
Argument expansion of the
.Ic alias ,
.Ic export ,
.Ic readonly ,
and
.Ic typeset
commands.
In POSIX mode, normal argument expansion is done; in non-POSIX mode,
field splitting, file globbing, brace expansion, and (normal) tilde expansion
are turned off, while assignment tilde expansion is turned on.
.It
Signal specification.
In POSIX mode, signals can be specified as digits, only
if signal numbers match POSIX values
(i.e. HUP=1, INT=2, QUIT=3, ABRT=6, KILL=9, ALRM=14, and TERM=15);
in non-POSIX mode, signals can always be digits.
.It
Alias expansion.
In POSIX mode, alias expansion is only carried out when reading command words;
in non-POSIX mode, alias expansion is carried out on any
word following an alias that ended in a space.
For example, the following
.Ic for
loop uses parameter
.Sq i
in POSIX mode and
.Sq j
in non-POSIX mode:
.Bd -literal -offset indent
alias a='for ' i='j'
a i in 1 2; do echo i=$i j=$j; done
.Ed
.Pp
.It
.Ic test .
In POSIX mode, the expression
.Sq Fl t
(preceded by some number of
.Sq \&!
arguments) is always true as it is a non-zero length string;
in non-POSIX mode, it tests if file descriptor 1 is a
.Xr tty 4
(i.e. the
.Ar fd
argument to the
.Fl t
test may be left out and defaults to 1).
.It
Tilde expansion after equal signs (not assignments) is disabled,
although not strictly forbidden by POSIX, for consistency with other shells.
.El
d3249 2
a3314 5
.It Ic posix
Enable POSIX mode.
See
.Sx POSIX mode
above.
@


1.10
log
@mksh no longer looks at its own called name or $SHELL
to determine if it should be a restricted shell
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.9 2005/06/08 21:51:21 tg Exp $
a1357 22
.It Ev EDITOR
If the
.Ev VISUAL
parameter is not set, this parameter controls the command-line editing mode for
interactive shells.
See the
.Ev VISUAL
parameter below for how this works.
.Pp
Note:
traditionally,
.Ev EDITOR
was used to specify the name of an (old-style) line editor, such as
.Xr ed 1 ,
and
.Ev VISUAL
was used to specify a (new-style) screen editor, such as
.Xr vi 1 .
Hence if
.Ev VISUAL
is set, it overrides
.Ev EDITOR .
a1579 18
.It Ev VISUAL
If set, this parameter controls the command-line editing mode for interactive
shells.
If the last component of the path specified in this parameter contains
the string
.Dq vi ,
.Dq emacs ,
or
.Dq gmacs ,
the
.Xr vi ,
.Xr emacs ,
or
.Xr gmacs
(Gosling emacs) editing mode is enabled, respectively.
See also the
.Ev EDITOR
parameter, above.
d3422 1
a3422 1
This is the default.
d4397 1
a4397 5
built-in, or implicitly via the
.Ev EDITOR
and
.Ev VISUAL
environment variables.
@


1.9
log
@* major revamp of build system
* whitespace cleanup; junk comment removal
* syndicate debian/copyright file from my port (shrinks sh.h)
* bump to R23
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.8 2005/06/08 10:59:41 tg Exp $
d110 1
a110 9
option is used or if either the basename the shell was invoked
with or the
.Ev SHELL
parameter match the pattern
.Dq *r*sh
(e.g.\&
.Nm rsh ,
.Nm rksh ,
.Nm rpdksh ) .
@


1.8
log
@add missing detail from IFS example
From PR4220/TAKAHASHI Tamotsu <[15]ttakah@@lapis.plala.or.jp>
via OpenBSD
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.7 2005/06/08 10:25:40 tg Exp $
d4 1
a4 1
.\"-
d8 1
a8 1
.\" this macro only exists in MirNroff by default
@


1.7
log
@Interix defines RLIMIT_VMEM to RLIMIT_AS, no need for us to act (sigh)
@
text
@d1 2
a2 2
.\" $MirOS: src/bin/mksh/mksh.1,v 1.6 2005/06/08 10:14:09 tg Exp $
.\" $OpenBSD: ksh.1,v 1.98 2005/05/12 09:18:24 jmc Exp $
d974 1
@


1.6
log
@use RLIMIT_AS if RLIMIT_VMEM is not available
they roughly equal each other anyway
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.5 2005/05/25 23:31:07 tg Exp $
d4161 2
a4162 3
kibibytes on the amount of virtual memory used.
If the operating system has no concept of a virtual memory
limit, an available memory limit is used instead.
@


1.5
log
@* fix emacs [ tabcompletion bug
  XXX it's probably a bug in vi mode too, it just doesn't show
* bring manual page and reality into closer sync'd state
* sort ulimits
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.4 2005/05/25 14:15:40 tg Exp $
d4162 2
@


1.4
log
@fix a manpage glitch
@
text
@d1 1
a1 1
.\" $MirOS: src/bin/mksh/mksh.1,v 1.3 2005/05/25 10:01:24 tg Exp $
d4 1
a4 3
.\"
.\"	Public Domain
.\"
d8 1
a8 1
.\" define Mx macro for portable mksh, just in case...
d203 2
a204 1
The shell begins parsing its input by breaking it into
d473 1
a473 1
$ { echo foo; echo bar\*(Ltnewline\*(Gt }
d1186 4
d1493 1
a1493 2
The current process group, see
.Xr getpgrp 2 .
d1921 2
a1922 1
.Ql \enewline .
d2032 2
a2033 1
(specifying base 16), similar to AT&T ksh,
d2036 3
a2038 2
(base 8), as an mksh extension,
in all forms of arithmetic expressions,
d2173 2
a2174 2
close that file descriptor e.g.\&
.Ic exec 3\*(Gt&p; exec 3\*(Gt&- .
d2478 2
a2479 1
Tilde expansion after equal signs is disabled.
d2517 9
d3813 1
a3813 1
.Dq if \&[ \&"X$foo\&" = Xbar \&]
d4088 1
a4088 1
.Op Fl acdfHlmnpSsTtv
d4126 2
d4162 4
d4497 1
a4497 1
^[A-Z] sequences are not case sensitive.
a4570 5
.\" XXX
Currently being considered a bug,
if the file name contains \fB[\fR or \fB]\fR, it cannot be completed, even if
the character is escaped, in \fBemacs\fR mode.
This surprisingly works in \fBvi\fR mode; please submit a fix.
d4588 1
a4845 7
Note that the ^X stands for control-X; also
.Aq esc ,
.Aq space ,
and
.Aq tab
are used for escape, space, and tab, respectively (no kidding).
.Pp
d5380 1
a5438 6
.Pp
For another known bug, refer to the comment above the
.Em complete-command
paragraph in the section
.Sx Emacs editing mode
above.
@


1.3
log
@Disable tilde expansion after = (Debian PR #187839),
but only in POSIX mode
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/mksh/mksh.1,v 1.2 2005/05/23 13:44:13 tg Exp $
d3549 1
a3549 1
.Nm pdksh
@


1.2
log
@let i=0xAFFE works in ksh88 (/bin/ksh on Solaris), octals are special to us
@
text
@d1 1
a1 1
.\"	$MirOS: src/bin/mksh/mksh.1,v 1.1 2005/05/23 03:06:09 tg Exp $
d2472 2
@


1.1
log
@Add mirbsdksh R21, which was developed in a temporary external CVS repo-
sitory whose ChangeLog follows. mksh R21 is licenced under the MirOS li-
cence, shown in "sh.h", and a two-clause UCB-style licence by Marc Espie
as shown in "alloc.c".

This executable is a fair bit smaller and shorter than our /bin/ksh that
it is designed to eventually replace (as /bin/sh hardlink), with the old
/bin/ksh to completely vanish. It is still in beta testing though, and I
don't think it will compile on other operating systems.

mksh R21 is a completely new port, bringing together the OpenBSD-current
/bin/ksh, the MirOS-current /bin/ksh and the older mksh R20 (which still
was portable, ocvs-based).
@
text
@d1 1
a1 1
.\"	$MirOS: mksh/mksh.1,v 1.6 2005/05/23 00:39:38 tg Exp $
d2029 1
a2029 1
(specifying base 16)
d2032 1
a2032 1
(base 8)
@
