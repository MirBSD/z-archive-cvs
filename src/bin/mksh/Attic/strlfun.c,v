head	1.10;
access;
symbols
	mksh-R28:1.3
	tg-mksh-plan9ape_BASE:1.3
	tg-mksh-plan9ape:1.3.0.2
	mksh-R27e:1.1.7.3
	MIRBSD_9_BASE:1.1.7.3
	mksh-R27d:1.1.7.3
	mksh-R27:1.1.7.3
	mksh-R26c:1.1.7.3
	mksh-R26b:1.1.7.3
	mksh-R26:1.1.7.3
	mksh-R25:1.1.7.3
	mksh-R24c:1.1.7.2
	mksh-R24b:1.1.7.2
	mksh-R24:1.1.7.2
	mksh-R23:1.1.7.2
	mksh-R22:1.1.7.2
	mksh-R21:1.1.7.1
	mirbsd:1.1.7;
locks; strict;
comment	@ * @;


1.10
date	2007.03.04.03.04.28;	author tg;	state dead;
branches;
next	1.9;
commitid	10045EA374B3374AB35;

1.9
date	2007.01.12.01.49.29;	author tg;	state Exp;
branches;
next	1.8;
commitid	10045A6E8B92FCAC95A;

1.8
date	2007.01.09.17.34.21;	author tg;	state Exp;
branches;
next	1.7;
commitid	10045A3D2335942D5E4;

1.7
date	2006.11.09.15.02.31;	author tg;	state Exp;
branches;
next	1.6;
commitid	100455343104AF09372;

1.6
date	2006.11.08.23.23.41;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004552670E1A677D8A;

1.5
date	2006.11.08.23.02.30;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004552621C2D0ACF91;

1.4
date	2006.11.08.22.54.55;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004552605579765A8F;

1.3
date	2006.08.01.13.43.28;	author tg;	state Exp;
branches;
next	1.2;
commitid	10044CF5A93693A5C0A;

1.2
date	2005.05.23.16.43.20;	author tg;	state dead;
branches;
next	1.1;
commitid	10d429208300cd9;

1.1
date	2005.05.23.16.43.20;	author tg;	state Exp;
branches
	1.1.7.1;
next	;
commitid	10d429208300cd9;

1.1.7.1
date	2005.05.23.16.43.20;	author tg;	state Exp;
branches;
next	1.1.7.2;
commitid	10d429208300cd9;

1.1.7.2
date	2005.05.28.21.02.03;	author tg;	state Exp;
branches;
next	1.1.7.3;
commitid	40b34298dc472142;

1.1.7.3
date	2005.10.25.19.39.50;	author tg;	state Exp;
branches;
next	;
commitid	1d3b435e89eb038b;


desc
@@


1.10
log
@• remove strcasestr.c, use home-grown implementation¹, call it stricmp,
  and have it return an API-correct const char *
• enhance and stylify comments
• a little KNF and simplifications
• #ifdef DEBUG: replace strchr and strstr with ucstrchr and ucstrstr
  that take and return a non-const char *, and fix the violations
• new cstrchr, cstrstr (take and give const char *)
• new vstrchr, vstrstr (take const or not, give boolean value)
• new afreechk(x) = afreechv(x,x) = if (x1) afree(x2, ATEMP)
• new ksh_isdash(str) = (str != NULL) && !strcmp(str, "-")
• replace the only use of strrchr with inlined code to shrink
• minor man page fixes
• Minix 3 signames are autogenerated with gcc
• rename strlfun.c to strlcpy.c since we don't do strlcat(3) anyway,
  only strlcpy(3), and shorten it
• dot.mkshrc: move MKSH=… down to the export line
  to not disturb the PS1 visual impression ☺
• dot.mkshrc: Lstripcom(): optimise
• bump version

¹) side effect from creating API-correct cstrchr, cstrstr, etc.
   uses goto so it must be better ☻

tested on mirbsd-current via both Makefile and Build.sh
@
text
@/* $MirOS: src/bin/mksh/strlfun.c,v 1.9 2007/01/12 01:49:29 tg Exp $ */
/* $miros: src/lib/libc/string/strlfun.c,v 1.14 2007/01/07 02:11:40 tg Exp $ */

/*-
 * Copyright (c) 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 *-
 * The strlcat() code below has been written by Thorsten Glaser. Bodo
 * Eggert suggested optimising the strlcpy() code, originally written
 * by Todd C. Miller (see below), which was carried out by Th. Glaser
 * as well as merging this code with strxfrm() for ISO-10646-only sy-
 * stems and writing wcslcat(), wcslcpy() and wcsxfrm() equivalents.
 */

#ifdef STRXFRM
#undef HAVE_STRLCPY
#undef HAVE_STRLCAT
#define HAVE_STRLCPY	0
#define HAVE_STRLCAT	1
#define strlcpy		strxfrm
#endif

#include <sys/types.h>
#if defined(_KERNEL) || defined(_STANDALONE)
#include <lib/libkern/libkern.h>
#undef HAVE_STRLCPY
#undef HAVE_STRLCAT
#else
#if defined(HAVE_CONFIG_H) && (HAVE_CONFIG_H != 0)
/* usually when packaged with third-party software */
#ifdef CONFIG_H_FILENAME
#include CONFIG_H_FILENAME
#else
#include "config.h"
#endif
#endif
#endif

#ifndef __predict_true
#define __predict_true(exp)	((exp) != 0)
#endif
#ifndef __predict_false
#define __predict_false(exp)	((exp) != 0)
#endif

#if !defined(_KERNEL) && !defined(_STANDALONE)
__RCSID("$MirOS: src/bin/mksh/strlfun.c,v 1.9 2007/01/12 01:49:29 tg Exp $");
#endif

size_t strlcpy(char *, const char *, size_t);

/* $OpenBSD: strlcpy.c,v 1.10 2005/08/08 08:05:37 espie Exp $ */

/*-
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 */

#if !defined(HAVE_STRLCPY) || (HAVE_STRLCPY == 0)
/*
 * Copy src to string dst of size siz.  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz == 0).
 * Returns strlen(src); if retval >= siz, truncation occurred.
 */
size_t
strlcpy(char *dst, const char *src, size_t siz)
{
	const char *s = src;

	if (__predict_false(siz == 0))
		goto traverse_src;

	/* copy as many chars as will fit */
	while (--siz && (*dst++ = *s++))
		;

	/* not enough room in dst */
	if (__predict_false(siz == 0)) {
		/* safe to NUL-terminate dst since we copied <= siz-1 chars */
		*dst = '\0';
 traverse_src:
		/* traverse rest of src */
		while (*s++)
			;
	}

	/* count doesn't include NUL */
	return (s - src - 1);
}
#endif /* !HAVE_STRLCPY */
@


1.9
log
@* Scan for __attribute__((...)) in general (the earliest was 2.5,
  where we had 'noreturn' etc. but no '__noreturn__')
* Scan for __attribute__((bounded)) and __attribute__((used))
  if we have __attribute__((noreturn))
* To be able to scan if certain attributes give warnings,
  scan for -Werror with a simple programme which hopefully triggers none
* Convert __attribute__((unused)) to __unused, noreturn -> __dead
* Unify other attributes
* Clean up typography a little more
@
text
@d1 1
a1 1
/* $MirOS: src/bin/mksh/strlfun.c,v 1.8 2007/01/09 17:34:21 tg Exp $ */
d56 1
a56 1
__RCSID("$MirOS: src/bin/mksh/strlfun.c,v 1.8 2007/01/09 17:34:21 tg Exp $");
@


1.8
log
@sync
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/string/strlfun.c,v 1.14 2007/01/07 02:11:40 tg Exp $ */
a47 20
#ifndef __RCSID
#undef __IDSTRING
#undef __IDSTRING_CONCAT
#undef __IDSTRING_EXPAND
#if defined(__ELF__) && defined(__GNUC__)
#define __IDSTRING(prefix, string)				\
	__asm__(".section .comment"				\
	"\n	.ascii	\"@@(\"\"#)" #prefix ": \""		\
	"\n	.asciz	\"" string "\""				\
	"\n	.previous")
#else
#define __IDSTRING_CONCAT(l,p)		__LINTED__ ## l ## _ ## p
#define __IDSTRING_EXPAND(l,p)		__IDSTRING_CONCAT(l,p)
#define __IDSTRING(prefix, string)				\
	static const char __IDSTRING_EXPAND(__LINE__,prefix) []	\
	    __attribute__((used)) = "@@(""#)" #prefix ": " string
#endif
#define __RCSID(x)		__IDSTRING(rcsid,x)
#endif

d56 1
a56 1
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.14 2007/01/07 02:11:40 tg Exp $");
@


1.7
log
@get rid of the need of strlcat() altogether (only one use was left)
@
text
@d1 2
a2 2
/* $MirOS: src/bin/mksh/strlfun.c,v 1.6 2006/11/08 23:23:41 tg Exp $ */
/* _MirOS: src/lib/libc/string/strlfun.c,v 1.10 2006/11/08 23:18:04 tg Exp $ */
d8 8
a15 15
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
d20 2
a21 1
 * as well as writing wcslcat() and wcslcpy() equivalents.
d24 8
a45 1
extern size_t strlen(const char *);
d75 3
a77 1
__RCSID("$MirOS: src/bin/mksh/strlfun.c,v 1.6 2006/11/08 23:23:41 tg Exp $");
@


1.6
log
@first attempts at more autoconf'isation
@
text
@d1 1
a1 1
/* $MirOS: src/lib/libc/string/strlfun.c,v 1.10 2006/11/08 23:18:04 tg Exp $ */
d74 1
a74 1
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.10 2006/11/08 23:18:04 tg Exp $");
a75 1
size_t strlcat(char *, const char *, size_t);
a77 27
#if !defined(HAVE_STRLCAT) || (HAVE_STRLCAT == 0)
/*
 * Appends src to string dst of size siz (unlike strncat, siz is the
 * full size of dst, not space left).  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz <= strlen(dst)).
 * Returns strlen(src) + MIN(siz, strlen(initial dst)).
 * If retval >= siz, truncation occurred.
 */
size_t
strlcat(char *dst, const char *src, size_t dlen)
{
	size_t n = 0, slen;

	slen = strlen(src);
	while (__predict_true(n + 1 < dlen && dst[n] != '\0'))
		++n;
	if (__predict_false(dlen == 0 || dst[n] != '\0'))
		return (dlen + slen);
	while (__predict_true((slen > 0) && (n < (dlen - 1)))) {
		dst[n++] = *src++;
		--slen;
	}
	dst[n] = '\0';
	return (n + slen);
}
#endif /* !HAVE_STRLCAT */

@


1.5
log
@sync
@
text
@d1 2
a2 2
/* $MirOS: src/lib/libc/string/strlfun.c,v 1.9 2006/11/08 23:01:50 tg Exp $ */
/* _MirOS: src/lib/libc/string/strlfun.c,v 1.9 2006/11/08 23:01:50 tg Exp $ */
d36 1
a36 1
#if (HAVE_CONFIG_H - 0)
d74 1
a74 1
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.9 2006/11/08 23:01:50 tg Exp $");
d79 1
a79 1
#if !(HAVE_STRLCAT - 0)
d116 1
a116 1
#if !(HAVE_STRLCPY - 0)
@


1.4
log
@sync with lib/libc/string/strlfun.c
@
text
@d1 2
a2 2
/* $MirOS: src/lib/libc/string/strlfun.c,v 1.8 2006/11/08 22:48:59 tg Exp $ */
/* _MirOS: src/lib/libc/string/strlfun.c,v 1.8 2006/11/08 22:48:59 tg Exp $ */
d36 2
a37 1
#ifdef HAVE_CONFIG_H	/* usually when packaged with third-party software */
d74 1
a74 1
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.8 2006/11/08 22:48:59 tg Exp $");
d79 1
a79 1
#ifndef	HAVE_STRLCAT
d116 1
a116 1
#ifndef	HAVE_STRLCPY
@


1.3
log
@style(9)
@
text
@d1 2
a2 4
/* $MirOS: src/lib/libc/string/strlfun.c,v 1.7 2006/08/01 13:41:49 tg Exp $ */
/* _MirOS: src/lib/libc/string/strlfun.c,v 1.7 2006/08/01 13:41:49 tg Exp $ */
/* $OpenBSD: strlcpy.c,v 1.10 2005/08/08 08:05:37 espie Exp $ */
/* $OpenBSD: strlcat.c,v 1.13 2005/08/08 08:05:37 espie Exp $ */
d5 2
a6 3
 * Copyright (c) 2004, 2005, 2006 Thorsten Glaser <tg@@mirbsd.de>
 * Thanks to Bodo Eggert for optimisation hints
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
d8 6
a13 3
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
d15 13
a27 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d30 1
d32 7
a38 3
# include <lib/libkern/libkern.h>
# undef HAVE_STRLCPY
# undef HAVE_STRLCAT
d40 3
a42 5
# ifdef HAVE_CONFIG_H	/* usually when packaged with third-party software */
#  include "config.h"
# endif
# include <sys/types.h>

d44 1
d47 17
a63 1
#define __RCSID(x)	static const char __rcsid[] = (x)
d66 3
d73 1
a73 2
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.7 2006/08/01 13:41:49 tg Exp $");
#endif
d78 37
d126 1
a126 1
	if (__predict_false(!siz))
d130 1
a130 1
	for (; --siz && (*dst++ = *s++); )
d134 2
a135 2
	if (__predict_false(!siz)) {
		/* safe to NUL-terminate dst since copied <= siz-1 chars */
a146 36

#ifndef	HAVE_STRLCAT
/*
 * Appends src to string dst of size siz (unlike strncat, siz is the
 * full size of dst, not space left).  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz <= strlen(dst)).
 * Returns strlen(src) + MIN(siz, strlen(initial dst)).
 * If retval >= siz, truncation occurred.
 */
size_t
strlcat(char *dst, const char *src, size_t siz)
{
	char *d = dst;
	size_t dl, n = siz;
	const size_t sl = strlen(src);

	while (n-- && (*d++ != '\0'))
		;
	if (!++n && (*d != '\0'))
		return (strlen(src));

	dl = --d - dst;		/* original strlen(dst), max. siz-1 */
	n = siz - dl;
	dl += sl;

	if (__predict_false(!n--))
		return (dl);

	if (__predict_false(n > sl))
		n = sl;		/* number of chars to copy */
	for (; n-- && (*d++ = *src++); )
		;
	*d = '\0';		/* NUL-terminate dst */
	return (dl);
}
#endif /* !HAVE_STRLCAT */
@


1.2
log
@Initial revision
@
text
@d1 4
a4 3
/**	$MirOS: src/lib/libc/string/strlfun.c,v 1.3 2005/05/23 16:42:03 tg Exp $ */
/*	$OpenBSD: strlcpy.c,v 1.8 2003/06/17 21:56:24 millert Exp $ */
/*	$OpenBSD: strlcat.c,v 1.11 2003/06/17 21:56:24 millert Exp $ */
d7 2
a8 2
 * Copyright (c) 2004, 2005 Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 * Some hints for optimisation from Bodo Eggert (via d.a.s.r)
d24 11
a34 7
#if !defined(_KERNEL) && !defined(_STANDALONE)
#ifdef HAVE_CONFIG_H
/* usually when packaged with third-party software */
#include "config.h"
#define LIBC_SCCS
#endif
#include <sys/types.h>
d40 2
a41 4
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.3 2005/05/23 16:42:03 tg Exp $");
#else
#include <lib/libkern/libkern.h>
#undef HAVE_CONFIG_H
d44 1
a44 3
#ifndef HAVE_CONFIG_H
#undef HAVE_STRLCPY
#undef HAVE_STRLCAT
d61 2
a62 1
	if (!siz) goto traverse_src;
d64 2
a65 2
	/* Copy as many bytes as will fit */
	for (; --siz && (*dst++ = *s++); /* nothing */)
d68 6
a73 5
	/* Not enough room in dst, add NUL and traverse rest of src */
	if (!siz) {
		/* Save, since we've copied at max. (siz-1) characters */
		*dst = '\0';	/* NUL-terminate dst */
traverse_src:
d78 2
a79 1
	return (s - src - 1);	/* count does not include NUL */
d101 1
a101 1
		return strlen(src);
d107 2
a108 2
	if (!n--)
		return dl;
d110 3
a112 3
	if (n > sl)
		n = sl;		/* number of octets to copy */
	for (; n-- && (*d++ = *src++); /* nothing */)
d115 1
a115 1
	return dl;
@


1.1
log
@Initial revision
@
text
@@


1.1.7.1
log
@copy libc/string/strlfun.c into mirbsdksh branch
@
text
@@


1.1.7.2
log
@main.c: need <time.h> if not HAVE_ARC4RANDOM
strlfun.c: sync

found while creating debian source package

main.c, check.t: mksh R22c
@
text
@d1 1
a1 2
/**	$MirOS: src/lib/libc/string/strlfun.c,v 1.4 2005/05/28 20:59:09 tg Exp $ */
/**	_MirOS: src/lib/libc/string/strlfun.c,v 1.4 2005/05/28 20:59:09 tg Exp $ */
a30 2
extern size_t strlen(const char *);

d35 1
a35 1
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.4 2005/05/28 20:59:09 tg Exp $");
@


1.1.7.3
log
@* add extra header for compat functions, too
* add src/lib/libc/gen/setmode.c
* sync src/lib/libc/string/strlfun.c
@
text
@d1 4
a4 3
/* $MirOS: src/lib/libc/string/strlfun.c,v 1.5 2005/09/19 19:01:11 tg Exp $ */
/* $OpenBSD: strlcpy.c,v 1.10 2005/08/08 08:05:37 espie Exp $ */
/* $OpenBSD: strlcat.c,v 1.13 2005/08/08 08:05:37 espie Exp $ */
d8 1
a8 1
 * Thanks to Bodo Eggert for optimisation hints
d28 1
d38 1
a38 1
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.5 2005/09/19 19:01:11 tg Exp $");
d41 4
@


