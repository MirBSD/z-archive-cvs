head	1.14;
access;
symbols
	mksh-R36b:1.8
	mksh-R36:1.8
	mksh-R35b:1.7
	mksh-R35:1.6
	mksh-R33d:1.6
	mksh-R33c:1.6
	mksh-R33b:1.6
	MIRBSD_10:1.6.0.2
	MIRBSD_10_BASE:1.6
	mksh-R33:1.6
	mksh-R32:1.6
	mksh-R31d:1.6
	mksh-R31c:1.6
	mksh-R31b:1.6
	mksh-R31:1.6
	mksh-R30:1.6
	mksh-R29g:1.4.2.1
	mksh-R29f:1.4.2.1
	mksh-R29e:1.4.2.1
	mksh-R29stable:1.4.0.2
	mksh-R29d:1.4
	mksh-R29c:1.4
	mksh-R29b:1.4
	mksh-R29:1.4
	mksh-R28:1.3
	tg-mksh-plan9ape_BASE:1.3
	tg-mksh-plan9ape:1.3.0.4
	mksh-R27e:1.3
	MIRBSD_9_BASE:1.3
	mksh-R27d:1.3
	mksh-R27:1.3
	mksh-R26c:1.3
	mksh-R26b:1.3
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	mksh-R26:1.3
	mksh-R25:1.2
	mksh-R24c:1.2
	mksh-R24b:1.2
	mksh-R24:1.2
	mksh-R23:1.2
	mksh-R22:1.1
	mksh-R21:1.1;
locks; strict;
comment	@ * @;


1.14
date	2009.03.22.16.55.38;	author tg;	state dead;
branches;
next	1.13;
commitid	10049C66D5D5A75A28F;

1.13
date	2008.12.13.17.02.11;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004943EAA830C0300B;

1.12
date	2008.11.15.07.35.23;	author tg;	state Exp;
branches;
next	1.11;
commitid	100491E7BBB79B0FECE;

1.11
date	2008.11.12.00.54.46;	author tg;	state Exp;
branches;
next	1.10;
commitid	100491A295841A6D8EB;

1.10
date	2008.11.12.00.27.54;	author tg;	state Exp;
branches;
next	1.9;
commitid	100491A230649FC77C0;

1.9
date	2008.11.11.23.50.28;	author tg;	state Exp;
branches;
next	1.8;
commitid	100491A1A3D7C6B56F1;

1.8
date	2008.08.02.17.45.09;	author tg;	state Exp;
branches;
next	1.7;
commitid	10048949D196A7C1390;

1.7
date	2008.07.13.16.43.55;	author tg;	state Exp;
branches;
next	1.6;
commitid	100487A30D56F4B2E1B;

1.6
date	2007.06.05.18.59.54;	author tg;	state Exp;
branches
	1.6.2.1;
next	1.5;
commitid	1004665B2A606848F83;

1.5
date	2007.05.13.17.51.20;	author tg;	state Exp;
branches;
next	1.4;
commitid	10046474FB1292DF336;

1.4
date	2007.03.04.03.04.23;	author tg;	state Exp;
branches
	1.4.2.1;
next	1.3;
commitid	10045EA374B3374AB35;

1.3
date	2005.11.22.18.40.40;	author tg;	state Exp;
branches;
next	1.2;
commitid	108a438366254326;

1.2
date	2005.06.08.21.51.20;	author tg;	state Exp;
branches;
next	1.1;
commitid	318442a76849872f;

1.1
date	2005.05.23.03.06.05;	author tg;	state Exp;
branches;
next	;
commitid	1a89429147b8402d;

1.6.2.1
date	2008.07.18.13.29.40;	author tg;	state Exp;
branches;
next	1.6.2.2;
commitid	10048809AD278B142AC;

1.6.2.2
date	2008.12.14.00.07.32;	author tg;	state Exp;
branches;
next	;
commitid	10049444E5325915C76;

1.4.2.1
date	2007.05.13.19.29.31;	author tg;	state Exp;
branches;
next	;
commitid	1004647668D4636830B;


desc
@@


1.14
log
@remove espie's double-linked-list based allocator and write a
similarily simple one from scratch, which however performs
better than espie's with AFREE_DEBUG enabled which took away
the benefit of the double-linked-list approach

all of (core) mksh is now MirOS licenced
@
text
@/*	$OpenBSD: alloc.c,v 1.8 2008/07/21 17:30:08 millert Exp $	*/

/*-
 * Copyright (c) 2002 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *-
 * area-based allocation built on malloc/free
 */

#include "sh.h"

__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.13 2008/12/13 17:02:11 tg Exp $");

struct link {
	struct link *prev;
	struct link *next;
};

Area *
ainit(Area *ap)
{
	ap->freelist = NULL;
	return (ap);
}

void
afreeall(Area *ap)
{
	struct link *l, *l2;

	for (l = ap->freelist; l != NULL; l = l2) {
		l2 = l->next;
		free(l);
	}
	ap->freelist = NULL;
}

#define L2P(l)	( (void *)(((char *)(l)) + sizeof (struct link)) )
#define P2L(p)	( (struct link *)(((ptrdiff_t)(p)) - sizeof (struct link)) )

void *
alloc(size_t size, Area *ap)
{
	struct link *l;

	if ((l = malloc(sizeof (struct link) + size)) == NULL)
		internal_errorf("unable to allocate memory");
	l->next = ap->freelist;
	l->prev = NULL;
	if (ap->freelist)
		ap->freelist->prev = l;
	ap->freelist = l;

	return (L2P(l));
}

void *
aresize(void *ptr, size_t size, Area *ap)
{
	struct link *l, *l2, *lprev, *lnext;

	if (ptr == NULL)
		return (alloc(size, ap));

	l = P2L(ptr);
	lprev = l->prev;
	lnext = l->next;

	if ((l2 = realloc(l, sizeof (struct link) + size)) == NULL)
		internal_errorf("unable to allocate memory");
	if (lprev)
		lprev->next = l2;
	else
		ap->freelist = l2;
	if (lnext)
		lnext->prev = l2;

	return (L2P(l2));
}

void
afree(void *ptr, Area *ap)
{
	struct link *l;
#ifdef MKSH_AFREE_DEBUG
	struct link *lp;
#endif

	if (!ptr)
		return;

	l = P2L(ptr);

#ifdef MKSH_AFREE_DEBUG
	for (lp = ap->freelist; lp != NULL; lp = lp->next)
		if (l == lp)
			break;
	if (lp == NULL) {
		internal_warningf("afree: pointer %p not allocated", ptr);
		exit(255);
	}
#endif

	if (l->prev)
		l->prev->next = l->next;
	else
		ap->freelist = l->next;
	if (l->next)
		l->next->prev = l->prev;

	free(l);
}
@


1.13
log
@* back out almost all of the memory allocator related changes, as aalloc
  was hard to type and hard to fix, galloc is also hard to fix, and some
  things I learned will probably improve things more but make me use the
  original form as base (especially for space savings)
* let sizeofN die though, remove even more casts
* optimise, polish
* regen Makefiles
* sprinkle a few /* CONSTCOND */ while here
@
text
@d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.8 2008/08/02 17:45:09 tg Exp $");
@


1.12
log
@enable passing of a hint how many pointers we’ll need to anew()
if 0, the default is used
@
text
@d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.11 2008/11/12 00:54:46 tg Exp $");
d39 2
a40 6
struct TArea {
	struct link *freelist;	/* free list */
};

PArea
anew(size_t hint __unused)
a41 4
	PArea ap;

	if ((ap = malloc(sizeof (struct TArea))) == NULL)
		internal_errorf("unable to allocate memory");
d47 1
a47 1
adelete(PArea *pap)
d51 1
a51 1
	for (l = (*pap)->freelist; l != NULL; l = l2) {
d55 1
a55 2
	free(*pap);
	*pap = NULL;
d62 1
a62 1
alloc(size_t nmemb, size_t size, PArea ap)
a65 2
	size *= nmemb;

d78 1
a78 1
aresize(void *ptr, size_t nmemb, size_t size, PArea ap)
d83 1
a83 3
		return (alloc(nmemb, size, ap));

	size *= nmemb;
d102 1
a102 1
afree(void *ptr, PArea ap)
@


1.11
log
@switch to a (nmemb,size) API from a (nmemb*size) API

cost: text += (308, 256, 4, -100)
@
text
@d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.10 2008/11/12 00:27:54 tg Exp $");
d44 1
a44 1
anew(void)
@


1.10
log
@isolate all knowledge of the area-based allocator from the rest of the code

cost: bss -= (0, 0, 16, 16); text += (520, 504, 516, 480)
[ gcc,pcc X full,small ]
@
text
@d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.9 2008/11/11 23:50:28 tg Exp $");
d71 1
a71 1
alloc(size_t size, PArea ap)
d75 2
d89 1
a89 1
aresize(void *ptr, size_t size, PArea ap)
d94 3
a96 1
		return (alloc(size, ap));
@


1.9
log
@change use of “Area *” to “PArea” and “struct Area” to “TArea”

no change in size (mgcc and pcc, small and full)
@
text
@d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.8 2008/08/02 17:45:09 tg Exp $");
d39 3
a41 1
struct TArea aperm;
d44 1
a44 1
ainit(PArea ap)
d46 4
d55 1
a55 1
afreeall(PArea ap)
d59 1
a59 1
	for (l = ap->freelist; l != NULL; l = l2) {
d63 2
a64 1
	ap->freelist = NULL;
@


1.8
log
@• merge final version of the stack-free diff as committed by jaredy@@openbsd
  thanks for helping with the bug
• merge RCS IDs
• bump mksh version
@
text
@d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.7 2008/07/13 16:43:55 tg Exp $");
d39 4
a42 2
Area *
ainit(Area *ap)
d49 1
a49 1
afreeall(Area *ap)
d64 1
a64 1
alloc(size_t size, Area *ap)
d80 1
a80 1
aresize(void *ptr, size_t size, Area *ap)
d104 1
a104 1
afree(void *ptr, Area *ap)
@


1.7
log
@if MKSH_AFREE_DEBUG is defined, guard against wrong frees
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.7 2004/02/19 18:51:17 deraadt Exp $	*/
d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.6 2007/06/05 18:59:54 tg Exp $");
@


1.6
log
@quieten gcc __CRAZY (-m32) on sparc64
@
text
@d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.5 2007/05/13 17:51:20 tg Exp $");
d105 3
d114 10
@


1.6.2.1
log
@MFC: mksh R35b
@
text
@d32 1
a32 1
__RCSID("$MirOS$");
a104 3
#ifdef MKSH_AFREE_DEBUG
	struct link *lp;
#endif
a110 10
#ifdef MKSH_AFREE_DEBUG
	for (lp = ap->freelist; lp != NULL; lp = lp->next)
		if (l == lp)
			break;
	if (lp == NULL) {
		internal_warningf("afree: pointer %p not allocated", ptr);
		exit(255);
	}
#endif

@


1.6.2.2
log
@MFC: mksh R36b
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.8 2008/07/21 17:30:08 millert Exp $	*/
d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.8 2008/08/02 17:45:09 tg Exp $");
@


1.5
log
@Fix for Coverity CID#2: false bug, but still a problem.
Analysis:
internal_errorf(int, fmt, ...) was only a __dead function if the int argument
was non-0, which the Prevent probably was unable to follow. Change all uses of
internal_errorf(0, fmt, ...) to internal_warningf(fmt, ...); change the pro-
totype of internal_errorf() to internal_errorf(fmt, ...) and all remaining
uses remove the non-0 int argument; add __dead to internal_errorf() proto;
flesh out guts of internal_errorf() and internal_warningf() into a new local
function for optimisation purposes.

Some whitespace cleanup and dead code removal (return after internal_errorf(1))
@
text
@d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.4 2007/03/04 03:04:23 tg Exp $");
d59 1
a59 1
#define P2L(p)	( (struct link *)(((char *)(p)) - sizeof (struct link)) )
@


1.4
log
@• remove strcasestr.c, use home-grown implementation¹, call it stricmp,
  and have it return an API-correct const char *
• enhance and stylify comments
• a little KNF and simplifications
• #ifdef DEBUG: replace strchr and strstr with ucstrchr and ucstrstr
  that take and return a non-const char *, and fix the violations
• new cstrchr, cstrstr (take and give const char *)
• new vstrchr, vstrstr (take const or not, give boolean value)
• new afreechk(x) = afreechv(x,x) = if (x1) afree(x2, ATEMP)
• new ksh_isdash(str) = (str != NULL) && !strcmp(str, "-")
• replace the only use of strrchr with inlined code to shrink
• minor man page fixes
• Minix 3 signames are autogenerated with gcc
• rename strlfun.c to strlcpy.c since we don't do strlcat(3) anyway,
  only strlcpy(3), and shorten it
• dot.mkshrc: move MKSH=… down to the export line
  to not disturb the PS1 visual impression ☺
• dot.mkshrc: Lstripcom(): optimise
• bump version

¹) side effect from creating API-correct cstrchr, cstrstr, etc.
   uses goto so it must be better ☻

tested on mirbsd-current via both Makefile and Build.sh
@
text
@d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.3 2005/11/22 18:40:40 tg Exp $");
d67 1
a67 1
		internal_errorf(1, "unable to allocate memory");
d90 1
a90 1
		internal_errorf(1, "unable to allocate memory");
@


1.4.2.1
log
@MFC most of the bugfixes from post-R29d to the R29stable branch (which
is tagged off R29d), i.e. the following commitids:
• 1004638EE466466C614
• 100464368A065F40C08
• 10046436B6D392D622C
• 10046436DC35AC3B04F
• 100464370BA2BF5141D
• 10046474FB1292DF336
• 100464753C139AD7515
• 100464755C253EE3EA9
• 100464759DE15635029
• 10046475DAE4D3D3C05
• 100464760593612AAF2
• 100464763537E100BDF
• 1004647649434DA3FE1
but not
• 1004636486176FDA6FF
@
text
@d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.4 2007/03/04 03:04:23 tg Exp $");
d67 1
a67 1
		internal_errorf("unable to allocate memory");
d90 1
a90 1
		internal_errorf("unable to allocate memory");
@


1.3
log
@* only have one $MirOS RCS ID per file to shrink source size
  (this is an exception from normal use)
* bump to R26
@
text
@d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.2 2005/06/08 21:51:20 tg Exp $");
d43 1
a43 1
	return ap;
d58 2
a59 2
#define L2P(l)	( (void *)(((char *)(l)) + sizeof(struct link)) )
#define P2L(p)	( (struct link *)(((char *)(p)) - sizeof(struct link)) )
d66 1
a66 2
	l = malloc(sizeof(struct link) + size);
	if (l == NULL)
d74 1
a74 1
	return L2P(l);
d83 1
a83 1
		return alloc(size, ap);
d89 1
a89 2
	l2 = realloc(l, sizeof(struct link) + size);
	if (l2 == NULL)
d98 1
a98 1
	return L2P(l2);
@


1.2
log
@* major revamp of build system
* whitespace cleanup; junk comment removal
* syndicate debian/copyright file from my port (shrinks sh.h)
* bump to R23
@
text
@a0 1
/**	$MirOS: src/bin/mksh/alloc.c,v 1.1 2005/05/23 03:06:05 tg Exp $ */
d32 1
a32 1
__RCSID("$MirOS: src/bin/mksh/alloc.c,v 1.1 2005/05/23 03:06:05 tg Exp $");
@


1.1
log
@Add mirbsdksh R21, which was developed in a temporary external CVS repo-
sitory whose ChangeLog follows. mksh R21 is licenced under the MirOS li-
cence, shown in "sh.h", and a two-clause UCB-style licence by Marc Espie
as shown in "alloc.c".

This executable is a fair bit smaller and shorter than our /bin/ksh that
it is designed to eventually replace (as /bin/sh hardlink), with the old
/bin/ksh to completely vanish. It is still in beta testing though, and I
don't think it will compile on other operating systems.

mksh R21 is a completely new port, bringing together the OpenBSD-current
/bin/ksh, the MirOS-current /bin/ksh and the older mksh R20 (which still
was portable, ocvs-based).
@
text
@d1 1
a1 1
/**	$MirOS: mksh/alloc.c,v 1.2 2005/05/22 20:47:59 tg Exp $ */
d27 1
a27 3
 */

/*
d33 1
a33 1
__RCSID("$MirOS: mksh/alloc.c,v 1.2 2005/05/22 20:47:59 tg Exp $");
@

