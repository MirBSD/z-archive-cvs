head	1.15;
access;
symbols
	MIRBSD_10:1.7.0.2
	MIRBSD_10_BASE:1.7;
locks; strict;
comment	@# @;


1.15
date	2016.03.25.19.49.14;	author tg;	state Exp;
branches;
next	1.14;
commitid	10056F596401CDD6854;

1.14
date	2015.10.06.15.11.21;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005613E4AB69A65ADB;

1.13
date	2015.10.06.15.05.43;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005613E34754F9CB63;

1.12
date	2009.11.10.17.35.47;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004AF9A4835FEA0FE6;

1.11
date	2009.07.18.14.09.00;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004A61D73A7953CBB8;

1.10
date	2009.03.29.13.04.15;	author tg;	state Exp;
branches;
next	1.9;
commitid	10049CF71B654F9EF54;

1.9
date	2008.12.10.18.06.05;	author tg;	state Exp;
branches;
next	1.8;
commitid	100494005235071EEB4;

1.8
date	2008.03.27.13.48.28;	author tg;	state Exp;
branches;
next	1.7;
commitid	10047EBA5A25F1AA7E1;

1.7
date	2008.03.03.20.00.15;	author tg;	state Exp;
branches;
next	1.6;
commitid	10047CC58E556C76AA1;

1.6
date	2007.08.03.20.14.00;	author tg;	state Exp;
branches;
next	1.5;
commitid	10046B38C625BD1C0B3;

1.5
date	2007.07.11.09.07.31;	author tg;	state Exp;
branches;
next	1.4;
commitid	10046949DDC7E339954;

1.4
date	2007.06.26.23.18.58;	author tg;	state Exp;
branches;
next	1.3;
commitid	10046819ECA1B408250;

1.3
date	2007.06.16.23.00.38;	author tg;	state Exp;
branches;
next	1.2;
commitid	10046746BA52102272D;

1.2
date	2007.06.16.22.57.29;	author tg;	state Exp;
branches;
next	1.1;
commitid	10046746ABA340A1476;

1.1
date	2007.06.16.22.36.48;	author tg;	state Exp;
branches;
next	;
commitid	10046746581272CFCA8;


desc
@@


1.15
log
@prepare most scripts for locale tracking; drop some TZ=UTC; use modern mksh
@
text
@#!/bin/mksh
# $MirSecuCron: etc_cronrun 0.0 0000/00/00 00:00:00 root Backup $
# $MirOS: src/etc/cronrun,v 1.14 2015/10/06 15:11:21 tg Exp $
#-
# Copyright (c) 2007, 2015, 2016
#	mirabilos <m@@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.

set -o pipefail
export LC_ALL=C PATH=/bin:/usr/bin:/sbin:/usr/sbin
cd /
umask 077
exec >/dev/null
exec 2>/dev/null

function die {
	typeset -i rv=$1
	shift
	print -r -- "$@@" | logger -t cronrun
	exit $rv
}

function tm_chk {
	integer minhrs=$1
	local job=$2

	if [[ -s /var/log/$job.out ]]; then
		rm -f /var/log/$job.out.gz
		gzip -n9 /var/log/$job.out
	fi

	[[ -s /var/log/$job.out.gz ]] || return 1
	chown 0:0 /var/log/$job.out.gz
	chmod 0640 /var/log/$job.out.gz
	local line=$(gzip -dc /var/log/$job.out.gz | head -n 1) || return 1
	[[ $line = @@(RUNTIME=)+([0-9]).+([0-9]) ]] || return 1
	local dft=$(print "($(date +%J)-${line##RUNTIME=})*24" | bc)
	[[ $dft = .* ]] && dft=0$dft
	integer dftv=${dft%%.*}
	(( dftv )) || return 1
	(( dftv > minhrs )) && return 1
	print -- $dft
	return 0
}

integer do_log=0
integer nolock=0
integer chk_tm=0
while getopts ":lnt:" ch; do
	case $ch {
	(l)	do_log=1 ;;
	(n)	nolock=1 ;;
	(t)	chk_tm=$OPTARG ;;
	(*)	die 1 "invalid option/argument ($ch, $OPTARG)" ;;
	}
done
shift $((OPTIND - 1))

jobname=$1
[[ -s /etc/$jobname ]] || die 1 "cannot run '$jobname', file does not exist"

(( chk_tm )) && if ct=$(tm_chk $chk_tm "$jobname"); then
	die 0 "not running '$jobname', has been run $ct hours ago"
fi

if (( !nolock )); then
	#XXX do this right (noclobber, maybe?)
	[[ -e /var/run/cron.maintenance ]] && die 0 "not running" \
	    "'$jobname', '$(</var/run/cron.maintenance)' already running"
	print -nr -- "$jobname" >/var/run/cron.maintenance
fi

if (( do_log )); then
	nice mksh "/etc/$jobname" 2>&1 | \
	    logger -t "cronrun: $jobname"
else
	nice mksh "/etc/$jobname" 2>&1 | \
	    tee "/var/log/$jobname.out" | \
	    mail -s "$(hostname) $jobname output" root
	rm -f "/var/log/$jobname.out.gz"
	gzip -n9 "/var/log/$jobname.out"
	chown 0:0 /var/log/$jobname.out.gz
	chmod 0640 /var/log/$jobname.out.gz
fi

(( nolock )) || rm -f /var/run/cron.maintenance
exit 0
@


1.14
log
@-o pipefail, let], and a todo while here
@
text
@d3 1
a3 1
# $MirOS: src/etc/cronrun,v 1.12 2009/11/10 17:35:47 tg Exp $
d5 1
a5 1
# Copyright (c) 2007,2015
d24 1
a24 1
export PATH=/bin:/usr/bin:/sbin:/usr/sbin
@


1.13
log
@pre-fill MirSecuCron in correct width, at least for all that could be
affected during a run (I think I got them all)
@
text
@d5 2
a6 2
# Copyright (c) 2007
#	Thorsten Glaser <tg@@mirbsd.de>
d23 1
d60 2
a61 2
do_log=0
nolock=0
d80 2
a81 1
if [[ $nolock = 0 ]]; then
d87 1
a87 1
if [[ $do_log = 1 ]]; then
d100 1
a100 1
[[ $nolock = 1 ]] || rm -f /var/run/cron.maintenance
@


1.12
log
@more proper print-builtin usage
@
text
@d2 2
a3 2
# $MirSecuCron$
# $MirOS: src/etc/cronrun,v 1.11 2009/07/18 14:09:00 tg Exp $
@


1.11
log
@prevent data corruption from /etc/security’s automated backup cronjob
by using “MirSecuCron” as RCS ID for these and preventing it from ex-
panding any of the default keywords

also, add RCS IDs to almost all configuration files and enhance the
default changelist file
@
text
@d3 1
a3 1
# $MirOS: src/etc/cronrun,v 1.10 2009/03/29 13:04:15 tg Exp $
d32 1
a32 1
	print "$@@" | logger -t cronrun
@


1.10
log
@• take care of dbins
• #!/bin/mksh shebang, in most places
• rcsid while here
@
text
@d2 2
a3 2
# $Id$
# $MirOS: src/etc/cronrun,v 1.9 2008/12/10 18:06:05 tg Exp $
@


1.9
log
@use relative paths to mksh
@
text
@d1 3
a3 2
#!/usr/bin/env mksh
# $MirOS: src/etc/cronrun,v 1.8 2008/03/27 13:48:28 tg Exp $
d23 1
a23 1
export PATH=/usr/dbin:/bin:/usr/bin:/usr/dsbin:/sbin:/usr/sbin
@


1.8
log
@add /usr/dbin, /usr/dsbin to the path: usually before /bin and /sbin except
in the root+single user case (etc/root.profile, etc/profile + SINGLE)
@
text
@d1 2
a2 2
#!/bin/mksh
# $MirOS: src/etc/cronrun,v 1.7 2008/03/03 20:00:15 tg Exp $
@


1.7
log
@fix perms of logfiles
@
text
@d2 1
a2 1
# $MirOS: src/etc/cronrun,v 1.6 2007/08/03 20:14:00 tg Exp $
d22 1
a22 1
export PATH=/bin:/usr/bin:/sbin:/usr/sbin
@


1.6
log
@• cronrun: new option -t<hrs> to make the job run at most after <hrs> hours
• crontab: use cronrun -t for daily/weekly/monthly, to prevent at least the
  daily cronjob to be run twice on the same day (one anacron, one normally)
@
text
@d2 1
a2 1
# $MirOS: src/etc/cronrun,v 1.5 2007/07/11 09:07:31 tg Exp $
d45 2
d93 2
@


1.5
log
@gzip(1) doesn't overwrite existing files, so• do it ourselves.
@
text
@d2 1
a2 1
# $MirOS: src/etc/cronrun,v 1.4 2007/06/26 23:18:58 tg Exp $
d35 21
d58 2
a59 1
while getopts ":ln" ch; do
d63 1
d72 4
@


1.4
log
@make sendmail not bitch because stdout and stderr are closed;
redirect them towards /dev/null instead
@
text
@d2 1
a2 1
# $MirOS: src/etc/cronrun,v 1.3 2007/06/16 23:00:38 tg Exp $
d62 1
@


1.3
log
@ensure cronrun's output goes to syslog or nowhere
@
text
@d2 1
a2 1
# $MirOS: src/etc/cronrun,v 1.2 2007/06/16 22:57:29 tg Exp $
d25 2
a26 2
exec >&-
exec 2>&-
@


1.2
log
@add a script that runs daily/weekly/monthly on reboot + {15,30,45} minutes
if they haven't been run for 3 days over time

cronrun -l is for logging to syslog instead of mails, don't use ☺
cronrun -n is for recursive runs, don't use ☻
@
text
@d2 1
a2 1
# $MirOS: src/etc/cronrun,v 1.1 2007/06/16 22:36:48 tg Exp $
d25 9
d41 1
a41 3
	(*)	print "cronrun: invalid option/argument ($ch, $OPTARG)"
		exit 1
		;;
d47 1
a47 4
if [[ ! -s /etc/$jobname ]]; then
	print "cronrun: cannot run '$jobname', file does not exist"
	exit 1
fi
d49 4
a52 4
[[ $nolock = 1 ]] || if [[ -e /var/run/cron.maintenance ]]; then
	print "cronrun: not running '$jobname'," \
	    "'$(</var/run/cron.maintenance)' already running"
	exit 0
a53 1
[[ $nolock = 1 ]] || print -nr -- "$jobname" >/var/run/cron.maintenance
@


1.1
log
@• rc: run post-install script earlier
• rc, post-install script, installer: run the script in the foreground,
  move the “newaliases” call into it and let the script fork its own
  background processes off
• cronrun: new, to be used to run daily/weekly/monthly with locking
• post-install, crontab: use cronrun
@
text
@d2 1
a2 1
# $MirOS: src/share/misc/licence.template,v 1.20 2006/12/11 21:04:56 tg Rel $
d26 13
d45 1
a45 1
if [[ -e /var/run/cron.maintenance ]]; then
d50 1
a50 1
print -nr -- "$jobname" >/var/run/cron.maintenance
d52 9
a60 4
nice mksh "/etc/$jobname" 2>&1 | \
    tee "/var/log/$jobname.out" | \
    mail -s "$(hostname) $jobname output" root
gzip -n9 "/var/log/$jobname.out"
d62 1
a62 1
rm -f /var/run/cron.maintenance
@

