head	1.8;
access;
symbols
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	mirbsd:1.1.7;
locks; strict;
comment	@# @;


1.8
date	2016.03.25.19.49.16;	author tg;	state Exp;
branches;
next	1.7;
commitid	10056F596401CDD6854;

1.7
date	2009.07.18.14.09.12;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004A61D73A7953CBB8;

1.6
date	2009.03.29.13.04.17;	author tg;	state Exp;
branches;
next	1.5;
commitid	10049CF71B654F9EF54;

1.5
date	2008.12.10.18.06.08;	author tg;	state Exp;
branches;
next	1.4;
commitid	100494005235071EEB4;

1.4
date	2006.01.28.14.43.33;	author tg;	state Exp;
branches;
next	1.3;
commitid	10043DB82E743FE3623;

1.3
date	2006.01.28.14.30.49;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043DB8000162A4427;

1.2
date	2005.07.07.13.39.25;	author tg;	state Exp;
branches;
next	1.1;
commitid	331742cd306446f9;

1.1
date	2005.03.06.16.33.39;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.06.16.33.39;	author tg;	state Exp;
branches;
next	;


desc
@@


1.8
log
@prepare most scripts for locale tracking; drop some TZ=UTC; use modern mksh
@
text
@#!/bin/mksh
# $MirSecuCron$
# $MirOS: src/etc/ppp/ip-up,v 1.7 2009/07/18 14:09:12 tg Exp $

# This script is called when your ppp(8) or pppd(8) connection
# goes up and after the connection, including routing, has al-
# ready been established.

export LC_ALL=C

### Samples

## things to do before the state table gets flushed
#ifconfig gif0 down		# if using an IPv6 tunnel

## OpenIPF
#pfctl -f /etc/pf.conf 2>&1	| logger -t pfctl-load
#pfctl -i $1 -F state 2>&1	| logger -t pfctl-flush
#pfctl -e >/dev/null 2>&1	# just in case...

## get IPv4 address
if [[ $4 = +([0-9]).+([0-9]).+([0-9]).+([0-9]) ]]; then
	MYIP=$4
else
	MYIP=$(ifconfig $1 | grep "inet " | head -1 \
	    | while read a b c; do print $b; done)
fi

## insert whatever stuff here
@


1.7
log
@prevent data corruption from /etc/security’s automated backup cronjob
by using “MirSecuCron” as RCS ID for these and preventing it from ex-
panding any of the default keywords

also, add RCS IDs to almost all configuration files and enhance the
default changelist file
@
text
@d3 1
a3 1
# $MirOS: src/etc/ppp/ip-up,v 1.6 2009/03/29 13:04:17 tg Exp $
d9 1
@


1.6
log
@• take care of dbins
• #!/bin/mksh shebang, in most places
• rcsid while here
@
text
@d2 2
a3 2
# $Id$
# $MirOS: src/etc/ppp/ip-up,v 1.5 2008/12/10 18:06:08 tg Exp $
@


1.5
log
@use relative paths to mksh
@
text
@d1 1
a1 1
#!/usr/bin/env mksh
d3 1
a3 1
# $MirOS: src/etc/ppp/ip-up,v 1.4 2006/01/28 14:43:33 tg Exp $
@


1.4
log
@prevent the following state table entries from happen:

| pppoe0 ipv6 $tunnelserver -> $oldip -> $newip       SINGLE:NO_TRAFFIC
| pppoe0 ipv6 $newip -> $oldip -> $tunnelserver       MULTIPLE:SINGLE

oldip = IPv4 address before forced reconnect
newip = current IPv4 address on pppoe0
@
text
@d1 1
a1 1
#!/bin/mksh
d3 1
a3 1
# $MirOS: src/etc/ppp/ip-up,v 1.3 2006/01/28 14:30:49 tg Exp $
@


1.3
log
@a working solution for the state table on pppoe(4) reconnects
(also usable for pppd(8) with modem or ppp(8) with modem too,
or in conjunction with pppoe(8) which still has some uses)
@
text
@d3 1
a3 1
# $MirOS: src/etc/ppp/ip-up,v 1.2 2005/07/07 13:39:25 tg Exp $
d12 3
@


1.2
log
@/bin/sh and /bin/ksh -> /bin/mksh

This should cover most uses.
@
text
@d3 1
a3 1
# $MirOS: src/etc/ppp/ip-up,v 1.1.7.1 2005/03/06 16:33:39 tg Exp $
d8 18
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#!/bin/ksh
d3 1
a3 1
# $MirOS$
d5 3
a7 3
# This script is called with mirbsdksh when your ppp(8) or pppd(8)
# connection goes up and the connection, including routing, has
# already been established.
@


1.1.7.1
log
@Add some missing files, such as some ISDN4BSD stuff,
documentation, tmac and tab files, TAI64 etc.
@
text
@@
