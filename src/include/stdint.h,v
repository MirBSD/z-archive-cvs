head	1.9;
access;
symbols
	MIRBSD_10:1.7.0.2
	MIRBSD_10_BASE:1.7
	MIRBSD_9_BASE:1.5
	MIRBSD_8:1.5.0.2
	MIRBSD_8_BASE:1.5
	mirbsd:1.1.7;
locks; strict;
comment	@ * @;


1.9
date	2015.01.09.14.35.21;	author tg;	state Exp;
branches;
next	1.8;
commitid	10054AFE742144BB453;

1.8
date	2014.02.09.16.15.31;	author tg;	state Exp;
branches;
next	1.7;
commitid	10052F7A9B12873E47B;

1.7
date	2007.09.21.10.43.01;	author tg;	state Exp;
branches;
next	1.6;
commitid	10046F3A0415EB3B130;

1.6
date	2006.12.11.23.54.56;	author tg;	state Exp;
branches;
next	1.5;
commitid	100457DEFC626A6A05C;

1.5
date	2005.12.17.05.46.13;	author tg;	state Exp;
branches;
next	1.4;
commitid	10043A3A3E65E20A413;

1.4
date	2005.11.21.19.31.54;	author tg;	state Exp;
branches;
next	1.3;
commitid	60294382208fe0fe;

1.3
date	2005.07.25.17.48.48;	author tg;	state Exp;
branches;
next	1.2;
commitid	5c5c42e525e6dfa0;

1.2
date	2005.05.19.20.48.38;	author tg;	state Exp;
branches;
next	1.1;
commitid	504e428cfbbadf7d;

1.1
date	2005.03.06.16.33.39;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.06.16.33.39;	author tg;	state Exp;
branches;
next	;


desc
@@


1.9
log
@wint_t has been "unsigned int" since at least 2010
@
text
@/*-
 * "minimal" replacement for ISO C99 "stdint.h" header file (not com-
 * plete yet, but pretty near, with some ISO C11 sprinkled in for fun
 */

#ifndef	_STDINT_H
#define	_STDINT_H "$MirOS$"

/* get {,u,u_}int8_t definitions and stuff */

#include <machine/types.h>

/* define extended integer types to be the same as basic ones for now */

typedef	int8_t		int_least8_t;
typedef	int16_t		int_least16_t;
typedef	int32_t		int_least32_t;
typedef	int64_t		int_least64_t;
typedef	uint8_t		uint_least8_t;
typedef	uint16_t	uint_least16_t;
typedef	uint32_t	uint_least32_t;
typedef	uint64_t	uint_least64_t;

typedef	int8_t		int_fast8_t;		/* probably int? */
typedef	int16_t		int_fast16_t;		/* probably int? */
typedef	int32_t		int_fast32_t;
typedef	int64_t		int_fast64_t;
typedef	uint8_t		uint_fast8_t;		/* probably unsigned? */
typedef	uint16_t	uint_fast16_t;		/* probably unsigned? */
typedef	uint32_t	uint_fast32_t;
typedef	uint64_t	uint_fast64_t;

/* we don't have 128 bits yet ;-) */

typedef	int64_t		intmax_t;
typedef	uint64_t	uintmax_t;


#if (!defined(__cplusplus)) || defined(__STDC_LIMIT_MACROS)

/* basic types */

#define	INT8_MIN	(-0x7F-1)
#define	INT8_MAX	0x7F
#define	UINT8_MAX	0xFFU

#define	INT16_MIN	(-0x7FFF-1)
#define	INT16_MAX	0x7FFF
#define	UINT16_MAX	0xFFFFU

#define	INT32_MIN	(-0x7FFFFFFFL-1)
#define	INT32_MAX	0x7FFFFFFFL
#define	UINT32_MAX	0xFFFFFFFFUL

#define	INT64_MIN	(-0x7FFFFFFFFFFFFFFFLL-1)
#define	INT64_MAX	0x7FFFFFFFFFFFFFFFLL
#define	UINT64_MAX	0xFFFFFFFFFFFFFFFFULL

/* minimum types - same as basic types for now */

#define	INT_LEAST8_MIN		INT8_MIN
#define	INT_LEAST8_MAX		INT8_MAX
#define	UINT_LEAST8_MAX		UINT8_MAX

#define	INT_LEAST16_MIN		INT16_MIN
#define	INT_LEAST16_MAX		INT16_MAX
#define	UINT_LEAST16_MAX	UINT16_MAX

#define	INT_LEAST32_MIN		INT32_MIN
#define	INT_LEAST32_MAX		INT32_MAX
#define	UINT_LEAST32_MAX	UINT32_MAX

#define	INT_LEAST64_MIN		INT64_MIN
#define	INT_LEAST64_MAX		INT64_MAX
#define	UINT_LEAST64_MAX	UINT64_MAX

/* fastest types - same as basic types for now */

#define	INT_FAST8_MIN		INT8_MIN
#define	INT_FAST8_MAX		INT8_MAX
#define	UINT_FAST8_MAX		UINT8_MAX

#define	INT_FAST16_MIN		INT16_MIN
#define	INT_FAST16_MAX		INT16_MAX
#define	UINT_FAST16_MAX		UINT16_MAX

#define	INT_FAST32_MIN		INT32_MIN
#define	INT_FAST32_MAX		INT32_MAX
#define	UINT_FAST32_MAX		UINT32_MAX

#define	INT_FAST64_MIN		INT64_MIN
#define	INT_FAST64_MAX		INT64_MAX
#define	UINT_FAST64_MAX		UINT64_MAX

/* pointer types - machdep */

#ifdef	__LP64__
#define	INTPTR_MIN		INT64_MIN
#define	INTPTR_MAX		INT64_MAX
#define	UINTPTR_MAX		UINT64_MAX
#else
#define	INTPTR_MIN		INT32_MIN
#define	INTPTR_MAX		INT32_MAX
#define	UINTPTR_MAX		UINT32_MAX
#endif

/* largest integer - 64 bit for now */

#define	INTMAX_MIN		INT64_MIN
#define	INTMAX_MAX		INT64_MAX
#define	UINTMAX_MAX		UINT64_MAX

/* misc. types */

/* ptrdiff_t is a signed intptr_t */
#define	PTRDIFF_MIN		INTPTR_MIN
#define	PTRDIFF_MAX		INTPTR_MAX

/* sig_atomic_t is an int */
#define	SIG_ATOMIC_MIN		INT32_MIN
#define	SIG_ATOMIC_MAX		INT32_MAX

#ifndef SIZE_MAX
/* size_t is the same as an uintptr_t */
#define	SIZE_MAX		UINTPTR_MAX
#endif
#ifndef SSIZE_MAX
/* ssize_t is the same as an intptr_t */
#define	SSIZE_MAX		INTPTR_MAX
#endif

/* C11 optional */
#if !defined(__STDC_WANT_LIB_EXT1__) || (__STDC_WANT_LIB_EXT1__)
#define RSIZE_MAX		(SIZE_MAX >> 1)
#endif /* __STDC_WANT_LIB_EXT1__ */

/* wchar_t is an unsigned short */
#define	WCHAR_MIN		0U
#define	WCHAR_MAX		0xFFFDU		/* match <wchar.h> */
#define	WINT_MIN		0U
#define	WINT_MAX		0xFFFFFFFFUL

#endif	/* ndef C++ or def __STDC_LIMIT_MACROS */


/* Apple says when to not define these */

#if (!defined(__cplusplus)) || defined(__STDC_CONSTANT_MACROS)

#define	INT8_C(x)	((int8_t)x)
#define	INT16_C(x)	((int16_t)x)
#define	INT32_C(x)	(x ## L)
#define	INT64_C(x)	(x ## LL)

#define	UINT8_C(x)	((uint8_t)x)
#define	UINT16_C(x)	((uint16_t)x)
#define	UINT32_C(x)	(x ## UL)
#define	UINT64_C(x)	(x ## ULL)

#define	INTMAX_C(x)	(x ## LL)
#define	UINTMAX_C(x)	(x ## ULL)

#endif	/* ndef C++ or def __STDC_CONSTANT_MACROS */

#endif	/* ndef _STDINT_H */
@


1.8
log
@implement rsize_t as specified in N1570, inspired by xenu
@
text
@a0 2
/* $MirOS: src/include/stdint.h,v 1.7 2007/09/21 10:43:01 tg Exp $ */

d7 1
a7 1
#define	_STDINT_H
d138 1
a138 1
#define	WCHAR_MIN		0
d140 2
a141 2
#define	WINT_MIN		INT32_MIN
#define	WINT_MAX		INT32_MAX
@


1.7
log
@address redefinition issue shown by pcc
@
text
@d1 1
a1 1
/* $MirOS: src/include/stdint.h,v 1.6 2006/12/11 23:54:56 tg Exp $ */
d5 1
a5 1
 * plete yet, but pretty near
d134 5
@


1.6
log
@mostly administrative licence sync w/ current template
@
text
@d1 1
a1 1
/* $MirOS: src/include/stdint.h,v 1.5 2005/12/17 05:46:13 tg Exp $ */
d125 1
d128 5
@


1.5
log
@big fat licence update (I left some which are bsiegert@@'s alone though)
also, remove licence boilerplate from some .h files who don't deserve it
and remove and add some advertising clauses because I say so
@
text
@d1 1
a1 1
/* $MirOS: src/include/stdint.h,v 1.4 2005/11/21 19:31:54 tg Exp $ */
a3 19
 * Copyright (c) 2004, 2005
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a nontrivial bug.
 *-
@


1.4
log
@First round of system include "fixes":
let GCC decide the length of ptrdiff_t, size_t, wchar_t, wint_t
(the first three adapted from gcc fixincludes run[1])
and adapt ssize_t accordingly (untested)
also fix limits

[1] which we don't run during gcc module build tho
@
text
@d1 1
a1 1
/* $MirOS: src/include/stdint.h,v 1.3 2005/07/25 17:48:48 tg Exp $ */
d14 8
a21 7
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of this work, even if advised of the possibility of such damage.
@


1.3
log
@WCHAR_MIN and WCHAR_MAX changed
@
text
@d1 1
a1 1
/* $MirOS: src/include/stdint.h,v 1.2 2005/05/19 20:48:38 tg Exp $ */
d148 1
a148 1
#define	WCHAR_MAX		UINT16_MAX
@


1.2
log
@utils.c: In function v_rescale_rnd':
utils.c:910: warning: integer constant is too large for "long" type
@
text
@d1 1
a1 1
/* $MirOS: src/include/stdint.h,v 1.1.7.1 2005/03/06 16:33:39 tg Exp $ */
d146 3
a148 3
/* wchar_t and wint_t are always int */
#define	WCHAR_MIN		INT32_MIN
#define	WCHAR_MAX		INT32_MAX
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.2 2005/03/03 19:43:30 tg Rel $ */
d71 7
a77 7
#define	INT32_MIN	(-0x7FFFFFFF-1)
#define	INT32_MAX	0x7FFFFFFF
#define	UINT32_MAX	0xFFFFFFFFU

#define	INT64_MIN	(-0x7FFFFFFFFFFFFFFF-1)
#define	INT64_MAX	0x7FFFFFFFFFFFFFFF
#define	UINT64_MAX	0xFFFFFFFFFFFFFFFFU
@


1.1.7.1
log
@Add some missing files, such as some ISDN4BSD stuff,
documentation, tmac and tab files, TAI64 etc.
@
text
@@
