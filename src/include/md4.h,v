head	1.3;
access;
symbols
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200509221800:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.03.05.14.07.26;	author tg;	state Exp;
branches;
next	1.2;
commitid	10053172F8E30AE4681;

1.2
date	2013.10.31.20.06.07;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005272B7081B0E5655;

1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@more http://www.tedunangst.com/flak/post/how-to-screw-up-crypto-the-easy-way
fixing in headers (need to rid this from the corresponding *.c files, too!)

also, bonus, fix some bounded attributes and add some more (WTF!)
@
text
@/*	$MirOS: src/include/md4.h,v 1.2 2013/10/31 20:06:07 tg Exp $ */
/*	$OpenBSD: md4.h,v 1.15 2004/06/22 01:57:30 jfb Exp $	*/

/*
 * This code implements the MD4 message-digest algorithm.
 * The algorithm is due to Ron Rivest.  This code was
 * written by Colin Plumb in 1993, no copyright is claimed.
 * This code is in the public domain; do with it what you wish.
 * Todd C. Miller modified the MD5 code to do MD4 based on RFC 1186.
 *
 * Equivalent code is available from RSA Data Security, Inc.
 * This code has been tested against that, and is equivalent,
 * except that you don't need to include two pages of legalese
 * with every copy.
 */

#ifndef _MD4_H_
#define _MD4_H_

#define	MD4_BLOCK_LENGTH		64
#define	MD4_DIGEST_LENGTH		16
#define	MD4_DIGEST_STRING_LENGTH	(MD4_DIGEST_LENGTH * 2 + 1)

typedef struct MD4Context {
	u_int32_t state[4];			/* state */
	u_int64_t count;			/* number of bits, mod 2^64 */
	u_int8_t buffer[MD4_BLOCK_LENGTH];	/* input buffer */
} MD4_CTX;

#include <sys/cdefs.h>

__BEGIN_DECLS
void	 MD4Init(MD4_CTX *);
void	 MD4Update(MD4_CTX *, const u_int8_t *, size_t)
		__attribute__((__bounded__(__string__, 2, 3)));
void	 MD4Pad(MD4_CTX *);
void	 MD4Final(u_int8_t *, MD4_CTX *)
		__attribute__((__bounded__(__minbytes__, 1, MD4_DIGEST_LENGTH)));
void	 MD4Transform(u_int32_t *, const u_int8_t *)
		__attribute__((__bounded__(__minbytes__, 1, 16)))
		__attribute__((__bounded__(__minbytes__, 2, MD4_BLOCK_LENGTH)));
char	*MD4End(MD4_CTX *, char *)
		__attribute__((__bounded__(__minbytes__, 2, MD4_DIGEST_STRING_LENGTH)));
char	*MD4File(const char *, char *)
		__attribute__((__bounded__(__minbytes__, 2, MD4_DIGEST_STRING_LENGTH)));
char	*MD4FileChunk(const char *, char *, off_t, off_t)
		__attribute__((__bounded__(__minbytes__, 2, MD4_DIGEST_STRING_LENGTH)));
char	*MD4Data(const u_int8_t *, size_t, char *)
		__attribute__((__bounded__(__string__, 1, 2)))
		__attribute__((__bounded__(__minbytes__, 3, MD4_DIGEST_STRING_LENGTH)));
__END_DECLS

#endif /* _MD4_H_ */
@


1.2
log
@adapt most __attribute__((â€¦)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/*	$MirOS$ */
d37 1
a37 1
void	 MD4Final(u_int8_t [MD4_DIGEST_LENGTH], MD4_CTX *)
d39 2
a40 2
void	 MD4Transform(u_int32_t [4], const u_int8_t [MD4_BLOCK_LENGTH])
		__attribute__((__bounded__(__minbytes__, 1, 4)))
@


1.1
log
@Initial revision
@
text
@d1 1
d35 1
a35 1
		__attribute__((__bounded__(__string__,2,3)));
d38 1
a38 1
		__attribute__((__bounded__(__minbytes__,1,MD4_DIGEST_LENGTH)));
d40 2
a41 2
		__attribute__((__bounded__(__minbytes__,1,4)))
		__attribute__((__bounded__(__minbytes__,2,MD4_BLOCK_LENGTH)));
d43 1
a43 1
		__attribute__((__bounded__(__minbytes__,2,MD4_DIGEST_STRING_LENGTH)));
d45 1
a45 1
		__attribute__((__bounded__(__minbytes__,2,MD4_DIGEST_STRING_LENGTH)));
d47 1
a47 1
		__attribute__((__bounded__(__minbytes__,2,MD4_DIGEST_STRING_LENGTH)));
d49 2
a50 2
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,3,MD4_DIGEST_STRING_LENGTH)));
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
