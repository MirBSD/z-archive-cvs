head	1.13;
access;
symbols
	MIRBSD_10:1.6.0.2
	MIRBSD_10_BASE:1.6
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4
	cvs-200509221800:1.1.1.2
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.02.11.21.42.22;	author tg;	state Exp;
branches;
next	1.12;
commitid	10054DBCCD452D127A7;

1.12
date	2015.02.09.21.50.44;	author tg;	state Exp;
branches;
next	1.11;
commitid	10054D92BCB3E6955C8;

1.11
date	2015.02.09.21.46.02;	author tg;	state Exp;
branches;
next	1.10;
commitid	10054D92AB15D0B8652;

1.10
date	2014.02.09.16.30.28;	author tg;	state Exp;
branches;
next	1.9;
commitid	10052F7AD196E6D41EB;

1.9
date	2014.02.09.16.15.31;	author tg;	state Exp;
branches;
next	1.8;
commitid	10052F7A9B12873E47B;

1.8
date	2013.10.31.20.06.08;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005272B7081B0E5655;

1.7
date	2010.09.02.16.49.36;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004C7FD5B53431BD34;

1.6
date	2006.11.20.23.06.46;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004562351476F49562;

1.5
date	2006.10.02.02.56.58;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004520800031B71F2C;

1.4
date	2005.11.21.19.31.54;	author tg;	state Exp;
branches;
next	1.3;
commitid	60294382208fe0fe;

1.3
date	2005.07.25.19.16.10;	author tg;	state Exp;
branches;
next	1.2;
commitid	59fb42e53a855a3d;

1.2
date	2005.03.06.19.13.40;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.52.08;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.13
log
@nice workaround for C++ brokenness: 0L taken from musl via ycombinator, but it must be unsigned of course, so 0UL
@
text
@/**	$MirOS: src/include/stdio.h,v 1.12 2015/02/09 21:50:44 tg Exp $ */
/*	$OpenBSD: stdio.h,v 1.32 2005/05/11 18:39:19 espie Exp $	*/
/*	$NetBSD: stdio.h,v 1.18 1996/04/25 18:29:21 jtc Exp $	*/

/*-
 * Copyright © 2013, 2014, 2015
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)stdio.h	5.17 (Berkeley) 6/3/91
 */

#ifndef	_STDIO_H_
#define	_STDIO_H_

#if (!defined(_ANSI_SOURCE) && !defined(__STRICT_ANSI__)) || \
    defined(_GNU_SOURCE)
#include <sys/types.h>
#endif

#include <sys/cdefs.h>
#include <machine/ansi.h>

#if !defined(_GCC_SIZE_T)
#define	_GCC_SIZE_T
typedef	__SIZE_TYPE__	size_t;
#endif

/* C11 optional */
#if !defined(__STDC_WANT_LIB_EXT1__) || (__STDC_WANT_LIB_EXT1__)
#ifndef rsize_t
#define rsize_t		rsize_t
typedef size_t		rsize_t;
#endif
#endif /* __STDC_WANT_LIB_EXT1__ */

#ifdef	_BSD_OFF_T_
/* LONGLONG */
typedef	_BSD_OFF_T_	off_t;
#undef	_BSD_OFF_T_
#endif

#ifndef NULL
#ifdef __GNUG__
#define	NULL		__null
#elif defined(lint) || defined(__cplusplus)
#define	NULL		0UL
#else
#define	NULL		((void *)((__PTRDIFF_TYPE__)0UL))
#endif
#endif

#define	_FSTDIO		/* Define for new stdio with functions. */

typedef off_t fpos_t;	/* stdio file position type */

/*
 * NB: to fit things in six character monocase externals, the stdio
 * code uses the prefix `__s' for stdio objects, typically followed
 * by a three-character attempt at a mnemonic.
 */

/* stdio buffers */
struct __sbuf {
	unsigned char *_base;
	int	_size;
};

/*
 * stdio state variables.
 *
 * The following always hold:
 *
 *	if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
 *		_lbfsize is -_bf._size, else _lbfsize is 0
 *	if _flags&__SRD, _w is 0
 *	if _flags&__SWR, _r is 0
 *
 * This ensures that the getc and putc macros (or inline functions) never
 * try to write or read from a file that is in `read' or `write' mode.
 * (Moreover, they can, and do, automatically switch from read mode to
 * write mode, and back, on "r+" and "w+" files.)
 *
 * _lbfsize is used only to make the inline line-buffered output stream
 * code as compact as possible.
 *
 * _ub, _up, and _ur are used when ungetc() pushes back more characters
 * than fit in the current _bf, or when ungetc() pushes back a character
 * that does not match the previous one in _bf.  When this happens,
 * _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
 * _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
 */
typedef	struct __sFILE {
	unsigned char *_p;	/* current position in (some) buffer */
	int	_r;		/* read space left for getc() */
	int	_w;		/* write space left for putc() */
	short	_flags;		/* flags, below; this FILE is free if 0 */
	short	_file;		/* fileno, if Unix descriptor, else -1 */
	struct	__sbuf _bf;	/* the buffer (at least 1 byte, if !NULL) */
	int	_lbfsize;	/* 0 or -_bf._size, for inline putc */

	/* operations */
	void	*_cookie;	/* cookie passed to io functions */
	int	(*_close)(void *);
	int	(*_read)(void *, char *, int);
	fpos_t	(*_seek)(void *, fpos_t, int);
	int	(*_write)(void *, const char *, int);

	/* extension data, to avoid further ABI breakage */
	struct	__sbuf _ext;
	/* data for long sequences of ungetc() */
	unsigned char *_up;	/* saved _p when _p is doing ungetc data */
	int	_ur;		/* saved _r when _r is counting ungetc data */

	/* tricks to meet minimum requirements even when malloc() fails */
	unsigned char _ubuf[3];	/* guarantee an ungetc() buffer */
	unsigned char _nbuf[1];	/* guarantee a getc() buffer */

	/* separate buffer for fgetln() when line crosses buffer boundary */
	struct	__sbuf _lb;	/* buffer for fgetln() */

	/* Unix stdio files get aligned to block boundaries on fseek() */
	int	_blksize;	/* stat.st_blksize (may be != _bf._size) */
	fpos_t	_offset;	/* current lseek offset */
} FILE;

__BEGIN_DECLS
extern FILE __sF[];
__END_DECLS

#define	__SLBF	0x0001		/* line buffered */
#define	__SNBF	0x0002		/* unbuffered */
#define	__SRD	0x0004		/* OK to read */
#define	__SWR	0x0008		/* OK to write */
	/* RD and WR are never simultaneously asserted */
#define	__SRW	0x0010		/* open for reading & writing */
#define	__SEOF	0x0020		/* found EOF */
#define	__SERR	0x0040		/* found error */
#define	__SMBF	0x0080		/* _buf is from malloc */
#define	__SAPP	0x0100		/* fdopen()ed in append mode */
#define	__SSTR	0x0200		/* this is an sprintf/snprintf string */
#define	__SOPT	0x0400		/* do fseek() optimisation */
#define	__SNPT	0x0800		/* do not do fseek() optimisation */
#define	__SOFF	0x1000		/* set iff _offset is in fact correct */
#define	__SMOD	0x2000		/* true => fgetln modified _p text */
#define	__SALC	0x4000		/* allocate string space dynamically */

/*
 * The following three definitions are for ANSI C, which took them
 * from System V, which brilliantly took internal interface macros and
 * made them official arguments to setvbuf(), without renaming them.
 * Hence, these ugly _IOxxx names are *supposed* to appear in user code.
 *
 * Although numbered as their counterparts above, the implementation
 * does not rely on this.
 */
#define	_IOFBF	0		/* setvbuf should set fully buffered */
#define	_IOLBF	1		/* setvbuf should set line buffered */
#define	_IONBF	2		/* setvbuf should set unbuffered */

#define	BUFSIZ	1024		/* size of buffer used by setbuf */

#define	EOF	(-1)

/*
 * FOPEN_MAX is a minimum maximum, and should be the number of descriptors
 * that the kernel can provide without allocation of a resource that can
 * fail without the process sleeping.  Do not use this for anything.
 */
#define	FOPEN_MAX	20	/* must be <= OPEN_MAX <sys/syslimits.h> */
#define	FILENAME_MAX	1024	/* must be <= PATH_MAX <sys/syslimits.h> */

/* System V/ANSI C; this is the wrong way to do this, do *not* use these. */
#ifndef _ANSI_SOURCE
#define	P_tmpdir	"/tmp/"
#endif
#define	L_tmpnam	1024	/* XXX must be == PATH_MAX */
#define	TMP_MAX		308915776

#ifndef SEEK_SET
#define	SEEK_SET	0	/* set file offset to offset */
#endif
#ifndef SEEK_CUR
#define	SEEK_CUR	1	/* set file offset to current plus offset */
#endif
#ifndef SEEK_END
#define	SEEK_END	2	/* set file offset to EOF plus offset */
#endif

#define	stdin	(&__sF[0])
#define	stdout	(&__sF[1])
#define	stderr	(&__sF[2])

/*
 * Functions defined in ANSI C standard.
 */
__BEGIN_DECLS
void	 clearerr(FILE *);
int	 fclose(FILE *);
int	 feof(FILE *);
int	 ferror(FILE *);
int	 fflush(FILE *);
int	 fgetc(FILE *);
int	 fgetpos(FILE *, fpos_t *);
char	*fgets(char *, int, FILE *)
		__attribute__((__bounded__(__string__, 1, 2)));
FILE	*fopen(const char *, const char *);
int	 fprintf(FILE *, const char *, ...);
int	 fputc(int, FILE *);
int	 fputs(const char *, FILE *);
size_t	 fread(void *, size_t, size_t, FILE *)
		__attribute__((__bounded__(__size__,1,3,2)));
FILE	*freopen(const char *, const char *, FILE *);
int	 fscanf(FILE *, const char *, ...);
int	 fseek(FILE *, long, int);
int	 fseeko(FILE *, off_t, int);
int	 fsetpos(FILE *, const fpos_t *);
long	 ftell(FILE *);
off_t	 ftello(FILE *);
size_t	 fwrite(const void *, size_t, size_t, FILE *)
		__attribute__((__bounded__(__size__,1,3,2)));
int	 getc(FILE *);
int	 getchar(void);
char	*gets(char *);
#if !defined(_ANSI_SOURCE) && !defined(_POSIX_SOURCE) && !defined(__SYS_ERRLIST)
#define __SYS_ERRLIST

extern int sys_nerr;			/* perror(3) external variables */
extern char *sys_errlist[];
#endif
void	 perror(const char *);
int	 printf(const char *, ...);
int	 putc(int, FILE *);
int	 putchar(int);
int	 puts(const char *);
int	 remove(const char *);
int	 rename(const char *, const char *);
void	 rewind(FILE *);
int	 scanf(const char *, ...);
void	 setbuf(FILE *, char *);
int	 setvbuf(FILE *, char *, int, size_t);
int	 sprintf(char *, const char *, ...);
int	 sscanf(const char *, const char *, ...);
FILE	*tmpfile(void);
char	*tmpnam(char *);
int	 ungetc(int, FILE *);
int	 vfprintf(FILE *, const char *, _BSD_VA_LIST_);
int	 vprintf(const char *, _BSD_VA_LIST_);
int	 vsprintf(char *, const char *, _BSD_VA_LIST_);
__END_DECLS

/*
 * Functions defined in POSIX 1003.1.
 */
#ifndef _ANSI_SOURCE
#define	L_ctermid	1024	/* size for ctermid(); PATH_MAX */
#define L_cuserid	9	/* size for cuserid(); UT_NAMESIZE + 1 */

__BEGIN_DECLS
char	*ctermid(char *);
char	*ctermid_r(char *);
char	*cuserid(char *);
FILE	*fdopen(int, const char *);
int	 fileno(FILE *);
void	 flockfile(FILE *);
int	 ftrylockfile(FILE *);
void	 funlockfile(FILE *);
int	 getc_unlocked(FILE *);
int	 putc_unlocked(int, FILE *);
int	 getchar_unlocked(void);
int	 putchar_unlocked(int);
__END_DECLS

#ifndef _POSIX_THREADS
#  define flockfile(fp)			/* nothing */
#  define ftrylockfile(fp)		(0)
#  define funlockfile(fp)		/* nothing */
#endif


#endif /* not ANSI */

/*
 * Routines that are purely local.
 */
#if !defined (_ANSI_SOURCE) && !defined(_POSIX_SOURCE)
__BEGIN_DECLS
int	 asprintf(char **, const char *, ...)
		__attribute__((__format__(__printf__, 2, 3)))
		__attribute__((__nonnull__(2)));
char	*fgetln(FILE *, size_t *);
int	 fpurge(FILE *);
int	 getw(FILE *);
int	 pclose(FILE *);
FILE	*popen(const char *, const char *);
int	 putw(int, FILE *);
void	 setbuffer(FILE *, char *, int);
int	 setlinebuf(FILE *);
char	*tempnam(const char *, const char *);
int	 snprintf(char *, size_t, const char *, ...)
		__attribute__((__format__(__printf__, 3, 4)))
		__attribute__((__nonnull__(3)))
		__attribute__((__bounded__(__string__, 1, 2)));
int	 vasprintf(char **, const char *, _BSD_VA_LIST_)
		__attribute__((__format__(__printf__, 2, 0)))
		__attribute__((__nonnull__(2)));
int	 vsnprintf(char *, size_t, const char *, _BSD_VA_LIST_)
		__attribute__((__format__(__printf__, 3, 0)))
		__attribute__((__nonnull__(3)))
		__attribute__((__bounded__(__string__, 1, 2)));
int	 vscanf(const char *, _BSD_VA_LIST_)
		__attribute__((__format__(__scanf__, 1, 0)))
		__attribute__((__nonnull__(1)));
int	 vsscanf(const char *, const char *, _BSD_VA_LIST_)
		__attribute__((__format__(__scanf__, 2, 0)))
		__attribute__((__nonnull__(2)));
int	 vfscanf(FILE *, const char *, _BSD_VA_LIST_)
		__attribute__((__format__(__scanf__, 2, 0)))
		__attribute__((__nonnull__(2)));
__END_DECLS

/*
 * Stdio function-access interface.
 */
__BEGIN_DECLS
FILE	*funopen(const void *,
		int (*)(void *, char *, int),
		int (*)(void *, const char *, int),
		fpos_t (*)(void *, fpos_t, int),
		int (*)(void *));
__END_DECLS
#define	fropen(cookie, fn) funopen(cookie, fn, 0, 0, 0)
#define	fwopen(cookie, fn) funopen(cookie, 0, fn, 0, 0)
#endif /* !_ANSI_SOURCE && !_POSIX_SOURCE */

/*
 * Functions internal to the implementation.
 */
__BEGIN_DECLS
int	__srget(FILE *);
int	__swbuf(int, FILE *);
__END_DECLS

/*
 * The __sfoo macros are here so that we can 
 * define function versions in the C library.
 */
#define	__sgetc(p) (--(p)->_r < 0 ? __srget(p) : (int)(*(p)->_p++))
#if defined(__GNUC__)
static __inline int __sputc(int _c, FILE *_p) {
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
		return (*_p->_p++ = (unsigned char)_c);
	else
		return (__swbuf(_c, _p));
}
#else
/*
 * This has been tuned to generate reasonable code on the vax using pcc.
 */
#define	__sputc(c, p) \
	(--(p)->_w < 0 ? \
		(p)->_w >= (p)->_lbfsize ? \
			(*(p)->_p = (c)), *(p)->_p != '\n' ? \
				(int)*(p)->_p++ : \
				__swbuf('\n', p) : \
			__swbuf((int)(c), p) : \
		(*(p)->_p = (c), (int)*(p)->_p++))
#endif

#define	__sfeof(p)	(((p)->_flags & __SEOF) != 0)
#define	__sferror(p)	(((p)->_flags & __SERR) != 0)
#define	__sclearerr(p)	((void)((p)->_flags &= ~(__SERR|__SEOF)))
#define	__sfileno(p)	((p)->_file)

#define	feof(p)		__sfeof(p)
#define	ferror(p)	__sferror(p)

#ifndef _POSIX_THREADS
#define	clearerr(p)	__sclearerr(p)
#endif

#ifndef _ANSI_SOURCE
#define	fileno(p)	__sfileno(p)
#endif

#ifndef lint
#ifndef _POSIX_THREADS
#define	getc(fp)	__sgetc(fp)
#endif /* _POSIX_THREADS */
#define	getc_unlocked(fp)	__sgetc(fp)
/*
 * The macro implementations of putc and putc_unlocked are not
 * fully POSIX compliant; they do not set errno on failure
 */
#ifndef _POSIX_SOURCE
#ifndef _POSIX_THREADS
#define putc(x, fp)	__sputc(x, fp)
#endif /* _POSIX_THREADS */
#define putc_unlocked(x, fp)	__sputc(x, fp)
#endif /* _POSIX_SOURCE */
#endif /* lint */

#define	getchar()	getc(stdin)
#define	putchar(x)	putc(x, stdout)
#define getchar_unlocked()	getc_unlocked(stdin)
#define putchar_unlocked(c)	putc_unlocked(c, stdout)

/* C11 optional */
#if !defined(__STDC_WANT_LIB_EXT1__) || (__STDC_WANT_LIB_EXT1__)
__BEGIN_DECLS
char *gets_s(char *, rsize_t)
    __attribute__((__bounded__(__string__, 1, 2)));
__END_DECLS
#endif /* __STDC_WANT_LIB_EXT1__ */

/* GNU optional */
#if defined(_GNU_SOURCE) && !defined(__STRICT_ANSI__)
__BEGIN_DECLS
ssize_t getline(char **, size_t *, FILE *);
__END_DECLS
#endif

#endif /* _STDIO_H_ */
@


1.12
log
@harmonise tabs inside the files
@
text
@d1 1
a1 1
/**	$MirOS: src/include/stdio.h,v 1.11 2015/02/09 21:46:02 tg Exp $ */
d75 1
a75 1
#define	NULL		0
@


1.11
log
@fix C++ (except G++) definition of NULL; revalidate C/POSIX one
@
text
@d1 1
a1 1
/**	$MirOS: src/include/stdio.h,v 1.10 2014/02/09 16:30:28 tg Exp $ */
d73 1
a73 1
#define	NULL			__null
d75 1
a75 1
#define	NULL			0
d77 1
a77 1
#define	NULL			((void *)((__PTRDIFF_TYPE__)0UL))
d81 1
a81 1
#define	_FSTDIO			/* Define for new stdio with functions. */
d83 1
a83 1
typedef off_t fpos_t;		/* stdio file position type */
@


1.10
log
@add gets_s function, riding on the last minor bump as announced
From: Tomasz Konojacki <me@@xenu.tk>
plus some KNF, bounded attribute, bool, no uninitialised var use
@
text
@d1 1
a1 1
/**	$MirOS: src/include/stdio.h,v 1.9 2014/02/09 16:15:31 tg Exp $ */
d6 1
a6 1
 * Copyright © 2013, 2014
d72 4
a75 4
#ifdef 	__GNUG__
#define	NULL	__null
#elif defined(lint)
#define	NULL	0
d77 1
a77 1
#define	NULL	((void *)((__PTRDIFF_TYPE__)0UL))
@


1.9
log
@implement rsize_t as specified in N1570, inspired by xenu
@
text
@d1 1
a1 1
/**	$MirOS: src/include/stdio.h,v 1.8 2013/10/31 20:06:08 tg Exp $ */
d436 9
@


1.8
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/**	$MirOS: src/include/stdio.h,v 1.7 2010/09/02 16:49:36 tg Exp $ */
d6 1
a6 1
 * Copyright © 2013
d57 8
@


1.7
log
@pcc friendly header
@
text
@d1 1
a1 1
/**	$MirOS: src/include/stdio.h,v 1.6 2006/11/20 23:06:46 tg Exp $ */
d6 2
d226 1
a226 1
		__attribute__((__bounded__ (__string__,1,2)));
d232 1
a232 1
		__attribute__((__bounded__ (__size__,1,3,2)));
d241 1
a241 1
		__attribute__((__bounded__ (__size__,1,3,2)));
d309 2
a310 2
		__attribute__((__format__ (printf, 2, 3)))
		__attribute__((__nonnull__ (2)));
d321 3
a323 3
		__attribute__((__format__ (printf, 3, 4)))
		__attribute__((__nonnull__ (3)))
		__attribute__((__bounded__ (__string__,1,2)));
d325 2
a326 2
		__attribute__((__format__ (printf, 2, 0)))
		__attribute__((__nonnull__ (2)));
d328 3
a330 3
		__attribute__((__format__ (printf, 3, 0)))
		__attribute__((__nonnull__ (3)))
		__attribute__((__bounded__(__string__,1,2)));
d332 2
a333 2
		__attribute__((__format__ (scanf, 1, 0)))
		__attribute__((__nonnull__ (1)));
d335 2
a336 2
		__attribute__((__format__ (scanf, 2, 0)))
		__attribute__((__nonnull__ (2)));
d338 2
a339 2
		__attribute__((__format__ (scanf, 2, 0)))
		__attribute__((__nonnull__ (2)));
@


1.6
log
@fix getline(3) visibility and add a man page stub
@
text
@d1 1
a1 1
/**	$MirOS: src/include/stdio.h,v 1.5 2006/10/02 02:56:58 tg Exp $ */
d370 1
a370 1
		return (*_p->_p++ = _c);
@


1.5
log
@add GNU getline(3), for compatibility reasons, not to be used in
new code, that's why no manual page either
@
text
@d1 1
a1 1
/**	$MirOS: src/include/stdio.h,v 1.4 2005/11/21 19:31:54 tg Exp $ */
d426 1
a426 1
#ifdef _GNU_SOURCE
@


1.4
log
@First round of system include "fixes":
let GCC decide the length of ptrdiff_t, size_t, wchar_t, wint_t
(the first three adapted from gcc fixincludes run[1])
and adapt ssize_t accordingly (untested)
also fix limits

[1] which we don't run during gcc module build tho
@
text
@d1 1
a1 1
/**	$MirOS: src/include/stdio.h,v 1.3 2005/07/25 19:16:10 tg Exp $ */
d42 2
a43 1
#if !defined(_ANSI_SOURCE) && !defined(__STRICT_ANSI__)
d426 6
@


1.3
log
@merge src/include
TODO: wchar stuff
@
text
@d1 1
a1 1
/**	$MirOS: src/include/stdio.h,v 1.2 2005/03/06 19:13:40 tg Exp $ */
d49 3
a51 3
#ifdef	_BSD_SIZE_T_
typedef	_BSD_SIZE_T_	size_t;
#undef	_BSD_SIZE_T_
d66 1
a66 1
#define	NULL	((void *)((_BSD_PTRDIFF_T_)0UL))
@


1.2
log
@merge src/include
@
text
@d1 2
a2 2
/**	$MirOS$ */
/*	$OpenBSD: stdio.h,v 1.30 2004/06/07 21:11:23 marc Exp $	*/
d126 3
a128 2
	/* separate buffer for long sequences of ungetc() */
	struct	__sbuf _ub;	/* ungetc buffer */
d334 3
a339 7
 * This is a #define because the function is used internally and
 * (unlike vfscanf) the name __svfscanf is guaranteed not to collide
 * with a user function when _ANSI_SOURCE or _POSIX_SOURCE is defined.
 */
#define	 vfscanf	__svfscanf

/*
a357 1
int	__svfscanf(FILE *, const char *, _BSD_VA_LIST_);
@


1.1
log
@Initial revision
@
text
@d1 1
d55 1
d63 2
d66 1
a66 1
#define	NULL	0L
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: stdio.h,v 1.32 2005/05/11 18:39:19 espie Exp $	*/
d122 2
a123 3
	/* extension data, to avoid further ABI breakage */
	struct	__sbuf _ext;
	/* data for long sequences of ungetc() */
a328 3
int	 vfscanf(FILE *, const char *, _BSD_VA_LIST_)
		__attribute__((__format__ (scanf, 2, 0)))
		__attribute__((__nonnull__ (2)));
d332 7
d357 1
@

