head	1.13;
access;
symbols
	MIRBSD_10:1.6.0.4
	MIRBSD_10_BASE:1.6
	MIRBSD_9_BASE:1.6
	MIRBSD_8:1.6.0.2
	MIRBSD_8_BASE:1.6
	cvs-200509221800:1.1.1.2
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2019.12.20.15.07.23;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005DFCE3BD245B3AB2;

1.12
date	2017.08.09.10.53.36;	author tg;	state Exp;
branches;
next	1.11;
commitid	100598AE9AA5B8C6B42;

1.11
date	2017.08.08.15.14.44;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005989D5710E59BF98;

1.10
date	2015.02.11.21.42.22;	author tg;	state Exp;
branches;
next	1.9;
commitid	10054DBCCD452D127A7;

1.9
date	2015.02.09.21.50.44;	author tg;	state Exp;
branches;
next	1.8;
commitid	10054D92BCB3E6955C8;

1.8
date	2015.02.09.21.46.02;	author tg;	state Exp;
branches;
next	1.7;
commitid	10054D92AB15D0B8652;

1.7
date	2013.10.31.20.06.09;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005272B7081B0E5655;

1.6
date	2005.11.21.19.44.53;	author tg;	state Exp;
branches;
next	1.5;
commitid	51f3438223c0aee8;

1.5
date	2005.11.21.19.42.08;	author tg;	state Exp;
branches;
next	1.4;
commitid	7db438222fa1265;

1.4
date	2005.11.21.19.31.54;	author tg;	state Exp;
branches;
next	1.3;
commitid	60294382208fe0fe;

1.3
date	2005.07.25.19.16.10;	author tg;	state Exp;
branches;
next	1.2;
commitid	59fb42e53a855a3d;

1.2
date	2005.03.06.19.13.40;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.52.09;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.13
log
@allow some OpenBSD code to build unmodified
@
text
@/**	$MirOS: src/include/unistd.h,v 1.12 2017/08/09 10:53:36 tg Exp $ */
/*	$OpenBSD: unistd.h,v 1.53 2005/05/27 17:45:56 millert Exp $ */
/*	$NetBSD: unistd.h,v 1.26.4.1 1996/05/28 02:31:51 mrg Exp $	*/

/*-
 * Copyright Â© 2013, 2015, 2017, 2019
 *	mirabilos <m@@mirbsd.org>
 * Copyright (c) 1991 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)unistd.h	5.13 (Berkeley) 6/17/91
 */

#ifndef _UNISTD_H_
#define	_UNISTD_H_

#include <sys/cdefs.h>
#include <sys/types.h>
#include <sys/unistd.h>

#define	STDIN_FILENO	0	/* standard input file descriptor */
#define	STDOUT_FILENO	1	/* standard output file descriptor */
#define	STDERR_FILENO	2	/* standard error file descriptor */

#ifndef NULL
#ifdef __GNUG__
#define	NULL		__null
#elif defined(lint) || defined(__cplusplus)
#define	NULL		0UL
#else
#define	NULL		((void *)((__PTRDIFF_TYPE__)0UL))
#endif
#endif

__BEGIN_DECLS
__dead void	 _exit(int);
int	 access(const char *, int);
unsigned int alarm(unsigned int);
int	 chdir(const char *);
int	 chown(const char *, uid_t, gid_t);
int	 close(int);
size_t	 confstr(int, char *, size_t)
		__attribute__((__bounded__(__string__, 2, 3)));
char	*cuserid(char *);
int	 dup(int);
int	 dup2(int, int);
int	 execl(const char *, const char *, ...)
	    __attribute__((__sentinel__));
int	 execle(const char *, const char *, ...);
int	 execlp(const char *, const char *, ...)
	    __attribute__((__sentinel__));
int	 execv(const char *, char * const *);
int	 execve(const char *, char * const *, char * const *);
int	 execvp(const char *, char * const *);
pid_t	 fork(void);
long	 fpathconf(int, int);
char	*getcwd(char *, size_t)
		__attribute__((__bounded__(__string__, 1, 2)))
		__attribute__((__bounded__(__minbytes__, 1, 1024)));
gid_t	 getegid(void);
uid_t	 geteuid(void);
gid_t	 getgid(void);
int	 getgroups(int, gid_t *);
char	*getlogin(void);
int	 getlogin_r(char *, size_t)
		__attribute__((__bounded__(__string__, 1, 2)))
		__attribute__((__bounded__(__minbytes__, 1, 32)));
pid_t	 getpgrp(void);
pid_t	 getpid(void);
pid_t	 getpgid(pid_t);
pid_t	 getppid(void);
pid_t	 getsid(pid_t);
uid_t	 getuid(void);
int	 isatty(int);
int	 link(const char *, const char *);
off_t	 lseek(int, off_t, int);
long	 pathconf(const char *, int);
int	 pause(void);
int	 pipe(int *);
ssize_t	 read(int, void *, size_t)
		__attribute__((__bounded__(__buffer__, 2, 3)));
int	 rmdir(const char *);
int	 setgid(gid_t);
int	 setpgid(pid_t, pid_t);
pid_t	 setsid(void);
int	 setuid(uid_t);
unsigned int sleep(unsigned int);
long	 sysconf(int);
pid_t	 tcgetpgrp(int);
int	 tcsetpgrp(int, pid_t);
char	*ttyname(int);
int	 ttyname_r(int, char *, size_t)
		__attribute__((__bounded__(__string__, 2, 3)));
int	 unlink(const char *);
ssize_t	 write(int, const void *, size_t)
		__attribute__((__bounded__(__buffer__, 2, 3)));

#ifndef	_POSIX_SOURCE

/* structure timeval required for select() */
#include <sys/time.h>

/*
 * X/Open CAE Specification Issue 5 Version 2
 */
#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)) || \
    (_XOPEN_VERSION - 0) >= 500
ssize_t  pread(int, void *, size_t, off_t);
ssize_t  pwrite(int, const void *, size_t, off_t);
#endif

int	 acct(const char *);
int	 brk(void *);
int	 chroot(const char *);
#if !defined(_XOPEN_SOURCE)
int	 closefrom(int);
#endif
char	*crypt(const char *, const char *);
int	 des_cipher(const char *, char *, int32_t, int);
int	 des_setkey(const char *key);
int	 encrypt(char *, int);
void	 endusershell(void);
int	 exect(const char *, char * const *, char * const *);
int	 fchdir(int);
int	 fchown(int, uid_t, gid_t);
char	*fflagstostr(u_int32_t);
int	 fsync(int);
int	 ftruncate(int, off_t);
int	 getdomainname(char *, size_t)
		__attribute__((__bounded__(__string__, 1, 2)));
int	 getdtablesize(void);
int	 getgrouplist(const char *, gid_t, gid_t *, int *);
long	 gethostid(void);
int	 gethostname(char *, size_t)
		__attribute__((__bounded__(__string__, 1, 2)));
mode_t	 getmode(const void *, mode_t);
int	 getpagesize(void);
int	 getresgid(gid_t *, gid_t *, gid_t *);
int	 getresuid(uid_t *, uid_t *, uid_t *);
char	*getpass(const char *);
char	*getusershell(void);
char	*getwd(char *)
		__attribute__((__bounded__(__minbytes__, 1, 1024)));
int	 initgroups(const char *, gid_t);
int	 iruserok(u_int32_t, int, const char *, const char *);
int	 iruserok_sa(const void *, int, int, const char *, const char *);
int	 lchown(const char *, uid_t, gid_t);
int	 nfssvc(int, void *);
int	 nice(int);
void	 psignal(unsigned int, const char *);
extern __const char *__const sys_siglist[];
int	 profil(char *, size_t, unsigned long, unsigned int)
		__attribute__((__bounded__(__string__, 1, 2)));
int	 rcmd(char **, int, const char *,
	    const char *, const char *, int *);
int	 rcmd_af(char **, int, const char *,
	    const char *, const char *, int *, int);
int	 rcmdsh(char **, int, const char *,
	    const char *, const char *, char *);
char	*re_comp(const char *);
int	 re_exec(const char *);
int	 readlink(const char *, char *, size_t)
		__attribute__((__bounded__(__string__, 2, 3)));
int	 reboot(int);
int	 revoke(const char *);
int	 rfork(int opts);
int	 rresvport(int *);
int	 rresvport_af(int *, int);
int	 ruserok(const char *, int, const char *, const char *);
int	 quotactl(const char *, int, int, char *);
void	*sbrk(intptr_t);

#if !defined(_XOPEN_SOURCE)
int	 select(int, fd_set *, fd_set *, fd_set *, struct timeval *);
#endif

int	 setdomainname(const char *, size_t);
int	 setegid(gid_t);
int	 seteuid(uid_t);
int	 setgroups(int, const gid_t *);
int	 sethostid(long);
int	 sethostname(const char *, size_t);
int	 setkey(const char *);
int	 setlogin(const char *);
void	*setmode(const char *);
int	 setpgrp(pid_t pid, pid_t pgrp);	/* obsoleted by setpgid() */
int	 setregid(gid_t, gid_t);
int	 setresgid(gid_t, gid_t, gid_t);
int	 setresuid(uid_t, uid_t, uid_t);
int	 setreuid(uid_t, uid_t);
int	 setrgid(gid_t);
int	 setruid(uid_t);
void	 setusershell(void);
int	 strtofflags(char **, u_int32_t *, u_int32_t *);
void	 swab(const void *, void *, size_t);
int	 swapctl(int cmd, const void *arg, int misc);
int	 symlink(const char *, const char *);
void	 sync(void);
int	 syscall(int, ...);
int	 getentropy(void *, size_t)
		__attribute__((__bounded__(__buffer__, 1, 2)));
int	 truncate(const char *, off_t);
int	 ttyslot(void);
unsigned int	 ualarm(unsigned int, unsigned int);
int	 undelete(const char *);
int	 usleep(useconds_t);
void	*valloc(size_t);		/* obsoleted by malloc() */
pid_t	 vfork(void);
int	 issetugid(void);

#ifndef _GETOPT_DEFINED_
#define _GETOPT_DEFINED_
int	 getopt(int, char * const *, const char *);
extern	 char *optarg;			/* getopt(3) external variables */
extern	 int opterr;
extern	 int optind;
extern	 int optopt;
extern	 int optreset;
int	 getsubopt(char **, char * const *, char **);
extern	 char *suboptarg;		/* getsubopt(3) external variable */
#endif /* _GETOPT_DEFINED_ */
#endif /* !_POSIX_SOURCE */

#if (!defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE) && \
     !defined(_XOPEN_SOURCE)) || \
    (defined(_XOPEN_SOURCE) && _XOPEN_SOURCE_EXTENDED - 0 == 1)
#define F_ULOCK         0
#define F_LOCK          1
#define F_TLOCK         2
#define F_TEST          3
int     lockf(int, int, off_t);
#endif /* (!defined(_POSIX_SOURCE) && !defined(_XOPEN_SOURCE)) || ... */

/* for now */
#if __OPENBSD_VISIBLE
#define pledge(promises,execpromises) (/* CONSTCOND */ 0)
#endif
__END_DECLS

#endif /* !_UNISTD_H_ */
@


1.12
log
@OpenBSD seem to not use their own security-relevant safety netsâ¦
@
text
@d1 1
a1 1
/**	$MirOS: src/include/unistd.h,v 1.10 2015/02/11 21:42:22 tg Exp $ */
d6 1
a6 1
 * Copyright Â© 2013, 2015, 2017
d257 5
@


1.11
log
@flesh out the getentropy syscall, I have a feeling weâll need it eventually
@
text
@d6 2
a7 2
 * Copyright Â© 2013, 2015
 *	Thorsten âmirabilosâ Glaser <tg@@mirbsd.org>
d224 2
a225 1
int	 getentropy(void *, size_t);
@


1.10
log
@nice workaround for C++ brokenness: 0L taken from musl via ycombinator, but it must be unsigned of course, so 0UL
@
text
@d1 1
a1 1
/**	$MirOS: src/include/unistd.h,v 1.9 2015/02/09 21:50:44 tg Exp $ */
d224 1
@


1.9
log
@harmonise tabs inside the files
@
text
@d1 1
a1 1
/**	$MirOS: src/include/unistd.h,v 1.8 2015/02/09 21:46:02 tg Exp $ */
d53 1
a53 1
#define	NULL		0
@


1.8
log
@fix C++ (except G++) definition of NULL; revalidate C/POSIX one
@
text
@d1 1
a1 1
/**	$MirOS: src/include/unistd.h,v 1.7 2013/10/31 20:06:09 tg Exp $ */
d51 1
a51 1
#define	NULL			__null
d53 1
a53 1
#define	NULL			0
d55 1
a55 1
#define	NULL			((void *)((__PTRDIFF_TYPE__)0UL))
@


1.7
log
@adapt most __attribute__((â¦)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/**	$MirOS: src/include/unistd.h,v 1.6 2005/11/21 19:44:53 tg Exp $ */
d6 1
a6 1
 * Copyright Â© 2013
d50 4
a53 4
#ifdef 	__GNUG__
#define	NULL	__null
#elif defined(lint)
#define	NULL	0
d55 1
a55 1
#define	NULL	((void *)((__PTRDIFF_TYPE__)0UL))
@


1.6
log
@damn, I botched.
fix man page too while here, add .Sh STANDARDS
@
text
@d1 1
a1 1
/**	$MirOS: src/include/unistd.h,v 1.5 2005/11/21 19:42:08 tg Exp $ */
d6 2
d67 1
a67 1
		__attribute__((__bounded__(__string__,2,3)));
d72 1
a72 1
	    __attribute__((sentinel));
d75 1
a75 1
	    __attribute__((sentinel));
d82 2
a83 2
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,1,1024)));
d90 2
a91 2
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,1,32)));
d105 1
a105 1
		__attribute__((__bounded__(__buffer__,2,3)));
d117 1
a117 1
		__attribute__((__bounded__(__string__,2,3)));
d120 1
a120 1
		__attribute__((__bounded__(__buffer__,2,3)));
d154 1
a154 1
		__attribute__ ((__bounded__(__string__,1,2)));
d159 1
a159 1
		__attribute__ ((__bounded__(__string__,1,2)));
d167 1
a167 1
		__attribute__ ((__bounded__(__minbytes__,1,1024)));
d177 1
a177 1
		__attribute__ ((__bounded__(__string__,1,2)));
d187 1
a187 1
		__attribute__ ((__bounded__(__string__,2,3)));
@


1.5
log
@fix brk(2) and sbrk(2) protos accordingly to SUSv2 (SUSv3 lists
them as "legacy functions" which were removed for that release)
to increase gcc compatibility

Yes, I know that I've got to fix code for that.
@
text
@d1 1
a1 1
/**	$MirOS: src/include/unistd.h,v 1.4 2005/11/21 19:31:54 tg Exp $ */
d193 1
a193 1
void	 sbrk(intptr_t);
@


1.4
log
@First round of system include "fixes":
let GCC decide the length of ptrdiff_t, size_t, wchar_t, wint_t
(the first three adapted from gcc fixincludes run[1])
and adapt ssize_t accordingly (untested)
also fix limits

[1] which we don't run during gcc module build tho
@
text
@d1 1
a1 1
/**	$MirOS: src/include/unistd.h,v 1.3 2005/07/25 19:16:10 tg Exp $ */
d135 1
a135 1
char	*brk(const char *);
d193 1
a193 1
char	*sbrk(int);
@


1.3
log
@merge src/include
TODO: wchar stuff
@
text
@d1 1
a1 1
/**	$MirOS: src/include/unistd.h,v 1.2 2005/03/06 19:13:40 tg Exp $ */
d53 1
a53 1
#define	NULL	((void *)((_BSD_PTRDIFF_T_)0UL))
@


1.2
log
@merge src/include
@
text
@d1 2
a2 2
/**	$MirOS$ */
/*	$OpenBSD: unistd.h,v 1.52 2004/01/13 18:10:53 millert Exp $ */
a169 4
char	*mkdtemp(char *);
int	 mkstemp(char *);
int	 mkstemps(char *, int);
char	*mktemp(char *);
@


1.1
log
@Initial revision
@
text
@d1 1
d50 2
d53 1
a53 1
#define	NULL	0L
d69 1
a69 1
int	 execl(const char *, const char *, ...) 
d71 2
a72 3
int	 execle(const char *, const char *, ...) 
	    __attribute__((sentinel));
int	 execlp(const char *, const char *, ...) 
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.53 2005/05/27 17:45:56 millert Exp $ */
d168 4
@

