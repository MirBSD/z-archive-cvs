head	1.2;
access;
symbols
	MIRBSD_10:1.1.0.2
	MIRBSD_10_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.10.31.20.06.06;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005272B7081B0E5655;

1.1
date	2007.05.07.16.15.58;	author tg;	state Exp;
branches;
next	;
commitid	100463F507166871BCE;


desc
@@


1.2
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/* $MirOS: src/include/adler32.h,v 1.1 2007/05/07 16:15:58 tg Exp $ */

#ifndef _ADLER32_H
#define _ADLER32_H

#define ADLER32_DIGEST_LENGTH		4
#define ADLER32_DIGEST_STRING_LENGTH	(ADLER32_DIGEST_LENGTH * 2 + 1)

typedef uint32_t ADLER32_CTX;

#define ADLER32_DIGEST_UPPERCASE

#include <sys/cdefs.h>

__BEGIN_DECLS
void ADLER32Init(ADLER32_CTX *);
void ADLER32Update(ADLER32_CTX *, const uint8_t *, size_t)
	__attribute__((__bounded__(__string__, 2, 3)));
void ADLER32Final(uint8_t *, ADLER32_CTX *)
	__attribute__((__bounded__(__minbytes__, 1, ADLER32_DIGEST_LENGTH)));
char *ADLER32End(ADLER32_CTX *, char *)
	__attribute__((__bounded__(__minbytes__, 2, ADLER32_DIGEST_STRING_LENGTH)));
char *ADLER32File(const char *, char *)
	__attribute__((__bounded__(__minbytes__, 2, ADLER32_DIGEST_STRING_LENGTH)));
char *ADLER32FileChunk(const char *, char *, off_t, off_t)
	__attribute__((__bounded__(__minbytes__, 2, ADLER32_DIGEST_STRING_LENGTH)));
char *ADLER32Data(const uint8_t *, size_t, char *)
	__attribute__((__bounded__(__string__, 1, 2)))
	__attribute__((__bounded__(__minbytes__, 3, ADLER32_DIGEST_STRING_LENGTH)));
__END_DECLS

#endif
@


1.1
log
@• make HASH API functions for ADLER32 in libc, too (size-optimised but no asm)
• cross-reference them all in the man pages
@
text
@d1 1
a1 1
/* $MirOS: src/include/suma.h,v 1.1 2007/05/07 15:21:18 tg Exp $ */
d18 1
a18 1
	__attribute__((bounded (string, 2, 3)));
d20 1
a20 1
	__attribute__((bounded (minbytes, 1, ADLER32_DIGEST_LENGTH)));
d22 1
a22 1
	__attribute__((bounded (minbytes, 2, ADLER32_DIGEST_STRING_LENGTH)));
d24 1
a24 1
	__attribute__((bounded (minbytes, 2, ADLER32_DIGEST_STRING_LENGTH)));
d26 1
a26 1
	__attribute__((bounded (minbytes, 2, ADLER32_DIGEST_STRING_LENGTH)));
d28 2
a29 2
	__attribute__((bounded (string, 1, 2)))
	__attribute__((bounded (minbytes, 3, ADLER32_DIGEST_STRING_LENGTH)));
@

