head	1.39;
access;
symbols
	MIRBSD_10:1.18.0.2
	MIRBSD_10_BASE:1.18
	MIRBSD_9_BASE:1.8
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.39
date	2015.01.09.14.26.05;	author tg;	state Exp;
branches;
next	1.38;
commitid	10054AFE4F00FDF3570;

1.38
date	2014.11.30.21.50.23;	author tg;	state Exp;
branches;
next	1.37;
commitid	100547B90F370266570;

1.37
date	2014.03.26.00.13.09;	author tg;	state Exp;
branches;
next	1.36;
commitid	10053321B8B1742C74C;

1.36
date	2014.02.19.16.59.30;	author tg;	state Exp;
branches;
next	1.35;
commitid	1005304E30900931FDD;

1.35
date	2014.02.09.23.19.56;	author tg;	state Exp;
branches;
next	1.34;
commitid	10052F80D3270BFA1BC;

1.34
date	2014.02.09.22.35.51;	author tg;	state Exp;
branches;
next	1.33;
commitid	10052F802DB25EB293D;

1.33
date	2013.10.31.20.06.10;	author tg;	state Exp;
branches;
next	1.32;
commitid	1005272B7081B0E5655;

1.32
date	2009.07.05.13.15.50;	author tg;	state Exp;
branches;
next	1.31;
commitid	1004A50A7970D912AC6;

1.31
date	2008.12.27.20.10.06;	author tg;	state Exp;
branches;
next	1.30;
commitid	10049568B9A5684C8E6;

1.30
date	2008.11.22.14.00.49;	author tg;	state Exp;
branches;
next	1.29;
commitid	1004928108117E0B7FB;

1.29
date	2008.11.22.13.51.09;	author tg;	state Exp;
branches;
next	1.28;
commitid	10049280E475B552D73;

1.28
date	2008.11.22.12.33.25;	author tg;	state Exp;
branches;
next	1.27;
commitid	1004927FC1F2B02A162;

1.27
date	2008.11.22.12.18.21;	author tg;	state Exp;
branches;
next	1.26;
commitid	1004927F89644E4AB15;

1.26
date	2008.11.22.09.02.32;	author tg;	state Exp;
branches;
next	1.25;
commitid	1004927CA84091CE619;

1.25
date	2008.11.22.08.48.58;	author tg;	state Exp;
branches;
next	1.24;
commitid	1004927C78B2CA31EC7;

1.24
date	2008.08.17.00.19.07;	author tg;	state Exp;
branches;
next	1.23;
commitid	10048A76D6E14FD6E0B;

1.23
date	2008.08.16.22.27.10;	author tg;	state Exp;
branches;
next	1.22;
commitid	10048A75445592CF329;

1.22
date	2008.08.01.23.36.46;	author tg;	state Exp;
branches;
next	1.21;
commitid	10048939E210D48B770;

1.21
date	2008.08.01.21.22.55;	author tg;	state Exp;
branches;
next	1.20;
commitid	10048937E6067E56D6C;

1.20
date	2008.08.01.19.10.58;	author tg;	state Exp;
branches;
next	1.19;
commitid	10048935FCF170D0FCC;

1.19
date	2008.03.20.00.16.02;	author tg;	state Exp;
branches;
next	1.18;
commitid	10047E1AAE962CDDA99;

1.18
date	2007.06.16.21.05.13;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004674508F681EFD66;

1.17
date	2007.05.07.13.05.16;	author tg;	state Exp;
branches;
next	1.16;
commitid	100463F23E61B6C1395;

1.16
date	2007.02.07.17.34.05;	author tg;	state Exp;
branches;
next	1.15;
commitid	10045CA0D827925E104;

1.15
date	2007.02.06.23.33.00;	author tg;	state Exp;
branches;
next	1.14;
commitid	10045C90F193C3DFE53;

1.14
date	2007.02.02.21.13.40;	author tg;	state Exp;
branches;
next	1.13;
commitid	10045C3A99B4C9F3554;

1.13
date	2007.02.02.21.06.16;	author tg;	state Exp;
branches;
next	1.12;
commitid	10045C3A79F53A9E808;

1.12
date	2007.02.02.21.03.03;	author tg;	state Exp;
branches;
next	1.11;
commitid	10045C3A70142E7BC88;

1.11
date	2006.11.20.23.50.47;	author tg;	state Exp;
branches;
next	1.10;
commitid	10045623E721D637299;

1.10
date	2006.10.28.18.53.35;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004543A706291334CC;

1.9
date	2006.07.03.16.14.41;	author tg;	state Exp;
branches;
next	1.8;
commitid	10044A942475753D29B;

1.8
date	2006.06.02.12.58.52;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004480361F5ADF3731;

1.7
date	2006.06.01.23.00.41;	author tg;	state Exp;
branches;
next	1.6;
commitid	100447F717560592A14;

1.6
date	2006.05.30.13.36.54;	author tg;	state Exp;
branches;
next	1.5;
commitid	100447C4A5B616D2B00;

1.5
date	2006.05.26.13.52.02;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004477080477AA6B13;

1.4
date	2006.05.09.08.43.17;	author tg;	state Exp;
branches;
next	1.3;
commitid	10044605626513EAEC6;

1.3
date	2005.12.17.05.46.13;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043A3A3E65E20A413;

1.2
date	2005.11.21.19.31.54;	author tg;	state Exp;
branches;
next	1.1;
commitid	60294382208fe0fe;

1.1
date	2005.09.22.19.53.04;	author tg;	state Exp;
branches;
next	;
commitid	c1343330b86894d;


desc
@@


1.39
log
@in cxx, don’t shadow functions with macro bodies; rationale:
http://article.gmane.org/gmane.linux.lib.musl.general/6703
@
text
@/*-
 * Copyright (c) 2007, 2008, 2013, 2014, 2015
 *	Thorsten "mirabilos" Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 *
 * The author reserves the right to steward the OPTU encoding forms.
 */

#ifndef	_WCHAR_H_
#define	_WCHAR_H_ "$MirOS$

#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdio.h>
#include <time.h>

/* ISO/IEC 9899:1999/Cor.3:2007(E) */
#ifdef __STDC_MB_MIGHT_NEQ_WC__
/* we really need wchar_t values to be proper Unicode */
#error You are crazy. Go away.
#endif

#ifndef __IN_MKDEP
/* makedepend may not define the constants we are checking for */
#if __WCHAR_MAX__ != 65535U
#error GCC __WCHAR_MAX__ does not indicate UCS-2
#endif
#ifndef __STDC_ISO_10646__
#error This code assumes that wchar_t is UCS-2HE
#endif
#endif /* !__IN_MKDEP */

#if !defined(_GCC_WCHAR_T) && !defined(__cplusplus)
#define	_GCC_WCHAR_T
typedef	__WCHAR_TYPE__	wchar_t;
#endif

#if !defined(_GCC_WINT_T)
#define	_GCC_WINT_T
typedef	__WINT_TYPE__	wint_t;
#endif

#if !defined(_GCC_MBSTATE_T)
#define	_GCC_MBSTATE_T
typedef struct {
	/*-
	 * 0: initial state
	 * 1: "value" contains one more octet worth of information
	 * 2: "value" contains two more octets worth of information
	 * 3: "value" contains the lower 6 bit of a rejected hibit-7 octet
	 *    (possible future extension to two rejected octets)
	 */
	unsigned int count:2;
	/*-
	 * 10 bits for mbstowcs(3) and optu8to16(3)
	 * 12 bits for wcstombs(3) and optu16to8(3)
	 * 14 bits available in total
	 */
	unsigned int value:12;
} __attribute__((__packed__)) mbstate_t;
#endif

#undef WCHAR_MIN
#define WCHAR_MIN	0
#undef WCHAR_MAX
#define WCHAR_MAX	0xFFFDU
#undef WEOF
#define WEOF		0xFFFFU

typedef unsigned int wctype_t;

__BEGIN_DECLS
wint_t	btowc(int);
wint_t	fgetwc(FILE *);
wchar_t	*fgetws(wchar_t *, int, FILE *);
wint_t	fputwc(wchar_t, FILE *);
int	fputws(const wchar_t *, FILE *);
int	fwide(FILE *, int);
wint_t	getwc(FILE *);
wint_t	getwchar(void);
size_t	mbrlen(const char *, size_t, mbstate_t *);
size_t	mbrtowc(wchar_t *, const char *, size_t, mbstate_t *)
    __attribute__((__bounded__(__string__, 2, 3)));
int	mbsinit(const mbstate_t *);
size_t	mbslen(const char *);
#if __OPENBSD_VISIBLE
size_t	mbsnrtowcs(wchar_t *, const char **, size_t, size_t, mbstate_t *);
#endif
size_t	mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);
#if __OPENBSD_VISIBLE
#undef optu16to8
#define optu16to8 optu16to8
size_t	optu16to8(char *, wchar_t, mbstate_t *)
    __attribute__((__bounded__(__minbytes__, 1, MB_CUR_MAX)));
#undef optu8to16
#define optu8to16 optu8to16
size_t	optu8to16(wchar_t *, const char *, size_t, mbstate_t *)
    __attribute__((__bounded__(__string__, 2, 3)));
#endif
wint_t	putwc(wchar_t, FILE *);
wint_t	putwchar(wchar_t);
wint_t	ungetwc(wint_t, FILE *);
size_t	wcrtomb(char *, wchar_t, mbstate_t *)
    __attribute__((__bounded__(__minbytes__, 1, MB_CUR_MAX)));
int	wcscasecmp(const wchar_t *, const wchar_t *);
wchar_t	*wcscat(wchar_t *, const wchar_t *);
wchar_t	*wcschr(const wchar_t *, wchar_t);
int	wcscmp(const wchar_t *, const wchar_t *);
int	wcscoll(const wchar_t *, const wchar_t *);
wchar_t	*wcscpy(wchar_t *, const wchar_t *);
size_t	wcscspn(const wchar_t *, const wchar_t *);
wchar_t *wcsdup(const wchar_t *);
size_t	wcsftime(wchar_t *, size_t, const wchar_t *, const struct tm *);
size_t	wcslcat(wchar_t *, const wchar_t *, size_t);
size_t	wcslcpy(wchar_t *, const wchar_t *, size_t);
size_t	wcslen(const wchar_t *);
int	wcsncasecmp(const wchar_t *, const wchar_t *, size_t);
wchar_t	*wcsncat(wchar_t *, const wchar_t *, size_t);
int	wcsncmp(const wchar_t *, const wchar_t *, size_t);
wchar_t	*wcsncpy(wchar_t *, const wchar_t *, size_t);
#if __OPENBSD_VISIBLE
/*wchar_t *wcsndup(const wchar_t *, size_t);*/
size_t	wcsnrtombs(char *, const wchar_t **, size_t, size_t, mbstate_t *);
#endif
wchar_t	*wcspbrk(const wchar_t *, const wchar_t *);
wchar_t	*wcsrchr(const wchar_t *, wchar_t);
size_t	wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
size_t	wcsspn(const wchar_t *, const wchar_t *);
wchar_t	*wcsstr(const wchar_t *, const wchar_t *);
double	wcstod(const wchar_t *, wchar_t **);
float	wcstof(const wchar_t *, wchar_t **);
wchar_t	*wcstok(wchar_t *, const wchar_t *, wchar_t **);
long	wcstol(const wchar_t *, wchar_t **, int);
#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)) || \
    defined(_ISOC99_SOURCE) || (__STDC_VERSION__ - 0) > 199901L
/* LONGLONG */
long long wcstoll(const wchar_t *, wchar_t **, int);
#endif
unsigned long wcstoul(const wchar_t *, wchar_t **, int);
#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)) || \
    defined(_ISOC99_SOURCE) || (__STDC_VERSION__ - 0) > 199901L
/* LONGLONG */
unsigned long long wcstoull(const wchar_t *, wchar_t **, int);
#endif
wchar_t	*wcswcs(const wchar_t *, const wchar_t *);
int	wcswidth(const wchar_t *, size_t);
size_t	wcsxfrm(wchar_t *, const wchar_t *, size_t);
int	wctob(wint_t);
wctype_t wctype(const char *);
int	wcwidth(wchar_t);
wchar_t	*wmemchr(const wchar_t *, wchar_t, size_t);
int	wmemcmp(const wchar_t *, const wchar_t *, size_t);
wchar_t	*wmemcpy(wchar_t *, const wchar_t *, size_t);
wchar_t	*wmemmove(wchar_t *, const wchar_t *, size_t);
wchar_t	*wmemset(wchar_t *, wchar_t, size_t);

/* these functions are currently not implemented in libc */
#if 0
int	fwprintf(FILE *, const wchar_t *, ...);
int	fwscanf(FILE *, const wchar_t *, ...);
int	swprintf(wchar_t *, size_t, const wchar_t *, ...);
int	swscanf(const wchar_t *, const wchar_t *, ...);
int	vfwprintf(FILE *, const wchar_t *, _BSD_VA_LIST_);
int	vfwscanf(FILE *, const wchar_t *, _BSD_VA_LIST_);
int	vswprintf(wchar_t *, const wchar_t *, _BSD_VA_LIST_);
int	vswscanf(const wchar_t *, const wchar_t *, _BSD_VA_LIST_);
int	vwprintf(const wchar_t *, _BSD_VA_LIST_);
int	vwscanf(const wchar_t *, _BSD_VA_LIST_);
int	wprintf(const wchar_t *, ...);
int	wscanf(const wchar_t *, ...);
#endif
__END_DECLS

#if !defined(__cplusplus)
#define getwc(f)	fgetwc(f)
#define getwchar()	getwc(stdin)
#define putwc(wc, f)	fputwc((wc), (f))
#define putwchar(wc)	putwc((wc), stdout)
#endif /* !__cplusplus */

#if __OPENBSD_VISIBLE && !defined(iswoctet)
#define iswoctet(wc)	(((wchar_t)(wc) & 0xFF80) == 0xEF80)
#endif

#ifdef __GNUC__
#if !defined(__cplusplus)
#define btowc(c)	__extension__({			\
	wint_t __WC_tmp = (c);				\
							\
	(__WC_tmp > 0x7F ? WEOF : __WC_tmp);		\
})
#define mblen(s,n)	__extension__({			\
	mbstate_t __WC_ps = { 0, 0 };			\
	int __WC_rv;					\
							\
	(((__WC_rv = mbrtowc(NULL, (s), (n),		\
	    &__WC_ps)) < 0) ? -1 : __WC_rv);		\
})
#define mbsinit(c)	__extension__({			\
	const mbstate_t *__WC_ps = (c);			\
							\
	(__WC_ps == NULL ? -1 :				\
	    __WC_ps->count == 0 ? 1 : 0);		\
})
#define mbslen(c)	__extension__({			\
	const uint8_t *__WC_s = (c);			\
	size_t __WC_num = 0;				\
							\
	while (*__WC_s) {				\
		if ((*__WC_s & 0xC0) != 0x80)		\
			++__WC_num;			\
		++__WC_s;				\
	}						\
	(__WC_num);					\
})
#define mbstowcs(pwcs,s,n)	__extension__({		\
	mbstate_t __WC_ps = { 0, 0 };			\
	const char *__WC_sb = (s);			\
							\
	(mbsrtowcs((pwcs), &__WC_sb, (n), &__WC_ps));	\
})
#define mbtowc(pwc,s,n)		__extension__({		\
	mbstate_t __WC_ps = { 0, 0 };			\
	int __WC_rv;					\
							\
	(((__WC_rv = mbrtowc((pwc), (s), (n),		\
	    &__WC_ps)) < 0) ? -1 : __WC_rv);		\
})
#define wcstombs(s,pwcs,n)	__extension__({		\
	mbstate_t __WC_ps = { 0, 0 };			\
	const wchar_t *__WC_sb = (pwcs);		\
							\
	(wcsrtombs((s), &__WC_sb, (n), &__WC_ps));	\
})
#define wcswidth(s,n)	__extension__({			\
	int __WC_width = 0, __WC_i, __WC_n = (n);	\
	const wchar_t *__WC_s = (s);			\
							\
	while (__WC_n--) {				\
		if (*__WC_s == L'\0')			\
			break;				\
		if ((__WC_i = wcwidth(*__WC_s))	< 0) {	\
			__WC_width = -1;		\
			break;				\
		}					\
		__WC_width += __WC_i;			\
		__WC_s++;				\
	}						\
	(__WC_width);					\
})
#define wctob(c)	__extension__({			\
	wint_t __WC_tmp = (c);				\
							\
	(__WC_tmp > 0x7F ? EOF : (int)__WC_tmp);	\
})
#define wctomb(s,c)	__extension__({			\
	mbstate_t __WC_ps = { 0, 0 };			\
	char *__WC_s = (s);				\
							\
	(__WC_s ? wcrtomb(__WC_s, (c), &__WC_ps) : 0);	\
})
#endif /* !__cplusplus */

/* roll back the middle char of a mis-done 3-byte mb->wc conversion */
#define mbrtowc_rollback(ps)	__extension__({		\
	const mbstate_t *__WC_s = (ps);			\
	int __WC_rv = EOF;				\
							\
	if (__WC_s->count == 1 &&			\
	    __WC_s->value >= 0x20)			\
		__WC_rv = 0x80 |			\
		    (__WC_s->value & 0x3F);		\
	(__WC_rv);					\
})
#endif

/* initialise/set/reset a mbstate_t to empty */
#define mbsreset(ps)	do {				\
	mbstate_t *__WC_s = (ps);			\
							\
	if (__WC_s != NULL)				\
		__WC_s->count = 0;			\
} while (0)

#endif
@


1.38
log
@there is no evidence of a wcsndup(3) in the wild, plus it would now
need a wcsnlen(3), which also does not exist, even here, so nuke it
@
text
@a0 2
/* $MirOS: src/include/wchar.h,v 1.37 2014/03/26 00:13:09 tg Exp $ */

d2 2
a3 2
 * Copyright (c) 2007, 2008, 2013, 2014
 *	Thorsten Glaser <tg@@mirbsd.de>
d24 1
a24 1
#define	_WCHAR_H_
d191 1
d196 1
@


1.37
log
@benz says xerces-c does weird things in CFrustFrust
so all users of CFrustFrust lose (the optimised macro versions) now
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.36 2014/02/19 16:59:30 tg Exp $ */
d141 1
a141 1
wchar_t *wcsndup(const wchar_t *, size_t);
@


1.36
log
@move some of our custom functions from libc to libmbfun (preparing a libc major bump); drop plan9-like rune functions
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.35 2014/02/09 23:19:56 tg Exp $ */
d203 1
d279 2
@


1.35
log
@“long double” in MirBSD (i386 and sparc, both) is currently just plain wrong and will lead to bad results; fix the code if needed
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.34 2014/02/09 22:35:51 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2007, 2008, 2013
a106 3
#undef mbsnrtowcsvis
#define mbsnrtowcsvis mbsnrtowcsvis
size_t	mbsnrtowcsvis(wchar_t *, const char **, size_t, size_t, mbstate_t *);
a117 4
#undef optu8to16vis
#define optu8to16vis optu8to16vis
size_t	optu8to16vis(wchar_t *, const char *, size_t, mbstate_t *)
    __attribute__((__bounded__(__string__, 2, 3)));
a199 9
wchar_t *ambsntowcs(const char *, size_t)
    __attribute__((__nonnull__(1)))
    __attribute__((__bounded__(__string__, 1, 2)));
wchar_t *ambstowcs(const char *)
    __attribute__((__nonnull__(1)));
char *awcsntombs(const wchar_t *, size_t)
    __attribute__((__nonnull__(1)));
char *awcstombs(const wchar_t *)
    __attribute__((__nonnull__(1)));
@


1.34
log
@nuke the restrict qualifiers; C99 says this makes no externally visible difference and is only a compiler hint and a limitation to the interface implementor
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.33 2013/10/31 20:06:10 tg Exp $ */
a159 1
long double wcstold(const wchar_t *, wchar_t **);
@


1.33
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.32 2009/07/05 13:15:50 tg Exp $ */
d94 1
a94 1
wchar_t	*fgetws(wchar_t *__restrict__, int, FILE *__restrict__);
d96 1
a96 1
int	fputws(const wchar_t *__restrict__, FILE *__restrict__);
d100 2
a101 3
size_t	mbrlen(const char *__restrict__, size_t, mbstate_t *__restrict__);
size_t	mbrtowc(wchar_t *__restrict__, const char *__restrict__, size_t,
    mbstate_t *__restrict__)
d106 1
a106 2
size_t	mbsnrtowcs(wchar_t *__restrict__, const char **__restrict__,
    size_t, size_t, mbstate_t *__restrict__);
d109 1
a109 2
size_t	mbsnrtowcsvis(wchar_t *__restrict__, const char **__restrict__,
    size_t, size_t, mbstate_t *__restrict__);
d111 1
a111 2
size_t	mbsrtowcs(wchar_t *__restrict__, const char **__restrict__, size_t,
    mbstate_t *__restrict__);
d115 1
a115 1
size_t	optu16to8(char *__restrict__, wchar_t, mbstate_t *__restrict__)
d119 1
a119 2
size_t	optu8to16(wchar_t *__restrict__, const char *__restrict__, size_t,
    mbstate_t *__restrict__)
d123 1
a123 2
size_t	optu8to16vis(wchar_t *__restrict__, const char *__restrict__, size_t,
    mbstate_t *__restrict__)
d129 1
a129 1
size_t	wcrtomb(char *__restrict__, wchar_t, mbstate_t *__restrict__)
d132 1
a132 1
wchar_t	*wcscat(wchar_t *__restrict__, const wchar_t *__restrict__);
d136 1
a136 1
wchar_t	*wcscpy(wchar_t *__restrict__, const wchar_t *__restrict__);
d139 1
a139 2
size_t	wcsftime(wchar_t *__restrict__, size_t, const wchar_t *__restrict__,
    const struct tm *__restrict__);
d144 1
a144 1
wchar_t	*wcsncat(wchar_t *__restrict__, const wchar_t *__restrict__, size_t);
d146 1
a146 1
wchar_t	*wcsncpy(wchar_t *__restrict__, const wchar_t *__restrict__, size_t);
d149 1
a149 2
size_t	wcsnrtombs(char *__restrict__, const wchar_t **__restrict__,
    size_t, size_t, mbstate_t *__restrict__);
d153 1
a153 2
size_t	wcsrtombs(char *__restrict__, const wchar_t **__restrict__, size_t,
    mbstate_t *__restrict__);
d155 6
a160 7
wchar_t	*wcsstr(const wchar_t *__restrict__, const wchar_t *__restrict__);
double	wcstod(const wchar_t *__restrict__, wchar_t **__restrict__);
float	wcstof(const wchar_t *__restrict__, wchar_t **__restrict__);
wchar_t	*wcstok(wchar_t *__restrict__, const wchar_t *__restrict__,
    wchar_t **__restrict__);
long	wcstol(const wchar_t *__restrict__, wchar_t **__restrict__, int);
long double wcstold(const wchar_t *__restrict__, wchar_t **__restrict__);
d164 1
a164 1
long long wcstoll(const wchar_t *__restrict__, wchar_t **__restrict__, int);
d166 1
a166 2
unsigned long wcstoul(const wchar_t *__restrict__, wchar_t **__restrict__,
    int);
d170 1
a170 2
unsigned long long wcstoull(const wchar_t *__restrict__,
    wchar_t **__restrict__, int);
d174 1
a174 1
size_t	wcsxfrm(wchar_t *__restrict__, const wchar_t *__restrict__, size_t);
d180 1
a180 1
wchar_t	*wmemcpy(wchar_t *__restrict__, const wchar_t *__restrict__, size_t);
d186 12
a197 17
int	fwprintf(FILE * __restrict__, const wchar_t * __restrict__, ...);
int	fwscanf(FILE *__restrict__, const wchar_t *__restrict__, ...);
int	swprintf(wchar_t * __restrict__, size_t, const wchar_t * __restrict__,
    ...);
int	swscanf(const wchar_t *__restrict__, const wchar_t *__restrict__, ...);
int	vfwprintf(FILE * __restrict__, const wchar_t * __restrict__,
    _BSD_VA_LIST_);
int	vfwscanf(FILE *__restrict__, const wchar_t *__restrict__,
    _BSD_VA_LIST_);
int	vswprintf(wchar_t * __restrict__, const wchar_t * __restrict__,
    _BSD_VA_LIST_);
int	vswscanf(const wchar_t *__restrict__, const wchar_t *__restrict__,
    _BSD_VA_LIST_);
int	vwprintf(const wchar_t * __restrict__, _BSD_VA_LIST_);
int	vwscanf(const wchar_t *__restrict__, _BSD_VA_LIST_);
int	wprintf(const wchar_t * __restrict__, ...);
int	wscanf(const wchar_t *__restrict__, ...);
@


1.32
log
@from the C99 TC3 (2007)
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.31 2008/12/27 20:10:06 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2007, 2008
d79 1
a79 1
} __attribute__((packed)) mbstate_t;
d103 1
a103 1
    __attribute__((bounded (string, 2, 3)));
d120 1
a120 1
    __attribute__((bounded (minbytes, 1, MB_CUR_MAX)));
d125 1
a125 1
    __attribute__((bounded (string, 2, 3)));
d130 1
a130 1
    __attribute__((bounded (string, 2, 3)));
d136 1
a136 1
    __attribute__((bounded (minbytes, 1, MB_CUR_MAX)));
d226 2
a227 1
    __attribute__((nonnull (1), bounded (string, 1, 2)));
d229 1
a229 1
    __attribute__((nonnull (1)));
d231 1
a231 1
    __attribute__((nonnull (1)));
d233 1
a233 1
    __attribute__((nonnull (1)));
@


1.31
log
@merge
.Ox
and pimp the
.Xr style 9
.Pq KNF .
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.30 2008/11/22 14:00:49 tg Exp $ */
d36 6
@


1.30
log
@• add the awcstombs(3) to match the ambstowcs(3)
  and the awcsntombs(3) to match the ambsntowcs(3)
• fix ambsntowcs(3) NUL- and awcsntombs(3) WNUL-termination of output
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.29 2008/11/22 13:51:09 tg Exp $ */
d96 2
a97 2
	    mbstate_t *__restrict__)
	    __attribute__((bounded (string, 2, 3)));
d102 1
a102 1
	    size_t, size_t, mbstate_t *__restrict__);
d106 1
a106 1
	    size_t, size_t, mbstate_t *__restrict__);
d109 1
a109 1
	    mbstate_t *__restrict__);
d114 1
a114 1
	    __attribute__((bounded (minbytes, 1, MB_CUR_MAX)));
d118 2
a119 2
	    mbstate_t *__restrict__)
	    __attribute__((bounded (string, 2, 3)));
d123 2
a124 2
	    mbstate_t *__restrict__)
	    __attribute__((bounded (string, 2, 3)));
d130 1
a130 1
	    __attribute__((bounded (minbytes, 1, MB_CUR_MAX)));
d140 1
a140 1
	    const struct tm *__restrict__);
d151 1
a151 1
	    size_t, size_t, mbstate_t *__restrict__);
d156 1
a156 1
	    mbstate_t *__restrict__);
d162 1
a162 1
	    wchar_t **__restrict__);
d171 1
a171 1
	    int);
d176 1
a176 1
	    wchar_t **__restrict__, int);
d195 1
a195 1
	    ...);
d198 1
a198 1
	    _BSD_VA_LIST_);
d200 1
a200 1
	    _BSD_VA_LIST_);
d202 1
a202 1
	    _BSD_VA_LIST_);
d204 1
a204 1
	    _BSD_VA_LIST_);
@


1.29
log
@when going to add local extensions to libc anyway (#if __OPENBSD_VISIBLE),
simplify the rest too; since we bump the minor today anyway, add it now…
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.28 2008/11/22 12:33:25 tg Exp $ */
d223 4
@


1.28
log
@share iswoctet() to kern/c/optu16to8.c
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.27 2008/11/22 12:18:21 tg Exp $ */
d219 4
@


1.27
log
@while I do not quite like the use of tabulators here, unify with time.c &c.
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.26 2008/11/22 09:02:32 tg Exp $ */
d217 1
a217 1
#if __OPENBSD_VISIBLE
@


1.26
log
@new macro: iswoctet(3)

use of this macro also fixes a bug in optu8to16vis(3) which could
errorneously map 0xFF80…0xFFFF wide characters to raw octets
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.25 2008/11/22 08:48:58 tg Exp $ */
d47 2
a48 2
#define _GCC_WCHAR_T
typedef __WCHAR_TYPE__ wchar_t;
d52 2
a53 2
#define _GCC_WINT_T
typedef __WINT_TYPE__ wint_t;
d57 1
a57 1
#define _GCC_MBSTATE_T
@


1.25
log
@unify the definitions in these files
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.24 2008/08/17 00:19:07 tg Exp $ */
d217 4
@


1.24
log
@extended conversion functions: “forgiving” variants of mbrtowc¹ and
mbsnrtowcs² encoding raw octets as if they were from codepage 1252,
or ISO-8859-1, into Unicode, instead of the PUA OPTU-16 range.

① called optu8to16vis with semantics of optu8to16
② called mbsnrtowcsvis with semantics of mbsnrtowcs

Note: mbtowc, mbstowcs and mbsrtowcs can be emulated by calling
mbrtowc(vis) and mbsnrtowcs(vis), respectively, with appropriate
arguments. The semantics have been chosen to not exactly match
the standard since the extensions are reasonably easy to use and
granted since these functions are not standardised anyway.
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.23 2008/08/16 22:27:10 tg Exp $ */
a35 12
#ifndef __LIBCKERN_H_

#if !defined(_GCC_WCHAR_T) && !defined(__cplusplus)
#define	_GCC_WCHAR_T
typedef	__WCHAR_TYPE__	wchar_t;
#endif

#if !defined(_GCC_WINT_T)
#define	_GCC_WINT_T
typedef	__WINT_TYPE__	wint_t;
#endif

d46 12
d74 1
d77 1
a77 1
#define	WCHAR_MIN		0
d79 1
a79 1
#define	WCHAR_MAX		0xFFFDU
d81 1
a81 3
#define	WEOF			0xFFFFU

#endif /* !__LIBCKERN_H_ */
@


1.23
log
@add defines for our own wide char functions, to rid autohell

agreed bsiegert@@
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.22 2008/08/01 23:36:46 tg Exp $ */
d104 4
d121 5
@


1.22
log
@protos and bounds check
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.21 2008/08/01 21:22:55 tg Exp $ */
d108 2
d112 2
@


1.21
log
@first step at implementing the MirOS OPTU (Octet Pass-Through for UCS) en-
coding, as drafted in http://thread.gmane.org/gmane.os.miros.general/7938,
with the PUA assignment U+EF80‥U+EFFF registered at CSUR
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.20 2008/08/01 19:10:58 tg Exp $ */
d97 2
a98 1
	    mbstate_t *__restrict__);
d107 7
d117 2
a118 1
size_t	wcrtomb(char *__restrict__, wchar_t, mbstate_t *__restrict__);
@


1.20
log
@make these not stomp onto each others' feet better
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.19 2008/03/20 00:16:02 tg Exp $ */
d21 2
d63 2
a64 1
	 * 3: "value" is a magic state value, used internally
d68 3
a70 2
	 * 10 bits for mbstowcs(3)
	 * 12 bits for wcstombs(3)
d232 1
a232 1
#define mbtowc(pwc,s,n)	__extension__({			\
a271 7
/* initialise/set/reset a mbstate_t to empty */
#define mbsreset(ps)	do {				\
	mbstate_t *__WC_s = (ps);			\
							\
	if (__WC_s != NULL)				\
		__WC_s->count = 0;			\
} while (0)
d285 8
@


1.19
log
@document mbstate_t a little; reserve count==3 value for magic
cf. http://article.gmane.org/gmane.os.miros.general/7938

possible values (we have 12 (in theory 14) bits):
• emit 0xF85F, 0xF85E next
• emit 0xF85F, 0xF85F next
• emit 0xF85E next
• emit 0xF85F next
• emit 0x0000..007F next (needs 7 bit of space)
• emit 0xF820..F89F next (needs 7 bit of space)
• emit 0xF820..0xF85F, 0x0000..0x007F next (needs 13 bit of space)
• emit 0xF820..0xF85F, 0xF860..0xF89F next (needs 13 bit of space)
some of these are redundant… need to think more about it
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.18 2007/06/16 21:05:13 tg Exp $ */
d34 2
a55 1
typedef unsigned int wctype_t;
d78 4
@


1.18
log
@optimise strndup(3) and introduce wcsndup(3), agreed bsiegert@@
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.17 2007/05/07 13:05:16 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2007
d56 6
d63 5
a67 1
	unsigned int value:12;	/* 10 for mbstowcs, 12 for wcstombs */
@


1.17
log
@for __extension__({ type macros, the internal variable names MUST NOT match
anything that could ever be passed as argument, and the arguments SHALL NOT
be used when we already copy them to an internal variable

also fix some indenting

this was cause for segfault in bash-2.05b libglob xmbsrtowcs
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.16 2007/02/07 17:34:05 tg Exp $ */
d109 1
@


1.16
log
@now that we have actual code in <wchar.h>, move and consolidate
some of the consistency checks (i.e. these that make sure that
our code is only used on wchar_t=UCS-2HE systems)
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.15 2007/02/06 23:33:00 tg Exp $ */
d179 1
d185 1
d190 4
a193 2
	const mbstate_t *ps = (c);			\
	((ps == NULL) ? -1 : ps->count == 0 ? 1 : 0);	\
d198 1
d209 1
d215 1
d222 1
d228 1
d243 1
d249 1
d253 6
a258 5
#define mbsreset(ps)	do {			\
		mbstate_t *__WC_s = (ps);	\
		if (ps != NULL)			\
			ps->count = 0;		\
	} while (0)
d261 9
a269 8
		const mbstate_t *__WC_s = (ps);		\
		int __WC_rv = EOF;			\
		if (__WC_s->count == 1 &&		\
		    __WC_s->value >= 0x20)		\
			__WC_rv = 0x80 |		\
			    (__WC_s->value & 0x3F);	\
		(__WC_rv);				\
	})
@


1.15
log
@new macros:
* void mbsreset(mbstate_t *ps);
  resets the mbstate_t (as if it was bzero(3)d)
* int mbrtowc_rollback(const mbstate_t *ps);
  ☠ if 'ps' does not contain a valid state created by mbrtowc(3),
    e.g. uninitialised or from wcrtomb(3), the result is undefined☠
  - if 'ps' contains the multibyte conversion state created from
    converting two bytes to a wide character which are valid
    leading bytes from a three-byte multibyte sequence, the
    second (middle) byte is returned
  - otherwise, EOF (not WEOF) is returned
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.14 2007/02/02 21:13:40 tg Exp $ */
d44 3
a46 2
/* makedepend may not define __WCHAR_MAX__ */
#if defined(__WCHAR_MAX__) && (__WCHAR_MAX__ != 65535U)
d49 4
@


1.14
log
@whitespace
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.20 2006/12/11 21:04:56 tg Rel $ */
d236 16
@


1.13
log
@switch to a one-locale system; "the" locale is UTF-8 encoded 'C' now;
inline many simpler functions for reduced code size / imports / speed
and optimise a little - XXX untested
@
text
@d55 1
a55 3
#undef	WCHAR_MIN
#undef	WCHAR_MAX
#undef	WEOF
d57 1
d59 1
d153 2
a154 1
int	vfwscanf(FILE *__restrict__, const wchar_t *__restrict__, _BSD_VA_LIST_);
d166 4
a169 4
#define getwc(f) fgetwc(f)
#define getwchar() getwc(stdin)
#define putwc(wc, f) fputwc((wc), (f))
#define putwchar(wc) putwc((wc), stdout)
d177 1
a177 1
	mbstate_t __WC_state = { 0, 0 };		\
d180 1
a180 1
	    &__WC_state)) < 0) ? -1 : __WC_rv);		\
d202 1
a202 1
	mbstate_t __WC_state = { 0, 0 };		\
d205 1
a205 1
	    &__WC_state)) < 0) ? -1 : __WC_rv);		\
d226 1
a226 1
})		
@


1.12
log
@unsigned int for wctype_t is enough, don't need unsigned long
saves and ABI change on LP64 arches, which we don't have ATM…
@
text
@d1 21
a21 1
/* $MirOS: src/include/wchar.h,v 1.11 2006/11/20 23:50:47 tg Exp $ */
d76 1
a76 1
#if __OPENBSD_VISIBLE || (defined(_GNU_SOURCE) && !defined(__STRICT_ANSI__))
d103 1
a103 1
#if __OPENBSD_VISIBLE || (defined(_GNU_SOURCE) && !defined(__STRICT_ANSI__))
d170 67
@


1.11
log
@implement mbsnrtowcs(3) and wcsnrtombs(3) - including manual pages

these are only visible if any of
	_GNU_SOURCE and not __STRICT_ANSI__ (gcc -ansi)
	(_OPENBSD_SOURCE or _NETBSD_SOURCE) and none of (_ANSI_SOURCE,
	    XPG and POSIX stuff) and not __STRICT_ANSI__ (gcc -ansi)
	_ALL_SOURCE and not __STRICT_ANSI__ (gcc -ansi)
are defined, since they're GNU (and MirOS) extensions
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.10 2006/10/28 18:53:35 tg Exp $ */
d29 1
a29 1
typedef unsigned long int wctype_t;
@


1.10
log
@makedepend may not define __WCHAR_MAX__, only test its value if it's
defined (and if it isn't defined, you get compile errors later anyway,
but we ought to force the errors better - but then, "typedef __WCHAR_TYPE__
 wchar_t;" is pretty much forcing them anyway)
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.9 2006/07/03 16:14:41 tg Exp $ */
d56 4
d83 4
@


1.9
log
@GNU fileutils internally uses an
int mbsnwidth (const char *string, size_t nbytes, int flags);

remove our libc-internal mbswidth() because implementors
"usually" do want to roll their own - e.g. to cope with
invalid characters in multibyte sequences their own way.
keep it in Attic/ for reference tho.

bump libc major
sorry guys
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.8 2006/06/02 12:58:52 tg Exp $ */
d24 2
a25 1
#if __WCHAR_MAX__ != 65535U
@


1.8
log
@enable the new functions
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.7 2006/06/01 23:00:41 tg Exp $ */
a56 1
int	mbswidth(const char *, size_t);
@


1.7
log
@bump libc version; fix includes; bump os patchlevel
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.16 2006/06/01 21:28:41 tg Exp $ */
d54 1
d57 1
d70 2
a86 1
#if 0
a88 1
#endif
@


1.6
log
@pull in commitid 100447C48A27321B52B and 100447C42C43F1C198A
@
text
@d1 1
a1 26
/* $MirOS: src/include/wchar.h,v 1.5 2006/05/26 13:52:02 tg Exp $ */

/*-
 * Copyright (c) 2005, 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a nontrivial bug.
 */
a47 4
#ifdef notyet
int	fwprintf(FILE * __restrict__, const wchar_t * __restrict__, ...);
int	fwscanf(FILE *__restrict__, const wchar_t *__restrict__, ...);
#endif
a49 1
#ifdef notyet
a50 1
#endif
a53 1
#ifdef notyet
a55 1
#endif
a57 5
#ifdef notyet
int	swprintf(wchar_t * __restrict__, size_t, const wchar_t * __restrict__,
	    ...);
int	swscanf(const wchar_t *__restrict__, const wchar_t *__restrict__, ...);
#endif
a58 11
#ifdef notyet
int	vfwprintf(FILE * __restrict__, const wchar_t * __restrict__,
	    _BSD_VA_LIST_);
int	vfwscanf(FILE *__restrict__, const wchar_t *__restrict__, _BSD_VA_LIST_);
int	vswprintf(wchar_t * __restrict__, const wchar_t * __restrict__,
	    _BSD_VA_LIST_);
int	vswscanf(const wchar_t *__restrict__, const wchar_t *__restrict__,
	    _BSD_VA_LIST_);
int	vwprintf(const wchar_t * __restrict__, _BSD_VA_LIST_);
int	vwscanf(const wchar_t *__restrict__, _BSD_VA_LIST_);
#endif
d60 1
a63 1
#ifdef notyet
a64 1
#endif
d67 1
a67 4
#ifdef notyet
size_t	wcsftime(wchar_t *__restrict__, size_t, const wchar_t *__restrict__,
	    const struct tm *__restrict__);
#endif
d71 1
a76 1
#ifdef notyet
a78 1
#endif
a80 1
#ifdef notyet
d83 1
d86 1
a88 1
#endif
a90 1
#ifdef notyet
a92 1
#endif /* notyet */
a93 1
#ifdef notyet
a95 1
#endif /* notyet */
a97 1
#ifdef notyet
a100 1
#endif /* notyet */
a102 1
#ifdef notyet
a104 1
#endif
a105 1
#ifdef notyet
a107 1
#endif
d113 17
a129 1
#ifdef notyet
@


1.5
log
@move mbsinit(3) into libc from libhaible;
it's written by myself and thus miros licenced
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.2 2006/05/23 10:39:45 tg Exp $ */
d134 1
a135 1
wchar_t	*wcsstr(const wchar_t *__restrict__, const wchar_t *__restrict__);
a147 2
#ifdef notyet
#endif /* notyet */
d162 1
a163 1
wchar_t	*wcswcs(const wchar_t *, const wchar_t *);
@


1.4
log
@put everything we do *not* have in libc yet
in between "#ifdef notyet".."#endif"

candidate for MFC
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.7 2006/04/09 22:08:49 tg Rel $ */
d84 1
a85 1
int	mbsinit(const mbstate_t *);
@


1.3
log
@big fat licence update (I left some which are bsiegert@@'s alone though)
also, remove licence boilerplate from some .h files who don't deserve it
and remove and add some advertising clauses because I say so
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.2 2005/11/21 19:31:54 tg Exp $ */
d4 2
a5 2
 * Copyright (c) 2005
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
d73 1
d76 1
d79 1
d81 1
d84 1
d88 1
d91 1
d95 1
d97 1
d107 1
d112 1
d114 1
d117 1
d120 1
d129 1
d132 1
d134 1
d142 1
d145 1
d148 3
d152 1
d155 1
d158 1
d162 1
d164 1
d168 1
d170 1
d173 1
d179 1
d182 1
@


1.2
log
@First round of system include "fixes":
let GCC decide the length of ptrdiff_t, size_t, wchar_t, wint_t
(the first three adapted from gcc fixincludes run[1])
and adapt ssize_t accordingly (untested)
also fix limits

[1] which we don't run during gcc module build tho
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.1 2005/09/22 19:53:04 tg Exp $ */
d18 8
a25 7
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of this work, even if advised of the possibility of such damage.
@


1.1
log
@first attempt at merging internationalisation frameworks
(Citrix, Bruno Haible's libutf8, SUSv3, my own) into MirOS

The API should(tm) match POSIX, but has no __attribute__
checks (nonnull, format, ...) yet
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.2 2005/03/03 19:43:30 tg Rel $ */
d38 3
a40 4
#ifdef	_BSD_WCHAR_T_
/* in C++, wchar_t is a built-in type */
#ifndef __cplusplus
typedef	_BSD_WCHAR_T_	wchar_t;
d42 4
a45 1
#undef	_BSD_WCHAR_T_
d48 2
a49 3
#ifdef	_BSD_WINT_T_
typedef	_BSD_WINT_T_	wint_t;
#undef	_BSD_WINT_T_
@

