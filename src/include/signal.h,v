head	1.6;
access;
symbols
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200509221800:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2008.12.10.20.08.39;	author tg;	state Exp;
branches;
next	1.5;
commitid	100494021D5394A95DE;

1.5
date	2008.11.11.22.13.50;	author tg;	state Exp;
branches;
next	1.4;
commitid	100491A039075562413;

1.4
date	2008.11.10.18.36.27;	author tg;	state Exp;
branches;
next	1.3;
commitid	10049187F3462150E94;

1.3
date	2008.11.09.20.13.38;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004917447127E12B36;

1.2
date	2008.09.04.08.40.02;	author tg;	state Exp;
branches;
next	1.1;
commitid	10048BF9ED2738764F5;

1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@errno vs kernel vs inline issues
@
text
@/**	$MirOS: src/include/signal.h,v 1.5 2008/11/11 22:13:50 tg Exp $ */
/*	$OpenBSD: signal.h,v 1.8 2004/05/03 17:25:00 millert Exp $	*/
/*	$NetBSD: signal.h,v 1.8 1996/02/29 00:04:57 jtc Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)signal.h	8.3 (Berkeley) 3/30/94
 */

#ifndef _USER_SIGNAL_H
#define _USER_SIGNAL_H

#include <sys/signal.h>

#if !defined(_ANSI_SOURCE)
#include <sys/types.h>
#endif

#if !defined(_ANSI_SOURCE) && !defined(_POSIX_SOURCE)
extern __const char *__const sys_signame[_NSIG];
extern __const char *__const sys_siglist[_NSIG];
#endif

__BEGIN_DECLS
int	raise(int);
#ifndef	_ANSI_SOURCE
void	(*bsd_signal(int, void (*)(int)))(int);
int	kill(pid_t, int);
int	sigaction(int, const struct sigaction *, struct sigaction *);
int	sigaddset(sigset_t *, int);
int	sigdelset(sigset_t *, int);
int	sigemptyset(sigset_t *);
int	sigfillset(sigset_t *);
int	sigismember(const sigset_t *, int);
int	sigpending(sigset_t *);
int	sigprocmask(int, const sigset_t *, sigset_t *);
int	sigsuspend(const sigset_t *);

#if defined(__GNUC__) && !defined(_SYS_ERRNO_H_KERNEL) && \
    (!defined(__clang__) || (__STDC_VERSION__ < 199901L))

#  if  defined(__GNUC_STDC_INLINE__)
#define __SIGNAL_INLINE	extern __inline __attribute((__gnu_inline__))
#  else
#define __SIGNAL_INLINE	extern __inline
#  endif

#if !defined(errno) && !defined(_STANDALONE)
#include <sys/errno.h>
#endif

__SIGNAL_INLINE int sigaddset(sigset_t *set, int signo) {
	if (signo <= 0 || signo >= _NSIG) {
		errno = 22;			/* EINVAL */
		return -1;
	}
	*set |= (1 << ((signo)-1));		/* sigmask(signo) */
	return (0);
}

__SIGNAL_INLINE int sigdelset(sigset_t *set, int signo) {
	if (signo <= 0 || signo >= _NSIG) {
		errno = 22;			/* EINVAL */
		return -1;
	}
	*set &= ~(1 << ((signo)-1));		/* sigmask(signo) */
	return (0);
}

__SIGNAL_INLINE int sigismember(const sigset_t *set, int signo) {
	if (signo <= 0 || signo >= _NSIG) {
		errno = 22;			/* EINVAL */
		return -1;
	}
	return ((*set & (1 << ((signo)-1))) != 0);
}
#endif

/* List definitions after function declarations, or Reiser cpp gets upset. */
#define sigemptyset(set)	((int)(*(set) = 0))
#define sigfillset(set)		((int)~(*(set) = ~(sigset_t)0))

#ifndef _POSIX_SOURCE
int	killpg(pid_t, int);
int	sigblock(int);
int	siginterrupt(int, int);
int	sigpause(int);
int	sigreturn(struct sigcontext *);
int	sigsetmask(int);
int	sigstack(const struct sigstack *, struct sigstack *);
int	sigaltstack(const struct sigaltstack *, struct sigaltstack *);
int	sigvec(int, struct sigvec *, struct sigvec *);
void	psignal(unsigned int, const char *);
int	sigwait(const sigset_t *, int *);
#endif	/* !_POSIX_SOURCE */
#endif	/* !_ANSI_SOURCE */
__END_DECLS

#endif	/* !_USER_SIGNAL_H */
@


1.5
log
@if using LLVM+Clang in ISO C99 mode, disallow the inlines, because I can’t
figure out a way to make traditional gnu89 “extern inline” work with it
(simply “inline” doesn’t quite cut it, at least in clang)
@
text
@d1 1
a1 1
/**	$MirOS: src/include/signal.h,v 1.4 2008/11/10 18:36:27 tg Exp $ */
d65 2
a66 1
#if defined(__GNUC__) && (!defined(__clang__) || (__STDC_VERSION__ < 199901L))
@


1.4
log
@pull part of OpenBSD-current dealing with gcc4 stdc inline
@
text
@d1 1
a1 1
/**	$MirOS: src/include/signal.h,v 1.3 2008/11/09 20:13:38 tg Exp $ */
d65 1
a65 1
#if defined(__GNUC__)
@


1.3
log
@fix declaration abuse (even local-scoped declarations are globally
visible), fixing part of clang
@
text
@d1 1
a1 1
/**	$MirOS: src/include/signal.h,v 1.2 2008/09/04 08:40:02 tg Exp $ */
d67 6
d77 1
a77 1
extern __inline int sigaddset(sigset_t *set, int signo) {
d86 1
a86 1
extern __inline int sigdelset(sigset_t *set, int signo) {
d95 1
a95 1
extern __inline int sigismember(const sigset_t *set, int signo) {
@


1.2
log
@use definitions for inlined functions which do not trigger g++ warnings

discovered when compiling (the fdik version of) mico
@
text
@d1 1
a1 1
/**	$MirOS$ */
d66 5
a71 2
	extern int errno;

a80 2
	extern int errno;

a89 2
	extern int errno;

@


1.1
log
@Initial revision
@
text
@d1 1
d100 2
a101 2
#define	sigemptyset(set)	(*(set) = 0, 0)
#define	sigfillset(set)		(*(set) = ~(sigset_t)0, 0)
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
