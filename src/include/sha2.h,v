head	1.5;
access;
symbols
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200509221800:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.07.18.21.12.42;	author tg;	state Exp;
branches;
next	1.4;
commitid	10055AAC1543E595A8E;

1.4
date	2014.03.05.20.12.51;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005317855B6EE817CD;

1.3
date	2014.03.05.14.07.26;	author tg;	state Exp;
branches;
next	1.2;
commitid	10053172F8E30AE4681;

1.2
date	2013.10.31.20.06.08;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005272B7081B0E5655;

1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@SHA2 for OpenSSL, the easy part
@
text
@/*	$MirOS: src/include/sha2.h,v 1.4 2014/03/05 20:12:51 tg Exp $ */
/*	$OpenBSD: sha2.h,v 1.6 2004/06/22 01:57:30 jfb Exp $	*/

/*
 * FILE:	sha2.h
 * AUTHOR:	Aaron D. Gifford <me@@aarongifford.com>
 * 
 * Copyright © 2013, 2015
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 2000-2001, Aaron D. Gifford
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTOR(S) ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTOR(S) BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $From: sha2.h,v 1.1 2001/11/08 00:02:01 adg Exp adg $
 */

#ifndef _SHA2_H
#define _SHA2_H


/*** SHA-256/384/512 Various Length Definitions ***********************/
#define SHA256_BLOCK_LENGTH		64
#define SHA256_DIGEST_LENGTH		32
#define SHA256_DIGEST_STRING_LENGTH	(SHA256_DIGEST_LENGTH * 2 + 1)
#define SHA384_BLOCK_LENGTH		128
#define SHA384_DIGEST_LENGTH		48
#define SHA384_DIGEST_STRING_LENGTH	(SHA384_DIGEST_LENGTH * 2 + 1)
#define SHA512_BLOCK_LENGTH		128
#define SHA512_DIGEST_LENGTH		64
#define SHA512_DIGEST_STRING_LENGTH	(SHA512_DIGEST_LENGTH * 2 + 1)


/*** SHA-256/384/512 Context Structures *******************************/
typedef struct SHA256state_st {
	u_int32_t	state[8];
	u_int64_t	bitcount;
	u_int8_t	buffer[SHA256_BLOCK_LENGTH];
} SHA256_CTX;
typedef struct SHA512state_st {
	u_int64_t	state[8];
	u_int64_t	bitcount[2];
	u_int8_t	buffer[SHA512_BLOCK_LENGTH];
} SHA512_CTX;

typedef SHA512_CTX SHA384_CTX;

#include <sys/cdefs.h>

__BEGIN_DECLS
int SHA256_Init(SHA256_CTX *);
void SHA256_Transform(void *, const unsigned char *)
	__attribute__((__bounded__(__minbytes__, 1, 32)))
	__attribute__((__bounded__(__minbytes__, 2, SHA256_BLOCK_LENGTH)));
int SHA256_Update(SHA256_CTX *, const void *, size_t)
	__attribute__((__bounded__(__string__, 2, 3)));
void SHA256_Pad(SHA256_CTX *);
int SHA256_Final(unsigned char *, SHA256_CTX *)
	__attribute__((__bounded__(__minbytes__, 1, SHA256_DIGEST_LENGTH)));
char *SHA256_End(SHA256_CTX *, char *)
	__attribute__((__bounded__(__minbytes__, 2, SHA256_DIGEST_STRING_LENGTH)));
char *SHA256_File(const char *, char *)
	__attribute__((__bounded__(__minbytes__, 2, SHA256_DIGEST_STRING_LENGTH)));
char *SHA256_FileChunk(const char *, char *, off_t, off_t)
	__attribute__((__bounded__(__minbytes__, 2, SHA256_DIGEST_STRING_LENGTH)));
char *SHA256_Data(const u_int8_t *, size_t, char *)
	__attribute__((__bounded__(__string__, 1, 2)))
	__attribute__((__bounded__(__minbytes__, 3, SHA256_DIGEST_STRING_LENGTH)));

int SHA384_Init(SHA384_CTX *);
void SHA384_Transform(void *, const unsigned char *)
	__attribute__((__bounded__(__minbytes__, 1, 64)))
	__attribute__((__bounded__(__minbytes__, 2, SHA384_BLOCK_LENGTH)));
int SHA384_Update(SHA384_CTX *, const void *, size_t)
	__attribute__((__bounded__(__string__, 2, 3)));
void SHA384_Pad(SHA384_CTX *);
int SHA384_Final(unsigned char *, SHA384_CTX *)
	__attribute__((__bounded__(__minbytes__, 1, SHA384_DIGEST_LENGTH)));
char *SHA384_End(SHA384_CTX *, char *)
	__attribute__((__bounded__(__minbytes__, 2, SHA384_DIGEST_STRING_LENGTH)));
char *SHA384_File(const char *, char *)
	__attribute__((__bounded__(__minbytes__, 2, SHA384_DIGEST_STRING_LENGTH)));
char *SHA384_FileChunk(const char *, char *, off_t, off_t)
	__attribute__((__bounded__(__minbytes__, 2, SHA384_DIGEST_STRING_LENGTH)));
char *SHA384_Data(const u_int8_t *, size_t, char *)
	__attribute__((__bounded__(__string__, 1, 2)))
	__attribute__((__bounded__(__minbytes__, 3, SHA384_DIGEST_STRING_LENGTH)));

int SHA512_Init(SHA512_CTX *);
void SHA512_Transform(void *, const unsigned char *)
	__attribute__((__bounded__(__minbytes__, 1, 64)))
	__attribute__((__bounded__(__minbytes__, 2, SHA512_BLOCK_LENGTH)));
int SHA512_Update(SHA512_CTX *, const void *, size_t)
	__attribute__((__bounded__(__string__, 2, 3)));
void SHA512_Pad(SHA512_CTX *);
int SHA512_Final(unsigned char *, SHA512_CTX *)
	__attribute__((__bounded__(__minbytes__, 1, SHA512_DIGEST_LENGTH)));
char *SHA512_End(SHA512_CTX *, char *)
	__attribute__((__bounded__(__minbytes__, 2, SHA512_DIGEST_STRING_LENGTH)));
char *SHA512_File(const char *, char *)
	__attribute__((__bounded__(__minbytes__, 2, SHA512_DIGEST_STRING_LENGTH)));
char *SHA512_FileChunk(const char *, char *, off_t, off_t)
	__attribute__((__bounded__(__minbytes__, 2, SHA512_DIGEST_STRING_LENGTH)));
char *SHA512_Data(const u_int8_t *, size_t, char *)
	__attribute__((__bounded__(__string__, 1, 2)))
	__attribute__((__bounded__(__minbytes__, 3, SHA512_DIGEST_STRING_LENGTH)));
__END_DECLS

#endif /* _SHA2_H */
@


1.4
log
@fix
@
text
@d1 1
a1 1
/*	$MirOS: src/include/sha2.h,v 1.3 2014/03/05 14:07:26 tg Exp $ */
d8 1
a8 1
 * Copyright © 2013
d57 1
a57 1
typedef struct _SHA256_CTX {
d62 1
a62 1
typedef struct _SHA512_CTX {
d73 2
a74 2
void SHA256_Init(SHA256_CTX *);
void SHA256_Transform(u_int32_t *, const u_int8_t *)
d77 1
a77 1
void SHA256_Update(SHA256_CTX *, const u_int8_t *, size_t)
d80 1
a80 1
void SHA256_Final(u_int8_t *, SHA256_CTX *)
d92 2
a93 2
void SHA384_Init(SHA384_CTX *);
void SHA384_Transform(u_int64_t *, const u_int8_t *)
d96 1
a96 1
void SHA384_Update(SHA384_CTX *, const u_int8_t *, size_t)
d99 1
a99 1
void SHA384_Final(u_int8_t *, SHA384_CTX *)
d111 2
a112 2
void SHA512_Init(SHA512_CTX *);
void SHA512_Transform(u_int64_t *, const u_int8_t *)
d115 1
a115 1
void SHA512_Update(SHA512_CTX *, const u_int8_t *, size_t)
d118 1
a118 1
void SHA512_Final(u_int8_t *, SHA512_CTX *)
@


1.3
log
@more http://www.tedunangst.com/flak/post/how-to-screw-up-crypto-the-easy-way
fixing in headers (need to rid this from the corresponding *.c files, too!)

also, bonus, fix some bounded attributes and add some more (WTF!)
@
text
@d1 1
a1 1
/*	$MirOS: src/include/sha2.h,v 1.2 2013/10/31 20:06:08 tg Exp $ */
d112 1
a112 1
void SHA512_Transform(u_int64_t *, const u_int8_t)
@


1.2
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/*	$MirOS$ */
d74 3
a76 1
void SHA256_Transform(u_int32_t state[8], const u_int8_t [SHA256_BLOCK_LENGTH]);
d80 1
a80 1
void SHA256_Final(u_int8_t [SHA256_DIGEST_LENGTH], SHA256_CTX *)
d93 3
a95 1
void SHA384_Transform(u_int64_t state[8], const u_int8_t [SHA384_BLOCK_LENGTH]);
d99 1
a99 1
void SHA384_Final(u_int8_t [SHA384_DIGEST_LENGTH], SHA384_CTX *)
d112 3
a114 1
void SHA512_Transform(u_int64_t state[8], const u_int8_t [SHA512_BLOCK_LENGTH]);
d118 1
a118 1
void SHA512_Final(u_int8_t [SHA512_DIGEST_LENGTH], SHA512_CTX *)
@


1.1
log
@Initial revision
@
text
@d1 1
d8 2
d76 1
a76 1
	__attribute__((__bounded__(__string__,2,3)));
d79 1
a79 1
	__attribute__((__bounded__(__minbytes__,1,SHA256_DIGEST_LENGTH)));
d81 1
a81 1
	__attribute__((__bounded__(__minbytes__,2,SHA256_DIGEST_STRING_LENGTH)));
d83 1
a83 1
	__attribute__((__bounded__(__minbytes__,2,SHA256_DIGEST_STRING_LENGTH)));
d85 1
a85 1
	__attribute__((__bounded__(__minbytes__,2,SHA256_DIGEST_STRING_LENGTH)));
d87 2
a88 2
	__attribute__((__bounded__(__string__,1,2)))
	__attribute__((__bounded__(__minbytes__,3,SHA256_DIGEST_STRING_LENGTH)));
d93 1
a93 1
	__attribute__((__bounded__(__string__,2,3)));
d96 1
a96 1
	__attribute__((__bounded__(__minbytes__,1,SHA384_DIGEST_LENGTH)));
d98 1
a98 1
	__attribute__((__bounded__(__minbytes__,2,SHA384_DIGEST_STRING_LENGTH)));
d100 1
a100 1
	__attribute__((__bounded__(__minbytes__,2,SHA384_DIGEST_STRING_LENGTH)));
d102 1
a102 1
	__attribute__((__bounded__(__minbytes__,2,SHA384_DIGEST_STRING_LENGTH)));
d104 2
a105 2
	__attribute__((__bounded__(__string__,1,2)))
	__attribute__((__bounded__(__minbytes__,3,SHA384_DIGEST_STRING_LENGTH)));
d110 1
a110 1
	__attribute__((__bounded__(__string__,2,3)));
d113 1
a113 1
	__attribute__((__bounded__(__minbytes__,1,SHA512_DIGEST_LENGTH)));
d115 1
a115 1
	__attribute__((__bounded__(__minbytes__,2,SHA512_DIGEST_STRING_LENGTH)));
d117 1
a117 1
	__attribute__((__bounded__(__minbytes__,2,SHA512_DIGEST_STRING_LENGTH)));
d119 1
a119 1
	__attribute__((__bounded__(__minbytes__,2,SHA512_DIGEST_STRING_LENGTH)));
d121 2
a122 2
	__attribute__((__bounded__(__string__,1,2)))
	__attribute__((__bounded__(__minbytes__,3,SHA512_DIGEST_STRING_LENGTH)));
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
