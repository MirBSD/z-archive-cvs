head	1.2;
access;
symbols
	MIRBSD_10:1.1.0.2
	MIRBSD_10_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.10.31.20.06.09;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005272B7081B0E5655;

1.1
date	2007.05.07.15.21.18;	author tg;	state Exp;
branches;
next	;
commitid	100463F43D3067E6553;


desc
@@


1.2
log
@adapt most __attribute__((â€¦)) occurrences to new KNF style(9)
@
text
@/* $MirOS: src/include/suma.h,v 1.1 2007/05/07 15:21:18 tg Exp $ */

#ifndef _SUMA_H
#define _SUMA_H

#define SUMA_DIGEST_LENGTH		4
#define SUMA_DIGEST_STRING_LENGTH	(SUMA_DIGEST_LENGTH * 2 + 1)

typedef uint32_t SUMA_CTX;

#define SUMA_DIGEST_UPPERCASE

#include <sys/cdefs.h>

__BEGIN_DECLS
void SUMAInit(SUMA_CTX *);
void SUMAPad(SUMA_CTX *);
void SUMAUpdate(SUMA_CTX *, const uint8_t *, size_t)
	__attribute__((__bounded__(__string__, 2, 3)));
void SUMAFinal(uint8_t *, SUMA_CTX *)
	__attribute__((__bounded__(__minbytes__, 1, SUMA_DIGEST_LENGTH)));
char *SUMAEnd(SUMA_CTX *, char *)
	__attribute__((__bounded__(__minbytes__, 2, SUMA_DIGEST_STRING_LENGTH)));
char *SUMAFile(const char *, char *)
	__attribute__((__bounded__(__minbytes__, 2, SUMA_DIGEST_STRING_LENGTH)));
char *SUMAFileChunk(const char *, char *, off_t, off_t)
	__attribute__((__bounded__(__minbytes__, 2, SUMA_DIGEST_STRING_LENGTH)));
char *SUMAData(const uint8_t *, size_t, char *)
	__attribute__((__bounded__(__string__, 1, 2)))
	__attribute__((__bounded__(__minbytes__, 3, SUMA_DIGEST_STRING_LENGTH)));
__END_DECLS

#endif
@


1.1
log
@add suma and sfv hashes in the standard format, too
(can't do adler32 that easily for now, later; sum/cksum/sysvsum differ, never)
@
text
@d1 1
a1 1
/* $MirOS: src/include/tiger.h,v 1.1 2006/09/17 19:28:58 tg Exp $ */
d19 1
a19 1
	__attribute__((bounded (string, 2, 3)));
d21 1
a21 1
	__attribute__((bounded (minbytes, 1, SUMA_DIGEST_LENGTH)));
d23 1
a23 1
	__attribute__((bounded (minbytes, 2, SUMA_DIGEST_STRING_LENGTH)));
d25 1
a25 1
	__attribute__((bounded (minbytes, 2, SUMA_DIGEST_STRING_LENGTH)));
d27 1
a27 1
	__attribute__((bounded (minbytes, 2, SUMA_DIGEST_STRING_LENGTH)));
d29 2
a30 2
	__attribute__((bounded (string, 1, 2)))
	__attribute__((bounded (minbytes, 3, SUMA_DIGEST_STRING_LENGTH)));
@

