head	1.3;
access;
symbols
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200509221800:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.11.30.02.45.32;	author tg;	state Exp;
branches;
next	1.2;
commitid	100547A84C870A75856;

1.2
date	2014.11.30.01.43.36;	author tg;	state Exp;
branches;
next	1.1;
commitid	100547A7660366E6E2E;

1.1
date	2005.02.05.17.24.33;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.33;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@use faster call for CAST, it does help

this also adds explicit_bzero and timingsafe_{b,mem}cmp to libc API
@
text
@/*	$MirOS: src/include/cast.h,v 1.2 2014/11/30 01:43:36 tg Exp $ */
/*      $OpenBSD: cast.h,v 1.2 1998/07/21 22:42:01 provos Exp $       */
/*
 *	CAST-128 in C
 *	Written by Steve Reid <sreid@@sea-to-sky.net>
 *	100% Public Domain - no warranty
 *	Released 1997.10.11
 */

#ifndef _CAST_H_
#define _CAST_H_

typedef struct {
	u_int32_t xkey[32];	/* Key, after expansion */
	int rounds;		/* Number of rounds to use, 12 or 16 */
} cast_key;

void cast_setkey(cast_key* key, const u_int8_t* rawkey, int keybytes);
void cast_encrypt(const cast_key* key, u_int8_t* inblock, u_int8_t* outblock);
void cast_decrypt(const cast_key* key, u_int8_t* inblock, u_int8_t* outblock);

void cast_encrypt2(const cast_key* key, u_int32_t *data);
void cast_decrypt2(const cast_key* key, u_int32_t *data);

#endif /* ifndef _CAST_H_ */

@


1.2
log
@const
@
text
@d1 1
a1 1
/*	$MirOS$ */
d19 5
a23 2
void cast_encrypt(cast_key* key, u_int8_t* inblock, u_int8_t* outblock);
void cast_decrypt(cast_key* key, u_int8_t* inblock, u_int8_t* outblock);
@


1.1
log
@Initial revision
@
text
@d1 1
d18 1
a18 1
void cast_setkey(cast_key* key, u_int8_t* rawkey, int keybytes);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
