head	1.3;
access;
symbols
	MIRBSD_10:1.2.0.4
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	cvs-200509221800:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2011.11.20.18.54.43;	author tg;	state dead;
branches;
next	1.2;
commitid	1004EC94CC144CEC290;

1.2
date	2005.03.06.19.13.40;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@• use common <syskern/md5.h> with /usr/include/md5.h@@ for userspace compat
• switch kernel <crypto/md5.h> users to <syskern/md5.h>
• fix underestimated __attribute__((__bounded__ …)) argument
• this is an interface definition and as such not copyrightable
@
text
@/**	$MirOS: src/include/md5.h,v 1.2 2005/03/06 19:13:40 tg Exp $ */
/*	$OpenBSD: md5.h,v 1.16 2004/06/22 01:57:30 jfb Exp $	*/

#ifndef _MD5_H_
#define _MD5_H_

#define	MD5_BLOCK_LENGTH		64
#define	MD5_DIGEST_LENGTH		16
#define	MD5_DIGEST_STRING_LENGTH	(MD5_DIGEST_LENGTH * 2 + 1)

typedef struct MD5Context {
	u_int32_t state[4];
	u_int64_t count;
	u_int8_t  buffer[MD5_BLOCK_LENGTH];
} MD5_CTX;

#include <sys/cdefs.h>

__BEGIN_DECLS
/* low-level MD5 functions from md5c.c */
void	MD5Init(MD5_CTX *);
void	MD5Update(MD5_CTX *, const u_int8_t *, size_t)
		__attribute__((__bounded__(__string__,2,3)));
void	MD5Pad(MD5_CTX *);
void	MD5Final(u_int8_t [MD5_DIGEST_LENGTH], MD5_CTX *)
		__attribute__((__bounded__(__minbytes__,1,MD5_DIGEST_LENGTH)));
void	MD5Transform(u_int32_t [4], const u_int8_t [MD5_BLOCK_LENGTH])
		__attribute__((__bounded__(__minbytes__,1,4)))
		__attribute__((__bounded__(__minbytes__,2,MD5_BLOCK_LENGTH)));

/* high-level functions from mdXhl.c */
char   *MD5End(MD5_CTX *, char *)
		__attribute__((__bounded__(__minbytes__,2,MD5_DIGEST_STRING_LENGTH)));
char   *MD5File(const char *, char *)
		__attribute__((__bounded__(__minbytes__,2,MD5_DIGEST_STRING_LENGTH)));
char   *MD5FileChunk(const char *, char *, off_t, off_t)
		__attribute__((__bounded__(__minbytes__,2,MD5_DIGEST_STRING_LENGTH)));
char   *MD5Data(const u_int8_t *, size_t, char *)
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,3,MD5_DIGEST_STRING_LENGTH)));
__END_DECLS

#endif	/* _MD5_H_ */
@


1.2
log
@merge src/include
@
text
@d1 1
a1 1
/**	$MirOS$ */
@


1.1
log
@Initial revision
@
text
@d1 1
a3 12
/*
 * This code implements the MD5 message-digest algorithm.
 * The algorithm is due to Ron Rivest.  This code was
 * written by Colin Plumb in 1993, no copyright is claimed.
 * This code is in the public domain; do with it what you wish.
 *
 * Equivalent code is available from RSA Data Security, Inc.
 * This code has been tested against that, and is equivalent,
 * except that you don't need to include two pages of legalese
 * with every copy.
 */

d12 3
a14 3
	u_int32_t state[4];			/* state */
	u_int64_t count;			/* number of bits, mod 2^64 */
	u_int8_t buffer[MD5_BLOCK_LENGTH];	/* input buffer */
d20 3
a22 2
void	 MD5Init(MD5_CTX *);
void	 MD5Update(MD5_CTX *, const u_int8_t *, size_t)
d24 2
a25 2
void	 MD5Pad(MD5_CTX *);
void	 MD5Final(u_int8_t [MD5_DIGEST_LENGTH], MD5_CTX *)
d27 1
a27 1
void	 MD5Transform(u_int32_t [4], const u_int8_t [MD5_BLOCK_LENGTH])
d30 3
a32 1
char	*MD5End(MD5_CTX *, char *)
d34 1
a34 1
char	*MD5File(const char *, char *)
d36 1
a36 1
char	*MD5FileChunk(const char *, char *, off_t, off_t)
d38 1
a38 1
char	*MD5Data(const u_int8_t *, size_t, char *)
d43 1
a43 1
#endif /* _MD5_H_ */
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
