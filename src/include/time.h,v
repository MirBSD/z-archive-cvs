head	1.15;
access;
symbols
	MIRBSD_10:1.8.0.2
	MIRBSD_10_BASE:1.8
	MIRBSD_9_BASE:1.5
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200509221800:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.02.11.21.42.22;	author tg;	state Exp;
branches;
next	1.14;
commitid	10054DBCCD452D127A7;

1.14
date	2015.02.09.21.50.44;	author tg;	state Exp;
branches;
next	1.13;
commitid	10054D92BCB3E6955C8;

1.13
date	2015.02.09.21.46.02;	author tg;	state Exp;
branches;
next	1.12;
commitid	10054D92AB15D0B8652;

1.12
date	2014.02.09.16.15.32;	author tg;	state Exp;
branches;
next	1.11;
commitid	10052F7A9B12873E47B;

1.11
date	2013.10.31.20.06.09;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005272B7081B0E5655;

1.10
date	2011.11.20.04.57.09;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004EC8880406A80564;

1.9
date	2008.12.10.21.37.39;	author tg;	state Exp;
branches;
next	1.8;
commitid	100494036B572379ACF;

1.8
date	2007.02.07.20.43.21;	author tg;	state Exp;
branches;
next	1.7;
commitid	10045CA39907FBE4A06;

1.7
date	2007.02.07.18.55.55;	author tg;	state Exp;
branches;
next	1.6;
commitid	10045CA20BA562C680A;

1.6
date	2006.12.11.23.54.57;	author tg;	state Exp;
branches;
next	1.5;
commitid	100457DEFC626A6A05C;

1.5
date	2006.06.12.21.46.33;	author tg;	state Exp;
branches;
next	1.4;
commitid	100448DE0CD1D056578;

1.4
date	2006.06.12.21.41.32;	author tg;	state Exp;
branches;
next	1.3;
commitid	100448DDF9F541EF8CF;

1.3
date	2005.11.21.19.31.54;	author tg;	state Exp;
branches;
next	1.2;
commitid	60294382208fe0fe;

1.2
date	2005.03.06.17.16.58;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.24.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.15
log
@nice workaround for C++ brokenness: 0L taken from musl via ycombinator, but it must be unsigned of course, so 0UL
@
text
@/**	$MirOS: src/include/time.h,v 1.14 2015/02/09 21:50:44 tg Exp $ */
/*	$OpenBSD: time.h,v 1.16 2003/08/01 17:38:33 avsm Exp $	*/
/*	$NetBSD: time.h,v 1.9 1994/10/26 00:56:35 cgd Exp $	*/

/*
 * Copyright © 2013, 2014, 2015
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)time.h	5.12 (Berkeley) 3/9/91
 */

#ifndef _TIME_H_
#define	_TIME_H_

#include <machine/types.h>
#include <machine/ansi.h>
#include <syskern/mirtime.h>

#ifndef NULL
#ifdef __GNUG__
#define	NULL		__null
#elif defined(lint) || defined(__cplusplus)
#define	NULL		0UL
#else
#define	NULL		((void *)((__PTRDIFF_TYPE__)0UL))
#endif
#endif

#ifdef	_BSD_CLOCK_T_
typedef	_BSD_CLOCK_T_	clock_t;
#undef	_BSD_CLOCK_T_
#endif

#if !defined(_GCC_SIZE_T)
#define	_GCC_SIZE_T
typedef	__SIZE_TYPE__	size_t;
#endif

/* C11 optional */
#if !defined(__STDC_WANT_LIB_EXT1__) || (__STDC_WANT_LIB_EXT1__)
#ifndef rsize_t
#define rsize_t		rsize_t
typedef size_t		rsize_t;
#endif
#endif /* __STDC_WANT_LIB_EXT1__ */

#define CLOCKS_PER_SEC	100

__BEGIN_DECLS
#ifndef _ANSI_LIBRARY
struct timespec;
#endif
char *asctime(const struct tm *);
clock_t clock(void);
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *);
size_t strftime(char *, size_t, const char *, const struct tm *)
		__attribute__((__bounded__(__string__, 1, 2)));
char *strptime(const char *, const char *, struct tm *);
time_t time(time_t *);
char *asctime_r(const struct tm *, char *)
		__attribute__((__bounded__(__minbytes__, 2, 26)));
char *ctime_r(const time_t *, char *)
		__attribute__((__bounded__(__minbytes__, 2, 26)));
struct tm *gmtime_r(const time_t *, struct tm *);
struct tm *localtime_r(const time_t *, struct tm *);
#ifndef _ANSI_LIBRARY
int nanosleep(const struct timespec *, struct timespec *);
#endif

#if !defined(_ANSI_SOURCE)
#define CLK_TCK		100
extern char *tzname[2];
void tzset(void);
#endif /* not ANSI */

#if !defined(_ANSI_SOURCE) && !defined(_POSIX_SOURCE)
char *timezone(int, int);
void tzsetwall(void);
time_t timelocal(struct tm *);
time_t timegm(struct tm *);
time_t timeoff(struct tm *, const long);
#endif /* neither ANSI nor POSIX */
__END_DECLS

#endif /* !_TIME_H_ */
@


1.14
log
@harmonise tabs inside the files
@
text
@d1 1
a1 1
/**	$MirOS: src/include/time.h,v 1.12 2014/02/09 16:15:32 tg Exp $ */
d55 1
a55 1
#define	NULL		0
@


1.13
log
@fix C++ (except G++) definition of NULL; revalidate C/POSIX one
@
text
@d53 1
a53 1
#define	NULL			__null
d55 1
a55 1
#define	NULL			0
d57 1
a57 1
#define	NULL			((void *)((__PTRDIFF_TYPE__)0UL))
@


1.12
log
@implement rsize_t as specified in N1570, inspired by xenu
@
text
@d1 1
a1 1
/**	$MirOS: src/include/time.h,v 1.11 2013/10/31 20:06:09 tg Exp $ */
d6 1
a6 1
 * Copyright © 2013, 2014
d51 5
a55 5
#ifndef	NULL
#ifdef 	__GNUG__
#define	NULL	__null
#elif defined(lint)
#define	NULL	0
d57 1
a57 1
#define	NULL	((void *)((__PTRDIFF_TYPE__)0UL))
@


1.11
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/**	$MirOS: src/include/time.h,v 1.10 2011/11/20 04:57:09 tg Exp $ */
d6 1
a6 1
 * Copyright © 2013
d71 8
@


1.10
log
@first steps toward a new time API
• no DJB code (actual code) any more, only reimplementation of algorithms
  whose code is placed in USA PD
• no struct returns any more
• skip the extra tai_t step
• no _t suffix for types I define
• try to be a bit more elegant – I learned a lot since then, after all

the old ABI is still provided until we bump libc major
‣ the new API might wander off libc into libmbfun then, _too_

goal is functional equivalence (after all, it’s been proven correct)
@
text
@d1 1
a1 1
/**	$MirOS: src/include/time.h,v 1.9 2008/12/10 21:37:39 tg Exp $ */
d6 2
d85 1
a85 1
		__attribute__ ((__bounded__(__string__,1,2)));
d89 1
a89 1
		__attribute__ ((__bounded__(__minbytes__,2,26)));
d91 1
a91 1
		__attribute__ ((__bounded__(__minbytes__,2,26)));
@


1.9
log
@delint
@
text
@d1 1
a1 1
/**	$MirOS: src/include/time.h,v 1.8 2007/02/07 20:43:21 tg Exp $ */
d47 1
a63 5
#ifdef	_BSD_TIME_T_
typedef	_BSD_TIME_T_	time_t;
#undef	_BSD_TIME_T_
#endif

a70 17
#if !defined(__STRUCT_TM_DECLARED)
struct tm {
	int	tm_sec;		/* seconds after the minute [0-60] */
	int	tm_min;		/* minutes after the hour [0-59] */
	int	tm_hour;	/* hours since midnight [0-23] */
	int	tm_mday;	/* day of the month [1-31] */
	int	tm_mon;		/* months since January [0-11] */
	time_t	tm_year;	/* years since 1900 */
	int	tm_wday;	/* days since Sunday [0-6] */
	int	tm_yday;	/* days since January 1 [0-365] */
	int	tm_isdst;	/* Daylight Saving Time flag */
	long	tm_gmtoff;	/* offset from UTC in seconds */
	char	*tm_zone;	/* timezone abbreviation */
};
#define __STRUCT_TM_DECLARED
#endif

@


1.8
log
@* attempt to move taitime(3) functions from libc and kernel to kernbase,
  its prototypes from <time.h> and <sys/time.h> (which includes <time.h>)
  and <lib/libkern/taitime.h> to <sys/taitime.h>, split between indepen-
  dent and dependent (kernel/userland different leap table initialisation;
  userland additional tai_time(), taina_time(), importtai(), exporttai()),
  reduce required headers; reduce diff from headers to upstream
* move kernel tai leap second table from kernel objects to libkern
@
text
@d1 1
a1 1
/**	$MirOS$ */
d93 1
d95 1
d113 1
d115 1
@


1.7
log
@prevent duplicate definition of 'struct tm'
@
text
@d1 1
a1 1
/**	$MirOS: src/include/time.h,v 1.6 2006/12/11 23:54:57 tg Exp $ */
a5 2
 * Copyright (c) 2004, 2005, 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
a38 9
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 *
a91 28
#if !defined(__TIMESPEC_DECLARED)
struct timespec {
	time_t	tv_sec;		/* seconds */
	long	tv_nsec;	/* and nanoseconds */
};
#define	__TIMESPEC_DECLARED
#endif

/*
 * Represents the current date and time of day in seconds
 * since 1970-01-01 00:00:00 (beginning of the TAI year),
 * with a bias of 0x4000000000000000, as a signed 63 bit value.
 */
typedef	int64_t tai64_t;

/* The same, just with nanosecond and attosecond accuracy */
typedef	struct {
	tai64_t secs;
	uint32_t nano;
	uint32_t atto;
} tai64na_t;

/* Modified Julian Date */
typedef struct {
	time_t	mjd;
	int32_t	sec;
} mjd_t;

d93 1
a125 36

/*
 * tai64 and mjd handling functions
 */

/* get current time */
tai64_t	tai_time(tai64_t *)
		__attribute__((__bounded__(__minbytes__,1,8)));
void	taina_time(tai64na_t *)
		__attribute__((__bounded__(__minbytes__,1,16)));
tai64_t *tai_leaps(void);
int	tai_isleap(tai64_t);

/* in-core basic conversion */
#define __TAI64_BIAS	0x4000000000000000ULL
/* these are normally macros */
tai64_t	timet2tai(time_t);
#define	timet2tai(x)	((tai64_t)((time_t)(x) + __TAI64_BIAS))
time_t	tai2timet(tai64_t);
#define	tai2timet(x)	((time_t)((tai64_t)(x) - __TAI64_BIAS))

/* in-core advanced conversion */
tai64_t	utc2tai(int64_t);
int64_t	tai2utc(tai64_t);
tai64_t	mjd2tai(mjd_t);
mjd_t	tai2mjd(tai64_t);
struct tm mjd2tm(mjd_t);
mjd_t tm2mjd(struct tm);

/* on-the-wire DJB-compatible conversion */
void	exporttai(uint8_t *, tai64na_t *)
		__attribute__((__bounded__(__minbytes__,1,16)))
		__attribute__((__bounded__(__minbytes__,2,16)));
void	importtai(uint8_t *, tai64na_t *)
		__attribute__((__bounded__(__minbytes__,1,16)))
		__attribute__((__bounded__(__minbytes__,2,16)));
@


1.6
log
@mostly administrative licence sync w/ current template
@
text
@d1 1
a1 1
/**	$MirOS: src/include/time.h,v 1.5 2006/06/12 21:46:33 tg Exp $ */
d86 1
d100 2
@


1.5
log
@symc (c) and comments
@
text
@d1 1
a1 1
/**	$MirOS: src/include/time.h,v 1.4 2006/06/12 21:41:32 tg Exp $ */
d41 8
a48 8
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a nontrivial bug.
@


1.4
log
@KNF, optimise
@
text
@d1 1
a1 1
/**	$MirOS: src/include/time.h,v 1.3 2005/11/21 19:31:54 tg Exp $ */
d6 2
a7 2
 * Copyright (c) 2004, 2005
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
d41 9
d166 1
a166 1
/* Get current time */
d174 1
a174 1
/* Conversion routines */
d181 2
a186 1

d190 1
a190 1
/* Conversion between tai64 and DJB-compatible TAI64NA on the wire values */
@


1.3
log
@First round of system include "fixes":
let GCC decide the length of ptrdiff_t, size_t, wchar_t, wint_t
(the first three adapted from gcc fixincludes run[1])
and adapt ssize_t accordingly (untested)
also fix limits

[1] which we don't run during gcc module build tho
@
text
@d1 1
a1 1
/**	$MirOS: src/include/time.h,v 1.2 2005/03/06 17:16:58 tg Exp $ */
d109 2
a110 2
	u_int32_t nano;
	u_int32_t atto;
d167 2
d170 1
d177 2
a178 2
struct tm	mjd2tm(mjd_t);
mjd_t		tm2mjd(struct tm);
d181 1
a181 1
void	exporttai(u_int8_t *, tai64na_t *)
d184 1
a184 1
void	importtai(u_int8_t *, tai64na_t *)
@


1.2
log
@merge <time.h>
@
text
@d1 1
a1 1
/**	$MirOS$ */
d56 1
a56 1
#define	NULL	((void *)((_BSD_PTRDIFF_T_)0UL))
d70 3
a72 3
#ifdef	_BSD_SIZE_T_
typedef	_BSD_SIZE_T_	size_t;
#undef	_BSD_SIZE_T_
@


1.1
log
@Initial revision
@
text
@d1 1
d6 2
d47 1
d53 2
d56 1
a56 1
#define	NULL	0L
d83 1
a83 1
	int	tm_year;	/* years since 1900 */
d91 27
a117 1
#include <sys/cdefs.h>
a119 1
struct timespec;
d152 32
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
