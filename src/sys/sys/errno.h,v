head	1.12;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.2
	MIRBSD_10:1.6.0.4
	MIRBSD_10_BASE:1.6
	MIRBSD_9_BASE:1.6
	MIRBSD_8:1.5.0.2
	MIRBSD_8_BASE:1.5
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2017.08.07.20.18.34;	author tg;	state Exp;
branches;
next	1.11;
commitid	1005988C69344442E37;

1.11
date	2014.09.05.22.38.17;	author tg;	state Exp;
branches;
next	1.10;
commitid	100540A3B717D83FA46;

1.10
date	2012.12.31.20.19.49;	author tg;	state Exp;
branches;
next	1.9;
commitid	10050E1F351014A1FCD;

1.9
date	2012.12.18.13.13.00;	author bsiegert;	state Exp;
branches;
next	1.8;
commitid	10050D06BED2ECAA7FB;

1.8
date	2008.12.10.20.08.39;	author tg;	state Exp;
branches;
next	1.7;
commitid	100494021D5394A95DE;

1.7
date	2008.11.08.23.04.24;	author tg;	state Exp;
branches;
next	1.6;
commitid	10049161AB22DF5DFC5;

1.6
date	2006.01.31.20.47.13;	author tg;	state Exp;
branches;
next	1.5;
commitid	10043DFCCDC09FAFFD4;

1.5
date	2005.12.19.22.49.50;	author tg;	state Exp;
branches;
next	1.4;
commitid	10043A739192C7B12B6;

1.4
date	2005.07.25.17.58.06;	author tg;	state Exp;
branches;
next	1.3;
commitid	4c4542e5282752ee;

1.3
date	2005.07.07.14.39.27;	author tg;	state Exp;
branches;
next	1.2;
commitid	61cf42cd3eb15e48;

1.2
date	2005.03.06.21.28.34;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.29.17;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.17;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.07.14.35.38;	author tg;	state Exp;
branches;
next	;
commitid	30a642cd3dcd4cb0;


desc
@@


1.12
log
@filesystem
@
text
@/**	$MirOS: src/sys/sys/errno.h,v 1.11 2014/09/05 22:38:17 tg Exp $ */
/*	$OpenBSD: errno.h,v 1.14 2005/06/17 21:48:03 espie Exp $	*/
/*	$NetBSD: errno.h,v 1.10 1996/01/20 01:33:53 jtc Exp $	*/

/*
 * Copyright (c) 2003, 2005, 2008, 2012
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>.  All rights reserved.
 * Copyright (c) 1982, 1986, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)errno.h	8.5 (Berkeley) 1/21/94
 */

#ifndef	_SYS_ERRNO_H_
#define	_SYS_ERRNO_H_

#ifndef _KERNEL
extern int errno;			/* global error number */

#if !defined(_ANSI_SOURCE) && !defined(_POSIX_SOURCE) && !defined(__SYS_ERRLIST)
#define __SYS_ERRLIST

extern int sys_nerr;
extern char *sys_errlist[];
#endif

#if !defined(errno) && !defined(_STANDALONE)
#include <sys/cdefs.h>
__BEGIN_DECLS
int *__errno(void);
int *___errno(void);
__END_DECLS
#define errno (*__errno())
#endif /* errno */

#else
#define _SYS_ERRNO_H_KERNEL
#endif /* _KERNEL */

#define	EPERM		1		/* Operation not permitted */
#define	ENOENT		2		/* No such file or directory */
#define	ESRCH		3		/* No such process */
#define	EINTR		4		/* Interrupted system call */
#define	EIO		5		/* Input/output error */
#define	ENXIO		6		/* Device not configured */
#define	E2BIG		7		/* Argument list too long */
#define	ENOEXEC		8		/* Exec format error */
#define	EBADF		9		/* Bad file descriptor */
#define	ECHILD		10		/* No child processes */
#define	EDEADLK		11		/* Resource deadlock avoided */
					/* 11 was EAGAIN */
#define	ENOMEM		12		/* Cannot allocate memory */
#define	EACCES		13		/* Permission denied */
#define	EFAULT		14		/* Bad address */
#ifndef _POSIX_SOURCE
#define	ENOTBLK		15		/* Block device required */
#endif
#define	EBUSY		16		/* Device busy */
#define	EEXIST		17		/* File exists */
#define	EXDEV		18		/* Cross-device link */
#define	ENODEV		19		/* Operation not supported by device */
#define	ENOTDIR		20		/* Not a directory */
#define	EISDIR		21		/* Is a directory */
#define	EINVAL		22		/* Invalid argument */
#define	ENFILE		23		/* Too many open files in system */
#define	EMFILE		24		/* Too many open files */
#define	ENOTTY		25		/* Inappropriate ioctl for device */
#define	ETXTBSY		26		/* Text file busy */
#define	EFBIG		27		/* File too large */
#define	ENOSPC		28		/* No space left on device */
#define	ESPIPE		29		/* Illegal seek */
#define	EROFS		30		/* Read-only filesystem */
#define	EMLINK		31		/* Too many links */
#define	EPIPE		32		/* Broken pipe */

/* math software */
#define	EDOM		33		/* Numerical argument out of domain */
#define	ERANGE		34		/* Result too large */

/* non-blocking and interrupt i/o */
#define	EAGAIN		35		/* Resource temporarily unavailable */
/* LINTED permitted by SUSv4 */
#define	EWOULDBLOCK	EAGAIN		/* Operation would block */
#define	EINPROGRESS	36		/* Operation now in progress */
#define	EALREADY	37		/* Operation already in progress */

/* ipc/network software -- argument errors */
#define	ENOTSOCK	38		/* Socket operation on non-socket */
#define	EDESTADDRREQ	39		/* Destination address required */
#define	EMSGSIZE	40		/* Message too long */
#define	EPROTOTYPE	41		/* Protocol wrong type for socket */
#define	ENOPROTOOPT	42		/* Protocol not available */
#define	EPROTONOSUPPORT	43		/* Protocol not supported */
#ifndef _POSIX_SOURCE
#define	ESOCKTNOSUPPORT	44		/* Socket type not supported */
#endif /* _POSIX_SOURCE */
#define	EOPNOTSUPP	45		/* Operation not supported */
#ifndef _POSIX_SOURCE
/* LINTED permitted by SUSv4 */
#define	ENOTSUP		EOPNOTSUPP
#define	EPFNOSUPPORT	46		/* Protocol family not supported */
#endif /* _POSIX_SOURCE */
#define	EAFNOSUPPORT	47		/* Address family not supported by protocol family */
#define	EADDRINUSE	48		/* Address already in use */
#define	EADDRNOTAVAIL	49		/* Can't assign requested address */

/* ipc/network software -- operational errors */
#define	ENETDOWN	50		/* Network is down */
#define	ENETUNREACH	51		/* Network is unreachable */
#define	ENETRESET	52		/* Network dropped connection on reset */
#define	ECONNABORTED	53		/* Software caused connection abort */
#define	ECONNRESET	54		/* Connection reset by peer */
#define	ENOBUFS		55		/* No buffer space available */
#define	EISCONN		56		/* Socket is already connected */
#define	ENOTCONN	57		/* Socket is not connected */
#ifndef _POSIX_SOURCE
#define	ESHUTDOWN	58		/* Can't send after socket shutdown */
#define	ETOOMANYREFS	59		/* Too many references: can't splice */
#endif /* _POSIX_SOURCE */
#define	ETIMEDOUT	60		/* Operation timed out */
#define	ECONNREFUSED	61		/* Connection refused */

#define	ELOOP		62		/* Too many levels of symbolic links */
#define	ENAMETOOLONG	63		/* File name too long */

/* should be rearranged */
#ifndef _POSIX_SOURCE
#define	EHOSTDOWN	64		/* Host is down */
#define	EHOSTUNREACH	65		/* No route to host */
#endif /* _POSIX_SOURCE */
#define	ENOTEMPTY	66		/* Directory not empty */

/* quotas & mush */
#ifndef _POSIX_SOURCE
#define	EPROCLIM	67		/* Too many processes */
#define	EUSERS		68		/* Too many users */
#endif /* _POSIX_SOURCE */
#define	EDQUOT		69		/* Disk quota exceeded */

/* Network Filesystem */
#define	ESTALE		70		/* Stale NFS file handle */
#ifndef _POSIX_SOURCE
#define	EREMOTE		71		/* Too many levels of remote in path */
#define	EBADRPC		72		/* RPC struct is bad */
#define	ERPCMISMATCH	73		/* RPC version wrong */
#define	EPROGUNAVAIL	74		/* RPC prog. not avail */
#define	EPROGMISMATCH	75		/* Program version wrong */
#define	EPROCUNAVAIL	76		/* Bad procedure for program */
#endif /* _POSIX_SOURCE */

#define	ENOLCK		77		/* No locks available */
#define	ENOSYS		78		/* Function not implemented */

#ifndef _POSIX_SOURCE
#define	EFTYPE		79		/* Inappropriate file type or format */
#define	EAUTH		80		/* Authentication error */
#define	ENEEDAUTH	81		/* Need authenticator */
#define	EIPSEC		82		/* IPsec processing failure */
#define	ENOATTR		83		/* Attribute not found */
#define	EILSEQ		84		/* Illegal byte sequence */
#define	ENOCOFFEE	85		/* Programmer needs more coffee */
#endif
#define	ECANCELED	86		/* Operation canceled */
#define	EBADMSG		87		/* Bad message */
#define	EIDRM		88		/* Identifier removed */
#define	EMULTIHOP	89		/* (reserved) */
#define	ENODATA		90		/* No message available on STREAM head read queue */
#define	ENOLINK		91		/* (reserved) */
#define	ENOMSG		92		/* No message of desired type */
#define	ENOSR		93		/* No STREAM resources */
#define	ENOSTR		94		/* Not a STREAM */
#define	ENOTRECOVERABLE	95		/* State not recoverable */
#define	EOVERFLOW	96		/* Value too large for data type */
#define	EOWNERDEAD	97		/* Previous owner died */
#define	EPROTO		98		/* Protocol error */
#define	ETIME		99		/* STREAM ioctl timeout */
#ifndef _POSIX_SOURCE
#define	ELAST		99		/* Must be equal largest errno */
#endif /* _POSIX_SOURCE */

/**
 * IMPORTANT: changes to errnos require a libc major bump!
 * ld(1) reserves space for a copy of libc’s sys_errlist[]
 * in the .bss of a non-static non-PIE executable, as well
 * as sys_nerr, and copies them at start; if sys_errlist[]
 * gets bigger sys_nerr points after its end. (10x jilles)
 */

#ifdef _KERNEL
/* pseudo-errors returned inside kernel to modify return to process */
#define	ERESTART	-1		/* restart syscall */
#define	EJUSTRETURN	-2		/* don't modify regs, just return */
#endif

#endif	/* !def _SYS_ERRNO_H_ */
@


1.11
log
@note that errno changes are libc major bumps; 10x jilles@@fbsd via IRC
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/errno.h,v 1.10 2012/12/31 20:19:49 tg Exp $ */
d101 1
a101 1
#define	EROFS		30		/* Read-only file system */
d169 1
a169 1
/* Network File System */
@


1.10
log
@introduce all SUSv4-mandated (and optional) errnos

as requested by bsiegert@@ this also splits EOVERFLOW from ERANGE,
thus bumping libc minor
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/errno.h,v 1.9 2012/12/18 13:13:00 bsiegert Exp $ */
d210 8
@


1.9
log
@Add a new errno value, ECANCELED ("Operation canceled"), mandated
by the Single Unix Specification. Found while fixing pkgsrc in the
2012Q4 freeze.

This commit was done in a train, in a tunnel, over tethering. Yay for
Swiss mobile networks.
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/errno.h,v 1.8 2008/12/10 20:08:39 tg Exp $ */
d6 1
a6 1
 * Copyright (c) 2003, 2005, 2008
a107 3
#ifndef _POSIX_SOURCE
#define	EOVERFLOW	ERANGE
#endif /* _POSIX_SOURCE */
d111 1
d128 1
d191 1
d193 15
a207 1
#define	ELAST		86		/* Must be equal largest errno */
@


1.8
log
@errno vs kernel vs inline issues
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/errno.h,v 1.7 2008/11/08 23:04:24 tg Exp $ */
d192 2
a193 1
#define	ELAST		85		/* Must be equal largest errno */
@


1.7
log
@more mass conversions, including ancient eMail addresses
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/errno.h,v 1.6 2006/01/31 20:47:13 tg Exp $ */
d6 2
a7 2
 * Copyright (c) 2003, 2005
 *	Thorsten "mirabilos" Glaser <tg@@mirbsd.de>.  All rights reserved.
d65 2
@


1.6
log
@correct my historical error to setting ENOCOFFEE=ENOSYS
since the former can also be returned from userland
(bump libc minor since array size changes)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/errno.h,v 1.5 2005/12/19 22:49:50 tg Exp $ */
d7 1
a7 1
 *	Thorsten "mirabile" Glaser <tg@@mirbsd.de>.  All rights reserved.
@


1.5
log
@we use _SYS_ERRNO_H_ not _SYS_ERRNO_H (thanks tedu)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/errno.h,v 1.4 2005/07/25 17:58:06 tg Exp $ */
a179 1
#define	ENOCOFFEE	78		/* Programmer needs more coffee */
d189 2
a190 1
#define	ELAST		84		/* Must be equal largest errno */
@


1.4
log
@while here, commit ENOTSUP and EOVERFLOW (GNU style)
EILSEQ must not be EINVAL (for wchar_t callers), but
OpenBSD has already taken care of adding this errno.
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/errno.h,v 1.3 2005/07/07 14:39:27 tg Exp $ */
d7 1
a7 1
 *	Thorsten "mirabile" Glaser <tg@@MirBSD.org>.  All rights reserved.
d43 2
a44 2
#ifndef	_SYS_ERRNO_H
#define	_SYS_ERRNO_H
d199 1
a199 1
#endif	/* !def _SYS_ERRNO_H */
@


1.3
log
@merge
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/errno.h,v 1.2 2005/03/06 21:28:34 tg Exp $ */
d6 2
d106 3
d128 1
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 2
a2 2
/**	$MirOS$ */
/*	$OpenBSD: errno.h,v 1.12 2004/07/13 21:03:39 marc Exp $	*/
a92 1
#ifndef _POSIX_SOURCE
a93 1
#endif
a106 1
#ifndef _POSIX_SOURCE
d118 1
d120 1
d122 1
d124 1
d138 1
d141 1
a145 1
#endif /* _POSIX_SOURCE */
d159 1
d164 1
d183 2
a184 1
#define	ELAST		83		/* Must be equal largest errno */
@


1.1
log
@Initial revision
@
text
@d1 1
d41 3
d170 1
d187 2
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@merge some more stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: errno.h,v 1.14 2005/06/17 21:48:03 espie Exp $	*/
d89 1
d91 1
d105 1
a116 1
#ifndef _POSIX_SOURCE
a117 1
#endif /* _POSIX_SOURCE */
a118 1
#ifndef _POSIX_SOURCE
a119 1
#endif /* _POSIX_SOURCE */
a132 1
#ifndef _POSIX_SOURCE
a134 1
#endif /* _POSIX_SOURCE */
d139 1
a152 1
#endif /* _POSIX_SOURCE */
a156 1
#ifndef _POSIX_SOURCE
d174 1
a174 2
#define	EILSEQ		84		/* Illegal byte sequence */
#define	ELAST		84		/* Must be equal largest errno */
@

