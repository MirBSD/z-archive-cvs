head	1.7;
access;
symbols
	MIRBSD_10:1.3.0.4
	MIRBSD_10_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2014.02.19.17.42.13;	author tg;	state dead;
branches;
next	1.6;
commitid	1005304ED0E067606D8;

1.6
date	2013.10.31.20.07.00;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005272B7081B0E5655;

1.5
date	2011.11.20.04.57.15;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004EC8880406A80564;

1.4
date	2011.10.28.23.07.24;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004EAB34BA1353D3EA;

1.3
date	2007.08.08.18.48.48;	author tg;	state Exp;
branches;
next	1.2;
commitid	10046BA0FDF72CBD0B1;

1.2
date	2007.02.07.20.43.28;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045CA39907FBE4A06;

1.1
date	2007.02.07.18.55.47;	author tg;	state Exp;
branches;
next	;
commitid	10045CA20BA562C680A;


desc
@@


1.7
log
@drop another part of taitime compat code
@
text
@/* $MirOS: src/sys/sys/taitime.h,v 1.6 2013/10/31 20:07:00 tg Exp $ */

/*-
 * Copyright (c) 2007, 2011, 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#ifndef _SYS_TAITIME_H_
#define _SYS_TAITIME_H_

#include <syskern/mirtime.h>

#ifndef _IN_TAITIME_IMPLEMENTATION
#warning "sys/taitime.h is deprecated"
#endif

/*
 * Represents the current date and time of day in seconds
 * since 1970-01-01 00:00:00 (beginning of the TAI year),
 * as a biased signed 63 bit value.
 */
#define __TAI64_BIAS	0x4000000000000000ULL
typedef	int64_t tai64_t;

/* MirBSD bonus: flag used by the code to accept a wrap-around extension */
#define __TAI_CAN_BE_64BIT

/* tai64_t + nanosecond and attosecond accuracy */
typedef	struct {
	tai64_t secs;
	uint32_t nano;
	uint32_t atto;
} tai64na_t;

/* Modified Julian Date */
typedef mirtime_mjd mjd_t;

#if defined(_KERNEL) || __OPENBSD_VISIBLE
__BEGIN_DECLS
/* leap second array management */
tai64_t *tai_leaps(void);
int tai_isleap(tai64_t);

/* basic conversion */
tai64_t timet2tai(time_t);
time_t tai2timet(tai64_t);

/* advanced conversion */
tai64_t utc2tai(int64_t);
int64_t tai2utc(tai64_t);
tai64_t mjd2tai(mjd_t);
mjd_t tai2mjd(tai64_t);
struct tm mjd2tm(mjd_t);
mjd_t tm2mjd(struct tm);
__END_DECLS

#define timet2tai(x)	((tai64_t)((time_t)(x) + __TAI64_BIAS))
#define tai2timet(x)	((time_t)((tai64_t)(x) - __TAI64_BIAS))
#endif /* _KERNEL || __OPENBSD_VISIBLE */

#if !defined(_KERNEL) && __OPENBSD_VISIBLE
__BEGIN_DECLS
/* get current time */
tai64_t tai_time(tai64_t *)
    __attribute__((__bounded__(__minbytes__, 1, 8)));
void taina_time(tai64na_t *)
    __attribute__((__bounded__(__minbytes__, 1, 16)));

/* on-the-wire DJB-compatible conversion */
void exporttai(uint8_t *, tai64na_t *)
    __attribute__((__bounded__(__minbytes__, 1, 16)))
    __attribute__((__bounded__(__minbytes__, 2, 16)));
void importtai(uint8_t *, tai64na_t *)
    __attribute__((__bounded__(__minbytes__, 1, 16)))
    __attribute__((__bounded__(__minbytes__, 2, 16)));
__END_DECLS
#endif /* !_KERNEL && __OPENBSD_VISIBLE */

#endif
@


1.6
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/* $MirOS: src/sys/sys/taitime.h,v 1.5 2011/11/20 04:57:15 tg Exp $ */
@


1.5
log
@first steps toward a new time API
• no DJB code (actual code) any more, only reimplementation of algorithms
  whose code is placed in USA PD
• no struct returns any more
• skip the extra tai_t step
• no _t suffix for types I define
• try to be a bit more elegant – I learned a lot since then, after all

the old ABI is still provided until we bump libc major
‣ the new API might wander off libc into libmbfun then, _too_

goal is functional equivalence (after all, it’s been proven correct)
@
text
@d1 1
a1 1
/* $MirOS: src/sys/sys/taitime.h,v 1.4 2011/10/28 23:07:24 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2007, 2011
d80 1
a80 1
    __attribute__((bounded (minbytes, 1, 8)));
d82 1
a82 1
    __attribute__((bounded (minbytes, 1, 16)));
d86 2
a87 2
    __attribute__((bounded (minbytes, 1, 16)))
    __attribute__((bounded (minbytes, 2, 16)));
d89 2
a90 2
    __attribute__((bounded (minbytes, 1, 16)))
    __attribute__((bounded (minbytes, 2, 16)));
@


1.4
log
@in MirBSD we use TAI as a 64-bit type, not a 63-bit type, implicitly,
via our conversions and the whole-spectrum guarantees; sprinkle a few
unsigned casts and unbiased comparisons to actually handle the issues
with leap seconds in time_t ∈ [4000000000000000;C000000000000000[ (an
area not supported by the TAI spec)
@
text
@d1 1
a1 1
/* $MirOS: src/sys/sys/taitime.h,v 1.3 2007/08/08 18:48:48 tg Exp $ */
d26 6
d51 1
a51 21
typedef struct {
	time_t	mjd;
	int32_t	sec;
} mjd_t;

#if !defined(__STRUCT_TM_DECLARED)
struct tm {
	int tm_sec;		/* seconds [0-60] */
	int tm_min;		/* minutes [0-59] */
	int tm_hour;		/* hours [0-23] */
	int tm_mday;		/* day of month [1-31] */
	int tm_mon;		/* month of year - 1 [0-11] */
	time_t tm_year;		/* year - 1900 */
	int tm_wday;		/* day of week (0 = sunday) */
	int tm_yday;		/* day of year [0-365] */
	int tm_isdst;		/* summer time effective? [0/1] */
	long tm_gmtoff;		/* offset from UTC in seconds */
	char *tm_zone;		/* abbreviation of timezone name */
};
#define __STRUCT_TM_DECLARED
#endif
@


1.3
log
@of course defining tm_year to “int64_t” in one place, “time_t” in the other
can't work on time_t-32 platforms such as sparc and may cause core dumps or
other misbehaviour *sigh*

use time_t because if it fits in the seconds, it'll fit in the year by far.
same logic as for the mjd_t.mjd field.
@
text
@d1 1
a1 1
/* $MirOS: src/sys/sys/taitime.h,v 1.2 2007/02/07 20:43:28 tg Exp $ */
d4 2
a5 2
 * Copyright (c) 2007
 *	Thorsten Glaser <tg@@mirbsd.de>
d34 3
@


1.2
log
@* attempt to move taitime(3) functions from libc and kernel to kernbase,
  its prototypes from <time.h> and <sys/time.h> (which includes <time.h>)
  and <lib/libkern/taitime.h> to <sys/taitime.h>, split between indepen-
  dent and dependent (kernel/userland different leap table initialisation;
  userland additional tai_time(), taina_time(), importtai(), exporttai()),
  reduce required headers; reduce diff from headers to upstream
* move kernel tai leap second table from kernel objects to libkern
@
text
@d1 1
a1 1
/* $MirOS: src/sys/sys/taitime.h,v 1.1 2007/02/07 18:55:47 tg Exp $ */
d54 1
a54 1
	int64_t tm_year;	/* year - 1900 */
@


1.1
log
@prepare for moving the taitime functions to src/kern/
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.20 2006/12/11 21:04:56 tg Rel $ */
a25 2
#include <sys/cdefs.h>

d66 1
@

