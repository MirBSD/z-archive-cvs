head	1.32;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.2
	MIRBSD_10:1.17.0.4
	MIRBSD_10_BASE:1.17
	MIRBSD_9_BASE:1.8
	MIRBSD_8:1.8.0.2
	MIRBSD_8_BASE:1.8
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.32
date	2014.03.13.00.58.53;	author tg;	state Exp;
branches;
next	1.31;
commitid	100532102E56C1A0537;

1.31
date	2014.02.09.22.43.17;	author tg;	state Exp;
branches;
next	1.30;
commitid	10052F804923732AA36;

1.30
date	2014.02.09.16.18.14;	author tg;	state Exp;
branches;
next	1.29;
commitid	10052F7AA5F5A9E6509;

1.29
date	2013.10.31.20.06.59;	author tg;	state Exp;
branches;
next	1.28;
commitid	1005272B7081B0E5655;

1.28
date	2011.10.18.21.29.32;	author tg;	state Exp;
branches;
next	1.27;
commitid	1004E9DEFD1748C2227;

1.27
date	2011.10.18.20.35.36;	author tg;	state Exp;
branches;
next	1.26;
commitid	1004E9DE3025E8E5660;

1.26
date	2011.07.06.20.29.08;	author tg;	state Exp;
branches;
next	1.25;
commitid	1004E14C59F6231C2CF;

1.25
date	2010.10.08.19.55.26;	author tg;	state Exp;
branches;
next	1.24;
commitid	1004CAF773B14E24B40;

1.24
date	2010.01.01.18.27.41;	author tg;	state Exp;
branches;
next	1.23;
commitid	1004B3E3EAB53C27BB7;

1.23
date	2009.10.16.17.35.57;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004AD8AEE146D3F72A;

1.22
date	2009.09.27.11.35.18;	author tg;	state Exp;
branches;
next	1.21;
commitid	1004ABF4E7608B2DE2E;

1.21
date	2008.11.10.01.40.14;	author tg;	state Exp;
branches;
next	1.20;
commitid	1004917911211F38C50;

1.20
date	2008.06.29.19.24.57;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004867E19761C610D6;

1.19
date	2008.06.21.22.37.18;	author tg;	state Exp;
branches;
next	1.18;
commitid	100485D823243B8BA5E;

1.18
date	2008.06.17.22.35.32;	author tg;	state Exp;
branches;
next	1.17;
commitid	10048583C431D0D0136;

1.17
date	2007.09.21.08.32.07;	author tg;	state Exp;
branches
	1.17.4.1;
next	1.16;
commitid	10046F38192312B7E76;

1.16
date	2007.05.18.00.47.58;	author tg;	state Exp;
branches;
next	1.15;
commitid	100464CF7A870016783;

1.15
date	2007.02.02.21.05.30;	author tg;	state Exp;
branches;
next	1.14;
commitid	10045C3A79F53A9E808;

1.14
date	2006.11.03.18.22.30;	author tg;	state Exp;
branches;
next	1.13;
commitid	100454B88F3656B4434;

1.13
date	2006.11.03.17.14.41;	author tg;	state Exp;
branches;
next	1.12;
commitid	100454B79084CCFD1B9;

1.12
date	2006.10.03.19.46.14;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004522BE1372DDCA9D;

1.11
date	2006.09.29.21.39.22;	author tg;	state Exp;
branches;
next	1.10;
commitid	100451D92964D81CFBB;

1.10
date	2006.09.29.21.35.42;	author tg;	state Exp;
branches;
next	1.9;
commitid	100451D919071003585;

1.9
date	2006.09.21.21.01.45;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004512FD736249025C;

1.8
date	2005.11.23.20.32.41;	author tg;	state Exp;
branches;
next	1.7;
commitid	33274384d1f78baf;

1.7
date	2005.07.07.14.39.27;	author tg;	state Exp;
branches;
next	1.6;
commitid	61cf42cd3eb15e48;

1.6
date	2005.04.26.08.32.15;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.26.08.27.47;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.17.01.17.21;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.12.18.27.29;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.21.28.33;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.29.15;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.17.4.1
date	2008.06.21.22.37.18;	author tg;	state Exp;
branches;
next	;
commitid	100485D823243B8BA5E;

1.1.1.1
date	2005.02.05.17.29.15;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.07.14.35.38;	author tg;	state Exp;
branches;
next	;
commitid	30a642cd3dcd4cb0;


desc
@@


1.32
log
@make refwarns more easily greppable
@
text
@/**	$MirOS: src/sys/sys/cdefs.h,v 1.31 2014/02/09 22:43:17 tg Exp $ */
/*	$OpenBSD: cdefs.h,v 1.18 2005/05/27 21:28:12 millert Exp $	*/
/*	$NetBSD: cdefs.h,v 1.16 1996/04/03 20:46:39 christos Exp $	*/

/*-
 * Copyright © 2005, 2006, 2011, 2013, 2014
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)cdefs.h	8.7 (Berkeley) 1/21/94
 */

#ifndef _CDEFS_H_
#define _CDEFS_H_

#ifdef __KPRINTF_ATTRIBUTE__
#undef __KPRINTF_ATTRIBUTE__
#endif

#if defined(__cplusplus)
#define	__BEGIN_DECLS	extern "C" {
#define	__END_DECLS	}
#else
#define	__BEGIN_DECLS
#define	__END_DECLS
#endif

/*
 * Macro to test if we're using a specific version of gcc or later.
 */
#ifdef lint
#undef __GNUC__
#endif
#ifdef __GNUC__
#define __GNUC_PREREQ__(ma, mi) \
	((__GNUC__ > (ma)) || (__GNUC__ == (ma) && __GNUC_MINOR__ >= (mi)))
#else
#define __GNUC_PREREQ__(ma, mi) 0
#endif

/*
 * The __CONCAT macro is used to concatenate parts of symbol names, e.g.
 * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.
 * The __CONCAT macro is a bit tricky -- make sure you don't put spaces
 * in between its arguments.  __CONCAT can also concatenate double-quoted
 * strings produced by the __STRING macro, but this only works with ANSI C.
 */
#if defined(__STDC__) || defined(__cplusplus)
#define	__P(protos)	protos		/* full-blown ANSI C */
#define	__CONCAT(x,y)	x ## y
#define	__STRING(x)	#x

#define	__const		const		/* define reserved names to standard */
#define	__signed	signed
#define	__volatile	volatile
#if (defined(__cplusplus) || defined(__PCC__)) && !defined(__inline)
#define	__inline	inline		/* convert to C++/C99 keyword */
#elif !defined(__GNUC__) && !defined(lint) && !defined(__inline)
#define	__inline			/* delete GCC keyword */
#endif

#else	/* !(__STDC__ || __cplusplus) */
#define	__P(protos)	()		/* traditional C preprocessor */
#define	__CONCAT(x,y)	x/**/y
#define	__STRING(x)	"x"

#if !defined(__GNUC__) && !defined(lint)
#define	__const				/* delete pseudo-ANSI C keywords */
#define	__inline
#define	__signed
#define	__volatile
#endif	/* !__GNUC__ && !lint */

/*
 * In non-ANSI C environments, new programs will want ANSI-only C keywords
 * deleted from the program and old programs will want them left alone.
 * Programs using the ANSI C keywords const, inline etc. as normal
 * identifiers should define -DNO_ANSI_KEYWORDS.
 */
#ifndef	NO_ANSI_KEYWORDS
#define	const		__const		/* convert ANSI C keywords */
#define	inline		__inline
#define	signed		__signed
#define	volatile	__volatile
#endif /* !NO_ANSI_KEYWORDS */
#endif	/* !(__STDC__ || __cplusplus) */

/*
 * GCC1 and some versions of GCC2 declare dead (non-returning) and
 * pure (no side effects) functions using "volatile" and "const";
 * unfortunately, these then cause warnings under "-ansi -pedantic".
 * GCC >= 2.5 uses the __attribute__((__attrs__)) style. All of these
 * work for GNU C++ (modulo a slight glitch in the C++ grammar in
 * the distribution version of 2.5.5).
 * For GCC 3, the ANSI parser seems to be able to cope with attributes.
 */
#if !__GNUC_PREREQ__(2, 5) && !defined(__NWCC__)
#define	__attribute__(x)	/* delete __attribute__ if no or old gcc */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define	__dead		__volatile
#define	__pure		__const
#endif
#elif __GNUC_PREREQ__(3, 4) || !defined(__STRICT_ANSI__)
#define __dead		__attribute__((__noreturn__))
#define __pure		__attribute__((__const__))
#endif

/*
 * GNU C version 2.96 adds explicit branch prediction so that
 * the CPU back-end can hint the processor and also so that
 * code blocks can be reordered such that the predicted path
 * sees a more linear flow, thus improving cache behavior, etc.
 *
 * The following two macros provide us with a way to utilize this
 * compiler feature.  Use __predict_true() if you expect the expression
 * to evaluate to true, and __predict_false() if you expect the
 * expression to evaluate to false.
 *
 * A few notes about usage:
 *
 *	* Generally, __predict_false() error condition checks (unless
 *	  you have some _strong_ reason to do otherwise, in which case
 *	  document it), and/or __predict_true() 'no-error' condition
 *	  checks, assuming you want to optimize for the no-error case.
 *
 *	* Other than that, if you don't know the likelihood of a test
 *	  succeeding from empirical or other 'hard' evidence, don't
 *	  make predictions.
 *
 *	* These are meant to be used in places that are run 'a lot'.
 *	  It is wasteful to make predictions in code that is run
 *	  seldomly (e.g. at subsystem initialization time) as the
 *	  basic block reordering that this affects can often generate
 *	  larger code.
 */
#if defined(lint)
#define __predict_true(exp)	(exp)
#define __predict_false(exp)	(exp)
#elif __GNUC_PREREQ__(2, 96)
#define __predict_true(exp)	__builtin_expect(((exp) != 0), 1)
#define __predict_false(exp)	__builtin_expect(((exp) != 0), 0)
#else
#define __predict_true(exp)	((exp) != 0)
#define __predict_false(exp)	((exp) != 0)
#endif

/* Delete pseudo-keywords wherever they are not available or needed. */
#ifndef __dead
#define	__dead
#define	__pure
#endif

#ifdef __ELF__
#define __weak_extern(sym)	__asm__(".weak " #sym);
#endif

#if (__GNUC__ >= 3) || __GNUC_PREREQ__(2, 7)
#define	__packed		__attribute__((__packed__))
#elif defined(__PCC__)
#define	__packed		_Pragma("packed 1")
#elif defined(lint)
#define	__packed
#endif

#if !__GNUC_PREREQ__(2, 8)
#define	__extension__
#endif

#ifdef lint
#define __aligned(x)
#define __func__		"__func__"
#define __restrict
#define __unused
#define __a_used
#define __a_deprecated
#elif defined(__PCC__)
#define __aligned(x)		_Pragma("aligned " #x)
#define __restrict		restrict
#define __unused		__attribute__((__unused__))
#define __a_used
#define __a_deprecated
#else
#define __aligned(x)		__attribute__((__aligned__(x)))
#define __unused		__attribute__((__unused__))
#define __a_used		__attribute__((__used__))
#define __a_deprecated		__attribute__((__deprecated__))
#endif

#if !defined(__restrict) && !defined(__cplusplus)
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#define __restrict		restrict
#else
#define __restrict
#endif
#endif
#define __restrict__		__restrict

#if defined(__ELF__) && defined(__GNUC__) && \
    !defined(__llvm__) && !defined(__NWCC__)
#define __IDSTRING(prefix, string)				\
	__asm__(".section .comment"				\
	"\n	.ascii	\"@@(\"\"#)" #prefix ": \""		\
	"\n	.asciz	\"" string "\""				\
	"\n	.previous")
#else
#define __IDSTRING_CONCAT(l,p)		__LINTED__ ## l ## _ ## p
#define __IDSTRING_EXPAND(l,p)		__IDSTRING_CONCAT(l,p)
#define __IDSTRING(prefix, string)				\
	static const char __IDSTRING_EXPAND(__LINE__,prefix) []	\
	    __a_used = "@@(""#)" #prefix ": " string
#endif
#define __COPYRIGHT(x)		__IDSTRING(copyright,x)
#define __KERNEL_RCSID(n,x)	__IDSTRING(rcsid_ ## n,x)
#define __RCSID(x)		__IDSTRING(rcsid,x)
#define __SCCSID(x)		__IDSTRING(sccsid,x)
#define __FBSDID(x)		__IDSTRING(fbsdid,x)

#ifndef _DIAGASSERT
#define _DIAGASSERT(x)		/* nothing */
#endif

#ifdef __ELF__
#define _C_LABEL_STRING(x)	x
#ifdef __GNUC__
#define __strong_alias(alias,sym) \
	__asm__(".globl	" __STRING(alias) " ; " __STRING(alias) " = " __STRING(sym))
#define __weak_alias(alias,sym) \
	__asm__(".weak	" __STRING(alias) " ; " __STRING(alias) " = " __STRING(sym))
#define __warn_references(sym,msg) \
	__asm__(".section .gnu.warning." __STRING(sym) " ; .ascii \"REF! " msg "\" ; .previous")
#endif
#else
#define _C_LABEL_STRING(x)	"_"x
#endif

#ifdef __NEED_NETBSD_COMPAT	/* one of the worst */
#ifdef __GNUC__
#define __UNCONST(x) __extension__({	\
	union {				\
		const void *cptr;	\
		void *vptr;		\
	} __UC_v;			\
					\
	__UC_v.cptr = (x);		\
	(__UC_v.vptr);			\
})
#else
#define __UNCONST(a)		((void *)(unsigned long)(const void *)(a))
#endif
#endif

/*
 * "The nice thing about standards is that there are so many to choose from."
 * There are a number of "feature test macros" specified by (different)
 * standards that determine which interfaces and types the header files
 * should expose.
 *
 * Because of inconsistencies in these macros, we define our own
 * set in the private name space that end in _VISIBLE.  These are
 * always defined and so headers can test their values easily.
 * Things can get tricky when multiple feature macros are defined.
 * We try to take the union of all the features requested.
 *
 * The following macros are guaranteed to have a value after cdefs.h
 * has been included:
 *	__POSIX_VISIBLE
 *	__XPG_VISIBLE
 *	__ISO_C_VISIBLE
 *	__BSD_VISIBLE
 */

/*
 * X/Open Portability Guides and Single Unix Specifications.
 * _XOPEN_SOURCE				XPG3
 * _XOPEN_SOURCE && _XOPEN_VERSION = 4		XPG4
 * _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED = 1	XPG4v2
 * _XOPEN_SOURCE == 500				XPG5
 * _XOPEN_SOURCE == 520				XPG5v2
 * _XOPEN_SOURCE == 600				POSIX 1003.1-2001 with XSI
 *
 * The XPG spec implies a specific value for _POSIX_C_SOURCE.
 */
#ifdef _XOPEN_SOURCE
# if (_XOPEN_SOURCE - 0 >= 600)
#  define __XPG_VISIBLE		600
#  undef _POSIX_C_SOURCE
#  define _POSIX_C_SOURCE	200112L
# elif (_XOPEN_SOURCE - 0 >= 520)
#  define __XPG_VISIBLE		520
#  undef _POSIX_C_SOURCE
#  define _POSIX_C_SOURCE	199506L
# elif (_XOPEN_SOURCE - 0 >= 500)
#  define __XPG_VISIBLE		500
#  undef _POSIX_C_SOURCE
#  define _POSIX_C_SOURCE	199506L
# elif (_XOPEN_SOURCE_EXTENDED - 0 == 1)
#  define __XPG_VISIBLE		420
# elif (_XOPEN_VERSION - 0 >= 4)
#  define __XPG_VISIBLE		400
# else
#  define __XPG_VISIBLE		300
# endif
#endif

/*
 * POSIX macros, these checks must follow the XOPEN ones above.
 *
 * _POSIX_SOURCE == 1		1003.1-1988 (superseded by _POSIX_C_SOURCE)
 * _POSIX_C_SOURCE == 1		1003.1-1990
 * _POSIX_C_SOURCE == 2		1003.2-1992
 * _POSIX_C_SOURCE == 199309L	1003.1b-1993
 * _POSIX_C_SOURCE == 199506L   1003.1c-1995, 1003.1i-1995,
 *				and the omnibus ISO/IEC 9945-1:1996
 * _POSIX_C_SOURCE == 200112L   1003.1-2001
 *
 * The POSIX spec implies a specific value for __ISO_C_VISIBLE, though
 * this may be overridden by the _ISOC99_SOURCE macro later.
 */
#ifdef _POSIX_C_SOURCE
# if (_POSIX_C_SOURCE - 0 >= 200112)
#  define __POSIX_VISIBLE	200112
#  define __ISO_C_VISIBLE	1999
# elif (_POSIX_C_SOURCE - 0 >= 199506)
#  define __POSIX_VISIBLE	199506
#  define __ISO_C_VISIBLE	1990
# elif (_POSIX_C_SOURCE - 0 >= 199309)
#  define __POSIX_VISIBLE	199309
#  define __ISO_C_VISIBLE	1990
# elif (_POSIX_C_SOURCE - 0 >= 2)
#  define __POSIX_VISIBLE	199209
#  define __ISO_C_VISIBLE	1990
# else
#  define __POSIX_VISIBLE	199009
#  define __ISO_C_VISIBLE	1990
# endif
#elif defined(_POSIX_SOURCE)
# define __POSIX_VISIBLE	198808
#  define __ISO_C_VISIBLE	0
#endif

/*
 * _ANSI_SOURCE means to expose ANSI C89 interfaces only.
 * If the the user defines it in addition to one of the POSIX or XOPEN
 * macros, assume the POSIX/XOPEN macro(s) should take precedence.
 */
#if defined(_ANSI_SOURCE) && !defined(__POSIX_VISIBLE) && \
    !defined(__XPG_VISIBLE)
# define __POSIX_VISIBLE	0
# define __XPG_VISIBLE		0
# define __ISO_C_VISIBLE	1990
#endif

/*
 * _ISOC99_SOURCE and __STDC_VERSION__ override any of the other macros since
 * they are non-exclusive.
 */
#if defined(_ISOC99_SOURCE) || (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901)
# undef __ISO_C_VISIBLE
# define __ISO_C_VISIBLE	1999
#endif

/*
 * Finally deal with BSD-specific interfaces that are not covered
 * by any standards.  We expose these when one of the POSIX or XPG
 * macros is not defined or if the user explicitly asks for them.
 */
#if !defined(_OPENBSD_SOURCE) && !defined(_NETBSD_SOURCE) && \
   (defined(_ANSI_SOURCE) || defined(__XPG_VISIBLE) || defined(__POSIX_VISIBLE))
# define __OPENBSD_VISIBLE	0
#endif

/*
 * _ALL_SOURCE and _GNU_SOURCE enable everything
 */
#if defined(_ALL_SOURCE) || defined(_GNU_SOURCE)
# undef __POSIX_VISIBLE
# undef __XPG_VISIBLE
# undef __ISO_C_VISIBLE
# undef __OPENBSD_VISIBLE
/* no #define, cf. default values below */
#endif

/*
 * __STRICT_ANSI__ (gcc -ansi) overrides everything else.
 */
#ifdef __STRICT_ANSI__
# undef __POSIX_VISIBLE
# define __POSIX_VISIBLE	0
# undef __XPG_VISIBLE
# define __XPG_VISIBLE		0
# undef __ISO_C_VISIBLE
# define __ISO_C_VISIBLE	1990
# undef __OPENBSD_VISIBLE
# define __OPENBSD_VISIBLE	0
# undef __STDC_WANT_LIB_EXT1__
# define __STDC_WANT_LIB_EXT1__	0
#endif

/*
 * Default values.
 */
#ifndef __XPG_VISIBLE
# define __XPG_VISIBLE		600
#endif
#ifndef __POSIX_VISIBLE
# define __POSIX_VISIBLE	200112
#endif
#ifndef __ISO_C_VISIBLE
# define __ISO_C_VISIBLE	1999
#endif
#ifndef __OPENBSD_VISIBLE
# define __OPENBSD_VISIBLE	1
#endif

/* transitional period */
#undef __BSD_VISIBLE
#ifdef __OPENBSD_VISIBLE
#define __BSD_VISIBLE		__OPENBSD_VISIBLE
#endif

#endif /* !_CDEFS_H_ */
@


1.31
log
@define restrict, __restrict, __restrict__ to C++ keyword or C99 keyword,
if available, nothing otherwise
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.29 2013/10/31 20:06:59 tg Exp $ */
d258 1
a258 1
	__asm__(".section .gnu.warning." __STRING(sym) " ; .ascii \"" msg "\" ; .previous")
@


1.30
log
@drop __STDC_WANT_LIB_EXT1__ if strict ANSI
@
text
@d200 1
a200 1
#define __restrict__
d206 1
a206 1
#define __restrict__		restrict
d217 9
@


1.29
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.28 2011/10/18 21:29:32 tg Exp $ */
d6 1
a6 1
 * Copyright © 2005, 2006, 2011, 2013
d414 2
@


1.28
log
@get rid of MD cdefs.h fully
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.27 2011/10/18 20:35:36 tg Exp $ */
d6 2
a7 2
 * Copyright (c) 2005, 2006, 2011
 *	Thorsten "mirabilos" Glaser <tg@@MirBSD.org>
d211 1
a211 1
#define __aligned(x)		__attribute__((__aligned__ (x)))
@


1.27
log
@• move __strong_alias to <sys/cdefs.h> from <syskern/libckern.h>
  for libm source to pick up
• move __weak_alias and __warn_references there, too, for convenience
• [sparc] remove bogus _C_LABEL
• empty <machine/cdefs.h> now as we got ELF common code
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.26 2011/07/06 20:29:08 tg Exp $ */
a47 2
#include <machine/cdefs.h>

@


1.26
log
@use __…__ in __attribute__ and introduce (gcc)
+#define __a_deprecated         __attribute__((__deprecated__))
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.25 2010/10/08 19:55:26 tg Exp $ */
d245 8
@


1.25
log
@add __BSD_VISIBLE, from OpenBSD for transitioning
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.24 2010/01/01 18:27:41 tg Exp $ */
d6 1
a6 1
 * Copyright (c) 2005, 2006
d122 1
a122 1
 * GCC >= 2.5 uses the __attribute__((attrs)) style.  All of these
d187 1
a187 3
#if __GNUC__ >= 3
#define	__packed		__attribute__((packed))
#elif __GNUC_PREREQ__(2, 7)
d205 1
d209 1
a209 1
#define __unused		__attribute__((unused))
d211 1
d213 4
a216 3
#define __aligned(x)		__attribute__((aligned (x)))
#define __unused		__attribute__((unused))
#define __a_used		__attribute__((used))
@


1.24
log
@__attribute__((used)) is not for pcc (but unused works)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.23 2009/10/16 17:35:57 tg Exp $ */
d281 1
a281 1
 *	__OPENBSD_VISIBLE
d425 6
@


1.23
log
@* make our includes more nwcc friendly (it now likes <stdbool.h> even
  in non-gnu mode)
* revamp stdarg handling (XXX wth is __gnuc_va_list for, moid?)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.22 2009/09/27 11:35:18 tg Exp $ */
d206 1
d210 2
a211 1
#define __unused
d215 1
d230 1
a230 1
	    __attribute__((used)) = "@@(""#)" #prefix ": " string
@


1.22
log
@bring back nwcc 0.8 by request of Nils Weller; almost working well
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.21 2008/11/10 01:40:14 tg Exp $ */
d127 1
a127 1
#if !__GNUC_PREREQ__(2, 5)
@


1.21
log
@improve pcc support
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.20 2008/06/29 19:24:57 tg Exp $ */
d215 2
a216 1
#if defined(__ELF__) && defined(__GNUC__) && !defined(__llvm__)
@


1.20
log
@no inline asm if building for LLVM backends
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.19 2008/06/21 22:37:18 tg Exp $ */
d86 1
a86 1
#if defined(__cplusplus) || defined(__PCC__)
d88 1
a88 1
#elif !defined(__GNUC__) && !defined(lint)
@


1.19
log
@• <sys/cdefs.h>: Implement syntactically and semantically correct support
  for __packed (seems to at least not break things) and __restrict__ (the
  C99 “restrict” keyword is supported) for pcc to #10-stable and HEAD
• <sys/cdefs.h>: Implement syntactically and semantically correct support
  for __aligned(x) for gcc and pcc to HEAD; not working correctly for pcc
  due to pcc bugs though
• errata10.hts: document __packed and __restrict__ additions
• mksh.hts: pcc-current builds mksh fine again (with these changes)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.18 2008/06/17 22:35:32 tg Exp $ */
d215 1
a215 1
#if defined(__ELF__) && defined(__GNUC__)
@


1.18
log
@+__FBSDID
for compatibility
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.17 2007/09/21 08:32:07 tg Exp $ */
d191 3
a193 1
#elif defined(lint) || /* for now */ defined(__PCC__)
d202 1
d206 4
d211 1
@


1.17
log
@basic pcc support, from tnf r1.65
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.16 2007/05/18 00:47:58 tg Exp $ */
d224 1
@


1.17.4.1
log
@• <sys/cdefs.h>: Implement syntactically and semantically correct support
  for __packed (seems to at least not break things) and __restrict__ (the
  C99 “restrict” keyword is supported) for pcc to #10-stable and HEAD
• <sys/cdefs.h>: Implement syntactically and semantically correct support
  for __aligned(x) for gcc and pcc to HEAD; not working correctly for pcc
  due to pcc bugs though
• errata10.hts: document __packed and __restrict__ additions
• mksh.hts: pcc-current builds mksh fine again (with these changes)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.17 2007/09/21 08:32:07 tg Exp $ */
d191 1
a191 3
#elif defined(__PCC__)
#define	__packed		_Pragma("packed 1")
#elif defined(lint)
a202 3
#elif defined(__PCC__)
#define __restrict__		restrict
#define __unused
@


1.16
log
@add some netbsd compatibility (even really cruel stuff like __UNCONST(x))
to the system headers (the cruel stuff ifdef'd out tho), also the namespace
clean __uint8_t &c. types (should be the other way round tho)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.15 2007/02/02 21:05:30 tg Exp $ */
d86 2
a87 2
#if defined(__cplusplus)
#define	__inline	inline		/* convert to C++ keyword */
d191 1
a191 1
#elif defined(lint)
@


1.15
log
@_GNU_SOURCE is like _ALL_SOURCE
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.14 2006/11/03 18:22:30 tg Exp $ */
a220 1
#ifdef lint
a221 3
#else
#define __KERNEL_RCSID(n,x)	/* nothing */
#endif
d229 22
@


1.14
log
@honour _NETBSD_SOURCE (= _OPENBSD_SOURCE) and _ALL_SOURCE
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.13 2006/11/03 17:14:41 tg Exp $ */
d354 1
a354 1
 * _ALL_SOURCE enables everything
d356 1
a356 1
#ifdef _ALL_SOURCE
@


1.13
log
@add _DIAGASSERT to <sys/cdefs.h> for TNF compatibility
XXX revisit this later
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.12 2006/10/03 19:46:14 tg Exp $ */
d348 1
a348 1
#if !defined(_OPENBSD_SOURCE) && \
d354 11
@


1.12
log
@use the same idstring stuff everywhere, makes sense
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.11 2006/09/29 21:39:22 tg Exp $ */
d229 4
@


1.11
log
@don't add parens around the string if it's about to be concatenated
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.10 2006/09/29 21:35:42 tg Exp $ */
d218 1
a218 1
	    __attribute__((used)) = "@@(""#)" string
@


1.10
log
@* add __COPYRIGHT()
* add @@(#) to the asm version too, since it gets stripped in
  space-constrained environments anyway
* split @@( and #) so what doesn't run wild on cdefs.h itself
* sync sendmail which provides its own what markers
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.9 2006/09/21 21:01:45 tg Exp $ */
d218 1
a218 1
	    __attribute__((used)) = "@@(""#)" (string)
@


1.9
log
@* fix __IDSTRING for non-ELF-gcc systems to include __LINE__
  so you can use e.g. two __RCSID() macro invocations in one file
* for ELF-gcc systems, begin the .comment-integrated prefix
  with @@(#) so that SCCS tools find it as well (not done for
  'static const char foo[]' systems due to space considerations)
* help lint with __func__ and undef __GNUC__ just in case
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.8 2005/11/23 20:32:41 tg Exp $ */
d7 1
a7 1
 *	Thorsten "mirabile" Glaser <tg@@MirBSD.org>
d208 1
a208 1
#define	__IDSTRING(prefix, string)				\
d210 1
a210 1
	"\n	.ascii	\"@@(#)" #prefix ": \""			\
d216 1
a216 1
#define	__IDSTRING(prefix, string)				\
d218 1
a218 1
	    __attribute__((used)) = (string)
d220 1
d222 1
a222 1
#define	__KERNEL_RCSID(n,x)	__IDSTRING(rcsid_ ## n,x)
d224 1
a224 1
#define	__KERNEL_RCSID(n,x)	/* nothing */
d226 2
a227 2
#define	__RCSID(x)		__IDSTRING(rcsid,x)
#define	__SCCSID(x)		__IDSTRING(sccsid,x)
@


1.8
log
@for lint, delete __restrict__
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.7 2005/07/07 14:39:27 tg Exp $ */
d6 1
a6 1
 * Copyright (c) 2005
d61 3
d200 1
d202 3
d207 1
a207 4
#ifdef lint
#define	__IDSTRING(prefix, string)				\
	static const char __LINTED__ ## prefix [] = (string)
#elif defined(__ELF__) && defined(__GNUC__)
d210 1
a210 1
	"\n	.ascii	\"" #prefix ": \""			\
d214 2
d217 1
a217 1
	static const char __ ## prefix []			\
@


1.7
log
@merge
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.6 2005/04/26 08:32:15 tg Exp $ */
d197 4
@


1.6
log
@oops, missed a stringifyer
@
text
@d1 2
a2 2
/**	$MirOS: src/sys/sys/cdefs.h,v 1.5 2005/04/26 08:27:47 tg Exp $ */
/*	$OpenBSD: cdefs.h,v 1.13 2004/01/28 03:33:29 millert Exp $	*/
d218 150
@


1.5
log
@it's __used__ not __unused__ here
and we missed the prefix in the ELF/.comment case
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.4 2005/04/17 01:17:21 tg Exp $ */
d202 1
a202 1
	"\n	.ascii	\"" prefix ": \""			\
@


1.4
log
@delint RCS IDs
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.3 2005/03/12 18:27:29 tg Exp $ */
d5 3
a7 1
/*
d202 1
d208 1
a208 1
	    __attribute__((__unused__)) = (string)
@


1.3
log
@help __dead for -std=c99 -Wmissing-noreturn (3.4)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/sys/cdefs.h,v 1.2 2005/03/06 21:28:33 tg Exp $ */
d196 1
a196 1
	static const char __ ## prefix [] = (string)
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 1
a1 1
/**	$MirOS$ */
d120 1
d128 1
a128 1
#elif !defined(__STRICT_ANSI__)
@


1.1
log
@Initial revision
@
text
@d1 1
d39 6
a44 2
#ifndef	_CDEFS_H_
#define	_CDEFS_H_
d83 1
a83 2
#else
#if !defined(__GNUC__) && !defined(lint)
d85 1
a85 2
#endif /* !__GNUC__ && !lint */
#endif /* !__cplusplus */
a120 1

d122 1
a122 1
#define	__attribute__(x)	/* delete __attribute__ if non-gcc or gcc1 */
d147 1
a147 1
 *	  document it), and/or __predict_true() `no-error' condition
d151 1
a151 1
 *	  succeeding from empirical or other `hard' evidence, don't
d154 1
a154 1
 *	* These are meant to be used in places that are run `a lot'.
d160 4
a163 1
#if __GNUC_PREREQ__(2, 96)
d177 8
a184 2
#if __GNUC_PREREQ__(2, 7)
#define	__packed	__attribute__((__packed__))
d193 21
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@merge some more stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.18 2005/05/27 21:28:12 millert Exp $	*/
a181 150
/*
 * "The nice thing about standards is that there are so many to choose from."
 * There are a number of "feature test macros" specified by (different)
 * standards that determine which interfaces and types the header files
 * should expose.
 *
 * Because of inconsistencies in these macros, we define our own
 * set in the private name space that end in _VISIBLE.  These are
 * always defined and so headers can test their values easily.
 * Things can get tricky when multiple feature macros are defined.
 * We try to take the union of all the features requested.
 *
 * The following macros are guaranteed to have a value after cdefs.h
 * has been included:
 *	__POSIX_VISIBLE
 *	__XPG_VISIBLE
 *	__ISO_C_VISIBLE
 *	__OPENBSD_VISIBLE
 */

/*
 * X/Open Portability Guides and Single Unix Specifications.
 * _XOPEN_SOURCE				XPG3
 * _XOPEN_SOURCE && _XOPEN_VERSION = 4		XPG4
 * _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED = 1	XPG4v2
 * _XOPEN_SOURCE == 500				XPG5
 * _XOPEN_SOURCE == 520				XPG5v2
 * _XOPEN_SOURCE == 600				POSIX 1003.1-2001 with XSI
 *
 * The XPG spec implies a specific value for _POSIX_C_SOURCE.
 */
#ifdef _XOPEN_SOURCE
# if (_XOPEN_SOURCE - 0 >= 600)
#  define __XPG_VISIBLE		600
#  undef _POSIX_C_SOURCE
#  define _POSIX_C_SOURCE	200112L
# elif (_XOPEN_SOURCE - 0 >= 520)
#  define __XPG_VISIBLE		520
#  undef _POSIX_C_SOURCE
#  define _POSIX_C_SOURCE	199506L
# elif (_XOPEN_SOURCE - 0 >= 500)
#  define __XPG_VISIBLE		500
#  undef _POSIX_C_SOURCE
#  define _POSIX_C_SOURCE	199506L
# elif (_XOPEN_SOURCE_EXTENDED - 0 == 1)
#  define __XPG_VISIBLE		420
# elif (_XOPEN_VERSION - 0 >= 4)
#  define __XPG_VISIBLE		400
# else
#  define __XPG_VISIBLE		300
# endif
#endif

/*
 * POSIX macros, these checks must follow the XOPEN ones above.
 *
 * _POSIX_SOURCE == 1		1003.1-1988 (superseded by _POSIX_C_SOURCE)
 * _POSIX_C_SOURCE == 1		1003.1-1990
 * _POSIX_C_SOURCE == 2		1003.2-1992
 * _POSIX_C_SOURCE == 199309L	1003.1b-1993
 * _POSIX_C_SOURCE == 199506L   1003.1c-1995, 1003.1i-1995,
 *				and the omnibus ISO/IEC 9945-1:1996
 * _POSIX_C_SOURCE == 200112L   1003.1-2001
 *
 * The POSIX spec implies a specific value for __ISO_C_VISIBLE, though
 * this may be overridden by the _ISOC99_SOURCE macro later.
 */
#ifdef _POSIX_C_SOURCE
# if (_POSIX_C_SOURCE - 0 >= 200112)
#  define __POSIX_VISIBLE	200112
#  define __ISO_C_VISIBLE	1999
# elif (_POSIX_C_SOURCE - 0 >= 199506)
#  define __POSIX_VISIBLE	199506
#  define __ISO_C_VISIBLE	1990
# elif (_POSIX_C_SOURCE - 0 >= 199309)
#  define __POSIX_VISIBLE	199309
#  define __ISO_C_VISIBLE	1990
# elif (_POSIX_C_SOURCE - 0 >= 2)
#  define __POSIX_VISIBLE	199209
#  define __ISO_C_VISIBLE	1990
# else
#  define __POSIX_VISIBLE	199009
#  define __ISO_C_VISIBLE	1990
# endif
#elif defined(_POSIX_SOURCE)
# define __POSIX_VISIBLE	198808
#  define __ISO_C_VISIBLE	0
#endif

/*
 * _ANSI_SOURCE means to expose ANSI C89 interfaces only.
 * If the the user defines it in addition to one of the POSIX or XOPEN
 * macros, assume the POSIX/XOPEN macro(s) should take precedence.
 */
#if defined(_ANSI_SOURCE) && !defined(__POSIX_VISIBLE) && \
    !defined(__XPG_VISIBLE)
# define __POSIX_VISIBLE	0
# define __XPG_VISIBLE		0
# define __ISO_C_VISIBLE	1990
#endif

/*
 * _ISOC99_SOURCE and __STDC_VERSION__ override any of the other macros since
 * they are non-exclusive.
 */
#if defined(_ISOC99_SOURCE) || (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901)
# undef __ISO_C_VISIBLE
# define __ISO_C_VISIBLE	1999
#endif

/*
 * Finally deal with BSD-specific interfaces that are not covered
 * by any standards.  We expose these when one of the POSIX or XPG
 * macros is not defined or if the user explicitly asks for them.
 */
#if !defined(_OPENBSD_SOURCE) && \
   (defined(_ANSI_SOURCE) || defined(__XPG_VISIBLE) || defined(__POSIX_VISIBLE))
# define __OPENBSD_VISIBLE	0
#endif

/*
 * __STRICT_ANSI__ (gcc -ansi) overrides everything else.
 */
#ifdef __STRICT_ANSI__
# undef __POSIX_VISIBLE
# define __POSIX_VISIBLE	0
# undef __XPG_VISIBLE
# define __XPG_VISIBLE		0
# undef __ISO_C_VISIBLE
# define __ISO_C_VISIBLE	1990
# undef __OPENBSD_VISIBLE
# define __OPENBSD_VISIBLE	0
#endif

/*
 * Default values.
 */
#ifndef __XPG_VISIBLE
# define __XPG_VISIBLE		600
#endif
#ifndef __POSIX_VISIBLE
# define __POSIX_VISIBLE	200112
#endif
#ifndef __ISO_C_VISIBLE
# define __ISO_C_VISIBLE	1999
#endif
#ifndef __OPENBSD_VISIBLE
# define __OPENBSD_VISIBLE	1
#endif

@

