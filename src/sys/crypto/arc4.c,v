head	1.3;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.1
	MIRBSD_10:1.1.1.1.0.6
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507032030:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2010.09.21.21.24.22;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004C992261692DCA0F;

1.2
date	2010.09.12.17.10.45;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004C8D0939027D8BE7;

1.1
date	2005.02.05.17.27.44;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.44;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@use arc4random() a bit more efficiently
@
text
@/* $MirOS: src/sys/crypto/arc4.c,v 1.2 2010/09/12 17:10:45 tg Exp $ */

/* rewritten; no code left, only the API */

#include <sys/types.h>
#include <crypto/arc4.h>

void
rc4_keysetup(struct rc4_ctx *ctx, const u_char *key, u_int32_t klen)
{
	arcfour_init(ctx);
	arcfour_ksa(ctx, key, klen);
}

void
rc4_crypt(struct rc4_ctx *ctx, const u_char *src, u_char *dst, u_int32_t len)
{
	while (len--)
		*dst++ = *src++ ^ arcfour_byte(ctx);
}
@


1.2
log
@new implementation of arc4random(3) API (except arc4random_uniform(3),
which though has been split off earlier today)

deprecate arc4random_push arc4random_pushb arc4random_pushk
in favour of arc4random_pushb_fast as well

hide internal symbols from user with a version script (only some,
until the next major bump)

make deprecated functions into macros already

switch some kernel code to use the new shared code already; rewrite
of kernel arc4random(9) will come next/later
@
text
@d1 1
a1 1
/* $MirOS$ */
d9 1
a9 1
rc4_keysetup(struct rc4_ctx *ctx, u_char *key, u_int32_t klen)
d16 1
a16 1
rc4_crypt(struct rc4_ctx *ctx, u_char *src, u_char *dst, u_int32_t len)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 16
/*	$OpenBSD: arc4.c,v 1.1 2003/10/07 07:07:14 markus Exp $	*/
/*
 * Copyright (c) 2003 Markus Friedl <markus@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
d3 1
a3 1
#include <sys/types.h>                                                         
d5 2
a6 8
#include <crypto/arc4.h> 

#define RC4SWAP(x,y) \
	do { \
		u_int8_t t = ctx->state[x];  \
		ctx->state[x] = ctx->state[y]; \
		ctx->state[y] = t; \
	} while(0)
d11 2
a12 12
	u_int8_t x, y;
	u_int32_t i;

	x = y = 0;
	for (i = 0; i < RC4STATE; i++)
		ctx->state[i] = i;
	for (i = 0; i < RC4STATE; i++) {
		y = (key[x] + ctx->state[i] + y) % RC4STATE;
		RC4SWAP(i, y);
		x = (x + 1) % klen;
	}
	ctx->x = ctx->y = 0;
d16 1
a16 2
rc4_crypt(struct rc4_ctx *ctx, u_char *src, u_char *dst,
    u_int32_t len)
d18 2
a19 9
	u_int32_t i;

	for (i = 0; i < len; i++) {
		ctx->x = (ctx->x + 1) % RC4STATE;
		ctx->y = (ctx->state[ctx->x] + ctx->y) % RC4STATE;
		RC4SWAP(ctx->x, ctx->y);
		dst[i] = src[i] ^ ctx->state[
		   (ctx->state[ctx->x] + ctx->state[ctx->y]) % RC4STATE];
	}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
