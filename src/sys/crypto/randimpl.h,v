head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2015.07.07.18.00.42;	author tg;	state Exp;
branches;
next	1.3;
commitid	100559C13E400E6958B;

1.3
date	2011.02.19.14.41.39;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004D5FD6AD4C707315;

1.2
date	2010.12.23.19.25.31;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004D13A2417F2232C8;

1.1
date	2010.09.19.18.55.34;	author tg;	state Exp;
branches;
next	;
commitid	1004C965C8F46717878;


desc
@@


1.4
log
@save 3 bytes
@
text
@/* $MirOS: src/sys/crypto/randimpl.h,v 1.3 2011/02/19 14:41:39 tg Exp $ */

/*#define RNDEBUG*/

/* contains RNG implementation details, DO NOT include in your code! */

#ifndef __IMPLEMENTATION_OF_RANDOM_H__
#define __IMPLEMENTATION_OF_RANDOM_H__

#include <dev/rndvar.h>

/* there is actually only one of these, globally */
#ifndef IN_RANDOM_CORE
extern
#endif
  struct {
	u_int add_ptr;
	u_int entropy_count;
	u_char input_rotate;
	u_int32_t pool[POOLWORDS];
	u_int asleep;
	u_int tmo;
} /* singleton */ random_state;

/* import from kernel */
extern int hz;

/* import from crypto/arc4random.c */
extern void arc4random_reinit(void *);

/* import from crypto/randcore.c */
extern uint8_t rnd_attached;
extern void rnd_flush(void);

#ifdef RNDEBUG
#define RD_INPUT	0x000F	/* input data */
#define RD_OUTPUT	0x00F0	/* output data */
#define RD_WAIT		0x0100	/* sleep/wakeup for good data */
#define	RD_ARC4RANDOM	0x0200	/* arc4random(9) */
#define RD_ARC4LOPOOL	0x0400	/* lopool collapser */
#define RD_HASHLOPOOL	0x0800	/* lopool hasher */
#define RD_ALWAYS	0x1000	/* always set, for errors */
#define RD_SRANDOM	0x2000	/* srandom() calls */
#define RD_ENQUEUE	0x4000	/* every enqueue (loud!) */
#ifdef IN_RANDOM_CORE
int rnd_debug = RD_ALWAYS;
#else
extern int rnd_debug;
#endif
extern int db_active;
extern void rnd_lopool_addvq(unsigned long);
#undef RNDEBUG
#define RNDEBUG(flag, ...)	do {				\
	if (!db_active && (rnd_debug & (flag)))			\
		printf(__VA_ARGS__);				\
} while (/* CONSTCOND */ 0)
#else
#define RNDEBUG(flag, ...)	/* nothing */
#define rnd_lopool_addvq	rnd_lopool_addv
#endif

/* import from dev/rnd.c */
extern void rndpool_init(void);

#endif
@


1.3
log
@• kernel: merge rnd_flush() declarations into <randimpl.h>
• randomioctl: let RNDSTIRARC4 invoke rnd_flush() if called from init(8)
• init, reboot/halt: use unified "pathnames.h"
• init: use RNDSTIRARC4 to reset all pools (lopool, arc4random) on halt
• init: write 2048 bytes to /var/db/host.random to make it an even 8 KiB
• init: redesign code for that, minimise sleep calls, tested with tempo-
  rary printf/warning/etc. calls in userspace and kernel
• init: upon SIGTSTP, invoke RNDSTIRARC4 to help halt/reboot
• halt/reboot: do similar things like init wrt. signals, output, seed file
@
text
@d1 1
a1 1
/* $MirOS: src/sys/crypto/randimpl.h,v 1.2 2010/12/23 19:25:31 tg Exp $ */
d32 1
a32 1
extern int rnd_attached;
@


1.2
log
@fast-forward through OpenBSD-current RNG:
src/sys/dev/rnd.c,v 1.105
src/lib/libc/crypt/arc4random.c,v 1.22
this fixes some small issues. also, optimise a little and correct comments.
@
text
@d1 1
a1 1
/* $MirOS: src/sys/crypto/randimpl.h,v 1.1 2010/09/19 18:55:34 tg Exp $ */
d33 1
@


1.1
log
@the promised new RNG (play with RNDEBUG in crypto/randimpl.h to make
it verbose; I did, for a while and a bit of fine-tuning)
@
text
@d1 1
a1 1
/* $MirOS$ */
d13 4
a16 1
extern struct random_bucket {
d28 1
a28 1
/* import from arc4random.c */
d31 1
a31 1
/* import from random.c */
d61 1
a61 1
/* import from rndpool.c */
@

