head	1.4;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.2
	MIRBSD_10:1.1.1.2.0.6
	MIRBSD_10_BASE:1.1.1.2
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200507032030:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.10.31.20.06.49;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005272B7081B0E5655;

1.3
date	2008.03.27.22.39.07;	author tg;	state Exp;
branches;
next	1.2;
commitid	10047EC212806BE2132;

1.2
date	2008.03.21.20.57.31;	author tg;	state Exp;
branches;
next	1.1;
commitid	10047E420D8027C8058;

1.1
date	2005.02.05.17.27.44;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.44;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.03.20.50.31;	author tg;	state Exp;
branches
	1.1.1.2.4.1;
next	;
commitid	244842c84fad13d2;

1.1.1.2.4.1
date	2007.10.20.23.03.54;	author tg;	state Exp;
branches;
next	1.1.1.2.4.2;
commitid	100471A891707DDCF39;

1.1.1.2.4.2
date	2007.10.21.17.11.50;	author tg;	state Exp;
branches;
next	1.1.1.2.4.3;
commitid	100471B879B7F0DA6F7;

1.1.1.2.4.3
date	2007.10.21.17.16.21;	author tg;	state Exp;
branches;
next	1.1.1.2.4.4;
commitid	100471B89763DA14371;

1.1.1.2.4.4
date	2007.10.21.17.48.13;	author tg;	state Exp;
branches;
next	1.1.1.2.4.5;
commitid	100471B90DA5FEF29CA;

1.1.1.2.4.5
date	2007.10.21.17.59.59;	author tg;	state Exp;
branches;
next	1.1.1.2.4.6;
commitid	100471B93AC35FE1270;

1.1.1.2.4.6
date	2008.03.20.16.51.06;	author tg;	state Exp;
branches;
next	1.1.1.2.4.7;
commitid	10047E2946B53F3F802;

1.1.1.2.4.7
date	2008.03.20.18.58.59;	author tg;	state Exp;
branches;
next	1.1.1.2.4.8;
commitid	10047E2B3FD41754146;

1.1.1.2.4.8
date	2008.03.20.19.07.05;	author tg;	state Exp;
branches;
next	1.1.1.2.4.9;
commitid	10047E2B5EF13AF15B8;

1.1.1.2.4.9
date	2008.03.20.19.14.50;	author tg;	state Exp;
branches;
next	1.1.1.2.4.10;
commitid	10047E2B7BD0EBC910E;

1.1.1.2.4.10
date	2008.03.20.19.18.00;	author tg;	state Exp;
branches;
next	1.1.1.2.4.11;
commitid	10047E2B8775A9E721C;

1.1.1.2.4.11
date	2008.03.20.21.21.53;	author tg;	state Exp;
branches;
next	1.1.1.2.4.12;
commitid	10047E2D57F15CA03F0;

1.1.1.2.4.12
date	2008.03.21.19.51.53;	author tg;	state Exp;
branches;
next	;
commitid	10047E411ED1F6A6593;


desc
@@


1.4
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/**	$MirOS: src/sys/crypto/rijndael.h,v 1.3 2008/03/27 22:39:07 tg Exp $ */
/*	$OpenBSD: rijndael.h,v 1.11 2005/05/25 05:47:53 markus Exp $ */

/*-
 * Adaptions for VIA C3 hardware cryptography and integration is
 * Copyright © 2008, 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 */

/**
 * rijndael-alg-fst.h
 *
 * @@version 3.0 (December 2000)
 *
 * Optimised ANSI C code for the Rijndael cipher (now AES)
 *
 * @@author Vincent Rijmen <vincent.rijmen@@esat.kuleuven.ac.be>
 * @@author Antoon Bosselaers <antoon.bosselaers@@esat.kuleuven.ac.be>
 * @@author Paulo Barreto <paulo.barreto@@terra.com.br>
 *
 * This code is hereby placed in the public domain.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef __RIJNDAEL_H
#define __RIJNDAEL_H

#if !defined(SMALL_KERNEL) || (defined(i386) && defined(CRYPTO))
#define __RIJNDAEL_ALIGNED	__attribute__((__aligned__(16)))
#else
#define __RIJNDAEL_ALIGNED	__attribute__((__aligned__(4)))
#endif

#define MAXKC	(256/32)
#define MAXKB	(256/8)
#define MAXNR	14

typedef unsigned char	u8;
typedef unsigned short	u16;
typedef unsigned int	u32;

/*  VIA C3 additional information */
struct viac3_rijndael_ctx {
	uint32_t cw0;			/* control word */
};

/*  The structure for key information */
typedef struct {
	u32	ek[4*(MAXNR + 1) + 4]	/* encrypt key schedule */
	    __RIJNDAEL_ALIGNED;
	u32	dk[4*(MAXNR + 1) + 4]	/* decrypt key schedule */
	    __RIJNDAEL_ALIGNED;
	union {
		struct viac3_rijndael_ctx via;
	} hwcr_info;
	u8	enc_only;		/* context contains only encrypt schedule */
	u8	Nr;			/* key-length-dependent number of rounds */
#define RIJNDAEL_HWCR_SOFTWARE	0
#define RIJNDAEL_HWCR_VIA	1
	u8	hwcr_id;		/* which crypto processor is used */
} rijndael_ctx __RIJNDAEL_ALIGNED;

typedef int (*rijndael_setkey_t)(rijndael_ctx *, u_char *, int);
typedef void (*rijndael_do_cbc_t)(rijndael_ctx *, u_char *, u_char *, u_char *,
    int);

int	 rijndael_set_key(rijndael_ctx *, u_char *, int);
int	 rijndael_set_key_enc_only(rijndael_ctx *, u_char *, int);
void	 rijndael_decrypt(rijndael_ctx *, u_char *, u_char *);
void	 rijndael_encrypt(rijndael_ctx *, u_char *, u_char *);
void	 rijndael_cbc_decrypt(rijndael_ctx *, u_char *, u_char *, u_char *,
	    int);
void	 rijndael_cbc_encrypt(rijndael_ctx *, u_char *, u_char *, u_char *,
	    int);

extern rijndael_setkey_t rijndael_set_key_fast;
extern rijndael_setkey_t rijndael_set_key_enc_only_fast;
extern rijndael_do_cbc_t rijndael_cbc_decrypt_fast;
extern rijndael_do_cbc_t rijndael_cbc_encrypt_fast;

int	rijndaelKeySetupEnc(unsigned int [], const unsigned char [], int);
int	rijndaelKeySetupDec(unsigned int [], const unsigned char [], int);
void	rijndaelEncrypt(const unsigned int [], int, const unsigned char [],
	    unsigned char []);

#endif /* __RIJNDAEL_H */
@


1.3
log
@• if SMALL_KERNEL (and not i386 and CRYPTO), reduce rĳndæl alignment to 4
  bytes, as the 16 byte alignment is only required for the VIA C3/C7 ACE
• VIA C3 code: use a single buffer the size of one page, instead of one
  buffer malloc(9)d and free(9)d for every request *AND* a buffer of 16
  bytes only for the case of it not working
  ‣ great speed-up (I think)
  ‣ if SMALL_KERNEL and !CRYPTO, we don’t include this code anyway
  ‣ we usually crypt one page (swap) or 512 bytes (vnd) only anyway
untested
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.2 2008/03/21 20:57:31 tg Exp $ */
d6 2
a7 1
 * Copyright (c) 2008 Thorsten Glaser
d40 1
a40 1
#define __RIJNDAEL_ALIGNED	__attribute__((aligned (16)))
d42 1
a42 1
#define __RIJNDAEL_ALIGNED	__attribute__((aligned (4)))
@


1.2
log
@merge the tg-crypto-improvements branch in their entirety:
• more efficient uvm_swap_encrypt code
• kernel-global AES-CBC (128, 192, 256) API
• kernel-global fast-AES API through function pointers
• VIA C3/C7 PadLock™ is eligible for the fast API
• hifn(4) and friends are not: modern CPUs are faster in software sometimes
• fix a data corruption bug in the VIA HW-AES code
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.1.1.2.4.12 2008/03/21 19:51:53 tg Exp $ */
d38 6
d60 1
a60 1
	    __attribute__((aligned (16)));
d62 1
a62 1
	    __attribute__((aligned (16)));
d71 1
a71 1
} rijndael_ctx __attribute__((aligned (16)));
@


1.1
log
@Initial revision
@
text
@d1 7
a7 1
/*	$OpenBSD: rijndael.h,v 1.9 2004/02/05 18:55:20 deraadt Exp $ */
d34 1
d46 5
d53 17
a69 5
	int	enc_only;		/* context contains only encrypt schedule */
	int	Nr;			/* key-length-dependent number of rounds */
	u32	ek[4*(MAXNR + 1)];	/* encrypt key schedule */
	u32	dk[4*(MAXNR + 1)];	/* decrypt key schedule */
} rijndael_ctx;
d71 2
a72 2
void	 rijndael_set_key(rijndael_ctx *, u_char *, int);
void	 rijndael_set_key_enc_only(rijndael_ctx *, u_char *, int);
d75 9
d87 2
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@more stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.11 2005/05/25 05:47:53 markus Exp $ */
d47 2
a48 2
int	 rijndael_set_key(rijndael_ctx *, u_char *, int);
int	 rijndael_set_key_enc_only(rijndael_ctx *, u_char *, int);
a53 2
void	rijndaelEncrypt(const unsigned int [], int, const unsigned char [],
	    unsigned char []);
@


1.1.1.2.4.1
log
@add indirection through function pointers rijndael_encrypt_fast and
rijndael_decrypt_fast, which currently just call the rijndael.c AES
software functions rijndael_encrypt and rijndael_decrypt, but a CPU
with AES support (VIA C3/C7, AMD Geode LX) can change these to some
accelerated function (cryptocards shall NOT do it since their over-
head, especially bus I/O, is too big)

this is to be used e.g. by uvm.swapencrypt
@
text
@a0 1
/**	$MirOS$ */
a51 5
typedef void (*rijndael_xcrypt_t)(rijndael_ctx *, u_char *, u_char *);

extern rijndael_xcrypt_t rijndael_decrypt_fast;
extern rijndael_xcrypt_t rijndael_encrypt_fast;

@


1.1.1.2.4.2
log
@we need to use a different key setup method too
XXX where do we store algorithm-specific information?
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.1.1.2.4.1 2007/10/20 23:03:54 tg Exp $ */
a52 1
typedef int (*rijndael_setkey_t)(rijndael_ctx *, u_char *, int);
a54 2
extern rijndael_setkey_t rijndael_set_key_fast;
extern rijndael_setkey_t rijndael_set_key_enc_only_fast;
@


1.1.1.2.4.3
log
@implement hwcr specific storage
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.1.1.2.4.2 2007/10/21 17:11:50 tg Exp $ */
a41 1
	void   *hwcr_info;		/* hardware crypto specific information */
a45 3
	u8	hwcr_nr;		/* ID number of hw crypto processor */
#define RIJNDAEL_HWCR_SOFTWARE	0
#define RIJNDAEL_HWCR_VIA	1
@


1.1.1.2.4.4
log
@begin implementing the VIA C3 hwcrypt operations
missing: rijndael.c does ECB only, we need xcrypt-ecb call in via.c now
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.1.1.2.4.3 2007/10/21 17:16:21 tg Exp $ */
a39 5
/*  VIA C3 additional information */
struct viac3_rijndael_ctx {
	uint32_t cw0;			/* control word */
};

d42 1
a46 3
	union {
		struct viac3_rijndael_ctx via;
	} hwcr_info;
@


1.1.1.2.4.5
log
@padlock has 128-bit alignment requirements
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.1.1.2.4.4 2007/10/21 17:48:13 tg Exp $ */
a46 2
	u32	ek[4*(MAXNR + 1) + 4];	/* encrypt key schedule */
	u32	dk[4*(MAXNR + 1) + 4];	/* decrypt key schedule */
d49 2
d57 1
a57 1
} rijndael_ctx __attribute__((aligned (16)));
@


1.1.1.2.4.6
log
@revert all of the old diffs for the tg-crypto-improvements branch,
except the alignment changes to the rĳndaël ctx structure
@
text
@d1 1
a1 1
/**	$MirOS$ */
d40 5
d51 6
d64 8
@


1.1.1.2.4.7
log
@AES-CBC encryption and decryption routines (I hope)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.1.1.2.4.6 2008/03/20 16:51:06 tg Exp $ */
a51 4
void	 rijndael_cbc_decrypt(rijndael_ctx *, u_char *, u_char *, u_char *,
	    int);
void	 rijndael_cbc_encrypt(rijndael_ctx *, u_char *, u_char *, u_char *,
	    int);
@


1.1.1.2.4.8
log
@save space
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.1.1.2.4.7 2008/03/20 18:58:59 tg Exp $ */
d44 2
a45 2
	u8	enc_only;		/* context contains only encrypt schedule */
	u8	Nr;			/* key-length-dependent number of rounds */
@


1.1.1.2.4.9
log
@integrate hwcr_id stuff
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.1.1.2.4.8 2008/03/20 19:07:05 tg Exp $ */
a39 5
/*  VIA C3 additional information */
struct viac3_rijndael_ctx {
	uint32_t cw0;			/* control word */
};

a43 3
	union {
		struct viac3_rijndael_ctx via;
	} hwcr_info;
a45 3
#define RIJNDAEL_HWCR_SOFTWARE	0
#define RIJNDAEL_HWCR_VIA	1
	u8	hwcr_id;		/* which crypto processor is used */
@


1.1.1.2.4.10
log
@set the function pointers
→ merge complete
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.1.1.2.4.9 2008/03/20 19:14:50 tg Exp $ */
a39 4
typedef int (*rijndael_setkey_t)(rijndael_ctx *, u_char *, int);
typedef void (*rijndael_do_cbc_t)(rijndael_ctx *, u_char *, u_char *, u_char *,
    int);

a67 5
extern rijndael_setkey_t rijndael_set_key_fast;
extern rijndael_setkey_t rijndael_set_key_enc_only_fast;
extern rijndael_do_cbc_t rijndael_cbc_decrypt_fast;
extern rijndael_do_cbc_t rijndael_cbc_encrypt_fast;

@


1.1.1.2.4.11
log
@we of course cannot use a type prior to its definition
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.1.1.2.4.10 2008/03/20 19:18:00 tg Exp $ */
d40 4
a62 4
typedef int (*rijndael_setkey_t)(rijndael_ctx *, u_char *, int);
typedef void (*rijndael_do_cbc_t)(rijndael_ctx *, u_char *, u_char *, u_char *,
    int);

@


1.1.1.2.4.12
log
@beautify
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/crypto/rijndael.h,v 1.1.1.2.4.11 2008/03/20 21:21:53 tg Exp $ */
a3 5
/*-
 * Adaptions for VIA C3 hardware cryptography and integration is
 * Copyright (c) 2008 Thorsten Glaser
 */

a28 1

d47 2
a48 4
	u32	ek[4*(MAXNR + 1) + 4]	/* encrypt key schedule */
	    __attribute__((aligned (16)));
	u32	dk[4*(MAXNR + 1) + 4]	/* decrypt key schedule */
	    __attribute__((aligned (16)));
@


