head	1.11;
access;
symbols
	MIRBSD_10:1.5.0.2
	MIRBSD_10_BASE:1.5
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.1.7.1.0.2
	MIRBSD_8_BASE:1.1.7.1
	mirbsd:1.1.7;
locks; strict;
comment	@# @;


1.11
date	2018.04.29.18.28.27;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005AE60EE56E22A661;

1.10
date	2018.04.28.06.10.16;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005AE4105504023DFA;

1.9
date	2018.04.28.01.57.14;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005AE3D51132751302;

1.8
date	2018.04.28.01.54.00;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005AE3D44369DB6286;

1.7
date	2018.04.27.20.40.29;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005AE38AD42D953C45;

1.6
date	2018.04.27.18.27.10;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005AE36B8D21771EC2;

1.5
date	2007.09.01.10.26.33;	author tg;	state Exp;
branches;
next	1.4;
commitid	10046D93E565307EB3F;

1.4
date	2007.09.01.10.21.58;	author tg;	state Exp;
branches;
next	1.3;
commitid	10046D93D574781C60C;

1.3
date	2006.04.05.20.31.04;	author tg;	state Exp;
branches;
next	1.2;
commitid	100443428D337424A5B;

1.2
date	2006.03.27.09.43.10;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004427B3B66761DD12;

1.1
date	2005.03.06.16.33.43;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.06.16.33.43;	author tg;	state Exp;
branches;
next	;


desc
@@


1.11
log
@give us another 8 KiB for the kernel, our loader is a tad smaller than OBSD’s; also, lower bootloader stack from 16 KiB to 8 KiB
@
text
@# $MirOS: src/sys/arch/sparc/Makefile.reloc,v 1.10 2018/04/28 06:10:16 tg Exp $
# $OpenBSD: Makefile.inc,v 1.18 2015/09/12 09:04:57 miod Exp $
#
# sun4:
#	The first 8MB of physical memory are mapped 1:1.
# sun4c:
#	Worst case sun4c systems have their memory in non-contiguous 4MB
#	areas, therefore we must ensure the boot code never crosses a 4MB
#	boundary.
#	A SPARCstation IPC with 12MB memory in 1MB SIMMs, running PROM 2.9,
#	only maps virtual memory up to 0x3aefff.
# sun4m:
#	The minimal contiguous memory area will be 8MB (SS4/SS5 8MB DIMMs),
#	but there is no guarantee anything will be mapped at address zero
#	if the DIMM are set in a pathological (dis)order, as in:
#		ok cd /memory
#		ok .attributes
#		reg                      00000000  08000000  00800000
#		                         00000000  0a000000  00800000
#		                         00000000  0c000000  00800000
#		                         00000000  0e000000  00800000
#		available                00000000  0e000000  007a6000
#		                         00000000  0c000000  00800000
#		                         00000000  0a000000  00800000
#		                         00000000  08000000  00800000
#		name                     memory
#	where the four 8MB DIMMs are mapped at 32MB intervals from 128MB
#	onwards.
# sun4d:
#	Similar to sun4m, but the minimal contiguous memory area will be 32MB,
#	and all physical memory will be packed contiguous from address zero
#	onwards.
#
# The following values of RELOC and RELOC2 have been choosen to work on as
# many systems as possible, yet allowing small enough kernels to be loaded
# at the beginning of the physical memory.
RELOC_OBSD=	0x358000
#RELOC2=	0x398000	# same as calculated below

# Some other known to work for somebody values:
RELOC_SUN4=	0x240000
RELOC_SUN4C_E=	0x340000 # some early sun4c OpenPROM map only about 3.5MB mem
RELOC_SUN4C_L=	0x380000 # later models; seems to work on most machines
RELOC_SUN4M=	0x440000

# Give us another 8 KiB for the kernel, our loader is a tad smaller than OBSD’s
RELOC_MBSD=	0x35A000

RELOC?=		${RELOC_MBSD}
RELOC2!=	typeset -Uui16 'x=0x40000 + ${RELOC}'; print "0x$${x\#16\#}"

# layout is a bit like this:
#
# 0x4000 .....................RELOC................RELOC2....|
# <prom-bootxx>               <bootxx>
# (prom-boot[.net])                        <-stack<boot     >|
# <--kernel-------------------------------->
#
# bootxx and boot might be loaded to 0x4000 (similar to 0x7C00
# on a PC) and relocate themselves high if needed; the kernel
# can be then loaded into its final position, up to boot’s stack
# (OpenBSD also allows using other memory banks somehow, but
# that won’t work as bsd.rd.net using elf2aout -b so… meh.)
@


1.10
log
@now lower the RELOC value to match .Ox and for better compat to machines
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/sparc/Makefile.reloc,v 1.8 2018/04/28 01:54:00 tg Exp $
d46 4
a49 1
RELOC?=		${RELOC_OBSD}
@


1.9
log
@what else I learnt…
@
text
@d2 1
a2 7

RELOC_SUN4=	0x240000
RELOC_SUN4C_E=	0x340000
RELOC_SUN4C_L=	0x380000
RELOC_SUN4M=	0x440000

#	$OpenBSD: Makefile.inc,v 1.18 2015/09/12 09:04:57 miod Exp $
d40 7
a46 6
# The RELOC value used below of 0x380000 seems to work on most machines,
# except some early sun4c OpenPROM map only about 3.5MB of memory, for
# which RELOC_SUN4C_E(arly) is more suitable and RELOC_OBSD might be
# (but this is unknown as we use the older boot which cannot yet select
# other available memory areas to load the kernel).
RELOC?=		${RELOC_SUN4C_L}
d53 1
a53 1
# (prom-boot[.net])                        <-stack boot     >|
@


1.8
log
@this was meant to be part of cid 1005AE38AD42D953C45
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/sparc/Makefile.reloc,v 1.5 2007/09/01 10:26:33 tg Exp $
d53 13
@


1.7
log
@on size restrictions
@
text
@a2 1
RELOC_TEST=	0x340000
d4 2
a5 1
RELOC_SUN4C=	0x380000
d44 1
a44 1
#RELOC2=	0x398000
d46 6
a51 5
# Note: a 'RELOC' value of 0x380000 seems to work on most machines
# Originally, we used ${RELOC_TEST} below though (also, see above,
# for the last OpenBSD values before the port removal, which uses
# other available memory areas to load the kernel, though)
RELOC?=		${RELOC_SUN4C}
@


1.6
log
@add tons more commentary and a new RELOC candidate from .Ox
@
text
@d48 2
a49 1
# for the last OpenBSD values before the port removal)
@


1.5
log
@now that we know that bsd.rd didn't boot due to RELOC issues,
as I thought, raise it

10x wbx@@ for assistance
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/sparc/Makefile.reloc,v 1.4 2007/09/01 10:21:58 tg Exp $
d8 38
d47 2
a48 1
# Originally, we used ${RELOC_TEST} below though
@


1.4
log
@simplify
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/sparc/Makefile.reloc,v 1.3 2006/04/05 20:31:04 tg Exp $
d9 2
a10 1
RELOC?=		${RELOC_TEST}
@


1.3
log
@use "typeset -Uui16" for unsigned uppercase integer hexadecimal,
to prevent stuff like "x=-16#21524111" (0xDEADBEEF) which breaks
about all my scripts
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/sparc/Makefile.reloc,v 1.2 2006/03/27 09:43:10 tg Exp $
d10 1
a10 1
RELOC2!=	typeset -Uui16 'x=0x40000+${RELOC_TEST}'; print "0x$${x\#16\#}"
@


1.2
log
@ksh -c 'typeset ...' and s/0x/16\#/ ?
Surely you jest.
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/sparc/Makefile.reloc,v 1.1.7.1 2005/03/06 16:33:43 tg Exp $
d10 1
a10 1
RELOC2!=	typeset -i16 'x=0x40000+${RELOC_TEST}'; print "0x$${x\#16\#}"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $MirOS$
d10 1
a10 2
RELOC2!=	ksh -c 'typeset -i16 "x=16\#${RELOC_TEST:S/^0x//}"; \
		  let x+=16\#40000; print "0x$${x\#16\#}" '
@


1.1.7.1
log
@Add some missing files, such as some ISDN4BSD stuff,
documentation, tmac and tab files, TAI64 etc.
@
text
@@
