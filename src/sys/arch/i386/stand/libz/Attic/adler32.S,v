head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2007.03.02.03.13.26;	author tg;	state dead;
branches;
next	1.3;
commitid	10045E7958604F58BEB;

1.3
date	2006.12.11.23.55.01;	author tg;	state Exp;
branches;
next	1.2;
commitid	100457DEFC626A6A05C;

1.2
date	2006.10.07.21.36.20;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045281D5D49EB8626;

1.1
date	2006.08.19.12.59.53;	author tg;	state Exp;
branches;
next	;
commitid	10044E70B533B58C0BB;


desc
@@


1.4
log
@• make the kernel use the adler32() stuff in src/kern, whose sources
  live in the z part but that, logically, more belongs to the c part
• export adler32 (over <sys/systm.h> -> libkern -> <libckern.h>) and
  the rnd_bootpool (via <sys/systm.h> directly) to all of the kernel
• adler32 for the kernel moves to libkern
• adler32 for the i386 bootloader moves to libsa
• adler32 for the sparc bootloader moves to libkern
• userland libz is not affected (yet); make depend still pulls it in

tested by building a GENERIC, a bsd.rd with it, a cdrom9.fs with the
new bootloader (i386), qemu'ing that
@
text
@/* $MirOS: src/sys/arch/i386/stand/libz/adler32.S,v 1.3 2006/12/11 23:55:01 tg Exp $ */

/*-
 * Copyright (c) 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
 * The adler32 algorithm is
 * Copyright (C) 1995 Mark Adler
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * Advertising materials mentioning features or use of this work must
 * display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 *-
 * See also:
 *	contrib/hosted/fwcf/adler.h,v
 *	src/sys/arch/i386/stand/libz/adler32.S,v
 *	src/sys/lib/libsa/adler32s.c,v
 */

#ifdef UNDERSCORES
#define	_C(x)	_ ## x
#else
#define	_C(x)	x
#endif

#define BASE	65521	/* largest prime smaller than 65536 */
#define NMAX	5552	/* largest n: 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */

	.intel_syntax noprefix
	.section .comment
	.asciz	"$MirOS: src/sys/arch/i386/stand/libz/adler32.S,v 1.3 2006/12/11 23:55:01 tg Exp $"
	.text

/* void ADLER32_Update(ADLER32_CTX *ctx, const uint8_t *buf, size_t len) */
/* u_long adler32(u_long adler, const uint8_t *buf, unsigned len) */
	.globl	_C(adler32)
_C(adler32):
	push	ebp
	mov	ebp,esp
	push	ebx
	push	esi
	push	edi
	mov	edi,[ebp+8]	/* adler */
	mov	esi,[ebp+12]	/* buf */
	mov	ecx,[ebp+16]	/* len */

	xor	ebx,ebx
	mov	bx,di		/* EBX = s1 (lower half) */
	shr	edi,16		/* EDI = s2 (upper half) */

	cld
.L1:	jecxz	.L4
	mov	edx,NMAX
	cmp	ecx,edx
	jae	.L2
	mov	edx,ecx
.L2:	sub	ecx,edx
	/* do at most NMAX bytes at a time */
	xor	eax,eax
.L3:	lodsb
	add	ebx,eax
	add	edi,ebx
	dec	edx
	jnz	.L3
	/* s{1,2} %= BASE; */
	push	ebp
	mov	ebp,BASE
	/* EDX is already 0, cool */
	xor	eax,eax
	xchg	eax,ebx
	div	ebp
	xchg	ebx,edx
	/* EDX is 0 again, cool */
	mov	eax,edi
	div	ebp
	mov	edi,edx
	pop	ebp
	/* and loop */
	jmp	.L1
.L4:	/* return */
	shl	edi,16
	lea	eax,[edi+ebx]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
@


1.3
log
@mostly administrative licence sync w/ current template
@
text
@d1 1
a1 1
/* $MirOS: src/sys/arch/i386/stand/libz/adler32.S,v 1.2 2006/10/07 21:36:20 tg Exp $ */
d45 1
a45 1
	.asciz	"$MirOS: src/sys/arch/i386/stand/libz/adler32.S,v 1.2 2006/10/07 21:36:20 tg Exp $"
@


1.2
log
@add a full compliant portable C implementation of the adler32.c file
found in libc, without the adler32_combine function (unneeded in the
kernel and especially the bootloader), to the MirOS BSD kernel (note
in sys/conf/files) and the sparc bootloader (the i386 bootloader al-
ready uses the same code as assembly version, except that that comes
without the "return 1 if (buf == NULL)" functionality); sync all our
adler32 implementations and lint a little
@
text
@d1 1
a1 1
/* $MirOS: src/sys/arch/i386/stand/libz/adler32.S,v 1.1 2006/08/19 12:59:53 tg Exp $ */
d9 5
a13 6
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
d19 8
a26 8
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
d45 1
a45 1
	.asciz	"$MirOS: src/sys/arch/i386/stand/libz/adler32.S,v 1.1 2006/08/19 12:59:53 tg Exp $"
@


1.1
log
@shrink even more by using my own assembly version of adler32(3)
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.14 2006/08/09 19:35:23 tg Rel $ */
d28 5
d46 1
a46 1
	.asciz	"$MirOS: src/bin/md5/ad32-x86.S,v 1.1 2006/05/26 11:55:16 tg Exp $"
@

