head	1.37;
access;
symbols
	tg-use_ldscript:1.31.0.2
	tg-beforemerge-ksrc10:1.1.1.3
	cvs-200808011000:1.1.1.3
	MIRBSD_10:1.12.0.2
	MIRBSD_10_BASE:1.12
	MIRBSD_9_BASE:1.7
	MIRBSD_8:1.7.0.2
	MIRBSD_8_BASE:1.7
	cvs-200507032030:1.1.1.2
	cvs-200505050030:1.1.1.2
	cvs-200504302230:1.1.1.2
	cvs-200504291700:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.37
date	2013.08.06.17.06.25;	author tg;	state Exp;
branches;
next	1.36;
commitid	10052012D144F7753C5;

1.36
date	2013.08.05.22.06.14;	author tg;	state Exp;
branches;
next	1.35;
commitid	100520021D16E80D23B;

1.35
date	2011.01.03.19.02.51;	author tg;	state Exp;
branches;
next	1.34;
commitid	1004D221D691CE0C01C;

1.34
date	2010.01.10.19.21.36;	author tg;	state Exp;
branches;
next	1.33;
commitid	1004B4A28CB0F23DD4D;

1.33
date	2009.12.26.15.09.01;	author tg;	state Exp;
branches;
next	1.32;
commitid	1004B3626F70ADEB9B5;

1.32
date	2009.12.26.15.06.15;	author tg;	state Exp;
branches;
next	1.31;
commitid	1004B3626670CBA1E38;

1.31
date	2009.10.04.16.49.43;	author tg;	state Exp;
branches;
next	1.30;
commitid	1004AC8D234283AB203;

1.30
date	2009.08.09.18.51.42;	author tg;	state Exp;
branches;
next	1.29;
commitid	1004A7F1A1B76A4634B;

1.29
date	2009.01.12.18.07.23;	author tg;	state Exp;
branches;
next	1.28;
commitid	100496B86EE452CAA71;

1.28
date	2009.01.12.17.36.03;	author tg;	state Exp;
branches;
next	1.27;
commitid	100496B7F9043C26B46;

1.27
date	2009.01.12.17.28.46;	author tg;	state Exp;
branches;
next	1.26;
commitid	100496B7DE3263BBF20;

1.26
date	2009.01.12.17.04.03;	author tg;	state Exp;
branches;
next	1.25;
commitid	100496B77FB5AA43124;

1.25
date	2009.01.10.23.05.27;	author tg;	state Exp;
branches;
next	1.24;
commitid	100496929CB3DC03F81;

1.24
date	2009.01.10.14.49.04;	author tg;	state Exp;
branches;
next	1.23;
commitid	1004968B5690CAD8165;

1.23
date	2009.01.10.11.58.01;	author tg;	state Exp;
branches;
next	1.22;
commitid	10049688D4C6703171F;

1.22
date	2009.01.03.13.43.32;	author tg;	state Exp;
branches;
next	1.21;
commitid	100495F6B566145BE45;

1.21
date	2008.08.03.21.02.04;	author tg;	state Exp;
branches;
next	1.20;
commitid	10048961CCE67B72AC5;

1.20
date	2008.08.01.18.41.43;	author tg;	state Exp;
branches;
next	1.19;
commitid	100489358FE38628080;

1.19
date	2008.08.01.18.09.31;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004893513244B11E80;

1.18
date	2008.08.01.16.35.24;	author tg;	state Exp;
branches;
next	1.17;
commitid	10048933B5E5B20CA97;

1.17
date	2008.08.01.15.43.46;	author tg;	state Exp;
branches;
next	1.16;
commitid	10048932F424C3503E1;

1.16
date	2008.08.01.12.40.31;	author tg;	state Exp;
branches;
next	1.15;
commitid	100489304537E384707;

1.15
date	2008.08.01.12.40.13;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004893043A4B87A0FB;

1.14
date	2008.08.01.12.39.07;	author tg;	state Exp;
branches;
next	1.13;
commitid	100489303F432B4030A;

1.13
date	2008.08.01.11.24.59;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004892F2924667C00D;

1.12
date	2007.03.02.03.13.26;	author tg;	state Exp;
branches;
next	1.11;
commitid	10045E7958604F58BEB;

1.11
date	2007.02.08.07.42.10;	author tg;	state Exp;
branches;
next	1.10;
commitid	10045CAD464729BE439;

1.10
date	2007.02.05.23.48.02;	author tg;	state Exp;
branches;
next	1.9;
commitid	10045C7C20A219A4CB5;

1.9
date	2007.02.05.20.16.14;	author tg;	state Exp;
branches;
next	1.8;
commitid	10045C78FD963274EDA;

1.8
date	2006.10.15.01.35.54;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004531907179DB61BE;

1.7
date	2005.10.20.12.47.52;	author tg;	state Exp;
branches;
next	1.6;
commitid	353f43579208719c;

1.6
date	2005.08.07.15.38.52;	author tg;	state Exp;
branches;
next	1.5;
commitid	1f7242f62b1c8295;

1.5
date	2005.07.07.12.27.27;	author tg;	state Exp;
branches;
next	1.4;
commitid	63f442cd1fb827f1;

1.4
date	2005.04.29.18.34.59;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.14.22.39.45;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.21.27.05;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.17.05.47;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.08.01.10.28.37;	author tg;	state Exp;
branches;
next	;
commitid	1004892E54805BE97AB;


desc
@@


1.37
log
@get rid of the now useless ZLIB_CONST
@
text
@# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.36 2013/08/05 22:06:14 tg Exp $
# $OpenBSD: Makefile,v 1.47 2007/05/30 01:25:43 tom Exp $

.include "${.CURDIR}/../Makefile.inc"

LIB=		sa
S=		${.CURDIR}/../../../..
SADIR=		${.CURDIR}/..
DIR_SA=		$S/lib/libsa
DIR_KERN=	$S/lib/libkern
CPPFLAGS+=	-DHEAP_LIMIT=${HEAP_LIMIT}
CPPFLAGS+=	-I$S/stand/boot -I$S/lib/libsa
CPPFLAGS+=	-D__INTERNAL_LIBSA_CREAD #-DCOMPAT_UFS
CPPFLAGS+=	${SACFLAGS:M-[DI]*}
COPTS+=		${SACFLAGS:N-[DI]*} ${DEBUGFLAGS}
DEBUGLIBS=	No
KERNSTAND=	#defined
SMALL=		#defined

.include "${KERNBASE}/c/Makefile.inc"
.include "${KERNBASE}/z/Makefile.adler32"
.include "${KERNBASE}/z/Makefile.inc"

# Build a small zlib
CPPFLAGS+=	-DSLOW -DSMALL -DNOBYFOUR -DNO_GZIP
CPPFLAGS+=	-DDYNAMIC_CRC_TABLE -DBUILDFIXED
CPPFLAGS+=	-DSA_CRC_TABLE -DSA_FIXED_TABLE
SRCS+=		crc32.c inffast.c inflate.c inftrees.c

CLEANFILES+=	${ZLIB_CLEANFLS}

beforedepend: ${ZLIB_GENHDRS}

# i386 stuff (so, it will possibly load in the same 64k)
SRCS+=	machdep.c dev_i386.c exec_i386.c cmd_i386.c loadfile.c

SRCS+=	gidt.S debug_i386.S \
	biosdev.c biosdev2.S bioscons.c gateA20.c apmprobe.c \
	memprobe.c diskprobe.c pciprobe.c smpprobe.c \
	cpuprobe.c time.c biosprobe.c \
	ps2probe.c pxe.c pxe_net.c

# stand routines
SRCS+=	alloc.c exit.c getfile.c gets.c globals.c \
	printf.c snprintf.c \
	strerror.c strtol.c strtoll.c ctime.c

# io routines
SRCS+=	close.c closeall.c dev.c disklabel.c dkcksum.c fstat.c ioctl.c lseek.c \
	open.c read.c stat.c write.c cread.c readdir.c cons.c

# network routines
SRCS+=	arp.c ether.c in_cksum.c net.c netif.c rpc.c

# network info services
SRCS+=	bootp.c bootparam.c rarp.c

# boot filesystems
SRCS+=	ufs.c nfs.c tftp.c cd9660.c fat.c lmbmfs.c ustarfs.c
SRCS+=	dosfs.c dosfslo.S
SRCS+=	dummydev.c

# debugger
SRCS+=	debug.c

NOPIC=	yes

CFLAGS_dev_i386.o+=	-Wno-cast-qual

.PATH:  ${DIR_SA} ${DIR_KERN}

all: ${SALIB}

install:

.include <bsd.lib.mk>

#AS=cat ; 
#AS+=	-R
#AS+=	-a
@


1.36
log
@-DZCONST=const → -DZLIB_CONST

XXX sys/conf/Makefile.inc does it twice?
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.35 2011/01/03 19:02:51 tg Exp $
a29 2
CPPFLAGS+=	-DZLIB_CONST
HOSTCPPFLAGS+=	-DZLIB_CONST
@


1.35
log
@move strchr, strrchr, strncpy to kern; remove redundant strncmp, strncasecmp protos
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.34 2010/01/10 19:21:36 tg Exp $
d30 2
a31 2
CPPFLAGS+=	-DZCONST=const
HOSTCPPFLAGS+=	-DZCONST=const
@


1.34
log
@new ustarfs for the bootloader (fdboot only ATM, since boot’s too huge)
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.33 2009/12/26 15:09:01 tg Exp $
d47 2
a48 2
	strncmp.c printf.c snprintf.c \
	strerror.c strncpy.c strtol.c strtoll.c ctime.c
@


1.33
log
@new “dosfs” filesystem, for things like
• boot> cat c:\x
• boot> cat dos:c:\x
• boot> cat dos:c:/x
• boot> b c:/bsd

sadly, MirBSD doesn’t boot in dosbox (illegal opcode trap)…
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.31 2009/10/04 16:49:43 tg Exp $
d61 1
a61 1
SRCS+=	ufs.c nfs.c tftp.c cd9660.c fat.c lmbmfs.c
@


1.32
log
@split “lmbm” dummy device from lmbmfs filesystem, call it “DUMY” (dummydev)
@
text
@d62 1
@


1.31
log
@more nonsensical code cleanup, I give up, this is horrid
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.30 2009/08/09 18:51:42 tg Exp $
d62 1
@


1.30
log
@Add new (virtual) filesystem “lmbm” (Loadable MultiBoot Modules, like LKM)
that contains the modules we got passed when loaded as Multiboot OS Kernel
as per the spec. Quirks:
• case sensitive
• supports “ls” on its (virtual) root directory
• does *not* support filesystems (cuts off both the directory part of the
  module string passed and the directory part when opening a file, but the
  root directory can only be opened as “/” or “/.” (or “lmbm:/”, etc.)
• assumes that we and all modules are loaded below 20 MiB in RAM
• moves modules on filesystem initialisation (virtual disc probe) to just
  above 20 MiB in RAM
• assumes the kernel will fit below 20 MiB in RAM, too
• does not affect non-multiboot operation
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.29 2009/01/12 18:07:23 tg Exp $
d68 2
@


1.29
log
@more cool pxe calls
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.28 2009/01/12 17:36:03 tg Exp $
d61 1
a61 1
SRCS+=	ufs.c nfs.c tftp.c cd9660.c fat.c
@


1.28
log
@move two other huge blobs into the 3000h segment
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.27 2009/01/12 17:28:46 tg Exp $
d43 1
a43 1
	ps2probe.c pxe.c pxe_net.c pxe_call.S
@


1.27
log
@remove unused file
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.26 2009/01/12 17:04:03 tg Exp $
d26 2
a27 1
CPPFLAGS+=	-DDYNAMIC_CRC_TABLE -DBUILDFIXED -DSA_CRC_TABLE
@


1.26
log
@in an attempt to get code+data+bss into 65280 bytes (not there yet),
move the crc32 table to the „stack“ (and FARDATA) segment
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.25 2009/01/10 23:05:27 tg Exp $
d27 1
a27 1
SRCS+=		crc32.c infback.c inffast.c inflate.c inftrees.c
@


1.25
log
@device assignment
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.24 2009/01/10 14:49:04 tg Exp $
d26 1
a26 1
CPPFLAGS+=	-DDYNAMIC_CRC_TABLE -DBUILDFIXED
@


1.24
log
@comment out tori stuff, will be merged into biosdev access
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.23 2009/01/10 11:58:01 tg Exp $
d39 1
a39 1
	biosdev.c bioscons.c gateA20.c apmprobe.c \
@


1.23
log
@LINKADDR, LINKSEG, LOADADDR, LOADSEG, SA_{LINK,LOAD}{ADDR,SEG} cleanup
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.22 2009/01/03 13:43:32 tg Exp $
d38 1
a38 1
SRCS+=	gidt.S debug_i386.S toridev.c \
@


1.22
log
@• cut down on stack usage
• improve reliability (especially on 64K and larger reads)
• remove alloca
• nuke tori transfer buffer
by making use of a paragraph-aligned 4 KiB bounce buffer very early in
the .bss section (allocated in srt0.S, which is first in link)

XXX biosdev.c ist eine Ausgeburt an Häßlichkeit!
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.21 2008/08/03 21:02:04 tg Exp $
d11 1
a11 1
CPPFLAGS+=	-DLINKADDR=${LINKADDR} -DHEAP_LIMIT=${HEAP_LIMIT}
@


1.21
log
@Hacked in the train to Zwitserland:

• new: memcpy()=bcopy()=memmove()
• new macro: __strong_alias (incidentally, TNF has exactly the same name
  and exactly (except an ‘a’ more) the same implementation)
• use __strong_alias and #ifdef lint instead of duplicate code via unifdef
  abuse
• sprinkle a few uses of _ALIGN_TEXT
• remove duplicate memmove, memcpy, bcopy and ovbcopy implementations
  from the i386 kernel
• _ALIGN_TEXT is a nop #ifdef SMALL
• remove more duplicate definitions, etc.
• remove more dead code from bootloader -D_TEST
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.20 2008/08/01 18:41:43 tg Exp $
d38 1
a38 1
SRCS+=	gidt.S debug_i386.S alloca.S toridev.c \
@


1.20
log
@move a file into right block
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.19 2008/08/01 18:09:31 tg Exp $
d46 1
a46 1
	strncmp.c printf.c snprintf.c memcpy.c \
@


1.19
log
@more migration

(in case you wonder: goal is to make libc, kernel and bootloaders share
the code currently in libkern, (some of) libsa, and libz, and to move
the bootloaders out of src/sys/ and into some more sane place)
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.18 2008/08/01 16:35:24 tg Exp $
d41 1
a41 1
	cpuprobe.c time.c biosprobe.c memcpy.c \
d46 1
a46 1
	strncmp.c printf.c snprintf.c \
@


1.18
log
@migrate strlcat/strlcpy/strxfrm and wcs* equivalents
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.17 2008/08/01 15:43:46 tg Exp $
d45 2
a46 2
SRCS+=	alloc.c exit.c getfile.c gets.c globals.c strcmp.c \
	strncmp.c memcmp.c memset.c printf.c snprintf.c \
a64 3
# fuckup gcc
SRCS+=	moddi3.c divdi3.c qdivrem.c

@


1.17
log
@switch i386 bootloader to kern zlib
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.16 2008/08/01 12:40:31 tg Exp $
d45 1
a45 1
SRCS+=	alloc.c exit.c getfile.c gets.c globals.c strcmp.c strlen.c \
d47 1
a47 1
	strerror.c strncpy.c strtol.c strtoll.c ctime.c strlfun.c
@


1.16
log
@meh, dead is dead
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.15 2008/08/01 12:40:13 tg Exp $
d12 1
a12 1
CPPFLAGS+=	-I$S/stand/boot -I$S/lib
d22 12
@


1.15
log
@elf*.c are not needed, since we only exec one size
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.14 2008/08/01 12:39:07 tg Exp $
a24 1
#SRCS+=	elf32.c elf64.c
@


1.14
log
@remove unused code (for testing the bootloader on unix)
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.13 2008/08/01 11:24:59 tg Exp $
d24 2
a25 2
SRCS+=	machdep.c dev_i386.c exec_i386.c cmd_i386.c loadfile.c elf32.c
#SRCS+=	elf64.c
@


1.13
log
@merge and reduce diff to obsd
XXX not yet tested
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.12 2007/03/02 03:13:26 tg Exp $
a26 7
.if defined(DEBUGFLAGS) && !empty(DEBUGFLAGS:M-D_TEST)
SRCS+=	unixdev.c unixsys.S nullfs.c memprobe.c
CLEANFILES+=	gidt.o debug_i386.o alloca.o toridev.o \
	biosdev.o bioscons.o gateA20.o apmprobe.o \
	cpuprobe.o memprobe.o diskprobe.o smpprobe.o \
	time.o biosprobe.o
.else
a31 2
CLEANFILES+=	unixdev.o unixsys.o nullfs.o
.endif
@


1.12
log
@• make the kernel use the adler32() stuff in src/kern, whose sources
  live in the z part but that, logically, more belongs to the c part
• export adler32 (over <sys/systm.h> -> libkern -> <libckern.h>) and
  the rnd_bootpool (via <sys/systm.h> directly) to all of the kernel
• adler32 for the kernel moves to libkern
• adler32 for the i386 bootloader moves to libsa
• adler32 for the sparc bootloader moves to libkern
• userland libz is not affected (yet); make depend still pulls it in

tested by building a GENERIC, a bsd.rd with it, a cdrom9.fs with the
new bootloader (i386), qemu'ing that
@
text
@d1 2
a2 2
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.11 2007/02/08 07:42:10 tg Exp $
# $OpenBSD: Makefile,v 1.44 2004/06/26 05:19:37 tom Exp $
d24 2
a25 1
SRCS+=	machdep.c dev_i386.c exec_i386.c cmd_i386.c loadfile.c
d45 1
a45 1
	strerror.c strncpy.c strtol.c ctime.c strlfun.c
@


1.11
log
@include path issues
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.10 2007/02/05 23:48:02 tg Exp $
d21 1
@


1.10
log
@make src/kern stuff behave differently .ifdef SMALL, defined by:
- libsa/libkern bootloader
- libkern kernel #ifdef SMALL_KERNEL
- not yet: distrib/special/lib*
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.9 2007/02/05 20:16:14 tg Exp $
d12 1
a12 1
CPPFLAGS+=	-I${S}/stand/boot -I${S}/lib -I${BSDSRCDIR}/lib/libz
a16 1
KERNBASE?=	$S/../kern
@


1.9
log
@proof-of-concept implementation of a few functions for the
new "kern" directory containing stuff shared between
* userland (-fhosted -lgcc)
* kernel (-ffreestanding -D_KERNEL -nostdlib)
* bootloader (-ffreestanding -D_STANDALONE -nostdlib)

Here, userland and kernel share some functions not for the
bootloader (e.g. utf-8 stuff), while kernel and bootloader
share a few libgcc replacement functions.

I took the htonl() &c. functions because they were pretty
easy to implement; no sparc assembly version because it's
a 'no-op' and I trust gcc so much as to produce optimised
output for the type foo(type x) { return (x); } case.

Not tested.

Most of the functions will be written "on demand" and re-
written from scratch by me.
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.8 2006/10/15 01:35:54 tg Exp $
d17 1
d19 1
a19 1
KERNBASE?=	$S/../kern
@


1.8
log
@* add -fno-omit-frame-pointer to boot blocks too -> unbreaks
* add COPTS and CFLAGS and CPPFLAGS correctly and in correct order
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.7 2005/10/20 12:47:52 tg Exp $
d17 4
@


1.7
log
@fix up DEBUGLIBS and DEBUGPROGS
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.6 2005/08/07 15:38:52 tg Exp $
d14 2
a15 1
CFLAGS+=	${SACFLAGS} ${DEBUGFLAGS}
@


1.6
log
@add FCFS here, too
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.5 2005/07/07 12:27:27 tg Exp $
d15 1
@


1.5
log
@unify libz use (make bootloader use base libz sources)
simplify defines
add more RCS IDs
shrink code
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.4 2005/04/29 18:34:59 tg Exp $
d50 1
a50 1
SRCS+=	ufs.c nfs.c tftp.c cd9660.c
@


1.4
log
@(tentative) merge, more to come
@
text
@d1 1
a1 1
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.3 2005/03/14 22:39:45 tg Exp $
d6 9
a14 6
LIB=	sa

S=${.CURDIR}/../../../..
SADIR=${.CURDIR}/..
DIR_SA=	$S/lib/libsa
DIR_KERN=$S/lib/libkern
a67 3
CPPFLAGS+=-DLINKADDR=${LINKADDR} -DHEAP_LIMIT=${HEAP_LIMIT} ${DEBUGFLAGS}
CPPFLAGS+=-I${S}/stand/boot -I${S}/lib #-DCOMPAT_UFS
CPPFLAGS+=${SACFLAGS} -D__INTERNAL_LIBSA_CREAD
@


1.3
log
@use our strlcpy/strlcat implementation here, too
@
text
@d1 2
a2 2
# $MirOS: src/sys/arch/i386/stand/libsa/Makefile,v 1.2 2005/03/06 21:27:05 tg Exp $
# $OpenBSD: Makefile,v 1.43 2004/03/19 13:48:18 tom Exp $
d20 1
a20 1
	memprobe.o diskprobe.o smpprobe.o \
d26 1
a26 1
	time.c biosprobe.c memcpy.c \
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 1
a1 1
# $MirOS$
d34 1
a34 1
	strerror.c strncpy.c strtol.c ctime.c strlcpy.c strlcat.c
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
#	$OpenBSD: Makefile,v 1.43 2004/03/19 13:48:18 tom Exp $
d18 1
a18 1
CLEANFILES+=	gidt.o debug_i386.o alloca.o \
d23 1
a23 1
SRCS+=	gidt.S debug_i386.S alloca.S \
d26 2
a27 1
	time.c biosprobe.c ps2probe.c pxe.c pxe_net.c pxe_call.S
d33 1
a33 1
	strncmp.c memcmp.c memcpy.c memset.c printf.c snprintf.c \
d52 4
a55 2
NOPROFILE=noprofile
NOPIC=nopic
d66 2
a67 2
CPPFLAGS+=-I${S}/stand/boot #-DCOMPAT_UFS
CFLAGS+=${SACFLAGS} -D__INTERNAL_LIBSA_CREAD
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.44 2004/06/26 05:19:37 tom Exp $
d19 1
a19 1
	cpuprobe.o memprobe.o diskprobe.o smpprobe.o \
d24 1
a24 1
	cpuprobe.c memprobe.c diskprobe.c pciprobe.c smpprobe.c \
@


1.1.1.3
log
@import bootloader-related pieces from openbsd, as first part of the
aspired 4.4 merge… and something else
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.47 2007/05/30 01:25:43 tom Exp $
d9 2
d13 1
a13 1
SRCS+=	machdep.c dev_i386.c exec_i386.c cmd_i386.c loadfile.c elf32.c elf64.c
d32 1
a32 1
	strerror.c strncpy.c strtol.c strtoll.c ctime.c
d53 1
a53 1
.PATH:  $S/lib/libsa
@


