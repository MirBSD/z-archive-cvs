head	1.20;
access;
symbols
	tg-use_ldscript:1.19.0.2
	tg-beforemerge-ksrc10:1.1.1.3
	cvs-200808011000:1.1.1.3
	MIRBSD_10:1.5.0.2
	MIRBSD_10_BASE:1.5
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4
	cvs-200507032030:1.1.1.2
	cvs-200505050030:1.1.1.2
	cvs-200504302230:1.1.1.2
	cvs-200504291700:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2012.01.14.21.44.26;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004F11F69F3F5DAF95;

1.19
date	2009.02.01.14.38.41;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004985B3ED0DDBDB4E;

1.18
date	2009.01.11.14.59.51;	author tg;	state Exp;
branches;
next	1.17;
commitid	100496A09714789A532;

1.17
date	2009.01.11.13.58.07;	author tg;	state Exp;
branches;
next	1.16;
commitid	1004969FAEE52C66E84;

1.16
date	2009.01.11.00.32.41;	author tg;	state Exp;
branches;
next	1.15;
commitid	10049693E0D60AE6F9B;

1.15
date	2009.01.10.23.43.08;	author tg;	state Exp;
branches;
next	1.14;
commitid	100496932A33C227F0C;

1.14
date	2009.01.10.23.05.28;	author tg;	state Exp;
branches;
next	1.13;
commitid	100496929CB3DC03F81;

1.13
date	2009.01.10.22.18.53;	author tg;	state Exp;
branches;
next	1.12;
commitid	10049691EDB67E0F5CA;

1.12
date	2009.01.10.14.49.04;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004968B5690CAD8165;

1.11
date	2009.01.03.13.43.33;	author tg;	state Exp;
branches;
next	1.10;
commitid	100495F6B566145BE45;

1.10
date	2009.01.02.05.16.34;	author tg;	state Exp;
branches;
next	1.9;
commitid	100495DA33F62ABDC14;

1.9
date	2009.01.02.04.58.41;	author tg;	state Exp;
branches;
next	1.8;
commitid	100495D9F177CADA327;

1.8
date	2008.11.08.23.04.08;	author tg;	state Exp;
branches;
next	1.7;
commitid	10049161AB22DF5DFC5;

1.7
date	2008.08.01.11.32.54;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004892F47624324996;

1.6
date	2008.08.01.11.24.59;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004892F2924667C00D;

1.5
date	2006.08.19.14.20.30;	author tg;	state Exp;
branches;
next	1.4;
commitid	10044E71E3D359AC2FA;

1.4
date	2005.07.07.12.27.27;	author tg;	state Exp;
branches;
next	1.3;
commitid	63f442cd1fb827f1;

1.3
date	2005.04.29.18.34.59;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.21.27.06;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.29;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.29;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.17.05.48;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.08.01.10.28.38;	author tg;	state Exp;
branches;
next	;
commitid	1004892E54805BE97AB;


desc
@@


1.20
log
@refactoro, broken in cid 1004985B3ED0DDBDB4E on 2009-02-01

bug let the kernel mistakenly not select the correct boot device (as the
information it got from the bootloader was bogus) when more than one de‚Äê
vice is extant; reported (independently of each other) in this order by:
Zoltan Arpadffy, Waldemar Brodkorb (wbx@@) and asarch
@
text
@/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.19 2009/02/01 14:38:41 tg Exp $ */
/*	$OpenBSD: diskprobe.c,v 1.29 2007/06/18 22:11:20 krw Exp $	*/

/*
 * Copyright (c) 1997 Tobias Weingartner
 * Copyright (c) 2002, 2003, 2009, 2012
 *	Thorsten "mirabilos" Glaser <tg@@mirbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/* We don't want the disk type names from disklabel.h */
#undef DKTYPENAMES

#include <sys/param.h>
#include <sys/queue.h>
#include <sys/reboot.h>
#include <sys/disklabel.h>
#include <stand/boot/bootarg.h>
#include <machine/biosvar.h>
#include <zlib.h>
#include "disk.h"
#include "biosdev.h"
#include "libsa.h"

#define MAX_CKSUMLEN MAXBSIZE / DEV_BSIZE	/* Max # of blks to cksum */

/* Local Prototypes */
static int disksum(int);
static void hardprobe_one(int);

/* List of disk devices we found/probed */
struct disklist_lh disklist;

/* Pointer to boot device */
struct diskinfo *bootdev_dip = NULL;

/* Pointer to original boot device */
struct diskinfo *start_dip = NULL;

extern int debug;

/* Probe for all BIOS floppies */
static void
floppyprobe(void)
{
	struct diskinfo *dip;
	int i;

	/* Floppies */
	for (i = 0; i < 4; i++) {
		dip = alloc(sizeof(struct diskinfo));
		bzero(dip, sizeof(*dip));

		if (bios_getdiskinfo(i, &dip->bios_info)) {
#ifdef BIOS_DEBUG
			if (debug)
				printf(" <!fd%u>", i);
#endif
			free(dip, 0);
			break;
		}

		if (!start_dip && i386_biosdev == i)
			start_dip = dip;

		dip->name[0] = 'f';
		dip->name[1] = 'd';
		dip->name[2] = '0' + i;
		dip->name[3] = '\0';
		printf(" %s", dip->name);

		/* Fill out best we can - (fd?) */
		dip->bios_info.bsd_dev = MAKEBOOTDEV(2, 0, 0, i, RAW_PART);

		/*
		 * Delay reading the disklabel until we're sure we want
		 * to boot from the floppy. Doing this avoids a delay
		 * (sometimes very long) when trying to read the label
		 * and the drive is unplugged.
		 */
		dip->bios_info.flags |= BDI_BADLABEL;

		/* Add to queue of disks */
		TAILQ_INSERT_TAIL(&disklist, dip, list);
	}
}

/* Probe for all BIOS hard disks */
static void
hardprobe(void)
{
	int i;

	if (i386_biosdev & 0x80)
		hardprobe_one(i386_biosdev);
	for (i = 0x80; i < 0x88; i++)
		if (i != i386_biosdev)
			hardprobe_one(i);
}

static void
hardprobe_one(int i)
{
	static unsigned int cddv = 0, ide = 0, scsi = 0;
	struct diskinfo *dip;
	u_int bsdunit, type;

	dip = alloc(sizeof(struct diskinfo));
	bzero(dip, sizeof(*dip));

	if (bios_getdiskinfo(i, &dip->bios_info)) {
#ifdef BIOS_DEBUG
		if (debug)
			printf(" <!hd%u>", i&0x7f);
#endif
		free(dip, 0);
		return;
	}

	if (!start_dip && i386_biosdev == i)
		start_dip = dip;

	dip->name[0] = 'h';
	dip->name[1] = 'd';
	dip->name[2] = '0' + (i & 0x7F);
	dip->name[3] = '\0';
	if (dip->bios_info.flags & BDI_EL_TORITO) {
		dip->name[0] = 'c';
		dip->name[2] = '0' + cddv++;
	}
	printf(" %s%s", dip->name, dip->bios_info.flags & BDI_LBA ? "+" : "");

	/* Try to find the label, to figure out device type */
	if ((bios_getdisklabel(&dip->bios_info, &dip->disklabel)) ) {
		if (dip->bios_info.flags & BDI_EL_TORITO) {
			bsdunit = dip->name[2] - '0';
			type = 6;	/* CD-ROM */
		} else {
			printf("*");
			bsdunit = ide++;
			type = 0;	/* XXX let it be IDE */
		}
	} else {
		/* Best guess */
		switch (dip->disklabel.d_type) {
		case DTYPE_SCSI:
			type = 4;
			bsdunit = scsi++;
			dip->bios_info.flags |= BDI_GOODLABEL;
			break;

		case DTYPE_ESDI:
		case DTYPE_ST506:
			type = 0;
			bsdunit = ide++;
			dip->bios_info.flags |= BDI_GOODLABEL;
			break;

		case DTYPE_ATAPI:
			bsdunit = dip->name[2] - '0';
			type = 6;	/* CD-ROM */
			dip->bios_info.flags |= BDI_GOODLABEL;
			break;

		default:
			dip->bios_info.flags |= BDI_BADLABEL;
			type = 0;	/* XXX Suggest IDE */
			bsdunit = ide++;
		}
	}

	dip->bios_info.checksum = 0; /* just in case */
	/* Fill out best we can */
	dip->bios_info.bsd_dev =
	    MAKEBOOTDEV(type, 0, 0, bsdunit, RAW_PART);

	/* Add to queue of disks */
	TAILQ_INSERT_TAIL(&disklist, dip, list);
}


/* Probe for all BIOS supported disks */
u_int32_t bios_cksumlen;
void
diskprobe(void)
{
	struct diskinfo *dip;
	int i;

	/* These get passed to kernel */
	bios_diskinfo_t *bios_diskinfo;

	/* Do probes */
	floppyprobe();
#ifdef BIOS_DEBUG
	if (debug)
		printf(";");
#endif
	hardprobe();

	if (!start_dip)
		start_dip = TAILQ_FIRST(&disklist);

	/* Checksumming of hard disks */
	for (i = 0; disksum(i++) && i < MAX_CKSUMLEN; )
		;
	bios_cksumlen = i;

	/* Get space for passing bios_diskinfo stuff to kernel */
	for (i = 0, dip = TAILQ_FIRST(&disklist); dip;
	    dip = TAILQ_NEXT(dip, list))
		i++;
	bios_diskinfo = alloc(++i * sizeof(bios_diskinfo_t));

	/* Copy out the bios_diskinfo stuff */
	for (i = 0, dip = TAILQ_FIRST(&disklist); dip;
	    dip = TAILQ_NEXT(dip, list))
		bios_diskinfo[i++] = dip->bios_info;

	bios_diskinfo[i++].bios_number = -1;
	/* Register for kernel use */
	addbootarg(BOOTARG_CKSUMLEN, sizeof(u_int32_t), &bios_cksumlen);
	addbootarg(BOOTARG_DISKINFO, i * sizeof(bios_diskinfo_t),
	    bios_diskinfo);
}

void
dump_diskinfo(void)
{
	struct diskinfo *dip;

#ifndef SMALL_BOOT
	printf("Disk\tBIOS#\tType\tCyls\tHeads\tSecs\tFlags\tChecksum\n");
#endif
	for (dip = TAILQ_FIRST(&disklist); dip; dip = TAILQ_NEXT(dip, list)) {
		bios_diskinfo_t *bdi = &dip->bios_info;

		if (bdi->flags & BDI_NOTADISK) {
			printf("%s\tnone\n", dip->name);
			continue;
		}
		printf("%s\t0x%X\t%s\t%d\t%d\t%d\t0x%X\t0x%X\n",
		    dip->name, bdi->bios_number,
		    (bdi->flags & BDI_BADLABEL) ? "*none*" : "label",
		    bdi->bios_cylinders, bdi->bios_heads, bdi->bios_sectors,
		    bdi->flags, bdi->checksum);
	}
}

/*
 * Checksum one more block on all harddrives
 *
 * Use the adler32() function from libz,
 * as it is quick, small, and available.
 */
int
disksum(int blk)
{
	struct diskinfo *dip, *dip2;
	int st, reprobe = 0;
	char *buf;

	buf = alloc(DEV_BSIZE);
	for (dip = TAILQ_FIRST(&disklist); dip; dip = TAILQ_NEXT(dip, list)) {
		bios_diskinfo_t *bdi = &dip->bios_info;

		/* Skip this disk if it is not a HD or has had an I/O error */
		if (!(bdi->bios_number & 0x80) ||
		    bdi->flags & (BDI_INVALID | BDI_NOTADISK))
			continue;

		/* Adler32 checksum */
		st = biosd_io(F_READ, bdi, blk, 1, buf);
		if (st) {
			bdi->flags |= BDI_INVALID;
			continue;
		}
		bdi->checksum = adler32(bdi->checksum, buf, DEV_BSIZE);

		for (dip2 = TAILQ_FIRST(&disklist); dip2 != dip;
				dip2 = TAILQ_NEXT(dip2, list)) {
			bios_diskinfo_t *bd = &dip2->bios_info;
			if ((bd->bios_number & 0x80) &&
			    !(bd->flags & (BDI_INVALID | BDI_NOTADISK)) &&
			    bdi->checksum == bd->checksum)
				reprobe = 1;
		}
	}
	free(buf, DEV_BSIZE);

	return reprobe;
}
@


1.19
log
@I could cry‚Ä¶
‚Ä¢ allow on-disc disklabels for ATAPI too
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.18 2009/01/11 14:59:51 tg Exp $ */
d6 1
a6 1
 * Copyright (c) 2002, 2003, 2009
d126 1
a126 1
	static int cddv = 0;
a128 1
	u_int scsi = 0, ide = 0;
@


1.18
log
@only probe the BIOS boot device for a hard disc if it indicates being one ‚òª
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.17 2009/01/11 13:58:07 tg Exp $ */
d182 6
@


1.17
log
@remove bios_edd member, do LBA via a flag, use my routine instead of
OpenBSD‚Äôs to detect LBA and El Torito, mop up
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.16 2009/01/11 00:32:41 tg Exp $ */
d116 2
a117 1
	hardprobe_one(i386_biosdev);
@


1.16
log
@restore FFS and CD9660 boot from hard disc
maybe FFS from floppy (untested)

CD9660 from CD-ROM doesn't work yet
PXE (tftp) untested
PXE (nfs) ‚Äì did it ever work? no idea‚Ä¶
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.15 2009/01/10 23:43:08 tg Exp $ */
d153 1
a153 2
	printf(" %s%s", dip->name,
	    (dip->bios_info.bios_edd > 0 ? "+" : ""));
@


1.15
log
@fix cd0 detection, etc.
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.14 2009/01/10 23:05:28 tg Exp $ */
d158 1
a158 1
		if (dip->name[0] == 'c') {
d261 1
a261 1
		    (bdi->flags & BDI_BADLABEL)?"*none*":"label",
@


1.14
log
@device assignment
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.13 2009/01/10 22:18:53 tg Exp $ */
a46 2
extern int biosdev_lbaprobe(int drive);

d149 1
a149 1
	if (biosdev_lbaprobe(i) == 3) {
d159 1
a159 1
			dip->bios_info.flags |= (BDI_INVALID | BDI_EL_TORITO);
a160 1
			bsdunit = dip->name[2] - '0';
@


1.13
log
@more work towards unifying devices (and network)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.12 2009/01/10 14:49:04 tg Exp $ */
d47 2
d53 1
a111 1

d116 12
a128 1
	int i;
d132 2
a133 4
	/* Hard disks */
	for (i = 0x80; i < 0x88; i++) {
		dip = alloc(sizeof(struct diskinfo));
		bzero(dip, sizeof(*dip));
d135 1
a135 1
		if (bios_getdiskinfo(i, &dip->bios_info)) {
d137 2
a138 2
			if (debug)
				printf(" <!hd%u>", i&0x7f);
d140 3
a142 3
			free(dip, 0);
			break;
		}
d144 2
a145 2
		if (!start_dip && i386_biosdev == i)
			start_dip = dip;
d147 10
a156 6
		dip->name[0] = 'h';
		dip->name[1] = 'd';
		dip->name[2] = '0' + (i & 0x7F);
		dip->name[3] = '\0';
		printf(" %s%s", dip->name,
		    (dip->bios_info.bios_edd > 0 ? "+" : ""));
d158 7
a164 2
		/* Try to find the label, to figure out device type */
		if ((bios_getdisklabel(&dip->bios_info, &dip->disklabel)) ) {
a167 21
		} else {
			/* Best guess */
			switch (dip->disklabel.d_type) {
			case DTYPE_SCSI:
				type = 4;
				bsdunit = scsi++;
				dip->bios_info.flags |= BDI_GOODLABEL;
				break;

			case DTYPE_ESDI:
			case DTYPE_ST506:
				type = 0;
				bsdunit = ide++;
				dip->bios_info.flags |= BDI_GOODLABEL;
				break;

			default:
				dip->bios_info.flags |= BDI_BADLABEL;
				type = 0;	/* XXX Suggest IDE */
				bsdunit = ide++;
			}
d169 8
d178 6
a183 4
		dip->bios_info.checksum = 0; /* just in case */
		/* Fill out best we can */
		dip->bios_info.bsd_dev =
		    MAKEBOOTDEV(type, 0, 0, bsdunit, RAW_PART);
d185 5
a189 2
		/* Add to queue of disks */
		TAILQ_INSERT_TAIL(&disklist, dip, list);
d191 8
a256 1
		int d = bdi->bios_number;
d263 2
a264 1
		    dip->name, d, (bdi->flags & BDI_BADLABEL)?"*none*":"label",
@


1.12
log
@comment out tori stuff, will be merged into biosdev access
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.11 2009/01/03 13:43:33 tg Exp $ */
d56 4
a59 1
struct diskinfo *bootdev_dip;
d84 8
a91 1
		printf(" fd%u", i);
a118 13
#ifndef SMALL_BOOT
	/* CD-ROM */
//	if (i386_toridev) { //XXX
		printf(" cd0");
		dip = alloc(sizeof(struct diskinfo));
		memset(dip, 0, sizeof(*dip));
		dip->bios_info.bsd_dev = MAKEBOOTDEV(6, 0, 0, 0, RAW_PART);
		dip->bios_info.flags |= (BDI_INVALID | BDI_EL_TORITO);
//		dip->bios_info.bios_number = i386_toridev;
		TAILQ_INSERT_TAIL(&disklist, dip, list);
//	}
#endif

a120 5
#ifndef SMALL_BOOT
//		if (i == i386_toridev)
//			continue;
#endif

d133 9
a141 1
		printf(" hd%u%s", i&0x7f, (dip->bios_info.bios_edd > 0?"+":""));
a192 3
	/* Init stuff */
	TAILQ_INIT(&disklist);

d201 3
a226 94

#ifdef notdef
void
cdprobe(void)
{
	struct diskinfo *dip;
	int cddev = bios_cddev & 0xff;

	/* Another BIOS boot device... */

	if (bios_cddev == -1)			/* Not been set, so don't use */
		return;

	dip = alloc(sizeof(struct diskinfo));
	bzero(dip, sizeof(*dip));

#if 0
	if (bios_getdiskinfo(cddev, &dip->bios_info)) {
		printf(" <!cd0>");	/* XXX */
		free(dip, 0);
		return;
	}
#endif

	printf(" cd0");

	dip->bios_info.bios_number = cddev;
	dip->bios_info.bios_edd = 1;		/* Use the LBA calls */
	dip->bios_info.flags |= BDI_GOODLABEL | BDI_EL_TORITO;
	dip->bios_info.checksum = 0;		 /* just in case */
	dip->bios_info.bsd_dev =
	    MAKEBOOTDEV(0, 0, 0, 0xff, RAW_PART);

	/* Create an imaginary disk label */
	dip->disklabel.d_secsize = 2048;
	dip->disklabel.d_ntracks = 1;
	dip->disklabel.d_nsectors = 100;
	dip->disklabel.d_ncylinders = 1;
	dip->disklabel.d_secpercyl = dip->disklabel.d_ntracks *
	    dip->disklabel.d_nsectors;
	if (dip->disklabel.d_secpercyl == 0) {
		dip->disklabel.d_secpercyl = 100;
		/* as long as it's not 0, since readdisklabel divides by it */
	}

	strncpy(dip->disklabel.d_typename, "ATAPI CD-ROM",
	    sizeof(dip->disklabel.d_typename));
	dip->disklabel.d_type = DTYPE_ATAPI;

	strncpy(dip->disklabel.d_packname, "fictitious",
	    sizeof(dip->disklabel.d_packname));
	dip->disklabel.d_secperunit = 100;
	dip->disklabel.d_rpm = 300;
	dip->disklabel.d_interleave = 1;

	dip->disklabel.d_bbsize = 2048;
	dip->disklabel.d_sbsize = 2048;

	/* 'a' partition covering the "whole" disk */
	dip->disklabel.d_partitions[0].p_offset = 0;
	dip->disklabel.d_partitions[0].p_size = 100;
	dip->disklabel.d_partitions[0].p_fstype = FS_UNUSED;

	/* The raw partition is special */
	dip->disklabel.d_partitions[RAW_PART].p_offset = 0;
	dip->disklabel.d_partitions[RAW_PART].p_size = 100;
	dip->disklabel.d_partitions[RAW_PART].p_fstype = FS_UNUSED;

	dip->disklabel.d_npartitions = RAW_PART + 1;

	dip->disklabel.d_magic = DISKMAGIC;
	dip->disklabel.d_magic2 = DISKMAGIC;
	dip->disklabel.d_checksum = dkcksum(&dip->disklabel);

	/* Add to queue of disks */
	TAILQ_INSERT_TAIL(&disklist, dip, list);
}
#endif


/* Find info on given BIOS disk */
struct diskinfo *
dklookup(int dev)
{
	struct diskinfo *dip;

	for(dip = TAILQ_FIRST(&disklist); dip; dip = TAILQ_NEXT(dip, list))
		if((dip->bios_info.bios_number == dev) &&
		    !(dip->bios_info.flags & BDI_EL_TORITO))
			return(dip);

	return NULL;
}

d239 6
a244 4
		printf("%cd%d\t0x%X\t%s\t%d\t%d\t%d\t0x%X\t0x%X\n",
		    (bdi->flags & BDI_EL_TORITO) ? 'c' : ((d & 0x80)?'h':'f'),
		    (bdi->flags & BDI_EL_TORITO) ?  0  : d & 0x7F, d,
			(bdi->flags & BDI_BADLABEL)?"*none*":"label",
a249 15
/* Find BIOS portion on given BIOS disk
 * XXX - Use dklookup() instead.
 */
bios_diskinfo_t *
bios_dklookup(int dev)
{
	struct diskinfo *dip;

	dip = dklookup(dev);
	if (dip)
		return &dip->bios_info;

	return NULL;
}

d268 2
a269 1
		if (!(bdi->bios_number & 0x80) || bdi->flags & BDI_INVALID)
d284 1
a284 1
			    !(bd->flags & BDI_INVALID) &&
@


1.11
log
@‚Ä¢ cut down on stack usage
‚Ä¢ improve reliability (especially on 64K and larger reads)
‚Ä¢ remove alloca
‚Ä¢ nuke tori transfer buffer
by making use of a paragraph-aligned 4 KiB bounce buffer very early in
the .bss section (allocated in srt0.S, which is first in link)

XXX biosdev.c ist eine Ausgeburt an H√§√ülichkeit!
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.10 2009/01/02 05:16:34 tg Exp $ */
d111 1
a111 1
	if (i386_toridev) {
d117 1
a117 1
		dip->bios_info.bios_number = i386_toridev;
d119 1
a119 1
	}
d125 2
a126 2
		if (i == i386_toridev)
			continue;
@


1.10
log
@bump, regenerate, etc.
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.9 2009/01/02 04:58:41 tg Exp $ */
d370 1
a370 1
	buf = alloca(DEV_BSIZE);
d395 1
@


1.9
log
@remove toridev kludge and probe the bios boot device for El Torito in
no emulation mode‚Ä¶ if so, set the flag
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.8 2008/11/08 23:04:08 tg Exp $ */
d6 1
a6 1
 * Copyright (c) 2002, 2003
@


1.8
log
@more mass conversions, including ancient eMail addresses
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.7 2008/08/01 11:32:54 tg Exp $ */
a48 2
extern u_int32_t tori_bootflag;

d111 1
a111 1
	if (tori_bootflag) {
d117 1
a117 1
		dip->bios_info.bios_number = tori_bootflag & 0xFF;
d125 1
a125 1
		if ((tori_bootflag) && (i == (tori_bootflag & 0xFF)))
@


1.7
log
@merge the fix
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.6 2008/08/01 11:24:59 tg Exp $ */
d7 1
a7 1
 *	Thorsten "mirabilos" Glaser <tg@@66h.42h.de>
@


1.6
log
@merge and reduce diff to obsd
XXX not yet tested
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.5 2006/08/19 14:20:30 tg Exp $ */
d118 1
a118 1
		dip->bios_info.flags |= (BDI_INVALID | BDI_ELTORITO);
d317 1
a317 1
		    !(dip->bios_info.flags & BDI_ELTORITO))
d336 2
a337 2
		    (bdi->flags & BDI_ELTORITO) ? 'c' : ((d & 0x80)?'h':'f'),
		    (bdi->flags & BDI_ELTORITO) ?  0  : d & 0x7F, d,
@


1.5
log
@attempt to shrink fdboot even more
@
text
@d1 2
a2 2
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.4 2005/07/07 12:27:27 tg Exp $ */
/*	$OpenBSD: diskprobe.c,v 1.27 2004/06/23 00:21:49 tom Exp $	*/
d7 1
a7 1
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
d72 1
a72 1
		memset(dip, 0, sizeof(*dip));
d87 7
a93 1
		/* Defer disklabel lookup until it is needed */
d132 1
a132 1
		memset(dip, 0, sizeof(*dip));
d146 1
a146 1
		if (bios_getdisklabel(&dip->bios_info, &dip->disklabel) != NULL) {
d230 79
@


1.4
log
@unify libz use (make bootloader use base libz sources)
simplify defines
add more RCS IDs
shrink code
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.3 2005/04/29 18:34:59 tg Exp $ */
d105 1
d116 1
d120 1
d123 1
d243 1
d245 1
@


1.3
log
@(tentative) merge, more to come
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/libsa/diskprobe.c,v 1.2 2005/03/06 21:27:06 tg Exp $ */
d42 1
a42 2
#define	_BSD_STANDXX
#include <lib/libz/zlib.h>
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 2
a2 2
/**	$MirOS$ */
/*	$OpenBSD: diskprobe.c,v 1.26 2004/03/19 13:48:18 tom Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
d6 2
d33 1
a33 1
/* We want the disk type names from disklabel.h */
d42 1
d50 2
d73 1
a73 1
		bzero(dip, sizeof(*dip));
d88 1
a88 7

		/*
		 * Delay reading the disklabel until we're sure we want
		 * to boot from the floppy. Doing this avoids a delay
		 * (sometimes very long) when trying to read the label
		 * and the drive is unplugged.
		 */
d105 11
a115 1
	const char *dc = (const char *)((0x40 << 4) + 0x75);
d118 4
a121 1
	for (i = 0x80; i < (0x80 + *dc); i++) {
d123 1
a123 1
		bzero(dip, sizeof(*dip));
d137 1
a137 1
		if ((bios_getdisklabel(&dip->bios_info, &dip->disklabel)) ) {
d227 4
a230 3
	for (dip = TAILQ_FIRST(&disklist); dip; dip = TAILQ_NEXT(dip, list))
		if (dip->bios_info.bios_number == dev)
			return dip;
d245 4
a248 3
		printf("%cd%d\t0x%x\t%s\t%d\t%d\t%d\t0x%x\t0x%x\n",
		    (d & 0x80)?'h':'f', d & 0x7F, d,
		    (bdi->flags & BDI_BADLABEL)?"*none*":"label",
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@d1 1
a1 1
/*	$OpenBSD: diskprobe.c,v 1.27 2004/06/23 00:21:49 tom Exp $	*/
a55 2
extern int bios_bootdev;
extern int bios_cddev;
a207 78
void
cdprobe(void)
{
	struct diskinfo *dip;
	int cddev = bios_cddev & 0xff;

	/* Another BIOS boot device... */

	if (bios_cddev == -1)			/* Not been set, so don't use */
		return;

	dip = alloc(sizeof(struct diskinfo));
	bzero(dip, sizeof(*dip));

#if 0
	if (bios_getdiskinfo(cddev, &dip->bios_info)) {
		printf(" <!cd0>");	/* XXX */
		free(dip, 0);
		return;
	}
#endif

	printf(" cd0");

	dip->bios_info.bios_number = cddev;
	dip->bios_info.bios_edd = 1;		/* Use the LBA calls */
	dip->bios_info.flags |= BDI_GOODLABEL | BDI_EL_TORITO;
	dip->bios_info.checksum = 0;		 /* just in case */
	dip->bios_info.bsd_dev =
	    MAKEBOOTDEV(0, 0, 0, 0xff, RAW_PART);

	/* Create an imaginary disk label */
	dip->disklabel.d_secsize = 2048;
	dip->disklabel.d_ntracks = 1;
	dip->disklabel.d_nsectors = 100;
	dip->disklabel.d_ncylinders = 1;
	dip->disklabel.d_secpercyl = dip->disklabel.d_ntracks *
	    dip->disklabel.d_nsectors;
	if (dip->disklabel.d_secpercyl == 0) {
		dip->disklabel.d_secpercyl = 100;
		/* as long as it's not 0, since readdisklabel divides by it */
	}

	strncpy(dip->disklabel.d_typename, "ATAPI CD-ROM",
	    sizeof(dip->disklabel.d_typename));
	dip->disklabel.d_type = DTYPE_ATAPI;

	strncpy(dip->disklabel.d_packname, "fictitious",
	    sizeof(dip->disklabel.d_packname));
	dip->disklabel.d_secperunit = 100;
	dip->disklabel.d_rpm = 300;
	dip->disklabel.d_interleave = 1;
	dip->disklabel.d_flags = D_REMOVABLE;

	dip->disklabel.d_bbsize = 2048;
	dip->disklabel.d_sbsize = 2048;

	dip->disklabel.d_magic = DISKMAGIC;
	dip->disklabel.d_magic2 = DISKMAGIC;
	dip->disklabel.d_checksum = dkcksum(&dip->disklabel);

	/* 'a' partition covering the "whole" disk */
	dip->disklabel.d_partitions[0].p_offset = 0;
	dip->disklabel.d_partitions[0].p_size = 100;
	dip->disklabel.d_partitions[0].p_fstype = FS_UNUSED;

	/* The raw partition is special */
	dip->disklabel.d_partitions[RAW_PART].p_offset = 0;
	dip->disklabel.d_partitions[RAW_PART].p_size = 100;
	dip->disklabel.d_partitions[RAW_PART].p_fstype = FS_UNUSED;

	dip->disklabel.d_npartitions = RAW_PART + 1;

	/* Add to queue of disks */
	TAILQ_INSERT_TAIL(&disklist, dip, list);
}


a229 9
		int u = d & 0x7f;
		char c;

		if (bdi->flags & BDI_EL_TORITO) {
			c = 'c';
			u = 0;
		} else {
		    	c = (d & 0x80) ? 'h' : 'f';
		}
d232 1
a232 1
		    c, u, d,
@


1.1.1.3
log
@import bootloader-related pieces from openbsd, as first part of the
aspired 4.4 merge‚Ä¶ and something else
@
text
@d1 1
a1 1
/*	$OpenBSD: diskprobe.c,v 1.29 2007/06/18 22:11:20 krw Exp $	*/
d262 1
d267 4
a282 4
	dip->disklabel.d_magic = DISKMAGIC;
	dip->disklabel.d_magic2 = DISKMAGIC;
	dip->disklabel.d_checksum = dkcksum(&dip->disklabel);

@


