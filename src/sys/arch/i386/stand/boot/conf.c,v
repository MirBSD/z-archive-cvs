head	1.25;
access;
symbols
	tg-use_ldscript:1.21.0.2
	tg-beforemerge-ksrc10:1.1.1.4
	cvs-200808011000:1.1.1.4
	MIRBSD_10:1.8.0.2
	MIRBSD_10_BASE:1.8
	MIRBSD_9_BASE:1.6
	MIRBSD_8:1.5.0.2
	MIRBSD_8_BASE:1.5
	cvs-200507032030:1.1.1.3
	cvs-200505050030:1.1.1.3
	cvs-200504291700:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2010.01.10.20.18.53;	author tg;	state Exp;
branches;
next	1.24;
commitid	1004B4A3588743BF0D3;

1.24
date	2010.01.10.19.21.35;	author tg;	state Exp;
branches;
next	1.23;
commitid	1004B4A28CB0F23DD4D;

1.23
date	2009.12.26.15.09.01;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004B3626F70ADEB9B5;

1.22
date	2009.12.26.15.06.14;	author tg;	state Exp;
branches;
next	1.21;
commitid	1004B3626670CBA1E38;

1.21
date	2009.10.27.13.54.27;	author tg;	state Exp;
branches
	1.21.2.1;
next	1.20;
commitid	1004AE6FB9F32247080;

1.20
date	2009.10.27.13.37.28;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004AE6F7A57356F898;

1.19
date	2009.08.11.13.23.58;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004A8170C73C4BAD74;

1.18
date	2009.08.09.18.51.41;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004A7F1A1B76A4634B;

1.17
date	2009.01.10.22.18.52;	author tg;	state Exp;
branches;
next	1.16;
commitid	10049691EDB67E0F5CA;

1.16
date	2009.01.10.14.49.03;	author tg;	state Exp;
branches;
next	1.15;
commitid	1004968B5690CAD8165;

1.15
date	2009.01.10.13.06.19;	author tg;	state Exp;
branches;
next	1.14;
commitid	10049689D51517CA62C;

1.14
date	2009.01.10.13.03.39;	author tg;	state Exp;
branches;
next	1.13;
commitid	10049689CC34D57A5B2;

1.13
date	2009.01.10.12.38.56;	author tg;	state Exp;
branches;
next	1.12;
commitid	100496896F00D07F7D3;

1.12
date	2008.12.31.16.38.36;	author tg;	state Exp;
branches;
next	1.11;
commitid	100495BA02136D7BE32;

1.11
date	2008.12.28.05.29.07;	author tg;	state Exp;
branches;
next	1.10;
commitid	10049570E9955828A99;

1.10
date	2008.08.01.12.39.07;	author tg;	state Exp;
branches;
next	1.9;
commitid	100489303F432B4030A;

1.9
date	2008.08.01.11.24.58;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004892F2924667C00D;

1.8
date	2007.05.24.21.38.04;	author tg;	state Exp;
branches;
next	1.7;
commitid	100465605D344E11D22;

1.7
date	2006.08.19.14.20.28;	author tg;	state Exp;
branches;
next	1.6;
commitid	10044E71E3D359AC2FA;

1.6
date	2006.05.15.20.47.05;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004468E8C548985FB8;

1.5
date	2005.11.23.21.55.20;	author tg;	state Exp;
branches;
next	1.4;
commitid	31c34384e5559fcb;

1.4
date	2005.05.05.00.34.28;	author tg;	state Exp;
branches;
next	1.3;
commitid	181b42796a2a3a71;

1.3
date	2005.04.29.18.34.57;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.21.27.03;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.21.2.1
date	2009.10.27.15.10.50;	author tg;	state Exp;
branches;
next	1.21.2.2;
commitid	1004AE70D6303F6EF50;

1.21.2.2
date	2009.10.27.15.31.18;	author tg;	state Exp;
branches;
next	;
commitid	1004AE7125727D3440D;

1.1.1.1
date	2005.02.05.17.27.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.17.05.46;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.05.05.00.32.53;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	48e9427969c07d49;

1.1.1.4
date	2008.08.01.10.28.37;	author tg;	state Exp;
branches;
next	;
commitid	1004892E54805BE97AB;


desc
@@


1.25
log
@• kern: new KERNISUSR (defined by libc and libmdsup, but not by either
  bootloader or kernel), enables new NUSRCS, UIF_NUSRCS
• move MD strncmp() to kern
• move MI {str,wcs}case{,n}cmp to kern
• make wcs* functions NU not KU as we don’t need them in the kernel YET
• move __main to NU (it’s a joke anyway, I think)
• bootloader: make devsw_prefix_match case-insensitive
@
text
@/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.24 2010/01/10 19:21:35 tg Exp $ */
/*	$OpenBSD: conf.c,v 1.39 2008/04/19 23:20:22 weingart Exp $	*/

/*
 * Copyright (c) 1996 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef SMALL_BOOT
#undef USE_DOSFS
#undef USE_PXE
#endif

#include <sys/types.h>
#include <netinet/in.h>
#include <libsa.h>
#include <lib/libsa/ufs.h>
#include <lib/libsa/cd9660.h>
#ifdef USE_USTARFS
#include <lib/libsa/ustarfs.h>
#endif
#ifndef SMALL_BOOT
#include <lib/libsa/fat.h>
#include <lib/libsa/lmbmfs.h>
#include <lib/libsa/dummydev.h>
#include "dosfs.h"
#ifdef USE_PXE
#include <lib/libsa/nfs.h>
#include <lib/libsa/tftp.h>
#include <lib/libsa/netif.h>
#endif
#include <sys/disklabel.h>
#include "disk.h"
#endif
#include <biosdev.h>
#include <dev/cons.h>
#include "debug.h"
#define CMD_TABLE_ONLY
#include <stand/boot/cmd.h>
#include "cmd_i386.h"
#ifdef USE_PXE
#include "pxeboot.h"
#include "pxe_net.h"
#endif

#ifdef USE_PXE
void pxecheck(void);
extern int Xpxe(void);
#endif

#ifndef SMALL_BOOT
static void lmbmfs_check(void);
#endif

#ifdef USE_DOSFS
static void dosfs_check(void);
#endif

const char version[] = __BOOT_VER;
int debug = 1;

void (*sa_cleanup)(void) = NULL;

void (*i386_probe1[])(void) = {
	ps2probe, gateA20on, /* debug_init, */ cninit,
	apmprobe, pciprobe, /* smpprobe, */
#ifdef USE_PXE
	pxeprobe, pxecheck,
#endif
	memprobe
};
void (*i386_probe2[])(void) = {
#ifndef SMALL_BOOT
	lmbmfs_check,
#endif
#ifdef USE_DOSFS
	dosfs_check,
#endif
 	diskprobe
};
#ifdef USE_PXE
void (*i386_probe3[])(void) = {
	pxeinfo
/*	netprobe_pxe, netprobe_mac, netprobe_inet4, netprobe_bootdev */
};
#endif

struct i386_boot_probes probe_list[] = {
	{ "probing", i386_probe1, NENTS(i386_probe1) },
	{ "disk",    i386_probe2, NENTS(i386_probe2) },
#ifdef USE_PXE
	{ "net",     i386_probe3, NENTS(i386_probe3) },
#endif
};
int nibprobes = NENTS(probe_list);

/* filesystems applying to generic devices, not pseudodevices */
struct fs_ops file_system[] = {
#ifndef SMALL_BOOT
	{ cd9660_open,	cd9660_close,	cd9660_read,	   cd9660_write,
	  cd9660_seek,	cd9660_stat,	cd9660_readdir,	   "cd9660" },
#endif
	{ ufs_open,	ufs_close,	ufs_read,	   ufs_write,
	  ufs_seek,	ufs_stat,	ufs_readdir,	   "ufs" },
#ifndef SMALL_BOOT
	{ fat_open,	fat_close,	fat_read,	   fat_write,
	  fat_seek,	fat_stat,	fat_readdir,	   "fat" },
#endif
#ifdef USE_USTARFS
	{ ustarfs_open,	ustarfs_close,	ustarfs_read,	   ustarfs_write,
	  ustarfs_seek,	ustarfs_stat,	ustarfs_readdir,   "ustarfs" },
#endif
};
int nfsys = NENTS(file_system);

struct devsw devsw[] = {
	{ "BIOS", biosstrategy, biosopen, biosclose, biosioctl },
#ifndef SMALL_BOOT
#define DEVSW_DUMMYDEV 1
	{ "DUMY", dummydev_strategy, dummydev_open, dummydev_close,
	  dummydev_ioctl },
#ifdef USE_PXE
#define DEVSW_NET 2
	{ "PXE", net_strategy, net_open, net_close, net_ioctl },
#endif
#endif
};

struct consdev constab[] = {
	{ pc_probe, pc_init, pc_getc, pc_putc },
	{ com_probe, com_init, com_getc, com_putc },
	{ NULL }
};
struct consdev *cn_tab = constab;

const struct cmd_table cmd_machine[] = {
#ifndef SMALL_BOOT
	{ "boot",	CMDT_CMD, Xboot },
	{ "diskinfo",	CMDT_CMD, Xdiskinfo },
	{ "exec",	CMDT_CMD, Xmdexec },
	{ "label",	CMDT_CMD, Xlabel },
#endif
	{ "memory",	CMDT_CMD, Xmemory },
#ifndef SMALL_BOOT
#ifdef DEBUG
	{ "regs",	CMDT_CMD, Xregs },
#endif
#endif
	{ "oldbios",	CMDT_CMD, Xoldbios },
#ifdef USE_PXE
	{ "pxe",	CMDT_CMD, Xpxe },
#endif
	{ NULL, 0, NULL }
};

#ifdef USE_PXE
static struct fs_ops tftp_fs_ops[] = {
	{ tftp_open,   tftp_close,   tftp_read,   tftp_write,   tftp_seek,
	  tftp_stat,   tftp_readdir, "tftp" },
};
static struct fs_ops nfs_fs_ops[] = {
	{ nfs_open,    nfs_close,    nfs_read,    nfs_write,    nfs_seek,
	  nfs_stat,    nfs_readdir,  "nfs" }
};
struct netif_driver *netif_drivers[] = {
};
int n_netif_drivers = NENTS(netif_drivers);

void
pxecheck(void)
{
	nibprobes = NENTS(probe_list);
	if (have_pxe > 0) {
		if (i386_biosflags & 4) {
			start_dip = alloc(sizeof (struct diskinfo));
			bzero(start_dip, sizeof (struct diskinfo));
			memcpy(start_dip->name, "tftp", 5);
			start_dip->ops = tftp_fs_ops;
			start_dip->bios_info.flags = BDI_NOTADISK;
			TAILQ_INSERT_TAIL(&disklist, start_dip, list);
		}

		have_pxe = 1;
		sa_cleanup = pxe_shutdown;
	} else {
		have_pxe = 0;
		nibprobes -= 1;
	}
}
#endif

#ifndef SMALL_BOOT
static struct fs_ops lmbm_fs_ops[] = {
	{ lmbmfs_open, lmbmfs_close, lmbmfs_read, lmbmfs_write, lmbmfs_seek,
	  lmbmfs_stat, lmbmfs_readdir, "lmbmfs" }
};

void
lmbmfs_check(void)
{
	if (lmbmfs_init() == 0) {
		start_dip = alloc(sizeof (struct diskinfo));
		bzero(start_dip, sizeof (struct diskinfo));
		memcpy(start_dip->name, "lmbm", 5);
		start_dip->ops = lmbm_fs_ops;
		start_dip->bios_info.flags = BDI_NOTADISK;
		TAILQ_INSERT_TAIL(&disklist, start_dip, list);
	}
}
#endif

#ifdef USE_DOSFS
static struct fs_ops dos_fs_ops[] = {
	{ dosfs_open, dosfs_close, dosfs_read, dosfs_write, dosfs_seek,
	  dosfs_stat, dosfs_readdir, "dosfs" }
};

void
dosfs_check(void)
{
	if (dosfs_init() == 0) {
		start_dip = alloc(sizeof (struct diskinfo));
		bzero(start_dip, sizeof (struct diskinfo));
		memcpy(start_dip->name, "dos", 4);
		start_dip->ops = dos_fs_ops;
		start_dip->bios_info.flags = BDI_NOTADISK;
		TAILQ_INSERT_TAIL(&disklist, start_dip, list);
	}
}
#endif

struct devsw_prefix_match devsw_match[] = {
#ifndef SMALL_BOOT
	{ &devsw[DEVSW_DUMMYDEV], lmbm_fs_ops, "lmbm", 0, 1 },
#ifdef USE_DOSFS
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "dos", 0, 1 },
#ifdef USE_DOSFS_LETTERS
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "a", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "b", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "c", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "d", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "e", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "f", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "g", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "h", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "i", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "j", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "k", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "l", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "m", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "n", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "o", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "p", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "q", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "r", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "s", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "t", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "u", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "v", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "w", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "x", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "y", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "z", 0, 0 },
#endif
#endif
#ifdef USE_PXE
	{ &devsw[DEVSW_NET], tftp_fs_ops, "tftp", 1, 1 },
	{ &devsw[DEVSW_NET], nfs_fs_ops, "nfs", 1, 1 },
#endif
#endif
	{ &devsw[0], NULL, "", 0, 0 },
	{ NULL, NULL, "", 0, 0 }
};
@


1.24
log
@new ustarfs for the bootloader (fdboot only ATM, since boot’s too huge)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.23 2009/12/26 15:09:01 tg Exp $ */
a284 26
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "A", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "B", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "C", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "D", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "E", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "F", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "G", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "H", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "I", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "J", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "K", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "L", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "M", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "N", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "O", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "P", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "Q", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "R", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "S", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "T", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "U", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "V", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "W", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "X", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "Y", 0, 0 },
	{ &devsw[DEVSW_DUMMYDEV], dos_fs_ops, "Z", 0, 0 },
@


1.23
log
@new “dosfs” filesystem, for things like
• boot> cat c:\x
• boot> cat dos:c:\x
• boot> cat dos:c:/x
• boot> b c:/bsd

sadly, MirBSD doesn’t boot in dosbox (illegal opcode trap)…
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.21 2009/10/27 13:54:27 tg Exp $ */
d40 3
d121 2
a122 2
	{ cd9660_open, cd9660_close, cd9660_read, cd9660_write, cd9660_seek,
	  cd9660_stat, cd9660_readdir, "cd9660" },
d124 2
a125 2
	{ ufs_open,    ufs_close,    ufs_read,    ufs_write,    ufs_seek,
	  ufs_stat,    ufs_readdir,    "ufs" },
d127 6
a132 2
	{ fat_open,    fat_close,    fat_read,    fat_write,    fat_seek,
	  fat_stat,    fat_readdir,    "fat" },
@


1.22
log
@split “lmbm” dummy device from lmbmfs filesystem, call it “DUMY” (dummydev)
@
text
@d31 1
d44 1
d73 4
d94 3
d226 20
d249 57
@


1.21
log
@new command "machine pxe", although I somehow don't think it helps much…
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.20 2009/10/27 13:37:28 tg Exp $ */
d42 1
d47 1
d49 1
a49 1
#endif
a57 1
#include "disk.h"
d124 3
a126 2
#define DEVSW_LMBM 1
	{ "lmbm", lmbm_strategy, lmbm_open, lmbm_close, lmbm_ioctl },
d219 1
a219 1
	{ &devsw[DEVSW_LMBM], lmbm_fs_ops, "lmbm", 0, 1 },
@


1.21.2.1
log
@attempt to move *all* of .bss to 3000:0000h and up
(when loaded via gPXE+PXELINUX, fighting memory corruption?)

XXX we *really* need a position-independent or relocatable boot
XXX loader; sadly, gcc’s idea of PIC/PIE cannot be of any help…
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.21 2009/10/27 13:54:27 tg Exp $ */
a72 5
/* bss */
uint8_t bounce_buf[4096];
uint8_t crc_table[1024], sa_fixed_table[2176];
uint8_t biosdev_lba_buf[16];

@


1.21.2.2
log
@the address of bounce_buf is hardcoded in places…
@
text
@d73 5
@


1.20
log
@move cmd_machine from cmd_i386.c to conf.c
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.19 2009/08/11 13:23:58 tg Exp $ */
d62 2
a63 1
static void pxecheck(void);
d153 3
d175 1
@


1.19
log
@Totally revamp the virtual device code.

Unbreak:
• floppy access (BIOS)
• hard disc access (BIOS)
• CD-ROM El Torito access (BIOS)
• cd9660, fat, ffs (filesystems)

Not tested:
• tftp, nfs (PXE, NET, filesystems)
• lmbmfs (lmbm)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.17 2009/01/10 22:18:52 tg Exp $ */
d52 3
d138 17
@


1.18
log
@Add new (virtual) filesystem “lmbm” (Loadable MultiBoot Modules, like LKM)
that contains the modules we got passed when loaded as Multiboot OS Kernel
as per the spec. Quirks:
• case sensitive
• supports “ls” on its (virtual) root directory
• does *not* support filesystems (cuts off both the directory part of the
  module string passed and the directory part when opening a file, but the
  root directory can only be opened as “/” or “/.” (or “lmbm:/”, etc.)
• assumes that we and all modules are loaded below 20 MiB in RAM
• moves modules on filesystem initialisation (virtual disc probe) to just
  above 20 MiB in RAM
• assumes the kernel will fit below 20 MiB in RAM, too
• does not affect non-multiboot operation
@
text
@d46 1
d53 1
d56 1
d58 2
a59 4
#include <sys/disklabel.h>
#include "disk.h"

void pxecheck(void);
d63 1
a63 1
void lmbmfs_check(void);
d101 1
a103 3
#define O_LMBMFS 0
	{ lmbmfs_open, lmbmfs_close, lmbmfs_read, lmbmfs_write, lmbmfs_seek,
	  lmbmfs_stat, lmbmfs_readdir },
d105 1
a105 1
	  cd9660_stat, cd9660_readdir },
d108 1
a108 1
	  ufs_stat,    ufs_readdir    },
d111 1
a111 8
	  fat_stat,    fat_readdir    },
#endif
#ifdef USE_PXE
#define O_TFTP 4
	{ tftp_open,   tftp_close,   tftp_read,   tftp_write,   tftp_seek,
	  tftp_stat,   tftp_readdir   },
	{ nfs_open,    nfs_close,    nfs_read,    nfs_write,    nfs_seek,
	  nfs_stat,    nfs_readdir    },
d116 1
a116 1
struct devsw	devsw[] = {
a117 6
#if 0
	{ "TFTP", tftpstrategy, tftpopen, tftpclose, tftpioctl },
#endif
};
int ndevs = NENTS(devsw);

d119 2
a120 3
struct devsw lmbmsw[] = {
	{ "lmbm", lmbm_strategy, lmbm_open, lmbm_close, lmbm_ioctl }
};
d122 2
a123 3
struct devsw netsw[] = {
	{ "net",  net_strategy, net_open, net_close, net_ioctl },
};
a124 6

/* must match file_system[] */
const char *fs_name[] = {
	"lmbm", NULL, NULL, NULL,
#ifdef USE_PXE
	"tftp", "nfs"
a126 14
struct devsw *fs_type[] = {
	&lmbmsw[0], NULL, NULL, NULL,
#ifdef USE_PXE
	&netsw[0], &netsw[0]
#endif
};
int nfsname = NENTS(fs_name);
#endif

#ifdef USE_PXE
struct netif_driver	*netif_drivers[] = {
};
int n_netif_drivers = NENTS(netif_drivers);
#endif
d136 12
d156 1
a156 1
			start_dip->ops = &file_system[O_TFTP];
a165 5
		nfsys -= 2;
		nfsname -= 2;
#if 0
		ndevs -= 1;
#endif
d171 5
d183 1
a183 1
		start_dip->ops = &file_system[O_LMBMFS];
d189 12
@


1.17
log
@more work towards unifying devices (and network)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.16 2009/01/10 14:49:03 tg Exp $ */
d41 1
d61 4
d79 3
d102 3
d132 4
d137 5
d144 10
a153 1
	NULL, NULL, NULL, "tftp", "nfs"
d156 1
d158 1
a158 4
struct devsw	netsw[] = {
	{ "net",  net_strategy, net_open, net_close, net_ioctl },
};

d198 15
@


1.16
log
@comment out tori stuff, will be merged into biosdev access
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.15 2009/01/10 13:06:19 tg Exp $ */
d54 3
d104 3
a108 2
	{ tftp_open,   tftp_close,   tftp_read,   tftp_write,   tftp_seek,
	  tftp_stat,   tftp_readdir   },
d122 6
d149 9
d164 1
@


1.15
log
@comment out the pxe stuff again, for now (ifdef USE_PXE)
it won't work like this anyway
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.14 2009/01/10 13:03:39 tg Exp $ */
a38 1
#include <tori.h>
a109 3
#ifndef SMALL_BOOT
	{ "TORI", toristrategy, toriopen, toriclose, toriioctl },
#endif
@


1.14
log
@fix
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.13 2009/01/10 12:38:56 tg Exp $ */
d30 4
d42 1
d47 1
d51 1
a51 1
#ifndef SMALL_BOOT
a53 1
#endif
a54 1
#ifndef SMALL_BOOT
d66 1
a66 1
#ifndef SMALL_BOOT
d74 1
a74 1
#ifndef SMALL_BOOT
d84 1
a84 1
#ifndef SMALL_BOOT
d100 2
d121 1
a121 1
#ifndef SMALL_BOOT
d138 1
a138 1
#ifndef SMALL_BOOT
@


1.13
log
@experimentally, add pxe, tftp, nfs here
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.12 2008/12/31 16:38:36 tg Exp $ */
a37 2
#endif
#if 1 //def notdef
d45 1
d48 5
d55 1
a55 1
int	debug = 1;
d61 5
a65 1
	apmprobe, pciprobe, /* smpprobe, */ pxeprobe, memprobe
d70 1
d75 1
d80 1
d82 1
a85 1

a95 1
#if 1 //def notdef
a100 1
#endif
d115 1
a119 1
#if 1 //def notdef
a120 1
	NULL
d131 18
@


1.12
log
@shrink fdboot, nuke unused junk
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.11 2008/12/28 05:29:07 tg Exp $ */
d39 1
a39 1
#ifdef notdef
d47 2
d57 1
a57 1
	apmprobe, pciprobe, /* smpprobe, */ memprobe
d62 4
d69 2
a70 1
	{ "disk",    i386_probe2, NENTS(i386_probe2) }
d85 1
a85 1
#ifdef notdef
d88 2
d106 5
a110 1
#ifdef notdef
@


1.11
log
@overhaul and re-enable this, as it’s at least usable in some cases
(FAT12, FAT28 need testing, and can you say spoofdisklabel?)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.10 2008/08/01 12:39:07 tg Exp $ */
d36 1
d38 1
@


1.10
log
@remove unused code (for testing the bootloader on unix)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.9 2008/08/01 11:24:58 tg Exp $ */
d36 1
a37 1
#include <lib/libsa/fat.h>
a73 1
#ifdef notdef
d76 1
@


1.9
log
@merge and reduce diff to obsd
XXX not yet tested
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.8 2007/05/24 21:38:04 tg Exp $ */
a41 1
#include <lib/libsa/unixdev.h>
a79 4
#ifdef _TEST
	{ null_open,   null_close,   null_read,   null_write,   null_seek,
	  null_stat,   null_readdir   }
#endif
a84 3
#ifdef _TEST
	{ "UNIX", unixstrategy, unixopen, unixclose, unixioctl },
#else
a88 1
#endif
a102 3
#ifdef _TEST
	{ unix_probe, unix_init, unix_getc, unix_putc },
#else
a104 1
#endif
@


1.8
log
@shrink fdboot to <32 KiB, yay!
@
text
@d1 2
a2 2
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.7 2006/08/19 14:20:28 tg Exp $ */
/*	$OpenBSD: conf.c,v 1.32 2005/05/03 13:18:05 tom Exp $	*/
a27 1
 *
d50 1
a50 1
void (*sa_cleanup)(void) = (void *)0UL;
d118 1
a118 1
	{ 0 }
@


1.7
log
@attempt to shrink fdboot even more
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.6 2006/05/15 20:47:05 tg Exp $ */
d54 1
a54 1
	ps2probe, gateA20on, debug_init, cninit,
@


1.6
log
@save us almost 3 kB of code on the boot floppy
which won't ever be used as "no emulation" image
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.5 2005/11/23 21:55:20 tg Exp $ */
a50 4
#ifdef FFS_ONLY
uint32_t tori_bootflag = 0; /* to fool the diskprobe code */
#endif

a52 1

d69 1
a69 1
#ifndef FFS_ONLY
d75 1
a75 1
#ifndef FFS_ONLY
a81 1
#endif
d86 1
d94 1
a94 1
#ifndef FFS_ONLY
@


1.5
log
@fix some more cases of NULL usage in boot loader
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.4 2005/05/05 00:34:28 tg Exp $ */
d51 3
d74 1
d77 1
d80 1
d87 1
d99 1
d101 1
@


1.4
log
@automerge
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.3 2005/04/29 18:34:57 tg Exp $ */
d52 1
a52 1
void (*sa_cleanup)(void) = NULL;
d115 1
a115 1
	{ NULL }
@


1.3
log
@(tentative) merge, more to come
@
text
@d1 2
a2 2
/**	$MirOS: src/sys/arch/i386/stand/boot/conf.c,v 1.2 2005/03/06 21:27:03 tg Exp $ */
/*	$OpenBSD: conf.c,v 1.29 2005/04/25 23:09:04 tom Exp $	*/
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 2
a2 2
/**	$MirOS$ */
/*	$OpenBSD: conf.c,v 1.28 2004/03/19 13:48:19 tom Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
d35 2
a37 1
#include <lib/libsa/cd9660.h>
d48 1
a48 1
const char version[] = "2.06";
d71 2
a79 2
	{ cd9660_open, cd9660_close, cd9660_read, cd9660_write, cd9660_seek,
	  cd9660_stat, cd9660_readdir },
d92 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.29 2005/04/25 23:09:04 tom Exp $	*/
d46 1
a46 1
const char version[] = "2.07";
@


1.1.1.3
log
@latest fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.32 2005/05/03 13:18:05 tom Exp $	*/
d46 1
a46 1
const char version[] = "2.10";
@


1.1.1.4
log
@import bootloader-related pieces from openbsd, as first part of the
aspired 4.4 merge… and something else
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.39 2008/04/19 23:20:22 weingart Exp $	*/
d27 1
d46 1
a46 1
const char version[] = "3.02";
@


