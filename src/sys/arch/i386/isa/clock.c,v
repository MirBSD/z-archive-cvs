head	1.16;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.1
	MIRBSD_10:1.10.0.2
	MIRBSD_10_BASE:1.10
	MIRBSD_9_BASE:1.8
	MIRBSD_8:1.7.0.2
	MIRBSD_8_BASE:1.7
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2017.08.07.20.18.12;	author tg;	state Exp;
branches;
next	1.15;
commitid	1005988C69344442E37;

1.15
date	2011.11.20.20.01.03;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004EC95C962E644A3D;

1.14
date	2011.02.19.14.10.24;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004D5FCF5B5C7E6C02;

1.13
date	2011.02.19.13.04.59;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004D5FC00676EF7E0A;

1.12
date	2010.09.12.19.02.16;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004C8D23B831318D31;

1.11
date	2010.07.25.16.37.59;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004C4C685B2784BE9E;

1.10
date	2007.02.07.20.43.25;	author tg;	state Exp;
branches;
next	1.9;
commitid	10045CA39907FBE4A06;

1.9
date	2006.10.17.20.51.35;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004535424F7D089658;

1.8
date	2006.02.15.05.20.24;	author tg;	state Exp;
branches;
next	1.7;
commitid	10043F2BA18074B2120;

1.7
date	2005.12.15.03.07.44;	author tg;	state Exp;
branches;
next	1.6;
commitid	10043A0DDE635CDD034;

1.6
date	2005.10.19.17.42.26;	author tg;	state Exp;
branches;
next	1.5;
commitid	cad4356858f4429;

1.5
date	2005.10.19.17.41.03;	author tg;	state Exp;
branches;
next	1.4;
commitid	53174356853a7e6a;

1.4
date	2005.10.19.16.38.45;	author tg;	state Exp;
branches;
next	1.3;
commitid	68ea435676000263;

1.3
date	2005.08.02.10.54.46;	author tg;	state Exp;
branches;
next	1.2;
commitid	7c5942ef50f4985d;

1.2
date	2005.03.06.21.27.00;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.28;	author tg;	state Exp;
branches;
next	;


desc
@@


1.16
log
@filesystem
@
text
@/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.15 2011/11/20 20:01:03 tg Exp $ */
/*	$OpenBSD: clock.c,v 1.31 2004/02/27 21:07:49 grange Exp $	*/
/*	$NetBSD: clock.c,v 1.39 1996/05/12 23:11:54 mycroft Exp $	*/

/*-
 * Copyright (c) 2004, 2005, 2010, 2011
 *	Thorsten Glaser <tg@@mirbsd.org>
 * Copyright (c) 1993, 1994 Charles Hannum.
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz and Don Ahn.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)clock.c	7.2 (Berkeley) 5/12/91
 */
/* 
 * Mach Operating System
 * Copyright (c) 1991,1990,1989 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
  Copyright 1988, 1989 by Intel Corporation, Santa Clara, California.

		All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appears in all
copies and that both the copyright notice and this permission notice
appear in supporting documentation, and that the name of Intel
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.

INTEL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL INTEL BE LIABLE FOR ANY SPECIAL, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN ACTION OF CONTRACT,
NEGLIGENCE, OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/*
 * Primitive clock interrupt routines.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/timeout.h>

#include <dev/rndvar.h>

#include <machine/cpu.h>
#include <machine/intr.h>
#include <machine/pio.h>
#include <machine/cpufunc.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
#include <dev/ic/mc146818reg.h>
#include <i386/isa/nvram.h>
#include <i386/isa/timerreg.h>

#include "pcppi.h"
#if (NPCPPI > 0)
#include <dev/isa/pcppivar.h>

#define __BROKEN_INDIRECT_CONFIG /* XXX */
#ifdef __BROKEN_INDIRECT_CONFIG
int sysbeepmatch(struct device *, void *, void *);
#else
int sysbeepmatch(struct device *, struct cfdata *, void *);
#endif
void sysbeepattach(struct device *, struct device *, void *);

struct cfattach sysbeep_ca = {
	sizeof(struct device), sysbeepmatch, sysbeepattach
};

struct cfdriver sysbeep_cd = {
	NULL, "sysbeep", DV_DULL
};

static int ppi_attached;
static pcppi_tag_t ppicookie;
#endif /* PCPPI */

void	spinwait(int);
void	findcpuspeed(void);
int	clockintr(void *);
int	gettick(void);
void	sysbeep(int, int);
int	rtcget(mc_todregs *);
void	rtcput(mc_todregs *);
int 	hexdectodec(int);
int	dectohexdec(int);
int	rtcintr(void *);
void	rtcdrain(void *);

u_int mc146818_read(void *, u_int);
void mc146818_write(void *, u_int, u_int);

#if defined(I586_CPU) || defined(I686_CPU)
int pentium_mhz;
#endif
#if defined(I486_CPU) || defined(I586_CPU) || defined(I686_CPU)
int clock_broken_latch;
#endif

#define	SECMIN	((unsigned)60)			/* seconds per minute */
#define	SECHOUR	((unsigned)(60*SECMIN))		/* seconds per hour */
#define	SECDAY	((unsigned long)86400)
#define	SECYR	((unsigned long)SECDAY * 365)

u_int
mc146818_read(sc, reg)
	void *sc;					/* XXX use it? */
	u_int reg;
{
	int s;
	u_char v;

	s = splhigh();
	outb(IO_RTC, reg);
	DELAY(1);
	v = inb(IO_RTC+1);
	DELAY(1);
	splx(s);
	return (v);
}

void
mc146818_write(sc, reg, datum)
	void *sc;					/* XXX use it? */
	u_int reg, datum;
{
	int s;

	s = splhigh();
	outb(IO_RTC, reg);
	DELAY(1);
	outb(IO_RTC+1, datum);
	DELAY(1);
	splx(s);
}

void
startrtclock(void)
{
	int s;

	findcpuspeed();		/* use the clock (while it's free)
					to find the cpu speed */
	initrtclock();

	/* Check diagnostic status */
	if ((s = mc146818_read(NULL, NVRAM_DIAG)) != 0)	/* XXX softc */
		printf("RTC BIOS diagnostic error %d %s\n", (unsigned int) s,
		    NVRAM_DIAG_BITS);
}

void
rtcdrain(void *v)
{
	struct timeout *to = (struct timeout *)v;

	if (to != NULL)
		timeout_del(to);

	/*
	 * Drain any un-acknowledged RTC interrupts.
	 * See comment in cpu_initclocks().
	 */
  	while (mc146818_read(NULL, MC_REGC) & MC_REGC_PF)
		; /* Nothing. */
}

void
initrtclock(void)
{
	/* initialize 8253 clock */
	outb(TIMER_MODE, TIMER_SEL0|TIMER_RATEGEN|TIMER_16BIT);

	/* Correct rounding will buy us a better precision in timekeeping */
	outb(IO_TIMER1, TIMER_DIV(hz) % 256);
	outb(IO_TIMER1, TIMER_DIV(hz) / 256);
}

int
clockintr(void *arg)
{
	struct clockframe *frame = arg;		/* not strictly necessary */

	hardclock(frame);
	return (1);
}

int
rtcintr(void *arg)
{
	struct clockframe *frame = arg;		/* not strictly necessary */
	u_int stat = 0;

	/*
	 * If rtcintr is 'late', next intr may happen immediately.
	 * Get them all. (Also, see comment in cpu_initclocks().)
	 */
	while (mc146818_read(NULL, MC_REGC) & MC_REGC_PF) {
		statclock(frame);
		stat = 1;
	}
	return (stat);
}

int
gettick(void)
{

#if defined(I586_CPU) || defined(I686_CPU)
	if (clock_broken_latch) {
		int v1, v2, v3;
		int w1, w2, w3;

		disable_intr();

		v1 = inb(TIMER_CNTR0);
		v1 |= inb(TIMER_CNTR0) << 8;
		v2 = inb(TIMER_CNTR0);
		v2 |= inb(TIMER_CNTR0) << 8;
		v3 = inb(TIMER_CNTR0);
		v3 |= inb(TIMER_CNTR0) << 8;

		enable_intr();

		if (v1 >= v2 && v2 >= v3 && v1 - v3 < 0x200)
			return (v2);

#define _swap_val(a, b) do { \
	int c = a; \
	a = b; \
	b = c; \
} while (0)

		/* sort v1 v2 v3 */
		if (v1 < v2)
			_swap_val(v1, v2);
		if (v2 < v3)
			_swap_val(v2, v3);
		if (v1 < v2)
			_swap_val(v1, v2);

		/* compute the middle value */
		if (v1 - v3 < 0x200)
			return (v2);
		w1 = v2 - v3;
		w2 = v3 - v1 + TIMER_DIV(hz);
		w3 = v1 - v2;
		if (w1 >= w2) {
			if (w1 >= w3)
				return (v1);
		} else {
			if (w2 >= w3)
				return (v2);
		}
		return (v3);
	} else
#endif
	{
		u_char lo, hi;

		disable_intr();
		/* Select counter 0 and latch it. */
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);
		lo = inb(TIMER_CNTR0);
		hi = inb(TIMER_CNTR0);

		enable_intr();
		return ((hi << 8) | lo);
	}
}

/*
 * Wait "n" microseconds.
 * Relies on timer 1 counting down from (TIMER_FREQ / hz) at TIMER_FREQ Hz.
 * Note: timer had better have been programmed before this is first used!
 * (Note that we use `rate generator' mode, which counts at 1:1; `square
 * wave' mode counts at 2:1).
 */
void
delay(int n)
{
	int limit, tick, otick;

	/*
	 * Read the counter first, so that the rest of the setup overhead is
	 * counted.
	 */
	otick = gettick();

#ifdef __GNUC__
	/*
	 * Calculate ((n * TIMER_FREQ) / 1e6) using explicit assembler code so
	 * we can take advantage of the intermediate 64-bit quantity to prevent
	 * loss of significance.
	 */
	n -= 5;
	if (n < 0)
		return;
	__asm __volatile("mul %2\n\tdiv %3"
			 : "=a" (n) 
			 : "0" (n), "r" (TIMER_FREQ), "r" (1000000)
			 : "%edx", "cc");
#else
	/*
	 * Calculate ((n * TIMER_FREQ) / 1e6) without using floating point and
	 * without any avoidable overflows.
	 */
	n -= 20;
	{
		int sec = n / 1000000,
		    usec = n % 1000000;
		n = sec * TIMER_FREQ +
		    usec * (TIMER_FREQ / 1000000) +
		    usec * ((TIMER_FREQ % 1000000) / 1000) / 1000 +
		    usec * (TIMER_FREQ % 1000) / 1000000;
	}
#endif

	limit = TIMER_FREQ / hz;

	while (n > 0) {
		tick = gettick();
		if (tick > otick)
			n -= limit - (tick - otick);
		else
			n -= otick - tick;
		otick = tick;
	}
}

#if (NPCPPI > 0)
int
sysbeepmatch(parent, match, aux)
	struct device *parent;
#ifdef __BROKEN_INDIRECT_CONFIG
	void *match;
#else
	struct cfdata *match;
#endif
	void *aux;
{
	return (!ppi_attached);
}

void
sysbeepattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	printf("\n");

	ppicookie = ((struct pcppi_attach_args *)aux)->pa_cookie;
	ppi_attached = 1;
}
#endif

void
sysbeep(int pitch, int period)
{
#if (NPCPPI > 0)
	if (ppi_attached)
		pcppi_bell(ppicookie, pitch, period, 0);
#endif
}

unsigned int delaycount;	/* calibrated loop variable (1 millisecond) */

#define FIRST_GUESS   0x2000

void
findcpuspeed(void)
{
	unsigned int i, guess = FIRST_GUESS;
	int remainder;
	uint64_t j;

	goto start_loop;

	do {
		guess <<= 1;
		printf("clock: another round trying to find CPU speed\n");
 start_loop:
		if (!guess) {
			/* yuk */
			printf("clock: couldn't find CPU speed\n");
			delaycount = 1024;
			return;
		}

		/* Put counter in count down mode */
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_16BIT | TIMER_RATEGEN);
		outb(TIMER_CNTR0, 0xff);
		outb(TIMER_CNTR0, 0xff);
		for (i = guess; i; i--)
			;
		/* Read the value left in the counter */
		remainder = gettick();
	} while (remainder == 0xFFFF);

	/*
	 * Formula for delaycount is:
	 *  (loopcount * timer clock speed) / (counter ticks * 1000)
	 */
	j = guess;
	j *= TIMER_DIV(1000);
	j /= 0xFFFF - remainder;
	if (j > 0xFFFFFFFFULL) {
		/* yuk */
		printf("clock: CPU speed too large\n");
		j = 0xFFFFFFFFULL;
	}
	delaycount = j;

	if (guess != FIRST_GUESS)
		printf("clock: if this is qemu, try with '-icount auto'\n");
}

#if defined(I586_CPU) || defined(I686_CPU)
void
calibrate_cyclecounter(void)
{
	uint64_t last_count;
#ifdef PENTIUM_BROKEN_TSC
	uint64_t next_count;
#else
#define next_count pentium_base_tsc
#endif
	/* XXX this is a hack, we'd better do precision timekeeping */
	struct timeval tv;

	disable_intr();
	tv = time;
	enable_intr();
	/* it's probably not exactly one second, but pretty good */
	tv.tv_sec++;

	__asm __volatile("rdtsc" : "=A" (last_count));
	delay(1000000);
	__asm __volatile("rdtsc" : "=A" (next_count));
	pentium_mhz = ((next_count - last_count) + 999999) / 1000000;

	disable_intr();
	time = tv;
	enable_intr();
#undef next_count
}
#endif

void
cpu_initclocks(void)
{
	static struct timeout rtcdrain_timeout;
	stathz = 128;
	profhz = 1024;

	/*
	 * XXX If you're doing strange things with multiple clocks, you might
	 * want to keep track of clock handlers.
	 */
	(void)isa_intr_establish(NULL, 0, IST_PULSE, IPL_CLOCK, clockintr,
	    0, "clock");
	(void)isa_intr_establish(NULL, 8, IST_PULSE, IPL_CLOCK, rtcintr,
	    0, "rtc");

	mc146818_write(NULL, MC_REGA, MC_BASE_32_kHz | MC_RATE_128_Hz);
	mc146818_write(NULL, MC_REGB, MC_REGB_24HR | MC_REGB_PIE);

	/*
	 * On a number of i386 systems, the rtc will fail to start when booting
	 * the system. This is due to us missing to acknowledge an interrupt
	 * during early stages of the boot process. If we do not acknowledge
	 * the interrupt, the rtc clock will not generate further interrupts.
	 * To solve this, once interrupts are enabled, use a timeout (once)
	 * to drain any un-acknowledged rtc interrupt(s).
	 */

	timeout_set(&rtcdrain_timeout, rtcdrain, (void *)&rtcdrain_timeout);
	timeout_add(&rtcdrain_timeout, 1);
}

int
rtcget(mc_todregs *regs)
{
	if ((mc146818_read(NULL, MC_REGD) & MC_REGD_VRT) == 0) /* XXX softc */
		return (-1);
	MC146818_GETTOD(NULL, regs);			/* XXX softc */
	return (0);
}

void
rtcput(mc_todregs *regs)
{
	MC146818_PUTTOD(NULL, regs);			/* XXX softc */
}

int
hexdectodec(int n)
{

	return (((n >> 4) & 0x0f) * 10 + (n & 0x0f));
}

int
dectohexdec(int n)
{

	return ((u_char)(((n / 10) << 4) & 0xf0) | ((n % 10) & 0x0f));
}

static int timeset;

/*
 * check whether the CMOS layout is "standard"-like (ie, not PS/2-like),
 * to be called at splclock()
 */
int cmoscheck(void);

int
cmoscheck(void)
{
	int i;
	unsigned short cksum = 0;

	for (i = 0x10; i <= 0x2d; i++)
		cksum += mc146818_read(NULL, i); /* XXX softc */

	return (cksum == (mc146818_read(NULL, 0x2e) << 8)
			  + mc146818_read(NULL, 0x2f));
}

/*
 * patchable to control century byte handling:
 * 1: always update
 * -1: never touch
 * 0: try to figure out itself
 */
int rtc_update_century = 0;

/*
 * Expand a two-digit year as read from the clock chip
 * into full width.
 * Being here, deal with the CMOS century byte.
 */
int clock_expandyear(int);

int
clock_expandyear(int clockyear)
{
	int s, clockcentury, cmoscentury;

	clockcentury = (clockyear < 70) ? 20 : 19;
	clockyear += 100 * clockcentury;

	if (rtc_update_century < 0)
		return (clockyear);

	s = splclock();
	if (cmoscheck())
		cmoscentury = mc146818_read(NULL, NVRAM_CENTURY);
	else
		cmoscentury = 0;
	splx(s);
	if (!cmoscentury) {
#ifdef DIAGNOSTIC
		printf("clock: unknown CMOS layout\n");
#endif
		return (clockyear);
	}
	cmoscentury = hexdectodec(cmoscentury);

	if (cmoscentury != clockcentury) {
		/* XXX note: saying "century is 20" might confuse the naive. */
		printf("WARNING: NVRAM century is %d but RTC year is %d\n",
		       cmoscentury, clockyear);

		/* Kludge to roll over century. */
		if ((rtc_update_century > 0) ||
		    ((cmoscentury == 19) && (clockcentury == 20) &&
		     (clockyear == 2000))) {
			printf("WARNING: Setting NVRAM century to %d\n",
			       clockcentury);
			s = splclock();
			mc146818_write(NULL, NVRAM_CENTURY,
				       dectohexdec(clockcentury));
			splx(s);
		}
	} else if (cmoscentury == 19 && rtc_update_century == 0)
		rtc_update_century = 1; /* will update later in resettodr() */

	return (clockyear);
}

/*
 * Initialize the time of day register, based on the time base which is, e.g.
 * from a filesystem.
 */
void
inittodr(time_t base)
{
	struct {
		mc_todregs rtclk;
		time_t basetime, rtctime;
	} x;
	struct tm tm;
	int s;

	/*
	 * We mostly ignore the suggested time and go for the RTC clock time
	 * stored in the CMOS RAM.  If the time can't be obtained from the
	 * CMOS, or if the time obtained from the CMOS is 5 or more years
	 * less than the suggested time, we used the suggested time.  (In
	 * the latter case, it's likely that the CMOS battery has died.)
	 */

	if (base < 15*SECYR) {	/* if before 1985, something's odd... */
		printf("WARNING: preposterous time in filesystem\n");
		/* read the system clock anyway */
		base = 17*SECYR + 186*SECDAY + SECDAY/2;
	}

	time.tv_usec = 0;

	s = splclock();
	if (rtcget(&x.rtclk)) {
		splx(s);
		printf("WARNING: invalid time in clock chip\n");
		goto fstime;
	}
	splx(s);

	tm.tm_sec = hexdectodec(x.rtclk[MC_SEC]);
	tm.tm_min = hexdectodec(x.rtclk[MC_MIN]);
	tm.tm_hour = hexdectodec(x.rtclk[MC_HOUR]);
	tm.tm_mday = hexdectodec(x.rtclk[MC_DOM]);
	tm.tm_mon = hexdectodec(x.rtclk[MC_MONTH]) - 1;
	tm.tm_year = clock_expandyear(hexdectodec(x.rtclk[MC_YEAR])) - 1900;
	tm.tm_gmtoff = 0;

	/*
	 * If time_t is 32 bits, then the "End of Time" is
	 * Mon Jan 18 22:14:07 2038 (US/Eastern)
	 * This code copes with RTC's past the end of time if time_t
	 * is an int32 or less. Needed because sometimes RTCs screw
	 * up or are badly set, and that would cause the time to go
	 * negative in the calculation below, which causes Very Bad
	 * Mojo. This at least lets the user boot and fix the problem.
	 * Note the code is self eliminating once time_t goes to 64 bits.
	 */
	if (sizeof(time_t) <= sizeof(int32_t)) {
		if (tm.tm_year >= 2038 - 1900) {
			printf("WARNING: RTC time at or beyond 2038.\n");
			tm.tm_year = 2037 - 1900;
			printf("WARNING: year set back to 2037.\n");
			printf("WARNING: CHECK AND RESET THE DATE!\n");
		}
	}

	time.tv_sec = tz.tz_minuteswest * 60;
	if (tz.tz_dsttime)
		time.tv_sec -= 3600;
	time.tv_sec += tm2timet(&tm);
	x.rtctime = time.tv_sec;

	if (base < time.tv_sec - 5*SECYR)
		printf("WARNING: filesystem time much less than clock time\n");
	else if (base > time.tv_sec + 5*SECYR) {
		printf("WARNING: clock time much less than filesystem time\n");
		printf("WARNING: using filesystem time\n");
		goto fstime;
	}
	goto oktime;

 fstime:
	time.tv_sec = base;
	printf("WARNING: CHECK AND RESET THE DATE!\n");

 oktime:
	x.basetime = base;
	rnd_lopool_add(&x, sizeof(x));
	timeset = 1;
	return;
}

/*
 * Reset the clock.
 */
void
resettodr(void)
{
	mc_todregs rtclk;
	struct tm tm;
	int diff;
	int century;
	int s;

	/*
	 * We might have been called by boot() due to a crash early
	 * on.  Don't reset the clock chip in this case.
	 */
	if (!timeset)
		return;

	s = splclock();
	if (rtcget(&rtclk))
		bzero(&rtclk, sizeof(rtclk));
	splx(s);

	diff = tz.tz_minuteswest * 60;
	if (tz.tz_dsttime)
		diff -= 3600;
	timet2tm(&tm, time.tv_sec - diff);

	rtclk[MC_SEC] = dectohexdec(tm.tm_sec);
	rtclk[MC_MIN] = dectohexdec(tm.tm_min);
	rtclk[MC_HOUR] = dectohexdec(tm.tm_hour);
	rtclk[MC_DOW] = tm.tm_wday;
	rtclk[MC_YEAR] = dectohexdec(tm.tm_year % 100);
	rtclk[MC_MONTH] = dectohexdec(tm.tm_mon + 1);
	rtclk[MC_DOM] = dectohexdec(tm.tm_mday);
	s = splclock();
	rtcput(&rtclk);
	if (rtc_update_century > 0) {
		century = dectohexdec(tm.tm_year / 100 + 19);
		mc146818_write(NULL, NVRAM_CENTURY, century); /* XXX softc */
	}
	splx(s);
}

void
setstatclockrate(int arg)
{
	if (arg == stathz)
		mc146818_write(NULL, MC_REGA, MC_BASE_32_kHz | MC_RATE_128_Hz);
	else
		mc146818_write(NULL, MC_REGA, MC_BASE_32_kHz | MC_RATE_1024_Hz);
}
@


1.15
log
@convert to MirTime API
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.14 2011/02/19 14:10:24 tg Exp $ */
d673 1
a673 1
		printf("WARNING: preposterous time in file system\n");
d722 1
a722 1
		printf("WARNING: file system time much less than clock time\n");
d724 2
a725 2
		printf("WARNING: clock time much less than file system time\n");
		printf("WARNING: using file system time\n");
@


1.14
log
@openbsd r1.35: avoid estimating MHz too low
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.13 2011/02/19 13:04:59 tg Exp $ */
a95 1
#include <sys/taitime.h>
d718 1
a718 1
	time.tv_sec += tai2timet(mjd2tai(tm2mjd(tm)));
d768 1
a768 1
	tm = mjd2tm(tai2mjd(timet2tai(time.tv_sec - diff)));
@


1.13
log
@hack to prevent immediate division by zero with /Pkgs/current/i386/qemu-0.11.0-0.cgz
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.12 2010/09/12 19:02:16 tg Exp $ */
d498 1
a498 1
	pentium_mhz = ((next_count - last_count) + 500000) / 1000000;
@


1.12
log
@use monotonic time for the push pools; when todr is initialised, add that
so we get the date+time into it as well
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.11 2010/07/25 16:37:59 tg Exp $ */
d6 1
a6 1
 * Copyright (c) 2004, 2005, 2010
d431 1
a431 1
	int i;
d433 24
a457 8
	/* Put counter in count down mode */
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_16BIT | TIMER_RATEGEN);
	outb(TIMER_CNTR0, 0xff);
	outb(TIMER_CNTR0, 0xff);
	for (i = FIRST_GUESS; i; i--)
		;
	/* Read the value left in the counter */
	remainder = gettick();
d462 12
a473 1
	delaycount = (FIRST_GUESS * TIMER_DIV(1000)) / (0xffff-remainder);
@


1.11
log
@allow disabling use of the TSC for timekeeping (not CPU frequency stuff
and entropy stuff, though) via new compile-time option, for pfau.mb.o
(don’t know *yet* if that helps, though…)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.10 2007/02/07 20:43:25 tg Exp $ */
d99 2
d631 4
a634 1
	mc_todregs rtclk;
d655 1
a655 1
	if (rtcget(&rtclk)) {
d662 6
a667 6
	tm.tm_sec = hexdectodec(rtclk[MC_SEC]);
	tm.tm_min = hexdectodec(rtclk[MC_MIN]);
	tm.tm_hour = hexdectodec(rtclk[MC_HOUR]);
	tm.tm_mday = hexdectodec(rtclk[MC_DOM]);
	tm.tm_mon = hexdectodec(rtclk[MC_MONTH]) - 1;
	tm.tm_year = clock_expandyear(hexdectodec(rtclk[MC_YEAR])) - 1900;
d693 1
d702 5
d708 3
a712 5

fstime:
	timeset = 1;
	time.tv_sec = base;
	printf("WARNING: CHECK AND RESET THE DATE!\n");
@


1.10
log
@* attempt to move taitime(3) functions from libc and kernel to kernbase,
  its prototypes from <time.h> and <sys/time.h> (which includes <time.h>)
  and <lib/libkern/taitime.h> to <sys/taitime.h>, split between indepen-
  dent and dependent (kernel/userland different leap table initialisation;
  userland additional tai_time(), taina_time(), importtai(), exporttai()),
  reduce required headers; reduce diff from headers to upstream
* move kernel tai leap second table from kernel objects to libkern
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.9 2006/10/17 20:51:35 tg Exp $ */
d6 2
a7 1
 * Copyright (c) 2004, 2005 Thorsten Glaser.
d451 6
a456 1
	unsigned long long last_count;
d468 2
a469 2
	__asm __volatile("rdtsc" : "=A" (pentium_base_tsc));
	pentium_mhz = ((pentium_base_tsc - last_count) + 500000) / 1000000;
d474 1
@


1.9
log
@be optimistic and remove the #ifdef fornow, thus allow us to boot
if the RTC has stored years beyond 2037 - needs to be tested on a
"real" hardware...
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.8 2006/02/15 05:20:24 tg Exp $ */
d95 1
a108 2
#include <lib/libkern/taitime.h>

@


1.8
log
@re-instate addition of one second on re-calibrating
cycle counter (with the 1s delay), it's truly needed
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.7 2005/12/15 03:07:44 tg Exp $ */
a668 1
#ifdef fornow
a669 1
#endif
a675 1
#ifdef fornow
a676 1
#endif
@


1.7
log
@* Do not "adjust" the global time any more when recalibrating; it's
  quite an evil hack, plus whoever plays with sysctl hw.setperf must
  use ntpd(8) anyway to get something resembling a time
* Reduce diff against vendor branch while here
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.6 2005/10/19 17:42:26 tg Exp $ */
d451 9
a459 1
	unsigned long long count, last_count;
d463 6
a468 2
	__asm __volatile("rdtsc" : "=A" (count));
	pentium_mhz = ((count - last_count) + 500000) / 1000000;
@


1.6
log
@remove all this mad debugging code (so I have it in the Attic)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.3 2005/08/02 10:54:46 tg Exp $ */
d40 1
a40 1
/*
d44 1
a44 1
 *
d50 1
a50 1
 *
d54 1
a54 1
 *
d56 1
a56 1
 *
d61 1
a61 1
 *
d356 1
a356 1
			 : "=a" (n)
d451 1
a451 9
	unsigned long long last_count;
	/* XXX this is a hack, we'd better do precision timekeeping */
	struct timeval tv;

	disable_intr();
	tv = time;
	enable_intr();
	/* it's probably not exactly one second, but pretty good */
	tv.tv_sec++;
d455 2
a456 8

	disable_intr();

	__asm __volatile("rdtsc" : "=A" (pentium_base_tsc));
	pentium_mhz = ((pentium_base_tsc - last_count) + 500000) / 1000000;

	time = tv;
	enable_intr();
@


1.5
log
@* fix the issue (more later)
* add mad debugging codez (will vanish in a bit)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.4 2005/10/19 16:38:45 tg Exp $ */
d628 1
a628 5
	time_t unixtime;
#if 1
	int d = 0;
	printf("inittodr DEBUG %d: time is %lld\n", ++d, time.tv_sec);
#endif
d643 2
d652 1
a652 6
#if 1
	printf("inittodr: RTC says %02X.%02X.%04X %02X:%02X:%02X\n",
	    rtclk[MC_DOM], rtclk[MC_MONTH], rtclk[MC_YEAR] +
	    ((rtclk[MC_YEAR] < 0x70) ? 0x2000 : 0x1900),
	    rtclk[MC_HOUR], rtclk[MC_MIN], rtclk[MC_SEC]);
#endif
d684 1
a684 4
	unixtime = tz.tz_minuteswest * 60;
#if 1
	printf("inittodr DEBUG %d: time is %lld\n", ++d, unixtime);
#endif
d686 2
a687 24
		unixtime -= 3600;
#if 1
	printf("inittodr DEBUG %d: time is %lld\n", ++d, unixtime);
#endif
	unixtime += tai2timet(mjd2tai(tm2mjd(tm)));
#if 1
	printf("inittodr DEBUG %d: time is %lld\n", ++d, unixtime);
	printf("inittodr: should have been added %lld\n",
	    tai2timet(mjd2tai(tm2mjd(tm))));
	printf("inittodr: should've been %02d.%02d.%04d %02d:%02d:%02d\n",
	    tm.tm_mday, tm.tm_mon + 1, (int)tm.tm_year + 1900,
	    tm.tm_hour, tm.tm_min, tm.tm_sec);
	printf("inittodr: tm2mjd = %d:%d\n", (int)tm2mjd(tm).mjd, (int)tm2mjd(tm).sec);
	printf("inittodr: mjd2tai = %llX\n", mjd2tai(tm2mjd(tm)));
	printf("inittodr: tai2timet = %lld\n", tai2timet(mjd2tai(tm2mjd(tm))));
	printf("inittodr: timet2tai = %llX\n", timet2tai(tai2timet(mjd2tai(tm2mjd(tm)))));
	printf("inittodr: tai2mjd = %d:%d\n", (int)tai2mjd(timet2tai(tai2timet(mjd2tai(tm2mjd(tm))))).mjd, (int)tai2mjd(timet2tai(tai2timet(mjd2tai(tm2mjd(tm))))).sec);
	{
		struct tm i = mjd2tm(tai2mjd(timet2tai(tai2timet(mjd2tai(tm2mjd(tm))))));
		printf("inittodr: mjd2tm = %02d.%02d.%04d %02d:%02d:%02d\n",
		    i.tm_mday, i.tm_mon + 1, (int)i.tm_year + 1900,
		    i.tm_hour, i.tm_min, i.tm_sec);
	}
#endif
d689 1
a689 15
#if 1
	{
		struct tm i = mjd2tm(tai2mjd(timet2tai(base)));
		printf("inittodr: base was %02d.%02d.%04d %02d:%02d:%02d\n",
		    i.tm_mday, i.tm_mon + 1, (int)i.tm_year + 1900,
		    i.tm_hour, i.tm_min, i.tm_sec);
		i = mjd2tm(tai2mjd(timet2tai(unixtime)));
		printf("inittodr: time now %02d.%02d.%04d %02d:%02d:%02d\n",
		    i.tm_mday, i.tm_mon + 1, (int)i.tm_year + 1900,
		    i.tm_hour, i.tm_min, i.tm_sec);
		printf("inittodr: tz: dst %d minuteswest %d\n",
		    tz.tz_dsttime, tz.tz_minuteswest);
	}
#endif
	if (base < unixtime - 5*SECYR)
d691 1
a691 1
	else if (base > unixtime + 5*SECYR) {
a697 11
#if 1
	printf("inittodr: initialising time to %llu, base was %llu\n",
	    unixtime, base);
#endif
	s = splhigh();
	time.tv_sec = unixtime;
	time.tv_usec = 0;
	splx(s);
#if 1
	printf("inittodr DEBUG %d: time is %lld\n", ++d, time.tv_sec);
#endif
a701 4
#if 1
	printf("inittodr: discarding time %llu, using base %llu instead\n",
	    unixtime, base);
#endif
a702 4
	time.tv_usec = 0;
#if 1
	printf("inittodr DEBUG %d: time is %lld\n", ++d, time.tv_sec);
#endif
a732 1
	printf("resettodr: setting CMOS clock to %llu\n", time.tv_sec);
@


1.4
log
@be more verbose about time at bootup and CMOS re-set,
maybe this helps discovering some lurking bugs
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.3 2005/08/02 10:54:46 tg Exp $ */
d628 5
a632 1

a646 2
	time.tv_usec = 0;

d654 6
a659 1

d666 1
a666 1

d691 4
a694 1
	time.tv_sec = tz.tz_minuteswest * 60;
d696 24
a719 2
		time.tv_sec -= 3600;
	time.tv_sec += tai2timet(mjd2tai(tm2mjd(tm)));
d721 15
a735 1
	if (base < time.tv_sec - 5*SECYR)
d737 1
a737 1
	else if (base > time.tv_sec + 5*SECYR) {
d744 1
d746 9
a754 1
	    time.tv_sec, base);
d759 1
d761 2
a762 1
	    time.tv_sec, base);
d764 4
@


1.3
log
@in calibrate_cyclecounter() we have a one second delay;
account for it in kernel timekeeping

XXX revisit this after the move to timecounters
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/arch/i386/isa/clock.c,v 1.2 2005/03/06 21:27:00 tg Exp $ */
d698 2
d704 2
d737 1
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 1
a1 1
/**	$MirOS$ */
d40 1
a40 1
/* 
d44 1
a44 1
 * 
d50 1
a50 1
 * 
d54 1
a54 1
 * 
d56 1
a56 1
 * 
d61 1
a61 1
 * 
d451 9
a459 1
	unsigned long long count, last_count;
d463 8
a470 2
	__asm __volatile("rdtsc" : "=A" (count));
	pentium_mhz = ((count - last_count) + 500000) / 1000000;
@


1.1
log
@Initial revision
@
text
@d1 1
d6 1
a89 1
#include <sys/types.h>
a101 1
#include <dev/clock_subr.h>
d108 2
d158 2
d194 1
a194 1
startrtclock()
d204 1
a204 1
		printf("RTC BIOS diagnostic error %b\n", (unsigned int) s, 
d216 3
a218 3
	/* 
	 * Drain any un-acknowledged RTC interrupts. 
	 * See comment in cpu_initclocks(). 
d225 1
a225 1
initrtclock()
d236 1
a236 2
clockintr(arg)
	void *arg;
d245 1
a245 2
rtcintr(arg)
	void *arg;
d250 2
a251 2
	/* 
	 * If rtcintr is 'late', next intr may happen immediately. 
d262 1
a262 1
gettick()
d336 1
a336 2
delay(n)
	int n;
d356 1
a356 1
			 : "=a" (n) 
d414 1
a414 2
sysbeep(pitch, period)
	int pitch, period;
d427 1
a427 1
findcpuspeed()
d449 1
a449 1
calibrate_cyclecounter()
d461 1
a461 1
cpu_initclocks()
d476 1
a476 1
	mc146818_write(NULL, MC_REGA, MC_BASE_32_KHz | MC_RATE_128_Hz);
d493 1
a493 2
rtcget(regs)
	mc_todregs *regs;
d499 1
a499 1
}	
d502 1
a502 2
rtcput(regs)
	mc_todregs *regs;
d508 1
a508 2
hexdectodec(n)
	int n;
d515 1
a515 2
dectohexdec(n)
	int n;
d528 1
d530 1
a530 1
cmoscheck()
d556 1
d558 1
a558 2
clock_expandyear(clockyear)
	int clockyear;
d609 1
a609 2
inittodr(base)
	time_t base;
d612 1
a612 1
	struct clock_ymdhms dt;
d639 6
a644 6
	dt.dt_sec = hexdectodec(rtclk[MC_SEC]);
	dt.dt_min = hexdectodec(rtclk[MC_MIN]);
	dt.dt_hour = hexdectodec(rtclk[MC_HOUR]);
	dt.dt_day = hexdectodec(rtclk[MC_DOM]);
	dt.dt_mon = hexdectodec(rtclk[MC_MONTH]);
	dt.dt_year = clock_expandyear(hexdectodec(rtclk[MC_YEAR]));
d648 1
a648 1
	 * If time_t is 32 bits, then the "End of Time" is 
d657 1
d659 2
a660 1
		if (dt.dt_year >= 2038) {
d662 1
a662 1
			dt.dt_year = 2037;
d666 1
d668 1
d670 1
a670 1
	time.tv_sec = clock_ymdhms_to_secs(&dt) + tz.tz_minuteswest * 60;
d673 1
d696 1
a696 1
resettodr()
d699 1
a699 1
	struct clock_ymdhms dt;
d719 1
a719 1
	clock_secs_to_ymdhms(time.tv_sec - diff, &dt);
d721 7
a727 7
	rtclk[MC_SEC] = dectohexdec(dt.dt_sec);
	rtclk[MC_MIN] = dectohexdec(dt.dt_min);
	rtclk[MC_HOUR] = dectohexdec(dt.dt_hour);
	rtclk[MC_DOW] = dt.dt_wday;
	rtclk[MC_YEAR] = dectohexdec(dt.dt_year % 100);
	rtclk[MC_MONTH] = dectohexdec(dt.dt_mon);
	rtclk[MC_DOM] = dectohexdec(dt.dt_day);
d731 1
a731 1
		century = dectohexdec(dt.dt_year / 100);
d738 1
a738 2
setstatclockrate(arg)
	int arg;
d741 1
a741 1
		mc146818_write(NULL, MC_REGA, MC_BASE_32_KHz | MC_RATE_128_Hz);
d743 1
a743 1
		mc146818_write(NULL, MC_REGA, MC_BASE_32_KHz | MC_RATE_1024_Hz);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
