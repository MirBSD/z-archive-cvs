head	1.8;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.3
	MIRBSD_10:1.3.0.4
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2009.01.11.17.18.33;	author tg;	state Exp;
branches;
next	1.7;
commitid	100496A29F9738E2C8A;

1.7
date	2009.01.11.13.58.48;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004969FB30297C8CA0;

1.6
date	2009.01.11.13.58.07;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004969FAEE52C66E84;

1.5
date	2009.01.10.23.43.07;	author tg;	state Exp;
branches;
next	1.4;
commitid	100496932A33C227F0C;

1.4
date	2008.08.01.11.32.54;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004892F47624324996;

1.3
date	2005.05.04.18.12.39;	author tg;	state Exp;
branches;
next	1.2;
commitid	6b5442790f8aa337;

1.2
date	2005.03.06.21.26.59;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.25;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.25;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.08.01.11.30.34;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	1004892F3EA44BF1C42;

1.1.1.3
date	2008.08.01.11.31.36;	author tg;	state Exp;
branches;
next	;
commitid	1004892F429433F5DC0;


desc
@@


1.8
log
@retain binary compatibility to current kernels, oops
@
text
@/**	$MirOS: src/sys/arch/i386/include/biosvar.h,v 1.7 2009/01/11 13:58:48 tg Exp $ */
/*	$OpenBSD: biosvar.h,v 1.42 2003/11/27 00:31:55 espie Exp $	*/

/*
 * Copyright (c) 1997-1999 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _I386_BIOSVAR_H_
#define _I386_BIOSVAR_H_
#pragma pack(1)

	/* some boxes put apm data seg in the 2nd page */
#define	BOOTARG_OFF	(NBPG*2)
#define	BOOTARG_LEN	(NBPG*1)
#define	BOOTBIOS_ADDR	(0x7c00)

	/* BIOS configure flags */
#define	BIOSF_BIOS32	0x0001
#define	BIOSF_PCIBIOS	0x0002
#define	BIOSF_PROMSCAN	0x0004

/* BIOS media ID */
#define BIOSM_F320K	0xff	/* floppy ds/sd  8 spt */
#define	BIOSM_F160K	0xfe	/* floppy ss/sd  8 spt */
#define	BIOSM_F360K	0xfd	/* floppy ds/sd  9 spt */
#define	BIOSM_F180K	0xfc	/* floppy ss/sd  9 spt */
#define	BIOSM_ROMD	0xfa	/* ROM disk */
#define	BIOSM_F120M	0xf9	/* floppy ds/hd 15 spt 5.25" */
#define	BIOSM_F720K	0xf9	/* floppy ds/dd  9 spt 3.50" */
#define	BIOSM_HD	0xf8	/* hard drive */
#define	BIOSM_F144K	0xf0	/* floppy ds/hd 18 spt 3.50" */
#define	BIOSM_OTHER	0xf0	/* any other */

/*
 * BIOS memory maps
 */
#define	BIOS_MAP_END	0x00	/* End of array XXX - special */
#define	BIOS_MAP_FREE	0x01	/* Usable memory */
#define	BIOS_MAP_RES	0x02	/* Reserved memory */
#define	BIOS_MAP_ACPI	0x03	/* ACPI Reclaim memory */
#define	BIOS_MAP_NVS	0x04	/* ACPI NVS memory */

/*
 * Optional ROM header
 */
typedef
struct bios_romheader {
	u_int16_t	signature;	/* 0xaa55 */
	u_int8_t	len;		/* length in pages (512 bytes) */
	u_int32_t	entry;		/* initialization entry point */
	u_int8_t	reserved[19];
	u_int16_t	pnpheader;	/* offset to PnP expansion header */
} *bios_romheader_t;

/*
 * BIOS32
 */
typedef
struct bios32_header {
	u_int32_t	signature;	/* 00: signature "_32_" */
	u_int32_t	entry;		/* 04: entry point */
	u_int8_t	rev;		/* 08: revision */
	u_int8_t	length;		/* 09: header length */
	u_int8_t	cksum;		/* 0a: modulo 256 checksum */
	u_int8_t	reserved[5];
} *bios32_header_t;

typedef
struct bios32_entry_info {
	paddr_t	bei_base;
	psize_t	bei_size;
	paddr_t	bei_entry;
} *bios32_entry_info_t;

typedef
struct bios32_entry {
	u_int32_t offset;
	u_int16_t segment;
} *bios32_entry_t;

#define	BIOS32_START	0xe0000
#define	BIOS32_SIZE	0x20000
#define	BIOS32_END	(BIOS32_START + BIOS32_SIZE - 0x10)

#define	BIOS32_MAKESIG(a, b, c, d) \
	((a) | ((b) << 8) | ((c) << 16) | ((d) << 24))
#define	BIOS32_SIGNATURE	BIOS32_MAKESIG('_', '3', '2', '_')
#define	PCIBIOS_SIGNATURE	BIOS32_MAKESIG('$', 'P', 'C', 'I')

/*
 * CTL_BIOS definitions.
 */
#define	BIOS_DEV		1	/* int: BIOS boot device */
#define	BIOS_DISKINFO		2	/* struct: BIOS boot device info */
#define BIOS_CKSUMLEN		3	/* int: disk cksum block count */
#define	BIOS_MAXID		4	/* number of valid machdep ids */

#define	CTL_BIOS_NAMES { \
	{ 0, 0 }, \
	{ "biosdev", CTLTYPE_INT }, \
	{ "diskinfo", CTLTYPE_STRUCT }, \
	{ "cksumlen", CTLTYPE_INT }, \
}

#define	BOOTARG_MEMMAP 0
typedef struct _bios_memmap {
	u_int64_t addr;		/* Beginning of block */
	u_int64_t size;		/* Size of block */
	u_int32_t type;		/* Type of block */
} bios_memmap_t;

/* Info about disk from the bios, plus the mapping from
 * BIOS numbers to BSD major (driver?) number.
 *
 * Also, do not bother with BIOSN*() macros, just parcel
 * the info out, and use it like this.  This makes for less
 * of a dependance on BIOSN*() macros having to be the same
 * across /boot, /bsd, and userland.
 */
#define	BOOTARG_DISKINFO 1
typedef struct _bios_diskinfo {
	/* BIOS section */
	int bios_number;	/* BIOS number of drive (or -1) */
	u_int bios_cylinders;	/* BIOS cylinders */
	u_int bios_heads;	/* BIOS heads */
	u_int bios_sectors;	/* BIOS sectors */
	int old_bios_edd;	/* EDD support (obsolete) */

	/* BSD section */
	dev_t bsd_dev;		/* BSD device */

	/* Checksum section */
	u_int32_t checksum;	/* Checksum for drive */

	/* Misc. flags */
	u_int32_t flags;
#define BDI_INVALID	0x00000001	/* I/O error during checksumming */
#define BDI_GOODLABEL	0x00000002	/* Had SCSI or ST506/ESDI disklabel */
#define BDI_BADLABEL	0x00000004	/* Had another disklabel */
#define BDI_EL_TORITO	0x00000008	/* 2,048-byte sectors */
#define BDI_NOTADISK	0x00000010	/* not a disc */
#define BDI_LBA		0x00000020	/* EDD access via LBA functions */
#define BDI_PICKED	0x80000000	/* kernel-only: cksum matched */

} bios_diskinfo_t;

#define	BOOTARG_APMINFO 2
typedef struct _bios_apminfo {
	/* APM_CONNECT returned values */
	u_int	apm_detail;
	u_int	apm_code32_base;
	u_int	apm_code16_base;
	u_int	apm_code_len;
	u_int	apm_data_base;
	u_int	apm_data_len;
	u_int	apm_entry;
	u_int	apm_code16_len;
} bios_apminfo_t;

#define	BOOTARG_CKSUMLEN 3		/* u_int32_t */

#define	BOOTARG_PCIINFO 4
typedef struct _bios_pciinfo {
	/* PCI BIOS v2.0+ - Installation check values */
	u_int32_t	pci_chars;	/* Characteristics (%eax) */
	u_int32_t	pci_rev;	/* BCD Revision (%ebx) */
	u_int32_t	pci_entry32;	/* PM entry point for PCI BIOS */
	u_int32_t	pci_lastbus;	/* Number of last PCI bus */
} bios_pciinfo_t;

#define	BOOTARG_CONSDEV	5
typedef struct _bios_consdev {
	dev_t	consdev;
	int	conspeed;
} bios_consdev_t;

#define BOOTARG_SMPINFO 6		/* struct mp_float[] */

#define BOOTARG_BOOTMAC	7
typedef struct _bios_bootmac {
	char	mac[6];
} bios_bootmac_t;

#if defined(_KERNEL) || defined (_STANDALONE)

#ifdef _LOCORE
#define	DOINT(n)	int	$0x20+(n)
#else
#define	DOINT(n)	"int $0x20+(" #n ")"

extern volatile struct BIOS_regs {
	u_int32_t	biosr_ax;
	u_int32_t	biosr_cx;
	u_int32_t	biosr_dx;
	u_int32_t	biosr_bx;
	u_int32_t	biosr_bp;
	u_int32_t	biosr_si;
	u_int32_t	biosr_di;
	u_int32_t	biosr_ds;
	u_int32_t	biosr_es;
}	BIOS_regs;

#ifdef _KERNEL
#include <machine/bus.h>

struct bios_attach_args {
	char *bios_dev;
	u_int bios_func;
	bus_space_tag_t bios_iot;
	bus_space_tag_t bios_memt;
	union {
		void *_p;
		bios_apminfo_t *_bios_apmp;
	} _;
};

#define	bios_apmp	_._bios_apmp

struct consdev;
struct proc;

int bios_sysctl(int *, u_int, void *, size_t *, void *, size_t, struct proc *);

void bioscnprobe(struct consdev *);
void bioscninit(struct consdev *);
void bioscnputc(dev_t, int);
int bioscngetc(dev_t);
void bioscnpollc(dev_t, int);
void bios_getopt(void);

/* bios32.c */
int  bios32_service(u_int32_t, bios32_entry_t, bios32_entry_info_t);

extern u_int bootapiver;
extern bios_memmap_t *bios_memmap;

#endif /* _KERNEL */
#endif /* _LOCORE */
#endif /* _KERNEL || _STANDALONE */

#pragma pack()
#endif /* _I386_BIOSVAR_H_ */
@


1.7
log
@typo
@
text
@d1 1
a1 1
/**	$MirOS$ */
d149 1
@


1.6
log
@remove bios_edd member, do LBA via a flag, use my routine instead of
OpenBSDâ€™s to detect LBA and El Torito, mop up
@
text
@d1 1
d163 1
a163 1
#define BDI_LBA		0x00000020	/* EDD access via LBA functions *.
@


1.5
log
@fix cd0 detection, etc.
@
text
@a147 1
	int bios_edd;		/* EDD support */
d162 1
@


1.4
log
@merge the fix
@
text
@d162 1
@


1.3
log
@turn the K7 PowerNow driver into a device with flags,
changeable via UKC. Also, no action is taken if the speed
is not changed any more, we don't hold lock on 128 KiB of
unused RAM, allow selection of the correct PST or none at
all, list available PSTs verbosely, show available (but
not unusable (fid/vid == 0)) frequencies, offer a debug
mode for K7PN developers, have a nice manual page, do not
disturb on non-K7 boxen at all, look nice in general, use
more static functions and variables where possible, ...
@
text
@a0 1
/**	$MirOS: src/sys/arch/i386/include/biosvar.h,v 1.2 2005/03/06 21:26:59 tg Exp $ */
d161 1
a161 1
#define BDI_ELTORITO	0x00010000	/* Not a BIOS/ProtMode device */
d196 7
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 1
a1 1
/**	$MirOS$ */
a42 1
#define	BIOSF_SAFEK7PN	0x0008
@


1.1
log
@Initial revision
@
text
@d1 1
d43 1
d163 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@some more defns
@
text
@a194 7
#define BOOTARG_SMPINFO 6		/* struct mp_float[] */

#define BOOTARG_BOOTMAC	7
typedef struct _bios_bootmac {
	char	mac[6];
} bios_bootmac_t;

@


1.1.1.3
log
@BDI_ELTORITO
@
text
@a160 1
#define BDI_EL_TORITO	0x00000008	/* 2,048-byte sectors */
@


