head	1.2;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.2
	MIRBSD_10:1.1.1.2.0.4
	MIRBSD_10_BASE:1.1.1.2
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200507032030:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2011.11.06.21.27.53;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	1004EB6FBCC21FB511A;

1.1
date	2005.02.05.17.28.18;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.28.18;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.04.00.53.55;	author tg;	state Exp;
branches;
next	;
commitid	106342c888b8c89a;


desc
@@


1.2
log
@Update for new miidevs (QUALSEMI->QUALITYSEMI, TSC->TDK, marvell stuff)
@
text
@/*	$OpenBSD: tqphy.c,v 1.10 2005/02/19 06:00:04 brad Exp $	*/
/*	$NetBSD: tqphy.c,v 1.9 2000/02/02 23:34:57 thorpej Exp $	*/

/*
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1997 Manuel Bouyer.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Manuel Bouyer.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * TDK TSC78Q2120 PHY driver
 *
 * Documentation available at http://www.tsc.tdk.com/lan/78Q2120.pdf .
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_media.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

#include <dev/mii/tqphyreg.h>

int	tqphymatch(struct device *, void *, void *);
void	tqphyattach(struct device *, struct device *, void *);
int	tqphydetach(struct device *, int);

struct cfattach tqphy_ca = {
	sizeof(struct mii_softc), tqphymatch, tqphyattach, mii_phy_detach,
	    mii_phy_activate
};

struct cfdriver tqphy_cd = {
	NULL, "tqphy", DV_DULL
};

int	tqphy_service(struct mii_softc *, struct mii_data *, int);
void	tqphy_status(struct mii_softc *);

const struct mii_phy_funcs tqphy_funcs = {
	tqphy_service, tqphy_status, mii_phy_reset,
};

static const struct mii_phydesc tqphys[] = {
	{ MII_OUI_TDK,		MII_MODEL_TDK_78Q2120,
	  MII_STR_TDK_78Q2120 },

	{ 0,			0,
	  NULL },
};

int
tqphymatch(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;

	if (mii_phy_match(ma, tqphys) != NULL)
		return (10);

	return (0);
}

void
tqphyattach(struct device *parent, struct device *self, void *aux)
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, tqphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &tqphy_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;

	/*
	 * Apparently, we can't do loopback on this PHY.
	 */
	sc->mii_flags |= MIIF_NOLOOP;

	PHY_RESET(sc);

	sc->mii_capabilities =
	    PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
}

int
tqphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int reg;

	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If the media indicates a different PHY instance,
		 * isolate ourselves.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst) {
			reg = PHY_READ(sc, MII_BMCR);
			PHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
			return (0);
		}

		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		mii_phy_setmedia(sc);
		break;

	case MII_TICK:
		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		if (mii_phy_tick(sc) == EJUSTRETURN)
			return (0);
		break;

	case MII_DOWN:
		mii_phy_down(sc);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);
	return (0);
}

void
tqphy_status(struct mii_softc *sc)
{
	struct mii_data *mii = sc->mii_pdata;
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int bmsr, bmcr, diag;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmsr = PHY_READ(sc, MII_BMSR) |
	    PHY_READ(sc, MII_BMSR);
	if (bmsr & BMSR_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	bmcr = PHY_READ(sc, MII_BMCR);
	if (bmcr & BMCR_ISO) {
		mii->mii_media_active |= IFM_NONE;
		mii->mii_media_status = 0;
		return;
	}

	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	if (bmcr & BMCR_AUTOEN) {
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}
		diag = PHY_READ(sc, MII_TQPHY_DIAG);
		if (diag & DIAG_RATE)
			mii->mii_media_active |= IFM_100_TX;
		else
			mii->mii_media_active |= IFM_10_T;
		if (diag & DIAG_DPLX)
			mii->mii_media_active |= IFM_FDX;
	} else
		mii->mii_media_active = ife->ifm_media;
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: tqphy.c,v 1.5 2002/05/04 11:30:06 fgsch Exp $	*/
a79 1
#include <sys/malloc.h>
d107 12
d120 1
a120 4
tqphymatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d124 2
a125 6
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_TSC)
		switch MII_MODEL(ma->mii_id2) {
		case MII_MODEL_TSC_78Q2120:
		/* case MII_MODEL_TSC_78Q2121: */
			return (10);
	}
d131 1
a131 3
tqphyattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d136 1
d138 2
a139 2
	printf(": %s, rev. %d\n", MII_STR_TSC_78Q2120,
	    MII_REV(ma->mii_id2));
d143 1
a143 2
	sc->mii_service = tqphy_service;
	sc->mii_status = tqphy_status;
d145 1
a145 1
	sc->mii_flags = mii->mii_flags;
d152 1
a152 1
	mii_phy_reset(sc);
d161 1
a161 4
tqphy_service(sc, mii, cmd)
	struct mii_softc *sc;
	struct mii_data *mii;
	int cmd;
d223 1
a223 2
tqphy_status(sc)
	struct mii_softc *sc;
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@more stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: tqphy.c,v 1.10 2005/02/19 06:00:04 brad Exp $	*/
d80 1
a107 12
const struct mii_phy_funcs tqphy_funcs = {
	tqphy_service, tqphy_status, mii_phy_reset,
};

static const struct mii_phydesc tqphys[] = {
	{ MII_OUI_TSC,		MII_MODEL_TSC_78Q2120,
	  MII_STR_TSC_78Q2120 },

	{ 0,			0,
	  NULL },
};

d109 4
a112 1
tqphymatch(struct device *parent, void *match, void *aux)
d116 6
a121 2
	if (mii_phy_match(ma, tqphys) != NULL)
		return (10);
d127 3
a129 1
tqphyattach(struct device *parent, struct device *self, void *aux)
a133 1
	const struct mii_phydesc *mpd;
d135 2
a136 2
	mpd = mii_phy_match(ma, tqphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));
d140 2
a141 1
	sc->mii_funcs = &tqphy_funcs;
d143 1
a143 1
	sc->mii_flags = ma->mii_flags;
d150 1
a150 1
	PHY_RESET(sc);
d159 4
a162 1
tqphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
d224 2
a225 1
tqphy_status(struct mii_softc *sc)
@

