head	1.3;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.2
	MIRBSD_10:1.3.0.4
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200507032030:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2005.07.04.00.55.03;	author tg;	state Exp;
branches;
next	1.2;
commitid	525542c888fcec98;

1.2
date	2005.03.06.21.27.46;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.28.17;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.28.17;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.04.00.53.55;	author tg;	state Exp;
branches;
next	;
commitid	106342c888b8c89a;


desc
@@


1.3
log
@merge
@
text
@/*	$OpenBSD: bmtphy.c,v 1.14 2005/05/25 20:05:44 brad Exp $	*/
/*	$NetBSD: bmtphy.c,v 1.17 2005/01/17 13:17:45 scw Exp $	*/

/*-
 * Copyright (c) 2001 Theo de Raadt
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Driver for Broadcom BCM5201/BCM5202 "Mini-Theta" PHYs.  This also
 * drives the PHY on the 3Com 3c905C.  The 3c905C's PHY is described in
 * the 3c905C data sheet.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/socket.h>
#include <sys/errno.h>

#include <net/if.h>
#include <net/if_media.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
#include <dev/mii/miidevs.h>

#include <dev/mii/bmtphyreg.h>

int	bmtphymatch(struct device *, void *, void *);
void	bmtphyattach(struct device *, struct device *, void *);

struct cfattach bmtphy_ca = {
	sizeof(struct mii_softc), bmtphymatch, bmtphyattach, mii_phy_detach,
	    mii_phy_activate
};

struct cfdriver bmtphy_cd = {
	NULL, "bmtphy", DV_DULL
};

int	bmtphy_service(struct mii_softc *, struct mii_data *, int);
void	bmtphy_status(struct mii_softc *);

const struct mii_phy_funcs bmtphy_funcs = {
	bmtphy_service, bmtphy_status, mii_phy_reset,
};

static const struct mii_phydesc bmtphys[] = {
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_3C905B,
	  MII_STR_BROADCOM_3C905B },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_3C905C,
	  MII_STR_BROADCOM_3C905C },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM4401,
	  MII_STR_BROADCOM_BCM4401 },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM5201,
	  MII_STR_BROADCOM_BCM5201 },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM5214,
	  MII_STR_BROADCOM_BCM5214 },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM5220,
	  MII_STR_BROADCOM_BCM5220 },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM5221,
	  MII_STR_BROADCOM_BCM5221 },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM5222,
	  MII_STR_BROADCOM_BCM5222 },

	{ 0,				0,
	  NULL },
};

int
bmtphymatch(struct device *parent, void *match, void *aux)
{
	struct mii_attach_args *ma = aux;

	if (mii_phy_match(ma, bmtphys) != NULL)
		return (10);

	return (0);
}

void
bmtphyattach(struct device *parent, struct device *self, void *aux)
{
	struct mii_softc *sc = (struct mii_softc *)self;
	struct mii_attach_args *ma = aux;
	struct mii_data *mii = ma->mii_data;
	const struct mii_phydesc *mpd;

	mpd = mii_phy_match(ma, bmtphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));

	sc->mii_inst = mii->mii_instance;
	sc->mii_phy = ma->mii_phyno;
	sc->mii_funcs = &bmtphy_funcs;
	sc->mii_pdata = mii;
	sc->mii_flags = ma->mii_flags;
	sc->mii_anegticks = MII_ANEGTICKS;

	PHY_RESET(sc);

	/*
	 * XXX Check AUX_STS_FX_MODE to set MIIF_HAVE_FIBER?
	 */

	sc->mii_capabilities =
	    PHY_READ(sc, MII_BMSR) & ma->mii_capmask;
	if (sc->mii_capabilities & BMSR_MEDIAMASK)
		mii_phy_add_media(sc);
}

int
bmtphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
{
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int reg;

	if ((sc->mii_dev.dv_flags & DVF_ACTIVE) == 0)
		return (ENXIO);

	switch (cmd) {
	case MII_POLLSTAT:
		/*
		 * If we're not polling our PHY instance, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);
		break;

	case MII_MEDIACHG:
		/*
		 * If the media indicates a different PHY instance,
		 * isolate ourselves.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst) {
			reg = PHY_READ(sc, MII_BMCR);
			PHY_WRITE(sc, MII_BMCR, reg | BMCR_ISO);
			return (0);
		}

		/*
		 * If the interface is not up, don't do anything.
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			break;

		mii_phy_setmedia(sc);
		break;

	case MII_TICK:
		/*
		 * If we're not currently selected, just return.
		 */
		if (IFM_INST(ife->ifm_media) != sc->mii_inst)
			return (0);

		if (mii_phy_tick(sc) == EJUSTRETURN)
			return (0);
		break;

	case MII_DOWN:
		mii_phy_down(sc);
		return (0);
	}

	/* Update the media status. */
	mii_phy_status(sc);

	/* Callback if something changed. */
	mii_phy_update(sc, cmd);
	return (0);
}

void
bmtphy_status(struct mii_softc *sc)
{
	struct mii_data *mii = sc->mii_pdata;
	struct ifmedia_entry *ife = mii->mii_media.ifm_cur;
	int bmsr, bmcr, aux_csr;

	mii->mii_media_status = IFM_AVALID;
	mii->mii_media_active = IFM_ETHER;

	bmsr = PHY_READ(sc, MII_BMSR) | PHY_READ(sc, MII_BMSR);
	if (bmsr & BMSR_LINK)
		mii->mii_media_status |= IFM_ACTIVE;

	bmcr = PHY_READ(sc, MII_BMCR);
	if (bmcr & BMCR_ISO) {
		mii->mii_media_active |= IFM_NONE;
		mii->mii_media_status = 0;
		return;
	}

	if (bmcr & BMCR_LOOP)
		mii->mii_media_active |= IFM_LOOP;

	if (bmcr & BMCR_AUTOEN) {
		/*
		 * The later are only valid if autonegotiation
		 * has completed (or it's disabled).
		 */
		if ((bmsr & BMSR_ACOMP) == 0) {
			/* Erg, still trying, I guess... */
			mii->mii_media_active |= IFM_NONE;
			return;
		}

		aux_csr = PHY_READ(sc, MII_BMTPHY_AUX_CSR);
		if (aux_csr & AUX_CSR_SPEED)
			mii->mii_media_active |= IFM_100_TX;
		else
			mii->mii_media_active |= IFM_10_T;
		if (aux_csr & AUX_CSR_FDX)
			mii->mii_media_active |= IFM_FDX;

	} else
		mii->mii_media_active = ife->ifm_media;
}
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 2
a2 2
/*	$OpenBSD: bmtphy.c,v 1.5 2002/03/14 01:26:57 millert Exp $	*/
/*	$NetBSD: nsphy.c,v 1.25 2000/02/02 23:34:57 thorpej Exp $	*/
d30 3
a32 2
 * driver for Broadcom BCM5201/5202 Mini-Theta ethernet 10/100 PHY
 * Data Sheet available from Broadcom
a38 1
#include <sys/malloc.h>
d65 26
a90 1
void	bmtphy_reset(struct mii_softc *);
d93 1
a93 4
bmtphymatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d97 1
a97 5
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_BROADCOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_BCM5201)
		return (10);
	if (MII_OUI(ma->mii_id1, ma->mii_id2) == MII_OUI_BROADCOM &&
	    MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_BCM5221)
d104 1
a104 4
bmtphyattach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
d109 1
a109 1
	char *model;
d111 2
a112 11
	switch (MII_MODEL(ma->mii_id2)) {
    case MII_MODEL_BROADCOM_BCM5201:
		model = MII_STR_BROADCOM_BCM5201;
		break;
    case MII_MODEL_BROADCOM_BCM5221:
		model = MII_STR_BROADCOM_BCM5221;
		break;
    default:
	model = "unknown";
    }
	printf(": %s, rev. %d\n", model, MII_REV(ma->mii_id2));
d116 1
a116 2
	sc->mii_service = bmtphy_service;
	sc->mii_status = bmtphy_status;
d118 4
a121 2
	sc->mii_flags = mii->mii_flags;
	sc->mii_anegticks = 5;
d123 3
a125 1
	bmtphy_reset(sc);
d134 1
a134 4
bmtphy_service(sc, mii, cmd)
	struct mii_softc *sc;
	struct mii_data *mii;
	int cmd;
d178 1
a178 31
		/*
		 * Only used for autonegotiation.
		 */
		if (IFM_SUBTYPE(ife->ifm_media) != IFM_AUTO)
			return (0);

		/*
		 * Is the interface even up?
		 */
		if ((mii->mii_ifp->if_flags & IFF_UP) == 0)
			return (0);

		/*
		 * Check to see if we have link.  If we do, we don't
		 * need to restart the autonegotiation process.  Read
		 * the BMSR twice in case it's latched.
		 */
		reg = PHY_READ(sc, MII_BMSR) |
		    PHY_READ(sc, MII_BMSR);
		if (reg & BMSR_LINK)
			return (0);

		/*
		 * Only retry autonegotiation every 5 seconds.
		 */
		if (++sc->mii_ticks != sc->mii_anegticks)
			return (0);

		sc->mii_ticks = 0;
		bmtphy_reset(sc);
		if (mii_phy_auto(sc, 0) == EJUSTRETURN)
d196 1
a196 2
bmtphy_status(sc)
	struct mii_softc *sc;
d200 1
a200 1
	int bmsr, bmcr, auxc;
d205 1
a205 2
	bmsr = PHY_READ(sc, MII_BMSR) |
	    PHY_READ(sc, MII_BMSR);
d230 2
a231 2
		auxc = PHY_READ(sc, MII_BMTPHY_AUXC);
		if (auxc & AUXC_SP100)
d235 1
a235 1
		if (auxc & AUXC_FDX)
a240 17

void
bmtphy_reset(sc)
	struct mii_softc *sc;
{
	int anar;

	mii_phy_reset(sc);

	anar = PHY_READ(sc, MII_ANAR);
	anar |= BMSR_MEDIA_TO_ANAR(PHY_READ(sc, MII_BMSR));
	PHY_WRITE(sc, MII_ANAR, anar);

        /* Chip resets with FDX bit not set */
        PHY_WRITE(sc, MII_BMCR, PHY_READ(sc, MII_BMCR) |
	    BMCR_S100|BMCR_AUTOEN|BMCR_STARTNEG|BMCR_FDX);
}
@


1.1
log
@Initial revision
@
text
@d96 2
a97 1
	if (MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_BCM5201)
d99 2
a100 1
	else if (MII_MODEL(ma->mii_id2) == MII_MODEL_BROADCOM_BCM5221)
d102 4
a105 1

@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@more stuff
@
text
@d1 2
a2 2
/*	$OpenBSD: bmtphy.c,v 1.14 2005/05/25 20:05:44 brad Exp $	*/
/*	$NetBSD: bmtphy.c,v 1.17 2005/01/17 13:17:45 scw Exp $	*/
d30 2
a31 3
 * Driver for Broadcom BCM5201/BCM5202 "Mini-Theta" PHYs.  This also
 * drives the PHY on the 3Com 3c905C.  The 3c905C's PHY is described in
 * the 3c905C data sheet.
d38 1
d65 1
a65 26

const struct mii_phy_funcs bmtphy_funcs = {
	bmtphy_service, bmtphy_status, mii_phy_reset,
};

static const struct mii_phydesc bmtphys[] = {
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_3C905B,
	  MII_STR_BROADCOM_3C905B },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_3C905C,
	  MII_STR_BROADCOM_3C905C },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM4401,
	  MII_STR_BROADCOM_BCM4401 },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM5201,
	  MII_STR_BROADCOM_BCM5201 },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM5214,
	  MII_STR_BROADCOM_BCM5214 },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM5220,
	  MII_STR_BROADCOM_BCM5220 },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM5221,
	  MII_STR_BROADCOM_BCM5221 },
	{ MII_OUI_BROADCOM,		MII_MODEL_BROADCOM_BCM5222,
	  MII_STR_BROADCOM_BCM5222 },

	{ 0,				0,
	  NULL },
};
d68 4
a71 1
bmtphymatch(struct device *parent, void *match, void *aux)
d75 5
a79 1
	if (mii_phy_match(ma, bmtphys) != NULL)
d86 4
a89 1
bmtphyattach(struct device *parent, struct device *self, void *aux)
d94 1
a94 1
	const struct mii_phydesc *mpd;
d96 6
a101 2
	mpd = mii_phy_match(ma, bmtphys);
	printf(": %s, rev. %d\n", mpd->mpd_name, MII_REV(ma->mii_id2));
d105 2
a106 1
	sc->mii_funcs = &bmtphy_funcs;
d108 2
a109 4
	sc->mii_flags = ma->mii_flags;
	sc->mii_anegticks = MII_ANEGTICKS;

	PHY_RESET(sc);
d111 1
a111 3
	/*
	 * XXX Check AUX_STS_FX_MODE to set MIIF_HAVE_FIBER?
	 */
d120 4
a123 1
bmtphy_service(struct mii_softc *sc, struct mii_data *mii, int cmd)
d167 31
a197 1
		if (mii_phy_tick(sc) == EJUSTRETURN)
d215 2
a216 1
bmtphy_status(struct mii_softc *sc)
d220 1
a220 1
	int bmsr, bmcr, aux_csr;
d225 2
a226 1
	bmsr = PHY_READ(sc, MII_BMSR) | PHY_READ(sc, MII_BMSR);
d251 2
a252 2
		aux_csr = PHY_READ(sc, MII_BMTPHY_AUX_CSR);
		if (aux_csr & AUX_CSR_SPEED)
d256 1
a256 1
		if (aux_csr & AUX_CSR_FDX)
d262 17
@

