head	1.31;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.2
	MIRBSD_10:1.8.0.4
	MIRBSD_10_BASE:1.8
	MIRBSD_9_BASE:1.4
	tg-rndaddpool-debug:1.4.0.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.31
date	2013.10.31.20.06.56;	author tg;	state Exp;
branches;
next	1.30;
commitid	1005272B7081B0E5655;

1.30
date	2010.09.25.01.08.49;	author tg;	state Exp;
branches;
next	1.29;
commitid	1004C9D4BB804013DF4;

1.29
date	2010.09.24.20.35.13;	author tg;	state Exp;
branches;
next	1.28;
commitid	1004C9D0B38596B6444;

1.28
date	2010.09.24.19.59.10;	author tg;	state Exp;
branches;
next	1.27;
commitid	1004C9D02C32F9ABA6D;

1.27
date	2010.09.21.17.42.52;	author tg;	state Exp;
branches;
next	1.26;
commitid	1004C98EEA9684B3BEB;

1.26
date	2010.09.19.18.55.35;	author tg;	state Exp;
branches;
next	1.25;
commitid	1004C965C8F46717878;

1.25
date	2010.09.12.21.25.18;	author tg;	state Exp;
branches;
next	1.24;
commitid	1004C8D45315B799B7C;

1.24
date	2010.09.12.18.50.25;	author tg;	state Exp;
branches;
next	1.23;
commitid	1004C8D20FC68053736;

1.23
date	2010.09.12.18.20.00;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004C8D19CE4D7E4CD9;

1.22
date	2010.09.12.17.10.45;	author tg;	state Exp;
branches;
next	1.21;
commitid	1004C8D0939027D8BE7;

1.21
date	2010.09.12.12.24.30;	author tg;	state Exp;
branches;
next	1.20;
commitid	1004C8CC69150D1B4BD;

1.20
date	2009.11.09.19.43.45;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004AF870EF5AE8038B;

1.19
date	2009.03.02.17.56.56;	author tg;	state Exp;
branches;
next	1.18;
commitid	10049AC1DAD65530806;

1.18
date	2008.11.09.17.23.35;	author tg;	state Exp;
branches;
next	1.17;
commitid	10049171C9F59403A92;

1.17
date	2008.07.26.19.40.51;	author tg;	state Exp;
branches;
next	1.16;
commitid	100488B7DCB62D12C2B;

1.16
date	2008.07.12.16.15.15;	author tg;	state Exp;
branches;
next	1.15;
commitid	1004878D81E0053C1D0;

1.15
date	2008.07.10.14.39.24;	author tg;	state Exp;
branches;
next	1.14;
commitid	10048761F304136E092;

1.14
date	2008.07.08.13.43.12;	author tg;	state Exp;
branches;
next	1.13;
commitid	10048736F031A71E520;

1.13
date	2008.07.08.13.35.38;	author tg;	state Exp;
branches;
next	1.12;
commitid	10048736D303CDB144F;

1.12
date	2008.06.13.14.00.05;	author tg;	state Exp;
branches;
next	1.11;
commitid	10048527D4D464F8F7D;

1.11
date	2008.06.13.13.11.50;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004852721E130137B5;

1.10
date	2008.06.13.12.57.27;	author tg;	state Exp;
branches;
next	1.9;
commitid	10048526ECC2D652563;

1.9
date	2008.04.09.05.45.42;	author tg;	state Exp;
branches;
next	1.8;
commitid	10047FC57D909BED61F;

1.8
date	2007.07.09.00.05.36;	author tg;	state Exp;
branches;
next	1.7;
commitid	10046917BE665F823B6;

1.7
date	2006.10.07.21.36.21;	author tg;	state Exp;
branches;
next	1.6;
commitid	10045281D5D49EB8626;

1.6
date	2006.08.22.20.58.24;	author tg;	state Exp;
branches;
next	1.5;
commitid	10044EB6F0E3FCA4304;

1.5
date	2006.08.18.12.29.52;	author tg;	state Exp;
branches;
next	1.4;
commitid	10044E5B2BC1BD5DDC8;

1.4
date	2006.03.27.09.45.29;	author tg;	state Exp;
branches
	1.4.2.1;
next	1.3;
commitid	1004427B4416F2E988B;

1.3
date	2006.03.27.09.25.23;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004427AF807DDD5CA8;

1.2
date	2005.03.06.21.27.35;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.48;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.4.2.1
date	2006.05.28.19.24.59;	author tg;	state Exp;
branches;
next	;
commitid	1004479F89D06CF5B19;

1.1.1.1
date	2005.02.05.17.27.48;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.07.10.14.36.42;	author tg;	state Exp;
branches;
next	;
commitid	10048761E8F7F89D358;


desc
@@


1.31
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/**	$MirOS: src/sys/dev/rndvar.h,v 1.30 2010/09/25 01:08:49 tg Exp $ */
/*	$OpenBSD: rndvar.h,v 1.19 2003/11/03 18:24:28 tedu Exp $	*/

/*
 * Copyright (c) 2004, 2005, 2006, 2008, 2009, 2010, 2013
 *	Thorsten Glaser <tg@@mirbsd.org>
 * Copyright (c) 1996,2000 Michael Shalayeff.
 *
 * This software derived from one contributed by Theodore Ts'o.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef __RNDVAR_H__
#define __RNDVAR_H__

#ifndef POOLWORDS
#define POOLWORDS	1024	/* power of 2 - note this is 32-bit words */
#endif

#define RND_RND		0	/* real hw entropy like nuclear chips */
#define RND_SRND	1	/* strong random source */
#define RND_URND	2	/* less strong random source */
#define RND_PRND	3	/* pseudo random source */
#define RND_ARND	4	/* arcfour based stretching RNG */
#define RND_NODEV	5	/* first invalid minor device number */

#define	RND_SRC_TRUE	0
#define	RND_SRC_TIMER	1
#define	RND_SRC_MOUSE	2
#define	RND_SRC_TTY	3
#define	RND_SRC_DISK	4
#define	RND_SRC_NET	5
#define	RND_SRC_AUVIS	6
#define	RND_SRC_IMACS	7
/* size of stats structure */
#define	RND_SRC_NUM	8
/* internal-use quirk */
#define	RND_SRC_LPC	24

struct rndstats {
	quad_t rnd_total;	/* total bits of entropy generated */
	quad_t rnd_used;	/* strong data bits read so far */
	quad_t rnd_reads;	/* strong read calls */
	quad_t arc4_reads;	/* aRC4 data bytes read so far */
	quad_t arc4_nstirs;	/* arc4 pool stirs */
	quad_t arc4_stirs;	/* arc4 pool stirs (bytes used) */
	quad_t lopool_deq;	/* calls to lopool dequeue (128 bytes each) */
	quad_t lopool_enq;	/* calls to lopool enqueue */
	quad_t lopool_bytes;	/* bytes added during lopool enqueue */

	quad_t rnd_pad_who_this_uses_is_stupid[2];

	quad_t rnd_waits;	/* sleeps for data */
	quad_t rnd_enqs;	/* enqueue calls */
	quad_t rnd_deqs;	/* dequeue calls */
	quad_t rnd_drops;	/* queue-full drops */
	quad_t rnd_drople;	/* queue low watermark low entropy drops */

	quad_t rnd_ed[32];	/* entropy feed distribution */
	quad_t rnd_sc[RND_SRC_NUM]; /* add* calls */
	quad_t rnd_sb[RND_SRC_NUM]; /* add* bits */
};

#ifdef _KERNEL

#include <sys/slibkern.h>

extern struct rndstats rndstats;

#define	add_true_randomness(d)	enqueue_randomness(RND_SRC_TRUE,  (int)(d))
#define	add_timer_randomness(d)	enqueue_randomness(RND_SRC_TIMER, (int)(d))
#define	add_mouse_randomness(d)	enqueue_randomness(RND_SRC_MOUSE, (int)(d))
#define	add_tty_randomness(d)	enqueue_randomness(RND_SRC_TTY,   (int)(d))
#define	add_disk_randomness(d)	enqueue_randomness(RND_SRC_DISK,  (int)(d))
#define	add_net_randomness(d)	enqueue_randomness(RND_SRC_NET,   (int)(d))
#define	add_auvis_randomness(d)	enqueue_randomness(RND_SRC_AUVIS, (int)(d))
#define	add_imacs_randomness(d)	enqueue_randomness(RND_SRC_IMACS, (int)(d))
/* compatibility */
#define	add_audio_randomness(d)	enqueue_randomness(RND_SRC_AUVIS, (int)(d))
#define	add_video_randomness(d)	enqueue_randomness(RND_SRC_AUVIS, (int)(d))

void enqueue_randomness(int, int);
void get_random_bytes(void *, size_t)
    __attribute__((__bounded__(__string__, 1, 2)));
void arc4random_buf(void *, size_t)
    __attribute__((__bounded__(__string__, 1, 2)));
u_int32_t arc4random(void);

void rnd_lopool_add(const void *, size_t)
    __attribute__((__bounded__(__string__, 1, 2)));
void rnd_lopool_addh(const void *, size_t)
    __attribute__((__bounded__(__string__, 1, 2)));
void rnd_lopool_addv(unsigned long);

#endif /* _KERNEL */

#endif /* __RNDVAR_H__ */
@


1.30
log
@damn openbsd…
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.29 2010/09/24 20:35:13 tg Exp $ */
d5 1
a5 1
 * Copyright (c) 2004, 2005, 2006, 2008, 2009, 2010
d104 1
a104 1
    __attribute__((bounded (string, 1, 2)));
d106 1
a106 1
    __attribute__((bounded (string, 1, 2)));
d110 1
a110 1
    __attribute__((bounded (string, 1, 2)));
d112 1
a112 1
    __attribute__((bounded (string, 1, 2)));
@


1.29
log
@count feedback from the arc4random/lopool-collapse combined result
only as 24 bits, not 31, for the doubleword, to balance inputs better
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.28 2010/09/24 19:59:10 tg Exp $ */
d71 1
a71 1
	quad_t rnd_pad[2];
@


1.28
log
@• move rstat from bits to bytes (except distribution, of course)
• re-use RND_SRC_AUDIO for video and rename it RND_SRC_AUVIS
• switch to using add_auvis_entropy() in MirBSD code
• let RND_SRC_IMACS take up former RND_SRC_VIDEO’s place in statistics
• keep statistics for lopool en- and dequeues as well
• let rstat look ok also on 80x24 terminal
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.27 2010/09/21 17:42:52 tg Exp $ */
d57 2
@


1.27
log
@better names
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.26 2010/09/19 18:55:35 tg Exp $ */
a30 1
 *
d37 1
a37 1
#define POOLWORDS 1024	/* Power of 2 - note that this is 32-bit words */
d40 6
a45 6
#define	RND_RND		0	/* real randomness like nuclear chips */
#define	RND_SRND	1	/* strong random source */
#define	RND_URND	2	/* less strong random source */
#define	RND_PRND	3	/* pseudo random source */
#define RND_ARND	4	/* aRC4 based random number generator */
#define RND_NODEV	5	/* First invalid minor device number */
d53 2
a54 3
#define	RND_SRC_AUDIO	6
#define	RND_SRC_VIDEO	7
#define	RND_SRC_IMACS	8	/* not yet in stats */
d65 3
d69 1
a69 1
	quad_t rnd_pad[5];
d94 1
a94 2
#define	add_audio_randomness(d)	enqueue_randomness(RND_SRC_AUDIO, (int)(d))
#define	add_video_randomness(d)	enqueue_randomness(RND_SRC_VIDEO, (int)(d))
d96 3
@


1.26
log
@the promised new RNG (play with RNDEBUG in crypto/randimpl.h to make
it verbose; I did, for a while and a bit of fine-tuning)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.25 2010/09/12 21:25:18 tg Exp $ */
d104 1
a104 1
void rnd_bootpool_add(const void *, size_t)
d106 1
a106 1
void rnd_lopool_add(const void *, size_t)
@


1.25
log
@fallout (gah, kernel headers in userspace and all that)

TODO: since gcc doesn’t optimise, replace all the pushb calls with _fast
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.24 2010/09/12 18:50:25 tg Exp $ */
d5 1
a5 1
 * Copyright (c) 2004, 2005, 2006, 2008, 2009
d56 3
a58 4
#define	RND_SRC_TRUST	8	/* not yet in stats */
#define	RND_SRC_POOL	9	/* not yet in stats */
#define	RND_SRC_IMACS	10	/* not yet in stats */
#define	RND_SRC_NUM	8	/* size of stats structure */
d100 1
a100 3
void rnd_bootpool_add(const void *, size_t)
    __attribute__((bounded (string, 1, 2)));
void arc4random_bytes(void *, size_t)
d104 2
d107 1
a107 1
    __attribute__((bounded (buffer, 1, 2)));
@


1.24
log
@a bit more like it's supposed to work
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.23 2010/09/12 18:20:00 tg Exp $ */
a40 2
#include <sys/slibkern.h>

d83 3
@


1.23
log
@part 1: remove the addpool, replace with dummy lopool
do not install this, it reduces entropy
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.22 2010/09/12 17:10:45 tg Exp $ */
a40 2
#ifndef _ASM_SOURCE

a110 1
#endif /* !_ASM_SOURCE */
@


1.22
log
@new implementation of arc4random(3) API (except arc4random_uniform(3),
which though has been split off earlier today)

deprecate arc4random_push arc4random_pushb arc4random_pushk
in favour of arc4random_pushb_fast as well

hide internal symbols from user with a version script (only some,
until the next major bump)

make deprecated functions into macros already

switch some kernel code to use the new shared code already; rewrite
of kernel arc4random(9) will come next/later
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.21 2010/09/12 12:24:30 tg Exp $ */
a39 3
#ifndef rnd_addpool_size
#define	rnd_addpool_size 32	/* Power of 2 – 32-bit words; don't change */
#endif
a88 7
extern uint32_t rnd_addpool_buf[];
extern int rnd_addpool_num;	/* ring buffer write pointer (wrapping) */

#define	rnd_addpool_add(x) do {						\
	rnd_addpool_buf[rnd_addpool_num++ % rnd_addpool_size] ^= (x);	\
} while (/* CONSTCOND */ 0)

d108 4
@


1.21
log
@• kern/c/arc4random_uniform.c, kern/include/libckern.h: move
  arc4random_uniform(3) implementation here
• kern/c/Makefile.inc: build arc4random_uniform.c kernel/user
• lib/libc/crypt/arc4random.c, sys/dev/rnd.c: remove implementation here
• sys/dev/rndvar.h: prototype is now in <libckern.h>
• contrib/code/Snippets/arc4random.c: sync with master implementation
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.20 2009/11/09 19:43:45 tg Exp $ */
d46 2
@


1.20
log
@improve RNG stuff with proper hashing
(checked arc4* stuff to avoid short cycles; OpenBSD already ensured that)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.19 2009/03/02 17:56:56 tg Exp $ */
a114 1
u_int32_t arc4random_uniform(u_int32_t);
@


1.19
log
@use rnd_addpool_num as a wrapping pointer and modulo it on use instead of
keeping it always modulo rnd_addpool_size; to simplify this, as a new re-
quirement, rnd_addpool_size must be a power of two (for AND size-1)

this should make things more thread/MP/interrupt safe than even before
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.18 2008/11/09 17:23:35 tg Exp $ */
d5 2
a6 2
 * Copyright (c) 2004, 2005, 2006, 2008
 *	Thorsten Glaser <tg@@mirbsd.de>
a96 4
#define rnd_bootpool_add(addr, len) \
	rnd_addpool_add(adler32(arc4random() | 1, \
	    (const u_char *)(addr), (len)))

d110 2
@


1.18
log
@allow POOLWORDS to be changed by kernel config (we sell rope)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.17 2008/07/26 19:40:51 tg Exp $ */
d41 1
a41 1
#define	rnd_addpool_size 32 /* 32-bit words; don't change */
d91 1
a91 1
extern int rnd_addpool_num;	/* ring buffer write pointer */
d94 1
a94 2
	rnd_addpool_buf[rnd_addpool_num] ^= (x);			\
	rnd_addpool_num = (rnd_addpool_num + 1) % rnd_addpool_size;	\
@


1.17
log
@now that we have the name IMACSing, use it in various places
instead of the previous “just how do we call it”-temporaries
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.16 2008/07/12 16:15:15 tg Exp $ */
d37 1
d39 2
d42 1
@


1.16
log
@• dev/rnd*: implement new add_kbint_randomness() macro for keyboard-
  (and/or) interactive entropy (currently the same as add_tty_randomness,
  but will change in the future)
• zskbd(4/sparc): feed raw scancode entropy into pool too, like pckbd(4)
  does on i386, so that nōn-serial-console users can tap on shift, ctrl,
  alt, meta and the likes before or during e.g. ssh key generation
• pckbc.c: use new add_kbint_randomness ipv add_tty_randomness
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.15 2008/07/10 14:39:24 tg Exp $ */
d59 1
a59 1
#define	RND_SRC_KBI	10	/* not yet in stats */
d106 1
a106 1
#define	add_kbint_randomness(d)	enqueue_randomness(RND_SRC_KBI,   (int)(d))
@


1.15
log
@merge
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.14 2008/07/08 13:43:12 tg Exp $ */
d59 1
d106 1
@


1.14
log
@bounds checking
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.13 2008/07/08 13:35:38 tg Exp $ */
d112 1
@


1.13
log
@now that we really can use arc4random(9) in all cases, nuke another use
of random() in here
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.12 2008/06/13 14:00:05 tg Exp $ */
d107 4
a110 2
void get_random_bytes(void *, size_t);
void arc4random_bytes(void *, size_t);
@


1.12
log
@• get rid of rnd_bootpool* now that we can use rnd_addpool_add() early
• drain the rnd_addpool not a 32-burst every half minute or so, but
  one word at a time about every second ± ½
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.11 2008/06/13 13:11:50 tg Exp $ */
d93 2
a94 1
#define rnd_bootpool_add(addr, len) rnd_addpool_add(adler32(random() | 1, \
@


1.11
log
@speedup: only process rnd_addpool_allow check while draining, not adding
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.10 2008/06/13 12:57:27 tg Exp $ */
a86 1
extern int rnd_bootpool_done;	/* has it been drained already? */
d88 3
a90 4
#define	rnd_addpool_add(x) do {					\
	rnd_addpool_buf[rnd_addpool_num++] ^= (x);		\
	if (rnd_addpool_num == rnd_addpool_size)		\
		rnd_addpool_num = 0;				\
d93 2
a94 8
#define rnd_bootpool_add(area, len) do {			\
	if (rnd_bootpool_done)					\
		rnd_addpool_add(adler32(arc4random(),		\
		    (const uint8_t *)(area), (len)));		\
	else							\
		rnd_bootpool = adler32(rnd_bootpool,		\
		    (const uint8_t *)(area), (len));		\
} while (/* CONSTCOND */ 0)
@


1.10
log
@remove redundancy
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.9 2008/04/09 05:45:42 tg Exp $ */
d86 2
a87 10
extern uint32_t rnd_addpool_num;
extern uint32_t rnd_addpool_allow;
#define	rnd_addpool_add(x)						\
	do {								\
		if (rnd_addpool_allow) {				\
			rnd_addpool_buf[rnd_addpool_num++] ^= (x);	\
			if (rnd_addpool_num == rnd_addpool_size)	\
				rnd_addpool_num = 0;			\
		}							\
	} while (/*CONSTCOND*/0)
d89 14
a102 9
extern int rnd_bootpool_done;	/* has it been drained already? */
#define rnd_bootpool_add(area, len) do {				\
	if (rnd_bootpool_done)						\
		rnd_addpool_add(adler32(arc4random(),			\
		    (const uint8_t *)(area), (len)));			\
	else								\
		rnd_bootpool = adler32(rnd_bootpool,			\
		    (const uint8_t *)(area), (len));			\
} while (0)
@


1.9
log
@new macro rnd_bootpool_add for
• simplifying operations on rnd_bootpool
• allowing to use it _past_ enqueueing of rnd_bootpool into user pool
  near end of kernel boot-up (think PCMCIA NIC hot-plug¹)

¹) yes, despite RFC1750 and with Vutral’s idea
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.8 2007/07/09 00:05:36 tg Exp $ */
d5 1
a5 1
 * Copyright (c) 2004, 2005, 2006
d99 4
a102 5
	if (rnd_bootpool_done) {					\
		if (rnd_addpool_allow)					\
			rnd_addpool_add(adler32(arc4random(),		\
			    (const uint8_t *)(area), (len)));		\
	} else								\
@


1.8
log
@fix comment
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.7 2006/10/07 21:36:21 tg Exp $ */
d97 11
@


1.7
log
@add a full compliant portable C implementation of the adler32.c file
found in libc, without the adler32_combine function (unneeded in the
kernel and especially the bootloader), to the MirOS BSD kernel (note
in sys/conf/files) and the sparc bootloader (the i386 bootloader al-
ready uses the same code as assembly version, except that that comes
without the "return 1 if (buf == NULL)" functionality); sync all our
adler32 implementations and lint a little
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.6 2006/08/22 20:58:24 tg Exp $ */
d67 1
a67 1
	quad_t arc4_stirs;	/* arc4 pool stirs (bits used) */
@


1.6
log
@double the size of the addpool buffer, now that it isn't
accounted for as "true randomness" (but still added)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.5 2006/08/18 12:29:52 tg Exp $ */
d95 1
a95 1
	} while(0)
@


1.5
log
@slightly improve the addpool; don't count its input as 'true entropy'
since it isn't (pending a post-#9bis redesign in -current)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.4 2006/03/27 09:45:29 tg Exp $ */
d38 1
a38 1
#define	rnd_addpool_size 16 /* 32-bit words; don't change */
d59 1
a59 1
#define	RND_SRC_NUM	8
@


1.4
log
@* document pool size for pushrand
* use _ASM_SOURCE like every other place
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.3 2006/03/27 09:25:23 tg Exp $ */
d57 2
@


1.4.2.1
log
@I intended to commit this because my debugging script:
| while sleep 2; do
|	set -A foo $(sysctl kern.random)
|	let i=${foo[56]}
|	printf '%16s' "$i ($((i / 32)))"
| done
didn't display anything worthwhile, but I had forgotten
about the initial delay where rnd(4) is not yet attached;
it works now (icmp, tcp, rdate all contribute; filling it
manually via /dev/prandom adds 16 32-bit values; the in-
terval is randomised).
@
text
@d1 1
a1 2
#define RNADDPOOL_DEBUG
/**	$MirOS: src/sys/dev/rndvar.h,v 1.4 2006/03/27 09:45:29 tg Exp $ */
a85 14
#ifdef RNADDPOOL_DEBUG
#define	rnd_addpool_add(x)						\
	do {								\
		uint32_t xx = (x);					\
		printf("rnd_addpool_add: %08X", xx);			\
		if (rnd_addpool_allow) {				\
			printf(" -> %d", rnd_addpool_num);		\
			rnd_addpool_buf[rnd_addpool_num++] ^= xx;	\
			if (rnd_addpool_num == rnd_addpool_size)	\
				rnd_addpool_num = 0;			\
		}							\
		printf("\n");						\
	} while(0)
#else
a93 1
#endif
@


1.3
log
@change type of assembly-accessed variables to uint32_t
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/rndvar.h,v 1.2 2005/03/06 21:27:35 tg Exp $ */
d5 2
a6 2
 * Copyright (c) 2004, 2005
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
d38 1
a38 1
#define	rnd_addpool_size 16
d40 1
a40 1
#ifndef ASMSTR		/* only if we're not called from assembly code */
d110 1
a110 1
#endif /* ndef ASMSTR */
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 1
a1 1
/**	$MirOS$ */
d84 2
a85 2
extern size_t rnd_addpool_num;
extern int rnd_addpool_allow;
@


1.1
log
@Initial revision
@
text
@d1 1
d5 2
d38 3
d83 12
d110 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@+arc4random_uniform
@
text
@a89 1
u_int32_t arc4random_uniform(u_int32_t);
@

