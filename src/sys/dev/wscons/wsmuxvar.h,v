head	1.1;
branch	1.1.1;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.3
	MIRBSD_10:1.1.1.3.0.2
	MIRBSD_10_BASE:1.1.1.3
	cvs-200702062030:1.1.1.3
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200507032030:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.02.05.17.28.47;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.28.47;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.04.01.13.58;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	76bf42c88d6bc5d8;

1.1.1.3
date	2007.02.06.20.51.59;	author tg;	state Exp;
branches;
next	;
commitid	10045C8EA6658CBB47A;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: wsmuxvar.h,v 1.5 2002/03/14 01:27:03 millert Exp $	*/
/*	$NetBSD: wsmuxvar.h,v 1.1 1999/07/29 18:20:43 augustss Exp $	*/

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Author: Lennart Augustsson <augustss@@carlstedt.se>
 *         Carlstedt Research & Technology
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

struct wsdisplay_softc;
struct wsplink;

struct wsmux_softc {
	struct device sc_dv;
	struct wseventvar sc_events;	/* event queue state */
	int sc_flags, sc_mode;		/* open flags */
	struct proc *sc_p;		/* open proc */
	LIST_HEAD(, wsplink) sc_reals;  /* list of real devices */
	struct wsmux_softc *sc_mux;     /* if part of another mux */
	struct device *sc_displaydv;    /* our display if part of one */
#ifdef WSDISPLAY_COMPAT_RAWKBD
	int sc_rawkbd;		        /* A hack to remember the kbd mode */
#endif
};

struct wsmuxops {
	int (*dopen)(dev_t, int, int, struct proc *);
	int (*dclose)(struct device *, int, int, struct proc *);
	int (*dioctl)(struct device *, u_long, caddr_t, int, 
			   struct proc *);
	int (*ddispioctl)(struct device *, u_long, caddr_t, int, 
			       struct proc *);
	int (*dsetdisplay)(struct device *, struct wsmux_softc *);
	int (*dissetdisplay)(struct device *);
};


/*
 * configure defines
 */
#define	WSKBDDEVCF_MUX_DEFAULT		-1
#define WSMOUSEDEVCF_MUX		0
#define WSMOUSEDEVCF_MUX_DEFAULT	-1

struct wsmux_softc *wsmux_create(const char *name, int no);
int	wsmux_attach_sc(
	  struct wsmux_softc *,
	  int, struct device *, struct wseventvar *,
	  struct wsmux_softc **,
	  struct wsmuxops *);
int	wsmux_detach_sc(struct wsmux_softc *, struct device *);
void	wsmux_attach(
	  int, int, struct device *, struct wseventvar *,
	  struct wsmux_softc **,
	  struct wsmuxops *);
void	wsmux_detach(int, struct device *);

int	wsmux_displayioctl(struct device *dev, u_long cmd,
	    caddr_t data, int flag, struct proc *p);

int	wsmuxdoioctl(struct device *, u_long, caddr_t,int,struct proc *);

int	wsmux_add_mux(int, struct wsmux_softc *);
int	wsmux_rem_mux(int, struct wsmux_softc *);
int	wskbd_add_mux(int, struct wsmux_softc *);
int	wskbd_rem_mux(int, struct wsmux_softc *);
int	wsmouse_add_mux(int, struct wsmux_softc *);
int	wsmouse_rem_mux(int, struct wsmux_softc *);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@lastly some drivers
@
text
@d1 2
a2 2
/*	$OpenBSD: wsmuxvar.h,v 1.6 2005/05/15 11:29:15 miod Exp $	*/
/*      $NetBSD: wsmuxvar.h,v 1.10 2005/04/30 03:47:12 augustss Exp $   */
d40 2
a41 41
/*
 * A ws event source, i.e., wskbd, wsmouse, or wsmux.
 */
struct wsevsrc {
	struct device me_dv;
	const struct wssrcops *me_ops;	/* method pointers */
	struct wseventvar me_evar;	/* wseventvar opened directly */
	struct wseventvar *me_evp;	/* our wseventvar when open */
#if NWSDISPLAY > 0
	struct device *me_dispdv;	/* our display if part of one */
#define	sc_displaydv	sc_base.me_dispdv
#endif
#if NWSMUX > 0
	struct wsmux_softc *me_parent;	/* parent mux device */
	CIRCLEQ_ENTRY(wsevsrc) me_next;	/* sibling pointers */
#endif
};

/*
 * Methods that can be performed on an events source.  Usually called
 * from a wsmux.
 */
struct wssrcops {
	int type;			/* device type: WSMUX_{MOUSE,KBD,MUX} */
	int (*dopen)(struct wsevsrc *, struct wseventvar *);
	int (*dclose)(struct wsevsrc *);
	int (*dioctl)(struct device *, u_long, caddr_t, int, struct proc *);
	int (*ddispioctl)(struct device *, u_long, caddr_t, int, struct proc *);
	int (*dsetdisplay)(struct device *, struct wsevsrc *);
};

#define wsevsrc_open(me, evp) \
	((me)->me_ops->dopen((me), evp))
#define wsevsrc_close(me) \
	((me)->me_ops->dclose((me)))
#define wsevsrc_ioctl(me, cmd, data, flag, p) \
	((me)->me_ops->dioctl(&(me)->me_dv, cmd, (caddr_t)data, flag, p))
#define wsevsrc_display_ioctl(me, cmd, data, flag, p) \
	((me)->me_ops->ddispioctl(&(me)->me_dv, cmd, (caddr_t)data, flag, p))
#define wsevsrc_set_display(me, arg) \
	((me)->me_ops->dsetdisplay(&(me)->me_dv, arg))
a42 1
#if NWSMUX > 0
d44 3
a46 1
	struct wsevsrc sc_base;
d48 3
a50 2
	CIRCLEQ_HEAD(, wsevsrc) sc_cld;	/* list of children */
	u_int32_t sc_kbd_layout;	/* current layout of keyboard */
d52 1
a52 1
	int sc_rawkbd;			/* A hack to remember the kbd mode */
d56 12
d71 1
d73 14
d88 2
a89 5
struct	wsmux_softc *wsmux_getmux(int);
struct	wsmux_softc *wsmux_create(const char *, int);
int	wsmux_attach_sc(struct wsmux_softc *, struct wsevsrc *);
void	wsmux_detach_sc(struct wsevsrc *);
int	wsmux_set_display(struct wsmux_softc *, struct device *);
d91 4
d96 1
d98 1
a98 2

#endif	/* NWSMUX > 0 */
@


1.1.1.3
log
@import current wscons & friends code from OpenBSD
in the hope it will be useful
@
text
@d1 1
a1 1
/*	$OpenBSD: wsmuxvar.h,v 1.7 2006/08/05 16:59:57 miod Exp $	*/
d68 1
a68 1
	int (*dsetdisplay)(struct device *, struct device *);
@


