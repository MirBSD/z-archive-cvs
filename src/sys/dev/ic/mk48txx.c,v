head	1.5;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.1
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2011.11.20.20.01.04;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004EC95C962E644A3D;

1.4
date	2007.02.07.20.43.26;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045CA39907FBE4A06;

1.3
date	2005.10.19.18.10.14;	author tg;	state Exp;
branches;
next	1.2;
commitid	2cb043568c1530df;

1.2
date	2005.03.06.21.27.40;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.57;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.57;	author tg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@convert to MirTime API
@
text
@/**	$MirOS: src/sys/dev/ic/mk48txx.c,v 1.4 2007/02/07 20:43:26 tg Exp $ */
/*	$OpenBSD: mk48txx.c,v 1.4 2002/06/09 00:07:10 nordin Exp $	*/
/*	$NetBSD: mk48txx.c,v 1.7 2001/04/08 17:05:10 tsutsui Exp $ */
/*-
 * Copyright (c) 2005, 2011 Thorsten Glaser
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Mostek MK48T02, MK48T08, MK48T59 time-of-day chip subroutines.
 */

#include <sys/param.h>
#include <sys/malloc.h>
#include <sys/systm.h>
#include <sys/errno.h>

#include <machine/bus.h>
#include <dev/clock_subr.h>


struct mk48txx {
	bus_space_tag_t	mk_bt;		/* bus tag & handle */
	bus_space_handle_t mk_bh;	/* */
	bus_size_t	mk_nvramsz;	/* Size of NVRAM on the chip */
	bus_size_t	mk_clkoffset;	/* Offset in NVRAM to clock bits */
	u_int		mk_year0;	/* What year is represented on the system
					   by the chip's year counter at 0 */
};

int mk48txx_gettime(todr_chip_handle_t, struct timeval *);
int mk48txx_settime(todr_chip_handle_t, struct timeval *);
int mk48txx_getcal(todr_chip_handle_t, int *);
int mk48txx_setcal(todr_chip_handle_t, int);

int mk48txx_auto_century_adjust = 1;

struct {
	const char *name;
	bus_size_t nvramsz;
	bus_size_t clkoff;
	int flags;
#define MK48TXX_EXT_REGISTERS	1	/* Has extended register set */
} mk48txx_models[] = {
	{ "mk48t02", MK48T02_CLKSZ, MK48T02_CLKOFF, 0 },
	{ "mk48t08", MK48T08_CLKSZ, MK48T08_CLKOFF, 0 },
	{ "mk48t18", MK48T18_CLKSZ, MK48T18_CLKOFF, 0 },
	{ "mk48t59", MK48T59_CLKSZ, MK48T59_CLKOFF, MK48TXX_EXT_REGISTERS },
};

todr_chip_handle_t
mk48txx_attach(bt, bh, model, year0)
	bus_space_tag_t bt;
	bus_space_handle_t bh;
	const char *model;
	int year0;
{
	todr_chip_handle_t handle;
	struct mk48txx *mk;
	bus_size_t nvramsz, clkoff;
	int sz;
	int i;

	printf(": %s", model);

	i = sizeof(mk48txx_models)/sizeof(mk48txx_models[0]);
	while (--i >= 0) {
		if (strcmp(model, mk48txx_models[i].name) == 0) {
			nvramsz = mk48txx_models[i].nvramsz;
			clkoff = mk48txx_models[i].clkoff;
			break;
		}
	}
	if (i < 0) {
		printf(": unsupported model");
		return (NULL);
	}

	sz = ALIGN(sizeof(struct todr_chip_handle)) + sizeof(struct mk48txx);
	handle = malloc(sz, M_DEVBUF, M_NOWAIT);
	if (handle == NULL) {
		printf(": failed to allocate memory");
		return NULL;
	}
	mk = (struct mk48txx *)((u_long)handle +
				 ALIGN(sizeof(struct todr_chip_handle)));
	handle->cookie = mk;
	handle->todr_gettime = mk48txx_gettime;
	handle->todr_settime = mk48txx_settime;
	handle->todr_getcal = mk48txx_getcal;
	handle->todr_setcal = mk48txx_setcal;
	handle->todr_setwen = NULL;
	mk->mk_bt = bt;
	mk->mk_bh = bh;
	mk->mk_nvramsz = nvramsz;
	mk->mk_clkoffset = clkoff;
	mk->mk_year0 = year0;

	return (handle);
}

/*
 * Get time-of-day and convert to a `struct timeval'
 * Return 0 on success; an error number otherwise.
 */
int
mk48txx_gettime(handle, tv)
	todr_chip_handle_t handle;
	struct timeval *tv;
{
	struct mk48txx *mk = handle->cookie;
	bus_space_tag_t bt = mk->mk_bt;
	bus_space_handle_t bh = mk->mk_bh;
	bus_size_t clkoff = mk->mk_clkoffset;
	struct tm tm;
	int year;
	u_int8_t csr;

	todr_wenable(handle, 1);

	/* enable read (stop time) */
	csr = bus_space_read_1(bt, bh, clkoff + MK48TXX_ICSR);
	csr |= MK48TXX_CSR_READ;
	bus_space_write_1(bt, bh, clkoff + MK48TXX_ICSR, csr);

	tm.tm_sec = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_ISEC));
	tm.tm_min = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_IMIN));
	tm.tm_hour = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_IHOUR));
	tm.tm_mday = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_IDAY));
	tm.tm_wday = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_IWDAY));
	tm.tm_mon = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_IMON)) - 1;
	tm.tm_gmtoff = 0;
	year = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_IYEAR));

	year += mk->mk_year0;
	if (year < POSIX_BASE_YEAR && mk48txx_auto_century_adjust != 0)
		year += 100;

	tm.tm_year = year - 1900;

	/* time wears on */
	csr = bus_space_read_1(bt, bh, clkoff + MK48TXX_ICSR);
	csr &= ~MK48TXX_CSR_READ;
	bus_space_write_1(bt, bh, clkoff + MK48TXX_ICSR, csr);
	todr_wenable(handle, 0);

	/* simple sanity checks */
	if (tm.tm_mon > 11 || tm.tm_day > 31 ||
	    tm.tm_hour >= 24 || tm.tm_min >= 60 || tm.tm_sec >= 61)
		return (1);

	tv->tv_sec = tm2timet(&tm);
	tv->tv_usec = 0;
	return (0);
}

/*
 * Set the time-of-day clock based on the value of the `struct timeval' arg.
 * Return 0 on success; an error number otherwise.
 */
int
mk48txx_settime(handle, tv)
	todr_chip_handle_t handle;
	struct timeval *tv;
{
	struct mk48txx *mk = handle->cookie;
	bus_space_tag_t bt = mk->mk_bt;
	bus_space_handle_t bh = mk->mk_bh;
	bus_size_t clkoff = mk->mk_clkoffset;
	struct tm tm;
	u_int8_t csr;
	int year;

	/* Note: we ignore `tv_usec' */
	timet2tm(&tm, tv->tv_sec);

	year = tm.tm_year + 1900 - mk->mk_year0;
	if (year > 99 && mk48txx_auto_century_adjust != 0)
		year -= 100;

	todr_wenable(handle, 1);
	/* enable write */
	csr = bus_space_read_1(bt, bh, clkoff + MK48TXX_ICSR);
	csr |= MK48TXX_CSR_WRITE;
	bus_space_write_1(bt, bh, clkoff + MK48TXX_ICSR, csr);

	bus_space_write_1(bt, bh, clkoff + MK48TXX_ISEC, TOBCD(tm.tm_sec));
	bus_space_write_1(bt, bh, clkoff + MK48TXX_IMIN, TOBCD(tm.tm_min));
	bus_space_write_1(bt, bh, clkoff + MK48TXX_IHOUR, TOBCD(tm.tm_hour));
	bus_space_write_1(bt, bh, clkoff + MK48TXX_IWDAY, TOBCD(tm.tm_wday));
	bus_space_write_1(bt, bh, clkoff + MK48TXX_IDAY, TOBCD(tm.tm_mday));
	bus_space_write_1(bt, bh, clkoff + MK48TXX_IMON, TOBCD(tm.tm_mon + 1));
	bus_space_write_1(bt, bh, clkoff + MK48TXX_IYEAR, TOBCD(year));

	/* load them up */
	csr = bus_space_read_1(bt, bh, clkoff + MK48TXX_ICSR);
	csr &= ~MK48TXX_CSR_WRITE;
	bus_space_write_1(bt, bh, clkoff + MK48TXX_ICSR, csr);
	todr_wenable(handle, 0);
	return (0);
}

int
mk48txx_getcal(handle, vp)
	todr_chip_handle_t handle;
	int *vp;
{
	return (EOPNOTSUPP);
}

int
mk48txx_setcal(handle, v)
	todr_chip_handle_t handle;
	int v;
{
	return (EOPNOTSUPP);
}

int
mk48txx_get_nvram_size(handle, vp)
	todr_chip_handle_t handle;
	bus_size_t *vp;
{
	struct mk48txx *mk = handle->cookie;
	*vp = mk->mk_nvramsz;
	return (0);
}
@


1.4
log
@* attempt to move taitime(3) functions from libc and kernel to kernbase,
  its prototypes from <time.h> and <sys/time.h> (which includes <time.h>)
  and <lib/libkern/taitime.h> to <sys/taitime.h>, split between indepen-
  dent and dependent (kernel/userland different leap table initialisation;
  userland additional tai_time(), taina_time(), importtai(), exporttai()),
  reduce required headers; reduce diff from headers to upstream
* move kernel tai leap second table from kernel objects to libkern
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/ic/mk48txx.c,v 1.3 2005/10/19 18:10:14 tg Exp $ */
d5 1
a5 1
 * Copyright (c) 2005 Thorsten Glaser
a47 1
#include <sys/taitime.h>
d184 1
a184 1
	tv->tv_sec = tai2timet(mjd2tai(tm2mjd(tm)));
d207 1
a207 1
	tm = mjd2tm(tai2mjd(timet2tai(tv->tv_sec)));
@


1.3
log
@second tm2mjd appearance in kernel
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/ic/mk48txx.c,v 1.2 2005/03/06 21:27:40 tg Exp $ */
d48 1
a52 1
#include <lib/libkern/taitime.h>
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 1
a1 1
/**	$MirOS$ */
d165 1
@


1.1
log
@Initial revision
@
text
@d1 1
d5 1
d52 1
a52 1
#include <dev/ic/mk48txxreg.h>
d148 1
a148 1
	struct clock_ymdhms dt;
d159 6
a164 6
	dt.dt_sec = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_ISEC));
	dt.dt_min = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_IMIN));
	dt.dt_hour = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_IHOUR));
	dt.dt_day = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_IDAY));
	dt.dt_wday = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_IWDAY));
	dt.dt_mon = FROMBCD(bus_space_read_1(bt, bh, clkoff + MK48TXX_IMON));
d171 1
a171 1
	dt.dt_year = year;
d180 2
a181 2
	if (dt.dt_mon > 12 || dt.dt_day > 31 ||
	    dt.dt_hour >= 24 || dt.dt_min >= 60 || dt.dt_sec >= 60)
d184 1
a184 1
	tv->tv_sec = clock_ymdhms_to_secs(&dt);
d202 1
a202 1
	struct clock_ymdhms dt;
d207 1
a207 1
	clock_secs_to_ymdhms(tv->tv_sec, &dt);
d209 1
a209 1
	year = dt.dt_year - mk->mk_year0;
d219 6
a224 6
	bus_space_write_1(bt, bh, clkoff + MK48TXX_ISEC, TOBCD(dt.dt_sec));
	bus_space_write_1(bt, bh, clkoff + MK48TXX_IMIN, TOBCD(dt.dt_min));
	bus_space_write_1(bt, bh, clkoff + MK48TXX_IHOUR, TOBCD(dt.dt_hour));
	bus_space_write_1(bt, bh, clkoff + MK48TXX_IWDAY, TOBCD(dt.dt_wday));
	bus_space_write_1(bt, bh, clkoff + MK48TXX_IDAY, TOBCD(dt.dt_day));
	bus_space_write_1(bt, bh, clkoff + MK48TXX_IMON, TOBCD(dt.dt_mon));
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
