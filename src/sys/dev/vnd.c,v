head	1.25;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.19
	MIRBSD_10:1.9.0.4
	MIRBSD_10_BASE:1.9
	MIRBSD_9_BASE:1.5
	MIRBSD_8:1.5.0.2
	MIRBSD_8_BASE:1.5
	cvs-200504291700:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2013.10.31.20.06.56;	author tg;	state Exp;
branches;
next	1.24;
commitid	1005272B7081B0E5655;

1.24
date	2008.08.30.19.09.29;	author tg;	state Exp;
branches;
next	1.23;
commitid	10048B99AEE22DDD917;

1.23
date	2008.07.09.23.20.49;	author tg;	state Exp;
branches;
next	1.22;
commitid	100487547E25379C2A2;

1.22
date	2008.06.14.22.28.08;	author tg;	state Exp;
branches;
next	1.21;
commitid	100485445F673DABBF1;

1.21
date	2008.06.13.18.24.10;	author tg;	state Exp;
branches;
next	1.20;
commitid	1004852BB4F2941ED01;

1.20
date	2008.06.13.18.22.33;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004852BAFC061F1162;

1.19
date	2008.06.13.18.21.32;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004852BAB843505468;

1.18
date	2008.06.13.18.20.50;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004852BA976DF34EC1;

1.17
date	2008.06.12.23.14.48;	author tg;	state Exp;
branches;
next	1.16;
commitid	1004851ADE132779575;

1.16
date	2008.06.12.23.13.34;	author tg;	state Exp;
branches;
next	1.15;
commitid	1004851ADAC3716145A;

1.15
date	2008.06.12.21.19.25;	author tg;	state Exp;
branches;
next	1.14;
commitid	100485192E65C9B371E;

1.14
date	2008.06.12.20.19.45;	author tg;	state Exp;
branches;
next	1.13;
commitid	100485184F378FD3074;

1.13
date	2008.06.12.18.53.09;	author tg;	state Exp;
branches;
next	1.12;
commitid	100485170582E71F811;

1.12
date	2008.06.12.17.59.04;	author tg;	state Exp;
branches;
next	1.11;
commitid	100485163ED7A3DD135;

1.11
date	2008.06.12.17.35.01;	author tg;	state Exp;
branches;
next	1.10;
commitid	10048515E5340030A9F;

1.10
date	2008.06.12.17.10.35;	author tg;	state Exp;
branches;
next	1.9;
commitid	100485158984E02C0AD;

1.9
date	2007.09.18.21.51.33;	author tg;	state Exp;
branches;
next	1.8;
commitid	10046F0485B0F1E4B08;

1.8
date	2007.09.18.20.11.25;	author tg;	state Exp;
branches;
next	1.7;
commitid	10046F0310178F20F63;

1.7
date	2007.09.18.19.52.45;	author tg;	state Exp;
branches;
next	1.6;
commitid	10046F02C717885ADC6;

1.6
date	2007.09.18.19.40.05;	author tg;	state Exp;
branches;
next	1.5;
commitid	10046F029AB2B333960;

1.5
date	2005.07.21.21.52.17;	author tg;	state Exp;
branches;
next	1.4;
commitid	181c42e0191f67ef;

1.4
date	2005.04.29.18.35.01;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.14.21.54.44;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.21.27.35;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.48;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.48;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.17.05.50;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.07.21.21.39.32;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	5f0d42e015f52f66;

1.1.1.4
date	2007.09.18.19.18.46;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10046F0249A0F33A2CD;

1.1.1.5
date	2007.09.18.19.20.24;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10046F024FF6A3E6B79;

1.1.1.6
date	2007.09.18.19.22.19;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	10046F0257A32DBF76D;

1.1.1.7
date	2007.09.18.19.25.28;	author tg;	state Exp;
branches;
next	1.1.1.8;
commitid	10046F0261F54AB3F73;

1.1.1.8
date	2007.09.18.19.28.12;	author tg;	state Exp;
branches;
next	1.1.1.9;
commitid	10046F026CC44471BAD;

1.1.1.9
date	2007.09.18.19.33.26;	author tg;	state Exp;
branches;
next	1.1.1.10;
commitid	10046F028134A782039;

1.1.1.10
date	2007.09.18.19.37.16;	author tg;	state Exp;
branches;
next	1.1.1.11;
commitid	10046F028F6669611C3;

1.1.1.11
date	2007.09.18.20.03.30;	author tg;	state Exp;
branches;
next	1.1.1.12;
commitid	10046F02F0B0A6225DC;

1.1.1.12
date	2008.06.12.17.14.30;	author tg;	state Exp;
branches;
next	1.1.1.13;
commitid	1004851598A1933B079;

1.1.1.13
date	2008.06.12.17.20.08;	author tg;	state Exp;
branches;
next	1.1.1.14;
commitid	10048515AD805603072;

1.1.1.14
date	2008.06.12.17.22.30;	author tg;	state Exp;
branches;
next	1.1.1.15;
commitid	10048515B5D62C43313;

1.1.1.15
date	2008.06.12.17.23.18;	author tg;	state Exp;
branches;
next	1.1.1.16;
commitid	10048515B97315EFA11;

1.1.1.16
date	2008.06.12.17.27.17;	author tg;	state Exp;
branches;
next	1.1.1.17;
commitid	10048515C7F368809F0;

1.1.1.17
date	2008.06.12.17.28.01;	author tg;	state Exp;
branches;
next	1.1.1.18;
commitid	10048515CAB748F00F3;

1.1.1.18
date	2008.06.12.17.30.37;	author tg;	state Exp;
branches;
next	1.1.1.19;
commitid	10048515D437C76A844;

1.1.1.19
date	2008.06.12.17.32.38;	author tg;	state Exp;
branches;
next	;
commitid	10048515DBD5D4238B0;


desc
@@


1.25
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/**	$MirOS: src/sys/dev/vnd.c,v 1.24 2008/08/30 19:09:29 tg Exp $ */
/*	$OpenBSD: vnd.c,v 1.88 2008/07/23 16:24:43 beck Exp $	*/
/*	$NetBSD: vnd.c,v 1.26 1996/03/30 23:06:11 christos Exp $	*/

/*
 * Copyright © 2008, 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: vn.c 1.13 94/04/02$
 *
 *	@@(#)vn.c	8.6 (Berkeley) 4/1/94
 */

/*
 * Vnode disk driver.
 *
 * Block/character interface to a vnode.  Allows one to treat a file
 * as a disk (e.g. build a filesystem in it, mount it, etc.).
 *
 * NOTE 1: This uses either the VOP_BMAP/VOP_STRATEGY interface to the
 * vnode or simple VOP_READ/VOP_WRITE.  The former is suitable for swapping
 * as it doesn't distort the local buffer cache.  The latter is good for
 * building disk images as it keeps the cache consistent after the block
 * device is closed.
 *
 * NOTE 2: There is a security issue involved with this driver.
 * Once mounted all access to the contents of the "mapped" file via
 * the special file is controlled by the permissions on the special
 * file, the protection of the mapped file is ignored (effectively,
 * by using root credentials in all transactions).
 *
 * NOTE 3: Doesn't interact with leases, should it?
 *
 * NOTE 4: Trying to mount ffs read-write on a read-only vnd device
 * makes ffs "very unhappy". Don't try this at work, kids!
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/namei.h>
#include <sys/proc.h>
#include <sys/errno.h>
#include <sys/buf.h>
#include <sys/malloc.h>
#include <sys/pool.h>
#include <sys/ioctl.h>
#include <sys/disklabel.h>
#include <sys/device.h>
#include <sys/disk.h>
#include <sys/stat.h>
#include <sys/mount.h>
#include <sys/vnode.h>
#include <sys/file.h>
#include <sys/uio.h>
#include <sys/conf.h>

#include <crypto/blf.h>
#ifdef CRYPTO
#include <crypto/rijndael.h>
#endif

#include <miscfs/specfs/specdev.h>

#include <dev/vndioctl.h>

#ifdef VNDDEBUG
int dovndcluster = 1;
int vnddebug = 0x00;
#define	VDB_FOLLOW	0x01
#define	VDB_INIT	0x02
#define	VDB_IO		0x04
#define	DNPRINTF(f, p...)	do { if ((f) & vnddebug) printf(p); } while (0)
#else
#define	DNPRINTF(f, p...)	/* nothing */
#endif	/* VNDDEBUG */

/*
 * vndunit is a bit weird.  have to reconstitute the dev_t for
 * DISKUNIT(), but with the minor masked off.
 */
#define	vndunit(x)	DISKUNIT(makedev(major(x), minor(x) & 0x7ff))
#define	vndsimple(x)	(minor(x) & 0x800)

/* same as MAKEDISKDEV, preserving the vndsimple() property */
#define	VNDLABELDEV(dev)	\
	makedev(major(dev), DISKMINOR(vndunit(dev), RAW_PART) | \
	    (vndsimple(dev) ? 0x800 : 0))

struct vndbuf {
	struct buf	vb_buf;
	struct buf	*vb_obp;
};

/*
 * struct vndbuf allocator
 */
struct pool     vndbufpl;

#define	getvndbuf()	pool_get(&vndbufpl, PR_WAITOK)
#define	putvndbuf(vbp)	pool_put(&vndbufpl, vbp);

struct vnd_ctx {
#ifdef notyet
	u_char iv[VNDIOC_IVSZ];			/* encryption IV (!BLF) */
#endif
	size_t len;				/* key context size */
	union {
		void *ctx_ptr;			/* pointer for malloc/free */
		blf_ctx *blowfish;		/* key for BLF, BF_CBC */
#ifdef CRYPTO
		rijndael_ctx *rijndael;		/* key for AES*_CBC */
#endif
	} key;
	uint8_t alg;				/* algorithm to use */
};

struct vnd_softc {
	struct device	 sc_dev;
	struct disk	 sc_dk;

	char		 sc_file[VNDNLEN];	/* file we're covering */
	int		 sc_flags;		/* flags */
	size_t		 sc_size;		/* size of vnd in blocks */
	struct vnode	*sc_vp;			/* vnode */
	struct ucred	*sc_cred;		/* credentials */
	struct buf	 sc_tab;		/* transfer queue */
	struct vnd_ctx	 sc_enc;		/* encryption context */
#define sc_enc_iv	sc_enc.iv
#define sc_enc_len	sc_enc.len
#define sc_enc_ptr	sc_enc.key.ctx_ptr
#define sc_enc_blf	sc_enc.key.blowfish
#define sc_enc_aes	sc_enc.key.rijndael
#define sc_enc_alg	sc_enc.alg
};

/* sc_flags */
#define	VNF_ALIVE	0x0001
#define	VNF_INITED	0x0002
#define	VNF_WANTED	0x0040
#define	VNF_LOCKED	0x0080
#define	VNF_LABELLING	0x0100
#define	VNF_WLABEL	0x0200
#define	VNF_HAVELABEL	0x0400
#define	VNF_SIMPLE	0x1000
#define	VNF_READONLY	0x2000

#define	VNDRW(v)	((v)->sc_flags & VNF_READONLY ? FREAD : FREAD|FWRITE)

struct vnd_softc *vnd_softc;
int numvnd = 0;

struct dkdriver vnddkdriver = { vndstrategy };

/* called by main() at boot time */
void	vndattach(int);

void	vndclear(struct vnd_softc *);
void	vndstart(struct vnd_softc *);
int	vndsetcred(struct vnd_softc *, struct ucred *);
void	vndiodone(struct buf *);
void	vndshutdown(void);
void	vndgetdisklabel(dev_t, struct vnd_softc *, struct disklabel *, int);
void	vndencrypt(struct vnd_softc *, caddr_t, size_t, daddr_t, int);
#ifdef notyet
void	vndmkiv(u_char *, u_char *, size_t, daddr_t)
    __attribute__((__bounded__(__string__, 1, 3)))
    __attribute__((__bounded__(__minbytes__, 2, VNDIOC_IVSZ)));
#endif
size_t	vndbdevsize(struct vnode *, struct proc *);

int	vndlock(struct vnd_softc *);
void	vndunlock(struct vnd_softc *);

void
vndencrypt(struct vnd_softc *vnd, caddr_t addr, size_t size, daddr_t off,
    int encrypt)
{
	size_t i, n;
	u_char iv[VNDIOC_MAXBSZ];
#ifdef notyet
#ifdef CRYPTO
	rijndael_do_cbc_t aes_op;

	if (encrypt)
		aes_op = rijndael_cbc_encrypt_fast;
	else
		aes_op = rijndael_cbc_decrypt_fast;
#endif
#endif

	n = dbtob(1);
	for (i = 0; i < size/n; i++) {
		switch (vnd->sc_enc_alg) {
		case VNDIOC_ALG_BLF:
			bzero(iv, sizeof (iv));
			bcopy((u_char *)&off, iv, sizeof (off));
#ifdef notyet
			goto vndencrypt_blowfish;
		case VNDIOC_ALG_BF_CBC:
			vndmkiv(iv, vnd->sc_enc_iv, VNDIOC_BSZ_BLF, off);
 vndencrypt_blowfish:
#endif
			blf_ecb_encrypt(vnd->sc_enc_blf, iv, VNDIOC_BSZ_BLF);
			if (encrypt)
				blf_cbc_encrypt(vnd->sc_enc_blf, iv, addr, n);
			else
				blf_cbc_decrypt(vnd->sc_enc_blf, iv, addr, n);
			break;
#ifdef notyet
#ifdef CRYPTO
		case VNDIOC_ALG_AES128_CBC:
		case VNDIOC_ALG_AES192_CBC:
		case VNDIOC_ALG_AES256_CBC:
			vndmkiv(iv, vnd->sc_enc_iv, VNDIOC_BSZ_AES, off);
			(*rijndael_cbc_encrypt_fast)(vnd->sc_enc_aes,
			    NULL, iv, iv, 1);
			(*aes_op)(vnd->sc_enc_aes, iv, addr, addr,
			    n / VNDIOC_BSZ_AES);
			break;
#endif
#endif
		}

		addr += n;
		off++;
	}
}

#ifdef notyet
void
vndmkiv(u_char *dst, u_char *src, size_t numbytes, daddr_t off)
{
	size_t n;
	uint64_t xoff[VNDIOC_IVSZ / sizeof (uint64_t)];

	/* xoff has two elements, since VNDIOC_IVSZ == 16 */
	xoff[0] = (uint64_t)off;
	xoff[1] = ~((uint64_t)off);

	n = MIN(numbytes, VNDIOC_IVSZ);
	bcopy(xoff, dst, n);

	n = MAX(numbytes, VNDIOC_IVSZ);
	while (n--)
		dst[n % numbytes] ^= src[n % VNDIOC_IVSZ];
}
#endif

void
vndattach(int num)
{
	char *mem;
	u_long size;

	if (num <= 0)
		return;
	size = num * sizeof(struct vnd_softc);
	mem = malloc(size, M_DEVBUF, M_NOWAIT);
	if (mem == NULL) {
		printf("WARNING: no memory for vnode disks\n");
		return;
	}
	bzero(mem, size);
	vnd_softc = (struct vnd_softc *)mem;
	numvnd = num;

	pool_init(&vndbufpl, sizeof(struct vndbuf), 0, 0, 0, "vndbufpl", NULL);
	pool_setlowat(&vndbufpl, 16);
	pool_sethiwat(&vndbufpl, 1024);
}

int
vndopen(dev_t dev, int flags, int mode, struct proc *p)
{
	int unit = vndunit(dev);
	struct vnd_softc *sc;
	int error = 0, part, pmask;

	DNPRINTF(VDB_FOLLOW, "vndopen(%x, %x, %x, %p)\n", dev, flags, mode, p);

	if (unit >= numvnd)
		return (ENXIO);
	sc = &vnd_softc[unit];

	if ((error = vndlock(sc)) != 0)
		return (error);

	if (!vndsimple(dev) && sc->sc_vp != NULL &&
	    (sc->sc_vp->v_type != VREG || sc->sc_enc_len != 0)) {
		error = EINVAL;
		goto bad;
	}

	if ((flags & FWRITE) && (sc->sc_flags & VNF_READONLY)) {
		error = EROFS;
		goto bad;
	}

	if ((sc->sc_flags & VNF_INITED) &&
	    (sc->sc_flags & VNF_HAVELABEL) == 0) {
		sc->sc_flags |= VNF_HAVELABEL;
		vndgetdisklabel(dev, sc, sc->sc_dk.dk_label, 0);
	}

	part = DISKPART(dev);
	pmask = 1 << part;

	/*
	 * If any partition is open, all succeeding openings must be of the
	 * same type or read-only.
	 */
	if (sc->sc_dk.dk_openmask) {
		if (((sc->sc_flags & VNF_SIMPLE) != 0) !=
		    (vndsimple(dev) != 0) && (flags & FWRITE)) {
			error = EBUSY;
			goto bad;
		}
	} else if (vndsimple(dev))
		sc->sc_flags |= VNF_SIMPLE;
	else
		sc->sc_flags &= ~VNF_SIMPLE;

	/* Check that the partition exists. */
	if (part != RAW_PART &&
	    ((sc->sc_flags & VNF_HAVELABEL) == 0 ||
	    part >= sc->sc_dk.dk_label->d_npartitions ||
	    sc->sc_dk.dk_label->d_partitions[part].p_fstype == FS_UNUSED)) {
		error = ENXIO;
		goto bad;
	}

	/* Prevent our unit from being unconfigured while open. */
	switch (mode) {
	case S_IFCHR:
		sc->sc_dk.dk_copenmask |= pmask;
		break;

	case S_IFBLK:
		sc->sc_dk.dk_bopenmask |= pmask;
		break;
	}
	sc->sc_dk.dk_openmask =
	    sc->sc_dk.dk_copenmask | sc->sc_dk.dk_bopenmask;

	error = 0;
bad:
	vndunlock(sc);
	return (error);
}

/*
 * Load the label information on the named device
 */
void
vndgetdisklabel(dev_t dev, struct vnd_softc *sc, struct disklabel *lp,
    int spoofonly)
{
	char *errstring = NULL;

	bzero(lp, sizeof(struct disklabel));
	bzero(sc->sc_dk.dk_cpulabel, sizeof(struct cpu_disklabel));

	lp->d_secsize = 512;
	lp->d_ntracks = 1;
	lp->d_nsectors = 100;
	lp->d_ncylinders = sc->sc_size / 100;
	lp->d_secpercyl = 100;		/* lp->d_ntracks * lp->d_nsectors */

	strncpy(lp->d_typename, "vnd device", sizeof(lp->d_typename));
	lp->d_type = DTYPE_VND;
	strncpy(lp->d_packname, "fictitious", sizeof(lp->d_packname));
	lp->d_secperunit = sc->sc_size;
	lp->d_rpm = 3600;
	lp->d_interleave = 1;
	lp->d_flags = 0;

	lp->d_partitions[RAW_PART].p_offset = 0;
	lp->d_partitions[RAW_PART].p_size = lp->d_secperunit;
	lp->d_partitions[RAW_PART].p_fstype = FS_UNUSED;
	lp->d_npartitions = RAW_PART + 1;

	lp->d_magic = DISKMAGIC;
	lp->d_magic2 = DISKMAGIC;
	lp->d_checksum = dkcksum(lp);

	/* Call the generic disklabel extraction routine */
	errstring = readdisklabel(VNDLABELDEV(dev), vndstrategy, lp,
	    sc->sc_dk.dk_cpulabel, spoofonly);
	if (errstring) {
		DNPRINTF(VDB_IO, "%s: %s\n", sc->sc_dev.dv_xname,
		    errstring);
		return;
	}
}

int
vndclose(dev_t dev, int flags, int mode, struct proc *p)
{
	int unit = vndunit(dev);
	struct vnd_softc *sc;
	int error = 0, part;

	DNPRINTF(VDB_FOLLOW, "vndclose(%x, %x, %x, %p)\n", dev, flags, mode, p);

	if (unit >= numvnd)
		return (ENXIO);
	sc = &vnd_softc[unit];

	if ((error = vndlock(sc)) != 0)
		return (error);

	part = DISKPART(dev);

	/* ...that much closer to allowing unconfiguration... */
	switch (mode) {
	case S_IFCHR:
		sc->sc_dk.dk_copenmask &= ~(1 << part);
		break;

	case S_IFBLK:
		sc->sc_dk.dk_bopenmask &= ~(1 << part);
		break;
	}
	sc->sc_dk.dk_openmask =
	    sc->sc_dk.dk_copenmask | sc->sc_dk.dk_bopenmask;

	vndunlock(sc);
	return (0);
}

/*
 * Two methods are used, the traditional buffercache bypassing and the
 * newer, cache-coherent on unmount, one.
 *
 * Former method:
 * Break the request into bsize pieces and submit using VOP_BMAP/VOP_STRATEGY.
 * Note that this driver can only be used for swapping over NFS on the hp
 * since nfs_strategy on the vax cannot handle u-areas and page tables.
 *
 * Latter method:
 * Repack the buffer into an uio structure and use VOP_READ/VOP_WRITE to
 * access the underlying file.
 */
void
vndstrategy(struct buf *bp)
{
	int unit = vndunit(bp->b_dev);
	struct vnd_softc *vnd = &vnd_softc[unit];
	struct vndbuf *nbp;
	int bsize;
	off_t bn;
	caddr_t addr;
	size_t resid;
	int sz, flags, error, s;
	struct iovec aiov;
	struct uio auio;
	struct proc *p = curproc;

	DNPRINTF(VDB_FOLLOW, "vndstrategy(%p): unit %d\n", bp, unit);

	if ((vnd->sc_flags & VNF_INITED) == 0) {
		bp->b_error = ENXIO;
		bp->b_flags |= B_ERROR;
		s = splbio();
		biodone(bp);
		splx(s);
		return;
	}

	bn = bp->b_blkno;
	bp->b_resid = bp->b_bcount;

	if (bn < 0) {
		bp->b_error = EINVAL;
		bp->b_flags |= B_ERROR;
		s = splbio();
		biodone(bp);
		splx(s);
		return;
	}

	/* If we have a label, do a boundary check. */
	if (vnd->sc_flags & VNF_HAVELABEL) {
		if (bounds_check_with_label(bp, vnd->sc_dk.dk_label,
		    vnd->sc_dk.dk_cpulabel, 1) <= 0) {
			s = splbio();
			biodone(bp);
			splx(s);
			return;
		}

		/*
		 * bounds_check_with_label() changes bp->b_resid, reset it
		 */
		bp->b_resid = bp->b_bcount;
	}

	/* Configured as read-only?  */
	if ((vnd->sc_flags & VNF_READONLY) &&
	   ((bp->b_flags & B_READ) == 0)) {
		bp->b_error = EROFS;
		bp->b_flags |= B_ERROR;
		s = splbio();
		biodone(bp);
		splx(s);
		return;
	}

	sz = howmany(bp->b_bcount, DEV_BSIZE);

	/* No bypassing of buffer cache?  */
	if (vndsimple(bp->b_dev)) {
		/* Loop until all queued requests are handled.  */
		for (;;) {
			int part = DISKPART(bp->b_dev);
			int off = vnd->sc_dk.dk_label->d_partitions[part].p_offset;

			aiov.iov_base = bp->b_data;
			auio.uio_resid = aiov.iov_len = bp->b_bcount;
			auio.uio_iov = &aiov;
			auio.uio_iovcnt = 1;
			auio.uio_offset = dbtob((off_t)(bp->b_blkno + off));
			auio.uio_segflg = UIO_SYSSPACE;
			auio.uio_procp = p;

			vn_lock(vnd->sc_vp, LK_EXCLUSIVE | LK_RETRY, p);
			if (bp->b_flags & B_READ) {
				auio.uio_rw = UIO_READ;
				bp->b_error = VOP_READ(vnd->sc_vp, &auio, 0,
				    vnd->sc_cred);
				if (vnd->sc_enc_len)
					vndencrypt(vnd,	bp->b_data,
					   bp->b_bcount, bp->b_blkno, 0);
			} else {
				if (vnd->sc_enc_len)
					vndencrypt(vnd, bp->b_data,
					   bp->b_bcount, bp->b_blkno, 1);
				auio.uio_rw = UIO_WRITE;
				/*
				 * Upper layer has already checked I/O for
				 * limits, so there is no need to do it again.
				 */
				bp->b_error = VOP_WRITE(vnd->sc_vp, &auio,
				    IO_NOLIMIT, vnd->sc_cred);
				/* Data in buffer cache needs to be in clear */
				if (vnd->sc_enc_len)
					vndencrypt(vnd, bp->b_data,
					   bp->b_bcount, bp->b_blkno, 0);
			}
			VOP_UNLOCK(vnd->sc_vp, 0, p);
			if (bp->b_error)
				bp->b_flags |= B_ERROR;
			bp->b_resid = auio.uio_resid;
			s = splbio();
			biodone(bp);
			splx(s);

			/* If nothing more is queued, we are done.  */
			if (!vnd->sc_tab.b_active)
				return;

			/*
			 * Dequeue now since lower level strategy
			 * routine might queue using same links.
			 */
			s = splbio();
			bp = vnd->sc_tab.b_actf;
			vnd->sc_tab.b_actf = bp->b_actf;
			vnd->sc_tab.b_active--;
			splx(s);
		}
	}

	if (vnd->sc_vp->v_type != VREG || vnd->sc_enc_len != 0) {
		bp->b_error = EINVAL;
		bp->b_flags |= B_ERROR;
		s = splbio();
		biodone(bp);
		splx(s);
		return;
	}

	/* The old-style buffercache bypassing method.  */
	bn += vnd->sc_dk.dk_label->d_partitions[DISKPART(bp->b_dev)].p_offset;
	bn = dbtob(bn);
	bsize = vnd->sc_vp->v_mount->mnt_stat.f_iosize;
	addr = bp->b_data;
	flags = bp->b_flags | B_CALL;
	for (resid = bp->b_resid; resid; resid -= sz) {
		struct vnode *vp;
		daddr_t nbn;
		int off, nra;

		nra = 0;
		vn_lock(vnd->sc_vp, LK_RETRY | LK_EXCLUSIVE, p);
		error = VOP_BMAP(vnd->sc_vp, bn / bsize, &vp, &nbn, &nra);
		VOP_UNLOCK(vnd->sc_vp, 0, p);
		if (error == 0 && (long)nbn == -1)
			error = EIO;
#ifdef VNDDEBUG
		if (!dovndcluster)
			nra = 0;
#endif

		if ((off = bn % bsize) != 0)
			sz = bsize - off;
		else
			sz = (1 + nra) * bsize;
		if (resid < sz)
			sz = resid;

		DNPRINTF(VDB_IO, "vndstrategy: vp %p/%p bn %llx/%x sz %x\n",
		    vnd->sc_vp, vp, bn, nbn, sz);

		s = splbio();
		nbp = getvndbuf();
		splx(s);
		nbp->vb_buf.b_flags = flags;
		nbp->vb_buf.b_bcount = sz;
		nbp->vb_buf.b_bufsize = bp->b_bufsize;
		nbp->vb_buf.b_error = 0;
		if (vp->v_type == VBLK || vp->v_type == VCHR)
			nbp->vb_buf.b_dev = vp->v_rdev;
		else
			nbp->vb_buf.b_dev = NODEV;
		nbp->vb_buf.b_data = addr;
		nbp->vb_buf.b_blkno = nbn + btodb(off);
		nbp->vb_buf.b_proc = bp->b_proc;
		nbp->vb_buf.b_iodone = vndiodone;
		nbp->vb_buf.b_vp = vp;
		nbp->vb_buf.b_dirtyoff = bp->b_dirtyoff;
		nbp->vb_buf.b_dirtyend = bp->b_dirtyend;
		nbp->vb_buf.b_validoff = bp->b_validoff;
		nbp->vb_buf.b_validend = bp->b_validend;
		LIST_INIT(&nbp->vb_buf.b_dep);

		/* save a reference to the old buffer */
		nbp->vb_obp = bp;

		/*
		 * If there was an error or a hole in the file...punt.
		 * Note that we deal with this after the nbp allocation.
		 * This ensures that we properly clean up any operations
		 * that we have already fired off.
		 *
		 * XXX we could deal with holes here but it would be
		 * a hassle (in the write case).
		 * We must still however charge for the write even if there
		 * was an error.
		 */
		if (error) {
			nbp->vb_buf.b_error = error;
			nbp->vb_buf.b_flags |= B_ERROR;
			bp->b_resid -= (resid - sz);
			s = splbio();
			/* charge for the write */
			if ((nbp->vb_buf.b_flags & B_READ) == 0)
				nbp->vb_buf.b_vp->v_numoutput++;
			biodone(&nbp->vb_buf);
			splx(s);
			return;
		}
		/*
		 * Just sort by block number
		 */
		nbp->vb_buf.b_cylinder = nbp->vb_buf.b_blkno;
		s = splbio();
		disksort(&vnd->sc_tab, &nbp->vb_buf);
		vnd->sc_tab.b_active++;
		vndstart(vnd);
		splx(s);
		bn += sz;
		addr += sz;
	}
}

/*
 * Feed requests sequentially.
 * We do it this way to keep from flooding NFS servers if we are connected
 * to an NFS file.  This places the burden on the client rather than the
 * server.
 */
void
vndstart(struct vnd_softc *vnd)
{
	struct buf *bp;

	/*
	 * Dequeue now since lower level strategy routine might
	 * queue using same links
	 */
	bp = vnd->sc_tab.b_actf;
	vnd->sc_tab.b_actf = bp->b_actf;

	DNPRINTF(VDB_IO,
	    "vndstart(%ld): bp %p vp %p blkno %x addr %p cnt %lx\n",
	    vnd-vnd_softc, bp, bp->b_vp, bp->b_blkno, bp->b_data,
	    bp->b_bcount);

	/* Instrumentation. */
	disk_busy(&vnd->sc_dk);

	if ((bp->b_flags & B_READ) == 0)
		bp->b_vp->v_numoutput++;
	VOP_STRATEGY(bp);
}

void
vndiodone(struct buf *bp)
{
	struct vndbuf *vbp = (struct vndbuf *) bp;
	struct buf *pbp = vbp->vb_obp;
	struct vnd_softc *vnd = &vnd_softc[vndunit(pbp->b_dev)];

	splassert(IPL_BIO);

	DNPRINTF(VDB_IO,
	    "vndiodone(%ld): vbp %p vp %p blkno %x addr %p cnt %lx\n",
	    vnd-vnd_softc, vbp, vbp->vb_buf.b_vp, vbp->vb_buf.b_blkno,
	    vbp->vb_buf.b_data, vbp->vb_buf.b_bcount);

	if (vbp->vb_buf.b_error) {
		DNPRINTF(VDB_IO, "vndiodone: vbp %p error %d\n", vbp,
		    vbp->vb_buf.b_error);

		pbp->b_flags |= B_ERROR;
		/* XXX does this matter here? */
		(&vbp->vb_buf)->b_flags |= B_RAW;
		pbp->b_error = biowait(&vbp->vb_buf);
	}
	pbp->b_resid -= vbp->vb_buf.b_bcount;
	putvndbuf(vbp);
	if (vnd->sc_tab.b_active) {
		disk_unbusy(&vnd->sc_dk, (pbp->b_bcount - pbp->b_resid),
		    (pbp->b_flags & B_READ));
		if (!vnd->sc_tab.b_actf)
			vnd->sc_tab.b_active--;
	}
	if (pbp->b_resid == 0) {
		DNPRINTF(VDB_IO, "vndiodone: pbp %p iodone\n", pbp);
		biodone(pbp);
	}

}

/* ARGSUSED */
int
vndread(dev_t dev, struct uio *uio, int flags)
{
	int unit = vndunit(dev);
	struct vnd_softc *sc;

	DNPRINTF(VDB_FOLLOW, "vndread(%x, %p)\n", dev, uio);

	if (unit >= numvnd)
		return (ENXIO);
	sc = &vnd_softc[unit];

	if ((sc->sc_flags & VNF_INITED) == 0)
		return (ENXIO);

	return (physio(vndstrategy, NULL, dev, B_READ, minphys, uio));
}

/* ARGSUSED */
int
vndwrite(dev_t dev, struct uio *uio, int flags)
{
	int unit = vndunit(dev);
	struct vnd_softc *sc;

	DNPRINTF(VDB_FOLLOW, "vndwrite(%x, %p)\n", dev, uio);

	if (unit >= numvnd)
		return (ENXIO);
	sc = &vnd_softc[unit];

	if ((sc->sc_flags & VNF_INITED) == 0)
		return (ENXIO);
	if (sc->sc_flags & VNF_READONLY)
		return (EROFS);

	return (physio(vndstrategy, NULL, dev, B_WRITE, minphys, uio));
}

size_t
vndbdevsize(struct vnode *vp, struct proc *p)
{
	struct partinfo pi;
	struct bdevsw *bsw;
	long sscale;
	dev_t dev;

	dev = vp->v_rdev;
	bsw = bdevsw_lookup(dev);
	if (bsw->d_ioctl == NULL)
		return (0);
	if (bsw->d_ioctl(dev, DIOCGPART, (caddr_t)&pi, FREAD, p))
		return (0);
	sscale = pi.disklab->d_secsize / DEV_BSIZE;
	DNPRINTF(VDB_INIT, "vndbdevsize: size %li secsize %li sscale %li\n",
	    (long)pi.part->p_size,(long)pi.disklab->d_secsize,sscale);
	return (pi.part->p_size * sscale);
}

/* ARGSUSED */
int
vndioctl(dev_t dev, u_long cmd, caddr_t addr, int flag, struct proc *p)
{
	int unit = vndunit(dev);
	struct vnd_softc *vnd;
	struct vnd_ioctl *vio;
	struct vnd_user *vnu;
	struct vattr vattr;
	struct nameidata nd;
	int error, part, pmask, s, ksz;

	DNPRINTF(VDB_FOLLOW, "vndioctl(%x, %lx, %p, %x, %p): unit %d\n",
	    dev, cmd, addr, flag, p, unit);

	error = suser(p, 0);
	if (error)
		return (error);
	if (unit >= numvnd)
		return (ENXIO);

	vnd = &vnd_softc[unit];
	vio = (struct vnd_ioctl *)addr;
	switch (cmd) {

	case VNDIOCSET:
		if (vnd->sc_flags & VNF_INITED)
			return (EBUSY);
		if (!(vnd->sc_flags & VNF_SIMPLE) && vio->vnd_keylen)
			return (EINVAL);

		if ((error = vndlock(vnd)) != 0)
			return (error);

		if ((error = copyinstr(vio->vnd_file, vnd->sc_file,
		    sizeof(vnd->sc_file), NULL))) {
			vndunlock(vnd);
			return (error);
		}

		bzero(vnd->sc_dev.dv_xname, sizeof(vnd->sc_dev.dv_xname));
		if (snprintf(vnd->sc_dev.dv_xname, sizeof(vnd->sc_dev.dv_xname),
		    "vnd%d", unit) >= sizeof(vnd->sc_dev.dv_xname)) {
			printf("VNDIOCSET: device name too long\n");
			vndunlock(vnd);
			return(ENXIO);
		}

		/*
		 * Open for read and write first. This lets vn_open() weed out
		 * directories, sockets, etc. so we don't have to worry about
		 * them.
		 */
		NDINIT(&nd, LOOKUP, FOLLOW, UIO_USERSPACE, vio->vnd_file, p);
		if (vio->vnd_options & VNDIOC_OPT_RDONLY)
			goto VNDIOCSET_readonly;
		vnd->sc_flags &= ~VNF_READONLY;
		error = vn_open(&nd, FREAD|FWRITE, 0);
		if (error == EROFS) {
 VNDIOCSET_readonly:
			vnd->sc_flags |= VNF_READONLY;
			error = vn_open(&nd, FREAD, 0);
		}
		if (error) {
			vndunlock(vnd);
			return (error);
		}

		if (nd.ni_vp->v_type != VREG && !vndsimple(dev)) {
			VOP_UNLOCK(nd.ni_vp, 0, p);
			vn_close(nd.ni_vp, VNDRW(vnd), p->p_ucred, p);
			vndunlock(vnd);
			return (EINVAL);
		}

		if (nd.ni_vp->v_type == VBLK)
			vnd->sc_size = vndbdevsize(nd.ni_vp, p);
		else {
			error = VOP_GETATTR(nd.ni_vp, &vattr, p->p_ucred, p);
			if (error) {
				VOP_UNLOCK(nd.ni_vp, 0, p);
				vn_close(nd.ni_vp, VNDRW(vnd), p->p_ucred, p);
				vndunlock(vnd);
				return (error);
			}
			vnd->sc_size = btodb(vattr.va_size); /* note truncation */
		}
		VOP_UNLOCK(nd.ni_vp, 0, p);
		vnd->sc_vp = nd.ni_vp;
		if ((error = vndsetcred(vnd, p->p_ucred)) != 0) {
			(void) vn_close(nd.ni_vp, VNDRW(vnd), p->p_ucred, p);
			vndunlock(vnd);
			return (error);
		}

		vnd->sc_enc_alg = vio->vnd_options >> VNDIOC_ALGSHIFT;
		if (vio->vnd_keylen <= 0 || !vio->vnd_key)
			ksz = 0;
		else
			ksz = MIN(vio->vnd_keylen, VNDIOC_MAXKSZ);
		vnd->sc_enc_len = 0;

		if (vnd->sc_enc_alg && !ksz) {
 VNDIOCSET_encinval:
			error = EINVAL;
 VNDIOCSET_encerror:
			vn_close(nd.ni_vp, VNDRW(vnd), p->p_ucred, p);
			vndunlock(vnd);
			return (error);
		}

		switch (vnd->sc_enc_alg) {
		case VNDIOC_ALG_BLF:
			ksz = MIN(ksz, VNDIOC_KSZ_BLF);
			break;
#ifdef notyet
		case VNDIOC_ALG_BF_CBC:
			ksz = MIN(ksz, VNDIOC_KSZ_BF_CBC);
			if (ksz <= VNDIOC_IVSZ)
				goto VNDIOCSET_encinval;
			break;
#ifdef CRYPTO
		case VNDIOC_ALG_AES128_CBC:
			if (ksz != VNDIOC_KSZ_AES128_CBC)
				goto VNDIOCSET_encinval;
			break;
		case VNDIOC_ALG_AES192_CBC:
			if (ksz != VNDIOC_KSZ_AES192_CBC)
				goto VNDIOCSET_encinval;
			break;
		case VNDIOC_ALG_AES256_CBC:
			if (ksz != VNDIOC_KSZ_AES256_CBC)
				goto VNDIOCSET_encinval;
			break;
#endif
#endif
		default:
			goto VNDIOCSET_encinval;
		}

		if (ksz) {
			char key[VNDIOC_MAXKSZ];

			if ((error = copyin(vio->vnd_key, key, ksz)) != 0)
				goto VNDIOCSET_encerror;

			switch (vnd->sc_enc_alg) {
			case VNDIOC_ALG_BLF:
#ifdef notyet
			case VNDIOC_ALG_BF_CBC:
#endif
				vnd->sc_enc_len = sizeof (*vnd->sc_enc_blf);
				break;
#ifdef notyet
#ifdef CRYPTO
			case VNDIOC_ALG_AES128_CBC:
			case VNDIOC_ALG_AES192_CBC:
			case VNDIOC_ALG_AES256_CBC:
				vnd->sc_enc_len = sizeof (*vnd->sc_enc_aes);
				/* not implemented yet, abort */
				error = ENOCOFFEE;
				goto VNDIOCSET_encerror;
				/* remove these two lines once implemented */
				break;
#endif
#endif
			}
			vnd->sc_enc_ptr = malloc(vnd->sc_enc_len, M_DEVBUF,
			    M_WAITOK);

			switch (vnd->sc_enc_alg) {
			case VNDIOC_ALG_BLF:
#ifdef notyet
				bzero(vnd->sc_enc_iv, VNDIOC_IVSZ);
#endif
				blf_key(vnd->sc_enc_blf, key, ksz);
				break;
#ifdef notyet
			case VNDIOC_ALG_BF_CBC:
				bcopy(key, vnd->sc_enc_iv, VNDIOC_IVSZ);
				blf_key(vnd->sc_enc_blf, key + VNDIOC_IVSZ,
				    ksz - VNDIOC_IVSZ);
				break;
#ifdef CRYPTO
			case VNDIOC_ALG_AES128_CBC:
			case VNDIOC_ALG_AES192_CBC:
			case VNDIOC_ALG_AES256_CBC:
				/* not implemented */
				break;
#endif
#endif
			}

			bzero(key, sizeof (key));
		}

		vio->vnd_size = dbtob((off_t)vnd->sc_size);
		vnd->sc_flags |= VNF_INITED;

		DNPRINTF(VDB_INIT, "vndioctl: SET vp %p size %llx\n",
		    vnd->sc_vp, (unsigned long long)vnd->sc_size);

		/* Attach the disk. */
		vnd->sc_dk.dk_driver = &vnddkdriver;
		vnd->sc_dk.dk_name = vnd->sc_dev.dv_xname;
		disk_attach(&vnd->sc_dk);

		vndunlock(vnd);

		break;

	case VNDIOCCLR:
		if ((vnd->sc_flags & VNF_INITED) == 0)
			return (ENXIO);

		if ((error = vndlock(vnd)) != 0)
			return (error);

		/*
		 * Don't unconfigure if any other partitions are open
		 * or if both the character and block flavors of this
		 * partition are open.
		 */
		part = DISKPART(dev);
		pmask = (1 << part);
		if ((vnd->sc_dk.dk_openmask & ~pmask) ||
		    ((vnd->sc_dk.dk_bopenmask & pmask) &&
		    (vnd->sc_dk.dk_copenmask & pmask))) {
			vndunlock(vnd);
			return (EBUSY);
		}

		vndclear(vnd);
		DNPRINTF(VDB_INIT, "vndioctl: CLRed\n");

		/* Free crypto key */
		if (vnd->sc_enc_len) {
			bzero(vnd->sc_enc_ptr, vnd->sc_enc_len);
			free(vnd->sc_enc_ptr, M_DEVBUF);
		}

		/* Detach the disk. */
		disk_detach(&vnd->sc_dk);

		/* This must be atomic. */
		s = splhigh();
		vndunlock(vnd);
		bzero(vnd, sizeof(struct vnd_softc));
		splx(s);
		break;

	case VNDIOCGET:
		vnu = (struct vnd_user *)addr;

		if (vnu->vnu_unit == -1)
			vnu->vnu_unit = unit;
		if (vnu->vnu_unit >= numvnd)
			return (ENXIO);
		if (vnu->vnu_unit < 0)
			return (EINVAL);

		vnd = &vnd_softc[vnu->vnu_unit];

		if (vnd->sc_flags & VNF_INITED) {
			error = VOP_GETATTR(vnd->sc_vp, &vattr, p->p_ucred, p);
			if (error)
				return (error);

			strlcpy(vnu->vnu_file, vnd->sc_file,
			    sizeof(vnu->vnu_file));
			vnu->vnu_dev = vattr.va_fsid;
			vnu->vnu_ino = vattr.va_fileid;
		} else {
			vnu->vnu_dev = 0;
			vnu->vnu_ino = 0;
		}

		break;

	case DIOCGDINFO:
		if ((vnd->sc_flags & VNF_HAVELABEL) == 0)
			return (ENOTTY);
		*(struct disklabel *)addr = *(vnd->sc_dk.dk_label);
		return (0);

	case DIOCGPART:
		if ((vnd->sc_flags & VNF_HAVELABEL) == 0)
			return (ENOTTY);
		((struct partinfo *)addr)->disklab = vnd->sc_dk.dk_label;
		((struct partinfo *)addr)->part =
		    &vnd->sc_dk.dk_label->d_partitions[DISKPART(dev)];
		return (0);

	case DIOCWDINFO:
	case DIOCSDINFO:
		if ((vnd->sc_flags & VNF_HAVELABEL) == 0)
			return (ENOTTY);
		if (vnd->sc_flags & VNF_READONLY)
			return (EROFS);
		if ((flag & FWRITE) == 0)
			return (EBADF);

		if ((error = vndlock(vnd)) != 0)
			return (error);
		vnd->sc_flags |= VNF_LABELLING;

		error = setdisklabel(vnd->sc_dk.dk_label,
		    (struct disklabel *)addr, /*vnd->sc_dk.dk_openmask : */0,
		    vnd->sc_dk.dk_cpulabel);
		if (error == 0) {
			if (cmd == DIOCWDINFO)
				error = writedisklabel(VNDLABELDEV(dev),
				    vndstrategy, vnd->sc_dk.dk_label,
				    vnd->sc_dk.dk_cpulabel);
		}

		vnd->sc_flags &= ~VNF_LABELLING;
		vndunlock(vnd);
		return (error);

	case DIOCWLABEL:
		if ((flag & FWRITE) == 0)
			return (EBADF);
		if (vnd->sc_flags & VNF_READONLY)
			return (EROFS);
		if (*(int *)addr)
			vnd->sc_flags |= VNF_WLABEL;
		else
			vnd->sc_flags &= ~VNF_WLABEL;
		return (0);

	default:
		return (ENOTTY);
	}

	return (0);
}

/*
 * Duplicate the current processes' credentials.  Since we are called only
 * as the result of a SET ioctl and only root can do that, any future access
 * to this "disk" is essentially as root.  Note that credentials may change
 * if some other uid can write directly to the mapped file (NFS).
 */
int
vndsetcred(struct vnd_softc *vnd, struct ucred *cred)
{
	struct uio auio;
	struct iovec aiov;
	char *tmpbuf;
	int error;
	struct proc *p = curproc;

	vnd->sc_cred = crdup(cred);
	tmpbuf = malloc(DEV_BSIZE, M_TEMP, M_WAITOK);

	/* XXX: Horrible kludge to establish credentials for NFS */
	aiov.iov_base = tmpbuf;
	aiov.iov_len = MIN(DEV_BSIZE, dbtob((off_t)vnd->sc_size));
	auio.uio_iov = &aiov;
	auio.uio_iovcnt = 1;
	auio.uio_offset = 0;
	auio.uio_rw = UIO_READ;
	auio.uio_segflg = UIO_SYSSPACE;
	auio.uio_resid = aiov.iov_len;
	vn_lock(vnd->sc_vp, LK_RETRY | LK_EXCLUSIVE, p);
	error = VOP_READ(vnd->sc_vp, &auio, 0, vnd->sc_cred);
	VOP_UNLOCK(vnd->sc_vp, 0, p);

	free(tmpbuf, M_TEMP);
	return (error);
}

void
vndshutdown(void)
{
	struct vnd_softc *vnd;

	for (vnd = &vnd_softc[0]; vnd < &vnd_softc[numvnd]; vnd++)
		if (vnd->sc_flags & VNF_INITED)
			vndclear(vnd);
}

void
vndclear(struct vnd_softc *vnd)
{
	struct vnode *vp = vnd->sc_vp;
	struct proc *p = curproc;		/* XXX */

	DNPRINTF(VDB_FOLLOW, "vndclear(%p): vp %p\n", vnd, vp);

	vnd->sc_flags &= ~VNF_INITED;
	if (vp == NULL)
		panic("vndioctl: null vp");
	(void) vn_close(vp, VNDRW(vnd), vnd->sc_cred, p);
	crfree(vnd->sc_cred);
	vnd->sc_vp = NULL;
	vnd->sc_cred = NULL;
	vnd->sc_size = 0;
}

int
vndsize(dev_t dev)
{
	int unit = vndunit(dev);
	struct vnd_softc *vnd = &vnd_softc[unit];

	if (unit >= numvnd || (vnd->sc_flags & VNF_INITED) == 0)
		return (-1);
	return (vnd->sc_size);
}

int
vnddump(dev_t dev, daddr_t blkno, caddr_t va, size_t size)
{

	/* Not implemented. */
	return (ENXIO);
}

/*
 * Wait interruptibly for an exclusive lock.
 *
 * XXX
 * Several drivers do this; it should be abstracted and made MP-safe.
 */
int
vndlock(struct vnd_softc *sc)
{
	int error;

	while ((sc->sc_flags & VNF_LOCKED) != 0) {
		sc->sc_flags |= VNF_WANTED;
		if ((error = tsleep(sc, PRIBIO | PCATCH, "vndlck", 0)) != 0)
			return (error);
	}
	sc->sc_flags |= VNF_LOCKED;
	return (0);
}

/*
 * Unlock and wake up any waiters.
 */
void
vndunlock(struct vnd_softc *sc)
{

	sc->sc_flags &= ~VNF_LOCKED;
	if ((sc->sc_flags & VNF_WANTED) != 0) {
		sc->sc_flags &= ~VNF_WANTED;
		wakeup(sc);
	}
}
@


1.24
log
@obsd r1.88:

Correct cases of mishandling of pending reads and writes to prevent
them going negative - this consists of identifying a number of cases of
IO not going through the buffer cache and marking those buffers with
B_RAW - as well as fixing nfs_bio to show pending writes and reads through
the buffer cache via NFS

still has a problem with mishandling the counters I believe in the
async/sync fallback case where counters stay positive which will be
addressed seperately.
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.23 2008/07/09 23:20:49 tg Exp $ */
d6 2
a7 1
 * Copyright (c) 2008 Thorsten Glaser
d197 2
a198 2
    __attribute__((bounded (string, 1, 3)))
    __attribute__((bounded (minbytes, 2, VNDIOC_IVSZ)));
@


1.23
log
@comment out new crypto code for not, document why it is unfinished
reason: prioritising different things :'(
@
text
@d1 2
a2 2
/**	$MirOS: src/sys/dev/vnd.c,v 1.22 2008/06/14 22:28:08 tg Exp $ */
/*	$OpenBSD: vnd.c,v 1.85 2008/03/24 01:16:58 krw Exp $	*/
d757 2
@


1.22
log
@if !CRYPTO (e.g. i386 floppy), disable rĳndæl encryption for vnd(4)
unbreaks build
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.21 2008/06/13 18:24:10 tg Exp $ */
d133 1
d135 1
d194 1
d198 1
d210 1
d219 1
d227 1
d232 1
d239 1
d251 1
d259 1
d277 1
d949 1
d969 1
d982 1
d984 1
d987 1
d999 1
d1006 1
d1008 1
d1011 1
d1024 1
@


1.21
log
@if key argument passed from userspace is NULL, also don't use encryption
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.20 2008/06/13 18:22:33 tg Exp $ */
d88 1
d90 1
d138 1
d140 1
d206 1
d213 1
d231 1
d241 1
d942 1
d955 1
d971 1
d981 1
d996 1
d1002 1
@


1.20
log
@remove debugging crap again
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.19 2008/06/13 18:21:32 tg Exp $ */
d910 1
a910 1
		if (vio->vnd_keylen <= 0)
@


1.19
log
@fix bugs in the debugging code AND the configuration bug (MIN vs MAX mixup)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.17 2008/06/12 23:14:48 tg Exp $ */
a93 2
#define VNDDEBUG

d96 1
a96 1
int vnddebug = 0x0f;
a99 1
#define	VDB_SPECIAL	0x08
a839 7

DNPRINTF(VDB_SPECIAL, "VNDIOCSET: entering, vio->vnd_file=%p, "
    "vio->vnd_size=%llu, vio->vnd_key=%p, vio->vnd_keylen=%d, "
    "vio->vnd_options=%08X, vnd->sc_flags=%08X\n", vio->vnd_file,
    vio->vnd_size, vio->vnd_key, vio->vnd_keylen,
    vio->vnd_options, vnd->sc_flags);

a846 1
DNPRINTF(VDB_SPECIAL, "VNDIOCSET: vndlock succeeded\n");
a860 1
DNPRINTF(VDB_SPECIAL, "VNDIOCSET: '%s' <- '%s'\n", vnd->sc_dev.dv_xname, vnd->sc_file);
a871 1
DNPRINTF(VDB_SPECIAL, "VNDIOCSET: vn_open #1 -> %d\n", error);
a875 1
DNPRINTF(VDB_SPECIAL, "VNDIOCSET: vn_open #2 -> %d\n", error);
a907 1
DNPRINTF(VDB_SPECIAL, "VNDIOCSET: setcred succeeded\n");
a949 1
DNPRINTF(VDB_SPECIAL, "VNDIOCSET: alg %02X, ksz %d\n", vnd->sc_enc_alg, ksz);
a1005 1
DNPRINTF(VDB_SPECIAL, "VNDIOCSET: done\n");
@


1.18
log
@add t3h evil debugging
@
text
@d625 1
a625 1
		DNPRINTF(VDB_IO, "vndstrategy: vp %p/%p bn %x/%x sz %x\n",
d709 1
a709 1
	    "vndstart(%d): bp %p vp %p blkno %x addr %p cnt %lx\n",
d731 1
a731 1
	    "vndiodone(%d): vbp %p vp %p blkno %x addr %p cnt %lx\n",
d928 1
a928 1
			ksz = MAX(vio->vnd_keylen, VNDIOC_MAXKSZ);
d942 1
a942 1
			ksz = MAX(ksz, VNDIOC_KSZ_BLF);
d945 1
a945 1
			ksz = MAX(ksz, VNDIOC_KSZ_BF_CBC);
@


1.17
log
@add AES support, although it still returns ENOCOFFEE, since the
key setup routines are missing
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.15 2008/06/12 21:19:25 tg Exp $ */
d94 2
d98 1
a98 1
int vnddebug = 0x00;
d102 1
d843 7
d857 1
d872 1
d884 1
d889 1
d922 1
d965 1
d1022 1
@


1.16
log
@in encryption error case, call to vn_close() was missing
@
text
@d88 1
d136 1
d156 1
d202 6
d225 9
d934 12
d953 2
a954 6
			if ((error = copyin(vio->vnd_key, key, ksz)) != 0) {
				(void) vn_close(nd.ni_vp, VNDRW(vnd),
				    p->p_ucred, p);
				vndunlock(vnd);
				return (error);
			}
d961 9
d984 5
@


1.15
log
@BLF (old) and BF_CBC (new) support, done, untested
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.14 2008/06/12 20:19:45 tg Exp $ */
d900 3
d904 1
a904 1
			return (EINVAL);
@


1.14
log
@use constants, not magic numbers ☺
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.13 2008/06/12 18:53:09 tg Exp $ */
d136 1
d154 1
d185 3
d197 2
a198 2
	int i, bsize;
	u_char iv[8];
d200 17
a216 9
	bsize = dbtob(1);
	for (i = 0; i < size/bsize; i++) {
		bzero(iv, sizeof(iv));
		bcopy((u_char *)&off, iv, sizeof(off));
		blf_ecb_encrypt(vnd->sc_enc_blf, iv, sizeof(iv));
		if (encrypt)
			blf_cbc_encrypt(vnd->sc_enc_blf, iv, addr, bsize);
		else
			blf_cbc_decrypt(vnd->sc_enc_blf, iv, addr, bsize);
d218 1
a218 1
		addr += bsize;
d224 18
d806 1
a806 1
	int error, part, pmask, s;
d891 27
a917 1
		if (vio->vnd_keylen > 0) {
d920 1
a920 5
			if (vio->vnd_keylen > sizeof(key))
				vio->vnd_keylen = sizeof(key);

			if ((error = copyin(vio->vnd_key, key,
			    vio->vnd_keylen)) != 0) {
d927 6
a932 3
			// XXX BLF
			bzero(vnd->sc_enc_iv, VNDIOC_IVSZ);
			vnd->sc_enc_len = sizeof (*vnd->sc_enc_blf);
d935 15
a949 4
			blf_key(vnd->sc_enc_blf, key, vio->vnd_keylen);
			bzero(key, vio->vnd_keylen);
		} else
			vnd->sc_enc_len = 0;
@


1.13
log
@first stab at new encryption schemes/IOCTLs

- changes internal structures
- new userspace-visible definitions in vndioctl.h
- old crypto alg: BLF (on-disc compatible)
- new crypto alg: BF_CBC (same as BLF plus IV)

- algorithm passed is NOT YET checked, routines are same as for BLF
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.12 2008/06/12 17:59:04 tg Exp $ */
d130 1
a130 1
	u_char iv[16];				/* encryption IV (!BLF) */
d875 1
a875 1
			bzero(vnd->sc_enc_iv, 16);
@


1.12
log
@merge old diff, allows manual opening of vnds R/O again,
and protects disklabels, etc. from being overwritten
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.11 2008/06/12 17:35:01 tg Exp $ */
d129 9
d148 5
a152 1
	blf_ctx		*sc_keyctx;		/* key context */
d199 1
a199 1
		blf_ecb_encrypt(vnd->sc_keyctx, iv, sizeof(iv));
d201 1
a201 1
			blf_cbc_encrypt(vnd->sc_keyctx, iv, addr, bsize);
d203 1
a203 1
			blf_cbc_decrypt(vnd->sc_keyctx, iv, addr, bsize);
d250 1
a250 1
	    (sc->sc_vp->v_type != VREG || sc->sc_keyctx != NULL)) {
d492 1
a492 1
				if (vnd->sc_keyctx)
d496 1
a496 1
				if (vnd->sc_keyctx)
d507 1
a507 1
				if (vnd->sc_keyctx)
d535 1
a535 1
	if (vnd->sc_vp->v_type != VREG || vnd->sc_keyctx != NULL) {
d861 1
a861 1
			char key[72];
d874 4
a877 1
			vnd->sc_keyctx = malloc(sizeof(*vnd->sc_keyctx), M_DEVBUF,
d879 1
a879 1
			blf_key(vnd->sc_keyctx, key, vio->vnd_keylen);
d882 1
a882 1
			vnd->sc_keyctx = NULL;
d924 3
a926 3
		if (vnd->sc_keyctx) {
			bzero(vnd->sc_keyctx, sizeof(*vnd->sc_keyctx));
			free(vnd->sc_keyctx, M_DEVBUF);
@


1.11
log
@whitespace/comment changes from old vnd.c from MAIN branch
@
text
@d1 1
a1 1
/**	$MirOS$ */
d446 11
d726 2
d806 2
d811 1
d969 2
d995 2
@


1.10
log
@remove diff from OpenBSD, so that I can upgrade the base code
@
text
@d1 2
a2 2
/*	$OpenBSD: vnd.c,v 1.74 2007/05/12 12:19:23 krw Exp $	*/
/*	$OpenBSD: vnd.c,v 1.57 2005/12/29 20:02:03 pedro Exp $	*/
d6 1
d63 3
d93 1
a93 1
#ifdef DEBUG
d99 4
a102 3
#endif

#define	b_cylin	b_resid
d151 3
d168 1
a168 1
void	vndgetdisklabel(dev_t, struct vnd_softc *);
d170 1
d176 2
a177 6
vndencrypt(vnd, addr, size, off, encrypt)
	struct vnd_softc *vnd;
	caddr_t addr;
	size_t size;
	daddr_t off;
	int encrypt;
d198 1
a198 2
vndattach(num)
	int num;
d221 1
a221 4
vndopen(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
d227 2
a228 4
#ifdef DEBUG
	if (vnddebug & VDB_FOLLOW)
		printf("vndopen(%x, %x, %x, %p)\n", dev, flags, mode, p);
#endif
d236 11
d250 1
a250 1
		vndgetdisklabel(dev, sc);
d303 2
a304 3
vndgetdisklabel(dev, sc)
	dev_t dev;
	struct vnd_softc *sc;
d306 1
a306 2
	struct disklabel *lp = sc->sc_dk.dk_label;
	char *errstring;
d315 1
a315 5
	lp->d_secpercyl = lp->d_ntracks * lp->d_nsectors;
	if (lp->d_secpercyl == 0) {
		lp->d_secpercyl = 100;
		/* as long as it's not 0 - readdisklabel divides by it (?) */
	}
d318 1
a318 1
	lp->d_type = DTYPE_SCSI;
d326 1
a326 2
	lp->d_partitions[RAW_PART].p_size =
	    lp->d_secperunit * (lp->d_secsize / DEV_BSIZE);
d334 1
a334 3
	/*
	 * Call the generic disklabel extraction routine
	 */
d336 1
a336 1
	    sc->sc_dk.dk_cpulabel, 0);
d338 2
a339 1
		/*printf("%s: %s\n", sc->sc_dev.dv_xname, errstring);*/
d345 1
a345 4
vndclose(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
d351 1
a351 4
#ifdef DEBUG
	if (vnddebug & VDB_FOLLOW)
		printf("vndclose(%x, %x, %x, %p)\n", dev, flags, mode, p);
#endif
d393 1
a393 2
vndstrategy(bp)
	struct buf *bp;
d407 2
a408 4
#ifdef DEBUG
	if (vnddebug & VDB_FOLLOW)
		printf("vndstrategy(%p): unit %d\n", bp, unit);
#endif
d511 9
d529 1
a529 1
		int off, s, nra;
d537 1
a537 1
#ifdef DEBUG
d548 3
a550 5
#ifdef DEBUG
		if (vnddebug & VDB_IO)
			printf("vndstrategy: vp %p/%p bn %x/%x sz %x\n",
			    vnd->sc_vp, vp, bn, nbn, sz);
#endif
d603 1
a603 1
		nbp->vb_buf.b_cylin = nbp->vb_buf.b_blkno;
d621 1
a621 2
vndstart(vnd)
	struct vnd_softc *vnd;
d631 5
a635 6
#ifdef DEBUG
	if (vnddebug & VDB_IO)
		printf("vndstart(%d): bp %p vp %p blkno %x addr %p cnt %lx\n",
		    vnd-vnd_softc, bp, bp->b_vp, bp->b_blkno, bp->b_data,
		    bp->b_bcount);
#endif
d646 1
a646 2
vndiodone(bp)
	struct buf *bp;
d654 4
a657 6
#ifdef DEBUG
	if (vnddebug & VDB_IO)
		printf("vndiodone(%d): vbp %p vp %p blkno %x addr %p cnt %lx\n",
		    vnd-vnd_softc, vbp, vbp->vb_buf.b_vp, vbp->vb_buf.b_blkno,
		    vbp->vb_buf.b_data, vbp->vb_buf.b_bcount);
#endif
d660 3
a662 5
#ifdef DEBUG
		if (vnddebug & VDB_IO)
			printf("vndiodone: vbp %p error %d\n", vbp,
			    vbp->vb_buf.b_error);
#endif
d675 1
a675 4
#ifdef DEBUG
		if (vnddebug & VDB_IO)
			printf("vndiodone: pbp %p iodone\n", pbp);
#endif
d683 1
a683 4
vndread(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
d688 1
a688 4
#ifdef DEBUG
	if (vnddebug & VDB_FOLLOW)
		printf("vndread(%x, %p)\n", dev, uio);
#endif
d702 1
a702 4
vndwrite(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
d707 1
a707 4
#ifdef DEBUG
	if (vnddebug & VDB_FOLLOW)
		printf("vndwrite(%x, %p)\n", dev, uio);
#endif
d719 20
d741 1
a741 6
vndioctl(dev, cmd, addr, flag, p)
	dev_t dev;
	u_long cmd;
	caddr_t addr;
	int flag;
	struct proc *p;
d751 3
a753 5
#ifdef DEBUG
	if (vnddebug & VDB_FOLLOW)
		printf("vndioctl(%x, %lx, %p, %x, %p): unit %d\n",
		    dev, cmd, addr, flag, p, unit);
#endif
d788 3
a790 4
		 * Always open for read and write.
		 * This is probably bogus, but it lets vn_open()
		 * weed out directories, sockets, etc. so we don't
		 * have to worry about them.
d793 7
a799 1
		if ((error = vn_open(&nd, FREAD|FWRITE, 0)) != 0) {
d803 2
a804 2
		error = VOP_GETATTR(nd.ni_vp, &vattr, p->p_ucred, p);
		if (error) {
d806 1
a806 1
			(void) vn_close(nd.ni_vp, FREAD|FWRITE, p->p_ucred, p);
d808 14
a821 1
			return (error);
a824 1
		vnd->sc_size = btodb(vattr.va_size);	/* note truncation */
d826 1
a826 1
			(void) vn_close(nd.ni_vp, FREAD|FWRITE, p->p_ucred, p);
d832 1
a832 1
			char key[128];
d839 1
a839 1
				(void) vn_close(nd.ni_vp, FREAD|FWRITE,
d854 3
a856 5
#ifdef DEBUG
		if (vnddebug & VDB_INIT)
			printf("vndioctl: SET vp %p size %llx\n",
			    vnd->sc_vp, (unsigned long long)vnd->sc_size);
#endif
a861 1
		dk_establish(&vnd->sc_dk, &vnd->sc_dev);
d889 2
a890 4
#ifdef DEBUG
		if (vnddebug & VDB_INIT)
			printf("vndioctl: CLRed\n");
#endif
d897 1
a897 1
		/* Detatch the disk. */
d997 1
a997 3
vndsetcred(vnd, cred)
	struct vnd_softc *vnd;
	struct ucred *cred;
d1026 1
a1026 1
vndshutdown()
d1036 1
a1036 2
vndclear(vnd)
	struct vnd_softc *vnd;
d1041 2
a1042 4
#ifdef DEBUG
	if (vnddebug & VDB_FOLLOW)
		printf("vndclear(%p): vp %p\n", vnd, vp);
#endif
d1044 1
a1044 1
	if (vp == (struct vnode *)0)
d1046 1
a1046 1
	(void) vn_close(vp, FREAD|FWRITE, vnd->sc_cred, p);
d1048 2
a1049 2
	vnd->sc_vp = (struct vnode *)0;
	vnd->sc_cred = (struct ucred *)0;
d1054 1
a1054 2
vndsize(dev)
	dev_t dev;
d1065 1
a1065 5
vnddump(dev, blkno, va, size)
	dev_t dev;
	daddr_t blkno;
	caddr_t va;
	size_t size;
d1079 1
a1079 2
vndlock(sc)
	struct vnd_softc *sc;
d1096 1
a1096 2
vndunlock(sc)
	struct vnd_softc *sc;
@


1.9
log
@vndgetdisklabel() uses vndstrategy() uses VNF_HAVELABEL for bounds checks
so set VNF_HAVELABEL only after vndgetdisklabel() has run
@
text
@a0 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.8 2007/09/18 20:11:25 tg Exp $	*/
a61 3
 *
 * NOTE 4: Trying to mount ffs read-write on a read-only vnd device
 * makes ffs "very unhappy". Don't try this at work, kids!
a145 1
#define	VNF_RDONLY	0x2000
d239 1
a240 1
		sc->sc_flags |= VNF_HAVELABEL;
a246 8
	 * If the unit is configured read-only, guess what...
	 */
	if ((flags & FWRITE) && (sc->sc_flags & VNF_RDONLY)) {
		error = EROFS;
		goto bad;
	}

	/*
a638 13
	/* Read-Only? */
	if (((bp->b_flags & B_READ) == 0) &&
	    (vnd->sc_flags & VNF_RDONLY)) {
		int s;

		bp->b_error = EROFS;
		bp->b_flags |= B_ERROR;
		s = splbio();
		biodone(bp);
		splx(s);
		return;
	}

a734 2
	if (sc->sc_flags & VNF_RDONLY)
		return (EROFS);
d756 1
a756 1
	int error, part, pmask, s, f_rdonly, f_rdopen;
a795 4
		f_rdonly = (vio->vnd_options & VNDIOC_OPT_RDONLY)
		    ? VNF_RDONLY : 0;
		f_rdopen = f_rdonly ? FREAD : FREAD|FWRITE;

d803 1
a803 1
		if ((error = vn_open(&nd, f_rdopen, 0)) != 0) {
d807 6
a812 33
		if (nd.ni_vp->v_type == VBLK) {
			struct partinfo pi;
			struct bdevsw *bsw;
			long sscale;
			dev_t bdv;

			bdv = nd.ni_vp->v_rdev;
			bsw = bdevsw_lookup(bdv);
			if ((bsw->d_ioctl == NULL) || (bsw->d_ioctl(bdv,
			    DIOCGPART, (caddr_t)&pi, FREAD, p)))
				vnd->sc_size = 0;
			else {
				sscale = pi.disklab->d_secsize / DEV_BSIZE;
#ifdef DEBUG
				if (vnddebug & VDB_INIT)
					printf("vndioctl: bdevsize %li"
					    " secsize %li sscale %li\n",
					    (long)pi.part->p_size,
					    (long)pi.disklab->d_secsize,
					    sscale);
#endif
				vnd->sc_size = pi.part->p_size * sscale;
			}
		} else {
			error = VOP_GETATTR(nd.ni_vp, &vattr, p->p_ucred, p);
			if (error) {
				VOP_UNLOCK(nd.ni_vp, 0, p);
				vn_close(nd.ni_vp, f_rdopen, p->p_ucred, p);
				vndunlock(vnd);
				return (error);
			}
			/* note truncation */
			vnd->sc_size = btodb(vattr.va_size);
d816 1
d818 1
a818 1
			(void) vn_close(nd.ni_vp, f_rdopen, p->p_ucred, p);
a845 1
		vnd->sc_flags |= f_rdonly;
a947 2
		if (vnd->sc_flags & VNF_RDONLY)
			return (EROFS);
a971 2
		if (vnd->sc_flags & VNF_RDONLY)
			return (EROFS);
d1048 1
a1048 3
	if (vnd->sc_flags & VNF_RDONLY)
		(void) vn_close(vp, FREAD, vnd->sc_cred, p);
	  else	(void) vn_close(vp, FREAD|FWRITE, vnd->sc_cred, p);
a1052 1
	vnd->sc_flags &= ~VNF_RDONLY;
@


1.8
log
@merge and fix build
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.7 2007/09/18 19:52:45 tg Exp $	*/
d244 1
a245 1
		vndgetdisklabel(dev, sc);
@


1.7
log
@merge the patch from http://article.gmane.org/gmane.os.openbsd.bugs/9964
in a slightly modified form
the diff is from Piotr Durlej <P.Durlej@@stud.elka.pw.edu.pl> and suppo-
sedly fixes use of block devices as underlying devices for vnd(4) discs
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.6 2007/09/18 19:40:05 tg Exp $	*/
d496 6
a501 2
				bp->b_error = VOP_WRITE(vnd->sc_vp, &auio, 0,
				    vnd->sc_cred);
d845 1
a845 1
			bdv = vp->v_rdev;
@


1.6
log
@merge
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/dev/vnd.c,v 1.5 2005/07/21 21:52:17 tg Exp $	*/
d835 33
a867 6
		error = VOP_GETATTR(nd.ni_vp, &vattr, p->p_ucred, p);
		if (error) {
			VOP_UNLOCK(nd.ni_vp, 0, p);
			(void) vn_close(nd.ni_vp, f_rdopen, p->p_ucred, p);
			vndunlock(vnd);
			return (error);
a870 1
		vnd->sc_size = btodb(vattr.va_size);	/* note truncation */
@


1.5
log
@merge and bump patchlevel (kernel only)
@
text
@d1 3
a3 2
/**	$MirOS: src/sys/dev/vnd.c,v 1.4 2005/04/29 18:35:01 tg Exp $	*/
/*	$OpenBSD: vnd.c,v 1.56 2005/07/20 02:36:13 tedu Exp $	*/
a136 1
	int		 sc_maxactive;		/* max # of active requests */
a148 1
#define	VNF_BUSY	0x0800
a162 1
void	vndthrottle(struct vnd_softc *, struct vnode *);
d261 1
a261 1
	 * same type.
d265 1
a265 1
		    (vndsimple(dev) != 0)) {
d407 1
a407 3
 * access the underlying file.  Things are complicated by the fact that we
 * might get recursively called due to buffer flushes.  In those cases we
 * queue one write.
a438 1
	sz = howmany(bp->b_bcount, DEV_BSIZE);
d440 1
a448 8
	if (DISKPART(bp->b_dev) != RAW_PART &&
	    bounds_check_with_label(bp, vnd->sc_dk.dk_label,
	    vnd->sc_dk.dk_cpulabel, 1) <= 0) {
		s = splbio();
		biodone(bp);
		splx(s);
		return;
	}
d450 4
a453 13
	/* No bypassing of buffer cache?  */
	if (vndsimple(bp->b_dev)) {
		/*
		 * In order to avoid "locking against myself" panics, we
		 * must be prepared to queue operations during another I/O
		 * operation.  This situation comes up where a dirty cache
		 * buffer needs to be flushed in order to provide the current
		 * operation with a fresh buffer.
		 *
		 * XXX do we really need to protect stuff relating to this with
		 * splbio?
		 */
		if (vnd->sc_flags & VNF_BUSY) {
d455 1
a455 3
			bp->b_actf = vnd->sc_tab.b_actf;
			vnd->sc_tab.b_actf = bp;
			vnd->sc_tab.b_active++;
d460 10
a483 1
			vnd->sc_flags |= VNF_BUSY;
a502 1
			vnd->sc_flags &= ~VNF_BUSY;
d561 1
d563 1
d594 2
d602 3
d615 2
a616 4
		if (vnd->sc_tab.b_active < vnd->sc_maxactive) {
			vnd->sc_tab.b_active++;
			vndstart(vnd);
		}
a617 1

d700 1
a700 3
		if (vnd->sc_tab.b_actf)
			vndstart(vnd);
		else
a871 1
		vndthrottle(vnd, vnd->sc_vp);
d993 1
a993 2
				error = writedisklabel(MAKEDISKDEV(major(dev),
				    DISKUNIT(dev), RAW_PART),
a1056 18
/*
 * Set maxactive based on FS type
 */
void
vndthrottle(vnd, vp)
	struct vnd_softc *vnd;
	struct vnode *vp;
{
#ifdef NFSCLIENT
	extern int (**nfsv2_vnodeop_p)(void *);

	if (vp->v_op == nfsv2_vnodeop_p)
		vnd->sc_maxactive = 2;
	else
#endif
		vnd->sc_maxactive = 8;
}

@


1.4
log
@(tentative) merge, more to come
@
text
@d1 2
a2 2
/**	$MirOS: src/sys/dev/vnd.c,v 1.3 2005/04/14 21:54:44 tg Exp $	*/
/*	$OpenBSD: vnd.c,v 1.55 2005/04/19 15:32:12 mickey Exp $	*/
d138 1
a138 1
	void		*sc_keyctx;		/* key context */
d878 1
a878 1
			vnd->sc_keyctx = malloc(sizeof(blf_ctx), M_DEVBUF,
@


1.3
log
@From: Michael Shalayeff <mickey@@lucifier.net>
this switches vnd to use pool for it's buffer structures.
in particular it might be a bit faster as well as safe
in the interrupt context (vndiodone()).
please test in both vnd and svnd modes and report results.
@
text
@d1 2
a2 2
/**	$MirOS: src/sys/dev/vnd.c,v 1.2 2005/03/06 21:27:35 tg Exp $	*/
/*	$OpenBSD: vnd.c,v 1.45 2004/03/04 01:22:50 tedu Exp $	*/
d131 8
a138 7
	int		 sc_flags;	/* flags */
	size_t		 sc_size;	/* size of vnd in blocks */
	struct vnode	*sc_vp;		/* vnode */
	struct ucred	*sc_cred;	/* credentials */
	int		 sc_maxactive;	/* max # of active requests */
	struct buf	 sc_tab;	/* transfer queue */
	void		*sc_keyctx;	/* key context */
d298 1
a298 2
	vndunlock(sc);
	return (0);
d494 1
a494 1
			auio.uio_procp = NULL;
d790 1
d819 6
d891 2
a892 2
			printf("vndioctl: SET vp %p size %x\n",
			    vnd->sc_vp, vnd->sc_size);
d947 28
d1057 1
a1057 1
	aiov.iov_len = min(DEV_BSIZE, dbtob(vnd->sc_size));
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 1
a1 1
/**	$MirOS$	*/
d74 1
d119 7
a125 4
#define	getvndbuf()	\
	((struct vndbuf *)malloc(sizeof(struct vndbuf), M_DEVBUF, M_WAITOK))
#define	putvndbuf(vbp)	\
	free((caddr_t)(vbp), M_DEVBUF)
d216 4
@


1.1
log
@Initial revision
@
text
@d1 1
d62 3
d146 1
d245 8
d651 13
d762 2
d784 1
a784 1
	int error, part, pmask, s;
d818 4
d829 1
a829 1
		if ((error = vn_open(&nd, FREAD|FWRITE, 0)) != 0) {
d836 1
a836 1
			(void) vn_close(nd.ni_vp, FREAD|FWRITE, p->p_ucred, p);
d844 1
a844 1
			(void) vn_close(nd.ni_vp, FREAD|FWRITE, p->p_ucred, p);
d873 1
d948 2
d975 2
d1071 3
a1073 1
	(void) vn_close(vp, FREAD|FWRITE, vnd->sc_cred, p);
d1078 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@d1 1
a1 1
/*	$OpenBSD: vnd.c,v 1.55 2005/04/19 15:32:12 mickey Exp $	*/
a69 1
#include <sys/pool.h>
d114 4
a117 7
/*
 * struct vndbuf allocator
 */
struct pool     vndbufpl;

#define	getvndbuf()	pool_get(&vndbufpl, PR_WAITOK)
#define	putvndbuf(vbp)	pool_put(&vndbufpl, vbp);
d123 7
a129 8
	char		 sc_file[VNDNLEN];	/* file we're covering */
	int		 sc_flags;		/* flags */
	size_t		 sc_size;		/* size of vnd in blocks */
	struct vnode	*sc_vp;			/* vnode */
	struct ucred	*sc_cred;		/* credentials */
	int		 sc_maxactive;		/* max # of active requests */
	struct buf	 sc_tab;		/* transfer queue */
	void		*sc_keyctx;		/* key context */
a206 4

	pool_init(&vndbufpl, sizeof(struct vndbuf), 0, 0, 0, "vndbufpl", NULL);
	pool_setlowat(&vndbufpl, 16);
	pool_sethiwat(&vndbufpl, 1024);
d276 2
a277 1
	error = 0;
d473 1
a473 1
			auio.uio_procp = p;
a753 1
	struct vnd_user *vnu;
a781 6
		if ((error = copyinstr(vio->vnd_file, vnd->sc_file,
		    sizeof(vnd->sc_file), NULL))) {
			vndunlock(vnd);
			return (error);
		}

d843 2
a844 2
			printf("vndioctl: SET vp %p size %llx\n",
			    vnd->sc_vp, (unsigned long long)vnd->sc_size);
a898 28
	case VNDIOCGET:
		vnu = (struct vnd_user *)addr;

		if (vnu->vnu_unit == -1)
			vnu->vnu_unit = unit;
		if (vnu->vnu_unit >= numvnd)
			return (ENXIO);
		if (vnu->vnu_unit < 0)
			return (EINVAL);

		vnd = &vnd_softc[vnu->vnu_unit];

		if (vnd->sc_flags & VNF_INITED) {
			error = VOP_GETATTR(vnd->sc_vp, &vattr, p->p_ucred, p);
			if (error)
				return (error);

			strlcpy(vnu->vnu_file, vnd->sc_file,
			    sizeof(vnu->vnu_file));
			vnu->vnu_dev = vattr.va_fsid;
			vnu->vnu_ino = vattr.va_fileid;
		} else {
			vnu->vnu_dev = 0;
			vnu->vnu_ino = 0;
		}

		break;

d977 1
a977 1
	aiov.iov_len = MIN(DEV_BSIZE, dbtob((off_t)vnd->sc_size));
@


1.1.1.3
log
@merge more OpenBSD-HEAD stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: vnd.c,v 1.56 2005/07/20 02:36:13 tedu Exp $	*/
d134 1
a134 1
	blf_ctx		*sc_keyctx;		/* key context */
d846 1
a846 1
			vnd->sc_keyctx = malloc(sizeof(*vnd->sc_keyctx), M_DEVBUF,
@


1.1.1.4
log
@openbsd 1.57 pedro@@
Correctly bounds check transfers passed to vndstrategy()
@
text
@d1 1
a1 1
/*	$OpenBSD: vnd.c,v 1.57 2005/12/29 20:02:03 pedro Exp $	*/
d430 1
a431 1

d440 7
a446 15

	/* If we have a label, do a boundary check. */
	if (vnd->sc_flags & VNF_HAVELABEL) {
		if (bounds_check_with_label(bp, vnd->sc_dk.dk_label,
		    vnd->sc_dk.dk_cpulabel, 1) <= 0) {
			s = splbio();
			biodone(bp);
			splx(s);
			return;
		}

		/*
		 * bounds_check_with_label() changes bp->b_resid, reset it
		 */
		bp->b_resid = bp->b_bcount;
a448 2
	sz = howmany(bp->b_bcount, DEV_BSIZE);

@


1.1.1.5
log
@openbsd 1.59 pedro@@
Disk interrupts can cause buffers to be returned to the vnd pool, so
splbio() is required when allocating. Fixes PR kern/5041, okay tedu@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: vnd.c,v 1.59 2006/03/04 22:53:32 pedro Exp $	*/
a572 1
		s = splbio();
a573 1
		splx(s);
a1152 1
/*	$OpenBSD: vnd.c,v 1.57 2005/12/29 20:02:03 pedro Exp $	*/
@


1.1.1.6
log
@openbsd 1.61 thib@@
fix a panic when trying to fdisk vnd devices (not svnd) wich
are back by weird images (such as the ones qemu creates).

proplem found the hard way by msf@@

ok mickey@@, pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vnd.c,v 1.62 2006/08/13 17:55:07 thib Exp $	*/
a605 2
		 * We must still however charge for the write even if there
		 * was an error.
a611 3
			/* charge for the write */
			if ((nbp->vb_buf.b_flags & B_READ) == 0)
				nbp->vb_buf.b_vp->v_numoutput++;
@


1.1.1.7
log
@openbsd 1.68 pedro@@
Don't throttle and serialize I/O operations, okay miod@@ krw@@
Fixes kern/5347
@
text
@d1 1
a1 1
/*	$OpenBSD: vnd.c,v 1.68 2007/02/01 01:02:05 pedro Exp $	*/
d132 1
d145 1
d159 1
d396 3
a398 1
 * access the underlying file.
d461 19
d494 1
d514 1
d627 4
a630 2
		vnd->sc_tab.b_active++;
		vndstart(vnd);
d632 1
d702 3
a704 1
		if (!vnd->sc_tab.b_actf)
d870 1
d1052 18
@


1.1.1.8
log
@openbsd 1.73 krw@@, 1.74 krw@@
Replace expansions of DISKLABELDEV() with DISKLABELDEV(). Shorter, and
more consistant. No change to code.

ok miod@@
----
Use VNDLABELDEV() and not DISKLABELDEV() in writedisklabel() since
VNDLABELDEV() is used in readdisklabel(). VNDLABELDEV() preserves the
vndsimple() property encoded in the device.
@
text
@d1 1
a1 1
/*	$OpenBSD: vnd.c,v 1.74 2007/05/12 12:19:23 krw Exp $	*/
d957 2
a958 1
				error = writedisklabel(VNDLABELDEV(dev),
@


1.1.1.9
log
@put in both rcsids so that we know
@
text
@a1 1
/*	$OpenBSD: vnd.c,v 1.57 2005/12/29 20:02:03 pedro Exp $	*/
d1109 1
@


1.1.1.10
log
@openbsd 1.65 thib:

Always allow read-only opens on (s)vnd devices, despite the
type of the first open (svnd vs vnd).

ok pedro@@
@
text
@d248 1
a248 1
	 * same type or read-only.
d252 1
a252 1
		    (vndsimple(dev) != 0) && (flags & FWRITE)) {
@


1.1.1.11
log
@openbsd sys/dev/vnd.c 1.70 pedro@@:
Don't enforce RLIMIT_FSIZE on vnd(4) I/O operations, okay deraadt@@

with quirks
@
text
@d483 2
a484 6
				/*
				 * Upper layer has already checked I/O for
				 * limits, so there is no need to do it again.
				 */
				bp->b_error = VOP_WRITE(vnd->sc_vp, &auio,
				    IO_NOLIMIT, vnd->sc_cred);
@


1.1.1.12
log
@vnd.c,v 1.85
@
text
@d1 2
a2 1
/*	$OpenBSD: vnd.c,v 1.85 2008/03/24 01:16:58 krw Exp $	*/
a79 1
#include <sys/rwlock.h>
d89 1
a89 1
#ifdef VNDDEBUG
d95 3
a97 4
#define	DNPRINTF(f, p...)	do { if ((f) & vnddebug) printf(p); } while (0)
#else
#define	DNPRINTF(f, p...)	/* nothing */
#endif	/* VNDDEBUG */
a134 1
	struct rwlock	 sc_rwlock;
d140 2
a145 3
#define	VNF_READONLY	0x2000

#define	VNDRW(v)	((v)->sc_flags & VNF_READONLY ? FREAD : FREAD|FWRITE)
d160 2
a161 3
void	vndgetdisklabel(dev_t, struct vnd_softc *, struct disklabel *, int);
void	vndencrypt(struct vnd_softc *, caddr_t, size_t, daddr64_t, int);
size_t	vndbdevsize(struct vnode *, struct proc *);
d163 2
a164 2
#define vndlock(sc) rw_enter(&sc->sc_rwlock, RW_WRITE|RW_INTR)
#define vndunlock(sc) rw_exit_write(&sc->sc_rwlock)
d167 6
a172 2
vndencrypt(struct vnd_softc *vnd, caddr_t addr, size_t size, daddr64_t off,
    int encrypt)
d193 2
a194 1
vndattach(int num)
a197 1
	int i;
d202 1
a202 1
	mem = malloc(size, M_DEVBUF, M_NOWAIT | M_ZERO);
d207 1
a208 3
	for (i = 0; i < num; i++) {
		rw_init(&vnd_softc[i].sc_rwlock, "vndlock");
	}
d217 4
a220 1
vndopen(dev_t dev, int flags, int mode, struct proc *p)
d226 4
a229 2
	DNPRINTF(VDB_FOLLOW, "vndopen(%x, %x, %x, %p)\n", dev, flags, mode, p);

a236 11
	if (!vndsimple(dev) && sc->sc_vp != NULL &&
	    (sc->sc_vp->v_type != VREG || sc->sc_keyctx != NULL)) {
		error = EINVAL;
		goto bad;
	}

	if ((flags & FWRITE) && (sc->sc_flags & VNF_READONLY)) {
		error = EROFS;
		goto bad;
	}

d240 1
a240 1
		vndgetdisklabel(dev, sc, sc->sc_dk.dk_label, 0);
d293 3
a295 2
vndgetdisklabel(dev_t dev, struct vnd_softc *sc, struct disklabel *lp,
    int spoofonly)
d297 2
a298 1
	char *errstring = NULL;
d301 1
d307 5
a311 1
	lp->d_secpercyl = 100;		/* lp->d_ntracks * lp->d_nsectors */
d314 1
a314 1
	lp->d_type = DTYPE_VND;
d316 1
a316 1
	DL_SETDSIZE(lp, sc->sc_size);
d320 6
a325 1
	lp->d_version = 1;
d331 5
a335 2
	/* Call the generic disklabel extraction routine */
	errstring = readdisklabel(VNDLABELDEV(dev), vndstrategy, lp, spoofonly);
d337 1
a337 2
		DNPRINTF(VDB_IO, "%s: %s\n", sc->sc_dev.dv_xname,
		    errstring);
d343 4
a346 1
vndclose(dev_t dev, int flags, int mode, struct proc *p)
d352 4
a355 1
	DNPRINTF(VDB_FOLLOW, "vndclose(%x, %x, %x, %p)\n", dev, flags, mode, p);
d397 2
a398 1
vndstrategy(struct buf *bp)
d412 4
a415 2
	DNPRINTF(VDB_FOLLOW, "vndstrategy(%p): unit %d\n", bp, unit);

d439 2
a440 1
		if (bounds_check_with_label(bp, vnd->sc_dk.dk_label, 1) <= 0) {
d460 1
a460 1
			daddr64_t off = DL_GETPOFFSET(&vnd->sc_dk.dk_label->d_partitions[part]);
a517 9
	if (vnd->sc_vp->v_type != VREG || vnd->sc_keyctx != NULL) {
		bp->b_error = EINVAL;
		bp->b_flags |= B_ERROR;
		s = splbio();
		biodone(bp);
		splx(s);
		return;
	}

d519 1
a519 1
	bn += DL_GETPOFFSET(&vnd->sc_dk.dk_label->d_partitions[DISKPART(bp->b_dev)]);
d526 2
a527 2
		daddr64_t nbn;
		int off, nra;
d535 1
a535 1
#ifdef VNDDEBUG
d546 5
a550 3

		DNPRINTF(VDB_IO, "vndstrategy: vp %p/%p bn %x/%x sz %x\n",
		    vnd->sc_vp, vp, bn, nbn, sz);
d603 1
a603 1
		nbp->vb_buf.b_cylinder = nbp->vb_buf.b_blkno;
d621 2
a622 1
vndstart(struct vnd_softc *vnd)
d632 6
a637 5

	DNPRINTF(VDB_IO,
	    "vndstart(%d): bp %p vp %p blkno %x addr %p cnt %lx\n",
	    vnd-vnd_softc, bp, bp->b_vp, bp->b_blkno, bp->b_data,
	    bp->b_bcount);
d648 2
a649 1
vndiodone(struct buf *bp)
d657 6
a662 4
	DNPRINTF(VDB_IO,
	    "vndiodone(%d): vbp %p vp %p blkno %x addr %p cnt %lx\n",
	    vnd-vnd_softc, vbp, vbp->vb_buf.b_vp, vbp->vb_buf.b_blkno,
	    vbp->vb_buf.b_data, vbp->vb_buf.b_bcount);
d665 5
a669 3
		DNPRINTF(VDB_IO, "vndiodone: vbp %p error %d\n", vbp,
		    vbp->vb_buf.b_error);

d682 4
a685 1
		DNPRINTF(VDB_IO, "vndiodone: pbp %p iodone\n", pbp);
d693 4
a696 1
vndread(dev_t dev, struct uio *uio, int flags)
d701 4
a704 1
	DNPRINTF(VDB_FOLLOW, "vndread(%x, %p)\n", dev, uio);
d718 4
a721 1
vndwrite(dev_t dev, struct uio *uio, int flags)
d726 4
a729 1
	DNPRINTF(VDB_FOLLOW, "vndwrite(%x, %p)\n", dev, uio);
a740 20
size_t
vndbdevsize(struct vnode *vp, struct proc *p)
{
	struct partinfo pi;
	struct bdevsw *bsw;
	long sscale;
	dev_t dev;

	dev = vp->v_rdev;
	bsw = bdevsw_lookup(dev);
	if (bsw->d_ioctl == NULL)
		return (0);
	if (bsw->d_ioctl(dev, DIOCGPART, (caddr_t)&pi, FREAD, p))
		return (0);
	sscale = pi.disklab->d_secsize / DEV_BSIZE;
	DNPRINTF(VDB_INIT, "vndbdevsize: size %li secsize %li sscale %li\n",
	    (long)pi.part->p_size,(long)pi.disklab->d_secsize,sscale);
	return (pi.part->p_size * sscale);
}

d743 6
a748 1
vndioctl(dev_t dev, u_long cmd, caddr_t addr, int flag, struct proc *p)
d758 5
a762 3
	DNPRINTF(VDB_FOLLOW, "vndioctl(%x, %lx, %p, %x, %p): unit %d\n",
	    dev, cmd, addr, flag, p, unit);

d797 4
a800 3
		 * Open for read and write first. This lets vn_open() weed out
		 * directories, sockets, etc. so we don't have to worry about
		 * them.
d803 1
a803 7
		vnd->sc_flags &= ~VNF_READONLY; 
		error = vn_open(&nd, FREAD|FWRITE, 0);
		if (error == EROFS) {
			vnd->sc_flags |= VNF_READONLY;
			error = vn_open(&nd, FREAD, 0);
		}
		if (error) {
d807 2
a808 2

		if (nd.ni_vp->v_type != VREG && !vndsimple(dev)) {
d810 1
a810 1
			vn_close(nd.ni_vp, VNDRW(vnd), p->p_ucred, p);
d812 1
a812 14
			return (EINVAL);
		}

		if (nd.ni_vp->v_type == VBLK)
			vnd->sc_size = vndbdevsize(nd.ni_vp, p);
		else {
			error = VOP_GETATTR(nd.ni_vp, &vattr, p->p_ucred, p);
			if (error) {
				VOP_UNLOCK(nd.ni_vp, 0, p);
				vn_close(nd.ni_vp, VNDRW(vnd), p->p_ucred, p);
				vndunlock(vnd);
				return (error);
			}
			vnd->sc_size = btodb(vattr.va_size); /* note truncation */
d816 1
d818 1
a818 1
			(void) vn_close(nd.ni_vp, VNDRW(vnd), p->p_ucred, p);
d824 1
a824 1
			char key[BLF_MAXUTILIZED];
d831 1
a831 1
				(void) vn_close(nd.ni_vp, VNDRW(vnd),
d846 5
a850 3

		DNPRINTF(VDB_INIT, "vndioctl: SET vp %p size %llx\n",
		    vnd->sc_vp, (unsigned long long)vnd->sc_size);
d856 1
d884 4
a887 2
		DNPRINTF(VDB_INIT, "vndioctl: CLRed\n");

d894 1
a894 1
		/* Detach the disk. */
d958 2
a959 1
		    (struct disklabel *)addr, /*vnd->sc_dk.dk_openmask : */0);
d963 2
a964 1
				    vndstrategy, vnd->sc_dk.dk_label);
d994 3
a996 1
vndsetcred(struct vnd_softc *vnd, struct ucred *cred)
d1025 1
a1025 1
vndshutdown(void)
d1035 2
a1036 1
vndclear(struct vnd_softc *vnd)
d1041 4
a1044 2
	DNPRINTF(VDB_FOLLOW, "vndclear(%p): vp %p\n", vnd, vp);

d1046 1
a1046 1
	if (vp == NULL)
d1048 1
a1048 1
	(void) vn_close(vp, VNDRW(vnd), vnd->sc_cred, p);
d1050 2
a1051 2
	vnd->sc_vp = NULL;
	vnd->sc_cred = NULL;
d1055 3
a1057 2
daddr64_t
vndsize(dev_t dev)
d1068 5
a1072 1
vnddump(dev_t dev, daddr64_t blkno, caddr_t va, size_t size)
d1078 36
@


1.1.1.13
log
@revert r1.80: no M_ZERO here, yet
@
text
@d202 1
a202 1
	mem = malloc(size, M_DEVBUF, M_NOWAIT);
a206 1
	bzero(mem, size);
@


1.1.1.14
log
@revert r1.79: readdisklabel changes we don't have
@
text
@a307 1
	bzero(sc->sc_dk.dk_cpulabel, sizeof(struct cpu_disklabel));
d329 1
a329 2
	errstring = readdisklabel(VNDLABELDEV(dev), vndstrategy, lp,
	    sc->sc_dk.dk_cpulabel, spoofonly);
d425 1
a425 2
		if (bounds_check_with_label(bp, vnd->sc_dk.dk_label,
		    vnd->sc_dk.dk_cpulabel, 1) <= 0) {
d953 1
a953 2
		    (struct disklabel *)addr, /*vnd->sc_dk.dk_openmask : */0,
		    vnd->sc_dk.dk_cpulabel);
d957 1
a957 2
				    vndstrategy, vnd->sc_dk.dk_label,
				    vnd->sc_dk.dk_cpulabel);
@


1.1.1.15
log
@struct disklabel has no version yet
@
text
@d323 1
@


1.1.1.16
log
@revert r1.76, r1.77: daddr64_t related changes
@
text
@d164 1
a164 1
void	vndencrypt(struct vnd_softc *, caddr_t, size_t, daddr_t, int);
d171 1
a171 1
vndencrypt(struct vnd_softc *vnd, caddr_t addr, size_t size, daddr_t off,
d319 1
a319 1
	lp->d_secperunit = sc->sc_size;
d447 1
a447 1
			int off = vnd->sc_dk.dk_label->d_partitions[part].p_offset;
d515 1
a515 1
	bn += vnd->sc_dk.dk_label->d_partitions[DISKPART(bp->b_dev)].p_offset;
d1047 1
a1047 1
int
d1059 1
a1059 1
vnddump(dev_t dev, daddr_t blkno, caddr_t va, size_t size)
@


1.1.1.17
log
@revert r1.75, our readdisklabels haven't this change yet
@
text
@a323 5
	lp->d_partitions[RAW_PART].p_offset = 0;
	lp->d_partitions[RAW_PART].p_size = lp->d_secperunit;
	lp->d_partitions[RAW_PART].p_fstype = FS_UNUSED;
	lp->d_npartitions = RAW_PART + 1;

@


1.1.1.18
log
@revert r1.71, r1.72: we have different rwlock code than SMP branch
@
text
@d79 1
d136 1
a141 2
#define	VNF_WANTED	0x0040
#define	VNF_LOCKED	0x0080
d167 2
a168 2
int	vndlock(struct vnd_softc *);
void	vndunlock(struct vnd_softc *);
d197 1
d209 3
a1069 34

/*
 * Wait interruptibly for an exclusive lock.
 *
 * XXX
 * Several drivers do this; it should be abstracted and made MP-safe.
 */
int
vndlock(struct vnd_softc *sc)
{
	int error;

	while ((sc->sc_flags & VNF_LOCKED) != 0) {
		sc->sc_flags |= VNF_WANTED;
		if ((error = tsleep(sc, PRIBIO | PCATCH, "vndlck", 0)) != 0)
			return (error);
	}
	sc->sc_flags |= VNF_LOCKED;
	return (0);
}

/*
 * Unlock and wake up any waiters.
 */
void
vndunlock(struct vnd_softc *sc)
{

	sc->sc_flags &= ~VNF_LOCKED;
	if ((sc->sc_flags & VNF_WANTED) != 0) {
		sc->sc_flags &= ~VNF_WANTED;
		wakeup(sc);
	}
}
@


1.1.1.19
log
@two more defines we don't have yet,
makes this code compile again
@
text
@d523 1
a523 1
		daddr_t nbn;
d827 1
a827 1
			char key[72];
@


