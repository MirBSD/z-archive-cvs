head	1.6;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.1
	MIRBSD_10:1.3.0.2
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2010.09.25.14.11.47;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004C9E03397C26FA1E;

1.5
date	2010.09.24.19.59.12;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004C9D02C32F9ABA6D;

1.4
date	2010.09.24.19.27.33;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004C9CFB791CB0977D;

1.3
date	2007.05.29.08.42.31;	author tg;	state Exp;
branches;
next	1.2;
commitid	100465BE75874A962A8;

1.2
date	2005.03.06.21.28.16;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.29.07;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.07;	author tg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@since 1004C9D50823DFFA28B this is no longer true, simplify / reduce diff against vendor
@
text
@/**	$MirOS: src/sys/net/netisr.h,v 1.4 2010/09/24 19:27:33 tg Exp $ */
/*	$OpenBSD: netisr.h,v 1.20 2004/11/28 23:39:45 canacar Exp $	*/
/*	$NetBSD: netisr.h,v 1.12 1995/08/12 23:59:24 mycroft Exp $	*/

/*
 * Copyright (c) 1980, 1986, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)netisr.h	8.1 (Berkeley) 6/10/93
 */

#ifndef _NET_NETISR_H_
#define _NET_NETISR_H_
/*
 * The networking code runs off software interrupts.
 *
 * You can switch into the network by doing splsoftnet() and return by splx().
 * The software interrupt level for the network is higher than the software
 * level for the clock (so you can enter the network in routines called
 * at timeout time).
 *
 * The routine to request a network software interrupt, setsoftnet(),
 * is defined in the machine-specific include files.
 */

/*
 * Each ``pup-level-1'' input queue has a bit in a ``netisr'' status
 * word which is used to de-multiplex a single software
 * interrupt used for scheduling the network code to calls
 * on the lowest level routine of each protocol.
 */
#define	NETISR_NOTRND	0		/* virtual */
#define	NETISR_RND	1
#define	NETISR_IP	2		/* same as AF_INET */
#define	NETISR_IMP	3		/* same as AF_IMPLINK */
#define	NETISR_NS	6		/* same as AF_NS */
#define	NETISR_ISO	7		/* same as AF_ISO */
#define	NETISR_CCITT	10		/* same as AF_CCITT */
/* 13..15 overlap with regular RND_SRC_NET (XXX this is stupid) */
#define	NETISR_ATALK	16		/* same as AF_APPLETALK */
#define	NETISR_ARP	18		/* same as AF_LINK */
#define	NETISR_IPX	23		/* same as AF_IPX */
#define	NETISR_IPV6	24		/* same as AF_INET6 */
#define	NETISR_ISDN	26		/* same as AF_E164 */
#define	NETISR_NATM	27		/* same as AF_ATM */
#define	NETISR_PPP	28		/* for PPP processing */
#define	NETISR_BRIDGE	29		/* for bridge processing */
#define	NETISR_PLIP	30		/* for PLIP processing */
#define	NETISR_PPPOE	31		/* for pppoe processing */

#ifndef _LOCORE
#ifdef _KERNEL
extern int	netisr;			/* scheduling bits for network */
extern int	netrndintr_v;		/* same bits but for entropy */

void	netrndintr(void);
void	arpintr(void);
void	ipintr(void);
void	ip6intr(void);
void	atintr(void);
void	nsintr(void);
void	ipxintr(void);
void	clnlintr(void);
void	natmintr(void);
void	pppintr(void);
void	ccittintr(void);
void	bridgeintr(void);
void	pppoeintr(void);

#define schednetisr(anisr) do {					\
	netrndintr_v |= 1 << (anisr);				\
	netisr |= (1 << (anisr)) | (1 << NETISR_RND);		\
	setsoftnet();						\
} while (/* CONSTCOND */ 0)
#define schednetisr_virtual(anisr) do {				\
	netrndintr_v |= (1 << (anisr)) | (1 << NETISR_NOTRND);	\
	netisr |= 1 << (anisr);					\
	setsoftnet();						\
} while (/* CONSTCOND */ 0)
#endif
#endif

#endif /* _NET_NETISR_H_ */
@


1.5
log
@• move rstat from bits to bytes (except distribution, of course)
• re-use RND_SRC_AUDIO for video and rename it RND_SRC_AUVIS
• switch to using add_auvis_entropy() in MirBSD code
• let RND_SRC_IMACS take up former RND_SRC_VIDEO’s place in statistics
• keep statistics for lopool en- and dequeues as well
• let rstat look ok also on 80x24 terminal
@
text
@a59 2
#define	NETISR_PPP	4		/* for PPP processing */
#define	NETISR_PPPOE	5		/* for pppoe processing */
a61 2
#define	NETISR_BRIDGE	8		/* for bridge processing */
#define	NETISR_PLIP	9		/* for PLIP processing */
d70 4
a73 1
/* 29..31 overlap with early RND_SRC_NET */
@


1.4
log
@• fix calling netrndintr, discovered by mircvs://contrib/hosted/tg/rstat
• take up an obsd idea and don’t schedule rnd for virtual interfaces
  (such as obsd tun, mbsd faith/loop/gre/ipip/ipsec)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/net/netisr.h,v 1.3 2007/05/29 08:42:31 tg Exp $ */
d60 2
d64 2
d67 1
d74 1
a74 4
#define	NETISR_PPP	28		/* for PPP processing */
#define	NETISR_BRIDGE	29		/* for bridge processing */
#define	NETISR_PLIP	30		/* for PLIP processing */
#define	NETISR_PPPOE	31		/* for pppoe processing */
@


1.3
log
@what they can, we can too…
| Only call add_net_randomness() once per interrupt instead of once per packet.   If \
| multiple packets come in on a single interrupt the times mixed into the randomness \
| pool will be identical or predictably close anyways, and nanotime() is expensive.
except better
• retain additional value that had been entered before
• use do { … } while(0) form
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/net/netisr.h,v 1.2 2005/03/06 21:28:16 tg Exp $ */
d56 1
d77 1
a77 1
extern int	netrndintr_v;		/* NETISR_RND anisr value */
d93 10
a102 5
#define	schednetisr(anisr)	do {		\
	netisr |= (1<<(anisr) | NETISR_RND);	\
	netrndintr_v = (anisr);			\
	setsoftnet();				\
} while (0)
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 1
a1 1
/**	$MirOS$ */
d56 1
d76 1
d78 1
d92 5
a96 3
#include <dev/rndvar.h>
#define	schednetisr(anisr)	\
	{ netisr |= 1<<(anisr); add_net_randomness(anisr); setsoftnet(); }
@


1.1
log
@Initial revision
@
text
@d1 1
d69 2
a70 1
#define	NETISR_PPPOE	30		/* for pppoe processing */
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
