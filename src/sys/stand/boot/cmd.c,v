head	1.26;
access;
symbols
	tg-use_ldscript:1.25.0.2
	tg-beforemerge-ksrc10:1.1.1.2
	cvs-200808011000:1.1.1.2
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2013.10.31.20.06.58;	author tg;	state Exp;
branches;
next	1.25;
commitid	1005272B7081B0E5655;

1.25
date	2009.10.24.14.19.37;	author tg;	state Exp;
branches
	1.25.2.1;
next	1.24;
commitid	1004AE30D0821BEF25B;

1.24
date	2009.10.24.14.16.52;	author tg;	state Exp;
branches;
next	1.23;
commitid	1004AE30C6434977ABE;

1.23
date	2009.01.31.22.43.26;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004984D4222A69CD0C;

1.22
date	2009.01.14.22.22.43;	author tg;	state Exp;
branches;
next	1.21;
commitid	100496E65BC344A5FF9;

1.21
date	2009.01.14.22.17.19;	author tg;	state Exp;
branches;
next	1.20;
commitid	100496E648302E55B26;

1.20
date	2009.01.14.22.17.04;	author tg;	state Exp;
branches;
next	1.19;
commitid	100496E64776E1A0225;

1.19
date	2009.01.12.18.31.58;	author tg;	state Exp;
branches;
next	1.18;
commitid	100496B8CB01AD512DB;

1.18
date	2009.01.11.22.52.34;	author tg;	state Exp;
branches;
next	1.17;
commitid	100496A784468CD00EF;

1.17
date	2009.01.10.19.23.15;	author tg;	state Exp;
branches;
next	1.16;
commitid	1004968F5B5768B4602;

1.16
date	2009.01.10.14.30.45;	author tg;	state Exp;
branches;
next	1.15;
commitid	1004968B11F735D2DEA;

1.15
date	2009.01.10.14.11.41;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004968ACB463878A1A;

1.14
date	2009.01.10.14.11.17;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004968AC9939E4A002;

1.13
date	2009.01.10.14.02.41;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004968AA9500EF57F8;

1.12
date	2009.01.01.23.27.46;	author tg;	state Exp;
branches;
next	1.11;
commitid	100495D518178CEC992;

1.11
date	2008.12.31.16.38.35;	author tg;	state Exp;
branches;
next	1.10;
commitid	100495BA02136D7BE32;

1.10
date	2008.12.28.20.43.13;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004957E4E046285DBA;

1.9
date	2008.12.28.20.34.10;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004957E2D734B46F3C;

1.8
date	2008.12.28.03.47.44;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004956F6EE2D7E6DE9;

1.7
date	2008.08.01.12.39.09;	author tg;	state Exp;
branches;
next	1.6;
commitid	100489303F432B4030A;

1.6
date	2008.08.01.11.56.10;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004892F9EB64DCA2B2;

1.5
date	2008.08.01.11.25.05;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004892F2924667C00D;

1.4
date	2006.11.21.02.53.39;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045626A132AE542D0;

1.3
date	2006.08.19.12.45.48;	author tg;	state Exp;
branches;
next	1.2;
commitid	10044E7080820F3E8BE;

1.2
date	2005.03.06.21.28.33;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.29.15;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.25.2.1
date	2009.10.27.15.10.52;	author tg;	state Exp;
branches;
next	;
commitid	1004AE70D6303F6EF50;

1.1.1.1
date	2005.02.05.17.29.15;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.08.01.10.28.38;	author tg;	state Exp;
branches;
next	;
commitid	1004892E54805BE97AB;


desc
@@


1.26
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.25 2009/10/24 14:19:37 tg Exp $	*/
/*	$OpenBSD: cmd.c,v 1.59 2007/04/27 10:08:34 tom Exp $	*/

/*
 * Copyright © 2008, 2009, 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 1997-1999 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/reboot.h>
#include <libsa.h>
#include "cmd.h"

#define CTRL(c)	((c)&0x1f)

static int Xboot(void);
#ifndef SMALL_BOOT
static int Xcat(void);
#endif
static int Xecho(void);
static int Xhelp(void);
#ifndef SMALL_BOOT
static int Xls(void);
#endif
static int Xnop(void);
static int Xreboot(void);
static int Xstty(void);
#ifndef SMALL_BOOT
static int Xtime(void);
#endif
#ifdef MACHINE_CMD
static int Xmachine(void);
extern const struct cmd_table MACHINE_CMD[];
#endif
#ifndef SMALL_BOOT
static int Xmacro(void);
#endif
extern int Xset(void);
#ifndef SMALL_BOOT
extern int Xenv(void);
#endif

#ifdef CHECK_SKIP_CONF
extern int CHECK_SKIP_CONF(void);
#endif

extern const struct cmd_table cmd_set[];
struct cmd_table cmd_table[] = {
	{"#",      CMDT_CMD, Xnop},  /* XXX must be first */
	{"boot",   CMDT_CMD, Xboot},
#ifndef SMALL_BOOT
	{"cat",    CMDT_CMD, Xcat},
#endif
	{"echo",   CMDT_CMD, Xecho},
#ifndef SMALL_BOOT
	{"env",    CMDT_CMD, Xenv},
#endif
	{"help",   CMDT_CMD, Xhelp},
#ifndef SMALL_BOOT
	{"ls",     CMDT_CMD, Xls},
#endif
#ifdef MACHINE_CMD
	{"machine",CMDT_MDC, Xmachine},
#endif
#ifndef SMALL_BOOT
	{"macro",  CMDT_CMD, Xmacro},
#endif
	{"reboot", CMDT_CMD, Xreboot},
	{"set",    CMDT_SET, Xset},
	{"stty",   CMDT_CMD, Xstty},
#ifndef SMALL_BOOT
	{"time",   CMDT_CMD, Xtime},
	/* space for four macros */
	{NULL,     CMDT_MAC, NULL},
	{NULL,     CMDT_MAC, NULL},
	{NULL,     CMDT_MAC, NULL},
	{NULL,     CMDT_MAC, NULL},
#endif
	{NULL,     CMDT_EOL, NULL}
};

#ifndef SMALL_BOOT
static void ls(char *, struct stat *);
#endif
static int readline(char *, size_t, int);
char *nextword(char *);
static char *whatcmd(const struct cmd_table **ct, char *);

int
getcmd(void)
{
	cmd.cmd = NULL;

	if (!readline(cmd_buf, sizeof(cmd_buf), cmd.timeout))
		cmd.cmd = cmd_table;

	return docmd();
}

int
read_conf(void)
{
#ifndef INSECURE
	struct stat sb;
#endif
	int fd, rc = 0;

#ifdef CHECK_SKIP_CONF
	if (CHECK_SKIP_CONF()) {
		printf("boot.cfg processing skipped at operator request\n");
		return -1;		/* Pretend file wasn't found */
	}
#endif

	if ((fd = open(qualify(cmd.conf), 0)) < 0) {
		if (errno != ENOENT && errno != ENXIO) {
			printf("open(%s): %s\n", cmd.path, strerror(errno));
			return 0;
		}
		return -1;
	}

#ifndef INSECURE
	(void) fstat(fd, &sb);
	if (sb.st_uid || (sb.st_mode & 2)) {
		printf("non-secure %s, will not proceed\n", cmd.path);
		close(fd);
		return -1;
	}
#endif

	do {
		char *p = cmd_buf;

		cmd.cmd = NULL;

		do {
			rc = read(fd, p, 1);
		} while (rc > 0 && *p++ != '\n' &&
		    (p-cmd_buf) < sizeof(cmd_buf));

		if (rc < 0) {			/* Error from read() */
			printf("%s: %s\n", cmd.path, strerror(errno));
			break;
		}

		if (rc == 0) {			/* eof from read() */
			if (p != cmd_buf) {	/* Line w/o trailing \n */
				*p = '\0';
				rc = docmd();
				break;
			}
		} else {			/* rc > 0, read a char */
			p--;			/* Get back to last character */

			if (*p != '\n') {	/* Line was too long */
				printf("%s: line too long\n", cmd.path);

				/* Don't want to run the truncated command */
				rc = -1;
			}

			*p = '\0';
		}

	} while (rc > 0 && !(rc = docmd()));

	close(fd);
	return rc;
}

int
docmd(void)
{
	char *p = NULL, *cp = NULL;
	const struct cmd_table *ct = cmd_table, *cs;
	int rv;

	cmd.argc = 1;
	if (cmd.cmd == NULL) {

		/* command */
		p = cmd_buf;
 cmdparse_loop:
		while (*p == ' ' || *p == '\t')
			++p;
		if (*p == '#' || *p == '\0') { /* comment or empty string */
#ifdef DEBUG
			printf("rem\n");
#endif
			return 0;
		}
		cp = p;
		while (*cp && *cp != '`')
			++cp;
		if (*cp == '`')
			*cp++ = '\0';
		else
			cp = NULL;
		ct = cmd_table;
		cs = NULL;
		cmd.argv[cmd.argc] = p; /* in case it's shortcut boot */
		p = whatcmd(&ct, p);
		if (ct == NULL) {
			cmd.argc++;
			ct = cmd_table;
#ifndef SMALL_BOOT
		} else if (ct->cmd_type == CMDT_MAC) {
			memcpy((p = cmd_buf), (void *)ct->cmd_exec,
			    strlen((char *)ct->cmd_exec) + 1);
			cmd.argc = 1;
			goto cmdparse_loop;
#endif
		} else if (ct->cmd_type == CMDT_SET && p != NULL) {
			cs = cmd_set;
#ifdef MACHINE_CMD
		} else if (ct->cmd_type == CMDT_MDC && p != NULL) {
			cs = MACHINE_CMD;
#endif
		}

		if (cs != NULL) {
			p = whatcmd(&cs, p);
			if (cs == NULL) {
				printf("%s: syntax error\n", ct->cmd_name);
				rv = 0;
				goto cmdparse_next;
			}
			ct = cs;
		}
		cmd.cmd = ct;
	}

	cmd.argv[0] = ct->cmd_name;
	while (p && cmd.argc+1 < sizeof(cmd.argv) / sizeof(cmd.argv[0])) {
		cmd.argv[cmd.argc++] = p;
		p = nextword(p);
	}
	cmd.argv[cmd.argc] = NULL;

	rv = (*cmd.cmd->cmd_exec)();
 cmdparse_next:
	if (rv == 0 && cp != NULL && *cp != '\0') {
		ct = cmd_table;
		cmd.argc = 1;
		p = cp;
		goto cmdparse_loop;
	}
	return (rv);
}

static char *
whatcmd(const struct cmd_table **ct, char *p)
{
	char *q;
	int l;

	q = nextword(p);

	for (l = 0; p[l]; l++)
		;

	while ((*ct)->cmd_type != CMDT_EOL)
		if ((*ct)->cmd_name != NULL && !strncmp(p, (*ct)->cmd_name, l))
			break;
		else
			(*ct)++;

	if ((*ct)->cmd_type == CMDT_EOL)
		*ct = NULL;

	return q;
}

static int
readline(char *buf, size_t n, int to)
{
#ifdef DEBUG
	extern int debug;
#endif
	char *p = buf, ch;

	/* Only do timeout if greater than 0 */
	if (to > 0) {
		u_long i = 0;
		time_t tt = getsecs() + to;
#ifdef DEBUG
		if (debug > 2)
			printf ("readline: timeout(%d) at %u\n", to, tt);
#endif
		/* check for timeout expiration less often
		   (for some very constrained archs) */
		while (!cnischar())
			if (!(i++ % 1000) && (getsecs() >= tt))
				break;

		if (!cnischar()) {
			memcpy(buf, "boot", 5);
			putchar('\n');
			return strlen(buf);
		}
	} else
		while (!cnischar())
			;

	/* User has typed something.  Turn off timeouts. */
	cmd.timeout = 0;

	while (1) {
		switch ((ch = getchar())) {
		case CTRL('u'):
			while (p > buf) {
				putchar('\177');
				p--;
			}
			continue;
		case '\n':
		case '\r':
			p[1] = *p = '\0';
			break;
		case '\b':
		case '\177':
			if (p > buf) {
				putchar('\177');
				p--;
			}
			continue;
		default:
			if (ch >= ' ' && ch < '\177') {
				if (p - buf < n-1)
					*p++ = ch;
				else {
					putchar('\007');
					putchar('\177');
				}
			}
			continue;
		}
		break;
	}

	return p - buf;
}

/*
 * Search for spaces/tabs after the current word. If found, \0 the
 * first one.  Then pass a pointer to the first character of the
 * next word, or NULL if there is no next word.
 */
char *
nextword(char *p)
{
	/* skip blanks */
	while (*p && *p != '\t' && *p != ' ')
		p++;
	if (*p) {
		*p++ = '\0';
		while (*p == '\t' || *p == ' ')
			p++;
	}
	if (*p == '\0')
		p = NULL;
	return p;
}

static void
print_help(const struct cmd_table *ct)
{
	for (; ct->cmd_name != NULL; ct++)
		printf(" %s", ct->cmd_name);
	putchar('\n');
}

static int
Xhelp(void)
{
	printf("commands:");
	print_help(cmd_table);
#ifdef MACHINE_CMD
	return Xmachine();
#else
	return 0;
#endif
}

#ifdef MACHINE_CMD
static int
Xmachine(void)
{
	printf("machine:");
	print_help(MACHINE_CMD);
	return 0;
}
#endif

static int
Xecho(void)
{
	int i;

	for (i = 1; i < cmd.argc; i++)
		printf("%s ", cmd.argv[i]);
	putchar('\n');
	return 0;
}

static int
Xstty(void)
{
	int sp;
	char *cp;
	dev_t dev;

	if (cmd.argc == 1)
		printf("%s speed is %d\n", ttyname(0), cnspeed(0, -1));
	else {
		dev = ttydev(cmd.argv[1]);
		if (dev == NODEV)
			printf("%s not a console device\n", cmd.argv[1]);
		else {
			if (cmd.argc == 2)
				printf("%s speed is %d\n", cmd.argv[1],
				       cnspeed(dev, -1));
			else {
				sp = 0;
				for (cp = cmd.argv[2]; *cp && isdigit(*cp); cp++)
					sp = sp * 10 + (*cp - '0');
				cnspeed(dev, sp);
			}
		}
	}

	return 0;
}

#ifndef SMALL_BOOT
static int
Xtime(void)
{
	time_t tt = getsecs();

	if (cmd.argc == 1)
		printf(ctime(&tt));
	else {
	}

	return 0;
}

static int
Xls(void)
{
	struct stat sb;
	char *p;
	int fd, nlin = 0;

	if (stat(qualify((cmd.argv[1]? cmd.argv[1]: "/.")), &sb) < 0) {
		printf("stat(%s): %s\n", cmd.path, strerror(errno));
		return 0;
	}

	if ((sb.st_mode & S_IFMT) != S_IFDIR)
		ls(cmd.path, &sb);
	else {
		if ((fd = opendir(cmd.path)) < 0) {
			printf ("opendir(%s): %s\n", cmd.path,
				strerror(errno));
			return 0;
		}

		p = cmd.path + strlen(cmd.path);
		*p++ = '/';
		*p = '\0';

		while(readdir(fd, p) >= 0) {
			if (++nlin >= 23) {
				printf("%s\n", "-- more --");
				if ((cngetc() | 0x20) == 'q')
					goto out;
				nlin = 0;
			}
			if (stat(cmd.path, &sb) < 0)
				printf("stat(%s): %s\n", cmd.path,
				       strerror(errno));
			else
				ls(p, &sb);
		}
 out:
		closedir (fd);
	}
	return 0;
}

#define lsrwx(mode,s) \
	putchar ((mode) & S_IROTH? 'r' : '-'); \
	putchar ((mode) & S_IWOTH? 'w' : '-'); \
	putchar ((mode) & S_IXOTH? *(s): (s)[1]);

static void
ls(char *name, struct stat *sb)
{
	putchar("-fc-d-b---l-s-w-"[(sb->st_mode & S_IFMT) >> 12]);
	lsrwx(sb->st_mode >> 6, (sb->st_mode & S_ISUID? "sS" : "x-"));
	lsrwx(sb->st_mode >> 3, (sb->st_mode & S_ISGID? "sS" : "x-"));
	lsrwx(sb->st_mode     , (sb->st_mode & S_ISTXT? "tT" : "x-"));

	printf (" %u,%u\t%lu\t%s\n", sb->st_uid, sb->st_gid,
	    (u_long)sb->st_size, name);
}
#undef lsrwx
#endif

int doboot = 1;

static int
Xnop(void)
{
	if (doboot) {
		doboot = 0;
		return (Xboot());
	}

	return 0;
}

static int
Xboot(void)
{
	if (cmd.argc > 1 && cmd.argv[1][0] != '-') {
		qualify((cmd.argv[1]? cmd.argv[1]: cmd.image));
		if (bootparse(2))
			return 0;
	} else {
		if (bootparse(1))
			return 0;
		snprintf(cmd.path, sizeof cmd.path, "%s:%s",
		    cmd.bootdev, cmd.image);
	}

	return 1;
}

/*
 * Qualifies the path adding necessary dev
 */

char *
qualify(char *name)
{
	char *p;

	for (p = name; *p; p++)
		if (*p == ':')
			break;
	if (*p == ':')
		memcpy(cmd.path, name, strlen(name) + 1);
	else
		snprintf(cmd.path, sizeof cmd.path, "%s:%s",
		    cmd.bootdev, name);
	return cmd.path;
}

static int
Xreboot(void)
{
	/* compile-time safeguard, fix cmd.h if this fails */
	char sizetest[sizeof(struct cmd_state) < CMD_STRUCT_SIZE ? 1 : -1]
	    __attribute__((__unused__));

	printf("Rebooting...\n");
	exit();
	return 0; /* just in case */
}

#ifndef SMALL_BOOT
static int
Xcat(void)
{
	int fd, rc = 0, i, nlin = 0;
	char abuf[80], *cp;

	if (!cmd.argv[1])
		return (0);
	if ((fd = open(qualify(cmd.argv[1]), 0)) < 0) {
		printf("open(%s): %s\n", cmd.argv[1], strerror(errno));
		return (0);
	}

	while ((rc = read(fd, abuf, 79)) > 0) {
		abuf[rc] = 0;
		cp = abuf;
		for (i = 0; i < rc; ++i) {
			if (abuf[i] != '\n')
				continue;
			if (++nlin < 23)
				continue;
			abuf[i] = 0;
			printf("%s\n%s", cp, "-- more --");
			if ((cngetc() | 0x20) == 'q')
				goto out;
			putchar('\n');
			cp = abuf + i + 1;
			nlin = 0;
		}
		printf("%s", cp);
	}
 out:
	putchar('\n');

	close(fd);
	return (0);
}

static int
Xmacro(void)
{
	struct cmd_table *ct = cmd_table, *ft;
	char ch, *cp, *s;
	int i;

	if (cmd.argc == 1) {
		printf("macros:");
		while (ct->cmd_type != CMDT_EOL) {
			if (ct->cmd_type == CMDT_MAC && ct->cmd_name)
				printf(" %s", ct->cmd_name);
			++ct;
		}
		putchar('\n');
	} else {
		ft = NULL;
		while (ct->cmd_type != CMDT_EOL) {
			if (ct->cmd_type == CMDT_MAC) {
				if (ct->cmd_name == NULL)
					ft = ct;
				else if (!strcmp(ct->cmd_name, cmd.argv[1]))
					break;
			}
			++ct;
		}
		if (cmd.argc == 2) {
			if (ct->cmd_type != CMDT_EOL) {
				free(ct->cmd_name, 0);
				free(ct->cmd_exec, CMD_BUFF_SIZE);
				ct->cmd_name = NULL;
			}
			return (0);
		}
		if (ct->cmd_type == CMDT_EOL && (ct = ft) == NULL) {
			printf("macro: no free entries\n");
			return (0);
		}
		ct->cmd_name = alloc((i = strlen(cmd.argv[1]) + 1));
		memcpy(ct->cmd_name, cmd.argv[1], i);
		ct->cmd_exec = alloc(CMD_BUFF_SIZE);
		i = 2;
		cp = (char *)ct->cmd_exec;
		while ((s = cmd.argv[i])) {
			if (i > 2)
				*cp++ = ' ';
			while ((ch = *s++))
				/* macro text ~ is a newline */
				*cp++ = ch == '~' ? '`' : ch;
			++i;
		}
		*cp = '\0';
	}
	return (0);
}
#endif
@


1.25
log
@move cmd_buf[] to ssbss section
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.24 2009/10/24 14:16:52 tg Exp $	*/
d5 2
a6 1
 * Copyright (c) 2008-2009 Thorsten Glaser
d591 1
a591 1
	    __attribute__((unused));
@


1.25.2.1
log
@attempt to move *all* of .bss to 3000:0000h and up
(when loaded via gPXE+PXELINUX, fighting memory corruption?)

XXX we *really* need a position-independent or relocatable boot
XXX loader; sadly, gcc’s idea of PIC/PIE cannot be of any help…
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.25 2009/10/24 14:19:37 tg Exp $	*/
a68 4
/* bss */
struct cmd_state cmd;
char cmd_buf[CMD_BUFF_SIZE];

@


1.24
log
@compile time size test for certain structures
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.23 2009/01/31 22:43:26 tg Exp $	*/
a110 2
char cmd_buf[CMD_BUFF_SIZE];

@


1.23
log
@fsck'd this up in 100496E65BC344A5FF9
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.22 2009/01/14 22:22:43 tg Exp $	*/
d590 4
@


1.22
log
@get rid of strlcpy here (most things are safe or we sell rope anyway)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.21 2009/01/14 22:17:19 tg Exp $	*/
d580 1
a580 1
		memcpy(cmd.path, name, strlen(name));
@


1.21
log
@we do have strlen in libsa
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.19 2009/01/12 18:31:58 tg Exp $	*/
d322 1
a322 1
			strlcpy(buf, "boot", 5);
d580 1
a580 1
		strlcpy(cmd.path, name, sizeof(cmd.path));
@


1.20
log
@macro support
@
text
@d495 1
a495 3
		/* no strlen in lib !!! */
		for (p = cmd.path; *p; p++)
			;
@


1.19
log
@page the “ls” command as well
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.18 2009/01/11 22:52:34 tg Exp $	*/
d57 3
d70 1
a70 1
const struct cmd_table cmd_table[] = {
d87 3
d95 5
d101 1
a101 1
	{NULL, 0},
d231 7
d287 5
a291 2
	while ((*ct)->cmd_name != NULL && strncmp(p, (*ct)->cmd_name, l))
		(*ct)++;
d293 1
a293 1
	if ((*ct)->cmd_name == NULL)
d635 56
@


1.18
log
@to hell with cmd_buf now…
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.17 2009/01/10 19:23:15 tg Exp $	*/
d458 1
a458 1
	int fd;
d481 6
d493 1
d599 1
a599 1
			printf("%s\n-- more --", cp);
@


1.17
log
@use cngetc() for silent reads here
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.16 2009/01/10 14:30:45 tg Exp $	*/
d100 1
a100 1
extern char cmd_buf[CMD_BUFF_SIZE];
@


1.16
log
@use cmd_buf as istack replacement (warning: smallish)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.15 2009/01/10 14:11:41 tg Exp $	*/
d593 1
a593 1
			if ((getchar() | 0x20) == 'q')
@


1.15
log
@gah!
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.14 2009/01/10 14:11:17 tg Exp $	*/
d100 1
a100 1
char cmd_buf[CMD_BUFF_SIZE];
@


1.14
log
@paginate cat output
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.13 2009/01/10 14:02:41 tg Exp $	*/
d593 1
a593 1
			if (getchar() | 0x20 == 'q')
@


1.13
log
@missing initialisation
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.12 2009/01/01 23:27:46 tg Exp $	*/
d5 1
d573 2
a574 2
	int fd, rc = 0;
	char abuf[80];
d585 15
a599 1
		printf("%s", abuf);
d601 1
@


1.12
log
@expose some more things beyond file scope
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.11 2008/12/31 16:38:35 tg Exp $	*/
d187 1
a187 1
	char *p = NULL, *cp;
@


1.11
log
@shrink fdboot, nuke unused junk
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.10 2008/12/28 20:43:13 tg Exp $	*/
a97 1
static char *qualify(char *);
d544 1
a544 1
static char *
@


1.10
log
@allow multiple commands in a single line using U+0060 as separator,
in addition to U+000A newline; example see boot(8/i386) manpage
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.8 2008/12/28 03:47:44 tg Exp $	*/
d57 1
d59 1
d73 1
d75 1
@


1.9
log
@for → while
@
text
@d184 1
a184 1
	char *p = NULL;
d186 1
d193 1
d202 7
d228 2
a229 1
				return 0;
d243 9
a251 1
	return (*cmd.cmd->cmd_exec)();
@


1.8
log
@“cat” command, really helps in debugging
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.7 2008/08/01 12:39:09 tg Exp $	*/
d191 3
a193 2
		for (p = cmd_buf; *p == ' ' || *p == '\t'; p++)
			;
@


1.7
log
@remove unused code (for testing the bootloader on unix)
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.6 2008/08/01 11:56:10 tg Exp $	*/
d38 3
d67 3
d545 25
@


1.6
log
@it's boot.cfg not boot.conf *sigh*
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.5 2008/08/01 11:25:05 tg Exp $	*/
a225 4
#ifdef REGRESS
	printf("%s %s\n", cmd.argv[0],
	    (cmd.argv[1] == NULL) ? "(null)" : cmd.argv[1]);
#else
a226 1
#endif
@


1.5
log
@merge and reduce diff to obsd
XXX not yet tested
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.4 2006/11/21 02:53:39 tg Exp $	*/
d113 1
a113 1
		printf("boot.conf processing skipped at operator request\n");
@


1.4
log
@remove dead and insecure code
@
text
@d1 2
a2 2
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.3 2006/08/19 12:45:48 tg Exp $	*/
/*	$OpenBSD: cmd.c,v 1.52 2003/11/08 19:17:28 jmc Exp $	*/
a27 1
 *
d31 1
a32 1
#include <sys/reboot.h>
d56 4
a87 1
static int docmd(void);
d90 1
a90 1
char cmd_buf[133];
d97 1
a97 7
	switch (readline(cmd_buf, sizeof(cmd_buf), cmd.timeout))
	{
	default:
		cmd.timeout = 0;
		break;
	case 0:
		cmd.timeout = 0;
a98 5
		break;
	case -1:
		strncpy(cmd_buf, "boot", 5);
		break;
	}
d109 8
a116 1
	int fd, eof = 0;
d141 3
a143 2
			eof = read(fd, p, 1);
		} while (eof > 0 && *p++ != '\n');
d145 1
a145 1
		if (eof < 0)
d147 2
a148 2
		else
			*--p = '\0';
d150 20
a169 1
	} while (eof > 0 && !(eof = docmd()));
d172 1
a172 1
	return eof;
d175 1
a175 1
static int
d185 1
a185 1
		for (p = cmd_buf; *p && (*p == ' ' || *p == '\t'); p++)
d226 4
d231 1
a275 1
#if 0
a280 4
#else
		if (!cnischar())
			return -1;
#endif
d285 3
d308 7
a314 5
			if (p - buf < n-1)
				*p++ = ch;
			else {
				putchar('\007');
				putchar('\177');
@


1.3
log
@attempt at shrinking the floppy
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/stand/boot/cmd.c,v 1.2 2005/03/06 21:28:33 tg Exp $	*/
a33 1
#include <lib/libkern/funcs.h>
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 1
a1 1
/**	$MirOS$	*/
d42 1
d44 1
d48 1
d50 1
d65 1
d67 1
d74 1
d76 1
d80 1
d82 1
d393 1
d463 1
@


1.1
log
@Initial revision
@
text
@d1 1
d86 7
a92 1
	if (!readline(cmd_buf, sizeof(cmd_buf), cmd.timeout))
d94 5
d244 1
d250 4
a509 1

@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@import bootloader-related pieces from openbsd, as first part of the
aspired 4.4 merge… and something else
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.59 2007/04/27 10:08:34 tom Exp $	*/
d27 1
d31 1
a32 6

#ifdef REGRESS
#include <sys/stat.h>
#include <errno.h>
#else
#include <libsa.h>
a33 2
#endif

a52 4
#ifdef CHECK_SKIP_CONF
extern int CHECK_SKIP_CONF(void);
#endif

d75 1
d78 1
a78 1
char cmd_buf[CMD_BUFF_SIZE];
d97 1
a97 8
	int fd, rc = 0;

#ifdef CHECK_SKIP_CONF
	if (CHECK_SKIP_CONF()) {
		printf("boot.conf processing skipped at operator request\n");
		return -1;		/* Pretend file wasn't found */
	}
#endif
d122 2
a123 3
			rc = read(fd, p, 1);
		} while (rc > 0 && *p++ != '\n' &&
		    (p-cmd_buf) < sizeof(cmd_buf));
d125 1
a125 1
		if (rc < 0) {			/* Error from read() */
d127 2
a128 2
			break;
		}
d130 1
a130 20
		if (rc == 0) {			/* eof from read() */
			if (p != cmd_buf) {	/* Line w/o trailing \n */
				*p = '\0';
				rc = docmd();
				break;
			}
		} else {			/* rc > 0, read a char */
			p--;			/* Get back to last character */

			if (*p != '\n') {	/* Line was too long */
				printf("%s: line too long\n", cmd.path);

				/* Don't want to run the truncated command */
				rc = -1;
			}

			*p = '\0';
		}

	} while (rc > 0 && !(rc = docmd()));
d133 1
a133 1
	return rc;
d136 1
a136 1
int
d146 1
a146 1
		for (p = cmd_buf; *p == ' ' || *p == '\t'; p++)
a186 4
#ifdef REGRESS
	printf("%s %s\n", cmd.argv[0],
	    (cmd.argv[1] == NULL) ? "(null)" : cmd.argv[1]);
#else
a187 1
#endif
a240 3
	/* User has typed something.  Turn off timeouts. */
	cmd.timeout = 0;

d261 5
a265 7
			if (ch >= ' ' && ch < '\177') {
				if (p - buf < n-1)
					*p++ = ch;
				else {
					putchar('\007');
					putchar('\177');
				}
@

