head	1.17;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.2
	MIRBSD_10:1.8.0.2
	MIRBSD_10_BASE:1.8
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.17
date	2014.01.11.18.16.16;	author tg;	state Exp;
branches;
next	1.16;
commitid	10052D18A8038CC3F4D;

1.16
date	2011.01.03.19.02.52;	author tg;	state Exp;
branches;
next	1.15;
commitid	1004D221D691CE0C01C;

1.15
date	2010.01.10.20.18.55;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004B4A3588743BF0D3;

1.14
date	2009.11.09.19.43.46;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004AF870EF5AE8038B;

1.13
date	2008.08.01.19.07.45;	author tg;	state Exp;
branches;
next	1.12;
commitid	10048935EFB41305792;

1.12
date	2008.08.01.18.47.50;	author tg;	state Exp;
branches;
next	1.11;
commitid	10048935A670A60D296;

1.11
date	2008.08.01.18.39.57;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004893589041A05FFB;

1.10
date	2008.08.01.18.09.32;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004893513244B11E80;

1.9
date	2008.08.01.16.11.03;	author tg;	state Exp;
branches;
next	1.8;
commitid	100489335984C5EA2E5;

1.8
date	2007.03.02.03.13.28;	author tg;	state Exp;
branches;
next	1.7;
commitid	10045E7958604F58BEB;

1.7
date	2007.02.07.20.43.27;	author tg;	state Exp;
branches;
next	1.6;
commitid	10045CA39907FBE4A06;

1.6
date	2007.02.05.23.48.03;	author tg;	state Exp;
branches;
next	1.5;
commitid	10045C7C20A219A4CB5;

1.5
date	2007.02.05.20.16.15;	author tg;	state Exp;
branches;
next	1.4;
commitid	10045C78FD963274EDA;

1.4
date	2006.06.17.22.12.49;	author tg;	state Exp;
branches;
next	1.3;
commitid	10044947A600871A477;

1.3
date	2005.07.21.21.52.23;	author tg;	state Exp;
branches;
next	1.2;
commitid	181c42e0191f67ef;

1.2
date	2005.03.06.21.28.05;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.28.54;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.28.54;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.21.39.49;	author tg;	state Exp;
branches;
next	;
commitid	5f0d42e015f52f66;


desc
@@


1.17
log
@there is precisely zero reason to use random()/srandom() even in the kernel (since we initialise arc4random statically)
@
text
@# $MirOS: src/sys/lib/libkern/Makefile,v 1.16 2011/01/03 19:02:52 tg Exp $
# $NetBSD: Makefile,v 1.31 1996/08/10 04:01:31 mycroft Exp $
# $OpenBSD: Makefile,v 1.18 2004/11/28 07:20:25 mickey Exp $

LIB=		kern
NOPIC=		yes

MACHINE=	${XMACHINE}
MACHINE_ARCH=	${XMACHINE_ARCH}

KERNBASE?=	$S/../kern
.if ${KERNCPPFLAGS:M-DSMALL_KERNEL}
SMALL=		#defined
.endif

CPPFLAGS=	${KERNCPPFLAGS}

.include "${KERNBASE}/c/Makefile.inc"
.include "${KERNBASE}/z/Makefile.adler32"

# Other stuff
SRCS+=	getsn.c bcd.c

# Files to clean up
CLEANFILES+= lib${LIB}.o lib${LIB}.po

install:

.include <bsd.lib.mk>

lib${LIB}.o:: ${OBJS}
	@@echo building standard ${LIB} library
	@@rm -f lib${LIB}.o
	@@${LD} -r -o lib${LIB}.o `${LORDER} ${OBJS} | tsort`
@


1.16
log
@move strchr, strrchr, strncpy to kern; remove redundant strncmp, strncasecmp protos
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.15 2010/01/10 20:18:55 tg Exp $
d22 1
a22 1
SRCS+=	getsn.c srandom.c bcd.c
@


1.15
log
@• kern: new KERNISUSR (defined by libc and libmdsup, but not by either
  bootloader or kernel), enables new NUSRCS, UIF_NUSRCS
• move MD strncmp() to kern
• move MI {str,wcs}case{,n}cmp to kern
• make wcs* functions NU not KU as we don’t need them in the kernel YET
• move __main to NU (it’s a joke anyway, I think)
• bootloader: make devsw_prefix_match case-insensitive
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.14 2009/11/09 19:43:46 tg Exp $
a17 3
SRCS+=  	strncpy.c
SRCS+=		oaat.c

d22 1
a22 1
SRCS+=	getsn.c srandom.c bcd.c strchr.c
@


1.14
log
@improve RNG stuff with proper hashing
(checked arc4* stuff to avoid short cycles; OpenBSD already ensured that)
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.13 2008/08/01 19:07:45 tg Exp $
d18 1
a18 1
SRCS+=  	strncmp.c strncpy.c strncasecmp.c
@


1.13
log
@remove a few function bodies for things we can do inline and always have,
just not as well, and fine-tune the asm code for the bodies in libc
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.12 2008/08/01 18:47:50 tg Exp $
d19 1
@


1.12
log
@this one was folded into kern/c already
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.11 2008/08/01 18:39:57 tg Exp $
d18 1
a18 2
SRCS+=  	imax.c imin.c lmax.c lmin.c max.c min.c \
		ulmax.c ulmin.c strncmp.c strncpy.c strncasecmp.c
@


1.11
log
@move kernel-only files
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.10 2008/08/01 18:09:32 tg Exp $
d18 1
a18 1
SRCS+=  	__main.c imax.c imin.c lmax.c lmin.c max.c min.c \
@


1.10
log
@more migration

(in case you wonder: goal is to make libc, kernel and bootloaders share
the code currently in libkern, (some of) libsa, and libz, and to move
the bootloaders out of src/sys/ and into some more sane place)
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.9 2008/08/01 16:11:03 tg Exp $
a10 1
M=		${.CURDIR}/arch/${MACHINE_ARCH}
d16 1
a16 1
CPPFLAGS=	-I$M ${KERNCPPFLAGS}
d18 2
a19 4
.if exists ($M/Makefile.inc)
.PATH:	$M
.include "$M/Makefile.inc"
.endif
@


1.9
log
@move quad support into shared libkern (userland, kernel, bootloader)
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.8 2007/03/02 03:13:28 tg Exp $
a32 9
SRCS+=		tai_leaps.c
CLEANFILES+=	tai_leaps.c tai_make

tai_leaps.c: $S/lib/libkern/tai_make.c
	${HOSTCC} ${HOSTCFLAGS} ${HOSTCPPFLAGS} -o tai_make $>
	./tai_make >$@@ || (rm -f $@@; false)

beforedepend: tai_leaps.c

@


1.8
log
@• make the kernel use the adler32() stuff in src/kern, whose sources
  live in the z part but that, logically, more belongs to the c part
• export adler32 (over <sys/systm.h> -> libkern -> <libckern.h>) and
  the rnd_bootpool (via <sys/systm.h> directly) to all of the kernel
• adler32 for the kernel moves to libkern
• adler32 for the i386 bootloader moves to libsa
• adler32 for the sparc bootloader moves to libkern
• userland libz is not affected (yet); make depend still pulls it in

tested by building a GENERIC, a bsd.rd with it, a cdrom9.fs with the
new bootloader (i386), qemu'ing that
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.7 2007/02/07 20:43:27 tg Exp $
a26 5
# Quad support
SRCS+=	adddi3.c anddi3.c ashldi3.c ashrdi3.c cmpdi2.c divdi3.c iordi3.c \
	lshldi3.c lshrdi3.c moddi3.c muldi3.c negdi2.c notdi2.c qdivrem.c \
	subdi3.c  ucmpdi2.c udivdi3.c umoddi3.c xordi3.c

@


1.7
log
@* attempt to move taitime(3) functions from libc and kernel to kernbase,
  its prototypes from <time.h> and <sys/time.h> (which includes <time.h>)
  and <lib/libkern/taitime.h> to <sys/taitime.h>, split between indepen-
  dent and dependent (kernel/userland different leap table initialisation;
  userland additional tai_time(), taina_time(), importtai(), exporttai()),
  reduce required headers; reduce diff from headers to upstream
* move kernel tai leap second table from kernel objects to libkern
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.6 2007/02/05 23:48:03 tg Exp $
d25 1
@


1.6
log
@make src/kern stuff behave differently .ifdef SMALL, defined by:
- libsa/libkern bootloader
- libkern kernel #ifdef SMALL_KERNEL
- not yet: distrib/special/lib*
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.5 2007/02/05 20:16:15 tg Exp $
d32 1
a32 1
SRCS+=	getsn.c srandom.c bcd.c strchr.c taitime.c
d37 9
@


1.5
log
@proof-of-concept implementation of a few functions for the
new "kern" directory containing stuff shared between
* userland (-fhosted -lgcc)
* kernel (-ffreestanding -D_KERNEL -nostdlib)
* bootloader (-ffreestanding -D_STANDALONE -nostdlib)

Here, userland and kernel share some functions not for the
bootloader (e.g. utf-8 stuff), while kernel and bootloader
share a few libgcc replacement functions.

I took the htonl() &c. functions because they were pretty
easy to implement; no sparc assembly version because it's
a 'no-op' and I trust gcc so much as to produce optimised
output for the type foo(type x) { return (x); } case.

Not tested.

Most of the functions will be written "on demand" and re-
written from scratch by me.
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.4 2006/06/17 22:12:49 tg Exp $
d13 3
@


1.4
log
@remove more of these AMD64 remains
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.3 2005/07/21 21:52:23 tg Exp $
d5 2
a6 2
LIB=	kern
NOPIC=	yes
d11 2
a12 1
M=	${.CURDIR}/arch/${MACHINE_ARCH}
d21 2
@


1.3
log
@merge and bump patchlevel (kernel only)
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/Makefile,v 1.2 2005/03/06 21:28:05 tg Exp $
a19 3
.if (${MACHINE_ARCH} != "alpha" && ${MACHINE} != "sgi" && \
    ${MACHINE_ARCH} != "sparc64") && ${MACHINE} != "amd64" && \
    ${MACHINE} != "hppa64"
a23 1
.endif
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 1
a1 2
# $MirOS$
# $OpenBSD: Makefile,v 1.17 2004/05/07 14:42:27 millert Exp $
d3 1
d21 2
a22 1
    ${MACHINE_ARCH} != "sparc64") && ${MACHINE} != "amd64"
@


1.1
log
@Initial revision
@
text
@d1 3
a3 2
#	$OpenBSD: Makefile,v 1.17 2004/05/07 14:42:27 millert Exp $
#	$NetBSD: Makefile,v 1.31 1996/08/10 04:01:31 mycroft Exp $
d6 1
a6 1
NOPIC=
d29 1
a29 1
SRCS+=	getsn.c srandom.c bcd.c strchr.c
a33 4
# mcount cannot be compiled with profiling
mcount.po: mcount.o
	cp mcount.o mcount.po

a41 6

POBJS+=	${OBJS:.o=.po} mcount.po
lib${LIB}.po:: ${POBJS}
	@@echo building profiled ${LIB} library
	@@rm -f lib${LIB}.po
	@@${LD} -r -o lib${LIB}.po `${LORDER} ${POBJS} | tsort`
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@merge more OpenBSD-HEAD stuff
@
text
@d1 2
a2 1
#	$OpenBSD: Makefile,v 1.18 2004/11/28 07:20:25 mickey Exp $
d20 1
a20 2
    ${MACHINE_ARCH} != "sparc64") && ${MACHINE} != "amd64" && \
    ${MACHINE} != "hppa64"
@

