head	1.3;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.1
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2008.08.01.18.39.59;	author tg;	state dead;
branches;
next	1.2;
commitid	1004893589041A05FFB;

1.2
date	2006.11.21.02.28.27;	author tg;	state Exp;
branches;
next	1.1;
commitid	100456263EF126F4A4E;

1.1
date	2005.02.05.17.28.58;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.28.58;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@move kernel-only files
@
text
@/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: SYS.h,v 1.15 2003/06/02 20:18:30 millert Exp $
 */

#include <machine/asm.h>
#include <sys/syscall.h>

/*
 * Design note:
 *
 * System calls entry points are really named _thread_sys_{syscall},
 * and weakly aliased to the name {syscall}. This allows the thread
 * library to replace system calls at link time.
 */

/* Use both _thread_sys_{syscall} and [weak] {syscall}. */

#ifdef __STDC__
#define	SYSENTRY(x)					\
			ENTRY(_thread_sys_ ## x)	\
			.weak _C_LABEL(x);		\
			_C_LABEL(x) = _C_LABEL(_thread_sys_ ## x)
#else /* ! __STDC__ */
#define	SYSENTRY(x)					\
			ENTRY(_thread_sys_/**/x)	\
			.weak _C_LABEL(x);		\
			_C_LABEL(x) = _C_LABEL(_thread_sys_/**/x)
#endif /* ! __STDC__ */

#ifdef __STDC__
#define	__DO_SYSCALL(x)					\
			movl $(SYS_ ## x),%eax;		\
			int $0x80
#else /* ! __STDC__ */
#define	__DO_SYSCALL(x)					\
			movl $(SYS_/**/x),%eax;		\
			int $0x80
#endif /* ! __STDC__ */

#define CERROR          _C_LABEL(__cerror)
#define CURBRK          _C_LABEL(__curbrk)

/* perform a syscall */
#define	_SYSCALL_NOERROR(x,y)				\
		SYSENTRY(x);				\
			__DO_SYSCALL(y);

#define	SYSCALL_NOERROR(x)				\
		_SYSCALL_NOERROR(x,x)

/* perform a syscall, set errno */
#ifdef PIC
#define	_SYSCALL(x,y)					\
			.text;				\
			.align 2;			\
		2:	PIC_PROLOGUE;			\
			movl PIC_GOT(CERROR), %ecx;	\
			PIC_EPILOGUE;			\
			jmp *%ecx;			\
		_SYSCALL_NOERROR(x,y)			\
			jc 2b
#else
#define	_SYSCALL(x,y)					\
			.text;				\
			.align 2;			\
		2:					\
			jmp PIC_PLT(CERROR);		\
		_SYSCALL_NOERROR(x,y)			\
			jc 2b
#endif

#define	SYSCALL(x)					\
		_SYSCALL(x,x)

/* perform a syscall, return */
#define	PSEUDO_NOERROR(x,y)				\
		_SYSCALL_NOERROR(x,y);			\
			ret

/* perform a syscall, set errno, return */
#define	PSEUDO(x,y)					\
		_SYSCALL(x,y);				\
			ret

/* perform a syscall with the same name, set errno, return */
#define	RSYSCALL(x)					\
			PSEUDO(x,x);

	.globl	CERROR
@


1.2
log
@sync with libc

attention: possible regressions:
* everything with RCS IDs, SCCS IDs, ident, indentation, weak aliases,
  and the .gnu.warning.* stuff
* these:
  - sys/lib/libkern/qdivrem.c
  - sys/lib/libkern/strcat.c
  - sys/lib/libkern/strcpy.c
* especially these:
  - sys/lib/libkern/arch/i386/SYS.h
  - sys/lib/libkern/arch/sparc/SYS.h
* I reverted these and did NOT commit the change, because they
  look bogus to me:
  - sys/lib/libkern/arch/sparc/_setjmp.S
  - sys/lib/libkern/arch/sparc/divrem.m4

Also, __P() and so on were introduced e.g. in strcat(), and IMHO,
this code needs more work in libc as well.
@
text
@@


1.1
log
@Initial revision
@
text
@a0 2
/*	$OpenBSD: SYS.h,v 1.3 2003/06/02 23:28:08 millert Exp $	*/

d32 1
a32 1
 *	from: @@(#)SYS.h	5.5 (Berkeley) 5/7/91
d38 80
a117 4
#define	SYSCALL(x)	.text; .align 2; 2: jmp PIC_PLT(cerror); ENTRY(x); movl $(SYS_/**/x),%eax; int $0x80; jc 2b
#define	RSYSCALL(x)	SYSCALL(x); ret
#define	PSEUDO(x,y)	ENTRY(x); movl $(SYS_/**/y),%eax; int $0x80; ret
#define	CALL(x,y)	call PIC_PLT(_/**/y); addl $4*x,%esp
d119 1
a119 1
	.globl	cerror
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
