head	1.8;
access;
symbols
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2;
locks; strict;
comment	@# @;


1.8
date	2008.08.01.18.40.01;	author tg;	state dead;
branches;
next	1.7;
commitid	1004893589041A05FFB;

1.7
date	2008.08.01.18.31.06;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004893567C55E13A4E;

1.6
date	2008.08.01.18.09.41;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004893513244B11E80;

1.5
date	2008.08.01.16.35.26;	author tg;	state Exp;
branches;
next	1.4;
commitid	10048933B5E5B20CA97;

1.4
date	2007.02.06.16.24.45;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045C8ABB857CB69A4;

1.3
date	2007.02.05.20.16.17;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045C78FD963274EDA;

1.2
date	2005.03.14.22.39.48;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.28.58;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.28.58;	author tg;	state Exp;
branches;
next	;


desc
@@


1.8
log
@move kernel-only files
@
text
@# $MirOS: src/sys/lib/libkern/arch/sparc/Makefile.inc,v 1.7 2008/08/01 18:31:06 tg Exp $
# $OpenBSD: Makefile.inc,v 1.11 2003/06/01 17:00:31 deraadt Exp $
# $NetBSD: Makefile.inc,v 1.12 1996/04/23 23:05:22 christos Exp $

SRCS+=  __main.c imax.c imin.c lmax.c lmin.c max.c min.c ulmax.c ulmin.c \
	strncmp.c \
	strncpy.c scanc.c skpc.c \
	strncasecmp.c
@


1.7
log
@merge some more SPARC specifics
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/arch/sparc/Makefile.inc,v 1.6 2008/08/01 18:09:41 tg Exp $
@


1.6
log
@more migration

(in case you wonder: goal is to make libc, kernel and bootloaders share
the code currently in libkern, (some of) libsa, and libz, and to move
the bootloaders out of src/sys/ and into some more sane place)
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/arch/sparc/Makefile.inc,v 1.5 2008/08/01 16:35:26 tg Exp $
a8 33

SRCS+=	rem.S sdiv.S udiv.S urem.S
SRCS+=	saveregs.S

# `source' files built from m4 source
# the name `div.o' is taken for the ANSI C `div' function, hence sdiv here
SRCS+=	rem.S sdiv.S udiv.S urem.S
CLEANFILES+=rem.S sdiv.S udiv.S urem.S

sdiv.S: divrem.m4
	echo 'building ${.TARGET} from ${.ALLSRC}'
	(echo "define(NAME,\`.div')define(NAME2,\`_C_LABEL(_div)')define(OP,\`div')define(S,\`true')"; \
	 cat ${.ALLSRC}) | m4 > ${.TARGET}
	chmod 444 ${.TARGET}

udiv.S: divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`.udiv')define(NAME2,\`_C_LABEL(_udiv)')define(OP,\`div')define(S,\`false')"; \
	 cat ${.ALLSRC}) | m4 > ${.TARGET}
	@@chmod 444 ${.TARGET}

rem.S:	divrem.m4
	echo 'building ${.TARGET} from ${.ALLSRC}'
	(echo "define(NAME,\`.rem')define(NAME2,\`_C_LABEL(_rem)')define(OP,\`rem')define(S,\`true')"; \
	 cat ${.ALLSRC}) | m4 > ${.TARGET}
	chmod 444 ${.TARGET}

urem.S: divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`.urem')define(NAME2,\`_C_LABEL(_urem)')define(OP,\`rem')define(S,\`false')"; \
	 cat ${.ALLSRC}) | m4 > ${.TARGET}
	@@chmod 444 ${.TARGET}

@


1.5
log
@migrate strlcat/strlcpy/strxfrm and wcs* equivalents
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/arch/sparc/Makefile.inc,v 1.4 2007/02/06 16:24:45 tg Exp $
a5 2
	memchr.c memcmp.c memset.c \
	bcmp.c bzero.S strcmp.c \
@


1.4
log
@next proof-of-concept move: strlen (no asm yet)
XXX libkern/libsa include path might be missing
XXX libkern/libsa/MD-libkern/MD-libsa build is ugly
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/arch/sparc/Makefile.inc,v 1.3 2007/02/05 20:16:17 tg Exp $
d7 1
a7 1
	bcmp.c bzero.S strcmp.c strlfun.c \
@


1.3
log
@proof-of-concept implementation of a few functions for the
new "kern" directory containing stuff shared between
* userland (-fhosted -lgcc)
* kernel (-ffreestanding -D_KERNEL -nostdlib)
* bootloader (-ffreestanding -D_STANDALONE -nostdlib)

Here, userland and kernel share some functions not for the
bootloader (e.g. utf-8 stuff), while kernel and bootloader
share a few libgcc replacement functions.

I took the htonl() &c. functions because they were pretty
easy to implement; no sparc assembly version because it's
a 'no-op' and I trust gcc so much as to produce optimised
output for the type foo(type x) { return (x); } case.

Not tested.

Most of the functions will be written "on demand" and re-
written from scratch by me.
@
text
@d1 1
a1 1
# $MirOS: src/sys/lib/libkern/arch/sparc/Makefile.inc,v 1.2 2005/03/14 22:39:48 tg Exp $
d8 1
a8 1
	strlen.S strncmp.c \
@


1.2
log
@use our strlcpy/strlcat implementation here, too
@
text
@d1 1
a1 1
# $MirOS$
d9 1
a9 1
	strncpy.c htonl.S htons.S ntohl.S ntohs.S scanc.c skpc.c \
@


1.1
log
@Initial revision
@
text
@d1 3
a3 2
#	$OpenBSD: Makefile.inc,v 1.11 2003/06/01 17:00:31 deraadt Exp $
#	$NetBSD: Makefile.inc,v 1.12 1996/04/23 23:05:22 christos Exp $
d7 1
a7 1
	bcmp.c bzero.S strcmp.c strlcat.c strlcpy.c \
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
