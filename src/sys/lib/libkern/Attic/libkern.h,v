head	1.9;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.2
	MIRBSD_10:1.5.0.2
	MIRBSD_10_BASE:1.5
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2008.09.06.22.21.02;	author tg;	state dead;
branches;
next	1.8;
commitid	10048C3024808C8EDD3;

1.8
date	2008.08.04.19.10.54;	author tg;	state Exp;
branches;
next	1.7;
commitid	100489754457590501A;

1.7
date	2008.08.03.21.02.04;	author tg;	state Exp;
branches;
next	1.6;
commitid	10048961CCE67B72AC5;

1.6
date	2008.08.01.16.35.25;	author tg;	state Exp;
branches;
next	1.5;
commitid	10048933B5E5B20CA97;

1.5
date	2007.02.06.16.24.43;	author tg;	state Exp;
branches;
next	1.4;
commitid	10045C8ABB857CB69A4;

1.4
date	2006.11.21.13.20.09;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004562FD195F9D6C3A;

1.3
date	2006.11.21.02.40.39;	author tg;	state Exp;
branches;
next	1.2;
commitid	100456267237794E11F;

1.2
date	2006.11.21.00.13.45;	author tg;	state Exp;
branches;
next	1.1;
commitid	100456244BD5F3B7B8B;

1.1
date	2005.02.05.17.28.55;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.28.55;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.21.39.50;	author tg;	state Exp;
branches;
next	;
commitid	5f0d42e015f52f66;


desc
@@


1.9
log
@move lib/libkern/libkern.h to sys/slibkern.h where it gets installed,
since other installed headers reference it (e.g. for building LKMs)
@
text
@/**	$MirOS: src/sys/lib/libkern/libkern.h,v 1.8 2008/08/04 19:10:54 tg Exp $ */
/*	$OpenBSD: libkern.h,v 1.22 2004/08/07 00:38:32 deraadt Exp $	*/
/*	$NetBSD: libkern.h,v 1.7 1996/03/14 18:52:08 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)libkern.h	8.1 (Berkeley) 6/10/93
 */

#ifndef __LIBKERN_H__
#define __LIBKERN_H__

#include <libckern.h>

#ifdef NDEBUG						/* tradition! */
#define	assert(e)	((void)0)
#else
#ifdef __STDC__
#define	assert(e)	((e) ? (void)0 :				    \
			    __assert("", __FILE__, __LINE__, #e))
#else
#define	assert(e)	((e) ? (void)0 :				    \
			    __assert("", __FILE__, __LINE__, "e"))
#endif
#endif

#ifndef DIAGNOSTIC
#define	KASSERT(e)	((void)0)
#else
#ifdef __STDC__
#define	KASSERT(e)	((e) ? (void)0 :				    \
			    __assert("diagnostic ", __FILE__, __LINE__, #e))
#else
#define	KASSERT(e)	((e) ? (void)0 :				    \
			    __assert("diagnostic ", __FILE__, __LINE__, "e"))
#endif
#endif

#ifndef DEBUG
#define	KDASSERT(e)	((void)0)
#else
#ifdef __STDC__
#define	KDASSERT(e)	((e) ? (void)0 :				    \
			    __assert("debugging ", __FILE__, __LINE__, #e))
#else
#define	KDASSERT(e)	((e) ? (void)0 :				    \
			    __assert("debugging ", __FILE__, __LINE__, "e"))
#endif
#endif

/* Prototypes for non-quad routines. */
void	 __assert(const char *, const char *, int, const char *)
	    __attribute__ ((__noreturn__));
int	 locc(int, char *, u_int);
u_long	 random(void);
void	 srandom(u_long);
int	 scanc(u_int, const u_char *, const u_char [], int);
int	 skpc(int, size_t, u_char *);
char	*strncpy(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
int	 strncmp(const char *, const char *, size_t);
int	 strncasecmp(const char *, const char *, size_t);
int	 getsn(char *, int);
char	*strchr(const char *, int);
char	*strrchr(const char *, int);

extern u_int8_t const __bcd2bin[], __bin2bcd[];
#define	bcd2bin(b)	(__bcd2bin[(b)&0xff])
#define	bin2bcd(b)	(__bin2bcd[(b)&0xff])

#define memcpy(d,s,n)	memmove((d), (s), (n))
#define bcopy(s,d,n)	(void)memmove((d), (s), (n))

#endif /* __LIBKERN_H__ */
@


1.8
log
@next round of build etc. fixes
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/lib/libkern/libkern.h,v 1.7 2008/08/03 21:02:04 tg Exp $ */
@


1.7
log
@Hacked in the train to Zwitserland:

• new: memcpy()=bcopy()=memmove()
• new macro: __strong_alias (incidentally, TNF has exactly the same name
  and exactly (except an ‘a’ more) the same implementation)
• use __strong_alias and #ifdef lint instead of duplicate code via unifdef
  abuse
• sprinkle a few uses of _ALIGN_TEXT
• remove duplicate memmove, memcpy, bcopy and ovbcopy implementations
  from the i386 kernel
• _ALIGN_TEXT is a nop #ifdef SMALL
• remove more duplicate definitions, etc.
• remove more dead code from bootloader -D_TEST
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/lib/libkern/libkern.h,v 1.6 2008/08/01 16:35:25 tg Exp $ */
d98 1
a98 1
#define bcopy(s,d,n)	(void)memmove((s), (d), (n))
@


1.6
log
@migrate strlcat/strlcpy/strxfrm and wcs* equivalents
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/lib/libkern/libkern.h,v 1.5 2007/02/06 16:24:43 tg Exp $ */
d39 1
a39 75
#include <sys/types.h>

#ifndef LIBKERN_INLINE
#define LIBKERN_INLINE	static __inline
#define LIBKERN_BODY
#endif


LIBKERN_INLINE int imax(int, int);
LIBKERN_INLINE int imin(int, int);
LIBKERN_INLINE u_int max(u_int, u_int);
LIBKERN_INLINE u_int min(u_int, u_int);
LIBKERN_INLINE long lmax(long, long);
LIBKERN_INLINE long lmin(long, long);
LIBKERN_INLINE u_long ulmax(u_long, u_long);
LIBKERN_INLINE u_long ulmin(u_long, u_long);
LIBKERN_INLINE int abs(int);

#ifdef LIBKERN_BODY
LIBKERN_INLINE int
imax(a, b)
	int a, b;
{
	return (a > b ? a : b);
}
LIBKERN_INLINE int
imin(a, b)
	int a, b;
{
	return (a < b ? a : b);
}
LIBKERN_INLINE long
lmax(a, b)
	long a, b;
{
	return (a > b ? a : b);
}
LIBKERN_INLINE long
lmin(a, b)
	long a, b;
{
	return (a < b ? a : b);
}
LIBKERN_INLINE u_int
max(a, b)
	u_int a, b;
{
	return (a > b ? a : b);
}
LIBKERN_INLINE u_int
min(a, b)
	u_int a, b;
{
	return (a < b ? a : b);
}
LIBKERN_INLINE u_long
ulmax(a, b)
	u_long a, b;
{
	return (a > b ? a : b);
}
LIBKERN_INLINE u_long
ulmin(a, b)
	u_long a, b;
{
	return (a < b ? a : b);
}

LIBKERN_INLINE int
abs(j)
	int j;
{
	return(j < 0 ? -j : j);
}
#endif
a79 3
int	 bcmp(const void *, const void *, size_t);
void	 bzero(void *, size_t);
int	 ffs(int);
a80 2
void	*memchr(const void *, int, size_t);
int	 memcmp(const void *, const void *, size_t);
a86 1
int	 strcmp(const char *, const char *);
d97 2
a98 1
#include <libckern.h>
@


1.5
log
@next proof-of-concept move: strlen (no asm yet)
XXX libkern/libsa include path might be missing
XXX libkern/libsa/MD-libkern/MD-libsa build is ugly
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/lib/libkern/libkern.h,v 1.4 2006/11/21 13:20:09 tg Exp $ */
a163 4
size_t	 strlcpy(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
size_t	 strlcat(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
@


1.4
log
@correct strlcpy defns
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/lib/libkern/libkern.h,v 1.3 2006/11/21 02:40:39 tg Exp $ */
a167 1
size_t	 strlen(const char *);
d181 2
@


1.3
log
@unmerge lib/libc/string/strcasecmpfun.c and sys/lib/libkern/strncasecmp.c,
for simplicity
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/lib/libkern/libkern.h,v 1.2 2006/11/21 00:13:45 tg Exp $ */
a163 3
size_t	 strlen(const char *);
char	*strncpy(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
d168 3
@


1.2
log
@add the non-intrusive _tolower and _toupper macros from <ctype.h>
@
text
@d1 1
a1 1
/**	$MirOS$ */
a181 3
#define _tolower(c)	(((c) >= 'A') && ((c) <= 'Z') ? (c) - 'A' + 'a' : (c))
#define _toupper(c)	(((c) >= 'a') && ((c) <= 'z') ? (c) - 'a' + 'A' : (c))

@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: libkern.h,v 1.20 2004/05/06 01:12:05 deraadt Exp $	*/
d155 1
d162 1
a162 1
int	 scanc(u_int, const u_char *, const u_char *, int);
d165 6
a170 3
char	*strncpy(char *, const char *, size_t);
size_t	 strlcpy(char *, const char *, size_t);
size_t	 strlcat(char *, const char *, size_t);
d182 3
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@merge more OpenBSD-HEAD stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.22 2004/08/07 00:38:32 deraadt Exp $	*/
a153 1
void	 bzero(void *, size_t);
d160 1
a160 1
int	 scanc(u_int, const u_char *, const u_char [], int);
d163 3
a165 6
char	*strncpy(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
size_t	 strlcpy(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
size_t	 strlcat(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
@

