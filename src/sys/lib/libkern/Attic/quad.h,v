head	1.3;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.2
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2008.08.01.16.11.07;	author tg;	state dead;
branches;
next	1.2;
commitid	100489335984C5EA2E5;

1.2
date	2006.11.21.02.28.25;	author tg;	state Exp;
branches;
next	1.1;
commitid	100456263EF126F4A4E;

1.1
date	2005.02.05.17.28.55;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.28.55;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.21.39.51;	author tg;	state Exp;
branches;
next	;
commitid	5f0d42e015f52f66;


desc
@@


1.3
log
@move quad support into shared libkern (userland, kernel, bootloader)
@
text
@/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: quad.h,v 1.6 2004/11/28 07:09:13 mickey Exp $
 */

/*
 * Quad arithmetic.
 *
 * This library makes the following assumptions:
 *
 *  - The type long long (aka quad_t) exists.
 *
 *  - A quad variable is exactly twice as long as `int'.
 *
 *  - The machine's arithmetic is two's complement.
 *
 * This library can provide 128-bit arithmetic on a machine with 128-bit
 * quads and 64-bit ints, for instance, or 96-bit arithmetic on machines
 * with 48-bit ints.
 */

#include <sys/types.h>
#if !defined(_KERNEL) && !defined(_STANDALONE)
#include <limits.h>
#else
#include <sys/limits.h>
#endif

/*
 * Depending on the desired operation, we view a `long long' (aka quad_t) in
 * one or more of the following formats.
 */
union uu {
	quad_t	q;		/* as a (signed) quad */
	u_quad_t uq;		/* as an unsigned quad */
	int	sl[2];		/* as two signed ints */
	u_int	ul[2];		/* as two unsigned ints */
};

/*
 * Define high and low parts of a quad_t.
 */
#define	H		_QUAD_HIGHWORD
#define	L		_QUAD_LOWWORD

/*
 * Total number of bits in a quad_t and in the pieces that make it up.
 * These are used for shifting, and also below for halfword extraction
 * and assembly.
 */
#define	QUAD_BITS	(sizeof(quad_t) * CHAR_BIT)
#define	INT_BITS	(sizeof(int) * CHAR_BIT)
#define	HALF_BITS	(sizeof(int) * CHAR_BIT / 2)

/*
 * Extract high and low shortwords from longword, and move low shortword of
 * longword to upper half of long, i.e., produce the upper longword of
 * ((quad_t)(x) << (number_of_bits_in_int/2)).  (`x' must actually be u_int.)
 *
 * These are used in the multiply code, to split a longword into upper
 * and lower halves, and to reassemble a product as a quad_t, shifted left
 * (sizeof(int)*CHAR_BIT/2).
 */
#define	HHALF(x)	((u_int)(x) >> HALF_BITS)
#define	LHALF(x)	((u_int)(x) & (((int)1 << HALF_BITS) - 1))
#define	LHUP(x)		((u_int)(x) << HALF_BITS)

/*
 * XXX
 * Compensate for gcc 1 vs gcc 2.  Gcc 1 defines ?sh?di3's second argument
 * as u_quad_t, while gcc 2 correctly uses int.  Unfortunately, we still use
 * both compilers.
 */
#if __GNUC_PREREQ__(2, 0) || defined(lint)
typedef unsigned int	qshift_t;
#else
typedef u_quad_t	qshift_t;
#endif

quad_t __adddi3(quad_t, quad_t);
quad_t __anddi3(quad_t, quad_t);
quad_t __ashldi3(quad_t, qshift_t);
quad_t __ashrdi3(quad_t, qshift_t);
int __cmpdi2(quad_t, quad_t);
quad_t __divdi3(quad_t, quad_t);
quad_t __fixdfdi(double);
quad_t __fixsfdi(float);
u_quad_t __fixunsdfdi(double);
u_quad_t __fixunssfdi(float);
double __floatdidf(quad_t);
float __floatdisf(quad_t);
double __floatunsdidf(u_quad_t);
quad_t __iordi3(quad_t, quad_t);
quad_t __lshldi3(quad_t, qshift_t);
quad_t __lshrdi3(quad_t, qshift_t);
quad_t __moddi3(quad_t, quad_t);
quad_t __muldi3(quad_t, quad_t);
quad_t __negdi2(quad_t);
quad_t __one_cmpldi2(quad_t);
u_quad_t __qdivrem(u_quad_t, u_quad_t, u_quad_t *);
quad_t __subdi3(quad_t, quad_t);
int __ucmpdi2(u_quad_t, u_quad_t);
u_quad_t __udivdi3(u_quad_t, u_quad_t );
u_quad_t __umoddi3(u_quad_t, u_quad_t );
quad_t __xordi3(quad_t, quad_t);
@


1.2
log
@sync with libc

attention: possible regressions:
* everything with RCS IDs, SCCS IDs, ident, indentation, weak aliases,
  and the .gnu.warning.* stuff
* these:
  - sys/lib/libkern/qdivrem.c
  - sys/lib/libkern/strcat.c
  - sys/lib/libkern/strcpy.c
* especially these:
  - sys/lib/libkern/arch/i386/SYS.h
  - sys/lib/libkern/arch/sparc/SYS.h
* I reverted these and did NOT commit the change, because they
  look bogus to me:
  - sys/lib/libkern/arch/sparc/_setjmp.S
  - sys/lib/libkern/arch/sparc/divrem.m4

Also, __P() and so on were introduced e.g. in strcat(), and IMHO,
this code needs more work in libc as well.
@
text
@@


1.1
log
@Initial revision
@
text
@a0 3
/*	$OpenBSD: quad.h,v 1.8 2003/06/02 23:28:08 millert Exp $	*/
/*	$NetBSD: quad.h,v 1.7 1996/04/18 02:20:04 cgd Exp $	*/

d33 1
a33 1
 *	@@(#)quad.h	8.1 (Berkeley) 6/4/93
d43 1
a43 1
 *  - A quad variable is exactly twice as long as `long'.
d48 2
a49 2
 * quads and 64-bit longs, for instance, or 96-bit arithmetic on machines
 * with 48-bit longs.
d66 2
a67 2
	long	sl[2];		/* as two signed longs */
	u_long	ul[2];		/* as two unsigned longs */
d71 1
a71 1
 * Define high and low longwords.
d82 2
a83 2
#define	LONG_BITS	(sizeof(long) * CHAR_BIT)
#define	HALF_BITS	(sizeof(long) * CHAR_BIT / 2)
d88 1
a88 1
 * ((quad_t)(x) << (number_of_bits_in_long/2)).  (`x' must actually be u_long.)
d92 1
a92 1
 * (sizeof(long)*CHAR_BIT/2).
d94 3
a96 5
#define	HHALF(x)	((u_long)(x) >> HALF_BITS)
#define	LHALF(x)	((u_long)(x) & (((long)1 << HALF_BITS) - 1))
#define	LHUP(x)		((u_long)(x) << HALF_BITS)

extern u_quad_t __qdivrem(u_quad_t u, u_quad_t v, u_quad_t *rem);
d104 1
a104 1
#if __GNUC__ >= 2
d110 26
a135 20
__BEGIN_DECLS
quad_t	__adddi3(quad_t, quad_t);
quad_t	__anddi3(quad_t, quad_t);
quad_t	__ashldi3(quad_t, qshift_t);
quad_t	__ashrdi3(quad_t, qshift_t);
int	__cmpdi2(quad_t, quad_t);
quad_t	__divdi3(quad_t, quad_t);
quad_t	__iordi3(quad_t, quad_t);
quad_t	__lshldi3(quad_t, qshift_t);
quad_t	__lshrdi3(quad_t, qshift_t);
quad_t	__moddi3(quad_t, quad_t);
quad_t	__muldi3(quad_t, quad_t);
quad_t	__negdi2(quad_t);
quad_t	__one_cmpldi2(quad_t);
quad_t	__subdi3(quad_t, quad_t);
int	__ucmpdi2(u_quad_t, u_quad_t);
u_quad_t __udivdi3(u_quad_t, u_quad_t);
u_quad_t __umoddi3(u_quad_t, u_quad_t);
quad_t	__xordi3(quad_t, quad_t);
__END_DECLS
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@merge more OpenBSD-HEAD stuff
@
text
@d1 3
d36 1
a36 1
 *	$OpenBSD: quad.h,v 1.9 2004/11/28 07:23:41 mickey Exp $
d46 1
a46 1
 *  - A quad variable is exactly twice as long as `int'.
d51 2
a52 2
 * quads and 64-bit ints, for instance, or 96-bit arithmetic on machines
 * with 48-bit ints.
d69 2
a70 2
	int	sl[2];		/* as two signed ints */
	u_int	ul[2];		/* as two unsigned ints */
d74 1
a74 1
 * Define high and low parts of a quad_t.
d85 2
a86 2
#define	INT_BITS	(sizeof(int) * CHAR_BIT)
#define	HALF_BITS	(sizeof(int) * CHAR_BIT / 2)
d91 1
a91 1
 * ((quad_t)(x) << (number_of_bits_in_int/2)).  (`x' must actually be u_int.)
d95 1
a95 1
 * (sizeof(int)*CHAR_BIT/2).
d97 5
a101 3
#define	HHALF(x)	((u_int)(x) >> HALF_BITS)
#define	LHALF(x)	((u_int)(x) & (((int)1 << HALF_BITS) - 1))
#define	LHUP(x)		((u_int)(x) << HALF_BITS)
d109 1
a109 1
#if __GNUC_PREREQ__(2, 0) || defined(lint)
d115 20
a134 26
quad_t __adddi3(quad_t, quad_t);
quad_t __anddi3(quad_t, quad_t);
quad_t __ashldi3(quad_t, qshift_t);
quad_t __ashrdi3(quad_t, qshift_t);
int __cmpdi2(quad_t, quad_t);
quad_t __divdi3(quad_t, quad_t);
quad_t __fixdfdi(double);
quad_t __fixsfdi(float);
u_quad_t __fixunsdfdi(double);
u_quad_t __fixunssfdi(float);
double __floatdidf(quad_t);
float __floatdisf(quad_t);
double __floatunsdidf(u_quad_t);
quad_t __iordi3(quad_t, quad_t);
quad_t __lshldi3(quad_t, qshift_t);
quad_t __lshrdi3(quad_t, qshift_t);
quad_t __moddi3(quad_t, quad_t);
quad_t __muldi3(quad_t, quad_t);
quad_t __negdi2(quad_t);
quad_t __one_cmpldi2(quad_t);
u_quad_t __qdivrem(u_quad_t, u_quad_t, u_quad_t *);
quad_t __subdi3(quad_t, quad_t);
int __ucmpdi2(u_quad_t, u_quad_t);
u_quad_t __udivdi3(u_quad_t, u_quad_t );
u_quad_t __umoddi3(u_quad_t, u_quad_t );
quad_t __xordi3(quad_t, quad_t);
@

