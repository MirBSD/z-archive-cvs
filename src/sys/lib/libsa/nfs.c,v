head	1.7;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.1
	cvs-200808011000:1.1.1.1
	MIRBSD_10:1.2.0.4
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2017.08.07.20.18.27;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005988C69344442E37;

1.6
date	2010.01.10.17.47.53;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004B4A12CD3855DD1B;

1.5
date	2009.01.03.17.37.49;	author tg;	state Exp;
branches;
next	1.4;
commitid	100495FA26667615E1E;

1.4
date	2009.01.03.17.30.16;	author tg;	state Exp;
branches;
next	1.3;
commitid	100495FA0B06C06A8BA;

1.3
date	2008.08.01.11.25.02;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004892F2924667C00D;

1.2
date	2005.03.06.21.28.08;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.28.59;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.28.59;	author tg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@filesystem
@
text
@/*	$OpenBSD: nfs.c,v 1.10 2003/08/11 06:23:09 deraadt Exp $	*/
/*	$NetBSD: nfs.c,v 1.19 1996/10/13 02:29:04 christos Exp $	*/

/*-
 *  Copyright (c) 1993 John Brezak
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>

#include "rpcv2.h"
#include "nfsv2.h"

#include "stand.h"
#include "saerrno.h"
#include "net.h"
#include "netif.h"
#include "nfs.h"
#include "rpc.h"

#define ALLOC(var)	var = alloc(sizeof (*var))
#define AFREE(var)	free(var, sizeof (*var))

/* Define our own NFS attributes without NQNFS stuff. */
struct nfsv2_fattrs {
	n_long	fa_type;
	n_long	fa_mode;
	n_long	fa_nlink;
	n_long	fa_uid;
	n_long	fa_gid;
	n_long	fa_size;
	n_long	fa_blocksize;
	n_long	fa_rdev;
	n_long	fa_blocks;
	n_long	fa_fsid;
	n_long	fa_fileid;
	struct nfsv2_time fa_atime;
	struct nfsv2_time fa_mtime;
	struct nfsv2_time fa_ctime;
};


struct nfs_read_args {
	u_char	fh[NFS_FHSIZE];
	n_long	off;
	n_long	len;
	n_long	xxx;			/* XXX what's this for? */
};

/* Data part of nfs rpc reply (also the largest thing we receive) */
#define NFSREAD_SIZE 1024
struct nfs_read_repl {
	n_long	errno;
	struct	nfsv2_fattrs fa;
	n_long	count;
	u_char	data[NFSREAD_SIZE];
};

struct nfs_readlnk_repl {
	n_long	errno;
	n_long	len;
	char	path[NFS_MAXPATHLEN];
};

struct nfs_iodesc {
	struct	iodesc	*iodesc;
	off_t	off;
	u_char	fh[NFS_FHSIZE];
	struct nfsv2_fattrs fa;	/* all in network order */
};

struct nfs_iodesc nfs_root_node;


/*
 * Fetch the root file handle (call mount daemon)
 * On error, return non-zero and set errno.
 */
static int
nfs_getrootfh(struct iodesc *d, char *path, u_char *fhp)
{
	int len;
	struct args {
		n_long	len;
		char	path[FNAME_SIZE];
	} *args;
	struct repl {
		n_long	errno;
		u_char	fh[NFS_FHSIZE];
	} *repl;
	struct {
		n_long	h[RPC_HEADER_WORDS];
		struct args d;
	} *sdata;
	struct {
		n_long	h[RPC_HEADER_WORDS];
		struct repl d;
	} *rdata;
	size_t cc;
	int rv = -1;

#ifdef NFS_DEBUG
	if (debug)
		printf("nfs_getrootfh: %s\n", path);
#endif

	ALLOC(sdata);
	ALLOC(rdata);

	args = &sdata->d;
	repl = &rdata->d;

	bzero(args, sizeof(*args));
	len = strlen(path);
	if (len > sizeof(args->path))
		len = sizeof(args->path);
	args->len = htonl(len);
	bcopy(path, args->path, len);
	len = 4 + roundup(len, 4);

	cc = rpc_call(d, RPCPROG_MNT, RPCMNT_VER1, RPCMNT_MOUNT,
	    args, len, repl, sizeof(*repl));
	if (cc == -1) {
		/* errno was set by rpc_call */
		goto out;
	}
	if (cc < 4) {
		errno = EBADRPC;
		goto out;
	}
	if (repl->errno) {
		errno = ntohl(repl->errno);
		goto out;
	}
	bcopy(repl->fh, fhp, sizeof(repl->fh));
	rv = 0;
 out:
	AFREE(rdata);
	AFREE(sdata);
	return (rv);
}

/*
 * Lookup a file.  Store handle and attributes.
 * Return zero or error number.
 */
static int
nfs_lookupfh(struct nfs_iodesc *d, char *name, struct nfs_iodesc *newfd)
{
	int len, rlen;
	struct args {
		u_char	fh[NFS_FHSIZE];
		n_long	len;
		char	name[FNAME_SIZE];
	} *args;
	struct repl {
		n_long	errno;
		u_char	fh[NFS_FHSIZE];
		struct	nfsv2_fattrs fa;
	} *repl;
	struct {
		n_long	h[RPC_HEADER_WORDS];
		struct args d;
	} *sdata;
	struct {
		n_long	h[RPC_HEADER_WORDS];
		struct repl d;
	} *rdata;
	ssize_t cc;
	int rv;

#ifdef NFS_DEBUG
	if (debug)
		printf("lookupfh: called\n");
#endif

	ALLOC(sdata);
	ALLOC(rdata);

	args = &sdata->d;
	repl = &rdata->d;

	bzero(args, sizeof(*args));
	bcopy(d->fh, args->fh, sizeof(args->fh));
	len = strlen(name);
	if (len > sizeof(args->name))
		len = sizeof(args->name);
	bcopy(name, args->name, len);
	args->len = htonl(len);
	len = 4 + roundup(len, 4);
	len += NFS_FHSIZE;

	rlen = sizeof(*repl);

	cc = rpc_call(d->iodesc, NFS_PROG, NFS_VER2, NFSPROC_LOOKUP,
	    args, len, repl, rlen);
	if (cc == -1) {
		rv = errno;		/* XXX - from rpc_call */
		goto out;
	}
	if (cc < 4) {
		rv = EIO;
		goto out;
	}
	if (repl->errno) {
		/* saerrno.h now matches NFS error numbers. */
		rv = ntohl(repl->errno);
		goto out;
	}
	bcopy( repl->fh, &newfd->fh, sizeof(newfd->fh));
	bcopy(&repl->fa, &newfd->fa, sizeof(newfd->fa));
	rv = 0;
 out:
	AFREE(rdata);
	AFREE(sdata);
	return (rv);
}

/*
 * Get the destination of a symbolic link.
 */
static int
nfs_readlink(struct nfs_iodesc *d, char *buf)
{
	struct {
		n_long	h[RPC_HEADER_WORDS];
		u_char fh[NFS_FHSIZE];
	} *sdata;
	struct {
		n_long	h[RPC_HEADER_WORDS];
		struct nfs_readlnk_repl d;
	} *rdata;
	ssize_t cc;
	int rv;

#ifdef NFS_DEBUG
	if (debug)
		printf("readlink: called\n");
#endif

	ALLOC(sdata);
	ALLOC(rdata);

	bcopy(d->fh, sdata->fh, NFS_FHSIZE);
	cc = rpc_call(d->iodesc, NFS_PROG, NFS_VER2, NFSPROC_READLINK,
	    sdata->fh, NFS_FHSIZE,
	    &rdata->d, sizeof(rdata->d));
	if (cc == -1) {
		rv = errno;
		goto out;
	}
	if (cc < 4) {
		rv = EIO;
		goto out;
	}

	if (rdata->d.errno) {
		rv = ntohl(rdata->d.errno);
		goto out;
	}

	rdata->d.len = ntohl(rdata->d.len);
	if (rdata->d.len > NFS_MAXPATHLEN) {
		rv = ENAMETOOLONG;
		goto out;
	}

	bcopy(rdata->d.path, buf, rdata->d.len);
	buf[rdata->d.len] = 0;
	rv = 0;
 out:
	AFREE(rdata);
	AFREE(sdata);
	return (rv);
}

/*
 * Read data from a file.
 * Return transfer count or -1 (and set errno)
 */
static ssize_t
nfs_readdata(struct nfs_iodesc *d, off_t off, void *addr, size_t len)
{
	struct nfs_read_args *args;
	struct nfs_read_repl *repl;
	struct {
		n_long	h[RPC_HEADER_WORDS];
		struct nfs_read_args d;
	} *sdata;
	struct {
		n_long	h[RPC_HEADER_WORDS];
		struct nfs_read_repl d;
	} *rdata;
	size_t cc;
	long x;
	int hlen, rlen;
	ssize_t rv = -1;

	ALLOC(sdata);
	ALLOC(rdata);

	args = &sdata->d;
	repl = &rdata->d;

	bcopy(d->fh, args->fh, NFS_FHSIZE);
	args->off = htonl((n_long)off);
	if (len > NFSREAD_SIZE)
		len = NFSREAD_SIZE;
	args->len = htonl((n_long)len);
	args->xxx = htonl((n_long)0);
	hlen = sizeof(*repl) - NFSREAD_SIZE;

	cc = rpc_call(d->iodesc, NFS_PROG, NFS_VER2, NFSPROC_READ,
	    args, sizeof(*args),
	    repl, sizeof(*repl));
	if (cc == -1) {
		/* errno was already set by rpc_call */
		goto out;
	}
	if (cc < hlen) {
		errno = EBADRPC;
		goto out;
	}
	if (repl->errno) {
		errno = ntohl(repl->errno);
		goto out;
	}
	rlen = cc - hlen;
	x = ntohl(repl->count);
	if (rlen < x) {
		printf("nfsread: short packet, %d < %ld\n", rlen, x);
		errno = EBADRPC;
		goto out;
	}
	bcopy(repl->data, addr, x);
	rv = x;
 out:
	AFREE(rdata);
	AFREE(sdata);
	return (rv);
}

/*
 * nfs_mount - mount this nfs filesystem to a host
 * On error, return non-zero and set errno.
 */
int
nfs_mount(int sock, struct in_addr ip, char *path)
{
	struct iodesc *desc;
	struct nfsv2_fattrs *fa;

	if (!(desc = socktodesc(sock))) {
		errno = EINVAL;
		return(-1);
	}

	/* Bind to a reserved port. */
	desc->myport = htons(--rpc_port);
	desc->destip = ip;
	if (nfs_getrootfh(desc, path, nfs_root_node.fh))
		return (-1);
	nfs_root_node.iodesc = desc;
	/* Fake up attributes for the root dir. */
	fa = &nfs_root_node.fa;
	fa->fa_type  = htonl(NFDIR);
	fa->fa_mode  = htonl(0755);
	fa->fa_nlink = htonl(2);

#ifdef NFS_DEBUG
	if (debug)
		printf("nfs_mount: got fh for %s\n", path);
#endif

	return(0);
}

/*
 * Open a file.
 * return zero or error number
 */
int
nfs_open(char *path, struct open_file *f)
{
	struct nfs_iodesc *newfd, *currfd;
	char *namebuf, *linkbuf, *cp, *ncp;
	int nlinks = 0, error = 0, c;

#ifdef NFS_DEBUG
	if (debug)
		printf("nfs_open: %s\n", path);
#endif
	if (nfs_root_node.iodesc == NULL) {
		printf("nfs_open: must mount first.\n");
		return (ENXIO);
	}

	namebuf = alloc(NFS_MAXPATHLEN + 1);
	currfd = &nfs_root_node;
	newfd = 0;

	cp = path;
	while (*cp) {
		/*
		 * Remove extra separators
		 */
		while (*cp == '/')
			cp++;

		if (*cp == '\0')
			break;
		/*
		 * Check that current node is a directory.
		 */
		if (currfd->fa.fa_type != htonl(NFDIR)) {
			error = ENOTDIR;
			goto out;
		}

		/* allocate filesystem specific data structure */
		newfd = alloc(sizeof(*newfd));
		newfd->iodesc = currfd->iodesc;
		newfd->off = 0;

		/*
		 * Get next component of path name.
		 */
		{
			int len = 0;

			ncp = cp;
			while ((c = *cp) != '\0' && c != '/') {
				if (++len > NFS_MAXNAMLEN) {
					error = ENOENT;
					goto out;
				}
				cp++;
			}
			*cp = '\0';
		}

		/* lookup a file handle */
		error = nfs_lookupfh(currfd, ncp, newfd);
		*cp = c;
		if (error)
			goto out;

		/*
		 * Check for symbolic link
		 */
		if (newfd->fa.fa_type == htonl(NFLNK)) {
			int link_len, len;

			linkbuf = alloc(NFS_MAXPATHLEN + 1);
			error = nfs_readlink(newfd, linkbuf);
			if (error) {
				free(linkbuf, NFS_MAXPATHLEN + 1);
				goto out;
			}

			link_len = strlen(linkbuf);
			len = strlen(cp);

			if (link_len + len > MAXPATHLEN ||
			    ++nlinks > MAXSYMLINKS) {
				error = ENOENT;
				goto out;
			}

			bcopy(cp, &namebuf[link_len], len + 1);
			bcopy(linkbuf, namebuf, link_len);
			free(linkbuf, NFS_MAXPATHLEN + 1);

			/*
			 * If absolute pathname, restart at root.
			 * If relative pathname, restart at parent directory.
			 */
			cp = namebuf;
			if (*cp == '/') {
				if (currfd != &nfs_root_node)
					free(currfd, sizeof(*currfd));
				currfd = &nfs_root_node;
			}

			free(newfd, sizeof(*newfd));
			newfd = 0;

			continue;
		}

		if (currfd != &nfs_root_node)
			free(currfd, sizeof(*currfd));
		currfd = newfd;
		newfd = 0;
	}

	error = 0;

 out:
	free(namebuf, NFS_MAXPATHLEN + 1);
	if (!error) {
		f->f_fsdata = (void *)currfd;
		return (0);
	}

#ifdef NFS_DEBUG
	if (debug)
		printf("nfs_open: %s lookupfh failed: %s\n",
		    path, strerror(error));
#endif
	if (currfd != &nfs_root_node)
		free(currfd, sizeof(*currfd));
	if (newfd)
		free(newfd, sizeof(*newfd));

	return (error);
}

int
nfs_close(struct open_file *f)
{
	struct nfs_iodesc *fp = (struct nfs_iodesc *)f->f_fsdata;

#ifdef NFS_DEBUG
	if (debug)
		printf("nfs_close: fp=%p\n", fp);
#endif

	if (fp)
		free(fp, sizeof(struct nfs_iodesc));
	f->f_fsdata = (void *)0;

	return (0);
}

/*
 * read a portion of a file
 */
int
nfs_read(struct open_file *f, void *buf, size_t size, size_t *resid)
{
	struct nfs_iodesc *fp = (struct nfs_iodesc *)f->f_fsdata;
	ssize_t cc;
	char *addr = buf;

#ifdef NFS_DEBUG
	if (debug)
		printf("nfs_read: size=%d off=%d\n", size, (int)fp->off);
#endif
	while ((int)size > 0) {
		twiddle();
		cc = nfs_readdata(fp, fp->off, (void *)addr, size);
		/* XXX maybe should retry on certain errors */
		if (cc == -1) {
#ifdef NFS_DEBUG
			if (debug)
				printf("nfs_read: read: %s", strerror(errno));
#endif
			return (errno);	/* XXX - from nfs_readdata */
		}
		if (cc == 0) {
			if (debug)
				printf("nfs_read: hit EOF unexpectantly");
			goto ret;
		}
		fp->off += cc;
		addr += cc;
		size -= cc;
	}
ret:
	if (resid)
		*resid = size;

	return (0);
}

/*
 * Not implemented.
 */
int
nfs_write(struct open_file *f, void *buf, size_t size, size_t *resid)
{
	return (EROFS);
}

off_t
nfs_seek(struct open_file *f, off_t offset, int where)
{
	struct nfs_iodesc *d = (struct nfs_iodesc *)f->f_fsdata;
	n_long size = ntohl(d->fa.fa_size);

	switch (where) {
	case SEEK_SET:
		d->off = offset;
		break;
	case SEEK_CUR:
		d->off += offset;
		break;
	case SEEK_END:
		d->off = size + offset;
		break;
	default:
		return (-1);
	}

	return (d->off);
}

/* NFNON=0, NFREG=1, NFDIR=2, NFBLK=3, NFCHR=4, NFLNK=5 */
int nfs_stat_types[8] = {
	0, S_IFREG, S_IFDIR, S_IFBLK, S_IFCHR, S_IFLNK, 0 };

int
nfs_stat(struct open_file *f, struct stat *sb)
{
	struct nfs_iodesc *fp = (struct nfs_iodesc *)f->f_fsdata;
	n_long ftype, mode;

	ftype = ntohl(fp->fa.fa_type);
	mode  = ntohl(fp->fa.fa_mode);
	mode |= nfs_stat_types[ftype & 7];

	sb->st_mode  = mode;
	sb->st_nlink = ntohl(fp->fa.fa_nlink);
	sb->st_uid   = ntohl(fp->fa.fa_uid);
	sb->st_gid   = ntohl(fp->fa.fa_gid);
	sb->st_size  = ntohl(fp->fa.fa_size);

	return (0);
}

/*
 * Not implemented.
 */
#ifndef NO_READDIR
int
nfs_readdir(struct open_file *f, char *name)
{
	return (EROFS);
}
#endif
@


1.6
log
@even here, SEEK_END is size+ofs not size-ofs, says even stand.h
@
text
@d449 1
a449 1
		/* allocate file system specific data structure */
@


1.5
log
@more -Wstack-larger-than-255
not all cases solved, but most of them (let's hope alloc can deal with it)
@
text
@d629 1
a629 1
		d->off = size - offset;
@


1.4
log
@most functions ought to be written like this, with a single exit point,
to make later wraps easier
@
text
@d50 3
d123 1
a123 1
	} sdata;
d127 1
a127 1
	} rdata;
d136 5
a140 2
	args = &sdata.d;
	repl = &rdata.d;
d167 2
d193 1
a193 1
	} sdata;
d197 1
a197 1
	} rdata;
d206 5
a210 2
	args = &sdata.d;
	repl = &rdata.d;
d243 2
d257 1
a257 1
	} sdata;
d261 1
a261 1
	} rdata;
d270 4
a273 1
	bcopy(d->fh, sdata.fh, NFS_FHSIZE);
d275 2
a276 2
	    sdata.fh, NFS_FHSIZE,
	    &rdata.d, sizeof(rdata.d));
d286 2
a287 2
	if (rdata.d.errno) {
		rv = ntohl(rdata.d.errno);
d291 2
a292 2
	rdata.d.len = ntohl(rdata.d.len);
	if (rdata.d.len > NFS_MAXPATHLEN) {
d297 2
a298 2
	bcopy(rdata.d.path, buf, rdata.d.len);
	buf[rdata.d.len] = 0;
d301 2
d318 1
a318 1
	} sdata;
d322 1
a322 1
	} rdata;
d328 5
a332 2
	args = &sdata.d;
	repl = &rdata.d;
d367 2
d415 1
a415 2
	char namebuf[NFS_MAXPATHLEN + 1], *cp, *ncp;
	char linkbuf[NFS_MAXPATHLEN + 1];
d427 1
d483 1
d485 2
a486 1
			if (error)
d488 1
d501 1
d528 2
a529 1
out:
@


1.3
log
@merge and reduce diff to obsd
XXX not yet tested
@
text
@d126 1
d148 1
a148 1
		return (-1);
d152 1
a152 1
		return (-1);
d156 1
a156 1
		return (-1);
d159 3
a161 1
	return (0);
d191 1
d215 8
a222 4
	if (cc == -1)
		return (errno);		/* XXX - from rpc_call */
	if (cc < 4)
		return (EIO);
d225 2
a226 1
		return (ntohl(repl->errno));
d230 3
a232 1
	return (0);
d250 1
d261 8
a268 2
	if (cc == -1)
		return (errno);
d270 4
a273 5
	if (cc < 4)
		return (EIO);

	if (rdata.d.errno)
		return (ntohl(rdata.d.errno));
d276 4
a279 2
	if (rdata.d.len > NFS_MAXPATHLEN)
		return (ENAMETOOLONG);
d283 3
a285 1
	return (0);
d308 1
d326 1
a326 1
		return (-1);
d330 1
a330 1
		return (-1);
d334 1
a334 1
		return (-1);
d341 1
a341 1
		return(-1);
d344 3
a346 1
	return (x);
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@a0 1
/**	$MirOS$	*/
d135 1
a135 1
	memset(args, 0, sizeof(*args));
d140 1
a140 1
	memmove(args->path, path, len);
d157 1
a157 1
	memmove(fhp, repl->fh, sizeof(repl->fh));
d197 2
a198 2
	memset(args, 0, sizeof(*args));
	memmove(args->fh, d->fh, sizeof(args->fh));
d202 1
a202 1
	memmove(args->name, name, len);
d219 2
a220 2
	memmove(&newfd->fh,  repl->fh, sizeof(newfd->fh));
	memmove(&newfd->fa, &repl->fa, sizeof(newfd->fa));
d245 1
a245 1
	memmove(sdata.fh, d->fh, NFS_FHSIZE);
d262 1
a262 1
	memmove(buf, rdata.d.path, rdata.d.len);
d291 1
a291 1
	memmove(args->fh, d->fh, NFS_FHSIZE);
d321 1
a321 1
	memmove(addr, repl->data, x);
d449 2
a450 2
			memmove(&namebuf[link_len], cp, len + 1);
			memmove(namebuf, linkbuf, link_len);
@


1.1
log
@Initial revision
@
text
@d1 1
d136 1
a136 1
	bzero(args, sizeof(*args));
d141 1
a141 1
	bcopy(path, args->path, len);
d158 1
a158 1
	bcopy(repl->fh, fhp, sizeof(repl->fh));
d198 2
a199 2
	bzero(args, sizeof(*args));
	bcopy(d->fh, args->fh, sizeof(args->fh));
d203 1
a203 1
	bcopy(name, args->name, len);
d220 2
a221 2
	bcopy( repl->fh, &newfd->fh, sizeof(newfd->fh));
	bcopy(&repl->fa, &newfd->fa, sizeof(newfd->fa));
d246 1
a246 1
	bcopy(d->fh, sdata.fh, NFS_FHSIZE);
d263 1
a263 1
	bcopy(rdata.d.path, buf, rdata.d.len);
d292 1
a292 1
	bcopy(d->fh, args->fh, NFS_FHSIZE);
d322 1
a322 1
	bcopy(repl->data, addr, x);
d450 2
a451 2
			bcopy(cp, &namebuf[link_len], len + 1);
			bcopy(linkbuf, namebuf, link_len);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
