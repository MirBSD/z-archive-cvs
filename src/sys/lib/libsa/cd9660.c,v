head	1.8;
access;
symbols
	tg-new-cd9660:1.6.0.2
	tg-beforemerge-ksrc10:1.1.1.2
	cvs-200808011000:1.1.1.2
	MIRBSD_10:1.3.0.4
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.08.07.20.18.27;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005988C69344442E37;

1.7
date	2010.01.10.17.47.52;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004B4A12CD3855DD1B;

1.6
date	2009.01.03.17.00.41;	author tg;	state Exp;
branches
	1.6.2.1;
next	1.5;
commitid	100495F99D033ECC510;

1.5
date	2008.09.06.22.21.04;	author tg;	state Exp;
branches;
next	1.4;
commitid	10048C3024808C8EDD3;

1.4
date	2008.08.01.11.25.01;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004892F2924667C00D;

1.3
date	2005.07.21.21.52.23;	author tg;	state Exp;
branches;
next	1.2;
commitid	181c42e0191f67ef;

1.2
date	2005.03.06.21.28.07;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.28.59;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.6.2.1
date	2009.03.13.20.42.01;	author tg;	state Exp;
branches;
next	;
commitid	10049BAC517735E35BA;

1.1.1.1
date	2005.02.05.17.28.59;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.21.39.54;	author tg;	state Exp;
branches;
next	;
commitid	5f0d42e015f52f66;


desc
@@


1.8
log
@filesystem
@
text
@/*	$OpenBSD: cd9660.c,v 1.12 2004/07/09 19:20:17 drahn Exp $	*/
/*	$NetBSD: cd9660.c,v 1.1 1996/09/30 16:01:19 ws Exp $	*/

/*
 * Copyright (C) 1996 Wolfgang Solfrank.
 * Copyright (C) 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Stand-alone ISO9660 file reading package.
 *
 * Note: This doesn't support Rock Ridge extensions, extended attributes,
 * blocksizes other than 2048 bytes, multi-extent files, etc.
 */
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/slibkern.h>

/* THIS IS AN UGLY HACK!!!			XXX */
struct fid;
struct mbuf;
struct nameidata;
struct netexport { int x; };
struct proc;
struct statfs;
struct ucred;
#include <isofs/cd9660/iso.h>

#include "stand.h"
#include "cd9660.h"

struct file {
	off_t off;			/* Current offset within file */
	daddr_t bno;			/* Starting block number  */
	off_t size;			/* Size of file */
};

struct ptable_ent {
	char namlen	[ISODCL( 1, 1)];	/* 711 */
	char extlen	[ISODCL( 2, 2)];	/* 711 */
	char block	[ISODCL( 3, 6)];	/* 732 */
	char parent	[ISODCL( 7, 8)];	/* 722 */
	char name	[1];
};
#define	PTFIXSZ		8
#define	PTSIZE(pp)	roundup(PTFIXSZ + isonum_711((pp)->namlen), 2)

#define	cdb2devb(bno)	((bno) * ISO_DEFAULT_BLOCK_SIZE / DEV_BSIZE)

static int
pnmatch(char *path, struct ptable_ent *pp)
{
	char *cp;
	int i;

	cp = pp->name;
	for (i = isonum_711(pp->namlen); --i >= 0; path++, cp++) {
		if (toupper(*path) == *cp)
			continue;
		return 0;
	}
	if (*path != '/')
		return 0;
	return 1;
}

static int
dirmatch(char *path, struct iso_directory_record *dp)
{
	char *cp;
	int i;

	/* This needs to be a regular file */
	if (dp->flags[0] & 6)
		return 0;

	cp = dp->name;
	for (i = isonum_711(dp->name_len); --i >= 0; path++, cp++) {
		if (!*path)
			break;
		if (toupper(*path) == *cp)
			continue;
		return 0;
	}
	if (*path)
		return 0;
	/*
	 * Allow stripping of trailing dots and the version number.
	 * Note that this will find the first instead of the last version
	 * of a file.
	 */
	if (i >= 0 && (*cp == ';' || *cp == '.')) {
		/* This is to prevent matching of numeric extensions */
		if (*cp == '.' && cp[1] != ';')
			return 0;
		while (--i >= 0)
			if (*++cp != ';' && (*cp < '0' || *cp > '9'))
				return 0;
	}
	return 1;
}

int
cd9660_open(char *path, struct open_file *f)
{
	struct file *fp = 0;
	void *buf;
	struct iso_primary_descriptor *vd;
	size_t buf_size, nread, psize, dsize;
	daddr_t bno;
	int parent, ent;
	struct ptable_ent *pp;
	struct iso_directory_record *dp;
	int rc;

	/* First find the volume descriptor */
	buf = alloc(buf_size = ISO_DEFAULT_BLOCK_SIZE);
	dp = (struct iso_directory_record *)buf;
	vd = buf;
	for (bno = 16;; bno++) {
		twiddle();
		rc = f->f_dev->dv_strategy(f->f_devdata, F_READ, cdb2devb(bno),
					   ISO_DEFAULT_BLOCK_SIZE, buf, &nread);
		if (rc)
			goto out;
		if (nread != ISO_DEFAULT_BLOCK_SIZE) {
			rc = EIO;
			goto out;
		}
		rc = EINVAL;
		if (bcmp(vd->id, ISO_STANDARD_ID, sizeof vd->id) != 0)
			goto out;
		if (isonum_711(vd->type) == ISO_VD_END)
			goto out;
		if (isonum_711(vd->type) == ISO_VD_PRIMARY)
			break;
	}
	if (isonum_723(vd->logical_block_size) != ISO_DEFAULT_BLOCK_SIZE)
		goto out;

	/* Now get the path table and lookup the directory of the file */
	bno = isonum_732(vd->type_m_path_table);
	psize = isonum_733(vd->path_table_size);

	if (psize > ISO_DEFAULT_BLOCK_SIZE) {
		free(buf, ISO_DEFAULT_BLOCK_SIZE);
		buf = alloc(buf_size = roundup(psize, ISO_DEFAULT_BLOCK_SIZE));
	}

	twiddle();
	rc = f->f_dev->dv_strategy(f->f_devdata, F_READ, cdb2devb(bno),
				   buf_size, buf, &nread);
	if (rc)
		goto out;
	if (nread != buf_size) {
		rc = EIO;
		goto out;
	}

	parent = 1;
	pp = (struct ptable_ent *)buf;
	ent = 1;
	bno = isonum_732(pp->block) + isonum_711(pp->extlen);

	rc = ENOENT;
	/*
	 * Remove extra separators
	 */
	while (*path == '/')
		path++;

	while (*path) {
		if ((void *)pp >= buf + psize)
			break;
		if (isonum_722(pp->parent) != parent)
			break;
		if (!pnmatch(path, pp)) {
			pp = (struct ptable_ent *)((void *)pp + PTSIZE(pp));
			ent++;
			continue;
		}
		path += isonum_711(pp->namlen) + 1;
		parent = ent;
		bno = isonum_732(pp->block) + isonum_711(pp->extlen);
		while ((void *)pp < buf + psize) {
			if (isonum_722(pp->parent) == parent)
				break;
			pp = (struct ptable_ent *)((void *)pp + PTSIZE(pp));
			ent++;
		}
	}

	/* Now bno has the start of the directory that supposedly contains the file */
	bno--;
	dsize = 1;		/* Something stupid, but > 0	XXX */
	for (psize = 0; psize < dsize;) {
		if (!(psize % ISO_DEFAULT_BLOCK_SIZE)) {
			bno++;
			twiddle();
			rc = f->f_dev->dv_strategy(f->f_devdata, F_READ,
						   cdb2devb(bno),
						   ISO_DEFAULT_BLOCK_SIZE,
						   buf, &nread);
			if (rc)
				goto out;
			if (nread != ISO_DEFAULT_BLOCK_SIZE) {
				rc = EIO;
				goto out;
			}
			dp = (struct iso_directory_record *)buf;
		}
		if (!isonum_711(dp->length)) {
			if ((void *)dp == buf)
				psize += ISO_DEFAULT_BLOCK_SIZE;
			else
				psize = roundup(psize, ISO_DEFAULT_BLOCK_SIZE);
			continue;
		}
		if (dsize == 1)
			dsize = isonum_733(dp->size);
		if (dirmatch(path, dp))
			break;
		psize += isonum_711(dp->length);
		dp = (struct iso_directory_record *)((void *)dp +
		    isonum_711(dp->length));
	}

	if (psize >= dsize) {
		rc = ENOENT;
		goto out;
	}

	/* allocate filesystem specific data structure */
	fp = alloc(sizeof(struct file));
	bzero(fp, sizeof(struct file));
	f->f_fsdata = (void *)fp;

	fp->off = 0;
	fp->bno = isonum_733(dp->extent);
	fp->size = isonum_733(dp->size);
	free(buf, buf_size);

	return 0;

out:
	if (fp)
		free(fp, sizeof(struct file));
	free(buf, buf_size);

	return rc;
}

int
cd9660_close(struct open_file *f)
{
	struct file *fp = (struct file *)f->f_fsdata;

	f->f_fsdata = 0;
	free(fp, sizeof *fp);

	return 0;
}

int
cd9660_read(struct open_file *f, void *start, size_t size, size_t *resid)
{
	struct file *fp = (struct file *)f->f_fsdata;
	int rc = 0;
	daddr_t bno;
	char *dp, *buf = NULL;
	size_t nread, off;

	while (size) {
		if (fp->off < 0 || fp->off >= fp->size)
			break;
		bno = (fp->off >> ISO_DEFAULT_BLOCK_SHIFT) + fp->bno;
		if (fp->off & (ISO_DEFAULT_BLOCK_SIZE - 1)
		    || size < ISO_DEFAULT_BLOCK_SIZE) {
			if (!buf)
				buf = alloc(ISO_DEFAULT_BLOCK_SIZE);
			dp = buf;
		} else
			dp = start;
		twiddle();
		rc = f->f_dev->dv_strategy(f->f_devdata, F_READ, cdb2devb(bno),
					   ISO_DEFAULT_BLOCK_SIZE, dp, &nread);
		if (rc)
			goto out;
		if (nread != ISO_DEFAULT_BLOCK_SIZE) {
			rc = EIO;
			goto out;
		}

		/*
		 * off is either 0 in the dp == start case or
		 * the offset to the interesting data into the buffer of 'buf'
		 */
		off = fp->off & (ISO_DEFAULT_BLOCK_SIZE - 1);
		nread -= off;
		if (nread > size)
			nread = size;

		if (nread > (fp->size - fp->off))
			nread = (fp->size - fp->off);

		if (dp == buf)
			bcopy(buf + off, start, nread);

		start += nread;
		fp->off += nread;
		size -= nread;
	}
	if (resid)
		*resid = size;
 out:
	if (buf)
		free(buf, ISO_DEFAULT_BLOCK_SIZE);
	return rc;
}

int
cd9660_write(struct open_file *f, void *start, size_t size, size_t *resid)
{
	return EROFS;
}

off_t
cd9660_seek(struct open_file *f, off_t offset, int where)
{
	struct file *fp = (struct file *)f->f_fsdata;

	switch (where) {
	case SEEK_SET:
		fp->off = offset;
		break;
	case SEEK_CUR:
		fp->off += offset;
		break;
	case SEEK_END:
		fp->off = fp->size + offset;
		break;
	default:
		return -1;
	}
	return fp->off;
}

int
cd9660_stat(struct open_file *f, struct stat *sb)
{
	struct file *fp = (struct file *)f->f_fsdata;

	/* only important stuff */
	sb->st_mode = S_IFREG | S_IRUSR | S_IRGRP | S_IROTH;
	sb->st_uid = sb->st_gid = 0;
	sb->st_size = fp->size;
	return 0;
}

/*
 * Not implemented.
 */
#ifndef NO_READDIR
int
cd9660_readdir(struct open_file *f, char *name)
{
	return (EROFS);
}
#endif
@


1.7
log
@even here, SEEK_END is size+ofs not size-ofs, says even stand.h
@
text
@d259 1
a259 1
	/* allocate file system specific data structure */
@


1.6
log
@-Wstack-larger-than-255
@
text
@d366 1
a366 1
		fp->off = fp->size - offset;
@


1.6.2.1
log
@hacked on the train to Karlsruhe, not complete; copied from fat.[ch]
not continuing for now because my IBM X40 broke…
@
text
@d1 7
a7 3
/*-
 * Copyright (c) 2009
 *	Thorsten Glaser <tg@@mirbsd.org>
d9 13
a21 5
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
d23 10
a32 8
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
d35 6
a41 1
#include <sys/time.h>
d44 9
a52 2
#include <lib/libsa/stand.h>
#include <lib/libsa/cd9660.h>
d55 2
a56 1
__RCSID("$MirOS: src/sys/lib/libsa/fat.c,v 1.14 2009/01/15 21:42:50 tg Exp $");
d58 4
a61 8
struct cd9660_file {
	struct open_file *open_file;	/* our "parent" structure */
	char databuf[2048];		/* sector buffer (data) */
	uint32_t datasec;		/* which sector is buffered */
	uint32_t nodecluster;		/* current node: sector */
	uint32_t nodeseekp;		/* current node: file offset */
	uint32_t nodesize;		/* current node: file size */
	uint8_t nodetype;		/* 1=directory 2=file */
d64 9
a72 3
static int fillbuf(struct cd9660_file *);
static int fillofs(struct cd9660_file *);
static int search_dir(struct open_file *, char *);
d74 1
a74 1
#define locase(c)	(((c) < 'A') || ((c) > 'Z') ? (c) : (c) - 'A' + 'a')
d77 1
a77 1
fillofs(struct cd9660_file *ff)
d79 2
a80 1
	uint32_t sn;
d82 9
a90 5
	sn = ff->nodeseekp >> 11;
	if (sn == ff->datasec)
		return (0);
	ff->datasec = sn;
	return (fillbuf(ff));
d94 1
a94 1
fillbuf(struct cd9660_file *ff)
d96 2
a97 2
	size_t buflen;
	int rv;
d99 28
a126 7
	twiddle();
	if ((rv = (ff->open_file->f_dev->dv_strategy)(ff->open_file->f_devdata,
	    F_READ, ff->datasec * (2048 / 512), 2048, ff->databuf, &buflen)))
		;
	else if (buflen != 2048)
		rv = EINVAL;
	return (rv);
d132 7
a138 2
	struct cd9660_file *ff;
	int rv;
d140 1
a140 1
#define vd ((struct iso_primary_descriptor *)(ff->databuf))
d142 23
a164 10
	/* allocate fs specific data structure */
	ff = alloc(sizeof (struct cd9660_file));
	bzero(ff, sizeof (struct cd9660_file));
	f->f_fsdata = ff;
	ff->open_file = f;

	/* search for PVD */
	ff->datasec = 16;
 search_pvd:
	if ((rv = fillbuf(ff)))
d167 13
a179 3
	/* parse VD */
	rv = EINVAL;
	if (bcmp(vd->id, ISO_STANDARD_ID, sizeof (vd->id)))
d181 2
a182 2
	switch (isonum_711(vd->type)) {
	case ISO_VD_END:
a183 5
	case ISO_VD_PRIMARY:
		break;
	default:
		++ff->datasec;
		goto search_pvd;
d185 12
a196 8
	if (isonum_723(vd->logical_block_size) != 2048)
		goto out;
	dp = (struct iso_directory_record *)vd->root_directory_record;
	ff->nodetype = 1;	/* 1 = directory, 2 = file */
	ff->nodecluster = isonum_733(dp->extent);
	ff->nodeseekp = 0;
	ff->nodesize = isonum_733(dp->size);
#undef vd
d199 3
a201 7
		char c, *cp, *npath;
		size_t len;

		/* remove extra separators */
		while (*path == '/')
			++path;
		if (*path == '\0')
d203 13
a215 5

		/* check that current node is a directory */
		if (ff->nodetype != 1) {
			rv = ENOTDIR;
			goto out;
d217 1
d219 15
a233 6
		/* get next component of path name */
		len = 0;
		cp = path;
		while (((c = *cp) != '\0') && (c != '/')) {
			if (++len > 14) {
				rv = ENOENT;
d236 1
a236 1
			cp++;
d238 5
a242 2
		if (cp == path + 1 && *path == '.') {
			path = cp;
d245 8
a252 2
		npath = cp;
		*cp = '\0';
d254 3
a256 6
		/* look up component in current directory */
		rv = search_dir(f, path);
		*cp = c;
		if (rv)
			goto out;
		path = npath;
d259 18
a276 7
	/* found terminal component */
	rv = 0;
 out:
	if (rv) {
		free(ff, sizeof (struct cd9660_file));
	}
	return (rv);
d282 1
a282 1
	struct cd9660_file *ff;
d284 2
a285 2
	if (f == NULL)
		return (0);
d287 1
a287 9
	ff = f->f_fsdata;
	if (ff) {
		if (ff->cd9660buf)
			free(ff->cd9660buf, (ff->type == FAT12) ? 1024 : 512);
		if (ff->databuf)
			free(ff->databuf, ff->bpc);
		free(ff, sizeof (struct cd9660_file));
	}
	return (0);
d291 1
a291 1
cd9660_read(struct open_file *f, void *buf, size_t size, size_t *resid)
d293 21
a313 28
	struct cd9660_file *ff = f->f_fsdata;
	int rv = 0, otmp, isroot = 0, blksiz = ff->bpc;
	size_t stmp;

	if (!ff->databuf) {
		ff->databuf = alloc(ff->bpc);
		ff->datasec = 0;
	}

	if (ff->nodecluster == 1) {
		isroot = 1;
		blksiz = 512;
	}

	if (ff->datasec == 0) {
		int skip = (ff->nodeseekp / ff->bpc);
		ff->datasec = ff->nodecluster;
		if (ff->datasec == 1) {
			ff->datasec = ff->nodeseekp / 512 + ff->rootofs;
			if ((rv = rd(f, ff->databuf, ff->datasec, 512))) {
				ff->datasec = 0;
				goto out;
			}
			goto filled;
		}
		if ((ff->datasec == 0) || (ff->datasec >= ff->invalc)) {
 invclust:
			ff->datasec = rv = 0;
d315 2
a316 9
		}
		while (skip--) {
			ff->datasec = getcd9660(ff, ff->datasec);
			if ((ff->datasec == 0) || (ff->datasec >= ff->invalc))
				goto invclust;
		}
		if ((rv = fillbuf(ff))) {
 rderr:
			ff->datasec = 0;
a318 7
	}
 filled:

	while (size > 0) {
		/* don't read beyond EOF */
		if (ff->nodesize && (ff->nodeseekp >= ff->nodesize))
			break;
d320 18
a337 26
		otmp = ff->nodeseekp % blksiz;
		stmp = blksiz - otmp;
		if (ff->nodesize && (ff->nodesize - ff->nodeseekp) < stmp)
			stmp = ff->nodesize - ff->nodeseekp;
		if (stmp >= size)
			stmp = size;
		memmove(buf, ff->databuf + otmp, stmp);

		size -= stmp;
		buf += stmp;
		ff->nodeseekp += stmp;

		if (ff->nodeseekp % blksiz == 0) {
			if (isroot) {
				ff->datasec++;
				if ((rv = rd(f, ff->databuf, ff->datasec, 512)))
					goto rderr;
				goto refilled;
			}
			ff->datasec = getcd9660(ff, ff->datasec);
			if ((ff->datasec >= ff->invalc) || (rv = fillbuf(ff)))
				ff->datasec = 0;
			if (ff->datasec == 0 && size)
				goto out;
 refilled:		;
 		}
a338 1
 out:
d341 4
a344 1
	return (rv);
d348 1
a348 1
cd9660_write(struct open_file *f, void *buf, size_t size, size_t *resid)
d350 1
a350 1
	return (EROFS);
d356 2
d360 1
a360 1
		((struct cd9660_file *)f->f_fsdata)->nodeseekp = offset;
d363 1
a363 1
		((struct cd9660_file *)f->f_fsdata)->nodeseekp += offset;
d366 1
a366 2
		((struct cd9660_file *)f->f_fsdata)->nodeseekp =
		    ((struct cd9660_file *)f->f_fsdata)->nodesize - offset;
d369 1
a369 1
		return (-1);
d371 1
a371 3
	/* invalidate file data buffer */
	((struct cd9660_file *)f->f_fsdata)->datasec = 0;
	return (((struct cd9660_file *)f->f_fsdata)->nodeseekp);
d377 1
a377 5
	/* quick and dirty */
	bzero(sb, sizeof (struct stat));
	sb->st_mode = (((struct cd9660_file *)f->f_fsdata)->nodetype == 1) ?
	    040555 : 0444;
	sb->st_size = ((struct cd9660_file *)f->f_fsdata)->nodesize;
d379 5
a383 1
	return (0);
d386 4
d393 1
a393 86
	int rv, namelen;
	char ch, *cp;
	size_t sr;
	struct cd9660_file *ff = f->f_fsdata;
	struct iso_directory_record *dp;

	/* reset? */
	if (name == NULL) {
		cd9660_seek(f, 0, SEEK_SET);
		return (0);
	}

 getrec:
	if (ff->nodeseekp >= ff->nodesize) {
		rv = ENOENT;
		goto out;
	}
	if ((rv = fillofs(ff))) {
 out:
		*name = '\0';
		return (rv);
	}
	dp = (struct iso_directory_record *)(ff->databuf +
	    (ff->nodeseekp % 2048));
	if (!isonum_711(dp->length)) {
		++ff->nodeseekp;
		goto getrec;
	}

	if (dp->flags[0] & 4)
		goto skiprec;
	if (!(namelen = isonum_711(dp->name_len)) || namelen > 37)
		goto skiprec;
	memcpy(name, dp->name, namelen);
	name[namelen] = '\0';
	if (isdigit(*(cp = name + strlen(name) - 1))) {
		while (isdigit(*cp))
			if (--cp < name)
				break;
		if (cp > name && *cp == ';')
			*cp = '\0';
	}
	if (*(cp = name + strlen(name) - 1) == '.')
		*cp = '\0';

	/* okay, we have a directory or regular file */
	cp = name;
	while ((ch = *cp))
		*cp++ = locase(ch);//XXX
	rv = 0;
	do {
		ch = *cp++;
		name[rv++] = locase(ch);
	} while (cp);

	return (0);

 skiprec:
	ff->nodeseekp += isonum_711(dp->length);
	goto getrec;
}

static int
search_dir(struct open_file *f, char *name)
{
	struct cd9660_file *ff = f->f_fsdata;
	int rv;
	char fn[38];
	struct iso_directory_record *dp;

	if ((rv = cd9660_readdir(f, NULL)))
		return (rv);
	while ((rv = cd9660_readdir(f, fn)) == 0)
		if (!strcmp(fn, name)) {
			/* found a match, follow it */
			dp = (struct iso_directory_record *)(ff->databuf +
			    (ff->nodeseekp % 2048));
			ff->nodecluster = isonum_733(dp->extent);
			ff->nodesize = isonum_733(dp->size);
			ff->nodeseekp = 0;
			ff->nodetype = (dp->flags[0] & 2) ? 1 : 2;
			/* invalidate file data buffer */
			ff->datasec = 0;
			return (0);
		}
	return (ENOENT);
d395 1
@


1.5
log
@move lib/libkern/libkern.h to sys/slibkern.h where it gets installed,
since other installed headers reference it (e.g. for building LKMs)
@
text
@d296 1
a296 2
	char buf[ISO_DEFAULT_BLOCK_SIZE];
	char *dp;
d304 3
a306 1
		    || size < ISO_DEFAULT_BLOCK_SIZE)
d308 1
a308 1
		else
d314 5
a318 3
			return rc;
		if (nread != ISO_DEFAULT_BLOCK_SIZE)
			return EIO;
d341 3
@


1.4
log
@merge and reduce diff to obsd
XXX not yet tested
@
text
@d43 1
a43 2

#include <lib/libkern/libkern.h>
@


1.3
log
@merge and bump patchlevel (kernel only)
@
text
@a0 1
/**	$MirOS: src/sys/lib/libsa/cd9660.c,v 1.2 2005/03/06 21:28:07 tg Exp $	*/
d158 1
a158 1
		if (memcmp(ISO_STANDARD_ID, vd->id, sizeof vd->id) != 0)
d262 1
a262 1
	memset(fp, 0, sizeof(struct file));
d331 1
a331 1
			memmove(start, buf + off, nread);
@


1.2
log
@* merge src/sys/
  (at least the better part of it)
* revert IPv6 networking to OpenBSD, since
  I didn't get IPV4_MAPPED addresses working :(
@
text
@d1 2
a2 2
/**	$MirOS$	*/
/*	$OpenBSD: cd9660.c,v 1.10 2003/08/11 06:23:09 deraadt Exp $	*/
d137 1
a137 1
	size_t buf_size, read, psize, dsize;
d151 1
a151 1
					   ISO_DEFAULT_BLOCK_SIZE, buf, &read);
d154 1
a154 1
		if (read != ISO_DEFAULT_BLOCK_SIZE) {
d180 1
a180 1
				   buf_size, buf, &read);
d183 1
a183 1
	if (read != buf_size) {
d231 1
a231 1
						   buf, &read);
d234 1
a234 1
			if (read != ISO_DEFAULT_BLOCK_SIZE) {
d300 1
a300 1
	size_t read, off;
d313 1
a313 1
					   ISO_DEFAULT_BLOCK_SIZE, dp, &read);
d316 1
a316 1
		if (read != ISO_DEFAULT_BLOCK_SIZE)
d318 19
a336 14
		if (dp == buf) {
			off = fp->off & (ISO_DEFAULT_BLOCK_SIZE - 1);
			if (read > off + size)
				read = off + size;
			read -= off;
			memmove(start, buf + off, read);
			start += read;
			fp->off += read;
			size -= read;
		} else {
			start += ISO_DEFAULT_BLOCK_SIZE;
			fp->off += ISO_DEFAULT_BLOCK_SIZE;
			size -= ISO_DEFAULT_BLOCK_SIZE;
		}
@


1.1
log
@Initial revision
@
text
@d1 1
d159 1
a159 1
		if (bcmp(vd->id, ISO_STANDARD_ID, sizeof vd->id) != 0)
d263 1
a263 1
	bzero(fp, sizeof(struct file));
d323 1
a323 1
			bcopy(buf + off, start, read);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@merge more OpenBSD-HEAD stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: cd9660.c,v 1.12 2004/07/09 19:20:17 drahn Exp $	*/
d136 1
a136 1
	size_t buf_size, nread, psize, dsize;
d150 1
a150 1
					   ISO_DEFAULT_BLOCK_SIZE, buf, &nread);
d153 1
a153 1
		if (nread != ISO_DEFAULT_BLOCK_SIZE) {
d179 1
a179 1
				   buf_size, buf, &nread);
d182 1
a182 1
	if (nread != buf_size) {
d230 1
a230 1
						   buf, &nread);
d233 1
a233 1
			if (nread != ISO_DEFAULT_BLOCK_SIZE) {
d299 1
a299 1
	size_t nread, off;
d312 1
a312 1
					   ISO_DEFAULT_BLOCK_SIZE, dp, &nread);
d315 1
a315 1
		if (nread != ISO_DEFAULT_BLOCK_SIZE)
d317 14
a330 19

		/*
		 * off is either 0 in the dp == start case or
		 * the offset to the interesting data into the buffer of 'buf'
		 */
		off = fp->off & (ISO_DEFAULT_BLOCK_SIZE - 1);
		nread -= off;
		if (nread > size)
			nread = size;

		if (nread > (fp->size - fp->off))
			nread = (fp->size - fp->off);

		if (dp == buf)
			bcopy(buf + off, start, nread);

		start += nread;
		fp->off += nread;
		size -= nread;
@

