head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2007.03.02.03.13.29;	author tg;	state dead;
branches;
next	1.3;
commitid	10045E7958604F58BEB;

1.3
date	2006.12.11.23.55.06;	author tg;	state Exp;
branches;
next	1.2;
commitid	100457DEFC626A6A05C;

1.2
date	2006.11.21.02.38.33;	author tg;	state Exp;
branches;
next	1.1;
commitid	100456266AC5E94A8E9;

1.1
date	2006.10.07.21.36.22;	author tg;	state Exp;
branches;
next	;
commitid	10045281D5D49EB8626;


desc
@@


1.4
log
@• make the kernel use the adler32() stuff in src/kern, whose sources
  live in the z part but that, logically, more belongs to the c part
• export adler32 (over <sys/systm.h> -> libkern -> <libckern.h>) and
  the rnd_bootpool (via <sys/systm.h> directly) to all of the kernel
• adler32 for the kernel moves to libkern
• adler32 for the i386 bootloader moves to libsa
• adler32 for the sparc bootloader moves to libkern
• userland libz is not affected (yet); make depend still pulls it in

tested by building a GENERIC, a bsd.rd with it, a cdrom9.fs with the
new bootloader (i386), qemu'ing that
@
text
@/* $MirOS: src/sys/lib/libsa/adler32s.c,v 1.3 2006/12/11 23:55:06 tg Exp $ */

/*-
 * Copyright (c) 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
 * The adler32 algorithm is
 * Copyright (C) 1995 Mark Adler
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * Advertising materials mentioning features or use of this work must
 * display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 *-
 * See also:
 *	contrib/hosted/fwcf/adler.h,v
 *	src/sys/arch/i386/stand/libz/adler32.S,v
 *	src/sys/lib/libsa/adler32s.c,v
 */

#ifdef _STANDALONE
#define zADDRND(x)	/* nothing */
#define zRCSID(x)	/* nothing, for space reasons */
#include <limits.h>
#else
#include <sys/param.h>
#ifdef _KERNEL
#include <sys/kernel.h>
#include <sys/limits.h>
#include <dev/rndvar.h>
#define zADDRND(x)	rnd_addpool_add((uint32_t)(x) ^ (uint32_t)time.tv_sec)
#define zRCSID(x)	/* nothing, for space reasons */
#else
#include <limits.h>
#include <stdlib.h>
#define zADDRND(x)	arc4random_push((int)(x))
#define zRCSID(x)	__RCSID(x);
#endif
#endif

zRCSID("$MirOS: src/sys/lib/libsa/adler32s.c,v 1.3 2006/12/11 23:55:06 tg Exp $")

unsigned long adler32(unsigned long, const unsigned char *, unsigned);

#define BASE	65521	/* largest prime smaller than 65536 */
#define NMAX	5552	/* largest n: 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */
#define MINLBIT	16	/* min. number of bits required to represent BASE */

#ifndef MIN
#define MIN(a,b)	(((a) < (b)) ? (a) : (b))
#endif

#ifndef NULL
#define NULL		((void *)0UL)
#endif

unsigned long
adler32(unsigned long s1, const unsigned char *buf, unsigned len)
{
	unsigned long s2;
	unsigned n;

	/* compile-time assertion: we must fit 32 bits into an unsigned long */
	switch (0) {
	case 0:
	case sizeof(unsigned long) * CHAR_BIT >= 32:
		;
	}

	/* compile-time assertion: we must fit MINLBIT bits into an unsigned */
	switch (0) {
	case 0:
	case sizeof(unsigned) * CHAR_BIT >= MINLBIT:
		;
	}

	if (buf == NULL)
		return (1UL);

	s2 = (s1 >> 16) & 0xFFFFUL;
	s1 &= 0xFFFFUL;

	while (len) {
		len -= (n = MIN(len, NMAX));
		while (n--) {
			s1 += *buf++;
			s2 += s1;
		}
		s1 %= BASE;
		s2 %= BASE;
	}

	s1 |= (s2 << 16);
	zADDRND(s1);		/* once-only evaluation of s1 not guaranteed */
	return (s1);
}
@


1.3
log
@mostly administrative licence sync w/ current template
@
text
@d1 1
a1 1
/* $MirOS: src/sys/lib/libsa/adler32s.c,v 1.2 2006/11/21 02:38:33 tg Exp $ */
d54 1
a54 1
zRCSID("$MirOS: src/sys/lib/libsa/adler32s.c,v 1.2 2006/11/21 02:38:33 tg Exp $")
@


1.2
log
@don't pack the kernel overly with RCS IDs or SCCS IDs,
should save a few bytes on the floppies
@
text
@d1 1
a1 1
/* $MirOS: src/sys/lib/libsa/adler32s.c,v 1.1 2006/10/07 21:36:22 tg Exp $ */
d9 5
a13 6
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
d19 8
a26 8
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
d54 1
a54 1
zRCSID("$MirOS: src/sys/lib/libsa/adler32s.c,v 1.1 2006/10/07 21:36:22 tg Exp $")
@


1.1
log
@add a full compliant portable C implementation of the adler32.c file
found in libc, without the adler32_combine function (unneeded in the
kernel and especially the bootloader), to the MirOS BSD kernel (note
in sys/conf/files) and the sparc bootloader (the i386 bootloader al-
ready uses the same code as assembly version, except that that comes
without the "return 1 if (buf == NULL)" functionality); sync all our
adler32 implementations and lint a little
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/adler.h,v 1.2 2006/09/19 11:30:24 tg Exp $ */
d46 1
d51 1
a52 1
#define zRCSID(x)	__RCSID(x);
d55 1
a55 1
zRCSID("$MirOS$")
@

