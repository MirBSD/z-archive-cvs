head	1.5;
access;
symbols
	tg-beforemerge-ksrc10:1.1.1.1
	cvs-200808011000:1.1.1.1
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2010.01.10.19.21.38;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004B4A28CB0F23DD4D;

1.4
date	2009.08.12.13.37.31;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004A82C5B249B82245;

1.3
date	2009.08.11.13.24.00;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004A8170C73C4BAD74;

1.2
date	2009.01.10.18.31.11;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004968E98600584814;

1.1
date	2005.02.05.17.28.59;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.28.59;	author tg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@new ustarfs for the bootloader (fdboot only ATM, since boot’s too huge)
@
text
@/**	$MirOS: src/sys/lib/libsa/open.c,v 1.4 2009/08/12 13:37:31 tg Exp $ */
/*	$OpenBSD: open.c,v 1.10 2003/08/11 06:23:09 deraadt Exp $	*/
/*	$NetBSD: open.c,v 1.12 1996/09/30 16:01:21 ws Exp $	*/

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * The Mach Operating System project at Carnegie-Mellon University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)open.c	8.1 (Berkeley) 6/11/93
 *
 *
 * Copyright (c) 1989, 1990, 1991 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Author: Alessandro Forin
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include "stand.h"

extern int debug;

struct open_file files[SOPEN_MAX];

const char ustar_magic_version[8] = { 'u', 's', 't', 'a', 'r', 0, '0', '0' };

/*
 *	File primitives proper
 */

int
#ifndef __INTERNAL_LIBSA_CREAD
open(const char *fname, int mode)
#else
oopen(const char *fname, int mode)
#endif
{
	struct open_file *f;
	int fd, i, error;
	char *file;

#ifdef DEBUG
	if (debug)
		printf("oopen(%s):", fname);
#endif

	/* find a free file descriptor */
	for (fd = 0, f = files; fd < SOPEN_MAX; fd++, f++)
		if (f->f_flags == 0)
			goto fnd;
	errno = EMFILE;
#ifdef DEBUG
	if (debug)
		printf("EMFILE\n");
#endif
	return (-1);
 fnd:
	/*
	 * Try to open the device.
	 * Convert open mode (0,1,2) to F_READ, F_WRITE.
	 */
	f->f_flags = mode + 1;
	f->f_dev = (struct devsw *)0;
	f->f_ops = (struct fs_ops *)0;
	file = (char *)0;
#ifdef DEBUG
	if (debug)
		putchar('<');
#endif
	error = devopen(f, fname, &file);
#ifdef DEBUG
	if (debug)
		putchar('>');
#endif
	if (error ||
	    (((f->f_flags & F_NODEV) == 0) && f->f_dev == (struct devsw *)0))
		goto err;

	/* see if we opened a raw device; otherwise, 'file' is the file name. */
	if (file == (char *)0 || *file == '\0') {
		f->f_flags |= F_RAW;
#ifdef DEBUG
		if (debug)
			printf("=raw(%d)\n", fd);
#endif
		return (fd);
	}

	/* allow f->f_ops to be set by devopen routine */
	if (f->f_ops != NULL) {
#ifdef DEBUG
		if (debug)
			printf("=>dev:ops(%s)", f->f_ops->name);
#endif
		error = f->f_ops->open(file, f);
		if (error == 0) {
#ifdef DEBUG
			if (debug)
				printf("=>ok(%d)\n", fd);
#endif
			return (fd);
		} else if (error == ENOENT || error == ENOTDIR)
			goto no_match;
	}

	/* pass file name to the different filesystem open routines */
	for (i = 0; i < nfsys; i++) {
#ifdef DEBUG
		if (debug)
			printf(" try(%s)", file_system[i].name);
#endif
		/* convert mode (0,1,2) to FREAD, FWRITE. */
		error = (file_system[i].open)(file, f);
		if (error == 0) {
			f->f_ops = &file_system[i];
#ifdef DEBUG
			if (debug)
				printf("=>ok(%d)\n", fd);
#endif
			return (fd);
		}
#ifdef DEBUG
		if (debug)
			printf("=>err(%u)", error);
#endif
		if (error == ENOENT || error == ENOTDIR)
			break;
	}
 no_match:
#ifdef DEBUG
	if (debug)
		printf(" no match");
#endif
	if (!error)
		error = ENOENT;

	f->f_dev->dv_close(f);
 err:
	f->f_ops = NULL;
	f->f_flags = 0;
#ifdef DEBUG
	if (debug)
		printf("=>err(%u)\n", error);
#endif
	errno = error;
	return (-1);
}
@


1.4
log
@if f->f_ops is set to a filesystem by devopen(), and that filesystem
returns ENOENT for the file to be opened, do *not* try all other fi-
lesystems for the same file
• sparc does not set f_ops
• lmbmfs is fixed by this
• tftp and nfs set f_ops; these files are obviously not local
• BIOS does not set f_ops
so this *should* be safe
@
text
@d1 1
a1 1
/**	$MirOS: src/sys/lib/libsa/open.c,v 1.3 2009/08/11 13:24:00 tg Exp $ */
d71 2
@


1.3
log
@Totally revamp the virtual device code.

Unbreak:
• floppy access (BIOS)
• hard disc access (BIOS)
• CD-ROM El Torito access (BIOS)
• cd9660, fat, ffs (filesystems)

Not tested:
• tftp, nfs (PXE, NET, filesystems)
• lmbmfs (lmbm)
@
text
@d1 1
a1 1
/**	$MirOS$ */
d146 2
a147 1
		}
d173 1
@


1.2
log
@use standard open function (merge functionality)
@
text
@d1 1
d67 2
d86 5
d96 4
d110 4
d115 4
d126 4
d135 4
d140 5
a144 1
		if (error == 0)
d146 1
d151 4
d159 4
d165 4
d172 4
d183 4
@


1.1
log
@Initial revision
@
text
@d89 1
a89 1
fnd:
d109 7
d131 2
a132 1
err:
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
