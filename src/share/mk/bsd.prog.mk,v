head	1.31;
access;
symbols
	MIRBSD_10:1.26.0.2
	MIRBSD_10_BASE:1.26
	MIRBSD_9_BASE:1.23
	MIRBSD_8:1.19.0.2
	MIRBSD_8_BASE:1.19
	cvs-200507211800:1.1.1.2
	cvs-200507040220:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.31
date	2008.12.10.21.46.26;	author tg;	state Exp;
branches;
next	1.30;
commitid	100494038A97D264953;

1.30
date	2008.11.10.21.10.22;	author tg;	state Exp;
branches;
next	1.29;
commitid	1004918A32F7C57CF28;

1.29
date	2008.10.05.20.14.30;	author tg;	state Exp;
branches;
next	1.28;
commitid	10048E9203C1320A0A1;

1.28
date	2008.04.10.14.07.46;	author tg;	state Exp;
branches;
next	1.27;
commitid	10047FE1F455D192B1C;

1.27
date	2008.04.10.13.55.56;	author tg;	state Exp;
branches;
next	1.26;
commitid	10047FE1C7755F47616;

1.26
date	2007.04.28.00.12.46;	author tg;	state Exp;
branches;
next	1.25;
commitid	1004632918E6CE6474D;

1.25
date	2006.10.06.22.05.59;	author tg;	state Exp;
branches;
next	1.24;
commitid	1004526D3546BB9311A;

1.24
date	2006.07.03.01.36.36;	author tg;	state Exp;
branches;
next	1.23;
commitid	10044A874B92DB7679F;

1.23
date	2006.06.17.20.08.08;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004494613562439DA0;

1.22
date	2006.05.27.11.07.02;	author tg;	state Exp;
branches;
next	1.21;
commitid	100447832992D9C2351;

1.21
date	2006.03.19.20.10.13;	author tg;	state Exp;
branches;
next	1.20;
commitid	100441DBABB7ACA9932;

1.20
date	2006.02.21.18.01.55;	author tg;	state Exp;
branches;
next	1.19;
commitid	10043FB559B79041714;

1.19
date	2005.12.15.01.28.38;	author tg;	state Exp;
branches;
next	1.18;
commitid	10043A0C6C66D3269DA;

1.18
date	2005.11.19.12.34.57;	author tg;	state Exp;
branches;
next	1.17;
commitid	604d437f1bef96f7;

1.17
date	2005.10.26.17.51.27;	author tg;	state Exp;
branches;
next	1.16;
commitid	6ce0435fc22b67c9;

1.16
date	2005.10.21.10.51.16;	author tg;	state Exp;
branches;
next	1.15;
commitid	58344358c8011f43;

1.15
date	2005.10.20.12.47.06;	author tg;	state Exp;
branches;
next	1.14;
commitid	5e10435791d7157c;

1.14
date	2005.10.06.22.04.21;	author tg;	state Exp;
branches;
next	1.13;
commitid	173543459f72ef77;

1.13
date	2005.10.06.22.02.47;	author tg;	state Exp;
branches;
next	1.12;
commitid	177043459f08f7b5;

1.12
date	2005.10.06.21.47.56;	author tg;	state Exp;
branches;
next	1.11;
commitid	337843459b963360;

1.11
date	2005.08.28.19.39.01;	author tg;	state Exp;
branches;
next	1.10;
commitid	6ba3431212b764dc;

1.10
date	2005.07.04.02.37.18;	author tg;	state Exp;
branches;
next	1.9;
commitid	5a3342c8a0eed80e;

1.9
date	2005.04.29.15.42.53;	author tg;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.19.15.47.58;	author tg;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.16.21.22.33;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.12.19.24.58;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.12.19.13.34;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.10.20.09.25;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.10.20.04.26;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.14.18.57.46;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.17;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.17;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.04.02.25.10;	author tg;	state Exp;
branches;
next	;
commitid	5c2f42c89e13d7c7;


desc
@@


1.31
log
@same to “make lint” target
@
text
@# $MirOS: src/share/mk/bsd.prog.mk,v 1.30 2008/11/10 21:10:22 tg Exp $
# $OpenBSD: bsd.prog.mk,v 1.44 2005/04/15 17:18:57 espie Exp $
# $NetBSD: bsd.prog.mk,v 1.55 1996/04/08 21:19:26 jtc Exp $
# @@(#)bsd.prog.mk	5.26 (Berkeley) 6/25/91

.if !defined(BSD_PROG_MK)
BSD_PROG_MK=1

.if exists(${.CURDIR}/../Makefile.inc)
.  include "${.CURDIR}/../Makefile.inc"
.endif

.if !defined(BSD_OWN_MK)
.  include <bsd.own.mk>
.endif

.if ${LTMIRMAKE:L} == "yes"
.  include <bsd.lt.mk>
.endif

.SUFFIXES:	.out .o .lo .s .S .c .m .cc .C .cxx .cpp .y .l .9 .8 .7 .6 .5 .4 .3 .2 .1 .0

.if ${WARNINGS:L} == "yes"
CFLAGS+=	${CDIAGFLAGS}
CXXFLAGS+=	${CXXDIAGFLAGS}
.endif
.if !${COPTS:M-fhonour-copts} || !${CFLAGS:M-fhonour-copts}
CFLAGS+=	${COPTS}
.endif
CXXFLAGS+=	${CXXOPTS} -fno-omit-frame-pointer
HOSTCFLAGS?=	${CFLAGS}

.if defined(PROG) && !empty(PROG)
SRCS?=		${PROG}.c
.  if !empty(SRCS:N*.h:N*.sh)
#.    if ${LTMIRMAKE:L} == "yes"
#OBJS+=		${SRCS:N*.h:N*.sh:R:S/$/.lo/g}
#.    else
OBJS+=		${SRCS:N*.h:N*.sh:R:S/$/.o/g}
#.    endif
LOBJS+=		${LSRCS:.c=.ln} ${SRCS:M*.c:.c=.ln} \
		${SRCS:M*.l:.l=.ln} ${SRCS:M*.y:.y=.ln}
.    for _i in ${SRCS:M*.l} ${SRCS:M*.y}
CLEANFILES+=	${_i:R}.c
.    endfor
.    if ${YFLAGS:M-d}
.      for _i in ${SRCS:M*.y}
CLEANFILES+=	${_i:R}.h
.      endfor
.    endif
.  endif

.  if !empty(SRCS:M*.cc) || !empty(SRCS:M*.C) || \
    !empty(SRCS:M*.cxx) || !empty(SRCS:M*.cpp)
.    if ${LTMIRMAKE:L} == "yes"
LINKER?=	${LIBTOOL} --tag=CXX --mode=link ${CXX}
.    else
LINKER?=	${CXX}
.    endif
.  elif !empty(SRCS:M*.F) || !empty(SRCS:M*.f)
.    if ${LTMIRMAKE:L} == "yes"
LINKER?=	${LIBTOOL} --tag=CC --mode=link ${FC}
.    else
LINKER?=	${FC}
.    endif
.  else
.    if ${LTMIRMAKE:L} == "yes"
LINKER?=	${LIBTOOL} --tag=CC --mode=link ${CC}
.    else
LINKER?=	${CC}
.    endif
.  endif

.  if defined(OBJS) && !empty(OBJS)
.    if ${RTLD_TYPE} == "dyld"
LINK.prog?=	${LINKER} ${LDFLAGS} ${LDSTATIC} ${OBJS} ${LDADD}
.    else
LINK.prog?=	${LINKER} ${LDFLAGS} ${LDSTATIC} \
		${OBJS} -Wl,--start-group ${LDADD} -Wl,--end-group
.    endif

${PROG}: ${CRTI} ${CRTBEGIN} ${LIBCRT0} ${OBJS} ${LIBC} ${DPADD} ${CRTEND} ${CRTN}
	${LINK.prog} -o $@@
.  else
LINK.prog?=	NO
.  endif

MAN?=	${PROG}.1
.endif	# def/not empty PROG

.MAIN: all
all: ${PROG} _SUBDIRUSE

.if !target(clean)
clean: _SUBDIRUSE
.  if ${LTMIRMAKE:L} == "yes"
	-${LIBTOOL} --mode=clean rm ${PROG} *.lo
.  endif
	rm -f a.out [Ee]rrs mklog core *.core \
	    ${PROG} ${OBJS} ${LOBJS} ${CLEANFILES}
.endif

cleandir: _SUBDIRUSE clean
.if ${NOMAN:L} != "no"
	rm -f *.cat?
.endif

.if !target(install)
.  if !target(beforeinstall)
beforeinstall:
.  endif
.  if !target(afterinstall)
afterinstall:
.  endif

.  if !target(realinstall)
realinstall:
.    if defined(PROG) && !empty(PROG)
.      if ${LTMIRMAKE:L} == "yes"
	${LIBTOOL} --mode=install ${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} \
	    -o ${BINOWN} -g ${BINGRP} -m ${BINMODE} ${PROG} ${DESTDIR}${BINDIR}/
.      else
.        if (${OBJECT_FMT} == "Mach-O") && (${LINK.prog} != "NO")
	@@print -r Relinking ${PROG}
	${LINK.prog} -o ${PROG}
.        endif
	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -o ${BINOWN} -g ${BINGRP} \
	    -m ${BINMODE} ${PROG} ${DESTDIR}${BINDIR}/
.      endif
.    endif
.  endif

install: maninstall _SUBDIRUSE
.  if defined(LINKS) && !empty(LINKS)
.    for lnk file in ${LINKS}
	@@l=${DESTDIR}${lnk}; \
	 t=${DESTDIR}${file}; \
	 print -r -- $$t -\> $$l; \
	 rm -f $$t; ln $$l $$t || cp $$l $$t
.    endfor
.  endif

maninstall: afterinstall
afterinstall: realinstall
realinstall: beforeinstall
.endif	# !target install

.if !target(lint)
.  if empty(LINTFLAGS:M-l*)
LINTFLAGS+=	-lstdc
.  endif
lint: ${LOBJS}
.  if defined(LOBJS) && !empty(LOBJS)
	@@env CC=${_ORIG_CC:Q} ${LINT} ${LINTFLAGS} ${LDFLAGS:M-L*} \
	    ${LOBJS} ${LDADD:N-W*}
.  endif
.endif

.if ${NOMAN:L} == "no"
.  include <bsd.man.mk>
.endif

.include <bsd.obj.mk>
.include <bsd.dep.mk>
.include <bsd.subdir.mk>
.include <bsd.sys.mk>

.endif
@


1.30
log
@• add minimal Fortran support to <sys.mk>, <bsd.prog.mk>, <bsd.lib.mk>
  ‣ untested except for 99 bottles of beer example
• bump OS to MirBSD #10uA3, so that people can actually compile LLVM
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.29 2008/10/05 20:14:30 tg Exp $
d154 2
a155 1
	@@${LINT} ${LINTFLAGS} ${LDFLAGS:M-L*} ${LOBJS} ${LDADD:N-W*}
@


1.29
log
@add experimental, discouraged LTMIRMAKE variable and modus operandi
sort of works for dylibs and programmes; does not consider bundles yet

shouldn’t affect normal operation at all

agreed to commit bsiegert@@
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.28 2008/04/10 14:07:46 tg Exp $
d60 6
@


1.28
log
@optimise
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.27 2008/04/10 13:55:56 tg Exp $
d17 5
a21 1
.SUFFIXES:	.out .o .s .S .c .m .cc .C .cxx .cpp .y .l .9 .8 .7 .6 .5 .4 .3 .2 .1 .0
d36 3
d40 1
d55 3
d59 1
d61 3
d65 1
d90 3
d113 5
a117 1
.      if (${OBJECT_FMT} == "Mach-O") && (${LINK.prog} != "NO")
d120 1
a120 1
.      endif
d123 1
@


1.27
log
@fix C++ support: I’ve seen distfiles with *.cpp and *.C files now
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.26 2007/04/28 00:12:46 tg Exp $
d95 1
a95 1
	@@echo Relinking ${PROG}
d108 1
a108 1
	 echo $$t -\> $$l; \
@


1.26
log
@more lex/yacc overhaul, tentatively
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.25 2006/10/06 22:05:59 tg Exp $
d17 1
a17 1
.SUFFIXES:	.out .o .s .S .c .m .cc .cxx .y .l .9 .8 .7 .6 .5 .4 .3 .2 .1 .0
d45 2
a46 1
.  if !empty(SRCS:M*.C) || !empty(SRCS:M*.cc) || !empty(SRCS:M*.cxx)
@


1.25
log
@add -fno-omit-frame-pointer to all C++ compilations, here too
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.24 2006/07/03 01:36:36 tg Exp $
d30 1
a30 1
SRCS?=	${PROG}.c
d32 11
a42 2
OBJS+=	${SRCS:N*.h:N*.sh:R:S/$/.o/g}
LOBJS+=	${LSRCS:.c=.ln} ${SRCS:M*.c:.c=.ln}
@


1.24
log
@sync order
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.23 2006/06/17 20:08:08 tg Exp $
d26 1
a26 1
CXXFLAGS+=	${CXXOPTS}
@


1.23
log
@can't do it the same in <bsd.cfwrap.mk>
so distinguish, again
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.22 2006/05/27 11:07:02 tg Exp $
d50 1
a50 1
${PROG}: ${LIBCRT0} ${OBJS} ${LIBC} ${CRTBEGIN} ${CRTEND} ${CRTI} ${CRTN} ${DPADD}
@


1.22
log
@* not only has Darwin no GNU ld but cctools (which doesn't support
  -( ... -) options), but also we can't require it because binutils
  doesn't support configuring a Darwin ld(1), so adapt the defini-
  tions of LINK.prog and (see below) LINK.shlib to not frame ${LDADD}
  with these if not supported
* LINK.shlib didn't contain ${LDADD}, sync with LINK.prog
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.21 2006/03/19 20:10:13 tg Exp $
d27 1
@


1.21
log
@+.if !${COPTS:M-fhonour-copts} || !${CFLAGS:M-fhonour-copts}
 CFLAGS+=       ${COPTS}
+.endif

This saves most of the "passed twice" problems of ports which
use our make and <bsd.prog.mk> and friends.
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.20 2006/02/21 18:01:55 tg Exp $
d42 3
d47 1
@


1.20
log
@erm, LDADD_CYCLIC was long gone (even before the release)
in <bsd.lib.mk>, sync
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.19 2005/12/15 01:28:38 tg Exp $
d23 1
d25 1
@


1.19
log
@remove hooks for DEBUGLIBS, DEBUGPROGS
gdb happily loaded $PROG.dbg but forgot libc.so.X.Y.dbg *sigh*
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.18 2005/11/19 12:34:57 tg Exp $
a38 5
.if defined(LDADD_CYCLIC) && defined(LDADD) && !empty(LDADD)
# This has "a significant performance cost", cf. ld(texinfo)
LDADD:=		-Wl,--start-group ${LDADD} -Wl,--end-group
.endif

d41 1
a41 1
		${OBJS} ${LDADD}
@


1.18
log
@add (and, exceptionally, document) LDADD_CYCLIC
bump mirmake version
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.17 2005/10/26 17:51:27 tg Exp $
a24 4
.if ${DEBUGPROGS:L} == "yes"
CFLAGS+=	-g
CXXFLAGS+=	-g
.endif
a85 1
.      if (${DEBUGPROGS:L} != "yes") || empty(INSTALL_STRIP)
a87 12
.      else
	-rm -f ${DESTDIR}${BINDIR}/${PROG}.{dbg,tmp}
	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} -o ${BINOWN} -g ${BINGRP} \
	    -m 600 ${PROG} ${DESTDIR}${BINDIR}/${PROG}.tmp
	objcopy --only-keep-debug ${PROG} \
	    ${DESTDIR}${BINDIR}/${PROG}.dbg && cd ${DESTDIR}${BINDIR} \
	    && objcopy --strip-debug --add-gnu-debuglink=${PROG}.dbg \
	    ${PROG}.tmp && chmod ${SHAREMODE} ${PROG}.dbg && \
	    chown ${BINOWN}:${BINGRP} ${PROG}.dbg && ln -f \
	    ${PROG}.tmp ${PROG} && chmod ${BINMODE} \
	    ${PROG} && rm -f ${PROG}.tmp
.      endif
@


1.17
log
@make DEBUG{LIBS,PROGS} work as user
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.16 2005/10/21 10:51:16 tg Exp $
d43 5
d129 1
a129 1
	@@${LINT} ${LINTFLAGS} ${LDFLAGS:M-L*} ${LOBJS} ${LDADD}
@


1.16
log
@* sys.mk, param.h: bump (sys.mk += 2 even)
  -> library changes, timekeeping fixes
* bsd.prog.mk: do not attempt to objcopy on DEBUGPROGS install if
  INSTALL_STRIP is empty (it doesn't like scripts, and besides,
  if we don't strip out debug information anyway...)
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.15 2005/10/20 12:47:06 tg Exp $
d91 1
a91 1
	    -m ${BINMODE} ${PROG} ${DESTDIR}${BINDIR}/${PROG}.tmp
d97 2
a98 1
	    ${PROG}.tmp ${PROG} && rm -f ${PROG}.tmp
@


1.15
log
@solve concurrency problems with DEBUG* installation
by using temporary files and ln -f
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.14 2005/10/06 22:04:21 tg Exp $
d85 1
a85 1
.      if ${DEBUGPROGS:L} != "yes"
@


1.14
log
@* typo fixes
* fix omission in .SUFFIXES
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.13 2005/10/06 22:02:47 tg Exp $
d85 1
d88 10
a97 7
.      if ${DEBUGPROGS:L} == "yes"
	-rm -f ${DESTDIR}${BINDIR}/${PROG}.dbg
	objcopy --only-keep-debug ${PROG} ${DESTDIR}${BINDIR}/${PROG}.dbg && \
	    cd ${DESTDIR}${BINDIR} && \
	    objcopy --strip-debug --add-gnu-debuglink=${PROG}.dbg ${PROG} && \
	    chmod ${SHAREMODE} ${PROG}.dbg && \
	    chown ${BINOWN}:${BINGRP} ${PROG}.dbg
@


1.13
log
@remove the $@@.dbg before attempting to create a new, just in case
(I don't trust GNU tools to DTRT)
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.12 2005/10/06 21:47:56 tg Exp $
d17 1
a17 1
.SUFFIXES:	.out .o .s .S .c .m .cc .cxx .y .l .8 .7 .6 .5 .4 .3 .2 .1 .0
@


1.12
log
@this is how DEBUGLINK actually works... don't ask...
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.11 2005/08/28 19:39:01 tg Exp $
d88 1
@


1.11
log
@* no RANLIB needed for us any more
* remove old DEBUGLIBS (libFOO_g.a)
  still available by 'make libFOO_g.a', but ignored by make install
* add new DEBUGLIBS and DEBUGPROGS using .gnu.debuglink section
* fix display
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.10 2005/07/04 02:37:18 tg Exp $
a27 1
CLEANFILES+=	${PROG}.dbg
a48 5
.    if ${DEBUGPROGS:L} == "yes"
	objcopy --only-keep-debug $@@ $@@.dbg
	objcopy --strip-debug $@@
	objcopy --add-gnu-debuglink=$@@.dbg $@@
.    endif
a83 5
.        if ${DEBUGPROGS:L} == "yes"
	objcopy --only-keep-debug ${PROG} ${PROG}.dbg
	objcopy --strip-debug ${PROG}
	objcopy --add-gnu-debuglink=${PROG}.dbg ${PROG}
.        endif
d88 5
a92 2
	${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m ${SHAREMODE} \
	    ${PROG}.dbg ${DESTDIR}${BINDIR}/
@


1.10
log
@merge OpenBSD
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.9 2005/04/29 15:42:53 tg Exp $
d25 5
d50 5
d90 5
d98 4
@


1.9
log
@get rid of SHAREDSTRINGS
idea from espie@@obsd
@
text
@d1 2
a2 2
# $MirOS: src/share/mk/bsd.prog.mk,v 1.8 2005/04/19 15:47:58 tg Exp $
# $OpenBSD: bsd.prog.mk,v 1.39 2004/06/03 20:51:07 miod Exp $
@


1.8
log
@cosmetics for relinking arches

ok ("super") bsiegert@@

Attention MirMake users: this slightly changes the semantics of LINK.prog
from "command" to "NO or command" (as seen and hated in rc.conf)
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.7 2005/04/16 21:22:33 tg Exp $
a25 27
.if defined(SHAREDSTRINGS)
CLEANFILES+=	strings
.c.o:
	${CC} -E ${CFLAGS} ${.IMPSRC} | xstr -c -
	@@${CC} ${CFLAGS} -c x.c -o $@@
	@@rm -f x.c

.cc.o:
	${CXX} -E ${CXXFLAGS} ${.IMPSRC} | xstr -c -
	@@mv -f x.c x.cc
	@@${CXX} ${CXXFLAGS} -c x.cc -o $@@
	@@rm -f x.cc

.C.o:
	${CXX} -E ${CXXFLAGS} ${.IMPSRC} | xstr -c -
	@@mv -f x.c x.C
	@@${CXX} ${CXXFLAGS} -c x.C -o $@@
	@@rm -f x.C

.cxx.o:
	${CXX} -E ${CXXFLAGS} ${.IMPSRC} | xstr -c -
	@@mv -f x.c x.cxx
	@@${CXX} ${CXXFLAGS} -c x.cxx -o $@@
	@@rm -f x.cxx
.endif


@


1.7
log
@change order of .SUFFIXES - don't sort!
partially inspired by NetBSD(R), most by OpenBSD, final decision by me
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.6 2005/04/12 19:24:58 tg Exp $
d73 1
a73 1
LINK.prog?=	\#
d104 1
a104 1
.      if ${OBJECT_FMT} == "Mach-O"
@


1.6
log
@damn, I botched
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.5 2005/04/12 19:13:34 tg Exp $
d17 1
a17 1
.SUFFIXES: .out .o .c .cc .C .cxx .y .l .s .8 .7 .6 .5 .4 .3 .2 .1 .0
@


1.5
log
@don't relink if we didn't build anything

<bsd.prog.mk> is also used for perl, shell, and
stuff with no prog at all (man only), mind you!
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.4 2005/04/10 20:09:25 tg Exp $
d66 1
a69 1
.  if defined(OBJS) && !empty(OBJS)
d72 2
d103 1
a103 1
.    if defined(PROG) && !empty(PROG) && defined(OBJS) && !empty(OBJS)
@


1.4
log
@* support relinking shared libraries and dependent programmes on install
  on all Mach-O systems (Darwin diffs from bsiegert@@)
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.3 2005/04/10 20:04:26 tg Exp $
d101 1
a101 1
.    if defined(PROG) && !empty(PROG)
@


1.3
log
@* unify LINK.shlib and LINK.prog
* use $@@ not ${.TARGET}
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.prog.mk,v 1.2 2005/02/14 18:57:46 tg Exp $
d102 4
@


1.2
log
@merge these from ncvs 1
@
text
@d1 1
a1 1
# $MirOS$
d30 1
a30 1
	@@${CC} ${CFLAGS} -c x.c -o ${.TARGET}
d36 1
a36 1
	@@${CXX} ${CXXFLAGS} -c x.cc -o ${.TARGET}
d42 1
a42 1
	@@${CXX} ${CXXFLAGS} -c x.C -o ${.TARGET}
d48 1
a48 1
	@@${CXX} ${CXXFLAGS} -c x.cxx -o ${.TARGET}
d61 1
a61 1
LINKER?=${CXX}
d63 1
a63 1
LINKER?=${CC}
d66 3
d71 1
a71 1
	${LINKER} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} ${OBJS} ${LDADD}
@


1.1
log
@Initial revision
@
text
@d1 7
a7 3
#	$OpenBSD: bsd.prog.mk,v 1.39 2004/06/03 20:51:07 miod Exp $
#	$NetBSD: bsd.prog.mk,v 1.55 1996/04/08 21:19:26 jtc Exp $
#	@@(#)bsd.prog.mk	5.26 (Berkeley) 6/25/91
d10 1
a10 1
.include "${.CURDIR}/../Makefile.inc"
d13 3
a15 1
.include <bsd.own.mk>
d20 2
a21 2
CFLAGS+=       ${CDIAGFLAGS}
CXXFLAGS+=     ${CXXDIAGFLAGS}
d24 1
a24 61
CXXFLAGS+=     ${CXXOPTS}

.if (${ELF_TOOLCHAIN:L} == "yes")
CRTBEGIN?=       ${DESTDIR}/usr/lib/crtbegin.o
CRTEND?=         ${DESTDIR}/usr/lib/crtend.o
.endif

LIBCRT0?=	${DESTDIR}/usr/lib/crt0.o
LIB45?=		${DESTDIR}/usr/lib/lib45.a
LIBACL?=	${DESTDIR}/usr/lib/libacl.a
LIBASN1?=	${DESTDIR}/usr/lib/libasn1.a
LIBC?=		${DESTDIR}/usr/lib/libc.a
LIBCOMPAT?=	${DESTDIR}/usr/lib/libcompat.a
LIBCRYPTO?=	${DESTDIR}/usr/lib/libcrypto.a
LIBCURSES?=	${DESTDIR}/usr/lib/libcurses.a
LIBDES?=	${DESTDIR}/usr/lib/libdes.a
LIBEDIT?=	${DESTDIR}/usr/lib/libedit.a
LIBEVENT?=	${DESTDIR}/usr/lib/libevent.a
LIBGCC?=	${DESTDIR}/usr/lib/libgcc.a
LIBGSSAPI?=	${DESTDIR}/usr/lib/libgssapi.a
LIBHDB?=	${DESTDIR}/usr/lib/libhdb.a
LIBKADM?=	${DESTDIR}/usr/lib/libkadm.a
LIBKADM5CLNT?=	${DESTDIR}/usr/lib/libkadm5clnt.a
LIBKADM5SRV?=	${DESTDIR}/usr/lib/libkadm5srv.a
LIBKAFS?=	${DESTDIR}/usr/lib/libkafs.a
LIBKDB?=	${DESTDIR}/usr/lib/libkdb.a
LIBKEYNOTE?=	${DESTDIR}/usr/lib/libkeynote.a
LIBKRB?=	${DESTDIR}/usr/lib/libkrb.a
LIBKRB5?=	${DESTDIR}/usr/lib/libkrb5.a
LIBKVM?=	${DESTDIR}/usr/lib/libkvm.a
LIBL?=		${DESTDIR}/usr/lib/libl.a
LIBM?=		${DESTDIR}/usr/lib/libm.a
LIBOLDCURSES?=	${DESTDIR}/usr/lib/libocurses.a
LIBPCAP?=	${DESTDIR}/usr/lib/libpcap.a
LIBPERL?=	${DESTDIR}/usr/lib/libperl.a
LIBRPCSVC?=	${DESTDIR}/usr/lib/librpcsvc.a
LIBSECTOK?=	${DESTDIR}/usr/lib/libsectok.a
LIBSKEY?=	${DESTDIR}/usr/lib/libskey.a
LIBSSL?=	${DESTDIR}/usr/lib/libssl.a
LIBTELNET?=	${DESTDIR}/usr/lib/libtelnet.a
LIBTERMCAP?=	${DESTDIR}/usr/lib/libtermcap.a
LIBTERMLIB?=	${DESTDIR}/usr/lib/libtermlib.a
LIBUSB?=	${DESTDIR}/usr/lib/libusbhid.a
LIBUTIL?=	${DESTDIR}/usr/lib/libutil.a
LIBWRAP?=	${DESTDIR}/usr/lib/libwrap.a
LIBY?=		${DESTDIR}/usr/lib/liby.a
LIBZ?=		${DESTDIR}/usr/lib/libz.a

.if (${MACHINE_ARCH} == "alpha" || ${MACHINE_ARCH} == "amd64" || \
     ${MACHINE_ARCH} == "i386")
LIBARCH?=	${DESTDIR}/usr/lib/lib${MACHINE_ARCH}.a
.else
LIBARCH?=
.endif

# old stuff
LIBDBM?=	${DESTDIR}/usr/lib/libdbm.a
LIBMP?=		${DESTDIR}/usr/lib/libmp.a
LIBPC?=		${DESTDIR}/usr/lib/libpc.a
LIBPLOT?=	${DESTDIR}/usr/lib/libplot.a
LIBRESOLV?=	${DESTDIR}/usr/lib/libresolv.a
d27 1
a27 1
CLEANFILES+=strings
d53 1
a53 1
.if defined(PROG)
d55 1
a55 1
.if !empty(SRCS:N*.h:N*.sh)
d58 1
a58 4
.endif

.if defined(OBJS) && !empty(OBJS)
.if defined(DESTDIR)
d60 10
a69 2
${PROG}: ${LIBCRT0} ${OBJS} ${LIBC} ${CRTBEGIN} ${CRTEND} ${DPADD}
	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} -nostdlib -L${DESTDIR}/usr/lib ${LIBCRT0} ${CRTBEGIN} ${OBJS} ${LDADD} -lgcc -lc -lgcc ${CRTEND}
d71 2
a72 12
.else

${PROG}: ${LIBCRT0} ${OBJS} ${LIBC} ${CRTBEGIN} ${CRTEND} ${DPADD}
	${CC} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} ${OBJS} ${LDADD}

.endif	# defined(DESTDIR)
.endif	# defined(OBJS) && !empty(OBJS)

.if	!defined(MAN)
MAN=	${PROG}.1
.endif	# !defined(MAN)
.endif	# defined(PROG)
d84 3
d89 1
a89 1
.if !target(beforeinstall)
d91 2
a92 2
.endif
.if !target(afterinstall)
d94 1
a94 1
.endif
d96 1
a96 1
.if !target(realinstall)
d98 1
a98 1
.if defined(PROG)
d100 3
a102 3
	    -m ${BINMODE} ${PROG} ${DESTDIR}${BINDIR}
.endif
.endif
d105 2
a106 2
.if defined(LINKS) && !empty(LINKS)
.  for lnk file in ${LINKS}
d110 3
a112 3
	 rm -f $$t; ln $$l $$t
.  endfor
.endif
d117 1
a117 1
.endif
d120 3
d124 1
a124 1
.if defined(LOBJS) && !empty(LOBJS)
d126 1
a126 5
.endif
.endif

.if !defined(NOMAN)
.include <bsd.man.mk>
d129 2
a130 2
.if !defined(NONLS)
.include <bsd.nls.mk>
d137 2
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@the dreaded importer strikes again
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.prog.mk,v 1.44 2005/04/15 17:18:57 espie Exp $
d80 27
d109 1
a109 1
.  if !empty(SRCS:N*.h:N*.sh)
d112 4
a115 1
.  endif
a116 2
.  if defined(OBJS) && !empty(OBJS)
.    if !empty(SRCS:M*.C) || !empty(SRCS:M*.cc) || !empty(SRCS:M*.cxx)
d118 4
a121 2
	${CXX} ${LDFLAGS} ${LDSTATIC} -o ${.TARGET} ${OBJS} ${LDADD}
.    else
a123 2
.    endif
.  endif	# defined(OBJS) && !empty(OBJS)
d125 4
a128 1
.  if	!defined(MAN)
d130 1
a130 1
.  endif	# !defined(MAN)
d156 1
a156 1
	    -m ${BINMODE} ${PROG} ${DESTDIR}${BINDIR}/${PROG}
@

