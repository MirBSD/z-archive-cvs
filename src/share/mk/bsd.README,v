head	1.14;
access;
symbols
	MIRBSD_10:1.12.0.2
	MIRBSD_10_BASE:1.12
	MIRBSD_9_BASE:1.10
	MIRBSD_8:1.10.0.2
	MIRBSD_8_BASE:1.10
	cvs-200507211800:1.1.1.2
	cvs-200507040220:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2018.10.07.01.10.55;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005BB95CA10BF418E8;

1.13
date	2008.05.07.13.50.21;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004821B3A342AA83EE;

1.12
date	2007.06.07.17.22.38;	author tg;	state Exp;
branches;
next	1.11;
commitid	10046683EF46F9D9C3A;

1.11
date	2007.05.17.18.38.36;	author tg;	state Exp;
branches;
next	1.10;
commitid	100464CA0BC3310E768;

1.10
date	2005.12.15.01.28.37;	author tg;	state Exp;
branches;
next	1.9;
commitid	10043A0C6C66D3269DA;

1.9
date	2005.11.19.12.34.57;	author tg;	state Exp;
branches;
next	1.8;
commitid	604d437f1bef96f7;

1.8
date	2005.08.28.19.39.01;	author tg;	state Exp;
branches;
next	1.7;
commitid	6ba3431212b764dc;

1.7
date	2005.08.21.11.45.49;	author tg;	state Exp;
branches;
next	1.6;
commitid	1c13430869647d4b;

1.6
date	2005.07.04.02.37.18;	author tg;	state Exp;
branches;
next	1.5;
commitid	5a3342c8a0eed80e;

1.5
date	2005.04.29.15.42.53;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.15.18.26.11;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.14.19.21.20;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.14.18.57.45;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.17;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.17;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.04.02.25.10;	author tg;	state Exp;
branches;
next	;
commitid	5c2f42c89e13d7c7;


desc
@@


1.14
log
@spelling cleanup: “programme” is distinct from “program”; even in
British English, the latter is used for computer programs, while
the former serves for things like the TV programme, or a programme
to plant trees
@
text
@# $MirOS: src/share/mk/bsd.README,v 1.13 2008/05/07 13:50:21 tg Exp $
# $OpenBSD: bsd.README,v 1.37 2005/04/15 17:18:57 espie Exp $
# $NetBSD: bsd.README,v 1.17 1996/04/13 02:08:08 thorpej Exp $
# @@(#)bsd.README	5.1 (Berkeley) 5/11/90

This is the README file for the new make "include" files for the BSD
source tree.  The files are installed in /usr/share/mk, and are, by
convention, named with the suffix ".mk".

bsd.dep.mk		- handle Makefile dependencies
bsd.doc.mk		- building *roff system documents
bsd.lib.mk		- support for building libraries
bsd.lkm.mk		- building loadable kernel modules
bsd.man.mk		- installing manual pages and their links
bsd.obj.mk		- creating 'obj' directories and cleaning up
bsd.own.mk		- define common variables
bsd.port.mk		- building ports
bsd.port.subdir.mk	- targets for building subdirectories for ports
bsd.prog.mk		- building programs from source files
bsd.subdir.mk		- targets for building subdirectories
bsd.sys.mk		- building bsd from the source tree

Note, this file is not intended to replace reading through the .mk
files for anything tricky. It's also not been updated for a long time.

All of the files bear no explicit copyright notice or licence, please
feel free to use them as fit. The MirOS Project would like to receive
due credit if possible, though.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

RANDOM THINGS WORTH KNOWING:

The files are simply C-style #include files, and pretty much behave like
you'd expect.  The syntax is slightly different in that a single '.' is
used instead of the hash mark, i.e. ".include <bsd.prog.mk>".

One difference that will save you lots of debugging time is that inclusion
of the file is normally done at the *end* of the Makefile.  The reason for
this is because .mk files often modify variables and behavior based on the
values of variables set in the Makefile.  To make this work, remember that
the FIRST target found is the target that is used, i.e. if the Makefile has:

	a:
		echo a
	a:
		echo a number two

the command "make a" will echo "a".  To make things confusing, the SECOND
variable assignment is the overriding one, i.e. if the Makefile has:

	a=	foo
	a=	bar

	b:
		echo ${a}

the command "make b" will echo "bar".  This is for compatibility with the
way the V7 make behaved.

To make things even more confusing, make uses lazy evaluation. All
variables are expanded only when needed. Which means that, in

	a=	foo

	b: $(a)
		echo $(.ALLSRC)
		echo $(a)

	foo:
		touch foo

   	a=	bar

the command "make b" will echo "foo"; echo "bar".  The first $(a) means
"foo", because it's needed to generate the dependency rule when it's read,
but the second $(a) is only expanded when needed, at which point a contains
bar.

It's fairly difficult to make the BSD .mk files work when you're building
multiple programs in a single directory.  It's a lot easier to split up the
programs than to deal with the problem.  Most of the agony comes from making
the "obj" directory stuff work right, not because we switched to a new version
of make.  So, don't get mad at us, figure out a better way to handle multiple
architectures so we can quit using the symbolic link stuff.  (Imake doesn't
count.)

The file .depend in the source directory is expected to contain dependencies
for the source files.  This file is read automatically by make after reading
the Makefile.

The variable DESTDIR works as before.  It's not set anywhere but will change
the tree where the file gets installed.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The include file <sys.mk> has the default rules for all makes, in the BSD
environment or otherwise.  You probably don't want to touch this file.

# We want at least the following defines: (samples)
# MACHINE		i386			amiga
# MACHINE_ARCH		i386			m68k
# MACHINE_OS		BSD			GNU
# OStype		MirBSD			Debian (...)
# OSrev			7			version
# OSrpl			128			patchlevel
# OSNAME		MirBSD			uname -s
# OSname		mirbsd			uname -s in lowercase
# OScompat		3.5			equivalent OpenBSD version
# OStriplet		i386-ecce-mirbsd8	... for GNU software

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The include file <bsd.man.mk> handles installing manual pages and their
links.

It has a single target:

	maninstall:
		Install the manual pages and their links.

It sets/uses the following variables:

MANDIR		Base path for manual installation.

MANGRP		Manual group.

MANOWN		Manual owner.

MANMODE		Manual mode.

MAN		The manual pages to be installed (use a .1 - .9 suffix).

MLINKS		List of manual page links (using a .1 - .9 suffix).  The
		linked-to file must come first, the linked file second,
		and there may be multiple pairs.  The files are soft-linked.

The include file <bsd.man.mk> includes a file named "../Makefile.inc" if
it exists.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The include file <bsd.own.mk> contains source tree configuration parameters,
such as the owners, groups, etc. for both manual pages and binaries, and
a few global "feature configuration" parameters.

It has no targets.

To get system-specific configuration parameters, bsd.own.mk will try to
include the file specified by the "MAKECONF" variable.  If MAKECONF is not
set, or no such file exists, the system make configuration file,
/etc/${MAKE}.cfg, is included.  These files may define any of the variables
described below.

bsd.own.mk sets the following variables, if they are not already defined
(defaults are in brackets):

BSDSRCDIR	The real path to the system sources, so that 'make obj'
		will work correctly. [/usr/src]

BSDOBJDIR	The real path to the system 'obj' tree, so that 'make obj'
		will work correctly. [/usr/obj]

BINGRP		Binary group. [bin]

BINOWN		Binary owner. [root]

BINMODE		Binary mode. [555]

NONBINMODE	Mode for non-executable files. [444]

DIRMODE		Mode for new directories. [755]

MANDIR		Base path for manual installation. [/usr/share/man/cat]

MANGRP		Manual group. [bin]

MANOWN		Manual owner. [root]

MANMODE		Manual mode. [${NONBINMODE}]

LIBDIR		Base path for library installation. [/usr/lib]

LINTLIBDIR	Base path for lint(1) library installation. [/usr/libdata/lint]

LIBGRP		Library group. [${BINGRP}]

LIBOWN		Library owner. [${BINOWN}]

LIBMODE		Library mode. [${NONBINMODE}]

DOCDIR		Base path for system documentation (e.g. PSD, USD, etc.)
	        installation. [/usr/share/doc]

DOCGRP		Documentation group. [bin]

DOCOWN		Documentation owner. [root]

DOCMODE		Documentation mode. [${NONBINMODE}]

INSTALL_STRIP	The flag passed to the install program to cause the binary
		to be stripped.  This is to be used when building your
		own install script so that the entire system can be made
		stripped/not-stripped using a single knob.  Note that
		INSTALL_STRIP is not set if ${DEBUG} is defined. [-s]

INSTALL_COPY	The old usage of this flag is obsolescent since install(1)
		now copies by default.  However, it can also be used to
		specify that a file not be copied unless it is different
		(via the -p option).  See install(1) for details.  This
		is to be used when building our own install script so
		that the entire system can either be installed with copies,
		or copy-if-different using a single knob. [-c]

Additionally, the following variables may be set by bsd.own.mk or in a
make configuration file to modify the behaviour of the system build
process (default values are in brackets along with comments, if set by
bsd.own.mk):

SKEY		Compile in support for S/key authentication. [yes, set
		unconditionally]

SYS_INCLUDE	Copy or symlink kernel include files into /usr/include.
		Possible values are "symlinks" or "copies" (which is
		the same as the variable being unset).

NOPIC		Do not build PIC versions of system libraries, and
		do not build shared libraries. [no]

NOLINT		Do not build lint libraries. [yes]

DEBUG		Add -g to assembly, C compiler and linking passes.  Also
		doesn't	set INSTALL_STRIP to -s per default if defined.

WARNINGS	Adds appropriate warning flags (defined in CDIAGFLAGS,
		e.g., -Wall...) to compiles. [no]

SUDO		Command to run when doing "make install" portion of
		"make build".  If set to sudo, this allows one to run
		"make build" as a user other than root (assuming sudo
		is setup for that user).

PIPE		If set to "-pipe" gcc will be given the -pipe option
		which can speed up compiles on machines with memory
		to spare.  Instead of using temp files, gcc uses pipes
		for the temporary data.

bsd.own.mk is generally useful when building your own Makefiles so that
they use the same default owners etc. as the rest of the tree.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The include file <bsd.prog.mk> handles building programs from one or
more source files, along with their manual pages.  It has a limited number
of suffixes, consistent with the current needs of the BSD tree.

It has eight targets:

	all:
		build the program and its manual page
	clean:
		remove the program, any object files and the files a.out,
		Errs, errs, mklog, and core.
	cleandir:
		remove all of the files removed by the target clean, as
		well as .depend, tags, and any manual pages.
	depend:
		make the dependencies for the source files, and store
		them in the file .depend.
	includes:
		install any header files.
	install:
		install the program and its manual pages; if the Makefile
		does not itself define the target install, the targets
		beforeinstall and afterinstall may also be used to cause
		actions immediately before and after the install target
		is executed.
	lint:
		run lint on the source files
	tags:
		create a tags file for the source files.

It sets/uses the following variables:

BINGRP		Binary group.

BINOWN		Binary owner.

BINMODE		Binary mode.

CLEANFILES	Additional files to remove for the clean and cleandir targets.

COPTS		Additional flags to the compiler when creating C objects.

LDADD		Additional loader objects.  Usually used for libraries.
		For example, to load with the compatibility and utility
		libraries, use:

			LDADD+=-lutil -lcompat

		There can only be library invocations (-lfoo) and
		objects directly given.

LDADD_CYCLIC	Define this to make the order of LDADD objects irrelevant.
		This is, according to the ld(texinfo) manual, slow.

LDFLAGS		Additional loader flags.

LINKS		The list of binary links; should be full pathnames, the
		linked-to file coming first, followed by the linked
		file.  The files are hard-linked.  For example, to link
		/bin/test and /bin/[, use:

			LINKS=	${DESTDIR}/bin/test ${DESTDIR}/bin/[

MAN		Manual pages (should end in .1 - .9).  If no MAN variable is
		defined, "MAN=${PROG}.1" is assumed.

PROG		The name of the program to build.  If not supplied, nothing
		is built.

SRCS		List of source files to build the program.  If it's not
		defined, it's assumed to be ${PROG}.c.

DPADD		Additional dependencies for the program.  Usually used for
		libraries.  For example, to depend on the compatibility and
		utility libraries use:

			DPADD+=${LIBCOMPAT} ${LIBUTIL}

		The following libraries are predefined for DPADD:

			LIBC		/usr/lib/libc.a
			LIBCOMPAT	/usr/lib/libcompat.a
			LIBCRYPTO	/usr/lib/libcrypto.a
			LIBCURSES	/usr/lib/libcurses.a
			LIBDES		/usr/lib/libdes.a
			LIBEDIT		/usr/lib/libedit.a
			LIBEVENT	/usr/lib/libevent.a
			LIBGCC		/usr/lib/libgcc.a
			LIBKEYNOTE	/usr/lib/libkeynote.a
			LIBKVM		/usr/lib/libkvm.a
			LIBL		/usr/lib/libl.a
			LIBM		/usr/lib/libm.a
			LIBOLDCURSES	/usr/lib/libocurses.a
			LIBPCAP		/usr/lib/libpcap.a
			LIBPERL		/usr/lib/libperl.a
			LIBRPCSVC	/usr/lib/librpcsvc.a
			LIBSECTOK	/usr/lib/libsectok.a
			LIBSKEY		/usr/lib/libskey.a
			LIBSSL		/usr/lib/libssl.a
			LIBTELNET	/usr/lib/libtelnet.a
			LIBTERMCAP	/usr/lib/libtermcap.a
			LIBTERMLIB	/usr/lib/libtermlib.a
			LIBUSB		/usr/lib/libusbhid.a
			LIBUTIL		/usr/lib/libutil.a
			LIBWRAP		/usr/lib/libwrap.a
			LIBY		/usr/lib/liby.a
			LIBZ		/usr/lib/libz.a
			LIBARCH		arch-dependent stuff

SUBDIR		A list of subdirectories that should be built as well.
		Each of the targets will execute the same target in the
		subdirectories.

The include file <bsd.prog.mk> includes the file named "../Makefile.inc"
if it exists, as well as the include file <bsd.man.mk>.

Some simple examples:

To build foo from foo.c with a manual page foo.1, use:

	PROG=	foo

	.include <bsd.prog.mk>

To build foo from foo.c with a manual page foo.2, add the line:

	MAN=	foo.2

If foo does not have a manual page at all, add the line:

	NOMAN=	yes

If foo has multiple source files, add the line:

	SRCS=	a.c b.c c.c d.c

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The include file <bsd.subdir.mk> contains the default targets for building
subdirectories.  It has the same eight targets as <bsd.prog.mk>: all,
clean, cleandir, depend, includes, install, lint, and tags.  For all of
the directories listed in the variable SUBDIRS, the specified directory
will be visited and the target made.  There is also a default target which
allows the command "make subdir" where subdir is any directory listed in
the variable SUBDIRS.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The include file <bsd.sys.mk> is used by <bsd.prog.mk> and
<bsd.lib.mk>.  It contains overrides that are used when building
the MirOS source tree.  For instance, if "PARALLEL" is defined by
the program/library Makefile, it includes a set of rules for lex and
yacc that allow multiple lex and yacc targets to be built in parallel.

If TRUEPREFIX is defined (usually by the MirPorts Framework), certain
rules regarding DESTDIR are disabled, which helps ports to use the
<bsd.prog.mk> and <bsd.lib.mk> framework.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

For <bsd.prog.mk> and <bsd.lib.mk> the following additional variables
exist:

HDRS		default: unset
HDRS2		default: unset
HDRSRC		default: ${.CURDIR}
HDRDST		default: ${DESTDIR}/usr/include

If HDRS or HDRS2 is defined and no includes target is defined by
the program or library Makefile, one is automatically defined,
and works approximately like this:

	.for srcfile in ${HDRS}
		cd ${HDRSRC}; cp ${srcfile} ${HDRDST}/$$(basename ${srcfile})
	.endfor
	.for srcfile dstfile in ${HDRS2}
		cp ${HDRSRC}/${srcfile} ${HDRDST}/${dstfile}
	.endfor

The files are only copied if they don't match. An afterincludes
target is run automatically IFF the automatic includes target is
used (not otherwise), eg. if HDRS and HDRS2 are defined but empty.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The include file <bsd.lib.mk> has support for building libraries.  It has
the same eight targets as <bsd.prog.mk>: all, clean, cleandir, depend,
includes, install, lint, and tags.  It has a limited number of suffixes,
consistent with the current needs of the BSD tree.

It sets/uses the following variables:

LIB		The name of the library to build.

LIBDIR		Target directory for libraries.

LINTLIBDIR	Target directory for lint libraries.

LIBGRP		Library group.

LIBOWN		Library owner.

LIBMODE		Library mode.

LDADD		Additional loader objects.

MAN		The manual pages to be installed (use a .1 - .9 suffix).

SRCS		List of source files to build the library.  Suffix types
		.s, .c, and .f are supported.  Note, .s files are preferred
		to .c files of the same name.  (This is not the default for
		versions of make.)

The include file <bsd.lib.mk> includes the file named "../Makefile.inc"
if it exists, as well as the include file <bsd.man.mk>.

It has rules for building profiled objects; profiled libraries are
built by default.

Libraries are ranlib'd when made.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The include file <bsd.lkm.mk> has support for building the LKM's. It has
the same seven targets as <bsd.prog.mk>: all, clean, cleandir, depend,
install, lint, and tags. In addition two targets are made available
that is specific to the LKM's: load, unload.

It sets/uses the following variables (in addition to the <bsd.prog.mk>'s):

LKM		LKM name to build.

LKMGRP		Module group.

LKMOWN		Module owner.

LKMMODE		Module mode.

POSTINSTALL	Program to pass with '-p' flag to the modload.
		If not defined,
			POSTINSTALL=${LKM}install
		is assumed.

The include file <bsd.lkm.mk> includes the file named "../Makefile.inc"
if it exists, as well as the include file <bsd.man.mk>.
@


1.13
log
@prepare for new MACHINE_OS type "GNU"
will be explained in the commit introducing it
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.README,v 1.12 2007/06/07 17:22:38 tg Exp $
d422 1
a422 1
the programme or library Makefile, one is automatically defined,
@


1.12
log
@GRAUGH!
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.README,v 1.11 2007/05/17 18:38:36 tg Exp $
d103 1
a103 1
# MACHINE_OS		BSD			Linux
@


1.11
log
@more includes-target overhaul:
• document it
• do it for <bsd.prog.mk> too
• move it to <bsd.sys.mk>, handle generation by <bsd.subdir.mk>
• add /usr/include/openssl to mtree(8) base system tree file
• have all libs and flex use the generic target
• clean them up; repair a few bugs
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.README,v 1.10 2005/12/15 01:28:37 tg Exp $
d233 1
a233 1
		doesn't	set STRIP to -s per default if defined.
a361 3
STRIP		The flag passed to the install program to cause the binary
		to be stripped.

@


1.10
log
@remove hooks for DEBUGLIBS, DEBUGPROGS
gdb happily loaded $PROG.dbg but forgot libc.so.X.Y.dbg *sigh*
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.README,v 1.9 2005/11/19 12:34:57 tg Exp $
d416 25
@


1.9
log
@add (and, exceptionally, document) LDADD_CYCLIC
bump mirmake version
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.README,v 1.8 2005/08/28 19:39:01 tg Exp $
a234 6
DEBUGLIBS	Create -g debug information for shared libraries, and install
		them in ${DESTDIR}${LIBDIR}/${SHLIB_SONAME}.dbg

DEBUGPROGS	Create -g debug information for programmes, and install
		them in ${DESTDIR}${BINDIR}/${PROG}.dbg

@


1.8
log
@* no RANLIB needed for us any more
* remove old DEBUGLIBS (libFOO_g.a)
  still available by 'make libFOO_g.a', but ignored by make install
* add new DEBUGLIBS and DEBUGPROGS using .gnu.debuglink section
* fix display
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.README,v 1.7 2005/08/21 11:45:49 tg Exp $
d307 6
@


1.7
log
@mk.conf -> make.cfg (uses basename of $MAKE, for portable mirmake's sake)
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.README,v 1.6 2005/07/04 02:37:18 tg Exp $
d235 5
a239 2
DEBUGLIBS	Create libraries with -g debug information, and install
		them in /usr/lib/debug.
@


1.6
log
@merge OpenBSD
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.README,v 1.5 2005/04/29 15:42:53 tg Exp $
d151 3
a153 2
set, or no such file exists, the system make configuration file, /etc/mk.conf
is included.  These files may define any of the variables described below.
@


1.5
log
@get rid of SHAREDSTRINGS
idea from espie@@obsd
@
text
@d1 2
a2 2
# $MirOS: src/share/mk/bsd.README,v 1.4 2005/03/15 18:26:11 tg Exp $
# $OpenBSD: bsd.README,v 1.36 2003/08/29 00:04:41 jolan Exp $
@


1.4
log
@* move <sys.mk> readme to bsd.README
* -idirafter ${.CURDIR} => -isystem ${.CURDIR}
  unbreaks much of base
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.README,v 1.3 2005/02/14 19:21:20 tg Exp $
a357 4
SHAREDSTRINGS	If defined, a new .c.o rule is used that results in shared
		strings, using xstr(1). Note that this will not work with
		parallel makes.

@


1.3
log
@all:		optimise a bit
obj/subdir:	rewrite using mksh features
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.README,v 1.2 2005/02/14 18:57:45 tg Exp $
d100 12
@


1.2
log
@merge these from ncvs 1
@
text
@d1 1
a1 1
# $MirOS$
d26 4
@


1.1
log
@Initial revision
@
text
@d1 4
a4 3
#	$OpenBSD: bsd.README,v 1.36 2003/08/29 00:04:41 jolan Exp $
#	$NetBSD: bsd.README,v 1.17 1996/04/13 02:08:08 thorpej Exp $
#	@@(#)bsd.README	5.1 (Berkeley) 5/11/90
d11 1
a11 1
bsd.doc.mk		- building troff system documents
a14 1
bsd.nls.mk		- National Language Support
a19 1
bsd.regress.mk		- regression tests
d24 1
a24 1
files for anything tricky.
d71 2
a72 2
the command "make b" will echo "foo"; echo "bar".  The first $(a) means 
"foo", because it's needed to generate the dependency rule when it's read, 
a90 4
The profiled libraries are no longer built in a different directory than
the regular libraries.  A new suffix, ".po", is used to denote a profiled
object.

a115 3
MANSUBDIR	Subdirectory under the manual page section, i.e. "vax"
		or "tahoe" for machine specific manual pages.

a183 9
NLSDIR		Base path for National Language Support files installation.
		[/usr/share/nls]

NLSGRP		National Language Support files group. [bin]

NLSOWN		National Language Support files owner. [root]

NLSMODE		National Language Support files mode. [${NONBINMODE}]

a202 2
AFS		Compile support for AFS.

a205 6
KERBEROS5	Compile in support for Kerberos 5 authentication.

MANZ		Compress manual pages at installation time.

MANPS		Define to have PostScript manual pages generated.

a209 2
NOPROFILE	Do not build profiled versions of system libraries.

d211 1
a211 1
		do not build shared libraries.
d213 1
a213 1
NOLINT		Do not build lint libraries. [set, set unconditionally]
a233 6
GLOBAL_AUTOCONF_CACHE
		Set to the name of a file that all cached GNU autoconf
		test results will be saved in.	Reduces redundant tests.
		Be careful!  Redundant tests may not be redundant if you
		are installing substantially updated gnu programs.

a312 2
			LIB45		/usr/lib/lib45.a
			LIBASN1		/usr/lib/libasn1.a
a320 7
			LIBGSSAPI	/usr/lib/libgssapi.a
			LIBHDB		/usr/lib/libhdb.a
			LIBKADM		/usr/lib/libkadm.a
			LIBKADM5CLNT	/usr/lib/libkadm5clnt.a
			LIBKADM5SRV	/usr/lib/libkadm5srv.a
			LIBKAFS		/usr/lib/libkafs.a
			LIBKDB		/usr/lib/libkdb.a
a321 2
			LIBKRB		/usr/lib/libkrb.a
			LIBKRB5		/usr/lib/libkrb5.a
d370 1
a370 1
	NOMAN=	noman
d379 1
a379 1
subdirectories.  It has the same eight targets as <bsd.prog.mk>: all, 
d381 1
a381 1
the directories listed in the variable SUBDIRS, the specified directory 
d390 1
a390 1
the OpenBSD source tree.  For instance, if "PARALLEL" is defined by
d394 4
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@the dreaded importer strikes again
@
text
@d1 1
a1 1
#	$OpenBSD: bsd.README,v 1.37 2005/04/15 17:18:57 espie Exp $
d386 4
@

