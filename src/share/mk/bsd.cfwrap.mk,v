head	1.26;
access;
symbols
	MIRBSD_10:1.19.0.2
	MIRBSD_10_BASE:1.19
	MIRBSD_9_BASE:1.14
	MIRBSD_8:1.7.0.2
	MIRBSD_8_BASE:1.7;
locks; strict;
comment	@# @;


1.26
date	2016.10.22.16.13.34;	author tg;	state Exp;
branches;
next	1.25;
commitid	100580B902901418DCC;

1.25
date	2013.08.19.17.35.39;	author tg;	state Exp;
branches;
next	1.24;
commitid	1005212577B538FD9EB;

1.24
date	2009.04.17.17.32.31;	author tg;	state Exp;
branches;
next	1.23;
commitid	10049E8BD461D904408;

1.23
date	2009.04.17.16.30.13;	author tg;	state Exp;
branches;
next	1.22;
commitid	10049E8AE7E236917EA;

1.22
date	2009.04.17.16.29.17;	author tg;	state Exp;
branches;
next	1.21;
commitid	10049E8AE5F67B80795;

1.21
date	2008.07.11.11.33.20;	author tg;	state Exp;
branches;
next	1.20;
commitid	100487745097D203730;

1.20
date	2008.04.10.14.07.45;	author tg;	state Exp;
branches;
next	1.19;
commitid	10047FE1F455D192B1C;

1.19
date	2007.03.09.10.40.52;	author tg;	state Exp;
branches;
next	1.18;
commitid	10045F138DD463284F5;

1.18
date	2007.02.09.19.12.20;	author tg;	state Exp;
branches;
next	1.17;
commitid	10045CCC7A1555E78CF;

1.17
date	2006.10.06.22.05.59;	author tg;	state Exp;
branches;
next	1.16;
commitid	1004526D3546BB9311A;

1.16
date	2006.09.29.22.05.58;	author tg;	state Exp;
branches;
next	1.15;
commitid	100451D98D62973BF82;

1.15
date	2006.09.25.22.09.21;	author tg;	state Exp;
branches;
next	1.14;
commitid	100451853A12063D843;

1.14
date	2006.06.17.20.08.08;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004494613562439DA0;

1.13
date	2006.06.17.20.03.31;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004494601D4FB92190;

1.12
date	2006.06.17.17.12.32;	author tg;	state Exp;
branches;
next	1.11;
commitid	100449437FA37D49D71;

1.11
date	2006.06.16.22.40.07;	author tg;	state Exp;
branches;
next	1.10;
commitid	10044933348357208D2;

1.10
date	2006.06.09.17.23.17;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004489AE9175162708;

1.9
date	2006.01.31.13.24.17;	author tg;	state Exp;
branches;
next	1.8;
commitid	10043DF650864B9CF80;

1.8
date	2005.12.30.14.00.27;	author tg;	state Exp;
branches;
next	1.7;
commitid	10043B53D836F0EF0DD;

1.7
date	2005.12.15.02.28.30;	author tg;	state Exp;
branches;
next	1.6;
commitid	10043A0D4CB696396F8;

1.6
date	2005.12.15.01.13.44;	author tg;	state Exp;
branches;
next	1.5;
commitid	10043A0C35615265D50;

1.5
date	2005.11.22.19.46.50;	author tg;	state Exp;
branches;
next	1.4;
commitid	18124383759f0257;

1.4
date	2005.05.06.16.56.30;	author tg;	state Exp;
branches;
next	1.3;
commitid	20f1427ba1cedc3d;

1.3
date	2005.03.26.21.57.17;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.21.48.06;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.14.18.57.46;	author tg;	state Exp;
branches;
next	;


desc
@@


1.26
log
@automatically append to configure calls in <bsd.cfwrap.mk> the same
we append from MirPorts’ <gnu.port.mk> on MirOS BSD
@
text
@# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.25 2013/08/19 17:35:39 tg Exp $

.if !defined(BSD_CFWRAP_MK)
BSD_CFWRAP_MK=1

.if !defined(BSD_OWN_MK)
.  include <bsd.own.mk>
.endif
.if !defined(BSD_SYS_MK)
.  include <bsd.sys.mk>
.endif

.if !target(.MAIN)
.  if exists(${.CURDIR}/../Makefile.inc)
.    include "${.CURDIR}/../Makefile.inc"
.  endif

.MAIN: all
.endif

INSTALL_PROGRAM=	${INSTALL} ${INSTALL_COPY} ${INSTALL_STRIP} \
			    -o ${BINOWN} -g ${BINGRP} -m ${BINMODE}
INSTALL_SCRIPT=		${INSTALL} ${INSTALL_COPY} \
			    -o ${BINOWN} -g ${BINGRP} -m ${BINMODE}
INSTALL_DATA=		${INSTALL} ${INSTALL_COPY} \
			    -o ${BINOWN} -g ${BINGRP} -m ${SHAREMODE}
INSTALL_MAN=		${INSTALL} ${INSTALL_COPY} \
			    -o ${MANOWN} -g ${MANGRP} -m ${MANMODE}
INSTALL_DOC=		${INSTALL} ${INSTALL_COPY} \
			    -o ${DOCOWN} -g ${DOCGRP} -m ${DOCMODE}

GCCHOST?=	${OStriplet}
GCCTARGET?=	${OStriplet}
ALL_TARGET?=	all
INST_TARGET?=	install
FSFMAKEFILE?=	Makefile
CLEANFILES+=	config.cache config.log
FSFISLIB?=	Yes
FSFMAKE?=	${XVARS} ${MAKE} ${FSFMARGS} ${XARGS}
FSFSRC?=	${.CURDIR}
.if !defined(FSFOBJDIR)
FSFOBJDIR!=	realpath ${.OBJDIR}
.endif

.PATH: ${FSFSRC}

.if ${FSFMAKEFILE} != "Makefile"
FSFMARGS+=	-f ${FSFMAKEFILE}
.endif

HOSTCFLAGS?=	${CFLAGS} ${COPTS}

FSFCFLAGS+=	${CFLAGS} ${COPTS}
FSFCXXFLAGS+=	${CXXFLAGS} ${CXXOPTS} -fno-omit-frame-pointer
FSFHOSTCFLAGS+=	${HOSTCFLAGS}

.if ${FSFCFLAGS:M*Werror*} || ${FSFCXXFLAGS:M*Werror*}
FSFCFLAGS+=	-Werror-maybe-reset
FSFCXXFLAGS+=	-Werror-maybe-reset
FSFHOSTCFLAGS+=	-Werror-maybe-reset
.endif

.if (${DEBUGLIBS:L} == "yes") && (${FSFISLIB:L} == "yes")
FSFCDEBUG=	-g1
FSFCFLAGS+=	${FSFCDEBUG} -fno-omit-frame-pointer
FSFCXXFLAGS+=	${FSFCDEBUG}
FSFHOSTCFLAGS+=	${FSFCDEBUG} -fno-omit-frame-pointer
.endif
.if defined(MKC_DEBG) && (${MKC_DEBG:L} != "no")
FSFCDEBUG=	-g3
.endif

.if !defined(CFWRAP_NO_CCOM)
XVARS+=	CC=${CC:NGCC_HONOUR_COPTS=*:M*:Q} CFLAGS=${FSFCFLAGS:M*:Q} CPP=${CPP:Q}
.  if !defined(CFWRAP_NO_CXXCOM)
XVARS+=	CXX=${CXX:M*:Q} CXXFLAGS=${FSFCXXFLAGS:M*:Q}
.  endif
XVARS+=	HOSTCFLAGS=${FSFHOSTCFLAGS:M*:Q} CC_FOR_BUILD=${HOSTCC:M*:Q}
XVARS+=	CFLAGS_FOR_BUILD=${FSFHOSTCFLAGS:M*:Q}
.endif

XARGS+=	INSTALL_PROGRAM=${INSTALL_PROGRAM:Q} INSTALL_DATA=${INSTALL_DATA:Q} \
	INSTALL_SCRIPT=${INSTALL_SCRIPT:Q} BSDSRCDIR=${BSDSRCDIR:Q} \
	GNUSYSTEM_AUX_DIR=${GNUSYSTEM_AUX_DIR:Q} SHELL=${SHELL:Q} \
	CONFIG_SHELL=${SHELL:Q} PICFLAG=${PICFLAG:Q} DESTDIR=${DESTDIR:Q}

XVARS+=	CPPFLAGS=${CPPFLAGS:C/ *$//:Q} LDFLAGS=${LDFLAGS:Q}\ ${LDSTATIC:Q} \
	INSTALL_STRIP=${INSTALL_STRIP:Q} GCC_HONOUR_COPTS=1

_CFVARS+=${XVARS} ${XARGS} GCC_NO_WERROR=1 GCC_HONOUR_COPTS=0

# reported to be misused by bsiegert@@
_CFVARS+=ac_cv_func_malloc_0_nonnull=yes
# caught by systrace, tries to write to ${LOCALBASE}/lib as check
_CFVARS+=ac_cv_sys_long_file_names=yes
# cannot be used on MirBSD
_CFVARS+=ac_cv_type_long_double=no ac_cv_sizeof_long_double=0

_CFVARS+=${CFVARS}

CFARGS+=--build=${OStriplet} --host=${GCCHOST} --srcdir=${FSFSRC}
.if ${GCCTARGET} != ${GCCHOST}
CFARGS+=--target=${GCCTARGET}
.endif
.if ${NOPIC:L} != "no"
CF_PIC=	--disable-shared
.else
CF_PIC=	--enable-shared
.endif

all: _SUBDIRUSE do-build

prereq: config.status

config: config.clean config.status

config.clean:
	rm -f config.cache config.status

config.status: ${FSFMAKEFILE}.in configure
	cd ${FSFOBJDIR} && ${_CFVARS} ${SHELL} ${FSFSRC}/configure ${CFARGS}

build: config.status
	cd ${FSFOBJDIR} && ${FSFMAKE} ${ALL_TARGET}

.if !target(do-build)
do-build: build
.endif

install: _SUBDIRUSE pre-install do-install maninstall linkinstall post-install

.if !target(do-install)
do-install:
	cd ${FSFOBJDIR} && ${FSFMAKE} ${INST_TARGET}
.endif

pre-install:

post-install:

linkinstall:
.if defined(LINKS) && !empty(LINKS)
.  for lnk file in ${LINKS}
	@@l=${DESTDIR}${lnk}; \
	 t=${DESTDIR}${file}; \
	 print -r -- $$t -\> $$l; \
	 rm -f $$t; ln $$l $$t || cp $$l $$t
.  endfor
.endif

.if ${NOMAN:L} != "no"
maninstall:
.endif

.for _tgt in depend lint tags
.  if !target(${_tgt})
${_tgt}: _SUBDIRUSE
.  endif
.endfor

clean: _SUBDIRUSE pre-clean do-clean post-clean

pre-clean:

.if !target(do-clean)
do-clean:
	-if test -e ${FSFMAKEFILE}; then \
		cd ${FSFOBJDIR} && ${FSFMAKE} distclean; \
	fi
.endif

post-clean:
	-rm -rf ${CLEANFILES}

cleandir: _SUBDIRUSE clean

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
.if ${NOMAN:L} == "no"
.  include <bsd.man.mk>
.endif

.PHONY:	all prereq config config.clean build do-build install \
	pre-install do-install maninstall post-install depend \
	lint tags clean pre-clean do-clean post-clean cleandir

.endif
@


1.25
log
@fixup MKC_DEBG for nōn-libs
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.24 2009/04/17 17:32:31 tg Exp $
d90 10
a99 1
_CFVARS+=${XVARS} ${XARGS} GCC_NO_WERROR=1 GCC_HONOUR_COPTS=0 ${CFVARS}
@


1.24
log
@grml...
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.23 2009/04/17 16:30:13 tg Exp $
a63 3
.  if defined(MKC_DEBG) && (${MKC_DEBG:L} != "no")
FSFCDEBUG=	-g3
.  else
a64 1
.  endif
d69 3
@


1.23
log
@introduce new FSFISLIB (default yes) and set it to no to prevent things
like cvs, lynx, etc. to be built with -O1 -fno-omit-frame-pointer -g1
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.21 2008/07/11 11:33:20 tg Exp $
d64 3
a66 1
.  if ${MKC_DEBG:L} == "no"
a67 2
.  else
FSFCDEBUG=	-g3
@


1.22
log
@let MKC_DEBG and DEBUGLIBS/default not interfere with each other
w.r.t. debugging levels (-g1 would override -g3 before this)
@
text
@d38 1
d63 1
a63 1
.if ${DEBUGLIBS:L} == "yes"
@


1.21
log
@now that we require mksh R34+, we can use realpath builtin ipv readlink(1)
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.20 2008/04/10 14:07:45 tg Exp $
d63 8
a70 3
FSFCFLAGS+=	-g1 -fno-omit-frame-pointer
FSFCXXFLAGS+=	-g1
FSFHOSTCFLAGS+=	-g1 -fno-omit-frame-pointer
@


1.20
log
@optimise
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.19 2007/03/09 10:40:52 tg Exp $
d41 1
a41 1
FSFOBJDIR!=	readlink -nf ${.OBJDIR}
@


1.19
log
@experimental change:

Until now, <bsd.sys.mk> contained
| COMPILE.c:= GCC_HONOUR_COPTS=2 ${COMPILE.c}
which worked well, except that changes to e.g. CPPFLAGS past that
line wouldn't be honoured. Incidentally, I noticed this because the
very same <bsd.sys.mk> does its “destdir build” magic in the lines
after that…

Now, it does
| CC:= GCC_HONOUR_COPTS=2 ${CC}
because I didn't find a way to do it without expansion; this thusly
affects all uses of ${CC}, i.e.
• COMPILE.c (as until now)
• COMPILE.S, COMPILE.s - not dangerous because doesn't call cc1
• LINK.c, LINK.S, LINK.s - not dangerous because doesn't call cc1
• LINKER (bsd.prog.mk, bsd.lib.mk) - not dangerous because doesn't call cc1
• <bsd.cfwrap.mk> - filtered out by .ifndef BSD_CFWRAP_MK and, in case
  the parent Makefile includes <bsd.sys.mk> before, a :NGCC_HONOUR_COPTS=*
  clause appended to the internal use of ${CC} - won't help other uses then
• CC in “make depend” - filtered out by .ifnmake depend¹

This unbreaks “destdir build” and maybe² some other CPPFLAGS+= lines,
hardenes the rule for honouring CFLAGS a little, but should² work.

¹) safe because “make obj” and “make depend” are never used
   in combination with other targets because they change
   make(1)s cwd and the Makefile itself
²) not tried yet… neither scanned for
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.18 2007/02/09 19:12:20 tg Exp $
d132 1
a132 1
	 echo $$t -\> $$l; \
@


1.18
log
@remove these annoying # Nothing here so far...
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.17 2006/10/06 22:05:59 tg Exp $
d69 1
a69 1
XVARS+=	CC=${CC:M*:Q} CFLAGS=${FSFCFLAGS:M*:Q} CPP=${CPP:Q}
@


1.17
log
@add -fno-omit-frame-pointer to all C++ compilations, here too
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.16 2006/09/29 22:05:58 tg Exp $
a143 2
	# Nothing here so far...

@


1.16
log
@use :M* and correct placement of -g1 addition
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.15 2006/09/25 22:09:21 tg Exp $
d53 1
a53 1
FSFCXXFLAGS+=	${CXXFLAGS} ${CXXOPTS}
d64 1
a64 1
FSFCXXFLAGS+=	-g1 -fno-omit-frame-pointer
@


1.15
log
@add -fno-omit-frame-pointer if DEBUGLIBS
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.14 2006/06/17 20:08:08 tg Exp $
a49 6
.if ${DEBUGLIBS:L} == "yes"
FSFCFLAGS+=	-g1 -fno-omit-frame-pointer
FSFCXXFLAGS+=	-g1 -fno-omit-frame-pointer
FSFHOSTCFLAGS+=	-g1 -fno-omit-frame-pointer
.endif

d62 6
d69 1
a69 1
XVARS+=	CC=${CC:C/ *$//:Q} CFLAGS=${FSFCFLAGS:C/ *$//:Q} CPP=${CPP:Q}
d71 1
a71 1
XVARS+=	CXX=${CXX:C/ *$//:Q} CXXFLAGS=${FSFCXXFLAGS:C/ *$//:Q}
d73 2
a74 2
XVARS+=	HOSTCFLAGS=${FSFHOSTCFLAGS:C/ *$//:Q} CC_FOR_BUILD=${HOSTCC:C/ *$//:Q}
XVARS+=	CFLAGS_FOR_BUILD=${FSFHOSTCFLAGS:C/ *$//:Q}
@


1.14
log
@can't do it the same in <bsd.cfwrap.mk>
so distinguish, again
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.13 2006/06/17 20:03:31 tg Exp $
d51 3
a53 3
FSFCFLAGS+=	-g1
FSFCXXFLAGS+=	-g1
FSFHOSTCFLAGS+=	-g1
@


1.13
log
@make HOSTCFLAGS?=${CFLAGS} system-wide
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.12 2006/06/17 17:12:32 tg Exp $
d56 2
@


1.12
log
@* <bsd.cfwrap.mk> provide CC_FOR_BUILD, CFLAGS_FOR_BUILD (host stuff),
  unbreaks cross-built native gcc configure
* others: bump
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.11 2006/06/16 22:40:07 tg Exp $
a49 2
HOSTCFLAGS?=	${CFLAGS} ${COPTS}

@


1.11
log
@* enable cross-building libopcodes (tested with native build too)
* provide HOSTCFLAGS to <bsd.cfwrap.mk> users
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.10 2006/06/09 17:23:17 tg Exp $
d73 2
a74 1
XVARS+=	HOSTCFLAGS=${FSFHOSTCFLAGS:C/ *$//:Q}
@


1.10
log
@fix <bsd.cfwrap.mk> + DEBUGPROGS + MKC_DEBG
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.9 2006/01/31 13:24:17 tg Exp $
d50 2
d55 1
d60 1
d65 1
d73 1
@


1.9
log
@enforce use of CFLAGS (_DEFCOPTS)

you need at least /etc/make.cfg,v 1.5 for this!
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.8 2005/12/30 14:00:27 tg Exp $
d50 7
a56 2
FSFCFLAGS=	${CFLAGS} ${COPTS}
FSFCXXFLAGS=	${CXXFLAGS} ${CXXOPTS}
a62 5
.if ${DEBUGLIBS:L} == "yes"
FSFCFLAGS+=	-g1
FSFCXXFLAGS+=	-g1
.endif

@


1.8
log
@if DEBUGLIBS, build with -g1 (programmes get INSTALL_STRIPped anyway)
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.7 2005/12/15 02:28:30 tg Exp $
d76 1
a76 1
	INSTALL_STRIP=${INSTALL_STRIP:Q}
d78 1
a78 1
_CFVARS+=${XVARS} ${XARGS} GCC_NO_WERROR=1 ${CFVARS}
@


1.7
log
@${FOO:Q} -> ${FOO:C/ *$//:Q} just to be safe for: CPPFLAGS
(it might be required in a few rare cases)
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.6 2005/12/15 01:13:44 tg Exp $
d58 5
@


1.6
log
@use the :Q modifier instead of shell quotes
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.5 2005/11/22 19:46:50 tg Exp $
d70 1
a70 1
XVARS+=	CPPFLAGS=${CPPFLAGS:Q} LDFLAGS=${LDFLAGS:Q}\ ${LDSTATIC:Q} \
@


1.5
log
@remove strict PATH constraint, it may be wrong if portable MirMake
we should enforce it for source tree builds differently
(OTOH post-#8 it'll all be a port anyway)
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.4 2005/05/06 16:56:30 tg Exp $
d59 1
a59 1
XVARS+=	CC="${CC:C/ *$//}" CFLAGS="${FSFCFLAGS:C/ *$//}" CPP="${CPP}"
d61 1
a61 1
XVARS+=	CXX="${CXX:C/ *$//}" CXXFLAGS="${FSFCXXFLAGS:C/ *$//}"
d65 4
a68 4
XARGS+=	INSTALL_PROGRAM="${INSTALL_PROGRAM}" INSTALL_DATA="${INSTALL_DATA}" \
	INSTALL_SCRIPT="${INSTALL_SCRIPT}" BSDSRCDIR="${BSDSRCDIR}" \
	GNUSYSTEM_AUX_DIR="${GNUSYSTEM_AUX_DIR}" SHELL="${SHELL}" \
	CONFIG_SHELL="${SHELL}" PICFLAG="${PICFLAG}" DESTDIR="${DESTDIR}"
d70 2
a71 2
XVARS+=	CPPFLAGS="${CPPFLAGS}" LDFLAGS="${LDFLAGS} ${LDSTATIC}" \
	INSTALL_STRIP="${INSTALL_STRIP}"
@


1.4
log
@use shellish realpath; optimise
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.3 2005/03/26 21:57:17 tg Exp $
d73 1
a73 2
_CFVARS=PATH="/bin:/usr/bin:/sbin:/usr/sbin" ${XVARS} ${XARGS} \
	GCC_NO_WERROR=1 ${CFVARS}
@


1.3
log
@add option to disable, CCOM-like, the CXXCOM
you never know...
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.2 2005/03/06 21:48:06 tg Exp $
d41 1
a41 1
FSFOBJDIR!=	readlink ${.OBJDIR} || ( cd ${.OBJDIR} && pwd )
@


1.2
log
@* make -Werror default for source tree builds
  (yah, I'll fix the fallout and disable it for perl.)
* smallish licence template update
  (tell me if I missed some)
* nuke empty Makefile.inc""s
@
text
@d1 1
a1 1
# $MirOS: src/share/mk/bsd.cfwrap.mk,v 1.1 2005/02/14 18:57:46 tg Exp $
d59 4
a62 2
XVARS+=	CC="${CC:C/ *$//}" CFLAGS="${FSFCFLAGS:C/ *$//}" CPP="${CPP}" \
	CXX="${CXX:C/ *$//}" CXXFLAGS="${FSFCXXFLAGS:C/ *$//}"
@


1.1
log
@merge these from ncvs 1
@
text
@d1 1
a1 1
# $MirOS$
d9 3
@

