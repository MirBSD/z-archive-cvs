head	1.8;
access;
symbols
	MIRBSD_10:1.5.0.2
	MIRBSD_10_BASE:1.5
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.8
date	2013.10.24.08.32.36;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005268DAE46A5CAE15;

1.7
date	2010.09.24.21.14.24;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004C9D14C77DA6512A;

1.6
date	2010.09.21.17.41.31;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004C98EE600A050941;

1.5
date	2007.09.28.19.13.17;	author tg;	state Exp;
branches;
next	1.4;
commitid	10046FD5263773D7FD9;

1.4
date	2007.02.02.16.45.12;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045C36A7B5DB2058E;

1.3
date	2006.08.18.13.48.43;	author tg;	state Exp;
branches;
next	1.2;
commitid	10044E5C5494764E839;

1.2
date	2005.03.06.19.38.39;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.02;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.02;	author tg;	state Exp;
branches;
next	;


desc
@@


1.8
log
@do not give the users an insecure random device at hand, period.

now /dev/[pw]random still writes to the lopool but reads from arc4random(9)
(important: do not depend on this behaviour, they used to return insecure
data; use /dev/wrandom only for writing and always read /dev/arandom)
@
text
@.\"	$MirOS: src/share/man/man4/random.4,v 1.7 2010/09/24 21:14:24 tg Exp $
.\"	$OpenBSD: random.4,v 1.18 2003/06/06 10:29:41 jmc Exp $
.\"
.\" Copyright (c) 1996, 1997 Michael Shalayeff
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: September 24 2010 $
.Dt RANDOM 4
.Os
.Sh NAME
.Nm random ,
.Nm srandom ,
.Nm urandom ,
.Nm prandom ,
.Nm wrandom ,
.Nm arandom
.Nd random data source devices
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <dev/rndvar.h>
.Fd #include <dev/rndioctl.h>
.Sh DESCRIPTION
The various
.Nm
devices produce random output data with different random qualities.
Entropy data is collected from system activity (like disk and
network device interrupts and such), and then run through various
hash or message digest functions to generate the output.
.Bl -hang -width /dev/srandomX
.It Pa /dev/random
This device is reserved for future support of hardware
random generators.
.It Pa /dev/srandom
Strong random data.
This device returns reliable random data.
If sufficient entropy is not currently available (i.e., the entropy
pool quality starts to run low), the driver pauses while more of
such data is collected.
The entropy pool data is converted into output data using MD5.
.It Pa /dev/urandom
Same as above, but does not guarantee the data to be strong.
The entropy pool data is converted into output data using MD5.
When the entropy pool quality runs low, the driver will continue
to output data.
.It Pa /dev/prandom
Starting from
.Mx 10uB5 ,
this reads from the same device as
.Pa /dev/arandom
does, but still writes back to the pool safe for unprivileged users.
Before, it returned simple pseudo-random numbers.
.It Pa /dev/wrandom
This device is actually the same as
.Pa /dev/prandom ,
but can be written to by regular users, even if this interface is
simulated using pipes or other means on other operating systems where
.Pa /dev/prandom
can only be read from.
Its purpose is to allow anything from userspace or other not 100%
trustworthy sources to contribute even fractional bit amounts of
entropy into the kernel pool by hashing, collapsing, and rate-limiting.
.It Pa /dev/arandom
As required, entropy pool data re-seeds an ARC4 generator,
which then generates high-quality pseudo-random output data.
.Pp
The
.Xr arc4random 3
function in userland libraries seeds itself from this device,
providing a second level of ARC4 hashed data.
.El
.Pp
The
.Xr arc4random_pushb_fast 3
function, any write access to the
.Dv KERN_ARND
.Xr sysctl 3
and writes to
.Pa /dev/wrandom
feed data back to the kernel as described above and in
.Xr arc4random 9 .
.Sh FILES
.Bl -tag -width /dev/srandom -compact
.It Pa /dev/random
.It Pa /dev/srandom
.It Pa /dev/urandom
.It Pa /dev/prandom
.It Pa /dev/arandom
.El
.Sh SEE ALSO
.Xr arc4random 3 ,
.Xr md5 3 ,
.Xr random 3 ,
.Xr amdpm 4 ,
.Xr pchb 4 ,
.Xr md5 9 ,
.Xr random 9
.Sh HISTORY
A
.Nm
device first appeared in Linux operating system.
This is a cloned interface.
.Pp
ARC4 routines added by David Mazieres.
Rewritten by
.An Thorsten Glaser .
.Sh BUGS
No randomness testing suite provided.
The
.Xr ioctl 2
interface is not described in this manual page.
@


1.7
log
@bemoan
@
text
@d1 1
a1 1
.\"	$MirOS: src/share/man/man4/random.4,v 1.6 2010/09/21 17:41:31 tg Exp $
d27 1
a27 1
.Dd $Mdocdate: September 21 2010 $
d66 6
a71 1
Simple pseudo-random generator.
@


1.6
log
@update
@
text
@d1 1
a1 1
.\"	$MirOS: src/share/man/man4/random.4,v 1.5 2007/09/28 19:13:17 tg Exp $
d27 1
a27 1
.Dd $Mdocdate: September 28 2007 $
d123 3
@


1.5
log
@fix inaccuracy
@
text
@d1 1
a1 1
.\"	$MirOS: src/share/man/man4/random.4,v 1.4 2007/02/02 16:45:12 tg Exp $
d27 1
a27 1
.Dd $Mdocdate$
d74 3
d88 2
a89 4
.Xr arc4random_push 3
and
.Xr arc4random_pushb 3
functions, writes to the
d94 2
a95 5
feed data back to the kernel into a buffer of 32 32-bit integers.
This interface can be disabled if desired by
setting the
.Dv KERN_PUSHRAND
.Xr sysctl 3 .
d119 2
@


1.4
log
@make /dev/wrandom as alias for /dev/prandom but allow it to
be written to - I plan to emulate our entropy suite on other
OSes where /dev/prandom may be read-only emulated by pipes
or similar means
@
text
@d1 1
a1 1
.\"	$MirOS: src/share/man/man4/random.4,v 1.3 2006/08/18 13:48:43 tg Exp $
d27 1
a27 1
.Dd February 2, 2007
d93 2
a94 2
feed data back into a buffer of int[16] into the kernel.
This can be disabled if you fear it reduces the entropy level by
@


1.3
log
@more arc4random_pushb(3) docs updates
@
text
@d1 1
a1 1
.\"	$MirOS: src/share/man/man4/random.4,v 1.2 2005/03/06 19:38:39 tg Exp $
d27 1
a27 1
.Dd March 25, 1996
d35 1
d67 7
d92 1
a92 1
.Pa /dev/prandom
@


1.2
log
@merge src/share
@
text
@d1 1
a1 1
.\"	$MirOS$
d78 3
a80 1
function, writes to the
@


1.1
log
@Initial revision
@
text
@d1 1
d75 13
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
