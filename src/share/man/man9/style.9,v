head	1.30;
access;
symbols
	MIRBSD_10:1.9.0.2
	MIRBSD_10_BASE:1.9
	MIRBSD_9_BASE:1.7
	MIRBSD_8:1.5.0.2
	MIRBSD_8_BASE:1.5
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.30
date	2018.12.25.19.38.17;	author tg;	state Exp;
branches;
next	1.29;
commitid	1005C22871909EC7FE2;

1.29
date	2017.08.09.00.59.10;	author tg;	state Exp;
branches;
next	1.28;
commitid	100598A5E7743DE6A3E;

1.28
date	2017.07.19.18.39.20;	author tg;	state Exp;
branches;
next	1.27;
commitid	100596FA76C5229915E;

1.27
date	2016.02.11.20.12.16;	author tg;	state Exp;
branches;
next	1.26;
commitid	10056BCEAFF41919B5B;

1.26
date	2015.03.19.13.59.07;	author tg;	state Exp;
branches;
next	1.25;
commitid	100550AD63912EC481E;

1.25
date	2014.12.15.22.14.02;	author tg;	state Exp;
branches;
next	1.24;
commitid	100548F5D1B0DBA1A9B;

1.24
date	2014.02.09.22.17.32;	author tg;	state Exp;
branches;
next	1.23;
commitid	10052F7FE9535E29FF4;

1.23
date	2013.10.31.20.06.46;	author tg;	state Exp;
branches;
next	1.22;
commitid	1005272B7081B0E5655;

1.22
date	2013.10.31.17.40.00;	author tg;	state Exp;
branches;
next	1.21;
commitid	100527295FD57C68E6C;

1.21
date	2012.12.14.19.01.00;	author tg;	state Exp;
branches;
next	1.20;
commitid	10050CB77175B541B22;

1.20
date	2011.08.06.18.30.20;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004E3D884D6CE8188E;

1.19
date	2011.07.05.20.13.22;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004E13707A28539CDF;

1.18
date	2011.05.05.00.06.42;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004DC1EA1D4956A9AF;

1.17
date	2011.05.05.00.00.27;	author tg;	state Exp;
branches;
next	1.16;
commitid	1004DC1E88B4984637F;

1.16
date	2010.08.28.16.52.58;	author tg;	state Exp;
branches;
next	1.15;
commitid	1004C793EFB2BFFC899;

1.15
date	2010.03.15.18.05.07;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004B9E76DD516C3C74;

1.14
date	2010.01.29.09.38.57;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004B62ACC74DD73B08;

1.13
date	2010.01.29.09.34.24;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004B62ABB7333ED94C;

1.12
date	2009.05.16.14.09.05;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004A0EC8BA0B1EE08F;

1.11
date	2008.12.27.20.10.05;	author tg;	state Exp;
branches;
next	1.10;
commitid	10049568B9A5684C8E6;

1.10
date	2008.12.24.11.45.52;	author tg;	state Exp;
branches;
next	1.9;
commitid	100495220C07A9229F7;

1.9
date	2007.05.18.00.32.44;	author tg;	state Exp;
branches;
next	1.8;
commitid	100464CF3FA488C358D;

1.8
date	2007.01.22.15.51.54;	author tg;	state Exp;
branches;
next	1.7;
commitid	10045B4DDA316D4DC73;

1.7
date	2006.03.19.11.20.33;	author tg;	state Exp;
branches;
next	1.6;
commitid	100441D3E623FCADED6;

1.6
date	2006.02.21.02.26.45;	author tg;	state Exp;
branches;
next	1.5;
commitid	10043FA7A733DB7D29E;

1.5
date	2005.12.22.19.54.36;	author tg;	state Exp;
branches;
next	1.4;
commitid	10043AB048C20FDA10F;

1.4
date	2005.08.21.12.52.20;	author tg;	state Exp;
branches;
next	1.3;
commitid	1c7743087910e3ec;

1.3
date	2005.08.02.12.23.01;	author tg;	state Exp;
branches;
next	1.2;
commitid	634f42ef65b83515;

1.2
date	2005.03.06.19.38.47;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.12;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.12;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.08.02.12.17.40;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	308f42ef64780bbb;

1.1.1.3
date	2008.12.27.17.57.25;	author tg;	state Exp;
branches;
next	;
commitid	10049566C950DB79C23;


desc
@@


1.30
log
@update from contrib/samples/portmdoc,v 1.11
@
text
@.\" $MirOS: src/share/man/man9/style.9,v 1.29 2017/08/09 00:59:10 tg Exp $
.\"-
.\" Copyright (c) 2008, 2009, 2010, 2016, 2017, 2018
.\"	mirabilos <m@@mirbsd.org>
.\" Copyright (c) 2002-2017 The MirOS Project.
.\" Copyright (c) ? OpenBSD
.\" Copyright (c) 1995 FreeBSD Inc.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL [your name] OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: style.9,v 1.50 2008/11/14 13:42:05 tedu Exp $
.\"
.\"-
.\" Try to make GNU groff and AT&T nroff more compatible
.\" * ` generates ‘ in gnroff, so use \`
.\" * ' generates ’ in gnroff, \' generates ´, so use \*(aq
.\" * - generates ‐ in gnroff, \- generates −, so .tr it to -
.\"   thus use - for hyphens and \- for minus signs and option dashes
.\" * ~ is size-reduced and placed atop in groff, so use \*(TI
.\" * ^ is size-reduced and placed atop in groff, so use \*(ha
.\" * \(en does not work in nroff, so use \*(en
.\" * <>| are problematic, so redefine and use \*(Lt\*(Gt\*(Ba
.\" Also make sure to use \& *before* a punctuation char that is to not
.\" be interpreted as punctuation, and especially with two-letter words
.\" but also (after) a period that does not end a sentence (“e.g.\&”).
.\" The section after the "doc" macropackage has been loaded contains
.\" additional code to convene between the UCB mdoc macropackage (and
.\" its variant as BSD mdoc in groff) and the GNU mdoc macropackage.
.\"
.ie \n(.g \{\
.	if \*[.T]ascii .tr \-\N'45'
.	if \*[.T]latin1 .tr \-\N'45'
.	if \*[.T]utf8 .tr \-\N'45'
.	ds <= \[<=]
.	ds >= \[>=]
.	ds Rq \[rq]
.	ds Lq \[lq]
.	ds sL \(aq
.	ds sR \(aq
.	if \*[.T]utf8 .ds sL `
.	if \*[.T]ps .ds sL `
.	if \*[.T]utf8 .ds sR '
.	if \*[.T]ps .ds sR '
.	ds aq \(aq
.	ds TI \(ti
.	ds ha \(ha
.	ds en \(en
.\}
.el \{\
.	ds aq '
.	ds TI ~
.	ds ha ^
.	ds en \(em
.\}
.\"
.\" Implement .Dd with the Mdocdate RCS keyword
.\"
.rn Dd xD
.de Dd
.ie \\$1$Mdocdate: \{\
.	xD \\$2 \\$3, \\$4
.\}
.el .xD \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8
..
.\"
.\" .Dd must come before definition of .Mx, because when called
.\" with -mandoc, it might implement .Mx itself, but we want to
.\" use our own definition. And .Dd must come *first*, always.
.\"
.Dd $Mdocdate: December 25 2018 $
.\"
.\" Check which macro package we use, and do other -mdoc setup.
.\"
.ie \n(.g \{\
.	if \*[.T]utf8 .tr \[la]\*(Lt
.	if \*[.T]utf8 .tr \[ra]\*(Gt
.	ie d volume-ds-1 .ds tT gnu
.	el .ie d doc-volume-ds-1 .ds tT gnp
.	el .ds tT bsd
.\}
.el .ds tT ucb
.\"
.\" Implement .Mx (MirBSD)
.\"
.ie "\*(tT"gnu" \{\
.	eo
.	de Mx
.	nr curr-font \n[.f]
.	nr curr-size \n[.ps]
.	ds str-Mx \f[\n[curr-font]]\s[\n[curr-size]u]
.	ds str-Mx1 \*[Tn-font-size]\%MirBSD\*[str-Mx]
.	if !\n[arg-limit] \
.	if \n[.$] \{\
.	ds macro-name Mx
.	parse-args \$@@
.	\}
.	if (\n[arg-limit] > \n[arg-ptr]) \{\
.	nr arg-ptr +1
.	ie (\n[type\n[arg-ptr]] == 2) \
.	as str-Mx1 \~\*[arg\n[arg-ptr]]
.	el \
.	nr arg-ptr -1
.	\}
.	ds arg\n[arg-ptr] "\*[str-Mx1]
.	nr type\n[arg-ptr] 2
.	ds space\n[arg-ptr] "\*[space]
.	nr num-args (\n[arg-limit] - \n[arg-ptr])
.	nr arg-limit \n[arg-ptr]
.	if \n[num-args] \
.	parse-space-vector
.	print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[Tn-font-size]
.\}
.el .ie "\*(tT"gnp" \{\
.	eo
.	de Mx
.	nr doc-curr-font \n[.f]
.	nr doc-curr-size \n[.ps]
.	ds doc-str-Mx \f[\n[doc-curr-font]]\s[\n[doc-curr-size]u]
.	ds doc-str-Mx1 \*[doc-Tn-font-size]\%MirBSD\*[doc-str-Mx]
.	if !\n[doc-arg-limit] \
.	if \n[.$] \{\
.	ds doc-macro-name Mx
.	doc-parse-args \$@@
.	\}
.	if (\n[doc-arg-limit] > \n[doc-arg-ptr]) \{\
.	nr doc-arg-ptr +1
.	ie (\n[doc-type\n[doc-arg-ptr]] == 2) \
.	as doc-str-Mx1 \~\*[doc-arg\n[doc-arg-ptr]]
.	el \
.	nr doc-arg-ptr -1
.	\}
.	ds doc-arg\n[doc-arg-ptr] "\*[doc-str-Mx1]
.	nr doc-type\n[doc-arg-ptr] 2
.	ds doc-space\n[doc-arg-ptr] "\*[doc-space]
.	nr doc-num-args (\n[doc-arg-limit] - \n[doc-arg-ptr])
.	nr doc-arg-limit \n[doc-arg-ptr]
.	if \n[doc-num-args] \
.	doc-parse-space-vector
.	doc-print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[doc-Tn-font-size]
.\}
.el \{\
.	de Mx
.	nr cF \\n(.f
.	nr cZ \\n(.s
.	ds aa \&\f\\n(cF\s\\n(cZ
.	if \\n(aC==0 \{\
.		ie \\n(.$==0 \&MirBSD\\*(aa
.		el .aV \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8 \\$9
.	\}
.	if \\n(aC>\\n(aP \{\
.		nr aP \\n(aP+1
.		ie \\n(C\\n(aP==2 \{\
.			as b1 \&MirBSD\ #\&\\*(A\\n(aP\\*(aa
.			ie \\n(aC>\\n(aP \{\
.				nr aP \\n(aP+1
.				nR
.			\}
.			el .aZ
.		\}
.		el \{\
.			as b1 \&MirBSD\\*(aa
.			nR
.		\}
.	\}
..
.\}
.\"-
.Dt STYLE 9
.Os
.Sh NAME
.Nm style
.Nd BSD style guide for C source code
.Sh DESCRIPTION
This manual page specifies the preferred style for C source files in the
.Mx
source tree.
For historical reasons, it's still called
.Dq Kernel source file style guide (KNF) ,
although it has been applied to userland code for almost forever.
These guidelines should be followed for all new code.
In general, code can be considered
.Dq new code
when it makes up about 50% or more of the file(s) involved.
This is enough to break precedents in the existing code and use the
current style guidelines.
.Bd -literal -offset indent
/*\-
 * Style guide for the MirOS Project's Coding Styles.
 * Derived from the OpenBSD KNF (Kernel Normal Form).
 * indent(1) does not reformat this comment.
 */

/**
 * This is a documentation comment in doxygen format.
 * clang \-Wcomment checks them for correct syntax.
 * Use only if you're honouring that standard.
 */

/*
 * VERY important single-line comments look like this.
 */

/* almost all small single-line comments look like this */
/* A few others are sentences, thus end with a full stop. */

/*
 * Multi-line comments look like this. Make them real sentences,
 * in contrast to single-line comments. Fill them so they look
 * like real paragraphs. indent(1) does reformat this comment.
 * (XXX: does it? It says slash+star+newline isn't reformatted.)
 * British spelling is preferred in general. Restrict yourself
 * to the CESU\-8 (UTF\-8) Unicode BMP subset or, preferably, the
 * ISO_646.irv:1991 7-bit character set (ANSI_X3.4\-1968). Units
 * are metric and conform to the SI; use ISO/IEC 60027\-2 binary
 * praefices for multiples of 1024 and SI praefices for 1000s.
 */
.Ed
.Pp
Kernel include files (i.e.,
.Aq Pa sys/*.h )
come first; normally, you'll need either
.Aq Pa sys/types.h
or
.Aq Pa sys/param.h ,
but not both!
.Aq Pa sys/param.h
includes
.Aq Pa sys/types.h ,
which in turn
includes
.Aq Pa sys/cdefs.h ,
and it's okay to depend on that.
Also, add
.Aq Pa sys/time.h
before the other system includes, but after
.Aq Pa sys/types.h .
Put non-local includes in brackets, local includes in double quotes.
.Bd -literal -offset indent
.if "\*(tT"gnu" .nr in-synopsis-section 1
.In sys/types.h
.if "\*(tT"gnu" .nr in-synopsis-section 0
.Ed
.Pp
Machine and device includes follow.
If it's a networked program, put the network include files next.
.Bd -literal -offset indent
.if "\*(tT"gnu" .nr in-synopsis-section 1
.In net/if.h
.In net/if_dl.h
.In net/route.h
.In netinet/in.h
.In protocols/rwhod.h
.if "\*(tT"gnu" .nr in-synopsis-section 0
.Ed
.Pp
Then there's an optional blank line, followed by the other files from
.Pa /usr/include .
The list of include files should be sorted by group, i.e.,
.Aq Pa sys/param.h
and
.Aq Pa sys/time.h
first, then all other system includes sorted,
then machine and device includes sorted (if possible),
then network includes sorted (if possible), then
.Pa /usr/include
files sorted, then local includes (also sorted if possible).
.Bd -literal -offset indent
.if "\*(tT"gnu" .nr in-synopsis-section 1
.In stdio.h
.if "\*(tT"gnu" .nr in-synopsis-section 0
.Ed
.Pp
Global pathnames are defined in
.Aq Pa paths.h .
Pathnames local to the program go in
.Dq Pa pathnames.h
in the local directory.
.Bd -literal -offset indent
.if "\*(tT"gnu" .nr in-synopsis-section 1
.In paths.h
.if "\*(tT"gnu" .nr in-synopsis-section 0
.Ed
.Pp
Then there's a mandatory blank line, and the user include files.
.Bd -literal -offset indent
.ie "\*(tT"gnu" \{\
.	nr curr-font \n[.f]
.	nr curr-size \n[.ps]
.	nop \*[Fd-font]#include "pathnames.h"
.	ft \n[curr-font]
.	ps \n[curr-size]u
.\}
.el \{\
.	nr cF \n(.f
.	nr cZ \n(.s
.	fI
\&\*(fD#include "pathnames.h"
.	br
.	ft \n(cF
.	fs \n(cZ
.\}
.Ed
.Pp
The includes block is separated by another blank line from the file
identification block.
Add the CVS (or RCS) ID(s) of the file and, if taking over old source code,
the SCCS ID and __COPYRIGHT as well; place another blank line after that.
It is discouraged listing RCS IDs as comments at the beginning of
files if it's possible (this excludes most header files, although some
use a technique to define their ID to a macro which is expanded by the
main source file or somesuch) to use
these macros; copy them over, the macros are safe to be used more
than once in the same file in
.Mx .
Note that this may introduce CVS branch merge conflicts.
These three macros are defined in
.Aq Pa sys/cdefs.h :
.Bd -literal -offset indent
__COPYRIGHT("@@(#) Copyright (c) 1989, 1993\en\e
	The Regents [...] reserved.\en");
__SCCSID("@@(#)cat.c	8.2 (Berkeley) 4/27/95");
__RCSID("$Mir\&OS: src/bin/cat/cat.c,v [...] Exp $");
.Ed
.Pp
All functions are prototyped somewhere.
.Pp
Function prototypes for private functions (i.e., functions not used
elsewhere) go at the top of the first source module.
In userland, functions local to one source module should be declared
.Ql static .
This should not be done in kernel land since it makes it almost
impossible to use the kernel debugger.
.Pp
Functions used from other parts of the kernel are prototyped in the
relevant include file.
It is strongly recommended that include files do not include other
header files.
Document interdependencies in the relevant manual pages.
.Pp
Functions that are used locally in more than one module go into a
separate header file, e.g.,
.Dq Pa extern.h .
This file is allowed to precede the, otherwise sorted, list of
local include files.
Do not use the same names as other well-known header files, such
as these in
.Pa /usr/include ,
used by library dependencies or part of other applications that
are often pulled in by the
.Xr make 1
.Dq .PATH
command.
.Pp
Use of the
.Li __P
macro has been deprecated.
It is allowed in code imported from other sources but should not be
used in native
.Mx
code.
Only write out prototypes with full variable names in manual pages;
in all other files, prototypes should not have variable names
associated with the types (this is what manpages are for); i.e., use:
.Bd -literal -offset indent
void function(int);
.Ed
not:
.Bd -literal -offset indent -compact
void function(int a);
.Ed
.Pp
Lining up prototypes after type names is discouraged because it is
hard to maintain; use a single space.
If lining up (existing code), prototypes may have an extra space after
a tabulator to enable function names to line up:
.Bd -literal -offset indent
static char	*function(int, const char *);
static void	 usage(void);
.Ed
.Pp
Function or macro names and their argument list are never separated by a space.
.Pp
Use
.Li __dead
from
.Aq Pa sys/cdefs.h
for functions that don't return, i.e.,
.Bd -literal -offset indent
__dead void abort(void);
void usage(int) __dead;
.Ed
.Pp
Use gcc attributes extensively to catch programming errors, e.g.,
.Bd -literal -offset indent
/* one line per function attribute */
wchar_t *ambsntowcs(const char *, size_t)
    __attribute__((__nonnull__(1)))
    __attribute__((__bounded__(__string__, 1, 2)));
/* use of an argument mandated by function pointer API */
static int x_del_char(int __unused);
/* macro evaluating its argument twice */
#define DOUBLE(x) __extension__({		\e
	__typeof__(x) DOUBLE_x = (x);		\e
	   					\e
	(DOUBLE_x + DOUBLE_x);			\e
})
.Ed
.Pp
In header files, put function prototypes within matching pairs of
.Dv __BEGIN_DECLS / __END_DECLS .
This makes the header file usable from languages like C++.
.Pp
Labels start at the second column, i.e. are prefixed with only a single
space (ASCII 20 hex) character, no matter which block they are in.
.Pp
Macros are capitalised and parenthesised and should avoid side-effects.
If they are an inline expansion of a function, the function is defined
all in lowercase; the macro has the same name all in uppercase.
In rare cases, function-like macros that evaluate their arguments only
once are allowed to be treated like real functions and use lowercase.
If the macro needs more than a single line, use braces.
Right-justify the backslashes, as the resulting definition is easier to read.
Use a single space after the
.Li \&#define
.Xr cpp 1
command and, except if lining up single-line macros, after the macro
name or closing parentheses.
If the macro encapsulates a compound statement, enclose it in a
.Dq Li do
loop,
so that it can safely be used in
.Dq Li if
statements, like shown below.
Do not forget the
.Li CONSTCOND
.Xr lint 1
command.
Any final statement-terminating semicolon shall be
supplied by the macro invocation rather than the macro, to make parsing easier
for pretty-printers and editors.
.Bd -literal -offset indent
#define MACRO(x, y) do {					\e
	variable = (x) + (y);					\e
	(y) += 2;						\e
} while (/* CONSTCOND */ 0)
.Ed
.Pp
Enumeration values are all uppercase.
.Bd -literal -offset indent
enum enumtype {
	ONE,
	TWO
} et;
.Ed
.Pp
When declaring variables in structures, declare them sorted by use, then
by size (largest to smallest), then by alphabetical order.
You may attempt to optimise for structure padding to avoid wasting space.
The first category normally doesn't apply, but there are exceptions.
Each one gets its own line.
It is strongly recommended to not line them up either.
Use single spaces, but line up the comments if desirable or,
better, place them on their own lines just before the item
they apply to.
.Pp
Major structures should be declared at the top of the file in which they
are used, or in separate header files if they are used in multiple
source files.
Use of the structures should be by separate declarations and should be
.Dq Li extern
if they are declared in a header file.
.Bd -literal -offset indent
struct foo {
	struct foo *next;	/* list of active foo */
	struct mumble amumble;	/* comment for mumble */
	int bar;
};
struct foo *foohead;		/* head of global foo list */
.Ed
.Pp
Use
.Xr queue 3
and
.Xr tree 3
macros rather than rolling your own lists whenever possible.
Thus, the previous example would be better written:
.Bd -literal -offset indent
.if "\*(tT"gnu" .nr in-synopsis-section 1
.In sys/queue.h
.if "\*(tT"gnu" .nr in-synopsis-section 0

struct foo {
	/* queue glue for foo lists */
	LIST_ENTRY(foo) link;;
	/* comment for mumble */
	struct mumble amumble;
	int bar;
};
/* head of global foo list */
LIST_HEAD(, foo) foohead;
.Ed
.Pp
Avoid using typedefs for structure types.
This makes it impossible
for applications to use pointers to such a structure opaquely, which
is both possible and beneficial when using an ordinary struct tag.
When convention requires a typedef, make its name match the struct tag.
Avoid typedefs ending in
.Dq Li \&_t ,
except as specified in Standard C or by
.Tn POSIX ,
such as
.Dq Li uint32_t
(which requires
.Aq Pa stdint.h ,
or its superset
.Aq Pa inttypes.h ) .
Don't use the same name for a struct tag and a typedef, as this makes
the code unusable from C++.
.Bd -literal -offset indent
/* make the structure name match the typedef */
typedef struct _bar {
	int level;
} BAR;
.Ed
.Bd -literal -offset indent
/*
 * All major routines should have a comment briefly describing
 * what they do. The comment before the "main" routine should
 * describe what the program does.
 */
int
main(int argc, char *argv[])
{
	int aflag, bflag, ch, num;
	const char *errstr;
.Ed
.Pp
For consistency,
.Xr getopt 3
should be used to parse options.
Options should be sorted in the manual page
.Sx SYNOPSIS
and
.Sx DESCRIPTION ,
any
.Fn usage
or similar function, the
.Xr getopt 3
call and the switch statement, unless
parts of the switch cascade.
Elements in a switch statement that cascade should have a FALLTHROUGH comment.
Numerical arguments should be checked for accuracy.
Code that cannot be reached should have a NOTREACHED comment.
The CONSTCOND, FALLTHROUGH, and NOTREACHED comments benefit lint.
.Bd -literal -offset indent
while ((ch = getopt(argc, argv, "abn:")) != \-1)
	switch (ch) {		/* indent the switch */
	case \*(aqa\*(aq:		/* don't indent the case */
		aflag = 1;
		/* FALLTHROUGH */
	case \*(aqb\*(aq:
		bflag = 1;
		break;
	case \*(aqn\*(aq:
		num = strtonum(optarg, 0, INT_MAX, &errstr);
		if (errstr) {
			warnx("number is %s: %s", errstr, optarg);
			usage();
		}
		break;
	case \*(aq?\*(aq:		/* redundant here but ok */
	default:
		usage();
		/* NOTREACHED */
	}
argc \-= optind;
argv += optind;
.Ed
.Pp
Cast expressions and the value to be casted are never separated by a
space; use parentheses about the latter if it's a compound expression.
Use a space after keywords
.Pf ( Li if ,
.Li while ,
.Li for ,
.Li return ,
.Li switch )
but not unary operators like
.Li sizeof ,
.Li typeof ,
.Li alignof ,
or function-like constructs like GCC attributes (see above).
It is recommended to put parentheses around the
.Li return
argument as well, although this is not a strict requirement,
to accommodate languages such as C++ and PHP in which the
result type differs when surrounded by parentheses.
It helps when debugging (define
.Li return
to a debug expression) though, except for void functions.
.Pp
No braces are used for control statements with zero or only a single
statement, unless that statement is more than a single line (in which
case they are permitted), it contains a comment (in which case they
are recommended), or it contains a label (in which case they are mandated).
A separate project may choose to mandate braces for all cases.
Avoid empty bodies if at all possible; otherwise, insert a redundant
.Ic continue
statement inside them or, at least, add a comment (here, same line is ok).
.Bd -literal -offset indent
for (p = buf; *p != \*(aq\e0\*(aq; ++p)
	continue;	/* modern; optionally comment why nothing */
for (p = buf; *p != \*(aq\e0\*(aq; ++p)
	;	/* nothing; old style */
for (p = buf; *p != \*(aq\e0\*(aq; ++p)
	/* nothing */;	/* old style, less legible */
while (/* CONSTCOND */ 1)	/* or: for (;;) */
	stmt;
while (/* CONSTCOND */ 1) {
	z = a + really + long + statement + that + needs +
	    two + lines + gets + indented + four + spaces +
	    on + the + second + and + subsequent + lines;
}
while (/* CONSTCOND */ 1) {
	if (cond)
		stmt;
}
if (cond) {
	/* comment */
 somelabel:
	stmt;
}
.Ed
.Pp
Parts of a for loop may be left empty, although while loops
are preferable especially in such cases.
Don't put declarations inside blocks unless the routine is
unusually complicated.
.Bd -literal -offset indent
for (; cnt \*(Lt 15; cnt++) {
	stmt1;
	stmt2;
}
.Ed
.Pp
Indentation is an 8 character tab.
Second level indents are four spaces.
.Bd -literal -offset indent
while (cnt \*(Lt 20)
	z = a + really + long + statement + that + needs +
	    two + lines + gets + indented + four + spaces +
	    on + the + second + and + subsequent + lines;
.Ed
.Pp
Do not add whitespace at the end of a line, and only use tabs
followed by spaces to form the indentation.
Never use more spaces than a tab will produce
and do not use spaces in front of tabs.
.Nm vim
users are
.Em required
to put
.Dq Li let c_space_errors = 1
into their
.Pa \*(TI/.vimrc .
.Pp
Closing and opening braces go on the same line as the else.
Braces that aren't necessary may be left out, unless they cause
a compiler warning.
.Bd -literal -offset indent
if (test)
	stmt;
else if (bar != NULL) {
	stmt;
	stmt;
} else
	stmt;
.Ed
.Pp
Avoid doing multiple assignments in one statement, like this:
.Bd -literal -offset indent
/* bad example */
if (foo) {
	stmt;
	stmt;
} else if (bad)
	*wp++ = QCHAR, *wp++ = c;
else
	stmt;

/* write this as */
if (foo) {
	stmt;
	stmt;
} else if (good) {
	*wp++ = QCHAR;
	*wp++ = c;
} else
	stmt;
.Ed
.Pp
Do not use spaces after function names.
Commas have a space after them.
Do not use spaces after
.Sq \&(
or
.Sq \&[
or preceding
.Sq \&]
or
.Sq \&)
characters.
.Bd -literal -offset indent
if ((error = function(a1, a2)))
	exit(error);
.Ed
.Pp
Use positive error codes.
Negative errors (except \-1) are something only the Other OS does.
.Pp
Unary operators don't require spaces; binary operators do.
Don't use parentheses unless they're required for precedence, the statement
is confusing without them, or the compiler generates a warning without them.
Remember that other people may be confused more easily than you.
Do YOU understand the following?
.Bd -literal -offset indent
a = b\-\*(Gtc[0] + \*(TId == (e \*(Ba\*(Ba f) \*(Ba\*(Ba g && h ? i : j \*(Gt\*(Gt 1;
k = !(l & FLAGS);
.Ed
.Pp
It's much better to break after an operator if you need to apply line breaks.
This is especially true for shell scripts.
The above example could be rewritten as:
.Bd -literal -offset indent
a = (((b\-\*(Gtc[0] + \*(TId) == (e \*(Ba\*(Ba f)) \*(Ba\*(Ba (g && h)) ? \e
    i : (j \*(Gt\*(Gt 1);
k = !(l &
    FLAGS);
.Ed
.Pp
Lines ought to be not larger than 80 characters.
Stick to 75 characters or less if possible, but in some cases
it's ok to put a character in the 80th column.
Descriptions should not be longer than 66 characters,
eMails must not be longer then 72 characters per line.
In object-oriented languages, it may be acceptable to use
up to 100 characters per line.
.Pp
Exits and returns should be 0 on success, and non-zero for errors.
.Bd -literal -offset indent
	/*
	 * avoid obvious comments such as
	 * "Exit 0 on success."
	 */
	exit(0);
}
.Ed
.Pp
The function type should be on a line by itself
preceding the function.
This eases searching for a function implementation:
.Pp
.Li $ grep \-r \*(aq\*(hafunction\*(aq \&.
.Bd -literal -offset indent
static char *
function(int a1, int a2, float fl, int a4)
{
.Ed
.Pp
When declaring variables in functions, declare them sorted by size (largest to
smallest), then in alphabetical order; multiple ones per line are okay.
If a line overflows, reuse the type keyword.
Declarations must follow
.St -ansiC-89 .
.Pp
Be careful not to obfuscate the code by initialising variables in
the declarations.
Use this feature only thoughtfully.
DO NOT use function calls in initialisers!
.Bd -literal -offset indent
struct foo one, *two;
double three;
int *four, five;
char *six, seven, eight, nine, ten, eleven, twelve;

four = myfunction();
.Ed
.Pp
Do not declare functions inside other functions: ANSI C says that
such declarations have file scope regardless of the nesting of the
declaration.
.Pp
Note that
.Xr indent 1
comes with a sample
.Pa .indent.pro
which understands most of these rules, starting from
.Mx 9 .
As of
.Mx 11 ,
it will also be installed into the user home skeleton directory.
.Pp
Use of the
.Dq register
specifier is discouraged in new code.
Optimising compilers such as gcc can generally do a better job
of choosing which variables to place in registers to improve
code performance.
The exception to this is in functions containing assembly code where the
.Dq register
specifier is required for proper code generation in the absence of
compiler optimisation.
.Pp
When using
.Fn longjmp
or
.Fn vfork
in a program, the
.Fl Wextra
or
.Fl Wall
flag should be used to verify that the compiler does not generate
warnings such as
.Bd -literal -offset indent
warning: variable `foo' might be clobbered by `longjmp' or `vfork'.
.Ed
.Pp
If any warnings of this type occur, you must apply the
.Dq volatile
type-qualifier to the variable in question.
Failure to do so may result in improper code generation when optimisation
is enabled.
Note that for pointers, the location of
.Dq volatile
specifies if the type-qualifier applies to the pointer or the thing being
pointed to.
A volatile pointer is declared with
an optional extra space and
.Dq volatile
to the right of the
.Dq * .
Example:
.Bd -literal -offset indent
char * volatile foo;
.Ed
.Pp
says that
.Dq foo
is volatile, but
.Dq *foo
is not.
To make
.Dq *foo
.Pq the thing being pointed to
volatile use the syntax
.Bd -literal -offset indent
volatile char *foo;
.Ed
.Pp
If both the pointer and the thing pointed to are volatile use
.Bd -literal -offset indent
volatile char * volatile foo;
.Ed
.Pp
.Dq const
is also a type-qualifier and the same rules apply.
Assume string literals are constant.
Never make use of broken C APIs such as
.Xr strchr 3
to
.Dq cast away
the
.Dq const
qualifiers.
The description of a read-only hardware register might look something like:
.Bd -literal -offset indent
const volatile char *reg;
.Ed
.Pp
Global flags set inside signal handlers should be of type
.Dq volatile sig_atomic_t
if possible.
This guarantees that the variable may be accessed as an atomic entity,
even when a signal has been delivered.
Global variables of other types (such as structures) are not
guaranteed to have consistent values when accessed via a signal handler.
.Pp
.Dv NULL
is the preferred null pointer constant.
Never use 0 in place of
.Dv NULL .
Use
.Dv NULL
instead of
(type\ *)0 or (type\ *)NULL in all cases except for arguments to variadic
functions where the compiler does not know the type.
.Pp
Don't use
.Ql \&!
for tests unless it's a boolean (or an integral flag used in a boolean
context, almost certainly with a bitwise AND operation, since otherwise
using a bool would be correct), i.e., use
.Bd -literal -offset indent
if (p != NULL && *p == \*(aq\e0\*(aq)
.Ed
not
.Bd -literal -offset indent -compact
if (p && !*p)
.Ed
.Pp
Use
.Aq Pa stdbool.h
for boolean values, not
.Vt int .
.Pp
Routines returning
.Li void *
should not have their return values cast to any pointer type.
Functions used as procedures should not have their return
value explicitly cast to void, either.
The exception are function-like macros like
.Xr sigaddset 3 ,
where failure to do so may result in compiler warnings
about unused LHS in comma operations.
.Pp
You can assume that pointers to variables and function pointers share the
same address space and have the same size as
.Vt ptrdiff_t .
.Pp
Use
.Xr err 3
or
.Xr warn 3 ,
don't roll your own!
.Bd -literal -offset indent
	if ((four = malloc(sizeof(struct foo))) == NULL)
		err(1, NULL);
	if ((six = (int *)overflow()) == NULL)
		errx(1, "Number overflowed.");
	return (eight);
}
.Ed
.Pp
Old-style function declarations looked like this:
.Bd -literal -offset indent
static char *
function(a1, a2, fl, a4)
    int a1, a2;	/* declare ints, too, don't default them */
    float fl;	/* beware double vs. float prototype differences */
    int a4;	/* list in order declared */
{
	...
}
.Ed
.Pp
You really ought to replace them with ANSI C function declarations.
Long parameter lists are wrapped with a normal four space indent.
.Pp
Variable numbers of arguments should look like this:
.Bd -literal -offset indent
.if "\*(tT"gnu" .nr in-synopsis-section 1
.In stdarg.h
.if "\*(tT"gnu" .nr in-synopsis-section 0

void vaf(const char *fmt, ...)
    __attribute__((__format__(__printf__, 1, 2)));

void
vaf(const char *fmt, ...)
{
	va_list ap;
	va_start(ap, fmt);

	STUFF;

	va_end(ap);

	/* No return needed for void functions. */
}

static void
usage(void)
{
	/* from crt0.o */
	extern const char *__progname;
.Ed
.Pp
Usage statements should take the same form as the synopsis in manual pages.
Options without
operands come first, in alphabetical order inside a single set of
braces, followed by options with operands, in alphabetical order,
each in braces, followed by required arguments in the order they
are specified, followed by optional arguments in the order they
are specified.
.Pp
A bar
.Pq Sq \*(Ba
separates either-or options/arguments,
and multiple options/arguments which are specified together are
placed in a single set of braces.
.Pp
If numbers are used as options, they should be placed first,
as shown in the example below.
Uppercase letters take precedence over lowercase.
Note that the options list in manual pages should be purely alphabetical,
except that the no-argument options are listed first.
.Bd -literal -offset indent
"usage: f [\-12aDde] [\-b barg] [\-m marg] req1 req2 [opt1 [opt2]]\en"
"usage: f [\-a \*(Ba \-b] [\-c [\-de] [\-n number]]\en"
.Ed
.Pp
The
.Li __progname
string may be used instead of hard-coding the program's name.
It's better to place the extern declaration outside of the
function body though, as it's file-global in ISO C either way,
and that makes this fact more visible.
.Bd -literal -offset indent
	fprintf(stderr, "usage: %s [\-ab]\en", __progname);
	exit(1);
}
.Ed
.Pp
New core kernel code should be reasonably compliant with the style guides.
The guidelines for third-party maintained modules and device drivers are more
relaxed but at a minimum should be internally consistent with their style;
the current MirPorts Framework package tools are a bad example of style
inconsistency (such as three different indentation styles: three spaces, four
spaces and KNF one tab) and a good example of why it must be prevented.
.Pp
Whenever possible, code should be run through at least one code checker
(e.g.,
.Dq Li gcc \-Wall \-W \-Wpointer\-arith \-Wbad\-function\-cast ... ,
.Dq Li make __CRAZY=Yes ,
.Xr lint 1
or splint from the ports tree) and produce minimal warnings.
Try to write source code that will compile without
any warnings, failures or malfunctions with gcc3
.Fl Os std=c99 Wbounded ,
pcc
.Fl O ,
SUNWcc, and gcc4
.Fl O2 fwrapv std=c99 Wformat .
Do try to keep code working with gcc3
.Fl std=c89 ,
possibly with support for
.Vt long long int .
.Pp
Note that documentation follows its own style guide,
as documented in
.Xr mdoc.samples 7 .
This however does not invalidate the hints given in this guide.
Shell scripts also follow what is applicable from this guide, except that
function declarations are all on one line; use Korn syntax throughoutly;
never use the \` character; it is okay to use reasonably recent
.Xr mksh 1
extensions.
Do not use the
.Ic typeset
built-in command, always write
.Ic local
instead.
.Bd -literal -offset indent
function bla {
	(( x )) && foo=abcdefghijklmnopqrstuvwxyz$(fnord \e
	    ABCDEFGHIJKLMNOPQRSTUVWXYZ)
	[[ $foo = @@([a\-z_]*([a\-z0\-9_]) ]] \*(Ba\*(Ba exit 1
}
.Ed
.Sh FILES
.Bl -tag -width "/usr/share/misc/licence.template " -compact
.It Pa /usr/share/misc/licence.template
Licence preferred for new code.
.El
.Pp
.Pa \*(TI/.indent.pro
should contain at least the following items:
.Pp
.Fl c0
.Fl ci4
.Fl di0
.Fl nbs
.Fl ncsp
.Fl nfc1
.Fl nlp
.Fl nlpi
.Fl Tbool
.Fl Tint16_t
.Fl Tint32_t
.Fl Tint64_t
.Fl Tint8_t
.Fl Tintmax_t
.Fl Tintptr_t
.Fl Tmbstate_t
.Fl Toff_t
.Fl Tptrdiff_t
.Fl Tsize_t
.Fl Tssize_t
.Fl Ttime_t
.Fl Tuint16_t
.Fl Tuint32_t
.Fl Tuint64_t
.Fl Tuint8_t
.Fl Tuintmax_t
.Fl Tuintptr_t
.Fl Twchar_t
.Fl Twint_t
and a bunch of others.
Note that the
.Fl c0
option might be problematic for existing code and may be better left out.
.Pa mircvs://src/usr.bin/indent/.indent.pro
contains a more complete list; even then,
.Xr indent 1
does only basic help to apply KNF.
.Sh SEE ALSO
.Xr indent 1 ,
.Xr lint 1 ,
.Xr err 3 ,
.Xr queue 3 ,
.Xr warn 3 ,
.Xr mdoc.samples 7
.Sh HISTORY
This man page is largely based on the src/admin/style/style file from
the
.Tn BSD
4.4-Lite2 release, with updates to reflect the current practice and
desire first of the
.Ox
project, then for the
.Mx
source tree, including an improved Open Source licence.
@


1.29
log
@style nits
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.25 2014/12/15 22:14:02 tg Exp $
d3 2
a33 3
.\" Copyright (c) 2008, 2009, 2010, 2016, 2017
.\"	mirabilos <m@@mirbsd.org>
.\"-
d90 1
a90 1
.Dd $Mdocdate: December 15 2014 $
d98 1
d111 1
a111 1
.	ds str-Mx1 \*[Tn-font-size]\%MirOS\*[str-Mx]
d137 32
d175 1
a175 1
.		ie \\n(.$==0 \&MirOS\\*(aa
d181 1
a181 1
.			as b1 \&MirOS\ #\&\\*(A\\n(aP\\*(aa
d189 1
a189 1
.			as b1 \&MirOS\\*(aa
@


1.28
log
@some languages are just so broken…
@
text
@d3 1
a3 1
.\" Copyright (c) 2002-2015 The MirOS Project.
d91 1
a91 1
.Dd $Mdocdate: February 11 2016 $
d604 3
a606 1
Always document single-semicolon bodies with a comment; here, same line is ok.
d609 5
a613 1
	;	/* nothing */
@


1.27
log
@merge most recent portmdoc into a̲l̲l̲ of its users; fixup .\& into \&. like
in mksh(1), for Schillix ditroff
@
text
@d32 1
a32 1
.\" Copyright (c) 2008, 2009, 2010, 2016
d91 1
a91 1
.Dd $Mdocdate: December 15 2014 $
d592 3
a594 1
argument as well, although this is not a strict requirement.
@


1.26
log
@more examples for “unary operators and function-like constructs”
@
text
@d32 2
a33 2
.\" Copyright (c) 2008, 2009, 2010
.\"	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
d44 3
a46 1
.\" Also make sure to use \& especially with two-letter words.
@


1.25
log
@• require braces for labels, recommend them for comments
• document practice of independent projects choosing “something like KNF”
  to always mandate braces, even for one-statement bodies, as known deviation
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.24 2014/02/09 22:17:32 tg Exp $
d3 1
a3 1
.\" Copyright (c) 2002-2014 The MirOS Project.
d89 1
a89 1
.Dd $Mdocdate: February 9 2014 $
d584 4
a587 2
.Li sizeof
or constructs like GCC attributes (see above).
@


1.24
log
@C99 sucks, C11 sucks more
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.23 2013/10/31 20:06:46 tg Exp $
d89 1
a89 1
.Dd $Mdocdate: October 31 2013 $
d593 5
a597 3
No braces are
used for control statements with zero or only a single statement unless that
statement is more than a single line, in which case they are permitted.
d613 5
@


1.23
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.22 2013/10/31 17:40:00 tg Exp $
d3 1
a3 1
.\" Copyright (c) 2002-2013 The MirOS Project.
d751 2
a752 1
Declarations must follow ISO C99 or at least ANSI C.
a791 9
In C99 code, use
.Dq __restrict__
instead of
.Dq restrict
if required.
The
.Aq Pa sys/cdefs.h
include file defines them out if an old compiler is used.
.Pp
d934 1
a934 1
You really ought to replace them with ISO C99 function declarations.
d1021 5
a1025 1
.Fl O2 fwrapv fno\-strict\-aliasing Wformat .
@


1.22
log
@unify GCC attribute formatting
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.21 2012/12/14 19:01:00 tg Exp $
d89 1
a89 1
.Dd $Mdocdate: December 14 2012 $
d389 1
d952 1
a952 1
    __attribute__((format (printf, 1, 2)));
@


1.21
log
@write more on comments
• indent(1) not lint(1) reformats them
  ‣ but not slash+star+{hyphen-minus,star,newline}
• clang -Wcomment checks them for Doxygen syntax
  ‣ apparently not 3.1 and I can’t be bothered to try 3.2 atm
• we prefer not-on-same-line except for a single ;
  ‣ mostly for Ohloh and line length
• change one single-line bad example
also, even British English uses “program” without -me except for TV
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.20 2011/08/06 18:30:20 tg Exp $
d3 1
a3 1
.\" Copyright (c) 2002-2012 The MirOS Project.
d89 1
a89 1
.Dd $Mdocdate: March 15 2010 $
d390 2
a391 2
    __attribute__((__nonnull__ (1)))
    __attribute__((__bounded__ (__string__, 1, 2)));
d394 6
d583 2
a584 1
.Li sizeof .
@


1.20
log
@document line lengths
ok cnuke@@
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.19 2011/07/05 20:13:22 tg Exp $
d3 1
a3 1
.\" Copyright (c) 2002-2011 The MirOS Project.
d89 1
a89 1
.Dd $Mdocdate: July 5 2011 $
d184 7
a190 1
 * lint(1) does not reformat this comment.
d203 2
a204 1
 * like real paragraphs. lint(1) does reformat this comment.
d239 1
a239 1
If it's a networked programme, put the network include files next.
d269 1
a269 1
Pathnames local to the programme go in
d449 3
a451 1
Use single spaces, but line up the comments if desirable.
d480 4
a483 2
	LIST_ENTRY(foo) link;	/* queue glue for foo lists */
	struct mumble amumble;	/* comment for mumble */
d486 2
a487 1
LIST_HEAD(, foo) foohead;	/* head of global foo list */
d508 1
a508 1
/* Make the structure name match the typedef */
d517 1
a517 1
 * describe what the programme does.
d559 1
a559 1
	case \*(aq?\*(aq:		/* redundant here */
d588 1
d719 1
a719 1
Exits should be 0 on success, and non-zero for errors.
d721 5
a725 4
exit(0);	/*
		 * avoid obvious comments such as
		 * "Exit 0 on success."
		 */
d796 1
a796 1
in a programme, the
d962 2
a963 1
	extern const char *__progname;	/* from crt0.o */
d992 4
a995 1
string may be used instead of hard-coding the programme's name.
@


1.19
log
@it is now good style to write global/local ipv typeset
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.18 2011/05/05 00:06:42 tg Exp $
d89 1
a89 1
.Dd $Mdocdate: May 5 2011 $
d698 8
@


1.18
log
@this is when !(flag & F_FOO) is ok
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.17 2011/05/05 00:00:27 tg Exp $
d1006 5
@


1.17
log
@• apply our own hints better
• fix pasto
• take a stance pro “if (p != NULL && *p == '\0')” even more,
  inspired by recent Plänet Debian postings and OpenBSD tradition both
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.16 2010/08/28 16:52:58 tg Exp $
d89 1
a89 1
.Dd $Mdocdate: August 28 2010 $
d856 3
a858 1
for tests unless it's a boolean, i.e., use
@


1.16
log
@prefer “while (1)” for endless loops
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.15 2010/03/15 18:05:07 tg Exp $
d3 1
a3 1
.\" Copyright (c) 2002-2010 The MirOS Project.
d89 1
a89 1
.Dd $Mdocdate: March 15 2010 $
d383 2
a384 2
    __attribute__((nonnull (1)))
    __attribute__((bounded (string, 1, 2)));
d579 1
a579 1
while (1)	/* or: for (;;) */
d581 1
a581 1
while (1) {
d586 1
a586 1
while (1) {
d630 1
a630 1
else if (bar) {
d643 1
a643 1
else if (bad)
d652 1
a652 1
else if (good) {
d858 1
a858 1
if (*p == \*(aq\e0\*(aq)
d862 1
a862 1
if (!*p)
a868 5
The
.Li \&!ptr
construct is allowed for
.Dv NULL
pointer checks; boolean accesses to numeric variables are similarily tolerated.
@


1.15
log
@polish and pass UCB, BSD, GNU mdoc with no warnings
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.14 2010/01/29 09:38:57 tg Exp $
d579 1
a579 1
for (;;)
d581 1
a581 1
for (;;) {
d586 1
a586 1
for (;;) {
@


1.14
log
@plug portmdoc
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.13 2010/01/29 09:34:24 tg Exp $
d32 1
a32 1
.\" Copyright (c) 2008, 2009
d43 2
d89 1
a89 1
.Dd $Mdocdate: November 17 2009 $
d91 1
a91 1
.\" Check which macro package we use
d94 2
d224 1
d226 3
a228 1
#include \*(Ltsys/types.h\*(Gt	/* non-local includes in brackets */
d234 1
d240 1
d255 1
d257 1
d266 1
d268 1
d273 16
a288 1
#include "pathnames.h"	/* local includes in double quotes */
d466 1
d468 1
d711 1
a711 1
.Li $ grep \-r '\*(hafunction' \&.
d920 1
d922 1
d998 1
a998 1
.Fl O2 fwrapv fno-strict-aliasing Wformat .
d1013 1
a1013 1
	[[ $foo = @@([a\-z_]*([a\-z0-9_]) ]] \*(Ba\*(Ba exit 1
@


1.13
log
@remove some more of this ugliness
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.12 2009/05/16 14:09:05 tg Exp $
d31 127
a157 1
.Dd $Mdocdate: May 16 2009 $
@


1.12
log
@• after seeing a good rationale, change the recommendation for space
  after the 「sizeof」 keyword (Bill Shannon mode) back to off: it’s
  more of a unary operator than a C keyword which was pointed out to
  me by other OS’ style guides which also mention 「typeof」 and si-
  milar compiler-specific extensions for which the same rule applies
• install .indent.pro into the user skeleton
• apply politure to style(9) while here
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.11 2008/12/27 20:10:05 tg Exp $
d3 1
a3 1
.\" Copyright (c) 2002-2009 The MirOS Project.
d31 1
a31 1
.Dd $Mdocdate: December 27 2008 $
d481 22
@


1.11
log
@merge
.Ox
and pimp the
.Xr style 9
.Pq KNF .
@
text
@d1 1
a1 1
.\" $MirOS$
d3 1
a3 1
.\" Copyright (c) 2002-2008 The MirOS Project.
d36 1
a36 1
.Nd "Kernel source file style guide (KNF)"
d38 1
a38 1
This file specifies the preferred style for kernel source files in the
d41 3
a43 1
It is also a guide for preferred userland code style.
d62 1
a62 1
/* Others are sentences, thus end with a full stop. */
d142 3
a144 1
files if it's possible (this excludes e.g. header files) to use
d178 8
d231 2
d235 2
a236 3
In header files, put function prototypes within
.Dv __BEGIN_DECLS / __END_DECLS
matching pairs.
d264 1
a264 1
Any final statement-terminating semicolon ought to be
d284 1
d407 3
a409 5
.Li sizeof ,
.Li switch ) .
It is okay to omit the space only after the
.Li sizeof
keyword and only if the code is to be shared with other BSD operating systems.
d413 3
d568 3
d613 1
a613 1
specifies if the type-qualifier applies to the pointer, or the thing being
d632 1
d702 4
d717 1
a717 1
	if ((four = malloc(sizeof (struct foo))) == NULL)
a844 1
.Fl bs
d848 1
@


1.10
log
@*require* (yes Benny, this is mandatory) vim users to put
	let c_space_errors = 1
into their ~/.vimrc to avoid whitespace-at-EOL KNF breaks
From: Elias Pipping <elias@@pipping.org>, 10x

(now if vim had something like ^Ov in jupp, making white-
space visible…)

XXX someone complained about this file to be too lengthy,
XXX long-winded, complicated – rework could be needed
@
text
@d1 1
a1 2
.\" $MirOS: src/share/man/man9/style.9,v 1.9 2007/05/18 00:32:44 tg Exp $
.\" $OpenBSD: style.9,v 1.40 2005/07/09 08:05:08 jmc Exp $
d28 5
a32 3
.\"-
.Dd $Mdocdate$
.Dt STYLE 9 IMP
d49 4
a52 3
/*
 * Style guide for the MirOS Project's Coding Styles,
 * derived from the OpenBSD KNF (Kernel Normal Form).
d65 1
a65 1
 * like real paragraphs.
d67 4
a70 1
 * to the ISO_646.irv:1991 7-bit character set.
d93 1
a93 1
#include <sys/types.h>	/* non-local includes in brackets */
d99 5
a103 5
#include <net/if.h>
#include <net/if_dl.h>
#include <net/route.h>
#include <netinet/in.h>
#include <protocols/rwhod.h>
d106 2
a107 3
Then there's an optional blank line, followed by the
.Pa /usr/include
files.
d118 1
a118 1
#include <stdio.h>
d127 1
a127 1
#include <paths.h>
d137 2
a138 2
Add the CVS (or RCS) ID of the file and, if taking over old source
code, the SCCS ID as well; place another blank line after that.
d142 2
a143 1
than once in the same file.
d145 1
a145 1
These two macros are defined in
d148 4
a151 2
__SCCSID("@@(#)foo.c     4.5 (Berkeley) 4/18/91");
__RCSID("$MirOS\&$");
d165 3
d184 1
a184 1
associated with the types; i.e., use:
d193 4
a196 6
Lining up prototypes after type names is deprecated because it is
hard to maintain.
Existing code may however still use this practice, and there is no
reason to change it.
If lining up, prototypes may have an extra space after a tabulator
to enable function names to line up:
d202 1
a202 2
Function and macro names and their argument list, as well as cast
expressions and the value to be casted, are never separated by a space.
d211 8
d226 2
a227 2
Labels start at column 2 (i.e. are prefixed with only a single
space (ASCII 20 hex) character) no matter which block they are in.
d232 2
d236 5
d247 4
d255 1
a255 1
#define	MACRO(x, y) do {					\e
d263 4
a266 1
enum enumtype { ONE, TWO } et;
d273 2
a274 1
It is recommended to not line them up either.
d293 2
d298 2
a299 1
#include <sys/queue.h>
d301 1
a301 1
	LIST_ENTRY(foo) link;	/* queue macro glue for foo lists */
d333 3
a335 3
 * All major routines should have a comment briefly describing what
 * they do. The comment before the "main" routine should describe
 * what the programme does.
d340 2
a341 4
	long num;
	int ch;
	char *ep;

d347 7
a353 1
Options should be sorted in the
d362 1
a362 1
while ((ch = getopt(argc, argv, "abn:")) != -1)
d364 1
a364 1
	case 'a':		/* don't indent the case */
d367 1
a367 1
	case 'b':
d370 4
a373 6
	case 'n':
		/* it's easier to use strtonum instead */
		num = strtol(optarg, &ep, 10);
		if (num <= 0 || *ep != '\e0') {
			warnx("illegal number, -n argument -- %s",
			    optarg);
d377 1
a377 1
	case '?':
d382 1
a382 1
argc -= optind;
d386 2
d395 3
a404 4
Forever loops are done with
.Li for ,
not
.Li while .
d406 1
a406 1
for (p = buf; *p != '\e0'; ++p)
d421 2
a422 1
Parts of a for loop may be left empty.
d426 1
a426 1
for (; cnt < 15; cnt++) {
d435 1
a435 1
while (cnt < 20)
d437 1
a437 1
	    two lines + gets + indented + four + spaces +
d443 2
d451 1
a451 3
.Pa ~/.vimrc .
Do not use more spaces than a tab will produce
and do not use spaces in front of tabs.
d491 1
a491 1
a = b->c[0] + ~d == (e || f) || g && h ? i : j >> 1;
d495 1
a495 2
Also, it's much better to break before an operator,
not after it, if you have got to apply line breaks.
d499 4
a502 4
a = b->c[0] +
    ( ~d == (e || f) || g && h ) ? i : ( j >> 1 );
k = !(l
    & FLAGS);
d505 1
a505 1
Exits should be 0 on success, or non-zero for errors.
d516 3
a526 4
Old style function declarations ought to be avoided; we already live in an
ANSI C world, and ISO C99 is almost there.
ANSI style function declarations should go in an include file such as
.Dq Pa extern.h .
d528 1
d530 1
a530 1
Be careful not to obfuscate the code by initializing variables in
d533 1
a533 1
DO NOT use function calls in initializers!
d546 1
a546 7
Hiding file declarations in what appears to be a local scope is
undesirable and will elicit complaints from a good compiler, such as
.Dq Li gcc -Wtraditional .
.Pp
Casts are not followed by a space, the
.Fn sizeof
keyword is.
d551 1
a551 3
which
.Em does
understand this rule, starting from
d579 1
a579 1
.Fl W
d598 1
d604 1
a604 1
char *volatile foo;
d621 1
a621 1
volatile char *volatile foo;
d626 8
d649 2
a655 11
Test pointers
against
.Dv NULL ,
i.e., use:
.Bd -literal -offset indent
(p = f()) == NULL
.Ed
not:
.Bd -literal -offset indent -compact
!(p = f())
.Ed
d661 1
a661 1
if (*p == '\e0')
d668 10
d684 4
d694 1
a694 1
	if ((four = malloc(sizeof(struct foo))) == NULL)
d706 3
a708 3
	int a1, a2;	/* declare ints, too, don't default them */
	float fl;	/* beware double vs. float prototype differences */
	int a4;		/* list in order declared */
d714 1
a714 3
Use ANSI function declarations unless you explicitly need K&R compatibility.
Even then you should really think twice about it.
Even gcc now requires an ANSI C compiler to be built.
d719 4
a722 1
#include <stdarg.h>
d743 1
a743 1
Usage statements should look like the manual pages.
d752 1
a752 1
.Pq Sq \&|
d763 2
a764 2
"usage: f [-12aDde] [-b b_arg] [-m m_arg] req1 req2 [opt1 [opt2]]\en"
"usage: f [-a | -b] [-c [-de] [-n number]]\en"
d769 1
a769 1
string should be used instead of hard-coding the programme's name.
d771 1
a771 1
	fprintf(stderr, "usage: %s [-ab]\en", __progname);
d783 1
a783 6
Stylistic changes (including whitespace changes) are hard on the source
repository and are to be avoided without good reason.
Code that is approximately KNF compliant in the repository must not diverge
from compliance.
.Pp
Whenever possible, code should be run through a code checker
d785 1
a786 1
.Dq Li gcc -Wall -W -Wtraditional -Wpointer-arith -Wbad-function-cast ... ,
d788 8
a795 1
or lclint from the ports tree) and produce minimal warnings.
d801 12
d819 1
a819 1
.Pa ~/.indent.pro
d837 1
d855 2
a856 7
.Pp
A more complete list can be fount at
.Pa src/usr.bin/indent/.indent.pro
in the
.Mx
source code.
Even then,
a858 1
Be warned.
d861 1
d871 1
a871 1
desire of the
d873 1
a873 1
project, with a few annotations and some even deeper changes for the
d875 1
a875 1
source tree, including a different, improved, licence template.
@


1.9
log
@document that it's now discouraged listing all the RCS IDs at the beginning
of files; we use __SCCSID() and __RCSID() for that, even in header files if
it's expanded only once (e.g. in the main file) or use a technique like the
one in src/bin/mksh/sh.h+misc.h; the macros are safe to be called more than
once per file and even in the kernel now.
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.8 2007/01/22 15:51:54 tg Exp $
d4 1
a4 1
.\" Copyright (c) 2002-2006 The MirOS Project.
d30 1
a30 1
.Dd May 17, 2007
d406 7
@


1.8
log
@stupid
| (void)fprintf(stderr, "foo");
constructs must die die die
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.7 2006/03/19 11:20:33 tg Exp $
d30 1
a30 1
.Dd January 22, 2007
d135 5
@


1.7
log
@* update policies (e.g. on spaces, tabs, etc.)
* be consistent with KNF in the examples and comments
* sync indent(1) stuff
* reword, rephrase, reindent
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.6 2006/02/21 02:26:45 tg Exp $
d30 1
a30 1
.Dd June 18, 2001
d631 2
@


1.6
log
@document style on 'goto' labels
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.5 2005/12/22 19:54:36 tg Exp $
d4 1
a4 1
.\" Copyright (c) 2002-2004 The MirOS Project.
d31 1
a31 1
.Dt STYLE 9
d40 1
a40 1
It is also a guide for preferred user land code style.
d57 1
a57 1
/* Most small single-line comments look like this */
d71 1
a71 1
come first; normally, you'll need
d73 1
a73 1
OR
d88 1
a88 1
#include <sys/types.h>	/* Non-local includes in brackets */
d92 1
a92 1
If it's a network programme, put the network include files next.
d101 1
a101 1
Then there's a blank line, followed by the
d104 7
a110 1
The
d112 1
a112 1
files should be sorted!
d126 1
a126 1
Then there's a blank line, and the user include files.
d128 1
a128 1
#include "pathnames.h"	/* Local includes in double quotes */
d131 4
a134 2
After the includes block, you should add the RCS ID of the file,
and if taking over old source, the SCCS ID as well.
d136 1
a136 1
.Aq Pa sys/cdefs.h .
d146 1
a146 1
In user land, functions local to one source module should be declared
d148 2
a149 2
This should not be done in kernel land since it makes it impossible
to use the kernel debugger.
d157 2
d167 3
a169 1
Prototypes should not have variable names associated with the types; i.e.,
d171 1
a171 1
void	function(int);
d175 1
a175 1
void	function(int a);
d178 6
a183 2
Prototypes may have an extra space after a tab to enable function names
to line up, although lining up is deprecated:
d189 2
a190 2
There should be no space between the function (or macro) name
and the argument list, only after keywords.
d198 1
a198 1
__dead void	abort(void);
d204 1
a204 1
This makes the header file usable from C++.
d209 1
a209 1
Macros are capitalized and parenthesized, and should avoid side-effects.
d219 2
a220 2
statements.
Any final statement-terminating semicolon should be
d227 1
a227 1
} while (0)
d239 1
a239 4
Put a tab after the first word, i.e., use
.Ql int^Ix;
and
.Ql struct^Ifoo *x; .
d249 3
a251 3
	struct	foo *next;	/* List of active foo */
	struct	mumble amumble;	/* Comment for mumble */
	int	bar;
d253 1
a253 1
struct foo *foohead;		/* Head of global foo list */
d258 1
a258 1
macros rather than rolling your own lists, whenever possible.
d262 4
a265 4
struct	foo {
	LIST_ENTRY(foo)	link;	/* Queue macro glue for foo lists */
	struct	mumble amumble;	/* Comment for mumble */
	int	bar;
d267 1
a267 1
LIST_HEAD(, foo) foohead;	/* Head of global foo list */
d318 1
d321 2
a322 2
	switch (ch) {		/* Indent the switch */
	case 'a':		/* Don't indent the case */
d329 1
d351 1
d355 1
a355 1
argument, although this is not a strict requirement.
d460 1
a460 1
		 * Avoid obvious comments such as
d476 2
a477 2
Old style function declarations should be avoided; we live in an ANSI C world,
and ISO C99 is already coming.
d502 1
a502 1
Casts and
d504 1
a504 1
calls are not followed by a space.
d507 6
a512 1
does not understand this rule.
d517 1
a517 1
Optimizing compilers such as gcc can generally do a better job
d523 10
a532 1
compiler optimization.
d551 1
a551 1
Failure to do so may result in improper code generation when optimization
d638 5
a642 5
if ((four = malloc(sizeof(struct foo))) == NULL)
	err(1, (char *)NULL);
if ((six = (int *)overflow()) == NULL)
	errx(1, "Number overflowed.");
return (eight);
d646 1
a646 1
Old-style function declarations look like this:
d650 3
a652 3
	int a1, a2;	/* Declare ints, too, don't default them */
	float fl;	/* Beware double vs. float prototype differences */
	int a4;		/* List in order declared */
d659 2
d683 1
a683 1
	extern char *__progname;	/* from crt0.o */
d703 2
a704 2
Note that the options list in manual pages should be purely alphabetical.
That is, with no regard to whether an option takes an argument.
d712 1
a712 1
string, should be used instead of hard-coding the programme's name.
d714 2
a715 2
(void)fprintf(stderr, "usage: %s [-ab]\en", __progname);
exit(1);
d721 4
a724 1
relaxed but at a minimum should be internally consistent with their style.
d733 1
d741 1
a745 3
Attention: this template is different from the
.Ox
sample licence.
d751 1
d759 1
a766 1
.Fl Tpid_t
a767 2
.Fl Tquad_t
.Fl Trecno_t
a770 12
.Fl Tu_char
.Fl Tu_int
.Fl Tu_int16_t
.Fl Tu_int32
.Fl Tu_int32_t
.Fl Tu_int64_t
.Fl Tu_int8_t
.Fl Tu_long
.Fl Tu_quad_t
.Fl Tu_short
.Fl Tuid_t
.Fl Tuint
d777 2
a778 3
.Fl Tulong
.Fl Tunchar
.Fl Tvaddr_t
d780 1
a780 1
The
d782 1
a782 2
option might be problematic for existing code.
It's often better to leave it out.
d788 1
a788 3
source code, which is kept up-to-date as the developers
stumble upon new typedefs.
.Pp
d806 1
a806 1
project, with a few annotations and changes for the
d808 1
a808 1
source.
@


1.5
log
@integer type remainder
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.4 2005/08/21 12:52:20 tg Exp $
d190 3
@


1.4
log
@move <sys/time.h> up, directly behind types/param.h
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.3 2005/08/02 12:23:01 tg Exp $
d262 7
a268 1
.Tn POSIX .
@


1.3
log
@merge
update
@
text
@d1 1
a1 1
.\" $MirOS: src/share/man/man9/style.9,v 1.2 2005/03/06 19:38:47 tg Exp $
d83 4
@


1.2
log
@merge src/share
@
text
@d1 3
a3 2
.\" $MirOS$
.\"
d29 1
a29 3
.\"
.\"	$OpenBSD: style.9,v 1.38 2004/04/10 09:10:16 jmc Exp $
.\"
d87 1
d127 1
a127 1
__RCSID("$MirBSD\&$");
d163 1
a163 1
to line up, although lining up needs not be used:
d264 1
a264 1
	int	level;
d324 4
d560 2
a561 5
(type\ *)0 or (type\ *)NULL in contexts where the compiler knows the
type, e.g., in assignments.
Use (type\ *)NULL in other contexts, in particular for all function args.
(Casting is essential for variadic args and is necessary for other args
if the function prototype might not be in scope.)
d688 4
d767 2
a768 1
.Xr warn 3
d776 1
a776 1
project, with a few annotations for the
@


1.1
log
@Initial revision
@
text
@d1 4
d39 1
a39 1
.Ox
d50 2
a51 1
 * Style guide for the OpenBSD KNF (Kernel Normal Form).
d58 2
a59 1
/* Most single-line comments look like this. */
d62 5
a66 2
 * Multi-line comments look like this.  Make them real sentences.
 * Fill them so they look like real paragraphs.
d77 4
a80 1
.Aq Pa sys/types.h
d85 1
a85 1
#include <sys/types.h>	/* Non-local includes in brackets. */
d88 1
a88 1
If it's a network program, put the network include files next.
d108 3
a110 3
.Pa /usr/include/paths.h .
Pathnames local to the program go in
.Pa pathnames.h
d118 10
a127 1
#include "pathnames.h"	/* Local includes in double quotes. */
d144 1
a144 1
.Pa extern.h .
d151 1
a151 1
.Ox
d163 1
a163 1
to line up:
d169 2
a170 1
There should be no space between the function name and the argument list.
d262 1
a262 1
/* Make the structure name match the typedef. */
d270 2
a271 2
 * they do.  The comment before the "main" routine should describe
 * what the program does.
d294 2
a295 2
	switch (ch) {		/* Indent the switch. */
	case 'a':		/* Don't indent the case. */
d400 3
d413 11
d443 2
a444 1
Old style function declarations should be avoided.
d491 1
a491 1
in a program, the
d606 3
a608 3
	int a1, a2;	/* Declare ints, too, don't default them. */
	float fl;	/* Beware double vs. float prototype differences. */
	int a4;		/* List in order declared. */
d666 1
a666 1
string, should be used instead of hard-coding the program name.
d688 6
a693 3
.Bl -tag -width "/usr/share/misc/license.template " -compact
.It Pa /usr/share/misc/license.template
Example license for new code.
d695 63
d770 3
a772 1
project.
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@sync
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.40 2005/07/09 08:05:08 jmc Exp $
d519 5
a523 2
(type\ *)0 or (type\ *)NULL in all cases except for arguments to variadic
functions where the compiler does not know the type.
a649 4
.Pp
Note that documentation follows its own style guide,
as documented in
.Xr mdoc.samples 7 .
d659 1
a659 2
.Xr warn 3 ,
.Xr mdoc.samples 7
@


1.1.1.3
log
@sync with
.Ox
@
text
@d25 1
a25 1
.\"	$OpenBSD: style.9,v 1.50 2008/11/14 13:42:05 tedu Exp $
d27 1
a27 1
.Dd $Mdocdate: November 14 2008 $
d254 4
a257 2
	int aflag, bflag, ch, num;
	const char *errstr;
d280 4
a283 3
		num = strtonum(optarg, 0, INT_MAX, &errstr);
		if (errstr) {
			warnx("number is %s: %s", errstr, optarg);
d287 1
d305 4
d340 1
a340 1
	    two + lines + gets + indented + four + spaces +
d425 6
a430 1
Do not declare functions inside other functions.
d521 11
d600 1
a600 1
Usage statements should take the same form as the synopsis in manual pages.
d626 1
a626 1
string may be used instead of hard-coding the program name.
d637 5
d644 1
a644 1
.Dq Li gcc -Wall -W -Wpointer-arith -Wbad-function-cast ... ,
d646 1
a646 1
or splint from the ports tree) and produce minimal warnings.
@


