head	1.7;
access;
symbols
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.7
date	2011.07.09.19.17.59;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004E18A955245EBFD4;

1.6
date	2010.09.24.19.59.08;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004C9D02C32F9ABA6D;

1.5
date	2010.09.21.17.41.32;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004C98EE600A050941;

1.4
date	2007.02.02.16.45.13;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045C36A7B5DB2058E;

1.3
date	2006.02.21.20.40.13;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043FB7ABC6FCF47AE;

1.2
date	2005.03.06.19.38.47;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.27.12;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.12;	author tg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@add arc4random_uniform; all three arc4random* and all three rnd_lopool_add*
functions are safe to call at any time now
@
text
@.\"	$MirOS: src/share/man/man9/random.9,v 1.6 2010/09/24 19:59:08 tg Exp $
.\"	$OpenBSD: random.9,v 1.19 2004/04/04 13:19:36 jmc Exp $
.\"
.\" Copyright (c) 1996,2000 Michael Shalayeff
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: September 24 2010 $
.Dt RND 9
.Os
.Sh NAME
.Nm random
.Nd device kernel interface
.Sh SYNOPSIS
.Fd #include <dev/rndvar.h>
.Ft void
.Fn add_true_randomness "int"
.Ft void
.Fn add_timer_randomness "int"
.Ft void
.Fn add_mouse_randomness "int"
.Ft void
.Fn add_tty_randomness "int"
.Ft void
.Fn add_disk_randomness "int"
.Ft void
.Fn add_net_randomness "int"
.Ft void
.Fn add_auvis_randomness "int"
.Ft void
.Fn add_imacs_randomness "int"
.Ft void
.Fn get_random_bytes "void *buf" "size_t nbytes"
.Ft u_int32_t
.Fn arc4random "void"
.Ft void
.Fn arc4random_buf "void *buf" "size_t len"
.Ft uint32_t
.Fn arc4random_uniform "uint32_t upper_bound"
.Ft void
.Fn rnd_lopool_add "const void *buf" "size_t len"
.Ft void
.Fn rnd_lopool_addh "const void *buf" "size_t len"
.Ft void
.Fn rnd_lopool_addv "unsigned long"
.Sh DESCRIPTION
The
.Fn add_mouse_randomness ,
.Fn add_tty_randomness ,
.Fn add_net_randomness ,
.Fn add_disk_randomness ,
.Fn add_auvis_randomness ,
and
.Fn add_imacs_randomness
routines are used to
supply data for the random data source device for further processing.
The processing involves calculating inter-event time delta and measuring
entropy contained in the resulting delta-T; the argument data supplied
is just mixed into the pool and does not increase the entropy counter.
.Pp
.Fn add_true_randomness
does not involve the usual timing calculations,
and causes the supplied data argument to be added to the entropy pool,
increasing the entropy counter by 32 bits.
.Pp
.Fn add_timer_randomness
will not cause the entropy counter to rise.
It is used to change the state of the pool periodically,
mostly by means of timing the random driver's operations.
.Pp
.Fn get_random_bytes
may be used to retrieve strong random data, just
as it would by the
.Xr srandom 4
device.
.Pp
.Fn arc4random
will give random 32 bit numbers hashed with
the ARC4 algorithm, which appears to be faster and less abusive
to the entropy pool.
.Fn arc4random_buf
will fill a buffer with bytes from the same source.
.Pp
.Fn arc4random_uniform
will give the result of
.Fn arc4random
modulo
.Fa upper_bound ,
except the result is uniformly distributed across the result value space.
.Pp
.Fn rnd_lopool_add
will add bytes from
.Xr wrandom 4
and other
.Dq untrusted
sources via two temporary pools, one using the one-at-a-time hash,
the other using the arcfour stream cipher, into the arc4random pool.
.Fn rnd_lopool_addh
will hash the input into a 32-bit number first, and
.Fn rnd_lopool_addv
takes an integral argument instead of a buffer.
.Sh SEE ALSO
.Xr arc4random 3 ,
.Xr pchb 4 ,
.Xr random 4
.Sh CAVEATS
None of these functions should really be called during the
.Xr autoconf 4
process.
Calling the three
.Nm arc4random
and the three
.Nm rnd_lopool_add
functions however is safe at any time since
.Mx 11 .
@


1.6
log
@• move rstat from bits to bytes (except distribution, of course)
• re-use RND_SRC_AUDIO for video and rename it RND_SRC_AUVIS
• switch to using add_auvis_entropy() in MirBSD code
• let RND_SRC_IMACS take up former RND_SRC_VIDEO’s place in statistics
• keep statistics for lopool en- and dequeues as well
• let rstat look ok also on 80x24 terminal
@
text
@d1 1
a1 1
.\"	$MirOS: src/share/man/man9/random.9,v 1.5 2010/09/21 17:41:32 tg Exp $
d27 1
a27 1
.Dd $Mdocdate: September 21 2010 $
d57 2
d103 7
d129 1
a129 1
Calling
d131 3
a133 1
however is safe at any time since
@


1.5
log
@update
@
text
@d1 1
a1 1
.\"	$MirOS: src/share/man/man9/random.9,v 1.4 2007/02/02 16:45:13 tg Exp $
d27 1
a27 1
.Dd $Mdocdate$
d48 1
a48 3
.Fn add_audio_randomness "int"
.Ft void
.Fn add_video_randomness "int"
d69 1
a69 2
.Fn add_audio_randomness ,
.Fn add_video_randomness ,
@


1.4
log
@make /dev/wrandom as alias for /dev/prandom but allow it to
be written to - I plan to emulate our entropy suite on other
OSes where /dev/prandom may be read-only emulated by pipes
or similar means
@
text
@d1 1
a1 1
.\"	$MirOS: src/share/man/man9/random.9,v 1.3 2006/02/21 20:40:13 tg Exp $
d27 1
a27 1
.Dd March 26, 1996
d44 2
d48 3
a50 1
.Fn add_disk_randomness "int"
d52 1
a52 1
.Fn add_audio_randomness "int"
d58 7
a64 1
.Fn rnd_addpool_add "uint32_t"
d70 3
a72 1
.Fn add_disk_randomness
d74 1
a74 1
.Fn add_audio_randomness
d101 2
d104 11
a114 11
.Fn rnd_addpool_add
is a macro that can be used to push a 32-bit chunk of data
from unreliable random sources or userspace into the kernel.
This macro is safe to be called at almost any situation,
except from within
.Fn rnd_addpool_reinit .
The sysctl
.Dv KERN_PUSHRAND
can be used to disable input from this buffer which is also
filled during writes to
.Pa /dev/wrandom .
d123 4
@


1.3
log
@fix rnd_addpool_add proto (it's a macro) and description
@
text
@d1 1
a1 1
.\"	$MirOS: src/share/man/man9/random.9,v 1.2 2005/03/06 19:38:47 tg Exp $
d100 1
a100 1
.Pa /dev/prandom .
@


1.2
log
@merge src/share
@
text
@d1 1
a1 1
.\"	$MirOS$
d54 1
a54 1
.Fn rnd_addpool_add "int"
d91 2
a92 2
is a macro that can be used to push data from unreliable
random sources into the kernel.
d98 3
a100 1
can be used to disable input from this buffer.
@


1.1
log
@Initial revision
@
text
@d1 1
d53 2
d89 10
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
