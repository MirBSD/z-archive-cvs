head	1.2;
access;
symbols
	MIRBSD_10:1.1.1.2.0.4
	MIRBSD_10_BASE:1.1.1.2
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.2
date	2017.08.07.20.18.01;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005988C69344442E37;

1.1
date	2005.02.05.17.27.07;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.27.07;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.58.19;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.2
log
@filesystem
@
text
@.\"	$OpenBSD: fs.5,v 1.14 2004/05/26 09:42:14 jmc Exp $
.\"	$NetBSD: fs.5,v 1.3 1994/11/30 19:31:17 jtc Exp $
.\"
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @@(#)fs.5	8.2 (Berkeley) 4/19/94
.\"
.Dd April 19, 1994
.Dt FS 5
.Os
.Sh NAME
.Nm fs ,
.Nm inode
.Nd format of filesystem volume
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <ufs/ffs/fs.h>
.Fd #include <ufs/ufs/inode.h>
.Sh DESCRIPTION
The files
.Aq Pa ufs/ffs/fs.h
and
.Aq Pa ufs/ufs/inode.h
declare several structures and define variables and macros
which are used to create and manage the underlying format of
filesystem objects on random access devices (disks).
.Pp
The block size and number of blocks which
comprise a filesystem are parameters of the filesystem.
Sectors beginning at
.Dv BBLOCK
and continuing for
.Dv BBSIZE
are used
for a disklabel and for some hardware primary
and secondary bootstrapping programs.
.Pp
The actual filesystem begins at sector
.Dv SBLOCK
with the
.Em super-block
that is of size
.Dv SBSIZE .
The following structure describes the super-block and is
from the file
.Aq Pa ufs/ffs/fs.h :
.Bd -literal
#define	FS_MAGIC 0x011954
struct fs {
	int32_t	 fs_firstfield;	/* historic filesystem linked list, */
	int32_t	 fs_unused_1;	/*     used for incore super blocks */
	int32_t	 fs_sblkno;	/* addr of super-block in filesys */
	int32_t	 fs_cblkno;	/* offset of cyl-block in filesys */
	int32_t	 fs_iblkno;	/* offset of inode-blocks in filesys */
	int32_t	 fs_dblkno;	/* offset of first data after cg */
	int32_t	 fs_cgoffset;	/* cylinder group offset in cylinder */
	int32_t	 fs_cgmask;	/* used to calc mod fs_ntrak */
	time_t	 fs_time;	/* last time written */
	int32_t	 fs_size;	/* number of blocks in fs */
	int32_t	 fs_dsize;	/* number of data blocks in fs */
	int32_t	 fs_ncg;	/* number of cylinder groups */
	int32_t	 fs_bsize;	/* size of basic blocks in fs */
	int32_t	 fs_fsize;	/* size of frag blocks in fs */
	int32_t	 fs_frag;	/* number of frags in a block in fs */
/* these are configuration parameters */
	int32_t	 fs_minfree;	/* minimum percentage of free blocks */
	int32_t	 fs_rotdelay;	/* num of ms for optimal next block */
	int32_t	 fs_rps;	/* disk revolutions per second */
/* these fields can be computed from the others */
	int32_t	 fs_bmask;	/* ``blkoff'' calc of blk offsets */
	int32_t	 fs_fmask;	/* ``fragoff'' calc of frag offsets */
	int32_t	 fs_bshift;	/* ``lblkno'' calc of logical blkno */
	int32_t	 fs_fshift;	/* ``numfrags'' calc number of frags */
/* these are configuration parameters */
	int32_t	 fs_maxcontig;	/* max number of contiguous blks */
	int32_t	 fs_maxbpg;	/* max number of blks per cyl group */
/* these fields can be computed from the others */
	int32_t	 fs_fragshift;	/* block to frag shift */
	int32_t	 fs_fsbtodb;	/* fsbtodb and dbtofsb shift constant */
	int32_t	 fs_sbsize;	/* actual size of super block */
	int32_t	 fs_csmask;	/* csum block offset (now unused) */
	int32_t	 fs_csshift;	/* csum block number (now unused) */
	int32_t	 fs_nindir;	/* value of NINDIR */
	int32_t	 fs_inopb;	/* value of INOPB */
	int32_t	 fs_nspf;	/* value of NSPF */
/* yet another configuration parameter */
	int32_t	 fs_optim;	/* optimization preference, see below */
/* these fields are derived from the hardware */
	int32_t	 fs_npsect;	/* # sectors/track including spares */
	int32_t	 fs_interleave;	/* hardware sector interleave */
	int32_t	 fs_trackskew;	/* sector 0 skew, per track */
/* fs_id takes the space of the unused fs_headswitch and fs_trkseek */
	int32_t	 fs_id[2];	/* unique filesystem id */
/* sizes determined by number of cylinder groups and their sizes */
	int32_t	 fs_csaddr;	/* blk addr of cyl grp summary area */
	int32_t	 fs_cssize;	/* size of cyl grp summary area */
	int32_t	 fs_cgsize;	/* cylinder group size */
/* these fields are derived from the hardware */
	int32_t	 fs_ntrak;	/* tracks per cylinder */
	int32_t	 fs_nsect;	/* sectors per track */
	int32_t	 fs_spc;	/* sectors per cylinder */
/* this comes from the disk driver partitioning */
	int32_t	 fs_ncyl;	/* cylinders in filesystem */
/* these fields can be computed from the others */
	int32_t	 fs_cpg;	/* cylinders per group */
	int32_t	 fs_ipg;	/* inodes per group */
	int32_t	 fs_fpg;	/* blocks per group * fs_frag */
/* this data must be re-computed after crashes */
	struct csum fs_cstotal;	/* cylinder summary information */
/* these fields are cleared at mount time */
	int8_t	 fs_fmod;	/* super block modified flag */
	int8_t	 fs_clean;	/* filesystem is clean flag */
	int8_t	 fs_ronly;	/* mounted read-only flag */
	int8_t	 fs_flags;	/* see FS_ below */
	u_char	 fs_fsmnt[MAXMNTLEN]; /* name mounted on */
/* these fields retain the current block allocation info */
	int32_t	 fs_cgrotor;	 /* last cg searched */
	void	*fs_ocsp[NOCSPTRS]; /* padding; was list of fs_cs bufs */
	u_int8_t *fs_contigdirs; /* # of contiguously allocated dirs */
	struct csum *fs_csp;	 /* cg summary info buffer for fs_cs */
	int32_t	*fs_maxcluster;	 /* max cluster in each cyl group */
	int32_t	 fs_cpc;	 /* cyl per cycle in postbl */
	int16_t	 fs_opostbl[16][8]; /* old rotation block list head */
	int32_t	 fs_snapinum[20];/* reserved for snapshot inode nums */
	int32_t	 fs_avgfilesize; /* expected average file size */
	int32_t	 fs_avgfpdir;	 /* expected # of files per directory */
	int32_t	 fs_sparecon[27];/* reserved for future constants */
	time_t	 fs_fscktime;	 /* last time fsck(8)ed */
	int32_t	 fs_contigsumsize; /* size of cluster summary array */
	int32_t	 fs_maxsymlinklen; /* max length of internal symlink */
	int32_t	 fs_inodefmt;	 /* format of on-disk inodes */
	u_int64_t fs_maxfilesize;/* maximum representable file size */
	int64_t	 fs_qbmask;	 /* ~fs_bmask - for use with quad size */
	int64_t	 fs_qfmask;	 /* ~fs_fmask - for use with quad size */
	int32_t	 fs_state;	 /* validate fs_clean field */
	int32_t	 fs_postblformat;/* format of positional layout tables */
	int32_t	 fs_nrpos;	 /* number of rotational positions */
	int32_t	 fs_postbloff;	 /* (u_int16) rotation block list head */
	int32_t	 fs_rotbloff;	 /* (u_int8) blocks for each rotation */
	int32_t	 fs_magic;	 /* magic number */
	u_int8_t fs_space[1];	 /* list of blocks for each rotation */
/* actually longer */
};
.Ed
.Pp
Each disk drive contains some number of filesystems.
A filesystem consists of a number of cylinder groups.
Each cylinder group has inodes and data.
.Pp
A filesystem is described by its super-block, which in turn
describes the cylinder groups.
The super-block is critical
data and is replicated in each cylinder group to protect against
catastrophic loss.
This is done at filesystem creation time and the critical
super-block data does not change, so the copies need not be
referenced further unless disaster strikes.
.Pp
Addresses stored in inodes are capable of addressing fragments
of
.Dq blocks .
Filesystem blocks of at most size
.Dv MAXBSIZE
can
be optionally broken into 2, 4, or 8 pieces, each of which is
addressable; these pieces may be
.Dv DEV_BSIZE ,
or some multiple of a
.Dv DEV_BSIZE
unit.
.Pp
Large files consist of exclusively large data blocks.
To avoid undue wasted disk space, the last data block of a small file is
allocated only as many fragments of a large block as are
necessary.
The filesystem format retains only a single pointer
to such a fragment, which is a piece of a single large block that
has been divided.
The size of such a fragment is determinable from
information in the inode, using the
.Fn blksize fs ip lbn
macro.
.Pp
The filesystem records space availability at the fragment level;
to determine block availability, aligned fragments are examined.
.Pp
The root inode is the root of the filesystem.
Inode 0 can't be used for normal purposes and
historically bad blocks were linked to inode 1
(inode 1 is no longer used for
this purpose; however, numerous dump tapes make this
assumption, so we are stuck with it).
Thus the root inode is 2.
.Pp
The
.Va fs_minfree
element gives the minimum acceptable percentage of filesystem
blocks that may be free.
If the freelist drops below this level,
only the superuser may continue to allocate blocks.
The
.Va fs_minfree
element
may be set to 0 if no reserve of free blocks is deemed necessary,
although severe performance degradations will be observed if the
filesystem is run at greater than 95% full; thus the default
value of
.Va fs_minfree
is 5%.
.Pp
Empirically the best trade-off between block fragmentation and
overall disk utilization at a loading of 95% comes with a
fragmentation of 8; thus the default fragment size is an eighth
of the block size.
.Pp
The element
.Va fs_optim
specifies whether the filesystem should try to minimize the time spent
allocating blocks
.Pq Dv FS_OPTTIME ,
or if it should attempt to minimize the space fragmentation on the disk
.Pq Dv FS_OPTSPACE .
If the value of
.Va fs_minfree
(see above) is less than 5%,
then the filesystem defaults to optimizing for space to avoid
running out of full sized blocks.
If the value of
.Va fs_minfree
is greater than or equal to 5%,
fragmentation is unlikely to be problematical, and
the filesystem defaults to optimizing for time.
.Pp
The
.Va fs_flags
element specifies how the filesystem was mounted:
.Pp
.Bl -tag -width FS_DOSOFTDEP -offset ind -compact
.It Dv FS_DOSOFTDEP
The filesystem was mounted using soft dependencies.
.It Dv FS_UNCLEAN
The filesystem was mounted uncleanly.
.El
.Ss Cylinder group related limits
Each cylinder keeps track of the availability of blocks at different
rotational positions, so that sequential blocks can be laid out
with minimum rotational latency.
With the default of 1 distinct
rotational position, the resolution of the
summary information is 16ms for a typical 3600 RPM drive.
.Pp
The element
.Va fs_rotdelay
was once used to tweak block layout.
.Pp
Each filesystem has a statically allocated number of inodes, determined
by its size and the desired number of file data bytes per inode at the
time it was created.
See
.Xr newfs 8
for details on how to set this (and other) filesystem parameters.
By default, the inode allocation strategy is extremely conservative.
.Pp
.Dv MINBSIZE
is the smallest allowable block size.
With a
.Dv MINBSIZE
of 4096
it is possible to create files of size
2^32 with only two levels of indirection.
.Dv MINBSIZE
must be big enough to hold a cylinder group block,
thus changes to
.Va struct cg
must keep its size within
.Dv MINBSIZE .
Note that super-blocks are never more than size
.Dv SBSIZE .
.Pp
The path name on which the filesystem is mounted is maintained in
.Va fs_fsmnt .
.Dv MAXMNTLEN
defines the amount of space allocated in
the super-block for this name.
.Pp
Per cylinder group information is summarized in blocks allocated
from the first cylinder group's data blocks.
These blocks are read in from
.Va fs_csaddr
(of size
.Va fs_cssize )
in addition to the super-block.
.Pp
Note that
.Fn sizeof "struct csum"
must be a power of two in order for
the
.Fn fs_cs
macro to work.
.Ss Super-block for a filesystem
The size of the rotational layout tables
is limited by the fact that the super-block is of size
.Dv SBSIZE .
The size of these tables is inversely
proportional to the block
size of the filesystem.
The size of the tables is
increased when sector sizes are not powers of two,
as this increases the number of cylinders
included before the rotational pattern repeats
.Pq Va fs_cpc .
The size of the rotational layout
tables is derived from the number of bytes remaining in
.Va struct fs .
.Pp
The number of blocks of data per cylinder group
is limited because cylinder groups are at most one block.
The inode and free block tables
must fit into a single block after deducting space for
the cylinder group structure
.Va struct cg .
.Ss Inodes
The
.Em inode
is the focus of all file activity in the
.Tn UNIX
filesystem.
There is a unique inode allocated
for each active file,
each current directory, each mounted-on file,
text file, and the root.
An inode is
.Dq named
by its device/i-number pair.
For further information, see the include file
.Aq Pa ufs/ufs/inode.h .
.Sh HISTORY
A super-block structure named
.Em filsys
appeared in
.At v6 .
The filesystem described in this manual appeared
in
.Bx 4.2 .
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.13 2004/02/24 07:17:32 jmc Exp $
d39 1
a39 1
.Nd format of file system volume
d46 1
a46 1
.Aq Pa fs.h
d48 1
a48 1
.Aq Pa inode.h
d51 1
a51 1
file system objects on random access devices (disks).
d54 1
a54 1
comprise a file system are parameters of the file system.
d63 1
a63 1
The actual file system begins at sector
d71 1
a71 1
.Aq Pa ufs/fs.h :
d75 15
a89 15
	struct	fs *fs_link;	/* linked list of file systems */
	struct	fs *fs_rlink;	/*     used for incore super blocks */
	daddr_t	fs_sblkno;	/* addr of super-block in filesys */
	daddr_t	fs_cblkno;	/* offset of cyl-block in filesys */
	daddr_t	fs_iblkno;	/* offset of inode-blocks in filesys */
	daddr_t	fs_dblkno;	/* offset of first data after cg */
	long	fs_cgoffset;	/* cylinder group offset in cylinder */
	long	fs_cgmask;	/* used to calc mod fs_ntrak */
	time_t 	fs_time;    	/* last time written */
	long	fs_size;	/* number of blocks in fs */
	long	fs_dsize;	/* number of data blocks in fs */
	long	fs_ncg;	/* number of cylinder groups */
	long	fs_bsize;	/* size of basic blocks in fs */
	long	fs_fsize;	/* size of frag blocks in fs */
	long	fs_frag;	/* number of frags in a block in fs */
d91 3
a93 3
	long	fs_minfree;	/* minimum percentage of free blocks */
	long	fs_rotdelay;	/* num of ms for optimal next block */
	long	fs_rps;	/* disk revolutions per second */
d95 4
a98 4
	long	fs_bmask;	/* ``blkoff'' calc of blk offsets */
	long	fs_fmask;	/* ``fragoff'' calc of frag offsets */
	long	fs_bshift;	/* ``lblkno'' calc of logical blkno */
	long	fs_fshift;	/* ``numfrags'' calc number of frags */
d100 2
a101 2
	long	fs_maxcontig;	/* max number of contiguous blks */
	long	fs_maxbpg;	/* max number of blks per cyl group */
d103 8
a110 8
	long	fs_fragshift;	/* block to frag shift */
	long	fs_fsbtodb;	/* fsbtodb and dbtofsb shift constant */
	long	fs_sbsize;	/* actual size of super block */
	long	fs_csmask;	/* csum block offset */
	long	fs_csshift;	/* csum block number */
	long	fs_nindir;	/* value of NINDIR */
	long	fs_inopb;	/* value of INOPB */
	long	fs_nspf;	/* value of NSPF */
d112 1
a112 1
	long	fs_optim;	/* optimization preference, see below */
d114 5
a118 5
	long	fs_npsect;	/* # sectors/track including spares */
	long	fs_interleave;	/* hardware sector interleave */
	long	fs_trackskew;	/* sector 0 skew, per track */
	long	fs_headswitch;	/* head switch time, usec */
	long	fs_trkseek;	/* track-to-track seek, usec */
d120 3
a122 3
	daddr_t fs_csaddr;	/* blk addr of cyl grp summary area */
	long	fs_cssize;	/* size of cyl grp summary area */
	long	fs_cgsize;	/* cylinder group size */
d124 3
a126 3
	long	fs_ntrak;	/* tracks per cylinder */
	long	fs_nsect;	/* sectors per track */
	long  	fs_spc;   	/* sectors per cylinder */
d128 1
a128 1
	long	fs_ncyl;   	/* cylinders in file system */
d130 3
a132 3
	long	fs_cpg;	/* cylinders per group */
	long	fs_ipg;	/* inodes per group */
	long	fs_fpg;	/* blocks per group * fs_frag */
d134 1
a134 1
	struct	csum fs_cstotal;	/* cylinder summary information */
d136 5
a140 5
	char   	fs_fmod;    	/* super block modified flag */
	char   	fs_clean;    	/* file system is clean flag */
	char   	fs_ronly;   	/* mounted read-only flag */
	char   	fs_flags;   	/* currently unused flag */
	char	fs_fsmnt[MAXMNTLEN];	/* name mounted on */
d142 25
a166 13
	long	fs_cgrotor;	/* last cg searched */
	struct	csum *fs_csp[MAXCSBUFS]; /* list of fs_cs info buffers */
	long	fs_cpc;	/* cyl per cycle in postbl */
	short	fs_opostbl[16][8];	/* old rotation block list head */
	long	fs_sparecon[56];	/* reserved for future constants */
	quad	fs_qbmask;	/* ~fs_bmask - for use with quad size */
	quad	fs_qfmask;	/* ~fs_fmask - for use with quad size */
	long	fs_postblformat; /* format of positional layout tables */
	long	fs_nrpos;	/* number of rotational positions */
	long	fs_postbloff;	/* (short) rotation block list head */
	long	fs_rotbloff;	/* (u_char) blocks for each rotation */
	long	fs_magic;	/* magic number */
	u_char	fs_space[1];	/* list of blocks for each rotation */
d171 2
a172 2
Each disk drive contains some number of file systems.
A file system consists of a number of cylinder groups.
d175 1
a175 1
A file system is described by its super-block, which in turn
d180 1
a180 1
This is done at file system creation time and the critical
d187 1
a187 1
File system blocks of at most size
d201 1
a201 1
The file system format retains only a single pointer
d206 1
a206 1
.Fn blksize
d209 1
a209 1
The file system records space availability at the fragment level;
d212 1
a212 1
The root inode is the root of the file system.
d221 2
a222 2
.Fa fs_minfree
element gives the minimum acceptable percentage of file system
d224 1
a224 1
If the freelist drops below this level
d227 1
a227 1
.Fa fs_minfree
d231 1
a231 1
file system is run at greater than 95% full; thus the default
d233 1
a233 1
.Fa fs_minfree
d242 6
a247 4
.Fa fs_optim
specifies whether the file system should try to minimize the time spent
allocating blocks, or if it should attempt to minimize the space
fragmentation on the disk.
d249 1
a249 1
.Fa fs_minfree
d251 1
a251 1
then the file system defaults to optimizing for space to avoid
d254 1
a254 1
.Fa fs_minfree
d257 12
a268 1
the file system defaults to optimizing for time.
d273 3
a275 3
With the default of 8 distinguished
rotational positions, the resolution of the
summary information is 2ms for a typical 3600 rpm drive.
d278 10
a287 14
.Fa fs_rotdelay
gives the minimum number of milliseconds to initiate
another disk transfer on the same cylinder.
It is used in determining the rotationally optimal
layout for disk blocks within a file;
the default value for
.Fa fs_rotdelay
is 2ms.
.Pp
Each file system has a statically allocated number of inodes.
An inode is allocated for each
.Dv NBPI
bytes of disk space.
The inode allocation strategy is extremely conservative.
d299 1
a299 1
.Fa struct cg
d305 2
a306 2
The path name on which the file system is mounted is maintained in
.Fa fs_fsmnt .
a309 5
The limit on the amount of summary information per file system
is defined by
.Dv MAXCSBUFS .
For a 4096 byte block size, it is currently parameterized for a
maximum of two million cylinders.
d314 3
a316 3
.Fa fs_csaddr
(size
.Fa fs_cssize )
d325 1
a325 1
.Ss Super-block for a file system
d331 1
a331 1
size of the file system.
d336 1
a336 1
.Pq Fa fs_cpc .
d339 1
a339 1
.Fa struct fs .
d346 1
a346 1
.Fa struct cg .
d348 3
a350 1
The inode is the focus of all file activity in the
d352 1
a352 1
file system.
d363 3
a365 1
A super-block structure named filsys appeared in
d367 1
a367 1
The file system described in this manual appeared
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
.\"	$OpenBSD: fs.5,v 1.14 2004/05/26 09:42:14 jmc Exp $
d46 1
a46 1
.Aq Pa ufs/ffs/fs.h
d48 1
a48 1
.Aq Pa ufs/ufs/inode.h
d71 1
a71 1
.Aq Pa ufs/ffs/fs.h :
d75 15
a89 15
	int32_t	 fs_firstfield;	/* historic file system linked list, */
	int32_t	 fs_unused_1;	/*     used for incore super blocks */
	int32_t	 fs_sblkno;	/* addr of super-block in filesys */
	int32_t	 fs_cblkno;	/* offset of cyl-block in filesys */
	int32_t	 fs_iblkno;	/* offset of inode-blocks in filesys */
	int32_t	 fs_dblkno;	/* offset of first data after cg */
	int32_t	 fs_cgoffset;	/* cylinder group offset in cylinder */
	int32_t	 fs_cgmask;	/* used to calc mod fs_ntrak */
	time_t	 fs_time;	/* last time written */
	int32_t	 fs_size;	/* number of blocks in fs */
	int32_t	 fs_dsize;	/* number of data blocks in fs */
	int32_t	 fs_ncg;	/* number of cylinder groups */
	int32_t	 fs_bsize;	/* size of basic blocks in fs */
	int32_t	 fs_fsize;	/* size of frag blocks in fs */
	int32_t	 fs_frag;	/* number of frags in a block in fs */
d91 3
a93 3
	int32_t	 fs_minfree;	/* minimum percentage of free blocks */
	int32_t	 fs_rotdelay;	/* num of ms for optimal next block */
	int32_t	 fs_rps;	/* disk revolutions per second */
d95 4
a98 4
	int32_t	 fs_bmask;	/* ``blkoff'' calc of blk offsets */
	int32_t	 fs_fmask;	/* ``fragoff'' calc of frag offsets */
	int32_t	 fs_bshift;	/* ``lblkno'' calc of logical blkno */
	int32_t	 fs_fshift;	/* ``numfrags'' calc number of frags */
d100 2
a101 2
	int32_t	 fs_maxcontig;	/* max number of contiguous blks */
	int32_t	 fs_maxbpg;	/* max number of blks per cyl group */
d103 8
a110 8
	int32_t	 fs_fragshift;	/* block to frag shift */
	int32_t	 fs_fsbtodb;	/* fsbtodb and dbtofsb shift constant */
	int32_t	 fs_sbsize;	/* actual size of super block */
	int32_t	 fs_csmask;	/* csum block offset (now unused) */
	int32_t	 fs_csshift;	/* csum block number (now unused) */
	int32_t	 fs_nindir;	/* value of NINDIR */
	int32_t	 fs_inopb;	/* value of INOPB */
	int32_t	 fs_nspf;	/* value of NSPF */
d112 1
a112 1
	int32_t	 fs_optim;	/* optimization preference, see below */
d114 5
a118 5
	int32_t	 fs_npsect;	/* # sectors/track including spares */
	int32_t	 fs_interleave;	/* hardware sector interleave */
	int32_t	 fs_trackskew;	/* sector 0 skew, per track */
/* fs_id takes the space of the unused fs_headswitch and fs_trkseek */
	int32_t	 fs_id[2];	/* unique filesystem id */
d120 3
a122 3
	int32_t	 fs_csaddr;	/* blk addr of cyl grp summary area */
	int32_t	 fs_cssize;	/* size of cyl grp summary area */
	int32_t	 fs_cgsize;	/* cylinder group size */
d124 3
a126 3
	int32_t	 fs_ntrak;	/* tracks per cylinder */
	int32_t	 fs_nsect;	/* sectors per track */
	int32_t	 fs_spc;	/* sectors per cylinder */
d128 1
a128 1
	int32_t	 fs_ncyl;	/* cylinders in file system */
d130 3
a132 3
	int32_t	 fs_cpg;	/* cylinders per group */
	int32_t	 fs_ipg;	/* inodes per group */
	int32_t	 fs_fpg;	/* blocks per group * fs_frag */
d134 1
a134 1
	struct csum fs_cstotal;	/* cylinder summary information */
d136 5
a140 5
	int8_t	 fs_fmod;	/* super block modified flag */
	int8_t	 fs_clean;	/* file system is clean flag */
	int8_t	 fs_ronly;	/* mounted read-only flag */
	int8_t	 fs_flags;	/* see FS_ below */
	u_char	 fs_fsmnt[MAXMNTLEN]; /* name mounted on */
d142 13
a154 25
	int32_t	 fs_cgrotor;	 /* last cg searched */
	void	*fs_ocsp[NOCSPTRS]; /* padding; was list of fs_cs bufs */
	u_int8_t *fs_contigdirs; /* # of contiguously allocated dirs */
	struct csum *fs_csp;	 /* cg summary info buffer for fs_cs */
	int32_t	*fs_maxcluster;	 /* max cluster in each cyl group */
	int32_t	 fs_cpc;	 /* cyl per cycle in postbl */
	int16_t	 fs_opostbl[16][8]; /* old rotation block list head */
	int32_t	 fs_snapinum[20];/* reserved for snapshot inode nums */
	int32_t	 fs_avgfilesize; /* expected average file size */
	int32_t	 fs_avgfpdir;	 /* expected # of files per directory */
	int32_t	 fs_sparecon[27];/* reserved for future constants */
	time_t	 fs_fscktime;	 /* last time fsck(8)ed */
	int32_t	 fs_contigsumsize; /* size of cluster summary array */
	int32_t	 fs_maxsymlinklen; /* max length of internal symlink */
	int32_t	 fs_inodefmt;	 /* format of on-disk inodes */
	u_int64_t fs_maxfilesize;/* maximum representable file size */
	int64_t	 fs_qbmask;	 /* ~fs_bmask - for use with quad size */
	int64_t	 fs_qfmask;	 /* ~fs_fmask - for use with quad size */
	int32_t	 fs_state;	 /* validate fs_clean field */
	int32_t	 fs_postblformat;/* format of positional layout tables */
	int32_t	 fs_nrpos;	 /* number of rotational positions */
	int32_t	 fs_postbloff;	 /* (u_int16) rotation block list head */
	int32_t	 fs_rotbloff;	 /* (u_int8) blocks for each rotation */
	int32_t	 fs_magic;	 /* magic number */
	u_int8_t fs_space[1];	 /* list of blocks for each rotation */
d194 1
a194 1
.Fn blksize fs ip lbn
d209 1
a209 1
.Va fs_minfree
d212 1
a212 1
If the freelist drops below this level,
d215 1
a215 1
.Va fs_minfree
d221 1
a221 1
.Va fs_minfree
d230 1
a230 1
.Va fs_optim
d232 2
a233 4
allocating blocks
.Pq Dv FS_OPTTIME ,
or if it should attempt to minimize the space fragmentation on the disk
.Pq Dv FS_OPTSPACE .
d235 1
a235 1
.Va fs_minfree
d240 1
a240 1
.Va fs_minfree
a243 11
.Pp
The
.Va fs_flags
element specifies how the filesystem was mounted:
.Pp
.Bl -tag -width FS_DOSOFTDEP -offset ind -compact
.It Dv FS_DOSOFTDEP
The filesystem was mounted using soft dependencies.
.It Dv FS_UNCLEAN
The filesystem was mounted uncleanly.
.El
d248 3
a250 3
With the default of 1 distinct
rotational position, the resolution of the
summary information is 16ms for a typical 3600 RPM drive.
d253 14
a266 10
.Va fs_rotdelay
was once used to tweak block layout.
.Pp
Each file system has a statically allocated number of inodes, determined
by its size and the desired number of file data bytes per inode at the
time it was created.
See
.Xr newfs 8
for details on how to set this (and other) filesystem parameters.
By default, the inode allocation strategy is extremely conservative.
d278 1
a278 1
.Va struct cg
d285 1
a285 1
.Va fs_fsmnt .
d289 5
d298 3
a300 3
.Va fs_csaddr
(of size
.Va fs_cssize )
d320 1
a320 1
.Pq Va fs_cpc .
d323 1
a323 1
.Va struct fs .
d330 1
a330 1
.Va struct cg .
d332 1
a332 3
The
.Em inode
is the focus of all file activity in the
d345 1
a345 3
A super-block structure named
.Em filsys
appeared in
@

