head	1.2;
access;
symbols
	cvs-20140819:1.1.1.3
	MIRBSD_10:1.1.1.2.0.4
	MIRBSD_10_BASE:1.1.1.2
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200507211800:1.1.1.2
	cvs-200504291700:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2014.08.19.20.44.55;	author tg;	state Exp;
branches;
next	1.1;
commitid	10053F3B75E4ADD80F6;

1.1
date	2005.02.05.17.29.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.17.06.02;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.08.19.20.22.48;	author tg;	state Exp;
branches;
next	;
commitid	10053F3B22340A28086;


desc
@@


1.2
log
@merge and make __CRAZY clean
@
text
@/*	$OpenBSD: stack.c,v 1.11 2009/10/27 23:59:37 deraadt Exp $	*/

/*
 * Copyright (c) 2003, Otto Moerbeek <otto@@drijf.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <stdlib.h>
#include <string.h>

#include "extern.h"

__RCSID("$MirOS$");

static __inline bool	stack_empty(const struct stack *);
static void		stack_grow(struct stack *);
static struct array	*array_new(void);
static __inline void	array_free(struct array *);
static struct array *	array_dup(const struct array *);
static __inline void	array_grow(struct array *, size_t);
static __inline void	array_assign(struct array *, size_t, const struct value *);
static __inline struct value	*array_retrieve(const struct array *, size_t);

void
stack_init(struct stack *stack)
{
	stack->size = 0;
	stack->sp = -1;
	stack->stack = NULL;
}

static __inline bool
stack_empty(const struct stack *stack)
{
	bool empty = stack->sp == -1;
	if (empty)
		warnx("stack empty");
	return empty;
}

/* Clear number or string, but leave value itself */
void
stack_free_value(struct value *v)
{
	switch (v->type) {
	case BCODE_NONE:
		break;
	case BCODE_NUMBER:
		free_number(v->u.num);
		break;
	case BCODE_STRING:
		free(v->u.string);
		break;
	}
	if (v->array != NULL) {
		array_free(v->array);
		v->array = NULL;
	}
}

/* Copy number or string content into already allocated target */
struct value *
stack_dup_value(const struct value *a, struct value *copy)
{
	copy->type = a->type;

	switch (a->type) {
	case BCODE_NONE:
		break;
	case BCODE_NUMBER:
		copy->u.num = dup_number(a->u.num);
		break;
	case BCODE_STRING:
		copy->u.string = strdup(a->u.string);
		if (copy->u.string == NULL)
			err(1, NULL);
		break;
	}

	copy->array = a->array == NULL ? NULL : array_dup(a->array);

	return copy;
}

size_t
stack_size(const struct stack *stack)
{
	return stack->sp + 1;
}

void
stack_dup(struct stack *stack)
{
	struct value	*value;
	struct value	copy;

	value = stack_tos(stack);
	if (value == NULL) {
		warnx("stack empty");
		return;
	}
	stack_push(stack, stack_dup_value(value, &copy));
}

void
stack_swap(struct stack *stack)
{
	struct value	copy;

	if (stack->sp < 1) {
		warnx("stack empty");
		return;
	}
	copy = stack->stack[stack->sp];
	stack->stack[stack->sp] = stack->stack[stack->sp-1];
	stack->stack[stack->sp-1] = copy;
}

static void
stack_grow(struct stack *stack)
{
	size_t new_size, i;

	if ((size_t)(++stack->sp) == stack->size) {
		new_size = stack->size * 2 + 1;
		stack->stack = brealloc(stack->stack,
		    new_size * sizeof(*stack->stack));
		for (i = stack->size; i < new_size; i++)
			stack->stack[i].array = NULL;
		stack->size = new_size;
	}
}

void
stack_pushnumber(struct stack *stack, struct number *b)
{
	stack_grow(stack);
	stack->stack[stack->sp].type = BCODE_NUMBER;
	stack->stack[stack->sp].u.num = b;
}

void
stack_pushstring(struct stack *stack, char *string)
{
	stack_grow(stack);
	stack->stack[stack->sp].type = BCODE_STRING;
	stack->stack[stack->sp].u.string = string;
}

void
stack_push(struct stack *stack, struct value *v)
{
	switch (v->type) {
	case BCODE_NONE:
		stack_grow(stack);
		stack->stack[stack->sp].type = BCODE_NONE;
		break;
	case BCODE_NUMBER:
		stack_pushnumber(stack, v->u.num);
		break;
	case BCODE_STRING:
		stack_pushstring(stack, v->u.string);
		break;
	}
	stack->stack[stack->sp].array = v->array == NULL ?
	    NULL : array_dup(v->array);
}

struct value *
stack_tos(const struct stack *stack)
{
	if (stack->sp == -1)
		return NULL;
	return &stack->stack[stack->sp];
}

void
stack_set_tos(struct stack *stack, struct value *v)
{
	if (stack->sp == -1)
		stack_push(stack, v);
	else {
		stack_free_value(&stack->stack[stack->sp]);
		stack->stack[stack->sp] = *v;
		stack->stack[stack->sp].array = v->array == NULL ?
		    NULL : array_dup(v->array);
	}
}

struct value *
stack_pop(struct stack *stack)
{
	if (stack_empty(stack))
		return NULL;
	return &stack->stack[stack->sp--];
}

struct number *
stack_popnumber(struct stack *stack)
{
	if (stack_empty(stack))
		return NULL;
	if (stack->stack[stack->sp].array != NULL) {
		array_free(stack->stack[stack->sp].array);
		stack->stack[stack->sp].array = NULL;
	}
	if (stack->stack[stack->sp].type != BCODE_NUMBER) {
		warnx("not a number"); /* XXX remove */
		return NULL;
	}
	return stack->stack[stack->sp--].u.num;
}

char *
stack_popstring(struct stack *stack)
{
	if (stack_empty(stack))
		return NULL;
	if (stack->stack[stack->sp].array != NULL) {
		array_free(stack->stack[stack->sp].array);
		stack->stack[stack->sp].array = NULL;
	}
	if (stack->stack[stack->sp].type != BCODE_STRING) {
		warnx("not a string"); /* XXX remove */
		return NULL;
	}
	return stack->stack[stack->sp--].u.string;
}

void
stack_clear(struct stack *stack)
{
	while (stack->sp >= 0) {
		stack_free_value(&stack->stack[stack->sp--]);
	}
	free(stack->stack);
	stack_init(stack);
}

void
stack_print(FILE *f, const struct stack *stack, const char *prefix, u_int base)
{
	ssize_t i;

	for (i = stack->sp; i >= 0; i--) {
		print_value(f, &stack->stack[i], prefix, base);
		(void)putc('\n', f);
	}
}


static struct array *
array_new(void)
{
	struct array *a;

	a = bmalloc(sizeof(*a));
	a->data = NULL;
	a->size = 0;
	return a;
}

static __inline void
array_free(struct array *a)
{
	size_t i;

	if (a == NULL)
		return;
	for (i = 0; i < a->size; i++)
		stack_free_value(&a->data[i]);
	free(a->data);
	free(a);
}

static struct array *
array_dup(const struct array *a)
{
	struct array	*n;
	size_t		i;

	if (a == NULL)
		return NULL;
	n = array_new();
	array_grow(n, a->size);
	for (i = 0; i < a->size; i++)
		(void)stack_dup_value(&a->data[i], &n->data[i]);
	return n;
}

static __inline void
array_grow(struct array *array, size_t newsize)
{
	size_t i;

	array->data = brealloc(array->data, newsize * sizeof(*array->data));
	for (i = array->size; i < newsize; i++) {
		array->data[i].type = BCODE_NONE;
		array->data[i].array = NULL;
	}
	array->size = newsize;
}

static __inline void
array_assign(struct array *array, size_t indexv, const struct value *v)
{
	if (indexv >= array->size)
		array_grow(array, indexv+1);
	stack_free_value(&array->data[indexv]);
	array->data[indexv] = *v;
}

static __inline struct value *
array_retrieve(const struct array *array, size_t indexv)
{
	if (indexv >= array->size)
		return NULL;
	return &array->data[indexv];
}

void
frame_assign(struct stack *stack, size_t indexv, const struct value *v)
{
	struct array *a;
	struct value n;

	if (stack->sp == -1) {
		n.type = BCODE_NONE;
		n.array = NULL;
		stack_push(stack, &n);
	}

	a = stack->stack[stack->sp].array;
	if (a == NULL)
		a = stack->stack[stack->sp].array = array_new();
	array_assign(a, indexv, v);
}

struct value *
frame_retrieve(const struct stack *stack, size_t indexv)
{
	struct array *a;

	if (stack->sp == -1)
		return NULL;
	a = stack->stack[stack->sp].array;
	if (a == NULL)
		a = stack->stack[stack->sp].array = array_new();
	return array_retrieve(a, indexv);
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: stack.c,v 1.6 2003/11/26 19:30:52 otto Exp $	*/
a18 4
#ifndef lint
static const char rcsid[] = "$OpenBSD: stack.c,v 1.6 2003/11/26 19:30:52 otto Exp $";
#endif /* not lint */

d25 2
d45 1
a45 1
stack_empty(const struct stack * stack)
d97 2
a98 2
int
stack_size(const struct stack * stack)
d134 1
a134 1
	int new_size, i;
d136 1
a136 1
	if (++stack->sp == stack->size) {
d198 1
a198 1
			NULL : array_dup(v->array);
d255 1
a255 1
	int i;
d259 1
a259 1
		putc('\n', f);
d278 1
a278 1
	u_int i;
d292 1
a292 1
	u_int		i;
d299 1
a299 1
		stack_dup_value(&a->data[i], &n->data[i]);
d309 2
a310 1
	for (i = array->size; i < newsize; i++)
d312 1
d317 1
a317 1
array_assign(struct array *array, size_t index, const struct value *v)
d319 4
a322 3
	if (index >= array->size)
		array_grow(array, index+1);
	array->data[index] = *v;
d326 1
a326 1
array_retrieve(const struct array *array, size_t index)
d328 1
a328 1
	if (index >= array->size)
d330 1
a330 1
	return &array->data[index];
d334 1
a334 1
frame_assign(struct stack *stack, size_t index, const struct value *v)
d348 1
a348 1
	array_assign(a, index, v);
d352 1
a352 1
frame_retrieve(const struct stack *stack, size_t index)
d361 1
a361 1
	return array_retrieve(a, index);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@d1 1
a1 1
/*	$OpenBSD: stack.c,v 1.7 2005/03/28 17:39:20 deraadt Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: stack.c,v 1.7 2005/03/28 17:39:20 deraadt Exp $";
d47 1
a47 1
stack_empty(const struct stack *stack)
d100 1
a100 1
stack_size(const struct stack *stack)
d200 1
a200 1
		    NULL : array_dup(v->array);
@


1.1.1.3
log
@get a dc that does
	dc -e 16i -e 0.FFFF -e f
right…
@
text
@d1 1
a1 1
/*	$OpenBSD: stack.c,v 1.11 2009/10/27 23:59:37 deraadt Exp $	*/
d19 4
d99 1
a99 1
size_t
d136 1
a136 1
	size_t new_size, i;
d257 1
a257 1
	ssize_t i;
d261 1
a261 1
		(void)putc('\n', f);
d280 1
a280 1
	size_t i;
d294 1
a294 1
	size_t		i;
d301 1
a301 1
		(void)stack_dup_value(&a->data[i], &n->data[i]);
d311 1
a311 2
	for (i = array->size; i < newsize; i++) {
		array->data[i].type = BCODE_NONE;
a312 1
	}
a320 1
	stack_free_value(&array->data[index]);
@


