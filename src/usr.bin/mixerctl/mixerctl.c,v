head	1.1;
branch	1.1.1;
access;
symbols
	MIRBSD_10:1.1.1.2.0.4
	MIRBSD_10_BASE:1.1.1.2
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.02.05.17.29.45;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.45;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.21.00.00;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: mixerctl.c,v 1.16 2004/03/02 23:09:27 tedu Exp $	*/
/*	$NetBSD: mixerctl.c,v 1.11 1998/04/27 16:55:23 augustss Exp $	*/

/*
 * Copyright (c) 1997 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Author: Lennart Augustsson, with some code and ideas from Chuck Cranor.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * mixerctl(1) - a program to control audio mixing.
 */

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <err.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/audioio.h>

char *catstr(char *p, char *q);
struct field *findfield(char *name);
void prfield(struct field *p, char *sep, int prvalset);
int rdfield(struct field *p, char *q);
int main(int argc, char **argv);
void usage(void);

FILE *out = stdout;

struct field {
	char *name;
	mixer_ctrl_t *valp;
	mixer_devinfo_t *infp;
	char changed;
} *fields, *rfields;

mixer_ctrl_t *values;
mixer_devinfo_t *infos;

char *
catstr(char *p, char *q)
{
	int len;
	char *r;

	len = strlen(p) + 1 + strlen(q) + 1;
	if ((r = malloc(len)) == NULL)
		err(1, "malloc()");
	strlcpy(r, p, len);
	strlcat(r, ".", len);
	strlcat(r, q, len);
	return (r);
}

struct field *
findfield(char *name)
{
	int i;
	for(i = 0; fields[i].name; i++)
		if (strcmp(fields[i].name, name) == 0)
			return &fields[i];
	return (0);
}

void
prfield(struct field *p, char *sep, int prvalset)
{
	mixer_ctrl_t *m;
	int i, n;

	if (sep)
		fprintf(out, "%s%s", p->name, sep);
	m = p->valp;
	switch(m->type) {
	case AUDIO_MIXER_ENUM:
		for(i = 0; i < p->infp->un.e.num_mem; i++)
			if (p->infp->un.e.member[i].ord == m->un.ord)
				fprintf(out, "%s",
					p->infp->un.e.member[i].label.name);
		if (prvalset) {
			fprintf(out, "  [ ");
			for(i = 0; i < p->infp->un.e.num_mem; i++)
				fprintf(out, "%s ", p->infp->un.e.member[i].label.name);
			fprintf(out, "]");
		}
		break;
	case AUDIO_MIXER_SET:
		for(n = i = 0; i < p->infp->un.s.num_mem; i++)
			if (m->un.mask & p->infp->un.s.member[i].mask)
				fprintf(out, "%s%s", n++ ? "," : "",
					p->infp->un.s.member[i].label.name);
		if (prvalset) {
			fprintf(out, "  { ");
			for(i = 0; i < p->infp->un.s.num_mem; i++)
				fprintf(out, "%s ", p->infp->un.s.member[i].label.name);
			fprintf(out, "}");
		}
		break;
	case AUDIO_MIXER_VALUE:
		if (m->un.value.num_channels == 1)
			fprintf(out, "%d", m->un.value.level[0]);
		else
			fprintf(out, "%d,%d", m->un.value.level[0],
			       m->un.value.level[1]);
		if (prvalset)
			fprintf(out, " %s", p->infp->un.v.units.name);
		break;
	default:
		errx(1, "Invalid format.");
	}
}

int
rdfield(struct field *p, char *q)
{
	mixer_ctrl_t *m;
	int v, v0, v1, mask;
	int i;
	char *s;

	m = p->valp;
	switch(m->type) {
	case AUDIO_MIXER_ENUM:
		for(i = 0; i < p->infp->un.e.num_mem; i++)
			if (strcmp(p->infp->un.e.member[i].label.name, q) == 0)
				break;
		if (i < p->infp->un.e.num_mem)
			m->un.ord = p->infp->un.e.member[i].ord;
		else
		        errx(1, "Bad enum value %s", q);
		break;
	case AUDIO_MIXER_SET:
		mask = 0;
		for(v = 0; q && *q; q = s) {
			if (s = strchr(q, ','))
				*s++ = 0;
			for (i = 0; i < p->infp->un.s.num_mem; i++)
				if (strcmp(p->infp->un.s.member[i].label.name, q) == 0)
					break;
			if (i < p->infp->un.s.num_mem)
				mask |= p->infp->un.s.member[i].mask;
			else
			        errx(1, "Bad set value %s", q);
		}
		m->un.mask = mask;
		break;
	case AUDIO_MIXER_VALUE:
		if (m->un.value.num_channels == 1) {
			if (sscanf(q, "%d", &v) == 1) {
				switch (*q) {
				case '+':
				case '-':
					m->un.value.level[0] += v;
					break;
				default:
					m->un.value.level[0] = v;
					break;
				}
			} else
				errx(1, "Bad number %s", q);
		} else {
			if (sscanf(q, "%d,%d", &v0, &v1) == 2) {
				switch (*q) {
				case '+':
				case '-':
					m->un.value.level[0] += v0;
					break;
				default:
					m->un.value.level[0] = v0;
					break;
				}
				s = strchr(q, ',') + 1;
				switch (*s) {
				case '+':
				case '-':
					m->un.value.level[1] += v1;
					break;
				default:
					m->un.value.level[1] = v1;
					break;
				}
			} else if (sscanf(q, "%d", &v) == 1) {
				switch (*q) {
				case '+':
				case '-':
					m->un.value.level[0] += v;
					m->un.value.level[1] += v;
					break;
				default:
					m->un.value.level[0] = v;
					m->un.value.level[1] = v;
					break;
				}
			} else
				errx(1, "Bad numbers %s", q);
		}
		break;
	default:
		errx(1, "Invalid format.");
	}
	p->changed = 1;
	return (1);
}

int
main(int argc, char **argv)
{
	int fd, i, j, ch, pos;
	int aflag = 0, qflag = 0, vflag = 0;
	char *file;
	char *sep = "=";
	mixer_devinfo_t dinfo;
	mixer_ctrl_t val;
	int ndev;

	if ((file = getenv("MIXERDEVICE")) == 0 || *file == '\0')
	        file = "/dev/mixer";

	while ((ch = getopt(argc, argv, "af:nqvw")) != -1) {
		switch(ch) {
		case 'a':
			aflag++;
			break;
		case 'w':
			/* compat */
			break;
		case 'v':
			vflag++;
			break;
		case 'n':
			sep = 0;
			break;
		case 'f':
			file = optarg;
			break;
		case 'q':
			qflag = 1;
			break;
		case '?':
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	if ((fd = open(file, O_RDWR)) == -1)
		if ((fd = open(file, O_RDONLY)) == -1)
			err(1, "%s", file);

	for(ndev = 0; ; ndev++) {
		dinfo.index = ndev;
		if (ioctl(fd, AUDIO_MIXER_DEVINFO, &dinfo) < 0)
			break;
	}

	if (!ndev)
		errx(1, "no mixer devices configured");

	if ((rfields = calloc(ndev, sizeof *rfields)) == NULL ||
	    (fields = calloc(ndev, sizeof *fields)) == NULL ||
	    (infos = calloc(ndev, sizeof *infos)) == NULL ||
	    (values = calloc(ndev, sizeof *values)) == NULL)
		err(1, "calloc()");

	for(i = 0; i < ndev; i++) {
		infos[i].index = i;
		ioctl(fd, AUDIO_MIXER_DEVINFO, &infos[i]);
	}

	for(i = 0; i < ndev; i++) {
		rfields[i].name = infos[i].label.name;
		rfields[i].valp = &values[i];
		rfields[i].infp = &infos[i];
	}

	for(i = 0; i < ndev; i++) {
		values[i].dev = i;
		values[i].type = infos[i].type;
		if (infos[i].type != AUDIO_MIXER_CLASS) {
			values[i].un.value.num_channels = 2;
			if (ioctl(fd, AUDIO_MIXER_READ, &values[i]) < 0) {
				values[i].un.value.num_channels = 1;
				if (ioctl(fd, AUDIO_MIXER_READ, &values[i]) < 0)
					err(1, "AUDIO_MIXER_READ");
			}
		}
	}

	for(j = i = 0; i < ndev; i++) {
		if (infos[i].type != AUDIO_MIXER_CLASS &&
		    infos[i].type != -1) {
			fields[j++] = rfields[i];
			for(pos = infos[i].next; pos != AUDIO_MIXER_LAST;
			    pos = infos[pos].next) {
				fields[j] = rfields[pos];
				fields[j].name = catstr(rfields[i].name,
							infos[pos].label.name);
				infos[pos].type = -1;
				j++;
			}
		}
	}

	for(i = 0; i < j; i++) {
		int cls = fields[i].infp->mixer_class;
		if (cls >= 0 && cls < ndev)
			fields[i].name = catstr(infos[cls].label.name,
						fields[i].name);
	}

	if (!argc && aflag) {
		for(i = 0; fields[i].name; i++) {
			prfield(&fields[i], sep, vflag);
			fprintf(out, "\n");
		}
	} else if (argc > 0 && !aflag) {
		struct field *p;

		while(argc--) {
			char *q;

			if (q = strchr(*argv, '=')) {
				*q++ = 0;
				p = findfield(*argv);
				if (p == NULL)
					warnx("field %s does not exist", *argv);
				else {
					val = *p->valp;
					if (rdfield(p, q)) {
						if (ioctl(fd, AUDIO_MIXER_WRITE, p->valp) < 0)
							warn("AUDIO_MIXER_WRITE");
						else if (sep && !qflag) {
							*p->valp = val;
							prfield(p, ": ", 0);
							ioctl(fd, AUDIO_MIXER_READ, p->valp);
							printf(" -> ");
							prfield(p, 0, 0);
							printf("\n");
						}
					}
				}
				argv++;
			} else {
				p = findfield(*argv);
				if (p == NULL)
					warnx("field %s does not exist", *argv);
				else {
					prfield(p, sep, vflag);
					fprintf(out, "\n");
				}
			}
		}
	} else
		usage();
	exit(0);
}

void
usage(void)
{
	extern char *__progname;	/* from crt0.o */

	fprintf(stderr,
	    "usage: %s [-nv] [-f file] -a\n"
	    "       %s [-nv] [-f file] name [...]\n"
	    "       %s [-q]  [-f file] name=value [...]\n",
	    __progname, __progname, __progname);

	exit(1);
}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: mixerctl.c,v 1.21 2005/05/09 13:23:35 millert Exp $	*/
d43 6
d53 6
a58 15
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

struct field *findfield(char *);
void adjlevel(char **, u_char *, int);
void catstr(char *, char *, char *);
void prfield(struct field *, char *, int);
void rdfield(int, struct field *, char *, int);
__dead void usage(void);
d60 1
a60 1
#define FIELD_NAME_MAX	64
d63 1
a63 1
	char name[FIELD_NAME_MAX];
d66 1
d72 2
a73 2
void
catstr(char *p, char *q, char *out)
d75 2
a76 1
	char tmp[FIELD_NAME_MAX];
d78 7
a84 2
	snprintf(tmp, FIELD_NAME_MAX, "%s.%s", p, q);
	strlcpy(out, tmp, FIELD_NAME_MAX);
d91 1
a91 1
	for (i = 0; fields[i].name[0] != '\0'; i++)
a96 3
#define e_member_name	un.e.member[i].label.name
#define s_member_name	un.s.member[i].label.name

d104 1
a104 1
		printf("%s%s", p->name, sep);
d106 1
a106 1
	switch (m->type) {
d108 1
a108 1
		for (i = 0; i < p->infp->un.e.num_mem; i++)
d110 2
a111 2
				printf("%s",
					p->infp->e_member_name);
d113 4
a116 4
			printf("  [ ");
			for (i = 0; i < p->infp->un.e.num_mem; i++)
				printf("%s ", p->infp->e_member_name);
			printf("]");
d120 1
a120 1
		for (n = i = 0; i < p->infp->un.s.num_mem; i++)
d122 2
a123 2
				printf("%s%s", n++ ? "," : "",
						p->infp->s_member_name);
d125 4
a128 4
			printf("  { ");
			for (i = 0; i < p->infp->un.s.num_mem; i++)
				printf("%s ", p->infp->s_member_name);
			printf("}");
d133 1
a133 1
			printf("%d", m->un.value.level[0]);
d135 1
a135 1
			printf("%d,%d", m->un.value.level[0],
d138 1
a138 1
			printf(" %s", p->infp->un.v.units.name);
d145 2
a146 2
void
adjlevel(char **p, u_char *olevel, int more)
d148 3
a150 30
	char *ep, *cp = *p;
	long inc;
	u_char level;

	if (*cp != '+' && *cp != '-')
		*olevel = 0;		/* absolute setting */

	errno = 0;
	inc = strtol(cp, &ep, 10);
	if (*cp == '\0' || (*ep != '\0' && *ep != ',') ||
	    (errno == ERANGE && (inc == LONG_MAX || inc == LONG_MIN)))
		errx(1, "Bad number %s", cp);
	if (*ep == ',' && !more)
		errx(1, "Too many values");
	*p = ep;

	if (inc < AUDIO_MIN_GAIN - *olevel)
		level = AUDIO_MIN_GAIN;
	else if (inc > AUDIO_MAX_GAIN - *olevel)
		level = AUDIO_MAX_GAIN;
	else
		level = *olevel + inc;
	*olevel = level;
}

void
rdfield(int fd, struct field *p, char *q, int quiet)
{
	mixer_ctrl_t *m, oldval;
	int i, mask;
a152 1
	oldval = *p->valp;
d154 1
a154 2

	switch (m->type) {
d156 2
a157 2
		for (i = 0; i < p->infp->un.e.num_mem; i++)
			if (strcmp(p->infp->e_member_name, q) == 0)
d166 2
a167 2
		for (; q && *q; q = s) {
			if ((s = strchr(q, ',')) != NULL)
d170 1
a170 1
				if (strcmp(p->infp->s_member_name, q) == 0)
d181 12
a192 1
			adjlevel(&q, &m->un.value.level[0], 0);
d194 34
a227 5
			adjlevel(&q, &m->un.value.level[0], 1);
			if (*q++ == ',')
				adjlevel(&q, &m->un.value.level[1], 0);
			else
				m->un.value.level[1] = m->un.value.level[0];
d233 2
a234 14

	if (ioctl(fd, AUDIO_MIXER_WRITE, p->valp) < 0) {
		warn("AUDIO_MIXER_WRITE");
	} else if (!quiet) {
		*p->valp = oldval;
		prfield(p, ": ", 0);
		if (ioctl(fd, AUDIO_MIXER_READ, p->valp) < 0) {
			warn("AUDIO_MIXER_READ");
		} else {
			printf(" -> ");
			prfield(p, NULL, 0);
			printf("\n");
		}
	}
d245 1
d283 1
a283 1
	for (ndev = 0; ; ndev++) {
d298 1
a298 1
	for (i = 0; i < ndev; i++) {
d300 1
a300 5
		if (ioctl(fd, AUDIO_MIXER_DEVINFO, &infos[i]) < 0) {
			ndev--;
			i--;
			continue;
		}
d303 2
a304 2
	for (i = 0; i < ndev; i++) {
		strlcpy(rfields[i].name, infos[i].label.name, FIELD_NAME_MAX);
d309 1
a309 1
	for (i = 0; i < ndev; i++) {
d322 1
a322 1
	for (j = i = 0; i < ndev; i++) {
d326 1
a326 1
			for (pos = infos[i].next; pos != AUDIO_MIXER_LAST;
d329 2
a330 2
				catstr(rfields[i].name, infos[pos].label.name,
				    fields[j].name);
d337 1
a337 1
	for (i = 0; i < j; i++) {
d340 2
a341 2
			catstr(infos[cls].label.name, fields[i].name,
			    fields[i].name);
d345 1
a345 1
		for (i = 0; fields[i].name[0] != '\0'; i++) {
d347 1
a347 1
			printf("\n");
d352 1
a352 1
		while (argc--) {
d355 21
a375 10
			ch = 0;
			if ((q = strchr(*argv, '=')) != NULL) {
				*q++ = '\0';
				ch = 1;
			}

			if ((p = findfield(*argv)) == NULL) {
				warnx("field %s does not exist", *argv);
			} else if (ch) {
				rdfield(fd, p, q, qflag);
d377 7
a383 2
				prfield(p, sep, vflag);
				printf("\n");
a384 2

			argv++;
d391 1
a391 1
__dead void
@

