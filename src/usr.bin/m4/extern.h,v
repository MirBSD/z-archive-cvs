head	1.4;
access;
symbols
	cvs-200911172100:1.1.1.6
	cvs-200908101645:1.1.1.5
	cvs-200810051545:1.1.1.5
	MIRBSD_10:1.1.1.4.0.2
	MIRBSD_10_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4
	MIRBSD_9_BASE:1.1.1.3
	MIRBSD_8:1.1.1.3.0.2
	MIRBSD_8_BASE:1.1.1.3
	cvs-200507211800:1.1.1.3
	cvs-200504170300:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.10.22.21.25.19;	author tg;	state Exp;
branches;
next	1.3;
commitid	100580BD95570B7AB60;

1.3
date	2009.11.17.20.58.28;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004B030E6331AD46CC;

1.2
date	2009.11.17.19.55.58;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	1004B02FFBC169D69B3;

1.1
date	2005.02.05.17.29.42;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.42;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.17.03.31.26;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.07.21.20.59.45;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	560042e0092f571e;

1.1.1.4
date	2006.09.20.19.06.52;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10045119150397FC669;

1.1.1.5
date	2008.10.05.15.56.00;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10048E8E3980BD9A84E;

1.1.1.6
date	2009.11.17.21.01.42;	author tg;	state Exp;
branches;
next	;
commitid	1004B030F47588DC904;


desc
@@


1.4
log
@make __CRAZY=Yes ready
@
text
@/*	$OpenBSD: extern.h,v 1.49 2009/10/14 17:19:47 sthen Exp $	*/
/*	$NetBSD: extern.h,v 1.3 1996/01/13 23:25:24 pk Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ozan Yigit at York University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)extern.h	8.1 (Berkeley) 6/6/93
 */

/* eval.c */
extern void	eval(const char *[], int, int, int);
extern void	dodefine(const char *, const char *);
extern unsigned long expansion_id;

/* expr.c */
extern int	expr(const char *);

/* gnum4.c */
extern void 	addtoincludepath(const char *);
extern struct input_file *fopen_trypath(struct input_file *, const char *);
extern void doindir(const char *[], int);
extern void dobuiltin(const char *[], int);
extern void dopatsubst(const char *[], int);
extern void doregexp(const char *[], int);

extern void doprintlineno(struct input_file *);
extern void doprintfilename(struct input_file *);

extern void doesyscmd(const char *);
extern void getdivfile(const char *);
extern void doformat(const char *[], int);
 

/* look.c */

#define FLAG_UNTRACED 0
#define FLAG_TRACED 1
#define FLAG_NO_TRACE 2

extern void	init_macros(void);
extern ndptr	lookup(const char *);
extern void mark_traced(const char *, int);
extern struct ohash macros;

extern struct macro_definition *lookup_macro_definition(const char *);
extern void 	macro_define(const char *, const char *);
extern void 	macro_pushdef(const char *, const char *);
extern void 	macro_popdef(const char *);
extern void 	macro_undefine(const char *);
extern void 	setup_builtin(const char *, unsigned int);
extern void 	macro_for_all(void (*)(const char *, struct macro_definition *));
#define macro_getdef(p) 	((p)->d)
#define macro_name(p)		((p)->name)
#define macro_builtin_type(p)	((p)->builtin_type)
#define is_traced(p) ((p)->trace_flags == FLAG_NO_TRACE ? (trace_flags & TRACE_ALL) : (p)->trace_flags)

extern ndptr macro_getbuiltin(const char *);

/* main.c */
extern void outputstr(const char *);
extern void do_emit_synchline(void);
#define emit_synchline() do { if (synch_lines) do_emit_synchline(); } while(0)

/* misc.c */
extern void	chrsave(int);
extern char 	*compute_prevep(void);
extern void	getdiv(int);
extern ptrdiff_t indx(const char *, const char *);
extern void 	initspaces(void);
extern void	killdiv(void);
extern void	onintr(int) __dead;
extern void	pbnum(int);
extern void	pbnumbase(int, int, int);
extern void	pbunsigned(unsigned long);
extern void	pbstr(const char *);
extern void	pushback(int);
extern void	*xalloc(size_t, const char *fmt, ...)
    __attribute__((__format__(__printf__, 2, 3)));
extern void	*xrealloc(void *, size_t, const char *fmt, ...)
    __attribute__((__format__(__printf__, 3, 4)));
extern char	*xstrdup(const char *);
extern void	usage(void) __dead;
extern void	resizedivs(int);
extern size_t	buffer_mark(void);
extern void	dump_buffer(FILE *, size_t);
extern void	__dead m4errx(int, const char *, ...)
    __attribute__((__format__(__printf__, 2, 3)));

extern int 	obtain_char(struct input_file *);
extern void	set_input(struct input_file *, FILE *, const char *);
extern void	release_input(struct input_file *);

/* speeded-up versions of chrsave/pushback */
#define PUSHBACK(c)				\
	do {					\
		if (bp >= endpbb)		\
			enlarge_bufspace();	\
		*bp++ = (c);			\
	} while(0)
	
#define CHRSAVE(c)				\
	do {					\
		if (ep >= endest)		\
			enlarge_strspace();	\
		*ep++ = (c);			\
	} while(0)

/* and corresponding exposure for local symbols */
extern void enlarge_bufspace(void);
extern void enlarge_strspace(void);
extern unsigned char *endpbb;
extern char *endest;

/* trace.c */
extern unsigned int trace_flags;
#define TRACE_ALL	512
extern void trace_file(const char *);
extern size_t trace(const char **, int, struct input_file *);
extern void finish_trace(size_t);
extern void set_trace_flags(const char *);
extern FILE *traceout;

extern ndptr hashtab[];		/* hash table for macros etc. */
extern stae *mstack;		/* stack of m4 machine */
extern char *sstack;		/* shadow stack, for string space extension */
extern FILE *active;		/* active output file pointer */
extern struct input_file infile[];/* input file stack (0=stdin) */
extern FILE **outfile;		/* diversion array(0=bitbucket) */
extern int maxout;		/* maximum number of diversions */
extern int fp; 			/* m4 call frame pointer */
extern int ilevel;		/* input file stack pointer */
extern int oindex;		/* diversion index. */
extern int sp;			/* current m4 stack pointer */
extern unsigned char *bp;	/* first available character */
extern unsigned char *buf;	/* push-back buffer */
extern unsigned char *bufbase;	/* buffer base for this ilevel */
extern unsigned char *bbase[];	/* buffer base per ilevel */
extern char ecommt[MAXCCHARS+1];/* end character for comment */
extern char *ep;		/* first free char in strspace */
extern char lquote[MAXCCHARS+1];/* left quote character (`) */
extern char **m4wraps;		/* m4wrap string default. */
extern int maxwraps;		/* size of m4wraps array */
extern int wrapindex;		/* current index in m4wraps */

extern char *null;		/* as it says.. just a null. */
extern char rquote[MAXCCHARS+1];/* right quote character (') */
extern char scommt[MAXCCHARS+1];/* start character for comment */
extern int  synch_lines;	/* line synchronisation directives */

extern int mimic_gnu;		/* behaves like gnu-m4 */
extern int prefix_builtins;	/* prefix builtin macros with m4_ */

@


1.3
log
@revert commitid 1004B02FFBC169D69B3 by bsiegert@@

this is not subversion; cvs has vendor branches, and we use them;
your commit incidentally switched the HEAD tag from 1.1 to 1.3,
meaning more work in the future for me when merging m4... thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.48 2008/08/21 20:59:14 espie Exp $	*/
d99 1
a99 1
extern void	onintr(int);
d105 4
a108 2
extern void	*xalloc(size_t, const char *fmt, ...);
extern void	*xrealloc(void *, size_t, const char *fmt, ...);
d110 1
a110 1
extern void	usage(void);
d114 2
a115 1
extern void	__dead m4errx(int, const char *, ...);
d179 1
@


1.2
log
@Pull in recent changes from OpenBSD, essentially the following:

Support the -P option from gnu m4, which prefixes builtins with the
string m4_.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.49 2009/10/14 17:19:47 sthen Exp $	*/
a175 1
extern int prefix_builtins;	/* prefix builtin macros with m4_ */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.39 2003/11/17 17:12:10 espie Exp $	*/
d58 2
d101 1
d104 1
a104 1
extern void	putback(int);
d112 1
d118 2
a119 2
/* speeded-up versions of chrsave/putback */
#define PUTBACK(c)				\
d136 1
a136 1
extern char *endpbb;
d143 1
a143 1
extern ssize_t trace(const char **, int, struct input_file *);
d159 4
a162 4
extern char *bp;		/* first available character */
extern char *buf;		/* push-back buffer */
extern char *bufbase;		/* buffer base for this ilevel */
extern char *bbase[];		/* buffer base per ilevel */
d166 4
a169 1
extern char *m4wraps;		/* m4wrap string default. */
d176 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@some more updates/fixes from obsd
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.40 2005/03/02 10:12:15 espie Exp $	*/
d162 1
a162 4
extern char **m4wraps;		/* m4wrap string default. */
extern int maxwraps;		/* size of m4wraps array */
extern int wrapindex;		/* current index in m4wraps */

@


1.1.1.3
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.41 2005/05/29 18:44:36 espie Exp $	*/
a57 1
extern void	getdivfile(const char *);
a98 1
extern void	pbnumbase(int, int, int);
@


1.1.1.4
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.45 2006/03/20 20:27:45 espie Exp $	*/
d58 1
a58 2
extern void getdivfile(const char *);
extern void doformat(const char *[], int);
d103 1
a103 1
extern void	pushback(int);
a110 1
extern void	m4errx(int, const char *, ...);
d116 2
a117 2
/* speeded-up versions of chrsave/pushback */
#define PUSHBACK(c)				\
d141 1
a141 1
extern size_t trace(const char **, int, struct input_file *);
@


1.1.1.5
log
@Import OpenBSD’s latest m4 changes, in which Marc Espie fixed autoconf-2.62
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.48 2008/08/21 20:59:14 espie Exp $	*/
d112 1
a112 1
extern void	__dead m4errx(int, const char *, ...);
d136 1
a136 1
extern unsigned char *endpbb;
d159 4
a162 4
extern unsigned char *bp;	/* first available character */
extern unsigned char *buf;	/* push-back buffer */
extern unsigned char *bufbase;	/* buffer base for this ilevel */
extern unsigned char *bbase[];	/* buffer base per ilevel */
@


1.1.1.6
log
@Import new m4(1) from OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.49 2009/10/14 17:19:47 sthen Exp $	*/
a175 1
extern int prefix_builtins;	/* prefix builtin macros with m4_ */
@


