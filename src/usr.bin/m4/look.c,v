head	1.4;
access;
symbols
	cvs-200911172100:1.1.1.4
	cvs-200908101645:1.1.1.3
	cvs-200810051545:1.1.1.2
	MIRBSD_10:1.1.1.2.0.2
	MIRBSD_10_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200504170300:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.10.22.21.25.19;	author tg;	state Exp;
branches;
next	1.3;
commitid	100580BD95570B7AB60;

1.3
date	2009.11.17.20.58.28;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004B030E6331AD46CC;

1.2
date	2009.11.17.19.55.58;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	1004B02FFBC169D69B3;

1.1
date	2005.02.05.17.29.42;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.42;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.09.20.19.06.52;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	10045119150397FC669;

1.1.1.3
date	2009.08.10.16.56.44;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	1004A80515B7479E593;

1.1.1.4
date	2009.11.17.21.01.42;	author tg;	state Exp;
branches;
next	;
commitid	1004B030F47588DC904;


desc
@@


1.4
log
@make __CRAZY=Yes ready
@
text
@/*	$OpenBSD: look.c,v 1.21 2009/10/14 17:23:17 sthen Exp $	*/

/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ozan Yigit at York University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * look.c
 * Facility: m4 macro processor
 * by: oz
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stddef.h>
#include <string.h>
#include <ohash.h>
#include "mdef.h"
#include "stdd.h"
#include "extern.h"

static void *hash_alloc(size_t, void *);
static void hash_free(void *, size_t, void *);
static void *element_alloc(size_t, void *);
static void setup_definition(struct macro_definition *, const char *, 
    const char *);

static struct ohash_info macro_info = {
	offsetof(struct ndblock, name),
	NULL, hash_alloc, hash_free, element_alloc };

struct ohash macros;

/* Support routines for hash tables.  */
void *
hash_alloc(size_t s, void *u __unused)
{
	void *storage = xalloc(s, "hash alloc");
	if (storage)
		memset(storage, 0, s);
	return storage;
}

void
hash_free(void *p, size_t s __unused, void *u __unused)
{
	free(p);
}

void *
element_alloc(size_t s, void *u __unused)
{
	return xalloc(s, "element alloc");
}

void
init_macros(void)
{
	ohash_init(&macros, 10, &macro_info);
}

/*
 * find name in the hash table
 */
ndptr 
lookup(const char *name)
{
	return ohash_find(&macros, ohash_qlookup(&macros, name));
}

struct macro_definition *
lookup_macro_definition(const char *name)
{
	ndptr p;

	p = ohash_find(&macros, ohash_qlookup(&macros, name));
	if (p)
		return p->d;
	else
		return NULL;
}

static void 
setup_definition(struct macro_definition *d, const char *defn, const char *name)
{
	ndptr p;

	if (strncmp(defn, BUILTIN_MARKER, sizeof(BUILTIN_MARKER)-1) == 0 &&
	    (p = macro_getbuiltin(defn+sizeof(BUILTIN_MARKER)-1)) != NULL) {
		d->type = macro_builtin_type(p);
		d->defn = xstrdup(defn+sizeof(BUILTIN_MARKER)-1);
	} else {
		if (!*defn)
			d->defn = null;
		else
			d->defn = xstrdup(defn);
		d->type = MACRTYPE;
	}
	if (STREQ(name, defn))
		d->type |= RECDEF;
}

static ndptr
create_entry(const char *name)
{
	const char *end = NULL;
	unsigned int i;
	ndptr n;

	i = ohash_qlookupi(&macros, name, &end);
	n = ohash_find(&macros, i);
	if (n == NULL) {
		n = ohash_create_entry(&macro_info, name, &end);
		ohash_insert(&macros, i, n);
		n->trace_flags = FLAG_NO_TRACE;
		n->builtin_type = MACRTYPE;
		n->d = NULL;
	}
	return n;
}

void
macro_define(const char *name, const char *defn)
{
	ndptr n = create_entry(name);
	if (n->d != NULL) {
		if (n->d->defn != null)
			free(n->d->defn);
	} else {
		n->d = xalloc(sizeof(struct macro_definition), NULL);
		n->d->next = NULL;
	}
	setup_definition(n->d, defn, name);
}

void
macro_pushdef(const char *name, const char *defn)
{
	ndptr n;
	struct macro_definition *d;
	
	n = create_entry(name);
	d = xalloc(sizeof(struct macro_definition), NULL);
	d->next = n->d;
	n->d = d;
	setup_definition(n->d, defn, name);
}

void
macro_undefine(const char *name)
{
	ndptr n = lookup(name);
	if (n != NULL) {
		struct macro_definition *r, *r2;

		for (r = n->d; r != NULL; r = r2) {
			r2 = r->next;
			if (r->defn != null)
				free(r->defn);
			free(r);
		}
		n->d = NULL;
	}
}

void
macro_popdef(const char *name)
{
	ndptr n = lookup(name);

	if (n != NULL) {
		struct macro_definition *r = n->d;
		if (r != NULL) {
			n->d = r->next;
			if (r->defn != null)
				free(r->defn);
			free(r);
		}
	}
}

void
macro_for_all(void (*f)(const char *, struct macro_definition *))
{
	ndptr n;
	unsigned int i;

	for (n = ohash_first(&macros, &i); n != NULL; 
	    n = ohash_next(&macros, &i))
		if (n->d != NULL)
			f(n->name, n->d);
}

void 
setup_builtin(const char *name, unsigned int type)
{
	ndptr n;
	char *name2;

	if (prefix_builtins) {
		name2 = xalloc(strlen(name)+3+1, NULL);
		memcpy(name2, "m4_", 3);
		memcpy(name2 + 3, name, strlen(name)+1);
	} else
		name2 = xstrdup(name);

	n = create_entry(name2);
	n->builtin_type = type;
	n->d = xalloc(sizeof(struct macro_definition), NULL);
	n->d->defn = name2;
	n->d->type = type;
	n->d->next = NULL;
}

void
mark_traced(const char *name, int on)
{
	ndptr p;
	unsigned int i;

	if (name == NULL) {
		if (on)
			trace_flags |= TRACE_ALL;
		else
			trace_flags &= ~TRACE_ALL;
		for (p = ohash_first(&macros, &i); p != NULL; 
		    p = ohash_next(&macros, &i))
		    	p->trace_flags = FLAG_NO_TRACE;
	} else {
		p = create_entry(name);
		p->trace_flags = on;
	}
}

ndptr 
macro_getbuiltin(const char *name)
{
	ndptr p;

	p = lookup(name);
	if (p == NULL || p->builtin_type == MACRTYPE)
		return NULL;
	else
		return p;
}

@


1.3
log
@revert commitid 1004B02FFBC169D69B3 by bsiegert@@

this is not subversion; cvs has vendor branches, and we use them;
your commit incidentally switched the HEAD tag from 1.1 to 1.3,
meaning more work in the future for me when merging m4... thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.19 2009/06/26 22:03:17 guenther Exp $	*/
d65 1
a65 3
hash_alloc(s, u)
	size_t s;
	void *u 	UNUSED;
d74 1
a74 4
hash_free(p, s, u)
	void *p;
	size_t s	UNUSED;
	void *u 	UNUSED;
d80 1
a80 3
element_alloc(s, u)
	size_t s;
	void *u 	UNUSED;
d86 1
a86 1
init_macros()
d227 1
d229 8
a236 1
	n = create_entry(name);
d239 1
a239 1
	n->d->defn = xstrdup(name);
@


1.2
log
@Pull in recent changes from OpenBSD, essentially the following:

Support the -P option from gnu m4, which prefixes builtins with the
string m4_.
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.21 2009/10/14 17:23:17 sthen Exp $	*/
a233 1
	char *name2;
d235 1
a235 8
	if (prefix_builtins) {
		name2 = xalloc(strlen(name)+3+1, NULL);
		memcpy(name2, "m4_", 3);
		memcpy(name2 + 3, name, strlen(name)+1);
	} else
		name2 = xstrdup(name);

	n = create_entry(name2);
d238 1
a238 1
	n->d->defn = name2;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.16 2003/11/17 17:12:10 espie Exp $	*/
a34 4
#ifndef lint
static char sccsid[] = "@@(#)look.c	8.1 (Berkeley) 6/6/93";
#endif /* not lint */

a40 1
#include <sys/types.h>
d43 1
d226 2
a227 1
		f(n->name, n->d);
d234 8
d243 1
a243 1
	n = create_entry(name);
d246 1
a246 1
	n->d->defn = xstrdup(name);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.18 2006/01/20 23:10:19 espie Exp $	*/
d35 4
d45 1
a47 1
#include <stdint.h>
@


1.1.1.3
log
@... and the newer m4 fixing a SIGSEGV
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.19 2009/06/26 22:03:17 guenther Exp $	*/
d226 1
a226 2
		if (n->d != NULL)
			f(n->name, n->d);
@


1.1.1.4
log
@Import new m4(1) from OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.21 2009/10/14 17:23:17 sthen Exp $	*/
a233 1
	char *name2;
d235 1
a235 8
	if (prefix_builtins) {
		name2 = xalloc(strlen(name)+3+1, NULL);
		memcpy(name2, "m4_", 3);
		memcpy(name2 + 3, name, strlen(name)+1);
	} else
		name2 = xstrdup(name);

	n = create_entry(name2);
d238 1
a238 1
	n->d->defn = name2;
@


