head	1.5;
access;
symbols
	MIRBSD_10:1.5.0.4
	MIRBSD_10_BASE:1.5
	cvs-200706211400:1.1.1.1
	MIRBSD_9_BASE:1.5
	MIRBSD_8:1.5.0.2
	MIRBSD_8_BASE:1.5
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2005.11.24.13.20.32;	author tg;	state Exp;
branches;
next	1.4;
commitid	11f34385be32929b;

1.4
date	2005.11.24.12.37.43;	author tg;	state Exp;
branches;
next	1.3;
commitid	2fda4385b415ddd6;

1.3
date	2005.07.07.13.39.52;	author tg;	state Exp;
branches;
next	1.2;
commitid	331742cd306446f9;

1.2
date	2005.02.23.20.36.53;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.29.42;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.42;	author tg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@make __CRAZY clean
@
text
@/**	$MirOS: src/usr.bin/make/cmd_exec.c,v 1.4 2005/11/24 12:37:43 tg Exp $ */
/*	$OpenBSD: cmd_exec.c,v 1.5 2004/04/07 13:11:35 espie Exp $ */

/*
 * Copyright (c) 2001 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>
#include <stdio.h>
#include <unistd.h>
#include "config.h"
#include "defines.h"
#include "cmd_exec.h"
#include "buf.h"
#include "memory.h"
#include "pathnames.h"

__RCSID("$MirOS: src/usr.bin/make/cmd_exec.c,v 1.4 2005/11/24 12:37:43 tg Exp $");

char *
Cmd_Exec(const char *cmd, const char **err)
{
    char	*args[4];	/* Args for invoking the shell */
    int 	fds[2]; 	/* Pipe streams */
    pid_t 	cpid;		/* Child PID */
    pid_t 	pid;		/* PID from wait() */
    char	*result;	/* Result */
    int 	status; 	/* Command exit status */
    BUFFER	buf;		/* Buffer to store the result. */
    char	*cp;		/* Pointer into result. */
    ssize_t	cc;		/* Characters read from pipe. */
    size_t	length;		/* Total length of result. */


    *err = NULL;

    /* Set up arguments for the shell. */
    args[0] = (char *)"mksh";
    args[1] = (char *)"-c";
    args[2] = (char *)cmd;
    args[3] = NULL;

    /* Open a pipe for retrieving shell's output. */
    if (pipe(fds) == -1) {
	*err = "Couldn't create pipe for \"%s\"";
	goto bad;
    }

    /* Fork */
    switch (cpid = fork()) {
    case 0:
	/* Close input side of pipe */
	(void)close(fds[0]);

	/* Duplicate the output stream to the shell's output, then
	 * shut the extra thing down. Note we don't fetch the error
	 * stream: user can use redirection to grab it as this goes
	 * through /bin/mksh.
	 */
	if (fds[1] != 1) {
	    (void)dup2(fds[1], 1);
	    (void)close(fds[1]);
	}

	(void)execv(_PATH_MIRBSDKSH, args);
	_exit(1);
	/*NOTREACHED*/

    case -1:
	*err = "Couldn't exec \"%s\"";
	goto bad;

    default:
	/* No need for the writing half. */
	(void)close(fds[1]);

	Buf_Init(&buf, MAKE_BSIZE);

	do {
	    char   grab[BUFSIZ];

	    cc = read(fds[0], grab, sizeof(grab));
	    if (cc > 0)
		Buf_AddChars(&buf, cc, grab);
	}
	while (cc > 0 || (cc == -1 && errno == EINTR));

	/* Close the input side of the pipe.  */
	(void)close(fds[0]);

	/* Wait for the child to exit.  */
	while ((pid = wait(&status)) != cpid && pid >= 0)
	    continue;

	if (cc == -1)
	    *err = "Couldn't read shell's output for \"%s\"";

	if (status)
	    *err = "\"%s\" returned non-zero status";

	length = Buf_Size(&buf);
	result = Buf_Retrieve(&buf);

	/* The result is null terminated, Convert newlines to spaces. */
	cp = result + length - 1;

	if (cp >= result && *cp == '\n')
	    /* A final newline is just stripped.  */
	    *cp-- = '\0';

	while (cp >= result) {
	    if (*cp == '\n')
		*cp = ' ';
	    cp--;
	}
	break;
    }
    return result;
bad:
    return estrdup("");
}
@


1.4
log
@* make it easier for later makes to build it portably
* start __CRAZY cleanup, but with -Wno-cast-qual (and checking)
@
text
@d1 1
a1 2
/**	$MirOS: src/usr.bin/make/cmd_exec.c,v 1.3 2005/07/07 13:39:52 tg Exp $ */
/*	$OpenPackages$ */
d3 1
d41 1
a41 1
__RCSID("$MirOS: src/usr.bin/make/cmd_exec.c,v 1.3 2005/07/07 13:39:52 tg Exp $");
@


1.3
log
@/bin/sh and /bin/ksh -> /bin/mksh

This should cover most uses.
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.bin/make/cmd_exec.c,v 1.2 2005/02/23 20:36:53 tg Exp $ */
d41 1
a41 1
__RCSID("$MirOS: src/usr.bin/make/cmd_exec.c,v 1.2 2005/02/23 20:36:53 tg Exp $");
d44 1
a44 1
Cmd_Exec(const char *cmd, char **err)
d61 2
a62 2
    args[0] = "mksh";
    args[1] = "-c";
@


1.2
log
@* merge make from ncvs 1
* reduce diff in the amount of whitespace to facilitate
  easier future merges of OpenBSD, in the hope they'll
  ever fix that in their CVS *sigh*
* sane MACHINE{,_ARCH,_OS} handling
@
text
@d1 1
a1 1
/**	$MirOS$ */
d41 1
a41 1
__RCSID("$MirOS$");
d61 1
a61 1
    args[0] = "ksh";
d81 1
a81 1
	 * through /bin/ksh.
@


1.1
log
@Initial revision
@
text
@d1 1
d41 2
d61 1
a61 1
    args[0] = "sh";
d81 1
a81 1
	 * through /bin/sh.
d88 1
a88 1
	(void)execv(_PATH_BSHELL, args);
a144 1

@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
