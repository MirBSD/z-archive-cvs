head	1.4;
access;
symbols
	MIRBSD_10:1.3.0.4
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2009.05.20.10.22.38;	author tg;	state dead;
branches;
next	1.3;
commitid	1004A13D9DF49EA4B4F;

1.3
date	2005.11.24.13.51.53;	author tg;	state Exp;
branches;
next	1.2;
commitid	2d6a4385c58c23e7;

1.2
date	2005.11.24.13.50.40;	author tg;	state Exp;
branches;
next	1.1;
commitid	50ae4385c53f7e28;

1.1
date	2005.11.24.13.26.56;	author tg;	state Exp;
branches;
next	;
commitid	2a364385bfb152d3;


desc
@@


1.4
log
@use only one implementation of fgetln(3), which expands into an
object file exporting nothing unless (glibc) needed
@
text
@/* $MirOS: src/usr.bin/make/fgetln.c,v 1.3 2005/11/24 13:51:53 tg Exp $ */

/*-
 * Copyright (c) 2005 Thorsten Glaser.
 * Copyright (c) 2001 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	notice, this list of conditions and the following disclaimer in the
 *	documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef IN_MIRMAKE
#include "defines.h"
#endif

__RCSID("$MirOS: src/usr.bin/make/fgetln.c,v 1.3 2005/11/24 13:51:53 tg Exp $");

char *fgetln(FILE *, size_t *);

char *
fgetln(FILE *stream, size_t *len)
{
	static char *buffer = NULL;
	static size_t buflen = 0;

	if (buflen == 0) {
		buflen = 512;
		if ((buffer = malloc(buflen+1)) == NULL)
			goto enomem;
	}
	if (fgets(buffer, buflen+1, stream) == NULL)
		return (NULL);
	*len = strlen(buffer);
	while (*len == buflen && buffer[*len-1] != '\n') {
		if ((buffer = realloc(buffer, 2*buflen + 1)) == NULL)
			goto enomem;
		if (fgets(buffer + buflen, buflen + 1, stream) == NULL)
			return (NULL);
		*len += strlen(buffer + buflen);
		buflen *= 2;
	}
	return (buffer);

enomem:
	fputs("fatal: out of memory\n", stderr);
	exit(2);
}
@


1.3
log
@but include defines.h
@
text
@d1 1
a1 1
/* $MirOS: src/usr.bin/make/fgetln.c,v 1.2 2005/11/24 13:50:40 tg Exp $ */
d38 1
a38 1
__RCSID("$MirOS: src/usr.bin/make/fgetln.c,v 1.2 2005/11/24 13:50:40 tg Exp $");
@


1.2
log
@rewrite to make independent on make features
@
text
@d1 1
a1 1
/* $MirOS: src/usr.bin/make/fgetln.c,v 1.1 2005/11/24 13:26:56 tg Exp $ */
d34 5
a38 1
__RCSID("$MirOS: src/usr.bin/make/fgetln.c,v 1.1 2005/11/24 13:26:56 tg Exp $");
@


1.1
log
@make fgetln into a file of its own
@
text
@d1 1
a1 1
/* $MirOS$ */
d3 2
a4 1
/*
d11 1
a11 1
 *    notice, this list of conditions and the following disclaimer.
d13 2
a14 2
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
d31 1
a32 3
#include "config.h"
#include "defines.h"
#include "memory.h"
d34 1
a34 1
__RCSID("$MirOS$");
d41 2
a42 2
    static char *buffer = NULL;
    static size_t buflen = 0;
d44 21
a64 15
    if (buflen == 0) {
	buflen = 512;
	buffer = emalloc(buflen+1);
    }
    if (fgets(buffer, buflen+1, stream) == NULL)
	return NULL;
    *len = strlen(buffer);
    while (*len == buflen && buffer[*len-1] != '\n') {
	buffer = erealloc(buffer, 2*buflen + 1);
	if (fgets(buffer + buflen, buflen + 1, stream) == NULL)
	    return NULL;
	*len += strlen(buffer + buflen);
	buflen *= 2;
    }
    return buffer;
@

