head	1.5;
access;
symbols
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.01.02.21.33.21;	author tg;	state Exp;
branches;
next	1.4;
commitid	10056884200442406AA;

1.4
date	2009.05.31.15.28.18;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004A22A22A706BAC38;

1.3
date	2009.05.31.15.27.49;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004A22A20610CF9F97;

1.2
date	2007.07.05.23.09.45;	author tg;	state Exp;
branches;
next	1.1;
commitid	100468D7A224CDB6D5A;

1.1
date	2005.02.05.17.30.15;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.30.15;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.21.01.22;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.5
log
@remove #ifndef __MirBSD__ before setlocale(); related changes
@
text
@/*	$OpenBSD: wc.c,v 1.10 2005/04/11 07:04:47 deraadt Exp $	*/

/*
 * Copyright (c) 1980, 1987, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/cdefs.h>
__COPYRIGHT("@@(#) Copyright (c) 1980, 1987, 1991, 1993\n\
	The Regents of the University of California.  All rights reserved.\n");
__SCCSID("@@(#)wc.c	8.2 (Berkeley) 5/2/95");
__RCSID("$MirOS: src/usr.bin/wc/wc.c,v 1.4 2009/05/31 15:28:18 tg Exp $");

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <ctype.h>
#include <err.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/file.h>
#include <unistd.h>

int64_t	tlinect, twordct, tcharct;
int	doline, doword, dochar;
int 	rval;
extern char *__progname;

void	print_counts(int64_t, int64_t, int64_t, const char *);
void	cnt(char *);

int
main(int argc, char *argv[])
{
	int ch;

	setlocale(LC_ALL, "");

	while ((ch = getopt(argc, argv, "lwcm")) != -1)
		switch((char)ch) {
		case 'l':
			doline = 1;
			break;
		case 'w':
			doword = 1;
			break;
		case 'c':
		case 'm':
			dochar = 1;
			break;
		case '?':
		default:
			(void)fprintf(stderr,
			    "usage: %s [-c | -m] [-lw] [file ...]\n",
			    __progname);
			exit(1);
		}
	argv += optind;
	argc -= optind;

	/*
	 * wc is unusual in that its flags are on by default, so,
	 * if you don't get any arguments, you have to turn them
	 * all on.
	 */
	if (!doline && !doword && !dochar)
		doline = doword = dochar = 1;

	if (!*argv) {
		cnt((char *)NULL);
	} else {
		int dototal = (argc > 1);

		do {
			cnt(*argv);
		} while(*++argv);

		if (dototal)
			print_counts(tlinect, twordct, tcharct, "total");
	}

	exit(rval);
}

void
cnt(char *file)
{
	u_char *C;
	short gotsp;
	int len;
	int64_t linect, wordct, charct;
	struct stat sbuf;
	int fd;
	u_char buf[MAXBSIZE];

	linect = wordct = charct = 0;
	if (file) {
		if ((fd = open(file, O_RDONLY, 0)) < 0) {
			warn("%s", file);
			rval = 1;
			return;
		}
	} else  {
		fd = STDIN_FILENO;
	}

	if (!doword) {
		/*
		 * Line counting is split out because it's a lot
		 * faster to get lines than to get words, since
		 * the word count requires some logic.
		 */
		if (doline) {
			while ((len = read(fd, buf, MAXBSIZE)) > 0) {
				charct += len;
				for (C = buf; len--; ++C)
					if (*C == '\n')
						++linect;
			}
			if (len == -1) {
				warn("%s", file);
				rval = 1;
			}
		}
		/*
		 * If all we need is the number of characters and
		 * it's a directory or a regular or linked file, just
		 * stat the puppy.  We avoid testing for it not being
		 * a special device in case someone adds a new type
		 * of inode.
		 */
		else if (dochar) {
			mode_t ifmt;

			if (fstat(fd, &sbuf)) {
				warn("%s", file);
				rval = 1;
			} else {
				ifmt = sbuf.st_mode & S_IFMT;
				if (ifmt == S_IFREG || ifmt == S_IFLNK
				    || ifmt == S_IFDIR) {
					charct = sbuf.st_size;
				} else {
					while ((len = read(fd, buf, MAXBSIZE)) > 0)
						charct += len;
					if (len == -1) {
						warn("%s", file);
						rval = 1;
					}
				}
			}
		}
	} else {
		/* Do it the hard way... */
		gotsp = 1;
		while ((len = read(fd, buf, MAXBSIZE)) > 0) {
			/*
			 * This loses in the presence of multi-byte characters.
			 * To do it right would require a function to return a
			 * character while knowing how many bytes it consumed.
			 */
			charct += len;
			for (C = buf; len--; ++C) {
				if (isspace (*C)) {
					gotsp = 1;
					if (*C == '\n')
						++linect;
				} else {
					/*
					 * This line implements the POSIX
					 * spec, i.e. a word is a "maximal
					 * string of characters delimited by
					 * whitespace."  Notice nothing was
					 * said about a character being
					 * printing or non-printing.
					 */
					if (gotsp) {
						gotsp = 0;
						++wordct;
					}
				}
			}
		}
		if (len == -1) {
			warn("%s", file);
			rval = 1;
		}
	}

	print_counts(linect, wordct, charct, file);

	/*
	 * Don't bother checking doline, doword, or dochar -- speeds
	 * up the common case
	 */
	tlinect += linect;
	twordct += wordct;
	tcharct += charct;

	if (close(fd) != 0) {
		warn("%s", file);
		rval = 1;
	}
}

void
print_counts(int64_t lines, int64_t words, int64_t chars, const char *name)
{

	if (doline)
		(void)printf(" %7lld", (long long)lines);
	if (doword)
		(void)printf(" %7lld", (long long)words);
	if (dochar)
		(void)printf(" %7lld", (long long)chars);

	if (name)
		printf(" %s\n", name);
	else
		printf("\n");
}
@


1.4
log
@const
@
text
@d36 1
a36 1
__RCSID("$MirOS: src/usr.bin/wc/wc.c,v 1.3 2009/05/31 15:27:49 tg Exp $");
a61 1
#ifndef __MirBSD__
a62 1
#endif
@


1.3
log
@add fix from TNF:

   Revision  [258]1.19 / ([259]download) - [260]annotate - [261][select for diffs], Fri Mar 5 22:31:06 1999
   UTC (10 years, 2 months ago) by mycroft
   Branch: [262]MAIN
   Changes since 1.18: +8 -6 lines
   Diff to previous [263]1.18 ([264]colored)
Don't print a trailing space when counting from stdin.
@
text
@d36 1
a36 1
__RCSID("$MirOS: src/usr.bin/wc/wc.c,v 1.2 2007/07/05 23:09:45 tg Exp $");
d54 1
a54 1
void	print_counts(int64_t, int64_t, int64_t, char *);
d234 1
a234 1
print_counts(int64_t lines, int64_t words, int64_t chars, char *name)
@


1.2
log
@• #ifdef __MirBSD__
  do not use setlocale() and nl_langinfo(), hardcode it
  #endif
• rcs ids

should greatly reduce space usage of ramdisc
@
text
@d36 1
a36 1
__RCSID("$MirOS$");
d217 1
a217 1
	print_counts(linect, wordct, charct, file ? file : "");
d244 4
a247 1
	(void)printf(" %s\n", name);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: wc.c,v 1.9 2003/06/03 02:56:22 millert Exp $	*/
d32 5
a36 13
#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1980, 1987, 1991, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)wc.c	8.2 (Berkeley) 5/2/95";
#else
static char rcsid[] = "$OpenBSD: wc.c,v 1.9 2003/06/03 02:56:22 millert Exp $";
#endif
#endif /* not lint */
d62 1
d64 1
d106 1
a106 1
			print_counts(tlinect, twordct, tcharct, "total"); 
d133 1
a133 1
	
d221 1
a221 1
         * up the common case
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: wc.c,v 1.10 2005/04/11 07:04:47 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: wc.c,v 1.10 2005/04/11 07:04:47 deraadt Exp $";
d112 1
a112 1
			print_counts(tlinect, twordct, tcharct, "total");
d139 1
a139 1

d227 1
a227 1
	 * up the common case
@

