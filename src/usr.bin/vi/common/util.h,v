head	1.1;
branch	1.1.1;
access;
symbols
	cvs-201012271745:1.1.1.2
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200504291700:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.02.05.17.30.09;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.30.09;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.12.27.17.52.24;	author tg;	state Exp;
branches;
next	;
commitid	1004D18D2680A7ACEE9;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: util.h,v 1.2 2001/01/29 01:58:32 niklas Exp $	*/

/*-
 * Copyright (c) 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 *
 *	@@(#)util.h	10.5 (Berkeley) 3/16/96
 */

/* Macros to init/set/clear/test flags. */
#define	FL_INIT(l, f)	(l) = (f)		/* Specific flags location. */
#define	FL_SET(l, f)	((l) |= (f))
#define	FL_CLR(l, f)	((l) &= ~(f))
#define	FL_ISSET(l, f)	((l) & (f))

#define	LF_INIT(f)	FL_INIT(flags, f)	/* Local variable flags. */
#define	LF_SET(f)	FL_SET(flags, f)
#define	LF_CLR(f)	FL_CLR(flags, f)
#define	LF_ISSET(f)	FL_ISSET(flags, f)

#define	F_INIT(p, f)	FL_INIT((p)->flags, f)	/* Structure element flags. */
#define	F_SET(p, f)	FL_SET((p)->flags, f)
#define	F_CLR(p, f)	FL_CLR((p)->flags, f)
#define	F_ISSET(p, f)	FL_ISSET((p)->flags, f)

/* Offset to next column of stop size, e.g. tab offsets. */
#define	COL_OFF(c, stop)	((stop) - ((c) % (stop)))

/* Busy message types. */
typedef enum { B_NONE, B_OFF, B_READ, B_RECOVER, B_SEARCH, B_WRITE } bmsg_t;

/*
 * Number handling defines and protoypes.
 *
 * NNFITS:	test for addition of two negative numbers under a limit
 * NPFITS:	test for addition of two positive numbers under a limit
 * NADD_SLONG:	test for addition of two signed longs
 * NADD_USLONG:	test for addition of two unsigned longs
 */
enum nresult { NUM_ERR, NUM_OK, NUM_OVER, NUM_UNDER };
#define	NNFITS(min, cur, add)						\
	(((long)(min)) - (cur) <= (add))
#define	NPFITS(max, cur, add)						\
	(((unsigned long)(max)) - (cur) >= (add))
#define	NADD_SLONG(sp, v1, v2)						\
	((v1) < 0 ?							\
	    ((v2) < 0 &&						\
	    NNFITS(LONG_MIN, (v1), (v2))) ? NUM_UNDER : NUM_OK :	\
	 (v1) > 0 ?							\
	    (v2) > 0 &&							\
	    NPFITS(LONG_MAX, (v1), (v2)) ? NUM_OK : NUM_OVER :		\
	 NUM_OK)
#define	NADD_USLONG(sp, v1, v2)						\
	(NPFITS(ULONG_MAX, (v1), (v2)) ? NUM_OK : NUM_OVER)
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@newer nvi from Ogre, to fix benzâ€™ segfaults
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.4 2006/01/08 21:10:04 miod Exp $	*/
d20 9
a28 9
#define	LF_INIT(f)	FL_INIT(flags, (f))	/* Local variable flags. */
#define	LF_SET(f)	FL_SET(flags, (f))
#define	LF_CLR(f)	FL_CLR(flags, (f))
#define	LF_ISSET(f)	FL_ISSET(flags, (f))

#define	F_INIT(p, f)	FL_INIT((p)->flags, (f))	/* Structure element flags. */
#define	F_SET(p, f)	FL_SET((p)->flags, (f))
#define	F_CLR(p, f)	FL_CLR((p)->flags, (f))
#define	F_ISSET(p, f)	FL_ISSET((p)->flags, (f))
d49 1
a49 1
#define	NADD_SLONG(v1, v2)						\
d57 2
@

