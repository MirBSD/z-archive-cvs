head	1.4;
access;
symbols
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200507211800:1.1.1.2
	cvs-200504291700:1.1.1.2
	cvs-200504170300:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2017.03.12.02.58.22;	author tg;	state Exp;
branches;
next	1.3;
commitid	10058C4B95E351C0B77;

1.3
date	2013.08.06.16.59.33;	author tg;	state Exp;
branches;
next	1.2;
commitid	10052012B7C5B925F4D;

1.2
date	2007.03.22.03.56.49;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004601FE79777C91E6;

1.1
date	2005.02.05.17.29.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.34;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.17.03.31.27;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@add -z (NUL as line separator) option, for git-find
@
text
@/*	$OpenBSD: file.c,v 1.7 2005/02/07 08:47:18 otto Exp $	*/

/*-
 * Copyright (c) 1999 James Howard and Dag-Erling Co√Ødan Sm√∏rgrav
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <zlib.h>

#include "grep.h"

__RCSID("$MirOS: src/usr.bin/grep/file.c,v 1.3 2013/08/06 16:59:33 tg Exp $");

static char	 fname[MAXPATHLEN];
static char	*lnbuf;
static size_t	 lnbuflen;

#define FILE_STDIO	0
#define FILE_MMAP	1
#define FILE_GZIP	2

struct file {
	int	 type;
	int	 noseek;
	FILE	*f;
	mmf_t	*mmf;
	gzFile	 gzf;
};

#ifndef NOZ
static char *
gzfgetln(gzFile f, size_t *len)
{
	size_t		n;
	int		c;

	for (n = 0; ; ++n) {
		c = gzgetc(f);
		if (c == -1) {
			const char *gzerrstr;
			int gzerr;

			if (gzeof(f))
				break;

			gzerrstr = gzerror(f, &gzerr);
			if (gzerr == Z_ERRNO)
				err(2, "%s", fname);
			else
				errx(2, "%s: %s", fname, gzerrstr);
		}
		if (n >= lnbuflen) {
			lnbuflen *= 2;
			lnbuf = grep_realloc(lnbuf, ++lnbuflen);
		}
		if (c == linesep)
			break;
		lnbuf[n] = c;
	}

	if (gzeof(f) && n == 0)
		return NULL;
	*len = n;
	return lnbuf;
}
#endif

file_t *
grep_fdopen(int fd, const char *mode)
{
	file_t *f;

	if (fd == STDIN_FILENO)
		snprintf(fname, sizeof fname, "(standard input)");
	else
		snprintf(fname, sizeof fname, "(fd %d)", fd);

	f = grep_malloc(sizeof *f);

#ifndef NOZ
	if (Zflag) {
		f->type = FILE_GZIP;
		f->noseek = lseek(fd, 0L, SEEK_SET) == -1;
		if ((f->gzf = gzdopen(fd, mode)) != NULL)
			return f;
	} else
#endif
	{
		f->type = FILE_STDIO;
		f->noseek = isatty(fd);
		if ((f->f = fdopen(fd, mode)) != NULL)
			return f;
	}

	free(f);
	return NULL;
}

file_t *
grep_open(const char *path, const char *mode)
{
	file_t *f;

	snprintf(fname, sizeof fname, "%s", path);

	f = grep_malloc(sizeof *f);
	f->noseek = 0;

#ifndef NOZ
	if (Zflag) {
		f->type = FILE_GZIP;
		if ((f->gzf = gzopen(fname, mode)) != NULL)
			return f;
	} else
#endif
	{
		/* try mmap first; if it fails, try stdio */
		if ((f->mmf = mmopen(fname, mode)) != NULL) {
			f->type = FILE_MMAP;
			return f;
		}
		f->type = FILE_STDIO;
		if ((f->f = fopen(path, mode)) != NULL)
			return f;
	}

	free(f);
	return NULL;
}

int
grep_bin_file(file_t *f)
{
	if (f->noseek)
		return 0;

	switch (f->type) {
	case FILE_STDIO:
		return bin_file(f->f);
	case FILE_MMAP:
		return mmbin_file(f->mmf);
#ifndef NOZ
	case FILE_GZIP:
		return gzbin_file(f->gzf);
#endif
	default:
		/* can't happen */
		errx(2, "invalid file type");
	}
}

long
grep_tell(file_t *f)
{
	switch (f->type) {
	case FILE_STDIO:
		return ftell(f->f);
	case FILE_MMAP:
		return mmtell(f->mmf);
#ifndef NOZ
	case FILE_GZIP:
		return gztell(f->gzf);
#endif
	default:
		/* can't happen */
		errx(2, "invalid file type");
	}
}

char *
grep_fgetln(file_t *f, size_t *l)
{
	switch (f->type) {
	case FILE_STDIO:
		return fgetln(f->f, l);
	case FILE_MMAP:
		return mmfgetln(f->mmf, l);
#ifndef NOZ
	case FILE_GZIP:
		return gzfgetln(f->gzf, l);
#endif
	default:
		/* can't happen */
		errx(2, "invalid file type");
	}
}

void
grep_close(file_t *f)
{
	switch (f->type) {
	case FILE_STDIO:
		fclose(f->f);
		break;
	case FILE_MMAP:
		mmclose(f->mmf);
		break;
#ifndef NOZ
	case FILE_GZIP:
		gzclose(f->gzf);
		break;
#endif
	default:
		/* can't happen */
		errx(2, "invalid file type");
	}
}
@


1.3
log
@fallout from the upgrade, plus general __CRAZY=Yes cleanup
@
text
@d38 1
a38 1
__RCSID("$MirOS$");
d82 1
a82 1
		if (c == '\n')
@


1.2
log
@‚Ä¢ some __CRAZY=Yes cleanup (diff/diffreg.c and grep/util.c not yet)
‚Ä¢ use isbinry(3) so that -a won't be needed any more, from the men-
  tioned discussion with Han Boetes
‚Ä¢ RCS IDs
‚Ä¢ convert source code files (comments) to UTF-8
@
text
@d38 2
d53 1
a53 1
	gzFile	*gzf;
d58 1
a58 1
gzfgetln(gzFile *f, size_t *len)
d95 1
a95 1
grep_fdopen(int fd, char *mode)
d126 1
a126 1
grep_open(char *path, char *mode)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.5 2003/12/29 21:20:55 canacar Exp $	*/
d4 1
a4 1
 * Copyright (c) 1999 James Howard and Dag-Erling CoÔdan Sm¯rgrav
d48 1
d97 1
a97 1
	if (fd == 0)
d107 1
d114 1
d131 1
d158 3
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@some more updates/fixes from obsd
@
text
@d1 1
a1 1
/*	$OpenBSD: file.c,v 1.7 2005/02/07 08:47:18 otto Exp $	*/
a47 1
	int	 noseek;
d96 1
a96 1
	if (fd == STDIN_FILENO)
a105 1
		f->noseek = lseek(fd, 0L, SEEK_SET) == -1;
a111 1
		f->noseek = isatty(fd);
a127 1
	f->noseek = 0;
a153 3
	if (f->noseek)
		return 0;

@

