head	1.6;
access;
symbols
	cvs-201406091830:1.1.1.4
	cvs-20120325:1.1.1.3
	MIRBSD_10:1.1.1.2.0.4
	MIRBSD_10_BASE:1.1.1.2
	MIRBSD_9_BASE:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.6
date	2018.12.25.19.38.25;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005C22871909EC7FE2;

1.5
date	2016.02.11.20.12.23;	author tg;	state Exp;
branches;
next	1.4;
commitid	10056BCEAFF41919B5B;

1.4
date	2014.06.09.18.41.40;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005395FFFD670846DE;

1.3
date	2012.04.14.12.55.32;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004F8973D6048CB423;

1.2
date	2012.03.25.13.47.52;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004F6F220873C7D75D;

1.1
date	2005.02.05.17.29.49;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.49;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.21.00.13;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	560042e0092f571e;

1.1.1.3
date	2012.03.25.13.38.52;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	1004F6F1FFF58C19480;

1.1.1.4
date	2014.06.09.18.38.46;	author tg;	state Exp;
branches;
next	;
commitid	1005395FF4D0BDFEF0B;


desc
@@


1.6
log
@update from contrib/samples/portmdoc,v 1.11
@
text
@.\" $MirOS: src/usr.bin/rs/rs.1,v 1.5 2016/02/11 20:12:23 tg Exp $
.\" $OpenBSD: rs.1,v 1.16 2014/01/20 05:07:48 schwarze Exp $
.\" $FreeBSD: src/usr.bin/rs/rs.1,v 1.4 1999/08/28 01:05:21 peter Exp $
.\"-
.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
.\" Copyright (c) 2008, 2009, 2010, 2012, 2016, 2018
.\"	mirabilos <m@@mirbsd.org>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)rs.1	8.2 (Berkeley) 12/30/93
.\"
.\"-
.\" Try to make GNU groff and AT&T nroff more compatible
.\" * ` generates ‘ in gnroff, so use \`
.\" * ' generates ’ in gnroff, \' generates ´, so use \*(aq
.\" * - generates ‐ in gnroff, \- generates −, so .tr it to -
.\"   thus use - for hyphens and \- for minus signs and option dashes
.\" * ~ is size-reduced and placed atop in groff, so use \*(TI
.\" * ^ is size-reduced and placed atop in groff, so use \*(ha
.\" * \(en does not work in nroff, so use \*(en
.\" * <>| are problematic, so redefine and use \*(Lt\*(Gt\*(Ba
.\" Also make sure to use \& *before* a punctuation char that is to not
.\" be interpreted as punctuation, and especially with two-letter words
.\" but also (after) a period that does not end a sentence (“e.g.\&”).
.\" The section after the "doc" macropackage has been loaded contains
.\" additional code to convene between the UCB mdoc macropackage (and
.\" its variant as BSD mdoc in groff) and the GNU mdoc macropackage.
.\"
.ie \n(.g \{\
.	if \*[.T]ascii .tr \-\N'45'
.	if \*[.T]latin1 .tr \-\N'45'
.	if \*[.T]utf8 .tr \-\N'45'
.	ds <= \[<=]
.	ds >= \[>=]
.	ds Rq \[rq]
.	ds Lq \[lq]
.	ds sL \(aq
.	ds sR \(aq
.	if \*[.T]utf8 .ds sL `
.	if \*[.T]ps .ds sL `
.	if \*[.T]utf8 .ds sR '
.	if \*[.T]ps .ds sR '
.	ds aq \(aq
.	ds TI \(ti
.	ds ha \(ha
.	ds en \(en
.\}
.el \{\
.	ds aq '
.	ds TI ~
.	ds ha ^
.	ds en \(em
.\}
.\"
.\" Implement .Dd with the Mdocdate RCS keyword
.\"
.rn Dd xD
.de Dd
.ie \\$1$Mdocdate: \{\
.	xD \\$2 \\$3, \\$4
.\}
.el .xD \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8
..
.\"
.\" .Dd must come before definition of .Mx, because when called
.\" with -mandoc, it might implement .Mx itself, but we want to
.\" use our own definition. And .Dd must come *first*, always.
.\"
.Dd $Mdocdate: December 25 2018 $
.\"
.\" Check which macro package we use, and do other -mdoc setup.
.\"
.ie \n(.g \{\
.	if \*[.T]utf8 .tr \[la]\*(Lt
.	if \*[.T]utf8 .tr \[ra]\*(Gt
.	ie d volume-ds-1 .ds tT gnu
.	el .ie d doc-volume-ds-1 .ds tT gnp
.	el .ds tT bsd
.\}
.el .ds tT ucb
.\"
.\" Implement .Mx (MirBSD)
.\"
.ie "\*(tT"gnu" \{\
.	eo
.	de Mx
.	nr curr-font \n[.f]
.	nr curr-size \n[.ps]
.	ds str-Mx \f[\n[curr-font]]\s[\n[curr-size]u]
.	ds str-Mx1 \*[Tn-font-size]\%MirBSD\*[str-Mx]
.	if !\n[arg-limit] \
.	if \n[.$] \{\
.	ds macro-name Mx
.	parse-args \$@@
.	\}
.	if (\n[arg-limit] > \n[arg-ptr]) \{\
.	nr arg-ptr +1
.	ie (\n[type\n[arg-ptr]] == 2) \
.	as str-Mx1 \~\*[arg\n[arg-ptr]]
.	el \
.	nr arg-ptr -1
.	\}
.	ds arg\n[arg-ptr] "\*[str-Mx1]
.	nr type\n[arg-ptr] 2
.	ds space\n[arg-ptr] "\*[space]
.	nr num-args (\n[arg-limit] - \n[arg-ptr])
.	nr arg-limit \n[arg-ptr]
.	if \n[num-args] \
.	parse-space-vector
.	print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[Tn-font-size]
.\}
.el .ie "\*(tT"gnp" \{\
.	eo
.	de Mx
.	nr doc-curr-font \n[.f]
.	nr doc-curr-size \n[.ps]
.	ds doc-str-Mx \f[\n[doc-curr-font]]\s[\n[doc-curr-size]u]
.	ds doc-str-Mx1 \*[doc-Tn-font-size]\%MirBSD\*[doc-str-Mx]
.	if !\n[doc-arg-limit] \
.	if \n[.$] \{\
.	ds doc-macro-name Mx
.	doc-parse-args \$@@
.	\}
.	if (\n[doc-arg-limit] > \n[doc-arg-ptr]) \{\
.	nr doc-arg-ptr +1
.	ie (\n[doc-type\n[doc-arg-ptr]] == 2) \
.	as doc-str-Mx1 \~\*[doc-arg\n[doc-arg-ptr]]
.	el \
.	nr doc-arg-ptr -1
.	\}
.	ds doc-arg\n[doc-arg-ptr] "\*[doc-str-Mx1]
.	nr doc-type\n[doc-arg-ptr] 2
.	ds doc-space\n[doc-arg-ptr] "\*[doc-space]
.	nr doc-num-args (\n[doc-arg-limit] - \n[doc-arg-ptr])
.	nr doc-arg-limit \n[doc-arg-ptr]
.	if \n[doc-num-args] \
.	doc-parse-space-vector
.	doc-print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[doc-Tn-font-size]
.\}
.el \{\
.	de Mx
.	nr cF \\n(.f
.	nr cZ \\n(.s
.	ds aa \&\f\\n(cF\s\\n(cZ
.	if \\n(aC==0 \{\
.		ie \\n(.$==0 \&MirBSD\\*(aa
.		el .aV \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8 \\$9
.	\}
.	if \\n(aC>\\n(aP \{\
.		nr aP \\n(aP+1
.		ie \\n(C\\n(aP==2 \{\
.			as b1 \&MirBSD\ #\&\\*(A\\n(aP\\*(aa
.			ie \\n(aC>\\n(aP \{\
.				nr aP \\n(aP+1
.				nR
.			\}
.			el .aZ
.		\}
.		el \{\
.			as b1 \&MirBSD\\*(aa
.			nR
.		\}
.	\}
..
.\}
.\"-
.Dt RS 1
.Os
.Sh NAME
.Nm rs
.Nd reshape a data array
.Sh SYNOPSIS
.Nm rs
.Op Fl CcSs Ns Op Ar x
.Op Fl GgKkw Ar N
.Op Fl EeHhjmnTtyz
.Op Ar rows Op Ar cols
.Sh DESCRIPTION
.Nm
reads the standard input, interpreting each line as a row
of blank-separated entries in an array,
transforms the array according to the options,
and writes it on the standard output.
With no arguments it transforms stream input into a columnar
format convenient for terminal viewing.
.Pp
The shape of the input array is deduced from the number of lines
and the number of columns on the first line.
If that shape is inconvenient, a more useful one might be
obtained by skipping some of the input with the
.Fl k
option.
Other options control interpretation of the input columns.
.Pp
The shape of the output array is influenced by the
.Ar rows
and
.Ar cols
specifications, which should be positive integers.
If only one of them is a positive integer,
.Nm
computes a value for the other which will accommodate
all of the data.
When necessary, missing data are supplied in a manner
specified by the options and surplus data are deleted.
There are options to control presentation of the output columns,
including transposition of the rows and columns.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl C Ns Op Ar x
Output columns are delimited by the single character
.Ar x .
A missing
.Ar x
is taken to be
.Ql \*(haI .
.It Fl c Ns Op Ar x
Input columns are delimited by the single character
.Ar x .
A missing
.Ar x
is taken to be
.Ql \*(haI .
.It Fl E
Consider each character of input as an array entry.
.It Fl e
Consider each line of input as an array entry.
.It Fl G Ns Ar N
The gutter width has
.Ar N
percent of the maximum column width added to it.
.It Fl g Ns Ar N
The gutter width (inter-column space), normally 2, is taken to be
.Ar N .
.It Fl H
Like
.Fl h ,
but also print the length of each line.
.It Fl h
Print the shape of the input array and do nothing else.
The shape is just the number of lines and the number of
entries on the first line.
.It Fl j
Right adjust entries within columns.
.It Fl K Ns Ar N
Like
.Fl k ,
but print the ignored lines.
.It Fl k Ns Ar N
Ignore the first
.Ar N
lines of input.
.It Fl m
Do not trim excess delimiters from the ends of the output array.
.It Fl n
On lines having fewer entries than the first line,
use null entries to pad out the line.
Normally, missing entries are taken from the next line of input.
.It Fl S Ns Op Ar x
Like
.Fl C ,
but padded strings of
.Ar x
are delimiters.
.It Fl s Ns Op Ar x
Like
.Fl c ,
but maximal strings of
.Ar x
are delimiters.
.It Fl T
Print the pure transpose of the input, ignoring any
.Ar rows
or
.Ar cols
specification.
.It Fl t
Fill in the rows of the output array using the columns of the
input array, that is, transpose the input while honoring any
.Ar rows
and
.Ar cols
specifications.
.It Fl w Ns Ar N
The width of the display, normally 80, is taken to be the positive
integer
.Ar N .
.It Fl y
If there are too few entries to make up the output dimensions,
pad the output by recycling the input from the beginning.
Normally, the output is padded with blanks.
.It Fl z
Shrink column widths to fit the largest entries appearing in them.
.El
.Pp
With no arguments,
.Nm
transposes its input, and assumes one array entry per input line
unless the first non-ignored line is longer than the display width.
Option letters which take numerical arguments interpret a missing
number as zero unless otherwise indicated.
.Sh EXAMPLES
.Nm
can be used as a filter to convert the stream output
of certain programs (e.g.,
.Xr spell 1 ,
.Xr du 1 ,
.Xr file 1 ,
.Xr look 1 ,
.Xr nm 1 ,
.Xr who 1 ,
and
.Xr wc 1 )
into a convenient
.Dq window
format, as in
.Bd -literal -offset indent
$ who \*(Ba rs
.Ed
.Pp
This function has been incorporated into the
.Xr ls 1
program, though for most programs with similar output
.Nm
suffices.
.Pp
To convert stream input into vector output and back again, use
.Bd -literal -offset indent
$ rs 1 0 \*(Ba rs 0 1
.Ed
.Pp
A 10 by 10 array of random numbers from 1 to 100 and
its transpose can be generated with
.Bd -literal -offset indent
$ jot \-r 100 \*(Ba rs 10 10 \*(Ba tee array \*(Ba rs \-T \*(Gttarray
.Ed
.Pp
In the editor
.Xr vi 1 ,
a file consisting of a multi-line vector with 9 elements per line
can undergo insertions and deletions,
and then be neatly reshaped into 9 columns with
.Bd -literal -offset indent
:1,$!rs 0 9
.Ed
.Pp
Finally, to sort a database by the first line of each 4-line field, try
.Bd -literal -offset indent
$ rs \-eC 0 4 \*(Ba sort \*(Ba rs \-c 0 1
.Ed
.Sh SEE ALSO
.Xr jot 1 ,
.Xr pr 1 ,
.Xr sort 1 ,
.Xr vi 1
.Sh BUGS
Handles only two dimensional arrays.
.Pp
The algorithm currently reads the whole file into memory,
so files that do not fit in memory will not be reshaped.
.Pp
Fields cannot be defined yet on character positions.
.Pp
Re-ordering of columns is not yet possible.
.Pp
There are too many options.
@


1.5
log
@merge most recent portmdoc into a̲l̲l̲ of its users; fixup .\& into \&. like
in mksh(1), for Schillix ditroff
@
text
@d1 1
a1 1
.\" $MirOS: src/usr.bin/rs/rs.1,v 1.3 2012/04/14 12:55:32 tg Exp $
d7 1
a7 1
.\" Copyright (c) 2008, 2009, 2010, 2012, 2016
d93 1
a93 1
.Dd $Mdocdate: April 14 2012 $
d101 1
d114 1
a114 1
.	ds str-Mx1 \*[Tn-font-size]\%MirOS\*[str-Mx]
d140 32
d178 1
a178 1
.		ie \\n(.$==0 \&MirOS\\*(aa
d184 1
a184 1
.			as b1 \&MirOS\ #\&\\*(A\\n(aP\\*(aa
d192 1
a192 1
.			as b1 \&MirOS\\*(aa
@


1.4
log
@fastmerge
@
text
@d7 2
a8 2
.\" Copyright (c) 2008, 2009, 2010, 2012
.\"	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
d46 3
a48 1
.\" Also make sure to use \& especially with two-letter words.
@


1.3
log
@apply portmdoc for portability
@
text
@d1 2
a2 2
.\" $MirOS: src/usr.bin/rs/rs.1,v 1.2 2012/03/25 13:47:52 tg Exp $
.\" $OpenBSD: rs.1,v 1.15 2009/10/15 07:38:09 sobrado Exp $
d91 1
a91 1
.Dd $Mdocdate: March 15 2010 $
d304 6
a309 6
.Xr spell ,
.Xr du ,
.Xr file ,
.Xr look ,
.Xr nm ,
.Xr who ,
@


1.2
log
@apply patch from RjY (Debian #650029) to fix -z and reword manpage
@
text
@d1 4
a4 4
.\"	$MirOS$
.\"	$OpenBSD: rs.1,v 1.15 2009/10/15 07:38:09 sobrado Exp $
.\"	$FreeBSD: src/usr.bin/rs/rs.1,v 1.4 1999/08/28 01:05:21 peter Exp $
.\"
d7 2
d36 128
a163 1
.Dd $Mdocdate: March 25 2012 $
d214 1
a214 1
.Ql ^I .
d221 1
a221 1
.Ql ^I .
d316 1
a316 1
$ who | rs
d327 1
a327 1
$ rs 1 0 | rs 0 1
d333 1
a333 1
$ jot \-r 100 | rs 10 10 | tee array | rs \-T >tarray
d347 1
a347 1
$ rs \-eC 0 4 | sort | rs \-c 0 1
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
.\"	$OpenBSD: rs.1,v 1.9 2003/07/14 12:51:48 jmc Exp $
a32 1
.\" $FreeBSD: src/usr.bin/rs/rs.1,v 1.4 1999/08/28 01:05:21 peter Exp $
d34 1
a34 1
.Dd December 30, 1993
d42 3
a44 10
.Oo
.Sm off
.Xo Fl Oo Op Cm csCS
.Op Ar x
.Op Cm kKgGw
.Op Ar N
.Cm tTeEnyjhHmz Oc
.Xc
.Oc
.Sm on
d79 2
a80 2
.It Fl c Ns Ar x
Input columns are delimited by the single character
d86 2
a87 8
.It Fl s Ns Ar x
Like
.Fl c ,
but maximal strings of
.Ar x
are delimiters.
.It Fl C Ns Ar x
Output columns are delimited by the single character
d93 36
a128 1
.It Fl S Ns Ar x
d134 12
d153 3
a155 16
.It Fl T
Print the pure transpose of the input, ignoring any
.Ar rows
or
.Ar cols
specification.
.It Fl k Ns Ar N
Ignore the first
.Ar N
lines of input.
.It Fl K Ns Ar N
Like
.Fl k ,
but print the ignored lines.
.It Fl g Ns Ar N
The gutter width (inter-column space), normally 2, is taken to be
a156 12
.It Fl G Ns Ar N
The gutter width has
.Ar N
percent of the maximum column width added to it.
.It Fl e
Consider each line of input as an array entry.
.It Fl E
Consider each character of input as an array entry.
.It Fl n
On lines having fewer entries than the first line,
use null entries to pad out the line.
Normally, missing entries are taken from the next line of input.
a160 16
.It Fl h
Print the shape of the input array and do nothing else.
The shape is just the number of lines and the number of
entries on the first line.
.It Fl H
Like
.Fl h ,
but also print the length of each line.
.It Fl j
Right adjust entries within columns.
.It Fl w Ns Ar N
The width of the display, normally 80, is taken to be the positive
integer
.Ar N .
.It Fl m
Do not trim excess delimiters from the ends of the output array.
d162 1
a162 1
Adapt column widths to fit the largest entries appearing in them.
d204 1
a204 1
$ jot \-r 100 | rs 10 10 | tee array | rs \-T > tarray
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 2
.\"	$OpenBSD: rs.1,v 1.12 2005/05/15 13:21:11 jmc Exp $
.\"	$FreeBSD: src/usr.bin/rs/rs.1,v 1.4 1999/08/28 01:05:21 peter Exp $
d31 1
d41 10
a50 3
.Op Fl CcSs Ns Op Ar x
.Op Fl KkGgw Ar N
.Op Fl EeHhjmnTtyz
d85 2
a86 2
.It Fl C Ns Ar x
Output columns are delimited by the single character
d92 8
a99 2
.It Fl c Ns Ar x
Input columns are delimited by the single character
a104 35
.It Fl E
Consider each character of input as an array entry.
.It Fl e
Consider each line of input as an array entry.
.It Fl G Ns Ar N
The gutter width has
.Ar N
percent of the maximum column width added to it.
.It Fl g Ns Ar N
The gutter width (inter-column space), normally 2, is taken to be
.Ar N .
.It Fl H
Like
.Fl h ,
but also print the length of each line.
.It Fl h
Print the shape of the input array and do nothing else.
The shape is just the number of lines and the number of
entries on the first line.
.It Fl j
Right adjust entries within columns.
.It Fl K Ns Ar N
Like
.Fl k ,
but print the ignored lines.
.It Fl k Ns Ar N
Ignore the first
.Ar N
lines of input.
.It Fl m
Do not trim excess delimiters from the ends of the output array.
.It Fl n
On lines having fewer entries than the first line,
use null entries to pad out the line.
Normally, missing entries are taken from the next line of input.
a110 12
.It Fl s Ns Ar x
Like
.Fl c ,
but maximal strings of
.Ar x
are delimiters.
.It Fl T
Print the pure transpose of the input, ignoring any
.Ar rows
or
.Ar cols
specification.
d118 16
a133 3
.It Fl w Ns Ar N
The width of the display, normally 80, is taken to be the positive
integer
d135 12
d151 16
@


1.1.1.3
log
@update rs from .Ox
@
text
@d1 1
a1 1
.\"	$OpenBSD: rs.1,v 1.15 2009/10/15 07:38:09 sobrado Exp $
d33 1
a33 1
.Dd $Mdocdate: October 15 2009 $
d42 1
a42 1
.Op Fl GgKkw Ar N
d78 1
a78 1
.It Fl C Ns Op Ar x
d85 1
a85 1
.It Fl c Ns Op Ar x
d127 1
a127 1
.It Fl S Ns Op Ar x
d133 1
a133 1
.It Fl s Ns Op Ar x
@


1.1.1.4
log
@update from obsd
@
text
@d1 1
a1 1
.\"	$OpenBSD: rs.1,v 1.16 2014/01/20 05:07:48 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 20 2014 $
d174 6
a179 6
.Xr spell 1 ,
.Xr du 1 ,
.Xr file 1 ,
.Xr look 1 ,
.Xr nm 1 ,
.Xr who 1 ,
@


