head	1.14;
access;
symbols
	cvs-200910041320:1.1.1.9
	cvs-200903221200:1.1.1.8
	cvs-200812162015:1.1.1.8
	cvs-200804031830:1.1.1.7
	MIRBSD_10:1.10.0.2
	MIRBSD_10_BASE:1.10
	cvs-200803022030:1.1.1.7
	cvs-200709131337:1.1.1.6
	cvs-200709021830:1.1.1.6
	cvs-200708201200:1.1.1.5
	cvs-200706161500:1.1.1.5
	cvs-200705192215:1.1.1.5
	cvs-200704292000:1.1.1.5
	cvs-200703080900:1.1.1.5
	cvs-200701251600:1.1.1.5
	cvs-200612111600:1.1.1.5
	cvs-200611090230:1.1.1.5
	OPENBSD_4_0:1.1.1.5
	MIRBSD_9_BASE:1.6
	cvs-200606162342:1.1.1.4
	cvs-200606022000:1.1.1.4
	cvs-200604191000:1.1.1.3
	cvs-200602220045:1.1.1.2
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200512201942:1.1.1.2
	cvs-200511231930:1.1.1.2
	cvs-200507211800:1.1.1.2
	cvs-200506221550:1.1.1.2
	cvs-200505050030:1.1.1.1
	cvs-200504291700:1.1.1.1
	cvs-200504261445:1.1.1.1
	cvs-200504141900:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.03.28.22.31.54;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005335F87233372394;

1.13
date	2013.10.31.20.07.10;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005272B7081B0E5655;

1.12
date	2009.10.04.14.29.01;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004AC8B1276FC00211;

1.11
date	2008.12.16.20.55.18;	author tg;	state Exp;
branches;
next	1.10;
commitid	100494815C97ECEEDBF;

1.10
date	2008.03.02.21.14.18;	author tg;	state Exp;
branches;
next	1.9;
commitid	10047CB18BB506A8527;

1.9
date	2007.09.02.18.53.13;	author tg;	state Exp;
branches;
next	1.8;
commitid	10046DB06AF681AF68C;

1.8
date	2006.09.20.21.40.55;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004511B578580E7F04;

1.7
date	2006.07.23.14.19.26;	author tg;	state Exp;
branches;
next	1.6;
commitid	10044C3857E74BD315F;

1.6
date	2006.06.02.20.50.46;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004480A4952B0D84EA;

1.5
date	2006.04.19.10.40.44;	author tg;	state Exp;
branches;
next	1.4;
commitid	100444613BD3A91C28B;

1.4
date	2006.02.22.02.16.44;	author tg;	state Exp;
branches;
next	1.3;
commitid	10043FBC991512A442B;

1.3
date	2005.06.22.16.11.39;	author tg;	state Exp;
branches;
next	1.2;
commitid	598b42b98dcf335f;

1.2
date	2005.03.13.18.33.29;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.06.22.15.56.24;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	181342b98a38fe99;

1.1.1.3
date	2006.04.19.10.15.02;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	10044460DB21E1F715C;

1.1.1.4
date	2006.06.02.20.31.50;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	1004480A0422110D712;

1.1.1.5
date	2006.09.20.19.06.47;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10045119150397FC669;

1.1.1.6
date	2007.09.02.18.48.03;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	10046DB0574023300F5;

1.1.1.7
date	2008.03.02.20.40.41;	author tg;	state Exp;
branches;
next	1.1.1.8;
commitid	10047CB10DD30FAF062;

1.1.1.8
date	2008.12.16.20.15.31;	author tg;	state Exp;
branches;
next	1.1.1.9;
commitid	10049480C7A2701F5C0;

1.1.1.9
date	2009.10.04.13.25.44;	author tg;	state Exp;
branches;
next	;
commitid	1004AC8A2663BC008C5;


desc
@@


1.14
log
@replicate commit “remove experimental, never-enabled JPAKE code; ok markus@@” (djm, 2014/01/29 06:18:35) from upstream
@
text
@/* $MirOS: src/usr.bin/ssh/auth.h,v 1.13 2013/10/31 20:07:10 tg Exp $ */
/* $OpenBSD: auth.h,v 1.63 2009/08/15 18:56:34 fgsch Exp $ */

/*
 * Copyright © 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef AUTH_H
#define AUTH_H

#include <signal.h>

#include <openssl/rsa.h>

#ifdef BSD_AUTH
#include <bsd_auth.h>
#endif

typedef struct Authctxt Authctxt;
typedef struct Authmethod Authmethod;
typedef struct KbdintDevice KbdintDevice;

struct Authctxt {
	sig_atomic_t	 success;
	int		 authenticated;	/* authenticated and alarms cancelled */
	int		 postponed;	/* authentication needs another step */
	int		 valid;		/* user exists and is allowed to login */
	int		 attempt;
	int		 failures;
	int		 force_pwchange;
	char		*user;		/* username sent by the client */
	char		*service;
	struct passwd	*pw;		/* set if 'valid' */
	char		*style;
	void		*kbdintctxt;
#ifdef BSD_AUTH
	auth_session_t	*as;
#endif
	void		*methoddata;
};
/*
 * Every authentication method has to handle authentication requests for
 * non-existing users, or for users that are not allowed to login. In this
 * case 'valid' is set to 0, but 'user' points to the username requested by
 * the client.
 */

struct Authmethod {
	const char *name;
	int	(*userauth)(Authctxt *authctxt);
	int	*enabled;
};

/*
 * Keyboard interactive device:
 * init_ctx	returns: non NULL upon success
 * query	returns: 0 - success, otherwise failure
 * respond	returns: 0 - success, 1 - need further interaction,
 *		otherwise - failure
 */
struct KbdintDevice
{
	const char *name;
	void*	(*init_ctx)(Authctxt*);
	int	(*query)(void *ctx, char **name, char **infotxt,
		    u_int *numprompts, char ***prompts, u_int **echo_on);
	int	(*respond)(void *ctx, u_int numresp, char **responses);
	void	(*free_ctx)(void *ctx);
};

int      auth_rhosts(struct passwd *, const char *);
int
auth_rhosts2(struct passwd *, const char *, const char *, const char *);

int	 auth_rhosts_rsa(Authctxt *, char *, Key *);
int      auth_password(Authctxt *, const char *);
int      auth_rsa(Authctxt *, BIGNUM *);
int      auth_rsa_challenge_dialog(Key *);
BIGNUM	*auth_rsa_generate_challenge(Key *);
int	 auth_rsa_verify_response(Key *, BIGNUM *, u_char[]);
int	 auth_rsa_key_allowed(struct passwd *, BIGNUM *, Key **);

int	 auth_rhosts_rsa_key_allowed(struct passwd *, char *, char *, Key *);
int	 hostbased_key_allowed(struct passwd *, const char *, char *, Key *);
int	 user_key_allowed(struct passwd *, Key *);

void	do_authentication(Authctxt *);
void	do_authentication2(Authctxt *);

void	auth_log(Authctxt *, int, const char *, const char *);
void	userauth_finish(Authctxt *, int, char *);
int	auth_root_allowed(const char *);

char	*auth2_read_banner(void);

void	privsep_challenge_enable(void);

int	auth2_challenge(Authctxt *, char *);
void	auth2_challenge_stop(Authctxt *);
int	bsdauth_query(void *, char **, char **, u_int *, char ***, u_int **);
int	bsdauth_respond(void *, u_int, char **);
int	skey_query(void *, char **, char **, u_int *, char ***, u_int **);
int	skey_respond(void *, u_int, char **);

int	allowed_user(struct passwd *);
struct passwd * getpwnamallow(const char *user);

char	*get_challenge(Authctxt *);
int	verify_response(Authctxt *, const char *);

char	*authorised_keys_file(struct passwd *);
char	*authorised_keys_file2(struct passwd *);

FILE	*auth_openkeyfile(const char *, struct passwd *, int);

HostStatus
check_key_in_hostfiles(struct passwd *, Key *, const char *,
    const char *, const char *);

/* hostkey handling */
Key	*get_hostkey_by_index(int);
Key	*get_hostkey_by_type(int);
int	 get_hostkey_index(Key *);
int	 ssh1_session_key(BIGNUM *);

/* debug messages during authentication */
void	 auth_debug_add(const char *fmt,...) __attribute__((__format__(__printf__, 1, 2)));
void	 auth_debug_send(void);
void	 auth_debug_reset(void);

struct passwd *fakepw(void);

#define AUTH_FAIL_MSG "Too many authentication failures for %.100s"

#endif
@


1.13
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/* $MirOS: src/usr.bin/ssh/auth.h,v 1.12 2009/10/04 14:29:01 tg Exp $ */
a58 1
	void		*jpake_ctx;
a127 3
void	auth2_jpake_get_pwdata(Authctxt *, BIGNUM **, char **, char **);
void	auth2_jpake_stop(Authctxt *);

@


1.12
log
@• merge newer OpenSSH
• KNF in our diff – style(9)
• some const cleanliness (build with __CRAZY=Yes mostly)
@
text
@d1 1
a1 1
/* $MirOS: src/usr.bin/ssh/auth.h,v 1.11 2008/12/16 20:55:18 tg Exp $ */
d5 2
d154 1
a154 1
void	 auth_debug_add(const char *fmt,...) __attribute__((format(printf, 1, 2)));
@


1.11
log
@fastmerge, do not use yet!
@
text
@d1 2
a2 2
/* $MirOS: src/usr.bin/ssh/auth.h,v 1.10 2008/03/02 21:14:18 tg Exp $ */
/* $OpenBSD: auth.h,v 1.62 2008/11/04 08:22:12 djm Exp $ */
d114 1
a114 1
int	auth_root_allowed(char *);
a159 1
#define SKEY_PROMPT "\nS/Key Password: "
@


1.10
log
@merge’n’fix
@
text
@d1 2
a2 2
/* $MirOS: src/usr.bin/ssh/auth.h,v 1.9 2007/09/02 18:53:13 tg Exp $ */
/* $OpenBSD: auth.h,v 1.60 2007/09/21 08:15:29 djm Exp $ */
d57 1
d127 3
d139 1
a139 2
int
secure_filename(FILE *, const char *, struct passwd *, char *, size_t);
@


1.9
log
@merge (luckily no need to change the distrib/special/sshd)
@
text
@d1 2
a2 2
/* $MirOS: src/usr.bin/ssh/auth.h,v 1.8 2006/09/20 21:40:55 tg Exp $ */
/* $OpenBSD: auth.h,v 1.59 2007/08/23 03:06:10 djm Exp $ */
@


1.8
log
@finish merging
@
text
@d1 2
a2 2
/* $MirOS: src/usr.bin/ssh/auth.h,v 1.7 2006/07/23 14:19:26 tg Exp $ */
/* $OpenBSD: auth.h,v 1.58 2006/08/18 09:15:20 markus Exp $ */
a35 3
#ifdef HAVE_LOGIN_CAP
#include <login_cap.h>
#endif
@


1.7
log
@fix spelling and pubkey authentication
@
text
@d1 2
a2 2
/* $MirOS: src/usr.bin/ssh/auth.h,v 1.6 2006/06/02 20:50:46 tg Exp $ */
/* $OpenBSD: auth.h,v 1.53 2006/04/20 09:27:09 djm Exp $ */
d32 2
a33 2
#include "key.h"
#include "hostfile.h"
d49 1
@


1.6
log
@* merge
* remove all references to GSSAPI, Kerberos and AFS
* uint*_t -> u_int*_t for consistency, like openbsd
  (note: MirOS style(9) suggests uint32_t etc. instead!)
* bump vsn
@
text
@d1 1
a1 1
/* $MirOS: src/usr.bin/ssh/auth.h,v 1.5 2006/04/19 10:40:44 tg Exp $ */
d134 2
a135 2
char	*authorized_keys_file(struct passwd *);
char	*authorized_keys_file2(struct passwd *);
@


1.5
log
@merge and clean up
@
text
@d1 2
a2 2
/* $MirOS$ */
/* $OpenBSD: auth.h,v 1.52 2006/03/25 22:22:42 djm Exp $ */
d48 1
a48 1
	int		 success;
@


1.4
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 2
a2 2
/**	$MirOS: src/usr.bin/ssh/auth.h,v 1.3 2005/06/22 16:11:39 tg Exp $ */
/*	$OpenBSD: auth.h,v 1.51 2005/06/06 11:20:36 djm Exp $	*/
@


1.3
log
@merge
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.bin/ssh/auth.h,v 1.2 2005/03/13 18:33:29 tg Exp $ */
d72 1
a72 1
	char	*name;
d113 1
a113 1
void	auth_log(Authctxt *, int, char *, char *);
@


1.2
log
@merge src/usr.bin
@
text
@d1 2
a2 2
/**	$MirOS$ */
/*	$OpenBSD: auth.h,v 1.50 2004/05/23 23:59:53 dtucker Exp $	*/
a133 1
char	*expand_filename(const char *, struct passwd *);
@


1.1
log
@Initial revision
@
text
@d1 1
a41 3
#ifdef KRB5
#include <krb5.h>
#endif
a61 6
#ifdef KRB5
	krb5_context	 krb5_ctx;
	krb5_ccache	 krb5_fwd_ccache;
	krb5_principal	 krb5_user;
	char		*krb5_ticket_file;
#endif
a109 7
#ifdef KRB5
int	auth_krb5(Authctxt *authctxt, krb5_data *auth, char **client, krb5_data *);
int	auth_krb5_tgt(Authctxt *authctxt, krb5_data *tgt);
int	auth_krb5_password(Authctxt *authctxt, const char *password);
void	krb5_cleanup_proc(Authctxt *authctxt);
#endif /* KRB5 */

@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@most current OpenSSH.com
@
text
@d1 1
a1 1
/*	$OpenBSD: auth.h,v 1.51 2005/06/06 11:20:36 djm Exp $	*/
d149 1
@


1.1.1.3
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@d1 1
a1 1
/* $OpenBSD: auth.h,v 1.52 2006/03/25 22:22:42 djm Exp $ */
@


1.1.1.4
log
@if we're gonna push out another snapshot, we'd better have sshd-current
@
text
@d1 1
a1 1
/* $OpenBSD: auth.h,v 1.53 2006/04/20 09:27:09 djm Exp $ */
d50 1
a50 1
	sig_atomic_t	 success;
@


1.1.1.5
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: auth.h,v 1.58 2006/08/18 09:15:20 markus Exp $ */
d31 2
a32 2
#include <signal.h>

a50 1
	int		 authenticated;	/* authenticated and alarms cancelled */
@


1.1.1.6
log
@more ssh updates
@
text
@d1 1
a1 1
/* $OpenBSD: auth.h,v 1.59 2007/08/23 03:06:10 djm Exp $ */
d35 3
@


1.1.1.7
log
@newer openssh
@
text
@d1 1
a1 1
/* $OpenBSD: auth.h,v 1.60 2007/09/21 08:15:29 djm Exp $ */
d35 1
d37 1
d59 1
d61 1
@


1.1.1.8
log
@OpenSSH-current
@
text
@d1 1
a1 1
/* $OpenBSD: auth.h,v 1.62 2008/11/04 08:22:12 djm Exp $ */
a56 1
	void		*jpake_ctx;
a136 3
void	auth2_jpake_get_pwdata(Authctxt *, BIGNUM **, char **, char **);
void	auth2_jpake_stop(Authctxt *);

d146 2
a147 1
FILE	*auth_openkeyfile(const char *, struct passwd *, int);
@


1.1.1.9
log
@Let’s play the version number game – OpenSSH 5.3-current
@
text
@d1 1
a1 1
/* $OpenBSD: auth.h,v 1.63 2009/08/15 18:56:34 fgsch Exp $ */
d171 1
@


