head	1.14;
access;
symbols
	cvs-200910041320:1.1.1.9
	cvs-200903221200:1.1.1.9
	cvs-200812162015:1.1.1.9
	cvs-200804031830:1.1.1.8
	MIRBSD_10:1.8.0.2
	MIRBSD_10_BASE:1.8
	cvs-200803022030:1.1.1.8
	cvs-200709131337:1.1.1.7
	cvs-200709021830:1.1.1.7
	cvs-200708201200:1.1.1.6
	cvs-200706161500:1.1.1.6
	cvs-200705192215:1.1.1.6
	cvs-200704292000:1.1.1.6
	cvs-200703080900:1.1.1.6
	cvs-200701251600:1.1.1.6
	cvs-200612111600:1.1.1.6
	cvs-200611090230:1.1.1.6
	OPENBSD_4_0:1.1.1.6
	MIRBSD_9_BASE:1.4
	cvs-200606162342:1.1.1.5
	cvs-200606022000:1.1.1.5
	cvs-200604191000:1.1.1.5
	cvs-200602220045:1.1.1.4
	MIRBSD_8:1.1.1.3.0.2
	MIRBSD_8_BASE:1.1.1.3
	cvs-200512201942:1.1.1.3
	cvs-200511231930:1.1.1.3
	cvs-200507211800:1.1.1.3
	cvs-200506221550:1.1.1.3
	cvs-200505050030:1.1.1.2
	cvs-200504291700:1.1.1.2
	cvs-200504261445:1.1.1.2
	cvs-200504141900:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2018.05.03.01.32.44;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005AEA669C604AC341;

1.13
date	2013.10.31.20.07.10;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005272B7081B0E5655;

1.12
date	2011.01.15.21.52.39;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004D32173B08BB4E36;

1.11
date	2009.10.04.14.29.01;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004AC8B1276FC00211;

1.10
date	2008.12.16.22.13.26;	author tg;	state Exp;
branches;
next	1.9;
commitid	10049482819766381ED;

1.9
date	2008.12.16.20.55.18;	author tg;	state Exp;
branches;
next	1.8;
commitid	100494815C97ECEEDBF;

1.8
date	2008.03.02.21.14.18;	author tg;	state Exp;
branches;
next	1.7;
commitid	10047CB18BB506A8527;

1.7
date	2007.09.02.18.53.13;	author tg;	state Exp;
branches;
next	1.6;
commitid	10046DB06AF681AF68C;

1.6
date	2006.09.20.21.40.55;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004511B578580E7F04;

1.5
date	2006.07.23.14.19.26;	author tg;	state Exp;
branches;
next	1.4;
commitid	10044C3857E74BD315F;

1.4
date	2006.04.19.10.40.44;	author tg;	state Exp;
branches;
next	1.3;
commitid	100444613BD3A91C28B;

1.3
date	2006.02.22.02.16.44;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043FBC991512A442B;

1.2
date	2006.02.22.01.23.48;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043FBBD2C2C5E7D81;

1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.14.19.33.21;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.06.22.15.56.24;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	181342b98a38fe99;

1.1.1.4
date	2006.02.22.00.51.35;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10043FBB5A933C3BB9B;

1.1.1.5
date	2006.04.19.10.15.02;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10044460DB21E1F715C;

1.1.1.6
date	2006.09.20.19.06.47;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	10045119150397FC669;

1.1.1.7
date	2007.09.02.18.48.03;	author tg;	state Exp;
branches;
next	1.1.1.8;
commitid	10046DB0574023300F5;

1.1.1.8
date	2008.03.02.20.40.41;	author tg;	state Exp;
branches;
next	1.1.1.9;
commitid	10047CB10DD30FAF062;

1.1.1.9
date	2008.12.16.20.15.31;	author tg;	state Exp;
branches;
next	;
commitid	10049480C7A2701F5C0;


desc
@@


1.14
log
@implement a new config directive MaskRemoteAddress

this is suitable for either hiding a̲l̲l̲ remote identities (if used globally)
or the identity of successful logins (for a Match block — e.g. for anoncvs)
@
text
@/* $OpenBSD: auth.c,v 1.80 2008/11/04 07:58:09 djm Exp $ */
/*
 * Copyright © 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/stat.h>

#include <errno.h>
#include <fcntl.h>
#include <libgen.h>
#include <login_cap.h>
#include <paths.h>
#include <pwd.h>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "xmalloc.h"
#include "match.h"
#include "groupaccess.h"
#include "log.h"
#include "buffer.h"
#include "servconf.h"
#include "key.h"
#include "hostfile.h"
#include "auth.h"
#include "auth-options.h"
#include "canohost.h"
#include "uidswap.h"
#include "misc.h"
#include "packet.h"
#include "monitor_wrap.h"
#include "pathnames.h"

__RCSID("$MirOS: src/usr.bin/ssh/auth.c,v 1.13 2013/10/31 20:07:10 tg Exp $");

/* import */
extern ServerOptions options;
static char need_maskremote = 0;

/* Debugging messages */
Buffer auth_debug;
int auth_debug_init;

/*
 * Check if the user is allowed to log in via ssh. If user is listed
 * in DenyUsers or one of user's groups is listed in DenyGroups, false
 * will be returned. If AllowUsers isn't empty and user isn't listed
 * there, or if AllowGroups isn't empty and one of user's groups isn't
 * listed there, false will be returned.
 * If the user's shell is not executable, false will be returned.
 * Otherwise true is returned.
 */
int
allowed_user(struct passwd * pw)
{
	struct stat st;
	const char *hostname = NULL, *ipaddr = NULL;
	const char *shell;
	u_int i;

	/* Shouldn't be called if pw is NULL, but better safe than sorry... */
	if (!pw || !pw->pw_name)
		return 0;

	/*
	 * Get the shell from the password data.  An empty shell field is
	 * legal, and means /bin/sh.
	 */
	shell = (pw->pw_shell[0] == '\0') ? _PATH_BSHELL : pw->pw_shell;

	/* deny if shell does not exists or is not executable */
	if (stat(shell, &st) != 0) {
		logit("User %.100s not allowed because shell %.100s does not exist",
		    pw->pw_name, shell);
		return 0;
	}
	if (S_ISREG(st.st_mode) == 0 ||
	    (st.st_mode & (S_IXOTH|S_IXUSR|S_IXGRP)) == 0) {
		logit("User %.100s not allowed because shell %.100s is not executable",
		    pw->pw_name, shell);
		return 0;
	}

	if (options.num_deny_users > 0 || options.num_allow_users > 0 ||
	    options.num_deny_groups > 0 || options.num_allow_groups > 0) {
		hostname = get_canonical_hostname(options.use_dns);
		ipaddr = get_remote_ipaddr();
	}

	/* Return false if user is listed in DenyUsers */
	if (options.num_deny_users > 0) {
		for (i = 0; i < options.num_deny_users; i++)
			if (match_user(pw->pw_name, hostname, ipaddr,
			    options.deny_users[i])) {
				logit("User %.100s from %.100s not allowed "
				    "because listed in DenyUsers",
				    pw->pw_name, hostname);
				return 0;
			}
	}
	/* Return false if AllowUsers isn't empty and user isn't listed there */
	if (options.num_allow_users > 0) {
		for (i = 0; i < options.num_allow_users; i++)
			if (match_user(pw->pw_name, hostname, ipaddr,
			    options.allow_users[i]))
				break;
		/* i < options.num_allow_users iff we break for loop */
		if (i >= options.num_allow_users) {
			logit("User %.100s from %.100s not allowed because "
			    "not listed in AllowUsers", pw->pw_name, hostname);
			return 0;
		}
	}
	if (options.num_deny_groups > 0 || options.num_allow_groups > 0) {
		/* Get the user's group access list (primary and supplementary) */
		if (ga_init(pw->pw_name, pw->pw_gid) == 0) {
			logit("User %.100s from %.100s not allowed because "
			    "not in any group", pw->pw_name, hostname);
			return 0;
		}

		/* Return false if one of user's groups is listed in DenyGroups */
		if (options.num_deny_groups > 0)
			if (ga_match(options.deny_groups,
			    options.num_deny_groups)) {
				ga_free();
				logit("User %.100s from %.100s not allowed "
				    "because a group is listed in DenyGroups",
				    pw->pw_name, hostname);
				return 0;
			}
		/*
		 * Return false if AllowGroups isn't empty and one of user's groups
		 * isn't listed there
		 */
		if (options.num_allow_groups > 0)
			if (!ga_match(options.allow_groups,
			    options.num_allow_groups)) {
				ga_free();
				logit("User %.100s from %.100s not allowed "
				    "because none of user's groups are listed "
				    "in AllowGroups", pw->pw_name, hostname);
				return 0;
			}
		ga_free();
	}
	/* We found no reason not to let this user try to log on... */
	return 1;
}

void
auth_log(Authctxt *authctxt, int authenticated, const char *method,
    const char *info)
{
	void (*authlog) (const char *fmt,...) = verbose;
	const char *authmsg;

	if (use_privsep && !mm_is_monitor() && !authctxt->postponed)
		return;

	if (authenticated && need_maskremote) {
		process_config_mask_remote(&options);
		need_maskremote = 0;
	}

	/* Raise logging level */
	if (authenticated == 1 ||
	    !authctxt->valid ||
	    authctxt->failures >= options.max_authtries / 2 ||
	    strcmp(method, "password") == 0)
		authlog = logit;

	if (authctxt->postponed)
		authmsg = "Postponed";
	else
		authmsg = authenticated ? "Accepted" : "Failed";

	authlog("%s %s for %s%.100s from %.200s port %d%s",
	    authmsg,
	    method,
	    authctxt->valid ? "" : "invalid user ",
	    authctxt->user,
	    get_remote_ipaddr(),
	    get_remote_port(),
	    info);
}

/*
 * Check whether root logins are disallowed.
 */
int
auth_root_allowed(const char *method)
{
	switch (options.permit_root_login) {
	case PERMIT_YES:
		return 1;
	case PERMIT_NO_PASSWD:
		if (strcmp(method, "password") != 0)
			return 1;
		break;
	case PERMIT_FORCED_ONLY:
		if (forced_command) {
			logit("Root login accepted for forced command.");
			return 1;
		}
		break;
	}
	logit("ROOT LOGIN REFUSED FROM %.200s", get_remote_ipaddr());
	return 0;
}


/*
 * Given a template and a passwd structure, build a filename
 * by substituting % tokenised options. Currently, %% becomes '%',
 * %h becomes the home directory and %u the username.
 *
 * This returns a buffer allocated by xmalloc.
 */
static char *
expand_authorised_keys(const char *filename, struct passwd *pw)
{
	char *file, ret[MAXPATHLEN];
	int i;

	file = percent_expand(filename, "h", pw->pw_dir,
	    "u", pw->pw_name, (char *)NULL);

	/*
	 * Ensure that filename starts anchored. If not, be backward
	 * compatible and prepend the '%h/'
	 */
	if (*file == '/')
		return (file);

	i = snprintf(ret, sizeof(ret), "%s/%s", pw->pw_dir, file);
	if (i < 0 || (size_t)i >= sizeof(ret))
		fatal("expand_authorised_keys: path too long");
	xfree(file);
	return (xstrdup(ret));
}

char *
authorised_keys_file(struct passwd *pw)
{
	if (!pw->pw_dir || !pw->pw_dir[0] || (pw->pw_dir[0] == '/' &&
	    !pw->pw_dir[1]))
		return (xstrdup(_PATH_SSH_ROOT_PERMITTED_KEYS));
	return expand_authorised_keys(options.authorised_keys_file1, pw);
}

char *
authorised_keys_file2(struct passwd *pw)
{
	return expand_authorised_keys(options.authorised_keys_file2, pw);
}

/* return ok if key exists in sysfile or userfile */
HostStatus
check_key_in_hostfiles(struct passwd *pw, Key *key, const char *host,
    const char *sysfile, const char *userfile)
{
	Key *found;
	char *user_hostfile;
	struct stat st;
	HostStatus host_status;

	/* Check if we know the host and its host key. */
	found = key_new(key->type);
	host_status = check_host_in_hostfile(sysfile, host, key, found, NULL);

	if (host_status != HOST_OK && userfile != NULL) {
		user_hostfile = tilde_expand_filename(userfile, pw->pw_uid);
		if (options.strict_modes &&
		    (stat(user_hostfile, &st) == 0) &&
		    ((st.st_uid != 0 && st.st_uid != pw->pw_uid) ||
		    (st.st_mode & 022) != 0)) {
			logit("Authentication refused for %.100s: "
			    "bad owner or modes for %.200s",
			    pw->pw_name, user_hostfile);
		} else {
			temporarily_use_uid(pw);
			host_status = check_host_in_hostfile(user_hostfile,
			    host, key, found, NULL);
			restore_uid();
		}
		xfree(user_hostfile);
	}
	key_free(found);

	debug2("check_key_in_hostfiles: key %s for %s", host_status == HOST_OK ?
	    "ok" : "not found", host);
	return host_status;
}


/*
 * Check a given file for security. This is defined as all components
 * of the path to the file must be owned by either the owner of
 * of the file or root and no directories must be group or world writable.
 *
 * XXX Should any specific check be done for sym links ?
 *
 * Takes an open file descriptor, the file name, a uid and and
 * error buffer plus max size as arguments.
 *
 * Returns 0 on success and -1 on failure
 */
static int
secure_filename(FILE *f, const char *file, struct passwd *pw,
    char *err, size_t errlen)
{
	uid_t uid = pw->pw_uid;
	char buf[MAXPATHLEN], homedir[MAXPATHLEN];
	char *cp;
	int comparehome = 0;
	struct stat st;

	if (realpath(file, buf) == NULL) {
		snprintf(err, errlen, "realpath %s failed: %s", file,
		    strerror(errno));
		return -1;
	}
	if (realpath(pw->pw_dir, homedir) != NULL)
		comparehome = 1;

	/* check the open file to avoid races */
	if (fstat(fileno(f), &st) < 0 ||
	    (st.st_uid != 0 && st.st_uid != uid) ||
	    (st.st_mode & 022) != 0) {
		snprintf(err, errlen, "bad ownership or modes for file %s",
		    buf);
		return -1;
	}

	/* for each component of the canonical path, walking upwards */
	for (;;) {
		if ((cp = dirname(buf)) == NULL) {
			snprintf(err, errlen, "dirname() failed");
			return -1;
		}
		strlcpy(buf, cp, sizeof(buf));

		debug3("secure_filename: checking '%s'", buf);
		if (stat(buf, &st) < 0 ||
		    (st.st_uid != 0 && st.st_uid != uid) ||
		    (st.st_mode & 022) != 0) {
			snprintf(err, errlen,
			    "bad ownership or modes for directory %s", buf);
			return -1;
		}

		/* If are passed the homedir then we can stop */
		if (comparehome && strcmp(homedir, buf) == 0) {
			debug3("secure_filename: terminating check at '%s'",
			    buf);
			break;
		}
		/*
		 * dirname should always complete with a "/" path,
		 * but we can be paranoid and check for "." too
		 */
		if ((strcmp("/", buf) == 0) || (strcmp(".", buf) == 0))
			break;
	}
	return 0;
}

FILE *
auth_openkeyfile(const char *file, struct passwd *pw,
    int strict_modes __attribute__((__unused__)))
{
	char line[1024];
	struct stat st;
	int fd;
	FILE *f;

	/*
	 * Open the file containing the authorised keys
	 * Fail quietly if file does not exist
	 */
	if ((fd = open(file, O_RDONLY|O_NONBLOCK)) == -1)
		return NULL;

	if (fstat(fd, &st) < 0) {
		close(fd);
		return NULL;
	}
	if (!S_ISREG(st.st_mode)) {
		logit("User %s authorised keys %s is not a regular file",
		    pw->pw_name, file);
		close(fd);
		return NULL;
	}
	unset_nonblock(fd);
	if ((f = fdopen(fd, "r")) == NULL) {
		close(fd);
		return NULL;
	}
	if (options.strict_modes &&
	    secure_filename(f, file, pw, line, sizeof(line)) != 0) {
		fclose(f);
		logit("Authentication refused: %s", line);
		return NULL;
	}

	return f;
}

struct passwd *
getpwnamallow(const char *user)
{
	extern login_cap_t *lc;
#ifdef BSD_AUTH
	auth_session_t *as;
#endif
	struct passwd *pw;

	parse_server_match_config(&options, user,
	    get_canonical_hostname(options.use_dns), get_remote_ipaddr());
	if (options.mask_remote == 1 && !mask_remote_identity)
		/* postpone until user is actually auth’d successfully */
		need_maskremote = 1;
	else
		process_config_mask_remote(&options);

	pw = getpwnam(user);
	if (pw == NULL) {
		logit("Invalid user %.100s from %.100s",
		    user, get_remote_ipaddr());
		return (NULL);
	}
	if (!allowed_user(pw))
		return (NULL);
	if ((lc = login_getclass(pw->pw_class)) == NULL) {
		debug("unable to get login class: %s", user);
		return (NULL);
	}
#ifdef BSD_AUTH
	if ((as = auth_open()) == NULL || auth_setpwd(as, pw) != 0 ||
	    auth_approval(as, lc, pw->pw_name, (char *)"ssh") <= 0) {
		debug("Approval failure for %s", user);
		pw = NULL;
	}
	if (as != NULL)
		auth_close(as);
#endif
	if (pw != NULL)
		return (pwcopy(pw));
	return (NULL);
}

void
auth_debug_add(const char *fmt,...)
{
	char buf[1024];
	va_list args;

	if (!auth_debug_init)
		return;

	va_start(args, fmt);
	vsnprintf(buf, sizeof(buf), fmt, args);
	va_end(args);
	buffer_put_cstring(&auth_debug, buf);
}

void
auth_debug_send(void)
{
	char *msg;

	if (!auth_debug_init)
		return;
	while (buffer_len(&auth_debug)) {
		msg = buffer_get_string(&auth_debug, NULL);
		packet_send_debug("%s", msg);
		xfree(msg);
	}
}

void
auth_debug_reset(void)
{
	if (auth_debug_init)
		buffer_clear(&auth_debug);
	else {
		buffer_init(&auth_debug);
		auth_debug_init = 1;
	}
}

struct passwd *
fakepw(void)
{
	static struct passwd fake;

	memset(&fake, 0, sizeof(fake));
	fake.pw_name = (char *)"NOUSER";
	fake.pw_passwd =
	    (char *)"$2a$06$r3.juUaHZDlIbQaO2dS9FuYxL1W9M81R1Tc92PoSNmzvpEqLkLGrK";
	fake.pw_gecos = (char *)"NOUSER";
	fake.pw_uid = (uid_t)-1;
	fake.pw_gid = (gid_t)-1;
	fake.pw_class = (char *)"";
	fake.pw_dir = (char *)"/nonexist";
	fake.pw_shell = (char *)"/nonexist";

	return (&fake);
}
@


1.13
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d59 1
a59 1
__RCSID("$MirOS: src/usr.bin/ssh/auth.c,v 1.12 2011/01/15 21:52:39 tg Exp $");
d63 1
d186 5
d446 5
@


1.12
log
@Introduce /etc/ssh/root:config and /etc/ssh/root:known_hosts
and /etc/ssh/root:authorised_keys for the superuser if his
HOME directory is unset, empty or, not normalised, "/" (root).
十̲CVS: ----------------------------------------------------------------------
@
text
@d3 2
d59 1
a59 1
__RCSID("$MirOS: src/usr.bin/ssh/auth.c,v 1.11 2009/10/04 14:29:01 tg Exp $");
d390 1
a390 1
    int strict_modes __attribute__((unused)))
@


1.11
log
@• merge newer OpenSSH
• KNF in our diff – style(9)
• some const cleanliness (build with __CRAZY=Yes mostly)
@
text
@d55 1
d57 1
a57 1
__RCSID("$MirOS: src/usr.bin/ssh/auth.c,v 1.10 2008/12/16 22:13:26 tg Exp $");
d263 4
a266 1
	return expand_authorised_keys(options.authorised_keys_file, pw);
@


1.10
log
@really merge OpenSSH-current into MirBSD Secure SHell 10uA4
@
text
@d56 1
a56 1
__RCSID("$MirOS: src/usr.bin/ssh/auth.c,v 1.9 2008/12/16 20:55:18 tg Exp $");
a59 1
extern int use_privsep;
d208 1
a208 1
auth_root_allowed(char *method)
d383 2
a384 1
auth_openkeyfile(const char *file, struct passwd *pw, int strict_modes)
@


1.9
log
@fastmerge, do not use yet!
@
text
@d56 1
a56 1
__RCSID("$MirOS: src/usr.bin/ssh/auth.c,v 1.8 2008/03/02 21:14:18 tg Exp $");
d392 1
a392 1
	 * Open the file containing the authorized keys
d403 1
a403 1
		logit("User %s authorized keys %s is not a regular file",
@


1.8
log
@merge’n’fix
@
text
@d1 1
a1 1
/* $OpenBSD: auth.c,v 1.78 2007/09/21 08:15:29 djm Exp $ */
d30 1
d38 1
d56 1
a56 1
__RCSID("$MirOS: src/usr.bin/ssh/auth.c,v 1.7 2007/09/02 18:53:13 tg Exp $");
d323 1
a323 1
int
d383 40
@


1.7
log
@merge (luckily no need to change the distrib/special/sshd)
@
text
@d1 1
a1 1
/* $OpenBSD: auth.c,v 1.77 2007/08/23 02:55:51 djm Exp $ */
d54 1
a54 1
__RCSID("$MirOS: src/usr.bin/ssh/auth.c,v 1.6 2006/09/20 21:40:55 tg Exp $");
@


1.6
log
@finish merging
@
text
@d1 1
a1 1
/* $OpenBSD: auth.c,v 1.75 2006/08/03 03:34:41 deraadt Exp $ */
d31 1
d54 1
a54 1
__RCSID("$MirOS$");
a383 1
#ifdef HAVE_LOGIN_CAP
a387 1
#endif
a400 1
#ifdef HAVE_LOGIN_CAP
a413 1
#endif
@


1.5
log
@fix spelling and pubkey authentication
@
text
@d1 1
a1 1
/* $OpenBSD: auth.c,v 1.67 2006/03/30 11:40:21 dtucker Exp $ */
d26 1
a26 3
#include "includes.h"
__RCSID("$MirOS: src/usr.bin/ssh/auth.c,v 1.4 2006/04/19 10:40:44 tg Exp $");

d29 1
d32 4
d41 1
d43 2
a47 2
#include "buffer.h"
#include "bufaux.h"
a49 1
#include "bufaux.h"
d53 2
d391 3
@


1.4
log
@merge and clean up
@
text
@d27 1
a27 1
__RCSID("$MirOS: src/usr.bin/ssh/auth.c,v 1.3 2006/02/22 02:16:44 tg Exp $");
d230 1
a230 1
expand_authorized_keys(const char *filename, struct passwd *pw)
d247 1
a247 1
		fatal("expand_authorized_keys: path too long");
d253 1
a253 1
authorized_keys_file(struct passwd *pw)
d255 1
a255 1
	return expand_authorized_keys(options.authorized_keys_file, pw);
d259 1
a259 1
authorized_keys_file2(struct passwd *pw)
d261 1
a261 1
	return expand_authorized_keys(options.authorized_keys_file2, pw);
@


1.3
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 1
d27 1
a27 1
RCSID("$MirOS: auth.c,v 1.62 2006/02/20 17:19:53 stevesk Exp $");
d48 1
d52 1
d172 3
a205 1
		break;
d232 2
a233 1
	char *file, *ret;
d245 2
a246 4
	ret = xmalloc(MAXPATHLEN);
	if (strlcpy(ret, pw->pw_dir, MAXPATHLEN) >= MAXPATHLEN ||
	    strlcat(ret, "/", MAXPATHLEN) >= MAXPATHLEN ||
	    strlcat(ret, file, MAXPATHLEN) >= MAXPATHLEN)
a247 1

d249 1
a249 1
	return (ret);
@


1.2
log
@merge; bump version; fix up manpages and includes a little
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth.c,v 1.62 2006/02/20 17:19:53 stevesk Exp $");
d69 1
a69 1
	char *shell;
d163 2
a164 1
auth_log(Authctxt *authctxt, int authenticated, char *method, char *info)
d167 1
a167 1
	char *authmsg;
d398 1
a398 1
	    auth_approval(as, lc, pw->pw_name, "ssh") <= 0) {
d457 1
a457 1
	fake.pw_name = "NOUSER";
d459 2
a460 2
	    "$2a$06$r3.juUaHZDlIbQaO2dS9FuYxL1W9M81R1Tc92PoSNmzvpEqLkLGrK";
	fake.pw_gecos = "NOUSER";
d463 3
a465 3
	fake.pw_class = "";
	fake.pw_dir = "/nonexist";
	fake.pw_shell = "/nonexist";
@


1.1
log
@Initial revision
@
text
@d26 3
a28 1
RCSID("$OpenBSD: auth.c,v 1.57 2005/01/22 08:17:59 dtucker Exp $");
d31 1
d70 1
a70 1
	int i;
d95 2
a96 1
	if (options.num_deny_users > 0 || options.num_allow_users > 0) {
d223 2
a224 2
char *
expand_filename(const char *filename, struct passwd *pw)
d226 1
a226 3
	Buffer buffer;
	char *file;
	const char *cp;
d228 2
a229 25
	/*
	 * Build the filename string in the buffer by making the appropriate
	 * substitutions to the given file name.
	 */
	buffer_init(&buffer);
	for (cp = filename; *cp; cp++) {
		if (cp[0] == '%' && cp[1] == '%') {
			buffer_append(&buffer, "%", 1);
			cp++;
			continue;
		}
		if (cp[0] == '%' && cp[1] == 'h') {
			buffer_append(&buffer, pw->pw_dir, strlen(pw->pw_dir));
			cp++;
			continue;
		}
		if (cp[0] == '%' && cp[1] == 'u') {
			buffer_append(&buffer, pw->pw_name,
			    strlen(pw->pw_name));
			cp++;
			continue;
		}
		buffer_append(&buffer, cp, 1);
	}
	buffer_append(&buffer, "\0", 1);
d235 8
a242 6
	file = xmalloc(MAXPATHLEN);
	cp = buffer_ptr(&buffer);
	if (*cp != '/')
		snprintf(file, MAXPATHLEN, "%s/%s", pw->pw_dir, cp);
	else
		strlcpy(file, cp, MAXPATHLEN);
d244 2
a245 2
	buffer_free(&buffer);
	return file;
d251 1
a251 1
	return expand_filename(options.authorized_keys_file, pw);
d257 1
a257 1
	return expand_filename(options.authorized_keys_file2, pw);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@OpenSSH-current
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth.c,v 1.58 2005/03/14 11:44:42 dtucker Exp $");
d92 1
a92 2
	if (options.num_deny_users > 0 || options.num_allow_users > 0 ||
	    options.num_deny_groups > 0 || options.num_allow_groups > 0) {
@


1.1.1.3
log
@most current OpenSSH.com
@
text
@d26 1
a26 1
RCSID("$OpenBSD: auth.c,v 1.60 2005/06/17 02:44:32 djm Exp $");
d67 1
a67 1
	u_int i;
d220 2
a221 2
static char *
expand_authorized_keys(const char *filename, struct passwd *pw)
d223 3
a225 1
	char *file, *ret;
d227 25
a251 2
	file = percent_expand(filename, "h", pw->pw_dir,
	    "u", pw->pw_name, (char *)NULL);
d257 6
a262 8
	if (*file == '/')
		return (file);

	ret = xmalloc(MAXPATHLEN);
	if (strlcpy(ret, pw->pw_dir, MAXPATHLEN) >= MAXPATHLEN ||
	    strlcat(ret, "/", MAXPATHLEN) >= MAXPATHLEN ||
	    strlcat(ret, file, MAXPATHLEN) >= MAXPATHLEN)
		fatal("expand_authorized_keys: path too long");
d264 2
a265 2
	xfree(file);
	return (ret);
d271 1
a271 1
	return expand_authorized_keys(options.authorized_keys_file, pw);
d277 1
a277 1
	return expand_authorized_keys(options.authorized_keys_file2, pw);
@


1.1.1.4
log
@import OpenSSH-current
@
text
@d26 1
a26 4
RCSID("$OpenBSD: auth.c,v 1.62 2006/02/20 17:19:53 stevesk Exp $");

#include <sys/types.h>
#include <sys/stat.h>
a28 1
#include <paths.h>
@


1.1.1.5
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@a0 1
/* $OpenBSD: auth.c,v 1.67 2006/03/30 11:40:21 dtucker Exp $ */
d26 1
a47 1
#include "monitor_wrap.h"
a50 1
extern int use_privsep;
a168 3
	if (use_privsep && !mm_is_monitor() && !authctxt->postponed)
		return;

d200 1
d227 1
a227 2
	char *file, ret[MAXPATHLEN];
	int i;
d239 4
a242 2
	i = snprintf(ret, sizeof(ret), "%s/%s", pw->pw_dir, file);
	if (i < 0 || (size_t)i >= sizeof(ret))
d244 1
d246 1
a246 1
	return (xstrdup(ret));
@


1.1.1.6
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: auth.c,v 1.75 2006/08/03 03:34:41 deraadt Exp $ */
d26 2
a29 1
#include <sys/param.h>
a30 1
#include <errno.h>
a32 4
#include <pwd.h>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>
a37 1
#include "buffer.h"
a38 2
#include "key.h"
#include "hostfile.h"
d42 2
d46 1
a47 3
#ifdef GSSAPI
#include "ssh-gss.h"
#endif
a384 3
	parse_server_match_config(&options, user,
	    get_canonical_hostname(options.use_dns), get_remote_ipaddr());

@


1.1.1.7
log
@more ssh updates
@
text
@d1 1
a1 1
/* $OpenBSD: auth.c,v 1.77 2007/08/23 02:55:51 djm Exp $ */
a31 1
#include <login_cap.h>
d384 1
d389 1
d403 1
d417 1
@


1.1.1.8
log
@newer openssh
@
text
@d1 1
a1 1
/* $OpenBSD: auth.c,v 1.78 2007/09/21 08:15:29 djm Exp $ */
d386 1
d388 1
d406 1
d414 1
@


1.1.1.9
log
@OpenSSH-current
@
text
@d1 1
a1 1
/* $OpenBSD: auth.c,v 1.80 2008/11/04 07:58:09 djm Exp $ */
a30 1
#include <fcntl.h>
a37 1
#include <unistd.h>
d322 1
a322 1
static int
a381 40
FILE *
auth_openkeyfile(const char *file, struct passwd *pw, int strict_modes)
{
	char line[1024];
	struct stat st;
	int fd;
	FILE *f;

	/*
	 * Open the file containing the authorized keys
	 * Fail quietly if file does not exist
	 */
	if ((fd = open(file, O_RDONLY|O_NONBLOCK)) == -1)
		return NULL;

	if (fstat(fd, &st) < 0) {
		close(fd);
		return NULL;
	}
	if (!S_ISREG(st.st_mode)) {
		logit("User %s authorized keys %s is not a regular file",
		    pw->pw_name, file);
		close(fd);
		return NULL;
	}
	unset_nonblock(fd);
	if ((f = fdopen(fd, "r")) == NULL) {
		close(fd);
		return NULL;
	}
	if (options.strict_modes &&
	    secure_filename(f, file, pw, line, sizeof(line)) != 0) {
		fclose(f);
		logit("Authentication refused: %s", line);
		return NULL;
	}

	return f;
}

@


