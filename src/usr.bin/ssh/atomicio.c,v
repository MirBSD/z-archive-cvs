head	1.7;
access;
symbols
	cvs-200910041320:1.1.1.7
	cvs-200903221200:1.1.1.7
	cvs-200812162015:1.1.1.7
	cvs-200804031830:1.1.1.7
	MIRBSD_10:1.6.0.2
	MIRBSD_10_BASE:1.6
	cvs-200803022030:1.1.1.7
	cvs-200709131337:1.1.1.7
	cvs-200709021830:1.1.1.7
	cvs-200708201200:1.1.1.7
	cvs-200706161500:1.1.1.5
	cvs-200705192215:1.1.1.5
	cvs-200704292000:1.1.1.5
	cvs-200703080900:1.1.1.5
	cvs-200701251600:1.1.1.5
	cvs-200612111600:1.1.1.5
	cvs-200611090230:1.1.1.5
	OPENBSD_4_0:1.1.1.5
	MIRBSD_9_BASE:1.3
	cvs-200606162342:1.1.1.4
	cvs-200606022000:1.1.1.4
	cvs-200604191000:1.1.1.4
	cvs-200602220045:1.1.1.3
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200512201942:1.1.1.2
	cvs-200511231930:1.1.1.2
	cvs-200507211800:1.1.1.2
	cvs-200506221550:1.1.1.2
	cvs-200505050030:1.1.1.1
	cvs-200504291700:1.1.1.1
	cvs-200504261445:1.1.1.1
	cvs-200504141900:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2008.12.16.22.13.25;	author tg;	state Exp;
branches;
next	1.6;
commitid	10049482819766381ED;

1.6
date	2007.06.30.03.03.17;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004685C80B2CA9D3CD;

1.5
date	2007.06.21.14.46.45;	author tg;	state Exp;
branches;
next	1.4;
commitid	100467A8F6B58FA7CCA;

1.4
date	2006.09.20.21.40.54;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004511B578580E7F04;

1.3
date	2006.04.19.10.40.43;	author tg;	state Exp;
branches;
next	1.2;
commitid	100444613BD3A91C28B;

1.2
date	2006.02.22.02.16.43;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043FBC991512A442B;

1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.06.22.15.56.23;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	181342b98a38fe99;

1.1.1.3
date	2006.02.22.00.51.35;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	10043FBB5A933C3BB9B;

1.1.1.4
date	2006.04.19.10.15.02;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10044460DB21E1F715C;

1.1.1.5
date	2006.09.20.19.06.47;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10045119150397FC669;

1.1.1.6
date	2007.06.21.14.45.52;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	100467A8F3058BE2B8C;

1.1.1.7
date	2007.06.30.03.02.21;	author tg;	state Exp;
branches;
next	;
commitid	1004685C7C93BF32284;


desc
@@


1.7
log
@really merge OpenSSH-current into MirBSD Secure SHell 10uA4
@
text
@/* $OpenBSD: atomicio.c,v 1.25 2007/06/25 12:02:27 dtucker Exp $ */
/*
 * Copyright (c) 2006 Damien Miller. All rights reserved.
 * Copyright (c) 2005 Anil Madhavapeddy. All rights reserved.
 * Copyright (c) 1995,1999 Theo de Raadt.  All rights reserved.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/uio.h>

#include <errno.h>
#include <poll.h>
#include <string.h>
#include <unistd.h>

#include "atomicio.h"

/*
 * ensure all of data on socket comes through. f==read || f==vwrite
 */
size_t
atomicio(ssize_t (*f) (int, void *, size_t), int fd, void *_s, size_t n)
{
	char *s = _s;
	size_t pos = 0;
	ssize_t res;
	struct pollfd pfd;

	pfd.fd = fd;
	pfd.events = f == read ? POLLIN : POLLOUT;
	while (n > pos) {
		res = (f) (fd, s + pos, n - pos);
		switch (res) {
		case -1:
			if (errno == EINTR)
				continue;
			if (errno == EAGAIN) {
				(void)poll(&pfd, 1, -1);
				continue;
			}
			return 0;
		case 0:
			errno = EPIPE;
			return pos;
		default:
			pos += (size_t)res;
		}
	}
	return (pos);
}

/*
 * ensure all of data on socket comes through. f==readv || f==writev
 */
size_t
atomiciov(ssize_t (*f) (int, const struct iovec *, int), int fd,
    const struct iovec *_iov, int iovcnt)
{
	size_t pos = 0, rem;
	ssize_t res;
	struct iovec iov_array[IOV_MAX], *iov = iov_array;
	struct pollfd pfd;

	if (iovcnt > IOV_MAX) {
		errno = EINVAL;
		return 0;
	}
	/* Make a copy of the iov array because we may modify it below */
	memcpy(iov, _iov, iovcnt * sizeof(*_iov));

	pfd.fd = fd;
	pfd.events = f == readv ? POLLIN : POLLOUT;
	for (; iovcnt > 0 && iov[0].iov_len > 0;) {
		res = (f) (fd, iov, iovcnt);
		switch (res) {
		case -1:
			if (errno == EINTR)
				continue;
			if (errno == EAGAIN) {
				(void)poll(&pfd, 1, -1);
				continue;
			}
			return 0;
		case 0:
			errno = EPIPE;
			return pos;
		default:
			rem = (size_t)res;
			pos += rem;
			/* skip completed iov entries */
			while (iovcnt > 0 && rem >= iov[0].iov_len) {
				rem -= iov[0].iov_len;
				iov++;
				iovcnt--;
			}
			/* This shouldn't happen... */
			if (rem > 0 && (iovcnt <= 0 || rem > iov[0].iov_len)) {
				errno = EFAULT;
				return 0;
			}
			if (iovcnt == 0)
				break;
			/* update pointer in partially complete iov */
			iov[0].iov_base = ((char *)iov[0].iov_base) + rem;
			iov[0].iov_len -= rem;
		}
	}
	return pos;
}
@


1.6
log
@merge’n’bump
@
text
@a38 2
__RCSID("$MirOS: src/usr.bin/ssh/atomicio.c,v 1.5 2007/06/21 14:46:45 tg Exp $");

@


1.5
log
@merge, bump
@
text
@d1 1
a1 1
/* $OpenBSD: atomicio.c,v 1.24 2007/06/19 02:04:43 djm Exp $ */
a30 1
#include <sys/poll.h>
d33 1
d39 1
a39 1
__RCSID("$MirOS: src/usr.bin/ssh/atomicio.c,v 1.4 2006/09/20 21:40:54 tg Exp $");
@


1.4
log
@finish merging
@
text
@d1 1
a1 1
/* $OpenBSD: atomicio.c,v 1.23 2006/08/03 03:34:41 deraadt Exp $ */
d31 1
d35 1
d39 1
a39 1
__RCSID("$MirOS$");
d50 1
d52 2
d58 1
a58 1
			if (errno == EINTR || errno == EAGAIN)
d60 4
d85 1
d94 2
d100 1
a100 1
			if (errno == EINTR || errno == EAGAIN)
d102 4
@


1.3
log
@merge and clean up
@
text
@d1 1
a1 1
/* $OpenBSD: atomicio.c,v 1.19 2006/04/16 07:59:00 djm Exp $ */
d29 5
a33 2
#include "includes.h"
__RCSID("$MirOS: src/usr.bin/ssh/atomicio.c,v 1.2 2006/02/22 02:16:43 tg Exp $");
d37 2
@


1.2
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 1
d3 1
d30 1
a30 1
RCSID("$MirOS: atomicio.c,v 1.14 2006/02/11 19:31:18 otto Exp $");
d60 52
@


1.1
log
@Initial revision
@
text
@d2 1
d28 1
a28 1
RCSID("$OpenBSD: atomicio.c,v 1.12 2003/07/31 15:50:16 avsm Exp $");
d35 2
a36 6
ssize_t
atomicio(f, fd, _s, n)
	ssize_t (*f) (int, void *, size_t);
	int fd;
	void *_s;
	size_t n;
d39 2
a40 1
	ssize_t res, pos = 0;
d48 1
d50 2
a51 1
			return (res);
d53 1
a53 1
			pos += res;
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@most current OpenSSH.com
@
text
@a1 1
 * Copyright (c) 2005 Anil Madhavapeddy. All rights reserved.
d27 1
a27 1
RCSID("$OpenBSD: atomicio.c,v 1.13 2005/05/24 17:32:43 avsm Exp $");
d34 1
a34 1
size_t
d42 1
a42 2
	size_t pos = 0;
	ssize_t res;
a49 1
			return 0;
d51 1
a51 2
			errno = EPIPE;
			return pos;
d53 1
a53 1
			pos += (u_int)res;
@


1.1.1.3
log
@import OpenSSH-current
@
text
@d28 1
a28 1
RCSID("$OpenBSD: atomicio.c,v 1.14 2006/02/11 19:31:18 otto Exp $");
d57 1
a57 1
			pos += (size_t)res;
@


1.1.1.4
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@a0 1
/* $OpenBSD: atomicio.c,v 1.19 2006/04/16 07:59:00 djm Exp $ */
a1 1
 * Copyright (c) 2006 Damien Miller. All rights reserved.
d28 1
d36 5
a40 1
atomicio(ssize_t (*f) (int, void *, size_t), int fd, void *_s, size_t n)
a61 52

/*
 * ensure all of data on socket comes through. f==readv || f==writev
 */
size_t
atomiciov(ssize_t (*f) (int, const struct iovec *, int), int fd,
    const struct iovec *_iov, int iovcnt)
{
	size_t pos = 0, rem;
	ssize_t res;
	struct iovec iov_array[IOV_MAX], *iov = iov_array;

	if (iovcnt > IOV_MAX) {
		errno = EINVAL;
		return 0;
	}
	/* Make a copy of the iov array because we may modify it below */
	memcpy(iov, _iov, iovcnt * sizeof(*_iov));

	for (; iovcnt > 0 && iov[0].iov_len > 0;) {
		res = (f) (fd, iov, iovcnt);
		switch (res) {
		case -1:
			if (errno == EINTR || errno == EAGAIN)
				continue;
			return 0;
		case 0:
			errno = EPIPE;
			return pos;
		default:
			rem = (size_t)res;
			pos += rem;
			/* skip completed iov entries */
			while (iovcnt > 0 && rem >= iov[0].iov_len) {
				rem -= iov[0].iov_len;
				iov++;
				iovcnt--;
			}
			/* This shouldn't happen... */
			if (rem > 0 && (iovcnt <= 0 || rem > iov[0].iov_len)) {
				errno = EFAULT;
				return 0;
			}
			if (iovcnt == 0)
				break;
			/* update pointer in partially complete iov */
			iov[0].iov_base = ((char *)iov[0].iov_base) + rem;
			iov[0].iov_len -= rem;
		}
	}
	return pos;
}
@


1.1.1.5
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: atomicio.c,v 1.23 2006/08/03 03:34:41 deraadt Exp $ */
d29 1
a29 5
#include <sys/param.h>
#include <sys/uio.h>

#include <errno.h>
#include <string.h>
@


1.1.1.6
log
@avoid spin
@
text
@d1 1
a1 1
/* $OpenBSD: atomicio.c,v 1.24 2007/06/19 02:04:43 djm Exp $ */
a30 1
#include <sys/poll.h>
a33 1
#include <unistd.h>
a45 1
	struct pollfd pfd;
a46 2
	pfd.fd = fd;
	pfd.events = f == read ? POLLIN : POLLOUT;
d51 1
a51 1
			if (errno == EINTR)
a52 4
			if (errno == EAGAIN) {
				(void)poll(&pfd, 1, -1);
				continue;
			}
a73 1
	struct pollfd pfd;
a81 2
	pfd.fd = fd;
	pfd.events = f == readv ? POLLIN : POLLOUT;
d86 1
a86 1
			if (errno == EINTR)
a87 4
			if (errno == EAGAIN) {
				(void)poll(&pfd, 1, -1);
				continue;
			}
@


1.1.1.7
log
@• channels.c:
  Correct test for window updates every three packets; prevents sending
  window updates for every single packet.  ok markus@@
• atomicio.c:
  Include <poll.h> like the man page says rather than <sys/poll.h>.  ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: atomicio.c,v 1.25 2007/06/25 12:02:27 dtucker Exp $ */
d31 1
a33 1
#include <poll.h>
@


