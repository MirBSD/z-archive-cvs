head	1.7;
access;
symbols
	cvs-200910041320:1.1.1.4
	cvs-200903221200:1.1.1.4
	cvs-200812162015:1.1.1.4
	cvs-200804031830:1.1.1.4
	MIRBSD_10:1.6.0.2
	MIRBSD_10_BASE:1.6
	cvs-200803022030:1.1.1.4
	cvs-200709131337:1.1.1.4
	cvs-200709021830:1.1.1.3
	cvs-200708201200:1.1.1.3
	cvs-200706161500:1.1.1.3
	cvs-200705192215:1.1.1.3
	cvs-200704292000:1.1.1.3
	cvs-200703080900:1.1.1.3
	cvs-200701251600:1.1.1.3
	cvs-200612111600:1.1.1.3
	cvs-200611090230:1.1.1.3
	OPENBSD_4_0:1.1.1.3
	MIRBSD_9_BASE:1.3
	cvs-200606162342:1.1.1.2
	cvs-200606022000:1.1.1.2
	cvs-200604191000:1.1.1.2
	cvs-200602220045:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200512201942:1.1.1.1
	cvs-200511231930:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200506221550:1.1.1.1
	cvs-200505050030:1.1.1.1
	cvs-200504291700:1.1.1.1
	cvs-200504261445:1.1.1.1
	cvs-200504141900:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2013.10.31.20.07.15;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005272B7081B0E5655;

1.6
date	2007.09.13.13.52.57;	author tg;	state Exp;
branches;
next	1.5;
commitid	10046E940B668DE9A0B;

1.5
date	2007.07.05.22.48.52;	author tg;	state Exp;
branches;
next	1.4;
commitid	100468D756631407A8A;

1.4
date	2006.09.20.21.41.08;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004511B578580E7F04;

1.3
date	2006.04.19.10.40.58;	author tg;	state Exp;
branches;
next	1.2;
commitid	100444613BD3A91C28B;

1.2
date	2006.02.22.02.16.50;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043FBC991512A442B;

1.1
date	2005.02.05.17.29.55;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.55;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.04.19.10.15.06;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	10044460DB21E1F715C;

1.1.1.3
date	2006.09.20.19.06.50;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	10045119150397FC669;

1.1.1.4
date	2007.09.13.13.39.10;	author tg;	state Exp;
branches;
next	;
commitid	10046E93D7724AAC1F8;


desc
@@


1.7
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/* $OpenBSD: sshlogin.c,v 1.26 2007/09/11 15:47:17 gilles Exp $ */
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright © 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * This file performs some of the things login(1) normally does.  We cannot
 * easily use something like login -p -h host -f user, because there are
 * several different logins around, and it is hard to determined what kind of
 * login the current system has.  Also, we want to be able to execute commands
 * on a tty.
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 *
 * Copyright (c) 1999 Theo de Raadt.  All rights reserved.
 * Copyright (c) 1999 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/socket.h>

#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <util.h>
#include <utmp.h>
#include <stdarg.h>

#include "sshlogin.h"
#include "log.h"
#include "buffer.h"
#include "servconf.h"

__RCSID("$MirOS: src/usr.bin/ssh/sshlogin.c,v 1.6 2007/09/13 13:52:57 tg Exp $");

extern Buffer loginmsg;
extern ServerOptions options;

#ifdef SMALL
#define usmall	__attribute__((__unused__))
#else
#define usmall	/* nothing */
static time_t get_last_login_time(uid_t, const char *, char *, size_t);

/*
 * Returns the time when the user last logged in.  Returns 0 if the
 * information is not available.  This must be called before record_login.
 * The host the user logged in from will be returned in buf.
 */
static time_t
get_last_login_time(uid_t uid, const char *logname __attribute__((__unused__)),
    char *buf, size_t bufsize)
{
	struct lastlog ll;
	const char *lastlog;
	int fd;
	off_t pos, r;

	lastlog = _PATH_LASTLOG;
	buf[0] = '\0';

	fd = open(lastlog, O_RDONLY);
	if (fd < 0)
		return 0;

	pos = (long) uid * sizeof(ll);
	r = lseek(fd, pos, SEEK_SET);
	if (r == -1) {
		error("%s: lseek: %s", __func__, strerror(errno));
		return (0);
	}
	if (r != pos) {
		debug("%s: truncated lastlog", __func__);
		return (0);
	}
	if (read(fd, &ll, sizeof(ll)) != sizeof(ll)) {
		close(fd);
		return 0;
	}
	close(fd);
	if (bufsize > sizeof(ll.ll_host) + 1)
		bufsize = sizeof(ll.ll_host) + 1;
	strncpy(buf, ll.ll_host, bufsize - 1);
	buf[bufsize - 1] = '\0';
	return (time_t)ll.ll_time;
}

/*
 * Generate and store last login message.  This must be done before
 * login_login() is called and lastlog is updated.
 */
static void
store_lastlog_message(const char *user, uid_t uid)
{
	char *time_string, hostname[MAXHOSTNAMELEN] = "", buf[512];
	time_t last_login_time;

	if (!options.print_lastlog)
		return;

	last_login_time = get_last_login_time(uid, user, hostname,
	    sizeof(hostname));

	if (last_login_time != 0) {
		time_string = ctime(&last_login_time);
		time_string[strcspn(time_string, "\n")] = '\0';
		if (strcmp(hostname, "") == 0)
			snprintf(buf, sizeof(buf), "Last login: %s\r\n",
			    time_string);
		else
			snprintf(buf, sizeof(buf), "Last login: %s from %s\r\n",
			    time_string, hostname);
		buffer_append(&loginmsg, buf, strlen(buf));
	}
}
#endif

/*
 * Records that the user has logged in.  I wish these parts of operating
 * systems were more standardized.
 */
void
record_login(pid_t pid __attribute__((__unused__)), const char *tty usmall,
    const char *user usmall, uid_t uid usmall, const char *host usmall,
    struct sockaddr *addr __attribute__((__unused__)),
    socklen_t addrlen __attribute__((__unused__)))
{
#ifndef SMALL
	int fd;
	struct lastlog ll;
	const char *lastlog;
	struct utmp u;

	/* save previous login details before writing new */
	store_lastlog_message(user, uid);

	/* Construct an utmp/wtmp entry. */
	memset(&u, 0, sizeof(u));
	strncpy(u.ut_line, tty + 5, sizeof(u.ut_line));
	u.ut_time = time(NULL);
	strncpy(u.ut_name, user, sizeof(u.ut_name));
	strncpy(u.ut_host, host, sizeof(u.ut_host));

	login(&u);
	lastlog = _PATH_LASTLOG;

	/* Update lastlog unless actually recording a logout. */
	if (strcmp(user, "") != 0) {
		/*
		 * It is safer to bzero the lastlog structure first because
		 * some systems might have some extra fields in it (e.g. SGI)
		 */
		memset(&ll, 0, sizeof(ll));

		/* Update lastlog. */
		ll.ll_time = time(NULL);
		strncpy(ll.ll_line, tty + 5, sizeof(ll.ll_line));
		strncpy(ll.ll_host, host, sizeof(ll.ll_host));
		fd = open(lastlog, O_RDWR);
		if (fd >= 0) {
			lseek(fd, (off_t) ((long) uid * sizeof(ll)), SEEK_SET);
			if (write(fd, &ll, sizeof(ll)) != sizeof(ll))
				logit("Could not write %.100s: %.100s", lastlog, strerror(errno));
			close(fd);
		}
	}
#endif
}

/* Records that the user has logged out. */
void
record_logout(pid_t pid __attribute__((__unused__)), const char *tty usmall)
{
#ifndef SMALL
	const char *line = tty + 5;	/* /dev/ttyq8 -> ttyq8 */
	if (logout(line))
		logwtmp(line, "", "");
#endif
}
@


1.6
log
@merge and make UMAC-64 default message integrity whatever
@
text
@d4 2
d62 1
a62 1
__RCSID("$MirOS: src/usr.bin/ssh/sshlogin.c,v 1.5 2007/07/05 22:48:52 tg Exp $");
d68 1
a68 1
#define usmall	__attribute__((unused))
d79 1
a79 1
get_last_login_time(uid_t uid, const char *logname __attribute__((unused)),
d151 1
a151 1
record_login(pid_t pid __attribute__((unused)), const char *tty usmall,
d153 2
a154 2
    struct sockaddr *addr __attribute__((unused)),
    socklen_t addrlen __attribute__((unused)))
d200 1
a200 1
record_logout(pid_t pid __attribute__((unused)), const char *tty usmall)
@


1.5
log
@more wtmp/utmp crap
@
text
@d1 1
a1 1
/* $OpenBSD: sshlogin.c,v 1.25 2006/08/03 03:34:42 deraadt Exp $ */
d60 1
a60 1
__RCSID("$MirOS: src/usr.bin/ssh/sshlogin.c,v 1.4 2006/09/20 21:41:08 tg Exp $");
d132 1
a132 2
		if (strchr(time_string, '\n'))
		    *strchr(time_string, '\n') = '\0';
@


1.4
log
@finish merging
@
text
@d60 1
a60 1
__RCSID("$MirOS$");
d65 6
d76 1
a76 1
time_t
d143 1
d150 2
a151 2
record_login(pid_t pid __attribute__((unused)), const char *tty,
    const char *user, uid_t uid, const char *host,
d155 1
d194 1
d199 1
a199 1
record_logout(pid_t pid __attribute__((unused)), const char *tty)
d201 1
d205 1
@


1.3
log
@merge and clean up
@
text
@d1 1
a1 1
/* $OpenBSD: sshlogin.c,v 1.17 2006/03/25 18:36:15 deraadt Exp $ */
d42 2
a43 2
#include "includes.h"
__RCSID("$MirOS: src/usr.bin/ssh/sshlogin.c,v 1.2 2006/02/22 02:16:50 tg Exp $");
d45 6
d53 2
d60 2
@


1.2
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 1
d43 1
a43 1
RCSID("$MirOS: sshlogin.c,v 1.13 2004/08/12 09:18:24 djm Exp $");
d60 1
a60 1
u_long
d62 1
a62 1
    char *buf, u_int bufsize)
d95 1
a95 1
	return ll.ll_time;
d135 1
a135 1
    struct sockaddr * addr __attribute__((unused)),
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
RCSID("$OpenBSD: sshlogin.c,v 1.13 2004/08/12 09:18:24 djm Exp $");
d60 1
a60 1
get_last_login_time(uid_t uid, const char *logname,
d64 1
a64 1
	char *lastlog;
d132 4
a135 2
record_login(pid_t pid, const char *tty, const char *user, uid_t uid,
    const char *host, struct sockaddr * addr, socklen_t addrlen)
d139 1
a139 1
	char *lastlog;
d179 1
a179 1
record_logout(pid_t pid, const char *tty)
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@a0 1
/* $OpenBSD: sshlogin.c,v 1.17 2006/03/25 18:36:15 deraadt Exp $ */
d42 1
d59 1
a59 1
time_t
d61 1
a61 1
    char *buf, size_t bufsize)
d94 1
a94 1
	return (time_t)ll.ll_time;
d133 1
a133 1
    const char *host, struct sockaddr *addr, socklen_t addrlen)
@


1.1.1.3
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: sshlogin.c,v 1.25 2006/08/03 03:34:42 deraadt Exp $ */
d42 2
a43 10
#include <sys/types.h>
#include <sys/param.h>
#include <sys/socket.h>

#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
a45 2
#include <stdarg.h>

@


1.1.1.4
log
@Import latest OpenSSH upgrades
@
text
@d1 1
a1 1
/* $OpenBSD: sshlogin.c,v 1.26 2007/09/11 15:47:17 gilles Exp $ */
d125 2
a126 1
		time_string[strcspn(time_string, "\n")] = '\0';
@


