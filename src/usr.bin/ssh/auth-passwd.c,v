head	1.9;
access;
symbols
	cvs-200910041320:1.1.1.6
	cvs-200903221200:1.1.1.6
	cvs-200812162015:1.1.1.6
	cvs-200804031830:1.1.1.6
	MIRBSD_10:1.9.0.2
	MIRBSD_10_BASE:1.9
	cvs-200803022030:1.1.1.6
	cvs-200709131337:1.1.1.5
	cvs-200709021830:1.1.1.5
	cvs-200708201200:1.1.1.4
	cvs-200706161500:1.1.1.4
	cvs-200705192215:1.1.1.4
	cvs-200704292000:1.1.1.4
	cvs-200703080900:1.1.1.4
	cvs-200701251600:1.1.1.4
	cvs-200612111600:1.1.1.4
	cvs-200611090230:1.1.1.4
	OPENBSD_4_0:1.1.1.4
	MIRBSD_9_BASE:1.5
	cvs-200606162342:1.1.1.3
	cvs-200606022000:1.1.1.3
	cvs-200604191000:1.1.1.3
	cvs-200602220045:1.1.1.2
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200512201942:1.1.1.2
	cvs-200511231930:1.1.1.2
	cvs-200507211800:1.1.1.2
	cvs-200506221550:1.1.1.1
	cvs-200505050030:1.1.1.1
	cvs-200504291700:1.1.1.1
	cvs-200504261445:1.1.1.1
	cvs-200504141900:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2008.03.02.21.14.18;	author tg;	state Exp;
branches;
next	1.8;
commitid	10047CB18BB506A8527;

1.8
date	2007.09.02.18.53.12;	author tg;	state Exp;
branches;
next	1.7;
commitid	10046DB06AF681AF68C;

1.7
date	2006.09.22.12.29.00;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004513D7120F398258;

1.6
date	2006.09.20.21.40.55;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004511B578580E7F04;

1.5
date	2006.04.19.10.40.43;	author tg;	state Exp;
branches;
next	1.4;
commitid	100444613BD3A91C28B;

1.4
date	2006.02.22.02.16.43;	author tg;	state Exp;
branches;
next	1.3;
commitid	10043FBC991512A442B;

1.3
date	2005.11.23.18.04.18;	author tg;	state Exp;
branches;
next	1.2;
commitid	af74384af2ab463;

1.2
date	2005.03.13.18.33.29;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.21.00.22;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	560042e0092f571e;

1.1.1.3
date	2006.04.19.10.15.02;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	10044460DB21E1F715C;

1.1.1.4
date	2006.09.20.19.06.47;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10045119150397FC669;

1.1.1.5
date	2007.09.02.18.48.03;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10046DB0574023300F5;

1.1.1.6
date	2008.03.02.20.40.41;	author tg;	state Exp;
branches;
next	;
commitid	10047CB10DD30FAF062;


desc
@@


1.9
log
@merge’n’fix
@
text
@/* $OpenBSD: auth-passwd.c,v 1.43 2007/09/21 08:15:29 djm Exp $ */
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Password authentication.  This file contains the functions to check whether
 * the password is valid for the user.
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 *
 * Copyright (c) 1999 Dug Song.  All rights reserved.
 * Copyright (c) 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>

#include <login_cap.h>
#include <pwd.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <unistd.h>

#include "packet.h"
#include "buffer.h"
#include "log.h"
#include "servconf.h"
#include "key.h"
#include "hostfile.h"
#include "auth.h"
#include "auth-options.h"

__RCSID("$MirOS: src/usr.bin/ssh/auth-passwd.c,v 1.8 2007/09/02 18:53:12 tg Exp $");

extern Buffer loginmsg;
extern ServerOptions options;
int sys_auth_passwd(Authctxt *, const char *);

extern login_cap_t *lc;

#define DAY		(24L * 60 * 60) /* 1 day in seconds */
#define TWO_WEEKS	(2L * 7 * DAY)	/* 2 weeks in seconds */

#ifdef BSD_AUTH
static void
disable_forwarding(void)
{
	no_port_forwarding_flag = 1;
	no_agent_forwarding_flag = 1;
	no_x11_forwarding_flag = 1;
}
#endif

/*
 * Tries to authenticate the user using password.  Returns true if
 * authentication succeeds.
 */
int
auth_password(Authctxt *authctxt, const char *password)
{
	struct passwd * pw = authctxt->pw;
	int ok = authctxt->valid;

	if (pw->pw_uid == 0 && options.permit_root_login != PERMIT_YES)
		ok = 0;
	if (*password == '\0' && options.permit_empty_passwd == 0)
		return 0;
	return (sys_auth_passwd(authctxt, password) && ok);
}

#ifdef BSD_AUTH
static void
warn_expiry(Authctxt *authctxt, auth_session_t *as)
{
	char buf[256];
	quad_t pwtimeleft, actimeleft, daysleft, pwwarntime, acwarntime;

	pwwarntime = acwarntime = TWO_WEEKS;

	pwtimeleft = auth_check_change(as);
	actimeleft = auth_check_expire(as);
	if (authctxt->valid) {
		pwwarntime = login_getcaptime(lc, (char *)"password-warn",
		    TWO_WEEKS, TWO_WEEKS);
		acwarntime = login_getcaptime(lc, (char *)"expire-warn",
		    TWO_WEEKS, TWO_WEEKS);
	}
	if (pwtimeleft != 0 && pwtimeleft < pwwarntime) {
		daysleft = pwtimeleft / DAY + 1;
		snprintf(buf, sizeof(buf),
		    "Your password will expire in %lld day%s.\n",
		    daysleft, daysleft == 1 ? "" : "s");
		buffer_append(&loginmsg, buf, strlen(buf));
	}
	if (actimeleft != 0 && actimeleft < acwarntime) {
		daysleft = actimeleft / DAY + 1;
		snprintf(buf, sizeof(buf),
		    "Your account will expire in %lld day%s.\n",
		    daysleft, daysleft == 1 ? "" : "s");
		buffer_append(&loginmsg, buf, strlen(buf));
	}
}

int
sys_auth_passwd(Authctxt *authctxt, const char *password)
{
	struct passwd *pw = authctxt->pw;
	auth_session_t *as;
	static int expire_checked = 0;

	as = auth_usercheck(pw->pw_name, authctxt->style, (char *)"auth-ssh",
	    (char *)password);
	if (as == NULL)
		return (0);
	if (auth_getstate(as) & AUTH_PWEXPIRED) {
		auth_close(as);
		disable_forwarding();
		authctxt->force_pwchange = 1;
		return (1);
	} else {
		if (!expire_checked) {
			expire_checked = 1;
			warn_expiry(authctxt, as);
		}
		return (auth_close(as));
	}
}
#else
int
sys_auth_passwd(Authctxt *authctxt, const char *password)
{
	struct passwd *pw = authctxt->pw;
	char *encrypted_password;

	/* Check for users with no password. */
	if (strcmp(password, "") == 0 && strcmp(pw->pw_passwd, "") == 0)
		return (1);

	/* Encrypt the candidate password using the proper salt. */
	encrypted_password = crypt(password,
	    (pw->pw_passwd[0] && pw->pw_passwd[1]) ?
	    pw->pw_passwd : "xx");

	/*
	 * Authentication is accepted if the encrypted passwords
	 * are identical.
	 */
	return (strcmp(encrypted_password, pw->pw_passwd) == 0);
}
#endif
@


1.8
log
@merge (luckily no need to change the distrib/special/sshd)
@
text
@d1 1
a1 1
/* $OpenBSD: auth-passwd.c,v 1.42 2007/08/23 02:55:51 djm Exp $ */
d57 1
a57 1
__RCSID("$MirOS: src/usr.bin/ssh/auth-passwd.c,v 1.7 2006/09/22 12:29:00 tg Exp $");
@


1.7
log
@missing include and #ifdef for the non-BSD-auth case
@
text
@d1 1
a1 1
/* $OpenBSD: auth-passwd.c,v 1.40 2006/08/03 03:34:41 deraadt Exp $ */
d41 1
d57 1
a57 1
__RCSID("$MirOS: src/usr.bin/ssh/auth-passwd.c,v 1.6 2006/09/20 21:40:55 tg Exp $");
a62 1
#ifdef HAVE_LOGIN_CAP
a63 2
#endif

a105 1
#ifdef HAVE_LOGIN_CAP
a111 1
#endif
@


1.6
log
@finish merging
@
text
@d45 1
d56 1
a56 1
__RCSID("$MirOS$");
d70 1
d78 1
@


1.5
log
@merge and clean up
@
text
@d1 1
a1 1
/* $OpenBSD: auth-passwd.c,v 1.36 2006/03/25 13:17:01 djm Exp $ */
d39 6
a44 2
#include "includes.h"
__RCSID("$MirOS: src/usr.bin/ssh/auth-passwd.c,v 1.4 2006/02/22 02:16:43 tg Exp $");
d50 2
d55 2
@


1.4
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 1
d40 1
a40 1
RCSID("$MirOS: src/usr.bin/ssh/auth-passwd.c,v 1.3 2005/11/23 18:04:18 tg Exp $");
@


1.3
log
@fastmerge remainder of src/usr.bin
@
text
@d39 1
a39 1
RCSID("$MirOS: src/usr.bin/ssh/auth-passwd.c,v 1.2 2005/03/13 18:33:29 tg Exp $");
d98 4
a101 4
		pwwarntime = login_getcaptime(lc, "password-warn", TWO_WEEKS,
		    TWO_WEEKS);
		acwarntime = login_getcaptime(lc, "expire-warn", TWO_WEEKS,
		    TWO_WEEKS);
d127 1
a127 1
	as = auth_usercheck(pw->pw_name, authctxt->style, "auth-ssh",
@


1.2
log
@merge src/usr.bin
@
text
@d39 1
a39 1
RCSID("$MirOS$");
d129 2
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
RCSID("$OpenBSD: auth-passwd.c,v 1.33 2005/01/24 11:47:13 dtucker Exp $");
a81 8
#ifdef KRB5
	if (options.kerberos_authentication == 1) {
		int ret = auth_krb5_password(authctxt, password);
		if (ret == 1 || ret == 0)
			return ret && ok;
		/* Fall back to ordinary passwd authentication. */
	}
#endif
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d39 1
a39 1
RCSID("$OpenBSD: auth-passwd.c,v 1.34 2005/07/19 15:32:26 otto Exp $");
a136 2
	if (as == NULL)
		return (0);
@


1.1.1.3
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@a0 1
/* $OpenBSD: auth-passwd.c,v 1.36 2006/03/25 13:17:01 djm Exp $ */
d39 1
@


1.1.1.4
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: auth-passwd.c,v 1.40 2006/08/03 03:34:41 deraadt Exp $ */
d39 1
a39 6
#include <sys/types.h>

#include <pwd.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
a44 2
#include "key.h"
#include "hostfile.h"
@


1.1.1.5
log
@more ssh updates
@
text
@d1 1
a1 1
/* $OpenBSD: auth-passwd.c,v 1.42 2007/08/23 02:55:51 djm Exp $ */
a40 1
#include <login_cap.h>
d59 1
d61 2
d111 1
d118 1
@


1.1.1.6
log
@newer openssh
@
text
@d1 1
a1 1
/* $OpenBSD: auth-passwd.c,v 1.43 2007/09/21 08:15:29 djm Exp $ */
d98 1
d155 23
@


