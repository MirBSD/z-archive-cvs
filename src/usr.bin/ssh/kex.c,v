head	1.12;
access;
symbols
	cvs-200910041320:1.1.1.10
	cvs-200903221200:1.1.1.9
	cvs-200812162015:1.1.1.9
	cvs-200804031830:1.1.1.8
	MIRBSD_10:1.6.0.2
	MIRBSD_10_BASE:1.6
	cvs-200803022030:1.1.1.8
	cvs-200709131337:1.1.1.8
	cvs-200709021830:1.1.1.8
	cvs-200708201200:1.1.1.8
	cvs-200706161500:1.1.1.8
	cvs-200705192215:1.1.1.7
	cvs-200704292000:1.1.1.7
	cvs-200703080900:1.1.1.7
	cvs-200701251600:1.1.1.7
	cvs-200612111600:1.1.1.6
	cvs-200611090230:1.1.1.6
	OPENBSD_4_0:1.1.1.6
	MIRBSD_9_BASE:1.3
	cvs-200606162342:1.1.1.5
	cvs-200606022000:1.1.1.5
	cvs-200604191000:1.1.1.5
	cvs-200602220045:1.1.1.4
	MIRBSD_8:1.1.1.4.0.2
	MIRBSD_8_BASE:1.1.1.4
	cvs-200512201942:1.1.1.4
	cvs-200511231930:1.1.1.4
	cvs-200507211800:1.1.1.3
	cvs-200506221550:1.1.1.2
	cvs-200505050030:1.1.1.1
	cvs-200504291700:1.1.1.1
	cvs-200504261445:1.1.1.1
	cvs-200504141900:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.10.25.21.12.00;	author tg;	state Exp;
branches;
next	1.11;
commitid	100580FCAB30D2BB14B;

1.11
date	2013.10.31.20.07.12;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005272B7081B0E5655;

1.10
date	2010.09.21.21.24.36;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004C992261692DCA0F;

1.9
date	2009.10.04.14.29.03;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004AC8B1276FC00211;

1.8
date	2008.12.16.22.13.28;	author tg;	state Exp;
branches;
next	1.7;
commitid	10049482819766381ED;

1.7
date	2008.12.16.20.55.22;	author tg;	state Exp;
branches;
next	1.6;
commitid	100494815C97ECEEDBF;

1.6
date	2007.06.16.15.41.50;	author tg;	state Exp;
branches;
next	1.5;
commitid	100467404D10F2EE204;

1.5
date	2007.01.25.16.18.36;	author tg;	state Exp;
branches;
next	1.4;
commitid	10045B8D86E5B698AD6;

1.4
date	2006.09.20.21.40.59;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004511B578580E7F04;

1.3
date	2006.04.19.10.40.47;	author tg;	state Exp;
branches;
next	1.2;
commitid	100444613BD3A91C28B;

1.2
date	2006.02.22.02.16.46;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043FBC991512A442B;

1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.06.22.15.56.25;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	181342b98a38fe99;

1.1.1.3
date	2005.07.21.21.00.27;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	560042e0092f571e;

1.1.1.4
date	2005.11.23.19.34.14;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	116a4384c4467ffc;

1.1.1.5
date	2006.04.19.10.15.03;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10044460DB21E1F715C;

1.1.1.6
date	2006.09.20.19.06.47;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	10045119150397FC669;

1.1.1.7
date	2007.01.25.16.12.51;	author tg;	state Exp;
branches;
next	1.1.1.8;
commitid	10045B8D7100791C016;

1.1.1.8
date	2007.06.16.15.11.11;	author tg;	state Exp;
branches;
next	1.1.1.9;
commitid	1004673FD85114A3F32;

1.1.1.9
date	2008.12.16.20.15.33;	author tg;	state Exp;
branches;
next	1.1.1.10;
commitid	10049480C7A2701F5C0;

1.1.1.10
date	2009.10.04.13.25.44;	author tg;	state Exp;
branches;
next	;
commitid	1004AC8A2663BC008C5;


desc
@@


1.12
log
@I’m led to believe we’ll want this patch
@
text
@/* $OpenBSD: kex.c,v 1.81 2009/05/27 06:34:36 andreas Exp $ */
/*
 * Copyright © 2013
 *	mirabilos <m@@mirbsd.org>
 * Copyright (c) 2000, 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>

#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/crypto.h>

#include "xmalloc.h"
#include "ssh2.h"
#include "buffer.h"
#include "packet.h"
#include "compat.h"
#include "cipher.h"
#include "key.h"
#include "kex.h"
#include "log.h"
#include "mac.h"
#include "match.h"
#include "dispatch.h"
#include "monitor.h"

__RCSID("$MirOS: src/usr.bin/ssh/kex.c,v 1.11 2013/10/31 20:07:12 tg Exp $");

extern const EVP_MD *evp_ssh_sha256(void);

/* prototype */
static void kex_kexinit_finish(Kex *);
static void kex_choose_conf(Kex *);

/* put algorithm proposal into buffer */
static void
kex_prop2buf(Buffer *b, const char *proposal[PROPOSAL_MAX])
{
	u_int i;

	buffer_clear(b);
	/*
	 * add a dummy cookie, the cookie will be overwritten by
	 * kex_send_kexinit(), each time a kexinit is set
	 */
	for (i = 0; i < KEX_COOKIE_LEN; i++)
		buffer_put_char(b, 0);
	for (i = 0; i < PROPOSAL_MAX; i++)
		buffer_put_cstring(b, proposal[i]);
	buffer_put_char(b, 0);			/* first_kex_packet_follows */
	buffer_put_int(b, 0);			/* uint32 reserved */
}

/* parse buffer and return algorithm proposal */
static char **
kex_buf2prop(Buffer *raw, int *first_kex_follows)
{
	Buffer b;
	u_int i;
	char **proposal;

	proposal = xcalloc(PROPOSAL_MAX, sizeof(char *));

	buffer_init(&b);
	buffer_append(&b, buffer_ptr(raw), buffer_len(raw));
	/* skip cookie */
	for (i = 0; i < KEX_COOKIE_LEN; i++)
		buffer_get_char(&b);
	/* extract kex init proposal strings */
	for (i = 0; i < PROPOSAL_MAX; i++) {
		proposal[i] = buffer_get_string(&b,NULL);
		debug2("kex_parse_kexinit: %s", proposal[i]);
	}
	/* first kex follows / reserved */
	i = buffer_get_char(&b);
	if (first_kex_follows != NULL)
		*first_kex_follows = i;
	debug2("kex_parse_kexinit: first_kex_follows %d ", i);
	i = buffer_get_int(&b);
	debug2("kex_parse_kexinit: reserved %u ", i);
	buffer_free(&b);
	return proposal;
}

static void
kex_prop_free(char **proposal)
{
	u_int i;

	for (i = 0; i < PROPOSAL_MAX; i++)
		xfree(proposal[i]);
	xfree(proposal);
}

/* ARGSUSED */
static void
kex_protocol_error(int type, u_int32_t seq, void *ctxt __attribute__((__unused__)))
{
	error("Hm, kex protocol error: type %d seq %u", type, seq);
}

static void
kex_reset_dispatch(void)
{
	dispatch_range(SSH2_MSG_TRANSPORT_MIN,
	    SSH2_MSG_TRANSPORT_MAX, &kex_protocol_error);
	dispatch_set(SSH2_MSG_KEXINIT, &kex_input_kexinit);
}

void
kex_finish(Kex *kex)
{
	kex_reset_dispatch();

	packet_start(SSH2_MSG_NEWKEYS);
	packet_send();
	/* packet_write_wait(); */
	debug("SSH2_MSG_NEWKEYS sent");

	debug("expecting SSH2_MSG_NEWKEYS");
	packet_read_expect(SSH2_MSG_NEWKEYS);
	packet_check_eom();
	debug("SSH2_MSG_NEWKEYS received");

	kex->done = 1;
	buffer_clear(&kex->peer);
	/* buffer_clear(&kex->my); */
	kex->flags &= ~KEX_INIT_SENT;
	xfree(kex->name);
	kex->name = NULL;
}

void
kex_send_kexinit(Kex *kex)
{
	u_char *cookie;

	if (kex == NULL) {
		error("kex_send_kexinit: no kex, cannot rekey");
		return;
	}
	if (kex->flags & KEX_INIT_SENT) {
		debug("KEX_INIT_SENT");
		return;
	}
	kex->done = 0;

	/* generate a random cookie */
	if (buffer_len(&kex->my) < KEX_COOKIE_LEN)
		fatal("kex_send_kexinit: kex proposal too short");
	cookie = buffer_ptr(&kex->my);
	arc4random_buf(cookie, KEX_COOKIE_LEN);
	packet_start(SSH2_MSG_KEXINIT);
	packet_put_raw(buffer_ptr(&kex->my), buffer_len(&kex->my));
	packet_send();
	debug("SSH2_MSG_KEXINIT sent");
	kex->flags |= KEX_INIT_SENT;
}

/* ARGSUSED */
void
kex_input_kexinit(int type __attribute__((__unused__)),
    u_int32_t seq __attribute__((__unused__)), void *ctxt)
{
	char *ptr;
	u_int i, dlen;
	Kex *kex = (Kex *)ctxt;

	debug("SSH2_MSG_KEXINIT received");
	if (kex == NULL)
		fatal("kex_input_kexinit: no kex, cannot rekey");

	dispatch_set(SSH2_MSG_KEXINIT, NULL);
	ptr = packet_get_raw(&dlen);
	buffer_append(&kex->peer, ptr, dlen);

	/* discard packet */
	for (i = 0; i < KEX_COOKIE_LEN; i++)
		packet_get_char();
	for (i = 0; i < PROPOSAL_MAX; i++)
		xfree(packet_get_string(NULL));
	(void) packet_get_char();
	(void) packet_get_int();
	packet_check_eom();

	kex_kexinit_finish(kex);
}

Kex *
kex_setup(const char *proposal[PROPOSAL_MAX])
{
	Kex *kex;

	kex = xcalloc(1, sizeof(*kex));
	buffer_init(&kex->peer);
	buffer_init(&kex->my);
	kex_prop2buf(&kex->my, proposal);
	kex->done = 0;

	kex_send_kexinit(kex);					/* we start */
	kex_reset_dispatch();

	return kex;
}

static void
kex_kexinit_finish(Kex *kex)
{
	if (!(kex->flags & KEX_INIT_SENT))
		kex_send_kexinit(kex);

	kex_choose_conf(kex);

	if (kex->kex_type >= 0 && kex->kex_type < KEX_MAX &&
	    kex->kex[kex->kex_type] != NULL) {
		(kex->kex[kex->kex_type])(kex);
	} else {
		fatal("Unsupported key exchange %d", kex->kex_type);
	}
}

static void
choose_enc(Enc *enc, char *client, char *server)
{
	char *name = match_list(client, server, NULL);
	if (name == NULL)
		fatal("no matching cipher found: client %s server %s",
		    client, server);
	if ((enc->cipher = cipher_by_name(name)) == NULL)
		fatal("matching cipher is not supported: %s", name);
	enc->name = name;
	enc->enabled = 0;
	enc->iv = NULL;
	enc->key = NULL;
	enc->key_len = cipher_keylen(enc->cipher);
	enc->block_size = cipher_blocksize(enc->cipher);
}

static void
choose_mac(Mac *mac, char *client, char *server)
{
	char *name = match_list(client, server, NULL);
	if (name == NULL)
		fatal("no matching mac found: client %s server %s",
		    client, server);
	if (mac_setup(mac, name) < 0)
		fatal("unsupported mac %s", name);
	/* truncate the key */
	if (datafellows & SSH_BUG_HMAC)
		mac->key_len = 16;
	mac->name = name;
	mac->key = NULL;
	mac->enabled = 0;
}

static void
choose_comp(Comp *comp, char *client, char *server)
{
	char *name = match_list(client, server, NULL);
	if (name == NULL)
		fatal("no matching comp found: client %s server %s", client, server);
	if (strcmp(name, "zlib@@openssh.com") == 0) {
		comp->type = COMP_DELAYED;
	} else if (strcmp(name, "zlib") == 0) {
		comp->type = COMP_ZLIB;
	} else if (strcmp(name, "none") == 0) {
		comp->type = COMP_NONE;
	} else {
		fatal("unsupported comp %s", name);
	}
	comp->name = name;
}

static void
choose_kex(Kex *k, char *client, char *server)
{
	k->name = match_list(client, server, NULL);
	if (k->name == NULL)
		fatal("Unable to negotiate a key exchange method");
	if (strcmp(k->name, KEX_DH1) == 0) {
		k->kex_type = KEX_DH_GRP1_SHA1;
		k->evp_md = EVP_sha1();
	} else if (strcmp(k->name, KEX_DH14) == 0) {
		k->kex_type = KEX_DH_GRP14_SHA1;
		k->evp_md = EVP_sha1();
	} else if (strcmp(k->name, KEX_DHGEX_SHA1) == 0) {
		k->kex_type = KEX_DH_GEX_SHA1;
		k->evp_md = EVP_sha1();
	} else if (strcmp(k->name, KEX_DHGEX_SHA256) == 0) {
		k->kex_type = KEX_DH_GEX_SHA256;
		k->evp_md = evp_ssh_sha256();
	} else
		fatal("bad kex alg %s", k->name);
}

static void
choose_hostkeyalg(Kex *k, char *client, char *server)
{
	char *hostkeyalg = match_list(client, server, NULL);
	if (hostkeyalg == NULL)
		fatal("no hostkey alg");
	k->hostkey_type = key_type_from_name(hostkeyalg);
	if (k->hostkey_type == KEY_UNSPEC)
		fatal("bad hostkey alg '%s'", hostkeyalg);
	xfree(hostkeyalg);
}

static int
proposals_match(char *my[PROPOSAL_MAX], char *peer[PROPOSAL_MAX])
{
	static int check[] = {
		PROPOSAL_KEX_ALGS, PROPOSAL_SERVER_HOST_KEY_ALGS, -1
	};
	int *idx;
	char *p;

	for (idx = &check[0]; *idx != -1; idx++) {
		if ((p = strchr(my[*idx], ',')) != NULL)
			*p = '\0';
		if ((p = strchr(peer[*idx], ',')) != NULL)
			*p = '\0';
		if (strcmp(my[*idx], peer[*idx]) != 0) {
			debug2("proposal mismatch: my %s peer %s",
			    my[*idx], peer[*idx]);
			return (0);
		}
	}
	debug2("proposals match");
	return (1);
}

static void
kex_choose_conf(Kex *kex)
{
	Newkeys *newkeys;
	char **my, **peer;
	char **cprop, **sprop;
	int nenc, nmac, ncomp;
	u_int mode, ctos, need;
	int first_kex_follows, type;

	my   = kex_buf2prop(&kex->my, NULL);
	peer = kex_buf2prop(&kex->peer, &first_kex_follows);

	if (kex->server) {
		cprop=peer;
		sprop=my;
	} else {
		cprop=my;
		sprop=peer;
	}

	/* Algorithm Negotiation */
	for (mode = 0; mode < MODE_MAX; mode++) {
		newkeys = xcalloc(1, sizeof(*newkeys));
		kex->newkeys[mode] = newkeys;
		ctos = (!kex->server && mode == MODE_OUT) ||
		    (kex->server && mode == MODE_IN);
		nenc  = ctos ? PROPOSAL_ENC_ALGS_CTOS  : PROPOSAL_ENC_ALGS_STOC;
		nmac  = ctos ? PROPOSAL_MAC_ALGS_CTOS  : PROPOSAL_MAC_ALGS_STOC;
		ncomp = ctos ? PROPOSAL_COMP_ALGS_CTOS : PROPOSAL_COMP_ALGS_STOC;
		choose_enc (&newkeys->enc,  cprop[nenc],  sprop[nenc]);
		choose_mac (&newkeys->mac,  cprop[nmac],  sprop[nmac]);
		choose_comp(&newkeys->comp, cprop[ncomp], sprop[ncomp]);
		debug("kex: %s %s %s %s",
		    ctos ? "client->server" : "server->client",
		    newkeys->enc.name,
		    newkeys->mac.name,
		    newkeys->comp.name);
	}
	choose_kex(kex, cprop[PROPOSAL_KEX_ALGS], sprop[PROPOSAL_KEX_ALGS]);
	choose_hostkeyalg(kex, cprop[PROPOSAL_SERVER_HOST_KEY_ALGS],
	    sprop[PROPOSAL_SERVER_HOST_KEY_ALGS]);
	need = 0;
	for (mode = 0; mode < MODE_MAX; mode++) {
		newkeys = kex->newkeys[mode];
		if (need < newkeys->enc.key_len)
			need = newkeys->enc.key_len;
		if (need < newkeys->enc.block_size)
			need = newkeys->enc.block_size;
		if (need < newkeys->mac.key_len)
			need = newkeys->mac.key_len;
	}
	/* XXX need runden? */
	kex->we_need = need;

	/* ignore the next message if the proposals do not match */
	if (first_kex_follows && !proposals_match(my, peer) &&
	    !(datafellows & SSH_BUG_FIRSTKEX)) {
		type = packet_read();
		debug2("skipping next packet (type %u)", type);
	}

	kex_prop_free(my);
	kex_prop_free(peer);
}

static u_char *
derive_key(Kex *kex, int id, u_int need, u_char *hash, u_int hashlen,
    BIGNUM *shared_secret)
{
	Buffer b;
	EVP_MD_CTX md;
	char c = id;
	u_int have;
	int mdsz;
	u_char *digest;

	if ((mdsz = EVP_MD_size(kex->evp_md)) <= 0)
		fatal("bad kex md size %d", mdsz);
	digest = xmalloc(roundup(need, mdsz));

	buffer_init(&b);
	buffer_put_bignum2(&b, shared_secret);

	/* K1 = HASH(K || H || "A" || session_id) */
	EVP_DigestInit(&md, kex->evp_md);
	if (!(datafellows & SSH_BUG_DERIVEKEY))
		EVP_DigestUpdate(&md, buffer_ptr(&b), buffer_len(&b));
	EVP_DigestUpdate(&md, hash, hashlen);
	EVP_DigestUpdate(&md, &c, 1);
	EVP_DigestUpdate(&md, kex->session_id, kex->session_id_len);
	EVP_DigestFinal(&md, digest, NULL);

	/*
	 * expand key:
	 * Kn = HASH(K || H || K1 || K2 || ... || Kn-1)
	 * Key = K1 || K2 || ... || Kn
	 */
	for (have = mdsz; need > have; have += mdsz) {
		EVP_DigestInit(&md, kex->evp_md);
		if (!(datafellows & SSH_BUG_DERIVEKEY))
			EVP_DigestUpdate(&md, buffer_ptr(&b), buffer_len(&b));
		EVP_DigestUpdate(&md, hash, hashlen);
		EVP_DigestUpdate(&md, digest, have);
		EVP_DigestFinal(&md, digest + have, NULL);
	}
	buffer_free(&b);
#ifdef DEBUG_KEX
	fprintf(stderr, "key '%c'== ", c);
	dump_digest("key", digest, need);
#endif
	return digest;
}

Newkeys *current_keys[MODE_MAX];

#define NKEYS	6
void
kex_derive_keys(Kex *kex, u_char *hash, u_int hashlen, BIGNUM *shared_secret)
{
	u_char *keys[NKEYS];
	u_int i, mode, ctos;

	for (i = 0; i < NKEYS; i++) {
		keys[i] = derive_key(kex, 'A'+i, kex->we_need, hash, hashlen,
		    shared_secret);
	}

	debug2("kex_derive_keys");
	for (mode = 0; mode < MODE_MAX; mode++) {
		current_keys[mode] = kex->newkeys[mode];
		kex->newkeys[mode] = NULL;
		ctos = (!kex->server && mode == MODE_OUT) ||
		    (kex->server && mode == MODE_IN);
		current_keys[mode]->enc.iv  = keys[ctos ? 0 : 1];
		current_keys[mode]->enc.key = keys[ctos ? 2 : 3];
		current_keys[mode]->mac.key = keys[ctos ? 4 : 5];
	}
}

Newkeys *
kex_get_newkeys(int mode)
{
	Newkeys *ret;

	ret = current_keys[mode];
	current_keys[mode] = NULL;
	return ret;
}

void
derive_ssh1_session_id(BIGNUM *host_modulus, BIGNUM *server_modulus,
    u_int8_t cookie[8], u_int8_t id[16])
{
	const EVP_MD *evp_md = EVP_md5();
	EVP_MD_CTX md;
	u_int8_t nbuf[2048], obuf[EVP_MAX_MD_SIZE];
	int len;

	EVP_DigestInit(&md, evp_md);

	len = BN_num_bytes(host_modulus);
	if (len < (512 / 8) || (u_int)len > sizeof(nbuf))
		fatal("%s: bad host modulus (len %d)", __func__, len);
	BN_bn2bin(host_modulus, nbuf);
	EVP_DigestUpdate(&md, nbuf, len);

	len = BN_num_bytes(server_modulus);
	if (len < (512 / 8) || (u_int)len > sizeof(nbuf))
		fatal("%s: bad server modulus (len %d)", __func__, len);
	BN_bn2bin(server_modulus, nbuf);
	EVP_DigestUpdate(&md, nbuf, len);

	EVP_DigestUpdate(&md, cookie, 8);

	EVP_DigestFinal(&md, obuf, NULL);
	memcpy(id, obuf, 16);

	memset(nbuf, 0, sizeof(nbuf));
	memset(obuf, 0, sizeof(obuf));
	memset(&md, 0, sizeof(md));
}

#if defined(DEBUG_KEX) || defined(DEBUG_KEXDH)
void
dump_digest(char *msg, u_char *digest, int len)
{
	u_int i;

	fprintf(stderr, "%s\n", msg);
	for (i = 0; i < len; i++) {
		fprintf(stderr, "%02x", digest[i]);
		if (i%32 == 31)
			fprintf(stderr, "\n");
		else if (i%8 == 7)
			fprintf(stderr, " ");
	}
	fprintf(stderr, "\n");
}
#endif
@


1.11
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d4 1
a4 1
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
d51 1
a51 1
__RCSID("$MirOS: src/usr.bin/ssh/kex.c,v 1.10 2010/09/21 21:24:36 tg Exp $");
d197 1
@


1.10
log
@use arc4random() a bit more efficiently
@
text
@d3 2
d51 1
a51 1
__RCSID("$MirOS: src/usr.bin/ssh/kex.c,v 1.9 2009/10/04 14:29:03 tg Exp $");
d121 1
a121 1
kex_protocol_error(int type, u_int32_t seq, void *ctxt __attribute__((unused)))
d186 2
a187 2
kex_input_kexinit(int type __attribute__((unused)),
    u_int32_t seq __attribute__((unused)), void *ctxt)
@


1.9
log
@• merge newer OpenSSH
• KNF in our diff – style(9)
• some const cleanliness (build with __CRAZY=Yes mostly)
@
text
@d49 1
a49 1
__RCSID("$MirOS: src/usr.bin/ssh/kex.c,v 1.8 2008/12/16 22:13:28 tg Exp $");
a157 1
	u_int32_t rnd = 0;
a158 1
	u_int i;
d174 1
a174 6
	for (i = 0; i < KEX_COOKIE_LEN; i++) {
		if (i % 4 == 0)
			rnd = arc4random();
		cookie[i] = rnd;
		rnd >>= 8;
	}
@


1.8
log
@really merge OpenSSH-current into MirBSD Secure SHell 10uA4
@
text
@d1 1
a1 1
/* $OpenBSD: kex.c,v 1.79 2007/06/05 06:52:37 djm Exp $ */
d49 1
a49 3
__RCSID("$MirOS: src/usr.bin/ssh/kex.c,v 1.6 2007/06/16 15:41:50 tg Exp $");

#define KEX_COOKIE_LEN	16
@


1.7
log
@fastmerge, do not use yet!
@
text
@d1 1
a1 1
/* $OpenBSD: kex.c,v 1.80 2008/09/06 12:24:13 djm Exp $ */
d53 2
d321 1
a321 1
		k->evp_md = EVP_sha256();
@


1.6
log
@sync’n’bump
@
text
@d1 1
a1 1
/* $OpenBSD: kex.c,v 1.79 2007/06/05 06:52:37 djm Exp $ */
d49 1
a49 1
__RCSID("$MirOS: src/usr.bin/ssh/kex.c,v 1.5 2007/01/25 16:18:36 tg Exp $");
a52 2
extern const EVP_MD *evp_ssh_sha256(void);

d319 1
a319 1
		k->evp_md = evp_ssh_sha256();
@


1.5
log
@automerge, bump vsn
@
text
@d1 1
a1 1
/* $OpenBSD: kex.c,v 1.77 2007/01/21 01:41:54 stevesk Exp $ */
d49 1
a49 1
__RCSID("$MirOS: src/usr.bin/ssh/kex.c,v 1.4 2006/09/20 21:40:59 tg Exp $");
d83 1
a83 1
	int i;
d104 1
a104 1
	debug2("kex_parse_kexinit: reserved %d ", i);
d119 1
d191 1
d257 2
a258 1
		fatal("no matching cipher found: client %s server %s", client, server);
d274 3
a276 2
		fatal("no matching mac found: client %s server %s", client, server);
	if (mac_init(mac, name) < 0)
d309 1
a309 1
		fatal("no kex alg");
d387 2
a388 1
		ctos = (!kex->server && mode == MODE_OUT) || (kex->server && mode == MODE_IN);
@


1.4
log
@finish merging
@
text
@d1 1
a1 1
/* $OpenBSD: kex.c,v 1.76 2006/08/03 03:34:42 deraadt Exp $ */
d49 1
a49 1
__RCSID("$MirOS$");
d547 1
a547 1
	for (i = 0; i< len; i++) {
@


1.3
log
@merge and clean up
@
text
@d1 1
a1 1
/* $OpenBSD: kex.c,v 1.71 2006/03/25 13:17:02 djm Exp $ */
d26 6
a31 2
#include "includes.h"
__RCSID("$MirOS: src/usr.bin/ssh/kex.c,v 1.2 2006/02/22 02:16:46 tg Exp $");
d35 1
a36 1
#include "xmalloc.h"
a37 1
#include "bufaux.h"
d41 1
a42 1
#include "key.h"
d49 2
@


1.2
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 1
d27 1
a27 1
RCSID("$MirOS: kex.c,v 1.65 2005/11/04 05:15:59 djm Exp $");
d48 2
d81 1
a81 1
	proposal = xmalloc(PROPOSAL_MAX * sizeof(char *));
d217 1
a217 2
	kex = xmalloc(sizeof(*kex));
	memset(kex, 0, sizeof(*kex));
d260 1
d276 1
d294 1
d310 3
d376 1
a376 2
		newkeys = xmalloc(sizeof(*newkeys));
		memset(newkeys, 0, sizeof(*newkeys));
d431 1
a431 1
 	digest = xmalloc(roundup(need, mdsz));
d484 2
a485 1
		ctos = (!kex->server && mode == MODE_OUT) || (kex->server && mode == MODE_IN);
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kex.c,v 1.60 2004/06/21 17:36:31 avsm Exp $");
d53 1
a53 1
kex_prop2buf(Buffer *b, char *proposal[PROPOSAL_MAX])
d55 1
a55 1
	int i;
d104 1
a104 1
	int i;
d112 1
a112 1
kex_protocol_error(int type, u_int32_t seq, void *ctxt)
d153 1
a153 1
	int i;
d183 2
a184 1
kex_input_kexinit(int type, u_int32_t seq, void *ctxt)
d187 1
a187 2
	int dlen;
	int i;
d210 1
a210 1
kex_setup(char *proposal[PROPOSAL_MAX])
d279 4
a282 2
	if (strcmp(name, "zlib") == 0) {
		comp->type = 1;
d284 1
a284 1
		comp->type = 0;
d298 1
d301 2
a302 1
	} else if (strcmp(k->name, KEX_DHGEX) == 0) {
d304 1
d308 1
d352 1
a352 3
	int mode;
	int ctos;				/* direction: if true client-to-server */
	int need;
d402 1
a402 1
	   !(datafellows & SSH_BUG_FIRSTKEX)) {
d412 2
a413 1
derive_key(Kex *kex, int id, int need, u_char *hash, BIGNUM *shared_secret)
a415 1
	const EVP_MD *evp_md = EVP_sha1();
d418 7
a424 3
	int have;
	int mdsz = EVP_MD_size(evp_md);
	u_char *digest = xmalloc(roundup(need, mdsz));
d430 1
a430 1
	EVP_DigestInit(&md, evp_md);
d433 1
a433 1
	EVP_DigestUpdate(&md, hash, mdsz);
d444 1
a444 1
		EVP_DigestInit(&md, evp_md);
d447 1
a447 1
		EVP_DigestUpdate(&md, hash, mdsz);
d463 1
a463 1
kex_derive_keys(Kex *kex, u_char *hash, BIGNUM *shared_secret)
d466 1
a466 1
	int i, mode, ctos;
d468 4
a471 2
	for (i = 0; i < NKEYS; i++)
		keys[i] = derive_key(kex, 'A'+i, kex->we_need, hash, shared_secret);
d506 1
a506 1
	if (len < (512 / 8) || len > sizeof(nbuf))
d512 1
a512 1
	if (len < (512 / 8) || len > sizeof(nbuf))
d531 1
a531 1
	int i;
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@most current OpenSSH.com
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kex.c,v 1.61 2005/06/17 02:44:32 djm Exp $");
d55 1
a55 1
	u_int i;
d104 1
a104 1
	u_int i;
d153 1
a153 1
	u_int i;
d186 2
a187 1
	u_int i, dlen;
d346 3
a348 1
	u_int mode, ctos, need;
d408 1
a408 1
derive_key(Kex *kex, int id, u_int need, u_char *hash, BIGNUM *shared_secret)
d414 1
a414 1
	u_int have;
d416 1
a416 5
	u_char *digest;
	
	if (mdsz < 0)
		fatal("derive_key: mdsz < 0");
	digest = xmalloc(roundup(need, mdsz));
d458 1
a458 1
	u_int i, mode, ctos;
d496 1
a496 1
	if (len < (512 / 8) || (u_int)len > sizeof(nbuf))
d502 1
a502 1
	if (len < (512 / 8) || (u_int)len > sizeof(nbuf))
d521 1
a521 1
	u_int i;
@


1.1.1.3
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kex.c,v 1.63 2005/07/17 07:17:55 djm Exp $");
d395 1
a395 1
	    !(datafellows & SSH_BUG_FIRSTKEX)) {
d414 1
a414 1

@


1.1.1.4
log
@Import current OpenSSH
@
text
@d26 1
a26 1
RCSID("$OpenBSD: kex.c,v 1.65 2005/11/04 05:15:59 djm Exp $");
d278 2
a279 4
	if (strcmp(name, "zlib@@openssh.com") == 0) {
		comp->type = COMP_DELAYED;
	} else if (strcmp(name, "zlib") == 0) {
		comp->type = COMP_ZLIB;
d281 1
a281 1
		comp->type = COMP_NONE;
a294 1
		k->evp_md = EVP_sha1();
d297 1
a297 2
		k->evp_md = EVP_sha1();
	} else if (strcmp(k->name, KEX_DHGEX_SHA1) == 0) {
a298 1
		k->evp_md = EVP_sha1();
a301 1

d405 1
a405 2
derive_key(Kex *kex, int id, u_int need, u_char *hash, u_int hashlen,
    BIGNUM *shared_secret)
d408 1
d412 1
a412 1
	int mdsz;
d415 3
a417 3
	if ((mdsz = EVP_MD_size(kex->evp_md)) <= 0)
		fatal("bad kex md size %d", mdsz);
 	digest = xmalloc(roundup(need, mdsz));
d423 1
a423 1
	EVP_DigestInit(&md, kex->evp_md);
d426 1
a426 1
	EVP_DigestUpdate(&md, hash, hashlen);
d437 1
a437 1
		EVP_DigestInit(&md, kex->evp_md);
d440 1
a440 1
		EVP_DigestUpdate(&md, hash, hashlen);
d456 1
a456 1
kex_derive_keys(Kex *kex, u_char *hash, u_int hashlen, BIGNUM *shared_secret)
d461 2
a462 4
	for (i = 0; i < NKEYS; i++) {
		keys[i] = derive_key(kex, 'A'+i, kex->we_need, hash, hashlen,
		    shared_secret);
	}
@


1.1.1.5
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@a0 1
/* $OpenBSD: kex.c,v 1.71 2006/03/25 13:17:02 djm Exp $ */
d26 1
a46 2
extern const EVP_MD *evp_ssh_sha256(void);

d78 1
a78 1
	proposal = xcalloc(PROPOSAL_MAX, sizeof(char *));
d213 2
a214 1
	kex = xcalloc(1, sizeof(*kex));
a256 1

a271 1

a288 1

a303 3
	} else if (strcmp(k->name, KEX_DHGEX_SHA256) == 0) {
		k->kex_type = KEX_DH_GEX_SHA256;
		k->evp_md = evp_ssh_sha256();
d367 2
a368 1
		newkeys = xcalloc(1, sizeof(*newkeys));
d423 1
a423 1
	digest = xmalloc(roundup(need, mdsz));
d476 1
a476 2
		ctos = (!kex->server && mode == MODE_OUT) ||
		    (kex->server && mode == MODE_IN);
@


1.1.1.6
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: kex.c,v 1.76 2006/08/03 03:34:42 deraadt Exp $ */
d26 1
a26 6
#include <sys/param.h>

#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
d30 1
a31 1
#include "ssh2.h"
d33 1
d37 1
a38 1
#include "kex.h"
@


1.1.1.7
log
@update OpenSSH, while we're at it…
@
text
@d1 1
a1 1
/* $OpenBSD: kex.c,v 1.77 2007/01/21 01:41:54 stevesk Exp $ */
d544 1
a544 1
	for (i = 0; i < len; i++) {
@


1.1.1.8
log
@Import latest OpenSSH and OpenBSD-libssl
@
text
@d1 1
a1 1
/* $OpenBSD: kex.c,v 1.79 2007/06/05 06:52:37 djm Exp $ */
d81 1
a81 1
	u_int i;
d102 1
a102 1
	debug2("kex_parse_kexinit: reserved %u ", i);
a116 1
/* ARGSUSED */
a187 1
/* ARGSUSED */
d252 1
a252 2
		fatal("no matching cipher found: client %s server %s",
		    client, server);
d268 2
a269 3
		fatal("no matching mac found: client %s server %s",
		    client, server);
	if (mac_setup(mac, name) < 0)
d302 1
a302 1
		fatal("Unable to negotiate a key exchange method");
d380 1
a380 2
		ctos = (!kex->server && mode == MODE_OUT) ||
		    (kex->server && mode == MODE_IN);
@


1.1.1.9
log
@OpenSSH-current
@
text
@d1 1
a1 1
/* $OpenBSD: kex.c,v 1.80 2008/09/06 12:24:13 djm Exp $ */
d51 2
d318 1
a318 1
		k->evp_md = EVP_sha256();
@


1.1.1.10
log
@Let’s play the version number game – OpenSSH 5.3-current
@
text
@d1 1
a1 1
/* $OpenBSD: kex.c,v 1.81 2009/05/27 06:34:36 andreas Exp $ */
d49 2
@


