head	1.29;
access;
symbols
	cvs-200910041320:1.1.1.17
	cvs-200903221200:1.1.1.17
	cvs-200812162015:1.1.1.16
	cvs-200804031830:1.1.1.15
	MIRBSD_10:1.23.0.2
	MIRBSD_10_BASE:1.23
	cvs-200803022030:1.1.1.15
	cvs-200709131337:1.1.1.14
	cvs-200709021830:1.1.1.14
	cvs-200708201200:1.1.1.14
	cvs-200706161500:1.1.1.14
	cvs-200705192215:1.1.1.13
	cvs-200704292000:1.1.1.13
	cvs-200703080900:1.1.1.13
	cvs-200701251600:1.1.1.13
	cvs-200612111600:1.1.1.12
	cvs-200611090230:1.1.1.12
	OPENBSD_4_0:1.1.1.11
	MIRBSD_9_BASE:1.15
	cvs-200606162342:1.1.1.10
	cvs-200606022000:1.1.1.10
	cvs-200604191000:1.1.1.9
	cvs-200602220045:1.1.1.8
	MIRBSD_8:1.11.0.2
	MIRBSD_8_BASE:1.11
	cvs-200512201942:1.1.1.7
	cvs-200511231930:1.1.1.6
	cvs-200507211800:1.1.1.5
	cvs-200506221550:1.1.1.4
	cvs-200505050030:1.1.1.3
	cvs-200504291700:1.1.1.3
	cvs-200504261445:1.1.1.3
	cvs-200504141900:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.29
date	2011.01.15.21.52.42;	author tg;	state Exp;
branches;
next	1.28;
commitid	1004D32173B08BB4E36;

1.28
date	2009.10.02.16.58.49;	author tg;	state Exp;
branches;
next	1.27;
commitid	1004AC6315648072669;

1.27
date	2009.03.22.15.01.21;	author tg;	state Exp;
branches;
next	1.26;
commitid	10049C652CD5CCC321F;

1.26
date	2008.12.16.22.13.30;	author tg;	state Exp;
branches;
next	1.25;
commitid	10049482819766381ED;

1.25
date	2008.12.16.20.55.30;	author tg;	state Exp;
branches;
next	1.24;
commitid	100494815C97ECEEDBF;

1.24
date	2008.05.07.12.16.13;	author tg;	state Exp;
branches;
next	1.23;
commitid	10048219D991FE06744;

1.23
date	2008.03.02.21.14.22;	author tg;	state Exp;
branches;
next	1.22;
commitid	10047CB18BB506A8527;

1.22
date	2007.06.16.15.41.51;	author tg;	state Exp;
branches;
next	1.21;
commitid	100467404D10F2EE204;

1.21
date	2007.01.25.16.18.38;	author tg;	state Exp;
branches;
next	1.20;
commitid	10045B8D86E5B698AD6;

1.20
date	2006.11.09.02.42.06;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004552959372C0CB8B;

1.19
date	2006.10.13.18.40.51;	author tg;	state Exp;
branches;
next	1.18;
commitid	100452FDDB7190872BF;

1.18
date	2006.09.20.21.41.05;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004511B578580E7F04;

1.17
date	2006.08.12.13.57.11;	author tg;	state Exp;
branches;
next	1.16;
commitid	10044DDDE213D814E74;

1.16
date	2006.07.23.14.19.28;	author tg;	state Exp;
branches;
next	1.15;
commitid	10044C3857E74BD315F;

1.15
date	2006.06.02.20.50.51;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004480A4952B0D84EA;

1.14
date	2006.04.19.10.40.55;	author tg;	state Exp;
branches;
next	1.13;
commitid	100444613BD3A91C28B;

1.13
date	2006.03.27.19.37.55;	author tg;	state Exp;
branches;
next	1.12;
commitid	10044283F22783F3F35;

1.12
date	2006.02.22.01.23.52;	author tg;	state Exp;
branches;
next	1.11;
commitid	10043FBBD2C2C5E7D81;

1.11
date	2005.12.20.19.57.36;	author tg;	state Exp;
branches;
next	1.10;
commitid	10043A8623F4C1F637E;

1.10
date	2005.11.23.19.45.15;	author tg;	state Exp;
branches;
next	1.9;
commitid	29f4384c6def7d1;

1.9
date	2005.11.23.18.04.21;	author tg;	state Exp;
branches;
next	1.8;
commitid	af74384af2ab463;

1.8
date	2005.06.22.16.11.39;	author tg;	state Exp;
branches;
next	1.7;
commitid	598b42b98dcf335f;

1.7
date	2005.04.26.15.24.37;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.26.15.21.50;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.14.20.07.45;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.14.19.49.35;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.15.19.52.06;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.13.18.33.32;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.29.55;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.55;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.14.19.33.30;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.26.14.55.03;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.06.22.15.56.28;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	181342b98a38fe99;

1.1.1.5
date	2005.07.21.21.00.34;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	560042e0092f571e;

1.1.1.6
date	2005.11.23.19.34.15;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	116a4384c4467ffc;

1.1.1.7
date	2005.12.20.19.43.46;	author tg;	state Exp;
branches;
next	1.1.1.8;
commitid	10043A85EF81EF097CF;

1.1.1.8
date	2006.02.22.00.51.36;	author tg;	state Exp;
branches;
next	1.1.1.9;
commitid	10043FBB5A933C3BB9B;

1.1.1.9
date	2006.04.19.10.15.04;	author tg;	state Exp;
branches;
next	1.1.1.10;
commitid	10044460DB21E1F715C;

1.1.1.10
date	2006.06.02.20.31.52;	author tg;	state Exp;
branches;
next	1.1.1.11;
commitid	1004480A0422110D712;

1.1.1.11
date	2006.09.20.19.06.50;	author tg;	state Exp;
branches;
next	1.1.1.12;
commitid	10045119150397FC669;

1.1.1.12
date	2006.11.09.02.38.02;	author tg;	state Exp;
branches;
next	1.1.1.13;
commitid	100455294981A6201C8;

1.1.1.13
date	2007.01.25.16.13.22;	author tg;	state Exp;
branches;
next	1.1.1.14;
commitid	10045B8D7100791C016;

1.1.1.14
date	2007.06.16.15.11.13;	author tg;	state Exp;
branches;
next	1.1.1.15;
commitid	1004673FD85114A3F32;

1.1.1.15
date	2008.03.02.20.40.42;	author tg;	state Exp;
branches;
next	1.1.1.16;
commitid	10047CB10DD30FAF062;

1.1.1.16
date	2008.12.16.20.15.34;	author tg;	state Exp;
branches;
next	1.1.1.17;
commitid	10049480C7A2701F5C0;

1.1.1.17
date	2009.03.22.12.03.00;	author tg;	state Exp;
branches;
next	;
commitid	10049C6290649163EA3;


desc
@@


1.29
log
@Introduce /etc/ssh/root:config and /etc/ssh/root:known_hosts
and /etc/ssh/root:authorised_keys for the superuser if his
HOME directory is unset, empty or, not normalised, "/" (root).
十̲CVS: ----------------------------------------------------------------------
@
text
@.\"  -*- nroff -*-
.\"
.\" Author: Tatu Ylonen <ylo@@cs.hut.fi>
.\" Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
.\"                    All rights reserved
.\"
.\" As far as I am concerned, the code I have written for this software
.\" can be used freely for any purpose.  Any derived versions of this
.\" software must be clearly marked as such, and if the derived work is
.\" incompatible with the protocol description in the RFC file, it must be
.\" called by a name other than "ssh" or "Secure Shell".
.\"
.\" Copyright (c) 1999,2000 Markus Friedl.  All rights reserved.
.\" Copyright (c) 1999 Aaron Campbell.  All rights reserved.
.\" Copyright (c) 1999 Theo de Raadt.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.28 2009/10/02 16:58:49 tg Exp $
.\" $OpenBSD: ssh.1,v 1.283 2009/03/19 15:15:09 jmc Exp $
.Dd $Mdocdate: October 2 2009 $
.Dt SSH 1
.Os
.Sh NAME
.Nm ssh
.Nd OpenSSH SSH client (remote login program)
.Sh SYNOPSIS
.Nm ssh
.Op Fl 1246AaCfgMNnqsTtVvXxYy
.Op Fl b Ar bind_address
.Op Fl c Ar cipher_spec
.Oo Fl D\ \&
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Oc
.Op Fl e Ar escape_char
.Op Fl F Ar configfile
.Bk -words
.Op Fl i Ar identity_file
.Ek
.Oo Fl L\ \&
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Oc
.Bk -words
.Op Fl l Ar login_name
.Ek
.Op Fl m Ar mac_spec
.Op Fl O Ar ctl_cmd
.Op Fl o Ar option
.Op Fl p Ar port
.Oo Fl R\ \&
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Oc
.Op Fl S Ar ctl_path
.Bk -words
.Oo Fl w Ar local_tun Ns
.Op : Ns Ar remote_tun Oc
.Oo Ar user Ns @@ Oc Ns Ar hostname
.Op Ar command
.Ek
.Sh DESCRIPTION
.Nm
(SSH client) is a program for logging into a remote machine and for
executing commands on a remote machine.
It is intended to replace rlogin and rsh,
and provide secure encrypted communications between
two untrusted hosts over an insecure network.
X11 connections and arbitrary TCP ports
can also be forwarded over the secure channel.
.Pp
.Nm
connects and logs into the specified
.Ar hostname
(with optional
.Ar user
name).
The user must prove
his/her identity to the remote machine using one of several methods
depending on the protocol version used (see below).
.Pp
If
.Ar command
is specified,
it is executed on the remote host instead of a login shell.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 1
Forces
.Nm
to try protocol version 1 only.
.It Fl 2
Forces
.Nm
to try protocol version 2 only.
.It Fl 4
Forces
.Nm
to use IPv4 addresses only.
.It Fl 6
Forces
.Nm
to use IPv6 addresses only.
.It Fl A
Enables forwarding of the authentication agent connection.
This can also be specified on a per-host basis in a configuration file.
.Pp
Agent forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the agent's Unix-domain socket)
can access the local agent through the forwarded connection.
An attacker cannot obtain key material from the agent,
however they can perform operations on the keys that enable them to
authenticate using the identities loaded into the agent.
.It Fl a
Disables forwarding of the authentication agent connection.
.It Fl b Ar bind_address
Use
.Ar bind_address
on the local machine as the source address
of the connection.
Only useful on systems with more than one address.
.It Fl C
Requests compression of all data (including stdin, stdout, stderr, and
data for forwarded X11 and TCP connections).
The compression algorithm is the same used by
.Xr gzip 1 ,
and the
.Dq level
can be controlled by the
.Cm CompressionLevel
option for protocol version 1.
Compression is desirable on modem lines and other
slow connections, but will only slow down things on fast networks.
The default value can be set on a host-by-host basis in the
configuration files; see the
.Cm Compression
option.
.It Fl c Ar cipher_spec
Selects the cipher specification for encrypting the session.
.Pp
Protocol version 1 allows specification of a single cipher.
The supported values are
.Dq 3des ,
.Dq blowfish ,
and
.Dq des .
.Ar 3des
(triple-des) is an encrypt-decrypt-encrypt triple with three different keys.
It is believed to be secure.
.Ar blowfish
is a fast block cipher; it appears very secure and is much faster than
.Ar 3des .
.Ar des
is only supported in the
.Nm
client for interoperability with legacy protocol 1 implementations
that do not support the
.Ar 3des
cipher.
Its use is strongly discouraged due to cryptographic weaknesses.
The default is
.Dq blowfish .
.Pp
For protocol version 2,
.Ar cipher_spec
is a comma-separated list of ciphers
listed in order of preference.
The supported ciphers and default are documented in
.Xr ssh_config 5 .
.It Fl D Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Xc
Specifies a local
.Dq dynamic
application-level port forwarding.
This works by allocating a socket to listen to
.Ar port
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.
Currently the SOCKS4 and SOCKS5 protocols are supported, and
.Nm
will act as a SOCKS server.
Only root can forward privileged ports.
Dynamic port forwardings can also be specified in the configuration file.
.Pp
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar port
.Xc
.Sm on
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
.It Fl e Ar escape_char
Sets the escape character for sessions with a pty (default:
.Ql ~ ) .
The escape character is only recognized at the beginning of a line.
The escape character followed by a dot
.Pq Ql \&.
closes the connection;
followed by control-Z suspends the connection;
and followed by itself sends the escape character once.
Setting the character to
.Dq none
disables any escapes and makes the session fully transparent.
.It Fl F Ar configfile
Specifies an alternative per-user configuration file.
If a configuration file is given on the command line,
the system-wide configuration file
.Pq Pa /etc/ssh/ssh_config
will be ignored.
The default for the per-user configuration file is
.Pa ~/.etc/ssh/config .
If the user is the superuser and his home directory the root or unset,
.Pa /etc/ssh/root:config
is used instead.
.It Fl f
Requests
.Nm
to go to background just before command execution.
This is useful if
.Nm
is going to ask for passwords or passphrases, but the user
wants it in the background.
This implies
.Fl n .
The recommended way to start X11 programs at a remote site is with
something like
.Ic ssh -f host xterm .
.Pp
If the
.Cm ExitOnForwardFailure
configuration option is set to
.Dq yes ,
then a client started with
.Fl f
will wait for all remote port forwards to be successfully established
before placing itself in the background.
.It Fl g
Allows remote hosts to connect to local forwarded ports.
.It Fl I Ar smartcard_device
Specify the device
.Nm
should use to communicate with a smartcard used for storing the user's
private RSA key.
This option is only available if support for smartcard devices
is compiled in (default is no support).
.It Fl i Ar identity_file
Selects a file from which the identity (private key) for
RSA or DSA authentication is read.
The default is
.Pa ~/.etc/ssh/identity
for protocol version 1, and
.Pa ~/.etc/ssh/id_rsa
and
.Pa ~/.etc/ssh/id_dsa
for protocol version 2.
Identity files may also be specified on
a per-host basis in the configuration file.
It is possible to have multiple
.Fl i
options (and multiple identities specified in
configuration files).
.It Fl L Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Xc
Specifies that the given port on the local (client) host is to be
forwarded to the given host and port on the remote side.
This works by allocating a socket to listen to
.Ar port
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
from the remote machine.
Port forwardings can also be specified in the configuration file.
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar port No / Ar host No /
.Ar hostport
.Xc
.Sm on
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
.It Fl l Ar login_name
Specifies the user to log in as on the remote machine.
This also may be specified on a per-host basis in the configuration file.
.It Fl M
Places the
.Nm
client into
.Dq master
mode for connection sharing.
Multiple
.Fl M
options places
.Nm
into
.Dq master
mode with confirmation required before slave connections are accepted.
Refer to the description of
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
.It Fl m Ar mac_spec
Additionally, for protocol version 2 a comma-separated list of MAC
(message authentication code) algorithms can
be specified in order of preference.
See the
.Cm MACs
keyword for more information.
.It Fl N
Do not execute a remote command.
This is useful for just forwarding ports
(protocol version 2 only).
.It Fl n
Redirects stdin from
.Pa /dev/null
(actually, prevents reading from stdin).
This must be used when
.Nm
is run in the background.
A common trick is to use this to run X11 programs on a remote machine.
For example,
.Ic ssh -n shadows.cs.hut.fi emacs &
will start an emacs on shadows.cs.hut.fi, and the X11
connection will be automatically forwarded over an encrypted channel.
The
.Nm
program will be put in the background.
(This does not work if
.Nm
needs to ask for a password or passphrase; see also the
.Fl f
option.)
.It Fl O Ar ctl_cmd
Control an active connection multiplexing master process.
When the
.Fl O
option is specified, the
.Ar ctl_cmd
argument is interpreted and passed to the master process.
Valid commands are:
.Dq check
(check that the master process is running) and
.Dq exit
(request the master to exit).
.It Fl o Ar option
Can be used to give options in the format used in the configuration file.
This is useful for specifying options for which there is no separate
command-line flag.
For full details of the options listed below, and their possible values, see
.Xr ssh_config 5 .
.Pp
.Bl -tag -width Ds -offset indent -compact
.It AddressFamily
.It BatchMode
.It BindAddress
.It ChallengeResponseAuthentication
.It CheckHostIP
.It Cipher
.It Ciphers
.It ClearAllForwardings
.It Compression
.It CompressionLevel
.It ConnectionAttempts
.It ConnectTimeout
.It ControlMaster
.It ControlPath
.It DynamicForward
.It EscapeChar
.It ExitOnForwardFailure
.It ForwardAgent
.It ForwardX11
.It ForwardX11Trusted
.It GatewayPorts
.It GlobalKnownHostsFile
.It HashKnownHosts
.It Host
.It HostbasedAuthentication
.It HostKeyAlgorithms
.It HostKeyAlias
.It Hostname
.It IdentityFile
.It IdentitiesOnly
.It KbdInteractiveDevices
.It LocalCommand
.It LocalForward
.It LogLevel
.It MACs
.It NoHostAuthenticationForLocalhost
.It NumberOfPasswordPrompts
.It PasswordAuthentication
.It PermitLocalCommand
.It Port
.It PreferredAuthentications
.It Protocol
.It ProxyCommand
.It PubkeyAuthentication
.It RekeyLimit
.It RemoteForward
.It RhostsRSAAuthentication
.It RSAAuthentication
.It SendEnv
.It ServerAliveInterval
.It ServerAliveCountMax
.It SmartcardDevice
.It StrictHostKeyChecking
.It TCPKeepAlive
.It Tunnel
.It TunnelDevice
.It UsePrivilegedPort
.It User
.It UserKnownHostsFile
.It VerifyHostKeyDNS
.It VisualHostKey
.It XAuthLocation
.El
.It Fl p Ar port
Port to connect to on the remote host.
This can be specified on a
per-host basis in the configuration file.
.It Fl q
Quiet mode.
Causes most warning and diagnostic messages to be suppressed.
.It Fl R Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Xc
Specifies that the given port on the remote (server) host is to be
forwarded to the given host and port on the local side.
This works by allocating a socket to listen to
.Ar port
on the remote side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
from the local machine.
.Pp
Port forwardings can also be specified in the configuration file.
Privileged ports can be forwarded only when
logging in as root on the remote machine.
IPv6 addresses can be specified by enclosing the address in square braces or
using an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar host No / Ar port No /
.Ar hostport
.Xc .
.Sm on
.Pp
By default, the listening socket on the server will be bound to the loopback
interface only.
This may be overridden by specifying a
.Ar bind_address .
An empty
.Ar bind_address ,
or the address
.Ql * ,
indicates that the remote socket should listen on all interfaces.
Specifying a remote
.Ar bind_address
will only succeed if the server's
.Cm GatewayPorts
option is enabled (see
.Xr sshd_config 5 ) .
.Pp
If the
.Ar port
argument is
.Ql 0 ,
the listen port will be dynamically allocated on the server and reported
to the client at run time.
.It Fl S Ar ctl_path
Specifies the location of a control socket for connection sharing.
Refer to the description of
.Cm ControlPath
and
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
.It Fl s
May be used to request invocation of a subsystem on the remote system.
Subsystems are a feature of the SSH2 protocol which facilitate the use
of SSH as a secure transport for other applications (eg.\&
.Xr sftp 1 ) .
The subsystem is specified as the remote command.
.It Fl T
Disable pseudo-tty allocation.
.It Fl t
Force pseudo-tty allocation.
This can be used to execute arbitrary
screen-based programs on a remote machine, which can be very useful,
e.g. when implementing menu services.
Multiple
.Fl t
options force tty allocation, even if
.Nm
has no local tty.
.It Fl V
Display the version number and exit.
.It Fl v
Verbose mode.
Causes
.Nm
to print debugging messages about its progress.
This is helpful in
debugging connection, authentication, and configuration problems.
Multiple
.Fl v
options increase the verbosity.
The maximum is 3.
.It Fl w Xo
.Ar local_tun Ns Op : Ns Ar remote_tun
.Xc
Requests
tunnel
device forwarding with the specified
.Xr tun 4
devices between the client
.Pq Ar local_tun
and the server
.Pq Ar remote_tun .
.Pp
The devices may be specified by numerical ID or the keyword
.Dq any ,
which uses the next available tunnel device.
If
.Ar remote_tun
is not specified, it defaults to
.Dq any .
See also the
.Cm Tunnel
and
.Cm TunnelDevice
directives in
.Xr ssh_config 5 .
If the
.Cm Tunnel
directive is unset, it is set to the default tunnel mode, which is
.Dq point-to-point .
.It Fl X
Enables X11 forwarding.
This can also be specified on a per-host basis in a configuration file.
.Pp
X11 forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the user's X authorisation database)
can access the local X11 display through the forwarded connection.
An attacker may then be able to perform activities such as keystroke monitoring.
.Pp
For this reason, X11 forwarding is subjected to X11 SECURITY extension
restrictions by default.
Please refer to the
.Nm
.Fl Y
option and the
.Cm ForwardX11Trusted
directive in
.Xr ssh_config 5
for more information.
.It Fl x
Disables X11 forwarding.
.It Fl Y
Enables trusted X11 forwarding.
Trusted X11 forwardings are not subjected to the X11 SECURITY extension
controls.
.It Fl y
Send log information using the
.Xr syslog 3
system module.
By default this information is sent to stderr.
.El
.Pp
.Nm
may additionally obtain configuration data from
a per-user configuration file and a system-wide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
.Pp
.Nm
exits with the exit status of the remote command or with 255
if an error occurred.
.Sh AUTHENTICATION
The OpenSSH SSH client supports SSH protocols 1 and 2.
Protocol 2 is the default, with
.Nm
falling back to protocol 1 if it detects protocol 2 is unsupported.
These settings may be altered using the
.Cm Protocol
option in
.Xr ssh_config 5 ,
or enforced using the
.Fl 1
and
.Fl 2
options (see above).
Both protocols support similar authentication methods,
but protocol 2 is preferred since
it provides additional mechanisms for confidentiality
(the traffic is encrypted using AES, 3DES, Blowfish, CAST128, or Arcfour)
and integrity (umac-64, hmac-ripemd160, hmac-sha1, hmac-md5).
Protocol 1 lacks a strong mechanism for ensuring the
integrity of the connection.
.Pp
The methods available for authentication are:
host-based authentication,
public key authentication,
challenge-response authentication,
and password authentication.
Authentication methods are tried in the order specified above,
though protocol 2 has a configuration option to change the default order:
.Cm PreferredAuthentications .
.Pp
Host-based authentication works as follows:
If the machine the user logs in from is listed in
.Pa /etc/hosts.equiv
or
.Pa /etc/shosts.equiv
on the remote machine, and the user names are
the same on both sides, or if the files
.Pa ~/.rhosts
or
.Pa ~/.shosts
exist in the user's home directory on the
remote machine and contain a line containing the name of the client
machine and the name of the user on that machine, the user is
considered for login.
Additionally, the server
.Em must
be able to verify the client's
host key (see the description of
.Pa /etc/ssh/ssh_known_hosts
and
.Pa ~/.etc/ssh/known_hosts ,
below)
for login to be permitted.
This authentication method closes security holes due to IP
spoofing, DNS spoofing, and routing spoofing.
[Note to the administrator:
.Pa /etc/hosts.equiv ,
.Pa ~/.rhosts ,
and the rlogin/rsh protocol in general, are inherently insecure and should be
disabled if security is desired.]
.Pp
Public key authentication works as follows:
The scheme is based on public-key cryptography,
using cryptosystems
where encryption and decryption are done using separate keys,
and it is unfeasible to derive the decryption key from the encryption key.
The idea is that each user creates a public/private
key pair for authentication purposes.
The server knows the public key, and only the user knows the private key.
.Nm
implements public key authentication protocol automatically,
using either the RSA or DSA algorithms.
Protocol 1 is restricted to using only RSA keys,
but protocol 2 may use either.
The
.Sx HISTORY
section of
.Xr ssl 8
contains a brief discussion of the two algorithms.
.Pp
The file
.Pa ~/.etc/ssh/authorised_keys
or, if the user is the superuser and his home directory the root or unset,
.Pa /etc/ssh/root:authorised_keys
(or, portably,
.Pa ~/.ssh/authorized_keys )
lists the public keys that are permitted for logging in.
When the user logs in, the
.Nm
program tells the server which key pair it would like to use for
authentication.
The client proves that it has access to the private key
and the server checks that the corresponding public key
is authorised to accept the account.
.Pp
The user creates his/her key pair by running
.Xr ssh-keygen 1 .
This stores the private key in
.Pa ~/.etc/ssh/identity
(protocol 1),
.Pa ~/.etc/ssh/id_dsa
(protocol 2 DSA),
or
.Pa ~/.etc/ssh/id_rsa
(protocol 2 RSA)
and stores the public key in
.Pa ~/.etc/ssh/identity.pub
(protocol 1),
.Pa ~/.etc/ssh/id_dsa.pub
(protocol 2 DSA),
or
.Pa ~/.etc/ssh/id_rsa.pub
(protocol 2 RSA)
in the user's home directory.
The user should then copy the public key
to
.Pa ~/.etc/ssh/authorised_keys
(or, portably,
.Pa ~/.ssh/authorized_keys )
in his/her home directory on the remote machine.
If the user is the superuser and his home directory the root or unset,
/etc/ssh/root:authorised_keys
is used instead.
The
.Pa authorised_keys
file corresponds to the conventional
.Pa ~/.rhosts
file, and has one key
per line, though the lines can be very long.
After this, the user can log in without giving the password.
.Pp
The most convenient way to use public key authentication may be with an
authentication agent.
See
.Xr ssh-agent 1
for more information.
.Pp
Challenge-response authentication works as follows:
The server sends an arbitrary
.Qq challenge
text, and prompts for a response.
Protocol 2 allows multiple challenges and responses;
protocol 1 is restricted to just one challenge/response.
Examples of challenge-response authentication include
BSD Authentication (see
.Xr login.conf 5 )
and PAM (some non-OpenBSD systems).
.Pp
Finally, if other authentication methods fail,
.Nm
prompts the user for a password.
The password is sent to the remote
host for checking; however, since all communications are encrypted,
the password cannot be seen by someone listening on the network.
.Pp
.Nm
automatically maintains and checks a database containing
identification for all hosts it has ever been used with.
Host keys are stored in
.Pa ~/.etc/ssh/known_hosts
in the user's home directory and
.Pa /etc/ssh/root:known_hosts
if the user is the superuser and his home directory the root or unset.
Additionally, the file
.Pa /etc/ssh/ssh_known_hosts
is automatically checked for known hosts.
Any new hosts are automatically added to the user's file.
If a host's identification ever changes,
.Nm
warns about this and disables password authentication to prevent
server spoofing or man-in-the-middle attacks,
which could otherwise be used to circumvent the encryption.
The
.Cm StrictHostKeyChecking
option can be used to control logins to machines whose
host key is not known or has changed.
.Pp
When the user's identity has been accepted by the server, the server
either executes the given command, or logs into the machine and gives
the user a normal shell on the remote machine.
All communication with
the remote command or shell will be automatically encrypted.
.Pp
If a pseudo-terminal has been allocated (normal login session), the
user may use the escape characters noted below.
.Pp
If no pseudo-tty has been allocated,
the session is transparent and can be used to reliably transfer binary data.
On most systems, setting the escape character to
.Dq none
will also make the session transparent even if a tty is used.
.Pp
The session terminates when the command or shell on the remote
machine exits and all X11 and TCP connections have been closed.
.Sh ESCAPE CHARACTERS
When a pseudo-terminal has been requested,
.Nm
supports a number of functions through the use of an escape character.
.Pp
A single tilde character can be sent as
.Ic ~~
or by following the tilde by a character other than those described below.
The escape character must always follow a newline to be interpreted as
special.
The escape character can be changed in configuration files using the
.Cm EscapeChar
configuration directive or on the command line by the
.Fl e
option.
.Pp
The supported escapes (assuming the default
.Ql ~ )
are:
.Bl -tag -width Ds
.It Cm ~.
Disconnect.
.It Cm ~^Z
Background
.Nm .
.It Cm ~#
List forwarded connections.
.It Cm ~&
Background
.Nm
at logout when waiting for forwarded connection / X11 sessions to terminate.
.It Cm ~?
Display a list of escape characters.
.It Cm ~B
Send a BREAK to the remote system
(only useful for SSH protocol version 2 and if the peer supports it).
.It Cm ~C
Open command line.
Currently this allows the addition of port forwardings using the
.Fl L ,
.Fl R
and
.Fl D
options (see above).
It also allows the cancellation of existing remote port-forwardings
using
.Sm off
.Fl KR Oo Ar bind_address : Oc Ar port .
.Sm on
.Ic !\& Ns Ar command
allows the user to execute a local command if the
.Ic PermitLocalCommand
option is enabled in
.Xr ssh_config 5 .
Basic help is available, using the
.Fl h
option.
.It Cm ~R
Request rekeying of the connection
(only useful for SSH protocol version 2 and if the peer supports it).
.El
.Sh TCP FORWARDING
Forwarding of arbitrary TCP connections over the secure channel can
be specified either on the command line or in a configuration file.
One possible application of TCP forwarding is a secure connection to a
mail server; another is going through firewalls.
.Pp
In the example below, we look at encrypting communication between
an IRC client and server, even though the IRC server does not directly
support encrypted communications.
This works as follows:
the user connects to the remote host using
.Nm ,
specifying a port to be used to forward connections
to the remote server.
After that it is possible to start the service which is to be encrypted
on the client machine,
connecting to the same local port,
and
.Nm
will encrypt and forward the connection.
.Pp
The following example tunnels an IRC session from client machine
.Dq 127.0.0.1
(localhost)
to remote server
.Dq server.example.com :
.Bd -literal -offset 4n
$ ssh -f -L 1234:localhost:6667 server.example.com sleep 10
$ irc -c '#users' -p 1234 pinky 127.0.0.1
.Ed
.Pp
This tunnels a connection to IRC server
.Dq server.example.com ,
joining channel
.Dq #users ,
nickname
.Dq pinky ,
using port 1234.
It doesn't matter which port is used,
as long as it's greater than 1023
(remember, only root can open sockets on privileged ports)
and doesn't conflict with any ports already in use.
The connection is forwarded to port 6667 on the remote server,
since that's the standard port for IRC services.
.Pp
The
.Fl f
option backgrounds
.Nm
and the remote command
.Dq sleep 10
is specified to allow an amount of time
(10 seconds, in the example)
to start the service which is to be tunnelled.
If no connections are made within the time specified,
.Nm
will exit.
.Sh X11 FORWARDING
If the
.Cm ForwardX11
variable is set to
.Dq yes
(or see the description of the
.Fl X ,
.Fl x ,
and
.Fl Y
options above)
and the user is using X11 (the
.Ev DISPLAY
environment variable is set), the connection to the X11 display is
automatically forwarded to the remote side in such a way that any X11
programs started from the shell (or command) will go through the
encrypted channel, and the connection to the real X server will be made
from the local machine.
The user should not manually set
.Ev DISPLAY .
Forwarding of X11 connections can be
configured on the command line or in configuration files.
.Pp
The
.Ev DISPLAY
value set by
.Nm
will point to the server machine, but with a display number greater than zero.
This is normal, and happens because
.Nm
creates a
.Dq proxy
X server on the server machine for forwarding the
connections over the encrypted channel.
.Pp
.Nm
will also automatically set up Xauthority data on the server machine.
For this purpose, it will generate a random authorisation cookie,
store it in Xauthority on the server, and verify that any forwarded
connections carry this cookie and replace it by the real cookie when
the connection is opened.
The real authentication cookie is never
sent to the server machine (and no cookies are sent in the plain).
.Pp
If the
.Cm ForwardAgent
variable is set to
.Dq yes
(or see the description of the
.Fl A
and
.Fl a
options above) and
the user is using an authentication agent, the connection to the agent
is automatically forwarded to the remote side.
.Sh VERIFYING HOST KEYS
When connecting to a server for the first time,
a fingerprint of the server's public key is presented to the user
(unless the option
.Cm StrictHostKeyChecking
has been disabled).
Fingerprints can be determined using
.Xr ssh-keygen 1 :
.Pp
.Dl $ ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key
.Pp
If the fingerprint is already known, it can be matched
and the key can be accepted or rejected.
Because of the difficulty of comparing host keys
just by looking at hex strings,
there is also support to compare host keys visually,
using
.Em random art .
By setting the
.Cm VisualHostKey
option to
.Dq yes ,
a small ASCII graphic gets displayed on every login to a server, no matter
if the session itself is interactive or not.
By learning the pattern a known server produces, a user can easily
find out that the host key has changed when a completely different pattern
is displayed.
Because these patterns are not unambiguous however, a pattern that looks
similar to the pattern remembered only gives a good probability that the
host key is the same, not guaranteed proof.
.Pp
To get a listing of the fingerprints along with their random art for
all known hosts, the following command line can be used:
.Pp
.Dl $ ssh-keygen -lv -f ~/.etc/ssh/known_hosts
.Pp
If the fingerprint is unknown,
an alternative method of verification is available:
SSH fingerprints verified by DNS.
An additional resource record (RR),
SSHFP,
is added to a zonefile
and the connecting client is able to match the fingerprint
with that of the key presented.
.Pp
In this example, we are connecting a client to a server,
.Dq host.example.com .
The SSHFP resource records should first be added to the zonefile for
host.example.com:
.Bd -literal -offset indent
$ ssh-keygen -r host.example.com.
.Ed
.Pp
The output lines will have to be added to the zonefile.
To check that the zone is answering fingerprint queries:
.Pp
.Dl $ dig -t SSHFP host.example.com
.Pp
Finally the client connects:
.Bd -literal -offset indent
$ ssh -o "VerifyHostKeyDNS ask" host.example.com
[...]
Matching host key fingerprint found in DNS.
Are you sure you want to continue connecting (yes/no)?
.Ed
.Pp
See the
.Cm VerifyHostKeyDNS
option in
.Xr ssh_config 5
for more information.
.Sh SSH-BASED VIRTUAL PRIVATE NETWORKS
.Nm
contains support for Virtual Private Network (VPN) tunnelling
using the
.Xr tun 4
network pseudo-device,
allowing two networks to be joined securely.
Use of this option is however, due to the reasons outlined at
.Pa http://sites.inka.de/sites/bigred/devel/tcp-tcp.html ,
discouraged in favour of OpenVPN, until datagram transport is added.
The
.Xr sshd_config 5
configuration option
.Cm PermitTunnel
controls whether the server supports this,
and at what level (layer 2 or 3 traffic).
.Pp
The following example would connect client network 10.0.50.0/24
with remote network 10.0.99.0/24 using a point-to-point connection
from 10.1.1.1 to 10.1.1.2,
provided that the SSH server running on the gateway to the remote network,
at 192.168.1.15, allows it.
.Pp
On the client:
.Bd -literal -offset indent
# ssh -f -w 0:1 192.168.1.15 true
# ifconfig tun0 10.1.1.1 10.1.1.2 netmask 255.255.255.252
# route add 10.0.99.0/24 10.1.1.2
.Ed
.Pp
On the server:
.Bd -literal -offset indent
# ifconfig tun1 10.1.1.2 10.1.1.1 netmask 255.255.255.252
# route add 10.0.50.0/24 10.1.1.1
.Ed
.Pp
Client access may be more finely tuned via the
.Pa /.etc/ssh/authorised_keys
file (see below) and the
.Cm PermitRootLogin
server option.
The following entry would permit connections on
.Xr tun 4
device 1 from user
.Dq jane
and on tun device 2 from user
.Dq john ,
if
.Cm PermitRootLogin
is set to
.Dq forced-commands-only :
.Bd -literal -offset 2n
tunnel="1",command="sh /etc/netstart tun1" ssh-rsa ... jane
tunnel="2",command="sh /etc/netstart tun2" ssh-rsa ... john
.Ed
.Pp
Since an SSH-based setup entails a fair amount of overhead,
it may be more suited to temporary setups,
such as for wireless VPNs.
More permanent VPNs are better provided by tools such as
.Xr ipsecctl 8
and
.Xr isakmpd 8 .
.Sh ENVIRONMENT
.Nm
will normally set the following environment variables:
.Bl -tag -width "SSH_ORIGINAL_COMMAND"
.It Ev DISPLAY
The
.Ev DISPLAY
variable indicates the location of the X11 server.
It is automatically set by
.Nm
to point to a value of the form
.Dq hostname:n ,
where
.Dq hostname
indicates the host where the shell runs, and
.Sq n
is an integer \*(Ge 1.
.Nm
uses this special value to forward X11 connections over the secure
channel.
The user should normally not set
.Ev DISPLAY
explicitly, as that
will render the X11 connection insecure (and will require the user to
manually copy any required authorisation cookies).
.It Ev HOME
Set to the path of the user's home directory.
.It Ev LOGNAME
Synonym for
.Ev USER ;
set for compatibility with systems that use this variable.
.It Ev MAIL
Set to the path of the user's mailbox.
.It Ev PATH
Set to the default
.Ev PATH ,
as specified when compiling
.Nm .
.It Ev SSH_ASKPASS
If
.Nm
needs a passphrase, it will read the passphrase from the current
terminal if it was run from a terminal.
If
.Nm
does not have a terminal associated with it but
.Ev DISPLAY
and
.Ev SSH_ASKPASS
are set, it will execute the program specified by
.Ev SSH_ASKPASS
and open an X11 window to read the passphrase.
This is particularly useful when calling
.Nm
from a
.Pa .xsession
or related script.
(Note that on some machines it
may be necessary to redirect the input from
.Pa /dev/null
to make this work.)
.It Ev SSH_AUTH_SOCK
Identifies the path of a
.Ux Ns -domain
socket used to communicate with the agent.
.It Ev SSH_CONNECTION
Identifies the client and server ends of the connection.
The variable contains
four space-separated values: client IP address, client port number,
server IP address, and server port number.
.It Ev SSH_ORIGINAL_COMMAND
This variable contains the original command line if a forced command
is executed.
It can be used to extract the original arguments.
.It Ev SSH_TTY
This is set to the name of the tty (path to the device) associated
with the current shell or command.
If the current session has no tty,
this variable is not set.
.It Ev TZ
This variable is set to indicate the present time zone if it
was set when the daemon was started (i.e. the daemon passes the value
on to new connections).
.It Ev USER
Set to the name of the user logging in.
.El
.Pp
Additionally,
.Nm
reads
.Pa ~/.etc/ssh/environment ,
and adds lines of the format
.Dq VARNAME=value
to the environment if the file exists and users are allowed to
change their environment.
For more information, see the
.Cm PermitUserEnvironment
option in
.Xr sshd_config 5 .
.Sh FILES
.Bl -tag -width Ds -compact
.It ~/.rhosts
This file is used for host-based authentication (see above).
On some machines this file may need to be
world-readable if the user's home directory is on an NFS partition,
because
.Xr sshd 8
reads it as root.
Additionally, this file must be owned by the user,
and must not have write permissions for anyone else.
The recommended
permission for most machines is read/write for the user, and not
accessible by others.
.Pp
.It ~/.shosts
This file is used in exactly the same way as
.Pa .rhosts ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
.It ~/.etc/ssh/
This directory is the default location for all user-specific configuration
and authentication information.
There is no general requirement to keep the entire contents of this directory
secret, but the recommended permissions are read/write/execute for the user,
and not accessible by others.
.Pp
.It ~/.etc/ssh/authorised_keys
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
The format of this file is described in the
.Xr sshd 8
manual page.
This file is not highly sensitive, but the recommended
permissions are read/write for the user, and not accessible by others.
.Pp
.It /etc/ssh/root:authorised_keys
The same, for the superuser, if his home is the root directory or unset.
.Pp
.It ~/.ssh/authorized_keys
Portable name for the above file.
.Pp
.It ~/.etc/ssh/config
This is the per-user configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
Because of the potential for abuse, this file must have strict permissions:
read/write for the user, and not accessible by others.
.Pp
.It /etc/ssh/root:config
The same, for the superuser, if his home is the root directory or unset.
.Pp
.It ~/.etc/ssh/environment
Contains additional definitions for environment variables; see
.Sx ENVIRONMENT ,
above.
.Pp
.It ~/.etc/ssh/identity
.It ~/.etc/ssh/id_dsa
.It ~/.etc/ssh/id_rsa
Contains the private key for authentication.
These files
contain sensitive data and should be readable by the user but not
accessible by others (read/write/execute).
.Nm
will simply ignore a private key file if it is accessible by others.
It is possible to specify a passphrase when
generating the key which will be used to encrypt the
sensitive part of this file using 3DES.
.Pp
.It ~/.etc/ssh/identity.pub
.It ~/.etc/ssh/id_dsa.pub
.It ~/.etc/ssh/id_rsa.pub
Contains the public key for authentication.
These files are not
sensitive and can (but need not) be readable by anyone.
.Pp
.It ~/.etc/ssh/known_hosts
Contains a list of host keys for all hosts the user has logged into
that are not already in the systemwide list of known host keys.
See
.Xr sshd 8
for further details of the format of this file.
.Pp
.It /etc/ssh/root:known_hosts
The same, for the superuser, if his home is the root directory or unset.
.Pp
.It ~/.etc/ssh/rc
Commands in this file are executed by
.Nm
when the user logs in, just before the user's shell (or command) is
started.
See the
.Xr sshd 8
manual page for more information.
.Pp
.It /etc/hosts.equiv
This file is for host-based authentication (see above).
It should only be writable by root.
.Pp
.It /etc/shosts.equiv
This file is used in exactly the same way as
.Pa hosts.equiv ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
.It Pa /etc/ssh/ssh_config
Systemwide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
.Pp
.It /etc/ssh/ssh_host_key
.It /etc/ssh/ssh_host_dsa_key
.It /etc/ssh/ssh_host_rsa_key
These three files contain the private parts of the host keys
and are used for host-based authentication.
If protocol version 1 is used,
.Nm
must be setuid root, since the host key is readable only by root.
For protocol version 2,
.Nm
uses
.Xr ssh-keysign 8
to access the host keys,
eliminating the requirement that
.Nm
be setuid root when host-based authentication is used.
By default
.Nm
is not setuid root.
.Pp
.It /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator to contain the public host keys of all machines in the
organization.
It should be world-readable.
See
.Xr sshd 8
for further details of the format of this file.
.Pp
.It /etc/ssh/sshrc
Commands in this file are executed by
.Nm
when the user logs in, just before the user's shell (or command) is started.
See the
.Xr sshd 8
manual page for more information.
.El
.Sh SEE ALSO
.Xr scp 1 ,
.Xr sftp 1 ,
.Xr ssh\-add 1 ,
.Xr ssh\-agent 1 ,
.Xr ssh\-keygen 1 ,
.Xr ssh\-keyscan 1 ,
.Xr tun 4 ,
.Xr hosts.equiv 5 ,
.Xr ssh_config 5 ,
.Xr sshd 8 ,
.Xr telnet 1
.Rs
.%R RFC 4250
.%T "The Secure Shell (SSH) Protocol Assigned Numbers"
.%D 2006
.Re
.Rs
.%R RFC 4251
.%T "The Secure Shell (SSH) Protocol Architecture"
.%D 2006
.Re
.Rs
.%R RFC 4252
.%T "The Secure Shell (SSH) Authentication Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4253
.%T "The Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4254
.%T "The Secure Shell (SSH) Connection Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4255
.%T "Using DNS to Securely Publish Secure Shell (SSH) Key Fingerprints"
.%D 2006
.Re
.Rs
.%R RFC 4256
.%T "Generic Message Exchange Authentication for the Secure Shell Protocol (SSH)"
.%D 2006
.Re
.Rs
.%R RFC 4335
.%T "The Secure Shell (SSH) Session Channel Break Extension"
.%D 2006
.Re
.Rs
.%R RFC 4344
.%T "The Secure Shell (SSH) Transport Layer Encryption Modes"
.%D 2006
.Re
.Rs
.%R RFC 4345
.%T "Improved Arcfour Modes for the Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4419
.%T "Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4716
.%T "The Secure Shell (SSH) Public Key File Format"
.%D 2006
.Re
.Rs
.%T "Hash Visualization: a New Technique to improve Real-World Security"
.%A A. Perrig
.%A D. Song
.%D 1999
.%O "International Workshop on Cryptographic Techniques and E-Commerce (CrypTEC '99)"
.Re
.Sh AUTHORS
OpenSSH is a derivative of the original and free
ssh 1.2.12 release by Tatu Ylonen.
Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
Theo de Raadt and Dug Song
removed many bugs, re-added newer features and
created OpenSSH.
Markus Friedl contributed the support for SSH
protocol versions 1.5 and 2.0.
@


1.28
log
@sync ssh_config and manpage with each other
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.27 2009/03/22 15:01:21 tg Exp $
d39 1
a39 1
.Dd $Mdocdate: March 22 2009 $
d263 3
d746 2
d784 3
d824 3
a826 1
in the user's home directory.
d1300 3
d1313 3
d1348 3
@


1.27
log
@merge and tweak ciphers and MACs
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.26 2008/12/16 22:13:30 tg Exp $
d453 1
a453 1
.It HostName
@


1.26
log
@really merge OpenSSH-current into MirBSD Secure SHell 10uA4
@
text
@d37 3
a39 3
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.25 2008/12/16 20:55:30 tg Exp $
.\" $OpenBSD: ssh.1,v 1.280 2008/11/09 12:34:47 tobias Exp $
.Dd $Mdocdate: December 16 2008 $
d542 7
d678 1
a678 1
and integrity (hmac-ripemd160, umac-64, hmac-sha1, hmac-md5).
@


1.25
log
@fastmerge, do not use yet!
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.24 2008/05/07 12:16:13 tg Exp $
d1048 1
a1048 1
.Dl $ ssh-keygen -lv -f ~/.ssh/known_hosts
@


1.24
log
@remove all references to /root
@
text
@d37 3
a39 3
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.23 2008/03/02 21:14:22 tg Exp $
.\" $OpenBSD: ssh.1,v 1.273 2008/02/11 07:58:28 jmc Exp $
.Dd $Mdocdate: March 2 2008 $
d47 1
a47 1
.Op Fl 1246AaCfgMNnqsTtVvXxY
d276 9
d486 1
d529 1
a529 1
This may be overriden by specifying a
d637 5
d880 2
a881 1
.Fl L
d883 1
a883 1
.Fl R
d1025 25
a1049 3
If the fingerprint is already known,
it can be matched and verified,
and the key can be accepted.
d1459 7
@


1.23
log
@merge’n’fix
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.22 2007/06/16 15:41:51 tg Exp $
d1084 1
a1084 1
.Pa /root/.etc/ssh/authorised_keys
@


1.22
log
@sync’n’bump
@
text
@d37 3
a39 3
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.21 2007/01/25 16:18:38 tg Exp $
.\" $OpenBSD: ssh.1,v 1.270 2007/06/12 13:43:55 jmc Exp $
.Dd $Mdocdate: June 16 2007 $
d485 1
a485 1
Causes all warning and diagnostic messages to be suppressed.
d1230 7
@


1.21
log
@automerge, bump vsn
@
text
@d37 3
a39 3
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.20 2006/11/09 02:42:06 tg Exp $
.\" $OpenBSD: ssh.1,v 1.266 2006/12/11 21:25:46 markus Exp $
.Dd September 25, 1999
d656 1
a656 1
and integrity (hmac-ripemd160, hmac-sha1, hmac-md5).
@


1.20
log
@merge
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.19 2006/10/13 18:40:51 tg Exp $
.\" $OpenBSD: ssh.1,v 1.265 2006/10/28 18:08:10 otto Exp $
d1409 5
@


1.19
log
@merge the 4.0 equivalent of 015_ssh.patch
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.18 2006/09/20 21:41:05 tg Exp $
.\" $OpenBSD: ssh.1,v 1.264 2006/09/25 04:55:38 ray Exp $
d1065 6
a1070 3
with remote network 10.0.99.0/24, provided that the SSH server
running on the gateway to the remote network,
at 192.168.1.15, allows it:
d1073 8
a1080 1
# ifconfig tun0 10.0.50.1 10.0.99.1 netmask 255.255.255.252
@


1.18
log
@finish merging
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.17 2006/08/12 13:57:11 tg Exp $
.\" $OpenBSD: ssh.1,v 1.263 2006/07/11 18:50:48 markus Exp $
d1093 1
a1093 1
Since a SSH-based setup entails a fair amount of overhead,
@


1.17
log
@* readconf.h, ssh.c: move support code for 'ssh -h' into ssh.c entirely
* ssh.c: deprecate -h (big warning)
* ssh.1, ssh.c: don't document -h, -k
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.16 2006/07/23 14:19:28 tg Exp $
.\" $OpenBSD: ssh.1,v 1.260 2006/05/29 16:13:23 jmc Exp $
d82 2
a83 1
.Op Fl w Ar tunnel : Ns Ar tunnel
d433 1
d572 6
a577 2
.It Fl w Ar tunnel : Ns Ar tunnel
Requests a
d579 5
a583 8
device on the client
(first
.Ar tunnel
arg)
and server
(second
.Ar tunnel
arg).
d587 4
d593 3
a595 1
directive in
d597 4
d871 3
a873 1
.Fl KR Ar hostport .
@


1.16
log
@fix spelling and pubkey authentication
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.15 2006/06/02 20:50:51 tg Exp $
d47 1
a47 1
.Op Fl 1246AaCfghkMNnqsTtVvXxY
a276 4
.It Fl h
Disables the TCP lowdelay option.
Useful for using with rsync over ssh to not block the interactive
session while using ALTQ to prioritize ssh traffic.
@


1.15
log
@* merge
* remove all references to GSSAPI, Kerberos and AFS
* uint*_t -> u_int*_t for consistency, like openbsd
  (note: MirOS style(9) suggests uint32_t etc. instead!)
* bump vsn
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.14 2006/04/19 10:40:55 tg Exp $
d598 1
a598 1
(for the user's X authorization database)
d712 2
a713 2
(or
.Pa ~/.etc/ssh/authorized_keys )
d721 1
a721 1
is authorized to accept the account.
d746 1
a746 1
.Pa ~/.etc/ssh/authorized_keys )
d969 1
a969 1
For this purpose, it will generate a random authorization cookie,
d1113 1
a1113 1
manually copy any required authorization cookies).
d1217 1
a1217 1
.It ~/.etc/ssh/authorized_keys
@


1.14
log
@merge and clean up
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.13 2006/03/27 19:37:55 tg Exp $
.\" $OpenBSD: ssh.1,v 1.259 2006/03/22 21:16:24 jakob Exp $
@


1.13
log
@don't duplicate the info from 5 other files here, too.
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.12 2006/02/22 01:23:52 tg Exp $
.\" $OpenBSD: ssh.1,v 1.256 2006/02/15 16:53:20 jmc Exp $
d555 1
a555 1
e.g., when implementing menu services.
d1015 1
a1015 2
$ ssh-keygen -f /etc/ssh/ssh_host_rsa_key.pub -r host.example.com.
$ ssh-keygen -f /etc/ssh/ssh_host_dsa_key.pub -r host.example.com.
d1170 1
a1170 1
was set when the daemon was started (i.e., the daemon passes the value
d1383 5
@


1.12
log
@merge; bump version; fix up manpages and includes a little
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.11 2005/12/20 19:57:36 tg Exp $
d194 2
a195 20
The supported ciphers are:
3des-cbc,
aes128-cbc,
aes192-cbc,
aes256-cbc,
aes128-ctr,
aes192-ctr,
aes256-ctr,
arcfour128,
arcfour256,
arcfour,
blowfish-cbc,
and
cast128-cbc.
The default is:
.Bd -literal -offset indent
arcfour128,arcfour256,blowfish-cbc,aes256-cbc,arcfour,
aes128-cbc,cast128-cbc,rijndael-cbc@@lysator.liu.se,3des-cbc,
aes192-cbc,aes128-ctr,aes192-ctr,aes256-ctr
.Ed
@


1.11
log
@fastmerge, bump version
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.10 2005/11/23 19:45:15 tg Exp $
.\" $OpenBSD: ssh.1,v 1.221 2005/12/16 18:14:40 jmc Exp $
d93 1
a93 1
X11 connections and arbitrary TCP/IP ports
d150 1
a150 1
data for forwarded X11 and TCP/IP connections).
d190 1
a190 1
For protocol version 2
d194 12
a205 12
The supported ciphers are
.Dq 3des-cbc ,
.Dq aes128-cbc ,
.Dq aes192-cbc ,
.Dq aes256-cbc ,
.Dq aes128-ctr ,
.Dq aes192-ctr ,
.Dq aes256-ctr ,
.Dq arcfour128 ,
.Dq arcfour256 ,
.Dq arcfour ,
.Dq blowfish-cbc ,
d207 1
a207 1
.Dq cast128-cbc .
d260 1
a260 1
.It Fl e Ar ch | ^ch | none
d300 1
a300 2
Specifies which smartcard device to use.
The argument is the device
d304 2
d375 7
d481 1
d595 12
a606 1
device on the client and server like the
d637 42
a678 6
.Ss SSH protocol version 1
The first authentication method is the
.Em rhosts
or
.Em hosts.equiv
method combined with RSA-based host authentication.
d691 5
a695 3
considered for log in.
Additionally, if the server can verify the client's
host key (see
d698 3
a700 4
.Pa ~/.etc/ssh/known_hosts
in the
.Sx FILES
section), only then is login permitted.
d702 1
a702 1
spoofing, DNS spoofing and routing spoofing.
d709 5
a713 7
As a second authentication method,
.Nm
supports RSA based authentication.
The scheme is based on public-key cryptography: there are cryptosystems
where encryption and decryption are done using separate keys, and it
is not possible to derive the decryption key from the encryption key.
RSA is one such system.
d717 10
d737 3
a739 9
The server checks if this key is permitted, and if so,
sends the user (actually the
.Nm
program running on behalf of the user) a challenge, a random number,
encrypted by the user's public key.
The challenge can only be decrypted using the proper private key.
The user's client then decrypts the challenge using the private key,
proving that he/she knows the private key
but without disclosing it to the server.
d741 1
a741 3
.Nm
implements the RSA authentication protocol automatically.
The user creates his/her RSA key pair by running
d745 6
d753 6
d760 1
a760 2
The user should then copy the
.Pa identity.pub
d764 4
a767 3
.Pa ~/.ssh/authorized_keys )
in his/her home directory on the remote machine (the
.Pa authorized_keys
d771 1
a771 1
per line, though the lines can be very long).
d774 1
a774 1
The most convenient way to use RSA authentication may be with an
d780 12
a791 1
If other authentication methods fail,
a796 24
.Ss SSH protocol version 2
When a user connects using protocol version 2,
similar authentication methods are available.
Using the default values for
.Cm PreferredAuthentications ,
the client will try to authenticate first using the hostbased method;
if this method fails, public key authentication is attempted,
and finally if this method fails, keyboard-interactive and
password authentication are tried.
.Pp
The public key method is similar to RSA authentication described
in the previous section and allows the RSA or DSA algorithm to be used:
The client uses his private key,
.Pa ~/.etc/ssh/id_dsa
or
.Pa ~/.etc/ssh/id_rsa ,
to sign the session identifier and sends the result to the server.
The server checks whether the matching public key is listed in
.Pa ~/.etc/ssh/authorised_keys
(or
.Pa ~/.etc/ssh/authorized_keys )
and grants access if both the key is found and the signature is correct.
The session identifier is derived from a shared Diffie-Hellman value
and is only known to the client and the server.
a797 4
If public key authentication fails or is not available, a password
can be sent encrypted to the remote host to prove the user's identity.
.Pp
Additionally,
d799 18
a816 1
supports hostbased or challenge response authentication.
a817 6
Protocol 2 provides additional mechanisms for confidentiality
(the traffic is encrypted using Blowfish, AES, 3DES, CAST128 or Arcfour)
and integrity (hmac-ripemd160, hmac-sha1, hmac-md5).
Note that protocol 1 lacks a strong mechanism for ensuring the
integrity of the connection.
.Ss Login session and remote execution
d834 2
a835 10
machine exits and all X11 and TCP/IP connections have been closed.
The exit status of the remote program is returned as the exit status of
.Nm ssh .
.Pp
.Nm
may additionally obtain configuration data from
a per-user configuration file and a system-wide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
.Ss Escape Characters
d859 1
a859 1
.Nm ssh .
d877 1
a877 1
options (see below).
d893 58
a950 1
.Ss X11 and TCP forwarding
d956 2
a957 1
.Fl X
d959 2
a960 2
.Fl x
options described later)
d1002 1
a1002 1
options described later) and
d1005 31
d1037 19
a1055 5
Forwarding of arbitrary TCP/IP connections over the secure channel can
be specified either on the command line or in a configuration file.
One possible application of TCP/IP forwarding is a secure connection to an
electronic purse; another is going through firewalls.
.Ss Server authentication
d1057 8
a1064 15
automatically maintains and checks a database containing
identifications for all hosts it has ever been used with.
Host keys are stored in
.Pa ~/.etc/ssh/known_hosts
in the user's home directory.
Additionally, the file
.Pa /etc/ssh/ssh_known_hosts
is automatically checked for known hosts.
Any new hosts are automatically added to the user's file.
If a host's identification ever changes,
.Nm
warns about this and disables password authentication to prevent a
trojan horse from getting the user's password.
Another purpose of this mechanism is to prevent man-in-the-middle attacks
which could otherwise be used to circumvent the encryption.
d1066 34
a1099 3
.Cm StrictHostKeyChecking
option can be used to prevent logins to machines whose
host key is not known or has changed.
d1101 7
a1107 8
.Nm
can be configured to verify host identification using fingerprint resource
records (SSHFP) published in DNS.
The
.Cm VerifyHostKeyDNS
option can be used to control how DNS lookups are performed.
SSHFP resource records can be generated using
.Xr ssh-keygen 1 .
d1111 1
a1111 1
.Bl -tag -width LOGNAME
d1119 6
a1124 3
.Dq hostname:n
where hostname indicates
the host where the shell runs, and n is an integer \*(Ge 1.
d1145 1
a1145 1
.Nm ssh .
d1170 3
a1172 2
Identifies the path of a unix-domain socket used to communicate with the
agent.
d1176 2
a1177 2
four space-separated values: client ip-address, client port number,
server ip-address and server port number.
d1179 1
a1179 1
The variable contains the original command line if a forced command
d1201 1
a1201 1
to the environment if the file exists and if users are allowed to
d1208 47
a1254 10
.Bl -tag -width Ds
.It Pa ~/.etc/ssh/known_hosts
Records host keys for all hosts the user has logged into that are not
in
.Pa /etc/ssh/ssh_known_hosts .
See
.Xr sshd 8 .
.It Pa ~/.etc/ssh/identity, ~/.etc/ssh/id_dsa, ~/.etc/ssh/id_rsa
Contains the authentication identity of the user.
They are for protocol 1 RSA, protocol 2 DSA, and protocol 2 RSA, respectively.
a1257 1
Note that
d1259 1
a1259 1
ignores a private key file if it is accessible by others.
d1261 1
a1261 1
generating the key; the passphrase will be used to encrypt the
d1263 5
a1267 19
.It Pa ~/.etc/ssh/identity.pub, ~/.etc/ssh/id_dsa.pub, ~/.etc/ssh/id_rsa.pub
Contains the public key for authentication (public part of the
identity file in human-readable form).
The contents of the
.Pa ~/.etc/ssh/identity.pub
file should be added to the file
.Pa ~/.etc/ssh/authorised_keys
.Ns No ( Pa ~/.etc/ssh/authorized_keys )
on all machines
where the user wishes to log in using protocol version 1 RSA authentication.
The contents of the
.Pa ~/.etc/ssh/id_dsa.pub
and
.Pa ~/.etc/ssh/id_rsa.pub
file should be added to
.Pa ~/.etc/ssh/authorised_keys
.Ns No ( Pa ~/.etc/ssh/authorized_keys )
on all machines
where the user wishes to log in using protocol version 2 DSA/RSA authentication.
d1270 5
a1274 12
These files are
never used automatically and are not necessary; they are only provided for
the convenience of the user.
.It Pa ~/.etc/ssh/config
This is the per-user configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
Because of the potential for abuse, this file must have strict permissions:
read/write for the user, and not accessible by others.
.It Pa ~/.etc/ssh/authorised_keys
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
The format of this file is described in the
d1276 8
a1283 19
manual page.
In the simplest form the format is the same as the
.Pa .pub
identity files.
This file is not highly sensitive, but the recommended
permissions are read/write for the user, and not accessible by others.
.It Pa /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator to contain the public host keys of all machines in the
organization.
This file should be world-readable.
This file contains
public keys, one per line, in the following format (fields separated
by spaces): system name, public key and optional comment field.
When different names are used
for the same machine, all such names should be listed, separated by
commas.
The format is described in the
d1285 11
a1295 1
manual page.
a1296 7
The canonical system name (as returned by name servers) is used by
.Xr sshd 8
to verify the client host when logging in; other names are needed because
.Nm
does not convert the user-supplied name to a canonical name before
checking the key, because someone with access to the name servers
would then be able to fool host authentication.
d1301 4
a1304 1
.It Pa /etc/ssh/ssh_host_key, /etc/ssh/ssh_host_dsa_key, /etc/ssh/ssh_host_rsa_key
d1306 2
a1307 7
and are used for
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication .
If the protocol version 1
.Cm RhostsRSAAuthentication
method is used,
d1314 2
a1315 3
to access the host keys for
.Cm HostbasedAuthentication .
This eliminates the requirement that
d1317 1
a1317 1
be setuid root when that authentication method is used.
d1321 8
a1328 15
.It Pa ~/.rhosts
This file is used in
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication
authentication to list the
host/user pairs that are permitted to log in.
(Note that this file is
also used by rlogin and rsh, which makes using this file insecure.)
Each line of the file contains a host name (in the canonical form
returned by name servers), and then a user name on that host,
separated by a space.
On some machines this file may need to be
world-readable if the user's home directory is on a NFS partition,
because
d1330 1
a1330 6
reads it as root.
Additionally, this file must be owned by the user,
and must not have write permissions for anyone else.
The recommended
permission for most machines is read/write for the user, and not
accessible by others.
d1332 1
a1332 53
Note that
.Xr sshd 8
allows authentication only in combination with client host key
authentication before permitting log in.
If the server machine does not have the client's host key in
.Pa /etc/ssh/ssh_known_hosts ,
it can be stored in
.Pa ~/.etc/ssh/known_hosts .
The easiest way to do this is to
connect back to the client from the server machine using ssh; this
will automatically add the host key to
.Pa ~/.etc/ssh/known_hosts .
.It Pa ~/.shosts
This file is used exactly the same way as
.Pa .rhosts .
The purpose for
having this file is to be able to use
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication
authentication without permitting login with
.Xr rlogin
or
.Xr rsh 1 .
.It Pa /etc/hosts.equiv
This file is used during
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication
authentication.
It contains
canonical hosts names, one per line (the full format is described in the
.Xr sshd 8
manual page).
If the client host is found in this file, login is
automatically permitted provided client and server user names are the
same.
Additionally, successful client host key authentication is required.
This file should only be writable by root.
.It Pa /etc/shosts.equiv
This file is processed exactly as
.Pa /etc/hosts.equiv .
This file may be useful to permit logins using
.Nm
but not using rsh/rlogin.
.It Pa /etc/ssh/sshrc
Commands in this file are executed by
.Nm
when the user logs in just before the user's shell (or command) is started.
See the
.Xr sshd 8
manual page for more information.
.It Pa ~/.etc/ssh/rc
d1335 1
a1335 2
when the user logs in just before the user's shell (or command) is
started.
a1338 4
.It Pa ~/.etc/ssh/environment
Contains additional definitions for environment variables, see section
.Sx ENVIRONMENT
above.
a1339 4
.Sh DIAGNOSTICS
.Nm
exits with the exit status of the remote command or with 255
if an error occurred.
a1340 3
.Xr gzip 1 ,
.Xr hosts.equiv 5 ,
.Xr rsh 1 ,
d1346 3
a1348 1
.Xr ssh\-keysign 8 ,
d1353 48
a1400 9
.%A T. Ylonen
.%A T. Kivinen
.%A M. Saarinen
.%A T. Rinne
.%A S. Lehtinen
.%T "SSH Protocol Architecture"
.%N draft-ietf-secsh-architecture-12.txt
.%D January 2002
.%O work in progress material
@


1.10
log
@merge
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.9 2005/11/23 18:04:21 tg Exp $
.\" $OpenBSD: ssh.1,v 1.212 2005/09/19 23:31:31 djm Exp $
d81 2
d85 1
d104 1
a104 1
depending on the protocol version used.
d109 1
a109 36
.Ar command
is executed on the remote host instead of a login shell.
.Ss SSH protocol version 1
The first authentication method is the
.Em rhosts
or
.Em hosts.equiv
method combined with RSA-based host authentication.
If the machine the user logs in from is listed in
.Pa /etc/hosts.equiv
or
.Pa /etc/shosts.equiv
on the remote machine, and the user names are
the same on both sides, or if the files
.Pa ~/.rhosts
or
.Pa ~/.shosts
exist in the user's home directory on the
remote machine and contain a line containing the name of the client
machine and the name of the user on that machine, the user is
considered for log in.
Additionally, if the server can verify the client's
host key (see
.Pa /etc/ssh/ssh_known_hosts
and
.Pa ~/.etc/ssh/known_hosts
in the
.Sx FILES
section), only then is login permitted.
This authentication method closes security holes due to IP
spoofing, DNS spoofing and routing spoofing.
[Note to the administrator:
.Pa /etc/hosts.equiv ,
.Pa ~/.rhosts ,
and the rlogin/rsh protocol in general, are inherently insecure and should be
disabled if security is desired.]
d111 4
a114 1
As a second authentication method,
d116 3
a118 15
supports RSA based authentication.
The scheme is based on public-key cryptography: there are cryptosystems
where encryption and decryption are done using separate keys, and it
is not possible to derive the decryption key from the encryption key.
RSA is one such system.
The idea is that each user creates a public/private
key pair for authentication purposes.
The server knows the public key, and only the user knows the private key.
.Pp
The file
.Pa ~/.etc/ssh/authorised_keys
(or
.Pa ~/.etc/ssh/authorized_keys )
lists the public keys that are permitted for logging in.
When the user logs in, the
d120 3
a122 4
program tells the server which key pair it would like to use for
authentication.
The server checks if this key is permitted, and if so,
sends the user (actually the
d124 3
a126 7
program running on behalf of the user) a challenge, a random number,
encrypted by the user's public key.
The challenge can only be decrypted using the proper private key.
The user's client then decrypts the challenge using the private key,
proving that he/she knows the private key
but without disclosing it to the server.
.Pp
d128 4
a131 21
implements the RSA authentication protocol automatically.
The user creates his/her RSA key pair by running
.Xr ssh-keygen 1 .
This stores the private key in
.Pa ~/.etc/ssh/identity
and stores the public key in
.Pa ~/.etc/ssh/identity.pub
in the user's home directory.
The user should then copy the
.Pa identity.pub
to
.Pa ~/.etc/ssh/authorised_keys
(or, portably,
.Pa ~/.ssh/authorized_keys )
in his/her home directory on the remote machine (the
.Pa authorized_keys
file corresponds to the conventional
.Pa ~/.rhosts
file, and has one key
per line, though the lines can be very long).
After this, the user can log in without giving the password.
d133 33
a165 5
The most convenient way to use RSA authentication may be with an
authentication agent.
See
.Xr ssh-agent 1
for more information.
d167 14
a180 1
If other authentication methods fail,
d182 7
a188 13
prompts the user for a password.
The password is sent to the remote
host for checking; however, since all communications are encrypted,
the password cannot be seen by someone listening on the network.
.Ss SSH protocol version 2
When a user connects using protocol version 2,
similar authentication methods are available.
Using the default values for
.Cm PreferredAuthentications ,
the client will try to authenticate first using the hostbased method;
if this method fails, public key authentication is attempted,
and finally if this method fails, keyboard-interactive and
password authentication are tried.
d190 42
a231 19
The public key method is similar to RSA authentication described
in the previous section and allows the RSA or DSA algorithm to be used:
The client uses his private key,
.Pa ~/.etc/ssh/id_dsa
or
.Pa ~/.etc/ssh/id_rsa ,
to sign the session identifier and sends the result to the server.
The server checks whether the matching public key is listed in
.Pa ~/.etc/ssh/authorised_keys
(or
.Pa ~/.etc/ssh/authorized_keys )
and grants access if both the key is found and the signature is correct.
The session identifier is derived from a shared Diffie-Hellman value
and is only known to the client and the server.
.Pp
If public key authentication fails or is not available, a password
can be sent encrypted to the remote host to prove the user's identity.
.Pp
Additionally,
d233 3
a235 1
supports hostbased or challenge response authentication.
d237 33
a269 18
Protocol 2 provides additional mechanisms for confidentiality
(the traffic is encrypted using Blowfish, AES, 3DES, CAST128 or Arcfour)
and integrity (hmac-ripemd160, hmac-sha1, hmac-md5).
Note that protocol 1 lacks a strong mechanism for ensuring the
integrity of the connection.
.Ss Login session and remote execution
When the user's identity has been accepted by the server, the server
either executes the given command, or logs into the machine and gives
the user a normal shell on the remote machine.
All communication with
the remote command or shell will be automatically encrypted.
.Pp
If a pseudo-terminal has been allocated (normal login session), the
user may use the escape characters noted below.
.Pp
If no pseudo-tty has been allocated,
the session is transparent and can be used to reliably transfer binary data.
On most systems, setting the escape character to
d271 14
a284 8
will also make the session transparent even if a tty is used.
.Pp
The session terminates when the command or shell on the remote
machine exits and all X11 and TCP/IP connections have been closed.
The exit status of the remote program is returned as the exit status of
.Nm ssh .
.Ss Escape Characters
When a pseudo-terminal has been requested,
d286 16
a301 26
supports a number of functions through the use of an escape character.
.Pp
A single tilde character can be sent as
.Ic ~~
or by following the tilde by a character other than those described below.
The escape character must always follow a newline to be interpreted as
special.
The escape character can be changed in configuration files using the
.Cm EscapeChar
configuration directive or on the command line by the
.Fl e
option.
.Pp
The supported escapes (assuming the default
.Ql ~ )
are:
.Bl -tag -width Ds
.It Cm ~.
Disconnect.
.It Cm ~^Z
Background
.Nm ssh .
.It Cm ~#
List forwarded connections.
.It Cm ~&
Background
d303 9
a311 10
at logout when waiting for forwarded connection / X11 sessions to terminate.
.It Cm ~?
Display a list of escape characters.
.It Cm ~B
Send a BREAK to the remote system
(only useful for SSH protocol version 2 and if the peer supports it).
.It Cm ~C
Open command line.
Currently this allows the addition of port forwardings using the
.Fl L
d313 44
a356 34
.Fl R
options (see below).
It also allows the cancellation of existing remote port-forwardings
using
.Fl KR Ar hostport .
Basic help is available, using the
.Fl h
option.
.It Cm ~R
Request rekeying of the connection
(only useful for SSH protocol version 2 and if the peer supports it).
.El
.Ss X11 and TCP forwarding
If the
.Cm ForwardX11
variable is set to
.Dq yes
(or see the description of the
.Fl X
and
.Fl x
options described later)
and the user is using X11 (the
.Ev DISPLAY
environment variable is set), the connection to the X11 display is
automatically forwarded to the remote side in such a way that any X11
programs started from the shell (or command) will go through the
encrypted channel, and the connection to the real X server will be made
from the local machine.
The user should not manually set
.Ev DISPLAY .
Forwarding of X11 connections can be
configured on the command line or in configuration files.
.Pp
d358 37
a394 2
.Ev DISPLAY
value set by
d396 7
a402 2
will point to the server machine, but with a display number greater than zero.
This is normal, and happens because
d404 2
a405 5
creates a
.Dq proxy
X server on the server machine for forwarding the
connections over the encrypted channel.
.Pp
d407 21
a427 7
will also automatically set up Xauthority data on the server machine.
For this purpose, it will generate a random authorization cookie,
store it in Xauthority on the server, and verify that any forwarded
connections carry this cookie and replace it by the real cookie when
the connection is opened.
The real authentication cookie is never
sent to the server machine (and no cookies are sent in the plain).
d429 85
a513 11
If the
.Cm ForwardAgent
variable is set to
.Dq yes
(or see the description of the
.Fl A
and
.Fl a
options described later) and
the user is using an authentication agent, the connection to the agent
is automatically forwarded to the remote side.
d515 12
a526 25
Forwarding of arbitrary TCP/IP connections over the secure channel can
be specified either on the command line or in a configuration file.
One possible application of TCP/IP forwarding is a secure connection to an
electronic purse; another is going through firewalls.
.Ss Server authentication
.Nm
automatically maintains and checks a database containing
identifications for all hosts it has ever been used with.
Host keys are stored in
.Pa ~/.etc/ssh/known_hosts
in the user's home directory.
Additionally, the file
.Pa /etc/ssh/ssh_known_hosts
is automatically checked for known hosts.
Any new hosts are automatically added to the user's file.
If a host's identification ever changes,
.Nm
warns about this and disables password authentication to prevent a
trojan horse from getting the user's password.
Another purpose of this mechanism is to prevent man-in-the-middle attacks
which could otherwise be used to circumvent the encryption.
The
.Cm StrictHostKeyChecking
option can be used to prevent logins to machines whose
host key is not known or has changed.
d528 40
d569 6
a574 12
can be configured to verify host identification using fingerprint resource
records (SSHFP) published in DNS.
The
.Cm VerifyHostKeyDNS
option can be used to control how DNS lookups are performed.
SSHFP resource records can be generated using
.Xr ssh-keygen 1 .
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 1
Forces
d576 16
a591 15
to try protocol version 1 only.
.It Fl 2
Forces
.Nm
to try protocol version 2 only.
.It Fl 4
Forces
.Nm
to use IPv4 addresses only.
.It Fl 6
Forces
.Nm
to use IPv6 addresses only.
.It Fl A
Enables forwarding of the authentication agent connection.
d594 1
a594 1
Agent forwarding should be enabled with caution.
d596 43
a638 36
(for the agent's Unix-domain socket)
can access the local agent through the forwarded connection.
An attacker cannot obtain key material from the agent,
however they can perform operations on the keys that enable them to
authenticate using the identities loaded into the agent.
.It Fl a
Disables forwarding of the authentication agent connection.
.It Fl b Ar bind_address
Use
.Ar bind_address
on the local machine as the source address
of the connection.
Only useful on systems with more than one address.
.It Fl C
Requests compression of all data (including stdin, stdout, stderr, and
data for forwarded X11 and TCP/IP connections).
The compression algorithm is the same used by
.Xr gzip 1 ,
and the
.Dq level
can be controlled by the
.Cm CompressionLevel
option for protocol version 1.
Compression is desirable on modem lines and other
slow connections, but will only slow down things on fast networks.
The default value can be set on a host-by-host basis in the
configuration files; see the
.Cm Compression
option.
.It Fl c Ar cipher_spec
Selects the cipher specification for encrypting the session.
.Pp
Protocol version 1 allows specification of a single cipher.
The supported values are
.Dq 3des ,
.Dq blowfish
d640 11
a650 17
.Dq des .
.Ar 3des
(triple-des) is an encrypt-decrypt-encrypt triple with three different keys.
It is believed to be secure.
.Ar blowfish
is a fast block cipher; it appears very secure and is much faster than
.Ar 3des .
.Ar des
is only supported in the
.Nm
client for interoperability with legacy protocol 1 implementations
that do not support the
.Ar 3des
cipher.
Its use is strongly discouraged due to cryptographic weaknesses.
The default is
.Dq blowfish .
d652 1
a652 42
For protocol version 2
.Ar cipher_spec
is a comma-separated list of ciphers
listed in order of preference.
The supported ciphers are
.Dq 3des-cbc ,
.Dq aes128-cbc ,
.Dq aes192-cbc ,
.Dq aes256-cbc ,
.Dq aes128-ctr ,
.Dq aes192-ctr ,
.Dq aes256-ctr ,
.Dq arcfour128 ,
.Dq arcfour256 ,
.Dq arcfour ,
.Dq blowfish-cbc ,
and
.Dq cast128-cbc .
The default is
.Bd -literal
  ``arcfour128,arcfour256,blowfish-cbc,aes256-cbc,arcfour,
    aes128-cbc,cast128-cbc,rijndael-cbc@@lysator.liu.se,3des-cbc,
    aes192-cbc,aes128-ctr,aes192-ctr,aes256-ctr''
.Ed
.It Fl D Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Xc
Specifies a local
.Dq dynamic
application-level port forwarding.
This works by allocating a socket to listen to
.Ar port
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.
Currently the SOCKS4 and SOCKS5 protocols are supported, and
d654 8
a661 3
will act as a SOCKS server.
Only root can forward privileged ports.
Dynamic port forwardings can also be specified in the configuration file.
d663 6
a668 45
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar port
.Xc
.Sm on
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
.It Fl e Ar ch | ^ch | none
Sets the escape character for sessions with a pty (default:
.Ql ~ ) .
The escape character is only recognized at the beginning of a line.
The escape character followed by a dot
.Pq Ql \&.
closes the connection;
followed by control-Z suspends the connection;
and followed by itself sends the escape character once.
Setting the character to
.Dq none
disables any escapes and makes the session fully transparent.
.It Fl F Ar configfile
Specifies an alternative per-user configuration file.
If a configuration file is given on the command line,
the system-wide configuration file
.Pq Pa /etc/ssh/ssh_config
will be ignored.
The default for the per-user configuration file is
.Pa ~/.etc/ssh/config .
.It Fl f
Requests
d670 4
a673 2
to go to background just before command execution.
This is useful if
d675 7
a681 16
is going to ask for passwords or passphrases, but the user
wants it in the background.
This implies
.Fl n .
The recommended way to start X11 programs at a remote site is with
something like
.Ic ssh -f host xterm .
.It Fl g
Allows remote hosts to connect to local forwarded ports.
.It Fl h
Disables the TCP lowdelay option.
Useful for using with rsync over ssh to not block the interactive
session while using ALTQ to prioritize ssh traffic.
.It Fl I Ar smartcard_device
Specifies which smartcard device to use.
The argument is the device
d683 4
a686 6
should use to communicate with a smartcard used for storing the user's
private RSA key.
.It Fl i Ar identity_file
Selects a file from which the identity (private key) for
RSA or DSA authentication is read.
The default is
d688 42
a729 3
for protocol version 1, and
.Pa ~/.etc/ssh/id_rsa
and
d731 51
a781 56
for protocol version 2.
Identity files may also be specified on
a per-host basis in the configuration file.
It is possible to have multiple
.Fl i
options (and multiple identities specified in
configuration files).
.It Fl L Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Xc
Specifies that the given port on the local (client) host is to be
forwarded to the given host and port on the remote side.
This works by allocating a socket to listen to
.Ar port
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
from the remote machine.
Port forwardings can also be specified in the configuration file.
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar port No / Ar host No /
.Ar hostport
.Xc
.Sm on
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
.It Fl l Ar login_name
Specifies the user to log in as on the remote machine.
This also may be specified on a per-host basis in the configuration file.
.It Fl M
Places the
d783 26
a808 24
client into
.Dq master
mode for connection sharing.
Refer to the description of
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
.It Fl m Ar mac_spec
Additionally, for protocol version 2 a comma-separated list of MAC
(message authentication code) algorithms can
be specified in order of preference.
See the
.Cm MACs
keyword for more information.
.It Fl N
Do not execute a remote command.
This is useful for just forwarding ports
(protocol version 2 only).
.It Fl n
Redirects stdin from
.Pa /dev/null
(actually, prevents reading from stdin).
This must be used when
d810 50
a859 6
is run in the background.
A common trick is to use this to run X11 programs on a remote machine.
For example,
.Ic ssh -n shadows.cs.hut.fi emacs &
will start an emacs on shadows.cs.hut.fi, and the X11
connection will be automatically forwarded over an encrypted channel.
d861 2
d864 2
a865 2
program will be put in the background.
(This does not work if
d867 4
a870 21
needs to ask for a password or passphrase; see also the
.Fl f
option.)
.It Fl O Ar ctl_cmd
Control an active connection multiplexing master process.
When the
.Fl O
option is specified, the
.Ar ctl_cmd
argument is interpreted and passed to the master process.
Valid commands are:
.Dq check
(check that the master process is running) and
.Dq exit
(request the master to exit).
.It Fl o Ar option
Can be used to give options in the format used in the configuration file.
This is useful for specifying options for which there is no separate
command-line flag.
For full details of the options listed below, and their possible values, see
.Xr ssh_config 5 .
d872 8
a879 81
.Bl -tag -width Ds -offset indent -compact
.It AddressFamily
.It BatchMode
.It BindAddress
.It ChallengeResponseAuthentication
.It CheckHostIP
.It Cipher
.It Ciphers
.It ClearAllForwardings
.It Compression
.It CompressionLevel
.It ConnectionAttempts
.It ConnectTimeout
.It ControlMaster
.It ControlPath
.It DynamicForward
.It EscapeChar
.It ForwardAgent
.It ForwardX11
.It ForwardX11Trusted
.It GatewayPorts
.It GlobalKnownHostsFile
.It HashKnownHosts
.It Host
.It HostbasedAuthentication
.It HostKeyAlgorithms
.It HostKeyAlias
.It HostName
.It IdentityFile
.It IdentitiesOnly
.It KbdInteractiveDevices
.It LocalForward
.It LogLevel
.It MACs
.It NoHostAuthenticationForLocalhost
.It NumberOfPasswordPrompts
.It PasswordAuthentication
.It Port
.It PreferredAuthentications
.It Protocol
.It ProxyCommand
.It PubkeyAuthentication
.It RemoteForward
.It RhostsRSAAuthentication
.It RSAAuthentication
.It SendEnv
.It ServerAliveInterval
.It ServerAliveCountMax
.It SmartcardDevice
.It StrictHostKeyChecking
.It TCPKeepAlive
.It UsePrivilegedPort
.It User
.It UserKnownHostsFile
.It VerifyHostKeyDNS
.It XAuthLocation
.El
.It Fl p Ar port
Port to connect to on the remote host.
This can be specified on a
per-host basis in the configuration file.
.It Fl q
Quiet mode.
Causes all warning and diagnostic messages to be suppressed.
.It Fl R Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port : host : hostport
.Sm on
.Xc
Specifies that the given port on the remote (server) host is to be
forwarded to the given host and port on the local side.
This works by allocating a socket to listen to
.Ar port
on the remote side, and whenever a connection is made to this port, the
connection is forwarded over the secure channel, and a connection is
made to
.Ar host
port
.Ar hostport
from the local machine.
d881 11
a891 12
Port forwardings can also be specified in the configuration file.
Privileged ports can be forwarded only when
logging in as root on the remote machine.
IPv6 addresses can be specified by enclosing the address in square braces or
using an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar host No / Ar port No /
.Ar hostport
.Xc .
.Sm on
d893 5
a897 40
By default, the listening socket on the server will be bound to the loopback
interface only.
This may be overriden by specifying a
.Ar bind_address .
An empty
.Ar bind_address ,
or the address
.Ql * ,
indicates that the remote socket should listen on all interfaces.
Specifying a remote
.Ar bind_address
will only succeed if the server's
.Cm GatewayPorts
option is enabled (see
.Xr sshd_config 5 ) .
.It Fl S Ar ctl_path
Specifies the location of a control socket for connection sharing.
Refer to the description of
.Cm ControlPath
and
.Cm ControlMaster
in
.Xr ssh_config 5
for details.
.It Fl s
May be used to request invocation of a subsystem on the remote system.
Subsystems are a feature of the SSH2 protocol which facilitate the use
of SSH as a secure transport for other applications (eg.\&
.Xr sftp 1 ) .
The subsystem is specified as the remote command.
.It Fl T
Disable pseudo-tty allocation.
.It Fl t
Force pseudo-tty allocation.
This can be used to execute arbitrary
screen-based programs on a remote machine, which can be very useful,
e.g., when implementing menu services.
Multiple
.Fl t
options force tty allocation, even if
d899 10
a908 6
has no local tty.
.It Fl V
Display the version number and exit.
.It Fl v
Verbose mode.
Causes
d910 8
a917 16
to print debugging messages about its progress.
This is helpful in
debugging connection, authentication, and configuration problems.
Multiple
.Fl v
options increase the verbosity.
The maximum is 3.
.It Fl X
Enables X11 forwarding.
This can also be specified on a per-host basis in a configuration file.
.Pp
X11 forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the user's X authorization database)
can access the local X11 display through the forwarded connection.
An attacker may then be able to perform activities such as keystroke monitoring.
a918 3
For this reason, X11 forwarding is subjected to X11 SECURITY extension
restrictions by default.
Please refer to the
d920 7
a926 19
.Fl Y
option and the
.Cm ForwardX11Trusted
directive in
.Xr ssh_config 5
for more information.
.It Fl x
Disables X11 forwarding.
.It Fl Y
Enables trusted X11 forwarding.
Trusted X11 forwardings are not subjected to the X11 SECURITY extension
controls.
.El
.Sh CONFIGURATION FILES
.Nm
may additionally obtain configuration data from
a per-user configuration file and a system-wide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
d1003 1
a1003 1
The timezone variable is set to indicate the present timezone if it
d1049 1
a1049 1
.Ns No ( Pa ~/.ssh/authorized_keys )
d1058 1
a1058 1
.Ns No ( Pa ~/.ssh/authorized_keys )
@


1.9
log
@fastmerge remainder of src/usr.bin
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.8 2005/06/22 16:11:39 tg Exp $
.\" $OpenBSD: ssh.1,v 1.209 2005/07/06 09:33:05 dtucker Exp $
a46 1
.Bk -words
d50 6
a55 1
.Op Fl D Ar port
d58 1
d60 1
d67 1
d69 1
a82 1
.Ek
d465 1
a465 1
The suported values are
d511 6
a516 1
.It Fl D Ar port
d522 3
a524 1
on the local side, and whenever a connection is made to this port, the
d533 24
@


1.8
log
@merge
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.7 2005/04/26 15:24:37 tg Exp $
.\" $OpenBSD: ssh.1,v 1.208 2005/05/23 23:32:46 djm Exp $
d433 5
a437 2
Specify the interface address to transmit from on machines with multiple
interfaces or aliased addresses.
@


1.7
log
@fix spacing
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.6 2005/04/26 15:21:50 tg Exp $
.\" $OpenBSD: ssh.1,v 1.207 2005/04/21 06:17:50 djm Exp $
d489 2
d497 2
a498 2
  ``arcfour,blowfish-cbc,aes256-cbc,aes128-cbc,
    cast128-cbc,rijndael-cbc@@lysator.liu.se,3des-cbc,
@


1.6
log
@* merge
* standardise on british spelling
* bump version
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.5 2005/04/14 20:07:45 tg Exp $
d987 2
a988 2
.Pa ~/.etc/ssh/authorised_keys (
.Ns Pa ~/.ssh/authorized_keys )
d996 2
a997 2
.Pa ~/.etc/ssh/authorised_keys (
.Ns Pa ~/.ssh/authorized_keys )
@


1.5
log
@change default sshv2 cipher to arcfour
it's the fastest and within 0.05% of "cipher none",
which we thus do not support
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.4 2005/04/14 19:49:35 tg Exp $
.\" $OpenBSD: ssh.1,v 1.206 2005/04/14 12:30:30 jmc Exp $
d113 1
a113 1
.Pa $HOME/.rhosts
d115 1
a115 1
.Pa $HOME/.shosts
d124 1
a124 1
.Pa $HOME/.etc/ssh/known_hosts
d132 1
a132 1
.Pa $HOME/.rhosts ,
d148 3
a150 1
.Pa $HOME/.etc/ssh/authorized_keys
d171 1
a171 1
.Pa $HOME/.etc/ssh/identity
d173 1
a173 1
.Pa $HOME/.etc/ssh/identity.pub
d178 3
a180 1
.Pa $HOME/.etc/ssh/authorized_keys
d184 1
a184 1
.Pa $HOME/.rhosts
d214 1
a214 1
.Pa $HOME/.etc/ssh/id_dsa
d216 1
a216 1
.Pa $HOME/.etc/ssh/id_rsa ,
d219 3
a221 1
.Pa $HOME/.etc/ssh/authorized_keys
d375 1
a375 1
.Pa $HOME/.etc/ssh/known_hosts
d533 1
a533 1
.Pa $HOME/.ssh/config .
d563 1
a563 1
.Pa $HOME/.etc/ssh/identity
d565 1
a565 1
.Pa $HOME/.etc/ssh/id_rsa
d567 1
a567 1
.Pa $HOME/.etc/ssh/id_dsa
d952 1
a952 1
.Pa $HOME/.etc/ssh/environment ,
d963 1
a963 1
.It Pa $HOME/.etc/ssh/known_hosts
d969 1
a969 1
.It Pa $HOME/.etc/ssh/identity, $HOME/.etc/ssh/id_dsa, $HOME/.etc/ssh/id_rsa
d981 1
a981 1
.It Pa $HOME/.etc/ssh/identity.pub, $HOME/.etc/ssh/id_dsa.pub, $HOME/.etc/ssh/id_rsa.pub
d985 1
a985 1
.Pa $HOME/.etc/ssh/identity.pub
d987 2
a988 1
.Pa $HOME/.etc/ssh/authorized_keys
d992 1
a992 1
.Pa $HOME/.etc/ssh/id_dsa.pub
d994 1
a994 1
.Pa $HOME/.etc/ssh/id_rsa.pub
d996 2
a997 1
.Pa $HOME/.etc/ssh/authorized_keys
d1005 1
a1005 1
.It Pa $HOME/.etc/ssh/config
d1011 1
a1011 1
.It Pa $HOME/.etc/ssh/authorized_keys
d1071 1
a1071 1
.It Pa $HOME/.rhosts
d1101 1
a1101 1
.Pa $HOME/.etc/ssh/known_hosts .
d1105 2
a1106 2
.Pa $HOME/.etc/ssh/known_hosts .
.It Pa $HOME/.shosts
d1146 1
a1146 1
.It Pa $HOME/.etc/ssh/rc
d1154 1
a1154 1
.It Pa $HOME/.etc/ssh/environment
@


1.4
log
@merge
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.3 2005/03/15 19:52:06 tg Exp $
d489 3
a491 2
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour,
    aes192-cbc,aes256-cbc''
a698 4
<<<<<<< ssh.1
=======
.It GSSAPIAuthentication
.It GSSAPIDelegateCredentials
a699 1
>>>>>>> 1.1.1.2
@


1.3
log
@sort .Xr and escape the dash
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/ssh.1,v 1.2 2005/03/13 18:33:32 tg Exp $
.\" $OpenBSD: ssh.1,v 1.199 2004/11/07 17:42:36 jmc Exp $
d47 1
a50 1
.Bk -words
d55 1
a55 1
.Oo Fl L Xo
d57 2
a58 3
.Ar port :
.Ar host :
.Ar hostport
a59 1
.Xc
a60 1
.Ek
a64 1
.Bk -words
d66 1
a66 2
.Ek
.Oo Fl R Xo
d68 2
a69 3
.Ar port :
.Ar host :
.Ar hostport
a70 1
.Xc
d75 1
d427 1
a427 1
Specify the interface to transmit from on machines with multiple
d570 1
d578 3
a580 1
on the local side, and whenever a connection is made to this port, the
a587 1
Only root can forward privileged ports.
d591 1
d593 1
a593 1
.Ar hostport .
d596 16
d698 6
d747 1
d762 1
d766 2
a767 1
IPv6 addresses can be specified with an alternative syntax:
d770 4
a773 3
.Ar port No / Ar host No /
.Ar hostport .
.Xc
d775 16
d840 11
d855 2
@


1.2
log
@merge src/usr.bin
@
text
@d37 1
a37 1
.\" $MirOS$
d1109 1
d1113 4
a1116 5
.Xr ssh-add 1 ,
.Xr ssh-agent 1 ,
.Xr ssh-keygen 1 ,
.Xr telnet 1 ,
.Xr hosts.equiv 5 ,
d1118 2
a1119 2
.Xr ssh-keysign 8 ,
.Xr sshd 8
@


1.1
log
@Initial revision
@
text
@d37 1
d47 1
a47 1
.Op Fl 1246AaCfgkMNnqsTtVvXxY
d130 1
a130 1
.Pa $HOME/.ssh/known_hosts
d154 1
a154 1
.Pa $HOME/.ssh/authorized_keys
d175 1
a175 1
.Pa $HOME/.ssh/identity
d177 1
a177 1
.Pa $HOME/.ssh/identity.pub
d182 1
a182 1
.Pa $HOME/.ssh/authorized_keys
d216 1
a216 1
.Pa $HOME/.ssh/id_dsa
d218 1
a218 1
.Pa $HOME/.ssh/id_rsa ,
d221 1
a221 1
.Pa $HOME/.ssh/authorized_keys
d234 2
a235 2
(the traffic is encrypted using AES, 3DES, Blowfish, CAST128 or Arcfour)
and integrity (hmac-md5, hmac-sha1, hmac-ripemd160).
d375 1
a375 1
.Pa $HOME/.ssh/known_hosts
d475 1
a475 1
.Dq 3des .
d548 4
d562 1
a562 1
.Pa $HOME/.ssh/identity
d564 1
a564 1
.Pa $HOME/.ssh/id_rsa
d566 1
a566 1
.Pa $HOME/.ssh/id_dsa
a573 2
.It Fl k
Disables forwarding (delegation) of GSSAPI credentials to the server.
a684 2
.It GSSAPIAuthentication
.It GSSAPIDelegateCredentials
d898 1
a898 1
.Pa $HOME/.ssh/environment ,
d909 1
a909 1
.It Pa $HOME/.ssh/known_hosts
d915 1
a915 1
.It Pa $HOME/.ssh/identity, $HOME/.ssh/id_dsa, $HOME/.ssh/id_rsa
d927 1
a927 1
.It Pa $HOME/.ssh/identity.pub, $HOME/.ssh/id_dsa.pub, $HOME/.ssh/id_rsa.pub
d931 1
a931 1
.Pa $HOME/.ssh/identity.pub
d933 1
a933 1
.Pa $HOME/.ssh/authorized_keys
d937 1
a937 1
.Pa $HOME/.ssh/id_dsa.pub
d939 1
a939 1
.Pa $HOME/.ssh/id_rsa.pub
d941 1
a941 1
.Pa $HOME/.ssh/authorized_keys
d949 1
a949 1
.It Pa $HOME/.ssh/config
d955 1
a955 1
.It Pa $HOME/.ssh/authorized_keys
d1045 1
a1045 1
.Pa $HOME/.ssh/known_hosts .
d1049 1
a1049 1
.Pa $HOME/.ssh/known_hosts .
d1090 1
a1090 1
.It Pa $HOME/.ssh/rc
d1098 1
a1098 1
.It Pa $HOME/.ssh/environment
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@OpenSSH-current
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.206 2005/04/14 12:30:30 jmc Exp $
a45 1
.Bk -words
d49 1
d54 1
a54 1
.Oo Fl L\ \&
d56 3
a58 2
.Oo Ar bind_address : Oc
.Ar port : host : hostport
d60 1
d62 1
d67 1
d69 2
a70 1
.Oo Fl R\ \&
d72 3
a74 2
.Oo Ar bind_address : Oc
.Ar port : host : hostport
d76 1
a80 1
.Ek
d432 1
a432 1
Specify the interface address to transmit from on machines with multiple
a572 1
.Oo Ar bind_address : Oc
d580 1
a580 3
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
d588 1
a591 1
.Op Ar bind_address No /
d593 1
a593 1
.Ar hostport
a595 16
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
a683 1
.It HashKnownHosts
a726 1
.Oo Ar bind_address : Oc
a740 1
.Pp
d744 1
a744 2
IPv6 addresses can be specified by enclosing the address in square braces or
using an alternative syntax:
d747 3
a749 4
.Op Ar bind_address No /
.Ar host No / Ar port No /
.Ar hostport
.Xc .
a750 16
.Pp
By default, the listening socket on the server will be bound to the loopback
interface only.
This may be overriden by specifying a
.Ar bind_address .
An empty
.Ar bind_address ,
or the address
.Ql * ,
indicates that the remote socket should listen on all interfaces.
Specifying a remote
.Ar bind_address
will only succeed if the server's
.Cm GatewayPorts
option is enabled (see
.Xr sshd_config 5 ) .
a799 11
.Pp
For this reason, X11 forwarding is subjected to X11 SECURITY extension
restrictions by default.
Please refer to the
.Nm
.Fl Y
option and the
.Cm ForwardX11Trusted
directive in
.Xr ssh_config 5
for more information.
a803 2
Trusted X11 forwardings are not subjected to the X11 SECURITY extension
controls.
@


1.1.1.3
log
@latest fixes from OpenBSD, last update for #8 if nothing weird happens
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.207 2005/04/21 06:17:50 djm Exp $
d112 1
a112 1
.Pa ~/.rhosts
d114 1
a114 1
.Pa ~/.shosts
d123 1
a123 1
.Pa ~/.ssh/known_hosts
d131 1
a131 1
.Pa ~/.rhosts ,
d147 1
a147 1
.Pa ~/.ssh/authorized_keys
d168 1
a168 1
.Pa ~/.ssh/identity
d170 1
a170 1
.Pa ~/.ssh/identity.pub
d175 1
a175 1
.Pa ~/.ssh/authorized_keys
d179 1
a179 1
.Pa ~/.rhosts
d209 1
a209 1
.Pa ~/.ssh/id_dsa
d211 1
a211 1
.Pa ~/.ssh/id_rsa ,
d214 1
a214 1
.Pa ~/.ssh/authorized_keys
d368 1
a368 1
.Pa ~/.ssh/known_hosts
d525 1
a525 1
.Pa ~/.ssh/config .
d551 1
a551 1
.Pa ~/.ssh/identity
d553 1
a553 1
.Pa ~/.ssh/id_rsa
d555 1
a555 1
.Pa ~/.ssh/id_dsa
d944 1
a944 1
.Pa ~/.ssh/environment ,
d955 1
a955 1
.It Pa ~/.ssh/known_hosts
d961 1
a961 1
.It Pa ~/.ssh/identity, ~/.ssh/id_dsa, ~/.ssh/id_rsa
d973 1
a973 1
.It Pa ~/.ssh/identity.pub, ~/.ssh/id_dsa.pub, ~/.ssh/id_rsa.pub
d977 1
a977 1
.Pa ~/.ssh/identity.pub
d979 1
a979 1
.Pa ~/.ssh/authorized_keys
d983 1
a983 1
.Pa ~/.ssh/id_dsa.pub
d985 1
a985 1
.Pa ~/.ssh/id_rsa.pub
d987 1
a987 1
.Pa ~/.ssh/authorized_keys
d995 1
a995 1
.It Pa ~/.ssh/config
d1001 1
a1001 1
.It Pa ~/.ssh/authorized_keys
d1061 1
a1061 1
.It Pa ~/.rhosts
d1091 1
a1091 1
.Pa ~/.ssh/known_hosts .
d1095 2
a1096 2
.Pa ~/.ssh/known_hosts .
.It Pa ~/.shosts
d1136 1
a1136 1
.It Pa ~/.ssh/rc
d1144 1
a1144 1
.It Pa ~/.ssh/environment
@


1.1.1.4
log
@most current OpenSSH.com
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.208 2005/05/23 23:32:46 djm Exp $
a481 2
.Dq arcfour128 ,
.Dq arcfour256 ,
d488 2
a489 3
  ``aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,
    arcfour256,arcfour,aes192-cbc,aes256-cbc,aes128-ctr,
    aes192-ctr,aes256-ctr''
@


1.1.1.5
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.209 2005/07/06 09:33:05 dtucker Exp $
d426 2
a427 5
Use
.Ar bind_address
on the local machine as the source address
of the connection.
Only useful on systems with more than one address.
@


1.1.1.6
log
@Import current OpenSSH
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.212 2005/09/19 23:31:31 djm Exp $
d46 1
d50 1
a50 6
.Oo Fl D\ \&
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Oc
a52 1
.Bk -words
a53 1
.Ek
a59 1
.Bk -words
a60 1
.Ek
d74 1
d451 1
a451 1
The supported values are
d497 1
a497 6
.It Fl D Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Xc
d503 1
a503 3
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
a511 24
.Pp
IPv6 addresses can be specified with an alternative syntax:
.Sm off
.Xo
.Op Ar bind_address No /
.Ar port
.Xc
.Sm on
or by enclosing the address in square brackets.
Only the superuser can forward privileged ports.
By default, the local port is bound in accordance with the
.Cm GatewayPorts
setting.
However, an explicit
.Ar bind_address
may be used to bind the connection to a specific address.
The
.Ar bind_address
of
.Dq localhost
indicates that the listening port be bound for local use only, while an
empty address or
.Sq *
indicates that the port should be available from all interfaces.
@


1.1.1.7
log
@OpenSSH is the last missing piece to update before the release
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.221 2005/12/16 18:14:40 jmc Exp $
a79 2
.Bk -words
.Op Fl w Ar tunnel : Ns Ar tunnel
a81 1
.Ek
d100 1
a100 1
depending on the protocol version used (see below).
d105 36
a140 1
it is executed on the remote host instead of a login shell.
d142 1
a142 4
The options are as follows:
.Bl -tag -width Ds
.It Fl 1
Forces
d144 13
a156 3
to try protocol version 1 only.
.It Fl 2
Forces
d158 4
a161 3
to try protocol version 2 only.
.It Fl 4
Forces
d163 7
a169 3
to use IPv4 addresses only.
.It Fl 6
Forces
d171 19
a189 4
to use IPv6 addresses only.
.It Fl A
Enables forwarding of the authentication agent connection.
This can also be specified on a per-host basis in a configuration file.
d191 5
a195 33
Agent forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the agent's Unix-domain socket)
can access the local agent through the forwarded connection.
An attacker cannot obtain key material from the agent,
however they can perform operations on the keys that enable them to
authenticate using the identities loaded into the agent.
.It Fl a
Disables forwarding of the authentication agent connection.
.It Fl b Ar bind_address
Use
.Ar bind_address
on the local machine as the source address
of the connection.
Only useful on systems with more than one address.
.It Fl C
Requests compression of all data (including stdin, stdout, stderr, and
data for forwarded X11 and TCP/IP connections).
The compression algorithm is the same used by
.Xr gzip 1 ,
and the
.Dq level
can be controlled by the
.Cm CompressionLevel
option for protocol version 1.
Compression is desirable on modem lines and other
slow connections, but will only slow down things on fast networks.
The default value can be set on a host-by-host basis in the
configuration files; see the
.Cm Compression
option.
.It Fl c Ar cipher_spec
Selects the cipher specification for encrypting the session.
d197 1
a197 14
Protocol version 1 allows specification of a single cipher.
The supported values are
.Dq 3des ,
.Dq blowfish ,
and
.Dq des .
.Ar 3des
(triple-des) is an encrypt-decrypt-encrypt triple with three different keys.
It is believed to be secure.
.Ar blowfish
is a fast block cipher; it appears very secure and is much faster than
.Ar 3des .
.Ar des
is only supported in the
d199 29
a227 7
client for interoperability with legacy protocol 1 implementations
that do not support the
.Ar 3des
cipher.
Its use is strongly discouraged due to cryptographic weaknesses.
The default is
.Dq 3des .
d229 1
a229 42
For protocol version 2
.Ar cipher_spec
is a comma-separated list of ciphers
listed in order of preference.
The supported ciphers are
.Dq 3des-cbc ,
.Dq aes128-cbc ,
.Dq aes192-cbc ,
.Dq aes256-cbc ,
.Dq aes128-ctr ,
.Dq aes192-ctr ,
.Dq aes256-ctr ,
.Dq arcfour128 ,
.Dq arcfour256 ,
.Dq arcfour ,
.Dq blowfish-cbc ,
and
.Dq cast128-cbc .
The default is:
.Bd -literal -offset indent
aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,
arcfour256,arcfour,aes192-cbc,aes256-cbc,aes128-ctr,
aes192-ctr,aes256-ctr
.Ed
.It Fl D Xo
.Sm off
.Oo Ar bind_address : Oc
.Ar port
.Sm on
.Xc
Specifies a local
.Dq dynamic
application-level port forwarding.
This works by allocating a socket to listen to
.Ar port
on the local side, optionally bound to the specified
.Ar bind_address .
Whenever a connection is made to this port, the
connection is forwarded over the secure channel, and the application
protocol is then used to determine where to connect to from the
remote machine.
Currently the SOCKS4 and SOCKS5 protocols are supported, and
d231 295
a525 3
will act as a SOCKS server.
Only root can forward privileged ports.
Dynamic port forwardings can also be specified in the configuration file.
a749 1
.It LocalCommand
a755 1
.It PermitLocalCommand
a769 2
.It Tunnel
.It TunnelDevice
d862 10
a871 146
to print debugging messages about its progress.
This is helpful in
debugging connection, authentication, and configuration problems.
Multiple
.Fl v
options increase the verbosity.
The maximum is 3.
.It Fl w Ar tunnel : Ns Ar tunnel
Requests a
.Xr tun 4
device on the client and server like the
.Cm Tunnel
directive in
.Xr ssh_config 5 .
.It Fl X
Enables X11 forwarding.
This can also be specified on a per-host basis in a configuration file.
.Pp
X11 forwarding should be enabled with caution.
Users with the ability to bypass file permissions on the remote host
(for the user's X authorization database)
can access the local X11 display through the forwarded connection.
An attacker may then be able to perform activities such as keystroke monitoring.
.Pp
For this reason, X11 forwarding is subjected to X11 SECURITY extension
restrictions by default.
Please refer to the
.Nm
.Fl Y
option and the
.Cm ForwardX11Trusted
directive in
.Xr ssh_config 5
for more information.
.It Fl x
Disables X11 forwarding.
.It Fl Y
Enables trusted X11 forwarding.
Trusted X11 forwardings are not subjected to the X11 SECURITY extension
controls.
.El
.Ss SSH protocol version 1
The first authentication method is the
.Em rhosts
or
.Em hosts.equiv
method combined with RSA-based host authentication.
If the machine the user logs in from is listed in
.Pa /etc/hosts.equiv
or
.Pa /etc/shosts.equiv
on the remote machine, and the user names are
the same on both sides, or if the files
.Pa ~/.rhosts
or
.Pa ~/.shosts
exist in the user's home directory on the
remote machine and contain a line containing the name of the client
machine and the name of the user on that machine, the user is
considered for log in.
Additionally, if the server can verify the client's
host key (see
.Pa /etc/ssh/ssh_known_hosts
and
.Pa ~/.ssh/known_hosts
in the
.Sx FILES
section), only then is login permitted.
This authentication method closes security holes due to IP
spoofing, DNS spoofing and routing spoofing.
[Note to the administrator:
.Pa /etc/hosts.equiv ,
.Pa ~/.rhosts ,
and the rlogin/rsh protocol in general, are inherently insecure and should be
disabled if security is desired.]
.Pp
As a second authentication method,
.Nm
supports RSA based authentication.
The scheme is based on public-key cryptography: there are cryptosystems
where encryption and decryption are done using separate keys, and it
is not possible to derive the decryption key from the encryption key.
RSA is one such system.
The idea is that each user creates a public/private
key pair for authentication purposes.
The server knows the public key, and only the user knows the private key.
.Pp
The file
.Pa ~/.ssh/authorized_keys
lists the public keys that are permitted for logging in.
When the user logs in, the
.Nm
program tells the server which key pair it would like to use for
authentication.
The server checks if this key is permitted, and if so,
sends the user (actually the
.Nm
program running on behalf of the user) a challenge, a random number,
encrypted by the user's public key.
The challenge can only be decrypted using the proper private key.
The user's client then decrypts the challenge using the private key,
proving that he/she knows the private key
but without disclosing it to the server.
.Pp
.Nm
implements the RSA authentication protocol automatically.
The user creates his/her RSA key pair by running
.Xr ssh-keygen 1 .
This stores the private key in
.Pa ~/.ssh/identity
and stores the public key in
.Pa ~/.ssh/identity.pub
in the user's home directory.
The user should then copy the
.Pa identity.pub
to
.Pa ~/.ssh/authorized_keys
in his/her home directory on the remote machine (the
.Pa authorized_keys
file corresponds to the conventional
.Pa ~/.rhosts
file, and has one key
per line, though the lines can be very long).
After this, the user can log in without giving the password.
.Pp
The most convenient way to use RSA authentication may be with an
authentication agent.
See
.Xr ssh-agent 1
for more information.
.Pp
If other authentication methods fail,
.Nm
prompts the user for a password.
The password is sent to the remote
host for checking; however, since all communications are encrypted,
the password cannot be seen by someone listening on the network.
.Ss SSH protocol version 2
When a user connects using protocol version 2,
similar authentication methods are available.
Using the default values for
.Cm PreferredAuthentications ,
the client will try to authenticate first using the hostbased method;
if this method fails, public key authentication is attempted,
and finally if this method fails, keyboard-interactive and
password authentication are tried.
d873 5
a877 12
The public key method is similar to RSA authentication described
in the previous section and allows the RSA or DSA algorithm to be used:
The client uses his private key,
.Pa ~/.ssh/id_dsa
or
.Pa ~/.ssh/id_rsa ,
to sign the session identifier and sends the result to the server.
The server checks whether the matching public key is listed in
.Pa ~/.ssh/authorized_keys
and grants access if both the key is found and the signature is correct.
The session identifier is derived from a shared Diffie-Hellman value
and is only known to the client and the server.
d879 3
a881 4
If public key authentication fails or is not available, a password
can be sent encrypted to the remote host to prove the user's identity.
.Pp
Additionally,
d883 14
a896 28
supports hostbased or challenge response authentication.
.Pp
Protocol 2 provides additional mechanisms for confidentiality
(the traffic is encrypted using AES, 3DES, Blowfish, CAST128 or Arcfour)
and integrity (hmac-md5, hmac-sha1, hmac-ripemd160).
Note that protocol 1 lacks a strong mechanism for ensuring the
integrity of the connection.
.Ss Login session and remote execution
When the user's identity has been accepted by the server, the server
either executes the given command, or logs into the machine and gives
the user a normal shell on the remote machine.
All communication with
the remote command or shell will be automatically encrypted.
.Pp
If a pseudo-terminal has been allocated (normal login session), the
user may use the escape characters noted below.
.Pp
If no pseudo-tty has been allocated,
the session is transparent and can be used to reliably transfer binary data.
On most systems, setting the escape character to
.Dq none
will also make the session transparent even if a tty is used.
.Pp
The session terminates when the command or shell on the remote
machine exits and all X11 and TCP/IP connections have been closed.
The exit status of the remote program is returned as the exit status of
.Nm ssh .
.Pp
a901 147
.Ss Escape Characters
When a pseudo-terminal has been requested,
.Nm
supports a number of functions through the use of an escape character.
.Pp
A single tilde character can be sent as
.Ic ~~
or by following the tilde by a character other than those described below.
The escape character must always follow a newline to be interpreted as
special.
The escape character can be changed in configuration files using the
.Cm EscapeChar
configuration directive or on the command line by the
.Fl e
option.
.Pp
The supported escapes (assuming the default
.Ql ~ )
are:
.Bl -tag -width Ds
.It Cm ~.
Disconnect.
.It Cm ~^Z
Background
.Nm ssh .
.It Cm ~#
List forwarded connections.
.It Cm ~&
Background
.Nm
at logout when waiting for forwarded connection / X11 sessions to terminate.
.It Cm ~?
Display a list of escape characters.
.It Cm ~B
Send a BREAK to the remote system
(only useful for SSH protocol version 2 and if the peer supports it).
.It Cm ~C
Open command line.
Currently this allows the addition of port forwardings using the
.Fl L
and
.Fl R
options (see below).
It also allows the cancellation of existing remote port-forwardings
using
.Fl KR Ar hostport .
.Ic !\& Ns Ar command
allows the user to execute a local command if the
.Ic PermitLocalCommand
option is enabled in
.Xr ssh_config 5 .
Basic help is available, using the
.Fl h
option.
.It Cm ~R
Request rekeying of the connection
(only useful for SSH protocol version 2 and if the peer supports it).
.El
.Ss X11 and TCP forwarding
If the
.Cm ForwardX11
variable is set to
.Dq yes
(or see the description of the
.Fl X
and
.Fl x
options described later)
and the user is using X11 (the
.Ev DISPLAY
environment variable is set), the connection to the X11 display is
automatically forwarded to the remote side in such a way that any X11
programs started from the shell (or command) will go through the
encrypted channel, and the connection to the real X server will be made
from the local machine.
The user should not manually set
.Ev DISPLAY .
Forwarding of X11 connections can be
configured on the command line or in configuration files.
.Pp
The
.Ev DISPLAY
value set by
.Nm
will point to the server machine, but with a display number greater than zero.
This is normal, and happens because
.Nm
creates a
.Dq proxy
X server on the server machine for forwarding the
connections over the encrypted channel.
.Pp
.Nm
will also automatically set up Xauthority data on the server machine.
For this purpose, it will generate a random authorization cookie,
store it in Xauthority on the server, and verify that any forwarded
connections carry this cookie and replace it by the real cookie when
the connection is opened.
The real authentication cookie is never
sent to the server machine (and no cookies are sent in the plain).
.Pp
If the
.Cm ForwardAgent
variable is set to
.Dq yes
(or see the description of the
.Fl A
and
.Fl a
options described later) and
the user is using an authentication agent, the connection to the agent
is automatically forwarded to the remote side.
.Pp
Forwarding of arbitrary TCP/IP connections over the secure channel can
be specified either on the command line or in a configuration file.
One possible application of TCP/IP forwarding is a secure connection to an
electronic purse; another is going through firewalls.
.Ss Server authentication
.Nm
automatically maintains and checks a database containing
identifications for all hosts it has ever been used with.
Host keys are stored in
.Pa ~/.ssh/known_hosts
in the user's home directory.
Additionally, the file
.Pa /etc/ssh/ssh_known_hosts
is automatically checked for known hosts.
Any new hosts are automatically added to the user's file.
If a host's identification ever changes,
.Nm
warns about this and disables password authentication to prevent a
trojan horse from getting the user's password.
Another purpose of this mechanism is to prevent man-in-the-middle attacks
which could otherwise be used to circumvent the encryption.
The
.Cm StrictHostKeyChecking
option can be used to prevent logins to machines whose
host key is not known or has changed.
.Pp
.Nm
can be configured to verify host identification using fingerprint resource
records (SSHFP) published in DNS.
The
.Cm VerifyHostKeyDNS
option can be used to control how DNS lookups are performed.
SSHFP resource records can be generated using
.Xr ssh-keygen 1 .
d978 1
a978 1
This variable is set to indicate the present time zone if it
@


1.1.1.8
log
@import OpenSSH-current
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.256 2006/02/15 16:53:20 jmc Exp $
d92 1
a92 1
X11 connections and arbitrary TCP ports
d149 1
a149 1
data for forwarded X11 and TCP connections).
d189 1
a189 1
For protocol version 2,
d193 12
a204 12
The supported ciphers are:
3des-cbc,
aes128-cbc,
aes192-cbc,
aes256-cbc,
aes128-ctr,
aes192-ctr,
aes256-ctr,
arcfour128,
arcfour256,
arcfour,
blowfish-cbc,
d206 1
a206 1
cast128-cbc.
d259 1
a259 1
.It Fl e Ar escape_char
d295 2
a296 1
Specify the device
a299 2
This option is only available if support for smartcard devices
is compiled in (default is no support).
a370 7
Multiple
.Fl M
options places
.Nm
into
.Dq master
mode with confirmation required before slave connections are accepted.
a471 1
.It RekeyLimit
d585 1
a585 12
device on the client
(first
.Ar tunnel
arg)
and server
(second
.Ar tunnel
arg).
The devices may be specified by numerical ID or the keyword
.Dq any ,
which uses the next available tunnel device.
See also the
d616 6
a621 42
.Pp
.Nm
may additionally obtain configuration data from
a per-user configuration file and a system-wide configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
.Pp
.Nm
exits with the exit status of the remote command or with 255
if an error occurred.
.Sh AUTHENTICATION
The OpenSSH SSH client supports SSH protocols 1 and 2.
Protocol 2 is the default, with
.Nm
falling back to protocol 1 if it detects protocol 2 is unsupported.
These settings may be altered using the
.Cm Protocol
option in
.Xr ssh_config 5 ,
or enforced using the
.Fl 1
and
.Fl 2
options (see above).
Both protocols support similar authentication methods,
but protocol 2 is preferred since
it provides additional mechanisms for confidentiality
(the traffic is encrypted using AES, 3DES, Blowfish, CAST128, or Arcfour)
and integrity (hmac-md5, hmac-sha1, hmac-ripemd160).
Protocol 1 lacks a strong mechanism for ensuring the
integrity of the connection.
.Pp
The methods available for authentication are:
host-based authentication,
public key authentication,
challenge-response authentication,
and password authentication.
Authentication methods are tried in the order specified above,
though protocol 2 has a configuration option to change the default order:
.Cm PreferredAuthentications .
.Pp
Host-based authentication works as follows:
d634 3
a636 5
considered for login.
Additionally, the server
.Em must
be able to verify the client's
host key (see the description of
d639 4
a642 3
.Pa ~/.ssh/known_hosts ,
below)
for login to be permitted.
d644 1
a644 1
spoofing, DNS spoofing, and routing spoofing.
d651 7
a657 5
Public key authentication works as follows:
The scheme is based on public-key cryptography,
using cryptosystems
where encryption and decryption are done using separate keys,
and it is unfeasible to derive the decryption key from the encryption key.
a660 10
.Nm
implements public key authentication protocol automatically,
using either the RSA or DSA algorithms.
Protocol 1 is restricted to using only RSA keys,
but protocol 2 may use either.
The
.Sx HISTORY
section of
.Xr ssl 8
contains a brief discussion of the two algorithms.
d669 9
a677 3
The client proves that it has access to the private key
and the server checks that the corresponding public key
is authorized to accept the account.
d679 3
a681 1
The user creates his/her key pair by running
a684 6
(protocol 1),
.Pa ~/.ssh/id_dsa
(protocol 2 DSA),
or
.Pa ~/.ssh/id_rsa
(protocol 2 RSA)
a686 6
(protocol 1),
.Pa ~/.ssh/id_dsa.pub
(protocol 2 DSA),
or
.Pa ~/.ssh/id_rsa.pub
(protocol 2 RSA)
d688 2
a689 1
The user should then copy the public key
d692 1
a692 2
in his/her home directory on the remote machine.
The
d697 1
a697 1
per line, though the lines can be very long.
d700 1
a700 1
The most convenient way to use public key authentication may be with an
d706 1
a706 12
Challenge-response authentication works as follows:
The server sends an arbitrary
.Qq challenge
text, and prompts for a response.
Protocol 2 allows multiple challenges and responses;
protocol 1 is restricted to just one challenge/response.
Examples of challenge-response authentication include
BSD Authentication (see
.Xr login.conf 5 )
and PAM (some non-OpenBSD systems).
.Pp
Finally, if other authentication methods fail,
d712 22
d735 4
d740 1
a740 18
automatically maintains and checks a database containing
identification for all hosts it has ever been used with.
Host keys are stored in
.Pa ~/.ssh/known_hosts
in the user's home directory.
Additionally, the file
.Pa /etc/ssh/ssh_known_hosts
is automatically checked for known hosts.
Any new hosts are automatically added to the user's file.
If a host's identification ever changes,
.Nm
warns about this and disables password authentication to prevent
server spoofing or man-in-the-middle attacks,
which could otherwise be used to circumvent the encryption.
The
.Cm StrictHostKeyChecking
option can be used to control logins to machines whose
host key is not known or has changed.
d742 6
d764 10
a773 2
machine exits and all X11 and TCP connections have been closed.
.Sh ESCAPE CHARACTERS
d797 1
a797 1
.Nm .
d815 1
a815 1
options (see above).
d831 1
a831 58
.Sh TCP FORWARDING
Forwarding of arbitrary TCP connections over the secure channel can
be specified either on the command line or in a configuration file.
One possible application of TCP forwarding is a secure connection to a
mail server; another is going through firewalls.
.Pp
In the example below, we look at encrypting communication between
an IRC client and server, even though the IRC server does not directly
support encrypted communications.
This works as follows:
the user connects to the remote host using
.Nm ,
specifying a port to be used to forward connections
to the remote server.
After that it is possible to start the service which is to be encrypted
on the client machine,
connecting to the same local port,
and
.Nm
will encrypt and forward the connection.
.Pp
The following example tunnels an IRC session from client machine
.Dq 127.0.0.1
(localhost)
to remote server
.Dq server.example.com :
.Bd -literal -offset 4n
$ ssh -f -L 1234:localhost:6667 server.example.com sleep 10
$ irc -c '#users' -p 1234 pinky 127.0.0.1
.Ed
.Pp
This tunnels a connection to IRC server
.Dq server.example.com ,
joining channel
.Dq #users ,
nickname
.Dq pinky ,
using port 1234.
It doesn't matter which port is used,
as long as it's greater than 1023
(remember, only root can open sockets on privileged ports)
and doesn't conflict with any ports already in use.
The connection is forwarded to port 6667 on the remote server,
since that's the standard port for IRC services.
.Pp
The
.Fl f
option backgrounds
.Nm
and the remote command
.Dq sleep 10
is specified to allow an amount of time
(10 seconds, in the example)
to start the service which is to be tunnelled.
If no connections are made within the time specified,
.Nm
will exit.
.Sh X11 FORWARDING
d837 1
a837 2
.Fl X ,
.Fl x ,
d839 2
a840 2
.Fl Y
options above)
d882 1
a882 1
options above) and
d885 23
a907 4
.Sh VERIFYING HOST KEYS
When connecting to a server for the first time,
a fingerprint of the server's public key is presented to the user
(unless the option
d909 2
a910 26
has been disabled).
Fingerprints can be determined using
.Xr ssh-keygen 1 :
.Pp
.Dl $ ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key
.Pp
If the fingerprint is already known,
it can be matched and verified,
and the key can be accepted.
If the fingerprint is unknown,
an alternative method of verification is available:
SSH fingerprints verified by DNS.
An additional resource record (RR),
SSHFP,
is added to a zonefile
and the connecting client is able to match the fingerprint
with that of the key presented.
.Pp
In this example, we are connecting a client to a server,
.Dq host.example.com .
The SSHFP resource records should first be added to the zonefile for
host.example.com:
.Bd -literal -offset indent
$ ssh-keygen -f /etc/ssh/ssh_host_rsa_key.pub -r host.example.com.
$ ssh-keygen -f /etc/ssh/ssh_host_dsa_key.pub -r host.example.com.
.Ed
a911 19
The output lines will have to be added to the zonefile.
To check that the zone is answering fingerprint queries:
.Pp
.Dl $ dig -t SSHFP host.example.com
.Pp
Finally the client connects:
.Bd -literal -offset indent
$ ssh -o "VerifyHostKeyDNS ask" host.example.com
[...]
Matching host key fingerprint found in DNS.
Are you sure you want to continue connecting (yes/no)?
.Ed
.Pp
See the
.Cm VerifyHostKeyDNS
option in
.Xr ssh_config 5
for more information.
.Sh SSH-BASED VIRTUAL PRIVATE NETWORKS
d913 2
a914 5
contains support for Virtual Private Network (VPN) tunnelling
using the
.Xr tun 4
network pseudo-device,
allowing two networks to be joined securely.
d916 4
a919 42
.Xr sshd_config 5
configuration option
.Cm PermitTunnel
controls whether the server supports this,
and at what level (layer 2 or 3 traffic).
.Pp
The following example would connect client network 10.0.50.0/24
with remote network 10.0.99.0/24, provided that the SSH server
running on the gateway to the remote network,
at 192.168.1.15, allows it:
.Bd -literal -offset indent
# ssh -f -w 0:1 192.168.1.15 true
# ifconfig tun0 10.0.50.1 10.0.99.1 netmask 255.255.255.252
.Ed
.Pp
Client access may be more finely tuned via the
.Pa /root/.ssh/authorized_keys
file (see below) and the
.Cm PermitRootLogin
server option.
The following entry would permit connections on
.Xr tun 4
device 1 from user
.Dq jane
and on tun device 2 from user
.Dq john ,
if
.Cm PermitRootLogin
is set to
.Dq forced-commands-only :
.Bd -literal -offset 2n
tunnel="1",command="sh /etc/netstart tun1" ssh-rsa ... jane
tunnel="2",command="sh /etc/netstart tun2" ssh-rsa ... john
.Ed
.Pp
Since a SSH-based setup entails a fair amount of overhead,
it may be more suited to temporary setups,
such as for wireless VPNs.
More permanent VPNs are better provided by tools such as
.Xr ipsecctl 8
and
.Xr isakmpd 8 .
d923 1
a923 1
.Bl -tag -width "SSH_ORIGINAL_COMMAND"
d931 3
a933 6
.Dq hostname:n ,
where
.Dq hostname
indicates the host where the shell runs, and
.Sq n
is an integer \*(Ge 1.
d954 1
a954 1
.Nm .
d979 2
a980 3
Identifies the path of a
.Ux Ns -domain
socket used to communicate with the agent.
d984 2
a985 2
four space-separated values: client IP address, client port number,
server IP address, and server port number.
d987 1
a987 1
This variable contains the original command line if a forced command
d1009 1
a1009 1
to the environment if the file exists and users are allowed to
d1016 10
a1025 44
.Bl -tag -width Ds -compact
.It ~/.rhosts
This file is used for host-based authentication (see above).
On some machines this file may need to be
world-readable if the user's home directory is on an NFS partition,
because
.Xr sshd 8
reads it as root.
Additionally, this file must be owned by the user,
and must not have write permissions for anyone else.
The recommended
permission for most machines is read/write for the user, and not
accessible by others.
.Pp
.It ~/.shosts
This file is used in exactly the same way as
.Pa .rhosts ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
.It ~/.ssh/authorized_keys
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
The format of this file is described in the
.Xr sshd 8
manual page.
This file is not highly sensitive, but the recommended
permissions are read/write for the user, and not accessible by others.
.Pp
.It ~/.ssh/config
This is the per-user configuration file.
The file format and configuration options are described in
.Xr ssh_config 5 .
Because of the potential for abuse, this file must have strict permissions:
read/write for the user, and not accessible by others.
.Pp
.It ~/.ssh/environment
Contains additional definitions for environment variables; see
.Sx ENVIRONMENT ,
above.
.Pp
.It ~/.ssh/identity
.It ~/.ssh/id_dsa
.It ~/.ssh/id_rsa
Contains the private key for authentication.
d1029 1
d1031 1
a1031 1
will simply ignore a private key file if it is accessible by others.
d1033 1
a1033 1
generating the key which will be used to encrypt the
d1035 17
a1051 5
.Pp
.It ~/.ssh/identity.pub
.It ~/.ssh/id_dsa.pub
.It ~/.ssh/id_rsa.pub
Contains the public key for authentication.
d1054 34
d1089 1
a1089 4
.It ~/.ssh/known_hosts
Contains a list of host keys for all hosts the user has logged into
that are not already in the systemwide list of known host keys.
See
d1091 1
a1091 4
for further details of the format of this file.
.Pp
.It ~/.ssh/rc
Commands in this file are executed by
d1093 3
a1095 16
when the user logs in, just before the user's shell (or command) is
started.
See the
.Xr sshd 8
manual page for more information.
.Pp
.It /etc/hosts.equiv
This file is for host-based authentication (see above).
It should only be writable by root.
.Pp
.It /etc/shosts.equiv
This file is used in exactly the same way as
.Pa hosts.equiv ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
d1100 1
a1100 4
.Pp
.It /etc/ssh/ssh_host_key
.It /etc/ssh/ssh_host_dsa_key
.It /etc/ssh/ssh_host_rsa_key
d1102 7
a1108 2
and are used for host-based authentication.
If protocol version 1 is used,
d1115 3
a1117 2
to access the host keys,
eliminating the requirement that
d1119 1
a1119 1
be setuid root when host-based authentication is used.
d1123 22
d1146 50
a1195 7
.It /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator to contain the public host keys of all machines in the
organization.
It should be world-readable.
See
d1197 2
a1198 3
for further details of the format of this file.
.Pp
.It /etc/ssh/sshrc
d1201 2
a1202 1
when the user logs in, just before the user's shell (or command) is started.
d1206 4
d1211 4
d1216 2
d1223 1
a1223 2
.Xr ssh-keyscan 1 ,
.Xr tun 4 ,
d1229 9
a1237 48
.%R RFC 4250
.%T "The Secure Shell (SSH) Protocol Assigned Numbers"
.%D 2006
.Re
.Rs
.%R RFC 4251
.%T "The Secure Shell (SSH) Protocol Architecture"
.%D 2006
.Re
.Rs
.%R RFC 4252
.%T "The Secure Shell (SSH) Authentication Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4253
.%T "The Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4254
.%T "The Secure Shell (SSH) Connection Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4255
.%T "Using DNS to Securely Publish Secure Shell (SSH) Key Fingerprints"
.%D 2006
.Re
.Rs
.%R RFC 4256
.%T "Generic Message Exchange Authentication for the Secure Shell Protocol (SSH)"
.%D 2006
.Re
.Rs
.%R RFC 4335
.%T "The Secure Shell (SSH) Session Channel Break Extension"
.%D 2006
.Re
.Rs
.%R RFC 4344
.%T "The Secure Shell (SSH) Transport Layer Encryption Modes"
.%D 2006
.Re
.Rs
.%R RFC 4345
.%T "Improved Arcfour Modes for the Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
@


1.1.1.9
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.259 2006/03/22 21:16:24 jakob Exp $
d572 1
a572 1
e.g. when implementing menu services.
d1028 2
a1029 1
$ ssh-keygen -r host.example.com.
d1181 1
a1181 1
was set when the daemon was started (i.e. the daemon passes the value
a1390 5
.Rs
.%R RFC 4419
.%T "Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
.Re
@


1.1.1.10
log
@if we're gonna push out another snapshot, we'd better have sshd-current
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.260 2006/05/29 16:13:23 jmc Exp $
a668 1
GSSAPI-based authentication,
@


1.1.1.11
log
@import a few security-wise relevant changes right now
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.263 2006/07/11 18:50:48 markus Exp $
d81 1
a81 2
.Oo Fl w Ar local_tun Ns
.Op : Ns Ar remote_tun Oc
a450 1
.It ExitOnForwardFailure
d591 2
a592 6
.It Fl w Xo
.Ar local_tun Ns Op : Ns Ar remote_tun
.Xc
Requests
tunnel
device forwarding with the specified
d594 8
a601 5
devices between the client
.Pq Ar local_tun
and the server
.Pq Ar remote_tun .
.Pp
a604 4
If
.Ar remote_tun
is not specified, it defaults to
.Dq any .
d607 1
a607 3
and
.Cm TunnelDevice
directives in
a608 4
If the
.Cm Tunnel
directive is unset, it is set to the default tunnel mode, which is
.Dq point-to-point .
d876 1
a876 3
.Sm off
.Fl KR Oo Ar bind_address : Oc Ar port .
.Sm on
@


1.1.1.12
log
@OpenSSH 4.5 (security)
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.265 2006/10/28 18:08:10 otto Exp $
d1080 3
a1082 6
with remote network 10.0.99.0/24 using a point-to-point connection
from 10.1.1.1 to 10.1.1.2,
provided that the SSH server running on the gateway to the remote network,
at 192.168.1.15, allows it.
.Pp
On the client:
d1085 1
a1085 8
# ifconfig tun0 10.1.1.1 10.1.1.2 netmask 255.255.255.252
# route add 10.0.99.0/24 10.1.1.2
.Ed
.Pp
On the server:
.Bd -literal -offset indent
# ifconfig tun1 10.1.1.2 10.1.1.1 netmask 255.255.255.252
# route add 10.0.50.0/24 10.1.1.1
d1108 1
a1108 1
Since an SSH-based setup entails a fair amount of overhead,
@


1.1.1.13
log
@update OpenSSH, while we're at it…
@
text
@d37 1
a37 1
.\" $OpenBSD: ssh.1,v 1.266 2006/12/11 21:25:46 markus Exp $
a1420 5
.Rs
.%R RFC 4716
.%T "The Secure Shell (SSH) Public Key File Format"
.%D 2006
.Re
@


1.1.1.14
log
@Import latest OpenSSH and OpenBSD-libssl
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.270 2007/06/12 13:43:55 jmc Exp $
.Dd $Mdocdate: June 7 2007 $
d46 1
a46 1
.Op Fl 1246AaCfgKkMNnqsTtVvXxY
a317 3
.It Fl K
Enables GSSAPI-based authentication and forwarding (delegation) of GSSAPI
credentials to the server.
d677 1
a677 1
and integrity (hmac-md5, hmac-sha1, umac-64, hmac-ripemd160).
@


1.1.1.15
log
@newer openssh
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.273 2008/02/11 07:58:28 jmc Exp $
.Dd $Mdocdate: February 11 2008 $
d509 1
a509 1
Causes most warning and diagnostic messages to be suppressed.
a1247 7
.It ~/.ssh/
This directory is the default location for all user-specific configuration
and authentication information.
There is no general requirement to keep the entire contents of this directory
secret, but the recommended permissions are read/write/execute for the user,
and not accessible by others.
.Pp
@


1.1.1.16
log
@OpenSSH-current
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.280 2008/11/09 12:34:47 tobias Exp $
.Dd $Mdocdate: November 9 2008 $
d46 1
a46 1
.Op Fl 1246AaCfgKkMNnqsTtVvXxYy
a292 9
.Pp
If the
.Cm ExitOnForwardFailure
configuration option is set to
.Dq yes ,
then a client started with
.Fl f
will wait for all remote port forwards to be successfully established
before placing itself in the background.
a500 1
.It VisualHostKey
d543 1
a543 1
This may be overridden by specifying a
a650 5
.It Fl y
Send log information using the
.Xr syslog 3
system module.
By default this information is sent to stderr.
d886 2
a887 1
.Fl L ,
a888 2
and
.Fl D
d1030 3
a1032 25
If the fingerprint is already known, it can be matched
and the key can be accepted or rejected.
Because of the difficulty of comparing host keys
just by looking at hex strings,
there is also support to compare host keys visually,
using
.Em random art .
By setting the
.Cm VisualHostKey
option to
.Dq yes ,
a small ASCII graphic gets displayed on every login to a server, no matter
if the session itself is interactive or not.
By learning the pattern a known server produces, a user can easily
find out that the host key has changed when a completely different pattern
is displayed.
Because these patterns are not unambiguous however, a pattern that looks
similar to the pattern remembered only gives a good probability that the
host key is the same, not guaranteed proof.
.Pp
To get a listing of the fingerprints along with their random art for
all known hosts, the following command line can be used:
.Pp
.Dl $ ssh-keygen -lv -f ~/.ssh/known_hosts
.Pp
a1435 7
.Rs
.%T "Hash Visualization: a New Technique to improve Real-World Security"
.%A A. Perrig
.%A D. Song
.%D 1999
.%O "International Workshop on Cryptographic Techniques and E-Commerce (CrypTEC '99)"
.Re
@


1.1.1.17
log
@OpenSSH 5.2, or so
@
text
@d37 2
a38 2
.\" $OpenBSD: ssh.1,v 1.283 2009/03/19 15:15:09 jmc Exp $
.Dd $Mdocdate: March 19 2009 $
d194 20
a213 3
See the
.Cm Ciphers
keyword for more information.
a565 7
.Pp
If the
.Ar port
argument is
.Ql 0 ,
the listen port will be dynamically allocated on the server and reported
to the client at run time.
@


