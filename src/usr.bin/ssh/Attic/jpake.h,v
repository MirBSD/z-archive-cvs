head	1.3;
access;
symbols
	cvs-200910041320:1.1.1.2
	cvs-200903221200:1.1.1.2
	cvs-200812162015:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.03.28.22.31.55;	author tg;	state dead;
branches;
next	1.2;
commitid	1005335F87233372394;

1.2
date	2013.10.31.20.07.11;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005272B7081B0E5655;

1.1
date	2008.12.16.20.15.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	10049480C7A2701F5C0;

1.1.1.1
date	2008.12.16.20.15.34;	author tg;	state Exp;
branches;
next	1.1.1.2;
commitid	10049480C7A2701F5C0;

1.1.1.2
date	2009.03.22.12.03.00;	author tg;	state Exp;
branches;
next	;
commitid	10049C6290649163EA3;


desc
@@


1.3
log
@replicate commit “remove experimental, never-enabled JPAKE code; ok markus@@” (djm, 2014/01/29 06:18:35) from upstream
@
text
@/* $MirOS: src/usr.bin/ssh/jpake.h,v 1.2 2013/10/31 20:07:11 tg Exp $ */
/* $OpenBSD: jpake.h,v 1.2 2009/03/05 07:18:19 djm Exp $ */
/*
 * Copyright © 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 2008 Damien Miller.  All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef JPAKE_H
#define JPAKE_H

#include <sys/types.h>

#include <openssl/bn.h>

/* Set JPAKE_DEBUG in CFLAGS for privacy-violating debugging */
#ifndef JPAKE_DEBUG
# define JPAKE_DEBUG_BN(a)
# define JPAKE_DEBUG_BUF(a)
# define JPAKE_DEBUG_CTX(a)
#else
# define JPAKE_DEBUG_BN(a)	debug3_bn a
# define JPAKE_DEBUG_BUF(a)	debug3_buf a
# define JPAKE_DEBUG_CTX(a)	jpake_dump a
#endif /* JPAKE_DEBUG */

#define KZP_ID_LEN	16	/* Length of client and server IDs */

struct jpake_ctx {
	/* Parameters */
	struct modp_group *grp;

	/* Private values shared by client and server */
	BIGNUM *s;			/* Secret (salted, crypted password) */
	BIGNUM *k;			/* Derived key */

	/* Client private values (NULL for server) */
	BIGNUM *x1;			/* random in Zq */
	BIGNUM *x2;			/* random in Z*q */

	/* Server private values (NULL for server) */
	BIGNUM *x3;			/* random in Zq */
	BIGNUM *x4;			/* random in Z*q */

	/* Step 1: C->S */
	u_char *client_id;		/* Anti-replay nonce */
	u_int client_id_len;
	BIGNUM *g_x1;			/* g^x1 */
	BIGNUM *g_x2;			/* g^x2 */

	/* Step 1: S->C */
	u_char *server_id;		/* Anti-replay nonce */
	u_int server_id_len;
	BIGNUM *g_x3;			/* g^x3 */
	BIGNUM *g_x4;			/* g^x4 */

	/* Step 2: C->S */
	BIGNUM *a;			/* g^((x1+x3+x4)*x2*s) */

	/* Step 2: S->C */
	BIGNUM *b;			/* g^((x1+x2+x3)*x4*s) */

	/* Confirmation: C->S */
	u_char *h_k_cid_sessid;		/* H(k || client_id || session_id) */
	u_int h_k_cid_sessid_len;

	/* Confirmation: S->C */
	u_char *h_k_sid_sessid;		/* H(k || server_id || session_id) */
	u_int h_k_sid_sessid_len;
};

/* jpake.c */
struct modp_group *jpake_default_group(void);
void jpake_dump(struct jpake_ctx *, const char *, ...)
    __attribute__((__nonnull__(2)))
    __attribute__((__format__(__printf__, 2, 3)));
struct jpake_ctx *jpake_new(void);
void jpake_free(struct jpake_ctx *);

void jpake_step1(struct modp_group *, u_char **, u_int *,
    BIGNUM **, BIGNUM **, BIGNUM **, BIGNUM **,
    u_char **, u_int *, u_char **, u_int *);

void jpake_step2(struct modp_group *, BIGNUM *,
    BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *,
    const u_char *, u_int, const u_char *, u_int,
    const u_char *, u_int, const u_char *, u_int,
    BIGNUM **, u_char **, u_int *);

void jpake_confirm_hash(const BIGNUM *,
    const u_char *, u_int,
    const u_char *, u_int,
    u_char **, u_int *);

void jpake_key_confirm(struct modp_group *, BIGNUM *, BIGNUM *,
    BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *,
    const u_char *, u_int, const u_char *, u_int,
    const u_char *, u_int, const u_char *, u_int,
    BIGNUM **, u_char **, u_int *);

int jpake_check_confirm(const BIGNUM *, const u_char *, u_int,
    const u_char *, u_int, const u_char *, u_int);

#endif /* JPAKE_H */

@


1.2
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/* $MirOS$ */
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/* $OpenBSD: jpake.h,v 1.1 2008/11/04 08:22:13 djm Exp $ */
d4 2
d34 2
a35 2
# define JPAKE_DEBUG_BN(a)	jpake_debug3_bn a
# define JPAKE_DEBUG_BUF(a)	jpake_debug3_buf a
d37 1
a37 5
#endif /* SCHNORR_DEBUG */

struct jpake_group {
	BIGNUM *p, *q, *g;
};
d43 1
a43 1
	struct jpake_group *grp;
d85 1
a85 9
struct jpake_group *jpake_default_group(void);
BIGNUM *bn_rand_range_gt_one(const BIGNUM *high);
int hash_buffer(const u_char *, u_int, const EVP_MD *, u_char **, u_int *);
void jpake_debug3_bn(const BIGNUM *, const char *, ...)
    __attribute__((__nonnull__ (2)))
    __attribute__((format(printf, 2, 3)));
void jpake_debug3_buf(const u_char *, u_int, const char *, ...)
    __attribute__((__nonnull__ (3)))
    __attribute__((format(printf, 3, 4)));
d87 2
a88 2
    __attribute__((__nonnull__ (2)))
    __attribute__((format(printf, 2, 3)));
d92 1
a92 1
void jpake_step1(struct jpake_group *, u_char **, u_int *,
d96 1
a96 1
void jpake_step2(struct jpake_group *, BIGNUM *,
d107 1
a107 1
void jpake_key_confirm(struct jpake_group *, BIGNUM *, BIGNUM *,
a115 8
/* schnorr.c */
int schnorr_sign(const BIGNUM *, const BIGNUM *, const BIGNUM *,
    const BIGNUM *, const BIGNUM *, const u_char *, u_int ,
    u_char **, u_int *);
int schnorr_verify(const BIGNUM *, const BIGNUM *, const BIGNUM *, 
    const BIGNUM *, const u_char *, u_int,
    const u_char *, u_int);

@


1.1.1.1
log
@OpenSSH-current
@
text
@@


1.1.1.2
log
@OpenSSH 5.2, or so
@
text
@d1 1
a1 1
/* $OpenBSD: jpake.h,v 1.2 2009/03/05 07:18:19 djm Exp $ */
d31 2
a32 2
# define JPAKE_DEBUG_BN(a)	debug3_bn a
# define JPAKE_DEBUG_BUF(a)	debug3_buf a
d34 5
a38 1
#endif /* JPAKE_DEBUG */
d44 1
a44 1
	struct modp_group *grp;
d86 9
a94 1
struct modp_group *jpake_default_group(void);
d101 1
a101 1
void jpake_step1(struct modp_group *, u_char **, u_int *,
d105 1
a105 1
void jpake_step2(struct modp_group *, BIGNUM *,
d116 1
a116 1
void jpake_key_confirm(struct modp_group *, BIGNUM *, BIGNUM *,
d125 8
@

