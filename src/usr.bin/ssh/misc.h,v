head	1.6;
access;
symbols
	cvs-200910041320:1.1.1.11
	cvs-200903221200:1.1.1.11
	cvs-200812162015:1.1.1.11
	cvs-200804031830:1.1.1.10
	MIRBSD_10:1.1.1.10.0.2
	MIRBSD_10_BASE:1.1.1.10
	cvs-200803022030:1.1.1.10
	cvs-200709131337:1.1.1.9
	cvs-200709021830:1.1.1.9
	cvs-200708201200:1.1.1.9
	cvs-200706161500:1.1.1.9
	cvs-200705192215:1.1.1.9
	cvs-200704292000:1.1.1.9
	cvs-200703080900:1.1.1.9
	cvs-200701251600:1.1.1.9
	cvs-200612111600:1.1.1.9
	cvs-200611090230:1.1.1.9
	OPENBSD_4_0:1.1.1.9
	MIRBSD_9_BASE:1.1.1.8
	cvs-200606162342:1.1.1.8
	cvs-200606022000:1.1.1.8
	cvs-200604191000:1.1.1.8
	cvs-200602220045:1.1.1.7
	MIRBSD_8:1.1.1.6.0.2
	MIRBSD_8_BASE:1.1.1.6
	cvs-200512201942:1.1.1.6
	cvs-200511231930:1.1.1.5
	cvs-200507211800:1.1.1.4
	cvs-200506221550:1.1.1.3
	cvs-200505050030:1.1.1.2
	cvs-200504291700:1.1.1.2
	cvs-200504261445:1.1.1.2
	cvs-200504141900:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2017.04.08.16.23.49;	author tg;	state Exp;
branches;
next	1.5;
commitid	10058E90EAF35869BFC;

1.5
date	2013.10.31.20.07.12;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005272B7081B0E5655;

1.4
date	2009.10.04.14.29.04;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004AC8B1276FC00211;

1.3
date	2008.12.27.21.17.56;	author tg;	state Exp;
branches;
next	1.2;
commitid	10049569B9439744217;

1.2
date	2008.12.16.22.11.27;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004948275D032BCCF3;

1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.14.19.33.25;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.06.22.15.56.25;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	181342b98a38fe99;

1.1.1.4
date	2005.07.21.21.00.28;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	560042e0092f571e;

1.1.1.5
date	2005.11.23.19.34.14;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	116a4384c4467ffc;

1.1.1.6
date	2005.12.20.19.43.43;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	10043A85EF81EF097CF;

1.1.1.7
date	2006.02.22.00.51.35;	author tg;	state Exp;
branches;
next	1.1.1.8;
commitid	10043FBB5A933C3BB9B;

1.1.1.8
date	2006.04.19.10.15.03;	author tg;	state Exp;
branches;
next	1.1.1.9;
commitid	10044460DB21E1F715C;

1.1.1.9
date	2006.09.20.19.06.49;	author tg;	state Exp;
branches;
next	1.1.1.10;
commitid	10045119150397FC669;

1.1.1.10
date	2008.03.02.20.40.41;	author tg;	state Exp;
branches;
next	1.1.1.11;
commitid	10047CB10DD30FAF062;

1.1.1.11
date	2008.12.16.20.15.33;	author tg;	state Exp;
branches;
next	1.1.1.12;
commitid	10049480C7A2701F5C0;

1.1.1.12
date	2017.04.08.16.17.36;	author tg;	state Exp;
branches;
next	;
commitid	10058E90D305C54E939;


desc
@@


1.6
log
@fastmerge
@
text
@/* $MirOS: src/usr.bin/ssh/misc.h,v 1.4 2009/10/04 14:29:04 tg Exp $ */
/* $OpenBSD: misc.h,v 1.38*+1.52 2008/06/12 20:38:28 dtucker Exp $ */

/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright © 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#ifndef _MISC_H
#define _MISC_H

/* misc.c */

char	*chop(char *);
char	*strdelim(char **);
int	 set_nonblock(int);
int	 unset_nonblock(int);
void	 set_nodelay(int);
int	 a2port(const char *);
int	 a2tun(const char *, int *);
char	*put_host_port(const char *, u_short);
char	*hpdelim(char **);
char	*cleanhostname(char *);
char	*colon(char *);
long	 convtime(const char *);
char	*tilde_expand_filename(const char *, uid_t);
char	*percent_expand(const char *, ...) __attribute__((__sentinel__));
char	*tohex(const void *, size_t);
void	 sanitise_stdfd(void);
void	 ms_subtract_diff(struct timeval *, int *);
void	 ms_to_timeval(struct timeval *, int);

struct passwd *pwcopy(struct passwd *);
const char *ssh_gai_strerror(int);

typedef struct arglist arglist;
struct arglist {
	char    **list;
	u_int   num;
	u_int   nalloc;
};
void	 addargs(arglist *, const char *, ...)
	     __attribute__((__format__(__printf__, 2, 3)));
void	 replacearg(arglist *, u_int, const char *, ...)
	     __attribute__((__format__(__printf__, 3, 4)));
void	 freeargs(arglist *);

int	 tun_open(int, int);

/* Common definitions for ssh tunnel device forwarding */
#define SSH_TUNMODE_NO		0x00
#define SSH_TUNMODE_POINTOPOINT	0x01
#define SSH_TUNMODE_ETHERNET	0x02
#define SSH_TUNMODE_DEFAULT	SSH_TUNMODE_POINTOPOINT
#define SSH_TUNMODE_YES		(SSH_TUNMODE_POINTOPOINT|SSH_TUNMODE_ETHERNET)

#define SSH_TUNID_ANY		0x7fffffff
#define SSH_TUNID_ERR		(SSH_TUNID_ANY - 1)
#define SSH_TUNID_MAX		(SSH_TUNID_ANY - 2)

/* Functions to extract or store big-endian words of various sizes */
u_int64_t	get_u64(const void *)
    __attribute__((__bounded__(__minbytes__, 1, 8)));
u_int32_t	get_u32(const void *)
    __attribute__((__bounded__(__minbytes__, 1, 4)));
u_int16_t	get_u16(const void *)
    __attribute__((__bounded__(__minbytes__, 1, 2)));
void		put_u64(void *, u_int64_t)
    __attribute__((__bounded__(__minbytes__, 1, 8)));
void		put_u32(void *, u_int32_t)
    __attribute__((__bounded__(__minbytes__, 1, 4)));
void		put_u16(void *, u_int16_t)
    __attribute__((__bounded__(__minbytes__, 1, 2)));

/* Little-endian store/load, used by umac.c */
u_int32_t	get_u32_le(const void *)
    __attribute__((__bounded__( __minbytes__, 1, 4)));
void		put_u32_le(void *, u_int32_t)
    __attribute__((__bounded__( __minbytes__, 1, 4)));


/* readpass.c */

#define RP_ECHO			0x0001
#define RP_ALLOW_STDIN		0x0002
#define RP_ALLOW_EOF		0x0004
#define RP_USE_ASKPASS		0x0008

char	*read_passphrase(const char *, int);
int	 ask_permission(const char *, ...) __attribute__((__format__(__printf__, 1, 2)));
int	 read_keyfile_line(FILE *, const char *, char *, size_t, u_long *);

#endif /* _MISC_H */
@


1.5
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d2 1
a2 1
/* $OpenBSD: misc.h,v 1.38 2008/06/12 20:38:28 dtucker Exp $ */
d84 6
@


1.4
log
@• merge newer OpenSSH
• KNF in our diff – style(9)
• some const cleanliness (build with __CRAZY=Yes mostly)
@
text
@d1 1
a1 1
/* $MirOS$ */
d6 2
d52 1
a52 1
	     __attribute__((format(printf, 2, 3)));
d54 1
a54 1
	     __attribute__((format(printf, 3, 4)));
d72 1
a72 1
    __attribute__((__bounded__( __minbytes__, 1, 8)));
d74 1
a74 1
    __attribute__((__bounded__( __minbytes__, 1, 4)));
d76 1
a76 1
    __attribute__((__bounded__( __minbytes__, 1, 2)));
d78 1
a78 1
    __attribute__((__bounded__( __minbytes__, 1, 8)));
d80 1
a80 1
    __attribute__((__bounded__( __minbytes__, 1, 4)));
d82 1
a82 1
    __attribute__((__bounded__( __minbytes__, 1, 2)));
d93 1
a93 1
int	 ask_permission(const char *, ...) __attribute__((format(printf, 1, 2)));
@


1.3
log
@merge and wrap exec/exit functions better
@
text
@d1 1
d49 1
a49 1
void	 addargs(arglist *, char *, ...)
d51 1
a51 1
void	 replacearg(arglist *, u_int, char *, ...)
@


1.2
log
@• add a thing similar to arc4_atexit() to be used before exec()s
  XXX as this is used after the fork() the stir PID is different,
  XXX leading to errorneous seeding before giving up; libc could
  XXX make this much more efficient
• add arc4random_{buf,uniform}; this is required until we update libc
@
text
@a0 1
/* $MirOS$ */
a92 6
/* arc4hlp.c */
extern void arc4_preexec(void);
extern void arc4random_buf(void *, size_t)
    __attribute__((bounded (buffer, 1, 2)));
extern u_int32_t arc4random_uniform(u_int32_t);

@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: misc.h,v 1.20 2004/12/11 01:48:56 dtucker Exp $	*/
d16 3
d27 3
d33 6
d41 1
d49 32
a80 3
void	 addargs(arglist *, char *, ...) __attribute__((format(printf, 2, 3)));

/* tildexpand.c */
a81 1
char	*tilde_expand_filename(const char *, uid_t);
d93 8
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@OpenSSH-current
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.h,v 1.22 2005/04/09 04:32:54 djm Exp $	*/
a22 1
char	*hpdelim(char **);
a25 1
char	*tilde_expand_filename(const char *, uid_t);
d37 4
@


1.1.1.3
log
@most current OpenSSH.com
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.h,v 1.23 2005/06/06 11:20:36 djm Exp $	*/
a27 1
char	*percent_expand(const char *, ...) __attribute__((sentinel));
@


1.1.1.4
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.h,v 1.25 2005/07/14 04:00:43 dtucker Exp $	*/
d28 1
a28 2
char	*percent_expand(const char *, ...) __attribute__((__sentinel__));
char	*tohex(const u_char *, u_int);
@


1.1.1.5
log
@Import current OpenSSH
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.h,v 1.26 2005/09/13 23:40:07 djm Exp $	*/
a29 1
void	 sanitise_stdfd(void);
@


1.1.1.6
log
@OpenSSH is the last missing piece to update before the release
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.h,v 1.28 2005/12/08 18:34:11 reyk Exp $	*/
a22 1
int	 a2tun(const char *, int *);
a51 13

int	 tun_open(int, int);

/* Common definitions for ssh tunnel device forwarding */
#define SSH_TUNMODE_NO		0x00
#define SSH_TUNMODE_POINTOPOINT	0x01
#define SSH_TUNMODE_ETHERNET	0x02
#define SSH_TUNMODE_DEFAULT	SSH_TUNMODE_POINTOPOINT
#define SSH_TUNMODE_YES		(SSH_TUNMODE_POINTOPOINT|SSH_TUNMODE_ETHERNET)

#define SSH_TUNID_ANY		0x7fffffff
#define SSH_TUNID_ERR		(SSH_TUNID_ANY - 1)
#define SSH_TUNID_MAX		(SSH_TUNID_ANY - 2)
@


1.1.1.7
log
@import OpenSSH-current
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.h,v 1.29 2006/01/31 10:19:02 djm Exp $	*/
d41 1
a41 5
void	 addargs(arglist *, char *, ...)
	     __attribute__((format(printf, 2, 3)));
void	 replacearg(arglist *, u_int, char *, ...)
	     __attribute__((format(printf, 3, 4)));
void	 freeargs(arglist *);
@


1.1.1.8
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@d1 1
a1 1
/* $OpenBSD: misc.h,v 1.31 2006/03/30 09:58:15 djm Exp $ */
a14 3
#ifndef _MISC_H
#define _MISC_H

d30 1
a30 1
char	*tohex(const void *, size_t);
a69 17

/* Functions to extract or store big-endian words of various sizes */
u_int64_t	get_u64(const void *)
    __attribute__((__bounded__( __minbytes__, 1, 8)));
u_int32_t	get_u32(const void *)
    __attribute__((__bounded__( __minbytes__, 1, 4)));
u_int16_t	get_u16(const void *)
    __attribute__((__bounded__( __minbytes__, 1, 2)));
void		put_u64(void *, u_int64_t)
    __attribute__((__bounded__( __minbytes__, 1, 8)));
void		put_u32(void *, u_int32_t)
    __attribute__((__bounded__( __minbytes__, 1, 4)));
void		put_u16(void *, u_int16_t)
    __attribute__((__bounded__( __minbytes__, 1, 2)));

#endif /* _MISC_H */

@


1.1.1.9
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: misc.h,v 1.36 2006/08/18 10:27:16 djm Exp $ */
a26 1
char	*put_host_port(const char *, u_short);
d50 11
d88 1
a89 12
/* readpass.c */

#define RP_ECHO			0x0001
#define RP_ALLOW_STDIN		0x0002
#define RP_ALLOW_EOF		0x0004
#define RP_USE_ASKPASS		0x0008

char	*read_passphrase(const char *, int);
int	 ask_permission(const char *, ...) __attribute__((format(printf, 1, 2)));
int	 read_keyfile_line(FILE *, const char *, char *, size_t, u_long *);

#endif /* _MISC_H */
@


1.1.1.10
log
@newer openssh
@
text
@d1 1
a1 1
/* $OpenBSD: misc.h,v 1.37 2007/12/27 14:22:08 dtucker Exp $ */
a37 1
const char *ssh_gai_strerror(int);
@


1.1.1.11
log
@OpenSSH-current
@
text
@d1 1
a1 1
/* $OpenBSD: misc.h,v 1.38 2008/06/12 20:38:28 dtucker Exp $ */
a35 2
void	 ms_subtract_diff(struct timeval *, int *);
void	 ms_to_timeval(struct timeval *, int);
@


1.1.1.12
log
@backport some alignment-fixing commits from OpenBSD
@
text
@d1 1
a1 1
/* $OpenBSD: misc.h,v 1.38*+1.52 2008/06/12 20:38:28 dtucker Exp $ */
a80 6
/* Little-endian store/load, used by umac.c */
u_int32_t	get_u32_le(const void *)
    __attribute__((__bounded__( __minbytes__, 1, 4)));
void		put_u32_le(void *, u_int32_t)
    __attribute__((__bounded__( __minbytes__, 1, 4)));

@


