head	1.20;
access;
symbols
	cvs-200910041320:1.1.1.14
	cvs-200903221200:1.1.1.13
	cvs-200812162015:1.1.1.13
	cvs-200804031830:1.1.1.12
	MIRBSD_10:1.14.0.2
	MIRBSD_10_BASE:1.14
	cvs-200803022030:1.1.1.11
	cvs-200709131337:1.1.1.10
	cvs-200709021830:1.1.1.10
	cvs-200708201200:1.1.1.10
	cvs-200706161500:1.1.1.10
	cvs-200705192215:1.1.1.9
	cvs-200704292000:1.1.1.9
	cvs-200703080900:1.1.1.8
	cvs-200701251600:1.1.1.8
	cvs-200612111600:1.1.1.8
	cvs-200611090230:1.1.1.8
	OPENBSD_4_0:1.1.1.8
	MIRBSD_9_BASE:1.8
	cvs-200606162342:1.1.1.7
	cvs-200606022000:1.1.1.7
	cvs-200604191000:1.1.1.7
	cvs-200602220045:1.1.1.6
	MIRBSD_8:1.6.0.2
	MIRBSD_8_BASE:1.6
	cvs-200512201942:1.1.1.5
	cvs-200511231930:1.1.1.4
	cvs-200507211800:1.1.1.4
	cvs-200506221550:1.1.1.4
	cvs-200505050030:1.1.1.3
	cvs-200504291700:1.1.1.3
	cvs-200504261445:1.1.1.3
	cvs-200504141900:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.20
date	2011.01.15.21.52.44;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004D32173B08BB4E36;

1.19
date	2009.10.04.14.29.12;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004AC8B1276FC00211;

1.18
date	2009.03.22.15.01.25;	author tg;	state Exp;
branches;
next	1.17;
commitid	10049C652CD5CCC321F;

1.17
date	2008.12.16.22.13.32;	author tg;	state Exp;
branches;
next	1.16;
commitid	10049482819766381ED;

1.16
date	2008.12.16.20.55.32;	author tg;	state Exp;
branches;
next	1.15;
commitid	100494815C97ECEEDBF;

1.15
date	2008.04.03.18.39.39;	author tg;	state Exp;
branches;
next	1.14;
commitid	10047F5247E47E55C5E;

1.14
date	2008.03.02.21.14.23;	author tg;	state Exp;
branches
	1.14.2.1;
next	1.13;
commitid	10047CB18BB506A8527;

1.13
date	2007.06.16.15.41.52;	author tg;	state Exp;
branches;
next	1.12;
commitid	100467404D10F2EE204;

1.12
date	2007.04.29.20.23.14;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004634FEC2113C55F5;

1.11
date	2006.12.11.20.22.10;	author tg;	state Exp;
branches;
next	1.10;
commitid	100457DBDF745B9BD3B;

1.10
date	2006.09.20.21.41.07;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004511B578580E7F04;

1.9
date	2006.07.23.14.19.28;	author tg;	state Exp;
branches;
next	1.8;
commitid	10044C3857E74BD315F;

1.8
date	2006.04.19.10.40.57;	author tg;	state Exp;
branches;
next	1.7;
commitid	100444613BD3A91C28B;

1.7
date	2006.02.22.01.23.53;	author tg;	state Exp;
branches;
next	1.6;
commitid	10043FBBD2C2C5E7D81;

1.6
date	2005.12.20.19.57.39;	author tg;	state Exp;
branches;
next	1.5;
commitid	10043A8623F4C1F637E;

1.5
date	2005.06.22.16.11.40;	author tg;	state Exp;
branches;
next	1.4;
commitid	598b42b98dcf335f;

1.4
date	2005.04.26.15.21.51;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.14.19.49.35;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.13.18.33.33;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.29.55;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.14.2.1
date	2008.04.05.20.12.21;	author tg;	state Exp;
branches;
next	;
commitid	10047F7DD234C13F66E;

1.1.1.1
date	2005.02.05.17.29.55;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.14.19.33.32;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.26.14.55.04;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.06.22.15.56.28;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	181342b98a38fe99;

1.1.1.5
date	2005.12.20.19.43.47;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10043A85EF81EF097CF;

1.1.1.6
date	2006.02.22.00.51.36;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	10043FBB5A933C3BB9B;

1.1.1.7
date	2006.04.19.10.15.05;	author tg;	state Exp;
branches;
next	1.1.1.8;
commitid	10044460DB21E1F715C;

1.1.1.8
date	2006.09.20.19.06.50;	author tg;	state Exp;
branches;
next	1.1.1.9;
commitid	10045119150397FC669;

1.1.1.9
date	2007.04.29.20.07.03;	author tg;	state Exp;
branches;
next	1.1.1.10;
commitid	1004634FAED5BC54DF0;

1.1.1.10
date	2007.06.16.15.11.14;	author tg;	state Exp;
branches;
next	1.1.1.11;
commitid	1004673FD85114A3F32;

1.1.1.11
date	2008.03.02.20.40.42;	author tg;	state Exp;
branches;
next	1.1.1.12;
commitid	10047CB10DD30FAF062;

1.1.1.12
date	2008.04.03.18.34.33;	author tg;	state Exp;
branches;
next	1.1.1.13;
commitid	10047F5234C593EA799;

1.1.1.13
date	2008.12.16.20.15.34;	author tg;	state Exp;
branches;
next	1.1.1.14;
commitid	10049480C7A2701F5C0;

1.1.1.14
date	2009.10.04.13.25.45;	author tg;	state Exp;
branches;
next	;
commitid	1004AC8A2663BC008C5;


desc
@@


1.20
log
@Introduce /etc/ssh/root:config and /etc/ssh/root:known_hosts
and /etc/ssh/root:authorised_keys for the superuser if his
HOME directory is unset, empty or, not normalised, "/" (root).
十̲CVS: ----------------------------------------------------------------------
@
text
@.\"  -*- nroff -*-
.\"
.\" Author: Tatu Ylonen <ylo@@cs.hut.fi>
.\" Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
.\"                    All rights reserved
.\"
.\" As far as I am concerned, the code I have written for this software
.\" can be used freely for any purpose.  Any derived versions of this
.\" software must be clearly marked as such, and if the derived work is
.\" incompatible with the protocol description in the RFC file, it must be
.\" called by a name other than "ssh" or "Secure Shell".
.\"
.\" Copyright (c) 1999,2000 Markus Friedl.  All rights reserved.
.\" Copyright (c) 1999 Aaron Campbell.  All rights reserved.
.\" Copyright (c) 1999 Theo de Raadt.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.19 2009/10/04 14:29:12 tg Exp $
.\" $OpenBSD: sshd.8,v 1.248 2009/03/26 08:38:39 sobrado Exp $
.Dd $Mdocdate: October 4 2009 $
.Dt SSHD 8
.Os
.Sh NAME
.Nm sshd
.Nd OpenSSH SSH daemon
.Sh SYNOPSIS
.Nm sshd
.Bk -words
.Op Fl 46DdeiqTt
.Op Fl b Ar bits
.Op Fl C Ar connection_spec
.Op Fl f Ar config_file
.Op Fl g Ar login_grace_time
.Op Fl h Ar host_key_file
.Op Fl k Ar key_gen_time
.Op Fl o Ar option
.Op Fl p Ar port
.Op Fl u Ar len
.Ek
.Sh DESCRIPTION
.Nm
(OpenSSH Daemon) is the daemon program for
.Xr ssh 1 .
Together these programs replace
.Xr rlogin 1
and
.Xr rsh 1 ,
and provide secure encrypted communications between two untrusted hosts
over an insecure network.
.Pp
.Nm
listens for connections from clients.
It is normally started at boot from
.Pa /etc/rc .
It forks a new
daemon for each incoming connection.
The forked daemons handle
key exchange, encryption, authentication, command execution,
and data exchange.
.Pp
.Nm
can be configured using command-line options or a configuration file
(by default
.Xr sshd_config 5 ) ;
command-line options override values specified in the
configuration file.
.Nm
rereads its configuration file when it receives a hangup signal,
.Dv SIGHUP ,
by executing itself with the name and options it was started with, e.g.\&
.Pa /usr/sbin/sshd .
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 4
Forces
.Nm
to use IPv4 addresses only.
.It Fl 6
Forces
.Nm
to use IPv6 addresses only.
.It Fl b Ar bits
Specifies the number of bits in the ephemeral protocol version 1
server key (default 1024).
.It Fl C Ar connection_spec
Specify the connection parameters to use for the
.Fl T
extended test mode.
If provided, any
.Cm Match
directives in the configuration file
that would apply to the specified user, host, and address will be set before
the configuration is written to standard output.
The connection parameters are supplied as keyword=value pairs.
The keywords are
.Dq user ,
.Dq host ,
and
.Dq addr .
All are required and may be supplied in any order, either with multiple
.Fl C
options or as a comma-separated list.
.It Fl D
When this option is specified,
.Nm
will not detach and does not become a daemon.
This allows easy monitoring of
.Nm sshd .
.It Fl d
Debug mode.
The server sends verbose debug output to the system
log, and does not put itself in the background.
The server also will not fork and will only process one connection.
This option is only intended for debugging for the server.
Multiple
.Fl d
options increase the debugging level.
Maximum is 3.
.It Fl e
When this option is specified,
.Nm
will send the output to the standard error instead of the system log.
.It Fl f Ar config_file
Specifies the name of the configuration file.
The default is
.Pa /etc/ssh/sshd_config .
.Nm
refuses to start if there is no configuration file.
.It Fl g Ar login_grace_time
Gives the grace time for clients to authenticate themselves (default
120 seconds).
If the client fails to authenticate the user within
this many seconds, the server disconnects and exits.
A value of zero indicates no limit.
.It Fl h Ar host_key_file
Specifies a file from which a host key is read.
This option must be given if
.Nm
is not run as root (as the normal
host key files are normally not readable by anyone but root).
The default is
.Pa /etc/ssh/ssh_host_key
for protocol version 1, and
.Pa /etc/ssh/ssh_host_rsa_key
and
.Pa /etc/ssh/ssh_host_dsa_key
for protocol version 2.
It is possible to have multiple host key files for
the different protocol versions and host key algorithms.
.br
.It Fl i
Specifies that
.Nm
is being run from
.Xr inetd 8 .
.Nm
is normally not run
from inetd because it needs to generate the server key before it can
respond to the client, and this may take tens of seconds.
Clients would have to wait too long if the key was regenerated every time.
However, with small key sizes (e.g. 512) using
.Nm
from inetd may
be feasible.
.It Fl k Ar key_gen_time
Specifies how often the ephemeral protocol version 1 server key is
regenerated (default 3600 seconds, or one hour).
The motivation for regenerating the key fairly
often is that the key is not stored anywhere, and after about an hour
it becomes impossible to recover the key for decrypting intercepted
communications even if the machine is cracked into or physically
seized.
A value of zero indicates that the key will never be regenerated.
.It Fl o Ar option
Can be used to give options in the format used in the configuration file.
This is useful for specifying options for which there is no separate
command-line flag.
For full details of the options, and their values, see
.Xr sshd_config 5 .
.It Fl p Ar port
Specifies the port on which the server listens for connections
(default 22).
Multiple port options are permitted.
Ports specified in the configuration file with the
.Cm Port
option are ignored when a command-line port is specified.
Ports specified using the
.Cm ListenAddress
option override command-line ports.
.It Fl q
Quiet mode.
Nothing is sent to the system log.
Normally the beginning,
authentication, and termination of each connection is logged.
.It Fl T
Extended test mode.
Check the validity of the configuration file, output the effective configuration
to stdout and then exit.
Optionally,
.Cm Match
rules may be applied by specifying the connection parameters using one or more
.Fl C
options.
.It Fl t
Test mode.
Only check the validity of the configuration file and sanity of the keys.
This is useful for updating
.Nm
reliably as configuration options may change.
.It Fl u Ar len
This option is used to specify the size of the field
in the
.Li utmp
structure that holds the remote host name.
If the resolved host name is longer than
.Ar len ,
the dotted decimal value will be used instead.
This allows hosts with very long host names that
overflow this field to still be uniquely identified.
Specifying
.Fl u0
indicates that only dotted decimal addresses
should be put into the
.Pa utmp
file.
.Fl u0
may also be used to prevent
.Nm
from making DNS requests unless the authentication
mechanism or configuration requires it.
Authentication mechanisms that may require DNS include
.Cm RhostsRSAAuthentication ,
.Cm HostbasedAuthentication ,
and using a
.Cm from="pattern-list"
option in a key file.
Configuration options that require DNS include using a
USER@@HOST pattern in
.Cm AllowUsers
or
.Cm DenyUsers .
.El
.Sh AUTHENTICATION
The OpenSSH SSH daemon supports SSH protocols 1 and 2.
Both protocols are supported by default,
though this can be changed via the
.Cm Protocol
option in
.Xr sshd_config 5 .
Protocol 2 supports both RSA and DSA keys;
protocol 1 only supports RSA keys.
For both protocols,
each host has a host-specific key,
normally 2048 bits,
used to identify the host.
Much longer RSA keys should be used, but this makes
logins very slow if less powerful machines are involved.
DSA keys cannot be longer than 2048 bits due to misdesign, though.
On
.Mx ,
only protocol 2 RSA is enabled by default to improve security.
.Pp
Forward security for protocol 1 is provided through
an additional server key,
normally 768 bits,
generated when the server starts.
This key is normally regenerated every hour if it has been used, and
is never stored on disk.
Whenever a client connects, the daemon responds with its public
host and server keys.
The client compares the
RSA host key against its own database to verify that it has not changed.
The client then generates a 256-bit random number.
It encrypts this
random number using both the host key and the server key, and sends
the encrypted number to the server.
Both sides then use this
random number as a session key which is used to encrypt all further
communications in the session.
The rest of the session is encrypted
using a conventional cipher, currently Blowfish or 3DES, with Blowfish
being used by default.
The client selects the encryption algorithm
to use from those offered by the server.
.Pp
For protocol 2,
forward security is provided through a Diffie-Hellman key agreement.
This key agreement results in a shared session key.
The rest of the session is encrypted using a symmetric cipher, currently
128-bit AES, Blowfish, 3DES, CAST128, Arcfour, 192-bit AES, or 256-bit AES.
The client selects the encryption algorithm
to use from those offered by the server.
Additionally, session integrity is provided
through a cryptographic message authentication code
(umac-64, hmac-ripemd160, hmac-sha1 or hmac-md5).
.Pp
Finally, the server and the client enter an authentication dialog.
The client tries to authenticate itself using
host-based authentication,
public key authentication,
challenge-response authentication,
or password authentication.
.Pp
If the client successfully authenticates itself, a dialog for
preparing the session is entered.
At this time the client may request
things like allocating a pseudo-tty, forwarding X11 connections,
forwarding TCP connections, or forwarding the authentication agent
connection over the secure channel.
.Pp
After this, the client either requests a shell or execution of a command.
The sides then enter session mode.
In this mode, either side may send
data at any time, and such data is forwarded to/from the shell or
command on the server side, and the user terminal in the client side.
.Pp
When the user program terminates and all forwarded X11 and other
connections have been closed, the server sends command exit status to
the client, and both sides exit.
.Sh LOGIN PROCESS
When a user successfully logs in,
.Nm
does the following:
.Bl -enum -offset indent
.It
If the login is on a tty, and no command has been specified,
prints last login time and
.Pa /etc/motd
(unless prevented in the configuration file or by
.Pa ~/.hushlogin ;
see the
.Sx FILES
section).
.It
If the login is on a tty, records login time.
.It
Checks
.Pa /etc/nologin ;
if it exists, prints contents and quits
(unless root).
.It
Changes to run with normal user privileges.
.It
Sets up basic environment.
.It
Reads the file
.Pa ~/.etc/ssh/environment ,
if it exists, and users are allowed to change their environment.
See the
.Cm PermitUserEnvironment
option in
.Xr sshd_config 5 .
.It
Changes to user's home directory.
.It
If
.Pa ~/.etc/ssh/rc
exists, runs it; else if
.Pa /etc/ssh/sshrc
exists, runs
it; otherwise runs xauth.
The
.Dq rc
files are given the X11
authentication protocol and cookie in standard input.
See
.Sx SSHRC ,
below.
.It
Runs user's shell or command.
.El
.Sh SSHRC
If the file
.Pa ~/.etc/ssh/rc
exists,
.Xr sh 1
runs it after reading the
environment files but before starting the user's shell or command.
It must not produce any output on stdout; stderr must be used
instead.
If X11 forwarding is in use, it will receive the "proto cookie" pair in
its standard input (and
.Ev DISPLAY
in its environment).
The script must call
.Xr xauth 1
because
.Nm
will not run xauth automatically to add X11 cookies.
.Pp
The primary purpose of this file is to run any initialization routines
which may be needed before the user's home directory becomes
accessible; AFS is a particular example of such an environment.
.Pp
This file will probably contain some initialization code followed by
something similar to:
.Bd -literal -offset 3n
if read proto cookie && [ -n "$DISPLAY" ]; then
	if [ `echo $DISPLAY | cut -c1-10` = 'localhost:' ]; then
		# X11UseLocalhost=yes
		echo add unix:`echo $DISPLAY |
		    cut -c11-` $proto $cookie
	else
		# X11UseLocalhost=no
		echo add $DISPLAY $proto $cookie
	fi | xauth -q -
fi
.Ed
.Pp
If this file does not exist,
.Pa /etc/ssh/sshrc
is run, and if that
does not exist either, xauth is used to add the cookie.
.Sh AUTHORISED_KEYS FILE FORMAT
.Cm AuthorisedKeysFile
specifies the file containing public keys for
public key authentication;
if none is specified, the default is
.Pa ~/.etc/ssh/authorised_keys .
If the user is the superuser and his home directory the root or unset,
/etc/ssh/root:authorised_keys
is used instead.
Each line of the file contains one
key (empty lines and lines starting with a
.Ql #
are ignored as
comments).
Protocol 1 public keys consist of the following space-separated fields:
options, bits, exponent, modulus, comment.
Protocol 2 public key consist of:
options, keytype, base64-encoded key, comment.
The options field is optional;
its presence is determined by whether the line starts
with a number or not (the options field never starts with a number).
The bits, exponent, modulus, and comment fields give the RSA key for
protocol version 1; the
comment field is not used for anything (but may be convenient for the
user to identify the key).
For protocol version 2 the keytype is
.Dq ssh-dss
or
.Dq ssh-rsa .
.Pp
Note that lines in this file are usually several hundred bytes long
(because of the size of the public key encoding) up to a limit of
8 kilobytes, which permits DSA keys up to 8 kilobits and RSA
keys up to 16 kilobits.
You don't want to type them in; instead, copy the
.Pa identity.pub ,
.Pa id_dsa.pub ,
or the
.Pa id_rsa.pub
file and edit it.
.Pp
.Nm
enforces a minimum RSA key modulus size for protocol 1
and protocol 2 keys of 768 bits.
.Pp
The options (if present) consist of comma-separated option
specifications.
No spaces are permitted, except within double quotes.
The following option specifications are supported (note
that option keywords are case-insensitive):
.Bl -tag -width Ds
.It Cm command="command"
Specifies that the command is executed whenever this key is used for
authentication.
The command supplied by the user (if any) is ignored.
The command is run on a pty if the client requests a pty;
otherwise it is run without a tty.
If an 8-bit clean channel is required,
one must not request a pty or should specify
.Cm no-pty .
A quote may be included in the command by quoting it with a backslash.
This option might be useful
to restrict certain public keys to perform just a specific operation.
An example might be a key that permits remote backups but nothing else.
Note that the client may specify TCP and/or X11
forwarding unless they are explicitly prohibited.
The command originally supplied by the client is available in the
.Ev SSH_ORIGINAL_COMMAND
environment variable.
Note that this option applies to shell, command or subsystem execution.
.It Cm environment="NAME=value"
Specifies that the string is to be added to the environment when
logging in using this key.
Environment variables set this way
override other default environment values.
Multiple options of this type are permitted.
Environment processing is disabled by default and is
controlled via the
.Cm PermitUserEnvironment
option.
This option is automatically disabled if
.Cm UseLogin
is enabled.
.It Cm from="pattern-list"
Specifies that in addition to public key authentication, either the canonical
name of the remote host or its IP address must be present in the
comma-separated list of patterns.
See
.Sx PATTERNS
in
.Xr ssh_config 5
for more information on patterns.
.Pp
In addition to the wildcard matching that may be applied to hostnames or
addresses, a
.Cm from
stanza may match IP addresses using CIDR address/masklen notation.
.Pp
The purpose of this option is to optionally increase security: public key
authentication by itself does not trust the network or name servers or
anything (but the key); however, if somebody somehow steals the key, the key
permits an intruder to log in from anywhere in the world.
This additional option makes using a stolen key more difficult (name
servers and/or routers would have to be compromised in addition to
just the key).
.It Cm no-agent-forwarding
Forbids authentication agent forwarding when this key is used for
authentication.
.It Cm no-port-forwarding
Forbids TCP forwarding when this key is used for authentication.
Any port forward requests by the client will return an error.
This might be used, e.g. in connection with the
.Cm command
option.
.It Cm no-pty
Prevents tty allocation (a request to allocate a pty will fail).
.It Cm no-user-rc
Disables execution of
.Pa ~/.etc/ssh/rc .
.It Cm no-X11-forwarding
Forbids X11 forwarding when this key is used for authentication.
Any X11 forward requests by the client will return an error.
.It Cm permitopen="host:port"
Limit local
.Li "ssh -L"
port forwarding such that it may only connect to the specified host and
port.
IPv6 addresses can be specified with an alternative syntax:
.Ar host Ns / Ns Ar port .
Multiple
.Cm permitopen
options may be applied separated by commas.
No pattern matching is performed on the specified hostnames,
they must be literal domains or addresses.
.It Cm tunnel="n"
Force a
.Xr tun 4
device on the server.
Without this option, the next available device will be used if
the client requests a tunnel.
.El
.Pp
An example authorised_keys file:
.Bd -literal -offset 3n
# Comments allowed at start of line
ssh-rsa AAAAB3Nza...LiPk== user@@example.net
from="*.sales.example.net,!pc.sales.example.net" ssh-rsa
AAAAB2...19Q== john@@example.net
command="dump /home",no-pty,no-port-forwarding ssh-dss
AAAAC3...51R== example.net
permitopen="192.0.2.1:80",permitopen="192.0.2.2:25" ssh-dss
AAAAB5...21S==
tunnel="0",command="sh /etc/netstart tun0" ssh-rsa AAAA...==
jane@@example.net
.Ed
.Sh SSH_KNOWN_HOSTS FILE FORMAT
The
.Pa /etc/ssh/ssh_known_hosts
and
.Pa ~/.etc/ssh/known_hosts
and
.Pa /etc/ssh/root:known_hosts ,
if the user is the superuser and his home directory the root or unset,
files contain host public keys for all known hosts.
The global file should
be prepared by the administrator (optional), and the per-user file is
maintained automatically: whenever the user connects from an unknown host,
its key is added to the per-user file.
.Pp
Each line in these files contains the following fields: hostnames,
bits, exponent, modulus, comment.
The fields are separated by spaces.
.Pp
Hostnames is a comma-separated list of patterns
.Pf ( Ql *
and
.Ql \&?
act as
wildcards); each pattern in turn is matched against the canonical host
name (when authenticating a client) or against the user-supplied
name (when authenticating a server).
A pattern may also be preceded by
.Ql \&!
to indicate negation: if the host name matches a negated
pattern, it is not accepted (by that line) even if it matched another
pattern on the line.
A hostname or address may optionally be enclosed within
.Ql \&[
and
.Ql \&]
brackets then followed by
.Ql \&:
and a non-standard port number.
.Pp
Alternately, hostnames may be stored in a hashed form which hides host names
and addresses should the file's contents be disclosed.
Hashed hostnames start with a
.Ql |
character.
Only one hashed hostname may appear on a single line and none of the above
negation or wildcard operators may be applied.
.Pp
Bits, exponent, and modulus are taken directly from the RSA host key; they
can be obtained, for example, from
.Pa /etc/ssh/ssh_host_key.pub .
The optional comment field continues to the end of the line, and is not used.
.Pp
Lines starting with
.Ql #
and empty lines are ignored as comments.
.Pp
When performing host authentication, authentication is accepted if any
matching line has the proper key.
It is thus permissible (but not
recommended) to have several lines or different host keys for the same
names.
This will inevitably happen when short forms of host names
from different domains are put in the file.
It is possible
that the files contain conflicting information; authentication is
accepted if valid information can be found from either file.
.Pp
Note that the lines in these files are typically hundreds of characters
long, and you definitely don't want to type in the host keys by hand.
Rather, generate them by a script
or by taking
.Pa /etc/ssh/ssh_host_key.pub
and adding the host names at the front.
.Pp
An example ssh_known_hosts file:
.Bd -literal -offset 3n
# Comments allowed at start of line
closenet,...,192.0.2.53 1024 37 159...93 closenet.example.net
cvs.example.net,192.0.2.10 ssh-rsa AAAA1234.....=
# A hashed hostname
|1|JfKTdBh7rNbXkVAQCRp4OQoPfmI=|USECr3SWf1JUPsms5AqfD5QfxkM= ssh-rsa
AAAA1234.....=
.Ed
.Sh FILES
.Bl -tag -width Ds -compact
.It ~/.hushlogin
This file is used to suppress printing the last login time and
.Pa /etc/motd ,
if
.Cm PrintLastLog
and
.Cm PrintMotd ,
respectively,
are enabled.
It does not suppress printing of the banner specified by
.Cm Banner .
.Pp
.It ~/.rhosts
This file is used for host-based authentication (see
.Xr ssh 1
for more information).
On some machines this file may need to be
world-readable if the user's home directory is on an NFS partition,
because
.Nm
reads it as root.
Additionally, this file must be owned by the user,
and must not have write permissions for anyone else.
The recommended
permission for most machines is read/write for the user, and not
accessible by others.
.Pp
.It ~/.shosts
This file is used in exactly the same way as
.Pa .rhosts ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
.It ~/.etc/ssh/
This directory is the default location for all user-specific configuration
and authentication information.
There is no general requirement to keep the entire contents of this directory
secret, but the recommended permissions are read/write/execute for the user,
and not accessible by others.
.Pp
.It ~/.etc/ssh/authorised_keys
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
The format of this file is described above.
The content of the file is not highly sensitive, but the recommended
permissions are read/write for the user, and not accessible by others.
If this file, the
.Pa ~/.etc/ssh
directory, or the user's home directory are writable
by other users, then the file could be modified or replaced by unauthorised
users.
In this case,
.Nm
will not allow it to be used unless the
.Cm StrictModes
option has been set to
.Dq no .
.Pp
.It /etc/ssh/root:authorised_keys
The same, for the superuser, if his home is the root directory or unset.
.Pp
.It ~/.ssh/authorized_keys
Portable name for the above file.
.Pp
.It ~/.etc/ssh/environment
This file is read into the environment at login (if it exists).
It can only contain empty lines, comment lines (that start with
.Ql # ) ,
and assignment lines of the form name=value.
The file should be writable
only by the user; it need not be readable by anyone else.
Environment processing is disabled by default and is
controlled via the
.Cm PermitUserEnvironment
option.
.Pp
.It ~/.etc/ssh/known_hosts
Contains a list of host keys for all hosts the user has logged into
that are not already in the systemwide list of known host keys.
The format of this file is described above.
This file should be writable only by root/the owner and
can, but need not be, world-readable.
.Pp
.It /etc/ssh/root:known_hosts
The same, for the superuser, if his home is the root directory or unset.
.Pp
.It ~/.etc/ssh/rc
Contains initialization routines to be run before
the user's home directory becomes accessible.
This file should be writable only by the user, and need not be
readable by anyone else.
.Pp
.It /etc/hosts.allow
.It /etc/hosts.deny
Access controls that should be enforced by tcp-wrappers are defined here.
Further details are described in
.Xr hosts_access 5 .
.Pp
.It /etc/hosts.equiv
This file is for host-based authentication (see
.Xr ssh 1 ) .
It should only be writable by root.
.Pp
.It /etc/moduli
Contains Diffie-Hellman groups used for the "Diffie-Hellman Group Exchange".
The file format is described in
.Xr moduli 5 .
.Pp
.It /etc/motd
See
.Xr motd 5 .
.Pp
.It /etc/nologin
If this file exists,
.Nm
refuses to let anyone except root log in.
The contents of the file
are displayed to anyone trying to log in, and non-root connections are
refused.
The file should be world-readable.
.Pp
.It /etc/shosts.equiv
This file is used in exactly the same way as
.Pa hosts.equiv ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
.It /etc/ssh/ssh_host_key
.It /etc/ssh/ssh_host_dsa_key
.It /etc/ssh/ssh_host_rsa_key
These three files contain the private parts of the host keys.
These files should only be owned by root, readable only by root, and not
accessible to others.
Note that
.Nm
does not start if these files are group/world-accessible.
.Pp
.It /etc/ssh/ssh_host_key.pub
.It /etc/ssh/ssh_host_dsa_key.pub
.It /etc/ssh/ssh_host_rsa_key.pub
These three files contain the public parts of the host keys.
These files should be world-readable but writable only by
root.
Their contents should match the respective private parts.
These files are not
really used for anything; they are provided for the convenience of
the user so their contents can be copied to known hosts files.
These files are created using
.Xr ssh-keygen 1 .
.Pp
.It /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator to contain the public host keys of all machines in the
organization.
The format of this file is described above.
This file should be writable only by root/the owner and
should be world-readable.
.Pp
.It /etc/ssh/sshd_config
Contains configuration data for
.Nm sshd .
The file format and configuration options are described in
.Xr sshd_config 5 .
.Pp
.It /etc/ssh/sshrc
Similar to
.Pa ~/.etc/ssh/rc ,
it can be used to specify
machine-specific login-time initializations globally.
This file should be writable only by root, and should be world-readable.
.Pp
.It /var/empty
.Xr chroot 2
directory used by
.Nm
during privilege separation in the pre-authentication phase.
The directory should not contain any files and must be owned by root
and not group or world-writable.
.Pp
.It /var/run/sshd.pid
Contains the process ID of the
.Nm
listening for connections (if there are several daemons running
concurrently for different ports, this contains the process ID of the one
started last).
The content of this file is not sensitive; it can be world-readable.
.El
.Sh SEE ALSO
.Xr scp 1 ,
.Xr sftp 1 ,
.Xr ssh 1 ,
.Xr ssh-add 1 ,
.Xr ssh-agent 1 ,
.Xr ssh-keygen 1 ,
.Xr ssh-keyscan 1 ,
.Xr chroot 2 ,
.Xr hosts_access 5 ,
.Xr login.conf 5 ,
.Xr moduli 5 ,
.Xr sshd_config 5 ,
.Xr inetd 8 ,
.Xr sftp-server 8
.Sh AUTHORS
OpenSSH is a derivative of the original and free
ssh 1.2.12 release by Tatu Ylonen.
Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
Theo de Raadt and Dug Song
removed many bugs, re-added newer features and
created OpenSSH.
Markus Friedl contributed the support for SSH
protocol versions 1.5 and 2.0.
Niels Provos and Markus Friedl contributed support
for privilege separation.
.Sh CAVEATS
System security is not improved unless
.Nm rshd ,
.Nm rlogind ,
and
.Nm rexecd
are disabled (thus completely disabling
.Xr rlogin
and
.Xr rsh
into the machine).
@


1.19
log
@• merge newer OpenSSH
• KNF in our diff – style(9)
• some const cleanliness (build with __CRAZY=Yes mostly)
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.18 2009/03/22 15:01:25 tg Exp $
d440 3
d594 3
d731 3
d756 3
@


1.18
log
@merge and tweak ciphers and MACs
@
text
@d37 3
a39 3
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.17 2008/12/16 22:13:32 tg Exp $
.\" $OpenBSD: sshd.8,v 1.247 2008/10/03 13:08:12 jmc Exp $
.Dd $Mdocdate: December 16 2008 $
d527 1
a527 1
stanza may match IP addressess using CIDR address/masklen notation.
@


1.17
log
@really merge OpenSSH-current into MirBSD Secure SHell 10uA4
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.16 2008/12/16 20:55:32 tg Exp $
d315 1
a315 1
(hmac-ripemd160, umac-64, hmac-sha1 or hmac-md5).
@


1.16
log
@fastmerge, do not use yet!
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.15 2008/04/03 18:39:39 tg Exp $
d716 1
a716 1
by other users, then the file could be modified or replaced by unauthorized
@


1.15
log
@fastmerge
@
text
@d37 3
a39 3
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.14 2008/03/02 21:14:23 tg Exp $
.\" $OpenBSD: sshd.8,v 1.241 2008/03/27 22:37:57 jmc Exp $
.Dd $Mdocdate: April 3 2008 $
d48 1
a48 1
.Op Fl 46Ddeiqt
d50 1
d104 19
a122 1
server key (default 768).
d215 9
d515 3
a517 12
Specifies that in addition to public key authentication, the canonical name
of the remote host must be present in the comma-separated list of
patterns.
The purpose
of this option is to optionally increase security: public key authentication
by itself does not trust the network or name servers or anything (but
the key); however, if somebody somehow steals the key, the key
permits an intruder to log in from anywhere in the world.
This additional option makes using a stolen key more difficult (name
servers and/or routers would have to be compromised in addition to
just the key).
.Pp
d523 13
a723 2
The recommended permissions can be set by executing
.Dq chmod go-w ~/ ~/.etc ~/.etc/ssh ~/.etc/ssh/authorised_keys .
@


1.14
log
@merge’n’fix
@
text
@d37 3
a39 3
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.13 2007/06/16 15:41:52 tg Exp $
.\" $OpenBSD: sshd.8,v 1.239 2008/02/11 07:58:28 jmc Exp $
.Dd $Mdocdate: March 2 2008 $
d515 3
@


1.14.2.1
log
@MFC all OpenSSL and OpenSSH fixes (≥ 3 CVEs), requested by bsiegert@@ who will update errata10.hts himself ☻
@
text
@d37 3
a39 3
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.15 2008/04/03 18:39:39 tg Exp $
.\" $OpenBSD: sshd.8,v 1.241 2008/03/27 22:37:57 jmc Exp $
.Dd $Mdocdate: April 3 2008 $
a514 3
.It Cm no-user-rc
Disables execution of
.Pa ~/.etc/ssh/rc .
@


1.13
log
@sync’n’bump
@
text
@d37 3
a39 3
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.12 2007/04/29 20:23:14 tg Exp $
.\" $OpenBSD: sshd.8,v 1.237 2007/06/07 19:37:34 pvalchev Exp $
.Dd $Mdocdate: June 16 2007 $
d666 7
d690 1
a690 1
.Dq chmod go-w ~/ ~/.ssh ~/.ssh/authorized_keys .
@


1.12
log
@merge openssh
@
text
@d37 3
a39 3
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.11 2006/12/11 20:22:10 tg Exp $
.\" $OpenBSD: sshd.8,v 1.235 2007/03/20 15:57:15 jmc Exp $
.Dd September 25, 1999
d287 1
a287 1
(hmac-ripemd160, hmac-sha1 or hmac-md5).
@


1.11
log
@* *.c: merge
* sshd.8: fix a merge glitch from prev
* version.h: bump
@
text
@d37 3
a39 3
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.10 2006/09/20 21:41:07 tg Exp $
.\" $OpenBSD: sshd.8,v 1.234 2006/08/21 08:15:57 dtucker Exp $
.Dd December 11, 2006
d62 5
a66 2
Together these programs replace rlogin and rsh, and
provide secure encrypted communications between two untrusted hosts
d124 1
a124 1
.It Fl f Ar configuration_file
a747 9
.It /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator to contain the public host keys of all machines in the
organization.
The format of this file is described above.
This file should be writable only by root/the owner and
should be world-readable.
.Pp
d771 9
d816 1
@


1.10
log
@finish merging
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.9 2006/07/23 14:19:28 tg Exp $
d39 1
a39 1
.Dd September 25, 1999
a685 2
.Pp
.It ~/.ssh/environment
@


1.9
log
@fix spelling and pubkey authentication
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.8 2006/04/19 10:40:57 tg Exp $
.\" $OpenBSD: sshd.8,v 1.230 2006/02/24 20:31:31 jmc Exp $
d466 3
d576 7
d666 1
a666 1
This file is not highly sensitive, but the recommended
d668 13
d686 2
@


1.8
log
@merge and clean up
@
text
@d37 1
a37 1
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.7 2006/02/22 01:23:53 tg Exp $
d404 1
a404 1
.Cm AuthorizedKeysFile
d659 1
a659 1
.It ~/.etc/ssh/authorized_keys
@


1.7
log
@merge; bump version; fix up manpages and includes a little
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.6 2005/12/20 19:57:39 tg Exp $
.\" $OpenBSD: sshd.8,v 1.228 2006/02/19 20:05:00 jmc Exp $
d85 1
a85 1
by executing itself with the name and options it was started with, e.g.,
d159 1
a159 1
However, with small key sizes (e.g., 512) using
d483 1
a483 9
patterns
.Pf ( Ql *
and
.Ql \&?
serve as wildcards).
The list may also contain
patterns negated by prefixing them with
.Ql \&! ;
if the canonical host name matches a negated pattern, the key is not accepted.
d492 6
d504 1
a504 1
This might be used, e.g., in connection with the
@


1.6
log
@fastmerge, bump version
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.5 2005/06/22 16:11:40 tg Exp $
.\" $OpenBSD: sshd.8,v 1.209 2005/12/06 22:38:28 reyk Exp $
d60 1
a60 1
(SSH Daemon) is the daemon program for
a64 2
The programs are intended to be as easy to
install and use as possible.
d67 1
a67 1
is the daemon that listens for connections from clients.
a74 83
This implementation of
.Nm
supports both SSH protocol version 1 and 2 simultaneously.
.Nm
works as follows:
.Ss SSH protocol version 1
Each host has a host-specific RSA key
(normally 2048 bits) used to identify the host.
Additionally, when
the daemon starts, it generates a server RSA key (normally 768 bits).
This key is normally regenerated every hour if it has been used, and
is never stored on disk.
.Pp
Whenever a client connects, the daemon responds with its public
host and server keys.
The client compares the
RSA host key against its own database to verify that it has not changed.
The client then generates a 256-bit random number.
It encrypts this
random number using both the host key and the server key, and sends
the encrypted number to the server.
Both sides then use this
random number as a session key which is used to encrypt all further
communications in the session.
The rest of the session is encrypted
using a conventional cipher, currently Blowfish or 3DES, with Blowfish
being used by default.
The client selects the encryption algorithm
to use from those offered by the server.
.Pp
Next, the server and the client enter an authentication dialog.
The client tries to authenticate itself using
.Em rhosts
authentication combined with RSA host
authentication, RSA challenge-response authentication, or password
based authentication.
.Pp
System security is not improved unless
.Nm rshd ,
.Nm rlogind ,
and
.Nm rexecd
are disabled (thus completely disabling
.Xr rlogin
and
.Xr rsh
into the machine).
.Ss SSH protocol version 2
Version 2 works similarly:
Each host has a host-specific key (RSA or DSA) used to identify the host.
However, when the daemon starts, it does not generate a server key.
Forward security is provided through a Diffie-Hellman key agreement.
This key agreement results in a shared session key.
.Pp
The rest of the session is encrypted using a symmetric cipher, currently
128-bit AES, Blowfish, 3DES, CAST128, Arcfour, 192-bit AES, or 256-bit AES.
The client selects the encryption algorithm
to use from those offered by the server.
Additionally, session integrity is provided
through a cryptographic message authentication code
(hmac-ripemd160, hmac-sha1 or hmac-md5).
.Pp
Protocol version 2 provides a public key based
user (PubkeyAuthentication) or
client host (HostbasedAuthentication) authentication method,
conventional password authentication and challenge response based methods.
.Ss Command execution and data forwarding
If the client successfully authenticates itself, a dialog for
preparing the session is entered.
At this time the client may request
things like allocating a pseudo-tty, forwarding X11 connections,
forwarding TCP/IP connections, or forwarding the authentication agent
connection over the secure channel.
.Pp
Finally, the client either requests a shell or execution of a command.
The sides then enter session mode.
In this mode, either side may send
data at any time, and such data is forwarded to/from the shell or
command on the server side, and the user terminal in the client side.
.Pp
When the user program terminates and all forwarded X11 and other
connections have been closed, the server sends command exit status to
the client, and both sides exit.
d79 2
a80 2
.Xr sshd_config 5 ) .
Command-line options override values specified in the
a81 1
.Pp
d148 1
d182 6
a187 2
Ports specified in the configuration file are ignored when a
command-line port is specified.
d222 1
a222 1
.Cm HostbasedAuthentication
d232 6
a237 8
.Sh CONFIGURATION FILE
.Nm
reads configuration data from
.Pa /etc/ssh/sshd_config
(or the file specified with
.Fl f
on the command line).
The file format and configuration options are described in
d239 70
d355 3
d361 43
a403 6
.Sh AUTHORIZED_KEYS FILE FORMAT
.Pa ~/.etc/ssh/authorised_keys
is the default file that lists the public keys that are
permitted for RSA authentication in protocol version 1
and for public key authentication (PubkeyAuthentication)
in protocol version 2.
d405 4
a408 2
may be used to specify an alternative file.
.Pp
d414 6
a419 6
Each RSA public key consists of the following fields, separated by
spaces: options, bits, exponent, modulus, comment.
Each protocol version 2 public key consists of:
options, keytype, base64 encoded key, comment.
The options field
is optional; its presence is determined by whether the line starts
d421 1
a421 1
The bits, exponent, modulus and comment fields give the RSA key for
d436 1
a436 1
.Pa id_dsa.pub
a450 20
.It Cm from="pattern-list"
Specifies that in addition to public key authentication, the canonical name
of the remote host must be present in the comma-separated list of
patterns
.Pf ( Ql \&*
and
.Ql \&?
serve as wildcards).
The list may also contain
patterns negated by prefixing them with
.Ql \&! ;
if the canonical host name matches a negated pattern, the key is not accepted.
The purpose
of this option is to optionally increase security: public key authentication
by itself does not trust the network or name servers or anything (but
the key); however, if somebody somehow steals the key, the key
permits an intruder to log in from anywhere in the world.
This additional option makes using a stolen key more difficult (name
servers and/or routers would have to be compromised in addition to
just the key).
d464 1
a464 1
Note that the client may specify TCP/IP and/or X11
d480 23
d504 1
a504 1
Forbids TCP/IP forwarding when this key is used for authentication.
d509 2
a513 5
.It Cm no-agent-forwarding
Forbids authentication agent forwarding when this key is used for
authentication.
.It Cm no-pty
Prevents tty allocation (a request to allocate a pty will fail).
a532 2
.Ss Examples
1024 33 12121...312314325 ylo@@foo.bar
d534 13
a546 7
from="*.niksula.hut.fi,!pc.niksula.hut.fi" 1024 35 23...2334 ylo@@niksula
.Pp
command="dump /home",no-pty,no-port-forwarding 1024 33 23...2323 backup.hut.fi
.Pp
permitopen="10.2.1.55:80",permitopen="10.2.1.56:25" 1024 33 23...2323
.Pp
tunnel="0",command="sh /etc/netstart tun0" ssh-rsa AAAA...== reyk@@openbsd.org
d555 1
a555 1
maintained automatically: whenever the user connects from an unknown host
d563 1
a563 1
.Pf ( Ql \&*
d585 1
a585 1
can be obtained, e.g., from
d610 6
a615 6
.Ss Examples
.Bd -literal
closenet,...,130.233.208.41 1024 37 159...93 closenet.hut.fi
cvs.openbsd.org,199.185.137.3 ssh-rsa AAAA1234.....=
.Ed
.Bd -literal
d621 2
a622 71
.Bl -tag -width Ds
.It Pa /etc/ssh/sshd_config
Contains configuration data for
.Nm sshd .
The file format and configuration options are described in
.Xr sshd_config 5 .
.It Pa /etc/ssh/ssh_host_key, /etc/ssh/ssh_host_dsa_key, /etc/ssh/ssh_host_rsa_key
These three files contain the private parts of the host keys.
These files should only be owned by root, readable only by root, and not
accessible to others.
Note that
.Nm
does not start if this file is group/world-accessible.
.It Pa /etc/ssh/ssh_host_key.pub, /etc/ssh/ssh_host_dsa_key.pub, /etc/ssh/ssh_host_rsa_key.pub
These three files contain the public parts of the host keys.
These files should be world-readable but writable only by
root.
Their contents should match the respective private parts.
These files are not
really used for anything; they are provided for the convenience of
the user so their contents can be copied to known hosts files.
These files are created using
.Xr ssh-keygen 1 .
.It Pa /etc/moduli
Contains Diffie-Hellman groups used for the "Diffie-Hellman Group Exchange".
The file format is described in
.Xr moduli 5 .
.It Pa /var/empty
.Xr chroot 2
directory used by
.Nm
during privilege separation in the pre-authentication phase.
The directory should not contain any files and must be owned by root
and not group or world-writable.
.It Pa /var/run/sshd.pid
Contains the process ID of the
.Nm
listening for connections (if there are several daemons running
concurrently for different ports, this contains the process ID of the one
started last).
The content of this file is not sensitive; it can be world-readable.
.It Pa ~/.etc/ssh/authorized_keys
Lists the public keys (RSA or DSA) that can be used to log into the user's account.
This file must be readable by root (which may on some machines imply
it being world-readable if the user's home directory resides on an NFS
volume).
It is recommended that it not be accessible by others.
The format of this file is described above.
Users will place the contents of their
.Pa identity.pub ,
.Pa id_dsa.pub
and/or
.Pa id_rsa.pub
files into this file, as described in
.Xr ssh-keygen 1 .
.It Pa "/etc/ssh/ssh_known_hosts", "~/.etc/ssh/known_hosts"
These files are consulted when using rhosts with RSA host
authentication or protocol version 2 hostbased authentication
to check the public key of the host.
The key must be listed in one of these files to be accepted.
The client uses the same files
to verify that it is connecting to the correct remote host.
These files should be writable only by root/the owner.
.Pa /etc/ssh/ssh_known_hosts
should be world-readable, and
.Pa ~/.etc/ssh/known_hosts
can, but need not be, world-readable.
.It Pa /etc/motd
See
.Xr motd 5 .
.It Pa ~/.hushlogin
d633 8
a640 2
.It Pa /etc/nologin
If this file exists,
d642 5
a646 21
refuses to let anyone except root log in.
The contents of the file
are displayed to anyone trying to log in, and non-root connections are
refused.
The file should be world-readable.
.It Pa /etc/hosts.allow, /etc/hosts.deny
Access controls that should be enforced by tcp-wrappers are defined here.
Further details are described in
.Xr hosts_access 5 .
.It Pa ~/.rhosts
This file is used during
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication
and contains host-username pairs, separated by a space, one per
line.
The given user on the corresponding host is permitted to log in
without a password.
The same file is used by rlogind and rshd.
The file must
be writable only by the user; it is recommended that it not be
d649 16
a664 54
It is also possible to use netgroups in the file.
Either host or user
name may be of the form +@@groupname to specify all hosts or all users
in the group.
.It Pa ~/.shosts
For ssh,
this file is exactly the same as for
.Pa .rhosts .
However, this file is
not used by rlogin and rshd, so using this permits access using SSH only.
.It Pa /etc/hosts.equiv
This file is used during
.Cm RhostsRSAAuthentication
and
.Cm HostbasedAuthentication
authentication.
In the simplest form, this file contains host names, one per line.
Users on
those hosts are permitted to log in without a password, provided they
have the same user name on both machines.
The host name may also be
followed by a user name; such users are permitted to log in as
.Em any
user on this machine (except root).
Additionally, the syntax
.Dq +@@group
can be used to specify netgroups.
Negated entries start with
.Ql \&- .
.Pp
If the client host/user is successfully matched in this file, login is
automatically permitted provided the client and server user names are the
same.
Additionally, successful client host key authentication is required.
This file must be writable only by root; it is recommended
that it be world-readable.
.Pp
.Sy "Warning: It is almost never a good idea to use user names in"
.Pa hosts.equiv .
Beware that it really means that the named user(s) can log in as
.Em anybody ,
which includes bin, daemon, adm, and other accounts that own critical
binaries and directories.
Using a user name practically grants the user root access.
The only valid use for user names that I can think
of is in negative entries.
.Pp
Note that this warning also applies to rsh/rlogin.
.It Pa /etc/shosts.equiv
This is processed exactly as
.Pa /etc/hosts.equiv .
However, this file may be useful in environments that want to run both
rsh/rlogin and ssh.
.It Pa ~/.etc/ssh/environment
d675 36
a710 14
.It Pa ~/.etc/ssh/rc
If this file exists, it is run with
.Pa /bin/sh
after reading the
environment files but before starting the user's shell or command.
It must not produce any output on stdout; stderr must be used
instead.
If X11 forwarding is in use, it will receive the "proto cookie" pair in
its standard input (and
.Ev DISPLAY
in its environment).
The script must call
.Xr xauth 1
because
d712 20
a731 1
will not run xauth automatically to add X11 cookies.
d733 9
a741 3
The primary purpose of this file is to run any initialization routines
which may be needed before the user's home directory becomes
accessible; AFS is a particular example of such an environment.
d743 12
a754 14
This file will probably contain some initialization code followed by
something similar to:
.Bd -literal
if read proto cookie && [ -n "$DISPLAY" ]; then
	if [ $(echo $DISPLAY | cut -c1-10) = 'localhost:' ]; then
		# X11UseLocalhost=yes
		echo add unix:$(echo $DISPLAY |
		    cut -c11-) $proto $cookie
	else
		# X11UseLocalhost=no
		echo add $DISPLAY $proto $cookie
	fi | xauth -q -
fi
.Ed
d756 5
a760 4
If this file does not exist,
.Pa /etc/ssh/sshrc
is run, and if that
does not exist either, xauth is used to add the cookie.
d762 4
a765 6
This file should be writable only by the user, and need not be
readable by anyone else.
.It Pa /etc/ssh/sshrc
Like
.Pa ~/.etc/ssh/rc .
This can be used to specify
d768 16
a798 20
.Rs
.%A T. Ylonen
.%A T. Kivinen
.%A M. Saarinen
.%A T. Rinne
.%A S. Lehtinen
.%T "SSH Protocol Architecture"
.%N draft-ietf-secsh-architecture-12.txt
.%D January 2002
.%O work in progress material
.Re
.Rs
.%A M. Friedl
.%A N. Provos
.%A W. A. Simpson
.%T "Diffie-Hellman Group Exchange for the SSH Transport Layer Protocol"
.%N draft-ietf-secsh-dh-group-exchange-02.txt
.%D January 2002
.%O work in progress material
.Re
d810 11
@


1.5
log
@merge
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.4 2005/04/26 15:21:51 tg Exp $
.\" $OpenBSD: sshd.8,v 1.208 2005/06/08 03:50:00 djm Exp $
d497 6
d512 2
@


1.4
log
@* merge
* standardise on british spelling
* bump version
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.3 2005/04/14 19:49:35 tg Exp $
.\" $OpenBSD: sshd.8,v 1.207 2005/04/21 06:17:50 djm Exp $
d84 1
a84 1
(normally 1024 bits) used to identify the host.
@


1.3
log
@merge
@
text
@d37 2
a38 2
.\" $MirOS: src/usr.bin/ssh/sshd.8,v 1.2 2005/03/13 18:33:33 tg Exp $
.\" $OpenBSD: sshd.8,v 1.206 2005/03/01 14:59:49 jmc Exp $
d332 1
a332 1
.Pa $HOME/.hushlogin ;
d349 1
a349 1
.Pa $HOME/.etc/ssh/environment ,
d359 1
a359 1
.Pa $HOME/.etc/ssh/rc
d372 1
a372 1
.Pa $HOME/.etc/ssh/authorized_keys
d510 1
a510 1
.Pa $HOME/.etc/ssh/known_hosts
d621 1
a621 1
.It Pa $HOME/.etc/ssh/authorized_keys
d635 1
a635 1
.It Pa "/etc/ssh/ssh_known_hosts", "$HOME/.etc/ssh/known_hosts"
d645 1
a645 1
.Pa $HOME/.etc/ssh/known_hosts
d650 1
a650 1
.It Pa $HOME/.hushlogin
d673 1
a673 1
.It Pa $HOME/.rhosts
d691 1
a691 1
.It Pa $HOME/.shosts
d740 1
a740 1
.It Pa $HOME/.etc/ssh/environment
d751 1
a751 1
.It Pa $HOME/.etc/ssh/rc
d796 1
a796 1
.Pa $HOME/.etc/ssh/rc .
@


1.2
log
@merge src/usr.bin
@
text
@d37 2
a38 2
.\" $MirOS$
.\" $OpenBSD: sshd.8,v 1.203 2004/12/06 11:41:03 dtucker Exp $
d535 8
d574 5
d647 14
@


1.1
log
@Initial revision
@
text
@d37 1
d102 1
a102 1
using a conventional cipher, currently Blowfish or 3DES, with 3DES
d137 1
a137 1
(hmac-sha1 or hmac-md5).
d349 1
a349 1
.Pa $HOME/.ssh/environment ,
d359 1
a359 1
.Pa $HOME/.ssh/rc
d372 1
a372 1
.Pa $HOME/.ssh/authorized_keys
d487 1
a487 1
.Li ``ssh -L''
d510 1
a510 1
.Pa $HOME/.ssh/known_hosts
d608 1
a608 1
.It Pa $HOME/.ssh/authorized_keys
d622 1
a622 1
.It Pa "/etc/ssh/ssh_known_hosts", "$HOME/.ssh/known_hosts"
d632 1
a632 1
.Pa $HOME/.ssh/known_hosts
d713 1
a713 1
.It Pa $HOME/.ssh/environment
d724 1
a724 1
.It Pa $HOME/.ssh/rc
d749 1
a749 1
	if [ `echo $DISPLAY | cut -c1-10` = 'localhost:' ]; then
d751 2
a752 2
		echo add unix:`echo $DISPLAY |
		    cut -c11-` $proto $cookie
d769 1
a769 1
.Pa $HOME/.ssh/rc .
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@OpenSSH-current
@
text
@d37 1
a37 1
.\" $OpenBSD: sshd.8,v 1.206 2005/03/01 14:59:49 jmc Exp $
a533 8
Alternately, hostnames may be stored in a hashed form which hides host names
and addresses should the file's contents be disclosed.
Hashed hostnames start with a
.Ql |
character.
Only one hashed hostname may appear on a single line and none of the above
negation or wildcard operators may be applied.
.Pp
a564 5
.Bd -literal
# A hashed hostname
|1|JfKTdBh7rNbXkVAQCRp4OQoPfmI=|USECr3SWf1JUPsms5AqfD5QfxkM= ssh-rsa
AAAA1234.....=
.Ed
a632 14
.It Pa /etc/motd
See
.Xr motd 5 .
.It Pa $HOME/.hushlogin
This file is used to suppress printing the last login time and
.Pa /etc/motd ,
if
.Cm PrintLastLog
and
.Cm PrintMotd ,
respectively,
are enabled.
It does not suppress printing of the banner specified by
.Cm Banner .
@


1.1.1.3
log
@latest fixes from OpenBSD, last update for #8 if nothing weird happens
@
text
@d37 1
a37 1
.\" $OpenBSD: sshd.8,v 1.207 2005/04/21 06:17:50 djm Exp $
d331 1
a331 1
.Pa ~/.hushlogin ;
d348 1
a348 1
.Pa ~/.ssh/environment ,
d358 1
a358 1
.Pa ~/.ssh/rc
d371 1
a371 1
.Pa ~/.ssh/authorized_keys
d509 1
a509 1
.Pa ~/.ssh/known_hosts
d620 1
a620 1
.It Pa ~/.ssh/authorized_keys
d634 1
a634 1
.It Pa "/etc/ssh/ssh_known_hosts", "~/.ssh/known_hosts"
d644 1
a644 1
.Pa ~/.ssh/known_hosts
d649 1
a649 1
.It Pa ~/.hushlogin
d672 1
a672 1
.It Pa ~/.rhosts
d690 1
a690 1
.It Pa ~/.shosts
d739 1
a739 1
.It Pa ~/.ssh/environment
d750 1
a750 1
.It Pa ~/.ssh/rc
d795 1
a795 1
.Pa ~/.ssh/rc .
@


1.1.1.4
log
@most current OpenSSH.com
@
text
@d37 1
a37 1
.\" $OpenBSD: sshd.8,v 1.208 2005/06/08 03:50:00 djm Exp $
d83 1
a83 1
(normally 2048 bits) used to identify the host.
@


1.1.1.5
log
@OpenSSH is the last missing piece to update before the release
@
text
@d37 1
a37 1
.\" $OpenBSD: sshd.8,v 1.209 2005/12/06 22:38:28 reyk Exp $
a495 6
.It Cm tunnel="n"
Force a
.Xr tun 4
device on the server.
Without this option, the next available device will be used if
the client requests a tunnel.
a504 2
.Pp
tunnel="0",command="sh /etc/netstart tun0" ssh-rsa AAAA...== reyk@@openbsd.org
@


1.1.1.6
log
@import OpenSSH-current
@
text
@d37 1
a37 1
.\" $OpenBSD: sshd.8,v 1.228 2006/02/19 20:05:00 jmc Exp $
d59 1
a59 1
(OpenSSH Daemon) is the daemon program for
d64 2
d68 1
a68 1
listens for connections from clients.
d76 83
d163 2
a164 2
.Xr sshd_config 5 ) ;
command-line options override values specified in the
d166 1
d266 2
a267 6
Ports specified in the configuration file with the
.Cm Port
option are ignored when a command-line port is specified.
Ports specified using the
.Cm ListenAddress
option override command-line ports.
d302 1
a302 1
.Cm HostbasedAuthentication ,
d312 8
a319 6
.Sh AUTHENTICATION
The OpenSSH SSH daemon supports SSH protocols 1 and 2.
Both protocols are supported by default,
though this can be changed via the
.Cm Protocol
option in
a320 64
Protocol 2 supports both RSA and DSA keys;
protocol 1 only supports RSA keys.
For both protocols,
each host has a host-specific key,
normally 2048 bits,
used to identify the host.
.Pp
Forward security for protocol 1 is provided through
an additional server key,
normally 768 bits,
generated when the server starts.
This key is normally regenerated every hour if it has been used, and
is never stored on disk.
Whenever a client connects, the daemon responds with its public
host and server keys.
The client compares the
RSA host key against its own database to verify that it has not changed.
The client then generates a 256-bit random number.
It encrypts this
random number using both the host key and the server key, and sends
the encrypted number to the server.
Both sides then use this
random number as a session key which is used to encrypt all further
communications in the session.
The rest of the session is encrypted
using a conventional cipher, currently Blowfish or 3DES, with 3DES
being used by default.
The client selects the encryption algorithm
to use from those offered by the server.
.Pp
For protocol 2,
forward security is provided through a Diffie-Hellman key agreement.
This key agreement results in a shared session key.
The rest of the session is encrypted using a symmetric cipher, currently
128-bit AES, Blowfish, 3DES, CAST128, Arcfour, 192-bit AES, or 256-bit AES.
The client selects the encryption algorithm
to use from those offered by the server.
Additionally, session integrity is provided
through a cryptographic message authentication code
(hmac-sha1 or hmac-md5).
.Pp
Finally, the server and the client enter an authentication dialog.
The client tries to authenticate itself using
host-based authentication,
public key authentication,
challenge-response authentication,
or password authentication.
.Pp
If the client successfully authenticates itself, a dialog for
preparing the session is entered.
At this time the client may request
things like allocating a pseudo-tty, forwarding X11 connections,
forwarding TCP connections, or forwarding the authentication agent
connection over the secure channel.
.Pp
After this, the client either requests a shell or execution of a command.
The sides then enter session mode.
In this mode, either side may send
data at any time, and such data is forwarded to/from the shell or
command on the server side, and the user terminal in the client side.
.Pp
When the user program terminates and all forwarded X11 and other
connections have been closed, the server sends command exit status to
the client, and both sides exit.
a366 3
See
.Sx SSHRC ,
below.
a369 42
.Sh SSHRC
If the file
.Pa ~/.ssh/rc
exists,
.Xr sh 1
runs it after reading the
environment files but before starting the user's shell or command.
It must not produce any output on stdout; stderr must be used
instead.
If X11 forwarding is in use, it will receive the "proto cookie" pair in
its standard input (and
.Ev DISPLAY
in its environment).
The script must call
.Xr xauth 1
because
.Nm
will not run xauth automatically to add X11 cookies.
.Pp
The primary purpose of this file is to run any initialization routines
which may be needed before the user's home directory becomes
accessible; AFS is a particular example of such an environment.
.Pp
This file will probably contain some initialization code followed by
something similar to:
.Bd -literal -offset 3n
if read proto cookie && [ -n "$DISPLAY" ]; then
	if [ `echo $DISPLAY | cut -c1-10` = 'localhost:' ]; then
		# X11UseLocalhost=yes
		echo add unix:`echo $DISPLAY |
		    cut -c11-` $proto $cookie
	else
		# X11UseLocalhost=no
		echo add $DISPLAY $proto $cookie
	fi | xauth -q -
fi
.Ed
.Pp
If this file does not exist,
.Pa /etc/ssh/sshrc
is run, and if that
does not exist either, xauth is used to add the cookie.
d371 5
d377 2
a378 4
specifies the file containing public keys for
public key authentication;
if none is specified, the default is
.Pa ~/.ssh/authorized_keys .
d384 6
a389 6
Protocol 1 public keys consist of the following space-separated fields:
options, bits, exponent, modulus, comment.
Protocol 2 public key consist of:
options, keytype, base64-encoded key, comment.
The options field is optional;
its presence is determined by whether the line starts
d391 1
a391 1
The bits, exponent, modulus, and comment fields give the RSA key for
d406 1
a406 1
.Pa id_dsa.pub ,
d421 20
d454 1
a454 1
Note that the client may specify TCP and/or X11
a469 23
.It Cm from="pattern-list"
Specifies that in addition to public key authentication, the canonical name
of the remote host must be present in the comma-separated list of
patterns
.Pf ( Ql *
and
.Ql \&?
serve as wildcards).
The list may also contain
patterns negated by prefixing them with
.Ql \&! ;
if the canonical host name matches a negated pattern, the key is not accepted.
The purpose
of this option is to optionally increase security: public key authentication
by itself does not trust the network or name servers or anything (but
the key); however, if somebody somehow steals the key, the key
permits an intruder to log in from anywhere in the world.
This additional option makes using a stolen key more difficult (name
servers and/or routers would have to be compromised in addition to
just the key).
.It Cm no-agent-forwarding
Forbids authentication agent forwarding when this key is used for
authentication.
d471 1
a471 1
Forbids TCP forwarding when this key is used for authentication.
a475 2
.It Cm no-pty
Prevents tty allocation (a request to allocate a pty will fail).
d479 5
d503 2
d506 7
a512 13
An example authorized_keys file:
.Bd -literal -offset 3n
# Comments allowed at start of line
ssh-rsa AAAAB3Nza...LiPk== user@@example.net
from="*.sales.example.net,!pc.sales.example.net" ssh-rsa
AAAAB2...19Q== john@@example.net
command="dump /home",no-pty,no-port-forwarding ssh-dss
AAAAC3...51R== example.net
permitopen="192.0.2.1:80",permitopen="192.0.2.2:25" ssh-dss
AAAAB5...21S==
tunnel="0",command="sh /etc/netstart tun0" ssh-rsa AAAA...==
jane@@example.net
.Ed
d521 1
a521 1
maintained automatically: whenever the user connects from an unknown host,
d529 1
a529 1
.Pf ( Ql *
d551 1
a551 1
can be obtained, for example, from
d576 6
a581 6
.Pp
An example ssh_known_hosts file:
.Bd -literal -offset 3n
# Comments allowed at start of line
closenet,...,192.0.2.53 1024 37 159...93 closenet.example.net
cvs.example.net,192.0.2.10 ssh-rsa AAAA1234.....=
d587 71
a657 2
.Bl -tag -width Ds -compact
.It ~/.hushlogin
d668 2
a669 8
.Pp
.It ~/.rhosts
This file is used for host-based authentication (see
.Xr ssh 1
for more information).
On some machines this file may need to be
world-readable if the user's home directory is on an NFS partition,
because
d671 21
a691 5
reads it as root.
Additionally, this file must be owned by the user,
and must not have write permissions for anyone else.
The recommended
permission for most machines is read/write for the user, and not
d694 54
a747 13
.It ~/.shosts
This file is used in exactly the same way as
.Pa .rhosts ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
.It ~/.ssh/authorized_keys
Lists the public keys (RSA/DSA) that can be used for logging in as this user.
The format of this file is described above.
This file is not highly sensitive, but the recommended
permissions are read/write for the user, and not accessible by others.
.Pp
.It ~/.ssh/environment
d758 14
a771 36
.Pp
.It ~/.ssh/known_hosts
Contains a list of host keys for all hosts the user has logged into
that are not already in the systemwide list of known host keys.
The format of this file is described above.
This file should be writable only by root/the owner and
can, but need not be, world-readable.
.Pp
.It ~/.ssh/rc
Contains initialization routines to be run before
the user's home directory becomes accessible.
This file should be writable only by the user, and need not be
readable by anyone else.
.Pp
.It /etc/hosts.allow
.It /etc/hosts.deny
Access controls that should be enforced by tcp-wrappers are defined here.
Further details are described in
.Xr hosts_access 5 .
.Pp
.It /etc/hosts.equiv
This file is for host-based authentication (see
.Xr ssh 1 ) .
It should only be writable by root.
.Pp
.It /etc/moduli
Contains Diffie-Hellman groups used for the "Diffie-Hellman Group Exchange".
The file format is described in
.Xr moduli 5 .
.Pp
.It /etc/motd
See
.Xr motd 5 .
.Pp
.It /etc/nologin
If this file exists,
d773 1
a773 5
refuses to let anyone except root log in.
The contents of the file
are displayed to anyone trying to log in, and non-root connections are
refused.
The file should be world-readable.
d775 3
a777 14
.It /etc/shosts.equiv
This file is used in exactly the same way as
.Pa hosts.equiv ,
but allows host-based authentication without permitting login with
rlogin/rsh.
.Pp
.It /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator to contain the public host keys of all machines in the
organization.
The format of this file is described above.
This file should be writable only by root/the owner and
should be world-readable.
d779 14
a792 9
.It /etc/ssh/ssh_host_key
.It /etc/ssh/ssh_host_dsa_key
.It /etc/ssh/ssh_host_rsa_key
These three files contain the private parts of the host keys.
These files should only be owned by root, readable only by root, and not
accessible to others.
Note that
.Nm
does not start if these files are group/world-accessible.
d794 4
a797 12
.It /etc/ssh/ssh_host_key.pub
.It /etc/ssh/ssh_host_dsa_key.pub
.It /etc/ssh/ssh_host_rsa_key.pub
These three files contain the public parts of the host keys.
These files should be world-readable but writable only by
root.
Their contents should match the respective private parts.
These files are not
really used for anything; they are provided for the convenience of
the user so their contents can be copied to known hosts files.
These files are created using
.Xr ssh-keygen 1 .
d799 6
a804 10
.It /etc/ssh/sshd_config
Contains configuration data for
.Nm sshd .
The file format and configuration options are described in
.Xr sshd_config 5 .
.Pp
.It /etc/ssh/sshrc
Similar to
.Pa ~/.ssh/rc ,
it can be used to specify
a806 16
.Pp
.It /var/empty
.Xr chroot 2
directory used by
.Nm
during privilege separation in the pre-authentication phase.
The directory should not contain any files and must be owned by root
and not group or world-writable.
.Pp
.It /var/run/sshd.pid
Contains the process ID of the
.Nm
listening for connections (if there are several daemons running
concurrently for different ports, this contains the process ID of the one
started last).
The content of this file is not sensitive; it can be world-readable.
d822 20
a852 11
.Sh CAVEATS
System security is not improved unless
.Nm rshd ,
.Nm rlogind ,
and
.Nm rexecd
are disabled (thus completely disabling
.Xr rlogin
and
.Xr rsh
into the machine).
@


1.1.1.7
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@d37 1
a37 1
.\" $OpenBSD: sshd.8,v 1.230 2006/02/24 20:31:31 jmc Exp $
d84 1
a84 1
by executing itself with the name and options it was started with, e.g.\&
d157 1
a157 1
However, with small key sizes (e.g. 512) using
d475 9
a483 1
patterns.
a491 6
.Pp
See
.Sx PATTERNS
in
.Xr ssh_config 5
for more information on patterns.
d498 1
a498 1
This might be used, e.g. in connection with the
@


1.1.1.8
log
@import a few security-wise relevant changes right now
@
text
@d37 1
a37 1
.\" $OpenBSD: sshd.8,v 1.234 2006/08/21 08:15:57 dtucker Exp $
a457 3
The command originally supplied by the client is available in the
.Ev SSH_ORIGINAL_COMMAND
environment variable.
a564 7
A hostname or address may optionally be enclosed within
.Ql \&[
and
.Ql \&]
brackets then followed by
.Ql \&:
and a non-standard port number.
d648 1
a648 1
The content of the file is not highly sensitive, but the recommended
a650 14
If this file, the
.Pa ~/.ssh
directory, or the user's home directory are writable
by other users, then the file could be modified or replaced by unauthorized
users.
In this case,
.Nm
will not allow it to be used unless the
.Cm StrictModes
option has been set to
.Dq no .
The recommended permissions can be set by executing
.Dq chmod go-w ~/ ~/.ssh ~/.ssh/authorized_keys .
.Pp
@


1.1.1.9
log
@import openbsd compress, ssh, perl, sendmail for minor bugfixes
@
text
@d37 1
a37 1
.\" $OpenBSD: sshd.8,v 1.235 2007/03/20 15:57:15 jmc Exp $
d61 2
a62 5
Together these programs replace
.Xr rlogin 1
and
.Xr rsh 1 ,
and provide secure encrypted communications between two untrusted hosts
d120 1
a120 1
.It Fl f Ar config_file
d735 9
a766 9
.It /etc/ssh/ssh_known_hosts
Systemwide list of known host keys.
This file should be prepared by the
system administrator to contain the public host keys of all machines in the
organization.
The format of this file is described above.
This file should be writable only by root/the owner and
should be world-readable.
.Pp
a802 1
.Xr ssh-keyscan 1 ,
@


1.1.1.10
log
@Import latest OpenSSH and OpenBSD-libssl
@
text
@d37 2
a38 2
.\" $OpenBSD: sshd.8,v 1.237 2007/06/07 19:37:34 pvalchev Exp $
.Dd $Mdocdate$
d279 1
a279 1
(hmac-md5, hmac-sha1, umac-64 or hmac-ripemd160).
@


1.1.1.11
log
@newer openssh
@
text
@d37 2
a38 2
.\" $OpenBSD: sshd.8,v 1.239 2008/02/11 07:58:28 jmc Exp $
.Dd $Mdocdate: February 11 2008 $
a657 7
.It ~/.ssh/
This directory is the default location for all user-specific configuration
and authentication information.
There is no general requirement to keep the entire contents of this directory
secret, but the recommended permissions are read/write/execute for the user,
and not accessible by others.
.Pp
@


1.1.1.12
log
@OpenSSH 5.0
@
text
@d37 2
a38 2
.\" $OpenBSD: sshd.8,v 1.241 2008/03/27 22:37:57 jmc Exp $
.Dd $Mdocdate: March 27 2008 $
a506 3
.It Cm no-user-rc
Disables execution of
.Pa ~/.ssh/rc .
@


1.1.1.13
log
@OpenSSH-current
@
text
@d37 2
a38 2
.\" $OpenBSD: sshd.8,v 1.247 2008/10/03 13:08:12 jmc Exp $
.Dd $Mdocdate: October 3 2008 $
d47 1
a47 1
.Op Fl 46DdeiqTt
a48 1
.Op Fl C Ar connection_spec
d102 1
a102 19
server key (default 1024).
.It Fl C Ar connection_spec
Specify the connection parameters to use for the
.Fl T
extended test mode.
If provided, any
.Cm Match
directives in the configuration file
that would apply to the specified user, host, and address will be set before
the configuration is written to standard output.
The connection parameters are supplied as keyword=value pairs.
The keywords are
.Dq user ,
.Dq host ,
and
.Dq addr .
All are required and may be supplied in any order, either with multiple
.Fl C
options or as a comma-separated list.
a193 9
.It Fl T
Extended test mode.
Check the validity of the configuration file, output the effective configuration
to stdout and then exit.
Optionally,
.Cm Match
rules may be applied by specifying the connection parameters using one or more
.Fl C
options.
d479 12
a490 3
Specifies that in addition to public key authentication, either the canonical
name of the remote host or its IP address must be present in the
comma-separated list of patterns.
a495 13
.Pp
In addition to the wildcard matching that may be applied to hostnames or
addresses, a
.Cm from
stanza may match IP addressess using CIDR address/masklen notation.
.Pp
The purpose of this option is to optionally increase security: public key
authentication by itself does not trust the network or name servers or
anything (but the key); however, if somebody somehow steals the key, the key
permits an intruder to log in from anywhere in the world.
This additional option makes using a stolen key more difficult (name
servers and/or routers would have to be compromised in addition to
just the key).
d685 2
@


1.1.1.14
log
@Let’s play the version number game – OpenSSH 5.3-current
@
text
@d37 2
a38 2
.\" $OpenBSD: sshd.8,v 1.248 2009/03/26 08:38:39 sobrado Exp $
.Dd $Mdocdate: March 26 2009 $
d519 1
a519 1
stanza may match IP addresses using CIDR address/masklen notation.
@


