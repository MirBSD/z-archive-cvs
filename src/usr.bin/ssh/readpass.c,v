head	1.8;
access;
symbols
	cvs-200910041320:1.1.1.7
	cvs-200903221200:1.1.1.7
	cvs-200812162015:1.1.1.7
	cvs-200804031830:1.1.1.7
	MIRBSD_10:1.6.0.2
	MIRBSD_10_BASE:1.6
	cvs-200803022030:1.1.1.7
	cvs-200709131337:1.1.1.7
	cvs-200709021830:1.1.1.7
	cvs-200708201200:1.1.1.7
	cvs-200706161500:1.1.1.7
	cvs-200705192215:1.1.1.7
	cvs-200704292000:1.1.1.7
	cvs-200703080900:1.1.1.7
	cvs-200701251600:1.1.1.7
	cvs-200612111600:1.1.1.7
	cvs-200611090230:1.1.1.7
	OPENBSD_4_0:1.1.1.7
	MIRBSD_9_BASE:1.5
	cvs-200606162342:1.1.1.6
	cvs-200606022000:1.1.1.5
	cvs-200604191000:1.1.1.5
	cvs-200602220045:1.1.1.4
	MIRBSD_8:1.1.1.3.0.2
	MIRBSD_8_BASE:1.1.1.3
	cvs-200512201942:1.1.1.3
	cvs-200511231930:1.1.1.3
	cvs-200507211800:1.1.1.3
	cvs-200506221550:1.1.1.3
	cvs-200505050030:1.1.1.3
	cvs-200504291700:1.1.1.2
	cvs-200504261445:1.1.1.2
	cvs-200504141900:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2008.12.27.21.17.56;	author tg;	state Exp;
branches;
next	1.7;
commitid	10049569B9439744217;

1.7
date	2008.12.16.22.13.28;	author tg;	state Exp;
branches;
next	1.6;
commitid	10049482819766381ED;

1.6
date	2006.09.20.21.41.01;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004511B578580E7F04;

1.5
date	2006.06.16.23.47.09;	author tg;	state Exp;
branches;
next	1.4;
commitid	100449343131498EA29;

1.4
date	2006.04.19.10.40.51;	author tg;	state Exp;
branches;
next	1.3;
commitid	100444613BD3A91C28B;

1.3
date	2006.02.22.02.16.47;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043FBC991512A442B;

1.2
date	2006.02.22.01.23.50;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043FBBD2C2C5E7D81;

1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.26.14.54.59;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.05.05.00.32.50;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	48e9427969c07d49;

1.1.1.4
date	2006.02.22.00.51.35;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10043FBB5A933C3BB9B;

1.1.1.5
date	2006.04.19.10.15.04;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10044460DB21E1F715C;

1.1.1.6
date	2006.06.16.23.45.13;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	100449342952F660974;

1.1.1.7
date	2006.09.20.19.06.49;	author tg;	state Exp;
branches;
next	;
commitid	10045119150397FC669;


desc
@@


1.8
log
@merge and wrap exec/exit functions better
@
text
@/* $OpenBSD: readpass.c,v 1.47 2006/08/03 03:34:42 deraadt Exp $ */
/*
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/wait.h>

#include <errno.h>
#include <fcntl.h>
#include <paths.h>
#include <readpassphrase.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "xmalloc.h"
#include "misc.h"
#include "pathnames.h"
#include "log.h"
#include "ssh.h"
#include "uidswap.h"

__RCSID("$MirOS: src/usr.bin/ssh/readpass.c,v 1.7 2008/12/16 22:13:28 tg Exp $");

static char *
ssh_askpass(char *askpass, const char *msg)
{
	pid_t pid;
	size_t len;
	char *pass;
	int p[2], status, ret;
	char buf[1024];

	if (fflush(stdout) != 0)
		error("ssh_askpass: fflush: %s", strerror(errno));
	if (askpass == NULL)
		fatal("internal error: askpass undefined");
	if (pipe(p) < 0) {
		error("ssh_askpass: pipe: %s", strerror(errno));
		return NULL;
	}
	if ((pid = fork()) < 0) {
		error("ssh_askpass: fork: %s", strerror(errno));
		return NULL;
	}
	if (pid == 0) {
		permanently_drop_suid(getuid());
		close(p[0]);
		if (dup2(p[1], STDOUT_FILENO) < 0)
			fatal("ssh_askpass: dup2: %s", strerror(errno));
		execlp(askpass, askpass, msg, (char *) 0);
		fatal("ssh_askpass: exec(%s): %s", askpass, strerror(errno));
	}
	close(p[1]);

	len = ret = 0;
	do {
		ret = read(p[0], buf + len, sizeof(buf) - 1 - len);
		if (ret == -1 && errno == EINTR)
			continue;
		if (ret <= 0)
			break;
		len += ret;
	} while (sizeof(buf) - 1 - len > 0);
	buf[len] = '\0';

	close(p[0]);
	while (waitpid(pid, &status, 0) < 0)
		if (errno != EINTR)
			break;

	if (!WIFEXITED(status) || WEXITSTATUS(status) != 0) {
		memset(buf, 0, sizeof(buf));
		return NULL;
	}

	buf[strcspn(buf, "\r\n")] = '\0';
	pass = xstrdup(buf);
	memset(buf, 0, sizeof(buf));
	return pass;
}

/*
 * Reads a passphrase from /dev/tty with echo turned off/on.  Returns the
 * passphrase (allocated with xmalloc).  Exits if EOF is encountered. If
 * RP_ALLOW_STDIN is set, the passphrase will be read from stdin if no
 * tty is available
 */
char *
read_passphrase(const char *prompt, int flags)
{
	char *askpass = NULL, *ret, buf[1024];
	int rppflags, use_askpass = 0, ttyfd;

	rppflags = (flags & RP_ECHO) ? RPP_ECHO_ON : RPP_ECHO_OFF;
	if (flags & RP_USE_ASKPASS)
		use_askpass = 1;
	else if (flags & RP_ALLOW_STDIN) {
		if (!isatty(STDIN_FILENO)) {
			debug("read_passphrase: stdin is not a tty");
			use_askpass = 1;
		}
	} else {
		rppflags |= RPP_REQUIRE_TTY;
		ttyfd = open(_PATH_TTY, O_RDWR);
		if (ttyfd >= 0)
			close(ttyfd);
		else {
			debug("read_passphrase: can't open %s: %s", _PATH_TTY,
			    strerror(errno));
			use_askpass = 1;
		}
	}

	if ((flags & RP_USE_ASKPASS) && getenv("DISPLAY") == NULL)
		return (flags & RP_ALLOW_EOF) ? NULL : xstrdup("");

	if (use_askpass && getenv("DISPLAY")) {
		if (getenv(SSH_ASKPASS_ENV))
			askpass = getenv(SSH_ASKPASS_ENV);
		else
			askpass = (char *)_PATH_SSH_ASKPASS_DEFAULT;
		if ((ret = ssh_askpass(askpass, prompt)) == NULL)
			if (!(flags & RP_ALLOW_EOF))
				return xstrdup("");
		return ret;
	}

	if (readpassphrase(prompt, buf, sizeof buf, rppflags) == NULL) {
		if (flags & RP_ALLOW_EOF)
			return NULL;
		return xstrdup("");
	}

	ret = xstrdup(buf);
	memset(buf, 'x', sizeof buf);
	return ret;
}

int
ask_permission(const char *fmt, ...)
{
	va_list args;
	char *p, prompt[1024];
	int allowed = 0;

	va_start(args, fmt);
	vsnprintf(prompt, sizeof(prompt), fmt, args);
	va_end(args);

	p = read_passphrase(prompt, RP_USE_ASKPASS|RP_ALLOW_EOF);
	if (p != NULL) {
		/*
		 * Accept empty responses and responses consisting
		 * of the word "yes" as affirmative.
		 */
		if (*p == '\0' || *p == '\n' ||
		    strcasecmp(p, "yes") == 0)
			allowed = 1;
		xfree(p);
	}

	return (allowed);
}
@


1.7
log
@really merge OpenSSH-current into MirBSD Secure SHell 10uA4
@
text
@d46 1
a46 1
__RCSID("$MirOS: src/usr.bin/ssh/readpass.c,v 1.6 2006/09/20 21:41:01 tg Exp $");
a73 1
		arc4_preexec();
@


1.6
log
@finish merging
@
text
@d46 1
a46 1
__RCSID("$MirOS$");
d74 1
@


1.5
log
@fastmerge, bump vsn
@
text
@d1 1
a1 1
/* $OpenBSD: readpass.c,v 1.39 2006/06/08 14:45:49 markus Exp $ */
d26 1
a26 3
#include "includes.h"
__RCSID("$MirOS: src/usr.bin/ssh/readpass.c,v 1.4 2006/04/19 10:40:51 tg Exp $");

d29 2
d33 5
d46 2
@


1.4
log
@merge and clean up
@
text
@d1 1
a1 1
/* $OpenBSD: readpass.c,v 1.37 2006/03/25 13:17:02 djm Exp $ */
d27 1
a27 1
__RCSID("$MirOS: src/usr.bin/ssh/readpass.c,v 1.3 2006/02/22 02:16:47 tg Exp $");
d39 1
d63 1
a63 2
		seteuid(getuid());
		setuid(getuid());
@


1.3
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 1
d27 1
a27 1
RCSID("$MirOS: readpass.c,v 1.35 2006/02/10 01:44:26 stevesk Exp $");
@


1.2
log
@merge; bump version; fix up manpages and includes a little
@
text
@d26 1
a26 1
RCSID("$OpenBSD: readpass.c,v 1.35 2006/02/10 01:44:26 stevesk Exp $");
d137 1
a137 1
			askpass = _PATH_SSH_ASKPASS_DEFAULT;
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
RCSID("$OpenBSD: readpass.c,v 1.31 2004/10/29 22:53:56 djm Exp $");
d28 3
d114 2
a115 1
		if (!isatty(STDIN_FILENO))
d117 1
d123 3
a125 1
		else
d127 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@latest fixes from OpenBSD, last update for #8 if nothing weird happens
@
text
@d26 1
a26 1
RCSID("$OpenBSD: readpass.c,v 1.32 2005/04/23 23:43:47 dtucker Exp $");
a111 1
			debug("read_passphrase: stdin is not a tty");
d118 1
a118 3
		else {
			debug("read_passphrase: can't open %s: %s", _PATH_TTY,
			    strerror(errno));
a119 1
		}
@


1.1.1.3
log
@latest fixes
@
text
@d26 1
a26 1
RCSID("$OpenBSD: readpass.c,v 1.33 2005/05/02 21:13:22 markus Exp $");
d111 1
a111 1
		if (!isatty(STDIN_FILENO)) {
a113 1
		}
@


1.1.1.4
log
@import OpenSSH-current
@
text
@d26 1
a26 1
RCSID("$OpenBSD: readpass.c,v 1.35 2006/02/10 01:44:26 stevesk Exp $");
a27 4
#include <sys/types.h>
#include <sys/wait.h>

#include <paths.h>
@


1.1.1.5
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@a0 1
/* $OpenBSD: readpass.c,v 1.37 2006/03/25 13:17:02 djm Exp $ */
d26 1
@


1.1.1.6
log
@Import latest OpenSSH, contains coverity fixes etc.
@
text
@d1 1
a1 1
/* $OpenBSD: readpass.c,v 1.39 2006/06/08 14:45:49 markus Exp $ */
a38 1
#include "uidswap.h"
d62 2
a63 1
		permanently_drop_suid(getuid());
@


1.1.1.7
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: readpass.c,v 1.47 2006/08/03 03:34:42 deraadt Exp $ */
d26 2
a30 2
#include <errno.h>
#include <fcntl.h>
a32 5
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
@


