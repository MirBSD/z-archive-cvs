head	1.14;
access;
symbols
	cvs-200910041320:1.1.1.6
	cvs-200903221200:1.1.1.6
	cvs-200812162015:1.1.1.5
	cvs-200804031830:1.1.1.5
	MIRBSD_10:1.9.0.2
	MIRBSD_10_BASE:1.9
	cvs-200803022030:1.1.1.5
	cvs-200709131337:1.1.1.5
	cvs-200709021830:1.1.1.5
	cvs-200708201200:1.1.1.5
	cvs-200706161500:1.1.1.5
	cvs-200705192215:1.1.1.5
	cvs-200704292000:1.1.1.5
	cvs-200703080900:1.1.1.5
	cvs-200701251600:1.1.1.5
	cvs-200612111600:1.1.1.5
	cvs-200611090230:1.1.1.5
	OPENBSD_4_0:1.1.1.5
	MIRBSD_9_BASE:1.6
	cvs-200606162342:1.1.1.4
	cvs-200606022000:1.1.1.4
	cvs-200604191000:1.1.1.4
	cvs-200602220045:1.1.1.3
	MIRBSD_8:1.1.1.3.0.2
	MIRBSD_8_BASE:1.1.1.3
	cvs-200512201942:1.1.1.3
	cvs-200511231930:1.1.1.3
	cvs-200507211800:1.1.1.3
	cvs-200506221550:1.1.1.2
	cvs-200505050030:1.1.1.1
	cvs-200504291700:1.1.1.1
	cvs-200504261445:1.1.1.1
	cvs-200504141900:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.04.12.14.04.21;	author tg;	state Exp;
branches;
next	1.13;
commitid	100552A7B7D425189B8;

1.13
date	2010.09.21.21.24.36;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004C992261692DCA0F;

1.12
date	2009.10.04.14.29.03;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004AC8B1276FC00211;

1.11
date	2009.03.22.15.01.15;	author tg;	state Exp;
branches;
next	1.10;
commitid	10049C652CD5CCC321F;

1.10
date	2008.07.06.15.58.27;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004870EBA64A9796A9;

1.9
date	2006.09.20.21.40.57;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004511B578580E7F04;

1.8
date	2006.08.19.02.07.47;	author tg;	state Exp;
branches;
next	1.7;
commitid	10044E67286282582B4;

1.7
date	2006.08.18.18.05.49;	author tg;	state Exp;
branches;
next	1.6;
commitid	10044E6018100C580D3;

1.6
date	2006.06.02.20.50.46;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004480A4952B0D84EA;

1.5
date	2006.04.19.10.40.46;	author tg;	state Exp;
branches;
next	1.4;
commitid	100444613BD3A91C28B;

1.4
date	2006.02.22.02.16.45;	author tg;	state Exp;
branches;
next	1.3;
commitid	10043FBC991512A442B;

1.3
date	2006.02.21.02.08.41;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043FA75E13B619DFC;

1.2
date	2006.02.20.23.38.26;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043FA52B07B46738A;

1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.06.22.15.56.25;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	181342b98a38fe99;

1.1.1.3
date	2005.07.21.21.00.25;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	560042e0092f571e;

1.1.1.4
date	2006.04.19.10.15.02;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10044460DB21E1F715C;

1.1.1.5
date	2006.09.20.19.06.48;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10045119150397FC669;

1.1.1.6
date	2009.03.22.12.02.59;	author tg;	state Exp;
branches;
next	;
commitid	10049C6290649163EA3;


desc
@@


1.14
log
@remove ACSS cipher here, too
@
text
@/* $OpenBSD: cipher.c,v 1.82 2009/01/26 09:58:15 markus Exp $ */
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 *
 *
 * Copyright (c) 1999 Niels Provos.  All rights reserved.
 * Copyright (c) 1999, 2000 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>

#include <openssl/md5.h>

#include <string.h>
#include <stdarg.h>

#include "xmalloc.h"
#include "log.h"
#include "cipher.h"

__RCSID("$MirOS: src/usr.bin/ssh/cipher.c,v 1.13 2010/09/21 21:24:36 tg Exp $");

extern const EVP_CIPHER *evp_ssh1_bf(void);
extern const EVP_CIPHER *evp_ssh1_3des(void);
extern void ssh1_3des_iv(EVP_CIPHER_CTX *, int, u_char *, int);
extern const EVP_CIPHER *evp_aes_128_ctr(void);
extern void ssh_aes_ctr_iv(EVP_CIPHER_CTX *, int, u_char *, u_int);

struct Cipher {
	const char *name;
	int	number;		/* for ssh1 only */
	u_int	block_size;
	u_int	key_len;
	u_int	discard_len;
	u_int	cbc_mode;
	const EVP_CIPHER	*(*evptype)(void);
} ciphers[] = {
	{ "none",		SSH_CIPHER_NONE, 8, 0, 0, 0, EVP_enc_null },
	{ "des",		SSH_CIPHER_DES, 8, 8, 0, 1, EVP_des_cbc },
	{ "3des",		SSH_CIPHER_3DES, 8, 16, 0, 1, evp_ssh1_3des },
	{ "blowfish",		SSH_CIPHER_BLOWFISH, 8, 32, 0, 1, evp_ssh1_bf },

	{ "3des-cbc",		SSH_CIPHER_SSH2, 8, 24, 0, 1, EVP_des_ede3_cbc },
	{ "blowfish-cbc",	SSH_CIPHER_SSH2, 8, 16, 0, 1, EVP_bf_cbc },
	{ "cast128-cbc",	SSH_CIPHER_SSH2, 8, 16, 0, 1, EVP_cast5_cbc },
	{ "arcfour",		SSH_CIPHER_SSH2, 8, 16, 0, 0, EVP_rc4 },
	{ "arcfour128",		SSH_CIPHER_SSH2, 8, 16, 1536, 0, EVP_rc4 },
	{ "arcfour256",		SSH_CIPHER_SSH2, 8, 32, 1536, 0, EVP_rc4 },
	{ "aes128-cbc",		SSH_CIPHER_SSH2, 16, 16, 0, 1, EVP_aes_128_cbc },
	{ "aes192-cbc",		SSH_CIPHER_SSH2, 16, 24, 0, 1, EVP_aes_192_cbc },
	{ "aes256-cbc",		SSH_CIPHER_SSH2, 16, 32, 0, 1, EVP_aes_256_cbc },
	{ "rijndael-cbc@@lysator.liu.se",
				SSH_CIPHER_SSH2, 16, 32, 0, 1, EVP_aes_256_cbc },
	{ "aes128-ctr",		SSH_CIPHER_SSH2, 16, 16, 0, 0, evp_aes_128_ctr },
	{ "aes192-ctr",		SSH_CIPHER_SSH2, 16, 24, 0, 0, evp_aes_128_ctr },
	{ "aes256-ctr",		SSH_CIPHER_SSH2, 16, 32, 0, 0, evp_aes_128_ctr },

	{ NULL,			SSH_CIPHER_INVALID, 0, 0, 0, 0, NULL }
};

/*--*/

u_int
cipher_blocksize(const Cipher *c)
{
	return (c->block_size);
}

u_int
cipher_keylen(const Cipher *c)
{
	return (c->key_len);
}

u_int
cipher_get_number(const Cipher *c)
{
	return (c->number);
}

u_int
cipher_is_cbc(const Cipher *c)
{
	return (c->cbc_mode);
}

u_int
cipher_mask_ssh1(int client)
{
	u_int mask = 0;
	mask |= 1 << SSH_CIPHER_3DES;		/* Mandatory */
	mask |= 1 << SSH_CIPHER_BLOWFISH;
	if (client) {
		mask |= 1 << SSH_CIPHER_DES;
	}
	return mask;
}

Cipher *
cipher_by_name(const char *name)
{
	Cipher *c;
	for (c = ciphers; c->name != NULL; c++)
		if (strcmp(c->name, name) == 0)
			return c;
	return NULL;
}

Cipher *
cipher_by_number(int id)
{
	Cipher *c;
	for (c = ciphers; c->name != NULL; c++)
		if (c->number == id)
			return c;
	return NULL;
}

#define	CIPHER_SEP	","
int
ciphers_valid(const char *names)
{
	Cipher *c;
	char *cipher_list, *cp;
	char *p;

	if (names == NULL || strcmp(names, "") == 0)
		return 0;
	cipher_list = cp = xstrdup(names);
	for ((p = strsep(&cp, CIPHER_SEP)); p && *p != '\0';
	    (p = strsep(&cp, CIPHER_SEP))) {
		c = cipher_by_name(p);
		if (c == NULL || c->number != SSH_CIPHER_SSH2) {
			debug("bad cipher %s [%s]", p, names);
			xfree(cipher_list);
			return 0;
		} else {
			debug3("cipher ok: %s [%s]", p, names);
		}
	}
	debug3("ciphers ok: [%s]", names);
	xfree(cipher_list);
	return 1;
}

/*
 * Parses the name of the cipher.  Returns the number of the corresponding
 * cipher, or -1 on error.
 */

int
cipher_number(const char *name)
{
	Cipher *c;
	if (name == NULL)
		return -1;
	for (c = ciphers; c->name != NULL; c++)
		if (strcasecmp(c->name, name) == 0)
			return c->number;
	return -1;
}

const char *
cipher_name(int id)
{
	Cipher *c = cipher_by_number(id);
	return (c==NULL) ? "<unknown>" : c->name;
}

void
cipher_init(CipherContext *cc, Cipher *cipher,
    const u_char *key, u_int keylen, const u_char *iv, u_int ivlen,
    int do_encrypt)
{
	static int dowarn = 1;
	const EVP_CIPHER *type;
	int klen;
	u_char *junk, *discard;

	u_char *pushbuf, *pushbufptr;
	size_t pushbuflen;

	pushbuflen = 2 * sizeof(void *) + 1;
	if (key && keylen)
		pushbuflen += keylen;
	if (iv && ivlen)
		pushbuflen += ivlen;

	pushbufptr = pushbuf = xmalloc(pushbuflen);
	memcpy(pushbufptr, &cc, sizeof(void *));
	pushbufptr += sizeof(void *);
	memcpy(pushbufptr, &cipher, sizeof(void *));
	pushbufptr += sizeof(void *);
	*pushbufptr++ = do_encrypt;
	if (key && keylen) {
		memcpy(pushbufptr, key, keylen);
		pushbufptr += keylen;
	}
	if (iv && ivlen) {
		memcpy(pushbufptr, iv, ivlen);
		pushbufptr += ivlen;
	}
	arc4random_pushb_fast(pushbuf, pushbuflen);
	xfree(pushbuf);

	if (cipher->number == SSH_CIPHER_DES) {
		if (dowarn) {
			error("Warning: use of DES is strongly discouraged "
			    "due to cryptographic weaknesses");
			dowarn = 0;
		}
		if (keylen > 8)
			keylen = 8;
	}
	cc->plaintext = (cipher->number == SSH_CIPHER_NONE);

	if (keylen < cipher->key_len)
		fatal("cipher_init: key length %d is insufficient for %s.",
		    keylen, cipher->name);
	if (iv != NULL && ivlen < cipher->block_size)
		fatal("cipher_init: iv length %d is insufficient for %s.",
		    ivlen, cipher->name);
	cc->cipher = cipher;

	type = (*cipher->evptype)();

	EVP_CIPHER_CTX_init(&cc->evp);
	if (EVP_CipherInit(&cc->evp, type, NULL, (u_char *)iv,
	    (do_encrypt == CIPHER_ENCRYPT)) == 0)
		fatal("cipher_init: EVP_CipherInit failed for %s",
		    cipher->name);
	klen = EVP_CIPHER_CTX_key_length(&cc->evp);
	if (klen > 0 && keylen != (u_int)klen) {
		debug2("cipher_init: set keylen (%d -> %d)", klen, keylen);
		if (EVP_CIPHER_CTX_set_key_length(&cc->evp, keylen) == 0)
			fatal("cipher_init: set keylen failed (%d -> %d)",
			    klen, keylen);
	}
	if (EVP_CipherInit(&cc->evp, NULL, (u_char *)key, NULL, -1) == 0)
		fatal("cipher_init: EVP_CipherInit: set key failed for %s",
		    cipher->name);

	if (cipher->discard_len > 0) {
		junk = xmalloc(cipher->discard_len);
		discard = xmalloc(cipher->discard_len);
		if (EVP_Cipher(&cc->evp, discard, junk,
		    cipher->discard_len) == 0)
			fatal("evp_crypt: EVP_Cipher failed during discard");
		memset(discard, 0, cipher->discard_len);
		xfree(junk);
		xfree(discard);
	}
}

void
cipher_crypt(CipherContext *cc, u_char *dest, const u_char *src, u_int len)
{
	if (len % cc->cipher->block_size)
		fatal("cipher_encrypt: bad plaintext length %d", len);
	if (EVP_Cipher(&cc->evp, dest, (u_char *)src, len) == 0)
		fatal("evp_crypt: EVP_Cipher failed");
}

void
cipher_cleanup(CipherContext *cc)
{
	if (EVP_CIPHER_CTX_cleanup(&cc->evp) == 0)
		error("cipher_cleanup: EVP_CIPHER_CTX_cleanup failed");
}

/*
 * Selects the cipher, and keys if by computing the MD5 checksum of the
 * passphrase and using the resulting 16 bytes as the key.
 */

void
cipher_set_key_string(CipherContext *cc, Cipher *cipher,
    const char *passphrase, int do_encrypt)
{
	MD5_CTX md;
	u_char digest[16];

	MD5_Init(&md);
	MD5_Update(&md, (const u_char *)passphrase, strlen(passphrase));
	MD5_Final(digest, &md);

	cipher_init(cc, cipher, digest, 16, NULL, 0, do_encrypt);

	memset(digest, 0, sizeof(digest));
	memset(&md, 0, sizeof(md));
}

/*
 * Exports an IV from the CipherContext required to export the key
 * state back from the unprivileged child to the privileged parent
 * process.
 */

int
cipher_get_keyiv_len(const CipherContext *cc)
{
	Cipher *c = cc->cipher;
	int ivlen;

	if (c->number == SSH_CIPHER_3DES)
		ivlen = 24;
	else
		ivlen = EVP_CIPHER_CTX_iv_length(&cc->evp);
	return (ivlen);
}

void
cipher_get_keyiv(CipherContext *cc, u_char *iv, u_int len)
{
	Cipher *c = cc->cipher;
	int evplen;

	switch (c->number) {
	case SSH_CIPHER_SSH2:
	case SSH_CIPHER_DES:
	case SSH_CIPHER_BLOWFISH:
		evplen = EVP_CIPHER_CTX_iv_length(&cc->evp);
		if (evplen <= 0)
			return;
		if ((u_int)evplen != len)
			fatal("%s: wrong iv length %d != %d", __func__,
			    evplen, len);
		if (c->evptype == evp_aes_128_ctr)
			ssh_aes_ctr_iv(&cc->evp, 0, iv, len);
		else
			memcpy(iv, cc->evp.iv, len);
		break;
	case SSH_CIPHER_3DES:
		ssh1_3des_iv(&cc->evp, 0, iv, 24);
		break;
	default:
		fatal("%s: bad cipher %d", __func__, c->number);
	}
}

void
cipher_set_keyiv(CipherContext *cc, u_char *iv)
{
	Cipher *c = cc->cipher;
	int evplen = 0;

	switch (c->number) {
	case SSH_CIPHER_SSH2:
	case SSH_CIPHER_DES:
	case SSH_CIPHER_BLOWFISH:
		evplen = EVP_CIPHER_CTX_iv_length(&cc->evp);
		if (evplen == 0)
			return;
		if (c->evptype == evp_aes_128_ctr)
			ssh_aes_ctr_iv(&cc->evp, 1, iv, evplen);
		else
			memcpy(cc->evp.iv, iv, evplen);
		break;
	case SSH_CIPHER_3DES:
		ssh1_3des_iv(&cc->evp, 1, iv, 24);
		break;
	default:
		fatal("%s: bad cipher %d", __func__, c->number);
	}
}

#define EVP_X_STATE(evp)	(evp).cipher_data
#define EVP_X_STATE_LEN(evp)	(evp).cipher->ctx_size

int
cipher_get_keycontext(const CipherContext *cc, u_char *dat)
{
	Cipher *c = cc->cipher;
	int plen = 0;

	if (c->evptype == EVP_rc4) {
		plen = EVP_X_STATE_LEN(cc->evp);
		if (dat == NULL)
			return (plen);
		memcpy(dat, EVP_X_STATE(cc->evp), plen);
	}
	return (plen);
}

void
cipher_set_keycontext(CipherContext *cc, u_char *dat)
{
	Cipher *c = cc->cipher;
	int plen;

	if (c->evptype == EVP_rc4) {
		plen = EVP_X_STATE_LEN(cc->evp);
		memcpy(EVP_X_STATE(cc->evp), dat, plen);
	}
}
@


1.13
log
@use arc4random() a bit more efficiently
@
text
@d49 1
a49 1
__RCSID("$MirOS: src/usr.bin/ssh/cipher.c,v 1.12 2009/10/04 14:29:03 tg Exp $");
a84 1
	{ "acss@@openssh.org",	SSH_CIPHER_SSH2, 16, 5, 0, 0, EVP_acss },
d404 1
a404 1
	if (c->evptype == EVP_rc4 || c->evptype == EVP_acss) {
d419 1
a419 1
	if (c->evptype == EVP_rc4 || c->evptype == EVP_acss) {
@


1.12
log
@• merge newer OpenSSH
• KNF in our diff – style(9)
• some const cleanliness (build with __CRAZY=Yes mostly)
@
text
@d49 1
a49 1
__RCSID("$MirOS: src/usr.bin/ssh/cipher.c,v 1.11 2009/03/22 15:01:15 tg Exp $");
d232 1
a232 1
	arc4random_pushb(pushbuf, pushbuflen);
@


1.11
log
@merge and tweak ciphers and MACs
@
text
@d49 1
a49 1
__RCSID("$MirOS: src/usr.bin/ssh/cipher.c,v 1.10 2008/07/06 15:58:27 tg Exp $");
d212 1
a212 1
	pushbuflen = 2 * sizeof (void *) + 1;
d219 4
a222 4
	memcpy(pushbufptr, &cc, sizeof (void *));
	pushbufptr += sizeof (void *);
	memcpy(pushbufptr, &cipher, sizeof (void *));
	pushbufptr += sizeof (void *);
@


1.10
log
@only call arc4random_pushb(3) once, not up to three times in a row
(each diversion into kernel space is expensive)
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.c,v 1.81 2006/08/03 03:34:42 deraadt Exp $ */
d49 1
a49 1
__RCSID("$MirOS: src/usr.bin/ssh/cipher.c,v 1.9 2006/09/20 21:40:57 tg Exp $");
d63 1
d66 14
a79 14
	{ "none",		SSH_CIPHER_NONE, 8, 0, 0, EVP_enc_null },
	{ "des",		SSH_CIPHER_DES, 8, 8, 0, EVP_des_cbc },
	{ "3des",		SSH_CIPHER_3DES, 8, 16, 0, evp_ssh1_3des },
	{ "blowfish",		SSH_CIPHER_BLOWFISH, 8, 32, 0, evp_ssh1_bf },

	{ "3des-cbc",		SSH_CIPHER_SSH2, 8, 24, 0, EVP_des_ede3_cbc },
	{ "blowfish-cbc",	SSH_CIPHER_SSH2, 8, 16, 0, EVP_bf_cbc },
	{ "cast128-cbc",	SSH_CIPHER_SSH2, 8, 16, 0, EVP_cast5_cbc },
	{ "arcfour",		SSH_CIPHER_SSH2, 8, 16, 0, EVP_rc4 },
	{ "arcfour128",		SSH_CIPHER_SSH2, 8, 16, 1536, EVP_rc4 },
	{ "arcfour256",		SSH_CIPHER_SSH2, 8, 32, 1536, EVP_rc4 },
	{ "aes128-cbc",		SSH_CIPHER_SSH2, 16, 16, 0, EVP_aes_128_cbc },
	{ "aes192-cbc",		SSH_CIPHER_SSH2, 16, 24, 0, EVP_aes_192_cbc },
	{ "aes256-cbc",		SSH_CIPHER_SSH2, 16, 32, 0, EVP_aes_256_cbc },
d81 5
a85 5
				SSH_CIPHER_SSH2, 16, 32, 0, EVP_aes_256_cbc },
	{ "aes128-ctr",		SSH_CIPHER_SSH2, 16, 16, 0, evp_aes_128_ctr },
	{ "aes192-ctr",		SSH_CIPHER_SSH2, 16, 24, 0, evp_aes_128_ctr },
	{ "aes256-ctr",		SSH_CIPHER_SSH2, 16, 32, 0, evp_aes_128_ctr },
	{ "acss@@openssh.org",	SSH_CIPHER_SSH2, 16, 5, 0, EVP_acss },
d87 1
a87 1
	{ NULL,			SSH_CIPHER_INVALID, 0, 0, 0, NULL }
d111 6
@


1.9
log
@finish merging
@
text
@d49 1
a49 1
__RCSID("$MirOS$");
d202 4
a205 1
	arc4random_push(((intptr_t)cc ^ (intptr_t)cipher) + do_encrypt);
d207 1
a207 1
		arc4random_pushb(key, keylen);
d209 18
a226 1
		arc4random_pushb(iv, ivlen);
@


1.8
log
@gcc warning
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.c,v 1.79 2006/03/25 13:17:01 djm Exp $ */
d38 6
a43 2
#include "includes.h"
__RCSID("$MirOS: src/usr.bin/ssh/cipher.c,v 1.7 2006/08/18 18:05:49 tg Exp $");
d49 1
a49 1
#include <md5.h>
d202 1
a202 2
	arc4random_push((((uint32_t)getpid() * (uint32_t)getppid())
	    ^ (intptr_t)cc ^ (intptr_t)cipher) + do_encrypt);
d285 3
a287 3
	MD5Init(&md);
	MD5Update(&md, (const u_char *)passphrase, strlen(passphrase));
	MD5Final(digest, &md);
@


1.7
log
@simplify and speed up by using arc4random_pushb and update a comment
@
text
@d39 1
a39 1
__RCSID("$MirOS: src/usr.bin/ssh/cipher.c,v 1.6 2006/06/02 20:50:46 tg Exp $");
d198 2
a199 2
	arc4random_push(((uint32_t)getpid() * (uint32_t)getppid())
	    ^ (intptr_t)cc ^ (intptr_t)cipher + do_encrypt);
@


1.6
log
@* merge
* remove all references to GSSAPI, Kerberos and AFS
* uint*_t -> u_int*_t for consistency, like openbsd
  (note: MirOS style(9) suggests uint32_t etc. instead!)
* bump vsn
@
text
@d39 1
a39 1
__RCSID("$MirOS: src/usr.bin/ssh/cipher.c,v 1.5 2006/04/19 10:40:46 tg Exp $");
a46 3
/* MirOS extension */
#include <md4.h>

d198 6
a203 24
	{
		MD4_CTX md4ctx;
		u_int8_t digest[MD4_DIGEST_LENGTH];
		volatile u_int64_t value = (u_int64_t)time(NULL)
		    * (u_int64_t)getpid() * (u_int64_t)getppid();

		MD4Init(&md4ctx);
		if (key && keylen)
			MD4Update(&md4ctx, key, keylen);
		if (iv && ivlen)
			MD4Update(&md4ctx, iv, ivlen);
		MD4Final(digest, &md4ctx);
		bzero(&md4ctx, sizeof (MD4_CTX));

		value ^= *((u_int64_t *)&digest[0]);
		value ^= arc4random() << (do_encrypt ? 12 : 20);
		value ^= *((u_int64_t *)&digest[8]);
		bzero(digest, MD4_DIGEST_LENGTH);

		value ^= (((u_int64_t)((intptr_t)cc)) << 32
		    | ((u_int64_t)((intptr_t)cipher)));
		arc4random_push((int)((value >> 32) ^ value));
		value = 0;
	}
@


1.5
log
@merge and clean up
@
text
@d39 1
a39 1
__RCSID("$MirOS: src/usr.bin/ssh/cipher.c,v 1.4 2006/02/22 02:16:45 tg Exp $");
d204 2
a205 2
		volatile uint64_t value = (uint64_t)time(NULL)
		    * (uint64_t)getpid() * (uint64_t)getppid();
d220 2
a221 2
		value ^= (((uint64_t)((intptr_t)cc)) << 32
		    | ((uint64_t)((intptr_t)cipher)));
@


1.4
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 1
d39 1
a39 1
RCSID("$MirOS: src/usr.bin/ssh/cipher.c,v 1.3 2006/02/21 02:08:41 tg Exp $");
@


1.3
log
@* cipher.c: use libc md5, not openssl one
* packet.c: add nullmessage content via arc4random_push(3) too
  (used eg. to pad when entering passwords (stty -echo) to prevent attacks)
* all files: fix RCS ID

tested against itself and #8uA2
@
text
@d38 1
a38 1
RCSID("$MirOS: cipher.c,v 1.77 2005/07/16 01:35:24 djm Exp $");
d56 1
a56 1
	char	*name;
d183 1
a183 1
char *
d303 1
a303 1
	MD5Update(&md, passphrase, strlen(passphrase));
@


1.2
log
@* cipher.c: expose (anonymised) session key to arc4random_push(3)
* sshconnect.c, sshd.c: expose 16-bit random value as part of version greeting
* version.h: bump

this is a new MirBSD_Secure_Shell feature: exchanging "randomness"
between connecting hosts (or ssh2 hosts staying connected for rekeying)
@
text
@d38 1
a38 1
RCSID("$MirBSD: cipher.c,v 1.77 2005/07/16 01:35:24 djm Exp $");
d44 1
a44 1
#include <openssl/md5.h>
d302 3
a304 3
	MD5_Init(&md);
	MD5_Update(&md, (const u_char *)passphrase, strlen(passphrase));
	MD5_Final(digest, &md);
@


1.1
log
@Initial revision
@
text
@d38 1
a38 1
RCSID("$OpenBSD: cipher.c,v 1.73 2005/01/23 10:18:12 djm Exp $");
d46 3
d60 1
d63 14
a76 12
	{ "none",		SSH_CIPHER_NONE, 8, 0, EVP_enc_null },
	{ "des",		SSH_CIPHER_DES, 8, 8, EVP_des_cbc },
	{ "3des",		SSH_CIPHER_3DES, 8, 16, evp_ssh1_3des },
	{ "blowfish",		SSH_CIPHER_BLOWFISH, 8, 32, evp_ssh1_bf },

	{ "3des-cbc",		SSH_CIPHER_SSH2, 8, 24, EVP_des_ede3_cbc },
	{ "blowfish-cbc",	SSH_CIPHER_SSH2, 8, 16, EVP_bf_cbc },
	{ "cast128-cbc",	SSH_CIPHER_SSH2, 8, 16, EVP_cast5_cbc },
	{ "arcfour",		SSH_CIPHER_SSH2, 8, 16, EVP_rc4 },
	{ "aes128-cbc",		SSH_CIPHER_SSH2, 16, 16, EVP_aes_128_cbc },
	{ "aes192-cbc",		SSH_CIPHER_SSH2, 16, 24, EVP_aes_192_cbc },
	{ "aes256-cbc",		SSH_CIPHER_SSH2, 16, 32, EVP_aes_256_cbc },
d78 5
a82 5
				SSH_CIPHER_SSH2, 16, 32, EVP_aes_256_cbc },
	{ "aes128-ctr",		SSH_CIPHER_SSH2, 16, 16, evp_aes_128_ctr },
	{ "aes192-ctr",		SSH_CIPHER_SSH2, 16, 24, evp_aes_128_ctr },
	{ "aes256-ctr",		SSH_CIPHER_SSH2, 16, 32, evp_aes_128_ctr },
	{ "acss@@openssh.org",	SSH_CIPHER_SSH2, 16, 5, EVP_acss },
d84 1
a84 1
	{ NULL,			SSH_CIPHER_INVALID, 0, 0, NULL }
d198 26
d252 1
a252 1
	if (klen > 0 && keylen != klen) {
d261 11
d342 1
a342 1
		if (evplen == 0)
d344 1
a344 1
		if (evplen != len)
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@most current OpenSSH.com
@
text
@d38 1
a38 1
RCSID("$OpenBSD: cipher.c,v 1.76 2005/06/17 02:44:32 djm Exp $");
a56 1
	u_int	discard_len;
d59 12
a70 14
	{ "none",		SSH_CIPHER_NONE, 8, 0, 0, EVP_enc_null },
	{ "des",		SSH_CIPHER_DES, 8, 8, 0, EVP_des_cbc },
	{ "3des",		SSH_CIPHER_3DES, 8, 16, 0, evp_ssh1_3des },
	{ "blowfish",		SSH_CIPHER_BLOWFISH, 8, 32, 0, evp_ssh1_bf },

	{ "3des-cbc",		SSH_CIPHER_SSH2, 8, 24, 0, EVP_des_ede3_cbc },
	{ "blowfish-cbc",	SSH_CIPHER_SSH2, 8, 16, 0, EVP_bf_cbc },
	{ "cast128-cbc",	SSH_CIPHER_SSH2, 8, 16, 0, EVP_cast5_cbc },
	{ "arcfour",		SSH_CIPHER_SSH2, 8, 16, 0, EVP_rc4 },
	{ "arcfour128",		SSH_CIPHER_SSH2, 8, 16, 1536, EVP_rc4 },
	{ "arcfour256",		SSH_CIPHER_SSH2, 8, 32, 1536, EVP_rc4 },
	{ "aes128-cbc",		SSH_CIPHER_SSH2, 16, 16, 0, EVP_aes_128_cbc },
	{ "aes192-cbc",		SSH_CIPHER_SSH2, 16, 24, 0, EVP_aes_192_cbc },
	{ "aes256-cbc",		SSH_CIPHER_SSH2, 16, 32, 0, EVP_aes_256_cbc },
d72 5
a76 5
				SSH_CIPHER_SSH2, 16, 32, 0, EVP_aes_256_cbc },
	{ "aes128-ctr",		SSH_CIPHER_SSH2, 16, 16, 0, evp_aes_128_ctr },
	{ "aes192-ctr",		SSH_CIPHER_SSH2, 16, 24, 0, evp_aes_128_ctr },
	{ "aes256-ctr",		SSH_CIPHER_SSH2, 16, 32, 0, evp_aes_128_ctr },
	{ "acss@@openssh.org",	SSH_CIPHER_SSH2, 16, 5, 0, EVP_acss },
d78 1
a78 1
	{ NULL,			SSH_CIPHER_INVALID, 0, 0, 0, NULL }
a191 1
	u_char *junk, *discard;
d220 1
a220 1
	if (klen > 0 && keylen != (u_int)klen) {
a228 11

	if (cipher->discard_len > 0) {		
		junk = xmalloc(cipher->discard_len);
		discard = xmalloc(cipher->discard_len);
		if (EVP_Cipher(&cc->evp, discard, junk,
		    cipher->discard_len) == 0)
			fatal("evp_crypt: EVP_Cipher failed during discard");
		memset(discard, 0, cipher->discard_len);
		xfree(junk);
		xfree(discard);
	}
d299 1
a299 1
		if (evplen <= 0)
d301 1
a301 1
		if ((u_int)evplen != len)
@


1.1.1.3
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d38 1
a38 1
RCSID("$OpenBSD: cipher.c,v 1.77 2005/07/16 01:35:24 djm Exp $");
d234 1
a234 1
	if (cipher->discard_len > 0) {
@


1.1.1.4
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@a0 1
/* $OpenBSD: cipher.c,v 1.79 2006/03/25 13:17:01 djm Exp $ */
d38 1
@


1.1.1.5
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.c,v 1.81 2006/08/03 03:34:42 deraadt Exp $ */
d38 1
a38 6
#include <sys/types.h>

#include <openssl/md5.h>

#include <string.h>
#include <stdarg.h>
d44 2
@


1.1.1.6
log
@OpenSSH 5.2, or so
@
text
@d1 1
a1 1
/* $OpenBSD: cipher.c,v 1.82 2009/01/26 09:58:15 markus Exp $ */
a60 1
	u_int	cbc_mode;
d63 14
a76 14
	{ "none",		SSH_CIPHER_NONE, 8, 0, 0, 0, EVP_enc_null },
	{ "des",		SSH_CIPHER_DES, 8, 8, 0, 1, EVP_des_cbc },
	{ "3des",		SSH_CIPHER_3DES, 8, 16, 0, 1, evp_ssh1_3des },
	{ "blowfish",		SSH_CIPHER_BLOWFISH, 8, 32, 0, 1, evp_ssh1_bf },

	{ "3des-cbc",		SSH_CIPHER_SSH2, 8, 24, 0, 1, EVP_des_ede3_cbc },
	{ "blowfish-cbc",	SSH_CIPHER_SSH2, 8, 16, 0, 1, EVP_bf_cbc },
	{ "cast128-cbc",	SSH_CIPHER_SSH2, 8, 16, 0, 1, EVP_cast5_cbc },
	{ "arcfour",		SSH_CIPHER_SSH2, 8, 16, 0, 0, EVP_rc4 },
	{ "arcfour128",		SSH_CIPHER_SSH2, 8, 16, 1536, 0, EVP_rc4 },
	{ "arcfour256",		SSH_CIPHER_SSH2, 8, 32, 1536, 0, EVP_rc4 },
	{ "aes128-cbc",		SSH_CIPHER_SSH2, 16, 16, 0, 1, EVP_aes_128_cbc },
	{ "aes192-cbc",		SSH_CIPHER_SSH2, 16, 24, 0, 1, EVP_aes_192_cbc },
	{ "aes256-cbc",		SSH_CIPHER_SSH2, 16, 32, 0, 1, EVP_aes_256_cbc },
d78 5
a82 5
				SSH_CIPHER_SSH2, 16, 32, 0, 1, EVP_aes_256_cbc },
	{ "aes128-ctr",		SSH_CIPHER_SSH2, 16, 16, 0, 0, evp_aes_128_ctr },
	{ "aes192-ctr",		SSH_CIPHER_SSH2, 16, 24, 0, 0, evp_aes_128_ctr },
	{ "aes256-ctr",		SSH_CIPHER_SSH2, 16, 32, 0, 0, evp_aes_128_ctr },
	{ "acss@@openssh.org",	SSH_CIPHER_SSH2, 16, 5, 0, 0, EVP_acss },
d84 1
a84 1
	{ NULL,			SSH_CIPHER_INVALID, 0, 0, 0, 0, NULL }
a107 6
cipher_is_cbc(const Cipher *c)
{
	return (c->cbc_mode);
}

u_int
@


