head	1.7;
access;
symbols
	cvs-200910041320:1.1.1.5
	cvs-200903221200:1.1.1.5
	cvs-200812162015:1.1.1.5
	cvs-200804031830:1.1.1.5
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	cvs-200803022030:1.1.1.5
	cvs-200709131337:1.1.1.5
	cvs-200709021830:1.1.1.5
	cvs-200708201200:1.1.1.5
	cvs-200706161500:1.1.1.5
	cvs-200705192215:1.1.1.5
	cvs-200704292000:1.1.1.5
	cvs-200703080900:1.1.1.5
	cvs-200701251600:1.1.1.5
	cvs-200612111600:1.1.1.5
	cvs-200611090230:1.1.1.5
	OPENBSD_4_0:1.1.1.5
	MIRBSD_9_BASE:1.3
	cvs-200606162342:1.1.1.4
	cvs-200606022000:1.1.1.4
	cvs-200604191000:1.1.1.4
	cvs-200602220045:1.1.1.3
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200512201942:1.1.1.2
	cvs-200511231930:1.1.1.2
	cvs-200507211800:1.1.1.1
	cvs-200506221550:1.1.1.1
	cvs-200505050030:1.1.1.1
	cvs-200504291700:1.1.1.1
	cvs-200504261445:1.1.1.1
	cvs-200504141900:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.03.13.04.46.47;	author tg;	state Exp;
branches;
next	1.6;
commitid	100532138484761BDE3;

1.6
date	2011.01.15.21.52.42;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004D32173B08BB4E36;

1.5
date	2010.09.21.21.24.38;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004C992261692DCA0F;

1.4
date	2006.09.20.21.41.05;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004511B578580E7F04;

1.3
date	2006.04.19.10.40.54;	author tg;	state Exp;
branches;
next	1.2;
commitid	100444613BD3A91C28B;

1.2
date	2006.02.22.02.16.49;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043FBC991512A442B;

1.1
date	2005.02.05.17.29.55;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.55;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.11.23.19.34.15;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	116a4384c4467ffc;

1.1.1.3
date	2006.02.22.00.51.36;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	10043FBB5A933C3BB9B;

1.1.1.4
date	2006.04.19.10.15.04;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10044460DB21E1F715C;

1.1.1.5
date	2006.09.20.19.06.50;	author tg;	state Exp;
branches;
next	;
commitid	10045119150397FC669;


desc
@@


1.7
log
@mop up after openssl rng changes
@
text
@/* $OpenBSD: ssh-keysign.c,v 1.29 2006/08/03 03:34:42 deraadt Exp $ */
/*
 * Copyright (c) 2002 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>

#include <openssl/evp.h>
#include <openssl/rand.h>
#include <openssl/rsa.h>

#include <fcntl.h>
#include <paths.h>
#include <pwd.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "xmalloc.h"
#include "log.h"
#include "key.h"
#include "ssh.h"
#include "ssh2.h"
#include "misc.h"
#include "buffer.h"
#include "authfile.h"
#include "msg.h"
#include "canohost.h"
#include "pathnames.h"
#include "readconf.h"
#include "uidswap.h"

__RCSID("$MirOS: src/usr.bin/ssh/ssh-keysign.c,v 1.6 2011/01/15 21:52:42 tg Exp $");

/* XXX readconf.c needs these */
uid_t original_real_uid;

static int
valid_request(struct passwd *pw, char *host, Key **ret, u_char *data,
    u_int datalen)
{
	Buffer b;
	Key *key = NULL;
	u_char *pkblob;
	u_int blen, len;
	char *pkalg, *p;
	int pktype, fail;

	fail = 0;

	buffer_init(&b);
	buffer_append(&b, data, datalen);

	/* session id, currently limited to SHA1 (20 bytes) or SHA256 (32) */
	p = buffer_get_string(&b, &len);
	if (len != 20 && len != 32)
		fail++;
	xfree(p);

	if (buffer_get_char(&b) != SSH2_MSG_USERAUTH_REQUEST)
		fail++;

	/* server user */
	buffer_skip_string(&b);

	/* service */
	p = buffer_get_string(&b, NULL);
	if (strcmp("ssh-connection", p) != 0)
		fail++;
	xfree(p);

	/* method */
	p = buffer_get_string(&b, NULL);
	if (strcmp("hostbased", p) != 0)
		fail++;
	xfree(p);

	/* pubkey */
	pkalg = buffer_get_string(&b, NULL);
	pkblob = buffer_get_string(&b, &blen);

	pktype = key_type_from_name(pkalg);
	if (pktype == KEY_UNSPEC)
		fail++;
	else if ((key = key_from_blob(pkblob, blen)) == NULL)
		fail++;
	else if (key->type != pktype)
		fail++;
	xfree(pkalg);
	xfree(pkblob);

	/* client host name, handle trailing dot */
	p = buffer_get_string(&b, &len);
	debug2("valid_request: check expect chost %s got %s", host, p);
	if (strlen(host) != len - 1)
		fail++;
	else if (p[len - 1] != '.')
		fail++;
	else if (strncasecmp(host, p, len - 1) != 0)
		fail++;
	xfree(p);

	/* local user */
	p = buffer_get_string(&b, NULL);

	if (strcmp(pw->pw_name, p) != 0)
		fail++;
	xfree(p);

	/* end of message */
	if (buffer_len(&b) != 0)
		fail++;
	buffer_free(&b);

	debug3("valid_request: fail %d", fail);

	if (fail && key != NULL)
		key_free(key);
	else
		*ret = key;

	return (fail ? -1 : 0);
}

int
main(void)
{
	Buffer b;
	Options options;
	Key *keys[2], *key;
	struct passwd *pw;
	int key_fd[2], i, found, version = 2, fd;
	u_char *signature, *data;
	char *host;
	u_int slen, dlen;

	/* Ensure that stdin and stdout are connected */
	if ((fd = open(_PATH_DEVNULL, O_RDWR)) < 2)
		exit(1);
	/* Leave /dev/null fd iff it is attached to stderr */
	if (fd > 2)
		close(fd);

	key_fd[0] = open(_PATH_HOST_RSA_KEY_FILE, O_RDONLY);
	key_fd[1] = open(_PATH_HOST_DSA_KEY_FILE, O_RDONLY);

	original_real_uid = getuid();	/* XXX readconf.c needs this */
	if ((pw = getpwuid(original_real_uid)) == NULL)
		fatal("getpwuid failed");
	pw = pwcopy(pw);

	permanently_set_uid(pw);

#ifdef DEBUG_SSH_KEYSIGN
	log_init("ssh-keysign", SYSLOG_LEVEL_DEBUG3, SYSLOG_FACILITY_AUTH, 0);
#endif

	/* verify that ssh-keysign is enabled by the admin */
	initialize_options(&options);
	(void)read_config_file(_PATH_HOST_CONFIG_FILE, "", &options, 0);
	fill_default_options(&options, pw);
	if (options.enable_ssh_keysign != 1)
		fatal("ssh-keysign not enabled in %s",
		    _PATH_HOST_CONFIG_FILE);

	if (key_fd[0] == -1 && key_fd[1] == -1)
		fatal("could not open any host key");

	SSLeay_add_all_algorithms();
	(void)arc4random();

	found = 0;
	for (i = 0; i < 2; i++) {
		keys[i] = NULL;
		if (key_fd[i] == -1)
			continue;
		keys[i] = key_load_private_pem(key_fd[i], KEY_UNSPEC,
		    NULL, NULL);
		close(key_fd[i]);
		if (keys[i] != NULL)
			found = 1;
	}
	if (!found)
		fatal("no hostkey found");

	buffer_init(&b);
	if (ssh_msg_recv(STDIN_FILENO, &b) < 0)
		fatal("ssh_msg_recv failed");
	if (buffer_get_char(&b) != version)
		fatal("bad version");
	fd = buffer_get_int(&b);
	if ((fd == STDIN_FILENO) || (fd == STDOUT_FILENO))
		fatal("bad fd");
	if ((host = get_local_name(fd)) == NULL)
		fatal("cannot get sockname for fd");

	data = buffer_get_string(&b, &dlen);
	if (valid_request(pw, host, &key, data, dlen) < 0)
		fatal("not a valid request");
	xfree(host);

	found = 0;
	for (i = 0; i < 2; i++) {
		if (keys[i] != NULL &&
		    key_equal(key, keys[i])) {
			found = 1;
			break;
		}
	}
	if (!found)
		fatal("no matching hostkey found");

	if (key_sign(keys[i], &signature, &slen, data, dlen) != 0)
		fatal("key_sign failed");
	xfree(data);

	/* send reply */
	buffer_clear(&b);
	buffer_put_string(&b, signature, slen);
	if (ssh_msg_send(STDOUT_FILENO, version, &b) == -1)
		fatal("ssh_msg_send failed");

	return (0);
}
@


1.6
log
@Introduce /etc/ssh/root:config and /etc/ssh/root:known_hosts
and /etc/ssh/root:authorised_keys for the superuser if his
HOME directory is unset, empty or, not normalised, "/" (root).
十̲CVS: ----------------------------------------------------------------------
@
text
@d53 1
a53 1
__RCSID("$MirOS: src/usr.bin/ssh/ssh-keysign.c,v 1.5 2010/09/21 21:24:38 tg Exp $");
a155 1
	u_int32_t rnd[256];
d190 1
a190 2
	arc4random_buf(rnd, sizeof(rnd));
	RAND_seed(rnd, sizeof(rnd));
@


1.5
log
@use arc4random() a bit more efficiently
@
text
@d53 1
a53 1
__RCSID("$MirOS: src/usr.bin/ssh/ssh-keysign.c,v 1.4 2006/09/20 21:41:05 tg Exp $");
d182 1
a182 1
	fill_default_options(&options);
@


1.4
log
@finish merging
@
text
@d53 1
a53 1
__RCSID("$MirOS$");
d191 1
a191 2
	for (i = 0; i < 256; i++)
		rnd[i] = arc4random();
@


1.3
log
@merge and clean up
@
text
@d1 1
a1 1
/* $OpenBSD: ssh-keysign.c,v 1.23 2006/04/02 08:34:52 dtucker Exp $ */
d26 1
a26 4
#include "includes.h"
__RCSID("$MirOS: src/usr.bin/ssh/ssh-keysign.c,v 1.2 2006/02/22 02:16:49 tg Exp $");

#include <paths.h>
d32 8
a44 1
#include "xmalloc.h"
a45 1
#include "bufaux.h"
d53 2
@


1.2
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 1
d27 1
a27 1
RCSID("$MirOS: ssh-keysign.c,v 1.20 2006/02/08 12:15:27 stevesk Exp $");
d69 1
a69 1
	/* session id, currently limited to SHA1 (20 bytes) */
d71 1
a71 1
	if (len != 20)
@


1.1
log
@Initial revision
@
text
@d24 1
d26 3
a28 1
RCSID("$OpenBSD: ssh-keysign.c,v 1.18 2004/08/23 14:29:23 dtucker Exp $");
d140 1
a140 1
main(int argc, char **argv)
d152 7
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import current OpenSSH
@
text
@d25 1
a25 1
RCSID("$OpenBSD: ssh-keysign.c,v 1.19 2005/09/13 23:40:07 djm Exp $");
a148 7
	/* Ensure that stdin and stdout are connected */
	if ((fd = open(_PATH_DEVNULL, O_RDWR)) < 2)
		exit(1);
	/* Leave /dev/null fd iff it is attached to stderr */
	if (fd > 2)
		close(fd);

@


1.1.1.3
log
@import OpenSSH-current
@
text
@d25 1
a25 3
RCSID("$OpenBSD: ssh-keysign.c,v 1.20 2006/02/08 12:15:27 stevesk Exp $");

#include <paths.h>
@


1.1.1.4
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@a0 1
/* $OpenBSD: ssh-keysign.c,v 1.23 2006/04/02 08:34:52 dtucker Exp $ */
d25 1
d67 1
a67 1
	/* session id, currently limited to SHA1 (20 bytes) or SHA256 (32) */
d69 1
a69 1
	if (len != 20 && len != 32)
@


1.1.1.5
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: ssh-keysign.c,v 1.29 2006/08/03 03:34:42 deraadt Exp $ */
d25 1
d27 1
a27 1
#include <sys/types.h>
a32 8
#include <fcntl.h>
#include <paths.h>
#include <pwd.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "xmalloc.h"
d38 1
d40 1
@


