head	1.8;
access;
symbols
	cvs-200910041320:1.1.1.8
	cvs-200903221200:1.1.1.7
	cvs-200812162015:1.1.1.7
	cvs-200804031830:1.1.1.6
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	cvs-200803022030:1.1.1.6
	cvs-200709131337:1.1.1.5
	cvs-200709021830:1.1.1.5
	cvs-200708201200:1.1.1.5
	cvs-200706161500:1.1.1.5
	cvs-200705192215:1.1.1.5
	cvs-200704292000:1.1.1.5
	cvs-200703080900:1.1.1.5
	cvs-200701251600:1.1.1.5
	cvs-200612111600:1.1.1.5
	cvs-200611090230:1.1.1.5
	OPENBSD_4_0:1.1.1.5
	MIRBSD_9_BASE:1.3
	cvs-200606162342:1.1.1.5
	cvs-200606022000:1.1.1.5
	cvs-200604191000:1.1.1.5
	cvs-200602220045:1.1.1.4
	MIRBSD_8:1.1.1.3.0.2
	MIRBSD_8_BASE:1.1.1.3
	cvs-200512201942:1.1.1.3
	cvs-200511231930:1.1.1.3
	cvs-200507211800:1.1.1.2
	cvs-200506221550:1.1.1.2
	cvs-200505050030:1.1.1.1
	cvs-200504291700:1.1.1.1
	cvs-200504261445:1.1.1.1
	cvs-200504141900:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.01.14.19.23.02;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005697F5AA3EA7E36D;

1.7
date	2013.10.31.20.07.12;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005272B7081B0E5655;

1.6
date	2009.10.04.14.29.06;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004AC8B1276FC00211;

1.5
date	2008.12.16.20.55.25;	author tg;	state Exp;
branches;
next	1.4;
commitid	100494815C97ECEEDBF;

1.4
date	2008.03.02.21.14.20;	author tg;	state Exp;
branches;
next	1.3;
commitid	10047CB18BB506A8527;

1.3
date	2006.04.19.10.40.50;	author tg;	state Exp;
branches;
next	1.2;
commitid	100444613BD3A91C28B;

1.2
date	2006.02.22.02.16.47;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043FBC991512A442B;

1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.06.22.15.56.27;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	181342b98a38fe99;

1.1.1.3
date	2005.11.23.19.34.15;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	116a4384c4467ffc;

1.1.1.4
date	2006.02.22.00.51.35;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10043FBB5A933C3BB9B;

1.1.1.5
date	2006.04.19.10.15.03;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10044460DB21E1F715C;

1.1.1.6
date	2008.03.02.20.40.42;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	10047CB10DD30FAF062;

1.1.1.7
date	2008.12.16.20.15.33;	author tg;	state Exp;
branches;
next	1.1.1.8;
commitid	10049480C7A2701F5C0;

1.1.1.8
date	2009.10.04.13.25.45;	author tg;	state Exp;
branches;
next	;
commitid	1004AC8A2663BC008C5;


desc
@@


1.8
log
@drop roaming code completely
@
text
@/* $MirOS: src/usr.bin/ssh/packet.h,v 1.7 2013/10/31 20:07:12 tg Exp $ */
/* $OpenBSD: packet.h,v 1.52 2009/06/27 09:29:06 andreas Exp $ */

/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright © 2013, 2016
 *	mirabilos <m@@mirbsd.org>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Interface for the packet protocol functions.
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#ifndef PACKET_H
#define PACKET_H

#include <termios.h>

#include <openssl/bn.h>

void     packet_set_connection(int, int);
void     packet_set_timeout(int, int);
void     packet_set_nonblocking(void);
int      packet_get_connection_in(void);
int      packet_get_connection_out(void);
void     packet_close(void);
void	 packet_set_encryption_key(const u_char *, u_int, int);
u_int	 packet_get_encryption_key(u_char *);
void     packet_set_protocol_flags(u_int);
u_int	 packet_get_protocol_flags(void);
void     packet_start_compression(int);
void     packet_set_interactive(int);
int      packet_is_interactive(void);
void     packet_set_server(void);
void     packet_set_authenticated(void);

void     packet_start(u_char);
void     packet_put_char(int ch);
void     packet_put_int(u_int value);
void     packet_put_int64(u_int64_t value);
void     packet_put_bignum(BIGNUM * value);
void     packet_put_bignum2(BIGNUM * value);
void     packet_put_string(const void *buf, u_int len);
void     packet_put_cstring(const char *str);
void     packet_put_raw(const void *buf, u_int len);
void     packet_send(void);

int      packet_read(void);
void     packet_read_expect(int type);
int      packet_read_poll(void);
void     packet_process_incoming(const char *buf, u_int len);
int      packet_read_seqnr(u_int32_t *seqnr_p);
int      packet_read_poll_seqnr(u_int32_t *seqnr_p);

u_int	 packet_get_char(void);
u_int	 packet_get_int(void);
u_int64_t packet_get_int64(void);
void     packet_get_bignum(BIGNUM * value);
void     packet_get_bignum2(BIGNUM * value);
void	*packet_get_raw(u_int *length_ptr);
void	*packet_get_string(u_int *length_ptr);
void	*packet_get_string_ptr(u_int *length_ptr);
void     packet_disconnect(const char *fmt,...) __dead __attribute__((__format__(__printf__, 1, 2)));
void     packet_send_debug(const char *fmt,...) __attribute__((__format__(__printf__, 1, 2)));

void	 set_newkeys(int mode);
int	 packet_get_keyiv_len(int);
void	 packet_get_keyiv(int, u_char *, u_int);
int	 packet_get_keycontext(int, u_char *);
void	 packet_set_keycontext(int, u_char *);
void	 packet_get_state(int, u_int32_t *, u_int64_t *, u_int32_t *, u_int64_t *);
void	 packet_set_state(int, u_int32_t, u_int64_t, u_int32_t, u_int64_t);
int	 packet_get_ssh1_cipher(void);
void	 packet_set_iv(int, u_char *);
void	*packet_get_newkeys(int);

void     packet_write_poll(void);
void     packet_write_wait(void);
int      packet_have_data_to_write(void);
int      packet_not_very_much_data_to_write(void);

int	 packet_connection_is_on_socket(void);
int	 packet_connection_is_ipv4(void);
int	 packet_remaining(void);
void	 packet_send_ignore(int);
void	 packet_add_padding(u_char);

void	 tty_make_modes(int, struct termios *);
void	 tty_parse_modes(int, int *);

void	 packet_set_alive_timeouts(int);
int	 packet_inc_alive_timeouts(void);
int	 packet_set_maxsize(u_int);
u_int	 packet_get_maxsize(void);

/* don't allow remaining bytes after the end of the message */
#define packet_check_eom() \
do { \
	int _len = packet_remaining(); \
	if (_len > 0) { \
		logit("Packet integrity error (%d bytes remaining) at %s:%d", \
		    _len ,__FILE__, __LINE__); \
		packet_disconnect("Packet integrity error."); \
	} \
} while (0)

int	 packet_need_rekeying(void);
void	 packet_set_rekey_limit(u_int32_t);

void	*packet_get_input(void);
void	*packet_get_output(void);

#endif				/* PACKET_H */
@


1.7
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/* $MirOS: src/usr.bin/ssh/packet.h,v 1.6 2009/10/04 14:29:06 tg Exp $ */
d6 2
a7 2
 * Copyright © 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
a114 3
void	 packet_backup_state(void);
void	 packet_restore_state(void);

@


1.6
log
@• merge newer OpenSSH
• KNF in our diff – style(9)
• some const cleanliness (build with __CRAZY=Yes mostly)
@
text
@d1 1
a1 1
/* $MirOS: src/usr.bin/ssh/packet.h,v 1.5 2008/12/16 20:55:25 tg Exp $ */
d6 2
d68 2
a69 2
void     packet_disconnect(const char *fmt,...) __dead __attribute__((format(printf, 1, 2)));
void     packet_send_debug(const char *fmt,...) __attribute__((format(printf, 1, 2)));
@


1.5
log
@fastmerge, do not use yet!
@
text
@d1 2
a2 2
/* $MirOS: src/usr.bin/ssh/packet.h,v 1.4 2008/03/02 21:14:20 tg Exp $ */
/* $OpenBSD: packet.h,v 1.49 2008/07/10 18:08:11 markus Exp $ */
d43 1
d60 1
d78 1
d94 2
a95 2
extern u_int max_packet_size;
extern int keep_alive_timeouts;
d97 1
a97 1
#define  packet_get_maxsize() max_packet_size
d113 6
@


1.4
log
@merge’n’fix
@
text
@d1 2
a2 2
/* $MirOS: src/usr.bin/ssh/packet.h,v 1.3 2006/04/19 10:40:50 tg Exp $ */
/* $OpenBSD: packet.h,v 1.46 2008/02/22 20:44:02 dtucker Exp $ */
d25 1
d63 1
d72 2
a73 2
void	 packet_get_state(int, u_int32_t *, u_int64_t *, u_int32_t *);
void	 packet_set_state(int, u_int32_t, u_int64_t, u_int32_t);
@


1.3
log
@merge and clean up
@
text
@d1 2
a2 2
/* $MirOS$ */
/* $OpenBSD: packet.h,v 1.45 2006/03/25 22:22:43 djm Exp $ */
d90 1
@


1.2
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 2
a2 2
/**	$MirOS$ */
/*	$OpenBSD: packet.h,v 1.44 2006/02/07 01:42:00 stevesk Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: packet.h,v 1.41 2004/05/11 19:01:43 deraadt Exp $	*/
d20 2
d36 2
d60 1
a60 1
void	*packet_get_raw(int *length_ptr);
d62 1
a62 1
void     packet_disconnect(const char *fmt,...) __attribute__((format(printf, 1, 2)));
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@most current OpenSSH.com
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.h,v 1.42 2005/06/17 02:44:33 djm Exp $	*/
d55 1
a55 1
void	*packet_get_raw(u_int *length_ptr);
@


1.1.1.3
log
@Import current OpenSSH
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.h,v 1.43 2005/07/25 11:59:40 markus Exp $	*/
a32 2
void     packet_set_server(void);
void     packet_set_authenticated(void);
@


1.1.1.4
log
@import OpenSSH-current
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.h,v 1.44 2006/02/07 01:42:00 stevesk Exp $	*/
a18 2
#include <termios.h>

@


1.1.1.5
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@d1 1
a1 1
/* $OpenBSD: packet.h,v 1.45 2006/03/25 22:22:43 djm Exp $ */
@


1.1.1.6
log
@newer openssh
@
text
@d1 1
a1 1
/* $OpenBSD: packet.h,v 1.46 2008/02/22 20:44:02 dtucker Exp $ */
a88 1
extern int keep_alive_timeouts;
@


1.1.1.7
log
@OpenSSH-current
@
text
@d1 1
a1 1
/* $OpenBSD: packet.h,v 1.49 2008/07/10 18:08:11 markus Exp $ */
a23 1
void     packet_set_timeout(int, int);
a60 1
void	*packet_get_string_ptr(u_int *length_ptr);
d69 2
a70 2
void	 packet_get_state(int, u_int32_t *, u_int64_t *, u_int32_t *, u_int64_t *);
void	 packet_set_state(int, u_int32_t, u_int64_t, u_int32_t, u_int64_t);
@


1.1.1.8
log
@Let’s play the version number game – OpenSSH 5.3-current
@
text
@d1 1
a1 1
/* $OpenBSD: packet.h,v 1.52 2009/06/27 09:29:06 andreas Exp $ */
a41 1
void     packet_put_int64(u_int64_t value);
a57 1
u_int64_t packet_get_int64(void);
a74 1
void	*packet_get_newkeys(int);
d90 2
a91 2
void	 packet_set_alive_timeouts(int);
int	 packet_inc_alive_timeouts(void);
d93 1
a93 1
u_int	 packet_get_maxsize(void);
a108 6
void	 packet_backup_state(void);
void	 packet_restore_state(void);

void	*packet_get_input(void);
void	*packet_get_output(void);

@


