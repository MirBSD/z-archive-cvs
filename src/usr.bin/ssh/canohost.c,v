head	1.9;
access;
symbols
	cvs-200910041320:1.1.1.11
	cvs-200903221200:1.1.1.10
	cvs-200812162015:1.1.1.9
	cvs-200804031830:1.1.1.8
	MIRBSD_10:1.5.0.2
	MIRBSD_10_BASE:1.5
	cvs-200803022030:1.1.1.8
	cvs-200709131337:1.1.1.7
	cvs-200709021830:1.1.1.7
	cvs-200708201200:1.1.1.7
	cvs-200706161500:1.1.1.7
	cvs-200705192215:1.1.1.7
	cvs-200704292000:1.1.1.7
	cvs-200703080900:1.1.1.7
	cvs-200701251600:1.1.1.7
	cvs-200612111600:1.1.1.7
	cvs-200611090230:1.1.1.7
	OPENBSD_4_0:1.1.1.7
	MIRBSD_9_BASE:1.3
	cvs-200606162342:1.1.1.6
	cvs-200606022000:1.1.1.6
	cvs-200604191000:1.1.1.6
	cvs-200602220045:1.1.1.5
	MIRBSD_8:1.1.1.4.0.2
	MIRBSD_8_BASE:1.1.1.4
	cvs-200512201942:1.1.1.4
	cvs-200511231930:1.1.1.4
	cvs-200507211800:1.1.1.3
	cvs-200506221550:1.1.1.3
	cvs-200505050030:1.1.1.2
	cvs-200504291700:1.1.1.2
	cvs-200504261445:1.1.1.2
	cvs-200504141900:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2018.05.03.01.32.45;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005AEA669C604AC341;

1.8
date	2009.10.04.14.29.02;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004AC8B1276FC00211;

1.7
date	2009.03.22.15.01.12;	author tg;	state Exp;
branches;
next	1.6;
commitid	10049C652CD5CCC321F;

1.6
date	2008.12.16.20.55.19;	author tg;	state Exp;
branches;
next	1.5;
commitid	100494815C97ECEEDBF;

1.5
date	2008.03.02.21.14.18;	author tg;	state Exp;
branches;
next	1.4;
commitid	10047CB18BB506A8527;

1.4
date	2006.09.20.21.40.57;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004511B578580E7F04;

1.3
date	2006.04.19.10.40.45;	author tg;	state Exp;
branches;
next	1.2;
commitid	100444613BD3A91C28B;

1.2
date	2006.02.22.02.16.44;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043FBC991512A442B;

1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.14.19.33.22;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.06.22.15.56.24;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	181342b98a38fe99;

1.1.1.4
date	2005.11.23.19.34.14;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	116a4384c4467ffc;

1.1.1.5
date	2006.02.22.00.51.35;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	10043FBB5A933C3BB9B;

1.1.1.6
date	2006.04.19.10.15.02;	author tg;	state Exp;
branches;
next	1.1.1.7;
commitid	10044460DB21E1F715C;

1.1.1.7
date	2006.09.20.19.06.47;	author tg;	state Exp;
branches;
next	1.1.1.8;
commitid	10045119150397FC669;

1.1.1.8
date	2008.03.02.20.40.41;	author tg;	state Exp;
branches;
next	1.1.1.9;
commitid	10047CB10DD30FAF062;

1.1.1.9
date	2008.12.16.20.15.32;	author tg;	state Exp;
branches;
next	1.1.1.10;
commitid	10049480C7A2701F5C0;

1.1.1.10
date	2009.03.22.12.02.59;	author tg;	state Exp;
branches;
next	1.1.1.11;
commitid	10049C6290649163EA3;

1.1.1.11
date	2009.10.04.13.25.44;	author tg;	state Exp;
branches;
next	;
commitid	1004AC8A2663BC008C5;


desc
@@


1.9
log
@implement a new config directive MaskRemoteAddress

this is suitable for either hiding a̲l̲l̲ remote identities (if used globally)
or the identity of successful logins (for a Match block — e.g. for anoncvs)
@
text
@/* $OpenBSD: canohost.c,v 1.65 2009/05/27 06:31:25 andreas Exp $ */
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Functions for returning the canonical host name of the remote site.
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <netinet/in.h>

#include <ctype.h>
#include <errno.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#include "xmalloc.h"
#include "packet.h"
#include "log.h"
#include "canohost.h"
#include "misc.h"

__RCSID("$MirOS: src/usr.bin/ssh/canohost.c,v 1.7 2009/03/22 15:01:12 tg Exp $");

unsigned char mask_remote_identity = 0;

static void check_ip_options(int, char *);
static char *canonical_host_ip = NULL;
static int cached_port = -1;

/*
 * Return the canonical name of the host at the other end of the socket. The
 * caller should free the returned string with xfree.
 */

static char *
get_remote_hostname(int sock, int use_dns)
{
	struct sockaddr_storage from;
	int i;
	socklen_t fromlen;
	struct addrinfo hints, *ai, *aitop;
	char name[NI_MAXHOST], ntop[NI_MAXHOST], ntop2[NI_MAXHOST];

	/* Get IP address of client. */
	fromlen = sizeof(from);
	memset(&from, 0, sizeof(from));
	if (getpeername(sock, (struct sockaddr *)&from, &fromlen) < 0) {
		debug("getpeername failed: %.100s", strerror(errno));
		cleanup_exit(255);
	}

	if (getnameinfo((struct sockaddr *)&from, fromlen, ntop, sizeof(ntop),
	    NULL, 0, NI_NUMERICHOST) != 0)
		fatal("get_remote_hostname: getnameinfo NI_NUMERICHOST failed");

	if (from.ss_family == AF_INET)
		check_ip_options(sock, ntop);

	if (!use_dns)
		return xstrdup(ntop);

	debug3("Trying to reverse map address %.100s.", ntop);
	/* Map the IP address to a host name. */
	if (getnameinfo((struct sockaddr *)&from, fromlen, name, sizeof(name),
	    NULL, 0, NI_NAMEREQD) != 0) {
		/* Host name not found.  Use ip address. */
		return xstrdup(ntop);
	}

	/*
	 * if reverse lookup result looks like a numeric hostname,
	 * someone is trying to trick us by PTR record like following:
	 *	1.1.1.10.in-addr.arpa.	IN PTR	2.3.4.5
	 */
	memset(&hints, 0, sizeof(hints));
	hints.ai_socktype = SOCK_DGRAM;	/*dummy*/
	hints.ai_flags = AI_NUMERICHOST;
	if (getaddrinfo(name, NULL, &hints, &ai) == 0) {
		logit("Nasty PTR record \"%s\" is set up for %s, ignoring",
		    name, ntop);
		freeaddrinfo(ai);
		return xstrdup(ntop);
	}

	/*
	 * Convert it to all lowercase (which is expected by the rest
	 * of this software).
	 */
	for (i = 0; name[i]; i++)
		if (isupper(name[i]))
			name[i] = (char)tolower(name[i]);
	/*
	 * Map it back to an IP address and check that the given
	 * address actually is an address of this host.  This is
	 * necessary because anyone with access to a name server can
	 * define arbitrary names for an IP address. Mapping from
	 * name to IP address can be trusted better (but can still be
	 * fooled if the intruder has access to the name server of
	 * the domain).
	 */
	memset(&hints, 0, sizeof(hints));
	hints.ai_family = from.ss_family;
	hints.ai_socktype = SOCK_STREAM;
	if (getaddrinfo(name, NULL, &hints, &aitop) != 0) {
		logit("reverse mapping checking getaddrinfo for %.700s "
		    "[%s] failed - POSSIBLE BREAK-IN ATTEMPT!", name, ntop);
		return xstrdup(ntop);
	}
	/* Look for the address from the list of addresses. */
	for (ai = aitop; ai; ai = ai->ai_next) {
		if (getnameinfo(ai->ai_addr, ai->ai_addrlen, ntop2,
		    sizeof(ntop2), NULL, 0, NI_NUMERICHOST) == 0 &&
		    (strcmp(ntop, ntop2) == 0))
				break;
	}
	freeaddrinfo(aitop);
	/* If we reached the end of the list, the address was not there. */
	if (!ai) {
		/* Address not found for the host name. */
		logit("Address %.100s maps to %.600s, but this does not "
		    "map back to the address - POSSIBLE BREAK-IN ATTEMPT!",
		    ntop, name);
		return xstrdup(ntop);
	}
	return xstrdup(name);
}

/*
 * If IP options are supported, make sure there are none (log and
 * disconnect them if any are found).  Basically we are worried about
 * source routing; it can be used to pretend you are somebody
 * (ip-address) you are not. That itself may be "almost acceptable"
 * under certain circumstances, but rhosts autentication is useless
 * if source routing is accepted. Notice also that if we just dropped
 * source routing here, the other side could use IP spoofing to do
 * rest of the interaction and could still bypass security.  So we
 * exit here if we detect any IP options.
 */
/* IPv4 only */
static void
check_ip_options(int sock, char *ipaddr)
{
	u_char options[200];
	char text[sizeof(options) * 3 + 1];
	socklen_t option_size;
	u_int i;
	int ipproto;
	struct protoent *ip;

	if ((ip = getprotobyname("ip")) != NULL)
		ipproto = ip->p_proto;
	else
		ipproto = IPPROTO_IP;
	option_size = sizeof(options);
	if (getsockopt(sock, ipproto, IP_OPTIONS, options,
	    &option_size) >= 0 && option_size != 0) {
		text[0] = '\0';
		for (i = 0; i < option_size; i++)
			snprintf(text + i*3, sizeof(text) - i*3,
			    " %2.2x", options[i]);
		fatal("Connection from %.100s with IP options:%.800s",
		    ipaddr, text);
	}
}

/*
 * Return the canonical name of the host in the other side of the current
 * connection.  The host name is cached, so it is efficient to call this
 * several times.
 */

const char *
get_canonical_hostname(int use_dns)
{
	const char *host;
	static const char *canonical_host_name = NULL;
	static const char *remote_ip = NULL;

	if (mask_remote_identity)
		return (!packet_connection_is_on_socket() ? "UNKNOWN" :
		    use_dns ? "masked.invalid" : "256.256.256.256");

	/* Check if we have previously retrieved name with same option. */
	if (use_dns && canonical_host_name != NULL)
		return canonical_host_name;
	if (!use_dns && remote_ip != NULL)
		return remote_ip;

	/* Get the real hostname if socket; otherwise return UNKNOWN. */
	if (packet_connection_is_on_socket())
		host = get_remote_hostname(packet_get_connection_in(), use_dns);
	else
		host = "UNKNOWN";

	if (use_dns)
		canonical_host_name = host;
	else
		remote_ip = host;
	return host;
}

/*
 * Returns the local/remote IP-address/hostname of socket as a string.
 * The returned string must be freed.
 */
static char *
get_socket_address(int sock, int remote, int flags)
{
	struct sockaddr_storage addr;
	socklen_t addrlen;
	char ntop[NI_MAXHOST];
	int r;

	/* Get IP address of client. */
	addrlen = sizeof(addr);
	memset(&addr, 0, sizeof(addr));

	if (remote) {
		if (getpeername(sock, (struct sockaddr *)&addr, &addrlen)
		    < 0)
			return NULL;
	} else {
		if (getsockname(sock, (struct sockaddr *)&addr, &addrlen)
		    < 0)
			return NULL;
	}
	/* Get the address in ascii. */
	if ((r = getnameinfo((struct sockaddr *)&addr, addrlen, ntop,
	    sizeof(ntop), NULL, 0, flags)) != 0) {
		error("get_socket_address: getnameinfo %d failed: %s", flags,
		    ssh_gai_strerror(r));
		return NULL;
	}
	return xstrdup(ntop);
}

char *
get_peer_ipaddr(int sock)
{
	char *p;

	if ((p = get_socket_address(sock, 1, NI_NUMERICHOST)) == NULL)
		return (xstrdup("UNKNOWN"));
	if (!mask_remote_identity)
		return (p);
	free(p);
	return (xstrdup("256.256.256.256"));
}

char *
get_local_ipaddr(int sock)
{
	char *p;

	if ((p = get_socket_address(sock, 0, NI_NUMERICHOST)) != NULL)
		return p;
	return xstrdup("UNKNOWN");
}

char *
get_local_name(int sock)
{
	return get_socket_address(sock, 0, NI_NAMEREQD);
}

void
clear_cached_addr(void)
{
	if (canonical_host_ip != NULL) {
		xfree(canonical_host_ip);
		canonical_host_ip = NULL;
	}
	cached_port = -1;
}

/*
 * Returns the IP-address of the remote host as a string.  The returned
 * string must not be freed.
 */

const char *
get_remote_ipaddr(void)
{
	if (mask_remote_identity)
		return (!packet_connection_is_on_socket() ? "UNKNOWN" :
		    "256.256.256.256");

	/* Check whether we have cached the ipaddr. */
	if (canonical_host_ip == NULL) {
		if (packet_connection_is_on_socket()) {
			canonical_host_ip =
			    get_peer_ipaddr(packet_get_connection_in());
			if (canonical_host_ip == NULL)
				cleanup_exit(255);
		} else {
			/* If not on socket, return UNKNOWN. */
			canonical_host_ip = xstrdup("UNKNOWN");
		}
	}
	return canonical_host_ip;
}

const char *
get_remote_name_or_ip(u_int utmp_len, int use_dns)
{
	static const char *remote = "";
	if (utmp_len > 0)
		remote = get_canonical_hostname(use_dns);
	if (utmp_len == 0 || strlen(remote) > utmp_len)
		remote = get_remote_ipaddr();
	return remote;
}

/* Returns the local/remote port for the socket. */

int
get_sock_port(int sock, int local)
{
	struct sockaddr_storage from;
	socklen_t fromlen;
	char strport[NI_MAXSERV];
	int r;

	/* Get IP address of client. */
	fromlen = sizeof(from);
	memset(&from, 0, sizeof(from));
	if (local) {
		if (getsockname(sock, (struct sockaddr *)&from, &fromlen) < 0) {
			error("getsockname failed: %.100s", strerror(errno));
			return 0;
		}
	} else {
		if (getpeername(sock, (struct sockaddr *)&from, &fromlen) < 0) {
			debug("getpeername failed: %.100s", strerror(errno));
			return -1;
		}
	}
	/* Return port number. */
	if ((r = getnameinfo((struct sockaddr *)&from, fromlen, NULL, 0,
	    strport, sizeof(strport), NI_NUMERICSERV)) != 0)
		fatal("get_sock_port: getnameinfo NI_NUMERICSERV failed: %s",
		    ssh_gai_strerror(r));
	return atoi(strport);
}

/* Returns remote/local port number for the current connection. */

static int
get_port(int local)
{
	/*
	 * If the connection is not a socket, return 65535.  This is
	 * intentionally chosen to be an unprivileged port number.
	 */
	if (!packet_connection_is_on_socket())
		return 65535;

	/* Get socket and return the port number. */
	return get_sock_port(packet_get_connection_in(), local);
}

int
get_peer_port(int sock)
{
	if (mask_remote_identity)
		return (!packet_connection_is_on_socket() ? 65535 : -666);
	return get_sock_port(sock, 0);
}

int
get_remote_port(void)
{
	if (mask_remote_identity)
		return (!packet_connection_is_on_socket() ? 65535 : -666);

	/* Cache to avoid getpeername() on a dead connection */
	if (cached_port == -1)
		cached_port = get_port(0);

	return cached_port;
}

int
get_local_port(void)
{
	return get_port(1);
}
@


1.8
log
@• merge newer OpenSSH
• KNF in our diff – style(9)
• some const cleanliness (build with __CRAZY=Yes mostly)
@
text
@d36 2
d187 7
a193 3
	char *host;
	static char *canonical_host_name = NULL;
	static char *remote_ip = NULL;
d205 1
a205 1
		host = (char *)"UNKNOWN";
d254 6
a259 3
	if ((p = get_socket_address(sock, 1, NI_NUMERICHOST)) != NULL)
		return p;
	return xstrdup("UNKNOWN");
d296 4
d377 2
d385 3
@


1.7
log
@merge and tweak ciphers and MACs
@
text
@d1 1
a1 1
/* $OpenBSD: canohost.c,v 1.64 2009/02/12 03:00:56 djm Exp $ */
d34 1
a34 1
__RCSID("$MirOS: src/usr.bin/ssh/canohost.c,v 1.6 2008/12/16 20:55:19 tg Exp $");
d37 2
d269 10
a286 2
	static char *canonical_host_ip = NULL;

a369 2
	static int port = -1;

d371 2
a372 2
	if (port == -1)
		port = get_port(0);
d374 1
a374 1
	return port;
@


1.6
log
@fastmerge, do not use yet!
@
text
@d1 1
a1 1
/* $OpenBSD: canohost.c,v 1.63 2008/06/12 00:03:49 dtucker Exp $ */
d34 1
a34 1
__RCSID("$MirOS: src/usr.bin/ssh/canohost.c,v 1.5 2008/03/02 21:14:18 tg Exp $");
d305 1
a305 1
static int
@


1.5
log
@merge’n’fix
@
text
@d1 1
a1 1
/* $OpenBSD: canohost.c,v 1.62 2007/12/27 14:22:08 dtucker Exp $ */
d34 1
a34 1
__RCSID("$MirOS: src/usr.bin/ssh/canohost.c,v 1.4 2006/09/20 21:40:57 tg Exp $");
d86 1
a86 1
	if (getaddrinfo(name, "0", &hints, &ai) == 0) {
@


1.4
log
@finish merging
@
text
@d1 1
a1 1
/* $OpenBSD: canohost.c,v 1.61 2006/08/03 03:34:41 deraadt Exp $ */
d32 1
d34 1
a34 1
__RCSID("$MirOS$");
d235 1
a235 1
		    r == EAI_SYSTEM ? strerror(errno) : gai_strerror(r));
d331 1
a331 1
		    r == EAI_SYSTEM ? strerror(errno) : gai_strerror(r));
@


1.3
log
@merge and clean up
@
text
@d1 1
a1 1
/* $OpenBSD: canohost.c,v 1.53 2006/03/25 13:17:01 djm Exp $ */
d15 4
a18 2
#include "includes.h"
__RCSID("$MirOS: src/usr.bin/ssh/canohost.c,v 1.2 2006/02/22 02:16:44 tg Exp $");
d21 6
d28 1
a29 1
#include "xmalloc.h"
d33 2
@


1.2
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 1
d16 3
a18 1
RCSID("$MirOS: canohost.c,v 1.48 2005/12/28 22:46:06 stevesk Exp $");
d88 1
a88 1
			name[i] = tolower(name[i]);
d103 1
a103 1
		    "failed - POSSIBLE BREAK-IN ATTEMPT!", name);
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
RCSID("$OpenBSD: canohost.c,v 1.41 2004/07/21 11:51:29 djm Exp $");
a45 3
	if (from.ss_family == AF_INET)
		check_ip_options(sock, ntop);

d50 3
d100 1
a100 1
		    "failed - POSSIBLE BREAKIN ATTEMPT!", name);
d115 1
a115 1
		    "map back to the address - POSSIBLE BREAKIN ATTEMPT!",
d140 2
a141 1
	int i, ipproto;
d155 1
a155 3
		logit("Connection from %.100s with IP options:%.800s",
		    ipaddr, text);
		packet_disconnect("Connection from %.100s with IP options:%.800s",
d169 1
d171 1
a171 1
	static int use_dns_done = 0;
d174 4
a177 6
	if (canonical_host_name != NULL) {
		if (use_dns_done != use_dns)
			xfree(canonical_host_name);
		else
			return canonical_host_name;
	}
d181 1
a181 2
		canonical_host_name = get_remote_hostname(
		    packet_get_connection_in(), use_dns);
d183 1
a183 1
		canonical_host_name = xstrdup("UNKNOWN");
d185 5
a189 2
	use_dns_done = use_dns;
	return canonical_host_name;
d202 1
d218 4
a221 3
	if (getnameinfo((struct sockaddr *)&addr, addrlen, ntop, sizeof(ntop),
	    NULL, 0, flags) != 0) {
		error("get_socket_address: getnameinfo %d failed", flags);
d297 1
d310 1
a310 1
			cleanup_exit(255);
d314 4
a317 3
	if (getnameinfo((struct sockaddr *)&from, fromlen, NULL, 0,
	    strport, sizeof(strport), NI_NUMERICSERV) != 0)
		fatal("get_sock_port: getnameinfo NI_NUMERICSERV failed");
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@OpenSSH-current
@
text
@d15 1
a15 1
RCSID("$OpenBSD: canohost.c,v 1.42 2005/02/18 03:05:53 djm Exp $");
a201 1
	int r;
d217 3
a219 4
	if ((r = getnameinfo((struct sockaddr *)&addr, addrlen, ntop,
	    sizeof(ntop), NULL, 0, flags)) != 0) {
		error("get_socket_address: getnameinfo %d failed: %s", flags,
		    r == EAI_SYSTEM ? strerror(errno) : gai_strerror(r));
a294 1
	int r;
d311 3
a313 4
	if ((r = getnameinfo((struct sockaddr *)&from, fromlen, NULL, 0,
	    strport, sizeof(strport), NI_NUMERICSERV)) != 0)
		fatal("get_sock_port: getnameinfo NI_NUMERICSERV failed: %s",
		    r == EAI_SYSTEM ? strerror(errno) : gai_strerror(r));
@


1.1.1.3
log
@most current OpenSSH.com
@
text
@d15 1
a15 1
RCSID("$OpenBSD: canohost.c,v 1.44 2005/06/17 02:44:32 djm Exp $");
d140 1
a140 2
	u_int i;
	int ipproto;
d310 1
a310 1
			return -1;
@


1.1.1.4
log
@Import current OpenSSH
@
text
@d15 1
a15 1
RCSID("$OpenBSD: canohost.c,v 1.47 2005/11/03 13:38:29 dtucker Exp $");
d46 3
a52 3
	if (from.ss_family == AF_INET)
		check_ip_options(sock, ntop);

d155 3
a157 1
		fatal("Connection from %.100s with IP options:%.800s",
a170 1
	char *host;
d172 1
a172 1
	static char *remote_ip = NULL;
d175 6
a180 4
	if (use_dns && canonical_host_name != NULL)
		return canonical_host_name;
	if (!use_dns && remote_ip != NULL)
		return remote_ip;
d184 2
a185 1
		host = get_remote_hostname(packet_get_connection_in(), use_dns);
d187 1
a187 1
		host = "UNKNOWN";
d189 2
a190 5
	if (use_dns)
		canonical_host_name = host;
	else
		remote_ip = host;
	return host;
@


1.1.1.5
log
@import OpenSSH-current
@
text
@d15 1
a15 1
RCSID("$OpenBSD: canohost.c,v 1.48 2005/12/28 22:46:06 stevesk Exp $");
d100 1
a100 1
		    "failed - POSSIBLE BREAK-IN ATTEMPT!", name);
d115 1
a115 1
		    "map back to the address - POSSIBLE BREAK-IN ATTEMPT!",
@


1.1.1.6
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@a0 1
/* $OpenBSD: canohost.c,v 1.53 2006/03/25 13:17:01 djm Exp $ */
d15 1
a15 2

#include <ctype.h>
d85 1
a85 1
			name[i] = (char)tolower(name[i]);
d100 1
a100 1
		    "[%s] failed - POSSIBLE BREAK-IN ATTEMPT!", name, ntop);
@


1.1.1.7
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: canohost.c,v 1.61 2006/08/03 03:34:41 deraadt Exp $ */
d15 1
a15 4
#include <sys/types.h>
#include <sys/socket.h>

#include <netinet/in.h>
a17 6
#include <errno.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
d19 1
a20 1
#include "packet.h"
@


1.1.1.8
log
@newer openssh
@
text
@d1 1
a1 1
/* $OpenBSD: canohost.c,v 1.62 2007/12/27 14:22:08 dtucker Exp $ */
a31 1
#include "misc.h"
d232 1
a232 1
		    ssh_gai_strerror(r));
d328 1
a328 1
		    ssh_gai_strerror(r));
@


1.1.1.9
log
@OpenSSH-current
@
text
@d1 1
a1 1
/* $OpenBSD: canohost.c,v 1.63 2008/06/12 00:03:49 dtucker Exp $ */
d84 1
a84 1
	if (getaddrinfo(name, NULL, &hints, &ai) == 0) {
@


1.1.1.10
log
@OpenSSH 5.2, or so
@
text
@d1 1
a1 1
/* $OpenBSD: canohost.c,v 1.64 2009/02/12 03:00:56 djm Exp $ */
d303 1
a303 1
int
@


1.1.1.11
log
@Let’s play the version number game – OpenSSH 5.3-current
@
text
@d1 1
a1 1
/* $OpenBSD: canohost.c,v 1.65 2009/05/27 06:31:25 andreas Exp $ */
a34 2
static char *canonical_host_ip = NULL;
static int cached_port = -1;
a264 10
void
clear_cached_addr(void)
{
	if (canonical_host_ip != NULL) {
		xfree(canonical_host_ip);
		canonical_host_ip = NULL;
	}
	cached_port = -1;
}

d273 2
d358 2
d361 2
a362 2
	if (cached_port == -1)
		cached_port = get_port(0);
d364 1
a364 1
	return cached_port;
@


