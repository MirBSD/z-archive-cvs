head	1.8;
access;
symbols
	cvs-200910041320:1.1.1.6
	cvs-200903221200:1.1.1.6
	cvs-200812162015:1.1.1.6
	cvs-200804031830:1.1.1.5
	MIRBSD_10:1.6.0.2
	MIRBSD_10_BASE:1.6
	cvs-200803022030:1.1.1.5
	cvs-200709131337:1.1.1.5
	cvs-200709021830:1.1.1.5
	cvs-200708201200:1.1.1.5
	cvs-200706161500:1.1.1.5
	cvs-200705192215:1.1.1.4
	cvs-200704292000:1.1.1.4
	cvs-200703080900:1.1.1.4
	cvs-200701251600:1.1.1.4
	cvs-200612111600:1.1.1.4
	cvs-200611090230:1.1.1.4
	OPENBSD_4_0:1.1.1.4
	MIRBSD_9_BASE:1.3
	cvs-200606162342:1.1.1.3
	cvs-200606022000:1.1.1.3
	cvs-200604191000:1.1.1.3
	cvs-200602220045:1.1.1.2
	MIRBSD_8:1.1.1.2.0.2
	MIRBSD_8_BASE:1.1.1.2
	cvs-200512201942:1.1.1.2
	cvs-200511231930:1.1.1.2
	cvs-200507211800:1.1.1.2
	cvs-200506221550:1.1.1.2
	cvs-200505050030:1.1.1.1
	cvs-200504291700:1.1.1.1
	cvs-200504261445:1.1.1.1
	cvs-200504141900:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.04.08.17.05.43;	author tg;	state Exp;
branches;
next	1.7;
commitid	10058E9187A2DAAF19A;

1.7
date	2008.12.16.20.55.23;	author tg;	state Exp;
branches;
next	1.6;
commitid	100494815C97ECEEDBF;

1.6
date	2007.08.08.19.09.48;	author tg;	state Exp;
branches;
next	1.5;
commitid	10046BA150E4442DCEC;

1.5
date	2007.06.16.15.41.50;	author tg;	state Exp;
branches;
next	1.4;
commitid	100467404D10F2EE204;

1.4
date	2006.09.20.21.40.59;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004511B578580E7F04;

1.3
date	2006.04.19.10.40.48;	author tg;	state Exp;
branches;
next	1.2;
commitid	100444613BD3A91C28B;

1.2
date	2006.02.22.02.16.47;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043FBC991512A442B;

1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.06.22.15.56.25;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	181342b98a38fe99;

1.1.1.3
date	2006.04.19.10.15.03;	author tg;	state Exp;
branches;
next	1.1.1.4;
commitid	10044460DB21E1F715C;

1.1.1.4
date	2006.09.20.19.06.48;	author tg;	state Exp;
branches;
next	1.1.1.5;
commitid	10045119150397FC669;

1.1.1.5
date	2007.06.16.15.11.12;	author tg;	state Exp;
branches;
next	1.1.1.6;
commitid	1004673FD85114A3F32;

1.1.1.6
date	2008.12.16.20.15.33;	author tg;	state Exp;
branches;
next	;
commitid	10049480C7A2701F5C0;


desc
@@


1.8
log
@sprinkle some explicit alignment
@
text
@/* $OpenBSD: mac.c,v 1.15 2008/06/13 00:51:47 dtucker Exp $ */
/*
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>

#include <openssl/hmac.h>

#include <string.h>
#include <signal.h>

#include "xmalloc.h"
#include "log.h"
#include "cipher.h"
#include "buffer.h"
#include "key.h"
#include "kex.h"
#include "mac.h"
#include "misc.h"

__RCSID("$MirOS: src/usr.bin/ssh/mac.c,v 1.6 2007/08/08 19:09:48 tg Exp $");

#include "umac.h"

#define SSH_EVP		1	/* OpenSSL EVP-based MAC */
#define SSH_UMAC	2	/* UMAC (not integrated with OpenSSL) */

struct {
	const char	*name;
	int		type;
	const EVP_MD *	(*mdfunc)(void);
	int		truncatebits;	/* truncate digest if != 0 */
	int		key_len;	/* just for UMAC */
	int		len;		/* just for UMAC */
} macs[] = {
	{ "hmac-sha1",			SSH_EVP, EVP_sha1, 0, -1, -1 },
	{ "hmac-sha1-96",		SSH_EVP, EVP_sha1, 96, -1, -1 },
	{ "hmac-md5",			SSH_EVP, EVP_md5, 0, -1, -1 },
	{ "hmac-md5-96",		SSH_EVP, EVP_md5, 96, -1, -1 },
	{ "hmac-ripemd160",		SSH_EVP, EVP_ripemd160, 0, -1, -1 },
	{ "hmac-ripemd160@@openssh.com",	SSH_EVP, EVP_ripemd160, 0, -1, -1 },
	{ "umac-64@@openssh.com",	SSH_UMAC, NULL, 0, 128, 64 },
	{ NULL,				0, NULL, 0, -1, -1 }
};

static void
mac_setup_by_id(Mac *mac, int which)
{
	int evp_len;
	mac->type = macs[which].type;
	if (mac->type == SSH_EVP) {
		mac->evp_md = (*macs[which].mdfunc)();
		if ((evp_len = EVP_MD_size(mac->evp_md)) <= 0)
			fatal("mac %s len %d", mac->name, evp_len);
		mac->key_len = mac->mac_len = (u_int)evp_len;
	} else {
		mac->mac_len = macs[which].len / 8;
		mac->key_len = macs[which].key_len / 8;
		mac->umac_ctx = NULL;
	}
	if (macs[which].truncatebits != 0)
		mac->mac_len = macs[which].truncatebits / 8;
}

int
mac_setup(Mac *mac, char *name)
{
	int i;

	for (i = 0; macs[i].name; i++) {
		if (strcmp(name, macs[i].name) == 0) {
			if (mac != NULL)
				mac_setup_by_id(mac, i);
			debug2("mac_setup: found %s", name);
			return (0);
		}
	}
	debug2("mac_setup: unknown %s", name);
	return (-1);
}

int
mac_init(Mac *mac)
{
	if (mac->key == NULL)
		fatal("mac_init: no key");
	switch (mac->type) {
	case SSH_EVP:
		if (mac->evp_md == NULL)
			return -1;
		HMAC_Init(&mac->evp_ctx, mac->key, mac->key_len, mac->evp_md);
		return 0;
	case SSH_UMAC:
		mac->umac_ctx = umac_new(mac->key);
		return 0;
	default:
		return -1;
	}
}

u_char *
mac_compute(Mac *mac, u_int32_t seqno, u_char *data, int datalen)
{
	static u_char m[EVP_MAX_MD_SIZE] __attribute__((__aligned__(8)));
	u_char b[4], nonce[8] __attribute__((__aligned__(4)));;

	if (mac->mac_len > sizeof(m))
		fatal("mac_compute: mac too long %u %lu",
		    mac->mac_len, (u_long)sizeof(m));

	switch (mac->type) {
	case SSH_EVP:
		put_u32(b, seqno);
		/* reset HMAC context */
		HMAC_Init(&mac->evp_ctx, NULL, 0, NULL);
		HMAC_Update(&mac->evp_ctx, b, sizeof(b));
		HMAC_Update(&mac->evp_ctx, data, datalen);
		HMAC_Final(&mac->evp_ctx, m, NULL);
		break;
	case SSH_UMAC:
		put_u64(nonce, seqno);
		umac_update(mac->umac_ctx, data, datalen);
		umac_final(mac->umac_ctx, m, nonce);
		break;
	default:
		fatal("mac_compute: unknown MAC type");
	}
	return (m);
}

void
mac_clear(Mac *mac)
{
	if (mac->type == SSH_UMAC) {
		if (mac->umac_ctx != NULL)
			umac_delete(mac->umac_ctx);
	} else if (mac->evp_md != NULL)
		HMAC_cleanup(&mac->evp_ctx);
	mac->evp_md = NULL;
	mac->umac_ctx = NULL;
}

/* XXX copied from ciphers_valid */
#define	MAC_SEP	","
int
mac_valid(const char *names)
{
	char *maclist, *cp, *p;

	if (names == NULL || strcmp(names, "") == 0)
		return (0);
	maclist = cp = xstrdup(names);
	for ((p = strsep(&cp, MAC_SEP)); p && *p != '\0';
	    (p = strsep(&cp, MAC_SEP))) {
		if (mac_setup(NULL, p) < 0) {
			debug("bad mac %s [%s]", p, names);
			xfree(maclist);
			return (0);
		} else {
			debug3("mac ok: %s [%s]", p, names);
		}
	}
	debug3("macs ok: [%s]", names);
	xfree(maclist);
	return (1);
}
@


1.7
log
@fastmerge, do not use yet!
@
text
@d125 2
a126 2
	static u_char m[EVP_MAX_MD_SIZE];
	u_char b[4], nonce[8];
@


1.6
log
@more format strings: usr.bin and usr.sbin/[a..timed]
@
text
@d1 1
a1 1
/* $OpenBSD: mac.c,v 1.14 2007/06/07 19:37:34 pvalchev Exp $ */
d42 1
a42 1
__RCSID("$MirOS: src/usr.bin/ssh/mac.c,v 1.5 2007/06/16 15:41:50 tg Exp $");
d129 2
a130 2
		fatal("mac_compute: mac too long %u %zu",
		    mac->mac_len, sizeof(m));
@


1.5
log
@sync’n’bump
@
text
@d42 1
a42 1
__RCSID("$MirOS: src/usr.bin/ssh/mac.c,v 1.4 2006/09/20 21:40:59 tg Exp $");
d129 1
a129 1
		fatal("mac_compute: mac too long %u %lu",
@


1.4
log
@finish merging
@
text
@d1 1
a1 1
/* $OpenBSD: mac.c,v 1.12 2006/08/03 03:34:42 deraadt Exp $ */
d42 6
a47 1
__RCSID("$MirOS$");
d51 1
d54 2
d57 8
a64 7
	{ "hmac-sha1",			EVP_sha1, 0, },
	{ "hmac-sha1-96",		EVP_sha1, 96 },
	{ "hmac-md5",			EVP_md5, 0 },
	{ "hmac-md5-96",		EVP_md5, 96 },
	{ "hmac-ripemd160",		EVP_ripemd160, 0 },
	{ "hmac-ripemd160@@openssh.com",	EVP_ripemd160, 0 },
	{ NULL,				NULL, 0 }
d67 19
d87 1
a87 1
mac_init(Mac *mac, char *name)
d89 1
a89 1
	int i, evp_len;
d93 3
a95 9
			if (mac != NULL) {
				mac->md = (*macs[i].mdfunc)();
				if ((evp_len = EVP_MD_size(mac->md)) <= 0)
					fatal("mac %s len %d", name, evp_len);
				mac->key_len = mac->mac_len = (u_int)evp_len;
				if (macs[i].truncatebits != 0)
					mac->mac_len = macs[i].truncatebits/8;
			}
			debug2("mac_init: found %s", name);
d99 1
a99 1
	debug2("mac_init: unknown %s", name);
d103 19
a124 1
	HMAC_CTX c;
d126 1
a126 1
	u_char b[4];
a127 2
	if (mac->key == NULL)
		fatal("mac_compute: no key");
d129 20
a148 7
		fatal("mac_compute: mac too long");
	HMAC_Init(&c, mac->key, mac->key_len, mac->md);
	put_u32(b, seqno);
	HMAC_Update(&c, b, sizeof(b));
	HMAC_Update(&c, data, datalen);
	HMAC_Final(&c, m, NULL);
	HMAC_cleanup(&c);
d152 12
d176 1
a176 1
		if (mac_init(NULL, p) < 0) {
@


1.3
log
@merge and clean up
@
text
@d1 1
a1 1
/* $OpenBSD: mac.c,v 1.10 2006/03/30 09:58:15 djm Exp $ */
d26 1
a26 2
#include "includes.h"
__RCSID("$MirOS: src/usr.bin/ssh/mac.c,v 1.2 2006/02/22 02:16:47 tg Exp $");
d30 3
d36 2
d42 2
@


1.2
log
@fix a lot of and kludge a few more __CRAZY problems, sync rcs id
@
text
@d1 1
d27 1
a27 1
RCSID("$MirOS: mac.c,v 1.7 2005/06/17 02:44:32 djm Exp $");
a31 1
#include "getput.h"
d36 1
d87 1
a87 1
	PUT_32BIT(b, seqno);
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
RCSID("$OpenBSD: mac.c,v 1.6 2003/09/18 13:02:21 miod Exp $");
d38 1
a38 1
	char		*name;
d54 2
a55 1
	int i;
d60 3
a62 1
				mac->key_len = mac->mac_len = EVP_MD_size(mac->md);
d83 1
a83 1
	if ((u_int)mac->mac_len > sizeof(m))
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@most current OpenSSH.com
@
text
@d26 1
a26 1
RCSID("$OpenBSD: mac.c,v 1.7 2005/06/17 02:44:32 djm Exp $");
d54 1
a54 2
	int i, evp_len;

d59 1
a59 3
				if ((evp_len = EVP_MD_size(mac->md)) <= 0)
					fatal("mac %s len %d", name, evp_len);
				mac->key_len = mac->mac_len = (u_int)evp_len;
d80 1
a80 1
	if (mac->mac_len > sizeof(m))
@


1.1.1.3
log
@I decided we'd better upgrade OpenSSH before releasing to the general public
@
text
@a0 1
/* $OpenBSD: mac.c,v 1.10 2006/03/30 09:58:15 djm Exp $ */
d26 1
d31 1
a35 1
#include "misc.h"
d86 1
a86 1
	put_u32(b, seqno);
@


1.1.1.4
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/* $OpenBSD: mac.c,v 1.12 2006/08/03 03:34:42 deraadt Exp $ */
d26 1
a26 1
#include <sys/types.h>
a29 3
#include <string.h>
#include <signal.h>

a32 2
#include "buffer.h"
#include "key.h"
@


1.1.1.5
log
@Import latest OpenSSH and OpenBSD-libssl
@
text
@d1 1
a1 1
/* $OpenBSD: mac.c,v 1.14 2007/06/07 19:37:34 pvalchev Exp $ */
a41 5
#include "umac.h"

#define SSH_EVP		1	/* OpenSSL EVP-based MAC */
#define SSH_UMAC	2	/* UMAC (not integrated with OpenSSL) */

a43 1
	int		type;
a45 2
	int		key_len;	/* just for UMAC */
	int		len;		/* just for UMAC */
d47 7
a53 8
	{ "hmac-sha1",			SSH_EVP, EVP_sha1, 0, -1, -1 },
	{ "hmac-sha1-96",		SSH_EVP, EVP_sha1, 96, -1, -1 },
	{ "hmac-md5",			SSH_EVP, EVP_md5, 0, -1, -1 },
	{ "hmac-md5-96",		SSH_EVP, EVP_md5, 96, -1, -1 },
	{ "hmac-ripemd160",		SSH_EVP, EVP_ripemd160, 0, -1, -1 },
	{ "hmac-ripemd160@@openssh.com",	SSH_EVP, EVP_ripemd160, 0, -1, -1 },
	{ "umac-64@@openssh.com",	SSH_UMAC, NULL, 0, 128, 64 },
	{ NULL,				0, NULL, 0, -1, -1 }
a55 19
static void
mac_setup_by_id(Mac *mac, int which)
{
	int evp_len;
	mac->type = macs[which].type;
	if (mac->type == SSH_EVP) {
		mac->evp_md = (*macs[which].mdfunc)();
		if ((evp_len = EVP_MD_size(mac->evp_md)) <= 0)
			fatal("mac %s len %d", mac->name, evp_len);
		mac->key_len = mac->mac_len = (u_int)evp_len;
	} else {
		mac->mac_len = macs[which].len / 8;
		mac->key_len = macs[which].key_len / 8;
		mac->umac_ctx = NULL;
	}
	if (macs[which].truncatebits != 0)
		mac->mac_len = macs[which].truncatebits / 8;
}

d57 1
a57 1
mac_setup(Mac *mac, char *name)
d59 1
a59 1
	int i;
d63 9
a71 3
			if (mac != NULL)
				mac_setup_by_id(mac, i);
			debug2("mac_setup: found %s", name);
d75 1
a75 1
	debug2("mac_setup: unknown %s", name);
a78 19
int
mac_init(Mac *mac)
{
	if (mac->key == NULL)
		fatal("mac_init: no key");
	switch (mac->type) {
	case SSH_EVP:
		if (mac->evp_md == NULL)
			return -1;
		HMAC_Init(&mac->evp_ctx, mac->key, mac->key_len, mac->evp_md);
		return 0;
	case SSH_UMAC:
		mac->umac_ctx = umac_new(mac->key);
		return 0;
	default:
		return -1;
	}
}

d82 1
d84 1
a84 1
	u_char b[4], nonce[8];
d86 2
d89 7
a95 20
		fatal("mac_compute: mac too long %u %lu",
		    mac->mac_len, sizeof(m));

	switch (mac->type) {
	case SSH_EVP:
		put_u32(b, seqno);
		/* reset HMAC context */
		HMAC_Init(&mac->evp_ctx, NULL, 0, NULL);
		HMAC_Update(&mac->evp_ctx, b, sizeof(b));
		HMAC_Update(&mac->evp_ctx, data, datalen);
		HMAC_Final(&mac->evp_ctx, m, NULL);
		break;
	case SSH_UMAC:
		put_u64(nonce, seqno);
		umac_update(mac->umac_ctx, data, datalen);
		umac_final(mac->umac_ctx, m, nonce);
		break;
	default:
		fatal("mac_compute: unknown MAC type");
	}
a98 12
void
mac_clear(Mac *mac)
{
	if (mac->type == SSH_UMAC) {
		if (mac->umac_ctx != NULL)
			umac_delete(mac->umac_ctx);
	} else if (mac->evp_md != NULL)
		HMAC_cleanup(&mac->evp_ctx);
	mac->evp_md = NULL;
	mac->umac_ctx = NULL;
}

d111 1
a111 1
		if (mac_setup(NULL, p) < 0) {
@


1.1.1.6
log
@OpenSSH-current
@
text
@d1 1
a1 1
/* $OpenBSD: mac.c,v 1.15 2008/06/13 00:51:47 dtucker Exp $ */
d128 1
a128 1
		    mac->mac_len, (u_long)sizeof(m));
@


