head	1.21;
access;
symbols
	mksh-50-1:1.20
	mksh-49-1:1.20
	mksh-46-2:1.20
	mksh-46-1:1.20
	mksh-45-1:1.20
	mksh-44-1:1.20
	mksh-43-1:1.20
	mksh-42b-1wtf70_1:1.20
	mksh-wtf-wheezy:1.20.0.2
	mksh-42b-1:1.20
	mksh-R41:1.18
	mksh-R40e:1.18
	mksh-R40:1.17
	MIRBSD_10:1.3.0.4
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2020.01.22.01.57.44;	author tg;	state Exp;
branches;
next	1.20;
commitid	1005E27AC206B9B81AD;

1.20
date	2012.12.22.22.19.27;	author tg;	state Exp;
branches;
next	1.19;
commitid	10050D6317A0F4AD9BC;

1.19
date	2012.12.22.22.15.23;	author tg;	state Exp;
branches;
next	1.18;
commitid	10050D6310375B6971C;

1.18
date	2011.08.17.20.54.24;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004E4C2A7C06538C5F;

1.17
date	2011.03.13.15.10.09;	author tg;	state Exp;
branches;
next	1.16;
commitid	1004D7CDE39207C339B;

1.16
date	2011.03.13.01.14.16;	author tg;	state Exp;
branches;
next	1.15;
commitid	1004D7C1A7A5A21E183;

1.15
date	2010.07.17.22.09.29;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004C42295452E71B6E;

1.14
date	2010.01.28.16.21.48;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004B61B9B01A6BC644;

1.13
date	2010.01.28.16.20.51;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004B61B97530C73B34;

1.12
date	2009.12.12.22.27.13;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004B2418AF282F4231;

1.11
date	2009.09.19.22.26.55;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004AB55AA4341EC755;

1.10
date	2009.08.01.20.38.50;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004A74A7D72CDCB307;

1.9
date	2009.08.01.19.56.01;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004A749DDF0E9CDA47;

1.8
date	2009.08.01.19.21.28;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004A7495BD212E244A;

1.7
date	2009.08.01.15.19.13;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004A745D04467E0C52;

1.6
date	2009.08.01.15.17.30;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004A745C996F99494F;

1.5
date	2009.07.30.19.10.33;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004A71F0384C422D47;

1.4
date	2009.07.25.18.28.24;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004A6B4E471DB88B03;

1.3
date	2005.08.26.22.04.19;	author tg;	state Exp;
branches;
next	1.2;
commitid	57a8430f91c30d91;

1.2
date	2005.07.23.18.53.22;	author tg;	state Exp;
branches;
next	1.1;
commitid	56c042e2921d4c90;

1.1
date	2005.02.05.17.29.48;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.48;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.21.00.10;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	560042e0092f571e;

1.1.1.3
date	2010.07.17.20.24.39;	author tg;	state Exp;
branches;
next	;
commitid	1004C42119C7A1E6D3E;


desc
@@


1.21
log
@fix “printf "%x" \'✓” using signed char extension
@
text
@/*	$OpenBSD: printf.c,v 1.17 2009/10/27 23:59:41 deraadt Exp $	*/

/*-
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef MKSH_PRINTF_BUILTIN
/* MirBSD Korn Shell */
#include "sh.h"
#else
/* stand-alone executable */
#include <sys/types.h>
#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <limits.h>
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define vstrchr strchr
#endif

__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.20 2012/12/22 22:19:27 tg Exp $");

static int	 print_escape_str(const char *);
static int	 print_escape(const char *);

static int	 getchr(void);
#ifndef MKSH_PRINTF_BUILTIN
static double	 getdouble(void);
#endif
static int	 getinteger(void);
static long	 getlong(void);
static unsigned long getulong(void);
static const char *getstr(void);
static char	*mklong(const char *, int);
static void      check_conversion(const char *, const char *);
static int	 usage(void);
static int	 real_main(char *, const char *[]);

static int	rval;
static const char **gargv;

#ifdef MKSH_PRINTF_BUILTIN
static int s_get(void);
static void s_put(int);
static void s_prt(int);

static const char *s_ptr;

#define isxdigit(c)	(((c) >= '0' && (c) <= '9') || ((c) >= 'a' && (c) <= 'f') || ((c) >= 'A' && (c) <= 'F'))
#endif

#define isodigit(c)	((c) >= '0' && (c) <= '7')
#define octtobin(c)	((c) - '0')
#define hextobin(c)	((c) >= 'A' && (c) <= 'F' ? c - 'A' + 10 : (c) >= 'a' && (c) <= 'f' ? c - 'a' + 10 : c - '0')

#define PF(f, func)	do {						\
	if (fieldwidth)							\
		if (precision)						\
			uprintf(f, fieldwidth, precision, func);	\
		else							\
			uprintf(f, fieldwidth, func);			\
	else if (precision)						\
		uprintf(f, precision, func);				\
	else								\
		uprintf(f, func);					\
} while (/* CONSTCOND */ 0)

#ifndef vstrchr
#define vstrchr		strchr
#endif

#ifndef cstrerror
#define cstrerror(e)	((const char *)strerror(e))
#endif

#ifdef MKSH_PRINTF_BUILTIN
#define ufprintf	shf_fprintf
#define uprintf		shprintf
#define uputc(c)	shf_putchar((c), shl_stdout)
#define ustderr		shl_out
#define uwarnx		warningf
#define UWARNX		false,

int
c_printf(const char **wp)
{
	int rv;
	const char *old_kshname;
	char *fmt;
	uint8_t old_utfmode;

	old_kshname = kshname;
	kshname = wp[0];
	++wp;
	if (wp[0] && !strcmp(wp[0], "--"))
		++wp;
	if (wp[0]) {
		strdupx(fmt, wp[0], ATEMP);
		old_utfmode = UTFMODE;
		UTFMODE = 0;
		rv = real_main(fmt, wp);
		UTFMODE = old_utfmode;
		afree(fmt, ATEMP);
	} else
		rv = usage();
	kshname = old_kshname;
	return (rv);
}
#else
#define ufprintf	fprintf
#define uprintf		printf
#define uputc		putchar
#define ustderr		stderr
#define uwarnx		warnx
#define UWARNX		/* nothing */

int
main(int argc, char *argv[])
{
	setlocale(LC_ALL, "");

	if (argc > 1 && !strcmp(argv[1], "--")) {
		--argc;
		++argv;
	}

	++argv;
	return (argc < 2 ? usage() : real_main(argv[0], (const char **)argv));
}
#endif

static int
real_main(char *format, const char *argv[])
{
	char *fmt, *start;
	int fieldwidth, precision;
	char convch, nextch;

	gargv = ++argv;

#define SKIP1	"#-+ 0"
#define SKIP2	"0123456789"
	do {
		/*
		 * Basic algorithm is to scan the format string for conversion
		 * specifications -- once one is found, find out if the field
		 * width or precision is a '*'; if it is, gather up value.
		 * Note, format strings are reused as necessary to use up the
		 * provided arguments, arguments of zero/null string are
		 * provided to use up the format string.
		 */

		/* find next format specification */
		for (fmt = format; *fmt; fmt++) {
			switch (*fmt) {
			case '%':
				start = fmt++;

				if (*fmt == '%') {
					uputc('%');
					break;
				} else if (*fmt == 'b') {
					const char *p = getstr();
					if (print_escape_str(p)) {
						return (rval);
					}
					break;
				} else if (!*fmt) {
					goto synerr;
				}

				/* skip to field width */
				for (; vstrchr(SKIP1, *fmt); ++fmt)
					;
				if (*fmt == '*') {
					++fmt;
					fieldwidth = getinteger();
				} else if (!*fmt) {
					goto synerr;
				} else
					fieldwidth = 0;

				/* skip to field precision */
				for (; vstrchr(SKIP2, *fmt); ++fmt)
					;
				precision = 0;
				if (*fmt == '.') {
					++fmt;
					if (*fmt == '*') {
						++fmt;
						precision = getinteger();
					}
					if (!*fmt)
						goto synerr;
					for (; vstrchr(SKIP2, *fmt); ++fmt)
						;
				}

				if (!*fmt) {
 synerr:
					uwarnx(UWARNX "missing format character");
					return (1);
				}

				convch = *fmt;
				nextch = *(fmt + 1);
				*(fmt + 1) = '\0';
				switch(convch) {
				case 'c': {
					char p = getchr();
					PF(start, p);
					break;
				}
				case 's': {
					const char *p = getstr();
					PF(start, p);
					break;
				}
				case 'd':
				case 'i': {
					long p;
					char *f = mklong(start, convch);
					if (!f) {
						uwarnx(UWARNX "out of memory");
						return (1);
					}
					p = getlong();
					PF(f, p);
					break;
				}
				case 'o':
				case 'u':
				case 'x':
				case 'X': {
					unsigned long p;
					char *f = mklong(start, convch);
					if (!f) {
						uwarnx(UWARNX "out of memory");
						return (1);
					}
					p = getulong();
					PF(f, p);
					break;
				}
#ifndef MKSH_PRINTF_BUILTIN
#if 0
				case 'a':
				case 'A':
#endif
				case 'e':
				case 'E':
				case 'f':
				case 'F':
				case 'g':
				case 'G': {
					double p = getdouble();
					PF(start, p);
					break;
				}
#endif

				default:
					uwarnx(UWARNX "%s: invalid directive", start);
					return (1);
				}
				*(fmt + 1) = nextch;
				break;

			case '\\':
				fmt += print_escape(fmt);
				break;

			default:
				uputc(*fmt);
				break;
			}
		}
	} while (gargv > argv && *gargv);

	return (rval);
}


/*
 * Print SysV echo(1) style escape string
 *	Halts processing string and returns 1 if a \c escape is encountered.
 */
static int
print_escape_str(const char *str)
{
#ifndef MKSH_PRINTF_BUILTIN
	int value;
#endif
	int c;

	while (*str) {
		if (*str == '\\') {
#ifdef MKSH_PRINTF_BUILTIN
			s_ptr = str + 1;
			c = unbksl(false, s_get, s_put);
			str = s_ptr;
			if (c == -1) {
				if ((c = *str++) == 'c')
					return (1);
				else if (!c)
					--str;
				uputc(c);
				uwarnx(UWARNX
				    "unknown escape sequence `\\%c'", c);
				rval = 1;
			} else
				s_prt(c);
			continue;
#else
			str++;
			/*
			 * %b string octal constants are not like those in C.
			 * They start with a \0, and are followed by 0, 1, 2,
			 * or 3 octal digits.
			 */
			if (*str == '0') {
				str++;
				for (c = 3, value = 0; c-- && isodigit(*str); str++) {
					value <<= 3;
					value += octtobin(*str);
				}
				uputc(value);
				str--;
			} else if (*str == 'c') {
				return (1);
			} else {
				str--;
				str += print_escape(str);
			}
#endif
		} else {
			uputc(*str);
		}
		str++;
	}

	return (0);
}

/*
 * Print "standard" escape characters
 */
static int
print_escape(const char *str)
{
#ifdef MKSH_PRINTF_BUILTIN
	int c;

	s_ptr = str + 1;
	c = unbksl(true, s_get, s_put);
	if (c == -1) {
		s_ptr = str + 1;
		switch ((c = *s_ptr++)) {
		case '\\':
		case '\'':
		case '"':
			break;
		case '\0':
			--s_ptr;
			/* FALLTHROUGH */
		default:
			uwarnx(UWARNX "unknown escape sequence `\\%c'", c);
			rval = 1;
		}
	}
	s_prt(c);
	return (s_ptr - str - 1);
#else
	const char *start = str;
	int value;
	int c;

	str++;

	switch (*str) {
	case '0': case '1': case '2': case '3':
	case '4': case '5': case '6': case '7':
		for (c = 3, value = 0; c-- && isodigit(*str); str++) {
			value <<= 3;
			value += octtobin(*str);
		}
		uputc(value);
		return (str - start - 1);
		/* NOTREACHED */

	case 'x':
		str++;
		for (value = 0; isxdigit(*str); str++) {
			value <<= 4;
			value += hextobin(*str);
		}
		if (value > UCHAR_MAX) {
			uwarnx(UWARNX "escape sequence out of range for character");
			rval = 1;
		}
		uputc(value);
		return (str - start - 1);
		/* NOTREACHED */

	case '\\':			/* backslash */
		uputc('\\');
		break;

	case '\'':			/* single quote */
		uputc('\'');
		break;

	case '"':			/* double quote */
		uputc('"');
		break;

	case 'a':			/* alert */
		uputc('\a');
		break;

	case 'b':			/* backspace */
		uputc('\b');
		break;

	case 'e':			/* escape */
		uputc(033);
		break;

	case 'f':			/* form-feed */
		uputc('\f');
		break;

	case 'n':			/* newline */
		uputc('\n');
		break;

	case 'r':			/* carriage-return */
		uputc('\r');
		break;

	case 't':			/* tab */
		uputc('\t');
		break;

	case 'v':			/* vertical-tab */
		uputc('\v');
		break;

	default:
		uputc(*str);
		uwarnx(UWARNX "unknown escape sequence `\\%c'", *str);
		rval = 1;
	}

	return (1);
#endif
}

static char *
mklong(const char *str, int ch)
{
	static char *copy;
	static size_t copysize;
	size_t len;

	len = strlen(str) + 2;
	if (copysize < len) {
		char *newcopy;

		copysize = len + 256;

		newcopy = realloc(copy, copysize);
		if (newcopy == NULL) {
			copysize = 0;
			free(copy);
			copy = NULL;
			return (NULL);
		}
		copy = newcopy;
	}
	(void) memmove(copy, str, len - 3);
	copy[len - 3] = 'l';
	copy[len - 2] = ch;
	copy[len - 1] = '\0';
	return (copy);
}

static int
getchr(void)
{
	if (!*gargv)
		return ((int)'\0');
	return ((int)**gargv++);
}

static const char *
getstr(void)
{
	if (!*gargv)
		return ("");
	return (*gargv++);
}

static const char *number = "+-.0123456789";
static int
getinteger(void)
{
	if (!*gargv)
		return (0);

	if (**gargv && vstrchr(number, **gargv))
		return (atoi(*gargv++));

	return (0);
}

static long
getlong(void)
{
	long val;
	char *ep;

	if (!*gargv)
		return (0L);

	if (**gargv == '\"' || **gargv == '\'')
		return ((long)*((*gargv++)+1));

	errno = 0;
	val = strtol(*gargv, &ep, 0);
	check_conversion(*gargv++, ep);
	return (val);
}

static unsigned long
getulong(void)
{
	unsigned long val;
	char *ep;

	if (!*gargv)
		return (0UL);

	if (**gargv == '\"' || **gargv == '\'')
		return ((unsigned long)(unsigned char)*((*gargv++) + 1));

	errno = 0;
	val = strtoul(*gargv, &ep, 0);
	check_conversion(*gargv++, ep);
	return (val);
}

#ifndef MKSH_PRINTF_BUILTIN
static double
getdouble(void)
{
	double val;
	char *ep;

	if (!*gargv)
		return (0.0);

	if (**gargv == '\"' || **gargv == '\'')
		return ((double)*((*gargv++)+1));

	errno = 0;
	val = strtod(*gargv, &ep);
	check_conversion(*gargv++, ep);
	return (val);
}
#endif

static void
check_conversion(const char *s, const char *ep)
{
	if (*ep) {
		if (ep == s)
			uwarnx(UWARNX "%s: expected numeric value", s);
		else
			uwarnx(UWARNX "%s: not completely converted", s);
		rval = 1;
	} else if (errno == ERANGE) {
		uwarnx(UWARNX "%s: %s", s, cstrerror(ERANGE));
		rval = 1;
	}
}

static int
usage(void)
{
	ufprintf(ustderr, "usage: printf format [arg ...]\n");
	return (1);
}

#ifdef MKSH_PRINTF_BUILTIN
static int
s_get(void)
{
	return (*s_ptr++);
}

static void
s_put(int c MKSH_A_UNUSED)
{
	--s_ptr;
}

static void
s_prt(int c)
{
	char ts[4];

	if ((unsigned int)c < 0x100) {
		ts[0] = c;
		c = 1;
	} else
		c = (int)utf_wctomb(ts, c - 0x100);

	shf_write(ts, c, shl_stdout);
}
#endif
@


1.20
log
@POSIX specifies printf(1) field width and precision are in bytes, not, as
it would make sense, characters; let printf-as-builtin honour it (#659969)

XXX printf-as-builtin is a nightmare anyway; might want to rename the
XXX builtin from "printf" to "printf_builtin" and predefine a function
XXX printf that calls it so switching away from it on Debian would be
XXX as simple as “unset -f printf” (or… RoDD’ing Md ☺)
@
text
@d50 1
a50 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.18 2011/08/17 20:54:24 tg Exp $");
d574 1
a574 1
		return ((unsigned long) *((*gargv++)+1));
@


1.19
log
@let printf stuff compile again after cstrerror-related change
@
text
@d119 1
d128 2
d131 1
@


1.18
log
@I believe this fixes “casting size_t to int loses precision” on LP64
warnings Jerker Bäck gets on Microsoft Visual Studio compiling mksh
@
text
@d50 1
a50 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.17 2011/03/13 15:10:09 tg Exp $");
d101 4
d608 1
a608 1
		uwarnx(UWARNX "%s: %s", s, strerror(ERANGE));
@


1.17
log
@thou shalt not call strchr(3) with c == 0
… unless you want to locate the string-terminating NUL actually!

segfaults in mksh on Debian reported by Jb boin on dedior, thanks!
@
text
@d50 1
a50 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.16 2011/03/13 01:14:16 tg Exp $");
d484 2
a485 2
	static int copysize;
	int len;
d490 1
d638 1
a638 1
		c = utf_wctomb(ts, c - 0x100);
@


1.16
log
@__CRAZY=Yes MKC_DEBG=cpp in mksh
@
text
@d50 1
a50 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.15 2010/07/17 22:09:29 tg Exp $");
d189 2
d199 2
d214 2
d221 1
d531 1
a531 1
	if (vstrchr(number, **gargv))
@


1.15
log
@• merge printf from OpenBSD
• deactivate %a and %A since our libc doesn’t have it
• rewrite the mksh integration code to use shf instead of stdio, removing
  floating point support always in the process, as shf doesn’t support it
  ⇒ saves 11114 (6706 text, 168 data, 4240 bss) with dietlibc on Debian
• fix -Wall -Wextra -Wformat -Wstrict-aliasing=2 for gcc (Debian 4.4.4-7)
• fix these and -Wc++-compat for gcc version 4.6.0 20100711 (experimental)
  [trunk revision 162057] (Debian 20100711-1) except:
  – a few enum warnings that relate to eglibc’s {g,s}etrlimit() functions
    taking an enum instead of an int because they’re too stupid to adhere
    to POSIX interfaces they design by themselves
  – all “request for implicit conversion” involving a "void *" on one side
• tweak the manual page somewhat more
@
text
@d46 2
d50 1
a50 1
__RCSID("$MirOS$");
d192 1
a192 1
				for (; strchr(SKIP1, *fmt); ++fmt)
d201 1
a201 1
				for (; strchr(SKIP2, *fmt); ++fmt)
d210 1
a210 1
					for (; strchr(SKIP2, *fmt); ++fmt)
@


1.14
log
@oh well, move to better place
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.12 2004/05/31 15:48:26 pedro Exp $	*/
a32 1

a34 2
#include <ctype.h>

a35 1

a37 1

d42 1
a42 1
#include <stdarg.h>
a45 7

/* NetBSD ash */
#ifdef SHELL
#define main printfcmd
#include "bltin.h"
#endif

d48 1
a48 4
__COPYRIGHT("Copyright (c) 1989 The Regents of the University of California.\n\
All rights reserved.\n");
__SCCSID("@@(#)printf.c	5.9 (Berkeley) 6/1/90");
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.13 2010/01/28 16:20:51 tg Exp $");
d50 2
a51 2
static int print_escape_str(const char *);
static int print_escape(const char *);
d53 3
a55 3
static int getchr(void);
#ifndef NO_STRTOD
static double getdouble(void);
d57 2
a58 2
static int getinteger(void);
static long getlong(void);
d61 4
a64 2
static char *mklong(const char *, int);
static void check_conversion(const char *, const char *);
d66 2
a67 2
static int usage(void);
static int real_main(char *, const char *[]);
d75 2
a78 3
static int rval;
static const char **gargv;

d83 10
a92 10
#define PF(f, func) do { \
	if (fieldwidth) \
		if (precision) \
			(void)printf(f, fieldwidth, precision, func); \
		else \
			(void)printf(f, fieldwidth, func); \
	else if (precision) \
		(void)printf(f, precision, func); \
	else \
		(void)printf(f, func); \
d95 4
d100 28
a127 2
#define uwarnx warningf
#define UWARNX false,
d129 16
a144 3
#define uwarnx warnx
#define UWARNX /* nothing */
#endif
d146 3
a148 2
#ifndef vstrchr
#define vstrchr	strchr
a157 1
	++argv;
d161 1
a161 1
#define SKIP2	"*0123456789"
d179 1
a179 1
					putchar ('%');
d190 13
a202 6
				for (; strchr(SKIP1, *fmt); ++fmt) ;
				fieldwidth = *fmt == '*' ? getinteger() : 0;

				/* skip to possible '.', get following precision */
				for (; strchr(SKIP2, *fmt); ++fmt) ;
				if (*fmt == '.')
d204 7
a210 1
				precision = *fmt == '*' ? getinteger() : 0;
a211 1
				for (; strchr(SKIP2, *fmt); ++fmt) ;
d214 1
a214 1
					return(1);
d257 5
a261 1
#ifndef NO_STRTOD
d265 1
d273 1
d276 1
a276 1
					return(1);
d286 1
a286 1
				putchar (*fmt);
a294 27
#ifdef MKSH_PRINTF_BUILTIN
int
c_printf(const char **wp)
{
	int rv;
	const char *old_kshname;
	char *fmt;

	old_kshname = kshname;
	kshname = wp[0];
	shf_flush(shl_stdout);
	shf_flush(shl_out);
	strdupx(fmt, wp[1], ATEMP);
	rv = wp[1] ? real_main(fmt, wp) : usage();
	afree(fmt, ATEMP);
	fflush(NULL);
	kshname = old_kshname;
	return (rv);
}
#else
int
main(int argc, char *argv[])
{
	return (argc < 2 ? usage() : real_main(argv[1], (const char **)argv));
}
#endif

d319 1
a319 1
				putchar(c);
d339 1
a339 1
				putchar (value);
d342 1
a342 1
				return 1;
d349 1
a349 1
			putchar (*str);
d354 1
a354 1
	return 0;
d399 2
a400 2
		putchar(value);
		return str - start - 1;
d405 1
a405 1
		for (value = 0; isxdigit((unsigned char)*str); str++) {
d409 1
a409 1
		if ((unsigned)value > UCHAR_MAX) {
d413 2
a414 2
		putchar (value);
		return str - start - 1;
d418 1
a418 1
		putchar('\\');
d422 1
a422 1
		putchar('\'');
d426 1
a426 1
		putchar('"');
d430 1
a430 1
		putchar('\a');
d434 1
a434 1
		putchar('\b');
d438 1
a438 1
		putchar(033);
d442 1
a442 1
		putchar('\f');
d446 1
a446 1
		putchar('\n');
d450 1
a450 1
		putchar('\r');
d454 1
a454 1
		putchar('\t');
d458 1
a458 1
		putchar('\v');
d462 1
a462 1
		putchar(*str);
d467 1
a467 1
	return 1;
d503 2
a504 2
		return((int)'\0');
	return((int)**gargv++);
d511 2
a512 2
		return("");
	return(*gargv++);
d515 1
a518 1
	static const char *number = "+-.0123456789";
d520 1
a520 1
		return(0);
d523 1
a523 1
		return(atoi(*gargv++));
d525 1
a525 1
	return 0;
d535 1
a535 1
		return(0L);
d538 1
a538 1
		return (long) *((*gargv++)+1);
d541 1
a541 1
	val = strtol (*gargv, &ep, 0);
d543 1
a543 1
	return val;
d553 1
a553 1
		return(0UL);
d556 1
a556 1
		return (unsigned long) *((*gargv++)+1);
d559 1
a559 1
	val = strtoul (*gargv, &ep, 0);
d561 1
a561 1
	return val;
d564 1
a564 1
#ifndef NO_STRTOD
d572 1
a572 1
		return(0.0);
d575 1
a575 1
		return (double) *((*gargv++)+1);
d578 1
a578 1
	val = strtod (*gargv, &ep);
d580 1
a580 1
	return val;
d602 1
a602 1
	(void)fprintf(stderr, "usage: printf format [arg ...]\n");
d630 1
a630 3
	ts[c] = 0;
	for (c = 0; ts[c]; ++c)
		putchar(ts[c]);
@


1.13
log
@const-cleanliness fix for use with mksh
@
text
@d63 1
a63 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.12 2009/12/12 22:27:13 tg Exp $");
d117 4
a494 4
#ifndef vstrchr
#define vstrchr	strchr
#endif

@


1.12
log
@re-vamp __attribute__ handling; let this pass on HP-UX bundled compiler
as well as HP aCC
@
text
@d63 1
a63 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.11 2009/09/19 22:26:55 tg Exp $");
d491 4
d502 1
a502 1
	if (strchr(number, **gargv))
@


1.11
log
@when building as mksh builtin, use mksh’s new cool escape sequence
processing stuff, similarily to how AT&T ksh does
@
text
@d63 1
a63 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.10 2009/08/01 20:38:50 tg Exp $");
d590 1
a590 1
s_put(int c __unused)
@


1.10
log
@since ULTRIX has no strdup(3), use mksh’s internal string duplication
functions to create a temporary writable copy of the fmt argument if
this is used as builtin
@
text
@d63 1
a63 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.9 2009/08/01 19:56:01 tg Exp $");
d82 8
d279 1
d281 1
d286 17
d323 1
d339 23
d444 1
d581 30
@


1.9
log
@let the compiler inline; DEC ucode on ULTRIX can’t
@
text
@d63 1
a63 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.8 2009/08/01 19:21:28 tg Exp $");
d80 1
a80 1
static int real_main(const char *[]);
d110 1
a110 1
real_main(const char *argv[])
a114 1
	char *format;
d116 1
a116 1
	format = strdup(*++argv);
d242 1
d248 3
a250 1
	rv = wp[1] ? real_main(wp) : usage();
d259 1
a259 1
	return (argc < 2 ? usage() : real_main((const char **)argv));
@


1.8
log
@Tru64 gcc thinks this is a char array subscript
since “char” in C is neither signed nor unsigned, it’s ok to warn
@
text
@d63 1
a63 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.7 2009/08/01 15:19:13 tg Exp $");
d80 1
a80 1
static inline int real_main(const char *[]);
d109 1
a109 1
static inline int
@


1.7
log
@obey NO_STRTOD (for klibc)
@
text
@d63 1
a63 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.6 2009/08/01 15:17:30 tg Exp $");
d328 1
a328 1
		for (value = 0; isxdigit(*str); str++) {
@


1.6
log
@use warningf() from mksh instead of warnx(3) if embedded
@
text
@d63 1
a63 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.5 2009/07/30 19:10:33 tg Exp $");
d69 1
d71 1
d205 1
d215 1
d486 1
d504 1
@


1.5
log
@mop up the mksh builtin support API
@
text
@a36 1
#include <err.h>
d63 1
a63 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.4 2009/07/25 18:28:24 tg Exp $");
d99 8
d159 1
a159 1
					warnx ("missing format character");
d182 1
a182 1
						warnx("out of memory");
d196 1
a196 1
						warnx("out of memory");
d213 1
a213 1
					warnx ("%s: invalid directive", start);
d238 1
d240 2
d246 1
d329 1
a329 1
			warnx ("escape sequence out of range for character");
d382 1
a382 1
		warnx("unknown escape sequence `\\%c'", *str);
d505 1
a505 1
			warnx ("%s: expected numeric value", s);
d507 1
a507 1
			warnx ("%s: not completely converted", s);
d510 1
a510 1
		warnx ("%s: %s", s, strerror(ERANGE));
@


1.4
log
@* make it able to run if argv is an array of const strings
* add hooks for MKSH_PRINTF_BUILTIN
@
text
@a0 1
/**	$MirOS: src/usr.bin/printf/printf.c,v 1.3 2005/08/26 22:04:19 tg Exp $ */
d32 11
a42 5
#if 0
char copyright[] =
"@@(#) Copyright (c) 1989 The Regents of the University of California.\n\
 All rights reserved.\n";
#endif
d45 4
a51 6
#include <limits.h>
#include <errno.h>
#include <err.h>

__SCCSID("@@(#)printf.c	5.9 (Berkeley) 6/1/90");
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.3 2005/08/26 22:04:19 tg Exp $");
d53 1
d57 1
a57 2
#include <stdarg.h>
#endif /* SHELL */
a58 2
#ifdef MKSH_PRINTF_BUILTIN
int c_printf(const char **);
d61 7
a67 2
static int	 print_escape_str(const char *);
static int	 print_escape(const char *);
d69 4
a72 4
static int	 getchr(void);
static double	 getdouble(void);
static int	 getint(void);
static long	 getlong(void);
d75 2
a76 2
static char	*mklong(const char *, int);
static void      check_conversion(const char *, const char *);
d79 1
a79 1
static int real_main(const char *[]);
d81 1
a81 1
static int	rval;
d88 1
a88 1
#define PF(f, func) { \
d98 1
a98 1
}
d100 1
a100 22
#ifdef MKSH_PRINTF_BUILTIN
extern void mksh_flush(void);

int
c_printf(const char **wp)
{
	int rv;

	mksh_flush();
	rv = wp[1] ? real_main(wp) : usage();
	fflush(NULL);
	return (rv);
}
#else
int
main(int argc, char *argv[])
{
	return (argc < 2 ? usage() : real_main((const char **)argv));
}
#endif

int
d142 1
a142 1
				fieldwidth = *fmt == '*' ? getint() : 0;
d148 1
a148 1
				precision = *fmt == '*' ? getint() : 0;
d226 20
d423 1
a423 1
getint(void)
@


1.3
log
@* pass __CRAZY=yes build and check when sourced as mksh(1) builtin
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.bin/printf/printf.c,v 1.2 2005/07/23 18:53:22 tg Exp $ */
d48 11
a58 1
__RCSID("$MirOS: src/usr.bin/printf/printf.c,v 1.2 2005/07/23 18:53:22 tg Exp $");
d71 3
a73 1
static void	 usage(void);
d76 1
a76 1
static char  **gargv;
a81 10
#ifdef SHELL
#define main printfcmd
#include "bltin.h"
#include <stdarg.h>
#endif /* SHELL */

#ifdef BUILTIN
int progprintf(int, char *[]);
#endif

d94 3
d98 9
a106 2
#ifdef BUILTIN
progprintf(int argc, char *argv[])
d108 1
d110 3
d114 3
d123 1
a123 6
	if (argc < 2) {
		usage();
		return (1);
	}

	format = *++argv;
d499 1
a499 1
static void
d503 1
@


1.2
log
@* merge OpenBSD
* remove locale stuff
* shrink & fix using as sh(1) builtin
* descope an array
* fix building with __CRAZY=yes
@
text
@d1 1
a1 1
/**	$MirOS$ */
d4 1
a4 1
/*
d48 1
a48 1
__RCSID("$MirOS$");
d76 4
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: printf.c,v 1.11 2003/06/23 16:40:44 millert Exp $	*/
d33 1
a33 2
#ifndef lint
#if !defined(SHELL) && !defined(BUILTIN)
a37 6
#endif /* not lint */

#ifndef lint
/*static char sccsid[] = "from: @@(#)printf.c	5.9 (Berkeley) 6/1/90";*/
static char rcsid[] = "$OpenBSD: printf.c,v 1.11 2003/06/23 16:40:44 millert Exp $";
#endif /* not lint */
a43 1
#include <locale.h>
d47 3
d58 2
a59 2
static char	*getstr(void);
static char	*mklong(const char *, int); 
d61 2
a62 2
static void	 usage(void); 
     
d72 1
a72 1
#include "../../bin/sh/bltin/bltin.h"
a73 14

static void 
warnx(const char *fmt, ...)
{
	
	char buf[64];
	va_list ap;

	va_start(ap, fmt);
	vsnprintf(buf, sizeof buf, fmt, ap);
	va_end(ap);

	error(buf);
}
a98 5
	int ch;

#if !defined(SHELL) && !defined(BUILTIN)
	setlocale (LC_ALL, "");
#endif
d114 1
a114 1
		 * width or precision is a '*'; if it is, gather up value. 
d116 1
a116 1
		 * provided arguments, arguments of zero/null string are 
d130 1
a130 1
					char *p = getstr();
d163 1
a163 1
					char *p = getstr();
d225 1
a225 1
 * Print SysV echo(1) style escape string 
d237 1
a237 1
			/* 
d239 2
a240 2
			 * They start with a \0, and are followed by 0, 1, 2, 
			 * or 3 octal digits. 
d253 1
a253 1
				str--;			
d266 1
a266 1
 * Print "standard" escape characters 
d294 1
a294 1
		if (value > UCHAR_MAX) {
a322 3
#ifdef __GNUC__
		putchar('\e');
#else
a323 1
#endif
d360 1
a360 1
	int len;	
d380 1
a380 1
	return (copy);	
d391 1
a391 1
static char *
a398 1
static char *number = "+-.0123456789";
d402 1
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.12 2004/05/31 15:48:26 pedro Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: printf.c,v 1.12 2004/05/31 15:48:26 pedro Exp $";
d117 1
@


1.1.1.3
log
@sync with obsd
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.17 2009/10/27 23:59:41 deraadt Exp $	*/
d32 13
d74 20
d107 3
d111 1
d118 1
d120 1
a120 6

	/* Need to accept/ignore "--" option. */
	if (argc > 1 && strcmp(argv[1], "--") == 0) {
		argc--;
		argv++;
	}
d131 1
a131 1
#define SKIP2	"0123456789"
d160 6
a165 13
				for (; strchr(SKIP1, *fmt); ++fmt)
					;
				if (*fmt == '*') {
					++fmt;
					fieldwidth = getint();
				} else
					fieldwidth = 0;

				/* skip to field precision */
				for (; strchr(SKIP2, *fmt); ++fmt)
					;
				precision = 0;
				if (*fmt == '.') {
d167 1
a167 7
					if (*fmt == '*') {
						++fmt;
						precision = getint();
					}
					for (; strchr(SKIP2, *fmt); ++fmt)
						;
				}
d169 1
a214 2
				case 'a':
				case 'A':
a217 1
				case 'F':
@


