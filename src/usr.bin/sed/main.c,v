head	1.3;
access;
symbols
	cvs-201711200100:1.1.1.3
	cvs-201603041800:1.1.1.2
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2017.11.20.01.23.57;	author tg;	state Exp;
branches;
next	1.2;
commitid	1005A122EB84015709A;

1.2
date	2016.03.04.19.42.26;	author tg;	state Exp;
branches;
next	1.1;
commitid	10056D9E53B4077740C;

1.1
date	2005.02.05.17.29.49;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.49;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2016.03.04.18.49.12;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	10056D9D8B662032B91;

1.1.1.3
date	2017.11.20.01.07.48;	author tg;	state Exp;
branches;
next	;
commitid	1005A122AFA44AA870F;


desc
@@


1.3
log
@merge; appears to be okay-ish in the testsuite with termwidth = 60;
@
text
@/*	$OpenBSD: main.c,v 1.35 2017/08/01 18:05:53 martijn Exp $	*/

/*-
 * Copyright (c) 2016, 2017
 *	mirabilos <m@@mirbsd.org>
 * Copyright (c) 1992 Diomidis Spinellis.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Diomidis Spinellis of Imperial College, University of London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/stat.h>

#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <regex.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <libgen.h>

#include "defs.h"
#include "extern.h"

__RCSID("$MirOS: src/usr.bin/sed/main.c,v 1.2 2016/03/04 19:42:26 tg Exp $");

/*
 * Linked list of units (strings and files) to be compiled
 */
struct s_compunit {
	struct s_compunit *next;
	enum e_cut {CU_FILE, CU_STRING} type;
	char *s;			/* Pointer to string or fname */
};

/*
 * Linked list pointer to compilation units and pointer to current
 * next pointer.
 */
static struct s_compunit *script, **cu_nextp = &script;

/*
 * Linked list of files to be processed
 */
struct s_flist {
	char *fname;
	struct s_flist *next;
};

/*
 * Linked list pointer to files and pointer to current
 * next pointer.
 */
static struct s_flist *files, **fl_nextp = &files;

FILE *infile;			/* Current input file */
FILE *outfile;			/* Current output file */

int Eflag, aflag, eflag, nflag;
static int rval;	/* Exit status */

/*
 * Current file and line number; line numbers restart across compilation
 * units, but span across input files.  The latter is optional if editing
 * in place.
 */
const char *fname;		/* File name. */
const char *outfname;		/* Output file name */
static char oldfname[PATH_MAX];	/* Old file name (for in-place editing) */
static char tmpfname[PATH_MAX];	/* Temporary file name (for in-place editing) */
const char *inplace;		/* Inplace edit file extension */
u_long linenum;

static void add_compunit(enum e_cut, char *);
static void add_file(char *);
static int next_files_have_lines(void);

int termwidth;

int pledge_wpath, pledge_rpath;

int
main(int argc, char *argv[])
{
	struct winsize win;
	int c, fflag;
	char *p;

	fflag = 0;
	inplace = NULL;
	while ((c = getopt(argc, argv, "Eae:f:i::nru")) != -1)
		switch (c) {
		case 'E':
		case 'r':
			Eflag = 1;
			break;
		case 'a':
			aflag = 1;
			break;
		case 'e':
			eflag = 1;
			add_compunit(CU_STRING, optarg);
			break;
		case 'f':
			fflag = 1;
			add_compunit(CU_FILE, optarg);
			break;
		case 'i':
			inplace = optarg ? optarg : "";
			break;
		case 'n':
			nflag = 1;
			break;
		case 'u':
			setvbuf(stdout, NULL, _IOLBF, 0);
			break;
		default:
		case '?':
			(void)fprintf(stderr,
			    "usage: sed [-aEnru] [-i[extension]] command [file ...]\n"
			    "       sed [-aEnru] [-e command] [-f command_file] [-i[extension]] [file ...]\n");
			exit(1);
		}
	argc -= optind;
	argv += optind;

	termwidth = 0;
	if ((p = getenv("COLUMNS")) != NULL)
		termwidth = strtonum(p, 0, INT_MAX, NULL);
	if (termwidth == 0 && ioctl(STDOUT_FILENO, TIOCGWINSZ, &win) == 0 &&
	    win.ws_col > 0)
		termwidth = win.ws_col;
	if (termwidth == 0)
		termwidth = 80;

#if defined(__OpenBSD__) && !defined(__MirBSD__)
	if (inplace != NULL) {
		if (pledge("stdio rpath wpath cpath fattr chown", NULL) == -1)
			error(FATAL, "pledge: %s", strerror(errno));
	} else {
		if (pledge("stdio rpath wpath cpath", NULL) == -1)
			error(FATAL, "pledge: %s", strerror(errno));
	}
#endif

	/* First usage case; script is the first arg */
	if (!eflag && !fflag && *argv) {
		add_compunit(CU_STRING, *argv);
		argv++;
	}

	compile();

	/* Continue with first and start second usage */
	if (*argv) {
#if defined(__OpenBSD__) && !defined(__MirBSD__)
		if (!pledge_wpath && inplace == NULL) {
			if (pledge("stdio rpath", NULL) == -1)
				error(FATAL, "pledge: %s", strerror(errno));
		}
#endif
		for (; *argv; argv++)
			add_file(*argv);
	} else {
#if defined(__OpenBSD__) && !defined(__MirBSD__)
		if (!pledge_wpath && !pledge_rpath) {
			if (pledge("stdio", NULL) == -1)
				error(FATAL, "pledge: %s", strerror(errno));
		} else if (pledge_rpath) {
			if (pledge("stdio rpath", NULL) == -1)
				error(FATAL, "pledge: %s", strerror(errno));
		} else if (pledge_wpath) {
			if (pledge("stdio wpath cpath", NULL) == -1)
				error(FATAL, "pledge: %s", strerror(errno));
		}
#endif
		add_file(NULL);
	}
	process();
	cfclose(prog, NULL);
	if (fclose(stdout))
		error(FATAL, "stdout: %s", strerror(errno));
	exit (rval);
}

/*
 * Like fgets, but go through the chain of compilation units chaining them
 * together.  Empty strings and files are ignored.
 */
char *
cu_fgets(char **outbuf, size_t *outsize)
{
	static enum {ST_EOF, ST_FILE, ST_STRING} state = ST_EOF;
	static FILE *f;		/* Current open file */
	static char *s;		/* Current pointer inside string */
	static char string_ident[30];
	size_t len;
	char *p;

	if (*outbuf == NULL)
		*outsize = 0;

again:
	switch (state) {
	case ST_EOF:
		if (script == NULL)
			goto cu_fgets_nilreturn;
		linenum = 0;
		switch (script->type) {
		case CU_FILE:
			if ((f = fopen(script->s, "r")) == NULL)
				error(FATAL,
				    "%s: %s", script->s, strerror(errno));
			fname = script->s;
			state = ST_FILE;
			goto again;
		case CU_STRING:
			if (((size_t)snprintf(string_ident,
			    sizeof(string_ident), "\"%s\"", script->s)) >=
			    sizeof(string_ident))
				strlcpy(string_ident +
				    sizeof(string_ident) - 6, " ...\"", 5);
			fname = string_ident;
			s = script->s;
			state = ST_STRING;
			goto again;
		}
	case ST_FILE:
		if ((p = fgetln(f, &len)) != NULL) {
			linenum++;
			if (len >= *outsize) {
				free(*outbuf);
				*outsize = ROUNDLEN(len + 1);
				*outbuf = xmalloc(*outsize);
			}
			memcpy(*outbuf, p, len);
			(*outbuf)[len] = '\0';
			if (linenum == 1 && p[0] == '#' && p[1] == 'n')
				nflag = 1;
			return (*outbuf);
		}
		script = script->next;
		(void)fclose(f);
		state = ST_EOF;
		goto again;
	case ST_STRING:
		if (linenum == 0 && s[0] == '#' && s[1] == 'n')
			nflag = 1;
		p = *outbuf;
		len = *outsize;
		for (;;) {
			if (len <= 1) {
				*outbuf = xrealloc(*outbuf,
				    *outsize + _POSIX2_LINE_MAX);
				p = *outbuf + *outsize - len;
				len += _POSIX2_LINE_MAX;
				*outsize += _POSIX2_LINE_MAX;
			}
			switch (*s) {
			case '\0':
				state = ST_EOF;
				if (s == script->s) {
					script = script->next;
					goto again;
				} else {
					script = script->next;
					*p = '\0';
					linenum++;
					return (*outbuf);
				}
			case '\n':
				*p++ = '\n';
				*p = '\0';
				s++;
				linenum++;
				return (*outbuf);
			default:
				*p++ = *s++;
				len--;
			}
		}
	}
	/* NOTREACHED */
	/* but GCC doesn't care, so: */
 cu_fgets_nilreturn:
	return (NULL);
}

/*
 * Like fgets, but go through the list of files chaining them together.
 * Set len to the length of the line.
 */
int
mf_fgets(SPACE *sp, enum e_spflag spflag)
{
	struct stat sb;
	size_t len;
	char *p;
	int c, fd;
	static int firstfile;

	if (infile == NULL) {
		/* stdin? */
		if (files->fname == NULL) {
			if (inplace != NULL)
				error(FATAL, "-i may not be used with stdin");
			infile = stdin;
			fname = "stdin";
			outfile = stdout;
			outfname = "stdout";
		}

		firstfile = 1;
	}

	for (;;) {
		if (infile != NULL && (c = getc(infile)) != EOF) {
			(void)ungetc(c, infile);
			break;
		}
		/* If we are here then either eof or no files are open yet */
		if (infile == stdin) {
			sp->len = 0;
			return (0);
		}
		if (infile != NULL) {
			fclose(infile);
			if (*oldfname != '\0') {
				if (rename(fname, oldfname) != 0) {
					warning("rename()");
					unlink(tmpfname);
					exit(1);
				}
				*oldfname = '\0';
			}
			if (*tmpfname != '\0') {
				if (outfile != NULL && outfile != stdout)
					fclose(outfile);
				outfile = NULL;
				rename(tmpfname, fname);
				*tmpfname = '\0';
			}
			outfname = NULL;
		}
		if (firstfile == 0)
			files = files->next;
		else
			firstfile = 0;
		if (files == NULL) {
			sp->len = 0;
			return (0);
		}
		fname = files->fname;
		if (inplace != NULL) {
			if (lstat(fname, &sb) != 0)
				error(FATAL, "%s: %s", fname,
				    strerror(errno ? errno : EIO));
			if (!S_ISREG(sb.st_mode))
				error(FATAL, "%s: %s %s", fname,
				    "in-place editing only",
				    "works for regular files");
			if (*inplace != '\0') {
				strlcpy(oldfname, fname,
				    sizeof(oldfname));
				len = strlcat(oldfname, inplace,
				    sizeof(oldfname));
				if (len > sizeof(oldfname))
					error(FATAL, "%s: name too long", fname);
			}
			len = snprintf(tmpfname, sizeof(tmpfname), "%s/sedXXXXXXXXXX",
			    dirname(fname));
			if (len >= sizeof(tmpfname))
				error(FATAL, "%s: name too long", fname);
			if ((fd = mkstemp(tmpfname)) == -1)
				error(FATAL, "%s: %s", fname, strerror(errno));
			if ((outfile = fdopen(fd, "w")) == NULL) {
				unlink(tmpfname);
				error(FATAL, "%s", fname);
			}
			fchown(fileno(outfile), sb.st_uid, sb.st_gid);
			fchmod(fileno(outfile), sb.st_mode & ALLPERMS);
			outfname = tmpfname;
			linenum = 0;
			resetranges();
		} else {
			outfile = stdout;
			outfname = "stdout";
		}
		if ((infile = fopen(fname, "r")) == NULL) {
			warning("%s", strerror(errno));
			rval = 1;
			continue;
		}
	}

	/*
	 * We are here only when infile is open and we still have something
	 * to read from it.
	 *
	 * Use fgetln so that we can handle essentially infinite input data.
	 * Can't use the pointer into the stdio buffer as the process space
	 * because the ungetc() can cause it to move.
	 */
	p = fgetln(infile, &len);
	if (ferror(infile))
		error(FATAL, "%s: %s", fname, strerror(errno ? errno : EIO));
	if (len != 0 && p[len - 1] == '\n') {
		sp->append_newline = 1;
		len--;
	} else if (!lastline()) {
		sp->append_newline = 1;
	} else {
		sp->append_newline = 0;
	}
	cspace(sp, p, len, spflag);

	linenum++;

	return (1);
}

/*
 * Add a compilation unit to the linked list
 */
static void
add_compunit(enum e_cut type, char *s)
{
	struct s_compunit *cu;

	cu = xmalloc(sizeof(struct s_compunit));
	cu->type = type;
	cu->s = s;
	cu->next = NULL;
	*cu_nextp = cu;
	cu_nextp = &cu->next;
}

/*
 * Add a file to the linked list
 */
static void
add_file(char *s)
{
	struct s_flist *fp;

	fp = xmalloc(sizeof(struct s_flist));
	fp->next = NULL;
	*fl_nextp = fp;
	fp->fname = s;
	fl_nextp = &fp->next;
}


static int
next_files_have_lines(void)
{
	struct s_flist *file;
	FILE *file_fd;
	int ch;

	file = files;
	while ((file = file->next) != NULL) {
		if ((file_fd = fopen(file->fname, "r")) == NULL)
			continue;

		if ((ch = getc(file_fd)) != EOF) {
			/*
			 * This next file has content, therefore current
			 * file doesn't contains the last line.
			 */
			ungetc(ch, file_fd);
			fclose(file_fd);
			return (1);
		}
		fclose(file_fd);
	}
	return (0);
}

int
lastline(void)
{
	int ch;

	if (feof(infile)) {
		return !(
		    (inplace == NULL) &&
		    next_files_have_lines());
	}
	if ((ch = getc(infile)) == EOF) {
		return !(
		    (inplace == NULL) &&
		    next_files_have_lines());
	}
	ungetc(ch, infile);
	return (0);
}
@


1.2
log
@fullmerge
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.31 2016/01/01 20:55:13 tb Exp $	*/
d4 1
a4 1
 * Copyright (c) 2016
d57 1
a57 1
__RCSID("$MirOS$");
d112 2
d159 2
a160 1
	if ((p = getenv("COLUMNS")))
d162 1
a162 2
	if (termwidth == 0 &&
	    ioctl(STDOUT_FILENO, TIOCGWINSZ, &win) == 0 &&
d166 1
a166 1
		termwidth = 60;
d170 1
a170 1
		if (pledge("stdio rpath wpath cpath fattr", NULL) == -1)
d187 7
a193 1
	if (*argv)
d196 13
a208 1
	else
d210 1
d362 1
a362 1
					error(WARNING, "rename()");
d422 1
a422 1
			error(WARNING, "%s", strerror(errno));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.9 2003/06/10 22:20:50 deraadt Exp $	*/
d4 2
a37 11
#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1992, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
/* from: static char sccsid[] = "@@(#)main.c	8.2 (Berkeley) 1/3/94"; */
static char *rcsid = "$OpenBSD: main.c,v 1.9 2003/06/10 22:20:50 deraadt Exp $";
#endif /* not lint */

d39 2
d45 1
d52 1
d57 2
d88 5
a92 1
int aflag, eflag, nflag;
d96 2
a97 1
 * units, but span across input files.
d99 5
a103 1
char *fname;			/* File name. */
a104 1
int lastline;			/* TRUE on the last line of the last file */
d108 3
d115 1
d117 1
d120 2
a121 1
	while ((c = getopt(argc, argv, "ae:f:n")) != -1)
d123 4
d138 3
d144 3
d150 2
a151 1
"usage:\tsed script [-an] [file ...]\n\tsed [-an] [-e script] ... [-f script_file] ... [file ...]\n");
d157 19
d193 2
a194 2
		err(FATAL, "stdout: %s", strerror(errno));
	exit (0);
d202 1
a202 1
cu_fgets(char *buf, int n)
d208 1
d211 3
d218 1
a218 1
			return (NULL);
d223 1
a223 1
				err(FATAL,
d229 1
a229 1
			if ((snprintf(string_ident,
d240 1
a240 1
		if ((p = fgets(buf, n, f)) != NULL) {
d242 8
a249 1
			if (linenum == 1 && buf[0] == '#' && buf[1] == 'n')
d251 1
a251 1
			return (p);
d260 2
a261 1
		p = buf;
d263 6
a268 4
			if (n-- <= 1) {
				*p = '\0';
				linenum++;
				return (buf);
d280 1
a280 1
					return (buf);
d287 1
a287 1
				return (buf);
d290 1
d295 3
d307 1
a307 1
	static FILE *f;		/* Current open file */
d310 2
a311 1
	int c;
d313 33
a345 6
	if (f == NULL)
		/* Advance to first non-empty file */
		for (;;) {
			if (files == NULL) {
				lastline = 1;
				return (0);
d347 6
a352 8
			if (files->fname == NULL) {
				f = stdin;
				fname = "stdin";
			} else {
				fname = files->fname;
				if ((f = fopen(fname, "r")) == NULL)
					err(FATAL, "%s: %s",
					    fname, strerror(errno));
d354 26
a379 3
			if ((c = getc(f)) != EOF) {
				(void)ungetc(c, f);
				break;
d381 23
a403 2
			(void)fclose(f);
			files = files->next;
a404 4

	if (lastline) {
		sp->len = 0;
		return (0);
d408 3
d415 11
a425 3
	p = fgetln(f, &len);
	if (ferror(f))
		err(FATAL, "%s: %s", fname, strerror(errno ? errno : EIO));
d429 1
a429 18
	/* Advance to next non-empty file */
	while ((c = getc(f)) == EOF) {
		(void)fclose(f);
		files = files->next;
		if (files == NULL) {
			lastline = 1;
			return (1);
		}
		if (files->fname == NULL) {
			f = stdin;
			fname = "stdin";
		} else {
			fname = files->fname;
			if ((f = fopen(fname, "r")) == NULL)
				err(FATAL, "%s: %s", fname, strerror(errno));
		}
	}
	(void)ungetc(c, f);
d463 46
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import newer sed(1) from OpenBSD, hoping for bugfixes
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.31 2016/01/01 20:55:13 tb Exp $	*/
d36 11
a47 2
#include <sys/ioctl.h>
#include <sys/stat.h>
a51 1
#include <limits.h>
a57 1
#include <libgen.h>
d91 1
a91 5
FILE *infile;			/* Current input file */
FILE *outfile;			/* Current output file */

int Eflag, aflag, eflag, nflag;
static int rval;	/* Exit status */
d95 1
a95 2
 * units, but span across input files.  The latter is optional if editing
 * in place.
d97 1
a97 5
const char *fname;		/* File name. */
const char *outfname;		/* Output file name */
static char oldfname[PATH_MAX];	/* Old file name (for in-place editing) */
static char tmpfname[PATH_MAX];	/* Temporary file name (for in-place editing) */
char *inplace;			/* Inplace edit file extension */
d99 1
a102 3
static int next_files_have_lines(void);

int termwidth;
a106 1
	struct winsize win;
a107 1
	char *p;
d110 1
a110 2
	inplace = NULL;
	while ((c = getopt(argc, argv, "Eae:f:i::nru")) != -1)
a111 4
		case 'E':
		case 'r':
			Eflag = 1;
			break;
a122 3
		case 'i':
			inplace = optarg ? optarg : "";
			break;
a125 3
		case 'u':
			setvbuf(stdout, NULL, _IOLBF, 0);
			break;
d129 1
a129 2
			    "usage: sed [-aEnru] [-i[extension]] command [file ...]\n"
			    "       sed [-aEnru] [-e command] [-f command_file] [-i[extension]] [file ...]\n");
a134 17
	if ((p = getenv("COLUMNS")))
		termwidth = strtonum(p, 0, INT_MAX, NULL);
	if (termwidth == 0 &&
	    ioctl(STDOUT_FILENO, TIOCGWINSZ, &win) == 0 &&
	    win.ws_col > 0)
		termwidth = win.ws_col;
	if (termwidth == 0)
		termwidth = 60;

	if (inplace != NULL) {
		if (pledge("stdio rpath wpath cpath fattr", NULL) == -1)
			error(FATAL, "pledge: %s", strerror(errno));
	} else {
		if (pledge("stdio rpath wpath cpath", NULL) == -1)
			error(FATAL, "pledge: %s", strerror(errno));
	}

d152 2
a153 2
		error(FATAL, "stdout: %s", strerror(errno));
	exit (rval);
d161 1
a161 1
cu_fgets(char **outbuf, size_t *outsize)
a166 1
	size_t len;
a168 3
	if (*outbuf == NULL)
		*outsize = 0;

d178 1
a178 1
				error(FATAL,
d195 1
a195 1
		if ((p = fgetln(f, &len)) != NULL) {
d197 1
a197 8
			if (len >= *outsize) {
				free(*outbuf);
				*outsize = ROUNDLEN(len + 1);
				*outbuf = xmalloc(*outsize);
			}
			memcpy(*outbuf, p, len);
			(*outbuf)[len] = '\0';
			if (linenum == 1 && p[0] == '#' && p[1] == 'n')
d199 1
a199 1
			return (*outbuf);
d208 1
a208 2
		p = *outbuf;
		len = *outsize;
d210 4
a213 6
			if (len <= 1) {
				*outbuf = xrealloc(*outbuf,
				    *outsize + _POSIX2_LINE_MAX);
				p = *outbuf + *outsize - len;
				len += _POSIX2_LINE_MAX;
				*outsize += _POSIX2_LINE_MAX;
d225 1
a225 1
					return (*outbuf);
d232 1
a232 1
				return (*outbuf);
a234 1
				len--;
d248 1
a248 1
	struct stat sb;
d251 1
a251 2
	int c, fd;
	static int firstfile;
d253 15
a267 33
	if (infile == NULL) {
		/* stdin? */
		if (files->fname == NULL) {
			if (inplace != NULL)
				error(FATAL, "-i may not be used with stdin");
			infile = stdin;
			fname = "stdin";
			outfile = stdout;
			outfname = "stdout";
		}

		firstfile = 1;
	}

	for (;;) {
		if (infile != NULL && (c = getc(infile)) != EOF) {
			(void)ungetc(c, infile);
			break;
		}
		/* If we are here then either eof or no files are open yet */
		if (infile == stdin) {
			sp->len = 0;
			return (0);
		}
		if (infile != NULL) {
			fclose(infile);
			if (*oldfname != '\0') {
				if (rename(fname, oldfname) != 0) {
					error(WARNING, "rename()");
					unlink(tmpfname);
					exit(1);
				}
				*oldfname = '\0';
d269 3
a271 6
			if (*tmpfname != '\0') {
				if (outfile != NULL && outfile != stdout)
					fclose(outfile);
				outfile = NULL;
				rename(tmpfname, fname);
				*tmpfname = '\0';
d273 1
a273 3
			outfname = NULL;
		}
		if (firstfile == 0)
a274 46
		else
			firstfile = 0;
		if (files == NULL) {
			sp->len = 0;
			return (0);
		}
		fname = files->fname;
		if (inplace != NULL) {
			if (lstat(fname, &sb) != 0)
				error(FATAL, "%s: %s", fname,
				    strerror(errno ? errno : EIO));
			if (!S_ISREG(sb.st_mode))
				error(FATAL, "%s: %s %s", fname,
				    "in-place editing only",
				    "works for regular files");
			if (*inplace != '\0') {
				strlcpy(oldfname, fname,
				    sizeof(oldfname));
				len = strlcat(oldfname, inplace,
				    sizeof(oldfname));
				if (len > sizeof(oldfname))
					error(FATAL, "%s: name too long", fname);
			}
			len = snprintf(tmpfname, sizeof(tmpfname), "%s/sedXXXXXXXXXX",
			    dirname(fname));
			if (len >= sizeof(tmpfname))
				error(FATAL, "%s: name too long", fname);
			if ((fd = mkstemp(tmpfname)) == -1)
				error(FATAL, "%s: %s", fname, strerror(errno));
			if ((outfile = fdopen(fd, "w")) == NULL) {
				unlink(tmpfname);
				error(FATAL, "%s", fname);
			}
			fchown(fileno(outfile), sb.st_uid, sb.st_gid);
			fchmod(fileno(outfile), sb.st_mode & ALLPERMS);
			outfname = tmpfname;
			linenum = 0;
			resetranges();
		} else {
			outfile = stdout;
			outfname = "stdout";
		}
		if ((infile = fopen(fname, "r")) == NULL) {
			error(WARNING, "%s", strerror(errno));
			rval = 1;
			continue;
d276 4
a282 3
	 * We are here only when infile is open and we still have something
	 * to read from it.
	 *
d287 3
a289 11
	p = fgetln(infile, &len);
	if (ferror(infile))
		error(FATAL, "%s: %s", fname, strerror(errno ? errno : EIO));
	if (len != 0 && p[len - 1] == '\n') {
		sp->append_newline = 1;
		len--;
	} else if (!lastline()) {
		sp->append_newline = 1;
	} else {
		sp->append_newline = 0;
	}
d293 18
a310 1

a343 46


static int
next_files_have_lines()
{
	struct s_flist *file;
	FILE *file_fd;
	int ch;

	file = files;
	while ((file = file->next) != NULL) {
		if ((file_fd = fopen(file->fname, "r")) == NULL)
			continue;

		if ((ch = getc(file_fd)) != EOF) {
			/*
			 * This next file has content, therefore current
			 * file doesn't contains the last line.
			 */
			ungetc(ch, file_fd);
			fclose(file_fd);
			return (1);
		}
		fclose(file_fd);
	}
	return (0);
}

int
lastline(void)
{
	int ch;

	if (feof(infile)) {
		return !(
		    (inplace == NULL) &&
		    next_files_have_lines());
	}
	if ((ch = getc(infile)) == EOF) {
		return !(
		    (inplace == NULL) &&
		    next_files_have_lines());
	}
	ungetc(ch, infile);
	return (0);
}
@


1.1.1.3
log
@update sed(1) from OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.35 2017/08/01 18:05:53 martijn Exp $	*/
a107 2
int pledge_wpath, pledge_rpath;

d153 1
a153 2
	termwidth = 0;
	if ((p = getenv("COLUMNS")) != NULL)
d155 2
a156 1
	if (termwidth == 0 && ioctl(STDOUT_FILENO, TIOCGWINSZ, &win) == 0 &&
d160 1
a160 1
		termwidth = 80;
d163 1
a163 1
		if (pledge("stdio rpath wpath cpath fattr chown", NULL) == -1)
d179 1
a179 5
	if (*argv) {
		if (!pledge_wpath && inplace == NULL) {
			if (pledge("stdio rpath", NULL) == -1)
				error(FATAL, "pledge: %s", strerror(errno));
		}
d182 1
a182 11
	} else {
		if (!pledge_wpath && !pledge_rpath) {
			if (pledge("stdio", NULL) == -1)
				error(FATAL, "pledge: %s", strerror(errno));
		} else if (pledge_rpath) {
			if (pledge("stdio rpath", NULL) == -1)
				error(FATAL, "pledge: %s", strerror(errno));
		} else if (pledge_wpath) {
			if (pledge("stdio wpath cpath", NULL) == -1)
				error(FATAL, "pledge: %s", strerror(errno));
		}
a183 1
	}
d288 1
a288 2

	return (NULL);
d332 1
a332 1
					warning("rename()");
d392 1
a392 1
			warning("%s", strerror(errno));
@


