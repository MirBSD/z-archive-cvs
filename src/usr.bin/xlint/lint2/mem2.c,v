head	1.1;
branch	1.1.1;
access;
symbols
	cvs-201204081600:1.1.1.2
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200504261445:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.02.05.17.30.19;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.30.19;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.23.20.40.27;	author tg;	state Exp;
branches;
next	;
commitid	100532F46D2072D4091;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: mem2.c,v 1.3 2001/05/11 16:06:57 art Exp $	*/
/*	$NetBSD: mem2.c,v 1.3 1995/10/02 17:27:11 jpo Exp $	*/

/*
 * Copyright (c) 1994, 1995 Jochen Pohl
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Jochen Pohl for
 *	The NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef lint
static char rcsid[] = "$OpenBSD: mem2.c,v 1.3 2001/05/11 16:06:57 art Exp $";
#endif

#include <sys/param.h>
#include <sys/types.h>
#include <sys/mman.h>
#include <unistd.h>
#include <string.h>
#include <err.h>

#include "lint2.h"

/* length of new allocated memory blocks */
static size_t	mblklen;

/* offset of next free byte in mbuf */
static size_t	nxtfree;

/* current buffer to server memory requests from */
static void	*mbuf;

void
initmem()
{
	int	pgsz;

	pgsz = getpagesize();
	mblklen = ((MBLKSIZ + pgsz - 1) / pgsz) * pgsz;

	nxtfree = mblklen;
}

/*
 * Allocate memory in large chunks to avoid space and time overhead of
 * malloc(). This is possible because memory allocated by xalloc()
 * need never to be freed.
 */
void *
xalloc(sz)
	size_t	sz;
{
	void	*ptr;
	int	prot, flags;

	sz = ALIGN(sz);
	if (nxtfree + sz > mblklen) {
		/* use mmap() instead of malloc() to avoid malloc overhead. */
		prot = PROT_READ | PROT_WRITE;
		flags = MAP_ANON | MAP_PRIVATE;
		mbuf = mmap(NULL, mblklen, prot, flags, -1, (off_t)0);
		if (mbuf == MAP_FAILED)
			err(1, "can't map memory");
		if (ALIGN((u_long)mbuf) != (u_long)mbuf)
			errx(1, "mapped address is not aligned");
		(void)memset(mbuf, 0, mblklen);
		nxtfree = 0;
	}

	ptr = (char *)mbuf + nxtfree;
	nxtfree += sz;

	return (ptr);
}
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@import lint(1) from OBSD before they killed it
@
text
@d1 1
a1 1
/*	$OpenBSD: mem2.c,v 1.5 2011/09/21 18:08:07 jsg Exp $	*/
d35 4
d58 1
a58 1
initmem(void)
d74 2
a75 1
xalloc(size_t sz)
@

