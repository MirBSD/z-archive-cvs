head	1.4;
access;
symbols
	MIRBSD_10:1.4.0.4
	MIRBSD_10_BASE:1.4
	cvs-200704292000:1.1.1.2
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4
	cvs-200507211800:1.1.1.2
	cvs-200504291700:1.1.1.1
	cvs-200504141130:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2005.11.23.17.08.49;	author tg;	state Exp;
branches;
next	1.3;
commitid	7d454384a217581b;

1.3
date	2005.04.14.11.46.44;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.13.18.32.49;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.29.26;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.26;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.59.03;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.4
log
@* merge
* while here, implement zdopen() from mpczar/minizip
* make __CRAZY=Yes clean
* if Z_STANDALONE is defined, zopen.c can be used in other projects
@
text
@/**	$MirOS: src/usr.bin/compress/compress.h,v 1.3 2005/04/14 11:46:44 tg Exp $ */
/*	$OpenBSD: compress.h,v 1.8 2005/06/26 18:20:26 otto Exp $	*/

/*
 * Copyright (c) 2005 Thorsten Glaser
 * Copyright (c) 1997 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef	_COMPRESS_H
#define	_COMPRESS_H

#include <sys/stat.h>

struct z_info {
	u_int64_t total_in;	/* # bytes in */
	u_int64_t total_out;	/* # bytes out */
	u_int32_t crc;		/* crc */
	u_int32_t hlen;		/* header length */
	time_t mtime;		/* timestamp */
};

/*
 * making it any bigger does not affect perfomance very much.
 * actually this value is just a little bit better than 8192.
 */
#define Z_BUFSIZE 16384

/*
 * exit codes for compress
 */
#define	SUCCESS	0
#define	FAILURE	1
#define	WARNING	2

extern char null_magic[];

extern void *z_open(int, const char *, char *, int, u_int32_t, int);
extern FILE *zopen(const char *, const char *,int);
extern FILE *zdopen(int, const char *,int);
extern int zread(void *, char *, int);
extern int zwrite(void *, const char *, int);
extern int z_close(void *, struct z_info *, const char *, struct stat *);


extern void *gz_open(int, const char *, char *, int, u_int32_t, int);
extern int gz_read(void *, char *, int);
extern int gz_write(void *, const char *, int);
extern int gz_close(void *, struct z_info *, const char *, struct stat *);
extern int gz_flush(void *, int);

extern void *lzh_open(int, const char *, char *, int, u_int32_t, int);
extern int lzh_read(void *, char *, int);
extern int lzh_write(void *, const char *, int);
extern int lzh_close(void *, struct z_info *);
extern int lzh_flush(void *, int);

extern void *null_open(int, const char *, char *, int, u_int32_t, int);
extern int null_read(void *, char *, int);
extern int null_write(void *, const char *, int);
extern int null_close(void *, struct z_info *, const char *, struct stat *);
extern int null_flush(void *, int);

extern void setfile(const char *, int, struct stat *);

#endif /* ndef _COMPRESS_H */
@


1.3
log
@merge, clean up
@
text
@d1 2
a2 2
/**	$MirOS: src/usr.bin/compress/compress.h,v 1.2 2005/03/13 18:32:49 tg Exp $ */
/*	$OpenBSD: compress.h,v 1.7 2003/09/05 04:46:35 tedu Exp $	*/
d5 1
d34 2
d61 1
d64 1
a64 1
extern int z_close(void *, struct z_info *);
d70 1
a70 1
extern int gz_close(void *, struct z_info *);
d82 1
a82 1
extern int null_close(void *, struct z_info *);
d85 3
a87 1
#endif	/* ndef _COMPRESS_H */
@


1.2
log
@merge src/usr.bin
@
text
@d1 1
a1 1
/**	$MirOS$ */
a27 1
 *
d34 2
a35 1
	time_t mtime;		/* timestamp */
d38 1
a38 2
	u_int64_t total_in;	/* # bytes in */
	u_int64_t total_out;	/* # bytes out */
@


1.1
log
@Initial revision
@
text
@d1 1
d31 3
d35 1
a35 1
	u_int32_t mtime;	/* timestamp */
a54 2
extern const char main_rcsid[], z_rcsid[], gz_rcsid[], pkzip_rcsid[],
    pack_rcsid[], lzh_rcsid[], null_rcsid[];
d81 2
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: compress.h,v 1.8 2005/06/26 18:20:26 otto Exp $	*/
a29 2
#include <sys/stat.h>

d59 1
a59 1
extern int z_close(void *, struct z_info *, const char *, struct stat *);
d65 1
a65 1
extern int gz_close(void *, struct z_info *, const char *, struct stat *);
d77 1
a77 1
extern int null_close(void *, struct z_info *, const char *, struct stat *);
a78 2

extern void setfile(const char *, int, struct stat *);   
@

