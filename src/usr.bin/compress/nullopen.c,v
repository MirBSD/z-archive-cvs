head	1.6;
access;
symbols
	MIRBSD_10:1.5.0.4
	MIRBSD_10_BASE:1.5
	cvs-200704292000:1.1.1.2
	MIRBSD_9_BASE:1.5
	MIRBSD_8:1.5.0.2
	MIRBSD_8_BASE:1.5
	cvs-200507211800:1.1.1.2
	cvs-200504291700:1.1.1.1
	cvs-200504141130:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.10.31.20.07.01;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005272B7081B0E5655;

1.5
date	2005.11.23.17.08.49;	author tg;	state Exp;
branches;
next	1.4;
commitid	7d454384a217581b;

1.4
date	2005.11.16.22.10.56;	author tg;	state Exp;
branches;
next	1.3;
commitid	50fc437bae818bf3;

1.3
date	2005.04.14.11.46.45;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.13.18.32.49;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.29.26;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.29.26;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.59.04;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.6
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/*	$OpenBSD: nullopen.c,v 1.3 2005/06/26 18:20:26 otto Exp $	*/

/*
 * Copyright © 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 2003 Can Erkin Acar
 * Copyright (c) 1997 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include "compress.h"

__RCSID("$MirOS: src/usr.bin/compress/nullopen.c,v 1.5 2005/11/23 17:08:49 tg Exp $");

typedef struct {
	off_t 	  total_in;
	off_t 	  total_out;
	int   	  fd;
	int       gotmagic;
	char	  mode;
} null_stream;

char null_magic[2];


void *
null_open(int fd, const char *mode, char *name __attribute__((__unused__)),
    int bits __attribute__((__unused__)),
    u_int32_t mtime __attribute__((__unused__)), int gotmagic)
{
	null_stream *s;

	if (fd < 0 || !mode)
		return NULL;

	if ((mode[0] != 'r' && mode[0] != 'w') || mode[1] != '\0') {
		errno = EINVAL;
		return NULL;
	}

	if ((s = (null_stream *) calloc(1, sizeof(null_stream))) == NULL)
		return NULL;

	s->fd = fd;
	s->gotmagic = gotmagic;
	s->total_in = s->total_out = 0;
	s->mode = mode[0];

	return s;
}

int
null_close(void *cookie, struct z_info *info, const char *name, struct stat *sb)
{
	null_stream *s = (null_stream*) cookie;
	int err = 0;

	if (s == NULL)
		return -1;


	if (info != NULL) {
		info->mtime = 0;
		info->crc =  (u_int32_t)-1;
		info->hlen = 0;
		info->total_in = (off_t) s->total_in;
		info->total_out = (off_t) s->total_out;
	}

	setfile(name, s->fd, sb);
	err = close(s->fd);

	free(s);

	return err;
}

int
null_flush(void *cookie, int flush __attribute__((__unused__)))
{
	null_stream *s = (null_stream*)cookie;

	if (s == NULL || s->mode != 'w') {
		errno = EBADF;
		return (-1);
	}

	return 0;
}

int
null_read(void *cookie, char *buf, int len)
{
	null_stream *s = (null_stream*)cookie;

	if (s == NULL) {
		errno = EBADF;
		return (-1);
	}
	if (s->gotmagic) {
		if (len < 2) {
			errno = EBADF;
			return (-1);
		}

		buf[0] = null_magic[0];
		buf[1] = null_magic[1];
		s->gotmagic = 0;

		return (2);
	}

	return read(s->fd, buf, len);
}

int
null_write(void *cookie, const char *buf, int len)
{
	null_stream *s = (null_stream*)cookie;

	if (s == NULL) {
		errno = EBADF;
		return (-1);
	}

	return write(s->fd, buf, len);
}
@


1.5
log
@* merge
* while here, implement zdopen() from mpczar/minizip
* make __CRAZY=Yes clean
* if Z_STANDALONE is defined, zopen.c can be used in other projects
@
text
@a0 1
/**	$MirOS: src/usr.bin/compress/nullopen.c,v 1.4 2005/11/16 22:10:56 tg Exp $ */
d4 2
d39 1
a39 1
__RCSID("$MirOS: src/usr.bin/compress/nullopen.c,v 1.4 2005/11/16 22:10:56 tg Exp $");
d53 3
a55 3
null_open(int fd, const char *mode, char *name __attribute__((unused)),
    int bits __attribute__((unused)),
    u_int32_t mtime __attribute__((unused)), int gotmagic)
d105 1
a105 1
null_flush(void *cookie, int flush __attribute__((unused)))
@


1.4
log
@make __CRAZY clean
@
text
@d1 2
a2 2
/**	$MirOS: src/usr.bin/compress/nullopen.c,v 1.3 2005/04/14 11:46:45 tg Exp $ */
/*	$OpenBSD: nullopen.c,v 1.2 2004/01/22 18:49:35 millert Exp $	*/
d38 1
a38 1
__RCSID("$MirOS: src/usr.bin/compress/nullopen.c,v 1.3 2005/04/14 11:46:45 tg Exp $");
d78 1
a78 1
null_close(void *cookie, struct z_info *info)
d95 1
@


1.3
log
@merge, clean up
@
text
@d1 1
a1 1
/**	$MirOS$ */
d38 1
a38 1
__RCSID("$MirOS: src/usr.bin/compress/nullopen.c,v 1.2 2005/03/13 18:32:49 tg Exp $");
d52 3
a54 2
null_open(int fd, const char *mode, char *name, int bits,
    u_int32_t mtime, int gotmagic)
d103 1
a103 1
null_flush(void *cookie, int flush)
@


1.2
log
@merge src/usr.bin
@
text
@d1 1
a28 1
 *
d38 1
a38 1
__RCSID("$MirOS$");
@


1.1
log
@Initial revision
@
text
@a30 3
const char null_rcsid[] =
    "$OpenBSD: nullopen.c,v 1.2 2004/01/22 18:49:35 millert Exp $";

d38 2
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: nullopen.c,v 1.3 2005/06/26 18:20:26 otto Exp $	*/
d32 1
a32 1
    "$OpenBSD: nullopen.c,v 1.3 2005/06/26 18:20:26 otto Exp $";
d78 1
a78 1
null_close(void *cookie, struct z_info *info, const char *name, struct stat *sb)
a94 1
	setfile(name, s->fd, sb);
@

