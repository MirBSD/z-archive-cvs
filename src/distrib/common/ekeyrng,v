head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2012.01.16.16.47.33;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004F1454BD603FA226;

1.5
date	2009.11.15.17.29.14;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004B003A77293E61D5;

1.4
date	2009.11.15.12.29.35;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004AFFF43B3AB21317;

1.3
date	2009.11.12.19.15.21;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004AFC5EDB3EA07C0D;

1.2
date	2009.11.05.22.53.34;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004AF357820FF0D9C7;

1.1
date	2009.11.05.22.48.00;	author tg;	state Exp;
branches;
next	;
commitid	1004AF356264FC187FF;


desc
@@


1.6
log
@mksh-current only uses arc4random(3) on MirBSD when assigning to $RANDOM
@
text
@#!/bin/mksh
# $MirOS: src/distrib/common/ekeyrng,v 1.5 2009/11/15 17:29:14 tg Exp $
#-
# Copyright (c) 2009, 2012
#	Thorsten Glaser <tg@@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.
#-
# Absolute minimum Simtec EntropyKey driver: just requests encrypted
# frames and, for lack of anything better to do with them, puts them
# into /dev/wrandom (at "wire" speed, though). Rekeying is frequent,
# every 32±16 seconds, and uses host-random nonces. Call this script
# with no argument; it will auto-detect the last eKey inserted. Kill
# the script and its sleep subprocess but NEVER the cu coprocess, as
# that may freeze/hang your machine! (BTST)

set -A Lb64encode_code -- A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \
    a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9 + /

if [[ $1 = -R && -n $2 && -c $2 ]]; then
	# we are called by ourselves as dæmon (detached)
	mkpemquad() {
		typeset i s

		# rekey shell RNG (uses arc4random on MirBSD)
		RANDOM=$SECONDS
		# gather 30 bits of entropy
		(( i = (RANDOM << 15) | RANDOM ))
		# encode 6 bits from that, each time
		s=''${Lb64encode_code[$((i & 63))]}; (( i >>= 6 ))
		s=$s${Lb64encode_code[$((i & 63))]}; (( i >>= 6 ))
		s=$s${Lb64encode_code[$((i & 63))]}; (( i >>= 6 ))
		s=$s${Lb64encode_code[$((i & 63))]}
		# output 24 bits of entropy as "PEM quad"
		print -n $s
	}
	# start cu as co-routine, redirect output appropriately
	[[ -d /var/spool/lock/. && -d /var/log/. ]] || \
	    mkdir -p /var/spool/lock /var/log
	cu -l $2 >/dev/wrandom |&
	subpid=$!
	cleanup() {
		trap - 0 1 2 3 13 15
		print -p '\n~.'
		sleep 1
		kill $subpid
		exit 0
	}
	trap cleanup 0 1 2 3 13 15
	# give cu and the eKey time to initialise
	sleep 1
	# the main loop
	while :; do
		# reset, rekey (give it 72 bits), request entropy
		print -np "\03k$(mkpemquad)$(mkpemquad)$(mkpemquad)."
		# for a while
		sleep $((16 + (RANDOM & 31)))
	done
	# not reached... normally
	cleanup
fi

# the "real" main
myself=$(realpath "$0")

# get a temporary file for dmesg first
if ! T=$(mktemp /tmp/ekeyrng.XXXXXXXXXX); then
	print -u2 Cannot create temporary file.
	exit 1
fi

# extract the last boot worth of dmesg, plus the last current events
dmesg | cat /var/run/dmesg.boot - 2>/dev/null | \
    sed -ne '/^MirBSD/h;/^MirBSD/!H;${g;p;}' >$T
# look for the umodem(4) device and if there's an ucom(4) attached to it
umodemdev=$(sed -n \
    '/^umodem\([0-9][0-9]*\): Simtec Electronics Entropy Key.*$/s//\1/p' \
    <$T | sed -n '$p')
[[ -n $umodemdev ]] && ucomdev=$(sed -n \
    '/^ucom\([0-9][0-9]*\) at umodem'$x'.*$/s//\1/p' \
    <$T | sed -n '$p')
rm $T
# none found? bye
[[ -n $ucomdev ]] || exit 3
# XXX don't know what /dev/ttyUx it is else
(( ucomdev <= 9 )) || exit 4
# create the device, in case it does not exist
if [[ ! -c /dev/ttyU$((ucomdev)) ]]; then
	rm -f /dev/ttyU$((ucomdev))
	cd /dev
	mksh MAKEDEV ttyU$((ucomdev))
fi
# run myself detached, as dæmon (see above)
cd /
mksh -T- "$myself" -R /dev/ttyU$((ucomdev))
exit 0
@


1.5
log
@optimise

XXX why is sleep not a shell builtin anyway?
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/ekeyrng,v 1.4 2009/11/15 12:29:35 tg Exp $
d4 1
a4 1
# Copyright (c) 2009
d38 2
@


1.4
log
@good thing I looked… adjust for the limited installer system
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/ekeyrng,v 1.3 2009/11/12 19:15:21 tg Exp $
d49 2
a50 1
	mkdir -p /var/spool/lock /var/log
@


1.3
log
@maybe better exit routine
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/ekeyrng,v 1.2 2009/11/05 22:53:34 tg Exp $
d49 1
d88 1
a88 1
    <$T | tail -n 1)
d91 1
a91 1
    <$T | tail -n 1)
@


1.2
log
@beginner's mistake, grml...
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/ekeyrng,v 1.1 2009/11/05 22:48:00 tg Exp $
d53 2
@


1.1
log
@add an experimental minimum EntropyKey client to the ramdisk with cu(1)

XXX rewrite tpmrx (née tpmrng), cprng(8) and ekeyrng as ONE .c file DTRT
@
text
@d2 1
a2 1
# $MirOS: src/share/misc/licence.template,v 1.28 2008/11/14 15:33:44 tg Rel $
d71 1
d102 1
a102 1
mksh -T- "$0" -R /dev/ttyU$((ucomdev))
@

