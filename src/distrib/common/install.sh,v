head	1.30;
access;
symbols
	MIRBSD_10:1.13.0.2
	MIRBSD_10_BASE:1.13;
locks; strict;
comment	@# @;


1.30
date	2019.08.25.21.59.08;	author tg;	state Exp;
branches;
next	1.29;
commitid	1005D63030F790860AE;

1.29
date	2014.12.02.12.23.44;	author tg;	state Exp;
branches;
next	1.28;
commitid	100547DAF5B62A5C8D8;

1.28
date	2013.09.11.18.55.55;	author tg;	state Exp;
branches;
next	1.27;
commitid	1005230BCBE27390267;

1.27
date	2011.02.19.02.35.34;	author tg;	state Exp;
branches;
next	1.26;
commitid	1004D5F2C8616705E2F;

1.26
date	2009.11.15.12.39.34;	author tg;	state Exp;
branches;
next	1.25;
commitid	1004AFFF67F0FC3EE8C;

1.25
date	2009.11.15.12.02.31;	author tg;	state Exp;
branches;
next	1.24;
commitid	1004AFFED400C18A632;

1.24
date	2009.09.23.16.12.40;	author tg;	state Exp;
branches;
next	1.23;
commitid	1004ABA490305E55A18;

1.23
date	2009.08.30.16.35.12;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004A9AAA42250D72D8;

1.22
date	2009.08.11.10.14.33;	author tg;	state Exp;
branches;
next	1.21;
commitid	1004A81448B4F0A59DB;

1.21
date	2009.03.29.13.04.14;	author tg;	state Exp;
branches;
next	1.20;
commitid	10049CF71B654F9EF54;

1.20
date	2008.11.29.17.10.55;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004931774A5E826660;

1.19
date	2008.11.13.03.30.55;	author tg;	state Exp;
branches;
next	1.18;
commitid	100491B9F726D255D72;

1.18
date	2008.11.13.03.24.31;	author tg;	state Exp;
branches;
next	1.17;
commitid	100491B9DF951351822;

1.17
date	2008.09.20.19.35.23;	author tg;	state Exp;
branches;
next	1.16;
commitid	10048D5507B3334B1BA;

1.16
date	2008.07.09.23.32.02;	author tg;	state Exp;
branches;
next	1.15;
commitid	10048754A823D6E24B9;

1.15
date	2008.06.15.14.14.16;	author tg;	state Exp;
branches;
next	1.14;
commitid	100485523C43F6FDBE8;

1.14
date	2008.03.27.13.48.26;	author tg;	state Exp;
branches;
next	1.13;
commitid	10047EBA5A25F1AA7E1;

1.13
date	2007.08.24.14.40.34;	author tg;	state Exp;
branches
	1.13.2.1;
next	1.12;
commitid	10046CEEDEB385DC30F;

1.12
date	2007.06.30.02.57.49;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004685C6B96FAD0EDF;

1.11
date	2007.06.30.02.20.53;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004685BE13612E6DF4;

1.10
date	2007.06.22.20.02.56;	author tg;	state Exp;
branches;
next	1.9;
commitid	100467C2AF24E524708;

1.9
date	2007.06.16.22.36.47;	author tg;	state Exp;
branches;
next	1.8;
commitid	10046746581272CFCA8;

1.8
date	2007.06.04.08.36.37;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004663CEF86900A583;

1.7
date	2007.03.11.01.04.49;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.09.13.41.48;	author tg;	state Exp;
branches;
next	1.5;
commitid	10045F164270A5425A7;

1.5
date	2007.02.19.23.04.11;	author tg;	state Exp;
branches;
next	1.4;
commitid	10045DA2CF72058FD0B;

1.4
date	2007.02.19.22.58.31;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045DA2B9B6CE6C0B2;

1.3
date	2007.02.18.18.26.56;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045D89A5A0625C6F4;

1.2
date	2007.01.05.17.31.06;	author tg;	state Exp;
branches;
next	1.1;
commitid	100459E8B0951A51504;

1.1
date	2006.08.17.19.34.14;	author tg;	state Exp;
branches;
next	;
commitid	10044E4C48801BF3A85;

1.13.2.1
date	2008.07.14.12.43.19;	author tg;	state Exp;
branches;
next	;
commitid	100487B49F66A33F1A5;


desc
@@


1.30
log
@make restirring of entropy a bit more reliable:

• writing to wrandom [prandom] needs at most 128 octets to re-stir,
  but then waiting for at 1‥3 seconds is necessary (or a pid1 flush)
• reading (except from, currently, srandom and urandom) has been
  retrieving arandom data for a while already so skip prandom read
• writing arandom (as root) restirs… if it’s more than 0 octets ☺
  but no need to sleep afterwards
• stir as much as possible just before openssl genrsa
• handle unchecked result of read(2) in init(8)
• clean up output of installer, while here anyway
@
text
@#!/bin/mksh
# $MirOS: src/distrib/common/install.sh,v 1.28 2013/09/11 18:55:55 tg Exp $
# $OpenBSD: install.sh,v 1.152 2005/04/21 21:41:33 krw Exp $
# $NetBSD: install.sh,v 1.5.2.8 1996/08/27 18:15:05 gwr Exp $
#
# Copyright © 2007, 2008, 2009, 2014, 2019
#	mirabilos <m@@mirbsd.org>
# Copyright (c) 1997-2004 Todd Miller, Theo de Raadt, Ken Westerback
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Copyright (c) 1996 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Jason R. Thorpe.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#        This product includes software developed by the NetBSD
#        Foundation, Inc. and its contributors.
# 4. Neither the name of The NetBSD Foundation nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#	OpenBSD installation script.
#	In a perfect world, this would be a nice C program, with a reasonable
#	user interface.

# The name of the file holding the list of configured filesystems.
FILESYSTEMS=/tmp/filesystems

# The name of the file holding the list of non-default configured swap devices.
SWAPLIST=/tmp/swaplist

# install.sub needs to know the MODE
MODE=install

# include common subroutines and initialization code
. install.sub

# If /etc/fstab already exists, skip disk initialization.
if [ ! -f /etc/fstab ]; then
	# Install the shadowed disktab file; lets us write to it for temporary
	# purposes without mounting the miniroot read-write.
	[ -f /etc/disktab.shadow ] && cp /etc/disktab.shadow /tmp/disktab.shadow

	DISK=
	_DKDEVS=$DKDEVS

	while :; do
		_DKDEVS=$(rmel "$DISK" $_DKDEVS)

		# Always do ROOTDISK first, and repeat until
		# it is configured acceptably.
		if isin $ROOTDISK $_DKDEVS; then
			resp=$ROOTDISK
			rm -f /tmp/fstab
			# Make sure empty files exist so we don't have to
			# keep checking for their existence before grep'ing.
			: >$FILESYSTEMS
			: >$SWAPLIST
		else
			# Force the user to think and type in a disk name by
			# making 'done' the default choice.
			ask_which "disk" "do you wish to initialise" "$_DKDEVS" done "No more disks to initialise"
			[[ $resp = done ]] && break
		fi

		DISK=$resp
		makedev $DISK || continue

		# Deal with disklabels, including editing the root disklabel
		# and labeling additional disks. This is machine-dependent since
		# some platforms may not be able to provide this functionality.
		# /tmp/fstab.$DISK is created here with 'disklabel -f'.
		rm -f /tmp/*.$DISK
		md_prep_disklabel $DISK

		# Get the lists of BSD and swap partitions.
		unset _partitions _psizes _mount_points
		_i=0
		disklabel $DISK 2>&1 | sed -ne '/^ *[a-p]: /p' >/tmp/disklabel.$DISK
		while read _dev _size _offset _type _rest; do
			_pp=${DISK}${_dev%:}
			_ps=$_size

			if [[ $_pp = $ROOTDEV ]]; then
				echo "$ROOTDEV /" >$FILESYSTEMS
				continue
			elif [[ $_pp = $SWAPDEV || $_type = swap ]]; then
				echo "$_pp" >>$SWAPLIST
				continue
			elif [[ $_type != *BSD ]]; then
				continue
			fi

			_partitions[$_i]=$_pp
			_psizes[$_i]=$_ps

			# Set _mount_points[$_i].
			if [[ -f /tmp/fstab.$DISK ]]; then
				while read _pp _mp _rest; do
					[[ $_pp = "/dev/${_partitions[$_i]}" ]] || continue
					# Ignore mount points that have already been specified.
					[[ -n $(grep " $_mp\$" $FILESYSTEMS) ]] && break
					isin $_mp ${_mount_points[*]} && break
					# Ignore '/' for any partition but ROOTDEV. Check just
					# in case ROOTDEV isn't first partition processed.
					[[ $_mp = '/' ]] && break
					# Otherwise, record user specified mount point.
					_mount_points[$_i]=$_mp
				done </tmp/fstab.$DISK
			fi
			let _i++
		done </tmp/disklabel.$DISK

		if [[ $DISK = $ROOTDISK && -z $(grep "^$ROOTDEV /$" $FILESYSTEMS) ]]; then
			echo "ERROR: No root partition ($ROOTDEV)."
			DISK=
			continue
		fi

		# If there are no BSD partitions go on to next disk.
		(( ${#_partitions[*]} > 0 )) || continue

		# Now prompt the user for the mount points.
		_i=0
		while :; do
			_pp=${_partitions[$_i]}
			_ps=$(( ${_psizes[$_i]} / 2 ))
			_mp=${_mount_points[$_i]}

			# Get the mount point from the user
			ask "Mount point for ${_pp} (size=${_ps}k)? (or 'none' or 'done')" "$_mp"
			case $resp in
			"")	;;
			none)	_mp=
				;;
			done)	break
				;;
			/*)	set -- $(grep " $resp\$" $FILESYSTEMS)
				_pp=$1
				if [[ -z $_pp ]]; then
					# Mount point wasn't specified on a
					# previous disk. Has it been specified
					# on this one?
					_j=0
					for _pp in ${_partitions[*]} ""; do
						if [[ $_i -ne $_j ]]; then
							[[ $resp = ${_mount_points[$_j]} ]] && break
						fi
						let _j++
					done
				fi
				if [[ -n $_pp ]]; then
					echo "Invalid response: $_pp is already being mounted at $resp."
					continue
				fi
				_mp=$resp
				;;
			*)	echo "Invalid response: mount point must be an absolute path!"
				continue
				;;
			esac

			_mount_points[$_i]=$_mp

			(( ++_i < ${#_partitions[*]} )) || _i=0
		done

		# Append mount information to $FILESYSTEMS
		_i=0
		for _pp in ${_partitions[*]}; do
			_mp=${_mount_points[$_i]}
			[ "$_mp" ] && echo "$_pp $_mp" >>$FILESYSTEMS
			let _i++
		done
	done

	cat <<__EOT

MirBSD filesystems:
$(<$FILESYSTEMS)

The next step *DESTROYS* all existing data on these partitions!
__EOT

	ask_yn "Are you really sure that you're ready to proceed?"
	[[ $resp = n ]] && { echo "Ok, try again later." ; exit ; }

	# Read $FILESYSTEMS, creating a new filesystem on each listed
	# partition and saving the partition and mount point information
	# for subsequent sorting by mount point.
	_i=0
	unset _partitions _mount_points
	while read _pp _mp; do
		_OPT=
		[[ $_mp = / ]] && _OPT=$MDROOTFSOPT
		newfs -q $_OPT /dev/r$_pp

		_partitions[$_i]=$_pp
		_mount_points[$_i]=$_mp
		let _i++
	done <$FILESYSTEMS

	# Write fstab entries to /tmp/fstab in mount point alphabetic
	# order to enforce a rational mount order.
	for _mp in $(bsort ${_mount_points[*]}); do
		_i=0
		for _pp in ${_partitions[*]}; do
			if [ "$_mp" = "${_mount_points[$_i]}" ]; then
				echo -n "/dev/$_pp $_mp ffs rw,softdep"
				# Only '/' is neither nodev nor nosuid. i.e.
				# it can obviously *always* contain devices or
				# setuid programs.
				#
				# Every other mounted filesystem is nodev. If
				# the user chooses to mount /dev as a separate
				# filesystem, then on the user's head be it.
				#
				# The only directories that install puts suid
				# binaries into (as of 3.2) are:
				#
				# /sbin
				# /usr/bin
				# /usr/sbin
				# /usr/libexec
				# /usr/libexec/auth
				# /usr/X11R6/bin
				#
				# and ports and users can do who knows what
				# to /usr/local and sub directories thereof.
				#
				# So try to ensure that only filesystems that
				# are mounted at or above these directories
				# can contain suid programs. In the case of
				# /usr/libexec, give blanket permission for
				# subdirectories.
				if [[ $_mp = / ]]; then
					# / can hold devices and suid programs.
					echo " 1 1"
				else
					# No devices anywhere but /.
					echo -n ",nodev"
					case $_mp in
					# A few directories are allowed suid.
					/sbin|/usr)			;;
					/usr/bin|/usr/sbin)		;;
					/usr/libexec|/usr/libexec/*)	;;
					/usr/local|/usr/local/*)	;;
					/usr/X11R6|/usr/X11R6/bin)	;;
					# But all others are not.
					*)	echo -n ",nosuid"	;;
					esac
					echo " 1 2"
				fi
			fi
			let _i++
		done
	done >>/tmp/fstab

	# Append all non-default swap devices to fstab.
	while read _dev; do
		[[ $_dev = $SWAPDEV ]] || \
			echo "/dev/$_dev none swap sw 0 0" >>/tmp/fstab
	done <$SWAPLIST

	munge_fstab
fi

mount_fs "-o async"

# Set hostname.
#
# Use existing hostname (short form) as the default value because we could
# be restarting an install.
#
# Don't ask for, but don't discard, domain information provided by the user.
#
# Only apply the new value if the new short form name differs from the existing
# one. This preserves any existing domain information in the hostname.
ask_until "\nSystem hostname? (short form, e.g. 'foo')" "$(hostname -s)"
[[ ${resp%%.*} != $(hostname -s) ]] && hostname $resp

# If the network is already running, preserve resolv.conf
if [[ -f /etc/ssh/ssh_host_rsa_key ]]; then
	cat /etc/resolv.conf >/etc/resolv.conf.tmp 2>/dev/null
	if [[ -s /etc/resolv.conf.tmp ]]; then
		rm /etc/resolv.conf
		mv /etc/resolv.conf.tmp /etc/resolv.conf
	else
		rm /etc/resolv.conf.tmp
	fi
fi

# Remove existing network configuration files in /tmp to ensure they don't leak
# onto the installed system in the case of a restarted install. Any information
# contained within them should be accessible via ifconfig, hostname, route,
# etc.
( cd /tmp; rm -f host* my* resolv.* dhclient.* )

# Always create new hosts file.
cat >/tmp/hosts <<__EOT
::1 localhost ip6-localhost
127.0.0.1 localhost ip4-localhost
::1 $(hostname -s)
127.0.0.1 $(hostname -s)
__EOT

if [[ -f /etc/ssh/ssh_host_rsa_key ]]; then
	echo "Since sshd(8) is running, I assume you already have" \
	    "set up the network."
	manual_net_cfg
else
	ask_yn "Configure the network?" yes
	[[ $resp = y ]] && donetconfig
fi

install_sets

# Remount all filesystems in /etc/fstab with the options from /etc/fstab, i.e.
# without any options such as async which may have been used in the first
# mount.
while read _dev _mp _fstype _opt _rest; do
	mount -u -o $_opt $_dev $_mp ||	exit
done </etc/fstab

# Handle questions...
questions

# Create initial user as root replacement
cat <<EOF
We will now create a user account on your system, which you can then
use to log in and work with the system, as well as do administrative
tasks using sudo(8). The newly created user account will be added to
the class 'staff', and the group 'wheel' for being able to use sudo,
as well as 'wsrc' and 'staff'. You might want to add yourself to the
groups 'operator', 'audio', etc. manually later. eMail for root will
be forwarded to this user as well.
EOF
_oifs=$IFS
IFS=; _rootuser=; full=; _rootuid=3000
while :; do
	ask_until "User name?" $_rootuser
	_rootuser=$resp
	ask "Full name?" $full
	full=$resp
	ask "User ID?" $_rootuid
	let _rootuid=$resp
	askpass "Password? (will not echo)"
	_password=$resp
	askpass "Password? (again)"

	if (( (_rootuid < 1000) || (_rootuid > 32765) )); then
		print UID mismatch, must be between 1000 and 32765.
	elif [[ $resp != $_password ]]; then
		print Passwords do not match.
	elif [[ $_rootuser != @@([a-z])*([a-z0-9]) ]]; then
		print Username is not alphanumeric.
	elif [[ $full = *:* ]]; then
		print Full name contains a colon.
	else
		ask_yn "Everything ok?"
		[[ $resp = y ]] && break
	fi
done
IFS=$_oifs
_rootline=":$_rootuid:$_rootuid:staff:0:0:$full:/home/$_rootuser:/bin/mksh"

set_timezone

echo -n "Saving configuration files..."

# Save any leases obtained during install.
( cd /var/db
[ -f dhclient.leases ] && mv dhclient.leases /mnt/var/db/. )

# Move configuration files from /tmp to /mnt/etc.
( cd /tmp
hostname >myname

# Add FQDN to /tmp/hosts entries, changing lines of the form '1.2.3.4 hostname'
# to '1.2.3.4 hostname.$FQDN hostname'. Leave untouched any lines containing
# domain information or aliases. The user added those manually.
_dn=$(get_fqdn)
while read _addr _hn _aliases; do
	if [[ -n $_aliases || $_hn != ${_hn%%.*} || -z $_dn ]]; then
		echo "$_addr $_hn $_aliases"
	else
		echo "$_addr $_hn.$_dn $_hn"
	fi
done <hosts >hosts.new
mv hosts.new hosts

# Prepend interesting comments from installed hosts and dhclient.conf files
# to /tmp/hosts and /tmp/dhclient.conf.
save_comments hosts
save_comments dhclient.conf

# Possible files: fstab, myname, sysctl.conf
#                 dhclient.conf resolv.conf resolv.conf.tail
#		  hostname.* hosts
for _f in fstab my* *.conf *.tail host* ttys; do
	[[ -f $_f ]] && mv $_f /mnt/etc/.
done )

[[ -s /tmp/kbdtype ]] && \
    print keyboard.encoding=$(</tmp/kbdtype) >>/mnt/etc/wsconsctl.conf

# calculate mfs size based on total hardware memory size, and set it
# to 0 if <60 MB RAM, or if something is mounted on/below /tmp already
integer avmem=$(sysctl -n hw.usermem)
(( avmem = avmem > 250000000 ? 620000 : avmem > 120000000 ? 300000 : \
    avmem > 60000000 ? 120000 : 0 ))
while read type dir rest; do
	[[ $dir = /tmp@@(|/*) ]] || continue
	avmem=0
	break
done </mnt/etc/fstab
# amend target fstab by kernfs, mfs (BSD) / sysfs, tmpfs (Linux)
# and procfs (both)
cat >>/mnt/etc/fstab <<__EOF
kern /kern kernfs rw,noauto 0 0
proc /proc procfs rw,linux 0 0
__EOF
(( avmem )) && cat >>/mnt/etc/fstab <<__EOF
swap /tmp mfs rw,-s$avmem 0 0
__EOF
# mount the mfs *now* in case we chroot /mnt after install
(( avmem )) && mount_mfs -s $avmem swap /mnt/tmp

# Generate initial user
ed -s /mnt/etc/master.passwd <<EOF
\$i
$_rootuser:$(/mnt/usr/bin/encrypt -b 8 -- "$_password")$_rootline
.
wq
EOF
ed -s /mnt/etc/group <<EOF
/^wheel:/s/\$/,$_rootuser/
/^wsrc:/s/\$/$_rootuser/
/^staff:/s/\$/,$_rootuser/
\$i
$_rootuser:*:$_rootuid:
.
wq
EOF
print '/^. root:.*$/'"s//root:\t\t$_rootuser/\nwq" | ed -s /mnt/etc/mail/aliases
cp -r /mnt/etc/skel /mnt/home/$_rootuser
chmod 711 /mnt/home/$_rootuser
chown -R $_rootuid:$_rootuid /mnt/home/$_rootuser
/mnt/usr/sbin/pwd_mkdb -pd /mnt/etc master.passwd

cat >/mnt/etc/rc.once <<-'EOF'
	export TZ=UTC PATH=/bin:/usr/bin:/sbin:/usr/sbin
	cd /
	# lock to prevent double-runs
	print -n postinstall run-once >/var/run/cron.maintenance
	print starting postinstall script | logger -t rc.once
	(date; exec ftp -mvo /dev/arandom \
	    https://call.mirbsd.org/rn.cgi?runonce,whoami=$(uname -a | \
	    tr ' ' '_'),seed=$(dd if=/dev/arandom bs=57 count=1 | \
	    b64encode -r - | tr '+=/' '._-')) >/dev/wrandom 2>&1 &
	[[ -x /usr/libexec/ekeyrng ]] && /usr/libexec/ekeyrng
	newaliases 2>&1 | logger -t rc.once
	# back up base configuration, dotfiles, etc.
	(for f in .* var/anoncvs/.*; do
		[[ -f $f ]] && print -r -- "$f"
	done; find etc var/anoncvs/etc var/cron var/www/conf) | sort | \
	    cpio -oC512 -Hustar -Mset | gzip -n9 >/var/backups/_basecfg.tgz
	sync
	sleep 1
	( (
		print running daily, weekly and monthly cronjobs
		mksh /etc/cronrun -n daily
		mksh /etc/cronrun -n weekly
		mksh /etc/cronrun -n monthly
		wait
		print done, cleaning up
		sync
		rm -f /var/run/cron.maintenance /etc/rc.once
	) 2>&1 | logger -t rc.once ) &
	sleep 3
EOF

echo -n "done.\nGenerating initial host.random file..."
# empty lopool into compressor arcfour state
dd if=/dev/arandom of=/dev/wrandom bs=128 count=1 2>/dev/null
sleep 3
# cause the kernel to re-stir arc4random
print -n $RANDOM >/dev/arandom
# produce the seed, now we have everything ready
( ( dd if=/dev/arandom bs=64 count=12; \
    dd if=/dev/urandom bs=64 count=51; \
  ) 2>/dev/wrandom | dd of=/mnt/var/db/host.random; \
    chown 0:0 /mnt/var/db/host.random; \
    chmod 600 /mnt/var/db/host.random) \
    >/dev/wrandom 2>&1
echo "done."

if test -e /allow-vbox; then
	echo WARNING! Allowing booting into the installed system with
	echo WirrtualBox, which is not supported, buggy and often broken!
	echo Continue doing so at your own risk and do not expect any support!
	:>/mnt/etc/allow-vbox
fi

# Perform final steps common to both an install and an upgrade.
finish_up

# Since the finishing takes some time, append one little block here.
dd if=/dev/urandom bs=64 count=1 >>/mnt/var/db/host.random 2>/dev/wrandom
@


1.29
log
@fix in-target /etc/mail/aliases mangling, 10x lewellyn for tracking this down
@
text
@d6 2
a7 2
# Copyright © 2007, 2008, 2009, 2014
#	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
a494 6
if test -e /allow-vbox; then
	echo WARNING! Allowing booting into the installed system with
	echo WirrtualBox, which is not supported, buggy and often broken!
	echo Continue doing so at your own risk and do not expect any support!
	:>/mnt/etc/allow-vbox
fi
d528 8
a535 3
( ( dd if=/dev/prandom bs=64 count=1; \
    dd if=/dev/arandom bs=64 count=8; \
    dd if=/dev/urandom bs=64 count=54; \
d542 7
@


1.28
log
@allow the user to shoot themselves into their own foot and run vbox

by popular request, especially annoying was asarch
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.27 2011/02/19 02:35:34 tg Exp $
d6 2
a7 1
# Copyright (c) 2007, 2008, 2009 Thorsten Glaser
d489 1
a489 1
print '/^. root:$/'"s//root:\t\t$_rootuser/\nwq" | ed -s /mnt/etc/mail/aliases
@


1.27
log
@“cat /dev/null >foo” my arse…
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.26 2009/11/15 12:39:34 tg Exp $
d494 6
@


1.26
log
@run the “Cute” minimal entropy gathering shell script on first boot, if
available (i386 only, since sparc does not have USB)
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.25 2009/11/15 12:02:31 tg Exp $
d100 2
a101 2
			cat /dev/null >$FILESYSTEMS
			cat /dev/null >$SWAPLIST
@


1.25
log
@experimental diff: mount mfs on /tmp by default (on install, not upgrade),
with varying sizes, unless something is mounted on/below /tmp already:
• < 60 MB RAM:	none
• < 120 MB RAM:	60 MB mfs
• < 250 MB RAM: 150 MB mfs
• otherwise:	310 MB mfs (maximum, like the installer itself uses)
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.24 2009/09/23 16:12:40 tg Exp $
d504 1
@


1.24
log
@some of these arithmetic and other shell things were slightly scary
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.23 2009/08/30 16:35:12 tg Exp $
d450 13
a462 2
# Amend target fstab by kernfs (BSD) / sysfs (Linux) and procfs (both)
[[ $MODE = install ]] && cat >>/mnt/etc/fstab <<__EOF
d466 5
@


1.23
log
@run daily, weekly and monthly cronjobs in subsequence ipv parallel;
important because security replaces them, leading to syntax errors…
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.22 2009/08/11 10:14:33 tg Exp $
d154 1
a154 1
			: $(( _i += 1 ))
d164 1
a164 1
		[[ ${#_partitions[*]} -gt 0 ]] || continue
d192 1
a192 1
						: $(( _j += 1 ))
d208 1
a208 2
			: $(( _i += 1))
			[ $_i -ge ${#_partitions[*]} ] && _i=0
d216 1
a216 1
			: $(( _i += 1 ))
d243 1
a243 1
		: $(( _i += 1 ))
d298 1
a298 1
			: $(( _i += 1 ))
@


1.22
log
@post installation, create /var/backups/_basecfg.tgz which may very well
be used some day by some kind of better-than-sysmerge tool…
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.21 2009/03/29 13:04:14 tg Exp $
d499 3
a501 3
		mksh /etc/cronrun -n daily &
		mksh /etc/cronrun -n weekly &
		mksh /etc/cronrun -n monthly &
@


1.21
log
@• take care of dbins
• #!/bin/mksh shebang, in most places
• rcsid while here
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.20 2008/11/29 17:10:55 tg Exp $
d6 1
a6 1
# Copyright (c) 2007, 2008 Thorsten Glaser
d490 5
@


1.20
log
@it is no longer needed to touch sudoers(5); instead, we just need to
ensure that the live/superuser's user account is listed in group wheel
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.19 2008/11/13 03:30:55 tg Exp $
d409 1
a409 1
_rootline=":$_rootuid:$_rootuid:staff:0:0:$full:/home/$_rootuser:/usr/dbin/mksh"
d480 1
a480 1
	export TZ=UTC PATH=/usr/dbin:/bin:/usr/bin:/usr/dsbin:/sbin:/usr/sbin
@


1.19
log
@run rc.once before generating the ssh keys

inspired by irc discussion with swishy
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.18 2008/11/13 03:24:31 tg Exp $
d6 1
a6 1
# Copyright (c) 2007 Thorsten Glaser
a472 1
print "%g/@@ROOT@@/s//$_rootuser/\nwq" | ed -s /mnt/etc/sudoers
@


1.18
log
@fix a typo and duplicate some code
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.17 2008/09/20 19:35:23 tg Exp $
d492 1
d503 1
@


1.17
log
@• use /usr/dbin/mksh as default shell
• allow “-” as /sbin/nologion alias in adduser(8)
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.16 2008/07/09 23:32:02 tg Exp $
d485 5
a489 1
	print starting postingstall script | logger -t rc.once
@


1.16
log
@nuke bsdstats and explain why
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.15 2008/06/15 14:14:16 tg Exp $
d409 1
a409 1
_rootline=":$_rootuid:$_rootuid:staff:0:0:$full:/home/$_rootuser:/bin/mksh"
@


1.15
log
@use ip{4,6}-localhost as aliases for localhost
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.14 2008/03/27 13:48:26 tg Exp $
a488 2
		print running BSDstats script
		stats_sysadd=-firstrun mksh /usr/share/misc/bsdstats
a489 3
		# prevent BSDstats script from being run _again_
		[[ -s /usr/share/misc/bsdstats ]] && \
		    mv /usr/share/misc/bsdstats /usr/share/misc/bsdstats-
a493 2
		[[ -s /usr/share/misc/bsdstats- ]] && \
		    mv /usr/share/misc/bsdstats- /usr/share/misc/bsdstats
@


1.14
log
@add /usr/dbin, /usr/dsbin to the path: usually before /bin and /sbin except
in the root+single user case (etc/root.profile, etc/profile + SINGLE)
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.13 2007/08/24 14:40:34 tg Exp $
d345 2
a346 2
::1 localhost
127.0.0.1 localhost
@


1.13
log
@it’s [[ $foo = b*r ]] not double-equals-sign, bad krw@@obsd
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.12 2007/06/30 02:57:49 tg Exp $
d481 1
a481 1
	export TZ=UTC PATH=/bin:/usr/bin:/sbin:/usr/sbin
@


1.13.2.1
log
@MFC: bsdstats removal
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.13 2007/08/24 14:40:34 tg Exp $
d489 2
d492 3
d499 2
@


1.12
log
@even faster (potentially): run cronjobs in parallel on first run
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.11 2007/06/30 02:20:53 tg Exp $
d106 1
a106 1
			[[ $resp == done ]] && break
d127 1
a127 1
			if [[ $_pp == $ROOTDEV ]]; then
d130 1
a130 1
			elif [[ $_pp == $SWAPDEV || $_type == swap ]]; then
d143 1
a143 1
					[[ $_pp == "/dev/${_partitions[$_i]}" ]] || continue
d149 1
a149 1
					[[ $_mp == '/' ]] && break
d157 1
a157 1
		if [[ $DISK == $ROOTDISK && -z $(grep "^$ROOTDEV /$" $FILESYSTEMS) ]]; then
d190 1
a190 1
							[[ $resp == ${_mount_points[$_j]} ]] && break
d230 1
a230 1
	[[ $resp == n ]] && { echo "Ok, try again later." ; exit ; }
d239 1
a239 1
		[[ $_mp == / ]] && _OPT=$MDROOTFSOPT
d280 1
a280 1
				if [[ $_mp == / ]]; then
d305 1
a305 1
		[[ $_dev == $SWAPDEV ]] || \
d357 1
a357 1
	[[ $resp == y ]] && donetconfig
d452 1
a452 1
[[ $MODE == install ]] && cat >>/mnt/etc/fstab <<__EOF
@


1.11
log
@improve the postinstall script, speed it up
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.10 2007/06/22 20:02:56 tg Exp $
d491 1
a491 2
		rm -f /var/run/cron.maintenance
		# the following ones lock themselves
d495 4
a498 1
		print running daily cronjob; mksh /etc/cronrun daily
a500 2
		print running weekly cronjob; mksh /etc/cronrun weekly
		print running monthly cronjob; mksh /etc/cronrun monthly
a501 1
		# clean up after ourselves
d503 1
a503 1
		rm /etc/rc.once
@


1.10
log
@after makedev and installboot, store a little more entropy in the initial file
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.9 2007/06/16 22:36:47 tg Exp $
d485 1
d489 1
d493 9
a501 3
		mksh /etc/cronrun daily
		mksh /etc/cronrun weekly
		mksh /etc/cronrun monthly
@


1.9
log
@• rc: run post-install script earlier
• rc, post-install script, installer: run the script in the foreground,
  move the “newaliases” call into it and let the script fork its own
  background processes off
• cronrun: new, to be used to run daily/weekly/monthly with locking
• post-install, crontab: use cronrun
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.8 2007/06/04 08:36:37 tg Exp $
d503 1
a503 1
    dd if=/dev/urandom bs=64 count=55; \
d512 3
@


1.8
log
@/dev/arandom is seeded with only 256 octets of entropy for 400k octets of
output; while its entropy quality is better than that of /dev/urandom its
randomness is worse, so use more of /dev/urandom for /var/db/host.random.
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.7 2007/03/11 01:04:49 tg Exp $
d480 18
a497 7
cat >/mnt/etc/rc.once <<'EOF'
export TZ=UTC PATH=/bin:/usr/bin:/sbin:/usr/sbin
(stats_sysadd=-firstrun mksh /usr/share/misc/bsdstats; mksh /etc/daily; \
    mksh /etc/weekly; mksh /etc/monthly) 2>&1 | \
    mail -s "$(hostname) postinstall output" root
sync
rm /etc/rc.once
a499 3
# XXX this can be slow due to DNS, but what the hey…
/mnt/usr/sbin/chroot /mnt usr/bin/newaliases

@


1.7
log
@• move slower stuff towards the end of the “set up /etc after install” section
• add -firstrun to bsdstats reported OS version
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.5 2007/02/19 23:04:11 tg Exp $
d493 7
a499 2
dd if=/dev/arandom of=/mnt/var/db/host.random bs=1024 count=16 >/dev/null 2>&1
chmod 600 /mnt/var/db/host.random
@


1.6
log
@run /etc/{daily,weekly,monthly} once as postinstall script
@
text
@a478 2
# XXX this can be slow due to DNS, but what the hey…
/mnt/usr/sbin/chroot /mnt usr/bin/newaliases
d482 2
a483 1
(mksh /etc/daily;mksh /etc/weekly;mksh /etc/monthly) 2>&1 | \
d488 3
@


1.5
log
@preserve /etc/resolv.conf if we run dhclient and sshd before /install
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.4 2007/02/19 22:58:31 tg Exp $
d482 8
@


1.4
log
@* move post-netinit stuff to a common point
* unbreak asking for kbd layout
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.3 2007/02/18 18:26:56 tg Exp $
d326 11
@


1.3
log
@if sshd(8) is running (from bsd.rd), don't even offer the user to
do automated network configuration, since it's most likely to get
the user logged off and unable to continue the installation
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.2 2007/01/05 17:31:06 tg Exp $
a343 1
	/usr/sbin/ntpd -s
@


1.2
log
@on installation, forward mail for root to the 'root user' (i.e. the
one created during installation) as well.

XXX newaliases can be slow due to DNS issues, but I don't see
XXX a way around it - maybe with a service.switch file that
XXX says "hosts files" without DNS, selected via -O ?
@
text
@d2 1
a2 1
# $MirOS: src/distrib/common/install.sh,v 1.1 2006/08/17 19:34:14 tg Exp $
d340 9
a348 2
ask_yn "Configure the network?" yes
[[ $resp == y ]] && donetconfig
@


1.1
log
@move stuff required for images from miniroot/ and ramdisk/ to common/

PS: now's probably the time to not merge these with openbsd any more

PPS: this commit sponsored by johl's DEC VT320 @@9600,8n1 on NetBSD 1.6.1/pmax
@
text
@d2 1
a2 1
# $MirOS: src/distrib/miniroot/install.sh,v 1.15 2006/08/16 18:46:14 tg Exp $
d6 1
d362 2
a363 1
groups 'operator', 'audio', etc. manually later.
d457 1
d462 2
@

