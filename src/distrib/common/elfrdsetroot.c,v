head	1.6;
access;
symbols
	MIRBSD_10:1.6.0.2
	MIRBSD_10_BASE:1.6
	MIRBSD_9_BASE:1.5
	MIRBSD_8:1.4.0.2
	MIRBSD_8_BASE:1.4
	cvs-200507211800:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2007.06.29.18.31.25;	author tg;	state Exp;
branches;
next	1.5;
commitid	100468550074BA8CE30;

1.5
date	2006.05.26.18.24.08;	author tg;	state Exp;
branches;
next	1.4;
commitid	100447747D773C4FEF7;

1.4
date	2005.12.04.23.14.38;	author tg;	state Exp;
branches;
next	1.3;
commitid	6ea6439378626964;

1.3
date	2005.07.24.16.44.12;	author tg;	state Exp;
branches;
next	1.2;
commitid	377c42e3c570e5b3;

1.2
date	2005.03.06.18.58.02;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.22.10;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.22.10;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.45.43;	author tg;	state Exp;
branches;
next	;
commitid	560042e0092f571e;


desc
@@


1.6
log
@fix call to msync(2), from Rainer Giedat
@
text
@/**	$MirOS: src/distrib/common/elfrdsetroot.c,v 1.5 2006/05/26 18:24:08 tg Exp $ */
/*	$OpenBSD: elfrdsetroot.c,v 1.10 2005/01/14 22:47:06 deraadt Exp $	*/
/*	$NetBSD: rdsetroot.c,v 1.2 1995/10/13 16:38:39 gwr Exp $	*/

/*
 * Copyright (c) 1994 Gordon W. Ross
 * All rights reserved.
 *
 * ELF modifications Copyright (c) 1997 Per Fogelstrom.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copy a ramdisk image into the space reserved for it.
 * Kernel variables: rd_root_size, rd_root_image
 */

#include <sys/types.h>
#include <sys/file.h>
#include <sys/mman.h>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <nlist.h>

#ifdef __LP64__
#define ELFSIZE 64
#else
#define ELFSIZE 32
#endif

#include <sys/exec_elf.h>

__RCSID("$MirOS: src/distrib/common/elfrdsetroot.c,v 1.5 2006/05/26 18:24:08 tg Exp $");

char *file;

/* Virtual addresses of the symbols we frob. */
long	rd_root_image_va, rd_root_size_va;

/* Offsets relative to start of data segment. */
long	rd_root_image_off, rd_root_size_off;

/* value in the location at rd_root_size_off */
off_t	rd_root_size_val;

/* pointers to pieces of mapped file */
char *dataseg;

/* parameters to mmap digged out from program header */
off_t	mmap_offs;
size_t	mmap_size;

int	find_rd_root_image(char *, Elf_Ehdr *, Elf_Phdr *, int);
__dead void usage(void);

int
main(int argc, char **argv)
{
	int ch, fd, n, xflag = 0, found = 0, phsize;
	u_int32_t *ip;
	Elf_Ehdr eh;
	Elf_Phdr *ph;

	while ((ch = getopt(argc, argv, "x")) != -1) {
		switch (ch) {
		case 'x':
			xflag = 1;
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	if (argc != 1)
		usage();
	file = argv[0];

	fd = open(file, O_RDWR, 0644);
	if (fd < 0) {
		perror(file);
		exit(1);
	}

	n = read(fd, &eh, sizeof(eh));
	if (n < sizeof(eh)) {
		fprintf(stderr, "%s: reading header\n", file);
		exit(1);
	}

	if (!IS_ELF(eh)) {
		fprintf(stderr, "%s: not elf\n", file);
		exit(1);
	}

	phsize = eh.e_phnum * sizeof(Elf_Phdr);
	ph = (Elf_Phdr *)malloc(phsize);
	lseek(fd, eh.e_phoff, 0);
	if (read(fd, (char *)ph, phsize) != phsize) {
		fprintf(stderr, "%s: can't read phdr area\n", file);
		exit(1);
	}

	for (n = 0; n < eh.e_phnum && !found; n++) {
		if (ph[n].p_type == PT_LOAD)
			found = find_rd_root_image(file, &eh, &ph[n], n);
	}
	if (!found) {
		fprintf(stderr, "%s: can't locate space for rd_root_image!\n",
		    file);
		exit(1);
	}

	/*
	 * Map in the whole data segment.
	 * The file offset needs to be page aligned.
	 */
	dataseg = mmap(NULL, mmap_size, PROT_READ | PROT_WRITE,
	    MAP_SHARED, fd, mmap_offs);
	if (dataseg == MAP_FAILED) {
		fprintf(stderr, "%s: can not map data seg\n", file);
		perror(file);
		exit(1);
	}

	/*
	 * Find value in the location: rd_root_size
	 */
	ip = (u_int32_t*) (dataseg + rd_root_size_off);
	rd_root_size_val = *ip;
#ifdef	DEBUG
	fprintf(stderr, "rd_root_size  val: 0x%08X (%d blocks)\n",
	    (u_int32_t)rd_root_size_val,
	    (u_int32_t)(rd_root_size_val >> 9));
#endif

	/*
	 * Copy the symbol table and string table.
	 */
#ifdef	DEBUG
	fprintf(stderr, "copying root image...\n");
#endif
	if (xflag) {
		n = write(STDOUT_FILENO, dataseg + rd_root_image_off,
		    rd_root_size_val);
		if (n != rd_root_size_val) {
			perror("write");
			exit(1);
		}
	} else {
		n = read(STDIN_FILENO, dataseg + rd_root_image_off,
		    rd_root_size_val);
		if (n < 0) {
			perror("read");
			exit(1);
		}

		msync(dataseg, mmap_size, MS_SYNC);
	}

#ifdef	DEBUG
	fprintf(stderr, "...copied %d bytes\n", n);
#endif
	close(fd);
	exit(0);
}


/*
 * Find locations of the symbols to patch.
 */
struct nlist wantsyms[] = {
	{ "_rd_root_size", 0 },
	{ "_rd_root_image", 0 },
	{ NULL, 0 }
};

int
find_rd_root_image(char *file, Elf_Ehdr *eh, Elf_Phdr *ph, int segment)
{
	unsigned long kernel_start, kernel_size;

	if (nlist(file, wantsyms)) {
		fprintf(stderr, "%s: no rd_root_image symbols?\n", file);
		exit(1);
	}
	kernel_start = ph->p_paddr;
	kernel_size = ph->p_filesz;

	rd_root_size_off	= wantsyms[0].n_value - kernel_start;
	rd_root_size_off	-= (ph->p_vaddr - ph->p_paddr);
	rd_root_image_off	= wantsyms[1].n_value - kernel_start;
	rd_root_image_off	-= (ph->p_vaddr - ph->p_paddr);

#ifdef DEBUG
	fprintf(stderr, "segment %d rd_root_size_off = 0x%lx\n", segment,
	    rd_root_size_off);
	if ((ph->p_vaddr - ph->p_paddr) != 0)
		fprintf(stderr, "root_off v %x p %x, diff %x altered %lx\n",
		    ph->p_vaddr, ph->p_paddr,
		    (ph->p_vaddr - ph->p_paddr),
		    rd_root_size_off - (ph->p_vaddr - ph->p_paddr));
	fprintf(stderr, "rd_root_image_off = 0x%lx\n", rd_root_image_off);
#endif

	/*
	 * Sanity check locations of db_* symbols
	 */
	if (rd_root_image_off < 0 || rd_root_image_off >= kernel_size)
		return(0);
	if (rd_root_size_off < 0 || rd_root_size_off >= kernel_size) {
		fprintf(stderr, "%s: rd_root_size not in data segment?\n",
		    file);
		return(0);
	}
	mmap_offs = ph->p_offset;
	mmap_size = kernel_size;
	return(1);
}

__dead void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-x] file_name\n", __progname);
	exit(1);
}
@


1.5
log
@fix stdout -> stderr confusion
@
text
@d1 1
a1 1
/**	$MirOS: src/distrib/common/elfrdsetroot.c,v 1.4 2005/12/04 23:14:38 tg Exp $ */
d56 1
a56 1
__RCSID("$MirOS$");
d182 1
a182 1
		msync(dataseg, mmap_size, 0);
@


1.4
log
@* elfrdsetroot: fix size of format string arguments (yeah! openbsd, eat this)
* distrib, etc, sys/arch/conf: shrink size of i386 FLOPPY in-kernel root disc
* distrib/*: re-enable i386 floppy (and lots of free space despite smaller)
* distrib/i386/common/list: enable it to find ssh's sources
* libz: make it usable as an in-kernel library "as is"
  XXX remove zlib.{c,h} from src/sys/dev/
* files.i386: use external libz sources
* pbr: export new public symbol
@
text
@d1 1
a1 1
/**	$MirOS: src/distrib/common/elfrdsetroot.c,v 1.3 2005/07/24 16:44:12 tg Exp $ */
d56 2
d111 1
a111 1
		printf("%s: reading header\n", file);
d116 1
a116 1
		printf("%s: not elf\n", file);
d124 1
a124 1
		printf("%s: can't read phdr area\n", file);
d133 2
a134 1
		printf("%s: can't locate space for rd_root_image!\n", file);
d145 1
a145 1
		printf("%s: can not map data seg\n", file);
d156 1
a156 1
	printf("rd_root_size  val: 0x%08X (%d blocks)\n",
d165 1
a165 1
	printf("copying root image...\n");
d186 1
a186 1
	printf("...copied %d bytes\n", n);
d208 1
a208 1
		printf("%s: no rd_root_image symbols?\n", file);
d220 2
a221 1
	printf("segment %d rd_root_size_off = 0x%lx\n", segment, rd_root_size_off);
d223 1
a223 1
		printf("root_off v %x p %x, diff %x altered %lx\n",
d227 1
a227 1
	printf("rd_root_image_off = 0x%lx\n", rd_root_image_off);
d236 2
a237 1
		printf("%s: rd_root_size not in data segment?\n", file);
@


1.3
log
@merge and obsolete special kbd (we just use the generic one)
@
text
@d1 1
a1 1
/**	$MirOS: src/distrib/common/elfrdsetroot.c,v 1.2 2005/03/06 18:58:02 tg Exp $ */
d217 1
a217 1
	printf("segment %d rd_root_size_off = 0x%x\n", segment, rd_root_size_off);
d219 1
a219 1
		printf("root_off v %x p %x, diff %x altered %x\n",
d223 1
a223 1
	printf("rd_root_image_off = 0x%x\n", rd_root_image_off);
@


1.2
log
@merge src/distrib
@
text
@d1 2
a2 2
/**	$MirOS$ */
/*	$OpenBSD: elfrdsetroot.c,v 1.5 2004/02/04 14:28:22 mickey Exp $	*/
d48 1
a48 2
#if defined(__alpha__) || defined(__sparc64__) || \
    defined(__x86_64__)					/* XXXXXX */
a55 2
extern off_t lseek();

d59 1
a59 1
long rd_root_image_va, rd_root_size_va;
d62 1
a62 1
long rd_root_image_off, rd_root_size_off;
d65 1
a65 1
off_t rd_root_size_val;
d71 2
a72 2
off_t mmap_offs;
size_t mmap_size;
d74 1
a74 1
int find_rd_root_image(char *, Elf_Ehdr *, Elf_Phdr *);
d78 1
a78 2
main(argc,argv)
	char **argv;
d80 1
a80 2
	int ch, fd, n, xflag;
	int found;
a83 1
	int phsize;
a84 1
	xflag = 0;
d120 1
a120 1
	lseek(fd,  eh.e_phoff, 0);
d125 4
a128 5
	found = 0;
	for(n = 0; n < eh.e_phnum && !found; n++) {
		if(ph[n].p_type == PT_LOAD) {
			found = find_rd_root_image(file, &eh, &ph[n]);
		}
d131 1
a131 1
		printf("%s: can't locate space for rd_root_image!", file);
d139 2
a140 5
	dataseg = mmap(NULL,	/* any address is ok */
				   mmap_size, /* length */
				   PROT_READ | PROT_WRITE,
				   MAP_SHARED,
				   fd, mmap_offs);
d154 2
a155 2
		(u_int32_t)rd_root_size_val,
		(u_int32_t)(rd_root_size_val >> 9));
d196 1
a196 1
	{ NULL, 0 },
d200 1
a200 4
find_rd_root_image(file, eh, ph)
	char *file;
	Elf_Ehdr *eh;
	Elf_Phdr *ph;
d202 1
a202 2
	unsigned long kernel_start;
	unsigned long kernel_size;
d211 4
a214 2
	rd_root_size_off = wantsyms[0].n_value - kernel_start;
	rd_root_image_off     = wantsyms[1].n_value - kernel_start;
d217 7
a223 2
	printf("rd_root_size_off = 0x%lx\n", rd_root_size_off);
	printf("rd_root_image_off = 0x%lx\n", rd_root_image_off);
d229 1
a229 1
	if (rd_root_image_off < 0 || rd_root_image_off >= kernel_size) {
a230 1
	}
d236 1
a236 1
	mmap_size =  kernel_size;
@


1.1
log
@Initial revision
@
text
@d1 1
d230 2
a231 2
	printf("rd_root_size_off = 0x%x\n", rd_root_size_off);
	printf("rd_root_image_off = 0x%x\n", rd_root_image_off);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: elfrdsetroot.c,v 1.10 2005/01/14 22:47:06 deraadt Exp $	*/
d47 2
a48 1
#ifdef __LP64__
d56 2
d61 1
a61 1
long	rd_root_image_va, rd_root_size_va;
d64 1
a64 1
long	rd_root_image_off, rd_root_size_off;
d67 1
a67 1
off_t	rd_root_size_val;
d73 2
a74 2
off_t	mmap_offs;
size_t	mmap_size;
d76 1
a76 1
int	find_rd_root_image(char *, Elf_Ehdr *, Elf_Phdr *, int);
d80 2
a81 1
main(int argc, char **argv)
d83 2
a84 1
	int ch, fd, n, xflag = 0, found = 0, phsize;
d88 1
d90 1
d126 1
a126 1
	lseek(fd, eh.e_phoff, 0);
d131 5
a135 4

	for (n = 0; n < eh.e_phnum && !found; n++) {
		if (ph[n].p_type == PT_LOAD)
			found = find_rd_root_image(file, &eh, &ph[n], n);
d138 1
a138 1
		printf("%s: can't locate space for rd_root_image!\n", file);
d146 5
a150 2
	dataseg = mmap(NULL, mmap_size, PROT_READ | PROT_WRITE,
	    MAP_SHARED, fd, mmap_offs);
d164 2
a165 2
	    (u_int32_t)rd_root_size_val,
	    (u_int32_t)(rd_root_size_val >> 9));
d206 1
a206 1
	{ NULL, 0 }
d210 4
a213 1
find_rd_root_image(char *file, Elf_Ehdr *eh, Elf_Phdr *ph, int segment)
d215 2
a216 1
	unsigned long kernel_start, kernel_size;
d225 2
a226 4
	rd_root_size_off	= wantsyms[0].n_value - kernel_start;
	rd_root_size_off	-= (ph->p_vaddr - ph->p_paddr);
	rd_root_image_off	= wantsyms[1].n_value - kernel_start;
	rd_root_image_off	-= (ph->p_vaddr - ph->p_paddr);
d229 1
a229 6
	printf("segment %d rd_root_size_off = 0x%x\n", segment, rd_root_size_off);
	if ((ph->p_vaddr - ph->p_paddr) != 0)
		printf("root_off v %x p %x, diff %x altered %x\n",
		    ph->p_vaddr, ph->p_paddr,
		    (ph->p_vaddr - ph->p_paddr),
		    rd_root_size_off - (ph->p_vaddr - ph->p_paddr));
d236 1
a236 1
	if (rd_root_image_off < 0 || rd_root_image_off >= kernel_size)
d238 1
d244 1
a244 1
	mmap_size = kernel_size;
@

