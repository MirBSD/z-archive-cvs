head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	2016.01.17.05.23.11;	author tg;	state Exp;
branches;
next	1.6;
commitid	100569B255623B64F8A;

1.6
date	2015.10.18.18.42.57;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005623E84A1ADEA3F3;

1.5
date	2013.03.29.16.49.52;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005155C6496F66A629;

1.4
date	2012.09.02.22.14.45;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005043DA6D20CE1B7A;

1.3
date	2010.08.07.16.00.05;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004C5D82DA3E309F6D;

1.2
date	2010.08.06.15.40.01;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004C5C2C6D79827EDA;

1.1
date	2010.01.30.14.31.02;	author tg;	state Exp;
branches;
next	;
commitid	1004B6442BD5D9B6EF8;


desc
@@


1.7
log
@do it right
@
text
@# $MirOS: src/distrib/common/Makefile.Grml,v 1.5 2013/03/29 16:49:52 tg Exp $

CBIN?=		instbin
IMAGESIZE=	8192
IMAGETYPE=	ipldisc

KERNEL_BUILD=	no
#		(17,0) = rd0a
RAMDISK_PREP=	print 'rootdev 17 0\nquit' | config -ef $@@~

FLOPPY=		no
.if exists(${REALOBJDIR}/../../../sys/arch/i386/stand/liveboot/.)
BOOT=		ldbsd.iso
DO_LIVEBOOT=	#defined
.endif
CDROM=		bsd4grml.iso
CDROM_OPTS+=	bootimage=i386\;eltorito.loo
CDROM_OPTS+=	no-emul-boot

CLEANFILES+=	ldbsd.* LICENCE.TXT gpl_srcs.txz

all: templates/bsd4grml.stamp

bsd: ${BSDOBJDIR}/distrib/generic/bsd
	cp -f $> $@@

LISTADDS=	boot bridge cd9660 dhclient disktools ext2fs i386 isdn msdos \
		nettools nfs nfsd pager-less ppp-user pppoe-kernel \
		pppoe-user
MACHCONF:=	i386-big
LISTADDS+=	Grml
LGRUBCFG=	grml

${CBIN}.conf: gnustuff

gnustuff: .PHONY
	for dir in ${.CURDIR}/tinyirc ${TOPDIR}/../contrib/gnu/e3; do \
		(cd $$dir && ${MAKE} obj && ${MAKE} depend && ${MAKE}); \
	done
	cd ${TOPDIR}/../share/doc/legal && ${MAKE} grml
	cp ${REALOBJDIR}/../../../share/doc/legal/grml LICENCE.TXT
	rm -rf gplsrcs
	mkdir -p gplsrcs/{e3,tinyirc}
	cp ${TOPDIR}/../contrib/gnu/e3/{Makefile,README,e3.*} gplsrcs/e3/
	cp ${TOPDIR}/../contrib/code/Snippets/tinyirc.c gplsrcs/tinyirc/
	(cd gplsrcs && find * -type f | sort | cpio -oC512 -Hustar -Mdist | \
	    xz -3e) >gpl_srcs.txz

cleannobsd: clean_grmldirs

clean_grmldirs:
	-rm -rf gplsrcs templates

cdrom-prepare: ldbsd.stamp

ldbsd.stamp:
.ifdef DO_LIVEBOOT
	cd ${.CURDIR}/../../../sys/arch/i386/stand/liveboot; \
	    ${MAKE} BSD4GRML=iso cleandir && \
	    ${MAKE} BSD4GRML=iso depend && \
	    exec ${MAKE} BSD4GRML=iso NOMAN=Yes
	cp ${REALOBJDIR}/../../../sys/arch/i386/stand/liveboot/boot ldbsd.iso
	cd ${.CURDIR}/../../../sys/arch/i386/stand/liveboot; \
	    ${MAKE} BSD4GRML=Yes cleandir && \
	    ${MAKE} BSD4GRML=Yes depend && \
	    exec ${MAKE} BSD4GRML=Yes
	cp ${REALOBJDIR}/../../../sys/arch/i386/stand/liveboot/boot ldbsd.com
	cp ${REALOBJDIR}/../../../sys/arch/i386/stand/liveboot/ldbsd.txt .
	@@:>$@@
.else
	@@echo 'need [[ -d ${REALOBJDIR}/../../../sys/arch/i386/stand/liveboot/. ]]'
	@@exit 1
.endif

templates/bsd4grml.stamp: ${CDROM}

cdrom-mdcopy:
	dd if=/dev/arandom bs=2048 count=1 of=eltorito.loo
	-rm -rf templates
	mkdir -p templates/boot/{addons/bsd4grml,grub}
	mv ${WRKDIR}/boot/grub/loopback.cfg templates/boot/grub/
	mv ${WRKDIR}/boot/grub/loopback.* templates/boot/addons/bsd4grml/
	mv ${WRKDIR}/v${OSrev}/${MACHINE}/bsd.rd templates/boot/addons/bsd4grml/
	cd ${WRKDIR} && rm -rf *
	cp ${.CURDIR}/boot.* LICENCE.TXT gpl_srcs.txz ldbsd.{com,iso,txt} \
	    templates/boot/addons/bsd4grml/
	chmod 0644 templates/boot/addons/bsd4grml/* templates/boot/grub/*
	cd templates && pax -rw -l -pe boot ${WRKDIR}/
	rm -f templates/boot/addons/bsd4grml/ldbsd.iso
	ln ${WRKDIR}/boot/addons/bsd4grml/ldbsd.iso ${WRKDIR}/b_${MACHINE}.ldr
	@@:>templates/bsd4grml.stamp

cdrom-mdboot:
	getextent_cd9660 -f ${CDROM} b_${MACHINE}.ldr | \
	    ${MKSH} ${BOOTSH} \
	    -g $$((#$$(stat -f %z ${CDROM}) / (512 * 32 * 16))):16:32 \
	    -A -M 4:0x96 -S 2 | \
	    dd of=${CDROM} conv=notrunc 2>/dev/null
	getextent_cd9660 -f ${CDROM} b_${MACHINE}.ldr | \
	    ${MKSH} ${BOOTSH} -B 11 | \
	    dd of=${CDROM} conv=notrunc bs=2048 seek=$$(getextent_cd9660 \
	    -f ${CDROM} -b '$$BootImage$$') 2>/dev/null
@


1.6
log
@save some space
@
text
@d20 1
a20 1
CLEANFILES+=	ldbsd.* LICENCE.TXT gpl_srcs.tgz
d85 1
a85 1
	cp ${.CURDIR}/boot.* LICENCE.TXT gpl_srcs.tgz ldbsd.{com,iso,txt} \
@


1.5
log
@add brconfig(8) to the big i386 kernels; it’s a tight 20K but should work
@
text
@d1 1
a1 1
# $MirOS: src/distrib/common/Makefile.Grml,v 1.4 2012/09/02 22:14:45 tg Exp $
d47 1
a47 1
	    gzip -n9) >gpl_srcs.tgz
@


1.4
log
@ensure each invocation puts on different hostent, for real now
@
text
@d1 1
a1 1
# $MirOS: src/distrib/common/Makefile.Grml,v 1.3 2010/08/07 16:00:05 tg Exp $
d27 1
a27 1
LISTADDS=	boot cd9660 dhclient disktools ext2fs i386 isdn msdos \
@


1.3
log
@fix boot (normal and loopback)

tested, except it doesn’t like the baselive ISO *at all*, even if
NULling its first 32 (512-byte) sectors, no idea why, GRUB is weird

also, cosmetics for loopback.cfg (menu labels)
@
text
@d1 1
a1 1
# $MirOS: src/distrib/common/Makefile.Grml,v 1.2 2010/08/06 15:40:01 tg Exp $
d9 1
a9 1
RAMDISK_PREP=	print 'rootdev 17 0\nquit' | config -ef $@@
@


1.2
log
@I promised «Jordan_U:#grml» our next version would have support for the
boot method via /boot/grub/loopback.cfg – voilà (untested)

In MirOS bsd4grml, all options except chaining to GRUB are available.
In MirOS bsd4me, the install and baselive images, only the standard
bootloader prompt going to the installer is available, although the
command line gives support for e.g. switching to serial console.
@
text
@d1 1
a1 1
# $MirOS: src/distrib/common/Makefile.Grml,v 1.1 2010/01/30 14:31:02 tg Exp $
d87 1
a87 1
	chmod 0644 templates/boot/addons/bsd4grml/*
@


1.1
log
@more templateering woes
@
text
@d1 1
a1 1
# $MirOS: src/distrib/common/grml/Makefile,v 1.9 2010/01/30 13:20:42 tg Exp $
d32 1
d80 3
a82 1
	mkdir -p templates/boot/addons/bsd4grml
@

