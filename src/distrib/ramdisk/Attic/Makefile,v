head	1.17;
access;
symbols
	MIRBSD_9_BASE:1.2
	MIRBSD_8:1.2.0.2
	MIRBSD_8_BASE:1.2
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.17
date	2006.08.17.19.34.22;	author tg;	state dead;
branches;
next	1.16;
commitid	10044E4C48801BF3A85;

1.16
date	2006.08.17.14.09.22;	author tg;	state Exp;
branches;
next	1.15;
commitid	10044E4787416A4A520;

1.15
date	2006.08.17.13.49.42;	author tg;	state Exp;
branches;
next	1.14;
commitid	10044E474056D33FB86;

1.14
date	2006.07.26.22.44.41;	author tg;	state Exp;
branches;
next	1.13;
commitid	10044C7F06760AE09AE;

1.13
date	2006.07.24.00.52.41;	author tg;	state Exp;
branches;
next	1.12;
commitid	10044C419CC4DA4352C;

1.12
date	2006.07.24.00.24.43;	author tg;	state Exp;
branches;
next	1.11;
commitid	10044C413610752DC30;

1.11
date	2006.07.24.00.24.02;	author tg;	state Exp;
branches;
next	1.10;
commitid	10044C4132D5626FCF6;

1.10
date	2006.07.16.13.19.38;	author tg;	state Exp;
branches;
next	1.9;
commitid	10044BA3CF503761213;

1.9
date	2006.07.05.22.58.56;	author tg;	state Exp;
branches;
next	1.8;
commitid	10044AC442748B9F9EB;

1.8
date	2006.07.05.21.40.08;	author tg;	state Exp;
branches;
next	1.7;
commitid	10044AC31CA1ED578D2;

1.7
date	2006.07.05.21.39.50;	author tg;	state Exp;
branches;
next	1.6;
commitid	10044AC31BB406C33A5;

1.6
date	2006.07.04.23.11.45;	author tg;	state Exp;
branches;
next	1.5;
commitid	10044AAF5B944803A2F;

1.5
date	2006.07.03.23.17.50;	author tg;	state Exp;
branches;
next	1.4;
commitid	10044A9A5A4112B9606;

1.4
date	2006.07.03.22.12.01;	author tg;	state Exp;
branches;
next	1.3;
commitid	10044A99644579D77B3;

1.3
date	2006.07.03.22.09.44;	author tg;	state Exp;
branches;
next	1.2;
commitid	10044A995BA1010F313;

1.2
date	2005.03.06.18.58.04;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.22.10;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.22.10;	author tg;	state Exp;
branches;
next	;


desc
@@


1.17
log
@move stuff required for images from miniroot/ and ramdisk/ to common/

PS: now's probably the time to not merge these with openbsd any more

PPS: this commit sponsored by johl's DEC VT320 @@9600,8n1 on NetBSD 1.6.1/pmax
@
text
@# $MirOS: src/distrib/ramdisk/Makefile,v 1.16 2006/08/17 14:09:22 tg Exp $

.include <bsd.own.mk>

# common variables
REALOBJDIR!=	readlink -nf ${.OBJDIR}
TOPDIR?=	${.CURDIR}/..
SYSDIR=		${TOPDIR}/../sys
MACHCONF?=	${MACHINE}

.if ${.CURDIR}/Makefile.${MACHCONF} != "no"
.  include "${.CURDIR}/Makefile.${MACHCONF}"
.endif

# compiler options
.if !${COPTS:M-Os}
COPTS+=		-Os
.endif
CFLAGS+=	${CDIAGFLAGS} ${COPTS}
HOSTCFLAGS?=	${CFLAGS}

# temporary mounts
TMPMOUNT=	${REALOBJDIR}/tmpmnt
VND?=		svnd0
VND_DEV=	/dev/${VND}a
VND_RDEV=	/dev/r${VND}a
VND_CRDEV=	/dev/r${VND}c
RAWLABEL?=	-r

# tools selection
RDSETROOT?=	elfrdsetroot
CRUNCHGENOPTS?=	-E
STRIP?=		strip
STRIP_CBIN?=	--strip-all -R .comment -R .eh_frame
STRIP_KERNEL?=	--strip-all -R .comment -R .eh_frame

# crunched binary and ramdisk
CBIN?=		instbin
LISTS?=		${.CURDIR}/listhdr.${MACHCONF} ${.CURDIR}/list \
		${.CURDIR}/listend.${MACHCONF}
MTREE?=		${TOPDIR}/miniroot/mtree.conf
IMAGE?=		ramdisk${OSrev}.fs
IMAGESIZE?=	8192
IMAGEOPTS?=	minfree=0,optimization=space,bsize=4096,fsize=512,density=3072
IMAGETYPE?=	rdroot

# kernel
RAMDISK?=	RAMDISK
KERNEL_BUILD?=	Yes
AOUT_BSDRD?=	No
RAMDISK_PREP?=	@@:

.if ${KERNEL_BUILD:L} != "no"
.  include "${TOPDIR}/common/Makefile.kernel"
.endif

# floppy (set to no to disable)
FLOPPY?=	floppy${OSrev}.fs
FLOPPYSIZE?=	2880
FLOPPYSECS?=	18
FLOPPYOPTS?=	minfree=0,optimization=space,bsize=4096,fsize=512
FLOPPYTYPE?=	floppy3
INSTALLBOOT?=	${DESTDIR}/usr/mdec/installboot -h 2 -s ${FLOPPYSECS}
BOOT?=		${DESTDIR}/usr/mdec/boot
BOOTXX?=	${DESTDIR}/usr/mdec/bootxx

# compact disc image (set to no to disable)
CDROM?=		cdrom${OSrev}.iso
CDROM_MDOPTS?=

#---

_RD_KERNELS=	bsd.rd
.if ${AOUT_BSDRD:L} != "no"
_RD_KERNELS+=	bsd.rd.net
.endif

ALL_TGTS=	${_RD_KERNELS} ${FLOPPY:S/^no$//} ${CDROM:S/^no$//}
INST_FILES?=	${_RD_KERNELS} ${FLOPPY:S/^no$//} ${CDROM:S/^no$//}

all: ${ALL_TGTS}

install:
.for _i in ${INST_FILES}
	${INSTALL} -c -o ${SHAREOWN} -g ${SHAREGRP} -m ${SHAREMODE} \
	    ${_i} ${DESTDIR}/snapshot/
.endfor

unconfig:
	-${SUDO} umount -f ${VND_DEV}
	-${SUDO} vnconfig -u ${VND}
	-${SUDO} rm -rf ${TMPMOUNT} ${IMAGE} ${FLOPPY}

cleannobsd: unconfig
	rm -f *core ${CBIN} ${CBIN}.mk ${CBIN}.cache ${CBIN}.conf \
	    ${RDSETROOT} *.c *.o *.lo bsd.{uc,st} ${_RD_KERNELS} mkisofs.log
	rm -rf workdir

clean cleandir: cleannobsd
	rm -f bsd
.if ${KERNEL_BUILD:L} != "no"
	rm -rf build
.endif

${RDSETROOT}: ${TOPDIR}/common/${RDSETROOT}.c
	${HOSTCC} ${HOSTCFLAGS} -DDEBUG -o $@@ $>

${CBIN}.conf: ${LISTS}
	awk -f ${TOPDIR}/miniroot/makeconf.awk CBIN=${CBIN} ${LISTS} >$@@

${CBIN}.mk ${CBIN}.cache ${CBIN}.c: ${CBIN}.conf
	crunchgen ${CRUNCHGENOPTS} -D ${TOPDIR}/.. -L ${DESTDIR}/usr/lib \
	    -c ${CBIN}.c -e ${CBIN} -m ${CBIN}.mk ${CBIN}.conf

${CBIN}: ${CBIN}.mk ${CBIN}.cache ${CBIN}.c
	${MAKE} -f ${CBIN}.mk all
	${STRIP} ${STRIP_CBIN} ${CBIN}

${IMAGE}: ${CBIN}
	test ! -e ${TMPMOUNT} || (cd ${.CURDIR}; ${MAKE} unconfig)
	${SUDO} mkdir -p ${TMPMOUNT}
	${SUDO} mtree -def ${MTREE} -p ${TMPMOUNT}/ -u
	OBJDIR=${REALOBJDIR:Q} TARGDIR=${TMPMOUNT:Q} TOPDIR=${TOPDIR:Q} \
	    DESTDIR=${DESTDIR:Q} BSDOBJDIR=${BSDOBJDIR:Q} \
	    ${SUDO} ${SHELL} ${TOPDIR}/miniroot/runlist.sh ${LISTS}
	${SUDO} rm ${TMPMOUNT}/${CBIN}
	${SUDO} makefs -s ${IMAGESIZE}b -o ${IMAGEOPTS} ${IMAGE} ${TMPMOUNT}
	${SUDO} vnconfig -v -c ${VND} ${IMAGE}
	${SUDO} disklabel -w ${RAWLABEL} ${VND} ${IMAGETYPE}
	${SUDO} mount -r ${VND_DEV} ${TMPMOUNT}
	@@echo ""
	@@df -i ${TMPMOUNT}
	@@echo ""
	${SUDO} umount ${TMPMOUNT}
	${SUDO} fsck -fy ${VND_RDEV}
	${SUDO} vnconfig -v -u ${VND}
	${SUDO} rm -rf ${TMPMOUNT}

bsd.uc: bsd ${IMAGE} ${RDSETROOT}
	-rm -f $@@
	gzip -d <$> >$@@
	${RAMDISK_PREP}
	${REALOBJDIR}/${RDSETROOT} $@@ <${IMAGE}

bsd.rd: bsd.uc
	-rm -f $@@
	gzip -vn9 <$> >$@@

bsd.st: bsd.uc
	cp -f $> $@@
	${STRIP} ${STRIP_KERNEL} $@@

bsd.rd.net: bsd.st
	-rm -f $@@
	elf2aout $> $@@ -b

${FLOPPY}: bsd.st
	test ! -e ${TMPMOUNT} || (cd ${.CURDIR}; ${MAKE} unconfig)
	mkdir -p ${TMPMOUNT}
	cp ${BOOT} ${TMPMOUNT}/boot
	gzip -vn9 <bsd.st >${TMPMOUNT}/bsd
	${SUDO} chown -R 0:0 ${TMPMOUNT}
	${SUDO} chmod -R u=rwX,go=rX ${TMPMOUNT}
	${SUDO} makefs -s ${FLOPPYSIZE}b -o ${FLOPPYOPTS} ${FLOPPY} ${TMPMOUNT}
	${SUDO} vnconfig -v -c ${VND} ${FLOPPY}
	${SUDO} disklabel -w ${RAWLABEL} ${VND} ${FLOPPYTYPE}
	${SUDO} mount -r ${VND_DEV} ${TMPMOUNT}
	@@echo ""
	@@df -i ${TMPMOUNT}
	@@echo ""
	${SUDO} ${INSTALLBOOT} -v ${TMPMOUNT}/boot ${BOOTXX} ${VND_CRDEV}
	${SUDO} umount ${TMPMOUNT}
	${SUDO} fsck -fy ${VND_RDEV}
	${SUDO} vnconfig -v -u ${VND}
	${SUDO} rm -rf ${TMPMOUNT}

${CDROM}: cdrom-prepare cdrom-mdcopy cdrom-generate cdrom-mdboot

cdrom-prepare: bsd.rd
	-rm -rf workdir
	mkdir -p workdir/{etc,v${OSrev}/${MACHINE}}
	@@if [[ -e ${.CURDIR}/contrib ]]; then \
		echo Integrating contrib dir; \
		mkdir workdir/contrib; \
		cd workdir/contrib; \
		lndir ${.CURDIR}/contrib; \
	fi
	cp ${BOOT} workdir/etc/boot.ldr
	cp ${.CURDIR}/boot.cfg.${MACHINE} workdir/etc/boot.cfg
	cp bsd.rd workdir/v${OSrev}/${MACHINE}/
	cp ${.CURDIR}/00-README workdir/

cdrom-generate:
	mkisofs -r -f -L -d -D -N -v -v \
	    -P 'The http://mirbsd.de/ team and its contributors' \
	    -p 'Copyright © 2002-2006 by The MirOS Project' \
	    -V 'MirOS #${OSrev} BSD/${MACHINE} boot-only CD' \
	    -volset "$$(uname -slm) Setup" -sysid "MirOSBSD" \
	    -pad -o ${CDROM} workdir 2>&1 | tee mkisofs.log

.include <bsd.obj.mk>
.include <bsd.subdir.mk>
@


1.16
log
@prepare for even larger structural change (unify miniroot, ramdisk, rambig):
* move install.md per-arch into distrib/common/install.MACHINE
* move Makefile.kernel into distrib/common/ too
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.15 2006/08/17 13:49:42 tg Exp $
@


1.15
log
@first step at unifying the ramdisk lists
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.14 2006/07/26 22:44:41 tg Exp $
d54 1
a54 1
.  include "${TOPDIR}/Makefile.kernel"
@


1.14
log
@just use one mtree config for all
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.13 2006/07/24 00:52:41 tg Exp $
d123 2
a124 1
	OBJDIR=${REALOBJDIR} TARGDIR=${TMPMOUNT} TOPDIR=${TOPDIR} \
@


1.13
log
@add ISO9660 CD-R functionality to the new ramdisk Makefile as well
i386-big, boot.cfg-*, 00-README will be done later together with lists
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.12 2006/07/24 00:24:43 tg Exp $
d41 1
a41 1
MTREE?=		${TOPDIR}/miniroot/mtree.conf.small
@


1.12
log
@simplify
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.11 2006/07/24 00:24:02 tg Exp $
d67 4
d78 2
a79 2
ALL_TGTS=	${_RD_KERNELS} ${FLOPPY:S/^no$//}
INST_FILES?=	${_RD_KERNELS} ${FLOPPY:S/^no$//}
d96 2
a97 1
	    ${RDSETROOT} *.c *.o *.lo bsd.{uc,st} ${_RD_KERNELS}
d176 24
@


1.11
log
@preliminary steps at unifying the ramdisk building
@
text
@d1 1
a1 1
# $MirOS$
d74 2
a75 7
.if ${FLOPPY:L} != "no"
ALL_TGTS=	${_RD_KERNELS}
INST_FILES?=	${_RD_KERNELS}
.else
ALL_TGTS=	${_RD_KERNELS} ${FLOPPY}
INST_FILES?=	${_RD_KERNELS} ${FLOPPY}
.endif
@


1.10
log
@begin synching these two
(neither tested nor complete)
@
text
@d1 1
a1 2
# $MirOS: src/distrib/ramdisk/Makefile,v 1.9 2006/07/05 22:58:56 tg Exp $
# $OpenBSD: Makefile,v 1.26 2004/02/28 04:53:30 jolan Exp $
d3 11
a13 3
CBIN=		instbin
ARCHDIR=	${.CURDIR}/../${MACHINE}/ramdisk
REALOBJDIR!=	readlink -nf ${.OBJDIR} || ( cd ${.OBJDIR} && pwd )
d15 4
a18 1
.include <bsd.own.mk>
d22 2
a23 5
.if exists(${ARCHDIR}/Makefile.inc)
.  include "${ARCHDIR}/Makefile.inc"
.endif

MOUNT_POINT=	${REALOBJDIR}/tmpmnt
d28 14
a41 2
DISKTYPE=	rdroot
REALIMAGE=	${REALOBJDIR}/tmp.ima
d43 7
a49 5
IMAGESIZE?=	8192			# 4 MiB in 512 byte blocks
NEWFS_WILL_FAIL?=false
.if ${OBJECT_FMT:U} == "ELF"
RDSETROOT?=	elfrdsetroot
CRUNCHGENOPTS?=-E
d51 1
a51 10
.else
RDSETROOT?=	rdsetroot
CRUNCHGENOPTS?=
AOUT_BSDRD=	No
.endif
DO_BSDRD_NAME?=	bsd.rd
DO_BSDRD_UC=	uncompressed.${DO_BSDRD_NAME}
KERNEL?=	RAMDISK
UTILS?=		${.CURDIR}/../miniroot
STRIP?=		strip
d53 3
a55 2
LISTS=		${.CURDIR}/list ${ARCHDIR}/list
MTREE=		${UTILS}/mtree.conf.small
d57 2
a58 2
XNAME?=		floppy
FS?=		${XNAME}${OSrev}.fs
d60 4
a63 2
FLOPPYTYPE?=	floppy
INSTALLBOOT?=	installboot
a64 1
BOOTIN?=	${MOUNT_POINT}/boot
a65 1
RAWLABEL?=	-r
d67 10
a76 19
# old format, minfree, opt, b/i  trks, sects, cpg
NEWFSOPTS=	-t ffs -m 0 -o space -f 1024 -b 8192
NEWFSOPTS_RD?=	${NEWFSOPTS} -i 16384 -c 64 -s ${IMAGESIZE}
#NEWFSOPTS_FD=	${NEWFSOPTS} -i 524288 -c 80 -s ${FLOPPYSIZE}
NEWFSOPTS_FD=	${NEWFSOPTS} -i 1048575 -c 256 -s ${FLOPPYSIZE}

# build kernel
RAMDISK=	${KERNEL}
SYSDIR=		${.CURDIR}/../../sys
.ifndef KERNEL_LOCAL_BUILD
.  include "${.CURDIR}/../Makefile.kernel"
.endif

.if ${AOUT_BSDRD:L} != "yes"
.  ifdef MAKEFLOPPY
all:	bsd.rd ${FS}
.  else
all:	bsd.rd
.  endif
d78 2
a79 36
.  ifdef MAKEFLOPPY
all:	bsd.rd bsd.rd.net ${FS}
.  else
all:	bsd.rd bsd.rd.net
.  endif
.endif

${FS}:	bsd.gz ${BOOT} ${BOOTXX} do-floppy

do-floppy:
.ifdef USE_MAKEFS
	${SUDO} rm -rf ${MOUNT_POINT}
	mkdir -p ${MOUNT_POINT}
	cp ${BOOT} ${MOUNT_POINT}/
	cp bsd.gz ${MOUNT_POINT}/bsd
	${SUDO} chown -R 0:0 ${MOUNT_POINT}
	${SUDO} chmod -R u=rwX,go=rX ${MOUNT_POINT}
	makefs -o minfree=0,optimization=space,bsize=4096,fsize=512 \
	    -s ${FLOPPYSIZE}b ${REALIMAGE} ${MOUNT_POINT}
	${SUDO} vnconfig -v -c ${VND} ${REALIMAGE}
	${SUDO} disklabel -w ${RAWLABEL} ${VND} ${FLOPPYTYPE}
	${SUDO} mount -r ${VND_DEV} ${MOUNT_POINT}
.else
	dd if=/dev/zero of=${REALIMAGE} count=${FLOPPYSIZE}
	${SUDO} vnconfig -v -c ${VND} ${REALIMAGE}
	${SUDO} disklabel -w ${RAWLABEL} ${VND} ${FLOPPYTYPE}
	${SUDO} newfs ${NEWFSOPTS_FD} ${VND_RDEV}
	${SUDO} rm -rf ${MOUNT_POINT}
	mkdir -p ${MOUNT_POINT}
	${SUDO} mount ${VND_DEV} ${MOUNT_POINT}
	${SUDO} cp ${BOOT} ${MOUNT_POINT}/
	${SUDO} dd if=bsd.gz of=${MOUNT_POINT}/bsd obs=512 conv=osync
.endif
	${SUDO} ${INSTALLBOOT} -v ${BOOTIN} ${BOOTXX} ${VND_CRDEV}
.if (${MACHINE_ARCH} == "vax")
	${SUDO} disklabel -B -b ${BOOTXX} ${VND}
a80 19
	@@echo ""
	@@df -i ${MOUNT_POINT}
	@@echo ""
	${SUDO} umount ${MOUNT_POINT}
	${SUDO} fsck -fy ${VND_RDEV}
	${SUDO} vnconfig -u ${VND}
	dd if=${REALIMAGE} of=${FS} count=${FLOPPYSIZE}
	${SUDO} rm -rf ${REALIMAGE} ${MOUNT_POINT}

bsd.strip: ${DO_BSDRD_UC}
	cp ${DO_BSDRD_UC} bsd.strip
	${STRIP} --strip-all -R .comment -R .eh_frame bsd.strip

bsd.gz: bsd.strip
	${GZIP} ${GZIPFLAGS} <$> >$@@

${DO_BSDRD_UC}: ${IMAGE} bsd ${RDSETROOT}
	gzip -d <bsd >${DO_BSDRD_UC}
	${REALOBJDIR}/${RDSETROOT} ${DO_BSDRD_UC} <${IMAGE}
d82 16
a97 2
bsd.rd.net: bsd.strip
	elf2aout $> $@@ -b
d99 5
a103 2
${DO_BSDRD_NAME}: ${DO_BSDRD_UC}
	gzip -n9 <${DO_BSDRD_UC} >${DO_BSDRD_NAME}
d105 1
a105 1
${RDSETROOT}: ${.CURDIR}/../common/${RDSETROOT}.c
a107 22
${IMAGE}: ${CBIN}
	dd if=/dev/zero of=${REALIMAGE} count=${IMAGESIZE}
	${SUDO} vnconfig -v -c ${VND} ${REALIMAGE}
	${SUDO} disklabel -w ${RAWLABEL} ${VND} ${DISKTYPE}
	${SUDO} newfs ${NEWFSOPTS_RD} ${VND_RDEV} || ${NEWFS_WILL_FAIL}
	${SUDO} rm -rf ${MOUNT_POINT}
	mkdir -p ${MOUNT_POINT}
	${SUDO} mount ${VND_DEV} ${MOUNT_POINT}
	${SUDO} mtree -def ${MTREE} -p ${MOUNT_POINT}/ -u
	REV=${OSrev} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} ARCHDIR=${ARCHDIR} \
	    TARGDIR=${MOUNT_POINT} UTILS=${UTILS} \
	    ${SUDO} ${SHELL} ${UTILS}/runlist.sh ${LISTS}
	${SUDO} rm ${MOUNT_POINT}/${CBIN}
	@@echo ""
	@@df -i ${MOUNT_POINT}
	@@echo ""
	-${SUDO} umount ${MOUNT_POINT}
	${SUDO} fsck -fy ${VND_RDEV}
	-${SUDO} vnconfig -u ${VND}
	cp ${REALIMAGE} ${IMAGE}
	rm ${REALIMAGE}

d109 1
a109 1
	awk -f ${UTILS}/makeconf.awk CBIN=${CBIN} ${LISTS} > ${CBIN}.conf
d112 1
a112 1
	crunchgen ${CRUNCHGENOPTS} -D ${.CURDIR}/../.. -L ${DESTDIR}/usr/lib \
d116 21
a136 2
	make -f ${CBIN}.mk all
	${STRIP} --strip-all -R .comment -R .eh_frame ${CBIN}
d138 17
a154 20
clean cleandir:
.ifndef KERNEL_LOCAL_BUILD
	-rm -rf build
.endif
	/bin/rm -f *.core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}.cache \
	${CBIN}.conf *.o *.lo *.c bsd bsd.* ${DO_BSDRD_NAME} ${DO_BSDRD_UC} \
	    ${FS} ${REALIMAGE} ${RDSETROOT}
	/bin/rm -rf ${MOUNT_POINT}

cleannobsd:
	/bin/rm -f *.core ${IMAGE} ${CBIN} ${CBIN}.mk ${CBIN}.cache \
	${CBIN}.conf *.o *.lo *.c bsd.* ${DO_BSDRD_NAME} ${DO_BSDRD_UC} \
	    ${FS} ${REALIMAGE} ${RDSETROOT}
	/bin/rm -rf ${MOUNT_POINT}

beforeinstall:
	cp bsd.rd* ${DESTDIR}/snapshot/
.ifdef MAKEFLOPPY
	cp ${FS} ${DESTDIR}/snapshot/
.endif
d156 19
a174 4
unconfig:
	-${SUDO} umount -f ${MOUNT_POINT}
	-${SUDO} vnconfig -u ${VND}
	-${SUDO} /bin/rm -f ${REALIMAGE}
@


1.9
log
@allow sparc to USE_MAKEFS too; fix perms, etc.; sync arches
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.8 2006/07/05 21:40:08 tg Exp $
d20 1
d107 1
a107 2
	${SUDO} ${INSTALLBOOT} -v ${BOOTIN} ${BOOTXX} \
	    $$(echo ${VND_RDEV} | sed -e 's/a$$/c/')
@


1.8
log
@use "small" mtree configuration
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.7 2006/07/05 21:39:50 tg Exp $
d80 16
a95 1
${FS}:	bsd.gz ${BOOT} ${BOOTXX}
d100 1
d105 1
d115 1
d118 1
a118 1
	rm -f ${REALIMAGE}
d145 1
d157 1
a157 1
	${SUDO} fsck -f ${VND_RDEV}
@


1.7
log
@sync cleanfiles
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.6 2006/07/04 23:11:45 tg Exp $
d41 1
a41 1
MTREE=		${UTILS}/mtree.conf
@


1.6
log
@we really need some sort of CFLAGS
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.5 2006/07/03 23:17:50 tg Exp $
d160 1
a160 1
	    ${FS} ${REALIMAGE}
d166 1
a166 1
	    ${FS} ${REALIMAGE}
@


1.5
log
@attempt to clean up that i386 distrib mess and make sparc workable
not fully tested yet
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.4 2006/07/03 22:12:01 tg Exp $
d9 2
@


1.4
log
@simplify
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.3 2006/07/03 22:09:44 tg Exp $
a3 2
REV=		${OSrev}

d6 1
d14 1
a14 1
MOUNT_POINT?=	/mnt
d19 2
a20 3
PID!=		echo $$$$
REALIMAGE!=	echo /tmp/image.${PID}
IMAGE?=		ramdisk${REV}.fs
d32 2
d41 2
a42 1
FLOPPY?=	floppy${REV}.fs
d60 3
a62 1
.include "../Makefile.kernel"
d64 6
a69 4
.ifndef DESTDIR
all:
	@@echo setenv DESTDIR before making a ramdisk!
	@@false
d71 2
a72 7

.  if ${AOUT_BSDRD:L} != "yes"
.    ifdef MAKEFLOPPY
all:	bsd.rd ${FLOPPY}
.    else
all:	bsd.rd
.    endif
a73 3
.    ifdef MAKEFLOPPY
all:	bsd.rd bsd.rd.net ${FLOPPY}
.    else
d75 2
a76 2
.    endif
.  endif  # ! !AOUT_BSDRD
d78 1
a78 1
${FLOPPY}:	bsd.gz ${BOOT} ${BOOTXX}
d80 9
a88 8
	vnconfig -v -c ${VND} ${REALIMAGE}
	disklabel -w ${RAWLABEL} ${VND} ${FLOPPYTYPE}
	newfs ${NEWFSOPTS_FD} ${VND_RDEV}
	mount ${VND_DEV} ${MOUNT_POINT}
	cp ${BOOT} ${MOUNT_POINT}/
	cp bsd.gz ${MOUNT_POINT}/bsd
	${INSTALLBOOT} -v ${BOOTIN} ${BOOTXX} \
		$$(echo ${VND_RDEV} | sed -e 's/a$$/c/')
d90 1
a90 1
	disklabel -B -b ${BOOTXX} ${VND}
d95 3
a97 3
	umount ${MOUNT_POINT}
	vnconfig -u ${VND}
	dd if=${REALIMAGE} of=${FLOPPY} count=${FLOPPYSIZE}
d100 10
a109 4
bsd.rd:	bsd ${IMAGE} ${RDSETROOT}
	cp bsd bsd.rd
	${.OBJDIR}/${RDSETROOT} bsd.rd < ${IMAGE}
	${STRIP} bsd.rd
d111 2
a112 2
bsd.rd.net: bsd.rd
	elf2aout bsd.rd bsd.rd.net -b
d114 2
a115 2
bsd.gz:	bsd.rd
	${GZIP} ${GZIPFLAGS} < bsd.rd > bsd.gz
d118 1
a118 1
	${HOSTCC} ${HOSTCCFLAGS} -o ${RDSETROOT} ${.CURDIR}/../common/${RDSETROOT}.c
d122 10
a131 8
	vnconfig -v -c ${VND} ${REALIMAGE}
	disklabel -w ${RAWLABEL} ${VND} ${DISKTYPE}
	newfs ${NEWFSOPTS_RD} ${VND_RDEV} || ${NEWFS_WILL_FAIL}
	mount ${VND_DEV} ${MOUNT_POINT}
	mtree -def ${MTREE} -p ${MOUNT_POINT}/ -u
	REV=${REV} CURDIR=${.CURDIR} OBJDIR=${.OBJDIR} ARCHDIR=${ARCHDIR} \
	    TARGDIR=${MOUNT_POINT} UTILS=${UTILS} sh ${UTILS}/runlist.sh ${LISTS}
	rm ${MOUNT_POINT}/${CBIN}
d135 3
a137 2
	umount ${MOUNT_POINT}
	vnconfig -u ${VND_DEV}
d146 1
a146 1
	    ${CBIN}.conf
d150 1
d153 9
d163 3
a165 1
	${CBIN}.conf *.o *.lo *.c bsd bsd.*
d168 4
a171 6
	cp bsd.rd* ${DESTDIR}/snapshot
.  ifdef MAKEFLOPPY
	cp ${FLOPPY} ${DESTDIR}/snapshot
.  endif

.endif	# ! ndef DESTDIR
d174 3
a176 3
	-umount -f ${MOUNT_POINT}
	-vnconfig -u ${VND}
	-/bin/rm -f ${REALIMAGE}
@


1.3
log
@use our kernel build framework
@
text
@d1 1
a1 1
# $MirOS: src/distrib/ramdisk/Makefile,v 1.2 2005/03/06 18:58:04 tg Exp $
d58 1
a58 3
SYSDIR?=	${.CURDIR}/../sys
SYSSUBDIR=	${SYSDIR}/arch/${MACHINE}
KERNDIR=	${SYSSUBDIR}/compile/${RAMDISK}
@


1.2
log
@merge src/distrib
@
text
@d1 1
a1 1
# $MirOS$
d56 7
a103 6
bsd:
	cd ${.CURDIR}/../../sys/arch/${MACHINE}/conf && config ${KERNEL}
	cd ${.CURDIR}/../../sys/arch/${MACHINE}/compile/${KERNEL} && \
	    make depend && make clean && make
	cp ${.CURDIR}/../../sys/arch/${MACHINE}/compile/${KERNEL}/bsd bsd

@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
#	$OpenBSD: Makefile,v 1.26 2004/02/28 04:53:30 jolan Exp $
d12 1
a12 1
.include "${ARCHDIR}/Makefile.inc"
d23 1
a23 1
IMAGESIZE?=	8192 # 4MB in 512 byte blocks
d25 1
a25 1
.if ${ELF_TOOLCHAIN:L} == "yes"
d28 1
d32 1
d62 2
a63 1
.ifdef MAKEFLOPPY
d65 1
a65 1
.else
d67 8
a74 1
.endif
d85 1
a85 1
		`echo ${VND_RDEV} | sed -e 's/a$$/c/'`
d100 1
a100 3
	    make depend && make clean && COPTS=-Os make
#	cd ${.CURDIR}/../../sys/arch/${MACHINE}/compile/${KERNEL} && \
#	    make depend && make clean && make
d108 3
d150 2
a151 2
	cp bsd.rd ${DESTDIR}/snapshot
.ifdef MAKEFLOPPY
d153 1
a153 1
.endif
d155 1
a155 1
.endif	# DESTDIR check
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
