head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2013.10.31.20.06.11;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005272B7081B0E5655;

1.3
date	2009.10.04.15.09.14;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004AC8BAAE579D5658;

1.2
date	2009.01.14.23.33.21;	author tg;	state Exp;
branches;
next	1.1;
commitid	100496E765621AC3489;

1.1
date	2008.12.28.05.10.30;	author tg;	state Exp;
branches;
next	;
commitid	10049570A507B1A6580;


desc
@@


1.4
log
@adapt most __attribute__((â€¦)) occurrences to new KNF style(9)
@
text
@/*-
 * Copyright (c) 2008, 2013
 *	Thorsten Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#include <sys/param.h>
#include <libckern.h>

__RCSID("$MirOS: src/kern/c/hdump.c,v 1.3 2009/10/04 15:09:14 tg Exp $");

extern int printf(const char *, ...)
    __attribute__((__format__(__printf__, 1, 2)));

#define nibble(value, index)	(((unsigned)(value) >> ((index) << 2)) & 0x0F)

void
memhexdump(const void *buf_, size_t ofs, size_t len)
{
	uint8_t ch;
	const uint8_t *buf = (const uint8_t *)buf_ + ofs;
	size_t i;

 loop:
	printf("%X%X%X%X%X%X%X%X ", nibble(ofs, 7), nibble(ofs, 6),
	    nibble(ofs, 5), nibble(ofs, 4), nibble(ofs, 3),
	    nibble(ofs, 2), nibble(ofs, 1), nibble(ofs, 0));
	i = 0;
	while (i < 16) {
		if (i < len)
			printf(" %X%X", nibble(buf[i], 1), nibble(buf[i], 0));
		else
			printf("   ");
		if (++i == 8)
			printf(" -");
	}
	printf("  |");
	i = MIN(len, 16);
	while (i--)
		printf("%c", (ch = *buf++) >= 32 && ch < 127 ? ch : '.');
	printf("|\n");

	if (len > 16) {
		ofs += 16;
		len -= 16;
		goto loop;
	}
}
@


1.3
log
@fix pointer arith
@
text
@d2 1
a2 1
 * Copyright (c) 2008
d24 1
a24 1
__RCSID("$MirOS: src/kern/c/hdump.c,v 1.2 2009/01/14 23:33:21 tg Exp $");
d27 1
a27 1
    __attribute__((format (printf, 1, 2)));
@


1.2
log
@/usr/src/lib/libc/../../kern/c/hdump.c:27: warning: conflicting types for built-in function 'printf'
@
text
@d24 1
a24 1
__RCSID("$MirOS: src/kern/c/hdump.c,v 1.1 2008/12/28 05:10:30 tg Exp $");
d35 1
a35 1
	const uint8_t *buf = buf_ + ofs;
@


1.1
log
@a hex-dumping function used in debugging fcfs (FAT for /boot)
@
text
@d24 1
a24 1
__RCSID("$MirOS: src/share/misc/licence.template,v 1.28 2008/11/14 15:33:44 tg Rel $");
d26 1
a26 1
extern void printf(const char *, ...)
@

