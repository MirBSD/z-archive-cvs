head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2009.04.17.17.16.10;	author tg;	state Exp;
branches;
next	1.2;
commitid	10049E8B9505F465877;

1.2
date	2008.12.27.21.29.30;	author tg;	state Exp;
branches;
next	1.1;
commitid	10049569E4574E4ED91;

1.1
date	2008.08.03.21.02.00;	author tg;	state Exp;
branches;
next	;
commitid	10048961CCE67B72AC5;


desc
@@


1.3
log
@fix wrong-algorithm bugs in mempcpy [!i386] and stpcpy [any] in libc
@
text
@/*-
 * Copyright (c) 2008, 2009
 *	Thorsten Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#include <libckern.h>

__RCSID("$MirOS: src/kern/c/memcpy.c,v 1.2 2008/12/27 21:29:30 tg Exp $");

#ifdef L_mempcpy
#define memmove mempcpy
#endif

void *
memmove(void *dst, const void *src, size_t len)
{
	const uint8_t *s = src;
	uint8_t *d = dst;
#ifdef L_mempcpy
	uint8_t * const rv = dst + len;
#endif

	if (len) {
		if (src < dst) {
			s += len;
			d += len;
			while (len--)
				*--d = *--s;
		} else
			while (len--)
				*d++ = *s++;
	}
#ifdef L_mempcpy
	return (rv);
#else
	return (dst);
#endif
}

#ifndef L_mempcpy
#ifndef SMALL
void
bcopy(const void *src, void *dst, size_t len)
{
	memmove(dst, src, len);
}
#endif

#ifdef lint
int
memcpy(void *dst, const void *src, size_t len)
{
	return (memmove(dst, src, len));
}
#else
__strong_alias(memcpy, memmove);
#endif
#endif
@


1.2
log
@• GNU function mempcpy(3)
• fix i386 memcpy(3) retval if len==0
@
text
@d2 1
a2 1
 * Copyright (c) 2008
d23 1
a23 1
__RCSID("$MirOS: src/kern/c/memcpy.c,v 1.1 2008/08/03 21:02:00 tg Exp $");
d34 3
d49 1
a49 1
	return (d);
@


1.1
log
@Hacked in the train to Zwitserland:

• new: memcpy()=bcopy()=memmove()
• new macro: __strong_alias (incidentally, TNF has exactly the same name
  and exactly (except an ‘a’ more) the same implementation)
• use __strong_alias and #ifdef lint instead of duplicate code via unifdef
  abuse
• sprinkle a few uses of _ALIGN_TEXT
• remove duplicate memmove, memcpy, bcopy and ovbcopy implementations
  from the i386 kernel
• _ALIGN_TEXT is a nop #ifdef SMALL
• remove more duplicate definitions, etc.
• remove more dead code from bootloader -D_TEST
@
text
@d23 5
a27 1
__RCSID("$MirOS$");
d45 3
d49 1
d52 1
d70 1
@

