head	1.32;
access;
symbols
	MIRBSD_10:1.8.0.2
	MIRBSD_10_BASE:1.8;
locks; strict;
comment	@# @;


1.32
date	2014.11.30.21.30.55;	author tg;	state Exp;
branches;
next	1.31;
commitid	100547B8BEB4A8A38F2;

1.31
date	2014.11.30.02.45.35;	author tg;	state Exp;
branches;
next	1.30;
commitid	100547A84C870A75856;

1.30
date	2014.03.29.10.25.52;	author tg;	state Exp;
branches;
next	1.29;
commitid	10053369FB477345F50;

1.29
date	2014.02.19.21.04.20;	author tg;	state Exp;
branches;
next	1.28;
commitid	10053051C6770492BA3;

1.28
date	2013.09.10.17.38.33;	author tg;	state Exp;
branches;
next	1.27;
commitid	100522F591E5F5DCD75;

1.27
date	2011.11.20.18.28.09;	author tg;	state Exp;
branches;
next	1.26;
commitid	1004EC946C40BECB1D6;

1.26
date	2011.11.20.04.57.09;	author tg;	state Exp;
branches;
next	1.25;
commitid	1004EC8880406A80564;

1.25
date	2011.07.17.17.21.02;	author tg;	state Exp;
branches;
next	1.24;
commitid	1004E231A0679EFCA87;

1.24
date	2011.07.17.17.19.25;	author tg;	state Exp;
branches;
next	1.23;
commitid	1004E2319B430931994;

1.23
date	2011.07.06.22.22.07;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004E14E010182825E7;

1.22
date	2011.01.03.19.02.48;	author tg;	state Exp;
branches;
next	1.21;
commitid	1004D221D691CE0C01C;

1.21
date	2010.09.12.17.10.49;	author tg;	state Exp;
branches;
next	1.20;
commitid	1004C8D0939027D8BE7;

1.20
date	2010.09.12.12.24.28;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004C8CC69150D1B4BD;

1.19
date	2010.01.10.20.18.48;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004B4A3588743BF0D3;

1.18
date	2009.11.09.21.36.37;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004AF88B6210E6BBB3;

1.17
date	2009.09.15.16.27.33;	author tg;	state Exp;
branches;
next	1.16;
commitid	1004AAFC06B14538FAA;

1.16
date	2008.12.28.05.10.30;	author tg;	state Exp;
branches;
next	1.15;
commitid	10049570A507B1A6580;

1.15
date	2008.10.16.13.15.16;	author tg;	state Exp;
branches;
next	1.14;
commitid	10048F73E594E0D4BF5;

1.14
date	2008.08.04.19.10.52;	author tg;	state Exp;
branches;
next	1.13;
commitid	100489754457590501A;

1.13
date	2008.08.03.21.02.00;	author tg;	state Exp;
branches;
next	1.12;
commitid	10048961CCE67B72AC5;

1.12
date	2008.08.01.23.24.01;	author tg;	state Exp;
branches;
next	1.11;
commitid	10048939B085B2C5840;

1.11
date	2008.08.01.18.09.16;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004893513244B11E80;

1.10
date	2008.08.01.16.35.20;	author tg;	state Exp;
branches;
next	1.9;
commitid	10048933B5E5B20CA97;

1.9
date	2008.08.01.16.10.52;	author tg;	state Exp;
branches;
next	1.8;
commitid	100489335984C5EA2E5;

1.8
date	2007.02.07.20.43.23;	author tg;	state Exp;
branches;
next	1.7;
commitid	10045CA39907FBE4A06;

1.7
date	2007.02.07.02.29.23;	author tg;	state Exp;
branches;
next	1.6;
commitid	10045C939841596957A;

1.6
date	2007.02.06.18.58.06;	author tg;	state Exp;
branches;
next	1.5;
commitid	10045C8CFD420E83CC2;

1.5
date	2007.02.06.16.28.36;	author tg;	state Exp;
branches;
next	1.4;
commitid	10045C8ACBA4BADCC48;

1.4
date	2007.02.06.16.24.42;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045C8ABB857CB69A4;

1.3
date	2007.02.06.15.55.09;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045C8A4D97F43883D;

1.2
date	2007.02.05.23.48.00;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045C7C20A219A4CB5;

1.1
date	2007.02.05.20.16.04;	author tg;	state Exp;
branches;
next	;
commitid	10045C78FD963274EDA;


desc
@@


1.32
log
@• timingsafe_memcmp is not the same as timingsafe_bcmp, remove
• remove timingsafe_bcmp from libkern
• (re-)add timingsafe_bcmp and timingsafe_memcmp to libc
• update omalloc
• newly add reallocarray to libc
• add strnlen to libc, fix strndup to not read beyond size with that
• update manpages and add MLINKS: strndup, strnlen, timingsafe_*cmp
@
text
@# $MirOS: src/kern/c/Makefile.inc,v 1.31 2014/11/30 02:45:35 tg Exp $

.ifndef _KERNBASE_C_MAKEFILE_INC
_KERNBASE_C_MAKEFILE_INC=	#defined

# imports:
# ifdef(KERNSTAND)	-> bootloader, no kernel/libc only stuff
# ifdef(KERNISUSR)	-> user space
# ifdef(KERNNOGCC)	-> -fhosted -lgcc, no gcc replacement stuff
# ifdef(SMALL)		-> -DSMALL, prefer size over speed optimisation

.include "${KERNBASE}/Makefile.inc"

# md stuff must define sources for the following functions:
# htonl() htons() ntohl() ntohs()
# strlen() wcslen()
# bzero() ffs() memchr() memcmp()=bcmp() memcpy()=bcopy()=memmove() memset()
# strcmp()=strcoll()
# strchr()=index() strrchr()=rindex()
# strncmp() strncpy()

.include "${KERNBASE}/c/${MACHINE_ARCH}/Makefile.inc"

.PATH: ${KERNBASE}/c/${MACHINE_ARCH}
.PATH: ${KERNBASE}/c

# XSRCS, UIF_XSRCS:	kernel, userland, bootloader
# KXSRCS, UIF_KXSRCS:	kernel, libmbfun, bootloader
# KUSRCS, UIF_KUSRCS:	kernel, userland
# NUSRCS, UIF_NUSRCS:	userland
# LSRCS, UIF_LSRCS:	lint libraries (userland)

UIF_KUSRCS+=	timet2posix.c mirtime.c -DL_timet2posix
UIF_KUSRCS+=	posix2timet.c mirtime.c -DL_posix2timet
UIF_KUSRCS+=	timet2mjd.c mirtime.c -DL_timet2mjd
UIF_KUSRCS+=	mjd2timet.c mirtime.c -DL_mjd2timet
UIF_KUSRCS+=	mjd_explode.c mirtime.c -DL_mjd_explode
UIF_KUSRCS+=	mjd_implode.c mirtime.c -DL_mjd_implode
UIF_KUSRCS+=	mirtime_isleap.c mirtime.c -DL_mirtime_isleap
UIF_KUSRCS+=	mirtime_macrobodies.c mirtime.c -DL_mirtime_macrobodies

UIF_KUSRCS+=	mbsd_digits_dec.c miscdata.c -DL_mbsd_digits_dec
UIF_KUSRCS+=	mbsd_digits_hex.c miscdata.c -DL_mbsd_digits_hex
UIF_KUSRCS+=	mbsd_digits_HEX.c miscdata.c -DL_mbsd_digits_HEX
UIF_KUSRCS+=	mbsd_digits_base64.c miscdata.c -DL_mbsd_digits_base64
UIF_KUSRCS+=	RFC1321_padding.c miscdata.c -DL_RFC1321_padding
UIF_KUSRCS+=	mbsd_digits_md5crypt.c miscdata.c -DL_mbsd_digits_md5crypt
UIF_KUSRCS+=	mbsd_digits_bcrypt.c miscdata.c -DL_mbsd_digits_bcrypt

UIF_XSRCS+=	strlcpy.c strlfun.c -DL_strlcpy
UIF_XSRCS+=	strlcat.c strlfun.c -DL_strlcat
UIF_XSRCS+=	strxfrm.c strlfun.c -DL_strxfrm
UIF_NUSRCS+=	wcslcpy.c strlfun.c -DL_strlcpy,-DWIDEC
UIF_NUSRCS+=	wcslcat.c strlfun.c -DL_strlcat,-DWIDEC
UIF_NUSRCS+=	wcsxfrm.c strlfun.c -DL_strxfrm,-DWIDEC

UIF_NUSRCS+=	wcscmp.c strcmp.c -DWIDEC

UIF_XSRCS+=	strcasecmp.c strcasecmpfun.c -DSTRCASECMP
UIF_XSRCS+=	strncasecmp.c strcasecmpfun.c -DSTRNCASECMP
UIF_NUSRCS+=	wcscasecmp.c strcasecmpfun.c -DWCSCASECMP
UIF_NUSRCS+=	wcsncasecmp.c strcasecmpfun.c -DWCSNCASECMP

# quad support
XSRCS+=		adddi3.c anddi3.c ashldi3.c ashrdi3.c cmpdi2.c divdi3.c \
		iordi3.c lshldi3.c lshrdi3.c moddi3.c muldi3.c negdi2.c \
		notdi2.c qdivrem.c subdi3.c ucmpdi2.c udivdi3.c umoddi3.c \
		xordi3.c
KUSRCS+=	fixdfdi.c fixsfdi.c fixunsdfdi.c fixunssfdi.c \
		floatdidf.c floatdisf.c floatunsdidf.c

NUSRCS+=	__main.c

XSRCS+=		hdump.c
KUSRCS+=	optu16to8.c optu8to16.c

KUSRCS+=	arc4random_roundhash.c
KUSRCS+=	arc4random_uniform.c
KUSRCS+=	arcfour_base.c
KUSRCS+=	arcfour_ksa.c

KUSRCS+=	explicit_bzero.c

# …

.ifndef KERNSTAND
XSRCS+=		${KUSRCS}
UIF_XSRCS+=	${UIF_KUSRCS}
.endif

.ifdef KERNISUSR
XSRCS+=		${NUSRCS}
UIF_XSRCS+=	${UIF_NUSRCS}
.else
XSRCS+=		${KXSRCS}
UIF_XSRCS+=	${UIF_KXSRCS}
.endif

.for _z _q _s in ${UIF_XSRCS}
XSRCS+=		${_z}
.endfor
.for _z _q _s in ${UIF_LSRCS}
LSRCS+=		${_z}
.endfor
.for _z _q _s in ${UIF_XSRCS} ${UIF_LSRCS}
CLEANFILES+=	${_z}

${_z}: ${_q}
	-unifdef ${_s:S/,/ /g} $> >$@@

beforedepend: ${_z}
.endfor

KERNPICKSRCS?=	No
.if ${KERNPICKSRCS:L} == "no"
SRCS+=		${XSRCS}
.endif

.endif
@


1.31
log
@use faster call for CAST, it does help

this also adds explicit_bzero and timingsafe_{b,mem}cmp to libc API
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.30 2014/03/29 10:25:52 tg Exp $
a82 1
KUSRCS+=	timingsafe_bcmp.c
@


1.30
log
@drop arcfour_ksa256 (only used in one place) in favour of the more
generic arcfour_ksa function
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.29 2014/02/19 21:04:20 tg Exp $
d82 2
a83 2
KXSRCS+=	explicit_bzero.c
KXSRCS+=	timingsafe_bcmp.c
@


1.29
log
@remove more old-compat taitime stuff
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.28 2013/09/10 17:38:33 tg Exp $
a80 1
KUSRCS+=	arcfour_ksa256.c
@


1.28
log
@constant-time memory buffer comparison, for cryptographic use, from OpenBSD
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.27 2011/11/20 18:28:09 tg Exp $
a32 10
UIF_NUSRCS+=	tai_isleap.c taitime.c -DL_tai_isleap
UIF_NUSRCS+=	tai_timet2tai.c taitime.c -DL_timet2tai
UIF_NUSRCS+=	tai_tai2timet.c taitime.c -DL_tai2timet
UIF_NUSRCS+=	tai_utc2tai.c taitime.c -DL_utc2tai
UIF_NUSRCS+=	tai_tai2utc.c taitime.c -DL_tai2utc
UIF_NUSRCS+=	tai_mjd2tai.c taitime.c -DL_mjd2tai
UIF_NUSRCS+=	tai_tai2mjd.c taitime.c -DL_tai2mjd
UIF_NUSRCS+=	tai_mjd2tm.c taitime.c -DL_mjd2tm
UIF_NUSRCS+=	tai_tm2mjd.c taitime.c -DL_tm2mjd

@


1.27
log
@move digits and hashpad into kern to be shared
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.26 2011/11/20 04:57:09 tg Exp $
d94 1
@


1.26
log
@first steps toward a new time API
• no DJB code (actual code) any more, only reimplementation of algorithms
  whose code is placed in USA PD
• no struct returns any more
• skip the extra tai_t step
• no _t suffix for types I define
• try to be a bit more elegant – I learned a lot since then, after all

the old ABI is still provided until we bump libc major
‣ the new API might wander off libc into libmbfun then, _too_

goal is functional equivalence (after all, it’s been proven correct)
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.25 2011/07/17 17:21:02 tg Exp $
d52 8
@


1.25
log
@add explicit_bzero from OpenBSD for security applications (kernel/mbfun)
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.23 2011/07/06 22:22:07 tg Exp $
d33 18
a50 9
UIF_KUSRCS+=	tai_isleap.c taitime.c -DL_tai_isleap
UIF_KUSRCS+=	tai_timet2tai.c taitime.c -DL_timet2tai
UIF_KUSRCS+=	tai_tai2timet.c taitime.c -DL_tai2timet
UIF_KUSRCS+=	tai_utc2tai.c taitime.c -DL_utc2tai
UIF_KUSRCS+=	tai_tai2utc.c taitime.c -DL_tai2utc
UIF_KUSRCS+=	tai_mjd2tai.c taitime.c -DL_mjd2tai
UIF_KUSRCS+=	tai_tai2mjd.c taitime.c -DL_tai2mjd
UIF_KUSRCS+=	tai_mjd2tm.c taitime.c -DL_mjd2tm
UIF_KUSRCS+=	tai_tm2mjd.c taitime.c -DL_tm2mjd
@


1.24
log
@• kern/c/{,*/}Makefile.inc: rename UNIFDEF_SRCS to UIF_XSRCS
  matching XSRCS (for KERNPICKSRCS) and to not interfere with
  includers’ uses of UNIFDEF_SRCS
• kern/c/{,*/}Makefile.inc: new KXSRCS/UIF_KXSRCS which are
  the same as XSRCS/UIF_XSRCS except the userspace part is
  _not_ added to libc
• lib/mbfun/Makefile: pull KXSRCS/UIF_KXSRCS from kern dir

This way, we can add stuff to kern for kernel/bootloader/userspace
without having to bump the libc minor every time; their prototypes
will still end up in libckern.h though.
@
text
@d76 2
@


1.23
log
@replace uses of OAAT hash in all its variants by NZAT (mksh internal) or NZAAT (all others)
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.22 2011/01/03 19:02:48 tg Exp $
d27 2
a28 1
# XSRCS, UNIFDEF_SRCS:	kernel, userland, bootloader
d43 3
a45 3
UNIFDEF_SRCS+=	strlcpy.c strlfun.c -DL_strlcpy
UNIFDEF_SRCS+=	strlcat.c strlfun.c -DL_strlcat
UNIFDEF_SRCS+=	strxfrm.c strlfun.c -DL_strxfrm
d52 2
a53 2
UNIFDEF_SRCS+=	strcasecmp.c strcasecmpfun.c -DSTRCASECMP
UNIFDEF_SRCS+=	strncasecmp.c strcasecmpfun.c -DSTRNCASECMP
d80 1
a80 1
UNIFDEF_SRCS+=	${UIF_KUSRCS}
d85 4
a88 1
UNIFDEF_SRCS+=	${UIF_NUSRCS}
d91 1
a91 1
.for _z _q _s in ${UNIFDEF_SRCS}
d97 1
a97 1
.for _z _q _s in ${UNIFDEF_SRCS} ${UIF_LSRCS}
@


1.22
log
@move strchr, strrchr, strncpy to kern; remove redundant strncmp, strncasecmp protos
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.21 2010/09/12 17:10:49 tg Exp $
a66 1
KUSRCS+=	oaat.c
@


1.21
log
@new implementation of arc4random(3) API (except arc4random_uniform(3),
which though has been split off earlier today)

deprecate arc4random_push arc4random_pushb arc4random_pushk
in favour of arc4random_pushb_fast as well

hide internal symbols from user with a version script (only some,
until the next major bump)

make deprecated functions into macros already

switch some kernel code to use the new shared code already; rewrite
of kernel arc4random(9) will come next/later
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.20 2010/09/12 12:24:28 tg Exp $
d19 2
a20 1
# strncmp()
@


1.20
log
@• kern/c/arc4random_uniform.c, kern/include/libckern.h: move
  arc4random_uniform(3) implementation here
• kern/c/Makefile.inc: build arc4random_uniform.c kernel/user
• lib/libc/crypt/arc4random.c, sys/dev/rnd.c: remove implementation here
• sys/dev/rndvar.h: prototype is now in <libckern.h>
• contrib/code/Snippets/arc4random.c: sync with master implementation
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.19 2010/01/10 20:18:48 tg Exp $
d69 1
d71 3
@


1.19
log
@• kern: new KERNISUSR (defined by libc and libmdsup, but not by either
  bootloader or kernel), enables new NUSRCS, UIF_NUSRCS
• move MD strncmp() to kern
• move MI {str,wcs}case{,n}cmp to kern
• make wcs* functions NU not KU as we don’t need them in the kernel YET
• move __main to NU (it’s a joke anyway, I think)
• bootloader: make devsw_prefix_match case-insensitive
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.18 2009/11/09 21:36:37 tg Exp $
d69 2
@


1.18
log
@bump libc minor, to be able to pull in OAAT hash helper functions,
as well as globalise the hashpad things; sync mirmake and kernel
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.17 2009/09/15 16:27:33 tg Exp $
d8 1
d19 1
d28 1
d44 10
a53 5
UIF_KUSRCS+=	wcslcpy.c strlfun.c -DL_strlcpy,-DWIDEC
UIF_KUSRCS+=	wcslcat.c strlfun.c -DL_strlcat,-DWIDEC
UIF_KUSRCS+=	wcsxfrm.c strlfun.c -DL_strxfrm,-DWIDEC

UIF_KUSRCS+=	wcscmp.c strcmp.c -DWIDEC
d63 1
a63 3
.ifndef KERNNOGCC
XSRCS+=		__main.c
.endif
d76 5
@


1.17
log
@remove symbols common to libc/libgcc_s from libgcc; add to libmdsup if
they haven’t been there before
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.16 2008/12/28 05:10:30 tg Exp $
d60 1
@


1.16
log
@a hex-dumping function used in debugging fcfs (FAT for /boot)
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.15 2008/10/16 13:15:16 tg Exp $
d52 2
@


1.15
log
@add sources to XSRCS instead of SRCS for cherry-picking,
craft a variable allowing them to be automatically be all picked
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.14 2008/08/04 19:10:52 tg Exp $
d57 1
@


1.14
log
@next round of build etc. fixes
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.13 2008/08/03 21:02:00 tg Exp $
d24 1
a24 1
# SRCS, UNIFDEF_SRCS:	kernel, userland, bootloader
d48 1
a48 1
SRCS+=		adddi3.c anddi3.c ashldi3.c ashrdi3.c cmpdi2.c divdi3.c \
d54 1
a54 1
SRCS+=		__main.c
d62 1
a62 1
SRCS+=		${KUSRCS}
d67 1
a67 1
SRCS+=		${_z}
d81 5
@


1.13
log
@Hacked in the train to Zwitserland:

• new: memcpy()=bcopy()=memmove()
• new macro: __strong_alias (incidentally, TNF has exactly the same name
  and exactly (except an ‘a’ more) the same implementation)
• use __strong_alias and #ifdef lint instead of duplicate code via unifdef
  abuse
• sprinkle a few uses of _ALIGN_TEXT
• remove duplicate memmove, memcpy, bcopy and ovbcopy implementations
  from the i386 kernel
• _ALIGN_TEXT is a nop #ifdef SMALL
• remove more duplicate definitions, etc.
• remove more dead code from bootloader -D_TEST
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.12 2008/08/01 23:24:01 tg Exp $
a45 1
UIF_KUSRCS+=	wcscoll.c strcmp.c -DL_strcoll,-DWIDEC
@


1.12
log
@• OPTU-8 ⇐⇒ OPTU-16 conversion routines (libc, kernel, !bootloader)
• optu16to8(3) replaces wcrtomb(3) in libc
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.11 2008/08/01 18:09:16 tg Exp $
d16 2
a17 1
# bzero() ffs() memchr() memcmp()=bcmp() memset() strcmp()=strcoll()
@


1.11
log
@more migration

(in case you wonder: goal is to make libc, kernel and bootloaders share
the code currently in libkern, (some of) libsa, and libz, and to move
the bootloaders out of src/sys/ and into some more sane place)
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.10 2008/08/01 16:35:20 tg Exp $
d57 2
@


1.10
log
@migrate strlcat/strlcpy/strxfrm and wcs* equivalents
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.9 2008/08/01 16:10:52 tg Exp $
d16 1
d40 6
a45 3
UNIFDEF_SRCS+=	wcslcpy.c strlfun.c -DL_strlcpy,-DWIDEC
UNIFDEF_SRCS+=	wcslcat.c strlfun.c -DL_strlcat,-DWIDEC
UNIFDEF_SRCS+=	wcsxfrm.c strlfun.c -DL_strxfrm,-DWIDEC
d53 4
@


1.9
log
@move quad support into shared libkern (userland, kernel, bootloader)
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.8 2007/02/07 20:43:23 tg Exp $
d36 7
@


1.8
log
@* attempt to move taitime(3) functions from libc and kernel to kernbase,
  its prototypes from <time.h> and <sys/time.h> (which includes <time.h>)
  and <lib/libkern/taitime.h> to <sys/taitime.h>, split between indepen-
  dent and dependent (kernel/userland different leap table initialisation;
  userland additional tai_time(), taina_time(), importtai(), exporttai()),
  reduce required headers; reduce diff from headers to upstream
* move kernel tai leap second table from kernel objects to libkern
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.7 2007/02/07 02:29:23 tg Exp $
d36 6
@


1.7
log
@* protect against multiple inclusion
* MD must define wcslen() now, too
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.6 2007/02/06 18:58:06 tg Exp $
d26 10
@


1.6
log
@generate our own include directory
@
text
@d1 4
a4 1
# $MirOS: src/kern/c/Makefile.inc,v 1.5 2007/02/06 16:28:36 tg Exp $
d15 1
a15 1
# strlen()
d22 3
a24 4
# SRCS, UNIFDEF_SRCS: kernel, userland, bootloader
# KUSRCS, UIF_KUSRCS: kernel, userland

UIF_KUSRCS+=	wcslen.c strlen.c -DWIDEC
d35 5
d47 2
@


1.5
log
@add sparc MD strlen() - from OpenBSD
i386 will follow… I'll code that myself
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.4 2007/02/06 16:24:42 tg Exp $
a18 2
CPPFLAGS+=	-I${KERNBASE}/c

@


1.4
log
@next proof-of-concept move: strlen (no asm yet)
XXX libkern/libsa include path might be missing
XXX libkern/libsa/MD-libkern/MD-libsa build is ugly
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.3 2007/02/06 15:55:09 tg Exp $
d12 1
a23 1
SRCS+=		strlen.c
@


1.3
log
@move UNIFDEF_SRCS functionality to bottom of kern/c/Makefile.inc
so include that after any others that need this functionality in libc
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.2 2007/02/05 23:48:00 tg Exp $
d18 8
d28 5
@


1.2
log
@make src/kern stuff behave differently .ifdef SMALL, defined by:
- libsa/libkern bootloader
- libkern kernel #ifdef SMALL_KERNEL
- not yet: distrib/special/lib*
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/Makefile.inc,v 1.1 2007/02/05 20:16:04 tg Exp $
d19 10
@


1.1
log
@proof-of-concept implementation of a few functions for the
new "kern" directory containing stuff shared between
* userland (-fhosted -lgcc)
* kernel (-ffreestanding -D_KERNEL -nostdlib)
* bootloader (-ffreestanding -D_STANDALONE -nostdlib)

Here, userland and kernel share some functions not for the
bootloader (e.g. utf-8 stuff), while kernel and bootloader
share a few libgcc replacement functions.

I took the htonl() &c. functions because they were pretty
easy to implement; no sparc assembly version because it's
a 'no-op' and I trust gcc so much as to produce optimised
output for the type foo(type x) { return (x); } case.

Not tested.

Most of the functions will be written "on demand" and re-
written from scratch by me.
@
text
@d1 1
a1 1
# $MirOS$
d6 3
@

