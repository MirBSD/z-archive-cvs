head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2014.11.29.23.00.28;	author tg;	state Exp;
branches;
next	1.2;
commitid	100547A50124DCAD6B0;

1.2
date	2011.07.17.20.39.26;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004E23486653819447;

1.1
date	2011.07.17.17.21.02;	author tg;	state Exp;
branches;
next	;
commitid	1004E231A0679EFCA87;


desc
@@


1.3
log
@add compiler memory barrier to explicit_bzero; use that for OPENSSL_cleanse
@
text
@#include <libckern.h>

__RCSID("$MirOS: src/kern/c/explicit_bzero.c,v 1.2 2011/07/17 20:39:26 tg Exp $");

/*
 * explicit_bzero - don't let the compiler optimise away bzero
 */
void
explicit_bzero(void *p, size_t n)
{
	/*
	 * we forward to the "correct" bzero implementation,
	 * instead of just making this a symbol alias in the
	 * arch subdirectory's copy, because e.g. the kernel
	 * on i386 (locore.S) has per-CPU optimised ones; in
	 * userspace we want to keep the symbol in libmbfun,
	 * to not clutter libc symbol space
	 */
	bzero(p, n);
	/* protect from reordering */
	__asm __volatile("":::"memory");
}
@


1.2
log
@document why this is separate
@
text
@a0 6
/*	$OpenBSD: explicit_bzero.c,v 1.1 2011/01/10 23:23:56 tedu Exp $ */
/*
 * Public domain.
 * Written by Ted Unangst
 */

d3 1
a3 1
__RCSID("$MirOS: src/kern/c/explicit_bzero.c,v 1.1 2011/07/17 17:21:02 tg Exp $");
d6 1
a6 1
 * explicit_bzero - don't let the compiler optimize away bzero
d20 2
@


1.1
log
@add explicit_bzero from OpenBSD for security applications (kernel/mbfun)
@
text
@d9 1
a9 1
__RCSID("$MirOS$");
d17 8
@

