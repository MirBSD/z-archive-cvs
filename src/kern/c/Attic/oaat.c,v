head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2014.02.19.17.43.25;	author tg;	state dead;
branches;
next	1.3;
commitid	1005304ED413F0CF25C;

1.3
date	2011.07.06.22.22.07;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004E14E010182825E7;

1.2
date	2009.11.09.21.36.37;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004AF88B6210E6BBB3;

1.1
date	2009.11.09.19.43.43;	author tg;	state Exp;
branches;
next	;
commitid	1004AF870EF5AE8038B;


desc
@@


1.4
log
@replace OAAT, NZAT, NZAAT with BAFH in virtually all places; bump libc major
@
text
@/*-
 * Copyright (c) 2009
 *	Thorsten Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 *-
 * This can be used to implement Bob Jenkins' one-at-a-time hash:
 *
 * uint32_t OAAT0String(const void *cp, size_t buflen = strlen(cp)) {
 *	return OAAT0Final(OAAT0Update(0, cp, buflen));
 * }
 *
 * Note that an initialisation value of 0x100 can count initial NULs,
 * but the original version uses 0 instead. (Anything is fine as long
 * as the lowest byte is 0x00 though.)
 *
 * This hash is deprecated in favour of the NZAAT hash.
 */

#include <libckern.h>

__RCSID("$MirOS: src/kern/c/oaat.c,v 1.3 2011/07/06 22:22:07 tg Exp $");

uint32_t
OAAT0Update(register uint32_t h, register const uint8_t *s, register size_t n)
{
	while (n--) {
		h += *s++;
		h += h << 10;
		h ^= h >> 6;
	}

	return (h);
}

uint32_t
OAAT0Final(register uint32_t h)
{
	h += h << 3;
	h ^= h >> 11;
	h += h << 15;

	return (h);
}
@


1.3
log
@replace uses of OAAT hash in all its variants by NZAT (mksh internal) or NZAAT (all others)
@
text
@d35 1
a35 1
__RCSID("$MirOS: src/kern/c/oaat.c,v 1.2 2009/11/09 21:36:37 tg Exp $");
@


1.2
log
@bump libc minor, to be able to pull in OAAT hash helper functions,
as well as globalise the hashpad things; sync mirmake and kernel
@
text
@d29 2
d35 1
a35 1
__RCSID("$MirOS: src/kern/c/oaat.c,v 1.1 2009/11/09 19:43:43 tg Exp $");
@


1.1
log
@improve RNG stuff with proper hashing
(checked arc4* stuff to avoid short cycles; OpenBSD already ensured that)
@
text
@d22 2
a23 2
 * uint32_t oaathash(const void *buf, size_t buflen = strlen(buf)) {
 *	return _oaat_final(_oaat_update(0, buf, buflen));
a30 1
#if 0	/* not yet */
a31 2
#else
#include <sys/types.h>
d33 1
a33 6
uint32_t _oaat_update(register uint32_t, register const uint8_t *,
    register size_t) __attribute__((bounded (string, 2, 3)));
uint32_t _oaat_final(register uint32_t);
#endif

__RCSID("$MirOS: src/share/misc/licence.template,v 1.28 2008/11/14 15:33:44 tg Rel $");
d36 1
a36 1
_oaat_update(register uint32_t h, register const uint8_t *s, register size_t n)
d48 1
a48 1
_oaat_final(register uint32_t h)
@

