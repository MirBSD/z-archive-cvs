head	1.2;
access;
symbols
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2007.06.11.01.10.51;	author tg;	state Exp;
branches;
next	1.1;
commitid	100466CA12E0B154D97;

1.1
date	2007.02.05.20.16.04;	author tg;	state Exp;
branches;
next	;
commitid	10045C78FD963274EDA;


desc
@@


1.2
log
@these need protos
@
text
@/* $MirOS: src/kern/c/ntohl.c,v 1.1 2007/02/05 20:16:04 tg Exp $ */

/*-
 * Copyright (c) 2007
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#include <sys/types.h>
#include <machine/endian.h>

#undef ntohl
uint32_t ntohl(uint32_t);

uint32_t
ntohl(uint32_t x)
{
	return (betoh32(x));
}
@


1.1
log
@proof-of-concept implementation of a few functions for the
new "kern" directory containing stuff shared between
* userland (-fhosted -lgcc)
* kernel (-ffreestanding -D_KERNEL -nostdlib)
* bootloader (-ffreestanding -D_STANDALONE -nostdlib)

Here, userland and kernel share some functions not for the
bootloader (e.g. utf-8 stuff), while kernel and bootloader
share a few libgcc replacement functions.

I took the htonl() &c. functions because they were pretty
easy to implement; no sparc assembly version because it's
a 'no-op' and I trust gcc so much as to produce optimised
output for the type foo(type x) { return (x); } case.

Not tested.

Most of the functions will be written "on demand" and re-
written from scratch by me.
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.20 2006/12/11 21:04:56 tg Rel $ */
d27 2
@

