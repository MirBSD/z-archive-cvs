head	1.13;
access;
symbols
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4;
locks; strict;
comment	@# @;


1.13
date	2011.01.03.19.02.50;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004D221D691CE0C01C;

1.12
date	2010.01.10.20.18.49;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004B4A3588743BF0D3;

1.11
date	2009.09.15.16.27.34;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004AAFC06B14538FAA;

1.10
date	2009.01.15.21.50.16;	author tg;	state Exp;
branches;
next	1.9;
commitid	100496FAFA93B35FD11;

1.9
date	2008.12.27.21.29.31;	author tg;	state Exp;
branches;
next	1.8;
commitid	10049569E4574E4ED91;

1.8
date	2008.10.16.13.15.16;	author tg;	state Exp;
branches;
next	1.7;
commitid	10048F73E594E0D4BF5;

1.7
date	2008.08.03.21.02.01;	author tg;	state Exp;
branches;
next	1.6;
commitid	10048961CCE67B72AC5;

1.6
date	2008.08.01.18.09.19;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004893513244B11E80;

1.5
date	2008.08.01.16.45.04;	author tg;	state Exp;
branches;
next	1.4;
commitid	10048933D9F41023CFE;

1.4
date	2007.02.07.02.29.32;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045C939841596957A;

1.3
date	2007.02.06.16.28.38;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045C8ACBA4BADCC48;

1.2
date	2007.02.06.16.25.46;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045C8AC0470C68098;

1.1
date	2007.02.05.20.16.07;	author tg;	state Exp;
branches;
next	;
commitid	10045C78FD963274EDA;


desc
@@


1.13
log
@move strchr, strrchr, strncpy to kern; remove redundant strncmp, strncasecmp protos
@
text
@# $MirOS: src/kern/c/i386/Makefile.inc,v 1.12 2010/01/10 20:18:49 tg Exp $

XSRCS+=		htonl.S htons.S
LSRCS+=		htonl.c htons.c ntohl.c ntohs.c

XSRCS+=		strlen.S
UIF_NUSRCS+=	wcslen.S strlen.S -DWIDEC
LSRCS+=		strlen.c
UIF_LSRCS+=	wcslen.c strlen.c -DWIDEC

XSRCS+=		strchr.S strrchr.S
LSRCS+=		strchr.c strrchr.c

XSRCS+=		strncmp.S
LSRCS+=		strncmp.c

XSRCS+=		strncpy.c

UIF_KUSRCS+=	mempcpy.S memcpy.S -DL_mempcpy
UIF_LSRCS+=	mempcpy.c memcpy.c -DL_mempcpy

XSRCS+=		divsi3.S udivsi3.S
KUSRCS+=	fixdfsi.S fixunsdfsi.S

XSRCS+=		ffs.S memchr.S memcmp.S memcpy.S memset.S strcmp.S
LSRCS+=		memchr.c memcmp.c memset.c strcmp.c
LSRCS+=		Lbzero.c Lffs.c
@


1.12
log
@• kern: new KERNISUSR (defined by libc and libmdsup, but not by either
  bootloader or kernel), enables new NUSRCS, UIF_NUSRCS
• move MD strncmp() to kern
• move MI {str,wcs}case{,n}cmp to kern
• make wcs* functions NU not KU as we don’t need them in the kernel YET
• move __main to NU (it’s a joke anyway, I think)
• bootloader: make devsw_prefix_match case-insensitive
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/i386/Makefile.inc,v 1.11 2009/09/15 16:27:34 tg Exp $
d11 3
d17 2
@


1.11
log
@remove symbols common to libc/libgcc_s from libgcc; add to libmdsup if
they haven’t been there before
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/i386/Makefile.inc,v 1.10 2009/01/15 21:50:16 tg Exp $
d7 1
a7 1
UIF_KUSRCS+=	wcslen.S strlen.S -DWIDEC
d11 3
@


1.10
log
@save 28 bytes in the bootloader by combining these
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/i386/Makefile.inc,v 1.9 2008/12/27 21:29:31 tg Exp $
d15 1
@


1.9
log
@• GNU function mempcpy(3)
• fix i386 memcpy(3) retval if len==0
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/i386/Makefile.inc,v 1.8 2008/10/16 13:15:16 tg Exp $
d16 1
a16 1
XSRCS+=		bzero.S ffs.S memchr.S memcmp.S memcpy.S memset.S strcmp.S
@


1.8
log
@add sources to XSRCS instead of SRCS for cherry-picking,
craft a variable allowing them to be automatically be all picked
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/i386/Makefile.inc,v 1.7 2008/08/03 21:02:01 tg Exp $
d11 3
@


1.7
log
@Hacked in the train to Zwitserland:

• new: memcpy()=bcopy()=memmove()
• new macro: __strong_alias (incidentally, TNF has exactly the same name
  and exactly (except an ‘a’ more) the same implementation)
• use __strong_alias and #ifdef lint instead of duplicate code via unifdef
  abuse
• sprinkle a few uses of _ALIGN_TEXT
• remove duplicate memmove, memcpy, bcopy and ovbcopy implementations
  from the i386 kernel
• _ALIGN_TEXT is a nop #ifdef SMALL
• remove more duplicate definitions, etc.
• remove more dead code from bootloader -D_TEST
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/i386/Makefile.inc,v 1.6 2008/08/01 18:09:19 tg Exp $
d3 1
a3 1
SRCS+=		htonl.S htons.S
d6 1
a6 1
SRCS+=		strlen.S
d11 1
a11 1
SRCS+=		divsi3.S udivsi3.S
d13 1
a13 1
SRCS+=		bzero.S ffs.S memchr.S memcmp.S memcpy.S memset.S strcmp.S
@


1.6
log
@more migration

(in case you wonder: goal is to make libc, kernel and bootloaders share
the code currently in libkern, (some of) libsa, and libz, and to move
the bootloaders out of src/sys/ and into some more sane place)
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/i386/Makefile.inc,v 1.5 2008/08/01 16:45:04 tg Exp $
d13 1
a13 1
SRCS+=		bzero.S ffs.S memchr.S memcmp.S memset.S strcmp.S
a14 2
UIF_LSRCS+=	bcmp.c memcmp.c -DL_bcmp
UIF_LSRCS+=	strcoll.c strcmp.c -DL_strcoll
@


1.5
log
@more non-FP libgcc-style helpers
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/i386/Makefile.inc,v 1.4 2007/02/07 02:29:32 tg Exp $
d12 6
@


1.4
log
@add i386 asm version of strlen() and wcslen()
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/i386/Makefile.inc,v 1.3 2007/02/06 16:28:38 tg Exp $
d10 2
@


1.3
log
@add sparc MD strlen() - from OpenBSD
i386 will follow… I'll code that myself
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/i386/Makefile.inc,v 1.2 2007/02/06 16:25:46 tg Exp $
d6 4
a9 1
SRCS+=		strlen.c
@


1.2
log
@whenever ${SRCS} contains a .S file, add the appropriate
.c file(s) to ${LSRCS} to make a complete lint library
@
text
@d1 1
a1 1
# $MirOS: src/kern/c/i386/Makefile.inc,v 1.1 2007/02/05 20:16:07 tg Exp $
d5 2
@


1.1
log
@proof-of-concept implementation of a few functions for the
new "kern" directory containing stuff shared between
* userland (-fhosted -lgcc)
* kernel (-ffreestanding -D_KERNEL -nostdlib)
* bootloader (-ffreestanding -D_STANDALONE -nostdlib)

Here, userland and kernel share some functions not for the
bootloader (e.g. utf-8 stuff), while kernel and bootloader
share a few libgcc replacement functions.

I took the htonl() &c. functions because they were pretty
easy to implement; no sparc assembly version because it's
a 'no-op' and I trust gcc so much as to produce optimised
output for the type foo(type x) { return (x); } case.

Not tested.

Most of the functions will be written "on demand" and re-
written from scratch by me.
@
text
@d1 1
a1 1
# $MirOS$
d4 1
@

