head	1.6;
access;
symbols
	zlib-1_2_8:1.1.117.2
	MIRBSD_10:1.1.117.1.0.2
	MIRBSD_10_BASE:1.1.117.1
	zlib-1_2_3:1.1.117.1
	libz:1.1.117;
locks; strict;
comment	@ * @;


1.6
date	2017.04.15.14.25.42;	author tg;	state Exp;
branches;
next	1.5;
commitid	10058F22D77671D8D9C;

1.5
date	2013.08.06.17.13.06;	author tg;	state Exp;
branches;
next	1.4;
commitid	10052012E9F67D27FA9;

1.4
date	2013.08.05.21.27.35;	author tg;	state Exp;
branches;
next	1.3;
commitid	100520018AA4F2BDEB7;

1.3
date	2008.08.01.14.59.59;	author tg;	state Exp;
branches;
next	1.2;
commitid	100489324F4472E9C7F;

1.2
date	2008.08.01.13.46.10;	author tg;	state Exp;
branches;
next	1.1;
commitid	100489313B0766D4103;

1.1
date	2007.02.06.20.09.46;	author tg;	state Exp;
branches
	1.1.117.1;
next	;
commitid	10045C8E09012013E61;

1.1.117.1
date	2007.02.06.20.09.46;	author tg;	state Exp;
branches;
next	1.1.117.2;
commitid	10045C8E09012013E61;

1.1.117.2
date	2013.08.05.19.24.25;	author tg;	state Exp;
branches;
next	;
commitid	10051FFFBFC7B2E5803;


desc
@@


1.6
log
@remove hack for dummy compilers that’s UB
@
text
@/* zutil.c -- target dependent utility functions for the compression library
 * Copyright (C) 1995-2005, 2010, 2011, 2012 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
 */

/* @@(#) $Id$ */

#include "zutil.h"
#ifndef Z_SOLO
#  include "gzguts.h"
#endif

zRCSID("$MirOS: src/kern/z/zutil.c,v 1.5 2013/08/06 17:13:06 tg Exp $")

z_const char * const z_errmsg[10] = {
"need dictionary",     /* Z_NEED_DICT       2  */
"stream end",          /* Z_STREAM_END      1  */
"",                    /* Z_OK              0  */
"file error",          /* Z_ERRNO         (-1) */
"stream error",        /* Z_STREAM_ERROR  (-2) */
"data error",          /* Z_DATA_ERROR    (-3) */
"insufficient memory", /* Z_MEM_ERROR     (-4) */
"buffer error",        /* Z_BUF_ERROR     (-5) */
"incompatible version",/* Z_VERSION_ERROR (-6) */
""};


const char * ZEXPORT zlibVersion()
{
    return ZLIB_VERSION;
}

uLong ZEXPORT zlibCompileFlags()
{
    uLong flags;

    flags = 0;
    switch ((int)(sizeof(uInt))) {
    case 2:     break;
    case 4:     flags += 1;     break;
    case 8:     flags += 2;     break;
    default:    flags += 3;
    }
    switch ((int)(sizeof(uLong))) {
    case 2:     break;
    case 4:     flags += 1 << 2;        break;
    case 8:     flags += 2 << 2;        break;
    default:    flags += 3 << 2;
    }
    switch ((int)(sizeof(voidpf))) {
    case 2:     break;
    case 4:     flags += 1 << 4;        break;
    case 8:     flags += 2 << 4;        break;
    default:    flags += 3 << 4;
    }
    switch ((int)(sizeof(z_off_t))) {
    case 2:     break;
    case 4:     flags += 1 << 6;        break;
    case 8:     flags += 2 << 6;        break;
    default:    flags += 3 << 6;
    }
#ifdef DEBUG
    flags += 1 << 8;
#endif
#if defined(ASMV) || defined(ASMINF)
    flags += 1 << 9;
#endif
#ifdef ZLIB_WINAPI
    flags += 1 << 10;
#endif
#ifdef BUILDFIXED
    flags += 1 << 12;
#endif
#ifdef DYNAMIC_CRC_TABLE
    flags += 1 << 13;
#endif
#ifdef NO_GZCOMPRESS
    flags += 1L << 16;
#endif
#ifdef NO_GZIP
    flags += 1L << 17;
#endif
#ifdef PKZIP_BUG_WORKAROUND
    flags += 1L << 20;
#endif
#ifdef FASTEST
    flags += 1L << 21;
#endif
#if defined(STDC) || defined(Z_HAVE_STDARG_H)
#  ifdef NO_vsnprintf
    flags += 1L << 25;
#    ifdef HAS_vsprintf_void
    flags += 1L << 26;
#    endif
#  else
#    ifdef HAS_vsnprintf_void
    flags += 1L << 26;
#    endif
#  endif
#else
    flags += 1L << 24;
#  ifdef NO_snprintf
    flags += 1L << 25;
#    ifdef HAS_sprintf_void
    flags += 1L << 26;
#    endif
#  else
#    ifdef HAS_snprintf_void
    flags += 1L << 26;
#    endif
#  endif
#endif
    return flags;
}

#ifdef DEBUG

#  ifndef verbose
#    define verbose 0
#  endif
int ZLIB_INTERNAL z_verbose = verbose;

void ZLIB_INTERNAL z_error (m)
    char *m;
{
    fprintf(stderr, "%s\n", m);
    exit(1);
}
#endif

/* exported to allow conversion of error code to string for compress() and
 * uncompress()
 */
const char * ZEXPORT zError(err)
    int err;
{
    return ERR_MSG(err);
}

#if defined(_WIN32_WCE)
    /* The Microsoft C Run-Time Library for Windows CE doesn't have
     * errno.  We define it as a global variable to simplify porting.
     * Its value is always 0 and should not be used.
     */
    int errno = 0;
#endif

#ifndef HAVE_MEMCPY

void ZLIB_INTERNAL zmemcpy(dest, source, len)
    Bytef* dest;
    const Bytef* source;
    uInt  len;
{
    if (len == 0) return;
    do {
        *dest++ = *source++; /* ??? to be unrolled */
    } while (--len != 0);
}

int ZLIB_INTERNAL zmemcmp(s1, s2, len)
    const Bytef* s1;
    const Bytef* s2;
    uInt  len;
{
    uInt j;

    for (j = 0; j < len; j++) {
        if (s1[j] != s2[j]) return 2*(s1[j] > s2[j])-1;
    }
    return 0;
}

void ZLIB_INTERNAL zmemzero(dest, len)
    Bytef* dest;
    uInt  len;
{
    if (len == 0) return;
    do {
        *dest++ = 0;  /* ??? to be unrolled */
    } while (--len != 0);
}
#endif

#ifndef Z_SOLO

#ifdef SYS16BIT

#ifdef __TURBOC__
/* Turbo C in 16-bit mode */

#  define MY_ZCALLOC

/* Turbo C malloc() does not allow dynamic allocation of 64K bytes
 * and farmalloc(64K) returns a pointer with an offset of 8, so we
 * must fix the pointer. Warning: the pointer must be put back to its
 * original form in order to free it, use zcfree().
 */

#define MAX_PTR 10
/* 10*64K = 640K */

local int next_ptr = 0;

typedef struct ptr_table_s {
    voidpf org_ptr;
    voidpf new_ptr;
} ptr_table;

local ptr_table table[MAX_PTR];
/* This table is used to remember the original form of pointers
 * to large buffers (64K). Such pointers are normalized with a zero offset.
 * Since MSDOS is not a preemptive multitasking OS, this table is not
 * protected from concurrent access. This hack doesn't work anyway on
 * a protected system like OS/2. Use Microsoft C instead.
 */

voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, unsigned items, unsigned size)
{
    voidpf buf = opaque; /* just to make some compilers happy */
    ulg bsize = (ulg)items*size;

    /* If we allocate less than 65520 bytes, we assume that farmalloc
     * will return a usable pointer which doesn't have to be normalized.
     */
    if (bsize < 65520L) {
        buf = farmalloc(bsize);
        if (*(ush*)&buf != 0) return buf;
    } else {
        buf = farmalloc(bsize + 16L);
    }
    if (buf == NULL || next_ptr >= MAX_PTR) return NULL;
    table[next_ptr].org_ptr = buf;

    /* Normalize the pointer to seg:0 */
    *((ush*)&buf+1) += ((ush)((uch*)buf-0) + 15) >> 4;
    *(ush*)&buf = 0;
    table[next_ptr++].new_ptr = buf;
    return buf;
}

void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)
{
    int n;
    if (*(ush*)&ptr != 0) { /* object < 64K */
        farfree(ptr);
        return;
    }
    /* Find the original pointer */
    for (n = 0; n < next_ptr; n++) {
        if (ptr != table[n].new_ptr) continue;

        farfree(table[n].org_ptr);
        while (++n < next_ptr) {
            table[n-1] = table[n];
        }
        next_ptr--;
        return;
    }
    ptr = opaque; /* just to make some compilers happy */
    Assert(0, "zcfree: ptr not found");
}

#endif /* __TURBOC__ */


#ifdef M_I86
/* Microsoft C in 16-bit mode */

#  define MY_ZCALLOC

#if (!defined(_MSC_VER) || (_MSC_VER <= 600))
#  define _halloc  halloc
#  define _hfree   hfree
#endif

voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, uInt items, uInt size)
{
    if (opaque) opaque = 0; /* to make compiler happy */
    return _halloc((long)items, size);
}

void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)
{
    if (opaque) opaque = 0; /* to make compiler happy */
    _hfree(ptr);
}

#endif /* M_I86 */

#endif /* SYS16BIT */


#if defined(_KERNEL) || defined(_STANDALONE)
#define MY_ZCALLOC /* provided by freestanding run-time environment */
#endif


#ifndef MY_ZCALLOC /* Any system without a special alloc function */

#ifndef STDC
extern voidp  malloc OF((uInt size));
extern voidp  calloc OF((uInt items, uInt size));
extern void   free   OF((voidpf ptr));
#endif

voidpf ZLIB_INTERNAL zcalloc (opaque, items, size)
    voidpf opaque;
    unsigned items;
    unsigned size;
{
    if (opaque) items += size - size; /* make compiler happy */
    return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :
                              (voidpf)calloc(items, size);
}

void ZLIB_INTERNAL zcfree (opaque, ptr)
    voidpf opaque;
    voidpf ptr;
{
    free(ptr);
    if (opaque) return; /* make compiler happy */
}

#endif /* MY_ZCALLOC */

#endif /* !Z_SOLO */
@


1.5
log
@bootloader (-DSMALL) doesn’t deflate nor compile zutil.c
so it’s fine to move that stuff back to inflate code only
@
text
@d13 1
a13 5
zRCSID("$MirOS: src/kern/z/zutil.c,v 1.4 2013/08/05 21:27:35 tg Exp $")

#ifndef NO_DUMMY_DECL
struct internal_state      {int dummy;}; /* for buggy compilers */
#endif
@


1.4
log
@begin updating zlib

XXX ZCONST is gone, check the tree for it
XXX textproc/libxml* need updates, says zlib upstream
@
text
@d13 1
a13 1
zRCSID("$MirOS: src/kern/z/zutil.c,v 1.3 2008/08/01 14:59:59 tg Exp $")
a18 3
#ifdef SMALL
const char zERRMSG[] = "error";
#else
a29 1
#endif
a134 1
#ifndef SMALL
a142 1
#endif
@


1.3
log
@merge functionality from src/lib/libz/ and __CRAZY cleanliness; fix build
@
text
@d2 1
a2 1
 * Copyright (C) 1995-2005 Jean-loup Gailly.
d9 3
d13 1
a13 1
zRCSID("$MirOS: src/kern/z/zutil.c,v 1.2 2008/08/01 13:46:10 tg Exp $")
d19 4
a22 1
const char * const z_errmsg[10] = {
d33 1
d46 1
a46 1
    switch (sizeof(uInt)) {
d52 1
a52 1
    switch (sizeof(uLong)) {
d58 1
a58 1
    switch (sizeof(voidpf)) {
d64 1
a64 1
    switch (sizeof(z_off_t)) {
d97 1
a97 1
#ifdef STDC
d99 1
a99 1
        flags += 1L << 25;
d101 1
a101 1
        flags += 1L << 26;
d105 1
a105 1
        flags += 1L << 26;
d109 1
a109 1
        flags += 1L << 24;
d111 1
a111 1
        flags += 1L << 25;
d113 1
a113 1
        flags += 1L << 26;
d117 1
a117 1
        flags += 1L << 26;
d129 1
a129 1
int z_verbose = verbose;
d131 1
a131 1
void z_error (m)
d139 1
d148 1
d160 1
a160 1
void zmemcpy(dest, source, len)
d171 1
a171 1
int zmemcmp(s1, s2, len)
d184 1
a184 1
void zmemzero(dest, len)
d195 1
d228 1
a228 1
voidpf zcalloc (voidpf opaque, unsigned items, unsigned size)
d252 1
a252 1
void  zcfree (voidpf opaque, voidpf ptr)
d287 1
a287 1
voidpf zcalloc (voidpf opaque, unsigned items, unsigned size)
d293 1
a293 1
void  zcfree (voidpf opaque, voidpf ptr)
d317 1
a317 1
voidpf zcalloc (opaque, items, size)
d327 1
a327 1
void  zcfree (opaque, ptr)
d336 2
@


1.2
log
@RCS ID and include police
@
text
@d10 1
a10 1
zRCSID("$MirOS$")
d294 5
@


1.1
log
@Initial revision
@
text
@d10 2
@


1.1.117.1
log
@Import the necessary parts of current zlib distribution and some of their docs
@
text
@@


1.1.117.2
log
@update zlib
@
text
@d2 1
a2 1
 * Copyright (C) 1995-2005, 2010, 2011, 2012 Jean-loup Gailly.
a8 3
#ifndef Z_SOLO
#  include "gzguts.h"
#endif
d14 1
a14 1
z_const char * const z_errmsg[10] = {
d37 1
a37 1
    switch ((int)(sizeof(uInt))) {
d43 1
a43 1
    switch ((int)(sizeof(uLong))) {
d49 1
a49 1
    switch ((int)(sizeof(voidpf))) {
d55 1
a55 1
    switch ((int)(sizeof(z_off_t))) {
d88 1
a88 1
#if defined(STDC) || defined(Z_HAVE_STDARG_H)
d90 1
a90 1
    flags += 1L << 25;
d92 1
a92 1
    flags += 1L << 26;
d96 1
a96 1
    flags += 1L << 26;
d100 1
a100 1
    flags += 1L << 24;
d102 1
a102 1
    flags += 1L << 25;
d104 1
a104 1
    flags += 1L << 26;
d108 1
a108 1
    flags += 1L << 26;
d120 1
a120 1
int ZLIB_INTERNAL z_verbose = verbose;
d122 1
a122 1
void ZLIB_INTERNAL z_error (m)
d149 1
a149 1
void ZLIB_INTERNAL zmemcpy(dest, source, len)
d160 1
a160 1
int ZLIB_INTERNAL zmemcmp(s1, s2, len)
d173 1
a173 1
void ZLIB_INTERNAL zmemzero(dest, len)
a183 1
#ifndef Z_SOLO
d216 1
a216 1
voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, unsigned items, unsigned size)
d240 1
a240 1
void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)
d275 1
a275 1
voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, uInt items, uInt size)
d281 1
a281 1
void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)
d300 1
a300 1
voidpf ZLIB_INTERNAL zcalloc (opaque, items, size)
d310 1
a310 1
void ZLIB_INTERNAL zcfree (opaque, ptr)
a318 2

#endif /* !Z_SOLO */
@

