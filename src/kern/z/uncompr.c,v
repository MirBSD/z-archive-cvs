head	1.4;
access;
symbols
	zlib-1_2_8:1.1.117.2
	MIRBSD_10:1.1.117.1.0.2
	MIRBSD_10_BASE:1.1.117.1
	zlib-1_2_3:1.1.117.1
	libz:1.1.117;
locks; strict;
comment	@ * @;


1.4
date	2013.08.05.21.27.35;	author tg;	state Exp;
branches;
next	1.3;
commitid	100520018AA4F2BDEB7;

1.3
date	2008.08.01.14.59.59;	author tg;	state Exp;
branches;
next	1.2;
commitid	100489324F4472E9C7F;

1.2
date	2008.08.01.13.46.10;	author tg;	state Exp;
branches;
next	1.1;
commitid	100489313B0766D4103;

1.1
date	2007.02.06.20.09.46;	author tg;	state Exp;
branches
	1.1.117.1;
next	;
commitid	10045C8E09012013E61;

1.1.117.1
date	2007.02.06.20.09.46;	author tg;	state Exp;
branches;
next	1.1.117.2;
commitid	10045C8E09012013E61;

1.1.117.2
date	2013.08.05.19.24.25;	author tg;	state Exp;
branches;
next	;
commitid	10051FFFBFC7B2E5803;


desc
@@


1.4
log
@begin updating zlib

XXX ZCONST is gone, check the tree for it
XXX textproc/libxml* need updates, says zlib upstream
@
text
@/* uncompr.c -- decompress a memory buffer
 * Copyright (C) 1995-2003, 2010 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
 */

/* @@(#) $Id$ */

#define ZLIB_INTERNAL
#include "zlib.h"

/* ===========================================================================
     Decompresses the source buffer into the destination buffer.  sourceLen is
   the byte length of the source buffer. Upon entry, destLen is the total
   size of the destination buffer, which must be large enough to hold the
   entire uncompressed data. (The size of the uncompressed data must have
   been saved previously by the compressor and transmitted to the decompressor
   by some mechanism outside the scope of this compression library.)
   Upon exit, destLen is the actual size of the compressed buffer.

     uncompress returns Z_OK if success, Z_MEM_ERROR if there was not
   enough memory, Z_BUF_ERROR if there was not enough room in the output
   buffer, or Z_DATA_ERROR if the input data was corrupted.
*/
int ZEXPORT uncompress (dest, destLen, source, sourceLen)
    Bytef *dest;
    uLongf *destLen;
    const Bytef *source;
    uLong sourceLen;
{
    z_stream stream;
    int err;

    stream.next_in = (z_const Bytef *)source;
    stream.avail_in = (uInt)sourceLen;
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;

    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
    if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;

    stream.zalloc = (alloc_func)0;
    stream.zfree = (free_func)0;

    err = inflateInit(&stream);
    if (err != Z_OK) return err;

    err = inflate(&stream, Z_FINISH);
    if (err != Z_STREAM_END) {
        inflateEnd(&stream);
        if (err == Z_NEED_DICT || (err == Z_BUF_ERROR && stream.avail_in == 0))
            return Z_DATA_ERROR;
        return err;
    }
    *destLen = stream.total_out;

    err = inflateEnd(&stream);
    return err;
}
@


1.3
log
@merge functionality from src/lib/libz/ and __CRAZY cleanliness; fix build
@
text
@d2 1
a2 1
 * Copyright (C) 1995-2003 Jean-loup Gailly.
d8 2
a9 3
#include "zutil.h"

zRCSID("$MirOS: src/kern/z/uncompr.c,v 1.2 2008/08/01 13:46:10 tg Exp $")
a18 2
     This function can be used to decompress a whole file at once if the
   input file is mmap'ed.
d33 1
a33 1
    stream.next_in = (ZCONST Bytef*)source;
@


1.2
log
@RCS ID and include police
@
text
@d10 1
a10 1
zRCSID("$MirOS$")
d36 1
a36 1
    stream.next_in = (Bytef*)source;
@


1.1
log
@Initial revision
@
text
@d8 3
a10 2
#define ZLIB_INTERNAL
#include "zlib.h"
@


1.1.117.1
log
@Import the necessary parts of current zlib distribution and some of their docs
@
text
@@


1.1.117.2
log
@update zlib
@
text
@d2 1
a2 1
 * Copyright (C) 1995-2003, 2010 Jean-loup Gailly.
d19 2
d35 1
a35 1
    stream.next_in = (z_const Bytef *)source;
@

