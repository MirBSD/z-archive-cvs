head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2014.12.20.22.28.45;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005495F82D6F1E667E;

1.3
date	2014.03.05.13.59.00;	author tg;	state Exp;
branches;
next	1.2;
commitid	10053172DAE7E166351;

1.2
date	2013.10.31.20.06.13;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005272B7081B0E5655;

1.1
date	2011.11.20.18.54.42;	author tg;	state Exp;
branches;
next	;
commitid	1004EC94CC144CEC290;


desc
@@


1.4
log
@let nōn-MirBSD be responsible for getting the inttypes themselves
@
text
@/* $MirOS: src/kern/include/md5.h,v 1.3 2014/03/05 13:59:00 tg Exp $ */

#ifndef SYSKERN_MD5_H
#define SYSKERN_MD5_H

#ifdef __MirBSD__
#include <machine/types.h>
#endif

#define MD5_BLOCK_LENGTH		64
#define MD5_DIGEST_LENGTH		16
#define MD5_DIGEST_STRING_LENGTH	(MD5_DIGEST_LENGTH * 2 + 1)

typedef struct MD5Context {
	uint32_t state[4];
	uint64_t count;
	uint8_t buffer[MD5_BLOCK_LENGTH];
} MD5_CTX;

__BEGIN_DECLS

/* low-level functions */
void MD5Init(MD5_CTX *);
void MD5Update(MD5_CTX *, const uint8_t *, size_t)
    __attribute__((__bounded__(__string__, 2, 3)));
void MD5Pad(MD5_CTX *);
void MD5Final(uint8_t *, MD5_CTX *)
    __attribute__((__bounded__(__minbytes__, 1, MD5_DIGEST_LENGTH)));
void MD5Transform(uint32_t *, const uint8_t *)
    __attribute__((__bounded__(__minbytes__, 1, 16)))
    __attribute__((__bounded__(__minbytes__, 2, MD5_BLOCK_LENGTH)));

#if !defined(_KERNEL) && !defined(_STANDALONE)
/* high-level functions from helper.c */
char *MD5End(MD5_CTX *, char *)
    __attribute__((__bounded__(__minbytes__, 2, MD5_DIGEST_STRING_LENGTH)));
char *MD5File(const char *, char *)
    __attribute__((__bounded__(__minbytes__, 2, MD5_DIGEST_STRING_LENGTH)));
char *MD5FileChunk(const char *, char *, off_t, off_t)
    __attribute__((__bounded__(__minbytes__, 2, MD5_DIGEST_STRING_LENGTH)));
char *MD5Data(const uint8_t *, size_t, char *)
    __attribute__((__bounded__(__string__, 1, 2)))
    __attribute__((__bounded__(__minbytes__, 3, MD5_DIGEST_STRING_LENGTH)));
#endif

__END_DECLS

#endif
@


1.3
log
@do not use array syntax in function declarations

From: http://www.tedunangst.com/flak/post/how-to-screw-up-crypto-the-easy-way
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/md5.h,v 1.2 2013/10/31 20:06:13 tg Exp $ */
d6 1
d8 1
@


1.2
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/md5.h,v 1.1 2011/11/20 18:54:42 tg Exp $ */
d25 1
a25 1
void MD5Final(uint8_t [MD5_DIGEST_LENGTH], MD5_CTX *)
d27 1
a27 1
void MD5Transform(uint32_t [4], const uint8_t [MD5_BLOCK_LENGTH])
@


1.1
log
@• use common <syskern/md5.h> with /usr/include/md5.h@@ for userspace compat
• switch kernel <crypto/md5.h> users to <syskern/md5.h>
• fix underestimated __attribute__((__bounded__ …)) argument
• this is an interface definition and as such not copyrightable
@
text
@d1 1
a1 1
/* $MirOS$ */
d23 1
a23 1
    __attribute__((__bounded__ (__string__, 2, 3)));
d26 1
a26 1
    __attribute__((__bounded__ (__minbytes__, 1, MD5_DIGEST_LENGTH)));
d28 2
a29 2
    __attribute__((__bounded__ (__minbytes__, 1, 16)))
    __attribute__((__bounded__ (__minbytes__, 2, MD5_BLOCK_LENGTH)));
d34 1
a34 1
    __attribute__((__bounded__ (__minbytes__, 2, MD5_DIGEST_STRING_LENGTH)));
d36 1
a36 1
    __attribute__((__bounded__ (__minbytes__, 2, MD5_DIGEST_STRING_LENGTH)));
d38 1
a38 1
    __attribute__((__bounded__ (__minbytes__, 2, MD5_DIGEST_STRING_LENGTH)));
d40 2
a41 2
    __attribute__((__bounded__ (__string__, 1, 2)))
    __attribute__((__bounded__ (__minbytes__, 3, MD5_DIGEST_STRING_LENGTH)));
@

