head	1.43;
access;
symbols
	MIRBSD_10:1.5.0.2
	MIRBSD_10_BASE:1.5;
locks; strict;
comment	@ * @;


1.43
date	2019.02.21.23.08.43;	author tg;	state Exp;
branches;
next	1.42;
commitid	1005C6F2F922D09A474;

1.42
date	2018.06.18.21.23.44;	author tg;	state Exp;
branches;
next	1.41;
commitid	1005B2822F35925265B;

1.41
date	2015.02.11.21.42.21;	author tg;	state Exp;
branches;
next	1.40;
commitid	10054DBCCD452D127A7;

1.40
date	2015.02.09.21.50.43;	author tg;	state Exp;
branches;
next	1.39;
commitid	10054D92BCB3E6955C8;

1.39
date	2015.02.09.21.46.01;	author tg;	state Exp;
branches;
next	1.38;
commitid	10054D92AB15D0B8652;

1.38
date	2014.11.30.21.30.56;	author tg;	state Exp;
branches;
next	1.37;
commitid	100547B8BEB4A8A38F2;

1.37
date	2014.11.30.02.39.09;	author tg;	state Exp;
branches;
next	1.36;
commitid	100547A835B35D7584C;

1.36
date	2014.03.29.10.25.53;	author tg;	state Exp;
branches;
next	1.35;
commitid	10053369FB477345F50;

1.35
date	2014.02.19.17.43.25;	author tg;	state Exp;
branches;
next	1.34;
commitid	1005304ED413F0CF25C;

1.34
date	2014.02.09.22.35.52;	author tg;	state Exp;
branches;
next	1.33;
commitid	10052F802DB25EB293D;

1.33
date	2013.10.31.20.06.13;	author tg;	state Exp;
branches;
next	1.32;
commitid	1005272B7081B0E5655;

1.32
date	2013.09.10.17.38.34;	author tg;	state Exp;
branches;
next	1.31;
commitid	100522F591E5F5DCD75;

1.31
date	2012.10.19.20.39.03;	author tg;	state Exp;
branches;
next	1.30;
commitid	1005081BA7005F9EB35;

1.30
date	2011.10.18.20.35.35;	author tg;	state Exp;
branches;
next	1.29;
commitid	1004E9DE3025E8E5660;

1.29
date	2011.07.18.07.56.25;	author tg;	state Exp;
branches;
next	1.28;
commitid	1004E23E73F6F1D3DEA;

1.28
date	2011.07.17.17.21.03;	author tg;	state Exp;
branches;
next	1.27;
commitid	1004E231A0679EFCA87;

1.27
date	2011.07.06.22.22.08;	author tg;	state Exp;
branches;
next	1.26;
commitid	1004E14E010182825E7;

1.26
date	2011.07.06.20.29.09;	author tg;	state Exp;
branches;
next	1.25;
commitid	1004E14C59F6231C2CF;

1.25
date	2011.01.03.19.02.51;	author tg;	state Exp;
branches;
next	1.24;
commitid	1004D221D691CE0C01C;

1.24
date	2010.09.12.17.10.47;	author tg;	state Exp;
branches;
next	1.23;
commitid	1004C8D0939027D8BE7;

1.23
date	2010.09.12.12.24.29;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004C8CC69150D1B4BD;

1.22
date	2010.01.10.20.18.50;	author tg;	state Exp;
branches;
next	1.21;
commitid	1004B4A3588743BF0D3;

1.21
date	2009.11.09.21.36.38;	author tg;	state Exp;
branches;
next	1.20;
commitid	1004AF88B6210E6BBB3;

1.20
date	2008.12.29.20.24.14;	author tg;	state Exp;
branches;
next	1.19;
commitid	100495931F91E1CB50F;

1.19
date	2008.12.28.05.10.31;	author tg;	state Exp;
branches;
next	1.18;
commitid	10049570A507B1A6580;

1.18
date	2008.12.27.21.43.23;	author tg;	state Exp;
branches;
next	1.17;
commitid	1004956A18038840C35;

1.17
date	2008.12.27.20.10.06;	author tg;	state Exp;
branches;
next	1.16;
commitid	10049568B9A5684C8E6;

1.16
date	2008.11.22.12.33.26;	author tg;	state Exp;
branches;
next	1.15;
commitid	1004927FC1F2B02A162;

1.15
date	2008.11.22.12.18.22;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004927F89644E4AB15;

1.14
date	2008.11.22.08.48.58;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004927C78B2CA31EC7;

1.13
date	2008.08.03.21.02.02;	author tg;	state Exp;
branches;
next	1.12;
commitid	10048961CCE67B72AC5;

1.12
date	2008.08.03.00.21.26;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004894F96F745C42A9;

1.11
date	2008.08.01.23.24.02;	author tg;	state Exp;
branches;
next	1.10;
commitid	10048939B085B2C5840;

1.10
date	2008.08.01.22.22.21;	author tg;	state Exp;
branches;
next	1.9;
commitid	10048938CB001E31B27;

1.9
date	2008.08.01.19.10.59;	author tg;	state Exp;
branches;
next	1.8;
commitid	10048935FCF170D0FCC;

1.8
date	2008.08.01.19.07.43;	author tg;	state Exp;
branches;
next	1.7;
commitid	10048935EFB41305792;

1.7
date	2008.08.01.18.09.21;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004893513244B11E80;

1.6
date	2008.08.01.16.35.23;	author tg;	state Exp;
branches;
next	1.5;
commitid	10048933B5E5B20CA97;

1.5
date	2007.03.02.01.57.06;	author tg;	state Exp;
branches;
next	1.4;
commitid	10045E784807B9E95DD;

1.4
date	2007.02.06.23.32.56;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045C90F193C3DFE53;

1.3
date	2007.02.06.23.19.33;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045C90D13016F3F77;

1.2
date	2007.02.06.22.09.44;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045C8FCB96CD29809;

1.1
date	2007.02.06.18.58.06;	author tg;	state Exp;
branches;
next	;
commitid	10045C8CFD420E83CC2;


desc
@@


1.43
log
@additional check
@
text
@/* $MirOS: src/kern/include/libckern.h,v 1.40 2015/02/09 21:50:43 tg Exp $ */

/*-
 * Copyright (c) 2008, 2010, 2011, 2013, 2014, 2015, 2019
 *	mirabilos <m@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#ifndef __LIBCKERN_H_
#define __LIBCKERN_H_

#include <sys/types.h>

#ifdef __MirBSD__

#ifndef NULL
#ifdef __GNUG__
#define	NULL		__null
#elif defined(lint) || defined(__cplusplus)
#define	NULL		0UL
#else
#define	NULL		((void *)((__PTRDIFF_TYPE__)0UL))
#endif
#endif

#ifndef __IN_MKDEP
/* makedepend may not define the constants we are checking for */
#if __WCHAR_MAX__ != 65535U
#error GCC __WCHAR_MAX__ does not indicate UCS-2
#endif
#ifndef __STDC_ISO_10646__
#error This code assumes that wchar_t is UCS-2HE
#endif
#endif /* !__IN_MKDEP */

#if !defined(_GCC_WCHAR_T) && !defined(__cplusplus)
#define	_GCC_WCHAR_T
typedef	__WCHAR_TYPE__	wchar_t;
#endif

#if !defined(_GCC_WINT_T)
#define	_GCC_WINT_T
typedef	__WINT_TYPE__	wint_t;
#endif

#if !defined(_GCC_MBSTATE_T)
#define	_GCC_MBSTATE_T
typedef struct {
	unsigned int count:2;
	unsigned int value:12;
} __attribute__((__packed__)) mbstate_t;
#endif

/**
 * An arcfour_status is hereby defined carrying ca.
 * 212 octets (1696 bit) of entropic state, whereas
 * S contains 210 octets and 3.996 additional bits,
 * i is another 8 bit, and j adds enough to make up
 * for the 4 bit of additional entropy we assume.
 */
struct arcfour_status {
	uint8_t S[256];
	uint8_t i;
	uint8_t j;
};

#undef WCHAR_MIN
#define WCHAR_MIN	0
#undef WCHAR_MAX
#define WCHAR_MAX	0xFFFDU
#undef WEOF
#define WEOF		0xFFFFU

#ifndef EOF
#define EOF		(-1)
#endif

#endif /* __MirBSD__ */

__BEGIN_DECLS
void __main(void);

void arc4random_roundhash(uint32_t *, uint8_t *, const void *, size_t)
    __attribute__((__bounded__(__minbytes__, 1, 128)))
    __attribute__((__bounded__(__buffer__, 3, 4)));
/* u_int32_t in the original API, but we pray they're the same */
uint32_t arc4random_uniform(uint32_t);

/* arcfour: base cipher */
void arcfour_init(struct arcfour_status *);
void arcfour_ksa(struct arcfour_status *, const uint8_t *, size_t)
    __attribute__((__bounded__(__string__, 2, 3)));
uint8_t arcfour_byte(struct arcfour_status *);

int bcmp(const void *, const void *, size_t)
    __attribute__((__bounded__(__buffer__, 1, 3)))
    __attribute__((__bounded__(__buffer__, 2, 3)));
void bcopy(const void *, void *, size_t)
    __attribute__((__bounded__(__buffer__, 1, 3)))
    __attribute__((__bounded__(__buffer__, 2, 3)));
void bzero(void *, size_t)
    __attribute__((__bounded__(__buffer__, 1, 2)));
void explicit_bzero(void *, size_t)
    __attribute__((__bounded__(__buffer__, 1, 2)));

int ffs(int);

void *memchr(const void *, int, size_t)
    __attribute__((__bounded__(__buffer__, 1, 3)));
int memcmp(const void *, const void *, size_t)
    __attribute__((__bounded__(__buffer__, 1, 3)))
    __attribute__((__bounded__(__buffer__, 2, 3)));
void *memcpy(void *, const void *, size_t)
    __attribute__((__bounded__(__buffer__, 1, 3)))
    __attribute__((__bounded__(__buffer__, 2, 3)));
void memhexdump(const void *, size_t, size_t);
void *memmove(void *, const void *, size_t)
    __attribute__((__bounded__(__buffer__, 1, 3)))
    __attribute__((__bounded__(__buffer__, 2, 3)));
void *mempcpy(void *, const void *, size_t)
    __attribute__((__bounded__(__buffer__, 1, 3)))
    __attribute__((__bounded__(__buffer__, 2, 3)));
void *memset(void *, int, size_t)
    __attribute__((__bounded__(__buffer__, 1, 3)));

size_t optu16to8(char *, wchar_t, mbstate_t *)
    __attribute__((__bounded__(__minbytes__, 1, 5)));
size_t optu8to16(wchar_t *, const char *, size_t, mbstate_t *)
    __attribute__((__bounded__(__string__, 2, 3)));

int strcasecmp(const char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
size_t strlcat(char *, const char *, size_t)
    __attribute__((__bounded__(__string__, 1, 3)));
size_t strlcpy(char *, const char *, size_t)
    __attribute__((__bounded__(__string__, 1, 3)));
size_t strlen(const char *);
int strncasecmp(const char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t)
    __attribute__((__bounded__(__string__, 1, 3)));
char *strrchr(const char *, int);
size_t strxfrm(char *, const char *, size_t)
    __attribute__((__bounded__(__string__, 1, 3)));

#ifdef _KERN_HOSTED
size_t wcrtomb(char *, wchar_t, mbstate_t *)
    __attribute__((__bounded__(__minbytes__, 1, 5)));
#endif
int wcscasecmp(const wchar_t *, const wchar_t *);
int wcscmp(const wchar_t *, const wchar_t *);
int wcscoll(const wchar_t *, const wchar_t *);
size_t wcslcat(wchar_t *, const wchar_t *, size_t);
size_t wcslcpy(wchar_t *, const wchar_t *, size_t);
size_t wcslen(const wchar_t *);
int wcsncasecmp(const wchar_t *, const wchar_t *, size_t);
size_t wcsxfrm(wchar_t *, const wchar_t *, size_t);
__END_DECLS

#ifndef iswoctet
#define iswoctet(wc)	(((wchar_t)(wc) & 0xFF80) == 0xEF80)
#endif

#ifdef __MirBSD__
/* initialise/set/reset a mbstate_t to empty */
#define mbsreset(ps) do {				\
	mbstate_t *__WC_s = (ps);			\
	if (ps != NULL)					\
		ps->count = 0;				\
} while (0)
#endif /* __MirBSD__ */

/* XXX what about other compilers? */
#ifdef __GNUC__

#ifdef __MirBSD__
/* roll back the middle char of a mis-done 3-byte mb->wc conversion */
#define mbrtowc_rollback(ps) __extension__({		\
	const mbstate_t *__WC_s = (ps);			\
	int __WC_rv = EOF;				\
	if (__WC_s->count == 1 &&			\
	    __WC_s->value >= 0x20)			\
		__WC_rv = 0x80 |			\
		    (__WC_s->value & 0x3F);		\
	(__WC_rv);					\
})
#endif /* __MirBSD__ */

#define imax(a,b) __extension__({			\
	int imax_a = (a), imax_b = (b);			\
	(imax_a > imax_b ? imax_a : imax_b);		\
})
#define imin(a,b) __extension__({			\
	int imin_a = (a), imin_b = (b);			\
	(imin_a < imin_b ? imin_a : imin_b);		\
})
#define lmax(a,b) __extension__({			\
	long lmax_a = (a), lmax_b = (b);		\
	(lmax_a > lmax_b ? lmax_a : lmax_b);		\
})
#define lmin(a,b) __extension__({			\
	long lmin_a = (a), lmin_b = (b);		\
	(lmin_a < lmin_b ? lmin_a : lmin_b);		\
})
#define max(a,b) __extension__({			\
	u_int max_a = (a), max_b = (b);			\
	(max_a > max_b ? max_a : max_b);		\
})
#define min(a,b) __extension__({			\
	u_int min_a = (a), min_b = (b);			\
	(min_a < min_b ? min_a : min_b);		\
})
#define ulmax(a,b) __extension__({			\
	u_long ulmax_a = (a), ulmax_b = (b);		\
	(ulmax_a > ulmax_b ? ulmax_a : ulmax_b);	\
})
#define ulmin(a,b) __extension__({			\
	u_long ulmin_a = (a), ulmin_b = (b);		\
	(ulmin_a < ulmin_b ? ulmin_a : ulmin_b);	\
})

#ifndef _STDLIB_H_abs_DEFINED
#undef abs
__BEGIN_DECLS
int abs(int);
__END_DECLS
#define _STDLIB_H_abs_DEFINED
#define abs(j) __extension__({				\
	int abs_j = (j);				\
	(abs_j < 0 ? -abs_j : abs_j);			\
})
#endif

#endif /* __GNUC__ */

#ifndef __LIBCKERN_HAVE_ADLER32_DECL
#define __LIBCKERN_HAVE_ADLER32_DECL
__BEGIN_DECLS
extern u_long adler32(u_long, const uint8_t *, unsigned);
__END_DECLS
#endif

#endif
@


1.42
log
@fix spelling; clarify entropy estimate
@
text
@d4 2
a5 2
 * Copyright (c) 2008, 2010, 2011, 2013, 2014, 2015
 *	Thorsten Glaser <tg@@mirbsd.org>
d106 1
a106 1
    __attribute__((__bounded__(__buffer__, 2, 3)));
@


1.41
log
@nice workaround for C++ brokenness: 0L taken from musl via ycombinator, but it must be unsigned of course, so 0UL
@
text
@d69 1
a69 1
 * An arcfour_status is hereby defined as carrying
d71 1
a71 1
 * S contains 210 octets and 3 or 4 additioinal bit,
d73 1
a73 1
 * for the 4-5 bit of additional entropy we assume.
@


1.40
log
@harmonise tabs inside the files
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.39 2015/02/09 21:46:01 tg Exp $ */
d34 1
a34 1
#define	NULL		0
@


1.39
log
@fix C++ (except G++) definition of NULL; revalidate C/POSIX one
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.38 2014/11/30 21:30:56 tg Exp $ */
d32 1
a32 1
#define	NULL			__null
d34 1
a34 1
#define	NULL			0
d36 1
a36 1
#define	NULL			((void *)((__PTRDIFF_TYPE__)0UL))
@


1.38
log
@• timingsafe_memcmp is not the same as timingsafe_bcmp, remove
• remove timingsafe_bcmp from libkern
• (re-)add timingsafe_bcmp and timingsafe_memcmp to libc
• update omalloc
• newly add reallocarray to libc
• add strnlen to libc, fix strndup to not read beyond size with that
• update manpages and add MLINKS: strndup, strnlen, timingsafe_*cmp
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.37 2014/11/30 02:39:09 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2008, 2010, 2011, 2013, 2014
d32 3
a34 3
#define	NULL		__null
#elif defined(lint)
#define	NULL		0
d36 1
a36 1
#define	NULL		((void *)((__PTRDIFF_TYPE__)0UL))
@


1.37
log
@OpenBSD has timingsafe_memcmp now too… whatever for…
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.36 2014/03/29 10:25:53 tg Exp $ */
a118 6
int timingsafe_bcmp(const void *, const void *, size_t)
    __attribute__((__bounded__(__buffer__, 1, 3)))
    __attribute__((__bounded__(__buffer__, 2, 3)));
int timingsafe_memcmp(const void *, const void *, size_t)
    __attribute__((__bounded__(__buffer__, 1, 3)))
    __attribute__((__bounded__(__buffer__, 2, 3)));
@


1.36
log
@drop arcfour_ksa256 (only used in one place) in favour of the more
generic arcfour_ksa function
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.35 2014/02/19 17:43:25 tg Exp $ */
d122 3
@


1.35
log
@replace OAAT, NZAT, NZAAT with BAFH in virtually all places; bump libc major
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.34 2014/02/09 22:35:52 tg Exp $ */
a104 2
void arcfour_ksa256(struct arcfour_status *, const uint8_t *)
    __attribute__((__bounded__(__minbytes__, 2, 256)));
@


1.34
log
@nuke the restrict qualifiers; C99 says this makes no externally visible difference and is only a compiler hint and a limitation to the interface implementor
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.33 2013/10/31 20:06:13 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2008, 2010, 2011, 2013
a144 5
uint32_t OAAT0Update(register uint32_t, register const uint8_t *,
    register size_t) __a_deprecated
    __attribute__((__bounded__(__string__, 2, 3)));
uint32_t OAAT0Final(register uint32_t) __a_deprecated;

@


1.33
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.32 2013/09/10 17:38:34 tg Exp $ */
d150 1
a150 1
size_t optu16to8(char * __restrict__, wchar_t, mbstate_t * __restrict__)
d152 1
a152 2
size_t optu8to16(wchar_t * __restrict__, const char * __restrict__,
    size_t, mbstate_t * __restrict__)
d173 1
a173 1
size_t wcrtomb(char * __restrict__, wchar_t, mbstate_t * __restrict__)
@


1.32
log
@constant-time memory buffer comparison, for cryptographic use, from OpenBSD
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.31 2012/10/19 20:39:03 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2008, 2010, 2011
d98 2
a99 2
    __attribute__((__bounded__ (__minbytes__, 1, 128)))
    __attribute__((__bounded__ (__buffer__, 3, 4)));
d106 1
a106 1
    __attribute__((__bounded__ (__minbytes__, 2, 256)));
d108 1
a108 1
    __attribute__((__bounded__ (__buffer__, 2, 3)));
d112 2
a113 2
    __attribute__((__bounded__ (__buffer__, 1, 3)))
    __attribute__((__bounded__ (__buffer__, 2, 3)));
d115 2
a116 2
    __attribute__((__bounded__ (__buffer__, 1, 3)))
    __attribute__((__bounded__ (__buffer__, 2, 3)));
d118 1
a118 1
    __attribute__((__bounded__ (__buffer__, 1, 2)));
d120 1
a120 1
    __attribute__((__bounded__ (__buffer__, 1, 2)));
d122 2
a123 2
    __attribute__((__bounded__ (__buffer__, 1, 3)))
    __attribute__((__bounded__ (__buffer__, 2, 3)));
d128 1
a128 1
    __attribute__((__bounded__ (__buffer__, 1, 3)));
d130 2
a131 2
    __attribute__((__bounded__ (__buffer__, 1, 3)))
    __attribute__((__bounded__ (__buffer__, 2, 3)));
d133 2
a134 2
    __attribute__((__bounded__ (__buffer__, 1, 3)))
    __attribute__((__bounded__ (__buffer__, 2, 3)));
d137 2
a138 2
    __attribute__((__bounded__ (__buffer__, 1, 3)))
    __attribute__((__bounded__ (__buffer__, 2, 3)));
d140 2
a141 2
    __attribute__((__bounded__ (__buffer__, 1, 3)))
    __attribute__((__bounded__ (__buffer__, 2, 3)));
d143 1
a143 1
    __attribute__((__bounded__ (__buffer__, 1, 3)));
d147 1
a147 1
    __attribute__((__bounded__ (__string__, 2, 3)));
d151 1
a151 1
    __attribute__((__bounded__ (__minbytes__, 1, 5)));
d154 1
a154 1
    __attribute__((__bounded__ (__string__, 2, 3)));
d161 1
a161 1
    __attribute__((__bounded__ (__string__, 1, 3)));
d163 1
a163 1
    __attribute__((__bounded__ (__string__, 1, 3)));
d168 1
a168 1
    __attribute__((__bounded__ (__string__, 1, 3)));
d171 1
a171 1
    __attribute__((__bounded__ (__string__, 1, 3)));
d175 1
a175 1
    __attribute__((__bounded__ (__minbytes__, 1, 5)));
@


1.31
log
@document just how much entropy exactly is in an aRC4 state (S-Box + i + j)
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.30 2011/10/18 20:35:35 tg Exp $ */
d121 3
@


1.30
log
@• move __strong_alias to <sys/cdefs.h> from <syskern/libckern.h>
  for libm source to pick up
• move __weak_alias and __warn_references there, too, for convenience
• [sparc] remove bogus _C_LABEL
• empty <machine/cdefs.h> now as we got ELF common code
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.29 2011/07/18 07:56:25 tg Exp $ */
d68 7
@


1.29
log
@prevent macro./.proto collision
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.28 2011/07/17 17:21:03 tg Exp $ */
a250 3
#define __strong_alias(alias,sym)			\
	__asm__(".globl " __STRING(alias) "; " __STRING(alias) " = " __STRING(sym))

@


1.28
log
@add explicit_bzero from OpenBSD for security applications (kernel/mbfun)
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.27 2011/07/06 22:22:08 tg Exp $ */
d238 7
d249 1
@


1.27
log
@replace uses of OAAT hash in all its variants by NZAT (mksh internal) or NZAAT (all others)
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.25 2011/01/03 19:02:51 tg Exp $ */
d112 2
@


1.26
log
@use __…__ in __attribute__ and introduce (gcc)
+#define __a_deprecated         __attribute__((__deprecated__))
@
text
@d134 1
a134 1
    register size_t)
d136 1
a136 1
uint32_t OAAT0Final(register uint32_t);
@


1.25
log
@move strchr, strrchr, strncpy to kern; remove redundant strncmp, strncasecmp protos
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.24 2010/09/12 17:10:47 tg Exp $ */
d65 1
a65 1
} __attribute__((packed)) mbstate_t;
d91 2
a92 2
    __attribute__((bounded (minbytes, 1, 128)))
    __attribute__((bounded (buffer, 3, 4)));
d99 1
a99 1
    __attribute__((bounded (minbytes, 2, 256)));
d101 1
a101 1
    __attribute__((bounded (buffer, 2, 3)));
d105 2
a106 2
    __attribute__((bounded (buffer, 1, 3)))
    __attribute__((bounded (buffer, 2, 3)));
d108 2
a109 2
    __attribute__((bounded (buffer, 1, 3)))
    __attribute__((bounded (buffer, 2, 3)));
d111 1
a111 1
    __attribute__((bounded (buffer, 1, 2)));
d116 1
a116 1
    __attribute__((bounded (buffer, 1, 3)));
d118 2
a119 2
    __attribute__((bounded (buffer, 1, 3)))
    __attribute__((bounded (buffer, 2, 3)));
d121 2
a122 2
    __attribute__((bounded (buffer, 1, 3)))
    __attribute__((bounded (buffer, 2, 3)));
d125 2
a126 2
    __attribute__((bounded (buffer, 1, 3)))
    __attribute__((bounded (buffer, 2, 3)));
d128 2
a129 2
    __attribute__((bounded (buffer, 1, 3)))
    __attribute__((bounded (buffer, 2, 3)));
d131 1
a131 1
    __attribute__((bounded (buffer, 1, 3)));
d134 2
a135 1
    register size_t) __attribute__((bounded (string, 2, 3)));
d139 1
a139 1
    __attribute__((bounded (minbytes, 1, 5)));
d142 1
a142 1
    __attribute__((bounded (string, 2, 3)));
d149 1
a149 1
    __attribute__((bounded (string, 1, 3)));
d151 1
a151 1
    __attribute__((bounded (string, 1, 3)));
d156 1
a156 1
    __attribute__((bounded (string, 1, 3)));
d159 1
a159 1
    __attribute__((bounded (string, 1, 3)));
d163 1
a163 1
    __attribute__((bounded (minbytes, 1, 5)));
@


1.24
log
@new implementation of arc4random(3) API (except arc4random_uniform(3),
which though has been split off earlier today)

deprecate arc4random_push arc4random_pushb arc4random_pushk
in favour of arc4random_pushb_fast as well

hide internal symbols from user with a version script (only some,
until the next major bump)

make deprecated functions into macros already

switch some kernel code to use the new shared code already; rewrite
of kernel arc4random(9) will come next/later
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.23 2010/09/12 12:24:29 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2008, 2010
d144 1
d154 3
@


1.23
log
@• kern/c/arc4random_uniform.c, kern/include/libckern.h: move
  arc4random_uniform(3) implementation here
• kern/c/Makefile.inc: build arc4random_uniform.c kernel/user
• lib/libc/crypt/arc4random.c, sys/dev/rnd.c: remove implementation here
• sys/dev/rndvar.h: prototype is now in <libckern.h>
• contrib/code/Snippets/arc4random.c: sync with master implementation
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.22 2010/01/10 20:18:50 tg Exp $ */
d68 6
d90 3
d96 8
@


1.22
log
@• kern: new KERNISUSR (defined by libc and libmdsup, but not by either
  bootloader or kernel), enables new NUSRCS, UIF_NUSRCS
• move MD strncmp() to kern
• move MI {str,wcs}case{,n}cmp to kern
• make wcs* functions NU not KU as we don’t need them in the kernel YET
• move __main to NU (it’s a joke anyway, I think)
• bootloader: make devsw_prefix_match case-insensitive
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.21 2009/11/09 21:36:38 tg Exp $ */
d84 3
@


1.21
log
@bump libc minor, to be able to pull in OAAT hash helper functions,
as well as globalise the hashpad things; sync mirmake and kernel
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.20 2008/12/29 20:24:14 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2008
d123 1
d131 2
d140 1
d146 1
@


1.20
log
@mask some interna from !__MirBSD__
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.19 2008/12/28 05:10:31 tg Exp $ */
d113 4
@


1.19
log
@a hex-dumping function used in debugging fcfs (FAT for /boot)
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.18 2008/12/27 21:43:23 tg Exp $ */
d28 2
d79 2
d145 1
d152 1
d157 1
d168 1
@


1.18
log
@stpcpy and stpncpy, GNU extensions

XXX no manpages for either these or mempcpy (yet)
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.17 2008/12/27 20:10:06 tg Exp $ */
d99 1
@


1.17
log
@merge
.Ox
and pimp the
.Xr style 9
.Pq KNF .
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.16 2008/11/22 12:33:26 tg Exp $ */
d102 3
@


1.16
log
@share iswoctet() to kern/c/optu16to8.c
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.15 2008/11/22 12:18:22 tg Exp $ */
d105 1
a105 1
size_t optu16to8(char * restrict, wchar_t, mbstate_t * restrict)
d107 2
a108 2
size_t optu8to16(wchar_t * restrict, const char * restrict, size_t,
    mbstate_t * restrict)
d122 1
a122 1
size_t wcrtomb(char * restrict, wchar_t, mbstate_t * restrict)
@


1.15
log
@while I do not quite like the use of tabulators here, unify with time.c &c.
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.14 2008/11/22 08:48:58 tg Exp $ */
d133 4
@


1.14
log
@unify the definitions in these files
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.13 2008/08/03 21:02:02 tg Exp $ */
d49 2
a50 2
#define _GCC_WCHAR_T
typedef __WCHAR_TYPE__ wchar_t;
d54 2
a55 2
#define _GCC_WINT_T
typedef __WINT_TYPE__ wint_t;
d59 1
a59 1
#define _GCC_MBSTATE_T
@


1.13
log
@Hacked in the train to Zwitserland:

• new: memcpy()=bcopy()=memmove()
• new macro: __strong_alias (incidentally, TNF has exactly the same name
  and exactly (except an ‘a’ more) the same implementation)
• use __strong_alias and #ifdef lint instead of duplicate code via unifdef
  abuse
• sprinkle a few uses of _ALIGN_TEXT
• remove duplicate memmove, memcpy, bcopy and ovbcopy implementations
  from the i386 kernel
• _ALIGN_TEXT is a nop #ifdef SMALL
• remove more duplicate definitions, etc.
• remove more dead code from bootloader -D_TEST
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.12 2008/08/03 00:21:26 tg Exp $ */
a37 8
#if !defined(_WCHAR_H_)
typedef __WCHAR_TYPE__	wchar_t;
typedef __WINT_TYPE__	wint_t;
typedef struct {
	unsigned int count:2;
	unsigned int value:12;	/* 10 for mbstowcs, 12 for wcstombs */
} __attribute__((packed)) mbstate_t;

d48 18
d72 1
a75 1
#endif /* !_WCHAR_H_ */
@


1.12
log
@• fix use of functions and replacement gcc builtins without declaration (C99)
• use “buffer” style ipv “string” style bounds check on bcmp, bzero,
  memchr, memcmp, and memset, as sizeof (pointer) is a valid idiom (kernel)
• tai_leaps.o was missing in the kernel objects after removal from libkern
• do not redefine min or NULL (libckern)
• sync lists
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.11 2008/08/01 23:24:02 tg Exp $ */
d73 3
d86 6
d181 3
@


1.11
log
@• OPTU-8 ⇐⇒ OPTU-16 conversion routines (libc, kernel, !bootloader)
• optu16to8(3) replaces wcrtomb(3) in libc
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.10 2008/08/01 22:22:21 tg Exp $ */
d71 2
a72 2
    __attribute__((bounded (string, 1, 3)))
    __attribute__((bounded (string, 2, 3)));
d74 1
a74 1
    __attribute__((bounded (string, 1, 2)));
d79 1
a79 1
    __attribute__((bounded (string, 1, 3)));
d81 2
a82 2
    __attribute__((bounded (string, 1, 3)))
    __attribute__((bounded (string, 2, 3)));
d84 1
a84 1
    __attribute__((bounded (string, 1, 3)));
@


1.10
log
@need NULL quite often
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.9 2008/08/01 19:10:59 tg Exp $ */
d69 1
d75 1
d77 1
d85 7
d102 4
@


1.9
log
@make these not stomp onto each others' feet better
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.8 2008/08/01 19:07:43 tg Exp $ */
d28 10
@


1.8
log
@remove a few function bodies for things we can do inline and always have,
just not as well, and fine-tune the asm code for the bodies in libc
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.24 2008/04/22 11:43:31 tg Rel $ */
d36 3
a38 2
/* makedepend may not define __WCHAR_MAX__ */
#if defined(__WCHAR_MAX__) && (__WCHAR_MAX__ != 65535U)
d41 4
@


1.7
log
@more migration

(in case you wonder: goal is to make libc, kernel and bootloaders share
the code currently in libkern, (some of) libsa, and libz, and to move
the bootloaders out of src/sys/ and into some more sane place)
@
text
@d1 21
a21 1
/* $MirOS: src/kern/include/libckern.h,v 1.6 2008/08/01 16:35:23 tg Exp $ */
d60 2
d65 2
a75 4
void *memchr(const void *, int, size_t)
    __attribute__((bounded (string, 1, 3)));
void *memset(void *, int, size_t)
    __attribute__((bounded (string, 1, 3)));
d86 4
a89 4
#define mbsreset(ps) do {			\
	mbstate_t *__WC_s = (ps);		\
	if (ps != NULL)				\
		ps->count = 0;			\
d91 4
d96 8
a103 8
#define mbrtowc_rollback(ps) __extension__({	\
	const mbstate_t *__WC_s = (ps);		\
	int __WC_rv = EOF;			\
	if (__WC_s->count == 1 &&		\
	    __WC_s->value >= 0x20)		\
		__WC_rv = 0x80 |		\
		    (__WC_s->value & 0x3F);	\
	(__WC_rv);				\
d106 39
@


1.6
log
@migrate strlcat/strlcpy/strxfrm and wcs* equivalents
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.5 2007/03/02 01:57:06 tg Exp $ */
d33 12
d52 4
d57 2
@


1.5
log
@prevent adler32() from being multiply defined
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.4 2007/02/06 23:32:56 tg Exp $ */
d8 1
a8 1
#if !defined(_STANDALONE) && !defined(_WCHAR_H_)
d30 1
a30 1
#endif /* !_STANDALONE && !_WCHAR_H_ */
d33 4
d38 2
a39 1
__END_DECLS
d41 2
a42 2
#if !defined(_STANDALONE) && !defined(_WCHAR_H_)
__BEGIN_DECLS
d44 1
d48 5
a52 5
#define mbsreset(ps)	do {			\
		mbstate_t *__WC_s = (ps);	\
		if (ps != NULL)			\
			ps->count = 0;		\
	} while (0)
d54 9
a62 10
#define mbrtowc_rollback(ps)	__extension__({		\
		const mbstate_t *__WC_s = (ps);		\
		int __WC_rv = EOF;			\
		if (__WC_s->count == 1 &&		\
		    __WC_s->value >= 0x20)		\
			__WC_rv = 0x80 |		\
			    (__WC_s->value & 0x3F);	\
		(__WC_rv);				\
	})
#endif
@


1.4
log
@new macros:
* void mbsreset(mbstate_t *ps);
  resets the mbstate_t (as if it was bzero(3)d)
* int mbrtowc_rollback(const mbstate_t *ps);
  ☠ if 'ps' does not contain a valid state created by mbrtowc(3),
    e.g. uninitialised or from wcrtomb(3), the result is undefined☠
  - if 'ps' contains the multibyte conversion state created from
    converting two bytes to a wide character which are valid
    leading bytes from a three-byte multibyte sequence, the
    second (middle) byte is returned
  - otherwise, EOF (not WEOF) is returned

also, add the definition of EOF
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.3 2007/02/06 23:19:33 tg Exp $ */
d59 7
@


1.3
log
@missing __BEGIN_DECLS ./. __END_DECLS, oops
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.2 2007/02/06 22:09:44 tg Exp $ */
d27 3
d40 17
@


1.2
log
@we'll need mbstate_t in the kernel, too
@
text
@d1 1
a1 1
/* $MirOS: src/kern/include/libckern.h,v 1.1 2007/02/06 18:58:06 tg Exp $ */
d34 1
d36 1
@


1.1
log
@generate our own include directory
@
text
@d1 1
a1 1
/* $MirOS: src/kern/c/libckern.h,v 1.1 2007/02/06 16:24:42 tg Exp $ */
d11 4
@

