head	1.5;
access;
symbols
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	cvs-200703180320:1.1.1.3
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200507211800:1.1.1.2
	cvs-200504291700:1.1.1.2
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2017.08.07.20.16.45;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005988C69344442E37;

1.4
date	2007.03.18.04.14.55;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045FCBCD3679AFB9F;

1.3
date	2005.04.29.18.34.56;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.19.49.56;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.26.30;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.26.30;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.17.05.34;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.03.18.03.29.16;	author tg;	state Exp;
branches;
next	;
commitid	10045FCB21A22D66DA7;


desc
@@


1.5
log
@filesystem
@
text
@/*	$OpenBSD: main.c,v 1.29 2007/02/09 19:52:32 otto Exp $	*/
/*	$NetBSD: main.c,v 1.22 1996/10/11 20:15:48 thorpej Exp $	*/

/*
 * Copyright (c) 1980, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/time.h>
#include <sys/mount.h>
#include <ufs/ufs/dinode.h>
#include <ufs/ffs/fs.h>
#include <fstab.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdio.h>
#include <unistd.h>

#include "fsck.h"
#include "extern.h"
#include "fsutil.h"

__COPYRIGHT("@@(#) Copyright (c) 1980, 1986, 1993\n\
	The Regents of the University of California.  All rights reserved.\n");
__SCCSID("@@(#)main.c	8.2 (Berkeley) 1/23/94");
__RCSID("$MirOS: src/sbin/fsck_ffs/main.c,v 1.4 2007/03/18 04:14:55 tg Exp $");

volatile sig_atomic_t returntosingle;

int	argtoi(int, char *, char *, int);
int	checkfilesys(char *, char *, long, int);
int	docheck(struct fstab *);
int	main(int, char *[]);

extern char *__progname;

int
main(int argc, char *argv[])
{
	int ch;
	int ret = 0;

	sync();
	skipclean = 1;
	while ((ch = getopt(argc, argv, "dfpnNyYb:c:m:")) != -1) {
		switch (ch) {
		case 'p':
			preen++;
			break;

		case 'b':
			skipclean = 0;
			bflag = argtoi('b', "number", optarg, 10);
			printf("Alternate super block location: %d\n", bflag);
			break;

		case 'c':
			skipclean = 0;
			cvtlevel = argtoi('c', "conversion level", optarg, 10);
			break;

		case 'd':
			debug++;
			break;

		case 'f':
			skipclean = 0;
			break;

		case 'm':
			lfmode = argtoi('m', "mode", optarg, 8);
			if (lfmode &~ 07777)
				errexit("bad mode to -m: %o\n", lfmode);
			printf("** lost+found creation mode %o\n", lfmode);
			break;

		case 'n':
		case 'N':
			nflag++;
			yflag = 0;
			break;

		case 'y':
		case 'Y':
			yflag++;
			nflag = 0;
			break;

		default:
			errexit("usage: %s [-fnpy] [-b block#] [-c level] "
			    "[-m mode] filesystem ...\n", __progname);
		}
	}
	argc -= optind;
	argv += optind;
	if (signal(SIGINT, SIG_IGN) != SIG_IGN)
		(void)signal(SIGINT, catch);
	if (preen)
		(void)signal(SIGQUIT, catchquit);
	(void)signal(SIGINFO, catchinfo);

	if (argc)
		while (argc-- > 0)
			(void)checkfilesys(blockcheck(*argv++), 0, 0L, 0);

	if (returntosingle)
		ret = 2;

	exit(ret);
}

int
argtoi(int flag, char *req, char *str, int base)
{
	char *cp;
	int ret;

	ret = (int)strtol(str, &cp, base);
	if (cp == str || *cp)
		errexit("-%c flag requires a %s\n", flag, req);
	return (ret);
}

/*
 * Determine whether a filesystem should be checked.
 */
int
docheck(struct fstab *fsp)
{

	if ((strcmp(fsp->fs_vfstype, "ufs") &&
	     strcmp(fsp->fs_vfstype, "ffs")) ||
	    (strcmp(fsp->fs_type, FSTAB_RW) &&
	     strcmp(fsp->fs_type, FSTAB_RO)) ||
	    fsp->fs_passno == 0)
		return (0);
	return (1);
}

/*
 * Check the specified filesystem.
 */
/* ARGSUSED */
int
checkfilesys(char *filesys, char *mntpt, long auxdata, int child)
{
	daddr_t n_ffree, n_bfree;
	struct dups *dp;
	struct zlncnt *zlnp;
	int cylno;

	if (preen && child)
		(void)signal(SIGQUIT, voidquit);
	setcdevname(filesys, preen);
	if (debug && preen)
		pwarn("starting\n");
	switch (setup(filesys)) {
	case 0:
		if (preen)
			pfatal("CAN'T CHECK FILESYSTEM.");
		/* FALLTHROUGH */
	case -1:
		if (fsreadfd != -1) {
			(void)close(fsreadfd);
			fsreadfd = -1;
		}
		if (fswritefd != -1) {
			(void)close(fswritefd);
			fswritefd = -1;
		}
		return (0);
	}
	info_filesys = filesys;

	/*
	 * Cleared if any questions answered no. Used to decide if
	 * the superblock should be marked clean.
	 */
	resolved = 1;

	/*
	 * 1: scan inodes tallying blocks used
	 */
	if (preen == 0) {
		printf("** Last Mounted on %s\n", sblock.fs_fsmnt);
		if (hotroot())
			printf("** Root filesystem\n");
		printf("** Phase 1 - Check Blocks and Sizes\n");
	}
	pass1();

	/*
	 * 1b: locate first references to duplicates, if any
	 */
	if (duplist) {
		if (preen || usedsoftdep)
			pfatal("INTERNAL ERROR: dups with -p");
		printf("** Phase 1b - Rescan For More DUPS\n");
		pass1b();
	}

	/*
	 * 2: traverse directories from root to mark all connected directories
	 */
	if (preen == 0)
		printf("** Phase 2 - Check Pathnames\n");
	pass2();

	/*
	 * 3: scan inodes looking for disconnected directories
	 */
	if (preen == 0)
		printf("** Phase 3 - Check Connectivity\n");
	pass3();

	/*
	 * 4: scan inodes looking for disconnected files; check reference counts
	 */
	if (preen == 0)
		printf("** Phase 4 - Check Reference Counts\n");
	pass4();

	/*
	 * 5: check and repair resource counts in cylinder groups
	 */
	if (preen == 0)
		printf("** Phase 5 - Check Cyl groups\n");
	pass5();

	/*
	 * print out summary statistics
	 */
	n_ffree = sblock.fs_cstotal.cs_nffree;
	n_bfree = sblock.fs_cstotal.cs_nbfree;
	pwarn("%d files, %d used, %d free ",
	    n_files, n_blks, n_ffree + sblock.fs_frag * n_bfree);
	printf("(%d frags, %d blocks, %d.%d%% fragmentation)\n",
	    n_ffree, n_bfree, (n_ffree * 100) / sblock.fs_dsize,
	    ((n_ffree * 1000 + sblock.fs_dsize / 2) / sblock.fs_dsize) % 10);
	if (debug &&
	    (n_files -= maxino - ROOTINO - sblock.fs_cstotal.cs_nifree))
		printf("%d files missing\n", n_files);
	if (debug) {
		n_blks += sblock.fs_ncg *
			(cgdmin(&sblock, 0) - cgsblock(&sblock, 0));
		n_blks += cgsblock(&sblock, 0) - cgbase(&sblock, 0);
		n_blks += howmany(sblock.fs_cssize, sblock.fs_fsize);
		if (n_blks -= maxfsblock - (n_ffree + sblock.fs_frag * n_bfree))
			printf("%d blocks missing\n", n_blks);
		if (duplist != NULL) {
			printf("The following duplicate blocks remain:");
			for (dp = duplist; dp; dp = dp->next)
				printf(" %d,", dp->dup);
			printf("\n");
		}
		if (zlnhead != NULL) {
			printf("The following zero link count inodes remain:");
			for (zlnp = zlnhead; zlnp; zlnp = zlnp->next)
				printf(" %u,", zlnp->zlncnt);
			printf("\n");
		}
	}
	zlnhead = NULL;
	duplist = NULL;
	muldup = NULL;
	inocleanup();
	if (fsmodified) {
		sblock.fs_time = time(NULL);
		sbdirty();
	}
	if (cvtlevel && sblk.b_dirty) {
		/*
		 * Write out the duplicate super blocks
		 */
		for (cylno = 0; cylno < sblock.fs_ncg; cylno++)
			bwrite(fswritefd, (char *)&sblock,
			    fsbtodb(&sblock, cgsblock(&sblock, cylno)), SBSIZE);
	}
	if (rerun)
		resolved = 0;
	ckfini(resolved); /* Don't mark fs clean if fsck needs to be re-run */
	free(blockmap);
	blockmap = NULL;
	free(statemap);
	statemap = NULL;
	free(typemap);
	typemap = NULL;
	free(lncntp);
	lncntp = NULL;
	free(sblock.fs_csp);
	free(sblk.b_un.b_buf);
	free(asblk.b_un.b_buf);

	if (!fsmodified)
		return (0);
	if (!preen)
		printf("\n***** FILESYSTEM WAS MODIFIED *****\n");
	if (rerun || !resolved)
		printf("\n***** PLEASE RERUN FSCK *****\n");
	if (hotroot()) {
		struct statfs stfs_buf;
		/*
		 * We modified the root.  Do a mount update on
		 * it, unless it is read-write, so we can continue.
		 */
		if (statfs("/", &stfs_buf) == 0) {
			long flags = stfs_buf.f_flags;
			struct ufs_args args;
			int ret;

			if (flags & MNT_RDONLY) {
				args.fspec = 0;
				args.export_info.ex_flags = 0;
				args.export_info.ex_root = 0;
				flags |= MNT_UPDATE | MNT_RELOAD;
				ret = mount(MOUNT_FFS, "/", flags, &args);
				if (ret == 0)
					return(0);
			}
		}
		if (!preen)
			printf("\n***** REBOOT NOW *****\n");
		sync();
		return (4);
	}
	return (0);
}
@


1.4
log
@merge import of new fsck_* tools
@
text
@d52 1
a52 1
__RCSID("$MirOS$");
d186 1
a186 1
			pfatal("CAN'T CHECK FILE SYSTEM.");
d213 1
a213 1
			printf("** Root file system\n");
d323 1
a323 1
		printf("\n***** FILE SYSTEM WAS MODIFIED *****\n");
@


1.3
log
@(tentative) merge, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.26 2005/02/03 05:03:50 jaredy Exp $	*/
a32 14
#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1980, 1986, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)main.c	8.2 (Berkeley) 1/23/94";
#else
static const char rcsid[] = "$OpenBSD: main.c,v 1.26 2005/02/03 05:03:50 jaredy Exp $";
#endif
#endif /* not lint */

d49 5
d71 1
a71 1
	while ((ch = getopt(argc, argv, "dfpnNyYb:c:l:m:")) != -1) {
d187 1
d189 8
d312 2
d316 4
@


1.2
log
@merge src/sbin
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.25 2003/06/02 20:06:15 millert Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: main.c,v 1.25 2003/06/02 20:06:15 millert Exp $";
d125 2
a126 1
			errexit("usage: %s -p [-f] [-m mode]\n       %s [-f] [-b block#] [-c level] [-y] [-n] [-m mode] [filesystem] ...\n", __progname, __progname);
@


1.1
log
@Initial revision
@
text
@d293 1
a293 1
		(void)time(&sblock.fs_time);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@improve my Frankenstein OS (*wink* you know who you are) further
sans wchar_t of course

this is the essence of reading >1200 commit messages which suck
due to not having the new format of ours...
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.26 2005/02/03 05:03:50 jaredy Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: main.c,v 1.26 2005/02/03 05:03:50 jaredy Exp $";
d125 1
a125 2
			errexit("usage: %s [-fnpy] [-b block#] [-c level] "
			    "[-m mode] filesystem ...\n", __progname);
@


1.1.1.3
log
@import openbsd's fixes for fsck stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.29 2007/02/09 19:52:32 otto Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: main.c,v 1.29 2007/02/09 19:52:32 otto Exp $";
d80 1
a80 1
	while ((ch = getopt(argc, argv, "dfpnNyYb:c:m:")) != -1) {
a195 1
		/* FALLTHROUGH */
a196 8
		if (fsreadfd != -1) {
			(void)close(fsreadfd);
			fsreadfd = -1;
		}
		if (fswritefd != -1) {
			(void)close(fswritefd);
			fswritefd = -1;
		}
a311 2
	free(typemap);
	typemap = NULL;
a313 4
	free(sblock.fs_csp);
	free(sblk.b_un.b_buf);
	free(asblk.b_un.b_buf);

@


