head	1.5;
access;
symbols
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	OPENBSD_4_0:1.1.1.3
	MIRBSD_9_BASE:1.3
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200507211800:1.1.1.2
	cvs-200504302130:1.1.1.1
	cvs-200504291700:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.10.17.16.44.47;	author tg;	state Exp;
branches;
next	1.4;
commitid	100507EE08756B39B50;

1.4
date	2006.09.20.20.03.30;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045119E9F677AC322;

1.3
date	2005.11.23.16.43.53;	author tg;	state Exp;
branches;
next	1.2;
commitid	560c43849c55498d;

1.2
date	2005.03.06.19.49.54;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.26.30;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.26.30;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.07.21.20.56.58;	author tg;	state Exp;
branches;
next	1.1.1.3;
commitid	560042e0092f571e;

1.1.1.3
date	2006.09.20.19.06.47;	author tg;	state Exp;
branches;
next	;
commitid	10045119150397FC669;


desc
@@


1.5
log
@raise an arbitrary limit, might edit 1 TB discs now
also some __CRAZY=Yes
@
text
@/*	$OpenBSD: fdisk.c,v 1.43 2006/07/27 04:53:27 ray Exp $	*/

/*
 * Copyright (c) 1997 Tobias Weingartner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <paths.h>
#include <sys/types.h>
#include <sys/fcntl.h>
#include <sys/disklabel.h>
#include "disk.h"
#include "user.h"

#define _PATH_MBR _PATH_BOOTDIR "mbrmgr"
static unsigned char builtin_mbr[] = {
#include "mbrcode.h"
};

__RCSID("$MirOS: src/sbin/fdisk/fdisk.c,v 1.4 2006/09/20 20:03:30 tg Exp $");

static __dead void
usage(void)
{
	extern char * __progname;

	fprintf(stderr, "usage: %s "
	    "[-ieu] [-c cylinders -h heads -s sectors] [-f mbrfile] device\n"
	    "\t-i: initialise disk with virgin MBR\n"
	    "\t-u: update MBR code, preserve partition table\n"
	    "\t-e: edit MBRs on disk interactively\n"
	    "\t-f: specify non-standard MBR template\n"
	    "\t-chs: specify disk geometry\n"
	    "`disk' may be of the forms: sd0 or /dev/rsd0c.\n",
	    __progname);
	exit(1);
}


int
main(int argc, char *argv[])
{
	int ch, fd;
	int i_flag = 0, m_flag = 0, u_flag = 0;
	int c_arg = 0, h_arg = 0, s_arg = 0;
	disk_t disk;
	DISK_metrics *usermetrics;
#if defined(__amd64__) || defined(__i386__) || defined (__powerpc__)
	const char *mbrfile = _PATH_MBR;
#else
	const char *mbrfile = NULL;
#endif
	mbr_t mbr;
	char mbr_buf[DEV_BSIZE];

	while ((ch = getopt(argc, argv, "ieuf:c:h:s:")) != -1) {
		const char *errstr;

		switch(ch) {
		case 'i':
			i_flag = 1;
			break;
		case 'u':
			u_flag = 1;
			break;
		case 'e':
			m_flag = 1;
			break;
		case 'f':
			mbrfile = optarg;
			break;
		case 'c':
			c_arg = strtonum(optarg, 1, 2097151, &errstr);
			if (errstr)
				errx(1, "Cylinder argument %s [1..2097151].",
				    errstr);
			break;
		case 'h':
			h_arg = strtonum(optarg, 1, 256, &errstr);
			if (errstr)
				errx(1, "Head argument %s [1..256].", errstr);
			break;
		case 's':
			s_arg = strtonum(optarg, 1, 63, &errstr);
			if (errstr)
				errx(1, "Sector argument %s [1..63].", errstr);
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	/* Argument checking */
	if (argc != 1)
		usage();
	else
		disk.name = argv[0];

	/* Put in supplied geometry if there */
	if (c_arg | h_arg | s_arg) {
		usermetrics = malloc(sizeof(DISK_metrics));
		if (usermetrics != NULL) {
			if (c_arg && h_arg && s_arg) {
				usermetrics->cylinders = c_arg;
				usermetrics->heads = h_arg;
				usermetrics->sectors = s_arg;
				usermetrics->size = c_arg * h_arg * s_arg;
			} else
				errx(1, "Please specify a full geometry with [-chs].");
		}
	} else
		usermetrics = NULL;

	/* Get the geometry */
	disk.real = NULL;
	if (DISK_getmetrics(&disk, usermetrics))
		errx(1, "Can't get disk geometry, please use [-chs] to specify.");


	/* Print out current MBRs on disk */
	if ((i_flag + u_flag + m_flag) == 0)
		exit(USER_print_disk(&disk));

	/* Parse mbr template, to pass on later */
	if (mbrfile != NULL && (fd = open(mbrfile, O_RDONLY)) == -1) {
		warn("%s", mbrfile);
		warnx("using builtin MBR");
		mbrfile = NULL;
	}
	if (mbrfile == NULL) {
		memcpy(mbr_buf, builtin_mbr, sizeof(mbr_buf));
	} else {
		MBR_read(fd, 0, mbr_buf);
		close(fd);
	}
	MBR_parse(&disk, mbr_buf, 0, 0, &mbr);

	/* Now do what we are supposed to */
	if (i_flag || u_flag)
		if (USER_init(&disk, &mbr, u_flag) == -1)
			err(1, "error initializing MBR");

	if (m_flag)
		USER_modify(&disk, &mbr, 0, 0);

	return (0);
}
@


1.4
log
@merge fdisk, dhcp stuff
fix fdisk units
@
text
@a0 1
/**	$MirOS: src/sbin/fdisk/fdisk.c,v 1.3 2005/11/23 16:43:53 tg Exp $ */
d45 1
a45 1
__RCSID("$MirOS: src/sbin/fdisk/fdisk.c,v 1.3 2005/11/23 16:43:53 tg Exp $");
d47 1
a47 1
static void
d74 1
a74 1
	char *mbrfile = _PATH_MBR;
d76 1
a76 1
	char *mbrfile = NULL;
d98 1
a98 1
			c_arg = strtonum(optarg, 1, 262144, &errstr);
d100 1
a100 1
				errx(1, "Cylinder argument %s [1..262144].",
@


1.3
log
@fastmerge
@
text
@d1 2
a2 2
/**	$MirOS: src/sbin/fdisk/fdisk.c,v 1.2 2005/03/06 19:49:54 tg Exp $ */
/*	$OpenBSD: fdisk.c,v 1.40 2005/05/01 20:53:38 jmc Exp $	*/
d46 1
a46 1
__RCSID("$MirOS: src/sbin/fdisk/fdisk.c,v 1.2 2005/03/06 19:49:54 tg Exp $");
d74 1
d76 3
d83 2
d99 4
a102 4
			c_arg = atoi(optarg);
			if (c_arg < 1 || c_arg > 262144)
				errx(1, "Cylinder argument out of range "
				    "[1..262144].");
d105 3
a107 4
			h_arg = atoi(optarg);
			if (h_arg < 1 || h_arg > 256)
				errx(1, "Head argument out of range "
				    "[1..256].");
d110 3
a112 4
			s_arg = atoi(optarg);
			if (s_arg < 1 || s_arg > 63)
				errx(1, "Sector argument out of range "
				    "[1..63].");
d153 1
a153 1
	if ((fd = open(mbrfile, O_RDONLY)) == -1) {
d156 3
d168 2
a169 1
		USER_init(&disk, &mbr, u_flag);
@


1.2
log
@merge src/sbin
@
text
@d1 2
a2 2
/**	$MirOS$ */
/*	$OpenBSD: fdisk.c,v 1.39 2004/08/03 09:22:03 otto Exp $	*/
d46 1
a46 1
__RCSID("$MirOS$");
d54 1
a54 1
	    "[-ieu] [-f mbrboot] [-c cyl -h head -s sect] disk\n"
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
#define _PATH_MBR _PATH_BOOTDIR "mbr"
d46 2
d55 1
a55 1
	    "\t-i: initialize disk with virgin MBR\n"
a167 1

@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@Import almost everything (no ancontrol, ifconfig, pfctl, wicontrol)
of (the undeleted parts of) OpenBSD-current's userland of about 3 hours ago.
Warning: this introduces major breakage!
@
text
@d1 1
a1 1
/*	$OpenBSD: fdisk.c,v 1.40 2005/05/01 20:53:38 jmc Exp $	*/
d51 1
a51 1
	    "[-ieu] [-c cylinders -h heads -s sectors] [-f mbrfile] device\n"
@


1.1.1.3
log
@import a few security-wise relevant changes right now
@
text
@d1 1
a1 1
/*	$OpenBSD: fdisk.c,v 1.43 2006/07/27 04:53:27 ray Exp $	*/
a70 1
#if defined(__amd64__) || defined(__i386__) || defined (__powerpc__)
a71 3
#else
	char *mbrfile = NULL;
#endif
a75 2
		const char *errstr;

d90 4
a93 4
			c_arg = strtonum(optarg, 1, 262144, &errstr);
			if (errstr)
				errx(1, "Cylinder argument %s [1..262144].",
				    errstr);
d96 4
a99 3
			h_arg = strtonum(optarg, 1, 256, &errstr);
			if (errstr)
				errx(1, "Head argument %s [1..256].", errstr);
d102 4
a105 3
			s_arg = strtonum(optarg, 1, 63, &errstr);
			if (errstr)
				errx(1, "Sector argument %s [1..63].", errstr);
d146 1
a146 1
	if (mbrfile != NULL && (fd = open(mbrfile, O_RDONLY)) == -1) {
a148 3
		mbrfile == NULL;
	}
	if (mbrfile == NULL) {
d158 1
a158 2
		if (USER_init(&disk, &mbr, u_flag) == -1)
			err(1, "error initializing MBR");
@


