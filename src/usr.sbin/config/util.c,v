head	1.5;
access;
symbols
	MIRBSD_10:1.3.0.2
	MIRBSD_10_BASE:1.3
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.10.31.20.07.18;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005272B7081B0E5655;

1.4
date	2010.07.25.16.31.08;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004C4C66B4083A50C4;

1.3
date	2007.02.19.03.24.55;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045D918935A99757A;

1.2
date	2007.02.19.03.03.30;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045D913776373EBF0;

1.1
date	2005.02.05.17.30.24;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.30.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/*	$OpenBSD: util.c,v 1.12 2003/06/28 04:55:07 deraadt Exp $	*/
/*	$NetBSD: util.c,v 1.5 1996/08/31 20:58:29 mycroft Exp $	*/

/*
 * Copyright © 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratories.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)util.c	8.1 (Berkeley) 6/6/93
 */

#include <sys/types.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "config.h"

__RCSID("$MirOS$");

static void nomem(void) __dead;
#ifndef IN_MODLOAD
static void vxerror(const char *, int, const char *, va_list)
    __attribute__((__format__(__printf__, 3, 0)));
#endif

/*
 * Malloc, with abort on error.
 */
void *
emalloc(size_t size)
{
	void *p;

	if ((p = malloc(size)) == NULL)
		nomem();
	memset(p, 0, size);
	return (p);
}

#ifndef IN_MODLOAD
/*
 * Realloc, with abort on error.
 */
void *
erealloc(void *p, size_t size)
{

	if ((p = realloc(p, size)) == NULL)
		nomem();
	return (p);
}
#endif

static void
nomem(void)
{
	(void)fprintf(stderr, "config: out of memory\n");
	exit(1);
}

#ifndef IN_MODLOAD
/*
 * Prepend the source path to a file name.
 */
char *
sourcepath(const char *file)
{
	char *cp;
	int len = strlen(srcdir) + 1 + strlen(file) + 1;

	cp = emalloc(len);
	(void)snprintf(cp, len, "%s/%s", srcdir, file);
	return (cp);
}

static struct nvlist *nvhead;

struct nvlist *
newnv(const char *name, const char *str, void *ptr, int i, struct nvlist *next)
{
	struct nvlist *nv;

	if ((nv = nvhead) == NULL)
		nv = emalloc(sizeof(*nv));
	else
		nvhead = nv->nv_next;
	nv->nv_next = next;
	nv->nv_name = name;
	if (ptr == NULL)
		nv->nv_str = str;
	else {
		if (str != NULL)
			panic("newnv");
		nv->nv_ptr = ptr;
	}
	nv->nv_int = i;
	return (nv);
}

/*
 * Free an nvlist structure (just one).
 */
void
nvfree(struct nvlist *nv)
{

	nv->nv_next = nvhead;
	nvhead = nv;
}

/*
 * Free an nvlist (the whole list).
 */
void
nvfreel(struct nvlist *nv)
{
	struct nvlist *next;

	for (; nv != NULL; nv = next) {
		next = nv->nv_next;
		nv->nv_next = nvhead;
		nvhead = nv;
	}
}

/*
 * External (config file) error.  Complain, using current file
 * and line number.
 */
void
error(const char *fmt, ...)
{
	va_list ap;
	extern const char *yyfile;

	va_start(ap, fmt);
	vxerror(yyfile, currentline(), fmt, ap);
	va_end(ap);
}

/*
 * Delayed config file error (i.e., something was wrong but we could not
 * find out about it until later).
 */
void
xerror(const char *file, int line, const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vxerror(file, line, fmt, ap);
	va_end(ap);
}

/*
 * Internal form of error() and xerror().
 */
static void
vxerror(const char *file, int line, const char *fmt, va_list ap)
{

	(void)fprintf(stderr, "%s:%d: ", file, line);
	(void)vfprintf(stderr, fmt, ap);
	(void)putc('\n', stderr);
	errors++;
}

/*
 * Internal error, abort.
 */
void
panic(const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	(void)fprintf(stderr, "config: panic: ");
	(void)vfprintf(stderr, fmt, ap);
	(void)putc('\n', stderr);
	va_end(ap);
	exit(2);
}
#endif
@


1.4
log
@let modload(8) check the version of the running kernel with the version
of the kernel image and error out if they fail

something like “which kernel has been loaded” passed by the bootloader
would be better, of course, but this is failsafe unless someone manually
manipulates the version strings willingly
@
text
@d5 2
d54 2
d59 1
a59 1
    __attribute__((format (printf, 3, 0)));
@


1.3
log
@improve this warnings horror a little more
XXX nlist API sucks
@
text
@d53 1
d56 1
d72 1
d84 1
a88 1

d93 1
d215 1
@


1.2
log
@* begin __CRAZY cleanup of config(8), not yet completed
  due to time constraints
* store the kernel config as section .config.gz, gzip'd
@
text
@d116 1
a116 1
	nv->nv_name = (char *)name;
@


1.1
log
@Initial revision
@
text
@d52 3
a54 2
static void nomem(void);
static void vxerror(const char *, int, const char *, va_list);
d199 1
a199 1
__dead void
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
