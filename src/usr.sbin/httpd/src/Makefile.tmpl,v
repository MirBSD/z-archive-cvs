head	1.7;
access;
symbols
	cvs-200803192230:1.1.1.2
	MIRBSD_10:1.7.0.2
	MIRBSD_10_BASE:1.7
	OPENBSD_4_0:1.1.1.2
	MIRBSD_9_BASE:1.4
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200512032330:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200504170300:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2007.02.08.20.32.39;	author tg;	state Exp;
branches;
next	1.6;
commitid	10045CB88F700758C7E;

1.6
date	2007.02.08.02.56.03;	author tg;	state Exp;
branches;
next	1.5;
commitid	10045CA915426B5856A;

1.5
date	2007.02.08.02.44.30;	author tg;	state Exp;
branches;
next	1.4;
commitid	10045CA8E8C4994C56F;

1.4
date	2006.04.03.20.54.40;	author tg;	state Exp;
branches;
next	1.3;
commitid	10044318B8807B153A4;

1.3
date	2005.10.21.11.09.47;	author tg;	state Exp;
branches;
next	1.2;
commitid	1dab4358cc50c639;

1.2
date	2005.03.13.19.16.41;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.30.43;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.30.43;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.09.20.23.16.22;	author tg;	state Exp;
branches;
next	;
commitid	1004511CBCF7173CE64;


desc
@@


1.7
log
@missing recursion depth & targets
@
text
@# $MirOS: src/usr.sbin/httpd/src/Makefile.tmpl,v 1.6 2007/02/08 02:56:03 tg Exp $

CFLAGS=$(OPTIM) $(CFLAGS1) $(EXTRA_CFLAGS)
LIBS=$(EXTRA_LIBS) $(LIBS1)
INCLUDES=$(INCLUDES1) $(INCLUDES0) $(EXTRA_INCLUDES)
LDFLAGS=$(LDFLAGS1) $(EXTRA_LDFLAGS)

ROBJS= \
  $(MODULES) \
  main/libmain.a \
  $(OSDIR)/libos.a \
  ap/libap.a
OBJS= modules.o ${ROBJS}
RECURSE= ${ROBJS}
.for _i in experimental extra keynote proxy ssl standard #example
.  if !${RECURSE:M*/${_i}/*}
RECURSE+= modules/${_i}/dummy
.  endif
.endfor

TYPE=
ALGO=
CRT=
KEY=
VIEW=

.c.o:
	$(CC) -c $(INCLUDES) $(CFLAGS) $<

# Used to generate import library for OS/2
.SUFFIXES: .def
.def.a:
	emximp -o $@@ $<

all: @@@@Configuration@@@@ $(TARGET)

@@@@Configuration@@@@: Configuration.tmpl
	@@echo "++ File '@@@@Configuration@@@@' older than 'Configuration.tmpl',"
	@@echo "++ or still doesn't exist. Please consider copying 'Configuration.tmpl'"
	@@echo "++ to '@@@@Configuration@@@@', editing and rerunning 'Configure'."
	@@echo "++ If not, you will at least have to touch '@@@@Configuration@@@@'."
	@@false

.if ${SUBTARGET} == target_static
${TARGET}: ${EXTRA_DEPS} ${RECURSE} modules.o
	$(CC) $(CFLAGS) $(LDFLAGS) $(LDFLAGS_SHLIB_EXPORT) \
	      -o $(TARGET) $(OBJS) $(REGLIB) $(LIBS)
.else
$(TARGET): $(EXTRA_DEPS) $(SUBTARGET)
.endif

target_compile_only: ${RECURSE} modules.o

target_shared: $(SHCORE_IMPLIB) $(SHARED_CORE_EP) lib$(TARGET).$(SHLIB_SUFFIX_NAME)
	$(CC) $(INCLUDES) $(CFLAGS) $(LDFLAGS) $(LDFLAGS_SHLIB_EXPORT) \
	      -o $(TARGET) -DSHARED_CORE_BOOTSTRAP main/http_main.c \
	      ap/libap.a $(LIBS) $(SHCORE_IMPLIB)

lib$(TARGET).ep: lib$(TARGET).$(SHLIB_SUFFIX_NAME)
	$(CC) $(INCLUDES) $(CFLAGS) $(LDFLAGS) $(LDFLAGS_SHLIB_EXPORT) \
	      -o lib$(TARGET).ep -DSHARED_CORE_TIESTATIC main/http_main.c \
		  -L. -l$(TARGET) $(LIBS)

lib$(TARGET).$(SHLIB_SUFFIX_NAME): ${RECURSE} modules.o
	$(LD_SHLIB) $(LDFLAGS_SHLIB) -o lib$(TARGET).$(SHLIB_SUFFIX_NAME) $(OBJS) $(REGLIB) $(LD_SHCORE_DEF) $(LD_SHCORE_LIBS)
	@@if [ ".$(SHLIB_SUFFIX_LIST)" != . ]; then \
		rm -f lib$(TARGET).$(SHLIB_SUFFIX_NAME).*; \
		for suffix in $(SHLIB_SUFFIX_LIST) ""; do \
			[ ".$$suffix" = . ] && continue; \
		    echo "ln lib$(TARGET).$(SHLIB_SUFFIX_NAME) lib$(TARGET).$(SHLIB_SUFFIX_NAME).$$suffix"; \
		    ln lib$(TARGET).$(SHLIB_SUFFIX_NAME) lib$(TARGET).$(SHLIB_SUFFIX_NAME).$$suffix; \
		done; \
	fi

certificate:
	@@./support/mkcert.sh \
		"$(MAKE)" "$(MFLAGS) $(MFLAGS_STATIC)" \
		"$(SSL_PROGRAM)" ./support \
		"$(TYPE)" "$(ALGO)" "$(CRT)" "$(KEY)" "$(VIEW)"
	@@cd ../conf/ssl.crt; $(MAKE) $(MFLAGS_STATIC) SSL_PROGRAM=$(SSL_PROGRAM) >/dev/null 2>&1

${RECURSE}::
	@@for i in ${.TARGET:H}; do \
		echo "===> $(SDP)$$i"; \
		case ".$(OS)" in \
		  .OS390 | .TPF) ( cd $$i && $(MAKE) SDP='$(SDP)' OPTIM='$(OPTIM)') || exit 1;; \
		              *) ( cd $$i && $(MAKE) $(MFLAGS_STATIC) SDP='$(SDP)' CC='$(CC)' AUX_CFLAGS='$(CFLAGS)' RANLIB='$(RANLIB)' OPTIM='$(OPTIM)' all dummy) || exit 1;; \
		esac; \
		echo "<=== $(SDP)$$i"; \
	done

support: support-dir

support-dir:
	@@echo "===> $(SDP)support"; \
	cd support; $(MAKE) $(MFLAGS_STATIC) SDP='$(SDP)' CC='$(CC)' AUX_CFLAGS='$(CFLAGS)' RANLIB='$(RANLIB)' OPTIM='$(OPTIM)' || exit 1; \
	echo "<=== $(SDP)support"

clean:
	-rm -f $(TARGET) lib$(TARGET).* *.o
	@@for i in $(SUBDIRS); do \
		echo "===> $(SDP)$$i"; \
		( cd $$i && $(MAKE) $(MFLAGS_STATIC) SDP='$(SDP)' OPTIM='$(OPTIM)' $@@ ) || exit 1; \
		echo "<=== $(SDP)$$i"; \
	done

distclean:
	-rm -f $(TARGET) lib$(TARGET).* *.o
	@@for i in $(SUBDIRS); do \
		echo "===> $(SDP)$$i"; \
		( cd $$i && $(MAKE) $(MFLAGS_STATIC) SDP='$(SDP)' $@@ ) || exit 1; \
		echo "<=== $(SDP)$$i"; \
	done
	-rm -f include/ap_config_auto.h
	-rm -f modules.c
	-rm -f modules/Makefile
	-rm -f regex/Makefile
	-rm -f Makefile.config
	-rm -f Makefile

install:
	@@echo "++ Sorry, no installation procedure available at this level."
	@@echo "++ Go to the parent directory for an 'install' target."

# We really don't expect end users to use this rule.  It works only with
# gcc, and rebuilds Makefile.tmpl.  You have to re-run Configure after
# using it.
depend:
	cp Makefile.tmpl Makefile.tmpl.bak \
	    && sed -ne '1,/^# DO NOT REMOVE/p' Makefile.tmpl > Makefile.new \
	    && gcc -MM $(INCLUDES) $(CFLAGS) *.c >> Makefile.new \
	    && sed -e '1,$$s: $(INCDIR)/: $$(INCDIR)/:g' \
	           -e '1,$$s: $(OSDIR)/: $$(OSDIR)/:g' Makefile.new \
		> Makefile.tmpl \
	    && rm Makefile.new
	for i in $(SUBDIRS); do \
	    ( cd $$i && $(MAKE) CC='$(CC)' AUX_CFLAGS='$(CFLAGS)' RANLIB='$(RANLIB)' OPTIM='$(OPTIM)' depend ) || exit 1; \
	done

# DO NOT REMOVE
modules.o: modules.c include/httpd.h include/ap_config.h \
 include/ap_mmn.h include/ap_config_auto.h $(OSDIR)/os.h \
 include/ap_ctype.h include/ap_alloc.h include/buff.h \
 include/ap.h include/util_uri.h include/http_config.h Makefile
@


1.6
log
@remove superfluous files
@
text
@d1 1
a1 1
# $MirOS: src/usr.sbin/httpd/src/Makefile.tmpl,v 1.5 2007/02/08 02:44:30 tg Exp $
d14 6
d45 1
a45 1
${TARGET}: ${EXTRA_DEPS} ${ROBJS} modules.o
d52 1
a52 1
target_compile_only: ${ROBJS} modules.o
d64 1
a64 1
lib$(TARGET).$(SHLIB_SUFFIX_NAME): ${ROBJS} modules.o
d82 1
a82 1
${ROBJS}::
d87 1
a87 1
		              *) ( cd $$i && $(MAKE) $(MFLAGS_STATIC) SDP='$(SDP)' CC='$(CC)' AUX_CFLAGS='$(CFLAGS)' RANLIB='$(RANLIB)' OPTIM='$(OPTIM)') || exit 1;; \
@


1.5
log
@simplify dependency hell for httpd, leading to it not being
always rebuilt if not needed
@
text
@d1 1
a1 1
# $MirOS$
d39 1
a39 1
${TARGET}: ${EXTRA_DEPS} ${ROBJS} modules.o buildmark.o
d41 1
a41 1
	      -o $(TARGET) buildmark.o $(OBJS) $(REGLIB) $(LIBS)
d46 1
a46 1
target_compile_only: ${ROBJS} modules.o buildmark.o
d58 2
a59 2
lib$(TARGET).$(SHLIB_SUFFIX_NAME): ${ROBJS} modules.o buildmark.o
	$(LD_SHLIB) $(LDFLAGS_SHLIB) -o lib$(TARGET).$(SHLIB_SUFFIX_NAME) buildmark.o $(OBJS) $(REGLIB) $(LD_SHCORE_DEF) $(LD_SHCORE_LIBS)
a133 2
#Dependencies

a134 4
buildmark.o: buildmark.c include/ap_config.h include/ap_mmn.h \
 include/ap_config_auto.h $(OSDIR)/os.h include/ap_ctype.h \
 include/httpd.h include/ap_alloc.h include/buff.h \
 include/ap.h include/util_uri.h Makefile
@


1.4
log
@large source cleanup from Daniel Ouellet, thanks a bunch!

md4 on binaries except apaci and *.a (ar(1) times, probably) unchanged
@
text
@d1 1
d8 1
a8 2
OBJS= \
  modules.o \
d13 1
d38 2
a39 4
$(TARGET): $(EXTRA_DEPS) $(SUBTARGET)

target_static: subdirs modules.o
	$(CC) -c $(INCLUDES) $(CFLAGS) buildmark.c
d42 3
d46 1
a46 2
target_compile_only: subdirs modules.o
	$(CC) -c $(INCLUDES) $(CFLAGS) buildmark.c
d58 1
a58 2
lib$(TARGET).$(SHLIB_SUFFIX_NAME): subdirs modules.o
	$(CC) -c $(INCLUDES) $(CFLAGS) buildmark.c
d76 2
a77 2
subdirs:
	@@for i in $(SUBDIRS); do \
a135 2
$(OBJS): Makefile subdirs

d140 1
a140 1
 include/ap.h include/util_uri.h
d144 1
a144 1
 include/ap.h include/util_uri.h include/http_config.h
@


1.3
log
@* by request of bsiegert@@
* due to a conflict found by some obsd guy
remove MirOS httpd's ability to link against libexpat
so any XML parser can be loaded as module
@
text
@d141 1
a141 1
 include/hsregex.h include/httpd.h include/ap_alloc.h include/buff.h \
d145 1
a145 1
 include/ap_ctype.h include/hsregex.h include/ap_alloc.h include/buff.h \
@


1.2
log
@fast merge src/usr.sbin
@
text
@d42 1
a42 1
	      -o $(TARGET) buildmark.o $(OBJS) $(REGLIB) $(EXPATLIB) $(LIBS)
d59 1
a59 1
	$(LD_SHLIB) $(LDFLAGS_SHLIB) -o lib$(TARGET).$(SHLIB_SUFFIX_NAME) buildmark.o $(OBJS) $(REGLIB) $(EXPATLIB) $(LD_SHCORE_DEF) $(LD_SHCORE_LIBS)
@


1.1
log
@Initial revision
@
text
@d69 1
a69 1
certificate:   
a111 1
	-rm -f lib/Makefile
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@


1.1.1.2
log
@more httpd cleanup by the other bsd
@
text
@d142 1
a142 1
 include/httpd.h include/ap_alloc.h include/buff.h \
d146 1
a146 1
 include/ap_ctype.h include/ap_alloc.h include/buff.h \
@

