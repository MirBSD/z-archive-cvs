head	1.6;
access;
symbols
	cvs-200803192230:1.1.1.1
	MIRBSD_10:1.1.1.1.0.4
	MIRBSD_10_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1
	MIRBSD_9_BASE:1.1.1.1
	MIRBSD_8:1.1.1.1.0.2
	MIRBSD_8_BASE:1.1.1.1
	cvs-200512032330:1.1.1.1
	cvs-200507211800:1.1.1.1
	cvs-200504170300:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2019.12.09.11.29.57;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005DEE300E3D980988;

1.5
date	2015.06.05.13.51.44;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005571A9860C24FA48;

1.4
date	2015.06.05.13.49.46;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005571A9134AD92C26;

1.3
date	2015.06.05.13.26.13;	author tg;	state Exp;
branches;
next	1.2;
commitid	1005571A36B486F2429;

1.2
date	2014.03.29.00.23.25;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005336128D0D23B6E5;

1.1
date	2005.02.05.17.30.51;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.30.51;	author tg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@implement reading DH parameters from the certificate file

mostly from SVN changeset 1527295 from Apache 2.4 (trunk)
and what was already extant plus some retrofitting work
@
text
@#if 0
=pod
#endif
/*                      _             _
**  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
** | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
** | | | | | | (_) | (_| |   \__ \__ \ |  www.modssl.org
** |_| |_| |_|\___/ \__,_|___|___/___/_|  ftp.modssl.org
**                      |_____|
** ssl_engine_dh.c 
** Diffie-Hellman Built-in Temporary Parameters
*/

/* ====================================================================
 * Copyright (c) 1998-2003 Ralf S. Engelschall. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by
 *     Ralf S. Engelschall <rse@@engelschall.com> for use in the
 *     mod_ssl project (http://www.modssl.org/)."
 *
 * 4. The names "mod_ssl" must not be used to endorse or promote
 *    products derived from this software without prior written
 *    permission. For written permission, please contact
 *    rse@@engelschall.com.
 *
 * 5. Products derived from this software may not be called "mod_ssl"
 *    nor may "mod_ssl" appear in their names without prior
 *    written permission of Ralf S. Engelschall.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by
 *     Ralf S. Engelschall <rse@@engelschall.com> for use in the
 *     mod_ssl project (http://www.modssl.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY RALF S. ENGELSCHALL ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL RALF S. ENGELSCHALL OR
 * HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include "mod_ssl.h"

__RCSID("$MirOS: src/usr.sbin/httpd/src/modules/ssl/ssl_engine_dh.c,v 1.5 2015/06/05 13:51:44 tg Exp $");

/* ----BEGIN GENERATED SECTION-------- */

/*
** Diffie-Hellman-Parameters: (1024 bit)
**     prime:
**         00:d8:96:41:e9:c9:32:5c:9e:d5:a6:da:43:ee:9e:
**         83:06:43:84:1c:d6:b7:30:61:5c:4b:50:d5:50:ab:
**         d0:d4:79:1b:bf:e5:01:1a:fd:8d:d0:f0:70:4f:43:
**         64:22:19:50:0e:96:6a:52:a2:81:27:c8:eb:a0:f3:
**         54:5a:d6:a1:8b:83:c0:ee:27:7e:7c:d5:48:24:0b:
**         45:8f:3c:c4:3f:2b:fa:fb:7c:4a:ca:5d:fd:0d:13:
**         a1:29:17:8e:70:29:6c:70:6e:89:b3:2a:ae:d3:f7:
**         8a:b1:9e:45:da:74:a6:e5:66:8d:1f:07:21:84:02:
**         b9:c6:9e:f5:c8:c6:eb:4b:5b
**     generator: 2 (0x2)
*/

static const unsigned char dh1024_p[] = {
    0xD8, 0x96, 0x41, 0xE9, 0xC9, 0x32, 0x5C, 0x9E, 0xD5, 0xA6, 0xDA, 0x43,
    0xEE, 0x9E, 0x83, 0x06, 0x43, 0x84, 0x1C, 0xD6, 0xB7, 0x30, 0x61, 0x5C,
    0x4B, 0x50, 0xD5, 0x50, 0xAB, 0xD0, 0xD4, 0x79, 0x1B, 0xBF, 0xE5, 0x01,
    0x1A, 0xFD, 0x8D, 0xD0, 0xF0, 0x70, 0x4F, 0x43, 0x64, 0x22, 0x19, 0x50,
    0x0E, 0x96, 0x6A, 0x52, 0xA2, 0x81, 0x27, 0xC8, 0xEB, 0xA0, 0xF3, 0x54,
    0x5A, 0xD6, 0xA1, 0x8B, 0x83, 0xC0, 0xEE, 0x27, 0x7E, 0x7C, 0xD5, 0x48,
    0x24, 0x0B, 0x45, 0x8F, 0x3C, 0xC4, 0x3F, 0x2B, 0xFA, 0xFB, 0x7C, 0x4A,
    0xCA, 0x5D, 0xFD, 0x0D, 0x13, 0xA1, 0x29, 0x17, 0x8E, 0x70, 0x29, 0x6C,
    0x70, 0x6E, 0x89, 0xB3, 0x2A, 0xAE, 0xD3, 0xF7, 0x8A, 0xB1, 0x9E, 0x45,
    0xDA, 0x74, 0xA6, 0xE5, 0x66, 0x8D, 0x1F, 0x07, 0x21, 0x84, 0x02, 0xB9,
    0xC6, 0x9E, 0xF5, 0xC8, 0xC6, 0xEB, 0x4B, 0x5B,
};
static const unsigned char dh1024_g[] = {
    0x02,
};

static DH *get_dh1024(void)
{
    DH *dh;

    if ((dh = DH_new()) == NULL)
        return (NULL);
    dh->p = BN_bin2bn(dh1024_p, sizeof(dh1024_p), NULL);
    dh->g = BN_bin2bn(dh1024_g, sizeof(dh1024_g), NULL);
    if ((dh->p == NULL) || (dh->g == NULL))
        return (NULL);
    return (dh);
}
/* ----END GENERATED SECTION---------- */

DH *ssl_dh_GetTmpParam(void) {
	return (get_dh1024());
}

DH *ssl_dh_GetParamFromFile(const char *file)
{
    DH *dh = NULL;
    BIO *bio;

    if ((bio = BIO_new_file(file, "r")) == NULL)
        return NULL;
    dh = PEM_read_bio_DHparams(bio, NULL, NULL, NULL);
    BIO_free(bio);
    return (dh);
}

/*
=cut
##
##  Embedded Perl script for generating the temporary DH parameters
##

require 5.003;
use strict;

#   configuration
my $file  = $0;
my $begin = '----BEGIN GENERATED SECTION--------';
my $end   = '----END GENERATED SECTION----------';

#   read ourself and keep a backup
open(FP, "<$file") || die;
my $source = '';
$source .= $_ while (<FP>);
close(FP);
open(FP, ">$file.bak") || die;
print FP $source;
close(FP);

#   generate the DH parameters
print "1. Generate 1024 bit Diffie-Hellman parameters (p, g)\n";
my $rand = '';
foreach $file (qw(/var/log/messages /var/adm/messages 
                  /kernel /vmunix /vmlinuz /etc/hosts /etc/resolv.conf)) {
    if (-f $file) {
        $rand = $file     if ($rand eq '');
        $rand .= ":$file" if ($rand ne '');
    }
}
$rand = "-rand $rand" if ($rand ne '');
system("openssl gendh $rand -out dh1024.pem 1024");

#   generate DH param info 
my $dhinfo = '';
open(FP, "openssl dh -noout -text -in dh1024.pem |") || die;
$dhinfo .= $_ while (<FP>);
close(FP);
$dhinfo =~ s|^|** |mg;
$dhinfo = "\n\/\*\n$dhinfo\*\/\n\n";

#   generate C source from DH params
my $dhsource = '';
open(FP, "openssl dh -noout -C -in dh1024.pem | indent -npro -st -bad -nbs -ncdb -ci2 -ncsp -di0 -i4 -l80 -lc72 -nlp -nlpi -npsl -TBIO -TDH | expand |") || die;
$dhsource .= $_ while (<FP>);
close(FP);
$dhsource =~ s|(DH\s+\*get_dh)|static $1|sg;
$dhsource =~ s|(get_dh\d+)\(\)|$1(void)|sg;
$dhsource =~ s|static unsigned char|static const unsigned char|sg;

#   generate output
my $o = $dhinfo . $dhsource;

#   insert the generated code at the target location
$source =~ s|(\/\* $begin.+?\n).*\n(.*?\/\* $end)|$1$o$2|s;

#   and update the source on disk
print "Updating file `$file'\n";
open(FP, ">$file") || die;
print FP $source;
close(FP);

#   cleanup
unlink("dh1024.pem");

=pod
*/
@


1.5
log
@make it compile, validate
@
text
@d67 1
a67 1
__RCSID("$MirOS$");
d117 1
a117 1
DH *ssl_dh_GetTmpParam(int nKeyLen) {
d121 1
a121 1
DH *ssl_dh_GetParamFromFile(char *file)
@


1.4
log
@get ourselves a new 1024-bit DH parameter
@
text
@d117 2
a118 11
DH *ssl_dh_GetTmpParam(int nKeyLen)
{
    DH *dh;

    if (nKeyLen == 512)
        dh = get_dh512();
    else if (nKeyLen == 1024)
        dh = get_dh1024();
    else
        dh = get_dh1024();
    return dh;
@


1.3
log
@change embedded Perl script to only generate a 1024-bit embedded DH group
(we’re safe from LogJam with that commit, but I’ll backport the stuff to
load a DH group from file later)
@
text
@a71 8
** Diffie-Hellman-Parameters: (512 bit)
**     prime:
**         00:f8:7f:ba:c1:13:78:20:54:b3:29:6c:ac:b2:e3:
**         c2:cb:b3:b5:5b:0d:44:31:e4:8e:81:df:bd:43:6d:
**         b7:01:8f:8b:3f:89:f2:c5:cf:19:bb:1b:40:9c:02:
**         a9:59:c5:39:b5:4f:28:05:eb:67:47:8b:9b:ff:c5:
**         48:bc:e4:68:6b
**     generator: 2 (0x2)
d74 9
a82 9
**         00:c0:39:85:d1:74:35:70:cc:9a:cc:51:2a:ee:64:
**         9e:7f:46:50:52:ba:66:13:0d:2f:bb:1f:1e:6c:ba:
**         b6:ba:b5:11:93:ab:cc:94:a5:3c:a3:68:19:57:82:
**         95:46:7a:9e:2d:5a:60:47:1f:85:e3:f2:89:98:eb:
**         0d:79:ba:f4:b9:04:37:f2:66:5f:b8:69:22:5e:e2:
**         ed:b0:52:13:a3:e0:f7:3f:60:04:1a:bb:1e:25:b9:
**         94:ce:15:5e:d3:4a:68:b9:56:ee:b2:de:c5:4e:35:
**         4d:62:3c:8e:f5:cf:f3:7c:32:7a:c0:05:83:1d:d0:
**         8a:c7:13:85:84:d6:df:55:0b
a85 24
static const unsigned char dh512_p[] = {
    0xF8, 0x7F, 0xBA, 0xC1, 0x13, 0x78, 0x20, 0x54, 0xB3, 0x29, 0x6C, 0xAC,
    0xB2, 0xE3, 0xC2, 0xCB, 0xB3, 0xB5, 0x5B, 0x0D, 0x44, 0x31, 0xE4, 0x8E,
    0x81, 0xDF, 0xBD, 0x43, 0x6D, 0xB7, 0x01, 0x8F, 0x8B, 0x3F, 0x89, 0xF2,
    0xC5, 0xCF, 0x19, 0xBB, 0x1B, 0x40, 0x9C, 0x02, 0xA9, 0x59, 0xC5, 0x39,
    0xB5, 0x4F, 0x28, 0x05, 0xEB, 0x67, 0x47, 0x8B, 0x9B, 0xFF, 0xC5, 0x48,
    0xBC, 0xE4, 0x68, 0x6B,
};
static const unsigned char dh512_g[] = {
    0x02,
};

static DH *get_dh512(void)
{
    DH *dh;

    if ((dh = DH_new()) == NULL)
        return (NULL);
    dh->p = BN_bin2bn(dh512_p, sizeof(dh512_p), NULL);
    dh->g = BN_bin2bn(dh512_g, sizeof(dh512_g), NULL);
    if ((dh->p == NULL) || (dh->g == NULL))
        return (NULL);
    return (dh);
}
d87 11
a97 11
    0xC0, 0x39, 0x85, 0xD1, 0x74, 0x35, 0x70, 0xCC, 0x9A, 0xCC, 0x51, 0x2A,
    0xEE, 0x64, 0x9E, 0x7F, 0x46, 0x50, 0x52, 0xBA, 0x66, 0x13, 0x0D, 0x2F,
    0xBB, 0x1F, 0x1E, 0x6C, 0xBA, 0xB6, 0xBA, 0xB5, 0x11, 0x93, 0xAB, 0xCC,
    0x94, 0xA5, 0x3C, 0xA3, 0x68, 0x19, 0x57, 0x82, 0x95, 0x46, 0x7A, 0x9E,
    0x2D, 0x5A, 0x60, 0x47, 0x1F, 0x85, 0xE3, 0xF2, 0x89, 0x98, 0xEB, 0x0D,
    0x79, 0xBA, 0xF4, 0xB9, 0x04, 0x37, 0xF2, 0x66, 0x5F, 0xB8, 0x69, 0x22,
    0x5E, 0xE2, 0xED, 0xB0, 0x52, 0x13, 0xA3, 0xE0, 0xF7, 0x3F, 0x60, 0x04,
    0x1A, 0xBB, 0x1E, 0x25, 0xB9, 0x94, 0xCE, 0x15, 0x5E, 0xD3, 0x4A, 0x68,
    0xB9, 0x56, 0xEE, 0xB2, 0xDE, 0xC5, 0x4E, 0x35, 0x4D, 0x62, 0x3C, 0x8E,
    0xF5, 0xCF, 0xF3, 0x7C, 0x32, 0x7A, 0xC0, 0x05, 0x83, 0x1D, 0xD0, 0x8A,
    0xC7, 0x13, 0x85, 0x84, 0xD6, 0xDF, 0x55, 0x0B,
@


1.2
log
@constify DH params; regen them; fix regenerator for MirBSD
@
text
@d67 2
d198 1
a198 1
print "1. Generate 512 and 1024 bit Diffie-Hellman parameters (p, g)\n";
a207 1
system("openssl gendh $rand -out dh512.pem 512");
a211 3
open(FP, "openssl dh -noout -text -in dh512.pem |") || die;
$dhinfo .= $_ while (<FP>);
close(FP);
a219 3
open(FP, "openssl dh -noout -C -in dh512.pem | indent -npro -st -bad -nbs -ncdb -ci2 -ncsp -di0 -i4 -l80 -lc72 -nlp -nlpi -npsl -TBIO -TDH | expand |") || die;
$dhsource .= $_ while (<FP>);
close(FP);
a239 1
unlink("dh512.pem");
@


1.1
log
@Initial revision
@
text
@d72 5
a76 5
**         00:d4:bc:d5:24:06:f6:9b:35:99:4b:88:de:5d:b8:
**         96:82:c8:15:7f:62:d8:f3:36:33:ee:57:72:f1:1f:
**         05:ab:22:d6:b5:14:5b:9f:24:1e:5a:cc:31:ff:09:
**         0a:4b:c7:11:48:97:6f:76:79:50:94:e7:1e:79:03:
**         52:9f:5a:82:4b
d80 9
a88 9
**         00:e6:96:9d:3d:49:5b:e3:2c:7c:f1:80:c3:bd:d4:
**         79:8e:91:b7:81:82:51:bb:05:5e:2a:20:64:90:4a:
**         79:a7:70:fa:15:a2:59:cb:d5:23:a6:a6:ef:09:c4:
**         30:48:d5:a2:2f:97:1f:3c:20:12:9b:48:00:0e:6e:
**         dd:06:1c:bc:05:3e:37:1d:79:4e:53:27:df:61:1e:
**         bb:be:1b:ac:9b:5c:60:44:cf:02:3d:76:e0:5e:ea:
**         9b:ad:99:1b:13:a6:3c:97:4e:9e:f1:83:9e:b5:db:
**         12:51:36:f7:26:2e:56:a8:87:15:38:df:d8:23:c6:
**         50:50:85:e2:1f:0d:d5:c8:6b
d92 7
a98 8
static unsigned char dh512_p[] =
{
    0xD4, 0xBC, 0xD5, 0x24, 0x06, 0xF6, 0x9B, 0x35, 0x99, 0x4B, 0x88, 0xDE,
    0x5D, 0xB8, 0x96, 0x82, 0xC8, 0x15, 0x7F, 0x62, 0xD8, 0xF3, 0x36, 0x33,
    0xEE, 0x57, 0x72, 0xF1, 0x1F, 0x05, 0xAB, 0x22, 0xD6, 0xB5, 0x14, 0x5B,
    0x9F, 0x24, 0x1E, 0x5A, 0xCC, 0x31, 0xFF, 0x09, 0x0A, 0x4B, 0xC7, 0x11,
    0x48, 0x97, 0x6F, 0x76, 0x79, 0x50, 0x94, 0xE7, 0x1E, 0x79, 0x03, 0x52,
    0x9F, 0x5A, 0x82, 0x4B,
d100 1
a100 2
static unsigned char dh512_g[] =
{
d116 12
a127 13
static unsigned char dh1024_p[] =
{
    0xE6, 0x96, 0x9D, 0x3D, 0x49, 0x5B, 0xE3, 0x2C, 0x7C, 0xF1, 0x80, 0xC3,
    0xBD, 0xD4, 0x79, 0x8E, 0x91, 0xB7, 0x81, 0x82, 0x51, 0xBB, 0x05, 0x5E,
    0x2A, 0x20, 0x64, 0x90, 0x4A, 0x79, 0xA7, 0x70, 0xFA, 0x15, 0xA2, 0x59,
    0xCB, 0xD5, 0x23, 0xA6, 0xA6, 0xEF, 0x09, 0xC4, 0x30, 0x48, 0xD5, 0xA2,
    0x2F, 0x97, 0x1F, 0x3C, 0x20, 0x12, 0x9B, 0x48, 0x00, 0x0E, 0x6E, 0xDD,
    0x06, 0x1C, 0xBC, 0x05, 0x3E, 0x37, 0x1D, 0x79, 0x4E, 0x53, 0x27, 0xDF,
    0x61, 0x1E, 0xBB, 0xBE, 0x1B, 0xAC, 0x9B, 0x5C, 0x60, 0x44, 0xCF, 0x02,
    0x3D, 0x76, 0xE0, 0x5E, 0xEA, 0x9B, 0xAD, 0x99, 0x1B, 0x13, 0xA6, 0x3C,
    0x97, 0x4E, 0x9E, 0xF1, 0x83, 0x9E, 0xB5, 0xDB, 0x12, 0x51, 0x36, 0xF7,
    0x26, 0x2E, 0x56, 0xA8, 0x87, 0x15, 0x38, 0xDF, 0xD8, 0x23, 0xC6, 0x50,
    0x50, 0x85, 0xE2, 0x1F, 0x0D, 0xD5, 0xC8, 0x6B,
d129 1
a129 2
static unsigned char dh1024_g[] =
{
d222 1
a222 1
open(FP, "openssl dh -noout -C -in dh512.pem | indent | expand |") || die;
d225 1
a225 1
open(FP, "openssl dh -noout -C -in dh1024.pem | indent | expand |") || die;
d229 2
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
