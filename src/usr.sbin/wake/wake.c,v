head	1.4;
access;
symbols
	cvs-201001031915:1.1.3.2
	cvs-200908081300:1.1.3.1
	netbsd:1.1.3;
locks; strict;
comment	@ * @;


1.4
date	2010.06.15.07.41.00;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004C172E90340E6371;

1.3
date	2010.01.03.19.21.10;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004B40EE392DF76284;

1.2
date	2009.08.08.13.36.53;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004A7D7F8711E46007;

1.1
date	2009.08.08.13.29.31;	author tg;	state Exp;
branches
	1.1.3.1;
next	;
commitid	1004A7D7DC24AA38A29;

1.1.3.1
date	2009.08.08.13.29.31;	author tg;	state Exp;
branches;
next	1.1.3.2;
commitid	1004A7D7DC24AA38A29;

1.1.3.2
date	2010.01.03.19.19.02;	author tg;	state Exp;
branches;
next	;
commitid	1004B40EDAD183211D2;


desc
@@


1.4
log
@make this a little more useful; inspired by openbsd’s Attic at first,
but done “better” in the end…
@
text
@/* $NetBSD: wake.c,v 1.10 2010/01/03 17:58:14 mbalmer Exp $ */

/*
 * Copyright (C) 2006, 2007, 2008, 2009, 2010 Marc Balmer <marc@@msys.ch>
 * Copyright (C) 2000 Eugene M. Kim.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Author's name may not be used endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/* Send Wake on LAN packets to hosts on a local Ethernet network */

#include <sys/param.h>
#include <sys/queue.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/time.h>

#include <net/bpf.h>
#include <net/if.h>
#include <net/if_dl.h>
#include <net/if_types.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <ifaddrs.h>
#include <limits.h>
#include <paths.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sysexits.h>
#include <unistd.h>

__RCSID("$MirOS: src/usr.sbin/wake/wake.c,v 1.3 2010/01/03 19:21:10 tg Exp $");

#ifndef SYNC_LEN
#define SYNC_LEN 6
#endif

#ifndef DESTADDR_COUNT
#define DESTADDR_COUNT 16
#endif

#ifndef BPF_PATH_FORMAT
#define BPF_PATH_FORMAT "/dev/bpf%u"
#endif

static __dead void usage(void);
static int wake(int, const char *);
static int get_bpf(void);
static int bind_if_to_bpf(char const *, int);
static int find_ether(char *, size_t);
static int get_ether(char const *, struct ether_addr *);
static int send_wakeup(int, struct ether_addr const *);

static void
usage(void)
{
	(void)fprintf(stderr, "usage: %s [interface] lladdr [lladdr ...]\n",
	    getprogname());
	exit(EXIT_FAILURE);
}

static int
wake(int bpf, const char *host)
{
	struct ether_addr macaddr;

	if (get_ether(host, &macaddr) == -1)
		return -1;

	return send_wakeup(bpf, &macaddr);
}

static int
bind_if_to_bpf(char const *ifname, int bpf)
{
	struct ifreq ifr;
	u_int dlt;

	if (strlcpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name)) >=
	    sizeof(ifr.ifr_name)) {
		errno = ENAMETOOLONG;
		return -1;
	}
	if (ioctl(bpf, BIOCSETIF, &ifr) == -1)
		return -1;
	if (ioctl(bpf, BIOCGDLT, &dlt) == -1)
		return -1;
	if (dlt != DLT_EN10MB) {
		errno = EOPNOTSUPP;
		return -1;
	}
	return 0;
}

static int
find_ether(char *dst, size_t len)
{
	struct ifaddrs *ifap, *ifa;
	struct sockaddr_dl *sdl = NULL;

	if (dst == NULL || len == 0)
		return 0;

	if (getifaddrs(&ifap) != 0)
		return -1;

	/* XXX also check the link state */
	for (ifa = ifap; ifa; ifa = ifa->ifa_next)
		if (ifa->ifa_addr->sa_family == AF_LINK &&
		    ifa->ifa_flags & IFF_UP && ifa->ifa_flags & IFF_RUNNING) {
			sdl = (struct sockaddr_dl *)ifa->ifa_addr;
			if (sdl->sdl_type == IFT_ETHER) {
				strlcpy(dst, ifa->ifa_name, len);
				break;
			}
		}

	freeifaddrs(ifap);
	return 0;
}

static int
get_ether(char const *text, struct ether_addr *addr)
{
	struct ether_addr *paddr;

	paddr = ether_aton(text);
	if (paddr != NULL) {
		*addr = *paddr;
		return 0;
	}
	if (ether_hostton(text, addr))
		return -1;
	return 0;
}

static int
send_wakeup(int bpf, struct ether_addr const *addr)
{
	struct {
		struct ether_header hdr;
		u_char data[SYNC_LEN + ETHER_ADDR_LEN * DESTADDR_COUNT];
	} pkt;
	u_char *p;
	int i;
	ssize_t bw, len;

	(void)memset(pkt.hdr.ether_dhost, 0xff, sizeof(pkt.hdr.ether_dhost));
	pkt.hdr.ether_type = htons(0);
	(void)memset(pkt.data, 0xff, SYNC_LEN);
	for (p = pkt.data + SYNC_LEN, i = 0; i < DESTADDR_COUNT;
	    p += ETHER_ADDR_LEN, i++)
		(void)memcpy(p, addr->ether_addr_octet, ETHER_ADDR_LEN);
	p = (u_char *)(void *)&pkt;
	len = sizeof(pkt);
	bw = 0;
	while (len) {
		if ((bw = write(bpf, p, len)) == -1)
			return -1;
		len -= bw;
		p += bw;
	}
	return 0;
}

static int
get_bpf(void)
{
	unsigned int i = 0;
	int fd;
	char path[MAXPATHLEN];

 getbpfdev:
	if (snprintf(path, sizeof(path), BPF_PATH_FORMAT, i) == -1)
		return (-1);

	if ((fd = open(path, O_RDWR)) == -1) {
		if (errno == EBUSY) {
			++i;
			if (i)
				goto getbpfdev;
		}
	}

	return (fd);
}

int
main(int argc, char *argv[])
{
	int bpf, n;
	char ifname[IF_NAMESIZE];

	if (argc < 2)
		usage();

	if ((bpf = get_bpf()) == -1)
		err(EXIT_FAILURE, "Cannot open any bpf interface");

	n = 2;
	if (bind_if_to_bpf(argv[1], bpf) == -1) {
		if (find_ether(ifname, sizeof(ifname)))
			err(EXIT_FAILURE, "Failed to determine ethernet "
			    "interface");
		if (bind_if_to_bpf(ifname, bpf) == -1)
			err(EXIT_FAILURE, "Cannot bind to interface `%s'",
			    ifname);
		--n;
	} else
		strlcpy(ifname, argv[1], sizeof(ifname));

	if (n >= argc)
		usage();
	for (; n < argc; n++)
		if (wake(bpf, argv[n]))
			warn("Cannot send Wake on LAN frame over `%s' to `%s'",
			    ifname, argv[n]);
	return EXIT_SUCCESS;
}
@


1.3
log
@merge (passes __CRAZY=Yes)
@
text
@d58 1
a58 1
__RCSID("$MirOS: src/usr.sbin/wake/wake.c,v 1.2 2009/08/08 13:36:53 tg Exp $");
d68 2
a69 2
#ifndef _PATH_BPF
#define _PATH_BPF "/dev/bpf%d"
d74 1
d192 22
d223 2
a224 2
	if ((bpf = open(_PATH_BPF, O_RDWR)) == -1)
		err(EXIT_FAILURE, "Cannot open bpf interface");
@


1.2
log
@+wake(8)
@
text
@d1 1
a1 1
/* $NetBSD: wake.c,v 1.8 2009/07/18 08:35:19 mbalmer Exp $ */
d4 1
a4 1
 * Copyright (C) 2006, 2007, 2008, 2009 Marc Balmer <marc@@msys.ch>
d29 1
a29 1
/* Send Wake-on-LAN packets to machines on the local Ethernet */
d36 1
d39 2
d48 1
d58 1
a58 1
__RCSID("$MirOS$");
d75 1
d82 2
a83 1
	(void)fprintf(stderr, "usage: %s interface lladdr\n", getprogname());
d121 27
d171 1
a171 2
	ssize_t bw;
	ssize_t len;
d195 1
d197 1
a197 1
	if (argc < 3)
d203 11
a213 2
	if (bind_if_to_bpf(argv[1], bpf) == -1)
		err(EXIT_FAILURE, "Cannot bind to interface `%s'", argv[1]);
d215 3
a217 1
	for (n = 2; n < argc; n++)
d220 1
a220 1
			    argv[1], argv[n]);
@


1.1
log
@Initial revision
@
text
@a30 1
#include <sys/types.h>
d54 2
d64 4
@


1.1.3.1
log
@Since Marc Ballmer now ended up at TNF, import this from him via there.
@
text
@@


1.1.3.2
log
@Import updated wake(8), as suggested by mbalmer (merci)
@
text
@d1 1
a1 1
/* $NetBSD: wake.c,v 1.10 2010/01/03 17:58:14 mbalmer Exp $ */
d4 1
a4 1
 * Copyright (C) 2006, 2007, 2008, 2009, 2010 Marc Balmer <marc@@msys.ch>
d29 1
a29 1
/* Send Wake on LAN packets to hosts on a local Ethernet network */
a36 1

a38 2
#include <net/if_dl.h>
#include <net/if_types.h>
a45 1
#include <ifaddrs.h>
d63 1
a63 1
static void usage(void);
a65 1
static int find_ether(char *, size_t);
d72 1
a72 2
	(void)fprintf(stderr, "usage: %s [interface] lladdr [lladdr ...]\n",
	    getprogname());
a109 27
find_ether(char *dst, size_t len)
{
	struct ifaddrs *ifap, *ifa;
	struct sockaddr_dl *sdl = NULL;

	if (dst == NULL || len == 0)
		return 0;

	if (getifaddrs(&ifap) != 0)
		return -1;

	/* XXX also check the link state */
	for (ifa = ifap; ifa; ifa = ifa->ifa_next)
		if (ifa->ifa_addr->sa_family == AF_LINK &&
		    ifa->ifa_flags & IFF_UP && ifa->ifa_flags & IFF_RUNNING) {
			sdl = (struct sockaddr_dl *)ifa->ifa_addr;
			if (sdl->sdl_type == IFT_ETHER) {
				strlcpy(dst, ifa->ifa_name, len);
				break;
			}
		}

	freeifaddrs(ifap);
	return 0;
}

static int
d133 2
a134 1
	ssize_t bw, len;
a157 1
	char ifname[IF_NAMESIZE];
d159 1
a159 1
	if (argc < 2)
d165 2
a166 11
	n = 2;
	if (bind_if_to_bpf(argv[1], bpf) == -1) {
		if (find_ether(ifname, sizeof(ifname)))
			err(EXIT_FAILURE, "Failed to determine ethernet "
			    "interface");
		if (bind_if_to_bpf(ifname, bpf) == -1)
			err(EXIT_FAILURE, "Cannot bind to interface `%s'",
			    ifname);
		--n;
	} else
		strlcpy(ifname, argv[1], sizeof(ifname));
d168 1
a168 3
	if (n >= argc)
		usage();
	for (; n < argc; n++)
d171 1
a171 1
			    ifname, argv[n]);
@

