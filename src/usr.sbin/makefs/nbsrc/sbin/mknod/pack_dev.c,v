head	1.7;
access;
symbols
	cvs-200810311900:1.1.3.2
	MIRBSD_10:1.2.0.2
	MIRBSD_10_BASE:1.2
	cvs-200607051500:1.1.3.1
	netbsd:1.1.3;
locks; strict;
comment	@ * @;


1.7
date	2019.01.05.15.08.38;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005C30C885756F3598;

1.6
date	2010.03.16.22.16.25;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004BA00351659C4A3B;

1.5
date	2010.03.06.20.30.35;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004B92BB7A659AC850;

1.4
date	2008.10.31.21.24.25;	author tg;	state Exp;
branches;
next	1.3;
commitid	100490B7799471618CD;

1.3
date	2008.10.31.19.11.35;	author tg;	state Exp;
branches;
next	1.2;
commitid	100490B58676FCB2D2F;

1.2
date	2007.05.19.23.17.49;	author tg;	state Exp;
branches;
next	1.1;
commitid	100464F859F79495987;

1.1
date	2006.07.05.16.04.42;	author tg;	state Exp;
branches
	1.1.3.1;
next	;
commitid	10044ABE32A76E10D6A;

1.1.3.1
date	2006.07.05.16.04.42;	author tg;	state Exp;
branches;
next	1.1.3.2;
commitid	10044ABE32A76E10D6A;

1.1.3.2
date	2008.10.31.19.06.04;	author tg;	state Exp;
branches;
next	1.1.3.3;
commitid	100490B57202F143953;

1.1.3.3
date	2010.03.06.20.28.57;	author tg;	state Exp;
branches;
next	;
commitid	1004B92BB193CD8D71C;


desc
@@


1.7
log
@merge Debian patches
@
text
@/*	$NetBSD: pack_dev.c,v 1.10 2009/02/13 01:37:23 lukem Exp $	*/

/*-
 * Copyright (c) 1998, 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#if HAVE_NBTOOL_CONFIG_H
#include "nbtool_config.h"
#endif

#include <sys/cdefs.h>
#if !defined(lint)
__RCSID("$NetBSD: pack_dev.c,v 1.10 2009/02/13 01:37:23 lukem Exp $");
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/sbin/mknod/pack_dev.c,v 1.6 2010/03/16 22:16:25 tg Exp $");
#endif /* not lint */

#include <sys/types.h>
#include <sys/stat.h>
#ifdef __GLIBC__
#include <sys/sysmacros.h>
#endif

#include <limits.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "pack_dev.h"

static	pack_t	pack_netbsd;
static	pack_t	pack_freebsd;
static	pack_t	pack_8_8;
static	pack_t	pack_12_20;
static	pack_t	pack_14_18;
static	pack_t	pack_8_24;
static	pack_t	pack_bsdos;
static	int	compare_format(const void *, const void *);

static const char iMajorError[] = "invalid major number";
static const char iMinorError[] = "invalid minor number";
static const char tooManyFields[] = "too many fields for format";

	/* exported */
portdev_t
pack_native(int n, u_long numbers[], const char **error)
{
	portdev_t dev = 0;

	if (n == 2) {
		dev = makedev(numbers[0], numbers[1]);
		if ((u_long)major(dev) != numbers[0])
			*error = iMajorError;
		else if ((u_long)minor(dev) != numbers[1])
			*error = iMinorError;
	} else
		*error = tooManyFields;
	return (dev);
}


static portdev_t
pack_netbsd(int n, u_long numbers[], const char **error)
{
	portdev_t dev = 0;

	if (n == 2) {
		dev = makedev_netbsd(numbers[0], numbers[1]);
		if ((u_long)major_netbsd(dev) != numbers[0])
			*error = iMajorError;
		else if ((u_long)minor_netbsd(dev) != numbers[1])
			*error = iMinorError;
	} else
		*error = tooManyFields;
	return (dev);
}


#define	major_freebsd(x)	((int32_t)(((x) & 0x0000ff00) >> 8))
#define	minor_freebsd(x)	((int32_t)(((x) & 0xffff00ff) >> 0))
#define	makedev_freebsd(x,y)	((portdev_t)((((x) << 8) & 0x0000ff00) | \
					 (((y) << 0) & 0xffff00ff)))

static portdev_t
pack_freebsd(int n, u_long numbers[], const char **error)
{
	portdev_t dev = 0;

	if (n == 2) {
		dev = makedev_freebsd(numbers[0], numbers[1]);
		if ((u_long)major_freebsd(dev) != numbers[0])
			*error = iMajorError;
		if ((u_long)minor_freebsd(dev) != numbers[1])
			*error = iMinorError;
	} else
		*error = tooManyFields;
	return (dev);
}


#define	major_8_8(x)		((int32_t)(((x) & 0x0000ff00) >> 8))
#define	minor_8_8(x)		((int32_t)(((x) & 0x000000ff) >> 0))
#define	makedev_8_8(x,y)	((portdev_t)((((x) << 8) & 0x0000ff00) | \
					 (((y) << 0) & 0x000000ff)))

static portdev_t
pack_8_8(int n, u_long numbers[], const char **error)
{
	portdev_t dev = 0;

	if (n == 2) {
		dev = makedev_8_8(numbers[0], numbers[1]);
		if ((u_long)major_8_8(dev) != numbers[0])
			*error = iMajorError;
		if ((u_long)minor_8_8(dev) != numbers[1])
			*error = iMinorError;
	} else
		*error = tooManyFields;
	return (dev);
}


#define	major_12_20(x)		((int32_t)(((x) & 0xfff00000) >> 20))
#define	minor_12_20(x)		((int32_t)(((x) & 0x000fffff) >>  0))
#define	makedev_12_20(x,y)	((portdev_t)((((x) << 20) & 0xfff00000) | \
					 (((y) <<  0) & 0x000fffff)))

static portdev_t
pack_12_20(int n, u_long numbers[], const char **error)
{
	portdev_t dev = 0;

	if (n == 2) {
		dev = makedev_12_20(numbers[0], numbers[1]);
		if ((u_long)major_12_20(dev) != numbers[0])
			*error = iMajorError;
		if ((u_long)minor_12_20(dev) != numbers[1])
			*error = iMinorError;
	} else
		*error = tooManyFields;
	return (dev);
}


#define	major_14_18(x)		((int32_t)(((x) & 0xfffc0000) >> 18))
#define	minor_14_18(x)		((int32_t)(((x) & 0x0003ffff) >>  0))
#define	makedev_14_18(x,y)	((portdev_t)((((x) << 18) & 0xfffc0000) | \
					 (((y) <<  0) & 0x0003ffff)))

static portdev_t
pack_14_18(int n, u_long numbers[], const char **error)
{
	portdev_t dev = 0;

	if (n == 2) {
		dev = makedev_14_18(numbers[0], numbers[1]);
		if ((u_long)major_14_18(dev) != numbers[0])
			*error = iMajorError;
		if ((u_long)minor_14_18(dev) != numbers[1])
			*error = iMinorError;
	} else
		*error = tooManyFields;
	return (dev);
}


#define	major_8_24(x)		((int32_t)(((x) & 0xff000000) >> 24))
#define	minor_8_24(x)		((int32_t)(((x) & 0x00ffffff) >>  0))
#define	makedev_8_24(x,y)	((portdev_t)((((x) << 24) & 0xff000000) | \
					 (((y) <<  0) & 0x00ffffff)))

static portdev_t
pack_8_24(int n, u_long numbers[], const char **error)
{
	portdev_t dev = 0;

	if (n == 2) {
		dev = makedev_8_24(numbers[0], numbers[1]);
		if ((u_long)major_8_24(dev) != numbers[0])
			*error = iMajorError;
		if ((u_long)minor_8_24(dev) != numbers[1])
			*error = iMinorError;
	} else
		*error = tooManyFields;
	return (dev);
}


#define	major_12_12_8(x)	((int32_t)(((x) & 0xfff00000) >> 20))
#define	unit_12_12_8(x)		((int32_t)(((x) & 0x000fff00) >>  8))
#define	subunit_12_12_8(x)	((int32_t)(((x) & 0x000000ff) >>  0))
#define	makedev_12_12_8(x,y,z)	((portdev_t)((((x) << 20) & 0xfff00000) | \
					 (((y) <<  8) & 0x000fff00) | \
					 (((z) <<  0) & 0x000000ff)))

static portdev_t
pack_bsdos(int n, u_long numbers[], const char **error)
{
	portdev_t dev = 0;

	if (n == 2) {
		dev = makedev_12_20(numbers[0], numbers[1]);
		if ((u_long)major_12_20(dev) != numbers[0])
			*error = iMajorError;
		if ((u_long)minor_12_20(dev) != numbers[1])
			*error = iMinorError;
	} else if (n == 3) {
		dev = makedev_12_12_8(numbers[0], numbers[1], numbers[2]);
		if ((u_long)major_12_12_8(dev) != numbers[0])
			*error = iMajorError;
		if ((u_long)unit_12_12_8(dev) != numbers[1])
			*error = "invalid unit number";
		if ((u_long)subunit_12_12_8(dev) != numbers[2])
			*error = "invalid subunit number";
	} else
		*error = tooManyFields;
	return (dev);
}


		/* list of formats and pack functions */
		/* this list must be sorted lexically */
struct format {
	const char	*name;
	pack_t		*pack;
} formats[] = {
	{"386bsd",  pack_8_8},
	{"4bsd",    pack_8_8},
	{"bsdos",   pack_bsdos},
	{"freebsd", pack_freebsd},
	{"hpux",    pack_8_24},
	{"isc",     pack_8_8},
	{"linux",   pack_8_8},
	{"native",  pack_native},
	{"netbsd",  pack_netbsd},
	{"osf1",    pack_12_20},
	{"sco",     pack_8_8},
	{"solaris", pack_14_18},
	{"sunos",   pack_8_8},
	{"svr3",    pack_8_8},
	{"svr4",    pack_14_18},
	{"ultrix",  pack_8_8},
};

static int
compare_format(const void *key, const void *element)
{
	const char		*name;
	const struct format	*format;

	name = key;
	format = element;

	return (strcmp(name, format->name));
}


pack_t *
pack_find(const char *name)
{
	struct format	*format;

	format = bsearch(name, formats,
	    sizeof(formats)/sizeof(formats[0]),
	    sizeof(formats[0]), compare_format);
	if (format == 0)
		return (NULL);
	return (format->pack);
}
@


1.6
log
@more missing stdint.h
@
text
@d39 1
a39 1
__IDSTRING(mbsdid, "$MirOS$");
d44 3
@


1.5
log
@merge and remove local diff, TNF fixed all our issues, 10x
@
text
@d39 1
d46 1
@


1.4
log
@build with __CRAZY=Yes
@
text
@d1 1
a1 2
/**	$MirOS$ */
/*	$NetBSD: pack_dev.c,v 1.9 2008/04/28 20:23:09 martin Exp $	*/
d38 1
a38 2
__RCSID("$NetBSD: pack_dev.c,v 1.9 2008/04/28 20:23:09 martin Exp $");
__IDSTRING(mbsdid, "$MirOS$");
d75 1
a75 1
		else if (minor(dev) != numbers[1])
d90 1
a90 1
		if (major_netbsd(dev) != numbers[0])
d92 1
a92 1
		else if (minor_netbsd(dev) != numbers[1])
d100 2
a101 2
#define	major_freebsd(x)	((uint32_t)(((x) & 0x0000ff00) >> 8))
#define	minor_freebsd(x)	((uint32_t)(((x) & 0xffff00ff) >> 0))
d112 1
a112 1
		if (major_freebsd(dev) != numbers[0])
d114 1
a114 1
		if (minor_freebsd(dev) != numbers[1])
d122 2
a123 2
#define	major_8_8(x)		((uint32_t)(((x) & 0x0000ff00) >> 8))
#define	minor_8_8(x)		((uint32_t)(((x) & 0x000000ff) >> 0))
d134 1
a134 1
		if (major_8_8(dev) != numbers[0])
d136 1
a136 1
		if (minor_8_8(dev) != numbers[1])
d144 2
a145 2
#define	major_12_20(x)		((uint32_t)(((x) & 0xfff00000) >> 20))
#define	minor_12_20(x)		((uint32_t)(((x) & 0x000fffff) >>  0))
d156 1
a156 1
		if (major_12_20(dev) != numbers[0])
d158 1
a158 1
		if (minor_12_20(dev) != numbers[1])
d166 2
a167 2
#define	major_14_18(x)		((uint32_t)(((x) & 0xfffc0000) >> 18))
#define	minor_14_18(x)		((uint32_t)(((x) & 0x0003ffff) >>  0))
d178 1
a178 1
		if (major_14_18(dev) != numbers[0])
d180 1
a180 1
		if (minor_14_18(dev) != numbers[1])
d188 2
a189 2
#define	major_8_24(x)		((uint32_t)(((x) & 0xff000000) >> 24))
#define	minor_8_24(x)		((uint32_t)(((x) & 0x00ffffff) >>  0))
d200 1
a200 1
		if (major_8_24(dev) != numbers[0])
d202 1
a202 1
		if (minor_8_24(dev) != numbers[1])
d210 3
a212 3
#define	major_12_12_8(x)	((uint32_t)(((x) & 0xfff00000) >> 20))
#define	unit_12_12_8(x)		((uint32_t)(((x) & 0x000fff00) >>  8))
#define	subunit_12_12_8(x)	((uint32_t)(((x) & 0x000000ff) >>  0))
d224 1
a224 1
		if (major_12_20(dev) != numbers[0])
d226 1
a226 1
		if (minor_12_20(dev) != numbers[1])
d230 1
a230 1
		if (major_12_12_8(dev) != numbers[0])
d232 1
a232 1
		if (unit_12_12_8(dev) != numbers[1])
d234 1
a234 1
		if (subunit_12_12_8(dev) != numbers[2])
@


1.3
log
@bring MAIN branch into the pristine TNF state for reverse-merging
@
text
@d1 1
d40 1
d75 1
a75 1
		if (major(dev) != numbers[0])
d102 2
a103 2
#define	major_freebsd(x)	((int32_t)(((x) & 0x0000ff00) >> 8))
#define	minor_freebsd(x)	((int32_t)(((x) & 0xffff00ff) >> 0))
d124 2
a125 2
#define	major_8_8(x)		((int32_t)(((x) & 0x0000ff00) >> 8))
#define	minor_8_8(x)		((int32_t)(((x) & 0x000000ff) >> 0))
d146 2
a147 2
#define	major_12_20(x)		((int32_t)(((x) & 0xfff00000) >> 20))
#define	minor_12_20(x)		((int32_t)(((x) & 0x000fffff) >>  0))
d168 2
a169 2
#define	major_14_18(x)		((int32_t)(((x) & 0xfffc0000) >> 18))
#define	minor_14_18(x)		((int32_t)(((x) & 0x0003ffff) >>  0))
d190 2
a191 2
#define	major_8_24(x)		((int32_t)(((x) & 0xff000000) >> 24))
#define	minor_8_24(x)		((int32_t)(((x) & 0x00ffffff) >>  0))
d212 3
a214 3
#define	major_12_12_8(x)	((int32_t)(((x) & 0xfff00000) >> 20))
#define	unit_12_12_8(x)		((int32_t)(((x) & 0x000fff00) >>  8))
#define	subunit_12_12_8(x)	((int32_t)(((x) & 0x000000ff) >>  0))
@


1.2
log
@__CRAZY=Yes cleanup… can't they even use compiler warnings…
cruel netbsd code *sigh*
@
text
@d1 1
a1 1
/*	$NetBSD: pack_dev.c,v 1.8 2004/05/11 17:09:58 christos Exp $	*/
a17 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d38 1
a38 2
__RCSID("$MirOS$");
__RCSID("$NetBSD: pack_dev.c,v 1.8 2004/05/11 17:09:58 christos Exp $");
d73 1
a73 1
		if ((u_long)major(dev) != numbers[0])
d100 2
a101 2
#define	major_freebsd(x)	((uint32_t)(((x) & 0x0000ff00) >> 8))
#define	minor_freebsd(x)	((uint32_t)(((x) & 0xffff00ff) >> 0))
d122 2
a123 2
#define	major_8_8(x)		((uint32_t)(((x) & 0x0000ff00) >> 8))
#define	minor_8_8(x)		((uint32_t)(((x) & 0x000000ff) >> 0))
d144 2
a145 2
#define	major_12_20(x)		((uint32_t)(((x) & 0xfff00000) >> 20))
#define	minor_12_20(x)		((uint32_t)(((x) & 0x000fffff) >>  0))
d166 2
a167 2
#define	major_14_18(x)		((uint32_t)(((x) & 0xfffc0000) >> 18))
#define	minor_14_18(x)		((uint32_t)(((x) & 0x0003ffff) >>  0))
d188 2
a189 2
#define	major_8_24(x)		((uint32_t)(((x) & 0xff000000) >> 24))
#define	minor_8_24(x)		((uint32_t)(((x) & 0x00ffffff) >>  0))
d210 3
a212 3
#define	major_12_12_8(x)	((uint32_t)(((x) & 0xfff00000) >> 20))
#define	unit_12_12_8(x)		((uint32_t)(((x) & 0x000fff00) >>  8))
#define	subunit_12_12_8(x)	((uint32_t)(((x) & 0x000000ff) >>  0))
@


1.1
log
@Initial revision
@
text
@d45 1
d81 1
a81 1
		if (major(dev) != numbers[0])
d108 2
a109 2
#define	major_freebsd(x)	((int32_t)(((x) & 0x0000ff00) >> 8))
#define	minor_freebsd(x)	((int32_t)(((x) & 0xffff00ff) >> 0))
d130 2
a131 2
#define	major_8_8(x)		((int32_t)(((x) & 0x0000ff00) >> 8))
#define	minor_8_8(x)		((int32_t)(((x) & 0x000000ff) >> 0))
d152 2
a153 2
#define	major_12_20(x)		((int32_t)(((x) & 0xfff00000) >> 20))
#define	minor_12_20(x)		((int32_t)(((x) & 0x000fffff) >>  0))
d174 2
a175 2
#define	major_14_18(x)		((int32_t)(((x) & 0xfffc0000) >> 18))
#define	minor_14_18(x)		((int32_t)(((x) & 0x0003ffff) >>  0))
d196 2
a197 2
#define	major_8_24(x)		((int32_t)(((x) & 0xff000000) >> 24))
#define	minor_8_24(x)		((int32_t)(((x) & 0x00ffffff) >>  0))
d218 3
a220 3
#define	major_12_12_8(x)	((int32_t)(((x) & 0xfff00000) >> 20))
#define	unit_12_12_8(x)		((int32_t)(((x) & 0x000fff00) >>  8))
#define	subunit_12_12_8(x)	((int32_t)(((x) & 0x000000ff) >>  0))
@


1.1.3.1
log
@Import a gazillion of other files...
@
text
@@


1.1.3.2
log
@Import NetBSD®-current (just after or at the 5.0 branch) makefs(8)
and subtree required to build it in MirBSD
@
text
@d1 1
a1 1
/*	$NetBSD: pack_dev.c,v 1.9 2008/04/28 20:23:09 martin Exp $	*/
d18 7
d45 1
a45 1
__RCSID("$NetBSD: pack_dev.c,v 1.9 2008/04/28 20:23:09 martin Exp $");
@


1.1.3.3
log
@sync with TNF (fix -Wsign-compare issues)
@
text
@d1 1
a1 1
/*	$NetBSD: pack_dev.c,v 1.10 2009/02/13 01:37:23 lukem Exp $	*/
d38 1
a38 1
__RCSID("$NetBSD: pack_dev.c,v 1.10 2009/02/13 01:37:23 lukem Exp $");
d73 1
a73 1
		if ((u_long)major(dev) != numbers[0])
d75 1
a75 1
		else if ((u_long)minor(dev) != numbers[1])
d90 1
a90 1
		if ((u_long)major_netbsd(dev) != numbers[0])
d92 1
a92 1
		else if ((u_long)minor_netbsd(dev) != numbers[1])
d112 1
a112 1
		if ((u_long)major_freebsd(dev) != numbers[0])
d114 1
a114 1
		if ((u_long)minor_freebsd(dev) != numbers[1])
d134 1
a134 1
		if ((u_long)major_8_8(dev) != numbers[0])
d136 1
a136 1
		if ((u_long)minor_8_8(dev) != numbers[1])
d156 1
a156 1
		if ((u_long)major_12_20(dev) != numbers[0])
d158 1
a158 1
		if ((u_long)minor_12_20(dev) != numbers[1])
d178 1
a178 1
		if ((u_long)major_14_18(dev) != numbers[0])
d180 1
a180 1
		if ((u_long)minor_14_18(dev) != numbers[1])
d200 1
a200 1
		if ((u_long)major_8_24(dev) != numbers[0])
d202 1
a202 1
		if ((u_long)minor_8_24(dev) != numbers[1])
d224 1
a224 1
		if ((u_long)major_12_20(dev) != numbers[0])
d226 1
a226 1
		if ((u_long)minor_12_20(dev) != numbers[1])
d230 1
a230 1
		if ((u_long)major_12_12_8(dev) != numbers[0])
d232 1
a232 1
		if ((u_long)unit_12_12_8(dev) != numbers[1])
d234 1
a234 1
		if ((u_long)subunit_12_12_8(dev) != numbers[2])
@


