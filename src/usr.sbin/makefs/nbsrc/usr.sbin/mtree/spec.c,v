head	1.14;
access;
symbols
	cvs-200810311900:1.1.3.2
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	cvs-200607051500:1.1.3.1
	netbsd:1.1.3;
locks; strict;
comment	@ * @;


1.14
date	2019.01.05.16.39.27;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005C30DDD442B8461F;

1.13
date	2019.01.05.16.02.29;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005C30D4FC04E81E4A;

1.12
date	2010.03.16.21.28.26;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004B9FF7E2646899BA;

1.11
date	2010.03.07.00.17.08;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004B92F09703DFADFF;

1.10
date	2010.03.06.20.40.27;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004B92BDD0415F4876;

1.9
date	2009.07.23.19.32.27;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004A68BAC01D44054A;

1.8
date	2008.10.31.21.36.40;	author tg;	state Exp;
branches;
next	1.7;
commitid	100490B7A7B6CD76647;

1.7
date	2008.10.31.21.24.26;	author tg;	state Exp;
branches;
next	1.6;
commitid	100490B7799471618CD;

1.6
date	2008.10.31.19.45.31;	author tg;	state Exp;
branches;
next	1.5;
commitid	100490B606B662DF594;

1.5
date	2008.10.31.19.11.37;	author tg;	state Exp;
branches;
next	1.4;
commitid	100490B58676FCB2D2F;

1.4
date	2007.05.19.23.17.50;	author tg;	state Exp;
branches;
next	1.3;
commitid	100464F859F79495987;

1.3
date	2006.09.21.20.16.23;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004512F320386F848A;

1.2
date	2006.07.05.20.08.35;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044AC1C596F24EF83;

1.1
date	2006.07.05.17.08.35;	author tg;	state Exp;
branches
	1.1.3.1;
next	;
commitid	10044ABF2251FA7CAB2;

1.1.3.1
date	2006.07.05.17.08.35;	author tg;	state Exp;
branches;
next	1.1.3.2;
commitid	10044ABF2251FA7CAB2;

1.1.3.2
date	2008.10.31.19.06.05;	author tg;	state Exp;
branches;
next	1.1.3.3;
commitid	100490B57202F143953;

1.1.3.3
date	2010.03.06.20.36.44;	author tg;	state Exp;
branches;
next	;
commitid	1004B92BCF12BE39DE7;


desc
@@


1.14
log
@more prototypes for GNUPORT
@
text
@/**	$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.13 2019/01/05 16:02:29 tg Exp $ */
/*	$NetBSD: spec.c,v 1.78 2009/09/22 04:38:21 apb Exp $	*/

/*-
 * Copyright (c) 2009, 2010
 *	Thorsten Glaser <tg@@mirbsd.org>
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*-
 * Copyright (c) 2001-2004 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Luke Mewburn of Wasabi Systems.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#if HAVE_NBTOOL_CONFIG_H
#include "nbtool_config.h"
#endif

#ifdef GNUPORT
#include <stdio.h>
#define NEED_FPARSELN_DECL
#endif

#if defined(__MirBSD__) || defined(GNUPORT)
#include "mbsdtree.h"
#endif

#include <sys/cdefs.h>
#if defined(__RCSID) && !defined(lint)
#if 0
static char sccsid[] = "@@(#)spec.c	8.2 (Berkeley) 4/28/95";
#else
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.13 2019/01/05 16:02:29 tg Exp $");
__RCSID("$NetBSD: spec.c,v 1.78 2009/09/22 04:38:21 apb Exp $");
#endif
#endif /* not lint */

#include <sys/param.h>
#include <sys/stat.h>

#include <assert.h>
#include <ctype.h>
#include <errno.h>
#include <grp.h>
#include <pwd.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <vis.h>
#ifndef GNUPORT
#include <util.h>
#endif

#include "extern.h"
#include "pack_dev.h"

#if defined(__MirBSD__) || defined(GNUPORT)
#include "pwcache.h"
#endif

#ifdef GNUPORT
extern mode_t getmode(const void *, mode_t);
extern void *setmode(const char *);
#endif

size_t	mtree_lineno;			/* Current spec line number */
int	mtree_Mflag;			/* Merge duplicate entries */
int	mtree_Wflag;			/* Don't "whack" permissions */
int	mtree_Sflag;			/* Sort entries */

static	dev_t	parsedev(char *);
static	void	replacenode(NODE *, NODE *);
static	void	set(char *, NODE *);
static	void	unset(char *, NODE *);
static	void	addchild(NODE *, NODE *);
static	int	nodecmp(const NODE *, const NODE *);
#ifndef GNUPORT
static	int	appendfield(int, const char *, ...)
		    __attribute__((__format__(__printf__, 2, 3)));
#endif

#define REPLACEPTR(x,v)	do { if ((x)) free((x)); (x) = (v); } while (0)

NODE *
spec(FILE *fp)
{
	NODE *centry, *last, *pathparent, *cur;
	char *p, *e, *next;
	NODE ginfo, *root;
	char *buf, *tname, *ntname;
	size_t tnamelen, plen;

	root = NULL;
	centry = last = NULL;
	tname = NULL;
	tnamelen = 0;
	memset(&ginfo, 0, sizeof(ginfo));
	for (mtree_lineno = 0;
	    (buf = fparseln(fp, NULL, &mtree_lineno, NULL,
		FPARSELN_UNESCCOMM));
	    free(buf)) {
		/* Skip leading whitespace. */
		for (p = buf; *p && isspace((unsigned char)*p); ++p)
			continue;

		/* If nothing but whitespace, continue. */
		if (!*p)
			continue;

#ifdef DEBUG
		fprintf(stderr, "line %lu: {%s}\n",
		    (u_long)mtree_lineno, p);
#endif
		/* Grab file name, "$", "set", or "unset". */
		next = buf;
		while ((p = strsep(&next, " \t")) != NULL && *p == '\0')
			continue;
		if (p == NULL)
			mtree_err("missing field");

		if (p[0] == '/') {
			if (strcmp(p + 1, "set") == 0)
				set(next, &ginfo);
			else if (strcmp(p + 1, "unset") == 0)
				unset(next, &ginfo);
			else
				mtree_err("invalid specification `%s'", p);
			continue;
		}

		if (strcmp(p, "..") == 0) {
			/* Don't go up, if haven't gone down. */
			if (root == NULL)
				goto noparent;
			if (last->type != F_DIR || last->flags & F_DONE) {
				if (last == root)
					goto noparent;
				last = last->parent;
			}
			last->flags |= F_DONE;
			continue;

noparent:		mtree_err("no parent node");
		}

		plen = strlen(p) + 1;
		if (plen > tnamelen) {
			if ((ntname = realloc(tname, plen)) == NULL)
				mtree_err("realloc: %s", strerror(errno));
			tname = ntname;
			tnamelen = plen;
		}
		if (strunvis(tname, p) == -1)
			mtree_err("strunvis failed on `%s'", p);
		p = tname;

		pathparent = NULL;
		if (strchr(p, '/') != NULL) {
			cur = root;
			for (; (e = strchr(p, '/')) != NULL; p = e+1) {
				if (p == e)
					continue;	/* handle // */
				*e = '\0';
				if (strcmp(p, ".") != 0) {
					while (cur &&
					    strcmp(cur->name, p) != 0) {
						cur = cur->next;
					}
				}
				if (cur == NULL || cur->type != F_DIR) {
					mtree_err("%s: %s", tname,
					"missing directory in specification");
				}
				*e = '/';
				pathparent = cur;
				cur = cur->child;
			}
			if (*p == '\0')
				mtree_err("%s: empty leaf element", tname);
		}

		if ((centry = calloc(1, sizeof(NODE) + strlen(p) + 1)) == NULL)
			mtree_err("%s", strerror(errno));
		*centry = ginfo;
		centry->lineno = mtree_lineno;
		memcpy(centry->name, p, strlen(p));
		centry->name[strlen(p)] = '\0';
#define	MAGIC	"?*["
		if (strpbrk(p, MAGIC))
			centry->flags |= F_MAGIC;
		set(next, centry);

		if (root == NULL) {
				/*
				 * empty tree
				 */
			if (strcmp(centry->name, ".") != 0 ||
			    centry->type != F_DIR)
				mtree_err(
				    "root node must be the directory `.'");
			last = root = centry;
			root->parent = root;
		} else if (pathparent != NULL) {
				/*
				 * full path entry; add or replace
				 */
			centry->parent = pathparent;
			addchild(pathparent, centry);
			last = centry;
		} else if (strcmp(centry->name, ".") == 0) {
				/*
				 * duplicate "." entry; always replace
				 */
			replacenode(root, centry);
		} else if (last->type == F_DIR && !(last->flags & F_DONE)) {
				/*
				 * new relative child in current dir;
				 * add or replace
				 */
			centry->parent = last;
			addchild(last, centry);
			last = centry;
		} else {
				/*
				 * new relative child in parent dir
				 * (after encountering ".." entry);
				 * add or replace
				 */
			centry->parent = last->parent;
			addchild(last->parent, centry);
			last = centry;
		}
	}
	return (root);
}

void
free_nodes(NODE *root)
{
	NODE	*cur, *next;

	if (root == NULL)
		return;

	next = NULL;
	for (cur = root; cur != NULL; cur = next) {
		next = cur->next;
		free_nodes(cur->child);
		REPLACEPTR(cur->slink, NULL);
		REPLACEPTR(cur->md5digest, NULL);
		REPLACEPTR(cur->rmd160digest, NULL);
		REPLACEPTR(cur->sha1digest, NULL);
		REPLACEPTR(cur->sha256digest, NULL);
		REPLACEPTR(cur->sha384digest, NULL);
		REPLACEPTR(cur->sha512digest, NULL);
		REPLACEPTR(cur->tags, NULL);
		REPLACEPTR(cur, NULL);
	}
}

#ifndef GNUPORT
/*
 * appendfield --
 *	Like printf(), but output a space either before or after
 *	the regular output, according to the pathlast flag.
 */
static int
appendfield(int pathlast, const char *fmt, ...)
{
	va_list ap;
	int result;

	va_start(ap, fmt);
	if (!pathlast)
		printf(" ");
	result = vprintf(fmt, ap);
	if (pathlast)
		printf(" ");
	va_end(ap);
	return result;
}

/*
 * dump_nodes --
 *	dump the NODEs from `cur', based in the directory `dir'.
 *	if pathlast is none zero, print the path last, otherwise print
 *	it first.
 */
void
dump_nodes(const char *dir, NODE *root, int pathlast)
{
	NODE	*cur;
	char	path[MAXPATHLEN];
	const char *name;
	char	*str;
	char	*p, *q;

	for (cur = root; cur != NULL; cur = cur->next) {
		if (cur->type != F_DIR && !matchtags(cur))
			continue;

		if ((size_t)snprintf(path, sizeof(path), "%s%s%s",
		    dir, *dir ? "/" : "", cur->name)
		    >= (int)sizeof(path))
			mtree_err("Pathname too long.");

		if (!pathlast)
			printf("%s", vispath(path));

#define MATCHFLAG(f)	((keys & (f)) && (cur->flags & (f)))
		if (MATCHFLAG(F_TYPE))
			appendfield(pathlast, "type=%s", nodetype(cur->type));
		if (MATCHFLAG(F_UID | F_UNAME)) {
			if (keys & F_UNAME &&
			    (name = user_from_uid(cur->st_uid, 1)) != NULL)
				appendfield(pathlast, "uname=%s", name);
			else
				appendfield(pathlast, "uid=%u", cur->st_uid);
		}
		if (MATCHFLAG(F_GID | F_GNAME)) {
			if (keys & F_GNAME &&
			    (name = group_from_gid(cur->st_gid, 1)) != NULL)
				appendfield(pathlast, "gname=%s", name);
			else
				appendfield(pathlast, "gid=%u", cur->st_gid);
		}
		if (MATCHFLAG(F_MODE))
			appendfield(pathlast, "mode=%#o", cur->st_mode);
		if (MATCHFLAG(F_DEV) &&
		    (cur->type == F_BLOCK || cur->type == F_CHAR))
			appendfield(pathlast, "device=%#llx", (long long)cur->st_rdev);
		if (MATCHFLAG(F_NLINK))
			appendfield(pathlast, "nlink=%d", cur->st_nlink);
		if (MATCHFLAG(F_SLINK))
			appendfield(pathlast, "link=%s", vispath(cur->slink));
		if (MATCHFLAG(F_SIZE))
			appendfield(pathlast, "size=%lld", (long long)cur->st_size);
		if (MATCHFLAG(F_TIME))
			appendfield(pathlast, "time=%lld.%ld ",
			    (long long)cur->st_mtimespec.tv_sec,
			    cur->st_mtimespec.tv_nsec);
		if (MATCHFLAG(F_CKSUM))
			appendfield(pathlast, "cksum=%lu", cur->cksum);
		if (MATCHFLAG(F_MD5))
			appendfield(pathlast, "md5=%s", cur->md5digest);
		if (MATCHFLAG(F_RMD160))
			appendfield(pathlast, "rmd160=%s", cur->rmd160digest);
		if (MATCHFLAG(F_SHA1))
			appendfield(pathlast, "sha1=%s", cur->sha1digest);
		if (MATCHFLAG(F_SHA256))
			appendfield(pathlast, "sha256=%s", cur->sha256digest);
		if (MATCHFLAG(F_SHA384))
			appendfield(pathlast, "sha384=%s", cur->sha384digest);
		if (MATCHFLAG(F_SHA512))
			appendfield(pathlast, "sha512=%s", cur->sha512digest);
		if (MATCHFLAG(F_FLAGS)) {
			str = flags_to_string(cur->st_flags, "none");
			appendfield(pathlast, "flags=%s", str);
			free(str);
		}
		if (MATCHFLAG(F_IGN))
			appendfield(pathlast, "ignore");
		if (MATCHFLAG(F_OPT))
			appendfield(pathlast, "optional");
		if (MATCHFLAG(F_TAGS)) {
			/* don't output leading or trailing commas */
			p = cur->tags;
			while (*p == ',')
				p++;
			q = p + strlen(p);
			while(q > p && q[-1] == ',')
				q--;
			appendfield(pathlast, "tags=%.*s", (int)(q - p), p);
		}
		puts(pathlast ? vispath(path) : "");

		if (cur->child)
			dump_nodes(path, cur->child, pathlast);
	}
}

/*
 * vispath --
 *	strsvis(3) encodes path, which must not be longer than MAXPATHLEN
 *	characters long, and returns a pointer to a static buffer containing
 *	the result.
 */
char *
vispath(const char *path)
{
	const char extra[] = { ' ', '\t', '\n', '\\', '#', '\0' };
	static char pathbuf[4*MAXPATHLEN + 1];

	strsvis(pathbuf, path, VIS_CSTYLE, extra);
	return(pathbuf);
}
#endif /* ndef GNUPORT */


static dev_t
parsedev(char *arg)
{
#define MAX_PACK_ARGS	3
	u_long	numbers[MAX_PACK_ARGS];
	char	*p, *ep, *dev;
	int	argc;
	pack_t	*pack;
	dev_t	result;
	const char *error = NULL;

	if ((dev = strchr(arg, ',')) != NULL) {
		*dev++='\0';
		if ((pack = pack_find(arg)) == NULL)
			mtree_err("unknown format `%s'", arg);
		argc = 0;
		while ((p = strsep(&dev, ",")) != NULL) {
			if (*p == '\0')
				mtree_err("missing number");
			numbers[argc++] = strtoul(p, &ep, 0);
			if (*ep != '\0')
				mtree_err("invalid number `%s'",
				    p);
			if (argc > MAX_PACK_ARGS)
				mtree_err("too many arguments");
		}
		if (argc < 2)
			mtree_err("not enough arguments");
		result = (*pack)(argc, numbers, &error);
		if (error != NULL)
			mtree_err("%s", error);
	} else {
		result = (dev_t)strtoul(arg, &ep, 0);
		if (*ep != '\0')
			mtree_err("invalid device `%s'", arg);
	}
	return (result);
}

static void
replacenode(NODE *cur, NODE *new)
{

#define REPLACE(x)	cur->x = new->x
#define REPLACESTR(x)	REPLACEPTR(cur->x,new->x)

	if (cur->type != new->type) {
		if (mtree_Mflag) {
				/*
				 * merge entries with different types; we
				 * don't want children retained in this case.
				 */
			REPLACE(type);
			free_nodes(cur->child);
			cur->child = NULL;
		} else {
			mtree_err(
			    "existing entry for `%s', type `%s'"
			    " does not match type `%s'",
			    cur->name, nodetype(cur->type),
			    nodetype(new->type));
		}
	}

	REPLACE(st_size);
	REPLACE(st_mtimespec);
	REPLACESTR(slink);
	if (cur->slink != NULL) {
		if ((cur->slink = strdup(new->slink)) == NULL)
			mtree_err("memory allocation error");
		if (strunvis(cur->slink, new->slink) == -1)
			mtree_err("strunvis failed on `%s'", new->slink);
		free(new->slink);
	}
	REPLACE(st_uid);
	REPLACE(st_gid);
	REPLACE(st_mode);
	REPLACE(st_rdev);
	REPLACE(st_flags);
	REPLACE(st_nlink);
	REPLACE(cksum);
	REPLACESTR(md5digest);
	REPLACESTR(rmd160digest);
	REPLACESTR(sha1digest);
	REPLACESTR(sha256digest);
	REPLACESTR(sha384digest);
	REPLACESTR(sha512digest);
	REPLACESTR(tags);
	REPLACE(lineno);
	REPLACE(flags);
	free(new);
}

static void
set(char *t, NODE *ip)
{
	int	type, value, len;
	gid_t	gid;
	uid_t	uid;
	char	*kw, *val, *md, *ep;
	void	*m;

	while ((kw = strsep(&t, "= \t")) != NULL) {
		if (*kw == '\0')
			continue;
		if (strcmp(kw, "all") == 0)
			mtree_err("invalid keyword `all'");
		ip->flags |= type = parsekey(kw, &value);
		if (!value)
			/* Just set flag bit (F_IGN and F_OPT) */
			continue;
		while ((val = strsep(&t, " \t")) != NULL && *val == '\0')
			continue;
		if (val == NULL)
			mtree_err("missing value");
		switch (type) {
		case F_CKSUM:
			ip->cksum = strtoul(val, &ep, 10);
			if (*ep)
				mtree_err("invalid checksum `%s'", val);
			break;
		case F_DEV:
			ip->st_rdev = parsedev(val);
			break;
		case F_FLAGS:
#ifndef GNUPORT
			if (strcmp("none", val) == 0)
				ip->st_flags = 0;
			else if (string_to_flags(&val, &ip->st_flags, NULL)
			    != 0)
				mtree_err("invalid flag `%s'", val);
#endif
			break;
		case F_GID:
			ip->st_gid = (gid_t)strtoul(val, &ep, 10);
			if (*ep)
				mtree_err("invalid gid `%s'", val);
			break;
		case F_GNAME:
			if (mtree_Wflag)	/* don't parse if whacking */
				break;
			if (gid_from_group(val, &gid) == -1)
				mtree_err("unknown group `%s'", val);
			ip->st_gid = gid;
			break;
		case F_MD5:
			if (val[0]=='0' && val[1]=='x')
				md=&val[2];
			else
				md=val;
			if ((ip->md5digest = strdup(md)) == NULL)
				mtree_err("memory allocation error");
			break;
		case F_MODE:
			if ((m = setmode(val)) == NULL)
				mtree_err("cannot set file mode `%s' (%s)",
				    val, strerror(errno));
			ip->st_mode = getmode(m, 0);
			free(m);
			break;
		case F_NLINK:
			ip->st_nlink = (nlink_t)strtoul(val, &ep, 10);
			if (*ep)
				mtree_err("invalid link count `%s'", val);
			break;
		case F_RMD160:
			if (val[0]=='0' && val[1]=='x')
				md=&val[2];
			else
				md=val;
			if ((ip->rmd160digest = strdup(md)) == NULL)
				mtree_err("memory allocation error");
			break;
		case F_SHA1:
			if (val[0]=='0' && val[1]=='x')
				md=&val[2];
			else
				md=val;
			if ((ip->sha1digest = strdup(md)) == NULL)
				mtree_err("memory allocation error");
			break;
		case F_SIZE:
			ip->st_size = (off_t)strtoll(val, &ep, 10);
			if (*ep)
				mtree_err("invalid size `%s'", val);
			break;
		case F_SLINK:
			if ((ip->slink = strdup(val)) == NULL)
				mtree_err("memory allocation error");
			if (strunvis(ip->slink, val) == -1)
				mtree_err("strunvis failed on `%s'", val);
			break;
		case F_TAGS:
			len = strlen(val) + 3;	/* "," + str + ",\0" */
			if ((ip->tags = malloc(len)) == NULL)
				mtree_err("memory allocation error");
			snprintf(ip->tags, len, ",%s,", val);
			break;
		case F_TIME:
			ip->st_mtimespec.tv_sec =
			    (time_t)strtoll(val, &ep, 10);
			if (*ep != '.')
				mtree_err("invalid time `%s'", val);
			val = ep + 1;
			ip->st_mtimespec.tv_nsec = strtol(val, &ep, 10);
			if (*ep)
				mtree_err("invalid time `%s'", val);
			break;
		case F_TYPE:
			ip->type = parsetype(val);
			break;
		case F_UID:
			ip->st_uid = (uid_t)strtoul(val, &ep, 10);
			if (*ep)
				mtree_err("invalid uid `%s'", val);
			break;
		case F_UNAME:
			if (mtree_Wflag)	/* don't parse if whacking */
				break;
			if (uid_from_user(val, &uid) == -1)
				mtree_err("unknown user `%s'", val);
			ip->st_uid = uid;
			break;
		case F_SHA256:
			if (val[0]=='0' && val[1]=='x')
				md=&val[2];
			else
				md=val;
			if ((ip->sha256digest = strdup(md)) == NULL)
				mtree_err("memory allocation error");
			break;
		case F_SHA384:
			if (val[0]=='0' && val[1]=='x')
				md=&val[2];
			else
				md=val;
			if ((ip->sha384digest = strdup(md)) == NULL)
				mtree_err("memory allocation error");
			break;
		case F_SHA512:
			if (val[0]=='0' && val[1]=='x')
				md=&val[2];
			else
				md=val;
			if ((ip->sha512digest = strdup(md)) == NULL)
				mtree_err("memory allocation error");
			break;
		default:
			mtree_err(
			    "set(): unsupported key type 0x%x (INTERNAL ERROR)",
			    type);
			/* NOTREACHED */
		}
	}
}

static void
unset(char *t, NODE *ip)
{
	char *p;

	while ((p = strsep(&t, " \t")) != NULL) {
		if (*p == '\0')
			continue;
		ip->flags &= ~parsekey(p, NULL);
	}
}

/*
 * addchild --
 *	Add the centry node as a child of the pathparent node.	If
 *	centry is a duplicate, call replacenode().  If centry is not
 *	a duplicate, insert it into the linked list referenced by
 *	pathparent->child.  Keep the list sorted if Sflag is set.
 */
static void
addchild(NODE *pathparent, NODE *centry)
{
	NODE *samename;      /* node with the same name as centry */
	NODE *replacepos;    /* if non-NULL, centry should replace this node */
	NODE *insertpos;     /* if non-NULL, centry should be inserted
			      * after this node */
	NODE *cur;           /* for stepping through the list */
	NODE *last;          /* the last node in the list */
	int cmp;

	samename = NULL;
	replacepos = NULL;
	insertpos = NULL;
	last = NULL;
	cur = pathparent->child;
	if (cur == NULL) {
		/* centry is pathparent's first and only child node so far */
		pathparent->child = centry;
		return;
	}

	/*
	 * pathparent already has at least one other child, so add the
	 * centry node to the list.
	 *
	 * We first scan through the list looking for an existing node
	 * with the same name (setting samename), and also looking
	 * for the correct position to replace or insert the new node
	 * (setting replacepos and/or insertpos).
	 */
	for (; cur != NULL; last = cur, cur = cur->next) {
		if (strcmp(centry->name, cur->name) == 0) {
			samename = cur;
		}
		if (mtree_Sflag) {
			cmp = nodecmp(centry, cur);
			if (cmp == 0) {
				replacepos = cur;
			} else if (cmp > 0) {
				insertpos = cur;
			}
		}
	}
	if (! mtree_Sflag) {
		if (samename != NULL) {
			/* replace node with same name */
			replacepos = samename;
		} else {
			/* add new node at end of list */
			insertpos = last;
		}
	}

	if (samename != NULL) {
		/*
		 * We found a node with the same name above.  Call
		 * replacenode(), which will either exit with an error,
		 * or replace the information in the samename node and
		 * free the information in the centry node.
		 */
		replacenode(samename, centry);
		if (samename == replacepos) {
			/* The just-replaced node was in the correct position */
			return;
		}
		if (samename == insertpos || samename->prev == insertpos) {
			/*
			 * We thought the new node should be just before
			 * or just after the replaced node, but that would
			 * be equivalent to just retaining the replaced node.
			 */
			return;
		}

		/*
		 * The just-replaced node is in the wrong position in
		 * the list.  This can happen if sort order depends on
		 * criteria other than the node name.
		 *
		 * Make centry point to the just-replaced node.	 Unlink
		 * the just-replaced node from the list, and allow it to
		 * be insterted in the correct position later.
		 */
		centry = samename;
		if (centry->prev)
			centry->prev->next = centry->next;
		else {
			/* centry->next is the new head of the list */
			pathparent->child = centry->next;
			assert(centry->next != NULL);
		}
		if (centry->next)
			centry->next->prev = centry->prev;
		centry->prev = NULL;
		centry->next = NULL;
	}

	if (insertpos == NULL) {
		/* insert centry at the beginning of the list */
		pathparent->child->prev = centry;
		centry->next = pathparent->child;
		centry->prev = NULL;
		pathparent->child = centry;
	} else {
		/* insert centry into the list just after insertpos */
		centry->next = insertpos->next;
		insertpos->next = centry;
		centry->prev = insertpos;
		if (centry->next)
			centry->next->prev = centry;
	}
	return;
}

/*
 * nodecmp --
 *	used as a comparison function by addchild() to control the order
 *	in which entries appear within a list of sibling nodes.	 We make
 *	directories sort after non-directories, but otherwise sort in
 *	strcmp() order.
 *
 * Keep this in sync with dcmp() in create.c.
 */
static int
nodecmp(const NODE *a, const NODE *b)
{

	if ((a->type & F_DIR) != 0) {
		if ((b->type & F_DIR) == 0)
			return 1;
	} else if ((b->type & F_DIR) != 0)
		return -1;
	return strcmp(a->name, b->name);
}
@


1.13
log
@do not use libbsd, even on Debian (collapse FEDORA into GNUPORT):
it’ll RSN ship an incompatible strnvis() and strnunvis() from,
incidentally, NetBSD®… (and has fgetln/fparseln issues)
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.12 2010/03/16 21:28:26 tg Exp $ */
d82 1
a82 1
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.12 2010/03/16 21:28:26 tg Exp $");
d112 5
@


1.12
log
@put some better portability in here, which was overlooked since
we pull in <bsd/bsd.h> from libbsd on Debian, but Fedora didn’t
have libbsd
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.11 2010/03/07 00:17:08 tg Exp $ */
d68 1
a68 2
#if defined(__MirBSD__) || defined(DEBIAN)
#ifdef DEBIAN
d72 2
d82 1
a82 1
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.11 2010/03/07 00:17:08 tg Exp $");
d101 1
a101 1
#ifndef DEBIAN
d108 1
a108 1
#if defined(__MirBSD__) || defined(DEBIAN)
d123 1
a123 1
#ifndef DEBIAN
d307 1
a307 1
#ifndef DEBIAN
d443 1
a443 1
#endif /* ndef DEBIAN */
d571 1
a571 1
#ifndef DEBIAN
@


1.11
log
@appropriate ifdefs
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.10 2010/03/06 20:40:27 tg Exp $ */
d5 1
a5 1
 * Copyright (c) 2009
d69 4
d81 1
a81 1
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.10 2010/03/06 20:40:27 tg Exp $");
@


1.10
log
@sync and fix
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.9 2009/07/23 19:32:27 tg Exp $ */
d77 1
a77 1
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.9 2009/07/23 19:32:27 tg Exp $");
d118 1
d121 1
@


1.9
log
@apply fixes, missing includes, and Debian compatibility glue to makefs(8);
create an initial, experimental Debian source package for it for Luca Fav.
@
text
@d1 2
a2 2
/**	$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.8 2008/10/31 21:36:40 tg Exp $ */
/*	$NetBSD: spec.c,v 1.65 2008/04/28 20:24:17 martin Exp $	*/
d77 2
a78 2
__RCSID("$NetBSD: spec.c,v 1.65 2008/04/28 20:24:17 martin Exp $");
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.8 2008/10/31 21:36:40 tg Exp $");
d85 1
d90 1
d110 1
d116 4
d211 1
a211 1
					    strerror(ENOENT));
d244 1
a244 1
				 * full path entry
d247 2
a248 23
			cur = pathparent->child;
			if (cur == NULL) {
				pathparent->child = centry;
				last = centry;
			} else {
				for (; cur != NULL; cur = cur->next) {
					if (strcmp(cur->name, centry->name)
					    == 0) {
						/* existing entry; replace */
						replacenode(cur, centry);
						break;
					}
					if (cur->next == NULL) {
						/* last entry; add new */
						cur->next = centry;
						centry->prev = cur;
						break;
					}
				}
				last = cur;
				while (last->next != NULL)
					last = last->next;
			}
d256 2
a257 2
				 * new relative child
				 * (no duplicate check)
d260 2
a261 1
			last = last->child = centry;
d264 3
a266 2
				 * relative entry, up one directory
				 * (no duplicate check)
d269 2
a270 2
			centry->prev = last;
			last = last->next = centry;
d302 21
d335 1
d343 1
a343 1
		    >= sizeof(path))
d347 1
a347 1
			printf("%s ", vispath(path));
d351 1
a351 1
			printf("type=%s ", nodetype(cur->type));
d355 1
a355 1
				printf("uname=%s ", name);
d357 1
a357 1
				printf("uid=%u ", cur->st_uid);
d362 1
a362 1
				printf("gname=%s ", name);
d364 1
a364 1
				printf("gid=%u ", cur->st_gid);
d367 1
a367 1
			printf("mode=%#o ", cur->st_mode);
d370 1
a370 1
			printf("device=%#x ", (unsigned int)cur->st_rdev);
d372 1
a372 1
			printf("nlink=%d ", cur->st_nlink);
d374 1
a374 1
			printf("link=%s ", vispath(cur->slink));
d376 1
a376 1
			printf("size=%lld ", (long long)cur->st_size);
d378 2
a379 1
			printf("time=%ld.%ld ", (long)cur->st_mtimespec.tv_sec,
d382 1
a382 1
			printf("cksum=%lu ", cur->cksum);
d384 1
a384 1
			printf("md5=%s ", cur->md5digest);
d386 1
a386 1
			printf("rmd160=%s ", cur->rmd160digest);
d388 1
a388 1
			printf("sha1=%s ", cur->sha1digest);
d390 1
a390 1
			printf("sha256=%s ", cur->sha256digest);
d392 1
a392 1
			printf("sha384=%s ", cur->sha384digest);
d394 1
a394 1
			printf("sha512=%s ", cur->sha512digest);
d397 1
a397 1
			printf("flags=%s ", str);
d401 1
a401 1
			printf("ignore ");
d403 11
a413 3
			printf("optional ");
		if (MATCHFLAG(F_TAGS))
			printf("tags=%s ", cur->tags);
d469 1
a469 1
			mtree_err(error);
d639 1
a639 1
			    (time_t)strtoul(val, &ep, 10);
d643 1
a643 1
			ip->st_mtimespec.tv_nsec = strtoul(val, &ep, 10);
d706 143
@


1.8
log
@kill strcpy(3)
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.7 2008/10/31 21:24:26 tg Exp $ */
d5 2
d68 1
a68 1
#ifdef __MirBSD__
d78 1
a78 1
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.7 2008/10/31 21:24:26 tg Exp $");
d94 1
d96 1
d101 1
a101 1
#ifdef __MirBSD__
d312 1
d360 1
a360 1
			printf("device=%#x ", cur->st_rdev);
d417 1
d545 1
d551 1
@


1.7
log
@build with __CRAZY=Yes
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.6 2008/10/31 19:45:31 tg Exp $ */
d76 1
a76 1
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.6 2008/10/31 19:45:31 tg Exp $");
d210 1
a210 1
		if ((centry = calloc(1, sizeof(NODE) + strlen(p))) == NULL)
d214 2
a215 1
		strcpy(centry->name, p);
@


1.6
log
@now make it compile without -Wno-error
@
text
@d1 1
a1 1
/**	$MirOS$ */
d76 1
a76 1
__IDSTRING(mbsdid, "$MirOS$");
d325 1
a325 1
		if (snprintf(path, sizeof(path), "%s%s%s",
@


1.5
log
@bring MAIN branch into the pristine TNF state for reverse-merging
@
text
@d1 1
d66 4
d76 1
d97 4
@


1.4
log
@__CRAZY=Yes cleanup… can't they even use compiler warnings…
cruel netbsd code *sigh*
@
text
@d1 1
a1 1
/*	$NetBSD: spec.c,v 1.62 2006/04/12 19:49:59 dsl Exp $	*/
a46 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d66 7
a72 3
__SCCSID("@@(#)spec.c	8.2 (Berkeley) 4/28/95");
__RCSID("$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.3 2006/09/21 20:16:23 tg Exp $");
__RCSID("$NetBSD: spec.c,v 1.62 2006/04/12 19:49:59 dsl Exp $");
a89 3
#include "pwcache.h"

__RCSID("$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.3 2006/09/21 20:16:23 tg Exp $");
d118 1
a118 1
		FPARSELN_UNESCCOMM | FPARSELN_UNESCCONT | FPARSELN_UNESCESC));
d204 1
a204 1
		strlcpy(centry->name, p, sizeof (centry->name));
d309 1
d315 1
a315 1
		if ((size_t)snprintf(path, sizeof(path), "%s%s%s",
d328 1
a328 1
			    (name = __nbcompat_user_from_uid(cur->st_uid, 1)) != NULL)
d335 1
a335 1
			    (name = __nbcompat_group_from_gid(cur->st_gid, 1)) != NULL)
d368 5
a372 3
		if (MATCHFLAG(F_FLAGS))
			printf("flags=%s ",
			    flags_to_string(cur->st_flags, "none"));
@


1.3
log
@get rid of strcpy, strcat and sprintf
XXX should add bounded attributes

bad bad TNF
@
text
@d74 1
a74 1
__RCSID("$MirOS$");
a92 3

#define	group_from_gid	__nbcompat_group_from_gid
#define	user_from_uid	__nbcompat_user_from_uid
d95 1
a95 1
__RCSID("$MirOS: src/usr.sbin/makefs/nbsrc/usr.sbin/mtree/spec.c,v 1.2 2006/07/05 20:08:35 tg Exp $");
d320 1
a320 1
		if (snprintf(path, sizeof(path), "%s%s%s",
@


1.2
log
@build
@
text
@d73 2
a74 4
#if 0
#if 0
static char sccsid[] = "@@(#)spec.c	8.2 (Berkeley) 4/28/95";
#else
a75 2
#endif
#endif /* not lint */
d98 1
a98 1
__RCSID("$MirOS$");
d213 1
a213 1
		strcpy(centry->name, p);
@


1.1
log
@Initial revision
@
text
@d73 1
a73 1
#if defined(__RCSID) && !defined(lint)
d98 6
d340 1
a340 1
			    (name = user_from_uid(cur->st_uid, 1)) != NULL)
d347 1
a347 1
			    (name = group_from_gid(cur->st_gid, 1)) != NULL)
@


1.1.3.1
log
@we _do_ need some mtree stuff
@
text
@@


1.1.3.2
log
@Import NetBSD®-current (just after or at the 5.0 branch) makefs(8)
and subtree required to build it in MirBSD
@
text
@d1 1
a1 1
/*	$NetBSD: spec.c,v 1.65 2008/04/28 20:24:17 martin Exp $	*/
d47 7
d77 1
a77 1
__RCSID("$NetBSD: spec.c,v 1.65 2008/04/28 20:24:17 martin Exp $");
d125 1
a125 1
		FPARSELN_UNESCCOMM));
a315 1
	char	*str;
d374 3
a376 5
		if (MATCHFLAG(F_FLAGS)) {
			str = flags_to_string(cur->st_flags, "none");
			printf("flags=%s ", str);
			free(str);
		}
@


1.1.3.3
log
@sync with TNF
@
text
@d1 1
a1 1
/*	$NetBSD: spec.c,v 1.78 2009/09/22 04:38:21 apb Exp $	*/
d70 1
a70 1
__RCSID("$NetBSD: spec.c,v 1.78 2009/09/22 04:38:21 apb Exp $");
a76 1
#include <assert.h>
a80 1
#include <stdarg.h>
a93 1
int	mtree_Sflag;			/* Sort entries */
a98 3
static	void	addchild(NODE *, NODE *);
static	int	nodecmp(const NODE *, const NODE *);
static	int	appendfield(int, const char *, ...);
d190 1
a190 1
					"missing directory in specification");
d222 1
a222 1
				 * full path entry; add or replace
d225 23
a247 2
			addchild(pathparent, centry);
			last = centry;
d255 2
a256 2
				 * new relative child in current dir;
				 * add or replace
d259 1
a259 2
			addchild(last, centry);
			last = centry;
d262 2
a263 3
				 * new relative child in parent dir
				 * (after encountering ".." entry);
				 * add or replace
d266 2
a267 2
			addchild(last->parent, centry);
			last = centry;
a297 21
 * appendfield --
 *	Like printf(), but output a space either before or after
 *	the regular output, according to the pathlast flag.
 */
static int
appendfield(int pathlast, const char *fmt, ...)
{
	va_list ap;
	int result;

	va_start(ap, fmt);
	if (!pathlast)
		printf(" ");
	result = vprintf(fmt, ap);
	if (pathlast)
		printf(" ");
	va_end(ap);
	return result;
}

/*
a309 1
	char	*p, *q;
d317 1
a317 1
		    >= (int)sizeof(path))
d321 1
a321 1
			printf("%s", vispath(path));
d325 1
a325 1
			appendfield(pathlast, "type=%s", nodetype(cur->type));
d329 1
a329 1
				appendfield(pathlast, "uname=%s", name);
d331 1
a331 1
				appendfield(pathlast, "uid=%u", cur->st_uid);
d336 1
a336 1
				appendfield(pathlast, "gname=%s", name);
d338 1
a338 1
				appendfield(pathlast, "gid=%u", cur->st_gid);
d341 1
a341 1
			appendfield(pathlast, "mode=%#o", cur->st_mode);
d344 1
a344 1
			appendfield(pathlast, "device=%#llx", (long long)cur->st_rdev);
d346 1
a346 1
			appendfield(pathlast, "nlink=%d", cur->st_nlink);
d348 1
a348 1
			appendfield(pathlast, "link=%s", vispath(cur->slink));
d350 1
a350 1
			appendfield(pathlast, "size=%lld", (long long)cur->st_size);
d352 1
a352 2
			appendfield(pathlast, "time=%lld.%ld ",
			    (long long)cur->st_mtimespec.tv_sec,
d355 1
a355 1
			appendfield(pathlast, "cksum=%lu", cur->cksum);
d357 1
a357 1
			appendfield(pathlast, "md5=%s", cur->md5digest);
d359 1
a359 1
			appendfield(pathlast, "rmd160=%s", cur->rmd160digest);
d361 1
a361 1
			appendfield(pathlast, "sha1=%s", cur->sha1digest);
d363 1
a363 1
			appendfield(pathlast, "sha256=%s", cur->sha256digest);
d365 1
a365 1
			appendfield(pathlast, "sha384=%s", cur->sha384digest);
d367 1
a367 1
			appendfield(pathlast, "sha512=%s", cur->sha512digest);
d370 1
a370 1
			appendfield(pathlast, "flags=%s", str);
d374 1
a374 1
			appendfield(pathlast, "ignore");
d376 3
a378 11
			appendfield(pathlast, "optional");
		if (MATCHFLAG(F_TAGS)) {
			/* don't output leading or trailing commas */
			p = cur->tags;
			while (*p == ',')
				p++;
			q = p + strlen(p);
			while(q > p && q[-1] == ',')
				q--;
			appendfield(pathlast, "tags=%.*s", (int)(q - p), p);
		}
d433 1
a433 1
			mtree_err("%s", error);
d601 1
a601 1
			    (time_t)strtoll(val, &ep, 10);
d605 1
a605 1
			ip->st_mtimespec.tv_nsec = strtol(val, &ep, 10);
a667 143

/*
 * addchild --
 *	Add the centry node as a child of the pathparent node.	If
 *	centry is a duplicate, call replacenode().  If centry is not
 *	a duplicate, insert it into the linked list referenced by
 *	pathparent->child.  Keep the list sorted if Sflag is set.
 */
static void
addchild(NODE *pathparent, NODE *centry)
{
	NODE *samename;      /* node with the same name as centry */
	NODE *replacepos;    /* if non-NULL, centry should replace this node */
	NODE *insertpos;     /* if non-NULL, centry should be inserted
			      * after this node */
	NODE *cur;           /* for stepping through the list */
	NODE *last;          /* the last node in the list */
	int cmp;

	samename = NULL;
	replacepos = NULL;
	insertpos = NULL;
	last = NULL;
	cur = pathparent->child;
	if (cur == NULL) {
		/* centry is pathparent's first and only child node so far */
		pathparent->child = centry;
		return;
	}

	/*
	 * pathparent already has at least one other child, so add the
	 * centry node to the list.
	 *
	 * We first scan through the list looking for an existing node
	 * with the same name (setting samename), and also looking
	 * for the correct position to replace or insert the new node
	 * (setting replacepos and/or insertpos).
	 */
	for (; cur != NULL; last = cur, cur = cur->next) {
		if (strcmp(centry->name, cur->name) == 0) {
			samename = cur;
		}
		if (mtree_Sflag) {
			cmp = nodecmp(centry, cur);
			if (cmp == 0) {
				replacepos = cur;
			} else if (cmp > 0) {
				insertpos = cur;
			}
		}
	}
	if (! mtree_Sflag) {
		if (samename != NULL) {
			/* replace node with same name */
			replacepos = samename;
		} else {
			/* add new node at end of list */
			insertpos = last;
		}
	}

	if (samename != NULL) {
		/*
		 * We found a node with the same name above.  Call
		 * replacenode(), which will either exit with an error,
		 * or replace the information in the samename node and
		 * free the information in the centry node.
		 */
		replacenode(samename, centry);
		if (samename == replacepos) {
			/* The just-replaced node was in the correct position */
			return;
		}
		if (samename == insertpos || samename->prev == insertpos) {
			/*
			 * We thought the new node should be just before
			 * or just after the replaced node, but that would
			 * be equivalent to just retaining the replaced node.
			 */
			return;
		}

		/*
		 * The just-replaced node is in the wrong position in
		 * the list.  This can happen if sort order depends on
		 * criteria other than the node name.
		 *
		 * Make centry point to the just-replaced node.	 Unlink
		 * the just-replaced node from the list, and allow it to
		 * be insterted in the correct position later.
		 */
		centry = samename;
		if (centry->prev)
			centry->prev->next = centry->next;
		else {
			/* centry->next is the new head of the list */
			pathparent->child = centry->next;
			assert(centry->next != NULL);
		}
		if (centry->next)
			centry->next->prev = centry->prev;
		centry->prev = NULL;
		centry->next = NULL;
	}

	if (insertpos == NULL) {
		/* insert centry at the beginning of the list */
		pathparent->child->prev = centry;
		centry->next = pathparent->child;
		centry->prev = NULL;
		pathparent->child = centry;
	} else {
		/* insert centry into the list just after insertpos */
		centry->next = insertpos->next;
		insertpos->next = centry;
		centry->prev = insertpos;
		if (centry->next)
			centry->next->prev = centry;
	}
	return;
}

/*
 * nodecmp --
 *	used as a comparison function by addchild() to control the order
 *	in which entries appear within a list of sibling nodes.	 We make
 *	directories sort after non-directories, but otherwise sort in
 *	strcmp() order.
 *
 * Keep this in sync with dcmp() in create.c.
 */
static int
nodecmp(const NODE *a, const NODE *b)
{

	if ((a->type & F_DIR) != 0) {
		if ((b->type & F_DIR) == 0)
			return 1;
	} else if ((b->type & F_DIR) != 0)
		return -1;
	return strcmp(a->name, b->name);
}
@


