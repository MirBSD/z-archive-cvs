head	1.11;
access;
symbols
	cvs-200810311900:1.1.3.2
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	cvs-200607051500:1.1.3.1
	netbsd:1.1.3;
locks; strict;
comment	@ * @;


1.11
date	2019.01.05.16.02.28;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005C30D4FC04E81E4A;

1.10
date	2010.03.06.23.24.17;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004B92E431600E22B7;

1.9
date	2009.07.23.19.32.26;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004A68BAC01D44054A;

1.8
date	2008.10.31.21.48.19;	author tg;	state Exp;
branches;
next	1.7;
commitid	100490B7D2F28739704;

1.7
date	2008.10.31.21.00.18;	author tg;	state Exp;
branches;
next	1.6;
commitid	100490B71E8774D0F2E;

1.6
date	2008.10.31.19.38.20;	author tg;	state Exp;
branches;
next	1.5;
commitid	100490B5EBD4D5B2D76;

1.5
date	2008.10.31.19.11.35;	author tg;	state Exp;
branches;
next	1.4;
commitid	100490B58676FCB2D2F;

1.4
date	2006.07.05.21.12.12;	author tg;	state Exp;
branches;
next	1.3;
commitid	10044AC2B395EF83441;

1.3
date	2006.07.05.20.27.24;	author tg;	state Exp;
branches;
next	1.2;
commitid	10044AC20BE2BD1E6FF;

1.2
date	2006.07.05.20.08.35;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044AC1C596F24EF83;

1.1
date	2006.07.05.17.17.39;	author tg;	state Exp;
branches
	1.1.3.1;
next	;
commitid	10044ABF4441001D725;

1.1.3.1
date	2006.07.05.17.17.39;	author tg;	state Exp;
branches;
next	1.1.3.2;
commitid	10044ABF4441001D725;

1.1.3.2
date	2008.10.31.19.06.04;	author tg;	state Exp;
branches;
next	;
commitid	100490B57202F143953;


desc
@@


1.11
log
@do not use libbsd, even on Debian (collapse FEDORA into GNUPORT):
it’ll RSN ship an incompatible strnvis() and strnunvis() from,
incidentally, NetBSD®… (and has fgetln/fparseln issues)
@
text
@/**	$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/stdlib/strsuftoll.c,v 1.10 2010/03/06 23:24:17 tg Exp $ */
/*	$NetBSD: strsuftoll.c,v 1.8 2008/04/28 20:23:00 martin Exp $	*/
/*-
 * Copyright (c) 2009
 *	Thorsten Glaser <tg@@mirbsd.org>
 * Copyright (c) 2001-2002,2004 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Luke Mewburn.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*-
 * Copyright (c) 1991, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Keith Muller of the University of California, San Diego and Lance
 * Visser of Convex Computer Corporation.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if HAVE_NBTOOL_CONFIG_H
#include "nbtool_config.h"
#endif

#if defined(__MirBSD__) || defined(GNUPORT)
#include "mbsdtree.h"
#endif

#include <sys/cdefs.h>

#if defined(LIBC_SCCS) && !defined(lint)
__RCSID("$NetBSD: strsuftoll.c,v 1.8 2008/04/28 20:23:00 martin Exp $");
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/stdlib/strsuftoll.c,v 1.10 2010/03/06 23:24:17 tg Exp $");
#endif /* LIBC_SCCS and not lint */

#ifdef _LIBC
#include "namespace.h"
#endif

#if !HAVE_STRSUFTOLL

#include <sys/types.h>
#include <sys/time.h>

#include <assert.h>
#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef _LIBC
# ifdef __weak_alias
__weak_alias(strsuftoll, _strsuftoll)
__weak_alias(strsuftollx, _strsuftollx)
# endif
#endif /* LIBC */

/*
 * Convert an expression of the following forms to a (u)int64_t.
 * 	1) A positive decimal number.
 *	2) A positive decimal number followed by a b (mult by 512).
 *	3) A positive decimal number followed by a k (mult by 1024).
 *	4) A positive decimal number followed by a m (mult by 1048576).
 *	5) A positive decimal number followed by a g (mult by 1073741824).
 *	6) A positive decimal number followed by a t (mult by 1099511627776).
 *	7) A positive decimal number followed by a w (mult by sizeof int)
 *	8) Two or more positive decimal numbers (with/without k,b or w).
 *	   separated by x (also * for backwards compatibility), specifying
 *	   the product of the indicated values.
 * Returns the result upon successful conversion, or exits with an
 * appropriate error.
 *
 */
/* LONGLONG */
long long
strsuftoll(const char *desc, const char *val,
    long long min, long long max)
{
	long long result;
	char	errbuf[100];

	result = strsuftollx(desc, val, min, max, errbuf, sizeof(errbuf));
	if (*errbuf != '\0')
		errx(1, "%s", errbuf);
	return (result);
}

/*
 * As strsuftoll(), but returns the error message into the provided buffer
 * rather than exiting with it.
 */
/* LONGLONG */
long long
strsuftollx(const char *desc, const char *val,
    long long min, long long max, char *ebuf, size_t ebuflen)
{
	long long num, t;
	char	*expr;

	_DIAGASSERT(desc != NULL);
	_DIAGASSERT(val != NULL);
	_DIAGASSERT(ebuf != NULL);

	errno = 0;
	ebuf[0] = '\0';

	while (isspace((unsigned char)*val))	/* Skip leading space */
		val++;

	if (*val == '0')
		num = strtoll(val, &expr, 0);
	else
		num = strtoll(val, &expr, 10);
	if (errno == ERANGE)
		goto erange;			/* Overflow */

	if (expr == val)			/* No digits */
		goto badnum;

	switch (*expr) {
	case 'b':
		t = num;
		num *= 512;			/* 1 block */
		if (t > num)
			goto erange;
		++expr;
		break;
	case 'k':
		t = num;
		num *= 1024;			/* 1 kibibyte */
		if (t > num)
			goto erange;
		++expr;
		break;
	case 'm':
		t = num;
		num *= 1048576;			/* 1 mebibyte */
		if (t > num)
			goto erange;
		++expr;
		break;
	case 'g':
		t = num;
		num *= 1073741824;		/* 1 gibibyte */
		if (t > num)
			goto erange;
		++expr;
		break;
	case 't':
		t = num;
		num *= 1099511627776LL;		/* 1 tebibyte */
		if (t > num)
			goto erange;
		++expr;
		break;
	case 'w':
		t = num;
		num *= sizeof(int);		/* 1 word */
		if (t > num)
			goto erange;
		++expr;
		break;
	}

	switch (*expr) {
	case '\0':
		break;
	case '*':				/* Backward compatible */
	case 'x':
		t = num;
		num *= strsuftollx(desc, expr + 1, min, max, ebuf, ebuflen);
		if (*ebuf != '\0')
			return (0);
		if (t > num) {
 erange:
			snprintf(ebuf, ebuflen,
			    "%s: %s", desc, strerror(ERANGE));
			return (0);
		}
		break;
	default:
 badnum:	snprintf(ebuf, ebuflen,
		    "%s `%s': illegal number", desc, val);
		return (0);
	}
	if (num < min) {
			/* LONGLONG */
		snprintf(ebuf, ebuflen, "%s %lld is less than %lld.",
		    desc, (long long)num, (long long)min);
		return (0);
	}
	if (num > max) {
			/* LONGLONG */
		snprintf(ebuf, ebuflen,
		    "%s %lld is greater than %lld.",
		    desc, (long long)num, (long long)max);
		return (0);
	}
	*ebuf = '\0';
	return (num);
}

#endif /* !HAVE_STRSUFTOLL */
@


1.10
log
@sync © lines
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/stdlib/strsuftoll.c,v 1.9 2009/07/23 19:32:26 tg Exp $ */
d70 1
a70 1
#if defined(__MirBSD__) || defined(DEBIAN)
d78 1
a78 1
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/stdlib/strsuftoll.c,v 1.9 2009/07/23 19:32:26 tg Exp $");
@


1.9
log
@apply fixes, missing includes, and Debian compatibility glue to makefs(8);
create an initial, experimental Debian source package for it for Luca Fav.
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/stdlib/strsuftoll.c,v 1.8 2008/10/31 21:48:19 tg Exp $ */
d4 2
a5 1
 * Copyright (c) 2009 Thorsten Glaser
d78 1
a78 1
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/stdlib/strsuftoll.c,v 1.8 2008/10/31 21:48:19 tg Exp $");
@


1.8
log
@allow suffixes (well, sans ‘b’) with base-0 too
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/stdlib/strsuftoll.c,v 1.7 2008/10/31 21:00:18 tg Exp $ */
d4 1
d69 1
a69 1
#ifdef __MirBSD__
d77 1
a77 1
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/stdlib/strsuftoll.c,v 1.7 2008/10/31 21:00:18 tg Exp $");
d119 1
a119 1
 * 
d222 1
a222 1
 erange:	 	
@


1.7
log
@as a MirOS extension, allow octal and sedecimal numbers,
similar to our strtonum(3) extension
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/stdlib/strsuftoll.c,v 1.6 2008/10/31 19:38:20 tg Exp $ */
d76 1
a76 1
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/stdlib/strsuftoll.c,v 1.6 2008/10/31 19:38:20 tg Exp $");
a165 3
	if (*val == '0')
		goto suffix_done;

a210 1
 suffix_done:
@


1.6
log
@let this compile
@
text
@d1 1
a1 1
/**	$MirOS$ */
d76 1
a76 1
__IDSTRING(mbsdid, "$MirOS$");
d156 4
a159 1
	num = strtoll(val, &expr, 10);
d166 3
d214 1
@


1.5
log
@bring MAIN branch into the pristine TNF state for reverse-merging
@
text
@d1 1
d68 4
d76 1
@


1.4
log
@I don't understand why people don't want hexadecimal... it's so easy
@
text
@d1 1
a1 1
/*	$NetBSD: strsuftoll.c,v 1.6 2004/03/05 05:58:29 lukem Exp $	*/
a16 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d70 1
a70 1
__RCSID("$NetBSD: strsuftoll.c,v 1.6 2004/03/05 05:58:29 lukem Exp $");
a90 2
__RCSID("$MirOS$");

a97 7
/* LONGLONG */
long long strsuftoll(const char *desc, const char *val,
    long long min, long long max);
/* LONGLONG */
long long strsuftollx(const char *desc, const char *val,
    long long min, long long max, char *ebuf, size_t ebuflen);

d150 1
a150 4
	if (*val == '0')
		num = strtoll(val, &expr, 0);
	else
		num = strtoll(val, &expr, 10);
a156 3
	if (*val == '0')
		goto suffix_done;

d167 1
a167 1
		num *= 1024;			/* 1 kilobyte */
d174 1
a174 1
		num *= 1048576;			/* 1 megabyte */
d181 1
a181 1
		num *= 1073741824;		/* 1 gigabyte */
d188 1
a188 1
		num *= 1099511627776LL;		/* 1 terabyte */
a201 1
 suffix_done:
@


1.3
log
@fix missing protos
@
text
@d98 2
d166 4
a169 1
	num = strtoll(val, &expr, 10);
d176 3
d224 1
@


1.2
log
@build
@
text
@d106 3
@


1.1
log
@Initial revision
@
text
@d105 4
@


1.1.3.1
log
@there's more to this than ...
@
text
@@


1.1.3.2
log
@Import NetBSD®-current (just after or at the 5.0 branch) makefs(8)
and subtree required to build it in MirBSD
@
text
@d1 1
a1 1
/*	$NetBSD: strsuftoll.c,v 1.8 2008/04/28 20:23:00 martin Exp $	*/
d17 7
d77 1
a77 1
__RCSID("$NetBSD: strsuftoll.c,v 1.8 2008/04/28 20:23:00 martin Exp $");
d174 1
a174 1
		num *= 1024;			/* 1 kibibyte */
d181 1
a181 1
		num *= 1048576;			/* 1 mebibyte */
d188 1
a188 1
		num *= 1073741824;		/* 1 gibibyte */
d195 1
a195 1
		num *= 1099511627776LL;		/* 1 tebibyte */
@

