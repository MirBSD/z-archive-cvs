head	1.11;
access;
symbols
	cvs-200810311900:1.1.3.1
	MIRBSD_10:1.4.0.2
	MIRBSD_10_BASE:1.4
	cvs-200607051500:1.1.3.1
	netbsd:1.1.3;
locks; strict;
comment	@ * @;


1.11
date	2019.01.05.16.02.28;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005C30D4FC04E81E4A;

1.10
date	2017.08.07.20.19.12;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005988C69344442E37;

1.9
date	2010.03.06.23.24.17;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004B92E431600E22B7;

1.8
date	2009.07.23.19.32.25;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004A68BAC01D44054A;

1.7
date	2008.10.31.21.03.56;	author tg;	state Exp;
branches;
next	1.6;
commitid	100490B72CC39A633FB;

1.6
date	2008.10.31.19.45.30;	author tg;	state Exp;
branches;
next	1.5;
commitid	100490B606B662DF594;

1.5
date	2008.10.31.19.11.35;	author tg;	state Exp;
branches;
next	1.4;
commitid	100490B58676FCB2D2F;

1.4
date	2007.05.19.23.17.49;	author tg;	state Exp;
branches;
next	1.3;
commitid	100464F859F79495987;

1.3
date	2006.07.05.20.27.24;	author tg;	state Exp;
branches;
next	1.2;
commitid	10044AC20BE2BD1E6FF;

1.2
date	2006.07.05.20.08.35;	author tg;	state Exp;
branches;
next	1.1;
commitid	10044AC1C596F24EF83;

1.1
date	2006.07.05.17.17.39;	author tg;	state Exp;
branches
	1.1.3.1;
next	;
commitid	10044ABF4441001D725;

1.1.3.1
date	2006.07.05.17.17.39;	author tg;	state Exp;
branches;
next	;
commitid	10044ABF4441001D725;


desc
@@


1.11
log
@do not use libbsd, even on Debian (collapse FEDORA into GNUPORT):
it’ll RSN ship an incompatible strnvis() and strnunvis() from,
incidentally, NetBSD®… (and has fgetln/fparseln issues)
@
text
@/**	$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/gen/pwcache.h,v 1.10 2017/08/07 20:19:12 tg Exp $ */
/*	$NetBSD: pwcache.h,v 1.5 2003/11/10 08:51:51 wiz Exp $	*/

/*-
 * Copyright (c) 2009
 *	Thorsten Glaser <tg@@mirbsd.org>
 * Copyright (c) 1992 Keith Muller.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Keith Muller of the University of California, San Diego.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      @@(#)cache.h	8.1 (Berkeley) 5/31/93
 */

/*
 * Constants and data structures used to implement group and password file
 * caches. Traditional passwd/group cache routines perform quite poorly with
 * archives. The chances of hitting a valid lookup with an archive is quite a
 * bit worse than with files already resident on the filesystem. These misses
 * create a MAJOR performance cost. To address this problem, these routines
 * cache both hits and misses.
 *
 * NOTE:  name lengths must be as large as those stored in ANY PROTOCOL and
 * as stored in the passwd and group files. CACHE SIZES MUST BE PRIME
 */
#define UNMLEN		32	/* >= user name found in any protocol */
#define GNMLEN		32	/* >= group name found in any protocol */
#define UID_SZ		317	/* size of uid to user_name cache */
#define UNM_SZ		317	/* size of user_name to uid cache */
#define GID_SZ		251	/* size of gid to group_name cache */
#define GNM_SZ		251	/* size of group_name to gid cache */
#define VALID		1	/* entry and name are valid */
#define INVALID		2	/* entry valid, name NOT valid */

/*
 * Node structures used in the user, group, uid, and gid caches.
 */

typedef struct uidc {
	int valid;		/* is this a valid or a miss entry */
	char name[UNMLEN];	/* uid name */
	uid_t uid;		/* cached uid */
} UIDC;

typedef struct gidc {
	int valid;		/* is this a valid or a miss entry */
	char name[GNMLEN];	/* gid name */
	gid_t gid;		/* cached gid */
} GIDC;

#if defined(__MirBSD__) || defined(GNUPORT)
const char *__nbcompat_user_from_uid(uid_t uid, int noname);
const char *__nbcompat_group_from_gid(gid_t gid, int noname);
int uid_from_user(const char *name, uid_t *uid);
int gid_from_group(const char *name, gid_t *gid);
int pwcache_userdb(
	int		(*a_setpassent)(int),
	void		(*a_endpwent)(void),
	struct passwd *	(*a_getpwnam)(const char *),
	struct passwd *	(*a_getpwuid)(uid_t));
int pwcache_groupdb(
	int		(*a_setgroupent)(int),
	void		(*a_endgrent)(void),
	struct group *	(*a_getgrnam)(const char *),
	struct group *	(*a_getgrgid)(gid_t));

#define user_from_uid __nbcompat_user_from_uid
#define group_from_gid __nbcompat_group_from_gid
#endif
@


1.10
log
@filesystem
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/gen/pwcache.h,v 1.9 2010/03/06 23:24:17 tg Exp $ */
d77 1
a77 1
#if defined(__MirBSD__) || defined(DEBIAN)
@


1.9
log
@sync © lines
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/gen/pwcache.h,v 1.8 2009/07/23 19:32:25 tg Exp $ */
d45 1
a45 1
 * bit worse than with files already resident on the file system. These misses
@


1.8
log
@apply fixes, missing includes, and Debian compatibility glue to makefs(8);
create an initial, experimental Debian source package for it for Luca Fav.
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/gen/pwcache.h,v 1.7 2008/10/31 21:03:56 tg Exp $ */
d5 2
a6 1
 * Copyright (c) 2009 Thorsten Glaser.
@


1.7
log
@actually use the nbcompat functions on MirBSD
@
text
@d1 1
a1 1
/**	$MirOS: src/usr.sbin/makefs/nbsrc/lib/libc/gen/pwcache.h,v 1.6 2008/10/31 19:45:30 tg Exp $ */
d5 1
d76 1
a76 1
#ifdef __MirBSD__
@


1.6
log
@now make it compile without -Wno-error
@
text
@d1 1
a1 1
/**	$MirOS$ */
d90 3
@


1.5
log
@bring MAIN branch into the pristine TNF state for reverse-merging
@
text
@d1 1
d74 17
@


1.4
log
@__CRAZY=Yes cleanup… can't they even use compiler warnings…
cruel netbsd code *sigh*
@
text
@a72 15

const char *__nbcompat_user_from_uid(uid_t uid, int noname);
const char *__nbcompat_group_from_gid(gid_t gid, int noname);
int uid_from_user(const char *name, uid_t *uid);
int gid_from_group(const char *name, gid_t *gid);
int pwcache_userdb(
	int		(*a_setpassent)(int),
	void		(*a_endpwent)(void),
	struct passwd *	(*a_getpwnam)(const char *),
	struct passwd *	(*a_getpwuid)(uid_t));
int pwcache_groupdb(
	int		(*a_setgroupent)(int),
	void		(*a_endgrent)(void),
	struct group *	(*a_getgrnam)(const char *),
	struct group *	(*a_getgrgid)(gid_t));
@


1.3
log
@fix missing protos
@
text
@d74 2
a75 2
const char *user_from_uid(uid_t uid, int noname);
const char *group_from_gid(gid_t gid, int noname);
@


1.2
log
@build
@
text
@d76 12
@


1.1
log
@Initial revision
@
text
@d73 3
@


1.1.3.1
log
@there's more to this than ...
@
text
@@
