head	1.2;
access;
symbols
	cvs-201003062040:1.1.3.2
	cvs-200810311900:1.1.3.1
	MIRBSD_10:1.1.3.1.0.2
	MIRBSD_10_BASE:1.1.3.1
	cvs-200607051500:1.1.3.1
	netbsd:1.1.3;
locks; strict;
comment	@# @;


1.2
date	2017.08.07.20.19.09;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005988C69344442E37;

1.1
date	2006.07.05.15.08.36;	author tg;	state Exp;
branches
	1.1.3.1;
next	;
commitid	10044ABD6033365D559;

1.1.3.1
date	2006.07.05.15.08.36;	author tg;	state Exp;
branches;
next	1.1.3.2;
commitid	10044ABD6033365D559;

1.1.3.2
date	2010.03.06.20.44.40;	author tg;	state Exp;
branches;
next	;
commitid	1004B92BEC54F4CD073;


desc
@@


1.2
log
@filesystem
@
text
@$NetBSD: README,v 1.4 2009/01/03 08:25:35 lukem Exp $

makefs - build a filesystem image from a directory tree

NOTES:

    *   This tool uses modified local copies of source found in other
	parts of the tree.  This is intentional.

    *	makefs is a work in progress, and subject to change.


user overview:
--------------

makefs creates a filesystem image from a given directory tree.
the following filesystem types can be built:
	ffs	BSD fast filesystem
	cd9660	ISO 9660 filesystem

Support for the following filesystems maybe be added in the future
	ext2fs	Linux EXT2 filesystem
	fat	MS-DOS `FAT' filesystem (FAT12, FAT16, FAT32)

Various filesystem independent parameters and contraints can be
specified, such as:
	- minimum filesystem size (in KB)
	- maximum filesystem size (in KB)
	- free inodes
	- free blocks (in KB)
	- mtree(8) specification file containing permissions and ownership
	  to use in image, overridding the settings in the directory tree
	- file containing list of files to specifically exclude or include
	- fnmatch(3) pattern of filenames to exclude or include
	- endianness of target filesystem

Filesystem specific parameters can be given as well, with a command
line option such as "-o fsspeccific-options,comma-separated".
For example, ffs would allow tuning of:
	- block & fragment size
	- cylinder groups
	- number of blocks per inode
	- minimum free space

Other filesystems might have controls on how to "munge" file names to
fit within the constraints of the target filesystem.

Exit codes:
	0	all ok
	1	fatal error
	2	some files couldn't be added during image creation
		(bad perms, missing file, etc). image will continue
		to be made


Implementation overview:
------------------------

The implementation must allow for easy addition of extra filesystems
with minimal changes to the filesystem independent sections.

The main program will:
	- parse the options, including calling fs-specific routines to
	  validate fs-specific options
	- walk the tree, building up a data structure which represents
	  the tree to stuff into the image. The structure will
	  probably be a similar tree to what mtree(8) uses internally;
	  a linked list of entries per directory with a child pointer
	  to children of directories. ".." won't be stored in the list;
	  the fs-specific tree walker should add this if required by the fs. 
	  this builder have the smarts to handle hard links correctly.
	- (optionally) Change the permissions in the tree according to
	  the mtree(8) specfile
	- Call an fs-specific routine to build the image based on the
	  data structures.

Each fs-specific module should have the following external interfaces:

    prepare_options	optional filesystem specific defaults that need to be
			setup before parsing fs-specific options.

    parse_options	parse the string for fs-specific options, feeding
			errors back to the user as appropriate

    cleanup_options	optional filesystem specific data that need to be
			cleaned up when done with this filesystem.

    make_fs		take the data structures representing the
			directory tree and fs parameters,
			validate that the parameters are valid
			(e.g, the requested image will be large enough), 
			create the image, and
			populate the image

prepare_options and cleanup_options are optional and can be NULL.

NOTE: All filesystem specific options are referenced via the fs_specific
pointer from the fsinfo_t strucutre. It is up to the filesystem to allocate
and free any data needed for this via the prepare and cleanup callbacks.

Each fs-specific module will need to add it's routines to the dispatch array
in makefs.c and add prototypes for these to makefs.h

All other implementation details should not need to change any of the
generic code.

ffs implementation
------------------

In the ffs case, we can leverage off sbin/newfs/mkfs.c to actually build
the image. When building and populating the image, the implementation
can be greatly simplified if some assumptions are made:
	- the total required size (in blocks and inodes) is determined
	  as part of the validation phase
	- a "file" (including a directory) has a known size, so
	  support for growing a file is not necessary

Two underlying primitives are provided:
	make_inode	create an inode, returning the inode number

	write_file	write file (from memory if DIR, file descriptor
			if FILE or SYMLINK), referencing given inode.
			it is smart enough to know if a short symlink
			can be stuffed into the inode, etc.

When creating a directory, the directory entries in the previously
built tree data structure is scanned and built in memory so it can
be written entirely as a single write_file() operation.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$NetBSD: README,v 1.3 2004/12/20 20:51:42 jmc Exp $
d3 1
a3 1
makefs - build a file system image from a directory tree
d16 8
a23 8
makefs creates a file system image from a given directory tree.
the following file system types can be built:
	ffs	BSD fast file system

Support for the following file systems maybe be added in the future
	ext2fs	Linux EXT2 file system
	fat	MS-DOS `FAT' file system (FAT12, FAT16, FAT32)
	cd9660	ISO 9660 file system
d25 1
a25 1
Various file system independent parameters and contraints can be
d27 2
a28 2
	- minimum file system size (in KB)
	- maximum file system size (in KB)
d35 1
a35 1
	- endianness of target file system
d37 1
a37 1
File system specific parameters can be given as well, with a command
d45 2
a46 2
Other file systems might have controls on how to "munge" file names to
fit within the constraints of the target file system.
d59 2
a60 2
The implementation must allow for easy addition of extra file systems
with minimal changes to the file system independent sections.
d79 1
a79 1
    prepare_options	optional file system specific defaults that need to be
d85 1
a85 1
    cleanup_options	optional file system specific data that need to be
d97 1
a97 1
NOTE: All file system specific options are referenced via the fs_specific
@


1.1.3.1
log
@Time to hack on makefs, from TNF
@
text
@@


1.1.3.2
log
@import newer makefs from TNF (with Acorn Archimedes support)
@
text
@d1 1
a1 1
$NetBSD: README,v 1.4 2009/01/03 08:25:35 lukem Exp $
a18 1
	cd9660	ISO 9660 file system
d23 1
@

