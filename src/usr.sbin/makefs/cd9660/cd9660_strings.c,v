head	1.3;
access;
symbols
	cvs-201003062040:1.1.3.2
	cvs-200810311900:1.1.3.2
	MIRBSD_10:1.1.3.1.0.2
	MIRBSD_10_BASE:1.1.3.1
	cvs-200607051500:1.1.3.1
	netbsd:1.1.3;
locks; strict;
comment	@ * @;


1.3
date	2010.03.06.21.29.07;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004B92C8D37339B566;

1.2
date	2008.10.31.19.38.19;	author tg;	state Exp;
branches;
next	1.1;
commitid	100490B5EBD4D5B2D76;

1.1
date	2006.07.05.15.08.37;	author tg;	state Exp;
branches
	1.1.3.1;
next	;
commitid	10044ABD6033365D559;

1.1.3.1
date	2006.07.05.15.08.37;	author tg;	state Exp;
branches;
next	1.1.3.2;
commitid	10044ABD6033365D559;

1.1.3.2
date	2008.10.31.19.06.04;	author tg;	state Exp;
branches;
next	;
commitid	100490B57202F143953;


desc
@@


1.3
log
@merge and attempt to fix
• cd9660/iso9660_rrip.c:cd9660_susp_handle_continuation_common() has
  some different code for keeping track of working and placement of
  the CE on the disc now but it looks as if it’s correct
• I am fairly positive this doesn’t regress… but, alas, no guarantee
@
text
@/*	$NetBSD: cd9660_strings.c,v 1.4 2007/01/16 17:32:05 hubertf Exp $	*/

/*
 * Copyright (c) 2005 Daniel Watt, Walter Deignan, Ryan Gabrys, Alan
 * Perez-Rathke and Ram Vedam.  All rights reserved.
 *
 * This code was written by Daniel Watt, Walter Deignan, Ryan Gabrys,
 * Alan Perez-Rathke and Ram Vedam.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY DANIEL WATT, WALTER DEIGNAN, RYAN
 * GABRYS, ALAN PEREZ-RATHKE AND RAM VEDAM ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL DANIEL WATT, WALTER DEIGNAN, RYAN
 * GABRYS, ALAN PEREZ-RATHKE AND RAM VEDAM BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE,DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */

#if HAVE_NBTOOL_CONFIG_H
#include "nbtool_config.h"
#else
#ifdef __MirBSD__
#include <sys/param.h>
#endif
#include <sys/mount.h>
#endif

#include <sys/cdefs.h>
#include <sys/param.h>
#include <ctype.h>

#include "makefs.h"
#include "cd9660.h"

#if defined(__RCSID) && !defined(__lint)
__RCSID("$NetBSD: cd9660_strings.c,v 1.4 2007/01/16 17:32:05 hubertf Exp $");
__IDSTRING(mbsdid, "$MirOS: src/usr.sbin/makefs/cd9660/cd9660_strings.c,v 1.2 2008/10/31 19:38:19 tg Exp $");
#endif  /* !__lint */


void
cd9660_uppercase_characters(char *str, int len)
{
	int p;

	for (p = 0; p < len; p++) {
		if (islower((unsigned char)str[p]) )
			str[p] -= 32;
	}
}

static inline int
cd9660_is_a_char(char c)
{
	return (isupper((unsigned char)c)
		|| c == '_'
		|| (c >= '0' && c <= '?'));
}

static inline int
cd9660_is_d_char(char c)
{
	return (isupper((unsigned char)c)
			|| c == '_'
			|| (c >= '%' && c <= '9')
			|| (c >= ' ' && c <= '\"'));
}

/*
 * Test a string to see if it is composed of valid a characters
 * @@param const char* The string to test
 * @@returns int 1 if valid, 2 if valid if characters are converted to
 *              upper case, 0 otherwise
 */
int
cd9660_valid_a_chars(const char *str)
{
	const char *c = str;
	int upperFound = 0;

	while ((*c) != '\0') {
		if (!(cd9660_is_a_char(*c))) {
			if (islower((unsigned char)*c) )
				upperFound = 1;
			else
				return 0;
		}
		c++;
	}
	return upperFound + 1;
}

/*
 * Test a string to see if it is composed of valid d characters
 * @@param const char* The string to test
 * @@returns int 1 if valid, 2 if valid if characters are converted to
 *                upper case, 0 otherwise
 */
int
cd9660_valid_d_chars(const char *str)
{
	const char *c=str;
	int upperFound = 0;

	while ((*c) != '\0') {
		if (!(cd9660_is_d_char(*c))) {
			if (islower((unsigned char)*c) )
				upperFound = 1;
			else
				return 0;
		}
		c++;
	}
	return upperFound + 1;
}
@


1.2
log
@let this compile
@
text
@a0 1
/**	$MirOS$ */
d53 1
a53 1
__IDSTRING(mbsdid, "$MirOS$");
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: cd9660_strings.c,v 1.3 2005/12/24 20:56:41 perry Exp $	*/
d38 5
a48 4
#if !HAVE_NBTOOL_CONFIG_H
#include <sys/mount.h>
#endif

a51 1
#include <sys/cdefs.h>
d53 2
a54 1
__RCSID("$NetBSD: cd9660_strings.c,v 1.3 2005/12/24 20:56:41 perry Exp $");
@


1.1.3.1
log
@Time to hack on makefs, from TNF
@
text
@@


1.1.3.2
log
@Import NetBSD®-current (just after or at the 5.0 branch) makefs(8)
and subtree required to build it in MirBSD
@
text
@d1 1
a1 1
/*	$NetBSD: cd9660_strings.c,v 1.4 2007/01/16 17:32:05 hubertf Exp $	*/
a36 2
#else
#include <sys/mount.h>
d43 4
d50 1
d52 1
a52 1
__RCSID("$NetBSD: cd9660_strings.c,v 1.4 2007/01/16 17:32:05 hubertf Exp $");
@

