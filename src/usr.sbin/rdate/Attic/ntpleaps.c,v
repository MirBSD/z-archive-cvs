head	1.9;
access;
symbols
	MIRBSD_10:1.8.0.2
	MIRBSD_10_BASE:1.8
	MIRBSD_9_BASE:1.6
	MIRBSD_8:1.3.0.2
	MIRBSD_8_BASE:1.3
	cvs-200507211800:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2011.11.20.22.02.42;	author tg;	state dead;
branches;
next	1.8;
commitid	1004EC9791917D34AD7;

1.8
date	2007.05.14.22.11.44;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004648DEB711E265CB;

1.7
date	2007.05.14.22.06.52;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004648DD5A2275F914;

1.6
date	2006.06.09.20.58.09;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004489E0F23F902B89;

1.5
date	2006.05.29.23.38.31;	author tg;	state dead;
branches;
next	1.4;
commitid	100447B85B916A0A64A;

1.4
date	2006.05.09.09.00.00;	author tg;	state Exp;
branches;
next	1.3;
commitid	10044605A212C9F8FC5;

1.3
date	2005.10.27.11.58.39;	author tg;	state Exp;
branches;
next	1.2;
commitid	77604360c0d42ca3;

1.2
date	2005.03.13.19.17.21;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.17.31.06;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.05.17.31.06;	author tg;	state Exp;
branches;
next	;


desc
@@


1.9
log
@convert to MirTime API
@
text
@/* $MirOS: src/usr.sbin/rdate/ntpleaps.c,v 1.8 2007/05/14 22:11:44 tg Exp $ */

/*-
 * Copyright (c) 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
 * Based upon code placed into the public domain by Dan J. Bernstein.
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <inttypes.h>
#include <time.h>

__RCSID("$MirOS: src/usr.sbin/rdate/ntpleaps.c,v 1.8 2007/05/14 22:11:44 tg Exp $");

time_t tick2utc(time_t);

/*
 * Converts a time_t measured in kernel ticks into a UTC time_t
 * using leap second information stored in /etc/localtime or an
 * equivalent indicator (e.g. the TZ environment variable).
 * If the kernel time is already measured in UTC instead of TAI
 * and a POSIX conformant time zone is set, this is a no-op.
 */
time_t
tick2utc(time_t kerneltick)
{
	static unsigned long times365[4] = {
		0, 365, 730, 1095
	};
	static unsigned long times36524[4] = {
		0, 36524UL, 73048UL, 109572UL
	};
	static unsigned long montab[12] = {
		0, 31, 61, 92, 122, 153, 184, 214, 245, 275, 306, 337
	};

	struct tm *tm;
	int64_t utc, d = 1900;
	int m, y;

	tm = localtime(&kerneltick);
	d += tm->tm_year;

	if (d < 0)
		++d;
	y = (int)(d % 400LL);
	d = 146097LL * (d / 400) + tm->tm_mday - 678882LL;
	utc = tm->tm_sec - tm->tm_gmtoff + 60 * (tm->tm_min + 60 * tm->tm_hour);

	while (utc < 0L) {
		utc += 86400L;
		--d;
	}
	while (utc > 86400L) {
		utc -= 86400L;
		++d;
	}

	if ((m = tm->tm_mon) >= 2) {
		m -= 2;
	} else {
		m += 10;
		--y;
	}

	y += (m / 12);
	m %= 12;
	if (m < 0) {
		m += 12;
		--y;
	}
	d += montab[m];

	d += 146097LL * (y / 400LL);
	y %= 400;
	while (y < 0) {
		y += 400;
		d -= 146097LL;
	}

	d += times365[y & 3];
	y /= 4;

	d += 1461LL * (y % 25);
	y /= 25;

	d += times36524[y & 3];

	/*
	 * d now contains the date part of the MJD
	 * corresponding to tm / kerneltick; the
	 * second part is already stored in utc.
	 */

	utc += (d - 40587LL) * 86400LL;
	return (utc);
}
@


1.8
log
@fixes
@
text
@d1 1
a1 1
/* $MirOS: src/usr.sbin/rdate/ntpleaps.c,v 1.7 2007/05/14 22:06:52 tg Exp $ */
d29 1
a29 1
__RCSID("$MirOS: src/usr.sbin/rdate/ntpleaps.c,v 1.7 2007/05/14 22:06:52 tg Exp $");
@


1.7
log
@• merge ntpleaps.h into ntp.c, ntpleaps.c
• update ntpleaps.c to latest licence template
• portability: don't use __dead
• portability: add ifdef for external arc4random
• add GNUmakefile to be used on e.g. Debian GNU/Linux and Debian GNU/kFreeBSD
• BSDmakefile: remove GNU stuff
@
text
@d1 1
a1 1
/* $MirOS: src/usr.sbin/rdate/ntpleaps.c,v 1.6 2006/06/09 20:58:09 tg Exp $ */
d29 1
a29 3
#ifndef __RCSID
#define	__RCSID(x)	static const char __rcsid[] __attribute__((used)) = (x)
#endif
d31 1
a31 1
__RCSID("$MirOS: src/usr.sbin/rdate/ntpleaps.c,v 1.6 2006/06/09 20:58:09 tg Exp $");
@


1.6
log
@doesn't make sense to rename these files
@
text
@d1 1
a1 1
/* $MirOS: src/usr.sbin/rdate/leapsecs.c,v 1.1 2006/05/29 23:38:31 tg Exp $ */
d8 5
a12 6
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
d14 8
a21 8
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a nontrivial bug.
a28 2
#include "ntpleaps.h"

d33 1
a33 1
__RCSID("$MirOS: src/usr.sbin/rdate/leapsecs.c,v 1.1 2006/05/29 23:38:31 tg Exp $");
d35 7
@


1.5
log
@use libtz for determining whether we should correct leap
seconds, instead of relying on the user to provide -c, and
use it to know the exact amount of leap seconds to correct
for (if any)

we only lose one thing: RFC 868 leap second correction (but
then, you don't want to use that anyway, and if you use it,
you better know whether the server you're synching against
is using a POSIX or "right" timezone)
@
text
@d1 1
a1 1
/*	$OpenBSD: ntpleaps.c,v 1.7 2004/05/05 20:29:54 jakob Exp $	*/
d3 4
a6 2
/*
 * Copyright (c) 2002, 2005, 2006 Thorsten Glaser. All rights reserved.
d8 6
a13 3
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
d15 8
a22 27
 *    - Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    - Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Leap second support for NTP clients (generic) */

/*
 * I could include tzfile.h, but this would make the code unportable
 * at no real benefit. Read tzfile.h for why.
d26 3
a28 7
#include <netinet/in.h>

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
d36 1
a36 10
__RCSID("$MirOS: src/usr.sbin/rdate/ntpleaps.c,v 1.4 2006/05/09 09:00:00 tg Exp $");

#ifndef O_NDELAY
#define O_NDELAY	0
#endif

u_int64_t *leapsecs = NULL;
unsigned int leapsecs_num = 0;
static int flaginit = -1;
static int flagwarn = 0;
d38 2
a39 4
static u_int32_t read_be_dword(u_int8_t *);

int
ntpleaps_init(void)
d41 66
a106 10
	if (!flaginit)
		return (0);

	if (!ntpleaps_read()) {
		flaginit = 0;
		return (0);
	}

	/* This does not really hurt, but users will complain about
	 * off-by-23-seconds (at time of coding) errors if we don't warn.
a107 111
	if (!flagwarn) {
		fputs("Warning: error reading tzfile. You will NOT be\n"
		    "able to get legal time or posix compliance! To fix this,\n"
		    "install the 240 byte /usr/share/zoneinfo/right/UTC file.\n",
		    stderr);
		flagwarn = 1;	/* put it only once */
	}

	return (-1);
}

int
ntpleaps_sub(u_int64_t *t)
{
	u_int64_t u;
	unsigned i = 0, r = 0;

	if ((flaginit ? ntpleaps_init() : 0) == -1)
		return (-1);

	u = *t;
	if (u > 0)
		while ((i < leapsecs_num) && (*t >= leapsecs[i])) {
			--u;
			++i;
			if (*t == leapsecs[i])
				r = 1;
		}
	*t = u;
	return (r);
}

static u_int32_t
read_be_dword(u_int8_t *ptr)
{
	u_int32_t res;

	memcpy(&res, ptr, 4);
	return (ntohl(res));
}

int
ntpleaps_read(void)
{
	int fd;
	unsigned int r;
	u_int8_t buf[32];
	u_int32_t m1, m2, m3;
	u_int64_t s;
	u_int64_t *l;

	fd = open("/usr/share/zoneinfo/right/UTC", O_RDONLY | O_NDELAY);
	if (fd == -1)
		fd = open("/usr/share/zoneinfo/UTC", O_RDONLY | O_NDELAY);
	if (fd == -1)
		return (-1);

	/* Check signature */
	read(fd, buf, 4);
	buf[4] = 0;
	if (strcmp((const char *)buf, "TZif")) {
		close(fd);
		return (-1);
	}

	/* Pre-initalise buf[24..27] so we need not check read(2) result */
	buf[24] = 0;
	buf[25] = 0;
	buf[26] = 0;
	buf[27] = 0;

	/* Skip uninteresting parts of header */
	read(fd, buf, 28);

	/* Read number of leap second entries */
	r = read_be_dword(&buf[24]);
	/* Check for plausibility - arbitrary values */
	if ((r < 20) || (r > 60000)) {
		close(fd);
		return (-1);
	}
	if ((l = (u_int64_t *)malloc(r << 3)) == NULL) {
		close(fd);
		return (-1);
	}

	/* Skip further uninteresting stuff */
	read(fd, buf, 12);
	m1 = read_be_dword(buf);
	m2 = read_be_dword(&buf[4]);
	m3 = read_be_dword(&buf[8]);
	m3 += (m1 << 2)+m1+(m2 << 2)+(m2 << 1);
	lseek(fd, (off_t)m3, SEEK_CUR);

	/* Now go parse the tzfile leap second info */
	for (m1 = 0; m1 < r; m1++) {
		if (read(fd, buf, 8) != 8) {
			free(l);
			close(fd);
			return (-1);
		}
		s = SEC_TO_TAI64(read_be_dword(buf));
		/*
		 * Assume just _one_ leap second on each entry, and compensate
		 * the lacking error checking by validating the first entry
		 * against the known value
		 */
		if (!m1 && s != 0x4000000004B2580AULL)
			return (-1);
		l[m1] = s;
	}
d109 2
a110 7
	/* Clean up and activate the table */
	close(fd);
	if (leapsecs != NULL)
		free(leapsecs);
	leapsecs = l;
	leapsecs_num = r;
	return (0);
@


1.4
log
@fixes related to OpenNTPD patch
@
text
@d54 1
a54 1
__RCSID("$MirOS: src/usr.sbin/rdate/ntpleaps.c,v 1.3 2005/10/27 11:58:39 tg Exp $");
@


1.3
log
@* merge OpenBSD import
* rewrite tai2utc from libc:taitime.c
* please __CRAZY=yes
* reduce diff against OpenBSD
* retain some functionality
@
text
@d4 1
a4 1
 * Copyright (c) 2002, 2005 Thorsten Glaser. All rights reserved.
a33 1

d50 9
a58 1
__RCSID("$MirOS$");
d65 1
a65 1
u_int32_t read_be_dword(u_int8_t *);
d79 1
a79 1
	 * off-by-22-seconds (at time of coding) errors if we don't warn.
d84 1
a84 1
		    "install the 240 byte /usr/share/zoneinfo/UTC file.\n",
d113 1
a113 1
u_int32_t
a121 1

d132 3
a134 1
	fd = open("/usr/share/zoneinfo/UTC", O_RDONLY | O_NDELAY);
d146 1
a146 1
	/* Pre-initalize buf[24..27] so we need not check read(2) result */
@


1.2
log
@fast merge src/usr.sbin
@
text
@d4 1
a4 1
 * Copyright (c) 2002 Thorsten Glaser. All rights reserved.
d32 2
a33 2
#include <sys/cdefs.h>
__RCSID("$MirOS$");
d42 1
d48 1
d51 2
d58 1
d64 1
a64 1
		return 0;
d68 1
a68 1
		return 0;
d77 1
a77 1
		    "install the 232 byte /usr/share/zoneinfo/right/UTC file.\n",
d82 1
a82 1
	return -1;
a87 1
	unsigned int i = 0;
d89 1
a89 1
	int r = 1;
d91 2
a92 2
	if (-1 == (flaginit ? ntpleaps_init() : 0))
		return -1;
d95 9
a103 12

	while (i < leapsecs_num) {
		if (u < leapsecs[i])
			break;
		if (u == leapsecs[i++])
			goto do_sub;
	}
	--r;

do_sub:
	*t = u - i;
	return r;
d112 1
a112 1
	return ntohl(res);
d127 2
a128 2
	if (-1 == fd)
		return -1;
d135 1
a135 1
		return -1;
d152 1
a152 1
		return -1;
d154 1
a154 1
	if (NULL == (l = (u_int64_t *)malloc(r << 3))) {
d156 1
a156 1
		return -1;
d172 1
a172 1
			return -1;
d181 1
a181 1
			return -1;
d191 1
a191 1
	return 0;
@


1.1
log
@Initial revision
@
text
@d32 2
a33 4
/* Leap second support for NTP clients (generic) */

static const char RCSId[] = "$OpenBSD: ntpleaps.c,v 1.7 2004/05/05 20:29:54 jakob Exp $";

a41 1

a46 1

d59 1
a59 1
		return (0);
d63 1
a63 1
		return (0);
d71 3
a73 1
		    "able to get legal time or posix compliance!\n", stderr);
d77 1
a77 1
	return (-1);
d87 2
a88 2
	if ((flaginit ? ntpleaps_init() : 0) == -1)
		return (-1);
d102 1
a102 1
	return (r);
d111 1
a111 1
	return (ntohl(res));
d125 3
a127 3
	fd = open("/usr/share/zoneinfo/right/UTC", O_RDONLY | O_NDELAY);
	if (fd == -1)
		return (-1);
d134 1
a134 1
		return (-1);
d151 1
a151 1
		return (-1);
d153 1
a153 1
	if ((l = (u_int64_t *)malloc(r << 3)) == NULL) {
d155 1
a155 1
		return (-1);
d171 1
a171 1
			return (-1);
d180 1
a180 1
			return (-1);
d190 1
a190 1
	return (0);
@


1.1.1.1
log
@Import the OpenBSD foundation of MirOS BSD
@
text
@@
