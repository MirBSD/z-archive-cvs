head	1.12;
access;
symbols
	joe-3_1jupp38:1.12
	joe-3_1jupp37:1.12
	joe-3_1jupp36:1.12
	joe-3_1jupp35:1.12
	joe-3_1jupp34:1.12
	joe-3_1jupp33:1.12
	joe-3_1jupp32:1.10
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.5
	joe-3_1jupp30:1.4
	joe-3_1jupp29:1.4
	joe-3_1jupp28:1.4
	joe-3_1jupp27:1.4
	joe-3_1jupp26:1.4
	joe-3_1jupp25:1.4
	joe-3_1jupp24:1.4
	joe-3_1jupp23:1.4
	joe-3_1jupp22:1.3
	joe-3_1jupp21:1.3
	joe-3_1jupp20:1.3
	joe-3_1jupp19:1.3
	joe-3_1jupp18:1.3
	joe-3_1jupp17:1.3
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.3
	joe-3_1jupp15:1.3
	joe-3_1jupp14:1.3
	joe-3_1jupp12:1.3
	joe-3_1jupp11:1.2
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.2
	joe-3_1jupp9:1.2
	joe-3_1jupp8:1.1.201.1
	joe-3_1jupp7:1.1.201.1
	joe-3_1jupp6:1.1.201.1
	joe-3_1jupp5:1.1.201.1
	joe-3_1jupp4:1.1.201.1
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.12
date	2018.01.08.00.56.27;	author tg;	state Exp;
branches;
next	1.11;
commitid	1005A52C1D45BBAC16C;

1.11
date	2018.01.08.00.53.51;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005A52C0FC77D35975;

1.10
date	2017.12.06.23.02.05;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005A2876FC4FFE7EF5;

1.9
date	2017.12.06.21.17.00;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005A285E5918D423C7;

1.8
date	2017.12.04.22.15.39;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005A25C91E16B3B365;

1.7
date	2017.12.02.17.00.50;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005A22DC570063953B;

1.6
date	2017.12.02.02.07.31;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005A220AD65C90E687;

1.5
date	2017.07.09.01.03.54;	author tg;	state Exp;
branches;
next	1.4;
commitid	100596180C5008CC96E;

1.4
date	2012.12.30.17.10.58;	author tg;	state Exp;
branches;
next	1.3;
commitid	10050E075B939751F66;

1.3
date	2009.10.18.14.52.57;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004ADB2BD317498872;

1.2
date	2008.05.13.13.08.25;	author tg;	state Exp;
branches;
next	1.1;
commitid	100482992BC01EE89A1;

1.1
date	2005.02.05.00.37.13;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.23;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.13;	author tg;	state Exp;
branches;
next	;


desc
@@


1.12
log
@nuke unused
@
text
@/*
 *	device-independent TTY interface for JOE
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#ifndef _JOE_SCRN_H
#define _JOE_SCRN_H 1

#ifdef EXTERN
__IDSTRING(rcsid_scrn_h, "$MirOS: contrib/code/jupp/scrn.h,v 1.9 2017/12/06 21:17:00 tg Exp $");
#endif

#include "tty.h"		/* ttputc() */

extern int skiptop;

/* SCRN *nopen(void);
 *
 * Open the screen (sets TTY mode so that screen may be used immediatly after
 * the 'nopen').
 */
SCRN *nopen(CAP *cap);

/* void nresize(SCRN *t,int w,int h);
 *
 * Change size of screen.  For example, call this when you find out that
 * the Xterm changed size.
 */
void nresize(SCRN *t, int w, int h);

/* void nredraw(SCRN *t);
 *
 * Invalidate all state variables for the terminal.  This way, everything gets
 * redrawn.
 */
void nredraw(SCRN *t);

void npartial(SCRN *t);
void nescape(SCRN *t);
void nreturn(SCRN *t);

/* void nclose(SCRN *t);
 *
 * Close the screen and restore TTY to initial state.
 *
 * if 'flg' is set, tclose doesn't mess with the signals.
 */
void nclose(SCRN *t);

/* int cpos(SCRN *t,int x,int y);
 *
 * Set cursor position
 */
int cpos(register SCRN *t, register int x, register int y);

/* int attr(SCRN *t,int a);
 *
 * Set attributes
 */
int set_attr(SCRN *t, int c);

/* Encode character as utf8 */
void utf8_putc(int c);

/* void outatr(SCRN *t,int *scrn,int *attr,int x,int y,int c,int a);
 *
 * Output a character at the given screen cooridinate.  The cursor position
 * after this function is executed is indeterminate.
 */

/* Character attribute bits */

#define INVERSE		 256
#define UNDERLINE	 512
#define BOLD		1024
#define BLINK		2048
#define DIM		4096
#define AT_MASK		(INVERSE+UNDERLINE+BOLD+BLINK+DIM)

#define BG_SHIFT 13
#define BG_VALUE (7<<BG_SHIFT)
#define BG_NOT_DEFAULT (8<<BG_SHIFT)
#define BG_MASK (15<<BG_SHIFT)

#define BG_DEFAULT (0<<BG_SHIFT) /* default */
#define BG_BLACK (8<<BG_SHIFT)
#define BG_RED (9<<BG_SHIFT)
#define BG_GREEN (10<<BG_SHIFT)
#define BG_YELLOW (11<<BG_SHIFT)
#define BG_BLUE (12<<BG_SHIFT)
#define BG_MAGENTA (13<<BG_SHIFT)
#define BG_CYAN (14<<BG_SHIFT)
#define BG_WHITE (15<<BG_SHIFT)

#define FG_SHIFT 17
#define FG_VALUE (7<<FG_SHIFT)
#define FG_NOT_DEFAULT (8<<FG_SHIFT)
#define FG_MASK (15<<FG_SHIFT)

#define FG_DEFAULT (0<<FG_SHIFT)
#define FG_WHITE (8<<FG_SHIFT) /* default */
#define FG_CYAN (9<<FG_SHIFT)
#define FG_MAGENTA (10<<FG_SHIFT)
#define FG_BLUE (11<<FG_SHIFT)
#define FG_YELLOW (12<<FG_SHIFT)
#define FG_GREEN (13<<FG_SHIFT)
#define FG_RED (14<<FG_SHIFT)
#define FG_BLACK (15<<FG_SHIFT)

#define HAS_COMBINING 0x200000

void outatr(struct charmap *map,SCRN *t,int *scrn,int *attrf,int xx,int yy,int c,int a);
void outatr_help(SCRN *, int *, int *, int, int, int, int);

/* int eraeol(SCRN *t,int x,int y);
 *
 * Erase from screen coordinate to end of line.
 */
int eraeol(SCRN *t, int x, int y);

/* void nscrlup(SCRN *t,int top,int bot,int amnt);
 *
 * Buffered scroll request.  Request that some lines up.  'top' and 'bot'
 * indicate which lines to scroll.  'bot' is the last line to scroll + 1.
 * 'amnt' is distance in lines to scroll.
 */
void nscrlup(SCRN *t, int top, int bot, int amnt);

/* void nscrldn(SCRN *t,int top,int bot,int amnt);
 *
 * Buffered scroll request.  Scroll some lines down.  'top' and 'bot'
 * indicate which lines to scroll.  'bot' is the last line to scroll + 1.
 * 'amnt' is distance in lines to scroll.
 */
void nscrldn(SCRN *t, int top, int bot, int amnt);

/* void nscroll(SCRN *t);
 *
 * Execute buffered scroll requests
 */
void nscroll(SCRN *t);

/* void magic(SCRN *t,int y,int *cur,int *new);
 *
 * Figure out and execute line shifting
 */
void magic(SCRN *t, int y, int *cs, int *ca, int *s, int *a,int placex);

int clrins(SCRN *t);

int meta_color(unsigned char *s);

/* Generate a field */
void genfield(SCRN *t,int *scrn,int *attr,int x,int y,int ofst,unsigned char *s,int len,int atr,int width,int flg,int *fmt);

/* Column width of a string takes into account utf-8) */
int txtwidth(unsigned char *s,int len);

/* Generate a field: formatted */
void genfmt(SCRN *t, int x, int y, int ofst, const unsigned char *s, int flg);

/* Column width of formatted string */
int fmtlen(const unsigned char *s);

/* Offset within formatted string of particular column */
int fmtpos(unsigned char *s, int goal);

#endif
@


1.11
log
@fix spelling:

while “dependant” is correct British English for someone depending
on their liege, “something-dependent” was meant here
@
text
@a116 6
/*
 * translate character and its attribute into something printable
 */
void xlat(int *attr, unsigned char *c);
void xlat_utf_ctrl(int *attr, unsigned char *c);

@


1.10
log
@lots of fixes related to prototyping
@
text
@d2 1
a2 1
 *	Device independant tty interface for JOE
d115 1
a115 1
void outatr_help(SCRN *,int *,int *,int,int,int,int);
@


1.9
log
@begin overhaul for antique/header compat:
• PARAMS begone
• libc4 ustat definition: resolve inline
• ignore HAVE_*_H for headers mksh includes unconditionally
@
text
@d12 1
a12 1
__IDSTRING(rcsid_scrn_h, "$MirOS: contrib/code/jupp/scrn.h,v 1.8 2017/12/04 22:15:39 tg Exp $");
d115 1
@


1.8
log
@clean up some unused/MS-DOS® stuff
@
text
@d12 1
a12 1
__IDSTRING(rcsid_scrn_h, "$MirOS: contrib/code/jupp/scrn.h,v 1.7 2017/12/02 17:00:50 tg Exp $");
d24 1
a24 1
SCRN *nopen PARAMS((CAP *cap));
d31 1
a31 1
void nresize PARAMS((SCRN *t, int w, int h));
d38 1
a38 1
void nredraw PARAMS((SCRN *t));
d40 3
a42 3
void npartial PARAMS((SCRN *t));
void nescape PARAMS((SCRN *t));
void nreturn PARAMS((SCRN *t));
d50 1
a50 1
void nclose PARAMS((SCRN *t));
d56 1
a56 1
int cpos PARAMS((register SCRN *t, register int x, register int y));
d62 1
a62 1
int set_attr PARAMS((SCRN *t, int c));
d65 1
a65 1
void utf8_putc PARAMS((int c));
d114 1
a114 1
void outatr PARAMS((struct charmap *map,SCRN *t,int *scrn,int *attrf,int xx,int yy,int c,int a));
d119 2
a120 2
void xlat PARAMS((int *attr, unsigned char *c));
void xlat_utf_ctrl PARAMS((int *attr, unsigned char *c));
d126 1
a126 1
int eraeol PARAMS((SCRN *t, int x, int y));
d134 1
a134 1
void nscrlup PARAMS((SCRN *t, int top, int bot, int amnt));
d142 1
a142 1
void nscrldn PARAMS((SCRN *t, int top, int bot, int amnt));
d148 1
a148 1
void nscroll PARAMS((SCRN *t));
d154 1
a154 1
void magic PARAMS((SCRN *t, int y, int *cs, int *ca, int *s, int *a,int placex));
d156 1
a156 1
int clrins PARAMS((SCRN *t));
d158 1
a158 1
int meta_color PARAMS((unsigned char *s));
d161 1
a161 1
void genfield PARAMS((SCRN *t,int *scrn,int *attr,int x,int y,int ofst,unsigned char *s,int len,int atr,int width,int flg,int *fmt));
d164 1
a164 1
int txtwidth PARAMS((unsigned char *s,int len));
d167 1
a167 1
void genfmt PARAMS((SCRN *t, int x, int y, int ofst, const unsigned char *s, int flg));
d170 1
a170 1
int fmtlen PARAMS((const unsigned char *s));
d173 1
a173 1
int fmtpos PARAMS((unsigned char *s, int goal));
@


1.7
log
@fix string name collision by prefixing the idstrings in not-.c files
@
text
@d12 1
a12 1
__IDSTRING(rcsid_scrn_h, "$MirOS: contrib/code/jupp/scrn.h,v 1.6 2017/12/02 02:07:31 tg Exp $");
a74 18
#ifdef __MSDOS__

#define INVERSE 1
#define UNDERLINE 2
#define BOLD 4
#define BLINK 8
#define DIM 16
extern unsigned atab[];

#define outatr(t,scrn,attr,x,y,c,a) do { \
	(t); \
	(x); \
	(y); \
	*(scrn) = ((unsigned)(c) | atab[a]); \
} while(0)

#else

a115 2
#endif

@


1.6
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d12 1
a12 1
__RCSID("$MirOS$");
@


1.5
log
@partially fix redrawing for lines with combining characters

woes stem from the fact that their appearance in scrn is overwritten
by the next char on the line, which I could not fix as-is, only the
case where they were the last characters on the line… needs much more
research and restructuring the very concepts behind jupp ☹
@
text
@a0 1
/* $MirOS: contrib/code/jupp/scrn.h,v 1.3 2009/10/18 14:52:57 tg Exp $ */
d11 3
a13 2
#include "config.h"
#include "types.h"
@


1.4
log
@more const cleanliness (and merr is used in a signal handler so it should be volatile), and use NULL not 0 for pointers
@
text
@d130 2
@


1.3
log
@backport hex editing mode from joe 3.7 for waga as late birthday present
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/scrn.h,v 1.2 2008/05/13 13:08:25 tg Exp $ */
d185 1
a185 1
void genfmt PARAMS((SCRN *t, int x, int y, int ofst, unsigned char *s, int flg));
d188 1
a188 1
int fmtlen PARAMS((unsigned char *s));
@


1.2
log
@prepare for joe-3.1jupp9:
* sync NEWS
* bump vsn in configure.ac
* tag all files with RCS ID
* sync licence template
@
text
@d1 1
a1 1
/* $MirOS$ */
d179 1
a179 1
void genfield PARAMS((SCRN *t,int *scrn,int *attr,int x,int y,int ofst,unsigned char *s,int len,int atr,int width,int flg));
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 9
a9 2
/* Device independant tty interface for JOE
   Copyright (C) 1992 Joseph H. Allen
d11 2
a12 1
This file is part of JOE (Joe's Own Editor)
d14 1
a14 19
JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 

#ifndef _Iscrn
#define _Iscrn 1

#include "config.h"
#include "termcap.h"
#include "tty.h"
a17 132
typedef struct scrn SCRN;

struct hentry
 {
 int next;
 int loc;
 };

/* Each terminal has one of these */

#ifdef __MSDOS__

struct scrn
 {
 int li;
 int co;
 short *scrn;
 int scroll;
 int insdel;
 int *updtab;
 int *compose;
 int *sary;
 };

#else
struct scrn
 {
 CAP *cap;		/* Termcap/Terminfo data */

 int li;			/* Screen height */
 int co;			/* Screen width */

 char *ti;			/* Initialization string */
 char *cl;			/* Home and clear screen... really an
 				   init. string */
 char *cd;			/* Clear to end of screen */
 char *te;			/* Restoration string */

 int haz;			/* Terminal can't print ~s */
 int os;			/* Terminal overstrikes */
 int eo;			/* Can use blank to erase even if os */
 int ul;			/* _ overstrikes */
 int am;			/* Terminal has autowrap, but not magicwrap */
 int xn;			/* Terminal has magicwrap */

 char *so;			/* Enter standout (inverse) mode */
 char *se;			/* Exit standout mode */

 char *us;			/* Enter underline mode */
 char *ue;			/* Exit underline mode */
 char *uc;			/* Single time underline character */

 int ms;			/* Ok to move when in standout/underline mode */

 char *mb;			/* Enter blinking mode */
 char *md;			/* Enter bold mode */
 char *mh;			/* Enter dim mode */
 char *mr;			/* Enter inverse mode */
 char *me;			/* Exit above modes */

 int da, db;			/* Extra lines exist above, below */
 char *al, *dl, *AL, *DL;	/* Insert/delete lines */
 char *cs;			/* Set scrolling region */
 int rr;			/* Set for scrolling region relative addressing */
 char *sf, *SF, *sr, *SR;	/* Scroll */

 char *dm, *dc, *DC, *ed;	/* Delete characters */
 char *im, *ic, *IC, *ip, *ei;	/* Insert characters */
 int mi;			/* Set if ok to move while in insert mode */

 char *bs;			/* Move cursor left 1 */
 int cbs;
 char *lf;			/* Move cursor down 1 */
 int clf;
 char *up;			/* Move cursor up 1 */
 int cup;
 char *nd;			/* Move cursor right 1 */

 char *ta;			/* Move cursor to next tab stop */
 int cta;
 char *bt;			/* Move cursor to previous tab stop */
 int cbt;
 int tw;			/* Tab width */

 char *ho;			/* Home cursor to upper left */
 int cho;
 char *ll;			/* Home cursor to lower left */
 int cll;
 char *cr;			/* Move cursor to left edge */
 int ccr;
 char *RI;			/* Move cursor right n */
 int cRI;
 char *LE;			/* Move cursor left n */
 int cLE;
 char *UP;			/* Move cursor up n */
 int cUP;
 char *DO;			/* Move cursor down n */
 int cDO;
 char *ch;			/* Set cursor column */
 int cch;
 char *cv;			/* Set cursor row */
 int ccv;
 char *cV;			/* Goto beginning of specified line */
 int ccV;
 char *cm;			/* Set cursor row and column */
 int ccm;

 char *ce;			/* Clear to end of line */
 int cce;

 /* Basic abilities */
 int scroll;			/* Set to use scrolling */
 int insdel;			/* Set to use insert/delete within line */

 /* Current state of terminal */
 int *scrn;			/* Current contents of screen */
 int x,y;			/* Current cursor position (-1 for unknown) */
 int top,bot;			/* Current scrolling region */
 int attrib;			/* Current character attributes */
 int ins;			/* Set if we're in insert mode */

 int *updtab;			/* Dirty lines table */
 int avattr;			/* Bits set for available attributes */
 int *sary;			/* Scroll buffer array */

 int *compose;			/* Line compose buffer */
 int *ofst;			/* stuff for magic */
 struct hentry *htab;
 struct hentry *ary;
 };
#endif

d23 1
a23 1
SCRN *nopen();
d30 1
a30 1
void nresize();
d37 1
a37 1
void nredraw();
d39 3
a41 3
void npartial();
void nescape();
void nreturn();
d49 1
a49 1
void nclose();
d55 1
a55 1
int cpos();
d61 1
a61 1
int attr();
d63 4
a66 1
/* void outatr(SCRN *t,int *scrn,int x,int y,int c,int a);
d83 6
a88 4
#define outatr(t,scrn,x,y,c,a) \
  ( \
    (t), (x), (y), *(scrn)=((unsigned)(c)|atab[a]) \
  )
d92 38
a129 19
#define INVERSE 256
#define UNDERLINE 512
#define BOLD 1024
#define BLINK 2048
#define DIM 4096

#define outatr(t,scrn,xx,yy,c,a) \
  ( \
    (*(scrn)!=((c)|(a))) ? \
      ( \
      *(scrn)=((c)|(a)), \
      ((t)->ins?clrins(t):0), \
      ((t)->x!=(xx) || (t)->y!=(yy)?cpos((t),(xx),(yy)):0), \
      ((t)->attrib!=(a)?attr((t),(a)):0), \
      ttputc(c), ++(t)->x \
      ) \
    : \
      0 \
  )
d133 5
a137 11
extern unsigned xlata[256];
extern unsigned char xlatc[256];
extern int dspasis;

#define xlat(a,c) \
  ( \
  (dspasis && ((unsigned)(c)>=128)) ? \
      ((a)=0) \
    : \
      (((a)=xlata[(unsigned)(c)]), ((c)=xlatc[(unsigned)(c)])) \
  )
d143 1
a143 1
int eraeol();
d151 1
a151 1
void nscrlup();
d159 1
a159 1
void nscrldn();
d165 1
a165 1
void nscroll();
d171 17
a187 1
void magic();
d189 2
a190 1
int clrins();
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
