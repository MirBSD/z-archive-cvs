head	1.10;
access;
symbols
	joe-3_1jupp38:1.10
	joe-3_1jupp37:1.10
	joe-3_1jupp36:1.10
	joe-3_1jupp35:1.10
	joe-3_1jupp34:1.10
	joe-3_1jupp33:1.10
	joe-3_1jupp32:1.7
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.3
	joe-3_1jupp30:1.3
	joe-3_1jupp29:1.3
	joe-3_1jupp28:1.3
	joe-3_1jupp27:1.3
	joe-3_1jupp26:1.3
	joe-3_1jupp25:1.3
	joe-3_1jupp24:1.3
	joe-3_1jupp23:1.3
	joe-3_1jupp22:1.3
	joe-3_1jupp21:1.3
	joe-3_1jupp20:1.3
	joe-3_1jupp19:1.2
	joe-3_1jupp18:1.2
	joe-3_1jupp17:1.2
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.2
	joe-3_1jupp15:1.2
	joe-3_1jupp14:1.2
	joe-3_1jupp12:1.2
	joe-3_1jupp11:1.2
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.2
	joe-3_1jupp9:1.2
	joe-3_1jupp8:1.1.201.1
	joe-3_1jupp7:1.1.201.1
	joe-3_1jupp6:1.1.201.1
	joe-3_1jupp5:1.1.201.1
	joe-3_1jupp4:1.1.201.1
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.10
date	2018.01.07.20.39.33;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005A5285A07BFFE686;

1.9
date	2018.01.07.20.32.47;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005A5284063C3E386D;

1.8
date	2018.01.06.00.28.35;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005A50184621FA8455;

1.7
date	2017.12.08.02.28.08;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005A29F8C708B176AB;

1.6
date	2017.12.08.02.00.43;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005A29F2506E789D2B;

1.5
date	2017.12.06.21.17.04;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005A285E5918D423C7;

1.4
date	2017.12.02.02.07.37;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005A220AD65C90E687;

1.3
date	2012.06.08.16.55.29;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004FD22E961A7F5A95;

1.2
date	2008.05.13.13.08.32;	author tg;	state Exp;
branches;
next	1.1;
commitid	100482992BC01EE89A1;

1.1
date	2005.02.05.00.37.25;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.25;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.25;	author tg;	state Exp;
branches;
next	;


desc
@@


1.10
log
@tiny optimisations
@
text
@/*
 *	Variable length array of strings
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "config.h"
#include "types.h"

__RCSID("$MirOS: contrib/code/jupp/va.c,v 1.9 2018/01/07 20:32:47 tg Exp $");

#include <stdlib.h>

#include "utils.h"
#include "va.h"

aELEMENT *
vamk(int len)
{
	aELEMENT *rv;

	rv = jalloc(NULL, len, sizeof(aELEMENT));
	rv[0] = aterm;
	return (rv);
}

void
varm(aELEMENT *vary)
{
	if (vary) {
		vazap(vary, 0, aLen(vary));
		jfree(vary);
	}
}

int alen(aELEMENT *ary)
{
	aELEMENT *beg = ary;

	if (!ary)
		return (0);

	while (acmp(*ary, aterm))
		++ary;
	return (ary - beg);
}

aELEMENT *
vaensure(aELEMENT *vary, int len)
{
	aELEMENT *rv;

	if (vary && len > aSiz(vary))
		len += (len >> 2);
	rv = jalloc(vary, len, sizeof(aELEMENT));
	if (!vary)
		rv[0] = aterm;
	return (rv);
}

aELEMENT *vazap(aELEMENT *vary, int pos, int n)
{
	if (vary) {
		int x;

		if (pos < aLen(vary)) {
			if (pos + n <= aLen(vary)) {
				for (x = pos; x != pos + n; ++x)
					adel(vary[x]);
			} else {
				for (x = pos; x != aLen(vary); ++x)
					adel(vary[x]);
			}
		}
	}
	return vary;
}

aELEMENT *vatrunc(aELEMENT *vary, int len)
{
	if (!vary || len > aLEN(vary))
		vary = vaensure(vary, len);
	if (len < aLen(vary)) {
		vary = vazap(vary, len, aLen(vary) - len);
		vary[len] = vary[aLen(vary)];
		aLen(vary) = len;
	} else if (len > aLen(vary)) {
		vary = vafill(vary, aLen(vary), ablank, len - aLen(vary));
	}
	return vary;
}

aELEMENT *vafill(aELEMENT *vary, int pos, aELEMENT el, int len)
{
	int olen = aLEN(vary), x;

	if (!vary || pos + len > aSIZ(vary))
		vary = vaensure(vary, pos + len);
	if (pos + len > olen) {
		vary[pos + len] = vary[olen];
		aLen(vary) = pos + len;
	}
	for (x = pos; x != pos + len; ++x)
		vary[x] = adup(el);
	if (pos > olen)
		vary = vafill(vary, pos, ablank, pos - olen);
	return vary;
}

aELEMENT *vandup(aELEMENT *vary, int pos, aELEMENT *array, int len)
{
	int olen = aLEN(vary), x;

	if (!vary || pos + len > aSIZ(vary))
		vary = vaensure(vary, pos + len);
	if (pos + len > olen) {
		vary[pos + len] = vary[olen];
		aLen(vary) = pos + len;
	}
	if (pos > olen)
		vary = vafill(vary, olen, ablank, pos - olen);
	for (x = 0; x != len; ++x)
		vary[x + pos] = adup(array[x]);
	return vary;
}

aELEMENT *vadup(aELEMENT *vary)
{
	return vandup(NULL, 0, vary, aLEN(vary));
}

aELEMENT *_vaset(aELEMENT *vary, int pos, aELEMENT el)
{
	if (!vary || pos + 1 > aSIZ(vary))
		vary = vaensure(vary, pos + 1);
	if (pos > aLen(vary)) {
		vary = vafill(vary, aLen(vary), ablank, pos - aLen(vary));
		vary[pos + 1] = vary[pos];
		vary[pos] = el;
		aLen(vary) = pos + 1;
	} else if (pos == aLen(vary)) {
		vary[pos + 1] = vary[pos];
		vary[pos] = el;
		aLen(vary) = pos + 1;
	} else {
		adel(vary[pos]);
		vary[pos] = el;
	}
	return vary;
}

static int _acmp(aELEMENT *a, aELEMENT *b)
{
	return acmp(*a, *b);
}

aELEMENT *vasort(aELEMENT *ary, int len)
{
	if (ary && len)
		qsort(ary, len, sizeof(aELEMENT),
		    (int (*)(const void *, const void *))_acmp);
	return ary;
}

aELEMENT *
vawords(aELEMENT *a, unsigned char *s, int len,
    const unsigned char *sep, int seplen)
{
	int x;

	if (!a)
		a = vamk(10);
	else
		a = vatrunc(a, 0);
 loop:
	x = vsspan(s, len, sep, seplen);
	s += x;
	len -= x;
	if (len) {
		x = vsscan(s, len, sep, seplen);
		if (x != ~0) {
			a = vaadd(a, vsncpy(vsmk(x), 0, s, x));
			s += x;
			len -= x;
			if (len)
				goto loop;
		} else
			a = vaadd(a, vsncpy(vsmk(len), 0, s, len));
	}
	return a;
}
@


1.9
log
@redo dynamic string memory foo to get rid of those ugly casts
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/va.c,v 1.7 2017/12/08 02:28:08 tg Exp $");
d39 8
a46 7
	if (ary) {
		aELEMENT *beg = ary;
		while (acmp(*ary, aterm))
			++ary;
		return ary - beg;
	} else
		return 0;
d160 3
a162 3
	if (!ary || !len)
		return ary;
	qsort(ary, len, sizeof(aELEMENT), (int (*)(const void *, const void *))_acmp);
@


1.8
log
@merge fixes from gitlab branch; highlights:

Date:   Fri Dec 22 20:02:27 2017 +0100
    string sharing

Date:   Fri Dec 22 20:07:43 2017 +0100
    glopts can be static

Date:   Fri Dec 22 20:34:12 2017 +0100
    largish code cleanup

Date:   Fri Dec 22 20:58:59 2017 +0100
    major const cleanup

Date:   Sat Dec 23 01:41:49 2017 +0100
    fix refactoro: this code is run in a loop, reinitialise each time

Date:   Sat Jan 6 00:54:10 2018 +0100
    fix regression: `` did no longer insert a sole ` (etc.)
    also, factor out common code and optimise it

Date:   Sat Jan 6 01:05:42 2018 +0100
    2018

Date:   Sat Jan 6 01:05:47 2018 +0100
    more const cleanup while here

also, update NEWS
@
text
@d9 1
d18 2
a19 1
aELEMENT *vamk(int len)
d21 1
a21 1
	int *new = malloc((1 + len) * sizeof(aELEMENT) + 2 * sizeof(int));
d23 3
a25 4
	new[0] = len;
	new[1] = 0;
	((aELEMENT *)(new + 2))[0] = aterm;
	return (aELEMENT *)(new + 2);
d28 2
a29 1
void varm(aELEMENT *vary)
d33 1
a33 1
		free((int *)vary - 2);
d48 2
a49 1
aELEMENT *vaensure(aELEMENT *vary, int len)
d51 5
d57 2
a58 8
		vary = vamk(len);
	else if (len > aSiz(vary)) {
		len += (len >> 2);
		vary = (aELEMENT *)(2 + (int *)realloc((int *)vary - 2, (len + 1) * sizeof(aELEMENT) + 2 * sizeof(int)));

		aSiz(vary) = len;
	}
	return vary;
@


1.7
log
@label indent; small tweaks while here
@
text
@d10 1
a10 1
__RCSID("$MirOS: contrib/code/jupp/va.c,v 1.6 2017/12/08 02:00:43 tg Exp $");
d163 3
a165 1
aELEMENT *vawords(aELEMENT *a, unsigned char *s, int len, unsigned char *sep, int seplen)
@


1.6
log
@don’t box malloc/calloc/realloc/free; don’t cast malloc result; order calloc args
@
text
@d10 1
a10 1
__RCSID("$MirOS: contrib/code/jupp/va.c,v 1.5 2017/12/06 21:17:04 tg Exp $");
d171 1
a171 1
      loop:
@


1.5
log
@begin overhaul for antique/header compat:
• PARAMS begone
• libc4 ustat definition: resolve inline
• ignore HAVE_*_H for headers mksh includes unconditionally
@
text
@d10 1
a10 1
__RCSID("$MirOS: contrib/code/jupp/va.c,v 1.4 2017/12/02 02:07:37 tg Exp $");
d19 1
a19 1
	int *new = (int *) joe_malloc((1 + len) * sizeof(aELEMENT) + 2 * sizeof(int));
d31 1
a31 1
		joe_free((int *) vary - 2);
d52 1
a52 1
		vary = (aELEMENT *)(2 + (int *) joe_realloc((int *) vary - 2, (len + 1) * sizeof(aELEMENT) + 2 * sizeof(int)));
@


1.4
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d10 1
a10 1
__RCSID("$MirOS$");
a11 1
#ifdef HAVE_STDLIB_H
a12 1
#endif
@


1.3
log
@nuke junk
@
text
@a0 1
/* $MirOS: contrib/code/jupp/va.c,v 1.2 2008/05/13 13:08:32 tg Exp $ */
d10 2
@


1.2
log
@prepare for joe-3.1jupp9:
* sync NEWS
* bump vsn in configure.ac
* tag all files with RCS ID
* sync licence template
@
text
@d1 1
a1 1
/* $MirOS$ */
a108 18
#ifdef junk
aELEMENT *vancpy(aELEMENT *vary, int pos, aELEMENT *array, int len)
{
	int olen = aLEN(vary);

	if (!vary || pos + len > aSIZ(vary))
		vary = vaensure(vary, pos + len);
	if (pos + len > olen) {
		vary[pos + len] = vary[olen];
		aLen(vary) = pos + len;
	}
	if (pos > olen)
		vary = vafill(vary, olen, ablank, pos - olen);
	mfwrd(vary + pos, array, len * sizeof(aELEMENT));
	return vary;
}
#endif

@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 8
a8 2
/* Variable length array of strings
   Copyright (C) 1992 Joseph H. Allen
d10 48
a57 1
This file is part of JOE (Joe's Own Editor)
d59 4
a62 12
JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
d64 26
a89 3
#include "blocks.h"
#include "zstr.h"
#include "va.h"
d91 1
a91 2
aELEMENT(*vamk(len))
int len;
d93 13
a105 94
int *new=(int *)malloc((1+len)*sizeof(aCAST)+2*sizeof(int));
new[0]=len;
new[1]=0;
((aELEMENT(*))(new+2))[0]=aterm;
return (aELEMENT(*))(new+2);
}

void varm(vary)
aELEMENT(*vary);
{
if(vary)
 {
 vazap(vary,0,aLen(vary));
 free((int *)vary-2);
 }
}

int alen(ary)
aELEMENT(*ary);
{
if(ary)
 {
 aELEMENT(*beg)=ary;
 while(acmp(*ary,aterm)) ++ary;
 return ary-beg;
 }
else return 0;
}

aELEMENT(*vaensure(vary,len))
aELEMENT(*vary);
int len;
{
if(!vary) vary=vamk(len);
else if(len>aSiz(vary))
 {
 len+=(len>>2);
 vary=(aELEMENT(*))(2+(int *)realloc(
       (int *)vary-2,(len+1)*sizeof(aCAST)+2*sizeof(int) ));
 aSiz(vary)=len;
 }
return vary;
}

aELEMENT(*vazap(vary,pos,n))
aELEMENT(*vary);
int pos,n;
{
if(vary)
 {
 int x;
 if(pos<aLen(vary))
  if(pos+n<=aLen(vary))
   for(x=pos;x!=pos+n;++x) adel(vary[x]);
  else
   for(x=pos;x!=aLen(vary);++x) adel(vary[x]);
 }
return vary;
}

aELEMENT(*vatrunc(vary,len))
aELEMENT(*vary);
int len;
{
if(!vary || len>aLEN(vary)) vary=vaensure(vary,len);
if(len<aLen(vary))
 {
 vary=vazap(vary,len,aLen(vary)-len);
 vary[len]=vary[aLen(vary)];
 aLen(vary)=len;
 }
else if(len>aLen(vary))
 {
 vary=vafill(vary,aLen(vary),ablank,len-aLen(vary));
 }
return vary;
}

aELEMENT(*vafill(vary,pos,el,len))
aELEMENT(*vary);
aELEMENT(el);
int pos,len;
{
int olen=aLEN(vary), x;
if(!vary || pos+len>aSIZ(vary))
 vary=vaensure(vary,pos+len);
if(pos+len>olen)
 {
 vary[pos+len]=vary[olen];
 aLen(vary)=pos+len;
 }
for(x=pos;x!=pos+len;++x) vary[x]=adup(el);
if(pos>olen) vary=vafill(vary,pos,ablank,pos-olen);
return vary;
d109 14
a122 15
aELEMENT(*vancpy(vary,pos,array,len))
aELEMENT(*vary);
aELEMENT(*array);
int pos, len;
{
int olen=aLEN(vary);
if(!vary || pos+len>aSIZ(vary)) vary=vaensure(vary,pos+len);
if(pos+len>olen)
 {
 vary[pos+len]=vary[olen];
 aLen(vary)=pos+len;
 }
if(pos>olen) vary=vafill(vary,olen,ablank,pos-olen);
mfwrd(vary+pos,array,len*sizeof(aCAST));
return vary;
d126 79
a204 89
aELEMENT(*vandup(vary,pos,array,len))
aELEMENT(*vary);
aELEMENT(*array);
int pos, len;
{
int olen=aLEN(vary), x;
if(!vary || pos+len>aSIZ(vary)) vary=vaensure(vary,pos+len);
if(pos+len>olen)
 {
 vary[pos+len]=vary[olen];
 aLen(vary)=pos+len;
 }
if(pos>olen) vary=vafill(vary,olen,ablank,pos-olen);
for(x=0;x!=len;++x) vary[x+pos]=adup(array[x]);
return vary;
}

aELEMENT(*vadup(vary))
aELEMENT(*vary);
{
return vandup(NULL,0,vary,aLEN(vary));
}

aELEMENT(*_vaset(vary,pos,el))
aELEMENT(*vary);
aELEMENT(el);
int pos;
{
if(!vary || pos+1>aSIZ(vary)) vary=vaensure(vary,pos+1);
if(pos>aLen(vary))
 {
 vary=vafill(vary,aLen(vary),ablank,pos-aLen(vary));
 vary[pos+1]=vary[pos];
 vary[pos]=el;
 aLen(vary)=pos+1;
 }
else if(pos==aLen(vary))
 {
 vary[pos+1]=vary[pos];
 vary[pos]=el;
 aLen(vary)=pos+1;
 }
else
 {
 adel(vary[pos]);
 vary[pos]=el;
 }
return vary;
}

int _acmp(a,b)
aELEMENT(*a);
aELEMENT(*b);
{
return acmp(*a,*b);
}

aELEMENT(*vasort(ary,len))
aELEMENT(*ary);
int len;
{
if(!ary || !len) return ary;
qsort(ary,len,sizeof(aCAST),_acmp);
return ary;
}

aELEMENT(*vawords(a,s,len,sep,seplen))
aELEMENT(*a);
char *s, *sep;
int len, seplen;
{
int x;
if(!a) a=vamk(10);
else a=vatrunc(a,0);
loop:
x=vsspan(s,len,sep,seplen);
s+=x; len-=x;
if(len)
 {
 x=vsscan(s,len,sep,seplen);
 if(x!= ~0)
  {
  a=vaadd(a,vsncpy(vsmk(x),0,s,x));
  s+=x; len-=x;
  if(len) goto loop;
  }
 else a=vaadd(a,vsncpy(vsmk(len),0,s,len));
 }
return a;
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
