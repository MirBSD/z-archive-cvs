head	1.8;
access;
symbols
	joe-3_1jupp38:1.8
	joe-3_1jupp37:1.8
	joe-3_1jupp36:1.8
	joe-3_1jupp35:1.8
	joe-3_1jupp34:1.8
	joe-3_1jupp33:1.8
	joe-3_1jupp32:1.8
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.2
	joe-3_1jupp30:1.2
	joe-3_1jupp29:1.2
	joe-3_1jupp28:1.2
	joe-3_1jupp27:1.2
	joe-3_1jupp26:1.2
	joe-3_1jupp25:1.2
	joe-3_1jupp24:1.2
	joe-3_1jupp23:1.2
	joe-3_1jupp22:1.2
	joe-3_1jupp21:1.2
	joe-3_1jupp20:1.2
	joe-3_1jupp19:1.2
	joe-3_1jupp18:1.2
	joe-3_1jupp17:1.2
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.2
	joe-3_1jupp15:1.2
	joe-3_1jupp14:1.2
	joe-3_1jupp12:1.2
	joe-3_1jupp11:1.2
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.2
	joe-3_1jupp9:1.2
	joe-3_1jupp8:1.1.201.1
	joe-3_1jupp7:1.1.201.1
	joe-3_1jupp6:1.1.201.1
	joe-3_1jupp5:1.1.201.1
	joe-3_1jupp4:1.1.201.1
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.8
date	2017.12.08.02.28.05;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005A29F8C708B176AB;

1.7
date	2017.12.07.02.10.17;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005A28A3145E1FF911;

1.6
date	2017.12.06.23.02.03;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005A2876FC4FFE7EF5;

1.5
date	2017.12.06.21.16.58;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005A285E5918D423C7;

1.4
date	2017.12.02.18.50.03;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005A22F5E2328F5222;

1.3
date	2017.12.02.02.07.29;	author tg;	state Exp;
branches;
next	1.2;
commitid	1005A220AD65C90E687;

1.2
date	2008.05.13.13.08.24;	author tg;	state Exp;
branches;
next	1.1;
commitid	100482992BC01EE89A1;

1.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.22;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.8
log
@label indent; small tweaks while here
@
text
@/*
 *	Position history
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "config.h"
#include "types.h"

__RCSID("$MirOS: contrib/code/jupp/poshist.c,v 1.7 2017/12/07 02:10:17 tg Exp $");

#include <stdlib.h>

#include "b.h"
#include "poshist.h"
#include "queue.h"
#include "w.h"

typedef struct pos POS;

struct pos {
	LINK(POS) link;
	P *p;
	W *w;
};

POS pos = { {&pos, &pos}, NULL, NULL };
POS frpos = { {&frpos, &frpos}, NULL, NULL };
POS *curpos = &pos;
int npos = 0;

static void markpos(W *w, P *p)
{
	POS *new = alitem(&frpos, sizeof(POS));

	new->p = NULL;
	pdupown(p, &new->p);
	poffline(new->p);
	new->w = w;
	enqueb(POS, link, &pos, new);
	if (npos == 20) {
		new = pos.link.next;
		prm(new->p);
		demote(POS, link, &frpos, new);
	} else {
		++npos;
	}
}

void afterpos(void)
{
	if (curpos != &pos) {
		demote(POS, link, &pos, curpos);
		curpos = &pos;
	}
}

void aftermove(W *w, P *p)
{
	if (pos.link.prev != &pos && pos.link.prev->w == w && pos.link.prev->p && labs(pos.link.prev->p->line - p->line) < 3) {
		poffline(pset(pos.link.prev->p, p));
	} else {
		markpos(w, p);
	}
}

void windie(W *w)
{
	POS *n;

	for (n = pos.link.prev; n != &pos; n = n->link.prev) {
		if (n->w == w) {
			n->w = NULL;
		}
	}
}

int unextpos(BW *bw)
{
	W *w = bw->parent;

 lp:
	if (curpos->link.next != &pos && curpos != &pos) {
		curpos = curpos->link.next;
		if (!curpos->p || !curpos->w) {
			goto lp;
		}
		if (w->t->curwin == curpos->w && curpos->p->byte == w->t->curwin->object.bw->cursor->byte) {
			goto lp;
		}
		if (w->t->curwin != curpos->w) {
			w->t->curwin = curpos->w;
			if (w->t->curwin->y == -1) {
				wfit(w->t);
			}
		}
		w = w->t->curwin;
		bw = w->object.bw;
		if (bw->cursor->byte != curpos->p->byte) {
			pset(bw->cursor, curpos->p);
		}
		return 0;
	} else {
		return -1;
	}
}

int uprevpos(BW *bw)
{
	W *w = bw->parent;

 lp:
	if (curpos->link.prev != &pos) {
		curpos = curpos->link.prev;
		if (!curpos->p || !curpos->w) {
			goto lp;
		}
		if (w->t->curwin == curpos->w && curpos->p->byte == w->t->curwin->object.bw->cursor->byte) {
			goto lp;
		}
		if (w->t->curwin != curpos->w) {
			w->t->curwin = curpos->w;
			if (w->t->curwin->y == -1) {
				wfit(w->t);
			}
		}
		w = w->t->curwin;
		bw = w->object.bw;
		if (bw->cursor->byte != curpos->p->byte) {
			pset(bw->cursor, curpos->p);
		}
		return 0;
	} else {
		return -1;
	}
}
@


1.7
log
@feeble first attempt at using a union to break up the UB in the polymorphism
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/poshist.c,v 1.6 2017/12/06 23:02:03 tg Exp $");
d83 1
a83 1
      lp:
d113 1
a113 1
      lp:
@


1.6
log
@lots of fixes related to prototyping
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/poshist.c,v 1.5 2017/12/06 21:16:58 tg Exp $");
d89 1
a89 1
		if (w->t->curwin == curpos->w && curpos->p->byte == ((BW *) w->t->curwin->object)->cursor->byte) {
d99 1
a99 1
		bw = (BW *) w->object;
d119 1
a119 1
		if (w->t->curwin == curpos->w && curpos->p->byte == ((BW *) w->t->curwin->object)->cursor->byte) {
d129 1
a129 1
		bw = (BW *) w->object;
@


1.5
log
@begin overhaul for antique/header compat:
• PARAMS begone
• libc4 ustat definition: resolve inline
• ignore HAVE_*_H for headers mksh includes unconditionally
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/poshist.c,v 1.4 2017/12/02 18:50:03 tg Exp $");
d16 1
@


1.4
log
@get rid of -Wmissing-field-initialisers, as Cygwin GCC forces my hand
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/poshist.c,v 1.3 2017/12/02 02:07:29 tg Exp $");
a12 1
#ifdef HAVE_STDLIB_H
a13 1
#endif
@


1.3
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d11 1
a11 1
__RCSID("$MirOS$");
d29 2
a30 2
POS pos = { {&pos, &pos} };
POS frpos = { {&frpos, &frpos} };
@


1.2
log
@prepare for joe-3.1jupp9:
* sync NEWS
* bump vsn in configure.ac
* tag all files with RCS ID
* sync licence template
@
text
@a0 1
/* $MirOS$ */
d11 2
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 13
a13 2
/* Position history
   Copyright (C) 1992 Joseph H. Allen
d15 1
a15 16
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 

#include "poshist.h"
a16 1
#include "b.h"
a17 2
#include "zstr.h"
#include "bw.h"
d21 116
a136 109
struct pos
 {
 LINK(POS) link;
 P *p;
 W *w;
 };

POS pos={{&pos,&pos}};
POS frpos={{&frpos,&frpos}};
POS *curpos= &pos;
int npos=0;

void markpos(w,p)
W *w;
P *p;
 {
 POS *new=alitem(&frpos,sizeof(POS));
 new->p=0;
 pdupown(p,&new->p);
 poffline(new->p);
 new->w=w;
 enqueb(POS,link,&pos,new);
 if(npos==20)
  {
  new=pos.link.next;
  prm(new->p);
  demote(POS,link,&frpos,new);
  }
 else ++npos;
 }

void afterpos()
 {
 if(curpos!= &pos)
  {
  demote(POS,link,&pos,curpos);
  curpos= &pos;
  }
 }

void aftermove(w,p)
W *w;
P *p;
 {
 if(pos.link.prev!=&pos &&
    pos.link.prev->w==w &&
    pos.link.prev->p &&
    Labs(pos.link.prev->p->line-p->line)<3
   )
  poffline(pset(pos.link.prev->p,p));
 else markpos(w,p);
 }

void windie(w)
W *w;
 {
 POS *n;
 for(n=pos.link.prev;n!=&pos;n=n->link.prev) if(n->w==w) n->w=0;
 }

int unextpos(bw)
BW *bw;
 {
 W *w=bw->parent;
 lp:
 if(curpos->link.next!=&pos && curpos!=&pos)
  {
  curpos=curpos->link.next;
  if(!curpos->p || !curpos->w) goto lp;
  if(w->t->curwin==curpos->w &&
     curpos->p->byte==((BW *)w->t->curwin->object)->cursor->byte) goto lp;
  if(w->t->curwin!=curpos->w)
   {
   w->t->curwin=curpos->w;
   if(w->t->curwin->y== -1) wfit(w->t);
   }
  w=w->t->curwin;
  bw=(BW *)w->object;
  if(bw->cursor->byte!=curpos->p->byte)
   pset(bw->cursor,curpos->p);
  return 0;
  }
 else return -1;
 }

int uprevpos(bw)
BW *bw;
 {
 W *w=bw->parent;
 lp:
 if(curpos->link.prev!=&pos)
  {
  curpos=curpos->link.prev;
  if(!curpos->p || !curpos->w) goto lp;
  if(w->t->curwin==curpos->w &&
     curpos->p->byte==((BW *)w->t->curwin->object)->cursor->byte) goto lp;
  if(w->t->curwin!=curpos->w)
   {
   w->t->curwin=curpos->w;
   if(w->t->curwin->y== -1) wfit(w->t);
   }
  w=w->t->curwin;
  bw=(BW *)w->object;
  if(bw->cursor->byte!=curpos->p->byte)
   pset(bw->cursor,curpos->p);
  return 0;
  }
 else return -1;
 }
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
