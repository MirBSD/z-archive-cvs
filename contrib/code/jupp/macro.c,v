head	1.20;
access;
symbols
	joe-3_1jupp38:1.20
	joe-3_1jupp37:1.20
	joe-3_1jupp36:1.20
	joe-3_1jupp35:1.20
	joe-3_1jupp34:1.20
	joe-3_1jupp33:1.20
	joe-3_1jupp32:1.19
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.8
	joe-3_1jupp30:1.7
	joe-3_1jupp29:1.7
	joe-3_1jupp28:1.7
	joe-3_1jupp27:1.7
	joe-3_1jupp26:1.7
	joe-3_1jupp25:1.7
	joe-3_1jupp24:1.7
	joe-3_1jupp23:1.7
	joe-3_1jupp22:1.6
	joe-3_1jupp21:1.6
	joe-3_1jupp20:1.6
	joe-3_1jupp19:1.6
	joe-3_1jupp18:1.6
	joe-3_1jupp17:1.6
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.6
	joe-3_1jupp15:1.6
	joe-3_1jupp14:1.6
	joe-3_1jupp12:1.3
	joe-3_1jupp11:1.3
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.3
	joe-3_1jupp9:1.3
	joe-3_1jupp8:1.2
	joe-3_1jupp7:1.2
	joe-3_1jupp6:1.2
	joe-3_1jupp5:1.2
	joe-3_1jupp4:1.2
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.20
date	2018.01.07.23.51.34;	author tg;	state Exp;
branches;
next	1.19;
commitid	1005A52B281212EC267;

1.19
date	2017.12.08.02.28.05;	author tg;	state Exp;
branches;
next	1.18;
commitid	1005A29F8C708B176AB;

1.18
date	2017.12.08.02.00.39;	author tg;	state Exp;
branches;
next	1.17;
commitid	1005A29F2506E789D2B;

1.17
date	2017.12.08.01.16.37;	author tg;	state Exp;
branches;
next	1.16;
commitid	1005A29E8063D55F339;

1.16
date	2017.12.06.23.58.37;	author tg;	state Exp;
branches;
next	1.15;
commitid	1005A2884424C3F3AD8;

1.15
date	2017.12.06.23.02.03;	author tg;	state Exp;
branches;
next	1.14;
commitid	1005A2876FC4FFE7EF5;

1.14
date	2017.12.06.21.41.02;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005A28640547F64250;

1.13
date	2017.12.06.21.16.57;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005A285E5918D423C7;

1.12
date	2017.12.06.16.37.40;	author tg;	state Exp;
branches;
next	1.11;
commitid	1005A281CE76609B21C;

1.11
date	2017.12.02.04.32.40;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005A222CF2122034D9;

1.10
date	2017.12.02.02.07.28;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005A220AD65C90E687;

1.9
date	2017.12.01.23.26.23;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005A21E4F06CA95502;

1.8
date	2017.03.19.19.19.50;	author tg;	state Exp;
branches;
next	1.7;
commitid	10058CED9DF339F2D5D;

1.7
date	2012.12.22.00.06.11;	author tg;	state Exp;
branches;
next	1.6;
commitid	10050D4F965570AEE79;

1.6
date	2010.04.08.15.31.01;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004BBDF6C54CC9A0DB;

1.5
date	2010.01.03.18.09.30;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004B40DD6B28074090;

1.4
date	2010.01.03.18.04.12;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004B40DC3058BF0904;

1.3
date	2008.05.13.13.08.23;	author tg;	state Exp;
branches;
next	1.2;
commitid	100482992BC01EE89A1;

1.2
date	2005.02.05.02.42.21;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.21;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.20
log
@new ralloc(x,y) = malloc(x*y) with checks, but not, unlike calloc,
with implizit size_t casting nor memory cleansing
@
text
@/*
 *	Keyboard macros
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "config.h"
#include "types.h"

__RCSID("$MirOS: contrib/code/jupp/macro.c,v 1.18 2017/12/08 02:00:39 tg Exp $");

#include <string.h>
#include <stdlib.h>

#include "b.h"
#include "cmd.h"
#include "macro.h"
#include "main.h"
#include "pw.h"
#include "qw.h"
#include "tty.h"
#include "ublock.h"
#include "uedit.h"
#include "umath.h"
#include "undo.h"
#include "utils.h"
#include "vs.h"
#include "charmap.h"
#include "w.h"

MACRO *freemacros = NULL;

/* Create a macro */

MACRO *mkmacro(int k, int arg, int n, CMD *cmd)
{
	MACRO *macro;

	if (!freemacros) {
		int x;

		/* FIXME: why limit to 64? */
		macro = ralloc(64, sizeof(MACRO));
		for (x = 0; x != 64; ++x) {
			macro[x].steps = (MACRO **) freemacros;
			freemacros = macro + x;
		}
	}
	macro = freemacros;
	freemacros = (MACRO *) macro->steps;
	macro->steps = NULL;
	macro->size = 0;
	macro->arg = arg;
	macro->n = n;
	macro->cmd = cmd;
	macro->k = k;
	return macro;
}

/* Eliminate a macro */

void rmmacro(MACRO *macro)
{
	if (macro) {
		if (macro->steps) {
			int x;

			for (x = 0; x != macro->n; ++x)
				rmmacro(macro->steps[x]);
			free(macro->steps);
		}
		macro->steps = (MACRO **) freemacros;
		freemacros = macro;
	}
}

/* Add a step to block macro */

void addmacro(MACRO *macro, MACRO *m)
{
	if (macro->n == macro->size) {
		if (macro->steps)
			macro->steps = realloc(macro->steps, (macro->size += 8) * sizeof(MACRO *));
		else
			macro->steps = ralloc((size_t)(macro->size = 8), sizeof(MACRO *));
	}
	macro->steps[macro->n++] = m;
}

/* Duplicate a macro */

MACRO *dupmacro(MACRO *mac)
{
	MACRO *m = mkmacro(mac->k, mac->arg, mac->n, mac->cmd);

	if (mac->steps) {
		int x;

		m->steps = ralloc((size_t)(m->size = mac->n), sizeof(MACRO *));
		for (x = 0; x != m->n; ++x)
			m->steps[x] = dupmacro(mac->steps[x]);
	}
	return m;
}

/* Set key part of macro */

MACRO *macstk(MACRO *m, int k)
{
	m->k = k;
	return m;
}

/* Set arg part of macro */

MACRO *macsta(MACRO *m, int a)
{
	m->arg = a;
	return m;
}

/* Parse text into a macro
 * sta is set to:  ending position in buffer for no error.
 *                 -1 for syntax error
 *                 -2 for need more input
 */

MACRO *mparse(MACRO *m, unsigned char *buf, int *sta)
{
	int y, c, x = 0;

 macroloop:

	/* Skip whitespace */
	while (joe_isblank(locale_map,buf[x]))
		++x;

	/* If the buffer is only whitespace then treat as unknown command */
	if (!buf[x]) {
		*sta = -1;
		return NULL;
	}

	/* Do we have a string? */
	if (buf[x] == '\"') {
		++x;
		while (buf[x] && buf[x] != '\"') {
			if (buf[x] == '\\' && buf[x + 1]) {
				++x;
				switch (buf[x]) {
				case 'n':
					buf[x] = 10;
					break;
				case 'r':
					buf[x] = 13;
					break;
				case 'b':
					buf[x] = 8;
					break;
				case 'f':
					buf[x] = 12;
					break;
				case 'a':
					buf[x] = 7;
					break;
				case 't':
					buf[x] = 9;
					break;
				case 'x':
					x += 1 + ustoc_hex(buf + x + 1, &c, USTOC_MAX);
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					x += ustoc_oct(buf + x, &c, USTOC_MAX);
					break;
				}
			}
			if (m) {
				if (!m->steps) {
					MACRO *macro = m;

					m = mkmacro(-1, 1, 0, NULL);
					addmacro(m, macro);
				}
			} else
				m = mkmacro(-1, 1, 0, NULL);
			addmacro(m, mkmacro(buf[x], 1, 0, findcmd(UC "type")));
			++x;
		}
		if (buf[x] == '\"')
			++x;
	}

	/* Do we have a command? */
	else {
		for (y = x; buf[y] && buf[y] != ',' && buf[y] != ' ' && buf[y] != '\t' && buf[y] != '\n' && buf[x] != '\r'; ++y) ;
		if (y != x) {
			CMD *cmd;

			c = buf[y];
			buf[y] = 0;
			cmd = findcmd(buf + x);
			if (!cmd) {
				*sta = -1;
				return NULL;
			} else if (m) {
				if (!m->steps) {
					MACRO *macro = m;

					m = mkmacro(-1, 1, 0, NULL);
					addmacro(m, macro);
				}
				addmacro(m, mkmacro(-1, 1, 0, cmd));
			} else
				m = mkmacro(-1, 1, 0, cmd);
			buf[x = y] = c;
		}
	}

	/* Skip whitespace */
	while (joe_isblank(locale_map,buf[x]))
		++x;

	/* Do we have a comma? */
	if (buf[x] == ',') {
		++x;
		while (joe_isblank(locale_map,buf[x]))
			++x;
		if (buf[x] && buf[x] != '\r' && buf[x] != '\n')
			goto macroloop;
		*sta = -2;
		return m;
	}

	/* Done */
	*sta = x;
	return m;
}

/* Convert macro to text */

static unsigned char *ptr;
static int first;
static int instr;

static unsigned char *unescape(unsigned char *uptr, int c)
{
	if (c == '"') {
		*uptr++ = '\\';
		*uptr++ = '"';
	} else if (c == '\\') {
		*uptr++ = '\\';
		*uptr++ = '\\';
	} else if (c == '\'') {
		*uptr++ = '\\';
		*uptr++ = '\'';
	} else if (c < 32 || c > 126) {
		/* FIXME: what if c > 256 or c < 0 ? */
		*uptr++ = '\\';
		*uptr++ = 'x';
		*uptr++ = "0123456789ABCDEF"[c >> 4];
		*uptr++ = "0123456789ABCDEF"[c & 15];
	} else
		*uptr++ = c;
	return uptr;
}

static void domtext(MACRO *m)
{
	int x;

	if (!m)
		return;
	if (m->steps)
		for (x = 0; x != m->n; ++x)
			domtext(m->steps[x]);
	else {
		if (instr && strcmp(m->cmd->name, "type")) {
			*ptr++ = '\"';
			instr = 0;
		}
		if (first)
			first = 0;
		else if (!instr)
			*ptr++ = ',';
		if (!strcmp(m->cmd->name, "type")) {
			if (!instr) {
				*ptr++ = '\"';
				instr = 1;
			}
			ptr = unescape(ptr, m->k);
		} else {
			for (x = 0; m->cmd->name[x]; ++x)
				*ptr++ = m->cmd->name[x];
			if (!strcmp(m->cmd->name, "play") || !strcmp(m->cmd->name, "gomark") || !strcmp(m->cmd->name, "setmark") || !strcmp(m->cmd->name, "record") || !strcmp(m->cmd->name, "uarg")) {
				*ptr++ = ',';
				*ptr++ = '"';
				ptr = unescape(ptr, m->k);
				*ptr++ = '"';
			}
		}
	}
}

unsigned char *mtext(unsigned char *s, MACRO *m)
{
	ptr = s;
	first = 1;
	instr = 0;
	domtext(m);
	if (instr)
		*ptr++ = '\"';
	*ptr = 0;
	return s;
}

/* Keyboard macro recorder */

static MACRO *kbdmacro[10];
static int playmode[10];

struct recmac *recmac = NULL;

static void unmac(void)
{
	if (recmac)
		rmmacro(recmac->m->steps[--recmac->m->n]);
}

void chmac(void)
{
	if (recmac && recmac->m->n)
		recmac->m->steps[recmac->m->n - 1]->k = 3;
}

static void record(MACRO *m)
{
	if (recmac)
		addmacro(recmac->m, dupmacro(m));
}

/* Query for user input */

int uquery(BW *bw)
{
	int ret;
	struct recmac *tmp = recmac;

	recmac = NULL;
	ret = edloop(1);
	recmac = tmp;
	return ret;
}

/* Macro execution */

MACRO *curmacro = NULL;		/* Set if we're in a macro */
static int macroptr;
static int arg = 0;		/* Repeat argument */
static int argset = 0;		/* Set if 'arg' is set */

int exmacro(MACRO *m, int u)
{
	int larg;
	/*XXX why is this local here and global below? */
	int negarg = 0;
	int flg = 0;
	CMD *cmd = NULL;
	int ret = 0;

	if (argset) {
		larg = arg;
		arg = 0;
		argset = 0;
		if (larg < 0) {
			negarg = 1;
			larg = -larg;
		}
		if (m->steps) {
			; /* dead store: negarg = 0; */
		} else {
			cmd = m->cmd;
			if (!cmd->arg)
				larg = 0;
			else if (negarg) {
				if (cmd->negarg)
					cmd = findcmd(cmd->negarg);
				else
					larg = 0;
			}
		}
	} else {
		cmd = m->cmd;
		larg = 1;
	}

	if (m->steps || larg != 1 || !(cmd->flag & EMINOR)
	    || maint->curwin->watom->what == TYPEQW	/* Undo work right for s & r */
	    )
		flg = 1;

	if (flg && u)
		umclear();
	while (larg-- && !leave && !ret)
		if (m->steps) {
			MACRO *tmpmac = curmacro;
			int tmpptr = macroptr;
			int x = 0;
			int stk = nstack;

			while (m && x != m->n && !leave && !ret) {
				MACRO *d;

				d = m->steps[x++];
				curmacro = m;
				macroptr = x;
				ret = exmacro(d, 0);
				m = curmacro;
				x = macroptr;
			}
			curmacro = tmpmac;
			macroptr = tmpptr;
			while (nstack > stk)
				upop(NULL);
		} else
			ret = execmd(cmd, m->k);
	if (leave)
		return ret;
	if (flg && u)
		umclear();

	if (u)
		undomark();

	return ret;
}

/* Execute a macro */

int exemac(MACRO *m)
{
	record(m);
	return exmacro(m, 1);
}

/* Keyboard macro user routines */

static int dorecord(BW *bw, int c, void *object, int *notify)
{
	int n;
	struct recmac *r;

	if (notify)
		*notify = 1;
	if (c > '9' || c < '0') {
		nungetc(c);
		return -1;
	}
	for (n = 0; n != 10; ++n)
		if (playmode[n])
			return -1;
	r = malloc(sizeof(struct recmac));

	r->m = mkmacro(0, 1, 0, NULL);
	r->next = recmac;
	r->n = c - '0';
	recmac = r;
	return 0;
}

int urecord(BW *bw, int c)
{
	if (c >= '0' && c <= '9')
		return dorecord(bw, c, NULL, NULL);
	else if (mkqw(bw->parent, sc("Macro to record (0-9 or ^C to abort): "), dorecord, NULL, NULL, NULL))
		return 0;
	else
		return -1;
}

extern volatile int dostaupd;

int ustop(void)
{
	unmac();
	if (recmac) {
		struct recmac *r = recmac;
		MACRO *m;

		dostaupd = 1;
		recmac = r->next;
		if (kbdmacro[r->n])
			rmmacro(kbdmacro[r->n]);
		kbdmacro[r->n] = r->m;
		if (recmac)
			record(m = mkmacro(r->n + '0', 1, 0, findcmd(UC "play"))), rmmacro(m);
		free(r);
	}
	return 0;
}

static int doplay(BW *bw, int c, void *object, int *notify)
{
	if (notify)
		*notify = 1;
	if (c >= '0' && c <= '9') {
		int ret;

		c -= '0';
		if (playmode[c] || !kbdmacro[c])
			return -1;
		playmode[c] = 1;
		ret = exmacro(kbdmacro[c], 0);
		playmode[c] = 0;
		return ret;
	} else {
		nungetc(c);
		return -1;
	}
}

int umacros(BW *bw)
{
	int x;
	unsigned char buf[1024];

	p_goto_eol(bw->cursor);
	for (x = 0; x != 10; ++x)
		if (kbdmacro[x]) {
			mtext(buf, kbdmacro[x]);
			binss(bw->cursor, buf);
			p_goto_eol(bw->cursor);
			joe_snprintf_2((char *)buf, JOE_MSGBUFSIZE, "\t^K %c\tMacro %d", x + '0', x);
			binss(bw->cursor, buf);
			p_goto_eol(bw->cursor);
			binsc(bw->cursor, '\n');
			pgetc(bw->cursor);
		}
	return 0;
}

int uplay(BW *bw, int c)
{
	if (c >= '0' && c <= '9')
		return doplay(bw, c, NULL, NULL);
	else if (mkqwna(bw->parent, sc("Play-"), doplay, NULL, NULL, NULL))
		return 0;
	else
		return -1;
}

/* Repeat-count setting */

static int doarg(BW *bw, unsigned char *s, void *object, int *notify)
{
	long num;

	if (notify)
		*notify = 1;
	num = calcl(bw, s);
	if (merrf) {
		vsrm(s);
		msgnw(bw->parent, merrt);
		return -1;
	}
	arg = num;
	argset = 1;
	vsrm(s);
	return 0;
}

int uarg(BW *bw)
{
	if (wmkpw(bw->parent, UC "No. times to repeat next command (^C to abort): ", NULL, doarg, NULL, NULL, utypebw, NULL, NULL, locale_map))
		return 0;
	else
		return -1;
}

int unaarg;
int negarg;

static int douarg(BW *bw, int c, void *object, int *notify)
{
	if (c == '-')
		negarg = !negarg;
	else if (c >= '0' && c <= '9')
		unaarg = unaarg * 10 + c - '0';
	else if (c == 'U' - '@@')
		if (unaarg)
			unaarg *= 4;
		else
			unaarg = 16;
	else if (c == 7 || c == 3 || c == 32) {
		if (notify)
			*notify = 1;
		return -1;
	} else {
		nungetc(c);
		if (unaarg)
			arg = unaarg;
		else if (negarg)
			arg = 1;
		else
			arg = 4;
		if (negarg)
			arg = -arg;
		argset = 1;
		if (notify)
			*notify = 1;
		return 0;
	}
	joe_snprintf_2((char *)msgbuf, JOE_MSGBUFSIZE, "Repeat %s%d", negarg ? "-" : "", unaarg);
	if (mkqwna(bw->parent, sz(msgbuf), douarg, NULL, NULL, notify))
		return 0;
	else
		return -1;
}

int uuarg(BW *bw, int c)
{
	unaarg = 0;
	negarg = 0;
	if ((c >= '0' && c <= '9') || c == '-')
		return douarg(bw, c, NULL, NULL);
	else if (mkqwna(bw->parent, sc("Repeat"), douarg, NULL, NULL, NULL))
		return 0;
	else
		return -1;
}
@


1.19
log
@label indent; small tweaks while here
@
text
@d44 1
a44 1
		macro = calloc(64, sizeof(MACRO));
d86 1
a86 1
			macro->steps = calloc((macro->size = 8), sizeof(MACRO *));
d100 1
a100 1
		m->steps = calloc((m->size = mac->n), sizeof(MACRO *));
@


1.18
log
@don’t box malloc/calloc/realloc/free; don’t cast malloc result; order calloc args
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/macro.c,v 1.17 2017/12/08 01:16:37 tg Exp $");
d133 1
a133 1
      macroloop:
@


1.17
log
@fix a couple of prompt window result string memory leaks
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/macro.c,v 1.15 2017/12/06 23:02:03 tg Exp $");
d43 3
a45 2
		macro = (MACRO *) joe_malloc(sizeof(MACRO) * 64);
		for (x = 0; x != 64; ++x) {	/* FIXME: why limit to 64? */
d71 1
a71 1
			joe_free(macro->steps);
d84 1
a84 1
			macro->steps = (MACRO **) joe_realloc(macro->steps, (macro->size += 8) * sizeof(MACRO *));
d86 1
a86 1
			macro->steps = (MACRO **) joe_malloc((macro->size = 8) * sizeof(MACRO *));
d100 1
a100 1
		m->steps = (MACRO **) joe_malloc((m->size = mac->n) * sizeof(MACRO *));
d471 1
a471 1
	r = (struct recmac *) joe_malloc(sizeof(struct recmac));
d506 1
a506 1
		joe_free(r);
@


1.16
log
@make wmkpw const again
@
text
@d570 1
@


1.15
log
@lots of fixes related to prototyping
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/macro.c,v 1.14 2017/12/06 21:41:02 tg Exp $");
d581 1
a581 1
	if (wmkpw(bw->parent, US "No. times to repeat next command (^C to abort): ", NULL, doarg, NULL, NULL, utypebw, NULL, NULL, locale_map))
@


1.14
log
@const cleanup
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/macro.c,v 1.12 2017/12/06 16:37:40 tg Exp $");
d18 1
@


1.13
log
@begin overhaul for antique/header compat:
• PARAMS begone
• libc4 ustat definition: resolve inline
• ignore HAVE_*_H for headers mksh includes unconditionally
@
text
@d194 1
a194 1
			addmacro(m, mkmacro(buf[x], 1, 0, findcmd(US "type")));
d503 1
a503 1
			record(m = mkmacro(r->n + '0', 1, 0, findcmd(US "play"))), rmmacro(m);
@


1.12
log
@use ustoc_* functions
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/macro.c,v 1.10 2017/12/02 02:07:28 tg Exp $");
a13 1
#ifdef HAVE_STDLIB_H
a14 1
#endif
@


1.11
log
@some fallout of the includes changes, some more reduction
@
text
@d171 1
a171 10
					c = 0;
					if (buf[x + 1] >= '0' && buf[x + 1] <= '9')
						c = c * 16 + buf[++x] - '0';
					else if ((buf[x + 1] >= 'a' && buf[x + 1] <= 'f') || (buf[x + 1] >= 'A' && buf[x + 1] <= 'F'))
						c = c * 16 + (buf[++x] & 0xF) + 9;
					if (buf[x + 1] >= '0' && buf[x + 1] <= '9')
						c = c * 16 + buf[++x] - '0';
					else if ((buf[x + 1] >= 'a' && buf[x + 1] <= 'f') || (buf[x + 1] >= 'A' && buf[x + 1] <= 'F'))
						c = c * 16 + (buf[++x] & 0xF) + 9;
					buf[x] = c;
d183 1
a183 6
					c = buf[x] - '0';
					if (buf[x + 1] >= '0' && buf[x + 1] <= '7')
						c = c * 8 + buf[++x] - '0';
					if (buf[x + 1] >= '0' && buf[x + 1] <= '7')
						c = c * 8 + buf[++x] - '0';
					buf[x] = c;
@


1.10
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d11 1
a11 1
__RCSID("$MirOS$");
a29 1
#include "utf8.h"
@


1.9
log
@add a level of indirection: never use math’s calc() outside of umath

in the places where we used it, we now have calcl() which takes the
same arguments, evaluates its second parameter (in the context BW of
the first), but returns it as long; calcldec() subtracts 1.0 first

this confines all floating point operations into umath.?
@
text
@a0 1
/* $MirOS: contrib/code/jupp/macro.c,v 1.8 2017/03/19 19:19:50 tg Exp $ */
d11 2
a12 1
#include <stdio.h>
@


1.8
log
@_some_ type cleanup (time_t, sig_atomic_t)

still unsafe signal handler crap abound :(
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/macro.c,v 1.6 2010/04/08 15:31:01 tg Exp $ */
d584 1
a584 1
	num = calc(bw, s);
@


1.7
log
@some clang-3.2/scan-build work; also checked against gcc-4.7, gcc-4.8 and
gcc version 4.8.0 20121120 (experimental) [trunk revision 193662] (Debian 20121120-1)
@
text
@d585 2
a586 2
	if (merr) {
		msgnw(bw->parent, merr);
@


1.6
log
@Add --disable-getpwnam and clean up warnings
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/macro.c,v 1.5 2010/01/03 18:09:30 tg Exp $ */
d389 1
d403 3
a405 3
		if (m->steps)
			negarg = 0;
		else {
@


1.5
log
@properly escape ‘\’ on Esc+d
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/macro.c,v 1.4 2010/01/03 18:04:12 tg Exp $ */
d270 1
a270 1
static unsigned char *unescape(unsigned char *ptr, int c)
d273 2
a274 2
		*ptr++ = '\\';
		*ptr++ = '"';
d276 2
a277 2
		*ptr++ = '\\';
		*ptr++ = '\\';
d279 2
a280 2
		*ptr++ = '\\';
		*ptr++ = '\'';
d283 4
a286 4
		*ptr++ = '\\';
		*ptr++ = 'x';
		*ptr++ = "0123456789ABCDEF"[c >> 4];
		*ptr++ = "0123456789ABCDEF"[c & 15];
d288 2
a289 2
		*ptr++ = c;
	return ptr;
@


1.4
log
@mitigate possible segv
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/macro.c,v 1.3 2008/05/13 13:08:23 tg Exp $ */
d275 3
@


1.3
log
@prepare for joe-3.1jupp9:
* sync NEWS
* bump vsn in configure.ac
* tag all files with RCS ID
* sync licence template
@
text
@d1 1
a1 1
/* $MirOS$ */
d140 6
@


1.2
log
@Update the non-generated files to joe-3.1jupp2
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d381 1
a381 1
	CMD *cmd;
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 9
a9 2
/* Keyboard macros
   Copyright (C) 1992 Joseph H. Allen
d11 5
a15 14
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
d17 2
d20 1
d22 1
a22 5
#include "pw.h"
#include "bw.h"
#include "vs.h"
#include "undo.h"
#include "cmd.h"
d24 1
d26 6
a31 3
#include "uedit.h"
#include "zstr.h"
#include "macro.h"
d33 1
a33 1
MACRO *freemacros=0;
d37 23
a59 22
MACRO *mkmacro(k,arg,n,cmd)
CMD *cmd;
 {
 MACRO *macro;
 if(!freemacros)
  {
  int x;
  macro=(MACRO *)malloc(sizeof(MACRO)*64);
  for(x=0;x!=64;++x)
   macro[x].steps=(MACRO **)freemacros,
   freemacros=macro+x;
  }
 macro=freemacros;
 freemacros=(MACRO *)macro->steps;
 macro->steps=0;
 macro->size=0;
 macro->arg=arg;
 macro->n=n;
 macro->cmd=cmd;
 macro->k=k;
 return macro;
 }
d63 14
a76 15
void rmmacro(macro)
MACRO *macro;
 {
 if(macro)
  {
  if(macro->steps)
   {
   int x;
   for(x=0;x!=macro->n;++x) rmmacro(macro->steps[x]);
   free(macro->steps);
   }
  macro->steps=(MACRO **)freemacros;
  freemacros=macro;
  }
 }
d80 10
a89 10
void addmacro(macro,m)
MACRO *macro, *m;
 {
 if(macro->n==macro->size)
  if(macro->steps)
   macro->steps=(MACRO **)realloc(macro->steps,(macro->size+=8)*sizeof(MACRO *));
  else
   macro->steps=(MACRO **)malloc((macro->size=8)*sizeof(MACRO *));
 macro->steps[macro->n++]=m;
 }
d93 13
a105 12
MACRO *dupmacro(mac)
MACRO *mac;
 {
 MACRO *m=mkmacro(mac->k,mac->arg,mac->n,mac->cmd);
 if(mac->steps)
  {
  int x;
  m->steps=(MACRO **)malloc((m->size=mac->n)*sizeof(MACRO *));
  for(x=0;x!=m->n;++x) m->steps[x]=dupmacro(mac->steps[x]);
  }
 return m;
 }
d109 5
a113 6
MACRO *macstk(m,k)
MACRO *m;
 {
 m->k=k;
 return m;
 }
d117 5
a121 6
MACRO *macsta(m,a)
MACRO *m;
 {
 m->arg=a;
 return m;
 }
d129 127
a255 113
MACRO *mparse(m,buf,sta)
MACRO *m;
char *buf;
int *sta;
 {
 int y, c, x=0;

 macroloop:

 /* Skip whitespace */
 while(cwhite(buf[x])) ++x;

 /* Do we have a string? */
 if(buf[x]=='\"')
  {
  ++x;
  while(buf[x] && buf[x]!='\"')
   {
   if(buf[x]=='\\' && buf[x+1])
    {
    ++x;
    switch(buf[x])
     {
    case 'n': buf[x]=10; break;
    case 'r': buf[x]=13; break;
    case 'b': buf[x]=8; break;
    case 'f': buf[x]=12; break;
    case 'a': buf[x]=7; break;
    case 't': buf[x]=9; break;
    case 'x':
     c=0;
     if(buf[x+1]>='0' && buf[x+1]<='9') c=c*16+buf[++x]-'0';
     else if(buf[x+1]>='a' && buf[x+1]<='f' ||
             buf[x+1]>='A' && buf[x+1]<='F') c=c*16+(buf[++x]&0xF)+9;
     if(buf[x+1]>='0' && buf[x+1]<='9') c=c*16+buf[++x]-'0';
     else if(buf[x+1]>='a' && buf[x+1]<='f' ||
             buf[x+1]>='A' && buf[x+1]<='F') c=c*16+(buf[++x]&0xF)+9;
     buf[x]=c;
     break;
    case '0': case '1': case '2': case '3':
    case '4': case '5': case '6': case '7':
    case '8': case '9':
     c=buf[x]-'0';
     if(buf[x+1]>='0' && buf[x+1]<='7') c=c*8+buf[++x]-'0';
     if(buf[x+1]>='0' && buf[x+1]<='7') c=c*8+buf[++x]-'0';
     buf[x]=c;
     break;
     }
    }
   if(m)
    {
    if(!m->steps)
     {
     MACRO *macro=m;
     m=mkmacro(MAXINT,1,0,NULL);
     addmacro(m,macro);
     }
    }
   else m=mkmacro(MAXINT,1,0,NULL);
   addmacro(m,mkmacro(buf[x],1,0,findcmd("type")));
   ++x;
   }
  if(buf[x]=='\"') ++x;
  }

 /* Do we have a command? */
 else
  {
  for(y=x;
      buf[y] && buf[y]!=',' && buf[y]!=' ' && buf[y]!='\t' && buf[y]!='\n' && buf[x]!='\r';
      ++y);
  if(y!=x)
   {
   CMD *cmd;
   c=buf[y]; buf[y]=0;
   cmd=findcmd(buf+x);
   if(!cmd)
    {
    *sta = -1;
    return 0;
    }
   else if(m)
    {
    if(!m->steps)
     {
     MACRO *macro=m;
     m=mkmacro(MAXINT,1,0,NULL);
     addmacro(m,macro);
     }
    addmacro(m,mkmacro(MAXINT,1,0,cmd));
    }
   else m=mkmacro(MAXINT,1,0,cmd);
   buf[x=y]=c;
   }
  }

 /* Skip whitespace */
 while(cwhite(buf[x])) ++x;

 /* Do we have a comma? */
 if(buf[x]==',')
  {
  ++x;
  while(cwhite(buf[x])) ++x;
  if(buf[x] && buf[x]!='\r' && buf[x]!='\n') goto macroloop;
  *sta= -2;
  return m;
  }

 /* Done */
 *sta=x;
 return m;
 }
d259 1
a259 1
static char *ptr;
d263 67
a329 63
char *unescape(ptr,c)
char *ptr;
 {
 if(c=='"') *ptr++='\\', *ptr++='"';
 else if(c=='\'') *ptr++='\\', *ptr++='\'';
 else if(c<32 || c>126)
  {
  *ptr++='\\';
  *ptr++='x';
  *ptr++="0123456789ABCDEF"[c>>4];
  *ptr++="0123456789ABCDEF"[c&15];
  }
 else *ptr++=c;
 return ptr;
 }

void domtext(m)
MACRO *m;
 {
 int x;
 if(!m) return;
 if(m->steps)
  for(x=0;x!=m->n;++x) domtext(m->steps[x]);
 else
  {
  if(instr && zcmp(m->cmd->name,"type")) *ptr++='\"', instr=0;
  if(first) first=0;
  else if(!instr) *ptr++=',';
  if(!zcmp(m->cmd->name,"type"))
   {
   if(!instr) *ptr++='\"', instr=1;
   ptr=unescape(ptr,m->k);
   }
  else
   {
   for(x=0;m->cmd->name[x];++x) *ptr++=m->cmd->name[x];
   if(!zcmp(m->cmd->name,"play") ||
      !zcmp(m->cmd->name,"gomark") ||
      !zcmp(m->cmd->name,"setmark") ||
      !zcmp(m->cmd->name,"record") ||
      !zcmp(m->cmd->name,"uarg"))
    {
    *ptr++=',';
    *ptr++='"';
    ptr=unescape(ptr,m->k);
    *ptr++='"';
    }
   }
  }
 }

char *mtext(s,m)
char *s;
MACRO *m;
 {
 ptr=s;
 first=1;
 instr=0;
 domtext(m);
 if(instr) *ptr++='\"';
 *ptr=0;
 return s;
 }
d336 1
a336 1
struct recmac *recmac=0;
d338 17
a354 15
static void unmac()
 {
 if(recmac) rmmacro(recmac->m->steps[--recmac->m->n]);
 }

void chmac()
 {
 if(recmac && recmac->m->n) recmac->m->steps[recmac->m->n-1]->k=3;
 }

static void record(m)
MACRO *m;
 {
 if(recmac) addmacro(recmac->m,dupmacro(m));
 }
d358 10
a367 10
int uquery(bw)
BW *bw;
 {
 int ret;
 struct recmac *tmp=recmac;
 recmac=0;
 ret=edloop(1);
 recmac=tmp;
 return ret;
 }
d371 1
a371 1
MACRO *curmacro=0;		/* Set if we're in a macro */
d373 2
a374 2
static int arg=0;		/* Repeat argument */
static int argset=0;		/* Set if 'arg' is set */
d376 68
a443 63
int exmacro(m,u)
MACRO *m;
 {
 int larg;
 int negarg=0;
 int flg=0;
 CMD *cmd;
 int n;
 int ret=0;

 if(argset)
  {
  larg=arg;
  arg=0;
  argset=0;
  if(larg<0) negarg=1, larg= -larg;
  if(m->steps) negarg=0;
  else
   {
   cmd=m->cmd;
   if(!cmd->arg) larg=0;
   else if(negarg)
    if(cmd->negarg) cmd=findcmd(cmd->negarg);
    else larg=0;
   }
  }
 else
  {
  cmd=m->cmd;
  larg=1;
  }

 if( m->steps ||
     larg!=1 ||
     !(cmd->flag&EMINOR) ||
     maint->curwin->watom->what==TYPEQW		/* Undo work right for s & r */
   ) flg=1;

 if(flg && u) umclear();
 while(larg-- && !leave && !ret)
  if(m->steps)
   {
   MACRO *tmpmac=curmacro;
   int tmpptr=macroptr;
   int x=0;
   int stk=nstack;
   while(m && x!=m->n && !leave && !ret)
    {
    MACRO *d;
    d=m->steps[x++];
    curmacro=m;
    macroptr=x;
    ret=exmacro(d,0);
    m=curmacro;
    x=macroptr;
    }
   curmacro=tmpmac;
   macroptr=tmpptr;
   while(nstack>stk) upop(NULL);
   }
  else ret=execmd(cmd,m->k);
 if(leave) return ret;
 if(flg && u) umclear();
d445 2
a446 1
 if(u) undomark();
d448 2
a449 2
 return ret;
 }
d453 5
a457 6
int exemac(m)
MACRO *m;
 {
 record(m);
 return exmacro(m,1);
 }
d461 103
a563 101
static int dorecord(bw,c,object,notify)
BW *bw;
void *object;
int *notify;
 {
 int n;
 struct recmac *r;
 if(notify) *notify=1;
 if(c>'9' || c<'0')
  {
  nungetc(c);
  return -1;
  }
 for(n=0;n!=10;++n) if(playmode[n]) return -1;
 r=(struct recmac *)malloc(sizeof(struct recmac));
 r->m=mkmacro(0,1,0,NULL);
 r->next=recmac;
 r->n=c-'0';
 recmac=r;
 return 0;
 }

int urecord(bw,c)
BW *bw;
 {
 if(c>='0' && c<='9') return dorecord(bw,c,NULL,NULL);
 else
  if(mkqw(bw,sc("Macro to record (0-9 or ^C to abort): "),dorecord,NULL,NULL,NULL)) return 0;
  else return -1;
 }

extern int dostaupd;

int ustop()
 {
 unmac();
 if(recmac)
  {
  struct recmac *r=recmac;
  MACRO *m;
  dostaupd=1;
  recmac=r->next;
  if(kbdmacro[r->n]) rmmacro(kbdmacro[r->n]);
  kbdmacro[r->n]=r->m;
  if(recmac) record(m=mkmacro(r->n+'0',1,0,findcmd("play"))), rmmacro(m);
  free(r);
  }
 return 0;
 }

int doplay(bw,c,object,notify)
BW *bw;
void *object;
int *notify;
 {
 if(notify) *notify=1;
 if(c>='0' && c<='9')
  {
  int ret;
  c-='0';
  if(playmode[c] || !kbdmacro[c]) return -1;
  playmode[c]=1;
  ret=exmacro(kbdmacro[c],0);
  playmode[c]=0;
  return ret;
  }
 else
  {
  nungetc(c);
  return -1;
  }
 }

int umacros(bw)
BW *bw;
 {
 int x;
 char buf[1024];
 peol(bw->cursor);
 for(x=0;x!=10;++x) if(kbdmacro[x])
  {
  mtext(buf,kbdmacro[x]);
  binss(bw->cursor,buf);
  peol(bw->cursor);
  sprintf(buf,"\t^K %c\tMacro %d",x+'0',x);
  binss(bw->cursor,buf);
  peol(bw->cursor);
  binsc(bw->cursor,'\n');
  pgetc(bw->cursor);
  }
 return 0;
 }

int uplay(bw,c)
BW *bw;
 {
 if(c>='0' && c<='9') return doplay(bw,c,NULL,NULL);
 else
  if(mkqwna(bw,sc("Play-"),doplay,NULL,NULL,NULL)) return 0;
  else return -1;
 }
d567 24
a590 24
static int doarg(bw,s,object,notify)
BW *bw;
char *s;
void *object;
int *notify;
 {
 long num;
 if(notify) *notify=1;
 num=calc(bw,s);
 if(merr) { msgnw(bw,merr); return -1; }
 arg=num;
 argset=1;
 vsrm(s);
 return 0;
 }

int uarg(bw)
BW *bw;
 {
 if(wmkpw(bw,
          "No. times to repeat next command (^C to abort): ",
          NULL,doarg,NULL,NULL,utypebw,NULL,NULL)) return 0;
 else return -1;
 }
d595 48
a642 41
int douarg(bw,c,object,notify)
BW *bw;
void *object;
int *notify;
 {
 if(c=='-') negarg= !negarg;
 else if(c>='0' && c<='9') unaarg=unaarg*10+c-'0';
 else if(c=='U'-'@@')
  if(unaarg) unaarg*=4;
  else unaarg=16;
 else if(c==7 || c==3 || c==32)
  {
  if(notify) *notify=1;
  return -1;
  }
 else
  {
  nungetc(c);
  if(unaarg) arg=unaarg;
  else if(negarg) arg=1;
  else arg=4;
  if(negarg) arg= -arg;
  argset=1;
  if(notify) *notify=1;
  return 0;
  }
 sprintf(msgbuf,"Repeat %s%d",negarg?"-":"",unaarg);
 if(mkqwna(bw,sz(msgbuf),douarg,NULL,NULL,notify)) return 0;
 else return -1;
 }

int uuarg(bw,c)
BW *bw;
 {
 unaarg=0;
 negarg=0;
 if(c>='0' && c<='9' || c=='-') return douarg(bw,c,NULL,NULL);
 else
  if(mkqwna(bw,sc("Repeat"),douarg,NULL,NULL,NULL)) return 0;
  else return -1;
 }
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
