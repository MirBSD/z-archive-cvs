head	1.12;
access;
symbols
	joe-3_1jupp18:1.11
	joe-3_1jupp17:1.11
	joe-3_1jupp16:1.11
	joe-3_1jupp15:1.10
	joe-3_1jupp14:1.9
	joe-3_1jupp12:1.9
	joe-3_1jupp11:1.9
	joe-3_1jupp10:1.9
	joe-3_1jupp9:1.5
	joe-3_1jupp8:1.4
	joe-3_1jupp7:1.4
	joe-3_1jupp6:1.3
	joe-3_1jupp5:1.3
	joe-3_1jupp4:1.2;
locks; strict;
comment	@ * @;


1.12
date	2012.06.07.22.16.09;	author tg;	state dead;
branches;
next	1.11;
commitid	1004FD12822341B4DF9;

1.11
date	2011.07.16.21.57.57;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004E2209506F4A1334;

1.10
date	2011.07.02.22.43.42;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004E0F9F2052940081;

1.9
date	2008.08.01.12.29.27;	author tg;	state Rel;
branches;
next	1.8;
commitid	100489301B531C53261;

1.8
date	2008.07.28.00.05.51;	author tg;	state Exp;
branches;
next	1.7;
commitid	100488D0D67482E6434;

1.7
date	2008.07.28.00.03.25;	author tg;	state Exp;
branches;
next	1.6;
commitid	100488D0CD81F067F36;

1.6
date	2008.07.28.00.01.58;	author tg;	state Exp;
branches;
next	1.5;
commitid	100488D0C7F1608570B;

1.5
date	2008.05.03.22.54.02;	author tg;	state Exp;
branches;
next	1.4;
commitid	100481CED1E4C10F119;

1.4
date	2006.11.09.15.06.18;	author tg;	state Exp;
branches;
next	1.3;
commitid	100455343EB3FE319FB;

1.3
date	2005.12.22.20.18.35;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043AB0A281C6B5AF7;

1.2
date	2005.08.26.23.05.11;	author tg;	state Exp;
branches;
next	1.1;
commitid	31fe430fa035f063;

1.1
date	2005.02.11.21.37.31;	author tg;	state Exp;
branches;
next	;


desc
@@


1.12
log
@• switch strlfun.c to symlinked strlfun.inc; add symlinked popen.inc
• new compat.c including the *.inc files if needed and providing ctime for klibc
@
text
@#include "autoconf.h"
#undef L_strlcat
#undef L_strlcpy
#ifndef HAVE_STRLCAT
#define L_strlcat
#endif
#ifndef HAVE_STRLCPY
#define L_strlcpy
#endif
#if defined(L_strlcat) || defined(L_strlcpy)
#define OUTSIDE_OF_LIBKERN

/* here begins MirOS: src/kern/c/strlfun.c,v 1.3 2011/07/02 22:28:33 tg Exp $ */
#if 0 /* comment in gmake; next line ignored by gcc */
ifeq (0,gmake ignores from here)
#endif
/*-
 * Copyright (c) 2006, 2008, 2011
 *	Thorsten Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 *-
 * The original implementations of strlcpy(3) and strlcat(3) are from
 * Todd C. Miller; the licence is reproduced below. However, this ap-
 * plies only to the strlcpy(3) portion of the code, as Thorsten Gla-
 * ser write the following strlcat(3) implementation according to the
 * spec. Both functions below have been optimised according to sugge-
 * stions from Bodo Eggert. Thorsten Glaser also has merged this code
 * with strxfrm(3) for ISO-10646-only systems and the wide char vari-
 * ants wcslcat(3), wcslcpy(3), and wcsxfrm(3).
 */

#include <sys/types.h>
#ifndef OUTSIDE_OF_LIBKERN
#include <libckern.h>
#endif

#ifndef __RCSID
#define __RCSID(x)		static const char __rcsid[] = x
#endif

__RCSID("$MirOS: contrib/code/jupp/strlfun.c,v 1.11 2011/07/16 21:57:57 tg Exp $");

#ifdef WIDEC
#ifdef OUTSIDE_OF_LIBKERN
#ifdef __WCHAR_TYPE__
typedef __WCHAR_TYPE__ wchar_t;
#else
#include <wchar.h>
#endif
#endif
/* wide character string functions */
#define NUL			L'\0'
#define char_t			wchar_t
#define fn_len			wcslen
#define	fn_cat			wcslcat
#define fn_cpy			wcslcpy
#else
/* (multibyte) string functions */
#define NUL			'\0'
#define char_t			char
#define fn_len			strlen
#define	fn_cat			strlcat
#define fn_cpy			strlcpy
#endif

#ifdef L_strxfrm
#define strlcpy			strxfrm
#define wcslcpy			wcsxfrm
#define L_strlcpy
#endif

#ifdef OUTSIDE_OF_LIBKERN
extern size_t fn_len(const char_t *);
#endif

#ifndef __predict_true
#define __predict_true(exp)	(exp)
#define __predict_false(exp)	(exp)
#endif

#ifdef L_strlcat
/*
 * Appends src to string dst of size dlen (unlike strncat, dlen is the
 * full size of dst, not space left).  At most dlen-1 characters
 * will be copied.  Always NUL terminates (unless dlen <= strlen(dst)).
 * Returns strlen(src) + MIN(dlen, strlen(initial dst)), without the
 * trailing NUL byte counted.  If retval >= dlen, truncation occurred.
 */
size_t
fn_cat(char_t *dst, const char_t *src, size_t dlen)
{
	size_t n = 0, slen;

	slen = fn_len(src);
	while (__predict_true(n + 1 < dlen && dst[n] != NUL))
		++n;
	if (__predict_false(dlen == 0 || dst[n] != NUL))
		return (dlen + slen);
	while (__predict_true((slen > 0) && (n < (dlen - 1)))) {
		dst[n++] = *src++;
		--slen;
	}
	dst[n] = NUL;
	return (n + slen);
}
#endif

#ifdef L_strlcpy
/* $OpenBSD: strlcpy.c,v 1.11 2006/05/05 15:27:38 millert Exp $ */

/*-
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Copy src to string dst of size siz.  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz == 0).
 * Returns strlen(src); if retval >= siz, truncation occurred.
 */
size_t
fn_cpy(char_t *dst, const char_t *src, size_t siz)
{
	const char_t *s = src;

	if (__predict_false(siz == 0))
		goto traverse_src;

	/* copy as many chars as will fit */
	while (--siz && (*dst++ = *s++))
		;

	/* not enough room in dst */
	if (__predict_false(siz == 0)) {
		/* safe to NUL-terminate dst since we copied <= siz-1 chars */
		*dst = NUL;
 traverse_src:
		/* traverse rest of src */
		while (*s++)
			;
	}

	/* count does not include NUL */
	return (s - src - 1);
}
#endif

#if 0 /* gcc ignored from here; gmake stops ignoring */
endif

LIB=		libstrlfun.a
OBJS=		strlcpy.o strlcat.o wcslcpy.o wcslcat.o
DEFS=		-DOUTSIDE_OF_LIBKERN
DEFS_strlcpy.o=	-DL_strlcpy
DEFS_strlcat.o=	-DL_strlcat
DEFS_wcslcpy.o=	-DL_strlcpy -DWIDEC
DEFS_wcslcat.o=	-DL_strlcat -DWIDEC

all: $(LIB)

$(LIB): $(OBJS)
	ar rc $(LIB) $(OBJS)
	-ranlib $(LIB)

$(OBJS): strlfun.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(DEFS) $(DEFS_$@@) -c -o $@@ strlfun.c

#endif /* EOF for gmake and gcc */
/* here ends MirOS: src/kern/c/strlfun.c,v 1.3 2011/07/02 22:28:33 tg Exp $ */
#endif
@


1.11
log
@fixes from packages.debian.org/joe are merged; now do a warning cleanup
(although some are only a workaround, and the joe code gives the creeps)
@
text
@d55 1
a55 1
__RCSID("$MirOS: contrib/code/jupp/strlfun.c,v 1.10 2011/07/02 22:43:42 tg Exp $");
@


1.10
log
@pull in from mirbsd/kern with thin wrapper for autoheader
@
text
@d1 1
a1 1
#include "config.h"
d55 1
a55 1
__RCSID("$MirOS: src/kern/c/strlfun.c,v 1.3 2011/07/02 22:28:33 tg Exp $");
@


1.9
log
@copy verbatim from libc, we’ll be using -kb now
@
text
@d1 16
d18 1
a18 1
 * Copyright (c) 2006, 2008
d42 2
a43 2
 * with strxfrm(3) for ISO-10646-only systems and wrote the wide char
 * variants wcslcat(3), wcslcpy(3), and wcsxfrm(3) (see wcslfun.c).
d46 3
a48 6
#ifdef STRXFRM
#undef HAVE_STRLCPY
#undef HAVE_STRLCAT
#define HAVE_STRLCPY	0
#define HAVE_STRLCAT	1
#define strlcpy		strxfrm
d51 10
a60 11
#include <sys/types.h>
#if defined(_KERNEL) || defined(_STANDALONE)
#include <lib/libkern/libkern.h>
#undef HAVE_STRLCPY
#undef HAVE_STRLCAT
#else
#include <stddef.h>	/* for size_t in user space (SUSv3) */
#if defined(HAVE_CONFIG_H) && (HAVE_CONFIG_H != 0)
/* usually when packaged with third-party software */
#ifdef CONFIG_H_FILENAME
#include CONFIG_H_FILENAME
d62 1
a62 1
#include "config.h"
d65 13
a77 2
/* do not include <string.h> to prevent redefinition warnings */
extern size_t strlen(const char *);
d80 4
a83 10
#ifndef __RCSID
#undef __IDSTRING
#undef __IDSTRING_CONCAT
#undef __IDSTRING_EXPAND
#define __IDSTRING_CONCAT(l,p)		__LINTED__ ## l ## _ ## p
#define __IDSTRING_EXPAND(l,p)		__IDSTRING_CONCAT(l,p)
#define __IDSTRING(prefix, string)				\
	static const char __IDSTRING_EXPAND(__LINE__,prefix) []	\
	    __attribute__((used)) = "@@(""#)" #prefix ": " string
#define __RCSID(x)			__IDSTRING(rcsid,x)
d86 2
a87 5
#ifndef __predict_true
#define __predict_true(exp)	((exp) != 0)
#endif
#ifndef __predict_false
#define __predict_false(exp)	((exp) != 0)
d90 3
a92 2
#if !defined(_KERNEL) && !defined(_STANDALONE)
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.18 2008/08/01 12:26:17 tg Exp $");
d95 1
a95 10
/* (multibyte) string functions */
#undef NUL
#undef char_t
#define NUL		'\0'
#define char_t		char

size_t strlcat(char_t *, const char_t *, size_t);
size_t strlcpy(char_t *, const char_t *, size_t);

#if !defined(HAVE_STRLCAT) || (HAVE_STRLCAT == 0)
d104 1
a104 1
strlcat(char_t *dst, const char_t *src, size_t dlen)
d108 1
a108 1
	slen = strlen(src);
d120 1
a120 1
#endif /* !HAVE_STRLCAT */
d122 1
a122 1
#if !defined(HAVE_STRLCPY) || (HAVE_STRLCPY == 0)
d147 1
a147 1
strlcpy(char_t *dst, const char_t *src, size_t siz)
d171 25
a195 1
#endif /* !HAVE_STRLCPY */
@


1.8
log
@erm well, this one does work on the Macintosh
the bug might even affect TNF or so
@
text
@d57 1
a57 2
#ifndef __IDSTRING_CONCAT
#undef __RCSID
d77 1
a77 2
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.16 2008/07/07 12:59:51 tg Stab $");
__RCSID("$miros: src/lib/libc/string/strlfun.c,v 1.17 2008/07/28 00:05:51 tg Stab $");
@


1.7
log
@possibly fix for the Macintosh, which cannot have multiple RCS IDs
@
text
@d57 1
a57 1
#ifndef __IDSTRING
d78 2
a79 2
__RCSID("$MirOS: contrib/code/jupp/strlfun.c,v 1.6 2008/07/28 00:01:58 tg Exp $");
__RCSID("$miros: src/lib/libc/string/strlfun.c,v 1.16 2008/07/07 12:59:51 tg Stab $");
@


1.6
log
@sync with libc
@
text
@d57 2
a58 1
#ifndef __RCSID
d78 1
a78 1
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.16 2008/07/07 12:59:51 tg Stab $");
@


1.5
log
@update from base
@
text
@d2 2
a3 2
 * Copyright (c) 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
d20 8
a27 5
 * The strlcat() code below has been written by Thorsten Glaser. Bodo
 * Eggert suggested optimising the strlcpy() code, originally written
 * by Todd C. Miller (see below), which was carried out by Th. Glaser
 * as well as merging this code with strxfrm() for ISO-10646-only sy-
 * stems and writing wcslcat(), wcslcpy() and wcsxfrm() equivalents.
d44 1
d53 1
a60 7
#if defined(__ELF__) && defined(__GNUC__)
#define __IDSTRING(prefix, string)				\
	__asm__(".section .comment"				\
	"\n	.ascii	\"@@(\"\"#)" #prefix ": \""		\
	"\n	.asciz	\"" string "\""				\
	"\n	.previous")
#else
d66 1
a66 2
#endif
#define __RCSID(x)		__IDSTRING(rcsid,x)
d77 2
a78 2
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.15 2008/05/03 22:53:43 tg Exp $");
__RCSID("$miros: src/lib/libc/string/strlfun.c,v 1.15 2008/05/03 22:53:43 tg Exp $");
d81 8
a88 2
size_t strlcat(char *, const char *, size_t);
size_t strlcpy(char *, const char *, size_t);
d92 5
a96 5
 * Appends src to string dst of size siz (unlike strncat, siz is the
 * full size of dst, not space left).  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz <= strlen(dst)).
 * Returns strlen(src) + MIN(siz, strlen(initial dst)).
 * If retval >= siz, truncation occurred.
d99 1
a99 1
strlcat(char *dst, const char *src, size_t dlen)
d104 1
a104 1
	while (__predict_true(n + 1 < dlen && dst[n] != '\0'))
d106 1
a106 1
	if (__predict_false(dlen == 0 || dst[n] != '\0'))
d112 1
a112 1
	dst[n] = '\0';
d118 1
a118 1
/* $OpenBSD: strlcpy.c,v 1.10 2005/08/08 08:05:37 espie Exp $ */
d126 8
d142 1
a142 1
strlcpy(char *dst, const char *src, size_t siz)
d144 1
a144 1
	const char *s = src;
d156 1
a156 1
		*dst = '\0';
d163 1
a163 1
	/* count doesn't include NUL */
@


1.4
log
@sync with lib/libc/string/strlfun.c
brings strlcat bugfixes
@
text
@a0 3
/* $MirOS: src/lib/libc/string/strlfun.c,v 1.10 2006/11/08 23:18:04 tg Exp $ */
/* _MirOS: src/lib/libc/string/strlfun.c,v 1.10 2006/11/08 23:18:04 tg Exp $ */

d5 5
a9 6
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
d11 8
a18 8
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
d23 2
a24 1
 * as well as writing wcslcat() and wcslcpy() equivalents.
d27 8
d79 4
a82 1
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.10 2006/11/08 23:18:04 tg Exp $");
d114 1
a124 1
#if !defined(HAVE_STRLCPY) || (HAVE_STRLCPY == 0)
@


1.3
log
@sync with upstream sources
@
text
@d1 2
a2 3
/* $MirOS: src/lib/libc/string/strlfun.c,v 1.5 2005/09/19 19:01:11 tg Exp $ */
/* $OpenBSD: strlcpy.c,v 1.10 2005/08/08 08:05:37 espie Exp $ */
/* $OpenBSD: strlcat.c,v 1.13 2005/08/08 08:05:37 espie Exp $ */
d5 2
a6 3
 * Copyright (c) 2004, 2005 Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 * Thanks to Bodo Eggert for optimisation hints
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
d8 6
a13 3
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
d15 13
a27 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d30 7
a36 2
#if !defined(_KERNEL) && !defined(_STANDALONE)
#ifdef HAVE_CONFIG_H
d38 3
d43 1
a43 2
#include <sys/types.h>

d45 1
d48 17
a64 1
#define __RCSID(x)	static const char __rcsid[] = (x)
d67 5
a71 5
__RCSID("$MirOS: src/lib/libc/string/strlfun.c,v 1.5 2005/09/19 19:01:11 tg Exp $");
#else
#include <lib/libkern/libkern.h>
#undef HAVE_STRLCPY
#undef HAVE_STRLCAT
d74 2
d79 38
a116 1
#ifndef	HAVE_STRLCPY
d127 2
a128 1
	if (!siz) goto traverse_src;
d130 2
a131 2
	/* Copy as many bytes as will fit */
	for (; --siz && (*dst++ = *s++); /* nothing */)
d134 6
a139 5
	/* Not enough room in dst, add NUL and traverse rest of src */
	if (!siz) {
		/* Save, since we've copied at max. (siz-1) characters */
		*dst = '\0';	/* NUL-terminate dst */
traverse_src:
d144 2
a145 1
	return (s - src - 1);	/* count does not include NUL */
a147 36

#ifndef	HAVE_STRLCAT
/*
 * Appends src to string dst of size siz (unlike strncat, siz is the
 * full size of dst, not space left).  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz <= strlen(dst)).
 * Returns strlen(src) + MIN(siz, strlen(initial dst)).
 * If retval >= siz, truncation occurred.
 */
size_t
strlcat(char *dst, const char *src, size_t siz)
{
	char *d = dst;
	size_t dl, n = siz;
	const size_t sl = strlen(src);

	while (n-- && (*d++ != '\0'))
		;
	if (!++n && (*d != '\0'))
		return strlen(src);

	dl = --d - dst;		/* original strlen(dst), max. siz-1 */
	n = siz - dl;
	dl += sl;

	if (!n--)
		return dl;

	if (n > sl)
		n = sl;		/* number of octets to copy */
	for (; n-- && (*d++ = *src++); /* nothing */)
		;
	*d = '\0';		/* NUL-terminate dst */
	return dl;
}
#endif /* !HAVE_STRLCAT */
@


1.2
log
@update from upstream
@
text
@d1 3
a3 4
/**	$MirOS: src/bin/mksh/strlfun.c,v 1.1.7.2 2005/05/28 21:02:03 tg Exp $ */
/**	_MirOS: src/lib/libc/string/strlfun.c,v 1.4 2005/05/28 20:59:09 tg Exp $ */
/*	$OpenBSD: strlcpy.c,v 1.8 2003/06/17 21:56:24 millert Exp $ */
/*	$OpenBSD: strlcat.c,v 1.11 2003/06/17 21:56:24 millert Exp $ */
d7 1
a7 1
 * Some hints for optimisation from Bodo Eggert (via d.a.s.r)
a26 1
#define LIBC_SCCS
d36 1
a36 1
__RCSID("$MirOS: src/bin/mksh/strlfun.c,v 1.1.7.2 2005/05/28 21:02:03 tg Exp $");
a38 4
#undef HAVE_CONFIG_H
#endif

#ifndef HAVE_CONFIG_H
@


1.1
log
@bring up to our standards, add strlfun.c from old repo
and the infrastructure files from ncvs2:gnusystem_aux_dir,
also a bit of whitespace fixup
@
text
@d1 2
a2 2
/**	$MirOS: contrib/code/jupp/strlfun.c,v 1.2 2004/11/10 21:14:26 tg Exp $ */
/**	$MirBSD: contrib/code/jupp/strlfun.c,v 1.2 2004/11/10 21:14:26 tg Exp $ */
d7 2
a8 24
 * Copyright (c) 2004
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of covered work, even if advised of the possibility of such damage.
 *-
 * Implementation for most of this code by myself.
 * Some optimizations idea from Bodo Eggert in d.a.s.r.
 * The rest of the code is covered by the terms below:
 */

/*
d24 1
a24 4

#include <sys/types.h>
#include <string.h>

d26 1
a26 1
/* packaged with third-party software */
d29 4
a32 5
#else /* ! def HAVE_CONFIG_H */
/* integrated into MirOS C library */
#undef HAVE_STRLCPY
#undef HAVE_STRLCAT
#endif /* ! def HAVE_CONFIG_H */
d38 5
a42 1
__RCSID("$MirOS: contrib/code/jupp/strlfun.c,v 1.2 2004/11/10 21:14:26 tg Exp $");
d44 7
d73 1
a73 1
  traverse_src:
d80 1
a80 1
#endif	/* ndef HAVE_STRLCPY */
d94 1
a94 1
	size_t n = siz, dl;
d101 1
d116 1
a116 1
#endif	/* ndef HAVE_STRLCAT */
@

