head	1.14;
access;
symbols
	joe-3_1jupp38:1.14
	joe-3_1jupp37:1.14
	joe-3_1jupp36:1.14
	joe-3_1jupp35:1.14
	joe-3_1jupp34:1.14
	joe-3_1jupp33:1.14
	joe-3_1jupp32:1.12
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.4
	joe-3_1jupp30:1.4
	joe-3_1jupp29:1.3
	joe-3_1jupp28:1.3
	joe-3_1jupp27:1.3
	joe-3_1jupp26:1.3
	joe-3_1jupp25:1.2
	joe-3_1jupp24:1.2
	joe-3_1jupp23:1.2
	joe-3_1jupp22:1.2
	joe-3_1jupp21:1.2
	joe-3_1jupp20:1.2
	joe-3_1jupp19:1.2
	joe-3_1jupp18:1.2
	joe-3_1jupp17:1.2
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.2
	joe-3_1jupp15:1.2
	joe-3_1jupp14:1.2
	joe-3_1jupp12:1.2
	joe-3_1jupp11:1.2
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.2
	joe-3_1jupp9:1.2
	joe-3_1jupp8:1.1.201.1
	joe-3_1jupp7:1.1.201.1
	joe-3_1jupp6:1.1.201.1
	joe-3_1jupp5:1.1.201.1
	joe-3_1jupp4:1.1.201.1
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.14
date	2017.12.20.23.07.15;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005A3AED1A249015A2;

1.13
date	2017.12.20.21.55.17;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005A3ADC2126F7CA05;

1.12
date	2017.12.08.03.24.15;	author tg;	state Exp;
branches;
next	1.11;
commitid	1005A2A05EB07C8D953;

1.11
date	2017.12.08.02.46.45;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005A29FD2A06CBDCE5;

1.10
date	2017.12.08.02.17.21;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005A29F64A06DEB239;

1.9
date	2017.12.08.02.00.39;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005A29F2506E789D2B;

1.8
date	2017.12.07.02.13.05;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005A28A3CC5DF696A2;

1.7
date	2017.12.06.23.02.02;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005A2876FC4FFE7EF5;

1.6
date	2017.12.04.22.15.38;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005A25C91E16B3B365;

1.5
date	2017.12.02.02.07.28;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005A220AD65C90E687;

1.4
date	2017.01.10.19.16.27;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005875332028CA2A36;

1.3
date	2013.10.23.18.46.59;	author tg;	state Exp;
branches;
next	1.2;
commitid	100526819B51C4C38ED;

1.2
date	2008.05.13.13.08.23;	author tg;	state Exp;
branches;
next	1.1;
commitid	100482992BC01EE89A1;

1.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.21;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.14
log
@fix “Failure to restore non-local value”
@
text
@/*
 *	Key-map handler
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "config.h"
#include "types.h"

__RCSID("$MirOS: contrib/code/jupp/kbd.c,v 1.13 2017/12/20 21:55:17 tg Exp $");

#include <stdlib.h>
#include <string.h>

#include "kbd.h"
#include "macro.h"
#include "termcap.h"
#include "utils.h"
#include "vs.h"

/* Create a KBD */

KBD *mkkbd(KMAP *kmap)
{
	KBD *kbd = malloc(sizeof(KBD));

	kbd->topmap = kmap;
	kbd->curmap = kmap;
	kbd->x = 0;
	return kbd;
}

/* Eliminate a KBD */

void rmkbd(KBD *k)
{
	free(k);
}

/* Process next key for KBD */

void *dokey(KBD *kbd, int n)
{
	void *bind = NULL;

	/* If we were passed a negative character */
	if (n < 0)
		n += 256;

	if ((size_t)n >= (size_t)256)
		return (NULL);

	/* If we're starting from scratch, clear the keymap sequence buffer */
	if (kbd->curmap == kbd->topmap)
		kbd->x = 0;

	if (kbd->curmap->keys[n].k == 1) {	/* A prefix key was found */
		kbd->seq[kbd->x++] = n;
		kbd->curmap = kbd->curmap->keys[n].value.submap;
	} else {		/* A complete key sequence was entered or an unbound key was found */
		bind = kbd->curmap->keys[n].value.bind;
/*  kbd->seq[kbd->x++]=n; */
		kbd->x = 0;
		kbd->curmap = kbd->topmap;
	}
	return bind;
}

/* Return key code (0‥255) for key name or -1 for syntax error */

/* coverity[ -tainted_data_return ] */
static int
keyval(unsigned char *s)
{
	if (s[0] == '^' && s[1] && !s[2])
		if (s[1] == '?')
			return 127;
		else
			return s[1] & 0x1F;
	else if (((s[0] | 0x20) == 's') &&
	    ((s[1] | 0x20) == 'p') && !s[2])
		return ' ';
	else if (s[1] || !s[0])
		return -1;
	else
		return (unsigned char) s[0];
}

/* Create an empty keymap */

KMAP *mkkmap(void)
{
	KMAP *kmap = calloc(1, sizeof(KMAP));

	return kmap;
}

/* Eliminate a keymap */

void rmkmap(KMAP *kmap)
{
	int x;

	if (!kmap)
		return;
	for (x = 0; x != 256; ++x)
		if (kmap->keys[x].k == 1)
			rmkmap(kmap->keys[x].value.submap);
	free(kmap);
}

/* Parse a range */

static unsigned char *range(unsigned char *seq, int *vv, int *ww)
{
	unsigned char c;
	int x, v, w;

	for (x = 0; seq[x] && seq[x] != ' '; ++x) ;	/* Skip to a space */
	c = seq[x];
	seq[x] = 0;		/* Zero terminate the string */
	v = keyval(seq);	/* Get key */
	w = v;
	seq[x] = c;		/* Restore the space or NUL */
	if (w < 0)
		return NULL;
	for (seq += x; *seq == ' '; ++seq) ;	/* Skip over spaces */

	/* Check for 'TO ' */
	if ((seq[0] | 0x20) == 't' && (seq[1] | 0x20) == 'o' && seq[2] == ' ') {
		for (seq += 2; *seq == ' '; ++seq) ;	/* Skip over spaces */
		for (x = 0; seq[x] && seq[x] != ' '; ++x) ;	/* Skip to space */
		c = seq[x];
		seq[x] = 0;	/* Zero terminate the string */
		w = keyval(seq);	/* Get key */
		seq[x] = c;	/* Restore the space or NUL */
		if (w < 0)
			return NULL;
		for (seq += x; *seq == ' '; ++seq) ;	/* Skip over spaces */
	}

	if (v > w)
		return NULL;

	*vv = v;
	*ww = w;
	return seq;
}

/* Add a binding to a keymap */

static KMAP *
kbuild(CAP *cap, KMAP *kmap, unsigned char *seq, void *bind, int *err,
    const unsigned char *capseq, int seql)
{
	int v, w;

	if (!seql && seq[0] == '.' && seq[1]) {
		int x, c;
		const unsigned char *s;

		for (x = 0; seq[x] && seq[x] != ' '; ++x) ;
		c = seq[x];
		seq[x] = 0;
		s = jgetstr(cap, seq + 1);
		seq[x] = c;
		if (s && (s = tcompile(cap, s, 0, 0, 0, 0))
		    && (sLEN(s) > 1 || (signed char)s[0] < 0)) {
			capseq = s;
			seql = sLEN(s);
			for (seq += x; *seq == ' '; ++seq) ;
		} else {
			*err = -2;
			return kmap;
		}
	}

	if (seql) {
		v = w = (unsigned char) *capseq++;
		--seql;
	} else {
		seq = range(seq, &v, &w);
		if (!seq) {
			*err = -1;
			return kmap;
		}
	}

	if (!kmap)
		kmap = mkkmap();	/* Create new keymap if 'kmap' was NULL */

	/* Make bindings between v and w */
	while (v <= w) {
		if (*seq || seql) {
			if (kmap->keys[v].k == 0)
				kmap->keys[v].value.submap = NULL;
			kmap->keys[v].k = 1;
			kmap->keys[v].value.submap = kbuild(cap, kmap->keys[v].value.bind, seq, bind, err, capseq, seql);
		} else {
			if (kmap->keys[v].k == 1)
				rmkmap(kmap->keys[v].value.submap);
			kmap->keys[v].k = 0;
			kmap->keys[v].value.bind =
			    /* This bit of code sticks the key value in the macro */
			    (v == w ? macstk(bind, v) : dupmacro(macstk(bind, v)));
		}
		++v;
	}
	return kmap;
}

int kadd(CAP *cap, KMAP *kmap, unsigned char *seq, void *bind)
{
	int err = 0;

	kbuild(cap, kmap, seq, bind, &err, NULL, 0);
	return err;
}

void kcpy(KMAP *dest, KMAP *src)
{
	int x;

	for (x = 0; x != 256; ++x)
		if (src->keys[x].k == 1) {
			if (dest->keys[x].k != 1) {
				dest->keys[x].k = 1;
				dest->keys[x].value.submap = mkkmap();
			}
			kcpy(dest->keys[x].value.submap, src->keys[x].value.submap);
		} else if (src->keys[x].k == 0 && src->keys[x].value.bind) {
			if (dest->keys[x].k == 1)
				rmkmap(dest->keys[x].value.submap);
			dest->keys[x].value.bind = src->keys[x].value.bind;
			dest->keys[x].k = 0;
		}
}

/* Remove a binding from a keymap */

int kdel(KMAP *kmap, unsigned char *seq)
{
	int err = 1;
	int v, w;

	seq = range(seq, &v, &w);
	if (!seq)
		return -1;

	/* Clear bindings between v and w */
	while (v <= w) {
		if (*seq) {
			if (kmap->keys[v].k == 1) {
				int r = kdel(kmap->keys[v].value.submap, seq);

				if (err != -1)
					err = r;
			}
		} else {
			if (kmap->keys[v].k == 1)
				rmkmap(kmap->keys[v].value.submap);
			kmap->keys[v].k = 0;
			kmap->keys[v].value.bind = NULL;
			if (err != -1)
				err = 0;
		}
		++v;
	}

	return err;
}
@


1.13
log
@mark kbd.c:keyval() as untainting function:
• it’s used only inside kbd.c (static function)
• it returns -1 or an unsigned char
• its return value is checked for -1 or applied to a 256-entry array

also, drop the KEYS define, it’s always 256 anyway
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/kbd.c,v 1.12 2017/12/08 03:24:15 tg Exp $");
d125 1
a127 1
	seq[x] = c;		/* Restore the space or 0 */
d137 1
a139 1
		seq[x] = c;	/* Restore the space or 0 */
@


1.12
log
@more upper/lower tweak (single ones, ranges yet to follow)
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/kbd.c,v 1.11 2017/12/08 02:46:45 tg Exp $");
d51 1
a51 2
	/* kmap->keys[KEYS]; */
	if ((size_t)n >= (size_t)(KEYS))
d70 1
a70 1
/* Return key code for key name or -1 for syntax error */
d72 3
a74 1
static int keyval(unsigned char *s)
d107 1
a107 1
	for (x = 0; x != KEYS; ++x)
d225 1
a225 1
	for (x = 0; x != KEYS; ++x)
@


1.11
log
@massive const offensive
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/kbd.c,v 1.8 2017/12/07 02:13:05 tg Exp $");
d130 1
a130 1
	if ((seq[0] == 'T' || seq[0] == 't') && (seq[1] == 'O' || seq[1] == 'o') && seq[2] == ' ') {
@


1.10
log
@more small tweaks
@
text
@d152 3
a154 1
static KMAP *kbuild(CAP *cap, KMAP *kmap, unsigned char *seq, void *bind, int *err, unsigned char *capseq, int seql)
d160 1
a160 1
		unsigned char *s;
@


1.9
log
@don’t box malloc/calloc/realloc/free; don’t cast malloc result; order calloc args
@
text
@d80 2
a81 2
	else if ((s[0] == 'S' || s[0] == 's')
		 && (s[1] == 'P' || s[1] == 'p') && !s[2])
@


1.8
log
@fix typo
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/kbd.c,v 1.6 2017/12/04 22:15:38 tg Exp $");
d26 1
a26 1
	KBD *kbd = (KBD *) joe_malloc(sizeof(KBD));
d38 1
a38 1
	joe_free(k);
d93 1
a93 1
	KMAP *kmap = (KMAP *) joe_calloc(sizeof(KMAP), 1);
d109 1
a109 1
	joe_free(kmap);
@


1.7
log
@lots of fixes related to prototyping
@
text
@@


1.6
log
@clean up some unused/MS-DOS® stuff
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/kbd.c,v 1.5 2017/12/02 02:07:28 tg Exp $");
d16 1
@


1.5
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d11 1
a11 1
__RCSID("$MirOS$");
a161 67
#ifdef __MSDOS__
		if (!strcmp(seq + 1, "ku")) {
			capseq = "\0H";
			seql = 2;
		} else if (!strcmp(seq + 1, "kd")) {
			capseq = "\0P";
			seql = 2;
		} else if (!strcmp(seq + 1, "kl")) {
			capseq = "\0K";
			seql = 2;
		} else if (!strcmp(seq + 1, "kr")) {
			capseq = "\0M";
			seql = 2;
		} else if (!strcmp(seq + 1, "kI")) {
			capseq = "\0R";
			seql = 2;
		} else if (!strcmp(seq + 1, "kD")) {
			capseq = "\0S";
			seql = 2;
		} else if (!strcmp(seq + 1, "kh")) {
			capseq = "\0G";
			seql = 2;
		} else if (!strcmp(seq + 1, "kH")) {
			capseq = "\0O";
			seql = 2;
		} else if (!strcmp(seq + 1, "kP")) {
			capseq = "\0I";
			seql = 2;
		} else if (!strcmp(seq + 1, "kN")) {
			capseq = "\0Q";
			seql = 2;
		} else if (!strcmp(seq + 1, "k1")) {
			capseq = "\0;";
			seql = 2;
		} else if (!strcmp(seq + 1, "k2")) {
			capseq = "\0<";
			seql = 2;
		} else if (!strcmp(seq + 1, "k3")) {
			capseq = "\0=";
			seql = 2;
		} else if (!strcmp(seq + 1, "k4")) {
			capseq = "\0>";
			seql = 2;
		} else if (!strcmp(seq + 1, "k5")) {
			capseq = "\0?";
			seql = 2;
		} else if (!strcmp(seq + 1, "k6")) {
			capseq = "\0@@";
			seql = 2;
		} else if (!strcmp(seq + 1, "k7")) {
			capseq = "\0A";
			seql = 2;
		} else if (!strcmp(seq + 1, "k8")) {
			capseq = "\0B";
			seql = 2;
		} else if (!strcmp(seq + 1, "k9")) {
			capseq = "\0C";
			seql = 2;
		} else if (!strcmp(seq + 1, "k0")) {
			capseq = "\0D";
			seql = 2;
		}
		seq[x] = c;
		if (seql) {
			for (seq += x; *seq == ' '; ++seq) ;
		}
#else
d169 1
a169 3
		}
#endif
		else {
@


1.4
log
@these now all need <stdlib.h>
@
text
@a0 1
/* $MirOS: contrib/code/jupp/kbd.c,v 1.2 2008/05/13 13:08:23 tg Exp $ */
d11 2
@


1.3
log
@fix another OOB array access (keymap)
@
text
@d12 1
@


1.2
log
@prepare for joe-3.1jupp9:
* sync NEWS
* bump vsn in configure.ac
* tag all files with RCS ID
* sync licence template
@
text
@d1 1
a1 1
/* $MirOS$ */
d48 4
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 9
a9 4
/* Key-map handler
   Copyright (C) 1992 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)
d11 1
a11 12
JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
a12 1
#include "config.h"
d15 1
a16 1
#include "kbd.h"
d20 9
a28 9
KBD *mkkbd(kmap)
KMAP *kmap;
 {
 KBD *kbd=(KBD *)malloc(sizeof(KBD));
 kbd->topmap=kmap;
 kbd->curmap=kmap;
 kbd->x=0;
 return kbd;
 }
d32 4
a35 5
void rmkbd(k)
KBD *k;
 {
 free(k);
 }
d39 17
a55 19
void *dokey(kbd,n)
KBD *kbd;
 {
 void *bind=0;

 /* If we were passed a negative character */
 if(n<0) n+=256;

 /* If we're starting from scratch, clear the keymap sequence buffer */
 if(kbd->curmap==kbd->topmap) kbd->x=0;

 if(kbd->curmap->keys[n].k==1)
  { /* A prefix key was found */
  kbd->seq[kbd->x++]=n;
  kbd->curmap=kbd->curmap->keys[n].value.submap;
  }
 else
  { /* A complete key sequence was entered or an unbound key was found */
  bind=kbd->curmap->keys[n].value.bind;
d57 5
a61 5
  kbd->x=0;
  kbd->curmap=kbd->topmap;
  }
 return bind;
 }
d65 15
a79 10
static int keyval(s)
char *s;
 {
 if(s[0]=='^' && s[1] && !s[2])
  if(s[1]=='?') return 127;
  else return s[1]&0x1F;
 else if((s[0]=='S'||s[0]=='s') && (s[1]=='P'||s[1]=='p') && !s[2]) return ' ';
 else if(s[1] || !s[0]) return -1;
 else return (unsigned char)s[0];
 }
d83 6
a88 5
KMAP *mkkmap()
 {
 KMAP *kmap=(KMAP *)calloc(sizeof(KMAP),1);
 return kmap;
 }
d92 11
a102 8
void rmkmap(kmap)
KMAP *kmap;
 {
 int x;
 if(!kmap) return;
 for(x=0;x!=KEYS;++x) if(kmap->keys[x].k==1) rmkmap(kmap->keys[x].value.submap);
 free(kmap);
 }
d106 35
a140 32
static char *range(seq,vv,ww)
char *seq;
int *vv, *ww;
 {
 char c;
 int x, v, w;
 for(x=0;seq[x] && seq[x]!=' ';++x);	/* Skip to a space */
 c=seq[x]; seq[x]=0;			/* Zero terminate the string */
 v=keyval(seq);				/* Get key */
 w=v;
 if(w<0) return 0;
 seq[x]=c;				/* Restore the space or 0 */
 for(seq+=x;*seq==' ';++seq);		/* Skip over spaces */

 /* Check for 'TO ' */
 if((seq[0]=='T' || seq[0]=='t') &&
    (seq[1]=='O' || seq[1]=='o') && seq[2]==' ')
  {
  for(seq+=2;*seq==' ';++seq);			/* Skip over spaces */
  for(x=0;seq[x] && seq[x]!=' ';++x);		/* Skip to space */
  c=seq[x]; seq[x]=0;				/* Zero terminate the string */
  w=keyval(seq);				/* Get key */
  if(w<0) return 0;
  seq[x]=c;					/* Restore the space or 0 */
  for(seq+=x;*seq==' ';++seq);			/* Skip over spaces */
  }

 if(v>w) return 0;

 *vv=v; *ww=w;
 return seq;
 }
d144 11
a154 16
static KMAP *kbuild(cap,kmap,seq,bind,err,capseq,seql)
CAP *cap;
KMAP *kmap;
char *seq;
void *bind;
int *err;
char *capseq;
 {
 int v, w;

 if(!seql && seq[0]=='.' && seq[1])
  {
  int x, c;
  char *s;
  for(x=0;seq[x] && seq[x]!=' ';++x);
  c=seq[x]; seq[x]=0;
d156 65
a220 25
  if(!zcmp(seq+1,"ku")) capseq="\0H", seql=2;
  else if(!zcmp(seq+1,"kd")) capseq="\0P", seql=2;
  else if(!zcmp(seq+1,"kl")) capseq="\0K", seql=2;
  else if(!zcmp(seq+1,"kr")) capseq="\0M", seql=2;
  else if(!zcmp(seq+1,"kI")) capseq="\0R", seql=2;
  else if(!zcmp(seq+1,"kD")) capseq="\0S", seql=2;
  else if(!zcmp(seq+1,"kh")) capseq="\0G", seql=2;
  else if(!zcmp(seq+1,"kH")) capseq="\0O", seql=2;
  else if(!zcmp(seq+1,"kP")) capseq="\0I", seql=2;
  else if(!zcmp(seq+1,"kN")) capseq="\0Q", seql=2;
  else if(!zcmp(seq+1,"k1")) capseq="\0;", seql=2;
  else if(!zcmp(seq+1,"k2")) capseq="\0<", seql=2;
  else if(!zcmp(seq+1,"k3")) capseq="\0=", seql=2;
  else if(!zcmp(seq+1,"k4")) capseq="\0>", seql=2;
  else if(!zcmp(seq+1,"k5")) capseq="\0?", seql=2;
  else if(!zcmp(seq+1,"k6")) capseq="\0@@", seql=2;
  else if(!zcmp(seq+1,"k7")) capseq="\0A", seql=2;
  else if(!zcmp(seq+1,"k8")) capseq="\0B", seql=2;
  else if(!zcmp(seq+1,"k9")) capseq="\0C", seql=2;
  else if(!zcmp(seq+1,"k0")) capseq="\0D", seql=2;
  seq[x]=c;
  if(seql)
   {
   for(seq+=x;*seq==' ';++seq);
   }
d222 8
a229 8
  s=jgetstr(cap,seq+1);
  seq[x]=c;
  if(s && (s=tcompile(cap,s)) && (sLEN(s)>1 || s[0]<0))
   {
   capseq=s;
   seql=sLEN(s);
   for(seq+=x;*seq==' ';++seq);
   }
d231 66
a296 78
  else
   {
   *err= -2;
   return kmap;
   }
  }

 if(seql)
  {
  v=w= (unsigned char)*capseq++;
  --seql;
  }
 else
  {
  seq=range(seq,&v,&w);
  if(!seq)
   {
   *err= -1;
   return kmap;
   }
  }

 if(!kmap) kmap=mkkmap();	/* Create new keymap if 'kmap' was NULL */

 /* Make bindings between v and w */
 while(v<=w)
  {
  if(*seq || seql)
   {
   if(kmap->keys[v].k==0) kmap->keys[v].value.submap=0;
   kmap->keys[v].k=1;
   kmap->keys[v].value.submap=kbuild(cap,kmap->keys[v].value.bind,seq,bind,err,capseq,seql);
   }
  else
   {
   if(kmap->keys[v].k==1) rmkmap(kmap->keys[v].value.submap);
   kmap->keys[v].k=0;
   kmap->keys[v].value.bind=
    /* This bit of code sticks the key value in the macro */
    (v==w?macstk(bind,v):dupmacro(macstk(bind,v)));
   }
  ++v;
  }
 return kmap;
 }

int kadd(cap,kmap,seq,bind)
CAP *cap;
KMAP *kmap;
char *seq;
void *bind;
 {
 int err=0;
 kbuild(cap,kmap,seq,bind,&err,NULL,0);
 return err;
 }

void kcpy(dest,src)
KMAP *dest, *src;
 {
 int x;
 for(x=0;x!=KEYS;++x)
  if(src->keys[x].k==1)
   {
   if(dest->keys[x].k!=1)
    {
    dest->keys[x].k=1;
    dest->keys[x].value.submap=mkkmap();
    }
   kcpy(dest->keys[x].value.submap,src->keys[x].value.submap);
   }
  else if(src->keys[x].k==0 && src->keys[x].value.bind)
   {
   if(dest->keys[x].k==1) rmkmap(dest->keys[x].value.submap);
   dest->keys[x].value.bind=src->keys[x].value.bind;
   dest->keys[x].k=0;
   }
 }
d300 28
a327 30
int kdel(kmap,seq)
KMAP *kmap;
char *seq;
 {
 int err=1;
 int v, w;

 seq=range(seq,&v,&w);
 if(!seq) return -1;

 /* Clear bindings between v and w */
 while(v<=w)
  {
  if(*seq)
   {
   if(kmap->keys[v].k==1)
    {
    int r=kdel(kmap->keys[v].value.submap,seq);
    if(err!= -1) err=r;
    }
   }
  else
   {
   if(kmap->keys[v].k==1) rmkmap(kmap->keys[v].value.submap);
   kmap->keys[v].k=0;
   kmap->keys[v].value.bind=0;
   if(err!= -1) err=0;
   }
  ++v;
  }
d329 2
a330 2
 return err;
 }
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
