head	1.12;
access;
symbols
	joe-3_1jupp38:1.12
	joe-3_1jupp37:1.12
	joe-3_1jupp36:1.12
	joe-3_1jupp35:1.12
	joe-3_1jupp34:1.12
	joe-3_1jupp33:1.12
	joe-3_1jupp32:1.11
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.5
	joe-3_1jupp30:1.5
	joe-3_1jupp29:1.4
	joe-3_1jupp28:1.4
	joe-3_1jupp27:1.4
	joe-3_1jupp26:1.4
	joe-3_1jupp25:1.4
	joe-3_1jupp24:1.4
	joe-3_1jupp23:1.4
	joe-3_1jupp22:1.4
	joe-3_1jupp21:1.4
	joe-3_1jupp20:1.4
	joe-3_1jupp19:1.4
	joe-3_1jupp18:1.4
	joe-3_1jupp17:1.4
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.4
	joe-3_1jupp15:1.4
	joe-3_1jupp14:1.4
	joe-3_1jupp12:1.4
	joe-3_1jupp11:1.3
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.3
	joe-3_1jupp9:1.3
	joe-3_1jupp8:1.2
	joe-3_1jupp7:1.2
	joe-3_1jupp6:1.2
	joe-3_1jupp5:1.2
	joe-3_1jupp4:1.2
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.12
date	2018.01.06.00.28.32;	author tg;	state Exp;
branches;
next	1.11;
commitid	1005A50184621FA8455;

1.11
date	2017.12.08.02.17.22;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005A29F64A06DEB239;

1.10
date	2017.12.08.02.00.40;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005A29F2506E789D2B;

1.9
date	2017.12.07.02.10.17;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005A28A3145E1FF911;

1.8
date	2017.12.06.23.02.04;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005A2876FC4FFE7EF5;

1.7
date	2017.12.02.04.32.40;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005A222CF2122034D9;

1.6
date	2017.12.02.02.07.30;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005A220AD65C90E687;

1.5
date	2017.01.10.19.16.27;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005875332028CA2A36;

1.4
date	2009.10.18.14.52.56;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004ADB2BD317498872;

1.3
date	2008.05.13.13.08.24;	author tg;	state Exp;
branches;
next	1.2;
commitid	100482992BC01EE89A1;

1.2
date	2005.02.05.02.42.21;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.22;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.12
log
@merge fixes from gitlab branch; highlights:

Date:   Fri Dec 22 20:02:27 2017 +0100
    string sharing

Date:   Fri Dec 22 20:07:43 2017 +0100
    glopts can be static

Date:   Fri Dec 22 20:34:12 2017 +0100
    largish code cleanup

Date:   Fri Dec 22 20:58:59 2017 +0100
    major const cleanup

Date:   Sat Dec 23 01:41:49 2017 +0100
    fix refactoro: this code is run in a loop, reinitialise each time

Date:   Sat Jan 6 00:54:10 2018 +0100
    fix regression: `` did no longer insert a sole ` (etc.)
    also, factor out common code and optimise it

Date:   Sat Jan 6 01:05:42 2018 +0100
    2018

Date:   Sat Jan 6 01:05:47 2018 +0100
    more const cleanup while here

also, update NEWS
@
text
@/*
 *	Query windows
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "config.h"
#include "types.h"

__RCSID("$MirOS: contrib/code/jupp/qw.c,v 1.11 2017/12/08 02:17:22 tg Exp $");

#include <stdlib.h>

#include "utils.h"
#include "vs.h"
#include "charmap.h"
#include "qw.h"
#include "scrn.h"
#include "w.h"

static void dispqw(jobject jO, int flg __attribute__((__unused__)))
{
	QW *qw = jO.qw;
	W *w = qw->parent;

	/* Scroll buffer and position prompt */
	if (qw->promptlen > w->w / 2 + w->w / 4)
		qw->promptofst = qw->promptlen - w->w / 2;
	else
		qw->promptofst = 0;

	/* Set cursor position */
	w->curx = qw->promptlen - qw->promptofst;
	w->cury = 0;

	/* Generate prompt */
	w->t->t->updtab[w->y] = 1;
	genfield(w->t->t,
	    w->t->t->scrn + w->y * w->t->t->co + w->x,
	    w->t->t->attr + w->y * w->t->t->co + w->x,
	    w->x,
	    w->y,
	    qw->promptofst,
	    qw->prompt,
	    qw->promptlen,
	    0,
	    w->w - w->x,
	    1,
	    NULL);
}

static void dispqwn(jobject jO, int flg __attribute__((__unused__)))
{
	QW *qw = jO.qw;
	W *w = qw->parent;

	/* Scroll buffer and position prompt */
	if (qw->promptlen > w->w / 2 + w->w / 4)
		qw->promptofst = qw->promptlen - w->w / 2;
	else
		qw->promptofst = 0;

	/* Set cursor position */
	if (w->win->watom->follow && w->win->object.base)
		w->win->watom->follow(w->win->object);
	if (w->win->watom->disp && w->win->object.base)
		w->win->watom->disp(w->win->object, 1);
	w->curx = w->win->curx;
	w->cury = w->win->cury + w->win->y - w->y;

	/* Generate prompt */
	w->t->t->updtab[w->y] = 1;
	genfield(w->t->t,
	    w->t->t->scrn + w->y * w->t->t->co + w->x,
	    w->t->t->attr + w->y * w->t->t->co + w->x,
	    w->x,
	    w->y,
	    qw->promptofst,
	    qw->prompt,
	    qw->promptlen,
	    0,
	    w->w - w->x,
	    1,
	    NULL);
}

/* When user hits a key in a query window */

struct utf8_sm qw_sm;

static int utypeqw(jobject jO, int c)
{
	QW *qw = jO.qw;
	W *win;
	W *w = qw->parent;
	int *notify = w->notify;
	jpoly_int *func;
	void *object = qw->object;

	if (locale_map->type) {
		c = utf8_decode(&qw_sm, c);
		if (c<0)
			return 0;
	}

	win = qw->parent->win;
	func = qw->func;
	vsrm(qw->prompt);
	free(qw);
	w->object.base = NULL;
	w->notify = NULL;
	wabort(w);
	if (func)
		return func(win->object, c, object, notify);
	return -1;
}

static int abortqw(jobject jO)
{
	QW *qw = jO.qw;
	W *win = qw->parent->win;
	void *object = qw->object;
	jpoly_int *abrt = qw->abrt;

	vsrm(qw->prompt);
	free(qw);
	if (abrt)
		return abrt(win->object, object);
	else
		return -1;
}

static WATOM watomqw = {
	UC "query",
	dispqw,
	NULL,
	abortqw,
	NULL,
	utypeqw,
	NULL,
	NULL,
	NULL,
	NULL,
	TYPEQW
};

static WATOM watqwn = {
	UC "querya",
	dispqwn,
	NULL,
	abortqw,
	NULL,
	utypeqw,
	NULL,
	NULL,
	NULL,
	NULL,
	TYPEQW
};

static WATOM watqwsr = {
	UC "querysr",
	dispqwn,
	NULL,
	abortqw,
	NULL,
	utypeqw,
	NULL,
	NULL,
	NULL,
	NULL,
	TYPEQW
};

/* Create a query window */

QW *
mkqw(W *w, const unsigned char *prompt, int len,
    jpoly_int *func, jpoly_int *abrt, void *object, int *notify)
{
	W *new;
	QW *qw;

	new = wcreate(w->t, &watomqw, w, w, w->main, 1, NULL, notify);
	if (!new) {
		if (notify)
			*notify = 1;
		return NULL;
	}
	wfit(new->t);
	new->object.qw = qw = malloc(sizeof(QW));
	qw->parent = new;
	qw->prompt = vsncpy(NULL, 0, prompt, len);
	qw->promptlen = len;
	qw->promptofst = 0;
	qw->func = func;
	qw->abrt = abrt;
	qw->object = object;
	w->t->curwin = new;
	return qw;
}

/* Same as above, but cursor is left in original window */
/* For Ctrl-Meta thing */

QW *
mkqwna(W *w, const unsigned char *prompt, int len,
    jpoly_int *func, jpoly_int *abrt, void *object, int *notify)
{
	W *new;
	QW *qw;

	new = wcreate(w->t, &watqwn, w, w, w->main, 1, NULL, notify);
	if (!new) {
		if (notify)
			*notify = 1;
		return NULL;
	}
	wfit(new->t);
	new->object.qw = qw = malloc(sizeof(QW));
	qw->parent = new;
	qw->prompt = vsncpy(NULL, 0, prompt, len);
	qw->promptlen = len;
	qw->promptofst = 0;
	qw->func = func;
	qw->abrt = abrt;
	qw->object = object;
	w->t->curwin = new;
	return qw;
}

/* Same as above, but cursor is left in original window */
/* For search and replace thing */

QW *
mkqwnsr(W *w, const unsigned char *prompt, int len,
    jpoly_int *func, jpoly_int *abrt, void *object, int *notify)
{
	W *new;
	QW *qw;

	new = wcreate(w->t, &watqwsr, w, w, w->main, 1, NULL, notify);
	if (!new) {
		if (notify)
			*notify = 1;
		return NULL;
	}
	wfit(new->t);
	new->object.qw = qw = malloc(sizeof(QW));
	qw->parent = new;
	qw->prompt = vsncpy(NULL, 0, prompt, len);
	qw->promptlen = len;
	qw->promptofst = 0;
	qw->func = func;
	qw->abrt = abrt;
	qw->object = object;
	w->t->curwin = new;
	return qw;
}
@


1.11
log
@more small tweaks
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/qw.c,v 1.9 2017/12/07 02:10:17 tg Exp $");
d135 1
a135 1
	US "query",
d149 1
a149 1
	US "querya",
d163 1
a163 1
	US "querysr",
d178 3
a180 1
QW *mkqw(W *w, unsigned char *prompt, int len, jpoly_int *func, jpoly_int *abrt, void *object, int *notify)
d207 3
a209 1
QW *mkqwna(W *w, unsigned char *prompt, int len, jpoly_int *func, jpoly_int *abrt, void *object, int *notify)
d236 3
a238 1
QW *mkqwnsr(W *w, unsigned char *prompt, int len, jpoly_int *func, jpoly_int *abrt, void *object, int *notify)
@


1.10
log
@don’t box malloc/calloc/realloc/free; don’t cast malloc result; order calloc args
@
text
@d40 11
a50 11
	         w->t->t->scrn + w->y * w->t->t->co + w->x,
	         w->t->t->attr + w->y * w->t->t->co + w->x,
	         w->x,
	         w->y,
	         qw->promptofst,
	         qw->prompt,
	         qw->promptlen,
	         0,
	         w->w - w->x,
	         1,
		 NULL);
d75 11
a85 11
	         w->t->t->scrn + w->y * w->t->t->co + w->x,
	         w->t->t->attr + w->y * w->t->t->co + w->x,
	         w->x,
	         w->y,
	         qw->promptofst,
	         qw->prompt,
	         qw->promptlen,
	         0,
	         w->w - w->x,
	         1,
		 NULL);
@


1.9
log
@feeble first attempt at using a union to break up the UB in the polymorphism
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/qw.c,v 1.8 2017/12/06 23:02:04 tg Exp $");
d110 1
a110 1
	joe_free(qw);
d127 1
a127 1
	joe_free(qw);
d190 1
a190 1
	new->object.qw = qw = (QW *)joe_malloc(sizeof(QW));
d217 1
a217 1
	new->object.qw = qw = (QW *)joe_malloc(sizeof(QW));
d244 1
a244 1
	new->object.qw = qw = (QW *)joe_malloc(sizeof(QW));
@


1.8
log
@lots of fixes related to prototyping
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/qw.c,v 1.7 2017/12/02 04:32:40 tg Exp $");
d22 1
a22 1
static void dispqw(QW *qw)
d24 1
d53 1
a53 1
static void dispqwn(QW *qw)
d55 1
d65 1
a65 1
	if (w->win->watom->follow && w->win->object)
d67 2
a68 2
	if (w->win->watom->disp && w->win->object)
		w->win->watom->disp(w->win->object);
d92 1
a92 1
static int utypeqw(QW *qw, int c)
d94 1
d111 1
a111 1
	w->object = NULL;
d119 1
a119 1
static int abortqw(QW *qw)
d121 1
d190 1
a190 1
	new->object = (void *) (qw = (QW *) joe_malloc(sizeof(QW)));
d217 1
a217 1
	new->object = (void *) (qw = (QW *) joe_malloc(sizeof(QW)));
d244 1
a244 1
	new->object = (void *) (qw = (QW *) joe_malloc(sizeof(QW)));
@


1.7
log
@some fallout of the includes changes, some more reduction
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/qw.c,v 1.6 2017/12/02 02:07:30 tg Exp $");
d18 1
d95 1
a95 1
	int (*func) ();
d120 1
a120 1
	int (*abrt) () = qw->abrt;
d174 1
a174 1
QW *mkqw(W *w, unsigned char *prompt, int len, int (*func) (/* ??? */), int (*abrt) (/* ??? */), void *object, int *notify)
d201 1
a201 1
QW *mkqwna(W *w, unsigned char *prompt, int len, int (*func) (/* ??? */), int (*abrt) (/* ??? */), void *object, int *notify)
d228 1
a228 1
QW *mkqwnsr(W *w, unsigned char *prompt, int len, int (*func) (/* ??? */), int (*abrt) (/* ??? */), void *object, int *notify)
@


1.6
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d11 1
a11 1
__RCSID("$MirOS$");
a18 1
#include "utf8.h"
@


1.5
log
@these now all need <stdlib.h>
@
text
@a0 1
/* $MirOS: contrib/code/jupp/qw.c,v 1.3 2008/05/13 13:08:24 tg Exp $ */
d11 2
@


1.4
log
@backport hex editing mode from joe 3.7 for waga as late birthday present
@
text
@d12 2
@


1.3
log
@prepare for joe-3.1jupp9:
* sync NEWS
* bump vsn in configure.ac
* tag all files with RCS ID
* sync licence template
@
text
@d1 1
a1 1
/* $MirOS$ */
d45 2
a46 1
	         1);
d79 2
a80 1
	         1);
@


1.2
log
@Update the non-generated files to joe-3.1jupp2
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d14 1
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 9
a9 2
/* Query windows
   Copyright (C) 1992 Joseph H. Allen
d11 4
a14 16
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 

#include "config.h"
a15 3
#include "zstr.h"
#include "vs.h"
#include "qw.h"
d17 61
a77 37
static void dispqw(qw)
QW *qw;
 {
 W *w=qw->parent;

 /* Scroll buffer and position prompt */
 if(qw->promptlen>w->w/2+w->w/4) qw->promptofst=qw->promptlen-w->w/2;
 else qw->promptofst=0;

 /* Set cursor position */
 w->curx=qw->promptlen-qw->promptofst;
 w->cury=0;

 /* Generate prompt */
 w->t->t->updtab[w->y]=1;
 gentxt(w->t->t,w->x,w->y,qw->promptofst,qw->prompt,qw->promptlen,1);
 }

static void dispqwn(qw)
QW *qw;
 {
 W *w=qw->parent;

 /* Scroll buffer and position prompt */
 if(qw->promptlen>w->w/2+w->w/4) qw->promptofst=qw->promptlen-w->w/2;
 else qw->promptofst=0;

 /* Set cursor position */
 if(w->win->watom->follow && w->win->object) w->win->watom->follow(w->win->object);
 if(w->win->watom->disp && w->win->object) w->win->watom->disp(w->win->object);
 w->curx=w->win->curx;
 w->cury=w->win->cury+w->win->y-w->y;

 /* Generate prompt */
 w->t->t->updtab[w->y]=1;
 gentxt(w->t->t,w->x,w->y,qw->promptofst,qw->prompt,qw->promptlen,1);
 }
d81 83
a163 75
int utypeqw(qw,c)
QW *qw;
 {
 W *win;
 W *w=qw->parent;
 int *notify=w->notify;
 int (*func)();
 void *object=qw->object;
 win=qw->parent->win;
 func=qw->func;
 vsrm(qw->prompt);
 free(qw);
 w->object=0;
 w->notify=0;
 wabort(w);
 if(func) return func(win->object,c,object,notify);
 return -1;
 }

static int abortqw(qw)
QW *qw;
 {
 W *win=qw->parent->win;
 void *object=qw->object;
 int (*abrt)()=qw->abrt;
 vsrm(qw->prompt);
 free(qw);
 if(abrt) return abrt(win->object,object);
 else return -1;
 }

static WATOM watomqw=
 {
 "query",
 dispqw,
 0,
 abortqw,
 0,
 utypeqw,
 0,
 0,
 0,
 0,
 TYPEQW
 };

static WATOM watqwn=
 {
 "querya",
 dispqwn,
 0,
 abortqw,
 0,
 utypeqw,
 0,
 0,
 0,
 0,
 TYPEQW
 };

static WATOM watqwsr=
 {
 "querysr",
 dispqwn,
 0,
 abortqw,
 0,
 utypeqw,
 0,
 0,
 0,
 0,
 TYPEQW
 };
d167 23
a189 29
QW *mkqw(obw,prompt,len,func,abrt,object,notify)
BASE *obw;
char *prompt;
int (*func)();
int (*abrt)();
void *object;
int *notify;
 {
 W *new;
 QW *qw;
 W *w=obw->parent;
 new=wcreate(w->t,&watomqw,w,w,w->main,1,NULL,notify);
 if(!new)
  {
  if(notify) *notify=1;
  return 0;
  }
 wfit(new->t);
 new->object=(void *)(qw=(QW *)malloc(sizeof(QW)));
 qw->parent=new;
 qw->prompt=vsncpy(NULL,0,prompt,len);
 qw->promptlen=len;
 qw->promptofst=0;
 qw->func=func;
 qw->abrt=abrt;
 qw->object=object;
 w->t->curwin=new;
 return qw;
 }
d194 23
a216 29
QW *mkqwna(obw,prompt,len,func,abrt,object,notify)
BASE *obw;
char *prompt;
int (*func)();
int (*abrt)();
void *object;
int *notify;
 {
 W *new;
 QW *qw;
 W *w=obw->parent;
 new=wcreate(w->t,&watqwn,w,w,w->main,1,NULL,notify);
 if(!new)
  {
  if(notify) *notify=1;
  return 0;
  }
 wfit(new->t);
 new->object=(void *)(qw=(QW *)malloc(sizeof(QW)));
 qw->parent=new;
 qw->prompt=vsncpy(NULL,0,prompt,len);
 qw->promptlen=len;
 qw->promptofst=0;
 qw->func=func;
 qw->abrt=abrt;
 qw->object=object;
 w->t->curwin=new;
 return qw;
 }
d221 23
a243 29
QW *mkqwnsr(obw,prompt,len,func,abrt,object,notify)
BASE *obw;
char *prompt;
int (*func)();
int (*abrt)();
void *object;
int *notify;
 {
 W *new;
 QW *qw;
 W *w=obw->parent;
 new=wcreate(w->t,&watqwsr,w,w,w->main,1,NULL,notify);
 if(!new)
  {
  if(notify) *notify=1;
  return 0;
  }
 wfit(new->t);
 new->object=(void *)(qw=(QW *)malloc(sizeof(QW)));
 qw->parent=new;
 qw->prompt=vsncpy(NULL,0,prompt,len);
 qw->promptlen=len;
 qw->promptofst=0;
 qw->func=func;
 qw->abrt=abrt;
 qw->object=object;
 w->t->curwin=new;
 return qw;
 }
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
