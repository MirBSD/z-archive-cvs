head	1.6;
access;
symbols
	joe-3_1jupp38:1.6
	joe-3_1jupp37:1.6
	joe-3_1jupp36:1.6
	joe-3_1jupp35:1.6
	joe-3_1jupp34:1.6
	joe-3_1jupp33:1.6
	joe-3_1jupp32:1.6
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.2
	joe-3_1jupp30:1.2
	joe-3_1jupp29:1.2
	joe-3_1jupp28:1.2
	joe-3_1jupp27:1.2
	joe-3_1jupp26:1.2
	joe-3_1jupp25:1.2
	joe-3_1jupp24:1.2
	joe-3_1jupp23:1.2
	joe-3_1jupp22:1.2
	joe-3_1jupp21:1.2
	joe-3_1jupp20:1.2
	joe-3_1jupp19:1.2
	joe-3_1jupp18:1.2
	joe-3_1jupp17:1.2
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.2
	joe-3_1jupp15:1.2
	joe-3_1jupp14:1.2
	joe-3_1jupp12:1.2
	joe-3_1jupp11:1.2
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.2
	joe-3_1jupp9:1.2
	joe-3_1jupp8:1.1.201.1
	joe-3_1jupp7:1.1.201.1
	joe-3_1jupp6:1.1.201.1
	joe-3_1jupp5:1.1.201.1
	joe-3_1jupp4:1.1.201.1
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.6
date	2017.12.07.02.13.05;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005A28A3CC5DF696A2;

1.5
date	2017.12.06.21.16.57;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005A285E5918D423C7;

1.4
date	2017.12.02.17.00.49;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005A22DC570063953B;

1.3
date	2017.12.02.02.07.28;	author tg;	state Exp;
branches;
next	1.2;
commitid	1005A220AD65C90E687;

1.2
date	2008.05.13.13.08.23;	author tg;	state Exp;
branches;
next	1.1;
commitid	100482992BC01EE89A1;

1.1
date	2005.02.05.00.37.08;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.21;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.08;	author tg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@fix typo
@
text
@/*
 *	Key-map handler
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#ifndef _JOE_KBD_H
#define _JOE_KBD_H 1

#ifdef EXTERN
__IDSTRING(rcsid_kbd_h, "$MirOS: contrib/code/jupp/kbd.h,v 1.5 2017/12/06 21:16:57 tg Exp $");
#endif

/* KMAP *mkkmap(void);
 * Create an empty keymap
 */
KMAP *mkkmap(void);

/* void rmkmap(KMAP *kmap);
 * Free a key map
 */
void rmkmap(KMAP *kmap);

/* int kadd(KMAP *kmap,char *seq,void *bind);
 * Add a key sequence binding to a key map
 *
 * Returns 0 for success
 *        -1 for for invalid key sequence
 *
 * A valid key sequence is one or more keys seperated with spaces.  A key
 * is a single character or one of the following strings:
 *
 *    ^?	                   127 (DEL)
 *
 *    ^@@   -   ^_                  Control characters
 *
 *    SP                           32 (space character)
 *
 *    UP, DOWN, LEFT, RIGHT,
 *    F0 - F10, DEL, INS, HOME,
 *    END, PGUP, PGDN              termcap special characters
 *
 * In addition, the last key of a key sequence may be replaced with
 * a range-fill of the form: <KEY> TO <KEY>
 *
 * So for example, if the sequence: ^K A TO Z
 * is specified, then the key sequences
 * ^K A, ^K B, ^K C, ... ^K Z are all bound.
 */
int kadd(CAP *cap, KMAP *kmap, unsigned char *seq, void *bind);

/* void kcpy(KMAP *dest,KMAP *src);
 * Copy all of the entries in the 'src' keymap into the 'dest' keymap
 */
void kcpy(KMAP *dest, KMAP *src);

/* int kdel(KMAP *kmap,char *seq);
 * Delete a binding from a keymap
 *
 * Returns 0 for success
 *        -1 if the given key sequence was invalid
 *         1 if the given key sequence did not exist
 */
int kdel(KMAP *kmap, unsigned char *seq);

/* KBD *mkkbd(KMAP *kmap);
   Create a keyboard handler which uses the given keymap
*/
KBD *mkkbd(KMAP *kmap);

/* void rmkbd(KBD *);
 *
 * Eliminate a keyboard handler
 */
void rmkbd(KBD *k);

/* void *dokey(KBD *kbd,int k);
   Handle a key for a KBD:

     Returns 0 for invalid or prefix keys

     Returns binding for a completed key sequence
*/
void *dokey(KBD *kbd, int n);

#endif
@


1.5
log
@begin overhaul for antique/header compat:
• PARAMS begone
• libc4 ustat definition: resolve inline
• ignore HAVE_*_H for headers mksh includes unconditionally
@
text
@d12 1
a12 1
__IDSTRING(rcsid_kbd_h, "$MirOS: contrib/code/jupp/kbd.h,v 1.4 2017/12/02 17:00:49 tg Exp $");
d48 1
a48 1
 * is speicified, then the key sequences
@


1.4
log
@fix string name collision by prefixing the idstrings in not-.c files
@
text
@d12 1
a12 1
__IDSTRING(rcsid_kbd_h, "$MirOS: contrib/code/jupp/kbd.h,v 1.3 2017/12/02 02:07:28 tg Exp $");
d18 1
a18 1
KMAP *mkkmap PARAMS((void));
d23 1
a23 1
void rmkmap PARAMS((KMAP *kmap));
d51 1
a51 1
int kadd PARAMS((CAP *cap, KMAP *kmap, unsigned char *seq, void *bind));
d56 1
a56 1
void kcpy PARAMS((KMAP *dest, KMAP *src));
d65 1
a65 1
int kdel PARAMS((KMAP *kmap, unsigned char *seq));
d70 1
a70 1
KBD *mkkbd PARAMS((KMAP *kmap));
d76 1
a76 1
void rmkbd PARAMS((KBD *k));
d85 1
a85 1
void *dokey PARAMS((KBD *kbd, int n));
@


1.3
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d12 1
a12 1
__RCSID("$MirOS$");
@


1.2
log
@prepare for joe-3.1jupp9:
* sync NEWS
* bump vsn in configure.ac
* tag all files with RCS ID
* sync licence template
@
text
@a0 1
/* $MirOS$ */
d11 3
a13 2
#include "config.h"
#include "types.h"
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 9
a9 20
/* Key-map handler
   Copyright (C) 1992 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 

#ifndef _Ikbd
#define _Ikbd 1
d12 1
a12 36
#include "scrn.h"

typedef struct kmap KMAP;
typedef struct kbd KBD;
#define KEYS 256

typedef struct key KEY;

/* A key binding */

struct key
 {
 int k;			/* Flag: 0=binding, 1=submap */
 union
  {
  void *bind;		/* What key is bound to */
  KMAP *submap;		/* Sub KMAP address (for prefix keys) */
  } value;
 };

/* A map of keycode to command/sub-map bindings */

struct kmap
 {
 KEY keys[KEYS];	/* KEYs */
 };

/** A keyboard handler **/

struct kbd
 {
 KMAP *curmap;		/* Current keymap */
 KMAP *topmap;		/* Top-level keymap */
 int seq[16];		/* Current sequence of keys */
 int x;			/* What we're up to */
 };
d17 1
a17 1
KMAP *mkkmap();
d22 1
a22 1
void rmkmap();
d50 1
a50 1
int kadd();
d55 1
a55 1
void kcpy();
d64 1
a64 1
int kdel();
d69 1
a69 1
KBD *mkkbd();
d75 1
a75 1
void rmkbd();
d84 1
a84 1
void *dokey();
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
