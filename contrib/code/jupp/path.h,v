head	1.17;
access;
symbols
	joe-3_1jupp38:1.17
	joe-3_1jupp37:1.17
	joe-3_1jupp36:1.17
	joe-3_1jupp35:1.16
	joe-3_1jupp34:1.16
	joe-3_1jupp33:1.16
	joe-3_1jupp32:1.14
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.11
	joe-3_1jupp30:1.11
	joe-3_1jupp29:1.11
	joe-3_1jupp28:1.8
	joe-3_1jupp27:1.8
	joe-3_1jupp26:1.8
	joe-3_1jupp25:1.8
	joe-3_1jupp24:1.6
	joe-3_1jupp23:1.6
	joe-3_1jupp22:1.6
	joe-3_1jupp21:1.6
	joe-3_1jupp20:1.6
	joe-3_1jupp19:1.6
	joe-3_1jupp18:1.6
	joe-3_1jupp17:1.6
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.6
	joe-3_1jupp15:1.6
	joe-3_1jupp14:1.5
	joe-3_1jupp12:1.5
	joe-3_1jupp11:1.3
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.3
	joe-3_1jupp9:1.3
	joe-3_1jupp8:1.2
	joe-3_1jupp7:1.2
	joe-3_1jupp6:1.2
	joe-3_1jupp5:1.2
	joe-3_1jupp4:1.2
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.17
date	2018.03.15.22.48.01;	author tg;	state Exp;
branches;
next	1.16;
commitid	1005AAAF8233681A885;

1.16
date	2018.01.06.00.28.32;	author tg;	state Exp;
branches;
next	1.15;
commitid	1005A50184621FA8455;

1.15
date	2017.12.20.23.19.15;	author tg;	state Exp;
branches;
next	1.14;
commitid	1005A3AF00342723BA6;

1.14
date	2017.12.06.21.16.58;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005A285E5918D423C7;

1.13
date	2017.12.02.17.00.49;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005A22DC570063953B;

1.12
date	2017.12.02.02.07.29;	author tg;	state Exp;
branches;
next	1.11;
commitid	1005A220AD65C90E687;

1.11
date	2016.10.29.23.44.45;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005815347F236258ED;

1.10
date	2016.10.08.16.42.00;	author tg;	state Exp;
branches;
next	1.9;
commitid	10057F921EB68DE163A;

1.9
date	2016.10.08.16.26.00;	author tg;	state Exp;
branches;
next	1.8;
commitid	10057F91DF7456BBA11;

1.8
date	2013.08.19.22.48.33;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005212A0D860585CD4;

1.7
date	2013.08.19.22.03.20;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005212963A2ECD563E;

1.6
date	2011.07.02.22.49.12;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004E0FA07535C20AF8;

1.5
date	2009.10.06.09.44.00;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004ACB1177780F771B;

1.4
date	2009.10.06.09.39.41;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004ACB10683DCF8D9A;

1.3
date	2008.05.13.13.08.24;	author tg;	state Exp;
branches;
next	1.2;
commitid	100482992BC01EE89A1;

1.2
date	2005.02.05.02.42.21;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.00.37.13;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.22;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.13;	author tg;	state Exp;
branches;
next	;


desc
@@


1.17
log
@(try to) fix substitution fuckup

cf. https://www.gnu.org/software/autoconf/manual/autoconf-2.63/html_node/Installation-Directory-Variables.html
@
text
@/*
 *	Directory and path functions
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#ifndef _JOE_PATH_H
#define _JOE_PATH_H 1

#ifdef EXTERN
__IDSTRING(rcsid_path_h, "$MirOS: contrib/code/jupp/path.h,v 1.15 2017/12/20 23:19:15 tg Exp $");
#endif

#if defined(__MSDOS__) || defined(__DJGPP__) || defined(__EMX__) || \
    defined(__CYGWIN__) || defined(_WIN32)
/*XXX check this for all platforms */
#define HAVE_BACKSLASH_PATHS 1
#define HAVE_DRIVE_LETTERS 1
#else
#define HAVE_BACKSLASH_PATHS 0
#define HAVE_DRIVE_LETTERS 0
#endif

#if HAVE_BACKSLASH_PATHS
unsigned char *joesep(unsigned char *path);
#else
#define joesep(path) (path)
#endif

#if JUPP_WIN32RELOC
#undef JOERC
extern unsigned char has_JOERC, *get_JOERC;
void init_JOERC(void);
#else
#define has_JOERC	1
#define get_JOERC	JOERC
#define init_JOERC()	/* nothing */
#endif

/* char *namprt(char *path);
 * Return name part of a path.  There is no name if the last character
 * in the path is '/'.
 *
 * The name part of "/hello/there" is "there"
 * The name part of "/hello/" is ""
 * The name part if "/" is ""
 */
unsigned char *namprt(unsigned char *path);
unsigned char *namepart(unsigned char *tmp, unsigned char *path)
    ATTR_BOUNDED((__minbytes__,1,1024));

/* char *dirprt(char *path);
 * Return directory and drive part of a path.  I.E., everything to the
 * left of the name part.
 *
 * The directory part of "/hello/there" is "/hello/"
 * The directory part of "/hello/" is "/hello/"
 * The directory part of "/" is "/"
 *
 * dirprt_ptr points to just beyond what dirprt returns.
 */
unsigned char *dirprt(unsigned char *path);
unsigned char *dirprt_ptr(unsigned char *path);

/* char *begprt(char *path);
 * Return the beginning part of a path.
 *
 * The beginning part of "/hello/there" is "/hello/"
 * The beginning part of "/hello/" is "/"
 * The beginning part of "/" is "/"
 */
unsigned char *begprt(unsigned char *path);

/* char *endprt(char *path);
 * Return the ending part of a path.
 *
 * The ending part of "/hello/there" is "there"
 * The ending part of "/hello/" is "hello/"
 * The ending part of "/" is ""
 */
unsigned char *endprt(unsigned char *path);

/* int mkpath(char *path);
 * Make sure path exists.  If it doesn't, try to create it
 *
 * Returns 1 for error or 0 for success.  The current directory
 * and drive will be at the given path if successful, otherwise
 * the drive and path will be elsewhere (not necessarily where they
 * were before mkpath was called).
 */
int mkpath(unsigned char *path);

/* char *mktmp(char *, int *);
 * Create an empty temporary file.  The file name created is the string passed
 * to this function postfixed with /joe.tmp.XXXXXX, where XXXXXX is some
 * string six chars long which makes this file unique.
 * If second argument is not NULL, fd is kept open and stored there.
*/
unsigned char *mktmp(unsigned char *where, int *fdp);

/* Change drive and directory */
#define chddir chdir

/* int rmatch(char *pattern,char *string);
 * Return true if string matches pattern
 *
 * Pattern is:
 *     *                 matches 0 or more charcters
 *     ?                 matches any 1 character
 *     [...]             matches 1 character in set
 *     [^...]            matches 1 character not in set
 *     [[]               matches [
 *     [*]               matches *
 *     [?]               matches ?
 *     any other         matches self
 *
 *  Ranges of characters may be specified in sets with 'A-B'
 *  '-' may be specified in sets by placing it at the ends
 *  '[' may be specified in sets by placing it first
 */
int rmatch(const unsigned char *a, const unsigned char *b);
int isreg(unsigned char *s);

/* char **rexpnd(char *path,char *pattern);
 * Generate array (see va.h) of file names from directory in 'path'
 * which match the pattern 'pattern'
 */
unsigned char **rexpnd(const unsigned char *word);

int chJpwd(const unsigned char *path);
int chpwd(const unsigned char *path);
unsigned char *pwd(void);

#endif
@


1.16
log
@merge fixes from gitlab branch; highlights:

Date:   Fri Dec 22 20:02:27 2017 +0100
    string sharing

Date:   Fri Dec 22 20:07:43 2017 +0100
    glopts can be static

Date:   Fri Dec 22 20:34:12 2017 +0100
    largish code cleanup

Date:   Fri Dec 22 20:58:59 2017 +0100
    major const cleanup

Date:   Sat Dec 23 01:41:49 2017 +0100
    fix refactoro: this code is run in a loop, reinitialise each time

Date:   Sat Jan 6 00:54:10 2018 +0100
    fix regression: `` did no longer insert a sole ` (etc.)
    also, factor out common code and optimise it

Date:   Sat Jan 6 01:05:42 2018 +0100
    2018

Date:   Sat Jan 6 01:05:47 2018 +0100
    more const cleanup while here

also, update NEWS
@
text
@d32 1
@


1.15
log
@fix nil pointer deref in error path
@
text
@d12 1
a12 1
__IDSTRING(rcsid_path_h, "$MirOS: contrib/code/jupp/path.h,v 1.14 2017/12/06 21:16:58 tg Exp $");
d128 1
a128 1
unsigned char **rexpnd(unsigned char *word);
@


1.14
log
@begin overhaul for antique/header compat:
• PARAMS begone
• libc4 ustat definition: resolve inline
• ignore HAVE_*_H for headers mksh includes unconditionally
@
text
@d12 1
a12 1
__IDSTRING(rcsid_path_h, "$MirOS: contrib/code/jupp/path.h,v 1.13 2017/12/02 17:00:49 tg Exp $");
d121 1
a121 1
int rmatch(unsigned char *a, unsigned char *b);
@


1.13
log
@fix string name collision by prefixing the idstrings in not-.c files
@
text
@d12 1
a12 1
__IDSTRING(rcsid_path_h, "$MirOS: contrib/code/jupp/path.h,v 1.12 2017/12/02 02:07:29 tg Exp $");
d26 1
a26 1
unsigned char *joesep PARAMS((unsigned char *path));
d33 1
a33 1
void init_JOERC PARAMS((void));
d48 2
a49 2
unsigned char *namprt PARAMS((unsigned char *path));
unsigned char *namepart PARAMS((unsigned char *tmp, unsigned char *path))
d62 2
a63 2
unsigned char *dirprt PARAMS((unsigned char *path));
unsigned char *dirprt_ptr PARAMS((unsigned char *path));
d72 1
a72 1
unsigned char *begprt PARAMS((unsigned char *path));
d81 1
a81 1
unsigned char *endprt PARAMS((unsigned char *path));
d91 1
a91 1
int mkpath PARAMS((unsigned char *path));
d99 1
a99 1
unsigned char *mktmp PARAMS((unsigned char *where, int *fdp));
d121 2
a122 2
int rmatch PARAMS((unsigned char *a, unsigned char *b));
int isreg PARAMS((unsigned char *s));
d128 1
a128 1
unsigned char **rexpnd PARAMS((unsigned char *word));
d130 3
a132 3
int chJpwd PARAMS((const unsigned char *path));
int chpwd PARAMS((const unsigned char *path));
unsigned char *pwd PARAMS((void));
@


1.12
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d12 1
a12 1
__RCSID("$MirOS$");
@


1.11
log
@first cut at win32 self-relocation
@
text
@a0 1
/* $MirOS: contrib/code/jupp/path.h,v 1.7 2013/08/19 22:03:20 tg Exp $ */
d11 3
a13 1
#include "config.h"
@


1.10
log
@fix filenames with backslashes (data corruption)
@
text
@d30 9
d129 2
a130 1
int chpwd PARAMS((unsigned char *path));
@


1.9
log
@first path of overhauling PATH handling

'foo\bar' is still shown and saved as 'foo/bar' though loaded from 'foo\bar'
but if disabled, 'fooar' is shown and the title bar bolded; b->name must be
escaped while rendering but must keep the actual pathname (hard!)
@
text
@d20 1
a20 1
#define HAVE_BACKSLASH_PATHS 1
@


1.8
log
@for real: backups use tmp files
@
text
@d14 11
d26 3
@


1.7
log
@somewhat sanitise tmpfile handling
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/path.h,v 1.6 2011/07/02 22:49:12 tg Exp $ */
d35 2
d39 1
@


1.6
log
@mangle bounded attribute as well
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/path.h,v 1.5 2009/10/06 09:44:00 tg Exp $ */
d66 1
a66 1
/* char *mktmp(char *);
d70 1
d72 1
a72 1
unsigned char *mktmp PARAMS((unsigned char *where));
@


1.5
log
@fix
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/path.h,v 1.4 2009/10/06 09:39:41 tg Exp $ */
a13 10
#if !defined(__GNUC__) && !defined(__attribute__)
#define __attribute__(p) /* nothing */
#endif

#if defined(HAVE_ATTRIBUTE_BOUNDED) && (!HAVE_ATTRIBUTE_BOUNDED)
#define bounded_attr(p)	/* nothing */
#else
#define bounded_attr(p)	__attribute__((__bounded__ p))
#endif

d26 1
a26 1
    bounded_attr((__minbytes__,1,1024));
@


1.4
log
@allow circumventing Anil’s __bounded__ attribute
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/path.h,v 1.3 2008/05/13 13:08:24 tg Exp $ */
d21 1
a21 1
#define bounded_attr(p)	__attribute__((__bounded__ (p)))
d36 1
a36 1
    bounded_attr(__minbytes__,1,1024);
@


1.3
log
@prepare for joe-3.1jupp9:
* sync NEWS
* bump vsn in configure.ac
* tag all files with RCS ID
* sync licence template
@
text
@d1 1
a1 1
/* $MirOS$ */
d18 6
d36 1
a36 1
	__attribute__((__bounded__(__minbytes__,1,1024)));
@


1.2
log
@Update the non-generated files to joe-3.1jupp2
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d13 4
d28 2
a29 1
unsigned char *namepart PARAMS((unsigned char *tmp, unsigned char *path));
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 9
a9 20
/* Directory and path functions
   Copyright (C) 1992 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 

#ifndef _Ipath
#define _Ipath 1
d13 1
a13 22
#ifdef junk
/* char *abspth(char *path);
 * Convert given path into an absolute path (a path beginning with a drive
 * letter and backslash "C:\" and with no "."s or ".."s).
 *
 * This can be used to check if two paths refer to the same file:  Convert the
 * two paths into absolute paths and then compare the absolute paths.
 *
 * Also, this can be used to get the current drive and directory:
 * Use abspath("")
 *
 * Or, to get the current directory on another drive:  Use abspath("a:")
 *
 * Returns an malloc block containing the absolute path string or
 * 0 if the given path was in error or if couldn't read the current
 * directory (because the floppy was removed from the drive).
 */
char *abspth();
#endif

char *ossep();
char *joesep();
d23 2
a24 2
char *namprt();
char *namepart();
d34 1
a34 1
char *dirprt();
d43 1
a43 1
char *begprt();
d52 1
a52 1
char *endprt();
d62 1
a62 1
int mkpath();
d66 4
a69 3
 * to this function postfixed with JXXXXXX.tmp, where XXXXXX is some number.
 */
char *mktmp();
d71 1
a71 2
/* Change drive and directory
 */
d91 2
a92 2
int rmatch();
int isreg();
d98 1
a98 1
char **rexpnd();
d100 2
a101 1
int chpwd();
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
