head	1.16;
access;
symbols
	joe-3_1jupp38:1.16
	joe-3_1jupp37:1.16
	joe-3_1jupp36:1.16
	joe-3_1jupp35:1.16
	joe-3_1jupp34:1.16
	joe-3_1jupp33:1.16
	joe-3_1jupp32:1.15
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.7
	joe-3_1jupp30:1.7
	joe-3_1jupp29:1.6
	joe-3_1jupp28:1.6
	joe-3_1jupp27:1.6
	joe-3_1jupp26:1.6
	joe-3_1jupp25:1.6
	joe-3_1jupp24:1.5
	joe-3_1jupp23:1.5
	joe-3_1jupp22:1.4
	joe-3_1jupp21:1.4
	joe-3_1jupp20:1.4
	joe-3_1jupp19:1.4
	joe-3_1jupp18:1.4
	joe-3_1jupp17:1.4
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.4
	joe-3_1jupp15:1.4
	joe-3_1jupp14:1.4
	joe-3_1jupp12:1.4
	joe-3_1jupp11:1.3
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.3
	joe-3_1jupp9:1.3
	joe-3_1jupp8:1.3
	joe-3_1jupp7:1.3
	joe-3_1jupp6:1.2
	joe-3_1jupp5:1.2
	joe-3_1jupp4:1.2
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.16
date	2018.01.06.00.28.31;	author tg;	state Exp;
branches;
next	1.15;
commitid	1005A50184621FA8455;

1.15
date	2017.12.16.22.10.54;	author tg;	state Exp;
branches;
next	1.14;
commitid	1005A359A0405479D56;

1.14
date	2017.12.08.02.28.05;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005A29F8C708B176AB;

1.13
date	2017.12.08.02.17.21;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005A29F64A06DEB239;

1.12
date	2017.12.08.02.00.39;	author tg;	state Exp;
branches;
next	1.11;
commitid	1005A29F2506E789D2B;

1.11
date	2017.12.07.02.10.16;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005A28A3145E1FF911;

1.10
date	2017.12.06.23.17.34;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005A287AA407E73F9C;

1.9
date	2017.12.06.23.02.03;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005A2876FC4FFE7EF5;

1.8
date	2017.12.02.02.07.29;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005A220AD65C90E687;

1.7
date	2017.01.10.19.16.27;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005875332028CA2A36;

1.6
date	2013.08.19.18.25.44;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005212631E445656D9;

1.5
date	2012.12.22.00.06.13;	author tg;	state Exp;
branches;
next	1.4;
commitid	10050D4F965570AEE79;

1.4
date	2009.10.18.14.52.56;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004ADB2BD317498872;

1.3
date	2006.11.10.23.38.40;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045550D840BDB46E6;

1.2
date	2005.02.05.02.42.21;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.21;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.16
log
@merge fixes from gitlab branch; highlights:

Date:   Fri Dec 22 20:02:27 2017 +0100
    string sharing

Date:   Fri Dec 22 20:07:43 2017 +0100
    glopts can be static

Date:   Fri Dec 22 20:34:12 2017 +0100
    largish code cleanup

Date:   Fri Dec 22 20:58:59 2017 +0100
    major const cleanup

Date:   Sat Dec 23 01:41:49 2017 +0100
    fix refactoro: this code is run in a loop, reinitialise each time

Date:   Sat Jan 6 00:54:10 2018 +0100
    fix regression: `` did no longer insert a sole ` (etc.)
    also, factor out common code and optimise it

Date:   Sat Jan 6 01:05:42 2018 +0100
    2018

Date:   Sat Jan 6 01:05:47 2018 +0100
    more const cleanup while here

also, update NEWS
@
text
@/*
 *	Menu selection window
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "config.h"
#include "types.h"

__RCSID("$MirOS: contrib/code/jupp/menu.c,v 1.15 2017/12/16 22:10:54 tg Exp $");

#include <stdlib.h>
#include <string.h>

#include "menu.h"
#include "scrn.h"
#include "utils.h"
#include "va.h"
#include "vs.h"
#include "utf8.h"
#include "w.h"

extern int dostaupd;

static void mconfig(MENU *);

static void menufllw(jobject jO)
{
	MENU *m = jO.menu;
	if (m->cursor < m->top)
		m->top = m->cursor - m->cursor % m->perline;
	else if (m->cursor >= m->top+m->perline*m->h)
		m->top = m->cursor - m->cursor % m->perline - m->perline*(m->h-1);
}

static void menudisp(jobject jO, int flg __attribute__((__unused__)))
{
	MENU *m = jO.menu;
	int col;
	int x;
	int y;
	int *s = m->t->t->scrn + m->x + m->y * m->t->t->co;
	int *a = m->t->t->attr + m->x + m->y * m->t->t->co;
	struct utf8_sm sm;

	utf8_init(&sm);

	if (m->t->t->co != m->saved_co)
		mconfig(m);

	for (y = 0; y != m->h; ++y) {
		col = 0;
		for (x = 0; x != m->perline && y*m->perline+x+m->top<m->nitems; ++x) {
			int atr;

			if (x + y*m->perline + m->top == m->cursor)
				atr = INVERSE;
			else
				atr = 0;

			if (col == m->w)
				break;

			/* Generate field */
			genfield(m->t->t,
			    s + col,
			    a + col,
			    m->x + col,
			    m->y + y,
			    0,
			    m->list[x + y*m->perline + m->top],
			    strlen((char *)m->list[x + y*m->perline + m->top]),
			    atr,
			    m->width,
			    0,
			    NULL);

			col += m->width;

			/* Space between columns */
			if (col != m->w) {
				outatr(locale_map, m->t->t, s + col, a + col, m->x + col, m->y+y, ' ', 0);
				++col;
			}
		}
		/* Clear to end of line */
		if (col != m->w)
			eraeol(m->t->t, m->x + col, m->y + y);
		s += m->t->t->co;
		a += m->t->t->co;
	}
	m->parent->cury = (m->cursor - m->top) / (m->perline ? m->perline : 1);
	col = txtwidth(m->list[m->cursor],strlen((char *)m->list[m->cursor]));
	m->parent->curx = ((m->cursor - m->top) % (m->perline ? m->perline : 1)) *
	    (m->width + 1) + (col < m->width ? col : m->width);
}

static void menumove(jobject jO, int x, int y)
{
	MENU *m = jO.menu;
	m->x = x;
	m->y = y;
}

static void menuresz(jobject jO, int wi, int he)
{
	MENU *m = jO.menu;
	m->w = wi;
	m->h = he;
}

static int mlines(unsigned char **s, int w)
{
	int x;
	int lines;
	int width;
	int nitems;
	int perline;

	for (x = 0, width = 0; s[x]; ++x) {
		int d = txtwidth(s[x],strlen((char *)(s[x])));
		if (d > width)
			width = d;
	}
	nitems = x;
	if (width > w)
		width = w - 1;
	perline = w / (width + 1);

	lines = (nitems + perline - 1) / perline;

	return lines;
}

static void mconfig(MENU *m)
{
	/* Configure menu display parameters */
	if (m->list) {
		int x;
		/* int lines; */

		m->top = 0;
		for (x = 0, m->width = 0; m->list[x]; ++x) {
			int d = txtwidth(m->list[x],strlen((char *)(m->list[x])));
			if (d > m->width)
				m->width = d;
		}
		m->nitems = x;
		if (m->width > m->w)
			m->width = m->w - 1;
		m->perline = m->w / (m->width + 1);

		/* lines = (m->nitems + m->perline - 1) / m->perline; */

		m->saved_co = m->t->t->co;
	}
}

int umbol(MENU *m)
{
	m->cursor -= m->cursor % m->perline;
	return 0;
}

int umbof(MENU *m)
{
	m->cursor = 0;
	return 0;
}

int umeof(MENU *m)
{
	if (m->nitems)
		m->cursor = m->nitems - 1;
	return 0;
}

int umeol(MENU *m)
{
	m->cursor -= m->cursor % m->perline;

	if (m->cursor+m->perline-1 >= m->nitems)
		m->cursor = m->nitems - 1;
	else
		m->cursor += m->perline - 1;

	return 0;
}

int umrtarw(MENU *m)
{
	if (m->cursor + 1 < m->nitems) {
		++m->cursor;
		return 0;
	} else
		return -1;
}

int umtab(MENU *m)
{
	if (m->cursor + 1 >= m->nitems)
		m->cursor = 0;
	else
		++ m->cursor;
	return 0;
}

int umltarw(MENU *m)
{
	if (m->cursor) {
		--m->cursor;
		return 0;
	} else
		return -1;
}

int umuparw(MENU *m)
{
	if (m->cursor >= m->perline) {
		m->cursor -= m->perline;
		return 0;
	} else
		return -1;
}

int umdnarw(MENU *m)
{
	int col = m->cursor % m->perline;

	m->cursor -= col;

	if (m->cursor + m->perline < m->nitems) {
		m->cursor += m->perline;
		if (m->cursor + col >= m->nitems)
			if (m->nitems)
				m->cursor = m->nitems - 1;
			else
				m->cursor = 0;
		else
			m->cursor += col;
		return 0;
	} else {
		m->cursor += col;
		return -1;
	}
}

int umpgup(MENU *m)
{
	int amnt = (m->h+1)/2;
	if (m->top >= amnt*m->perline) {
		m->top -= amnt*m->perline;
		m->cursor -= amnt*m->perline;
		return 0;
	} else if (m->top) {
		m->cursor -= m->top;
		m->top = 0;
		return 0;
	} else if (m->cursor >= m->perline) {
		m->cursor = m->cursor % m->perline;
		return 0;
	} else
		return -1;
}

int umpgdn(MENU *m)
{
	int amnt = (m->h+1)/2;
	int col = m->cursor % m->perline;
	int y = m->cursor / m->perline;
	int h = (m->nitems + m->perline - 1) / m->perline;
	int t = m->top / m->perline;
	m->cursor -= col;

	if (t + m->h + amnt <= h) {
		m->top += amnt*m->perline;
		m->cursor += amnt*m->perline;
		if (m->cursor + col >= m->nitems)
			if (m->nitems)
				m->cursor = m->nitems - 1;
			else
				m->cursor = 0;
		else
			m->cursor += col;
		return 0;
	} else if (t + m->h < h) {
		amnt = h - (t + m->h);
		m->top += amnt*m->perline;
		m->cursor += amnt*m->perline;
		if (m->cursor + col >= m->nitems)
			if (m->nitems)
				m->cursor = m->nitems - 1;
			else
				m->cursor = 0;
		else
			m->cursor += col;
		return 0;
	} else if (y+1!=h) {
		m->cursor = (h-1)*m->perline;
		if (m->cursor + col >= m->nitems)
			if (m->nitems)
				m->cursor = m->nitems - 1;
			else
				m->cursor = 0;
		else
			m->cursor += col;
		return 0;
	} else {
		m->cursor += col;
		return -1;
	}

}

static int umrtn(jobject jO)
{
	MENU *m = jO.menu;
	dostaupd = 1;
	if (m->func)
		return m->func(m, m->cursor, m->object, 0);
	else
		return -1;
}

int umbacks(MENU *m)
{
	if (m->backs)
		return m->backs(m, m->cursor, m->object);
	else
		return -1;
}

static int umkey(jobject jO, int c)
{
	MENU *m = jO.menu;
	int x;
	int n = 0;

	if (c == '0') {
		if (m->func)
			return m->func(m, m->cursor, m->object, -1);
		else
			return -1;
	}
	if (c == '1') {
		if (m->func)
			return m->func(m, m->cursor, m->object, 1);
		else
			return -1;
	}
	c |= 0x20;
	if (c < 'a' || c > 'z')
		return -1;
	c &= 0x1F;
	for (x = 0; x != m->nitems; ++x)
		if ((m->list[x][0] & 0x1F) == c)
			++n;
	if (!n)
		return -1;
	if (n == 1)
		for (x = 0; x != m->nitems; ++x)
			if ((m->list[x][0] & 0x1F) == c) {
				m->cursor = x;
				return umrtn(jO);
			}
	do {
		++m->cursor;
		if (m->cursor == m->nitems)
			m->cursor = 0;
	} while ((m->list[m->cursor][0] & 0x1F) != c);

	return -1;
}

static int menuabort(jobject jO)
{
	MENU *m = jO.menu;
	W *w = m->parent;
	jpoly_int *func = m->abrt;
	void *object = m->object;
	int x = m->cursor;
	W *win = w->win;

	free(m);
	if (func)
		return func(win->object, x, object);
	else
		return -1;
}

WATOM watommenu = {
	UC "menu",
	menudisp,
	menufllw,
	menuabort,
	umrtn,
	umkey,
	menuresz,
	menumove,
	NULL,
	NULL,
	TYPEMENU
};

void ldmenu(MENU *m, unsigned char **s, int cursor)
{
	m->list = s;
	m->cursor = cursor;
	mconfig(m);
}

MENU *mkmenu(W *w, unsigned char **s, jpoly_int *func, jpoly_int *abrt, jpoly_int *backs, int cursor, void *object, int *notify)
{
	W *new;
	MENU *m;
	int lines;
	int h = (w->main->h*40) / 100; /* 40% of window size */
	if (!h)
		h = 1;

	if (s) {
		lines = mlines(s,w->t->w-1);
		if (lines < h)
			h = lines;
	}

	new = wcreate(w->t, &watommenu, w, w, w->main, h, NULL, notify);

	if (!new) {
		if (notify)
			*notify = 1;
		return NULL;
	}
	wfit(new->t);
	new->object.menu = m = malloc(sizeof(MENU));
	m->parent = new;
	m->func = func;
	m->abrt = abrt;
	m->backs = backs;
	m->object = object;
	m->t = w->t;
	m->h = new->h;
	m->w = new->w;
	m->x = new->x;
	m->y = new->y;
	m->top = 0;
	m->saved_co = 0;
	ldmenu(m, s, cursor);
	w->t->curwin = new;
	return m;
}

static unsigned char *cull(unsigned char *a, unsigned char *b)
{
	int x;

	for (x = 0; a[x] && b[x] && a[x] == b[x]; ++x) ;
	return vstrunc(a, x);
}

unsigned char *find_longest(unsigned char **lst)
{
	unsigned char *com;
	int x;

	if (!lst || !aLEN(lst))
		return vstrunc(NULL, 0);
	com = vsncpy(NULL, 0, sv(lst[0]));
	for (x = 1; x != aLEN(lst); ++x)
		com = cull(com, lst[x]);
	return com;
}

unsigned char *mcomplete(MENU *m)
{
	unsigned char *com;
	int x;

	if (!m->nitems)
		return vstrunc(NULL, 0);
	com = vsncpy(NULL, 0, sz(m->list[0]));
	for (x = 1; x != m->nitems; ++x)
		com = cull(com, m->list[x]);
	return com;
}
@


1.15
log
@more casing tweaks
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/menu.c,v 1.14 2017/12/08 02:28:05 tg Exp $");
d393 1
a393 1
	US "menu",
@


1.14
log
@label indent; small tweaks while here
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/menu.c,v 1.11 2017/12/07 02:10:16 tg Exp $");
d352 2
a353 1
	if (!(((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z'))))
@


1.13
log
@more small tweaks
@
text
@d231 1
a231 1
        m->cursor -= col;
@


1.12
log
@don’t box malloc/calloc/realloc/free; don’t cast malloc result; order calloc args
@
text
@d67 11
a77 11
			         s + col,
			         a + col,
			         m->x + col,
			         m->y + y,
			         0,
			         m->list[x + y*m->perline + m->top],
			         strlen((char *)m->list[x + y*m->perline + m->top]),
			         atr,
			         m->width,
			         0,
				 NULL);
@


1.11
log
@feeble first attempt at using a union to break up the UB in the polymorphism
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/menu.c,v 1.10 2017/12/06 23:17:34 tg Exp $");
d384 1
a384 1
	joe_free(m);
d435 1
a435 1
	new->object.menu = m = (MENU *)joe_malloc(sizeof(MENU));
@


1.10
log
@whitespace at EOL annoys me
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/menu.c,v 1.9 2017/12/06 23:02:03 tg Exp $");
d28 1
a28 1
static void menufllw(MENU *m)
d30 1
d37 1
a37 1
static void menudisp(MENU *m)
d39 1
d99 1
a99 1
static void menumove(MENU *m, int x, int y)
d101 1
d106 1
a106 1
static void menuresz(MENU *m, int wi, int he)
d108 1
d316 1
a316 1
static int umrtn(MENU *m)
d318 1
d334 1
a334 1
static int umkey(MENU *m, int c)
d336 1
d364 1
a364 1
				return umrtn(m);
d375 1
a375 1
static int menuabort(MENU *m)
d377 1
d435 1
a435 1
	new->object = (void *) (m = (MENU *) joe_malloc(sizeof(MENU)));
@


1.9
log
@lots of fixes related to prototyping
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/menu.c,v 1.8 2017/12/02 02:07:29 tg Exp $");
d54 1
a54 1
	
d413 1
a413 1
	
@


1.8
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d11 1
a11 1
__RCSID("$MirOS$");
d16 1
d372 1
a372 1
	int (*func) () = m->abrt;
d405 1
a405 1
MENU *mkmenu(W *w, unsigned char **s, int (*func) (/* ??? */), int (*abrt) (/* ??? */), int (*backs) (/* ??? */), int cursor, void *object, int *notify)
@


1.7
log
@these now all need <stdlib.h>
@
text
@a0 1
/* $MirOS: contrib/code/jupp/menu.c,v 1.5 2012/12/22 00:06:13 tg Exp $ */
d11 2
@


1.6
log
@On SIGWINCH, resize menu to avoid using stale columns information

This caused an invalid memory access because the number of entries
per line was not recalculated.

Reported by Natureshadow; found by Eike Tim Jesinghaus
@
text
@d12 1
@


1.5
log
@some clang-3.2/scan-build work; also checked against gcc-4.7, gcc-4.8 and
gcc version 4.8.0 20121120 (experimental) [trunk revision 193662] (Debian 20121120-1)
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/menu.c,v 1.4 2009/10/18 14:52:56 tg Exp $ */
d23 2
d44 3
d148 2
d437 1
@


1.4
log
@backport hex editing mode from joe 3.7 for waga as late birthday present
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/menu.c,v 1.3 2006/11/10 23:38:40 tg Exp $ */
d83 1
a83 1
	m->parent->cury = (m->cursor - m->top) / m->perline;
d85 2
a86 4
	if (col < m->width)
		m->parent->curx = ((m->cursor - m->top) % m->perline) * (m->width + 1) + col;
	else
		m->parent->curx = ((m->cursor - m->top) % m->perline) * (m->width + 1) + m->width;
@


1.3
log
@disable funny menu behaviour
(sadly I don't see a way to make ^C work, but ESC ESC works)
@
text
@d1 1
a1 1
/* $MirOS$ */
d66 2
a67 1
			         0);
@


1.2
log
@Update the non-generated files to joe-3.1jupp2
@
text
@d1 1
d337 2
@


1.1
log
@Initial revision
@
text
@d44 1
a44 1
			int atr, z, lcol;
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 9
a9 4
/* Menu selection window
   Copyright (C) 1992 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)
d11 1
a11 12
JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
a12 1
#include "config.h"
d14 4
a18 3
#include "vs.h"
#include "zstr.h"
#include "menu.h"
d22 444
a465 270
void menufllw(m)
MENU *m;
 {
 m->top=m->cursor-m->cursor%m->perline;
 }

void menudisp(m)
MENU *m;
 {
 int col;
 int x;
 int *s=m->t->t->scrn+m->x+m->y*m->t->t->co;
 col=0;
 for(x=0;x!=m->perline && m->list[x+m->top];++x)
  {
  int atr,z;
  if(x+m->top==m->cursor) atr=INVERSE;
  else atr=0;
  if(col==m->w) break;
  for(z=0;m->list[x+m->top][z];++z)
   {
   if(col==m->w) break;
   outatr(m->t->t, s+col, m->x+col, m->y, m->list[x+m->top][z], atr);
   ++col;
   }
  while(z<m->width)
   {
   if(col==m->w) break;
   outatr(m->t->t,s+col,m->x+col,m->y,' ',0);
   ++col; ++z;
   }
  if(col!=m->w)
   {
   outatr(m->t->t,s+col,m->x+col,m->y,' ',0);
   ++col;
   }
  }
 if(col!=m->w) eraeol(m->t->t,m->x+col,m->y);
 m->parent->cury=0;
 m->parent->curx=(m->cursor-m->top)*(m->width+1);
 }

void menumove(m,x,y)
MENU *m;
 {
 m->x=x;
 m->y=y;
 }

void menuresz(m,wi,he)
MENU *m;
 {
 m->w=wi;
 m->h=he;
 }

void mconfig(m)
MENU *m;
 {
 /* Configure menu display parameters */
 if(m->list)
  {
  int x;
  m->top=0;
  for(x=0,m->width=0;m->list[x];++x)
   if(zlen(m->list[x])>m->width) m->width=zlen(m->list[x]);
  m->nitems=x;
  if(m->width>m->w) m->width=m->w-1;
  m->perline=m->w/(m->width+1);
  }
 }

int umbol(m)
MENU *m;
 {
 m->cursor=m->top;
 return 0;
 }

int umbof(m)
MENU *m;
 {
 m->cursor=0;
 return 0;
 }

int umeof(m)
MENU *m;
 {
 if(m->nitems) m->cursor=m->nitems-1;
 return 0;
 }

int umeol(m)
MENU *m;
 {
 if(m->top+m->perline<m->nitems)
  m->cursor=m->top+m->perline-1;
 else umeof(m);
 return 0;
 }

int umrtarw(m)
MENU *m;
 {
 if(m->cursor+1<m->nitems) { ++m->cursor; return 0; }
 else return -1;
 }

int umltarw(m)
MENU *m;
 {
 if(m->cursor) { --m->cursor; return 0; }
 else return -1;
 }

int umuparw(m)
MENU *m;
 {
 if(m->cursor>=m->perline)
  {
  m->cursor-=m->perline;
  return 0;
  }
 else return -1;
 }

int umdnarw(m)
MENU *m;
 {
 if(m->cursor+m->perline<m->nitems)
  {
  m->cursor+=m->perline;
  return 0;
  }
 else
  if(m->top+m->perline<m->nitems) return umeof(m);
  else return -1;
 }

int umrtn(m)
MENU *m;
 {
 dostaupd=1;
 if(m->func) return m->func(m,m->cursor,m->object,0);
 else return -1;
 }

int umbacks(m)
MENU *m;
 {
 if(m->backs) return m->backs(m,m->cursor,m->object);
 else return -1;
 }

int umkey(m,c)
MENU *m;
 {
 int x;
 int n=0;
 if(c=='0')
  if(m->func) return m->func(m,m->cursor,m->object,-1);
  else return -1;
 if(c=='1')
  if(m->func) return m->func(m,m->cursor,m->object,1);
  else return -1;
 c&=0x1F;
 for(x=0;x!=m->nitems;++x) if((m->list[x][0]&0x1F)==c) ++n;
 if(!n) return -1;
 if(n==1)
  for(x=0;x!=m->nitems;++x)
   if((m->list[x][0]&0x1F)==c)
    {
    m->cursor=x;
    return umrtn(m);
    }
 do
  {
  ++m->cursor;
  if(m->cursor==m->nitems) m->cursor=0;
  } while((m->list[m->cursor][0]&0x1F)!=c);
 return -1;
 }

static int menuabort(m)
MENU *m;
 {
 W *w=m->parent;
 int (*func)()=m->abrt;
 void *object=m->object;
 int x=m->cursor;
 W *win=w->win;
 free(m);
 if(func) return func(win->object,x,object);
 else return -1;
 }

WATOM watommenu=
 {
 "menu",
 menudisp,
 menufllw,
 menuabort,
 umrtn,
 umkey,
 menuresz,
 menumove,
 0,
 0,
 TYPEMENU
 };

void ldmenu(m,s,cursor)
MENU *m;
char **s;
 {
 m->list=s;
 m->cursor=cursor;
 mconfig(m);
 }

MENU *mkmenu(obw,s,func,abrt,backs,cursor,object,notify)
BASE *obw;
char **s;
int (*func)();
int (*abrt)();
int (*backs)();
void *object;
int *notify;
 {
 W *w=obw->parent;
 W *new=wcreate(w->t,&watommenu,w,w,w->main,1,NULL,notify);
 MENU *m;
 if(!new)
  {
  if(notify) *notify=1;
  return 0;
  }
 wfit(new->t);
 new->object=(void *)(m=(MENU *)malloc(sizeof(MENU)));
 m->parent=new;
 m->func=func;
 m->abrt=abrt;
 m->backs=backs;
 m->object=object;
 m->t=w->t;
 m->h=new->h; m->w=new->w; m->x=new->x; m->y=new->y;
 ldmenu(m,s,cursor);
 w->t->curwin=new;
 return m;
 }

char *cull(a,b)
char *a, *b;
 {
 int x;
 for(x=0;a[x] && b[x] && a[x]==b[x];++x);
 return vstrunc(a,x);
 }

char *mcomplete(m)
MENU *m;
 {
 char *com;
 int x;
 if(!m->nitems) return vstrunc(NULL,0);
 com=vsncpy(NULL,0,sz(m->list[0]));
 for(x=1;x!=m->nitems;++x) com=cull(com,m->list[x]);
 return com;
 }
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
