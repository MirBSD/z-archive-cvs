head	1.15;
access;
symbols
	joe-3_1jupp38:1.15
	joe-3_1jupp37:1.15
	joe-3_1jupp36:1.15
	joe-3_1jupp35:1.15
	joe-3_1jupp34:1.15
	joe-3_1jupp33:1.15
	joe-3_1jupp32:1.14
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.8
	joe-3_1jupp30:1.8
	joe-3_1jupp29:1.6
	joe-3_1jupp28:1.5
	joe-3_1jupp27:1.5
	joe-3_1jupp26:1.5
	joe-3_1jupp25:1.5
	joe-3_1jupp24:1.5
	joe-3_1jupp23:1.5
	joe-3_1jupp22:1.5
	joe-3_1jupp21:1.5
	joe-3_1jupp20:1.5
	joe-3_1jupp19:1.5
	joe-3_1jupp18:1.5
	joe-3_1jupp17:1.5
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.5
	joe-3_1jupp15:1.5
	joe-3_1jupp14:1.5
	joe-3_1jupp12:1.5
	joe-3_1jupp11:1.4
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.4
	joe-3_1jupp9:1.3
	joe-3_1jupp8:1.2
	joe-3_1jupp7:1.2
	joe-3_1jupp6:1.2
	joe-3_1jupp5:1.2
	joe-3_1jupp4:1.2
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.15
date	2018.01.06.00.28.32;	author tg;	state Exp;
branches;
next	1.14;
commitid	1005A50184621FA8455;

1.14
date	2017.12.08.02.00.39;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005A29F2506E789D2B;

1.13
date	2017.12.07.02.10.17;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005A28A3145E1FF911;

1.12
date	2017.12.07.00.41.11;	author tg;	state Exp;
branches;
next	1.11;
commitid	1005A288E2F13C57DE3;

1.11
date	2017.12.06.23.58.37;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005A2884424C3F3AD8;

1.10
date	2017.12.06.23.02.03;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005A2876FC4FFE7EF5;

1.9
date	2017.12.02.02.07.29;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005A220AD65C90E687;

1.8
date	2017.01.11.22.56.48;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005876B84150F7CE16;

1.7
date	2017.01.10.19.16.27;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005875332028CA2A36;

1.6
date	2016.10.08.14.58.46;	author tg;	state Exp;
branches;
next	1.5;
commitid	10057F909BA47132811;

1.5
date	2009.10.18.14.52.56;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004ADB2BD317498872;

1.4
date	2008.07.28.00.12.06;	author tg;	state Exp;
branches;
next	1.3;
commitid	100488D0E7907247606;

1.3
date	2008.05.13.13.08.24;	author tg;	state Exp;
branches;
next	1.2;
commitid	100482992BC01EE89A1;

1.2
date	2005.02.05.02.42.21;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.22;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.15
log
@merge fixes from gitlab branch; highlights:

Date:   Fri Dec 22 20:02:27 2017 +0100
    string sharing

Date:   Fri Dec 22 20:07:43 2017 +0100
    glopts can be static

Date:   Fri Dec 22 20:34:12 2017 +0100
    largish code cleanup

Date:   Fri Dec 22 20:58:59 2017 +0100
    major const cleanup

Date:   Sat Dec 23 01:41:49 2017 +0100
    fix refactoro: this code is run in a loop, reinitialise each time

Date:   Sat Jan 6 00:54:10 2018 +0100
    fix regression: `` did no longer insert a sole ` (etc.)
    also, factor out common code and optimise it

Date:   Sat Jan 6 01:05:42 2018 +0100
    2018

Date:   Sat Jan 6 01:05:47 2018 +0100
    more const cleanup while here

also, update NEWS
@
text
@/*
 *	Prompt windows
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "config.h"
#include "types.h"

__RCSID("$MirOS: contrib/code/jupp/pw.c,v 1.14 2017/12/08 02:00:39 tg Exp $");

#include <stdlib.h>
#include <string.h>

#include "b.h"
#include "bw.h"
#include "help.h"
#include "kbd.h"
#include "path.h"
#include "pw.h"
#include "scrn.h"
#include "tab.h"
#include "termcap.h"
#include "tw.h"
#include "uedit.h"
#include "undo.h"
#include "utils.h"
#include "vfile.h"
#include "menu.h"
#include "va.h"
#include "w.h"

extern int smode;
extern int dobeep;

static void disppw(jobject jO, int flg)
{
	BW *bw = jO.bw;
	W *w = bw->parent;
	PW *pw = (PW *) bw->object;

	if (!flg) {
		return;
	}

	/* Scroll buffer and position prompt */
	if (pw->promptlen > w->w / 2 + w->w / 4) {
		pw->promptofst = pw->promptlen - w->w / 2;
		if (piscol(bw->cursor) < w->w - (pw->promptlen - pw->promptofst)) {
			bw->offset = 0;
		} else {
			bw->offset = piscol(bw->cursor) - (w->w - (pw->promptlen - pw->promptofst) - 1);
		}
	} else {
		if (piscol(bw->cursor) < w->w - pw->promptlen) {
			pw->promptofst = 0;
			bw->offset = 0;
		} else if (piscol(bw->cursor) >= w->w) {
			pw->promptofst = pw->promptlen;
			bw->offset = piscol(bw->cursor) - (w->w - 1);
		} else {
			pw->promptofst = pw->promptlen - (w->w - piscol(bw->cursor) - 1);
			bw->offset = piscol(bw->cursor) - (w->w - (pw->promptlen - pw->promptofst) - 1);
		}
	}

	/* Set cursor position */
	w->curx = piscol(bw->cursor) - bw->offset + pw->promptlen - pw->promptofst;
	w->cury = 0;

	/* Generate prompt */
	w->t->t->updtab[w->y] = 1;
	genfmt(w->t->t, w->x, w->y, pw->promptofst, pw->prompt, 0);

	/* Position and size buffer */
	bwmove(bw, w->x + pw->promptlen - pw->promptofst, w->y);
	bwresz(bw, w->w - (pw->promptlen - pw->promptofst), 1);

	/* Generate buffer */
	bwgen(bw, 0);
}

/* When user hits return in a prompt window */

extern volatile int dostaupd;

static int rtnpw(jobject jO)
{
	BW *bw = jO.bw;
	W *w = bw->parent;
	PW *pw = (PW *) bw->object;
	unsigned char *s;
	W *win;
	int *notify;
	jpoly_int *pfunc;
	void *object;
	long byte;

	p_goto_eol(bw->cursor);
	byte = bw->cursor->byte;
	p_goto_bol(bw->cursor);
	s = brvs(bw->cursor, (int)(byte - bw->cursor->byte));
	if (pw->hist) {
		if (bw->b->changed) {
			P *q = pdup(pw->hist->eof);
			P *r = pdup(q);
			unsigned char *s2;
			long byte2;

			pprevl(r);
			byte2 = r->byte;
			p_goto_bol(r);
			s2 = brs(r, (int)(byte2 - r->byte));
			prm(r);
			byte2 = strcmp(s, s2);
			free(s2);
			if (byte2) {
				binsm(q, s, (int)(byte - bw->cursor->byte));
				p_goto_eof(q);
				binsc(q, '\n');
			}
			prm(q);
		} else {
			P *q = pdup(pw->hist->bof);
			P *r;
			P *t;

			pline(q, bw->cursor->line);
			r = pdup(q);
			pnextl(r);
			t = pdup(pw->hist->eof);
			binsb(t, bcpy(q, r));
			bdel(q, r);
			prm(q);
			prm(r);
			prm(t);
		}
	}
	win = w->win;
	pfunc = pw->pfunc;
	object = pw->object;
	bwrm(bw);
	free(pw->prompt);
	free(pw);
	w->object.base = NULL;
	notify = w->notify;
	w->notify = 0;
	wabort(w);
	dostaupd = 1;
	if (pfunc) {
		return pfunc(win->object, s, object, notify);
	} else {
		return -1;
	}
}

int ucmplt(BW *bw, int k)
{
	PW *pw = (PW *) bw->object;

	if (pw->tab) {
		return pw->tab(bw, k);
	} else {
		return -1;
	}
}

static void inspw(BW *bw, B *b, long l, long n, int flg)
{
	if (b == bw->b) {
		bwins(bw, l, n, flg);
	}
}

static void delpw(BW *bw, B *b, long l, long n, int flg)
{
	if (b == bw->b) {
		bwdel(bw, l, n, flg);
	}
}

static int abortpw(jobject jO)
{
	BW *b = jO.bw;
	PW *pw = b->object;
	void *object = pw->object;
	jpoly_int *abrt = pw->abrt;

	W *win = b->parent->win;

	bwrm(b);
	free(pw->prompt);
	free(pw);
	if (abrt) {
		return abrt(win->object, object);
	} else {
		return -1;
	}
}

WATOM watompw = {
	UC "prompt",
	disppw,
	bwfllw,
	abortpw,
	rtnpw,
	utypebw,
	NULL,
	NULL,
	inspw,
	delpw,
	TYPEPW
};

/* Create a prompt window */

BW *wmkpw(W *w, const unsigned char *prompt, B **history, jpoly_int *func, const unsigned char *huh, jpoly_int *abrt, jpoly_int *tab, void *object, int *notify, struct charmap *map)
{
	W *new;
	PW *pw;
	BW *bw;

	new = wcreate(w->t, &watompw, w, w, w->main, 1, huh, notify);
	if (!new) {
		if (notify) {
			*notify = 1;
		}
		return NULL;
	}
	wfit(new->t);
	new->object.bw = bw = bwmk(new, bmk(NULL), 1);
	bw->b->o.charmap = map;
	bw->object = pw = malloc(sizeof(PW));
	pw->abrt = abrt;
	pw->tab = tab;
	pw->object = object;
	pw->prompt = (unsigned char *)strdup((const char *)prompt);
	pw->promptlen = fmtlen(prompt);
	pw->promptofst = 0;
	pw->pfunc = func;
	if (history) {
		if (!*history) {
			*history = bmk(NULL);
		}
		pw->hist = *history;
		binsb(bw->cursor, bcpy(pw->hist->bof, pw->hist->eof));
		bw->b->changed = 0;
		p_goto_eof(bw->cursor);
		p_goto_eof(bw->top);
		p_goto_bol(bw->top);
	} else {
		pw->hist = NULL;
	}
	w->t->curwin = new;
	return bw;
}

/* Tab completion functions */

unsigned char **regsub(unsigned char **z, int len, unsigned char *s)
{
	unsigned char **lst = NULL;
	int x = -1;

	while (++x < len)
		if (rmatch(s, z[x]))
			lst = vaadd(lst, vsncpy(NULL, 0, sz(z[x])));
	return lst;
}

void cmplt_ins(BW *bw, unsigned char *line)
{
	P *p = pdup(bw->cursor);

	p_goto_bol(p);
	p_goto_eol(bw->cursor);
	bdel(p, bw->cursor);
	binsm(bw->cursor, sv(line));
	p_goto_eol(bw->cursor);
	prm(p);
	bw->cursor->xcol = piscol(bw->cursor);
}

int cmplt_abrt(BW *bw, int x, unsigned char *line)
{
	if (line) {
		cmplt_ins(bw, line);
		vsrm(line);
	}
	return -1;
}

int cmplt_rtn(MENU *m, int x, unsigned char *line)
{
	cmplt_ins(m->parent->win->object.bw, m->list[x]);
	vsrm(line);
	m->object = NULL;
	wabort(m->parent);
	return 0;
}

int simple_cmplt(BW *bw,unsigned char **list)
{
	MENU *m;
	P *p, *q;
	unsigned char *line;
	unsigned char *line1;
	unsigned char **lst;

	p = pdup(bw->cursor);
	p_goto_bol(p);
	q = pdup(bw->cursor);
	p_goto_eol(q);
	line = brvs(p, (int) (q->byte - p->byte));	/* Assumes short lines :-) */
	prm(p);
	prm(q);

	line1 = vsncpy(NULL, 0, sv(line));
	line1 = vsadd(line1, '*');
	lst = regsub(list, aLEN(list), line1);
	vsrm(line1);

	if (!lst) {
		ttputc(7);
		vsrm(line);
		return -1;
	}

	m = mkmenu(bw->parent, lst, cmplt_rtn, cmplt_abrt, NULL, 0, line, NULL);
	if (!m) {
		varm(lst);
		vsrm(line);
		return -1;
	}
	if (aLEN(lst) == 1)
		return cmplt_rtn(m, 0, line);
	else if (smode || isreg(line))
		return 0;
	else {
		unsigned char *com = mcomplete(m);

		vsrm(m->object);
		m->object = com;
		wabort(m->parent);
		smode = 2;
		ttputc(7);
		return 0;
	}
}
@


1.14
log
@don’t box malloc/calloc/realloc/free; don’t cast malloc result; order calloc args
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/pw.c,v 1.13 2017/12/07 02:10:17 tg Exp $");
d203 1
a203 1
	US "prompt",
@


1.13
log
@feeble first attempt at using a union to break up the UB in the polymorphism
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/pw.c,v 1.12 2017/12/07 00:41:11 tg Exp $");
d117 1
a117 1
			joe_free(s2);
d144 2
a145 2
	joe_free(pw->prompt);
	joe_free(pw);
d193 2
a194 2
	joe_free(pw->prompt);
	joe_free(pw);
d234 1
a234 1
	bw->object = (void *) (pw = (PW *) joe_malloc(sizeof(PW)));
@


1.12
log
@ignore duplicates when writing history

the history design here is… “interesting”
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/pw.c,v 1.11 2017/12/06 23:58:37 tg Exp $");
d37 1
a37 1
static void disppw(BW *bw, int flg)
d39 1
d88 1
a88 1
static int rtnpw(BW *bw)
d90 1
d146 1
a146 1
	w->object = NULL;
d183 1
a183 1
static int abortpw(BW *b)
d185 1
d232 1
a232 1
	new->object = (void *) (bw = bwmk(new, bmk(NULL), 1));
d296 1
a296 1
	cmplt_ins(m->parent->win->object, m->list[x]);
@


1.11
log
@make wmkpw const again
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/pw.c,v 1.9 2017/12/02 02:07:29 tg Exp $");
d101 1
a101 1
	s = brvs(bw->cursor, (int) (byte - bw->cursor->byte));
d105 16
a120 4

			binsm(q, s, (int) (byte - bw->cursor->byte));
			p_goto_eof(q);
			binsc(q, '\n');
@


1.10
log
@lots of fixes related to prototyping
@
text
@d203 1
a203 1
BW *wmkpw(W *w, unsigned char *prompt, B **history, jpoly_int *func, const unsigned char *huh, jpoly_int *abrt, jpoly_int *tab, void *object, int *notify, struct charmap *map)
d223 1
a223 1
	pw->prompt = (unsigned char *)strdup((char *)prompt);
@


1.9
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d11 1
a11 1
__RCSID("$MirOS$");
d94 1
a94 1
	int (*pfunc) ();
d173 1
a173 1
	int (*abrt) () = pw->abrt;
d203 1
a203 1
BW *wmkpw(W *w, unsigned char *prompt, B **history, int (*func) (), const unsigned char *huh, int (*abrt) (), int (*tab) (), void *object, int *notify, struct charmap *map)
@


1.8
log
@constify “huh” (… huh‽)
@
text
@a0 1
/* $MirOS: contrib/code/jupp/pw.c,v 1.4 2008/07/28 00:12:06 tg Exp $ */
d11 2
@


1.7
log
@these now all need <stdlib.h>
@
text
@d202 1
a202 1
BW *wmkpw(W *w, unsigned char *prompt, B **history, int (*func) (), unsigned char *huh, int (*abrt) (), int (*tab) (), void *object, int *notify, struct charmap *map)
@


1.6
log
@fixup some tab completion madness
@
text
@d12 1
@


1.5
log
@backport hex editing mode from joe 3.7 for waga as late birthday present
@
text
@d201 1
a201 1
BW *wmkpw(W *w, unsigned char *prompt, B **history, int (*func) (), unsigned char *huh, int (*abrt) (), int (*tab) (), void *object, int *notify,struct charmap *map)
d247 1
a247 1
	int x;
d249 1
a249 1
	for (x = 0; x != len; ++x)
@


1.4
log
@rename symbol to avoid clash:

/usr/bin/ld: warning multiple definitions of symbol _beep
cmd.o definition of _beep in section (__DATA,__data)
/private/var/tglaser/iSDK/lib/libncurses.dylib(single module) definition of _beep

found during native(!) compilation on iPhone 3G (Darwin 9.3.1
iPhoneOS 2.0 iPhone1,2 arm N82AP), with gcc from saurik iphone-gcc
and headers and libraries copied from the 2.0 SDK. (It works fine.)
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/pw.c,v 1.3 2008/05/13 13:08:24 tg Exp $ */
d185 1
a185 1
static WATOM watompw = {
@


1.3
log
@prepare for joe-3.1jupp9:
* sync NEWS
* bump vsn in configure.ac
* tag all files with RCS ID
* sync licence template
@
text
@d1 1
a1 1
/* $MirOS$ */
d33 1
a33 1
extern int beep;
@


1.2
log
@Update the non-generated files to joe-3.1jupp2
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d17 1
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 9
a9 4
/* Prompt windows
   Copyright (C) 1992 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)
d11 1
a11 12
JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
a12 5
#include "config.h"
#include "w.h"
#include "tw.h"
#include "vfile.h"
#include "termcap.h"
d14 2
d17 1
a18 3
#include "bw.h"
#include "zstr.h"
#include "help.h"
d20 3
d24 8
a31 2
#include "uedit.h"
#include "pw.h"
d33 45
a77 40
static void disppw(bw,flg)
BW *bw;
 {
 W *w=bw->parent;
 PW *pw=(PW *)bw->object;
 if(!flg) return;
 /* Scroll buffer and position prompt */
 if(pw->promptlen>w->w/2+w->w/4)
  {
  pw->promptofst=pw->promptlen-w->w/2;
  if(piscol(bw->cursor)<w->w-(pw->promptlen-pw->promptofst))
   bw->offset=0;
  else
   bw->offset=piscol(bw->cursor)-(w->w-(pw->promptlen-pw->promptofst)-1);
  }
 else
  { 
  if(piscol(bw->cursor)<w->w-pw->promptlen) pw->promptofst=0, bw->offset=0;
  else if(piscol(bw->cursor)>=w->w)
   pw->promptofst=pw->promptlen, bw->offset=piscol(bw->cursor)-(w->w-1);
  else
   pw->promptofst=pw->promptlen-(w->w-piscol(bw->cursor)-1),
   bw->offset=piscol(bw->cursor)-(w->w-(pw->promptlen-pw->promptofst)-1);
  }

 /* Set cursor position */
 w->curx=piscol(bw->cursor)-bw->offset+pw->promptlen-pw->promptofst;
 w->cury=0;

 /* Generate prompt */
 w->t->t->updtab[w->y]=1;
 genfmt(w->t->t,w->x,w->y,pw->promptofst,pw->prompt,0);

 /* Position and size buffer */
 bwmove(bw,w->x+pw->promptlen-pw->promptofst,w->y);
 bwresz(bw,w->w-(pw->promptlen-pw->promptofst),1);

 /* Generate buffer */
 bwgen(bw,0);
 }
d81 1
a81 1
extern int dostaupd;
d83 113
a195 106
int rtnpw(bw)
BW *bw;
 {
 W *w=bw->parent;
 PW *pw=(PW *)bw->object;
 char *s;
 W *win;
 int *notify;
 int (*pfunc)();
 void *object;
 long byte;
 peol(bw->cursor);
 byte=bw->cursor->byte;
 pbol(bw->cursor);
 s=brvs(bw->cursor,(int)(byte-bw->cursor->byte));
 if(pw->hist)
  if(bw->b->changed)
   {
   P *q=pdup(pw->hist->eof);
   binsm(q,s,(int)(byte-bw->cursor->byte));
   peof(q);
   binsc(q,'\n');
   prm(q);
   }
  else
   {
   P *q=pdup(pw->hist->bof);
   P *r;
   P *t;
   pline(q,bw->cursor->line);
   r=pdup(q);
   pnextl(r);
   t=pdup(pw->hist->eof);
   binsb(t,bcpy(q,r));
   bdel(q,r);
   prm(q); prm(r); prm(t);
   }
 win=w->win;
 pfunc=pw->pfunc;
 object=pw->object;
 bwrm(bw);
 free(pw->prompt);
 free(pw);
 w->object=0;
 notify=w->notify;
 w->notify=0;
 wabort(w);
 dostaupd=1;
 if(pfunc) return pfunc(win->object,s,object,notify);
 else return -1;
 }

int ucmplt(bw,k)
BW *bw;
 {
 PW *pw=(PW *)bw->object;
 if(pw->tab) return pw->tab(bw,k);
 else return -1;
 }

static void inspw(bw,b,l,n,flg)
BW *bw;
B *b;
long l,n;
int flg;
 {
 if(b==bw->b) bwins(bw,l,n,flg);
 }

static void delpw(bw,b,l,n,flg)
BW *bw;
B *b;
long l,n;
int flg;
 {
 if(b==bw->b) bwdel(bw,l,n,flg);
 }

static int abortpw(b)
BW *b;
 {
 PW *pw=b->object;
 void *object=pw->object;
 int (*abrt)()=pw->abrt;
 W *win=b->parent->win;
 bwrm(b);
 free(pw->prompt);
 free(pw);
 if(abrt) return abrt(win->object,object);
 else return -1;
 }

static WATOM watompw=
 {
 "prompt",
 disppw,
 bwfllw,
 abortpw,
 rtnpw,
 utypebw,
 0,
 0,
 inspw,
 delpw,
 TYPEPW
 };
d199 133
a331 43
BW *wmkpw(obw,prompt,history,func,huh,abrt,tab,object,notify)
BASE *obw;
char *prompt;
B **history;
int (*func)();
char *huh;
int (*abrt)();
int (*tab)();
void *object;
int *notify;
 {
 W *new;
 PW *pw;
 BW *bw;
 W *w=obw->parent;
 new=wcreate(w->t,&watompw,w,w,w->main,1,huh,notify);
 if(!new)
  {
  if(notify) *notify=1;
  return 0;
  }
 wfit(new->t);
 new->object=(void *)(bw=bwmk(new,bmk(NULL),1));
 bw->object=(void *)(pw=(PW *)malloc(sizeof(PW)));
 pw->abrt=abrt;
 pw->tab=tab;
 pw->object=object;
 pw->prompt=zdup(prompt);
 pw->promptlen=fmtlen(prompt);
 pw->promptofst=0;
 pw->pfunc=func;
 if(history)
  {
  if(!*history) *history=bmk(NULL);
  pw->hist= *history;
  binsb(bw->cursor,bcpy(pw->hist->bof,pw->hist->eof));
  bw->b->changed=0;
  peof(bw->cursor); peof(bw->top); pbol(bw->top);
  }
 else pw->hist=0;
 w->t->curwin=new;
 return bw;
 }
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
