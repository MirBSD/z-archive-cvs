head	1.12;
access;
symbols
	joe-3_1jupp38:1.12
	joe-3_1jupp37:1.12
	joe-3_1jupp36:1.12
	joe-3_1jupp35:1.12
	joe-3_1jupp34:1.12
	joe-3_1jupp33:1.12
	joe-3_1jupp32:1.11
	joe-3_1jupp31:1.6
	joe-3_1jupp30:1.6
	joe-3_1jupp29:1.5
	joe-3_1jupp28:1.5
	joe-3_1jupp27:1.5
	joe-3_1jupp26:1.4
	joe-3_1jupp25:1.4
	joe-3_1jupp24:1.4
	joe-3_1jupp23:1.4
	joe-3_1jupp22:1.4
	joe-3_1jupp21:1.4
	joe-3_1jupp20:1.4
	joe-3_1jupp19:1.4
	joe-3_1jupp18:1.4
	joe-3_1jupp17:1.4
	joe-3_1jupp16:1.4
	joe-3_1jupp15:1.4
	joe-3_1jupp14:1.4
	joe-3_1jupp12:1.3
	joe-3_1jupp11:1.3
	joe-3_1jupp10:1.3
	joe-3_1jupp9:1.3
	joe-3_1jupp8:1.3
	joe-3_1jupp7:1.3
	joe-3_1jupp6:1.2
	joe-3_1jupp5:1.2
	joe-3_1jupp4:1.2
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.12
date	2017.12.20.23.33.56;	author tg;	state Exp;
branches;
next	1.11;
commitid	1005A3AF37B3B224675;

1.11
date	2017.12.06.21.16.55;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005A285E5918D423C7;

1.10
date	2017.12.04.21.53.34;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005A25C3E151C5344D;

1.9
date	2017.12.02.17.00.48;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005A22DC570063953B;

1.8
date	2017.12.02.04.32.39;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005A222CF2122034D9;

1.7
date	2017.12.02.02.07.25;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005A220AD65C90E687;

1.6
date	2017.01.10.23.10.47;	author tg;	state Exp;
branches;
next	1.5;
commitid	10058756A113A531105;

1.5
date	2014.06.26.17.51.14;	author tg;	state Exp;
branches;
next	1.4;
commitid	10053AC5DA510B4E4DF;

1.4
date	2010.01.03.18.22.04;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004B40E05D33D0D68A;

1.3
date	2006.11.10.23.23.30;	author tg;	state Exp;
branches;
next	1.2;
commitid	100455509573940FA03;

1.2
date	2005.02.05.02.42.20;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.00.37.17;	author tg;	state Exp;
branches
	1.1.201.1;
next	;

1.1.201.1
date	2005.02.05.00.37.17;	author tg;	state Exp;
branches;
next	;


desc
@@


1.12
log
@fix minor leak
@
text
@/*
 *	Character sets
 *	Copyright
 *		(C) 2004 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */

#ifndef _Icharmap
#define _Icharmap 1

#ifdef EXTERN
__RCSID("$MirOS: contrib/code/jupp/charmap.h,v 1.11 2017/12/06 21:16:55 tg Exp $");
#endif

/* For sorted from_map entries */

struct pair {
	int first;			/* Unicode */
	int last;			/* Byte */
};

/* A character set */

struct charmap {
	struct charmap *next;		/* Linked list of loaded character maps */
	const unsigned char *name;	/* Name of this one */

	int type;			/* 0=byte, 1=UTF-8 */

	/* Character predicate functions */

	int (*is_punct)(struct charmap *map,int c);
	int (*is_print)(struct charmap *map,int c);
	int (*is_space)(struct charmap *map,int c);
	int (*is_alphx)(struct charmap *map,int c);
	int (*is_alnux)(struct charmap *map,int c);

	/* Character conversion functions */

	int (*to_lower)(struct charmap *map,int c);
	int (*to_upper)(struct charmap *map,int c);
	int (*to_uni)(struct charmap *map,int c);
	int (*from_uni)(struct charmap *map,int c);

	/* Information for byte-oriented character sets */

	const int *to_map;		/* Convert byte to unicode */

	unsigned char lower_map[256];	/* Convert to lower case */
	unsigned char upper_map[256];

	struct pair from_map[256 + 2];	/* Convert from unicode to byte */

	int from_size;			/* No. pairs in from_map */

	unsigned char print_map[32];	/* Bit map of printable characters */
	unsigned char alphx_map[32];	/* Bit map of alphabetic characters and _ */
	unsigned char alnux_map[32];	/* Bit map of alphanumeric characters and _ */
};

/* Predicates */

#define joe_ispunct(map,c) ((map)->is_punct((map),(c)))
#define joe_isprint(map,c) ((map)->is_print((map),(c)))
#define joe_isspace(map,c) ((map)->is_space((map),(c)))
#define joe_isalphx(map,c) ((map)->is_alphx((map),(c)))
#define joe_isalnux(map,c) ((map)->is_alnux((map),(c)))
int joe_isblank(struct charmap *map,int c);
int joe_isspace_eof(struct charmap *map,int c);

/* Conversion functions */

#define joe_tolower(map,c) ((map)->to_lower((map),(c)))
#define joe_toupper(map,c) ((map)->to_upper((map),(c)))
#define joe_to_uni(map,c) ((map)->to_uni((map),(c)))
#define joe_from_uni(map,c) ((map)->from_uni((map),(c)))
unsigned char *joe_strtolower(unsigned char *s);

/* Find (load if necessary) a character set */
struct charmap *find_charmap(const unsigned char *name);

/* Get available encodings */
unsigned char **get_encodings(void);

int to_uni(struct charmap *cset, int c);
int from_uni(struct charmap *cset, int c);

#include "utf8.h"

#endif
@


1.11
log
@begin overhaul for antique/header compat:
• PARAMS begone
• libc4 ustat definition: resolve inline
• ignore HAVE_*_H for headers mksh includes unconditionally
@
text
@d13 1
a13 1
__RCSID("$MirOS: contrib/code/jupp/charmap.h,v 1.10 2017/12/04 21:53:34 tg Exp $");
d27 1
a27 1
	unsigned char *name;		/* Name of this one */
@


1.10
log
@rename alpha_ to alphx and alnum_ to alnux

• matches mksh
• stuff with trailing underscore may not be allowed in C99
@
text
@d13 1
a13 1
__RCSID("$MirOS: contrib/code/jupp/charmap.h,v 1.8 2017/12/02 04:32:39 tg Exp $");
d69 2
a70 2
int joe_isblank PARAMS((struct charmap *map,int c));
int joe_isspace_eof PARAMS((struct charmap *map,int c));
d78 1
a78 1
unsigned char *joe_strtolower PARAMS((unsigned char *s));
d81 1
a81 1
struct charmap *find_charmap PARAMS((const unsigned char *name));
d84 1
a84 1
unsigned char **get_encodings PARAMS((void));
d86 2
a87 2
int to_uni PARAMS((struct charmap *cset, int c));
int from_uni PARAMS((struct charmap *cset, int c));
@


1.9
log
@fix string name collision by prefixing the idstrings in not-.c files
@
text
@d13 1
a13 1
__IDSTRING(rcsid_charmap_h, "$MirOS: contrib/code/jupp/charmap.h,v 1.8 2017/12/02 04:32:39 tg Exp $");
d36 2
a37 2
	int (*is_alpha_)(struct charmap *map,int c);
	int (*is_alnum_)(struct charmap *map,int c);
d58 2
a59 2
	unsigned char alpha__map[32];	/* Bit map of alphabetic characters and _ */
	unsigned char alnum__map[32];	/* Bit map of alphanumeric characters and _ */
d67 2
a68 2
#define joe_isalpha_(map,c) ((map)->is_alpha_((map),(c)))
#define joe_isalnum_(map,c) ((map)->is_alnum_((map),(c)))
@


1.8
log
@some fallout of the includes changes, some more reduction
@
text
@d13 1
a13 1
__RCSID("$MirOS: contrib/code/jupp/charmap.h,v 1.7 2017/12/02 02:07:25 tg Exp $");
@


1.7
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d13 1
a13 1
__RCSID("$MirOS$");
a15 2
#include "utf8.h"

d89 2
@


1.6
log
@^T
@
text
@a0 1
/* $MirOS: contrib/code/jupp/charmap.h,v 1.4 2010/01/03 18:22:04 tg Exp $ */
d12 4
a15 1
#include "config.h"
a16 1
#include "types.h"
@


1.5
log
@refactor, sort, etc.
@
text
@d56 1
a56 1
	int from_size;			/* No. paris in from_map */
@


1.4
log
@begin const cleanup
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/jupp/charmap.h,v 1.3 2006/11/10 23:23:30 tg Exp $ */
d79 1
a79 1
unsigned char *lowerize PARAMS((unsigned char *s));
@


1.3
log
@* types.h, rc.c: extend per-file options by new "vispace" (visible spaces)
* rc.c: assign options menu entry for "vispace"
* bw.c: implement "vispace" by displaying a replacement character for any
  space or a tab's first column if enabled
* charmap.h: increment unicode-to-8bit mapping table size
* charmap.c: ensure the two replacement characters we use in bw.c for the
  visibled spaces and tabs are always mapped to something
* rc.c: make "noxon" an options menu entry and move it and "keepup" to top
* rc.c: fix out-of-bounds in options menu routines
@
text
@d1 1
a1 1
/* $MirOS$ */
d49 1
a49 1
	int *to_map;			/* Convert byte to unicode */
d82 1
a82 1
struct charmap *find_charmap PARAMS((unsigned char *name));
@


1.2
log
@Update the non-generated files to joe-3.1jupp2
@
text
@d1 1
d54 1
a54 1
	struct pair from_map[256];	/* Convert from unicode to byte */
@


1.1
log
@Initial revision
@
text
@d86 3
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
