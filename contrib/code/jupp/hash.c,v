head	1.7;
access;
symbols
	joe-3_1jupp38:1.7
	joe-3_1jupp37:1.7
	joe-3_1jupp36:1.7
	joe-3_1jupp35:1.7
	joe-3_1jupp34:1.7
	joe-3_1jupp33:1.7
	joe-3_1jupp32:1.6
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.3
	joe-3_1jupp30:1.3
	joe-3_1jupp29:1.2
	joe-3_1jupp28:1.2
	joe-3_1jupp27:1.2
	joe-3_1jupp26:1.2
	joe-3_1jupp25:1.2
	joe-3_1jupp24:1.2
	joe-3_1jupp23:1.2
	joe-3_1jupp22:1.2
	joe-3_1jupp21:1.2
	joe-3_1jupp20:1.2
	joe-3_1jupp19:1.2
	joe-3_1jupp18:1.2
	joe-3_1jupp17:1.2
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.2
	joe-3_1jupp15:1.2
	joe-3_1jupp14:1.2
	joe-3_1jupp12:1.2
	joe-3_1jupp11:1.2
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.2
	joe-3_1jupp9:1.2
	joe-3_1jupp8:1.1.201.1
	joe-3_1jupp7:1.1.201.1
	joe-3_1jupp6:1.1.201.1
	joe-3_1jupp5:1.1.201.1
	joe-3_1jupp4:1.1.201.1
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.7
date	2018.01.07.23.51.34;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005A52B281212EC267;

1.6
date	2017.12.08.02.00.39;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005A29F2506E789D2B;

1.5
date	2017.12.06.21.41.02;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005A28640547F64250;

1.4
date	2017.12.02.02.07.26;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005A220AD65C90E687;

1.3
date	2017.01.10.19.16.27;	author tg;	state Exp;
branches;
next	1.2;
commitid	1005875332028CA2A36;

1.2
date	2008.05.13.13.08.22;	author tg;	state Exp;
branches;
next	1.1;
commitid	100482992BC01EE89A1;

1.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.21;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@new ralloc(x,y) = malloc(x*y) with checks, but not, unlike calloc,
with implizit size_t casting nor memory cleansing
@
text
@/*
 *	Simple hash table
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "config.h"
#include "types.h"

__RCSID("$MirOS: contrib/code/jupp/hash.c,v 1.6 2017/12/08 02:00:39 tg Exp $");

#include <stdlib.h>
#include <string.h>

#include "hash.h"
#include "utils.h"

#define hnext(accu, c) (((accu) << 4) + ((accu) >> 28) + (c))

static HENTRY *freentry = NULL;

unsigned long hash(const unsigned char *s)
{
	unsigned long accu = 0;

	while (*s) {
		accu = hnext(accu, *s++);
	}
	return accu;
}

HASH *htmk(int len)
{
	HASH *t = malloc(sizeof(HASH));

	t->len = len - 1;
	t->tab = calloc(len, sizeof(HENTRY *));
	return t;
}

void htrm(HASH *ht)
{
	free(ht->tab);
	free(ht);
}

void *htadd(HASH *ht, const unsigned char *name, void *val)
{
	int idx = hash(name) & ht->len;
	HENTRY *entry;
	int x;

	if (!freentry) {
		entry = ralloc(64, sizeof(HENTRY));
		for (x = 0; x != 64; ++x) {
			entry[x].next = freentry;
			freentry = entry + x;
		}
	}
	entry = freentry;
	freentry = entry->next;
	entry->next = ht->tab[idx];
	ht->tab[idx] = entry;
	entry->name = name;
	return entry->val = val;
}

void *htfind(HASH *ht, const unsigned char *name)
{
	HENTRY *e;

	for (e = ht->tab[hash(name) & ht->len]; e; e = e->next) {
		if (!strcmp(e->name, name)) {
			return e->val;
		}
	}
	return NULL;
}
@


1.6
log
@don’t box malloc/calloc/realloc/free; don’t cast malloc result; order calloc args
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/hash.c,v 1.5 2017/12/06 21:41:02 tg Exp $");
d55 1
a55 1
		entry = calloc(64, sizeof(HENTRY));
@


1.5
log
@const cleanup
@
text
@d11 1
a11 1
__RCSID("$MirOS: contrib/code/jupp/hash.c,v 1.4 2017/12/02 02:07:26 tg Exp $");
d35 1
a35 1
	HASH *t = (HASH *) joe_malloc(sizeof(HASH));
d38 1
a38 1
	t->tab = (HENTRY **) joe_calloc(sizeof(HENTRY *), len);
d44 2
a45 2
	joe_free(ht->tab);
	joe_free(ht);
d55 1
a55 1
		entry = (HENTRY *) joe_malloc(sizeof(HENTRY) *64);
@


1.4
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d11 1
a11 1
__RCSID("$MirOS$");
d23 1
a23 1
unsigned long hash(unsigned char *s)
d48 1
a48 1
void *htadd(HASH *ht, unsigned char *name, void *val)
d69 1
a69 1
void *htfind(HASH *ht, unsigned char *name)
@


1.3
log
@these now all need <stdlib.h>
@
text
@a0 1
/* $MirOS: contrib/code/jupp/hash.c,v 1.2 2008/05/13 13:08:22 tg Exp $ */
d11 2
@


1.2
log
@prepare for joe-3.1jupp9:
* sync NEWS
* bump vsn in configure.ac
* tag all files with RCS ID
* sync licence template
@
text
@d1 1
a1 1
/* $MirOS$ */
d12 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 11
a11 1
/* Simple hash table */
a12 1
#include "zstr.h"
d14 3
d18 1
a18 1
static HENTRY *freentry=0;
d20 57
a76 53
unsigned long hash(s)
char *s;
 {
 unsigned long accu=0;
 while(*s) accu=hnext(accu,*s++);
 return accu;
 }

HASH *htmk(len)
 {
 HASH *t=(HASH *)malloc(sizeof(HASH));
 t->len=len-1;
 t->tab=(HENTRY **)calloc(sizeof(HENTRY *),len);
 return t;
 }

void htrm(ht)
HASH *ht;
 {
 free(ht->tab);
 free(ht);
 }

void *htadd(ht,name,val)
HASH *ht;
char *name;
void *val;
 {
 int idx=hash(name)&ht->len;
 HENTRY *entry;
 if(!freentry)
  {
  int x;
  entry=(HENTRY *)malloc(sizeof(HENTRY)*64);
  for(x=0;x!=64;++x) entry[x].next=freentry, freentry=entry+x;
  }
 entry=freentry;
 freentry=entry->next;
 entry->next=ht->tab[idx];
 ht->tab[idx]=entry;
 entry->name=name;
 return entry->val=val;
 }

void *htfind(ht,name)
HASH *ht;
char *name;
 {
 HENTRY *e;
 for(e=ht->tab[hash(name)&ht->len];e;e=e->next)
  if(!zcmp(e->name,name)) return e->val;
 return 0;
 }
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
