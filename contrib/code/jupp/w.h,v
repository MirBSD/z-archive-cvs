head	1.9;
access;
symbols
	joe-3_1jupp38:1.9
	joe-3_1jupp37:1.9
	joe-3_1jupp36:1.9
	joe-3_1jupp35:1.9
	joe-3_1jupp34:1.9
	joe-3_1jupp33:1.9
	joe-3_1jupp32:1.9
	joe-2_8jupp3:1.1.21.1
	joe-3_1jupp31:1.4
	joe-3_1jupp30:1.4
	joe-3_1jupp29:1.3
	joe-3_1jupp28:1.3
	joe-3_1jupp27:1.3
	joe-3_1jupp26:1.3
	joe-3_1jupp25:1.3
	joe-3_1jupp24:1.3
	joe-3_1jupp23:1.3
	joe-3_1jupp22:1.2
	joe-3_1jupp21:1.2
	joe-3_1jupp20:1.2
	joe-3_1jupp19:1.2
	joe-3_1jupp18:1.2
	joe-3_1jupp17:1.2
	joe-2_8jupp2:1.1.21.1
	joe-3_1jupp16:1.2
	joe-3_1jupp15:1.2
	joe-3_1jupp14:1.2
	joe-3_1jupp12:1.2
	joe-3_1jupp11:1.2
	joe-2_8jupp1:1.1.21.1
	joe-3_1jupp10:1.2
	joe-3_1jupp9:1.2
	joe-3_1jupp8:1.1.201.1
	joe-3_1jupp7:1.1.201.1
	joe-3_1jupp6:1.1.201.1
	joe-3_1jupp5:1.1.201.1
	joe-3_1jupp4:1.1.201.1
	joe-2_8-msdos:1.1.21.1.0.2
	joe-2_8:1.1.21.1
	joe28:1.1.21
	joe-3_1:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.9
date	2017.12.07.02.10.20;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005A28A3145E1FF911;

1.8
date	2017.12.06.23.02.08;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005A2876FC4FFE7EF5;

1.7
date	2017.12.06.21.17.05;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005A285E5918D423C7;

1.6
date	2017.12.02.17.00.53;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005A22DC570063953B;

1.5
date	2017.12.02.02.07.38;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005A220AD65C90E687;

1.4
date	2017.01.11.22.56.50;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005876B84150F7CE16;

1.3
date	2012.12.30.17.10.59;	author tg;	state Exp;
branches;
next	1.2;
commitid	10050E075B939751F66;

1.2
date	2008.05.13.13.08.33;	author tg;	state Exp;
branches;
next	1.1;
commitid	100482992BC01EE89A1;

1.1
date	2005.02.05.00.37.17;	author tg;	state Exp;
branches
	1.1.21.1
	1.1.201.1;
next	;

1.1.21.1
date	2005.02.12.15.40.26;	author tg;	state Exp;
branches;
next	;

1.1.201.1
date	2005.02.05.00.37.17;	author tg;	state Exp;
branches;
next	;


desc
@@


1.9
log
@feeble first attempt at using a union to break up the UB in the polymorphism
@
text
@/*
 *	Window management
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#ifndef _JOE_W_H
#define _JOE_W_H 1

#ifdef EXTERN
__IDSTRING(rcsid_w_h, "$MirOS: contrib/code/jupp/w.h,v 1.8 2017/12/06 23:02:08 tg Exp $");
#endif

/***************/
/* Subroutines */
/***************/

/* int getgrouph(W *);
 * Get height of a family of windows
 */
int getgrouph(W *w);

/* W *findtopw(W *);
 * Find first (top-most) window of a family
 */
W *findtopw(W *w);

/* W *findbotw(W *);
 * Find last (bottom-most) window a family
 */
W *findbotw(W *w);

int demotegroup(W *w);

/* W *lastw(SCREEN *t);
 * Find last window on screen
 */
W *lastw(SCREEN *t);

/* Determine number of main windows
 */
int countmain(SCREEN *t);

/* void wfit(SCREEN *t);
 *
 * Fit all of the windows onto the screen
 */
void wfit(SCREEN *t);

/*****************/
/* Main routines */
/*****************/

/* SCREEN *screate(SCRN *);
 *
 * Create a screen
 */
SCREEN *screate(SCRN *scrn);

/* void sresize(SCREEN *t);
 * Screen size changed
 */
void sresize(SCREEN *t);

/* W *wcreate(SCREEN *t,WATOM *watom,W *where,W *target,W *original,int height);
 *
 * Try to create a window
 *
 * 't'		Is the screen the window is placed on
 * 'watom'	Type of new window
 * 'where'	The window is placed after this window, or if 'where'==0, the
 *		window is placed on the end of the screen
 * 'target'	The window operates on this window.  The window becomes a
 *		member of 'target's family or starts a new family if
 *		'target'==0.
 * 'original'	Attempt to get 'height' from this window.  When the window is
 *              aborted, the space gets returned to 'original' if it still
 *		exists.  If 'original'==0, the window will force other
 *		windows to go off of the screen.
 * 'height'	The height of the window
 *
 * Returns the new window or returns 0 if there was not enough space to
 * create the window and maintain family integrity.
 */
W *wcreate(SCREEN *t, WATOM *watom, W *where, W *target, W *original, int height, const unsigned char *huh, int *notify);

/* int wabort(W *w);
 *
 * Kill a window and it's children
 */
int wabort(W *w);

/* int wnext(SCREEN *);
 *
 * Switch to next window
 */
int wnext(SCREEN *t);

/* int wprev(SCREEN *);
 *
 * Switch to previous window
 */
int wprev(SCREEN *t);

/* int wgrow(W *);
 *
 * increase size of window.  Return 0 for success, -1 for fail.
 */
int wgrow(W *w);

/* int wshrink(W *);
 *
 * Decrease size of window.  Returns 0 for success, -1 for fail.
 */
int wshrink(W *w);

/* void wshowone(W *);
 *
 * Show only one window on the screen
 */
void wshowone(W *w);

/* void wshowall(SCREEN *);
 *
 * Show all windows on the screen, including the given one
 */
void wshowall(SCREEN *t);

/* void wredraw(W *);
 *
 * Force complete redraw of window
 */
void wredraw(W *w);

/* void updall()
 *
 * Redraw all windows
 */
void updall(void);

/* void msgnw[t](W *w, char *s);
 * Display a message which will be eliminated on the next keypress.
 * msgnw displays message on bottom line of window
 * msgnwt displays message on top line of window
 */
void msgnw(W *w, const unsigned char *s);
void msgnwt(W *w, const unsigned char *s);

/* Message composition buffer for msgnw/msgnwt */
#define JOE_MSGBUFSIZE 300
extern unsigned char msgbuf[JOE_MSGBUFSIZE];

void msgout(W *w);			/* Output msgnw/msgnwt messages */

/* Common user functions */

int urtn(jobject jO, int k);		/* User hit return */
int utype(jobject jO, int k);		/* User types a character */
int uretyp(BASE *bw);			/* Refresh the screen */
int ugroww(BASE *bw);			/* Grow current window */
int uexpld(BASE *bw);			/* Explode current window or show all windows */
int ushrnk(BASE *bw);			/* Shrink current window */
int unextw(BASE *bw);			/* Goto next window */
int uprevw(BASE *bw);			/* Goto previous window */

void scrdel(B *b, long int l, long int n, int flg);
void scrins(B *b, long int l, long int n, int flg);

#endif
@


1.8
log
@lots of fixes related to prototyping
@
text
@d12 1
a12 1
__IDSTRING(rcsid_w_h, "$MirOS: contrib/code/jupp/w.h,v 1.7 2017/12/06 21:17:05 tg Exp $");
d158 2
a159 2
int urtn(BASE *b, int k);		/* User hit return */
int utype(BASE *b, int k);		/* User types a character */
@


1.7
log
@begin overhaul for antique/header compat:
• PARAMS begone
• libc4 ustat definition: resolve inline
• ignore HAVE_*_H for headers mksh includes unconditionally
@
text
@d12 1
a12 1
__IDSTRING(rcsid_w_h, "$MirOS: contrib/code/jupp/w.h,v 1.6 2017/12/02 17:00:53 tg Exp $");
a65 5
/* void chsize(SCREEN *t,int mul,int div)
 * Resize windows: each window is multiplied by the fraction mul/div
 */
void chsize();

@


1.6
log
@fix string name collision by prefixing the idstrings in not-.c files
@
text
@d12 1
a12 1
__IDSTRING(rcsid_w_h, "$MirOS: contrib/code/jupp/w.h,v 1.5 2017/12/02 02:07:38 tg Exp $");
d22 1
a22 1
int getgrouph PARAMS((W *w));
d27 1
a27 1
W *findtopw PARAMS((W *w));
d32 1
a32 1
W *findbotw PARAMS((W *w));
d34 1
a34 1
int demotegroup PARAMS((W *w));
d39 1
a39 1
W *lastw PARAMS((SCREEN *t));
d43 1
a43 1
int countmain PARAMS((SCREEN *t));
d49 1
a49 1
void wfit PARAMS((SCREEN *t));
d59 1
a59 1
SCREEN *screate PARAMS((SCRN *scrn));
d64 1
a64 1
void sresize PARAMS((SCREEN *t));
d69 1
a69 1
void chsize PARAMS(());
d91 1
a91 1
W *wcreate PARAMS((SCREEN *t, WATOM *watom, W *where, W *target, W *original, int height, const unsigned char *huh, int *notify));
d97 1
a97 1
int wabort PARAMS((W *w));
d103 1
a103 1
int wnext PARAMS((SCREEN *t));
d109 1
a109 1
int wprev PARAMS((SCREEN *t));
d115 1
a115 1
int wgrow PARAMS((W *w));
d121 1
a121 1
int wshrink PARAMS((W *w));
d127 1
a127 1
void wshowone PARAMS((W *w));
d133 1
a133 1
void wshowall PARAMS((SCREEN *t));
d139 1
a139 1
void wredraw PARAMS((W *w));
d145 1
a145 1
void updall PARAMS((void));
d152 2
a153 2
void msgnw PARAMS((W *w, const unsigned char *s));
void msgnwt PARAMS((W *w, const unsigned char *s));
d155 1
d157 1
a157 1
extern unsigned char msgbuf[JOE_MSGBUFSIZE];	/* Message composition buffer for msgnw/msgnwt */
d159 1
a159 1
void msgout PARAMS((W *w));			/* Output msgnw/msgnwt messages */
d163 8
a170 8
int urtn PARAMS((BASE *b, int k));		/* User hit return */
int utype PARAMS((BASE *b, int k));		/* User types a character */
int uretyp PARAMS((BASE *bw));			/* Refresh the screen */
int ugroww PARAMS((BASE *bw));			/* Grow current window */
int uexpld PARAMS((BASE *bw));			/* Explode current window or show all windows */
int ushrnk PARAMS((BASE *bw));			/* Shrink current window */
int unextw PARAMS((BASE *bw));			/* Goto next window */
int uprevw PARAMS((BASE *bw));			/* Goto previous window */
d172 2
a173 2
void scrdel PARAMS((B *b, long int l, long int n, int flg));
void scrins PARAMS((B *b, long int l, long int n, int flg));
@


1.5
log
@overhaul the way includes work; give jupp proper RCS IDs

(after all, empty source files are UB; win32.c is likely)
@
text
@d12 1
a12 1
__RCSID("$MirOS$");
@


1.4
log
@constify “huh” (… huh‽)
@
text
@a0 1
/* $MirOS: contrib/code/jupp/w.h,v 1.2 2008/05/13 13:08:33 tg Exp $ */
d11 3
a13 2
#include "config.h"
#include "types.h"
@


1.3
log
@more const cleanliness (and merr is used in a signal handler so it should be volatile), and use NULL not 0 for pointers
@
text
@d91 1
a91 1
W *wcreate PARAMS((SCREEN *t, WATOM *watom, W *where, W *target, W *original, int height, unsigned char *huh, int *notify));
@


1.2
log
@prepare for joe-3.1jupp9:
* sync NEWS
* bump vsn in configure.ac
* tag all files with RCS ID
* sync licence template
@
text
@d1 1
a1 1
/* $MirOS$ */
d152 2
a153 2
void msgnw PARAMS((W *w, unsigned char *s));
void msgnwt PARAMS((W *w, unsigned char *s));
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.21.1
log
@Import joe-2.8 sources into vendor branch so it doesn't get lost
@
text
@d1 9
a9 20
/* Window management
   Copyright (C) 1992 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 

#ifndef _Iw
#define _Iw 1
d12 1
a12 87
#include "queue.h"
#include "scrn.h"
#include "kbd.h"

typedef struct watom WATOM;
typedef struct screen SCREEN;
typedef struct window W;
typedef struct base BASE;

struct watom
 {
 char *context;		/* Context name */
 void (*disp)();	/* Display window */
 void (*follow)();	/* Called to have window follow cursor */
 int (*abort)();	/* Common user functions */
 int (*rtn)();
 int (*type)();
 void (*resize)();	/* Called when window changed size */
 void (*move)();	/* Called when window moved */
 void (*ins)();		/* Called on line insertions */ 
 void (*del)();		/* Called on line deletions */
 int what;		/* Type of this thing */
 };

struct screen
 {
 SCRN *t;			/* Screen data on this screen is output to */

 int wind;			/* Number of help lines on this screen */
 
 W *topwin;			/* Top-most window showing on screen */
 W *curwin;			/* Window cursor is in */

 int w,h;			/* Width and height of this screen */
 };

struct window
 {
 LINK(W) link;			/* Linked list of windows in order they
 				   appear on the screen */

 SCREEN *t;			/* Screen this thing is on */

 int x,y,w,h;			/* Position and size of window */
                                /* Currently, x=0, w=width of screen. */
                                /* y== -1 if window is not on screen */

 int ny,nh;			/* Temporary values for wfit */

 int reqh;			/* Requested new height or 0 for same */
 				/* This is an argument for wfit */

 int fixed;			/* If this is zero, use 'hh'.  If not, this
 				   is a fixed size window and this variable
 				   gives its height */

 int hh;			/* Height window would be on a screen with
 				   1000 lines.  When the screen size changes
 				   this is used to calculate the window's
 				   real height */

 W *win;			/* Window this one operates on */
 W *main;			/* Main window of this family */
 W *orgwin;			/* Window where space from this window came */
 int curx, cury;		/* Cursor position within window */
 KBD *kbd;			/* Keyboard handler for this window */
 WATOM *watom;			/* The type of this window */
 void *object;			/* Object which inherits this */

 char *msgt;			/* Message at top of window */

 char *msgb;			/* Message at bottom of window */

 char *huh;			/* Name of window for context sensitive hlp */

 int *notify;			/* Address of kill notification flag */
 };

/* Anything which goes in window.object must start like this: */

struct base
 {
 W *parent;
 };

/* Minimum text window height */
#define FITHEIGHT 4
d21 1
a21 1
int getgrouph();
d26 1
a26 1
W *findtopw();
d31 1
a31 1
W *findbotw();
d33 1
a33 1
int demotegroup();
d38 1
a38 1
W *lastw();
d42 1
a42 1
int countmain();
d48 1
a48 1
void wfit();
d58 1
a58 1
SCREEN *screate();
d63 1
a63 1
void sresize();
d68 1
a68 1
void chsize();
d90 1
a90 1
W *wcreate();
d96 1
a96 1
int wabort();
d102 1
a102 1
int wnext();
d108 1
a108 1
int wprev();
d114 1
a114 1
int wgrow();
d120 1
a120 1
int wshrink();
d126 1
a126 1
void wshowone();
d132 1
a132 1
void wshowall();
d138 1
a138 1
void wredraw();
d144 1
a144 6
void updall();

void genfmt();
void gentxt();
int fmtlen();
int fmtpos();
d146 1
a146 1
/* void msgnw[t](W *w,char *text);
d151 2
a152 2
void msgnw();
void msgnwt();
d154 2
a155 1
extern char msgbuf[80];	/* Message composition buffer for msgnw/msgnwt */
d157 1
a157 1
void msgout();		/* Output msgnw/msgnwt messages */
d161 8
a168 8
int urtn();	/* User hit return */
int utype();	/* User types a character */
int uretyp();	/* Refresh the screen */
int ugroww();	/* Grow current window */
int uexpld();	/* Explode current window or show all windows */
int ushrnk();	/* Shrink current window */
int unextw();	/* Goto next window */
int uprevw();	/* Goto previous window */
d170 2
a171 2
void scrdel();
void scrins();
@


1.1.201.1
log
@JOE's Own Editor 3.1
@
text
@@
