head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2006.06.02.13.09.19;	author tg;	state dead;
branches;
next	1.17;
commitid	100448038885A0F4B6D;

1.17
date	2006.06.01.23.00.40;	author tg;	state Exp;
branches;
next	1.16;
commitid	100447F717560592A14;

1.16
date	2006.06.01.21.28.41;	author tg;	state Exp;
branches;
next	1.15;
commitid	100447F5C1566AF5554;

1.15
date	2006.05.31.00.56.12;	author tg;	state Exp;
branches;
next	1.14;
commitid	100447CE9BA4D341606;

1.14
date	2006.05.30.23.25.39;	author tg;	state Exp;
branches;
next	1.13;
commitid	100447CD4804AD3B116;

1.13
date	2006.05.30.21.29.48;	author tg;	state Exp;
branches;
next	1.12;
commitid	100447CB94F0EF65C4A;

1.12
date	2006.05.30.20.57.53;	author tg;	state Exp;
branches;
next	1.11;
commitid	100447CB1D93AB4686A;

1.11
date	2006.05.30.20.46.32;	author tg;	state Exp;
branches;
next	1.10;
commitid	100447CAF3E70812CE9;

1.10
date	2006.05.30.20.34.39;	author tg;	state Exp;
branches;
next	1.9;
commitid	100447CAC752EFC5B22;

1.9
date	2006.05.30.19.49.45;	author tg;	state Exp;
branches;
next	1.8;
commitid	100447CA1EF59CD223F;

1.8
date	2006.05.30.13.28.48;	author tg;	state Exp;
branches;
next	1.7;
commitid	100447C48A27321B52B;

1.7
date	2006.05.30.13.03.49;	author tg;	state Exp;
branches;
next	1.6;
commitid	100447C42C43F1C198A;

1.6
date	2006.05.30.12.58.52;	author tg;	state Exp;
branches;
next	1.5;
commitid	100447C419C61085736;

1.5
date	2006.05.30.12.28.50;	author tg;	state Exp;
branches;
next	1.4;
commitid	100447C3A630E082D02;

1.4
date	2006.05.30.12.11.49;	author tg;	state Exp;
branches;
next	1.3;
commitid	100447C368F6DBCFCCA;

1.3
date	2006.05.30.11.34.21;	author tg;	state Exp;
branches;
next	1.2;
commitid	100447C2DAD1E865544;

1.2
date	2006.05.23.10.39.45;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004472E67F1A82A2BA;

1.1
date	2006.05.23.10.35.28;	author tg;	state Exp;
branches;
next	;
commitid	1004472E5804AB2C16F;


desc
@@


1.18
log
@get rid of the remaining LGPL stuff
now all that's left are manpages
@
text
@/* $MirOS: contrib/code/libhaible/wchar.h,v 1.17 2006/06/01 23:00:40 tg Exp $ */

#ifndef	_WCHAR_H_
#define	_WCHAR_H_

#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdio.h>
#include <time.h>

#if !defined(_GCC_WCHAR_T) && !defined(__cplusplus)
#define	_GCC_WCHAR_T
typedef	__WCHAR_TYPE__	wchar_t;
#endif

#if !defined(_GCC_WINT_T)
#define	_GCC_WINT_T
typedef	__WINT_TYPE__	wint_t;
#endif

#if __WCHAR_MAX__ != 65535U
#error GCC __WCHAR_MAX__ does not indicate UCS-2
#endif

typedef unsigned long int wctype_t;
typedef struct {
	unsigned int count:2;
	unsigned int value:12;	/* 10 for mbstowcs, 12 for wcstombs */
} __attribute__((packed)) mbstate_t;

#undef	WCHAR_MIN
#undef	WCHAR_MAX
#undef	WEOF
#define	WCHAR_MIN		0
#define	WCHAR_MAX		0xFFFDU
#define	WEOF			0xFFFFU

__BEGIN_DECLS
wint_t	btowc(int);
wint_t	fgetwc(FILE *);
wchar_t	*fgetws(wchar_t *__restrict__, int, FILE *__restrict__);
wint_t	fputwc(wchar_t, FILE *);
int	fputws(const wchar_t *__restrict__, FILE *__restrict__);
int	fwide(FILE *, int);
wint_t	getwc(FILE *);
wint_t	getwchar(void);
size_t	mbrlen(const char *__restrict__, size_t, mbstate_t *__restrict__);
size_t	mbrtowc(wchar_t *__restrict__, const char *__restrict__, size_t,
	    mbstate_t *__restrict__);
int	mbsinit(const mbstate_t *);
size_t	mbsrtowcs(wchar_t *__restrict__, const char **__restrict__, size_t,
	    mbstate_t *__restrict__);
wint_t	putwc(wchar_t, FILE *);
wint_t	putwchar(wchar_t);
wint_t	ungetwc(wint_t, FILE *);
size_t	wcrtomb(char *__restrict__, wchar_t, mbstate_t *__restrict__);
int	wcscasecmp(const wchar_t *, const wchar_t *);
wchar_t	*wcscat(wchar_t *__restrict__, const wchar_t *__restrict__);
wchar_t	*wcschr(const wchar_t *, wchar_t);
int	wcscmp(const wchar_t *, const wchar_t *);
int	wcscoll(const wchar_t *, const wchar_t *);
wchar_t	*wcscpy(wchar_t *__restrict__, const wchar_t *__restrict__);
size_t	wcscspn(const wchar_t *, const wchar_t *);
wchar_t *wcsdup(const wchar_t *);
size_t	wcslcat(wchar_t *, const wchar_t *, size_t);
size_t	wcslcpy(wchar_t *, const wchar_t *, size_t);
size_t	wcslen(const wchar_t *);
int	wcsncasecmp(const wchar_t *, const wchar_t *, size_t);
wchar_t	*wcsncat(wchar_t *__restrict__, const wchar_t *__restrict__, size_t);
int	wcsncmp(const wchar_t *, const wchar_t *, size_t);
wchar_t	*wcsncpy(wchar_t *__restrict__, const wchar_t *__restrict__, size_t);
wchar_t	*wcspbrk(const wchar_t *, const wchar_t *);
wchar_t	*wcsrchr(const wchar_t *, wchar_t);
size_t	wcsrtombs(char *__restrict__, const wchar_t **__restrict__, size_t,
	    mbstate_t *__restrict__);
size_t	wcsspn(const wchar_t *, const wchar_t *);
wchar_t	*wcsstr(const wchar_t *__restrict__, const wchar_t *__restrict__);
double	wcstod(const wchar_t *__restrict__, wchar_t **__restrict__);
float	wcstof(const wchar_t *__restrict__, wchar_t **__restrict__);
wchar_t	*wcstok(wchar_t *__restrict__, const wchar_t *__restrict__,
	    wchar_t **__restrict__);
long	wcstol(const wchar_t *__restrict__, wchar_t **__restrict__, int);
long double wcstold(const wchar_t *__restrict__, wchar_t **__restrict__);
#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)) || \
    defined(_ISOC99_SOURCE) || (__STDC_VERSION__ - 0) > 199901L
/* LONGLONG */
long long wcstoll(const wchar_t *__restrict__, wchar_t **__restrict__, int);
#endif
unsigned long wcstoul(const wchar_t *__restrict__, wchar_t **__restrict__,
	    int);
#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)) || \
    defined(_ISOC99_SOURCE) || (__STDC_VERSION__ - 0) > 199901L
/* LONGLONG */
unsigned long long wcstoull(const wchar_t *__restrict__,
	    wchar_t **__restrict__, int);
#endif
wchar_t	*wcswcs(const wchar_t *, const wchar_t *);
int	wcswidth(const wchar_t *, size_t);
size_t	wcsxfrm(wchar_t *__restrict__, const wchar_t *__restrict__, size_t);
int	wctob(wint_t);
wctype_t wctype(const char *);
int	wcwidth(wchar_t);
wchar_t	*wmemchr(const wchar_t *, wchar_t, size_t);
int	wmemcmp(const wchar_t *, const wchar_t *, size_t);
wchar_t	*wmemcpy(wchar_t *__restrict__, const wchar_t *__restrict__, size_t);
wchar_t	*wmemmove(wchar_t *, const wchar_t *, size_t);
wchar_t	*wmemset(wchar_t *, wchar_t, size_t);

/* these functions are currently not implemented in libc */
#if 0
int	fwprintf(FILE * __restrict__, const wchar_t * __restrict__, ...);
int	fwscanf(FILE *__restrict__, const wchar_t *__restrict__, ...);
int	swprintf(wchar_t * __restrict__, size_t, const wchar_t * __restrict__,
	    ...);
int	swscanf(const wchar_t *__restrict__, const wchar_t *__restrict__, ...);
int	vfwprintf(FILE * __restrict__, const wchar_t * __restrict__,
	    _BSD_VA_LIST_);
int	vfwscanf(FILE *__restrict__, const wchar_t *__restrict__, _BSD_VA_LIST_);
int	vswprintf(wchar_t * __restrict__, const wchar_t * __restrict__,
	    _BSD_VA_LIST_);
int	vswscanf(const wchar_t *__restrict__, const wchar_t *__restrict__,
	    _BSD_VA_LIST_);
int	vwprintf(const wchar_t * __restrict__, _BSD_VA_LIST_);
int	vwscanf(const wchar_t *__restrict__, _BSD_VA_LIST_);
int	wprintf(const wchar_t * __restrict__, ...);
int	wscanf(const wchar_t *__restrict__, ...);
#endif
__END_DECLS

#define getwc(f) fgetwc(f)
#define getwchar() getwc(stdin)
#define putwc(wc, f) fputwc((wc), (f))
#define putwchar(wc) putwc((wc), stdout)

#endif
@


1.17
log
@bump libc version; fix includes; bump os patchlevel
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.16 2006/06/01 21:28:41 tg Exp $ */
@


1.16
log
@header files are interface definitions
and as such not copyrightable
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.15 2006/05/31 00:56:12 tg Exp $ */
d112 1
a112 1
/* these functions are currently not implemented */
@


1.15
log
@* group unimplemented functions
* get rid of wcsftime for now (and forever?)
@
text
@d1 1
a1 26
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.14 2006/05/30 23:25:39 tg Exp $ */

/*-
 * Copyright (c) 2005, 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a nontrivial bug.
 */
@


1.14
log
@we're lucky LC_COLLATE(UTF-8)=C
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.13 2006/05/30 21:29:48 tg Exp $ */
a72 4
#ifdef notyet
int	fwprintf(FILE * __restrict__, const wchar_t * __restrict__, ...);
int	fwscanf(FILE *__restrict__, const wchar_t *__restrict__, ...);
#endif
a82 5
#ifdef notyet
int	swprintf(wchar_t * __restrict__, size_t, const wchar_t * __restrict__,
	    ...);
int	swscanf(const wchar_t *__restrict__, const wchar_t *__restrict__, ...);
#endif
a83 11
#ifdef notyet
int	vfwprintf(FILE * __restrict__, const wchar_t * __restrict__,
	    _BSD_VA_LIST_);
int	vfwscanf(FILE *__restrict__, const wchar_t *__restrict__, _BSD_VA_LIST_);
int	vswprintf(wchar_t * __restrict__, const wchar_t * __restrict__,
	    _BSD_VA_LIST_);
int	vswscanf(const wchar_t *__restrict__, const wchar_t *__restrict__,
	    _BSD_VA_LIST_);
int	vwprintf(const wchar_t * __restrict__, _BSD_VA_LIST_);
int	vwscanf(const wchar_t *__restrict__, _BSD_VA_LIST_);
#endif
a92 4
#ifdef notyet
size_t	wcsftime(wchar_t *__restrict__, size_t, const wchar_t *__restrict__,
	    const struct tm *__restrict__);
#endif
d136 17
a152 1
#ifdef notyet
@


1.13
log
@initial version, based upon libutf8
much to change
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.12 2006/05/30 20:57:53 tg Exp $ */
a108 1
#ifdef notyet
a109 1
#endif
@


1.12
log
@sync; disable another interface depending on a notyet function
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.11 2006/05/30 20:46:32 tg Exp $ */
a82 1
#ifdef notyet
a84 1
#endif
a127 1
#ifdef notyet
a129 1
#endif
@


1.11
log
@add the new openbsd functions
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.10 2006/05/30 20:34:39 tg Exp $ */
a136 1
#ifdef notyet
a137 1
#endif
a140 1
#ifdef notyet
a141 1
#endif
@


1.10
log
@another simple one missing
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.9 2006/05/30 19:49:45 tg Exp $ */
d136 1
a137 1
double	wcstod(const wchar_t *__restrict__, wchar_t **__restrict__);
d142 1
a143 1
long	wcstol(const wchar_t *__restrict__, wchar_t **__restrict__, int);
a147 1
#ifdef notyet
a149 1
#endif /* notyet */
a150 1
#ifdef notyet
a152 1
#endif /* notyet */
a154 1
#ifdef notyet
a157 1
#endif /* notyet */
@


1.9
log
@add a couple of functions
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.8 2006/05/30 13:28:48 tg Exp $ */
a166 1
#ifdef notyet
a167 1
#endif
@


1.8
log
@remove rather stupid nop
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.7 2006/05/30 13:03:49 tg Exp $ */
a78 1
#ifdef notyet
a79 1
#endif
@


1.7
log
@discovered libc already has these functions, d'oh
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.6 2006/05/30 12:58:52 tg Exp $ */
a152 2
#ifdef notyet
#endif /* notyet */
@


1.6
log
@add wcstok from libhaible; my own wcsdup
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.5 2006/05/30 12:28:50 tg Exp $ */
d137 1
a138 1
wchar_t	*wcsstr(const wchar_t *__restrict__, const wchar_t *__restrict__);
a168 1
#ifdef notyet
a169 1
#endif
@


1.5
log
@add a __CRAZY clean version of the (non-SUSv3 but libutf8/glibc compatible)
wcs[n]casecmp functions, derived from UCB code (str[n]casecmp) for simpli-
city (not that I couldn't have written them myself), but slightly optimised
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.4 2006/05/30 12:11:49 tg Exp $ */
d118 1
d141 1
d144 1
@


1.4
log
@xterm-213 based wcwidth(3) and my own wcswidth(3)
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.3 2006/05/30 11:34:21 tg Exp $ */
d109 1
d125 1
@


1.3
log
@finish all of <wctype.h> plus wctype()
some of that code by me (using bsearch(3) instead of
inlined hand-grown lsearch(3) replacement by FSF),
the tables aren't copyrightable, so, MirOS licence
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.2 2006/05/23 10:39:45 tg Exp $ */
d166 1
d168 1
a172 1
#ifdef notyet
a173 1
#endif
@


1.2
log
@add mbsinit(3), drafted after SUSv3
@
text
@d1 1
a1 1
/* $MirOS: contrib/code/libhaible/wchar.h,v 1.1 2006/05/23 10:35:28 tg Exp $ */
d170 1
a171 1
wctype_t wctype(const char *);
@


1.1
log
@copy these from src/include/
@
text
@d1 1
a1 1
/* $MirOS: src/include/wchar.h,v 1.4 2006/05/09 08:43:17 tg Exp $ */
d84 1
a85 1
int	mbsinit(const mbstate_t *);
@

