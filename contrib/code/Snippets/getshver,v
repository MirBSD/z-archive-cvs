head	1.23;
access;
symbols;
locks; strict;
comment	@# @;


1.23
date	2019.12.30.21.56.03;	author tg;	state Exp;
branches;
next	1.22;
commitid	1005E0A726B11C4B72E;

1.22
date	2018.10.20.15.27.20;	author tg;	state Exp;
branches;
next	1.21;
commitid	1005BCB49643E1A9C65;

1.21
date	2018.10.20.15.22.31;	author tg;	state Exp;
branches;
next	1.20;
commitid	1005BCB4809783EE790;

1.20
date	2018.06.29.01.01.27;	author tg;	state Exp;
branches;
next	1.19;
commitid	1005B3584E809D2EFC8;

1.19
date	2018.06.29.00.10.21;	author tg;	state Exp;
branches;
next	1.18;
commitid	1005B3579054FAFEB93;

1.18
date	2016.04.14.11.55.42;	author tg;	state Exp;
branches;
next	1.17;
commitid	100570F85500D7A7580;

1.17
date	2014.02.10.00.36.12;	author tg;	state Exp;
branches;
next	1.16;
commitid	10052F81F076BAA49CD;

1.16
date	2013.09.27.18.26.06;	author tg;	state Exp;
branches;
next	1.15;
commitid	1005245CDB941B26B95;

1.15
date	2012.09.23.15.50.16;	author tg;	state Exp;
branches;
next	1.14;
commitid	100505F2FD1750A57B8;

1.14
date	2012.09.18.14.17.01;	author tg;	state Exp;
branches;
next	1.13;
commitid	100505882753D851306;

1.13
date	2012.09.18.14.15.32;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005058821C61174078;

1.12
date	2012.06.30.17.50.27;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004FEF3C7B597EDEE7;

1.11
date	2011.11.02.21.48.05;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004EB1BA8F1198F6E5;

1.10
date	2010.09.27.21.13.18;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004CA108F66F61FBD6;

1.9
date	2010.05.13.17.57.54;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004BEC3D8D0C7D6D74;

1.8
date	2010.04.27.21.09.12;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004BD7527B1A34EACB;

1.7
date	2009.09.14.18.04.26;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004AAE85BD4542E906;

1.6
date	2009.09.14.17.55.00;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004AAE838855062C6E;

1.5
date	2009.09.14.17.36.28;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004AAE7F30250EF552;

1.4
date	2009.09.14.17.33.31;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004AAE7E78459D1C40;

1.3
date	2009.09.14.17.30.52;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004AAE7DC8409E51AA;

1.2
date	2009.09.14.17.19.45;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004AAE7B3B3481F21C;

1.1
date	2009.08.15.14.17.19;	author tg;	state Exp;
branches;
next	;
commitid	1004AAE79116D784621;


desc
@@


1.23
log
@drop the “Version ” from ksh86 (like ksh93); handle ksh2020 separately

ksh93 version numbers can be interpreted arithmetically as well, show
@
text
@# $MirOS: contrib/code/Snippets/getshver,v 1.21 2018/10/20 15:22:31 tg Exp $
#-
# Copyright (c) 2009, 2010, 2011, 2012, 2013, 2014, 2016, 2018, 2019
#	mirabilos <m@@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.
#-
# There's also this one (although mksh never sets $SH_VERSION):
# http://www.in-ulm.de/~mascheck/various/whatshell/whatshell.sh.html

# escape this from tclsh \
`""""true; echo true` unless q # escape from Python, Perl

# escape this from tclsh \
set x = 1
# escape this from tclsh \
test 1 = "$x" && goto CSH

# BEGIN of Tcl section (((
# escape this from tclsh \
x='
if {[info exists ::jim_argv0]} {set v "jimsh"} elseif {[info commands tk] != ""} {set v "wish"} {set v "tclsh"}
if {[info exists ::tcl_version]} {
	append v " " $::tcl_version
	if {[info exists ::tcl_patchLevel]} {append v " (" $::tcl_patchLevel ")"}
} elseif {[info exists ::tcl_patchLevel]} {append v " " $::tcl_patchLevel}
set u 0
set w " on"
if {[info exists ::tcl_platform(machine)]} {set u 1; append w " " $::tcl_platform(machine)}
if {[info exists ::tcl_platform(byteOrder)]} {set u 1; append w " (" $::tcl_platform(byteOrder) ")"}
if {[info exists ::tcl_platform(os)]} {
	set u 1
	append w " " $::tcl_platform(os)
	if {[info exists ::tcl_platform(osVersion)]} {append w " " $::tcl_platform(osVersion)}
} else {append w " unknown"}
if {[info exists ::tcl_platform(platform)]} {set u 1; append w " (" $::tcl_platform(platform) ")"}
if {$u == 1} {append v $w}
set w ","
if {[info exists ::tcl_platform(threaded)]} {
	append w " "
	if {$::tcl_platform(threaded) != 1} {append w "non"}
	append w "threaded"
}
if {[info exists ::tcl_platform(debug)]} {
	append w " "
	if {$::tcl_platform(debug) != 1} {append w "non"}
	append w "debug"
}
if {[info exists ::tcl_interactive]} {
	append w " "
	if {$::tcl_interactive != 1} {append w "non"}
	append w "interactive"
}
if {[string equal $w ","] == 0} {append v $w}
puts $v
exit 0
'
# ))) END of Tcl section

LC_ALL=C
export LC_ALL

if test x"`echo u ^ echo x`" = x"x"; then
	# Bourne shell, maybe Heirloom sh (tested)
	echo bourne
	exit 0
fi
if test x"$(echo u)" != x"u"; then
	# other non-POSIX shell, maybe Solaris /bin/sh
	echo binsh
	exit 0
fi
# POSIX shell

case $ZSH_VERSION in
*[0-9]*) echo "zsh $ZSH_VERSION"; exit 0 ;;
esac

case $VERSION in
zsh*) printf "zsh-old $VERSION"; exit 0 ;;
esac

case $YASH_VERSION in
*.*) echo "yash $YASH_VERSION"; exit 0 ;;
esac

case $NETBSD_SHELL in
2*) echo "nbsh $NETBSD_SHELL"; exit 0 ;;
esac

case x$SHELL_VERSION in
x) ;;
*[0-9]*build*)
	if ( (set -o korn) && (set -o bash) ) >/dev/null 2>/dev/null; then
		# MKS {,Korn,Bash} Shell (fixed by Michael Langguth)
		( # subshell, just in case
		typeset _o

		_o=`set -o`
		if [ -z "${_o##*-o bash*}" ]; then
			echo "mksbash $SHELL_VERSION"
		elif [ -z "${_o##*-o korn*}" ]; then
			echo "mksksh $SHELL_VERSION"
		else
			echo "mkssh $SHELL_VERSION"
		fi ) || echo "mks $SHELL_VERSION"
		exit 0
	fi
	;;
esac

x=
case x$BASH_VERSION in
# no GNU bash
x) ;;
# known GNU bash versions
x2*) x=bash2 ;;
x3*) x=bash3 ;;
x4*) x=bash4 ;;
# either bash1 or an unlikely version
*) x=bash ;;
esac
if test x"$x" != x""; then
	echo "$x $BASH_VERSION"
	exit 0
fi

# AT&T ksh93
x=.sh.version
(eval x=\$\{$x\}) 2>/dev/null || x=fail
if test fail != "$x"; then
	if builtin XBell >/dev/null 2>&1; then
		dgk=dtksh situ=ksh2020+dt
	else
		dgk=ksh93 situ=ksh2020
	fi
	y=$(eval 'echo $((KSH_VERSION))' 2>/dev/null) || y=88
	case $y in
	[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]) z=" (($y))" ;;
	*) y=0 z= ;;
	esac
	if test $y -gt 20140929; then z=$situ$z; else z=$dgk$z; fi
	eval echo '$z ${.sh.version#Version }'
	exit 0
fi
# lksh, mksh, mirbsdksh (pre-mksh), oksh (3.7+), pdksh
case $KSH_VERSION in
*LEGACY\ KSH*) echo "mksh-legacy ${KSH_VERSION#*KSH }" ; exit 0 ;;
*MIRBSD\ KSH*) echo "mksh ${KSH_VERSION#*KSH }" ; exit 0 ;;
*PD\ KSH*MirOS*) echo "pdksh-mbsd${KSH_VERSION#*PD KSH}"; exit 0 ;;
*PD\ KSH*)
	if test x"`typeset -i10 x=0x10 2>/dev/null; echo $x`" = x"16"; then
		# printing KSH_VERSION here is rather useless though
		echo "pdksh-obsd ${KSH_VERSION#*KSH }"
	else
		# unspecified: Debian (modern), 5.2.14 (sorta modern),
		# some older or vendor-modified version, old oksh
		echo "pdksh ${KSH_VERSION#*KSH }"
	fi
	exit 0 ;;
esac
case $SH_VERSION in
*PD\ KSH*MirOS*) echo "pdksh-binsh-mbsd${SH_VERSION#*PD KSH}"; exit 0 ;;
*PD\ KSH*)
	if test x"`typeset -i10 x=0x10 2>/dev/null; echo $x`" = x"16"; then
		# printing SH_VERSION here is rather useless though
		echo "pdksh-binsh-obsd ${SH_VERSION#*KSH }"
	else
		# unspecified: Debian (modern), 5.2.14 (sorta modern),
		# some older or vendor-modified version, old oksh
		echo "pdksh-binsh ${SH_VERSION#*KSH }"
	fi
	exit 0 ;;
esac
# AT&T ksh88
if (
	typeset _p

	_p='f+([ o])bar'
	eval [[ foobar = $_p '&&' \"foo bar\" = $_p ]]
) 2>/dev/null; then
	echo ksh88
	exit 0
fi
# AT&T ksh86
test x"$(LC_ALL=C; type print 2>&1)" = x"print is a shell builtin" && \
    case $(print -- 2>&1) in
*'bad option'*)
	echo 'ksh86 06/03/86(/a)'
	exit 0
	;;
esac

# posh (pdksh without Korn shell)
if test x"$POSH_VERSION" != x""; then
	echo "posix-posh $POSH_VERSION"
	exit 0
fi
if ( [[ 0 < 1 ]] ) 2>/dev/null; then
	echo posix-ext
	exit 0
fi
if test x"`
	foo() {
		local a

		a=2
	}
	a=1
	foo
	echo $a
    `" = x"1"; then
	# we have a working "local"
	if test x"$(PATH=/nonexistent; export PATH
	    exec 2>/dev/null; printf 'f%so' o)" = x"foo"; then
		# probably, but not certain
		# also: (old) NetBSD /bin/sh (e.g. on MirBSD); dash on Debian
		echo posix-dash
		exit 0
	fi
	# test if we fulfil Debian Policy 10.4
	if ( test 1 -eq 1 -a a = a ) && test x"`echo -n a;
	    echo -n b`" = x"ab"; then
		echo posix-debian
		exit 0
	fi
fi
if test x"`echo -n a; echo -n b`" = x"ab"; then
	echo posix-echon
	exit 0
fi
if test x"`echo a'\c'; echo b`" = x"ab"; then
	echo posix-echoc
	exit 0
fi
echo posix
exit 0

CSH:

if { bindkey >& /dev/null } then
	echo "tcsh $tcsh"
else
	echo csh
endif
exit 0

# back to Perl
 eq '';
print "perl $] on $^O\n";
exit 0;
__END__

# back to Python
"""`
import sys
print("Python " + sys.version)
@


1.22
log
@stderr fuckup in Slackware ash workaround, from orbea via IRC
@
text
@d3 1
a3 1
# Copyright (c) 2009, 2010, 2011, 2012, 2013, 2014, 2016, 2018
d146 1
a146 1
		eval echo 'dtksh ${.sh.version#Version }'
d148 1
a148 1
		eval echo 'ksh93 ${.sh.version#Version }'
d150 7
d202 1
a202 1
	echo 'ksh86 Version 06/03/86(/a)'
@


1.21
log
@add AT&T ksh86 (ksh86a on "4.3BSD+NFS Wisconsin Unix" in simh by RT)
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.20 2018/06/29 01:01:27 tg Exp $
d221 1
a221 1
	    printf 'f%so' o 2>/dev/null)" = x"foo"; then
@


1.20
log
@add Python

unfortunately, throws SyntaxError on first ` in py3k
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.19 2018/06/29 00:10:21 tg Exp $
d191 8
@


1.19
log
@add Perl
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.16 2013/09/27 18:26:06 tg Exp $
d25 1
a25 1
true unless q # escape from Perl
d250 6
@


1.18
log
@of course nbsh has to break conventions…
@
text
@d3 1
a3 1
# Copyright (c) 2009, 2010, 2011, 2012, 2013, 2014, 2016
d25 3
d245 5
@


1.17
log
@never close stdout or stderr, always redirect it to /dev/null instead
@
text
@d3 2
a4 2
# Copyright (c) 2009, 2010, 2011, 2012, 2013, 2014
#	Thorsten Glaser <tg@@mirbsd.org>
d97 4
d212 1
a212 1
		# also: NetBSD /bin/sh on MirBSD; dash on Debian
@


1.16
log
@Guido Berhoerster points out that AT&T ksh93 aliases KSH_VERSION to
${.sh.version} ⇒ make sure to test the latter first
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.15 2012/09/23 15:50:16 tg Exp $
d3 1
a3 1
# Copyright (c) 2009, 2010, 2011, 2012, 2013
d100 1
a100 1
	if ( (set -o korn) && (set -o bash) ) >&- 2>&-; then
d136 1
a136 1
(eval x=\$\{$x\}) 2>&- || x=fail
d151 1
a151 1
	if test x"`typeset -i10 x=0x10 2>&-; echo $x`" = x"16"; then
d164 1
a164 1
	if test x"`typeset -i10 x=0x10 2>&-; echo $x`" = x"16"; then
d180 1
a180 1
) 2>&-; then
d190 1
a190 1
if ( [[ 0 < 1 ]] ) 2>&-; then
@


1.15
log
@some pdksh variants do set $SH_VERSION occasionally
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.14 2012/09/18 14:17:01 tg Exp $
d3 1
a3 1
# Copyright (c) 2009, 2010, 2011, 2012
d134 11
d174 1
a174 11

x=.sh.version
(eval x=\$\{$x\}) 2>&- || x=fail
if test fail != "$x"; then
	if builtin XBell >/dev/null 2>&1; then
		eval echo 'dtksh ${.sh.version#Version }'
	else
		eval echo 'ksh93 ${.sh.version#Version }'
	fi
	exit 0
fi
d185 1
@


1.14
log
@apparently, it’s a good idea to prevent locales, even here
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.13 2012/09/18 14:15:32 tg Exp $
d150 13
@


1.13
log
@add zsh-old (from Frank Terbeck) and yash and point to Sven Mascheck’s
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.12 2012/06/30 17:50:27 tg Exp $
d70 3
@


1.12
log
@recognise lksh
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.11 2011/11/02 21:48:05 tg Exp $
d20 3
d86 8
@


1.11
log
@extend on the Tcl/Tk version:
• recognise wish
• support jimtcl
• display as much environmental info as I could get
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.10 2010/09/27 21:13:18 tg Exp $
d3 1
a3 1
# Copyright (c) 2009, 2010, 2011
d120 1
a120 1
# mksh, mirbsdksh (pre-mksh), oksh (3.7+), pdksh
d122 1
@


1.10
log
@silence test, caught by TGEN on cassiopeia whose /bin/sh is actually weird
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.9 2010/05/13 17:57:54 tg Exp $
d3 1
a3 1
# Copyright (c) 2009, 2010
d26 1
d28 38
a65 4
if false; then
	puts tclsh
	exit 0
fi
@


1.9
log
@tweak MKS ksh code, From: Michael Langguth

damit sollte man zumindest ab toolkit version 5-6 von ende der 90'er mks
erkennen kC6nnen. die SHELL_VERSION ist schon seit ich mks kenne so
aufgebaut:

    9.2.3 build 2096 Jun 22 2009 11:30:51

ganz frC<her war bei denen glaub' ich sh.exe auch die ksh. erst mit der
einfC<hrung der echten sh mC<sste dann set -o korn reingekommen sein.
nach aussortierung der bash kann man daher sagen: alles ohne gesetztes
"+o korn" ist ksh.
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.8 2010/04/27 21:09:12 tg Exp $
d3 1
a3 1
# Copyright (c) 2009
d141 1
a141 1
	    printf 'f%so' o)" = x"foo"; then
@


1.8
log
@detect dtksh; slightly modified from patch by masta (Jon)
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.7 2009/09/14 18:04:26 tg Exp $
d52 1
a52 1
		# MKS {,Korn,Bash} Shell (untested, I have none)
d54 1
a54 1
		typeset _o _pp _pb _pk
d57 4
a60 12
		set +o posix
		set +o bash
		set -o korn
		_pp='*@@(posix+( )on)*'
		_pb='*@@(bash+( )on)*'
		_pk='*@@(korn+( )on)*'
		if eval [[ \$_o = $_pp ]]; then
			echo mkssh
		elif eval [[ \$_o = $_pb ]]; then
			echo mksbash
		elif eval [[ \$_o = $_pk ]]; then
			echo mksksh
d62 2
a63 2
			echo mkssh
		fi ) || echo mks
a65 1
	# may still be MKS? we do not know...
@


1.7
log
@TCL/TK, too ;)
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.5 2009/09/14 17:36:28 tg Exp $
d113 5
a117 1
	eval echo 'ksh93 ${.sh.version#Version }'
@


1.6
log
@improved version reporting
@
text
@d21 1
d23 1
d26 6
@


1.5
log
@bash compatibility
@
text
@d1 1
a1 1
# $MirOS: contrib/code/Snippets/getshver,v 1.2 2009/09/14 17:19:45 tg Exp $
d37 1
a37 1
*[0-9]*) echo zsh; exit 0 ;;
d70 1
d75 3
a77 3
x2*) echo bash2; exit 0 ;;
x3*) echo bash3; exit 0 ;;
x4*) echo bash4; exit 0 ;;
d79 1
a79 1
*) echo bash; exit 0 ;;
d81 4
d88 2
a89 2
*MIRBSD\ KSH*) echo mksh; exit 0 ;;
*PD\ KSH*MirOS*) echo pdksh-mbsd; exit 0 ;;
d92 2
a93 1
		echo pdksh-obsd
d97 1
a97 1
		echo pdksh
d105 1
a105 1
	echo ksh93
d119 1
a119 1
	echo posix-posh
d140 1
a140 1
		# also: NetBSD /bin/sh on MirBSD
d165 1
a165 1
	echo "tcsh $version"
@


1.4
log
@nbsh (from former MirBSD) compatibility
@
text
@d27 1
a27 1
	return
d32 1
a32 1
	return
d37 1
a37 1
*[0-9]*) echo zsh; return ;;
d64 1
a64 1
		return
d74 3
a76 3
x2*) echo bash2; return ;;
x3*) echo bash3; return ;;
x4*) echo bash4; return ;;
d78 1
a78 1
*) echo bash; return ;;
d83 2
a84 2
*MIRBSD\ KSH*) echo mksh; return ;;
*PD\ KSH*MirOS*) echo pdksh-mbsd; return ;;
d93 1
a93 1
	return ;;
d100 1
a100 1
	return
d109 1
a109 1
	return
d114 1
a114 1
	return
d118 1
a118 1
	return
d134 1
d136 1
a136 1
		return
d142 1
a142 1
		return
d147 1
a147 1
	return
d151 1
a151 1
	return
d154 1
a154 1
return
d163 1
@


1.3
log
@trick to discover csh (and distinguish tcsh)
from http://www.shelldorado.com/scripts/cmds/shtype
@
text
@d96 6
a101 4
case x"`(echo ${.sh.version}) 2>&- || echo fail`" in
x|xfail) ;;
*) echo ksh93; return ;;
esac
@


1.2
log
@convert from function to to-be-sourced script
@
text
@d1 1
a1 1
# $MirOS: src/share/misc/licence.template,v 1.28 2008/11/14 15:33:44 tg Rel $
d21 3
d151 9
@


1.1
log
@from my mail to miros-disgust@@: snippet to find out which shell we run
@
text
@d1 57
a57 68
# assumes a POSIX compatible or Bourne shell
# DEC ULTRIX 4.5 /bin/sh cannot do this
# of course, this won't catch all shells
get_sh_version() {
	if test x"`echo u ^ echo x`" = x"x"; then
		# Bourne shell, maybe Heirloom sh (tested)
		echo bourne
		return
	fi
	if test x"$(echo u)" != x"u"; then
		# other non-POSIX shell, maybe Solaris /bin/sh
		echo binsh
		return
	fi
	# POSIX shell

	case $ZSH_VERSION in
	*[0-9]*) echo zsh; return ;;
	esac

	case x$SHELL_VERSION in
	x) ;;
	*[0-9]*build*)
		if ( (set -o korn) && (set -o bash) ) >&- 2>&-; then
			# MKS {,Korn,Bash} Shell (untested, I have none)
			( # subshell, just in case
			typeset _o _pp _pb _pk

			_o=`set -o`
			set +o posix
			set +o bash
			set -o korn
			_pp='*@@(posix+( )on)*'
			_pb='*@@(bash+( )on)*'
			_pk='*@@(korn+( )on)*'
			if eval [[ \$_o = $_pp ]]; then
				echo mkssh
			elif eval [[ \$_o = $_pb ]]; then
				echo mksbash
			elif eval [[ \$_o = $_pk ]]; then
				echo mksksh
			else
				echo mkssh
			fi ) || echo mks
			return
		fi
		# may still be MKS? we do not know...
		;;
	esac

	case x$BASH_VERSION in
	# no GNU bash
	x) ;;
	# known GNU bash versions
	x2*) echo bash2; return ;;
	x3*) echo bash3; return ;;
	x4*) echo bash4; return ;;
	# either bash1 or an unlikely version
	*) echo bash; return ;;
	esac

	# mksh, mirbsdksh (pre-mksh), oksh (3.7+), pdksh
	case $KSH_VERSION in
	*MIRBSD\ KSH*) echo mksh; return ;;
	*PD\ KSH*MirOS*) echo pdksh-mbsd; return ;;
	*PD\ KSH*)
		if test x"`typeset -i10 x=0x10 2>&-; echo $x`" = x"16"; then
			echo pdksh-obsd
d59 2
a60 23
			# unspecified: Debian (modern), 5.2.14 (sorta modern),
			# some older or vendor-modified version, old oksh
			echo pdksh
		fi
		return ;;
	esac

	case x"`(echo ${.sh.version}) 2>&- || echo fail`" in
	x|xfail) ;;
	*) echo ksh93; return ;;
	esac
	if (
		typeset _p

		_p='f+([ o])bar'
		eval [[ foobar = $_p '&&' \"foo bar\" = $_p ]]
	) 2>&-; then
		echo ksh88
		return
	fi

	if test x"$POSH_VERSION" != x""; then
		echo posix-posh
d63 85
a147 42
	if ( [[ 0 < 1 ]] ) 2>&-; then
		echo posix-ext
		return
	fi
	if test x"`
		foo() {
			local a

			a=2
		}
		a=1
		foo
		echo $a
	    `" = x"1"; then
		# we have a working "local"
		if test x"$(PATH=/nonexistent; export PATH
		    printf 'f%so' o)" = x"foo"; then
			# probably, but not certain
			echo posix-dash
			return
		fi
		# test if we fulfil Debian Policy 10.4
		if ( test 1 -eq 1 -a a = a ) && test x"`echo -n a;
		    echo -n b`" = x"ab"; then
			echo posix-debian
			return
		fi
	fi
	if test x"`echo -n a; echo -n b`" = x"ab"; then
		echo posix-echon
		return
	fi
	if test x"`echo a'\c'; echo b`" = x"ab"; then
		echo posix-echoc
		return
	fi
	echo posix
}

echo determining...
res=`get_sh_version`
echo "done: <$res>"
@

