head	1.4;
access;
symbols
	FSF:1.1.101;
locks; strict;
comment	@# @;


1.4
date	2008.05.02.23.31.53;	author tg;	state Exp;
branches;
next	1.3;
commitid	100481BA47E7509FB2E;

1.3
date	2005.03.13.16.35.24;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.05.02.28.19;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.05.01.52.01;	author tg;	state Exp;
branches
	1.1.101.1;
next	;

1.1.101.1
date	2005.02.05.01.52.01;	author tg;	state Exp;
branches;
next	1.1.101.2;

1.1.101.2
date	2005.03.13.16.33.46;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@merge
@
text
@#!/bin/sh
# $MirOS$
#-
# py-compile - Compile a Python program

scriptversion=2005-02-02.22

# Copyright (C) 2000, 2001, 2003, 2004, 2005  Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.

# As a special exception to the GNU General Public License, if you
# distribute this file as part of a program that contains a
# configuration script generated by Autoconf, you may include it under
# the same distribution terms that you use for the rest of that program.

# This file is maintained in Automake, please report
# bugs to <bug-automake@@gnu.org> or send patches to
# <automake-patches@@gnu.org>.

if [ -z "$PYTHON" ]; then
  PYTHON=python
fi

basedir=
destdir=
files=
while test $# -ne 0; do
  case "$1" in
    --basedir)
      basedir=$2
      if test -z "$basedir"; then
        echo "$0: Missing argument to --basedir." 1>&2
        exit 1
      fi
      shift
      ;;
    --destdir)
      destdir=$2
      if test -z "$destdir"; then
        echo "$0: Missing argument to --destdir." 1>&2
        exit 1
      fi
      shift
      ;;
    -h|--h*)
      cat <<\EOF
Usage: py-compile [--help] [--version] [--basedir DIR] [--destdir DIR] FILES..."

Byte compile some python scripts FILES.  Use --destdir to specify any
leading directory path to the FILES that you don't want to include in the
byte compiled file.  Specify --basedir for any additional path information you
do want to be shown in the byte compiled file.

Example:
  py-compile --destdir /tmp/pkg-root --basedir /usr/share/test test.py test2.py

Report bugs to <bug-automake@@gnu.org>.
EOF
      exit $?
      ;;
    -v|--v*)
      echo "py-compile $scriptversion"
      exit $?
      ;;
    *)
      files="$files $1"
      ;;
  esac
  shift
done

if test -z "$files"; then
    echo "$0: No files given.  Try \`$0 --help' for more information." 1>&2
    exit 1
fi

# if basedir was given, then it should be prepended to filenames before
# byte compilation.
if [ -z "$basedir" ]; then
    pathtrans="path = file"
else
    pathtrans="path = os.path.join('$basedir', file)"
fi

# if destdir was given, then it needs to be prepended to the filename to
# byte compile but not go into the compiled file.
if [ -z "$destdir" ]; then
    filetrans="filepath = path"
else
    filetrans="filepath = os.path.normpath('$destdir' + os.sep + path)"
fi

$PYTHON -c "
import sys, os, string, py_compile

files = '''$files'''

print 'Byte-compiling python modules...'
for file in string.split(files):
    $pathtrans
    $filetrans
    if not os.path.exists(filepath) or not (len(filepath) >= 3
                                            and filepath[-3:] == '.py'):
	continue
    print file,
    sys.stdout.flush()
    py_compile.compile(filepath, filepath + 'c', path)
print" || exit $?

# this will fail for python < 1.5, but that doesn't matter ...
$PYTHON -O -c "
import sys, os, string, py_compile

files = '''$files'''
print 'Byte-compiling python modules (optimized versions) ...'
for file in string.split(files):
    $pathtrans
    $filetrans
    if not os.path.exists(filepath) or not (len(filepath) >= 3
                                            and filepath[-3:] == '.py'):
	continue
    print file,
    sys.stdout.flush()
    py_compile.compile(filepath, filepath + 'o', path)
print" 2>/dev/null || :

# Local Variables:
# mode: shell-script
# sh-indentation: 2
# eval: (add-hook 'write-file-hooks 'time-stamp)
# time-stamp-start: "scriptversion="
# time-stamp-format: "%:y-%02m-%02d.%02H"
# time-stamp-end: "$"
# End:
@


1.3
log
@merge
@
text
@d2 2
a3 1
# $MirOS: contrib/gnu/automake/lib/py-compile,v 1.2 2005/02/05 02:28:19 tg Exp $
@


1.2
log
@merge MirOS and add tags
@
text
@d2 1
a2 1
# $MirOS$
d5 1
a5 1
scriptversion=2004-01-12.23
d7 1
a7 1
# Copyright (C) 2000, 2001, 2003, 2004  Free Software Foundation, Inc.
d38 28
d67 2
a68 15
case "$1" in
  --basedir)
    basedir=$2
    if test -z "$basedir"; then
      echo "$0: Missing argument to --basedir." 1>&2
      exit 1
    fi
    shift 2
    ;;
  -h|--h*)
    cat <<\EOF
Usage: py-compile [--help] [--version] [--basedir DIR] FILES..."

Byte compile some python scripts FILES.  This should be performed
after they have been moved to the final installation location
d72 12
a83 7
    exit 0
    ;;
  -v|--v*)
    echo "py-compile $scriptversion"
    exit 0
    ;;
esac
d85 1
a85 1
if [ $# = 0 ]; then
d93 1
a93 1
    trans="path = file"
d95 9
a103 1
    trans="path = os.path.join('$basedir', file)"
d109 2
a110 1
files = '''$*'''
d113 4
a116 2
    $trans
    if not os.path.exists(path) or not (len(path) >= 3 and path[-3:] == '.py'):
d120 1
a120 1
    py_compile.compile(path)
d127 1
a127 1
files = '''$*'''
d130 4
a133 2
    $trans
    if not os.path.exists(path) or not (len(path) >= 3 and path[-3:] == '.py'):
d137 1
a137 1
    py_compile.compile(path)
@


1.1
log
@Initial revision
@
text
@d2 1
@


1.1.101.1
log
@some GNU infrastructural files from various sources
@
text
@@


1.1.101.2
log
@merge from automake-mainline (FSF slang for -HEAD in CVS)
@
text
@d4 1
a4 1
scriptversion=2005-02-02.22
d6 1
a6 1
# Copyright (C) 2000, 2001, 2003, 2004, 2005  Free Software Foundation, Inc.
a36 28
destdir=
files=
while test $# -ne 0; do
  case "$1" in
    --basedir)
      basedir=$2
      if test -z "$basedir"; then
        echo "$0: Missing argument to --basedir." 1>&2
        exit 1
      fi
      shift
      ;;
    --destdir)
      destdir=$2
      if test -z "$destdir"; then
        echo "$0: Missing argument to --destdir." 1>&2
        exit 1
      fi
      shift
      ;;
    -h|--h*)
      cat <<\EOF
Usage: py-compile [--help] [--version] [--basedir DIR] [--destdir DIR] FILES..."

Byte compile some python scripts FILES.  Use --destdir to specify any
leading directory path to the FILES that you don't want to include in the
byte compiled file.  Specify --basedir for any additional path information you
do want to be shown in the byte compiled file.
d38 15
a52 2
Example:
  py-compile --destdir /tmp/pkg-root --basedir /usr/share/test test.py test2.py
d56 7
a62 12
      exit $?
      ;;
    -v|--v*)
      echo "py-compile $scriptversion"
      exit $?
      ;;
    *)
      files="$files $1"
      ;;
  esac
  shift
done
d64 1
a64 1
if test -z "$files"; then
d72 1
a72 1
    pathtrans="path = file"
d74 1
a74 9
    pathtrans="path = os.path.join('$basedir', file)"
fi

# if destdir was given, then it needs to be prepended to the filename to
# byte compile but not go into the compiled file.
if [ -z "$destdir" ]; then
    filetrans="filepath = path"
else
    filetrans="filepath = os.path.normpath('$destdir' + os.sep + path)"
d80 1
a80 2
files = '''$files'''

d83 2
a84 4
    $pathtrans
    $filetrans
    if not os.path.exists(filepath) or not (len(filepath) >= 3
                                            and filepath[-3:] == '.py'):
d88 1
a88 1
    py_compile.compile(filepath, filepath + 'c', path)
d95 1
a95 1
files = '''$files'''
d98 2
a99 4
    $pathtrans
    $filetrans
    if not os.path.exists(filepath) or not (len(filepath) >= 3
                                            and filepath[-3:] == '.py'):
d103 1
a103 1
    py_compile.compile(filepath, filepath + 'o', path)
@

