head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2010.10.11.18.29.16;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	1004CB3577C04B29215;

1.1
date	2010.09.21.19.17.32;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004C99018E29024107;


desc
@@


1.2
log
@Add a minimal (simple) Glob implementation
@
text
@package main

import (
	"./simpleglob"
	"fmt"
	"os"
)


func main() {
	for _, a := range os.Args[1:] {
		matches := simpleglob.Glob(a)
		if matches == nil {
			fmt.Printf("Glob on %v not ok\n", a)
		} else {
			fmt.Printf("%v matches:\n", a)
			for _, m := range matches {
				fmt.Printf(" %v\n", m)
			}
		}
	}
}
@


1.1
log
@Very rough first prototype of an implementation of glob(3) in Go. Does not
yet respect all the options, or work on Win32.
@
text
@d4 1
a4 1
	"./glob"
a8 4
func Err(filename string, err os.Error) bool {
	fmt.Printf("Err called for %v: %v\n", filename, err)
	return false
}
d12 2
a13 2
		matches, ok := glob.Glob(a, 0, Err)
		if !ok {
@

