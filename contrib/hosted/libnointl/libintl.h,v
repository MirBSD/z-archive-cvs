head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2013.10.31.20.05.48;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005272B7081B0E5655;

1.6
date	2007.07.14.19.52.56;	author tg;	state Exp;
branches;
next	1.5;
commitid	100469929A459CA4597;

1.5
date	2007.07.01.20.43.59;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004688121824CC695A;

1.4
date	2007.06.27.01.58.19;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004681C449178AD95A;

1.3
date	2007.06.25.16.32.53;	author tg;	state Exp;
branches;
next	1.2;
commitid	100467FEE473405D6EB;

1.2
date	2007.06.25.10.53.16;	author tg;	state Exp;
branches;
next	1.1;
commitid	100467F9E98074CDE1E;

1.1
date	2007.06.25.10.47.19;	author tg;	state Exp;
branches;
next	;
commitid	100467F9D422522B79A;


desc
@@


1.7
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/* $MirOS: src/share/misc/licence.template,v 1.28 2008/11/14 15:33:44 tg Rel $ */

/*-
 * Copyright (c) 2007, 2013
 *	Thorsten "mirabilos" Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#ifndef _LIBINTL_H

#include <locale.h>
#undef gettext

/* we emulate GNU gettext 0.16.1 */

#define LIBINTL_VERSION		0x001000
#define __USE_GNU_GETTEXT	1
#define __GNU_GETTEXT_SUPPORTED_REVISION(major)	\
	    ((major) == 0 || (major) == 1 ? 1 : -1)

#ifndef __BEGIN_DECLS
#if defined(__cplusplus)
#define	__BEGIN_DECLS	extern "C" {
#define	__END_DECLS	}
#else
#define	__BEGIN_DECLS
#define	__END_DECLS
#endif
#endif

__BEGIN_DECLS
extern int libintl_version;
__END_DECLS

#endif /* !_LIBINTL_H */

#if !defined(_LIBINTL_H) || defined(LIBINTL_REDEFINE)

__BEGIN_DECLS
extern char *gettext(const char *)
    __attribute__((__format_arg__(1)));
extern char *dgettext(const char *, const char *)
    __attribute__((__format_arg__(2)));
extern char *dcgettext(const char *, const char *, int)
    __attribute__((__format_arg__(2)));
extern char *ngettext(const char *, const char *, unsigned long)
    __attribute__((__format_arg__(1)))
    __attribute__((__format_arg__(2)));
extern char *dngettext(const char *, const char *, const char *, unsigned long)
    __attribute__((__format_arg__(2)))
    __attribute__((__format_arg__(3)));
extern char *dcngettext(const char *, const char *, const char *,
    unsigned long, int)
    __attribute__((__format_arg__(2)))
    __attribute__((__format_arg__(3)));
extern char *dcigettext(const char *, const char *, const char *,
    int, unsigned long, int)
    __attribute__((__format_arg__(2)))
    __attribute__((__format_arg__(3)));
extern char *textdomain(const char *);
extern char *bindtextdomain(const char *, const char *);
extern char *bind_textdomain_codeset(const char *, const char *);

#ifdef LIBINTL_INTERNAL
extern void gettext_free_exp(void *);
extern int gettextparse(void *);
#endif /* LIBINTL_INTERNAL */
__END_DECLS

#endif /* !_LIBINTL_H || LIBINTL_REDEFINE */

#ifndef _LIBINTL_H
#define _LIBINTL_H

#ifdef LIBINTL_INTERNAL
__BEGIN_DECLS
extern void libintl_set_relocation_prefix(const char *, const char *);
extern void libintl_gettext_extract_plural(const char *, void *,
    unsigned long *);
extern unsigned long libintl_hash_string(const char *);
extern int libintl_once_singlethreaded(void *);
extern const char *libintl_relocate(const char *)
    __attribute__((__format_arg__(1)));
extern const char *locale_charset(void);
__END_DECLS
#endif /* LIBINTL_INTERNAL */

/*
 * Macro definitions for the above functions.
 * Since this API breaks const-cleanliness, we are required to unconstify.
 * This sucks, and we only do it for GCC and ICC (for now).
 */
#if defined(__GNUC__)
#define libintl_unconst(x) ({		\
	union {				\
		const void *cptr;	\
		void *vptr;		\
	} __UC_v;			\
					\
	__UC_v.cptr = (x);		\
	(__UC_v.vptr);			\
})
#else
#define libintl_unconst(x) ((char *)(x))
#endif

#define gettext(s)		libintl_unconst(s)
#define dgettext(x,s)		libintl_unconst(s)
#define dcgettext(x,s,n)	libintl_unconst(s)
#define ngettext(s,t,n)		libintl_unconst(s)
#define dngettext(x,s,t,n)	libintl_unconst(s)
#define dcngettext(x,s,t,n,m)	libintl_unconst(s)
#define dcigettext(x,s,t,n,m,p)	libintl_unconst(s)
#define textdomain(x)		libintl_unconst("messages")
#define bindtextdomain(x,y)	libintl_unconst(y)
#define bind_textdomain_codeset(x,y)		libintl_unconst(y)
#define libintl_set_relocation_prefix(x,y)	do { } while(0)

#endif /* !_LIBINTL_H */
@


1.6
log
@use __BEGIN_DECLS‥__END_DECLS
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/libnointl/libintl.h,v 1.5 2007/07/01 20:43:59 tg Exp $ */
d4 17
a20 4
 * "THE BEER-WARE LICENCE" (Revision 42):
 * <tg@@mirbsd.de> wrote this header file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return.     Thorsten Glaser
d55 1
a55 1
    __attribute__((format_arg (1)));
d57 1
a57 1
    __attribute__((format_arg (2)));
d59 1
a59 1
    __attribute__((format_arg (2)));
d61 2
a62 2
    __attribute__((format_arg (1)))
    __attribute__((format_arg (2)));
d64 2
a65 2
    __attribute__((format_arg (2)))
    __attribute__((format_arg (3)));
d68 2
a69 2
    __attribute__((format_arg (2)))
    __attribute__((format_arg (3)));
d72 2
a73 2
    __attribute__((format_arg (2)))
    __attribute__((format_arg (3)));
d97 1
a97 1
    __attribute__((format_arg (1)));
@


1.5
log
@remove the locale_charset macro, swishy reports it makes trouble
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/libnointl/libintl.h,v 1.4 2007/06/27 01:58:19 tg Exp $ */
d22 1
d24 6
a29 1
extern "C" {
d32 1
d34 1
d40 1
d69 1
d77 1
d86 1
a88 4
#if defined(__cplusplus)
}
#endif

@


1.4
log
@this should reduce dependencies even further
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/libnointl/libintl.h,v 1.3 2007/06/25 16:32:53 tg Exp $ */
a110 1
#define locale_charset()	"UTF-8"
@


1.3
log
@finish working on libnointl
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/libnointl/libintl.h,v 1.2 2007/06/25 10:53:16 tg Exp $ */
d107 1
a107 1
#define textdomain(x)		libintl_unconst(_nl_current_default_domain)
d111 1
@


1.2
log
@put a licence tag on the header file before anyone cries
(IMHO, headers are interface definitions and as such not copyrightable,
but there's some actual code inside, so what the hey…)
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/libnointl/libintl.h,v 1.1 2007/06/25 10:47:19 tg Exp $ */
d107 3
a109 3
#define textdomain(x)		?
#define bindtextdomain(x,y)	?
#define bind_textdomain_codeset(x,y)		?
@


1.1
log
@beginnings of a GNU gettext compatible libintl
@
text
@d1 8
a8 1
/* $MirOS$ */
@

