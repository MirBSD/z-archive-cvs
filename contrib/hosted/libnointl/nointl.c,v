head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2013.10.31.20.05.48;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005272B7081B0E5655;

1.8
date	2009.11.17.19.26.15;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004B02F8E319956CFC;

1.7
date	2008.05.03.01.09.30;	author tg;	state Exp;
branches;
next	1.6;
commitid	100481BBB3B66CD6DBA;

1.6
date	2007.07.14.19.51.02;	author tg;	state Exp;
branches;
next	1.5;
commitid	10046992930230B93BB;

1.5
date	2007.07.14.19.50.18;	author tg;	state Exp;
branches;
next	1.4;
commitid	10046992905400C7D59;

1.4
date	2007.06.27.23.19.55;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004682F0A91F55B0F4;

1.3
date	2007.06.25.16.32.54;	author tg;	state Exp;
branches;
next	1.2;
commitid	100467FEE473405D6EB;

1.2
date	2007.06.25.10.53.59;	author tg;	state Exp;
branches;
next	1.1;
commitid	100467F9ED823AB562E;

1.1
date	2007.06.25.10.47.19;	author tg;	state Exp;
branches;
next	;
commitid	100467F9D422522B79A;


desc
@@


1.9
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/*-
 * Copyright (c) 2007, 2013
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#undef __unused		/* just in case this is built on GNU/Linux */
#include <sys/types.h>
#include <langinfo.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>
#define LIBINTL_INTERNAL
#include "libintl.h"

static const char __rcsid_intl[] __attribute__((__used__)) =
    "$MirOS: contrib/hosted/libnointl/nointl.c,v 1.8 2009/11/17 19:26:15 tg Exp $";

#undef __unused
#define __unused	__attribute__((__unused__))

/* hidden data symbols */
const char _nl_default_default_domain__[] = "messages";
const char _nl_default_dirname__[] = "/usr/share/locale";
const char *_nl_current_default_domain__ = _nl_default_default_domain__;
const char _nl_default_default_domain[] = "messages";
const char _nl_default_dirname[] = "/usr/share/locale";
const char *_nl_current_default_domain = _nl_default_default_domain__;
const char libintl_nl_default_default_domain[] = "messages";
const char libintl_nl_default_dirname[] = "/usr/share/locale";
const char *libintl_nl_current_default_domain = _nl_default_default_domain__;
int libintl_version = LIBINTL_VERSION;
char _nl_state_lock[/* arbitrary value */ 64] = "";
char libintl_gettext_germanic_plural[/* arbitrary value */ 64] = "";
void *_nl_domain_bindings__;
void *_nl_domain_bindings;
void *libintl_nl_domain_bindings;
int _nl_msg_cat_cntr;

/* hidden functions */
/*
 * luckily, for a C function, it doesn't matter how many arguments
 * we have, we can just return NULL/0 in all cases
 */
#define hiddenfunc(x)		\
	void *x(void);		\
				\
	void *			\
	x(void)			\
	{			\
		return (NULL);	\
	}
hiddenfunc(_nl_expand_alias)
hiddenfunc(_nl_explode_name)
hiddenfunc(_nl_find_domain)
hiddenfunc(_nl_find_language)
hiddenfunc(_nl_find_msg)
hiddenfunc(_nl_free_domain_conv)
hiddenfunc(_nl_init_domain_conv)
hiddenfunc(_nl_language_preferences_default)
hiddenfunc(_nl_load_domain)
hiddenfunc(_nl_locale_name)
hiddenfunc(_nl_locale_name_default)
hiddenfunc(_nl_locale_name_posix)
hiddenfunc(_nl_log_untranslated)
hiddenfunc(_nl_make_l10nflist)
hiddenfunc(_nl_normalize_codeset)
#undef hiddenfunc

/* public and semi-public functions */

void
libintl_gettext_extract_plural(const char *x __unused,
    void *y __unused, unsigned long *z __unused)
{
	return;
}

unsigned long
libintl_hash_string(const char *s)
{
	/*
	 * An adaptation of Peter Weinberger's (PJW) generic hashing
	 * algorithm based on Allen Holub's version. Assumes 32-bit
	 * output values to be compatible to GNU libintl.
	 * Source: Doctor Dobb's Journal
	 */
	unsigned long hash_value = 0, i;
	const unsigned char *datum = (const unsigned char *)s;

#define HIGH_BITS	(~((unsigned int)(~0) >> 8))
	while (*datum) {
		hash_value = (hash_value << 8) + *datum++;
		if ((i = hash_value & HIGH_BITS) != 0)
			hash_value = (hash_value ^ (i >> 24)) & ~HIGH_BITS;
	}
#undef HIGH_BITS
	return (hash_value);
}

int
libintl_once_singlethreaded(void *dummy __unused)
{
	return (1);
}

const char *
libintl_relocate(const char *s)
{
	return (s);
}

#undef locale_charset
const char *
locale_charset(void)
{
	return (nl_langinfo(CODESET));
}

#undef libintl_set_relocation_prefix
void
libintl_set_relocation_prefix(const char *a __unused, const char *b __unused)
{
	return;
}

/* repeat functions */
#undef gettext
#undef dgettext
#undef dcgettext
#undef ngettext
#undef dngettext
#undef dcngettext
#undef dcigettext
#undef textdomain
#undef bindtextdomain
#undef bind_textdomain_codeset
#include "meat.c"

#define gettext libintl_gettext
#define dgettext libintl_dgettext
#define dcgettext libintl_dcgettext
#define ngettext libintl_ngettext
#define dngettext libintl_dngettext
#define dcngettext libintl_dcngettext
#define dcigettext libintl_dcigettext
#define textdomain libintl_textdomain
#define bindtextdomain libintl_bindtextdomain
#define bind_textdomain_codeset libintl_bind_textdomain_codeset
#define gettext_free_exp libintl_gettext_free_exp
#define gettextparse libintl_gettextparse
#define LIBINTL_REDEFINE
#include "libintl.h"
#include "meat.c"

#undef gettext
#undef dgettext
#undef dcgettext
#undef ngettext
#undef dngettext
#undef dcngettext
#undef dcigettext
#undef textdomain
#undef bindtextdomain
#undef bind_textdomain_codeset
#undef gettext_free_exp
#undef gettextparse

#define gettext gettext__
#define dgettext dgettext__
#define dcgettext dcgettext__
#define ngettext ngettext__
#define dngettext dngettext__
#define dcngettext dcngettext__
#define dcigettext dcigettext__
#define textdomain textdomain__
#define bindtextdomain bindtextdomain__
#define bind_textdomain_codeset bind_textdomain_codeset__
#define gettext_free_exp gettext_free_exp__
#define gettextparse gettextparse__
#include "libintl.h"
#include "meat.c"
@


1.8
log
@add some more fault tolerance against both glibc and linux-kernel-headers
@
text
@d2 1
a2 1
 * Copyright (c) 2007
d30 2
a31 2
static const char __rcsid_intl[] __attribute__((used)) =
    "$MirOS: contrib/hosted/libnointl/nointl.c,v 1.7 2008/05/03 01:09:30 tg Exp $";
d34 1
a34 1
#define __unused	__attribute__((unused))
@


1.7
log
@remove advertising clause for all of contrib/ except
‣ heartbeat server/client, for now
‣ stuff in jupp that’ll be regenerated before next release anyway
@
text
@d21 1
d31 1
a31 1
    "$MirOS: contrib/hosted/libnointl/nointl.c,v 1.6 2007/07/14 19:51:02 tg Exp $";
d33 1
@


1.6
log
@don't define a symbol twice
@
text
@a10 9
 * Advertising materials mentioning features or use of this work must
 * display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 * This acknowledgement does not need to be reprinted if this work is
 * linked into a bigger work whose licence does not allow such clause
 * and the author of this work is given due credit in the bigger work
 * or its accompanying documents, where such information is generally
 * kept, provided that said credits are retained.
 *
d30 1
a30 1
    "$MirOS: contrib/hosted/libnointl/nointl.c,v 1.5 2007/07/14 19:50:18 tg Exp $";
@


1.5
log
@swishy reports that these symbols can be seeked too
@
text
@d39 1
a39 1
    "$MirOS: contrib/hosted/libnointl/nointl.c,v 1.4 2007/06/27 23:19:55 tg Exp $";
a201 1
#define LIBINTL_REDEFINE
@


1.4
log
@fix build, noted by swishy, bad mira
@
text
@d39 1
a39 1
    "$MirOS: contrib/hosted/libnointl/nointl.c,v 1.3 2007/06/25 16:32:54 tg Exp $";
d47 3
d57 1
@


1.3
log
@finish working on libnointl
@
text
@d39 1
a39 1
    "$MirOS$";
d130 1
@


1.2
log
@be explicit about where this is from
@
text
@d38 2
a39 1
__RCSID("$MirOS: contrib/hosted/libnointl/nointl.c,v 1.1 2007/06/25 10:47:19 tg Exp $");
d58 28
a85 15
_nl_expand_alias
_nl_explode_name
_nl_find_domain
_nl_find_language
_nl_find_msg
_nl_free_domain_conv
_nl_init_domain_conv
_nl_language_preferences_default
_nl_load_domain
_nl_locale_name
_nl_locale_name_default
_nl_locale_name_posix
_nl_log_untranslated
_nl_make_l10nflist
_nl_normalize_codeset
d172 13
@


1.1
log
@beginnings of a GNU gettext compatible libintl
@
text
@d38 1
a38 1
__RCSID("$MirOS: src/share/misc/licence.template,v 1.23 2007/06/05 10:05:25 tg Rel $");
d89 1
@

