head	1.30;
access;
symbols
	BSD__arc4random-1_40:1.29
	BSD__arc4random-1_30:1.26
	BSD__arc4random-1_22:1.25
	BSD__arc4random-1_21:1.24
	BSD__arc4random-1_00:1.18
	start:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@# @;


1.30
date	2009.05.17.13.00.59;	author tg;	state dead;
branches;
next	1.29;
commitid	1004A100A8147CADED8;

1.29
date	2008.12.26.14.11.09;	author tg;	state Exp;
branches;
next	1.28;
commitid	1004954E60D10D05C36;

1.28
date	2008.12.08.13.41.44;	author tg;	state Exp;
branches;
next	1.27;
commitid	100493D240968D6BAEA;

1.27
date	2008.07.28.01.42.07;	author tg;	state Exp;
branches;
next	1.26;
commitid	100488D23DF10DD6C4A;

1.26
date	2008.07.20.15.27.54;	author tg;	state Exp;
branches;
next	1.25;
commitid	100488359870662909B;

1.25
date	2008.07.15.21.37.36;	author tg;	state Exp;
branches;
next	1.24;
commitid	100487D18B2628B9ED1;

1.24
date	2008.07.13.16.10.34;	author tg;	state Exp;
branches;
next	1.23;
commitid	100487A28F1255F17EE;

1.23
date	2008.07.13.02.21.02;	author tg;	state Exp;
branches;
next	1.22;
commitid	1004879669062FF0ED7;

1.22
date	2008.07.13.01.46.50;	author tg;	state Exp;
branches;
next	1.21;
commitid	10048795E9437C3BA3C;

1.21
date	2008.07.12.23.59.21;	author tg;	state Exp;
branches;
next	1.20;
commitid	1004879456823546B21;

1.20
date	2008.07.12.19.21.56;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004879045E7A21C79E;

1.19
date	2008.07.11.15.17.23;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004877798A5C5BFDBE;

1.18
date	2008.07.10.17.43.12;	author tg;	state Exp;
branches;
next	1.17;
commitid	10048764A3655CD59DC;

1.17
date	2008.07.10.17.27.44;	author tg;	state Exp;
branches;
next	1.16;
commitid	100487646944C1A80D0;

1.16
date	2008.07.10.17.19.56;	author tg;	state Exp;
branches;
next	1.15;
commitid	100487644CE22C1D830;

1.15
date	2008.07.10.17.09.33;	author tg;	state Exp;
branches;
next	1.14;
commitid	100487642584D70F729;

1.14
date	2008.07.10.17.06.42;	author tg;	state Exp;
branches;
next	1.13;
commitid	100487641B06441CB01;

1.13
date	2008.07.10.16.54.07;	author tg;	state Exp;
branches;
next	1.12;
commitid	10048763EB97396DF1C;

1.12
date	2008.07.10.16.29.39;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004876390468F06723;

1.11
date	2008.07.10.16.21.29;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004876371872E5EB29;

1.10
date	2008.07.08.23.48.20;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004873FCCE2413B220;

1.9
date	2008.07.08.18.25.29;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004873B12E2B1CC55B;

1.8
date	2008.07.08.13.46.58;	author tg;	state Exp;
branches;
next	1.7;
commitid	10048736FDC4E97D43C;

1.7
date	2008.07.08.01.46.36;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004872C6E05F862AA8;

1.6
date	2008.07.08.01.12.43;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004872BF1C5DFC9289;

1.5
date	2008.07.08.01.08.35;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004872BE2736282F56;

1.4
date	2008.07.08.01.03.30;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004872BCE923B36EDD;

1.3
date	2008.07.08.00.52.04;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004872BA403C4C102A;

1.2
date	2008.07.08.00.46.59;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004872B91874E73D66;

1.1
date	2008.07.08.00.44.10;	author tg;	state Exp;
branches
	1.1.201.1;
next	;
commitid	1004872B8606E7F66C2;

1.1.201.1
date	2008.07.08.00.44.10;	author tg;	state Exp;
branches;
next	;
commitid	1004872B8606E7F66C2;


desc
@@


1.30
log
@move mircvs://contrib/hosted/p5/BSD/arc4random/
  to mircvs://contrib/hosted/tg/code/BSD::arc4random/
and remove the entire mircvs://contrib/hosted/p5/ hierarchy
@
text
@# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.29 2008/12/26 14:11:09 tg Exp $
#-
# Copyright (c) 2008
#	Thorsten Glaser <tg@@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.

package BSD::arc4random;

use strict;
use warnings;
use threads::shared;

BEGIN {
	require Exporter;
	require DynaLoader;
	use vars qw($VERSION @@ISA @@EXPORT @@EXPORT_OK %EXPORT_TAGS);
	$VERSION = "1.40";
	@@ISA = qw(Exporter DynaLoader);
	@@EXPORT = qw();
	@@EXPORT_OK = qw(
		$RANDOM
		&arc4random
		&arc4random_addrandom
		&arc4random_bytes
		&arc4random_pushb
		&arc4random_pushk
		&arc4random_stir
		&arc4random_uniform
	);
	%EXPORT_TAGS = (
		all => [ @@EXPORT_OK ],
	);
}

use vars qw($RANDOM);		# public tied integer variable
sub have_kintf() {}		# public constant function, prototyped


# private thread lock
my $arcfour_lock : shared;

bootstrap BSD::arc4random $BSD::arc4random::VERSION;

# public thread-safe functions
sub
arc4random()
{
	lock($arcfour_lock);
	return &arc4random_xs();
}

sub
arc4random_addrandom($)
{
	my $buf = shift;

	lock($arcfour_lock);
	return &arc4random_addrandom_xs($buf);
}

sub
arc4random_pushb($)
{
	my $buf = shift;

	lock($arcfour_lock);
	return &arc4random_pushb_xs($buf);
}

sub
arc4random_pushk($)
{
	my $buf = shift;

	lock($arcfour_lock);
	return &arc4random_pushk_xs($buf);
}

sub
arc4random_stir()
{
	lock($arcfour_lock);
	&arc4random_stir_xs();
	return;
}

sub
arc4random_bytes($;$)
{
	my ($len, $buf) = @@_;
	my $val;
	my $vleft = 0;
	my $rv = '';
	my $idx = 0;

	if (defined($buf)) {
		$val = arc4random_pushb($buf);
		$vleft = 4;
	}
	while (($len - $idx) >= 4) {
		if ($vleft < 4) {
			$val = arc4random();
			$vleft = 4;
		}
		vec($rv, $idx / 4, 32) = $val;
		$idx += 4;
		$vleft = 0;
	}
	while ($idx < $len) {
		if ($vleft == 0) {
			$val = arc4random();
			$vleft = 4;
		}
		vec($rv, $idx, 8) = $val & 0xFF;
		$idx++;
		$val >>= 8;
		$vleft--;
	}
	return $rv;
}

# Perl implementation of arc4random_uniform(3)
# C implementation contributed by djm@@openbsd.org, Jinmei_Tatuya@@isc.org
#
# Calculate a uniformly distributed random number less than upper_bound
# avoiding "modulo bias".
#
# Uniformity is achieved by generating new random numbers until the one
# returned is outside the range [0, 2**32 % upper_bound).  This
# guarantees the selected random number will be inside
# [2**32 % upper_bound, 2**32) which maps back to [0, upper_bound)
# after reduction modulo upper_bound.

sub
arc4random_uniform($)
{
	my $upper_bound = shift;
	my $r;
	my $min;

	return 0 unless defined($upper_bound);
	$upper_bound &= ~0;	# convert to UV (unsigned integer value)
	return 0 if $upper_bound < 2 || $upper_bound > 0xFFFFFFFF;

	# Calculate (2**32 % upper_bound) avoiding 64-bit math
	if ($upper_bound > 0x80000000) {
		$min = 1 + ~$upper_bound;	# 2**32 - upper_bound
	} else {
		# (2**32 - x) % x == 2**32 % x when x <= 2**31
		$min = ((0xFFFFFFFF - $upper_bound) + 1) % $upper_bound;
	}

	# This could theoretically loop forever but each retry has
	# p > 0.5 (worst case, usually far better) of selecting a
	# number inside the range we need, so it should rarely need
	# to re-roll.
	while (1) {
		$r = arc4random();
		last if $r >= $min;
	}

	return ($r % $upper_bound);
}

# private implementation for a tied $RANDOM variable
sub
TIESCALAR
{
	my $class = shift;
	my $max = shift;

	if (!defined($max) || ($max = int($max)) > 0xFFFFFFFE || $max < 0) {
		$max = 0;
	}

	return bless \$max, $class;
}

sub
FETCH
{
	my $self = shift;

	return ($$self == 0 ? arc4random() : arc4random_uniform($$self + 1));
}

sub
STORE
{
	my $self = shift;
	my $value = shift;

	arc4random_pushb($value);
}

# tie the public $RANDOM variable to an mksh-style implementation
tie $RANDOM, 'BSD::arc4random', 0x7FFF;

# we are nice and re-seed perl's internal PRNG as well
srand(arc4random_pushb(pack("F*", rand(), rand(), rand(), rand())));

1;
__END__

=head1 NAME

BSD::arc4random - Perl interface to the arc4 random number generator

=head1 SYNOPSIS

  use BSD::arc4random qw(:all);
  $v = arc4random();
  $v = arc4random_uniform($hz);
  if (!BSD::arc4random::have_kintf()) {
    $v = arc4random_addrandom("entropy to pass to the system");
  } else {
    $v = arc4random_pushb("entropy to pass to the system");
    $v = arc4random_pushk("entropy to pass to the kernel");
  }
  $s = arc4random_bytes(16, "entropy to pass to libc");
  arc4random_stir();
  $s = arc4random_bytes(16);
  print $RANDOM;

=head1 DESCRIPTION

This set of functions maps the L<arc4random(3)> family of libc functions
into Perl code.
All functions listed below are ithreads-safe.
The internal XS functions are not, but you are not supposed
to call them, either.

On module load, perl's internal PRNG is re-seeded, as a bonus, using
B<srand> with an argument calculated from using B<arc4random_pushb>
on some entropy returned from B<rand>'s previous state.

=head2 LOW-LEVEL FUNCTIONS

=item B<arc4random>()

This function returns an unsigned 32-bit integer random value.

=item B<arc4random_addrandom>(I<pbuf>)

This function adds the entropy from I<pbuf> into the libc pool and
returns an unsigned 32-bit integer random value from it.

=item B<arc4random_pushb>(I<pbuf>)

This function first pushes the I<pbuf> argument to the kernel if possible,
then the entropy returned by the kernel into the libc pool, then
returns an unsigned 32-bit integer random value from it.

=item B<arc4random_pushk>(I<pbuf>)

This function first pushes the I<pbuf> argument to the kernel if possible,
then returns an unsigned 32-bit integer random value from the kernel.

=item B<arc4random_stir>()

This procedure attempts to retrieve new entropy from the kernel and add
it to the libc pool.
Usually, this means you must have access to the L<urandom(4)> device;
create it inside L<chroot(2)> jails first if you use them.

=item B<have_kintf>()

This constant function returns 1 if B<arc4random_pushb> and/or
B<arc4random_pushk> actually call the kernel interfaces, 0 if
they merely map to B<arc4random_addrandom> instead.

=head2 HIGH-LEVEL FUNCTIONS

=item B<arc4random_bytes>(I<num>[, I<pbuf>])

This function returns a string containing as many random bytes as
requested by the integral argument I<num>.
An optional I<pbuf> argument is passed to the system first.

=item B<arc4random_uniform>(I<upper_bound>)

Calculate a uniformly distributed random number less than upper_bound
avoiding "modulo bias".

=head2 PACKAGE VARIABLES

=item B<$RANDOM>

The B<$RANDOM> returns a random value in the range S<[0; 32767]> on
each read attempt and pushes any value it is assigned to the kernel.
It is tied at module load time.

=item tie I<variable>, 'BSD::arc4random'[, I<max>]

You can tie any scalar variable to this package; the I<max> argument
is the maximum number returned; if undefined, 0 or S<E<62>= 0xFFFFFFFF>,
no bound is used, and values in the range S<[0; 2**32-1]> are returned.
They will behave like B<$RANDOM>.

=head1 AUTHOR

Thorsten Glaser E<lt>tg@@mirbsd.deE<gt>

=head1 SEE ALSO

The L<arc4random(3)> manual page, available online at:
L<https://www.mirbsd.org/man/arc4random.3>

Perl's L<rand> and L<srand> functions via L<perlfunc> and L<perlfaq4>.

The B<randex.pl> plugin for Irssi, implementing the MirOS RANDEX
protocol (entropy exchange over IRC), with CVSweb at:
L<http://cvs.mirbsd.de/ports/net/irssi/files/randex.pl>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2008 Thorsten "mirabilos" Glaser

This module is covered by the MirOS Licence:
L<http://mirbsd.de/MirOS-Licence>

The original C implementation of arc4random_uniform was contributed by
Damien Miller from OpenBSD, with simplifications by Jinmei Tatuya.

=cut
@


1.29
log
@prepare a new (intermediate) release
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.28 2008/12/08 13:41:44 tg Exp $
@


1.28
log
@* merge new arc4random.c
* acknowledge that cygwin can pushb in Makefile.PL auto config
* bump patchlevel (XXX use string or numeric?)
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.27 2008/07/28 01:42:07 tg Exp $
d31 1
a31 1
	$VERSION = "1.32";
d321 1
a321 1
L<http://www.mirbsd.org/man/arc4random.3>
d325 4
@


1.27
log
@do not state any more which version of Perl is required, as ppport.h
suggests this is not portable below 5.6 either anyway (use of newXS)
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.26 2008/07/20 15:27:54 tg Exp $
d31 1
a31 1
	$VERSION = 1.30;
@


1.26
log
@version 1.3: expose void arc4random_stir(void);
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.25 2008/07/15 21:37:36 tg Exp $
a22 1
use 5.004_63;
@


1.25
log
@forgot to honour $libs, oO
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.24 2008/07/13 16:10:34 tg Exp $
d32 1
a32 1
	$VERSION = 1.22;
d42 1
d95 8
d235 2
d260 1
a260 1
This function adds the entropy from I<pbuf> into the libc pool, then
d274 7
@


1.24
log
@Damien Miller <djm@@mindrot.org> suggested to include the original comments:
“this is cryptographic code, and it helps that people understand it”

10x for allowing the code in
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.23 2008/07/13 02:21:02 tg Exp $
d32 1
a32 1
	$VERSION = 1.21;
@


1.23
log
@hack arc4random_uniform (derived from openbsd src/sys/dev/rnd.c) and
use it in the tied variable
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.22 2008/07/13 01:46:50 tg Exp $
d32 1
a32 1
	$VERSION = 1.20;
d130 10
d151 1
d159 4
@


1.22
log
@put the Perl book Dr. Robert “Pfeffer” Arnold gave me for birthday to good
use and implement a tied $RANDOM variable behaving like in mksh
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.21 2008/07/12 23:59:21 tg Exp $
d32 1
a32 1
	$VERSION = 1.10;
d42 1
d128 28
d175 1
a175 3
	my $x = ($$self == 0 ? arc4random() : (arc4random() % ($$self + 1)));

	return $x;
d204 1
d262 5
d300 3
@


1.21
log
@re-seed perl's PRNG; beef up README
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.20 2008/07/12 19:21:56 tg Exp $
a25 1
use integer;
d32 1
a32 1
	$VERSION = 1.03;
d36 1
d48 2
a49 1
sub have_kintf() {}	# public constant function, prototyped
d51 2
d57 1
d127 36
d184 1
d234 15
@


1.20
log
@make this work on Solaris 8 and compile on Solaris 10 (need thread::shared)
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.19 2008/07/11 15:17:23 tg Exp $
d33 1
a33 1
	$VERSION = 1.02;
d123 3
d153 4
d202 2
@


1.19
log
@Cygwin has working /dev/urandom even if you can’t readdir it
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.18 2008/07/10 17:43:12 tg Exp $
d33 1
a33 1
	$VERSION = 1.01;
@


1.18
log
@due to lack of further feedback, release this as version 1.00
revamp docs, credit people, etc.
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.17 2008/07/10 17:27:44 tg Exp $
d33 1
a33 1
	$VERSION = 1.00;
@


1.17
log
@simplify, fix perl API calls, add an API string including version
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.16 2008/07/10 17:19:56 tg Exp $
d33 1
a33 1
	$VERSION = 0.34;
d146 3
a148 1
All functions are ithreads-safe.
d197 1
a197 1
Copyright (c) 2008 Thorsten Glaser
@


1.16
log
@make easier and sync docs
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.15 2008/07/10 17:09:33 tg Exp $
d33 1
a33 1
	$VERSION = 0.33;
@


1.15
log
@use vars is said to be more compatible than our
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.14 2008/07/10 17:06:42 tg Exp $
d33 1
a33 1
	$VERSION = 0.32;
d48 1
a48 1
sub have_kintf() {}
d132 1
a132 1
  use BSD::arc4random;
d134 6
a139 2
  $v = arc4random_pushb("entropy to pass to the system");
  $v = arc4random_pushk("entropy to pass to the kernel");
d170 6
@


1.14
log
@make this compile, with __CRAZY=Yes even except system headers
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.13 2008/07/10 16:54:07 tg Exp $
d32 2
a33 2
	our ($VERSION, @@ISA, @@EXPORT, @@EXPORT_OK, %EXPORT_TAGS);
	$VERSION = 0.31;
a46 1
our @@EXPORT_OK;
@


1.13
log
@new not-exported have_kintf() constant function
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.12 2008/07/10 16:29:39 tg Exp $
d33 1
a33 1
	$VERSION = 0.30;
@


1.12
log
@export arc4random_addrandom
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.11 2008/07/10 16:21:29 tg Exp $
d23 1
a23 1
use 5.000;
d33 1
a33 1
	$VERSION = 0.20;
d49 2
@


1.11
log
@prevent inlining the xs functions
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.10 2008/07/08 23:48:20 tg Exp $
d33 1
a33 1
	$VERSION = 0.14;
d38 1
d61 9
d149 5
@


1.10
log
@experimental: add mksh/debian's arc4random impl
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.9 2008/07/08 18:25:29 tg Exp $
d56 1
a56 1
	return arc4random_xs();
d65 1
a65 1
	return arc4random_pushb_xs($buf);
d74 1
a74 1
	return arc4random_pushk_xs($buf);
@


1.9
log
@bump
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.8 2008/07/08 13:46:58 tg Exp $
d33 1
a33 1
	$VERSION = 0.12;
@


1.8
log
@algorithmic optimisation: take in 32-bit values at a time if we can
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.7 2008/07/08 01:46:36 tg Exp $
d33 1
a33 1
	$VERSION = 0.11;
@


1.7
log
@finally, arc4random_bytes function, I’m happy with it
overwork the docs etc. and call it a 0.10 version that
can be sent to the reviewers; before Vutral will upload
it to PAUSE it’ll be bumped to 1.00 of course.
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.5 2008/07/08 01:08:35 tg Exp $
d33 1
a33 1
	$VERSION = 0.10;
d90 9
@


1.6
log
@use integers here, I hate floats
@
text
@d33 1
a33 1
	$VERSION = 0.05;
d36 6
a41 1
	@@EXPORT_OK = qw(&arc4random &arc4random_pushb &arc4random_pushk);
d77 26
d116 1
d124 3
a126 1
=item B<arc4random>
d130 1
a130 1
=item B<arc4random_pushb>
d132 1
a132 1
This function first pushes the argument to the kernel if possible,
d136 1
a136 1
=item B<arc4random_pushk>
d138 1
a138 1
This function first pushes the argument to the kernel if possible,
d141 3
a143 1
=head1 CAVEATS
d145 3
a147 1
More functions will be implemented soon.
d151 1
a151 1
Thorsten Glaser, E<lt>tg@@mirbsd.deE<gt>
d162 2
a163 1
This module is covered by the MirOS Licence.
@


1.5
log
@add :all export tag
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.4 2008/07/08 01:03:30 tg Exp $
d26 1
d33 1
a33 1
	$VERSION = 0.04;
@


1.4
log
@make ithreads safe, cf. perlthrtut(1)
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.3 2008/07/08 00:52:04 tg Exp $
d32 1
a32 1
	$VERSION = 0.03;
a34 1
	%EXPORT_TAGS = ();
d36 3
@


1.3
log
@by suggestion of perlnewmod(3) use EXPORT_OK instead
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.2 2008/07/08 00:46:59 tg Exp $
d26 1
d32 1
a32 1
	$VERSION = 0.02;
d40 2
d47 1
d56 1
d65 1
d87 1
@


1.2
log
@remove debugging
@
text
@d1 1
a1 1
# $MirOS: contrib/hosted/p5/BSD/arc4random/lib/BSD/arc4random.pm,v 1.1.201.1 2008/07/08 00:44:10 tg Exp $
d31 1
a31 1
	$VERSION = 0.01;
d33 1
a33 1
	@@EXPORT = qw(&arc4random &arc4random_pushb &arc4random_pushk);
d35 1
a35 1
	@@EXPORT_OK = qw();
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $MirOS: src/share/misc/licence.template,v 1.24 2008/04/22 11:43:31 tg Rel $
d44 1
a44 6
	my $rv;

	print "D: calling arc4random()...";
	$rv = arc4random_xs();
	print " got ${rv}\n";
	return $rv;
a50 1
	my $rv;
d52 1
a52 4
	print "D: calling arc4random_pushb(${buf})...";
	$rv = arc4random_pushb_xs($buf);
	print " got ${rv}\n";
	return $rv;
a58 1
	my $rv;
d60 1
a60 4
	print "D: calling arc4random_pushk(${buf})...";
	$rv = arc4random_pushk_xs($buf);
	print " got ${rv}\n";
	return $rv;
@


1.1.201.1
log
@First cut at a Perl5 wrapper for arc4random(3) et al.

Unfinished, debugging version, but sort of working
@
text
@@
