head	1.16;
access;
symbols
	BSD__arc4random-1_40:1.15
	BSD__arc4random-1_30:1.15
	BSD__arc4random-1_22:1.14
	BSD__arc4random-1_21:1.14
	BSD__arc4random-1_00:1.12
	start:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@ * @;


1.16
date	2009.05.17.13.00.58;	author tg;	state dead;
branches;
next	1.15;
commitid	1004A100A8147CADED8;

1.15
date	2008.07.20.15.27.54;	author tg;	state Exp;
branches;
next	1.14;
commitid	100488359870662909B;

1.14
date	2008.07.12.19.21.56;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004879045E7A21C79E;

1.13
date	2008.07.12.19.06.42;	author tg;	state Exp;
branches;
next	1.12;
commitid	100487900C845650D97;

1.12
date	2008.07.10.17.30.20;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004876474342B9E8D4;

1.11
date	2008.07.10.17.27.43;	author tg;	state Exp;
branches;
next	1.10;
commitid	100487646944C1A80D0;

1.10
date	2008.07.10.17.19.56;	author tg;	state Exp;
branches;
next	1.9;
commitid	100487644CE22C1D830;

1.9
date	2008.07.10.17.06.42;	author tg;	state Exp;
branches;
next	1.8;
commitid	100487641B06441CB01;

1.8
date	2008.07.10.16.54.07;	author tg;	state Exp;
branches;
next	1.7;
commitid	10048763EB97396DF1C;

1.7
date	2008.07.10.16.35.22;	author tg;	state Exp;
branches;
next	1.6;
commitid	10048763A5E53D23989;

1.6
date	2008.07.10.16.29.39;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004876390468F06723;

1.5
date	2008.07.10.16.20.29;	author tg;	state Exp;
branches;
next	1.4;
commitid	100487636DD1E4022EF;

1.4
date	2008.07.08.18.21.45;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004873B03657576DBB;

1.3
date	2008.07.08.01.41.44;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004872C5E73FEE09C1;

1.2
date	2008.07.08.01.37.31;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004872C4E50AB99EC9;

1.1
date	2008.07.08.00.44.10;	author tg;	state Exp;
branches
	1.1.201.1;
next	;
commitid	1004872B8606E7F66C2;

1.1.201.1
date	2008.07.08.00.44.10;	author tg;	state Exp;
branches;
next	;
commitid	1004872B8606E7F66C2;


desc
@@


1.16
log
@move mircvs://contrib/hosted/p5/BSD/arc4random/
  to mircvs://contrib/hosted/tg/code/BSD::arc4random/
and remove the entire mircvs://contrib/hosted/p5/ hierarchy
@
text
@/*-
 * Copyright (c) 2008
 *	Thorsten Glaser <tg@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#include <sys/types.h>
#include <stdlib.h>

#if defined(HAVE_STDINT_H) && HAVE_STDINT_H
#include <stdint.h>
#elif defined(USE_INTTYPES)
#include <inttypes.h>
#endif

#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#ifndef __RCSID
#undef __IDSTRING
#undef __IDSTRING_CONCAT
#undef __IDSTRING_EXPAND
#define __IDSTRING_CONCAT(l,p)		__LINTED__ ## l ## _ ## p
#define __IDSTRING_EXPAND(l,p)		__IDSTRING_CONCAT(l,p)
#define __IDSTRING(prefix, string)				\
	static const char __IDSTRING_EXPAND(__LINE__,prefix) []	\
	    __attribute__((used)) = "@@(""#)" #prefix ": " string
#define __RCSID(x)			__IDSTRING(rcsid,x)
#endif

__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.15 2008/07/20 15:27:54 tg Exp $");

#ifdef REDEF_USCORETYPES
#define u_int32_t	uint32_t
#endif

#ifdef NEED_ARC4RANDOM_DECL
u_int32_t arc4random(void);
void arc4random_addrandom(u_char *, int);
#endif

XS(XS_BSD__arc4random_arc4random_xs);
XS(XS_BSD__arc4random_arc4random_xs)
{
	dXSARGS;
	dXSTARG;
	uint32_t rv;

	rv = arc4random();

	XSprePUSH;
	PUSHu((UV)rv);

	XSRETURN(1);
}

XS(XS_BSD__arc4random_stir_xs);
XS(XS_BSD__arc4random_stir_xs)
{
	dXSARGS;

	arc4random_stir();

	XSRETURN_EMPTY;
}

XS(XS_BSD__arc4random_arc4random_addrandom_xs);
XS(XS_BSD__arc4random_arc4random_addrandom_xs)
{
	dXSARGS;
	dXSTARG;
	SV *sv;
	char *buf;
	STRLEN len;
	uint32_t rv;

	sv = ST(0);
	buf = SvPV(sv, len);
	arc4random_addrandom((unsigned char *)buf, (int)len);
	rv = arc4random();
	XSprePUSH;
	PUSHu((UV)rv);

	XSRETURN(1);
}

#ifndef HAVE_ARC4RANDOM_PUSHB
#define HAVE_ARC4RANDOM_PUSHB	1
#endif

#if HAVE_ARC4RANDOM_PUSHB
XS(XS_BSD__arc4random_arc4random_pushb_xs);
XS(XS_BSD__arc4random_arc4random_pushb_xs)
{
	dXSARGS;
	dXSTARG;
	SV *sv;
	char *buf;
	STRLEN len;
	uint32_t rv;

	sv = ST(0);
	buf = SvPV(sv, len);
	rv = arc4random_pushb((void *)buf, (size_t)len);
	XSprePUSH;
	PUSHu((UV)rv);

	XSRETURN(1);
}
#elif defined(arc4random_pushk)
#define XS_BSD__arc4random_arc4random_pushb_xs \
	XS_BSD__arc4random_arc4random_pushk_xs
#else
#define XS_BSD__arc4random_arc4random_pushb_xs \
	XS_BSD__arc4random_arc4random_addrandom_xs
#endif

#if defined(arc4random_pushk)
XS(XS_BSD__arc4random_arc4random_pushk_xs);
XS(XS_BSD__arc4random_arc4random_pushk_xs)
{
	dXSARGS;
	dXSTARG;
	SV *sv;
	char *buf;
	STRLEN len;
	uint32_t rv;

	sv = ST(0);
	buf = SvPV(sv, len);
	rv = arc4random_pushk((void *)buf, (size_t)len);
	XSprePUSH;
	PUSHu((UV)rv);

	XSRETURN(1);
}
#elif HAVE_ARC4RANDOM_PUSHB
#define XS_BSD__arc4random_arc4random_pushk_xs \
	XS_BSD__arc4random_arc4random_pushb_xs
#else
#define XS_BSD__arc4random_arc4random_pushk_xs \
	XS_BSD__arc4random_arc4random_addrandom_xs
#endif

#undef HAVE_ARC4RANDOM_KINTF
#if HAVE_ARC4RANDOM_PUSHB || defined(arc4random_pushk)
#define HAVE_ARC4RANDOM_KINTF	1
#else
#define HAVE_ARC4RANDOM_KINTF	0
#endif

__IDSTRING(api_text, "BSD::arc4random " XS_VERSION " with {"
    " arc4random"
    " arc4random_addrandom"
#if HAVE_ARC4RANDOM_PUSHB
    " arc4random_pushb"
#endif
#if defined(arc4random_pushk)
    " arc4random_pushk"
#endif
#if HAVE_ARC4RANDOM_KINTF
    " have_kintf:=1"
#else
    " have_kintf:=0"
#endif
    " }");

static char file[] = __FILE__;
static char func_a4r[] = "BSD::arc4random::arc4random_xs";
static char func_a4add[] = "BSD::arc4random::arc4random_addrandom_xs";
static char func_a4rpb[] = "BSD::arc4random::arc4random_pushb_xs";
static char func_a4rpk[] = "BSD::arc4random::arc4random_pushk_xs";
static char func_astir[] = "BSD::arc4random::arc4random_stir_xs";
static char func_kintf[] = "BSD::arc4random::have_kintf";

#ifdef __cplusplus
extern "C"
#endif
XS(boot_BSD__arc4random);
XS(boot_BSD__arc4random)
{
	dXSARGS;

	XS_VERSION_BOOTCHECK;

	newXS(func_a4r, XS_BSD__arc4random_arc4random_xs, file);
	newXS(func_a4add, XS_BSD__arc4random_arc4random_addrandom_xs, file);
	newXS(func_a4rpb, XS_BSD__arc4random_arc4random_pushb_xs, file);
	newXS(func_a4rpk, XS_BSD__arc4random_arc4random_pushk_xs, file);
	newXS(func_astir, XS_BSD__arc4random_stir_xs, file);

	newCONSTSUB(NULL, func_kintf, newSViv(HAVE_ARC4RANDOM_KINTF));

	XSRETURN_YES;
}
@


1.15
log
@version 1.3: expose void arc4random_stir(void);
@
text
@d46 1
a46 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.14 2008/07/12 19:21:56 tg Exp $");
@


1.14
log
@make this work on Solaris 8 and compile on Solaris 10 (need thread::shared)
@
text
@d46 1
a46 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.13 2008/07/12 19:06:42 tg Exp $");
d72 10
d188 1
d205 1
@


1.13
log
@let's just ignore the unused-warnings and hope that THIS works on slowlaris
@
text
@d24 6
d46 10
a55 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.12 2008/07/10 17:30:20 tg Exp $");
@


1.12
log
@fix
@
text
@d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.11 2008/07/10 17:27:43 tg Exp $");
d45 1
a45 3
	dSP;
	dAXMARK;
	PERL_UNUSED_DECL dITEMS;
d60 1
a60 3
	dSP;
	dAXMARK;
	PERL_UNUSED_DECL dITEMS;
d85 1
a85 3
	dSP;
	dAXMARK;
	PERL_UNUSED_DECL dITEMS;
d112 1
a112 3
	dSP;
	dAXMARK;
	PERL_UNUSED_DECL dITEMS;
@


1.11
log
@simplify, fix perl API calls, add an API string including version
@
text
@d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.10 2008/07/10 17:19:56 tg Exp $");
d159 5
a163 1
    " have_kintf(" #HAVE_ARC4RANDOM_KINTF ")"
@


1.10
log
@make easier and sync docs
@
text
@d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.9 2008/07/10 17:06:42 tg Exp $");
d94 1
a94 1
	const char *buf;
d100 1
a100 1
	rv = arc4random_pushb((const void *)buf, (size_t)len);
d123 1
a123 1
	const char *buf;
d129 1
a129 1
	rv = arc4random_pushk((const void *)buf, (size_t)len);
d150 12
@


1.9
log
@make this compile, with __CRAZY=Yes even except system headers
@
text
@d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.8 2008/07/10 16:54:07 tg Exp $");
d155 1
a155 1
static char func_kintf[] = "have_kintf";
a163 1
	HV *stash;
d172 1
a172 2
	stash = gv_stashpv("BSD::arc4random", TRUE);
	newCONSTSUB(stash, func_kintf, newSViv(HAVE_ARC4RANDOM_KINTF));
@


1.8
log
@new not-exported have_kintf() constant function
@
text
@d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.7 2008/07/10 16:35:22 tg Exp $");
d45 3
a47 1
	dXSARGS;
d62 3
a64 1
	dXSARGS;
d67 1
a67 1
	const char *buf;
d73 1
a73 1
	arc4random_addrandom((const unsigned char *)buf, (int)len);
d85 1
d89 3
a91 1
	dXSARGS;
d118 3
a120 1
	dXSARGS;
d155 1
d174 1
a174 1
	newCONSTSUB(stash, "have_kintf", newSViv(HAVE_ARC4RANDOM_KINTF));
@


1.7
log
@save on code
@
text
@d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.6 2008/07/10 16:29:39 tg Exp $");
d154 1
d163 3
@


1.6
log
@export arc4random_addrandom
@
text
@d40 1
a40 5
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.5 2008/07/10 16:20:29 tg Exp $");

#ifndef HAVE_ARC4RANDOM_PUSHB
#define HAVE_ARC4RANDOM_PUSHB	1
#endif
d77 4
a92 1
#if HAVE_ARC4RANDOM_PUSHB
a93 4
#else
	arc4random_addrandom((const unsigned char *)buf, (int)len);
	rv = arc4random();
#endif
d99 6
a104 5

#ifndef arc4random_pushk
#if HAVE_ARC4RANDOM_PUSHB
#define arc4random_pushk	arc4random_pushb
#endif
d107 1
a119 1
#ifdef arc4random_pushk
a120 4
#else
	arc4random_addrandom((const unsigned char *)buf, (int)len);
	rv = arc4random();
#endif
d126 14
@


1.5
log
@remove the croaks; we don't export the xs functions anyway,
and they're always called correctly, as we check XS_VERSION
@
text
@d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.4 2008/07/08 18:21:45 tg Exp $");
d61 20
d137 1
d152 1
@


1.4
log
@arc4random_pushb ipv arc4random_pushk is still better than none at all
(e.g. MirOS #10-beta and older)
@
text
@d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.3 2008/07/08 01:41:44 tg Exp $");
a52 3
	if (items != 0)
		Perl_croak(aTHX_ "Usage: BSD::arc4random::arc4random_xs()");

a70 3
	if (items != 1)
		Perl_croak(aTHX_ "Usage: BSD::arc4random::arc4random_pushb_xs(buf)");

a100 3
	if (items != 1)
		Perl_croak(aTHX_ "Usage: BSD::arc4random::arc4random_pushk_xs(buf)");

@


1.3
log
@use static storage, safer
@
text
@d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.2 2008/07/08 01:37:31 tg Exp $");
d91 6
@


1.2
log
@const-correctness, even if the Perl API is not gcc warning clean, my code is
@
text
@d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/p5/BSD/arc4random/arc4rnd_xs.c,v 1.1.201.1 2008/07/08 00:44:10 tg Exp $");
d118 5
a129 4
	char file[] = __FILE__;
	char func_a4r[] = "BSD::arc4random::arc4random_xs";
	char func_a4rpb[] = "BSD::arc4random::arc4random_pushb_xs";
	char func_a4rpk[] = "BSD::arc4random::arc4random_pushk_xs";
@


1.1
log
@Initial revision
@
text
@d40 1
a40 1
__RCSID("$MirOS: src/share/misc/licence.template,v 1.24 2008/04/22 11:43:31 tg Rel $");
d126 3
d132 3
a134 3
	newXS("BSD::arc4random::arc4random_xs", XS_BSD__arc4random_arc4random_xs, file);
	newXS("BSD::arc4random::arc4random_pushb_xs", XS_BSD__arc4random_arc4random_pushb_xs, file);
	newXS("BSD::arc4random::arc4random_pushk_xs", XS_BSD__arc4random_arc4random_pushk_xs, file);
@


1.1.201.1
log
@First cut at a Perl5 wrapper for arc4random(3) et al.

Unfinished, debugging version, but sort of working
@
text
@@
