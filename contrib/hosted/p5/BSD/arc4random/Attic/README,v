head	1.21;
access;
symbols
	BSD__arc4random-1_40:1.20
	BSD__arc4random-1_30:1.18
	BSD__arc4random-1_22:1.16
	BSD__arc4random-1_21:1.15
	BSD__arc4random-1_00:1.6
	start:1.1.201.1
	tg:1.1.201;
locks; strict;
comment	@# @;


1.21
date	2009.05.17.13.00.57;	author tg;	state dead;
branches;
next	1.20;
commitid	1004A100A8147CADED8;

1.20
date	2008.12.26.14.11.08;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004954E60D10D05C36;

1.19
date	2008.07.28.01.42.06;	author tg;	state Exp;
branches;
next	1.18;
commitid	100488D23DF10DD6C4A;

1.18
date	2008.07.20.15.27.54;	author tg;	state Exp;
branches;
next	1.17;
commitid	100488359870662909B;

1.17
date	2008.07.20.15.08.37;	author tg;	state Exp;
branches;
next	1.16;
commitid	100488355032A2AF712;

1.16
date	2008.07.15.21.37.36;	author tg;	state Exp;
branches;
next	1.15;
commitid	100487D18B2628B9ED1;

1.15
date	2008.07.13.16.10.34;	author tg;	state Exp;
branches;
next	1.14;
commitid	100487A28F1255F17EE;

1.14
date	2008.07.13.02.23.58;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004879674B483C809A;

1.12
date	2008.07.13.01.46.50;	author tg;	state Exp;
branches;
next	1.11;
commitid	10048795E9437C3BA3C;

1.11
date	2008.07.12.23.59.20;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004879456823546B21;

1.10
date	2008.07.12.23.19.35;	author tg;	state Exp;
branches;
next	1.9;
commitid	10048793C1C4A2A22D3;

1.9
date	2008.07.12.19.21.56;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004879045E7A21C79E;

1.8
date	2008.07.11.20.53.00;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004877C83866DC1FD9;

1.7
date	2008.07.11.15.17.21;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004877798A5C5BFDBE;

1.6
date	2008.07.10.17.43.11;	author tg;	state Exp;
branches;
next	1.5;
commitid	10048764A3655CD59DC;

1.5
date	2008.07.08.23.48.19;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004873FCCE2413B220;

1.4
date	2008.07.08.18.28.48;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004873B1EE3F2A1440;

1.3
date	2008.07.08.13.46.58;	author tg;	state Exp;
branches;
next	1.2;
commitid	10048736FDC4E97D43C;

1.2
date	2008.07.08.01.46.35;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004872C6E05F862AA8;

1.1
date	2008.07.08.00.44.10;	author tg;	state Exp;
branches
	1.1.201.1;
next	;
commitid	1004872B8606E7F66C2;

1.1.201.1
date	2008.07.08.00.44.10;	author tg;	state Exp;
branches;
next	;
commitid	1004872B8606E7F66C2;


desc
@@


1.21
log
@move mircvs://contrib/hosted/p5/BSD/arc4random/
  to mircvs://contrib/hosted/tg/code/BSD::arc4random/
and remove the entire mircvs://contrib/hosted/p5/ hierarchy
@
text
@BSD::arc4random version 1.40
============================

This module provides a Perl API for the BSDs' arc4random(3) suite
of functions and adds a few high-level functions, such as the new
arc4random_uniform(3). The Perl functions are ithreads-safe. Scalars
can be tied to this package, yielding uniformly distributed random
numbers with an arbitrary upper bound on read access, contributing
to the entropy pool on write access. A global $RANDOM variable will
return 15-bit unsigned random numbers (in [0; 32767]), as in mksh.
Furthermore, Perl's internal PRNG is seeded with entropy obtained
from the arc4random generator once on module load time.

INSTALLATION

Makefile.PL tries to auto-detect existence of arc4random_pushb by
looking at the operating system used; see below if this fails:

If your system does not have arc4random_pushb(3), edit the DEFINE
line in Makefile.PL to define HAVE_ARC4RANDOM_PUSHB to 0 and make
sure at least arc4random_addrandom(3) exists. *HOWEVER* note that
then, entropy pushed into the system will end up in the process's
own pool instead of in the kernel. You can fix this by regularily
calling arc4random() or arc4random_bytes() and writing the output
to /dev/urandom or similar (after obtaining permissions) FROM THE
SAME PROCESS/SCRIPT (other ithread is okay) or, better, providing
at compile time an arc4random_pushb(3)* implementation collecting
entropy, sending it to a sensible place, e.g. a gathering daemon.

Using a seed file, similar to the randex.pl Irssi plugin, is also
a viable option. Future versions of this module will have support
for seed files and entropy daemons included.

*) http://www.mirbsd.org/man3/arc4random

If your system's arc4random(3) function suite is not in libc, edit
the LIBS line in Makefile.PL to include the appropriate library,
e.g. -lbsd on Debian or -lcrypt on Interix, and possibly the INC
line to use the appropriate header, e.g. something like this for
Debian libbsd: '-include /usr/include/bsd/bsd.h'

NOTE: This version of BSD::arc4random comes with an experimental
implementation tested on Debian instead, since libbsd is not yet
ready to use. This is a kludge and will go away. It is only used
automatically on Debian GNU/HURD, GNU/kFreeBSD, GNU/Linux, and
Cygwin and Solaris. It can be used on some BSDs as well; support
for pushing back entropy is available on Cygwin/WIN32 and MirBSD.

To install this module type the following:

   perl Makefile.PL
   make
   make test
   make install

DEPENDENCIES

This module requires arc4random(3), arc4random_addrandom(3) and
arc4random_stir(3) in libc. There are configuration options in
Makefile.PL, to change for example, if a different library like
libcrypt on Interix or libbsd on Debian is required to pull in
these functions.

COPYRIGHT AND LICENCE

Copyright (c) 2008 by Thorsten "mirabilos" Glaser, MirOS Project
Uploaded to CPAN by: Sebastian "Vutral" Schwarz (PAUSE ID: SJSZ)
The arc4random(9) PRNG has been invented by the OpenBSD Project.
The arc4random_uniform algorithm is derived from the code in the
OpenBSD kernel, published by Damien Miller under the ISC licence
(although no code was copied, acknowledgement is granted).

This module is covered by the MirOS Licence: http://mirbsd.de/MirOS-Licence

___________________________________________________________________________________
$MirOS: contrib/hosted/p5/BSD/arc4random/README,v 1.20 2008/12/26 14:11:08 tg Exp $
@


1.20
log
@prepare a new (intermediate) release
@
text
@d76 1
a76 1
$MirOS: contrib/hosted/p5/BSD/arc4random/README,v 1.19 2008/07/28 01:42:06 tg Exp $
@


1.19
log
@do not state any more which version of Perl is required, as ppport.h
suggests this is not portable below 5.6 either anyway (use of newXS)
@
text
@d1 1
a1 1
BSD::arc4random version 1.30
d30 4
d46 2
a47 1
Cygwin and Solaris.
d69 3
a71 2
The arc4random_uniform implementation is derived from OpenBSD
kernel code, contributed by Damien Miller.
d76 1
a76 1
$MirOS: contrib/hosted/p5/BSD/arc4random/README,v 1.18 2008/07/20 15:27:54 tg Exp $
@


1.18
log
@version 1.3: expose void arc4random_stir(void);
@
text
@a15 2
Perl 5.004_63 required.

d70 1
a70 1
$MirOS: contrib/hosted/p5/BSD/arc4random/README,v 1.17 2008/07/20 15:08:37 tg Exp $
@


1.17
log
@Vutral requested a test suite to quell CPAN warning eMails
@
text
@d1 1
a1 1
BSD::arc4random version 1.22
d55 5
a59 4
This module requires arc4random(3) and arc4random_addrandom(3) in
libc. There are configuration options in Makefile.PL, to change
for example, if a different library like libcrypt on Interix is
required to pull in these functions.
d72 1
a72 1
$MirOS: contrib/hosted/p5/BSD/arc4random/README,v 1.16 2008/07/15 21:37:36 tg Exp $
@


1.16
log
@forgot to honour $libs, oO
@
text
@d50 1
d71 1
a71 1
$MirOS: contrib/hosted/p5/BSD/arc4random/README,v 1.15 2008/07/13 16:10:34 tg Exp $
@


1.15
log
@Damien Miller <djm@@mindrot.org> suggested to include the original comments:
“this is cryptographic code, and it helps that people understand it”

10x for allowing the code in
@
text
@d1 1
a1 1
BSD::arc4random version 1.21
d70 1
a70 1
$MirOS: contrib/hosted/p5/BSD/arc4random/README,v 1.14 2008/07/13 02:23:58 tg Exp $
@


1.14
log
@document
@
text
@d1 1
a1 1
BSD::arc4random version 1.20
d64 2
a65 1
The arc4random_uniform implementation is derived from OpenBSD kernel code.
d70 1
a70 1
$MirOS: contrib/hosted/p5/BSD/arc4random/README,v 1.12 2008/07/13 01:46:50 tg Exp $
@


1.12
log
@put the Perl book Dr. Robert “Pfeffer” Arnold gave me for birthday to good
use and implement a tied $RANDOM variable behaving like in mksh
@
text
@d1 1
a1 1
BSD::arc4random version 1.10
d5 8
a12 7
of functions. The Perl functions are ithreads-safe. Scalars can
be tied to this package, yielding random numbers with an arbitrary
upper bound on each read access, contributing to the entropy pool
on each write access. A global $RANDOM variable will return 15-bit
unsigned random numbers, like in mksh. Furthermore, Perl's internal
PRNG is seeded with entropy obtained from the arc4random generator
on module loading, once.
d64 1
d69 1
a69 1
$MirOS: contrib/hosted/p5/BSD/arc4random/README,v 1.11 2008/07/12 23:59:20 tg Exp $
@


1.11
log
@re-seed perl's PRNG; beef up README
@
text
@d1 1
a1 1
BSD::arc4random version 1.03
d5 7
a11 3
of functions. The Perl functions are ithreads-safe. Furthermore,
Perl's internal PRNG is re-seeded with entropy obtained from the
arc4random generator on module loading, once.
d67 1
a67 1
$MirOS: contrib/hosted/p5/BSD/arc4random/README,v 1.10 2008/07/12 23:19:35 tg Exp $
@


1.10
log
@add RCS ID
@
text
@d1 1
a1 1
BSD::arc4random version 1.02
d4 4
a7 10
The README is used to introduce the module and provide instructions on
how to install the module, any machine dependencies it may have (for
example C compilers and installed libraries) and any other information
that should be provided before the module is installed.

A README file is required for CPAN modules since CPAN extracts the
README file from a module distribution so that people browsing the
archive can use it get an idea of the modules uses. It is usually a
good idea to provide version information here so that people can
decide whether fixes for the module are worth downloading.
d63 1
a63 1
$MirOS$
@


1.9
log
@make this work on Solaris 8 and compile on Solaris 10 (need thread::shared)
@
text
@d67 3
@


1.8
log
@ISTR mksh can use arc4random.c on Slowlartus too
@
text
@d1 1
a1 1
BSD::arc4random version 1.01
@


1.7
log
@Cygwin has working /dev/urandom even if you can’t readdir it
@
text
@d45 1
a45 1
Cygwin.
@


1.6
log
@due to lack of further feedback, release this as version 1.00
revamp docs, credit people, etc.
@
text
@d1 1
a1 1
BSD::arc4random version 1.00
d44 2
a45 1
automatically on Debian GNU/HURD, GNU/kFreeBSD, and GNU/Linux.
@


1.5
log
@experimental: add mksh/debian's arc4random impl
@
text
@d1 1
a1 1
BSD::arc4random version 0.14
d17 5
d35 1
a35 1
If your system’s arc4random(3) function suite is not in libc, edit
d54 4
a57 3
This module requires arc4random(3) in libc. There are configuration
options in Makefile.PL, to change for example, if a different library
like libcrypt on Interix is required.
d61 3
a63 1
Copyright (c) 2008 by Thorsten Glaser
d65 1
a65 1
This module is covered by the MirOS Licence.
@


1.4
log
@document the pushb semi-requirement
@
text
@d1 1
a1 1
BSD::arc4random version 0.12
d36 5
d49 3
a51 1
This module requires arc4random(3) in libc.
@


1.3
log
@algorithmic optimisation: take in 32-bit values at a time if we can
@
text
@d1 1
a1 1
BSD::arc4random version 0.11
d19 10
a28 1
sure at least arc4random_addrandom(3) exists.
@


1.2
log
@finally, arc4random_bytes function, I’m happy with it
overwork the docs etc. and call it a 0.10 version that
can be sent to the reviewers; before Vutral will upload
it to PAUSE it’ll be bumped to 1.00 of course.
@
text
@d1 1
a1 1
BSD::arc4random version 0.10
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
BSD::arc4random version 0.01
d17 10
@


1.1.201.1
log
@First cut at a Perl5 wrapper for arc4random(3) et al.

Unfinished, debugging version, but sort of working
@
text
@@
