head	1.11;
access;
symbols
	kwalletcli-3_02:1.11
	kwalletcli-3_01:1.11
	kwalletcli-3_00:1.11
	kwalletcli-2_12:1.10
	kwalletcli-2_11:1.10
	kwalletcli-2_10:1.10
	kwalletcli-2_03:1.7
	kwalletcli-2_02:1.7
	kwalletcli-2_01:1.7
	kwalletcli-2_00:1.7
	kwalletcli-1_00:1.7;
locks; strict;
comment	@ * @;


1.11
date	2016.08.30.17.37.58;	author tg;	state Exp;
branches;
next	1.10;
commitid	10057C5C48D23D151BB;

1.10
date	2011.04.09.22.24.32;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004DA0DCB701D89E49;

1.9
date	2011.04.09.21.44.56;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004DA0D26454B148C6;

1.8
date	2011.04.09.20.43.45;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004DA0C5180F36EF50;

1.7
date	2009.07.24.12.21.14;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004A69A7515BFFE1FD;

1.6
date	2009.07.10.10.50.06;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004A571CEA469B7664;

1.5
date	2009.07.09.18.43.30;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004A563A5F3EED2E2B;

1.4
date	2009.07.09.15.05.35;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004A56074B519748A3;

1.3
date	2009.06.10.19.00.42;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004A3002ED5F368174;

1.2
date	2009.06.10.18.36.42;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004A2FFD4B60267580;

1.1
date	2009.06.10.18.28.32;	author tg;	state Exp;
branches;
next	;
commitid	1004A2FFAE4021E11CE;


desc
@@


1.11
log
@governance
@
text
@/*-
 * Copyright © 2009, 2011
 *	mirabilos <m@@mirbsd.org>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un‐
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person’s immediate fault when using the work as intended.
 */

#include <errno.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "kwalletcli.h"

const char __rcsid_main_c[] =
    "$MirOS: contrib/hosted/tg/code/kwalletcli/main.c,v 1.10 2011/04/09 22:24:32 tg Exp $";

#define WOCTET_MASK	(0x7FFFFF80)
#define WOCTET_VALUE	(0x0000EF80)
#define iswoctet(wc)	(((wc) & WOCTET_MASK) == WOCTET_VALUE)


int
main(int argc, char *argv[])
{
	int ch, rv, quiet = 0;
	const char *kw_folder = NULL, *kw_entry = NULL, *kw_pass = NULL, *fmts;
	char *vers;

	while ((ch = getopt(argc, argv, "e:f:hPp:qV")) != -1) {
		switch (ch) {
		case 'e':
			kw_entry = optarg;
			break;
		case 'f':
			kw_folder = optarg;
			break;
		case 'P': {
			char *cp;
			size_t n = 65536;
			ssize_t cnt;

			if ((kw_pass = cp = malloc(n--)) == NULL)
				abort();
			do {
				cnt = read(STDIN_FILENO, cp, n);
				if (cnt == -1) {
					if (errno == EINTR)
						continue;
					break;
				} else if (cnt == 0)
					break;
				n -= cnt;
				cp += cnt;
			} while (n);
			*cp = '\0';
			break;
		}
		case 'p':
			kw_pass = optarg;
			break;
		case 'q':
			quiet = 1;
			break;
		case 'V':
			if (!quiet)
				fprintf(stderr, "%s\n%s\n%s\n",
				    __rcsid_main_c, __rcsid_kwif,
				    KWALLETCLI_H);
			return (0);
		case 'h':
		default:
 usage:
			fprintf(stderr, "Usage: kwalletcli -f folder"
			    " -e entry [-P | -p writepassword]\n");
			return (2);
		}
	}
	if ((argc - optind) || !kw_folder || !kw_entry)
		goto usage;

	if (asprintf(&vers, "%s %s %s", __rcsid_main_c, __rcsid_kwif,
	    KWALLETCLI_H) == -1)
		vers = NULL;

	if (kw_pass) {
		unsigned int wc;
		size_t n;
		char *dst, *cp;
		const char *src = kw_pass;

		/* recode kw_pass from binary/utf-8 to safe utf-8 */
		if ((dst = cp = malloc(strlen(kw_pass) * 3 + 1)) == NULL)
			abort();

		do {
			n = utf_8to32(src, &wc);
			if (n == UTFCONV_ERROR || iswoctet(wc)) {
				/* assert: 0x80 <= *src <= 0xFF */
				wc = *((const unsigned char *)src);
				wc |= WOCTET_VALUE;
				n = 1;
			}
			src += n;
			n = utf_32to8(dst, wc);
			dst += n;
		} while (wc);

		kw_pass = cp;
	}

	if (quiet)
		fclose(stderr);
	rv = kw_io(kw_folder, kw_entry, &kw_pass, vers ? vers : "");
	switch (rv) {
	case KWE_OK_GET: {
		unsigned int wc;
		size_t n;
		char *dst, *cp;
		const char *src = kw_pass;

		/* recode kw_pass from safe utf-8 to binary/utf-8 */
		if ((dst = cp = malloc(strlen(kw_pass) + 1)) == NULL)
			abort();

		do {
			n = utf_8to32(src, &wc);
			if (n == UTFCONV_ERROR)
				/* should never happen */
				goto print_kw_pass;
			src += n;
			if (iswoctet(wc)) {
				wc &= 0xFF;
				*((unsigned char *)dst++) = wc;
			} else {
				n = utf_32to8(dst, wc);
				dst += n;
			}
		} while (wc);

		kw_pass = cp;
 print_kw_pass:
		printf("%s", kw_pass);
		break;
	}
	case KWE_NOWALLET:
		if (!quiet)
			fprintf(stderr, "cannot open wallet\n");
		break;
	case KWE_NOFOLDER:
		fmts = "folder '%s' does not exist\n";
		if (0)
		/* FALLTHROUGH */
	case KWE_ERRFOLDER:
		fmts = "cannot open folder '%s'\n";
		if (!quiet)
			fprintf(stderr, fmts, kw_folder);
		break;
	case KWE_NOENTRY:
		fmts = "entry '%s' does not exist in folder '%s'\n";
		if (0)
		/* FALLTHROUGH */
	case KWE_ERRENTRY:
		fmts = "error reading entry '%s' from folder '%s'\n";
		if (0)
		/* FALLTHROUGH */
	case KWE_ERR_SET:
		fmts = "error writing entry '%s' to folder '%s'\n";
		if (!quiet)
			fprintf(stderr, fmts, kw_entry, kw_folder);
		break;
	case KWE_OK_SET:
		rv = 0;
		break;
	case KWE_ABORT:
		if (!quiet)
			fprintf(stderr, "internal error\n");
	default:
		fflush(NULL);
		abort();
	}
	return (rv);
}
@


1.10
log
@fix compiler warnings
@
text
@d3 1
a3 1
 *	Thorsten Glaser <t.glaser@@tarent.de>
d30 1
a30 1
    "$MirOS: contrib/hosted/tg/code/kwalletcli/main.c,v 1.9 2011/04/09 21:44:56 tg Exp $";
@


1.9
log
@Convert the password string the same as we do with OPTU-8/OPTU-16 in base
except we use fully standards-conformant UCS-32 and UTF-8 on the Qt side,
not OPTU-16, but use our PUA assignment for woctet mapping.

This means that the storage format stays the same for all strings prior
written that were valid (standards-conformant) UTF-8 and did not contain
any multibyte characters in the range [U+EF80‥U+EFFF] (PUA). All others
will change.

Command line or standard input passwords will pass through unmodified if
they fulfil the above condition. Invalid UTF-8 octets, surrogates (both
low and high), [U+EF80‥U+EFFF], U+FFFE and U+FFFF will lead to their
first octet (which is already in the range [0x80‥0xFF]) be stored mapped
into the OPTU-16 range, and any subsequent octet re-inspected (which may
be valid UTF-8, invalid as above, or even ASCII). The process is unique
in both directions.
@
text
@d24 1
d30 1
a30 1
    "$MirOS: contrib/hosted/tg/code/kwalletcli/main.c,v 1.8 2011/04/09 20:43:45 tg Exp $";
@


1.8
log
@document some limitations; raise some
@
text
@d29 6
a34 1
    "$MirOS: contrib/hosted/tg/code/kwalletcli/main.c,v 1.7 2009/07/24 12:21:14 tg Exp $";
d99 26
d129 27
a155 1
	case KWE_OK_GET:
d158 1
@


1.7
log
@if quiet, close stderr before using kwif, so that kdeinit/DCOP error msgs
will not be shown; kwif*.cc MUST be able to cope with an unusable stderr!

also mention the newlines problem in
.Sx CAVEATS .
@
text
@d2 1
a2 1
 * Copyright © 2009
d29 1
a29 1
    "$MirOS: contrib/hosted/tg/code/kwalletcli/main.c,v 1.6 2009/07/10 10:50:06 tg Exp $";
d48 1
a48 1
			size_t n = 2047;
d51 1
a51 1
			if ((kw_pass = cp = malloc(2048)) == NULL)
@


1.6
log
@• rename kwif.cc to kwif3.cc (backwardsly valid)
• document entire kwif*.cc API in kwalletcli.h
@
text
@d29 1
a29 1
    "$MirOS: contrib/hosted/tg/code/kwalletcli/main.c,v 1.5 2009/07/09 18:43:30 tg Exp $";
d94 2
@


1.5
log
@* new option -q (quiet)
* add some missing lint comments
@
text
@a27 1
extern const char __rcsid_kwif_cc[];
d29 1
a29 1
    "$MirOS: contrib/hosted/tg/code/kwalletcli/main.c,v 1.4 2009/07/09 15:05:35 tg Exp $";
d76 1
a76 1
				    __rcsid_main_c, __rcsid_kwif_cc,
d90 1
a90 1
	if (asprintf(&vers, "%s %s %s", __rcsid_main_c, __rcsid_kwif_cc,
@


1.4
log
@errorlevel 0 if -V (show version)
@
text
@d30 1
a30 1
    "$MirOS: contrib/hosted/tg/code/kwalletcli/main.c,v 1.3 2009/06/10 19:00:42 tg Exp $";
d35 1
a35 1
	int ch, rv;
d39 1
a39 1
	while ((ch = getopt(argc, argv, "e:f:hPp:V")) != -1) {
d71 3
d75 4
a78 2
			fprintf(stderr, "%s\n%s\n%s\n", __rcsid_main_c,
			    __rcsid_kwif_cc, KWALLETCLI_H);
d101 2
a102 1
		fprintf(stderr, "cannot open wallet\n");
d110 2
a111 1
		fprintf(stderr, fmts, kw_folder);
d116 1
d120 1
d123 2
a124 1
		fprintf(stderr, fmts, kw_entry, kw_folder);
d130 2
a131 1
		fprintf(stderr, "internal error\n");
@


1.3
log
@more versions \o/
@
text
@d30 1
a30 1
    "$MirOS: contrib/hosted/tg/code/kwalletcli/main.c,v 1.2 2009/06/10 18:36:42 tg Exp $";
d74 1
@


1.2
log
@avoid redefinition warnings, this is just easier
@
text
@d30 1
a30 1
    "$MirOS: contrib/hosted/tg/code/kwalletcli/main.c,v 1.1 2009/06/10 18:28:32 tg Exp $";
d72 2
a73 2
			fprintf(stderr, "%s\n%s\n", __rcsid_main_c,
			    __rcsid_kwif_cc);
d85 2
a86 1
	if (asprintf(&vers, "%s %s", __rcsid_main_c, __rcsid_kwif_cc) == -1)
@


1.1
log
@First steps of a CLI to KWallet (for KDE 3, targetting KDE 3.5 on
Kubuntu Hardon Heroin) with additional programmes. Features:
• kwalletcli, CLI to KWallet (complete)
• kwalletcli_getpin, helper, CLI to pinentry (complete)
• kwalletaskpass, ssh-askpass using kwalletcli and kwalletcli_getpin
• pinentry-kwallet, wrapper around pinentry using kwalletcli on request

Part of this work is sponsored by tarent GmbH
@
text
@a20 1
#define _GNU_SOURCE
d30 1
a30 1
    "$MirOS$";
@

