head	1.16;
access;
symbols
	kwalletcli-3_02:1.16
	kwalletcli-3_01:1.16
	kwalletcli-3_00:1.16
	kwalletcli-2_12:1.15
	kwalletcli-2_11:1.15
	kwalletcli-2_10:1.11
	kwalletcli-2_03:1.8
	kwalletcli-2_02:1.8
	kwalletcli-2_01:1.5
	kwalletcli-2_00:1.5
	kwalletcli-1_00:1.5;
locks; strict;
comment	@# @;


1.16
date	2016.08.30.17.37.59;	author tg;	state Exp;
branches;
next	1.15;
commitid	10057C5C48D23D151BB;

1.15
date	2011.05.10.10.26.38;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004DC912EE7F89327D;

1.14
date	2011.05.10.09.29.59;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004DC905933AFACF57;

1.13
date	2011.05.10.09.00.22;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004DC8FE77064D540E;

1.12
date	2011.05.10.08.35.31;	author tg;	state Exp;
branches;
next	1.11;
commitid	1004DC8F8E77AAED30B;

1.11
date	2011.04.09.20.21.15;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004DA0BFBF055EFBCA;

1.10
date	2011.03.02.22.49.59;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004D6EC99B0591D610;

1.9
date	2011.03.02.22.49.16;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004D6EC96115CC0EDD;

1.8
date	2010.03.03.11.17.51;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004B8E457058A83BBA;

1.7
date	2010.03.03.09.22.35;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004B8E2A6541F82000;

1.6
date	2010.03.03.09.17.39;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004B8E29300BD3B015;

1.5
date	2009.07.12.17.57.33;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004A5A2418232EA895;

1.4
date	2009.07.09.19.18.25;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004A56429761E230A7;

1.3
date	2009.07.08.15.09.52;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004A54B6CE4701E14B;

1.2
date	2009.06.10.19.20.04;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004A3007674197DB57;

1.1
date	2009.06.10.19.08.58;	author tg;	state Exp;
branches;
next	;
commitid	1004A3004E07882F403;


desc
@@


1.16
log
@governance
@
text
@#!/usr/bin/env mksh
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.15 2011/05/10 10:26:38 tg Exp $'
#-
# Copyright © 2009, 2010, 2011
#	mirabilos <m@@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un‐
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.

unset LC_ALL LANGUAGE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES \
    LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION
export LANG=C LC_CTYPE=en_US.UTF-8
set -U

iodebug=0
iodp=~/pinentry-kwallet.debug
if (( iodebug )); then
	print "\n$$ === new $(date)" >>"$iodp"
	chmod 0600 "$iodp"
fi
function io_p_in {
	local io_line
	IFS= read -r io_line || return $?
	(( iodebug )) && print -r -- "$$ <p $io_line" >>"$iodp"
	eval $1='${io_line%}'
	return 0
}
function io_s_in {
	local io_line
	IFS= read -pr io_line || return $?
	(( iodebug )) && print -r -- "$$ <s $io_line" >>"$iodp"
	eval $1=\$io_line
	return 0
}
function io_p_out {
	(( iodebug )) && print -r -- "$$ >p $(print "$@@")" >>"$iodp"
	print "$@@"
}
function io_s_out {
	(( iodebug )) && print -r -- "$$ >s $(print "$@@")" >>"$iodp"
	print -p "$@@"
}
function log {
	(( iodebug )) && print -r -- "$$ LOG $*" >>"$iodp"
}

if [[ -n $PINENTRY_KWALLET ]]; then
	io_p_out ERR 7 trying to call me recursively
	while io_p_in line; do
		io_p_out ERR 7 trying to call me recursively
	done
	exit 1
fi

quiet=0
set -A args
last=
i=0
for arg in "$@@"; do
	log "argv[$((++i))]='${arg//\'/\'\\\'\'}'"
	if [[ $last = --display ]]; then
		v=DISPLAY
		last=specvar
	elif [[ $last = --ttyname ]]; then
		v=GPG_TTY
		last=specvar
	elif [[ $last = --ttytype ]]; then
		v=GPG_TERM
		last=specvar
	elif [[ $last = --lc-type ]]; then
		v=LC_CTYPE
		last=specvar
	elif [[ $last = --lc-messages ]]; then
		v=LC_MESSAGES
		last=specvar
	fi
	if [[ $last = specvar ]]; then
		eval $v=\$arg
		eval export $v
		last=addone
	fi
	if [[ $last = addone ]]; then
		args[${#args[*]}]=$arg
		last=
		continue
	fi
	last=
	if [[ $arg = -V ]]; then
		(( quiet )) || print -ru2 -- "$rcsid"
		exit 0
	elif [[ $arg = --version ]]; then
		print -r -- "$rcsid"
		exit 0
	elif [[ $arg = @@(-h|--help) ]]; then
		print "Usage: pinentry-kwallet [options]"
		exit 0
	elif [[ $arg = -q ]]; then
		quiet=1
	elif [[ $arg = \
	    @@(-@@(d|e|g)|--@@(debug|enhanced|no-global-grab)) ]]; then
		args[${#args[*]}]=$arg
	elif [[ $arg = \
	    --@@(display|ttyname|ttytype|lc-type|lc-messages) ]]; then
		args[${#args[*]}]=$arg
		last=$arg
	elif [[ $arg = --parent-wid ]]; then
		args[${#args[*]}]=$arg
		last=addone
	else
		(( quiet )) || print -u2 "warning: unknown argument '$arg'"
		args[${#args[*]}]=$arg
	fi
done

if [[ -z $DISPLAY ]]; then
	log "since DISPLAY is not set, replacing with: ${PINENTRY:-pinentry}"
	PINENTRY_KWALLET=set exec "${PINENTRY:-pinentry}" "${args[@@]}"
fi

PINENTRY_KWALLET=set "${PINENTRY:-pinentry}" "${args[@@]}" |&
copid=$?
log "starting coproc $copid: PINENTRY_KWALLET=set '${PINENTRY:-pinentry}' args"
io_s_in resp || resp='ERR 14 no coprocess'
if [[ $resp = OK@@(| *) ]]; then
	have_sub=1
	trap "kill $copid; exit 255" 1 2 3 5 13 15
else
	have_sub=0
	exec 3>&p; exec 3>&-
fi
log have_sub=$have_sub
io_p_out OK ready to listen to your demands

x_dsctxt=
x_prompt=
x_errtxt=

function getit {
	local type=$1 key=〈${x_prompt}〉$x_dsctxt pw rv tw=0 d errcnt blst=0

	copyline=0
	# the errcnt handling is a little tricky, because GnuPG v2 does
	# not reuse the pinentry session (suckers, unable to... *rant*)
	if pw=$(kwalletcli -q -f pinentry-kwallet -e "$type-B-$key") && \
	    [[ $pw = yes* ]]; then
		log "blacklisted"
		blst=1
	elif pw=$(kwalletcli -q -f pinentry-kwallet -e "$type-e-$key"); then
		log "read errcnt: '$pw'"
		set -A errcnt -- $pw
		d=$(date -u +'%s')
		(( errcnt[0] < (d - 15) )) && errcnt[1]=0
	else
		log "read errcnt failed"
	fi
	(( blst )) || [[ -z $x_errtxt ]] || (( errcnt[1]++ ))
	(( blst )) || if (( errcnt[1] )); then
		errcnt[0]=${d:-$(date -u +'%s')}
		kwalletcli -q -f pinentry-kwallet -e "$type-e-$key" \
		    -p "${errcnt[*]}"
		log "write errcnt: '${errcnt[*]}' -> $?"
	fi
	(( blst )) || if (( errcnt[1] < 2 )); then
		pw=$(kwalletcli -q -f pinentry-kwallet -e "$type-v-$key")
		rv=$?
		log "read pass $rv: '$pw'"
		case $type:$rv {
		(bool:0)
			if [[ $pw = \
			    @@(1|-1|[Tt][Rr][Uu][Ee]|[Yy][Ee][Ss]) ]]; then
				io_p_out OK
				return
			elif [[ $pw = \
			    @@(0|[Ff][Aa][Ll][Ss][Ee]|[Nn][Oo]) ]]; then
				io_p_out ERR 128 not confirmed
				return
			fi
			;;
		(pass:0)
			[[ -n $pw ]] && io_p_out -r "D $pw"
			io_p_out OK
			return
			;;
		}
	fi
	if (( !have_sub )); then
		io_p_out ERR 14 no coprocess
		return
	fi
	if [[ $type = bool ]]; then
		io_s_out CONFIRM
		io_s_in resp
		case $resp {
		(OK@@(| *))
			pw=1
			tw=1
			;;
		(ERR\ @@(128|83886194|83886179)@@(| *))
			# 128 = not confirmed (hardy)
			# 83886194 = not confirmed (wheezy)
			# 83886179 = canceled (wheezy)
			pw=0
			tw=1
			;;
		}
	else
		io_s_out GETPIN
		io_s_in resp
		pw=
		#XXX normally, read until OK|ERR
		if [[ $resp = @@(D )* ]]; then
			pw=${resp#D }
			io_s_in resp
		fi
		[[ $resp = OK@@(| *) ]] && tw=1
	fi
	(( tw && !blst )) && if kwalletcli_getpin -q -b \
	    -t "Do you want to store your response for description
'$x_dsctxt',
prompt '$x_prompt' in the KDE Wallet?"; then
		kwalletcli -q -f pinentry-kwallet -e "$type-v-$key" -p "$pw"
		log "want store: yes, pw '$pw' -> $?"
	else
		# create blacklist entry for this answer
		kwalletcli -q -f pinentry-kwallet -e "$type-B-$key" -p yes
		log "want store: no"
	fi
	[[ $type = pass ]] && [[ -n $pw ]] && io_p_out -r "D $pw"
	io_p_out -r -- "$resp"
}

while io_p_in line; do
	[[ -z $line || $line = '#'* ]] && continue
	copyline=1
	case $line {
	(SETDESC)
		x_dsctxt=
		;;
	(SETDESC\ *)
		x_dsctxt=${line#SETDESC }
		;;
	(SETPROMPT)
		x_prompt=
		;;
	(SETPROMPT\ *)
		x_prompt=${line#SETPROMPT }
		;;
	(SETTITLE@@(| *))
		;;
	(SET@@(OK|CANCEL|NOTOK)@@(| *))
		;;
	(SETERROR)
		x_errtxt=
		;;
	(SETERROR\ *)
		x_errtxt=${line#SETERROR }
		;;
	(SETQUALITYBAR*)
		;;
	(GETPIN)
		getit pass
		;;
	(CONFIRM)
		getit bool
		;;
	(MESSAGE|CONFIRM\ --one-button)
		;;
	(OPTION\ ttyname=*)
		GPG_TTY=${line#*=}
		export GPG_TTY
		;;
	(OPTION\ ttytype=*)
		GPG_TERM=${line#*=}
		export GPG_TERM
		;;
	(OPTION\ lc-ctype=*)
		LC_CTYPE=${line#*=}
		export LC_CTYPE
		;;
	(OPTION\ lc-messages=*)
		LC_MESSAGES=${line#*=}
		export LC_MESSAGES
		;;
	(OPTION\ *)
		;;
	(CONFIRM\ *)
		(( quiet )) || print -ru2 "warning: unknown CONFIRM" \
		    "option ${line#CONFIRM }"
		;;
	(BYE@@(| *))
		io_p_out OK
		break
		;;
	(NOP@@(| *))
		# copy quietly, in case of keepalive
		;;
	(GETINFO\ pid)
		# undocumented, but used by GnuPG v2
		io_p_out D $$
		io_p_out OK
		copyline=0
		;;
	(GETINFO\ version)
		# undocumented, but used by GnuPG v2
		# just copy it quietly
		#XXX maybe return "ERR 103 unknown command"?
		;;
	(GETINFO\ *)
		# undocumented, but used by GnuPG v2
		(( quiet )) || print -ru2 "warning: unknown GETINFO" \
		    "capability ${line#GETINFO }"
		;;
	(*)
		(( quiet )) || print -ru2 "warning: unknown line '$line'"
		;;
	}
	(( copyline )) && if (( have_sub )); then
		io_s_out -r -- "$line"
		resp=
		while [[ $resp != @@(OK|ERR)@@(| *) ]]; do
			io_s_in resp
			io_p_out -r -- "$resp"
		done
	else
		io_p_out OK
	fi
done
if (( have_sub )); then
	io_s_out BYE
	io_s_in resp
fi
exec 2>/dev/null	# avoid "no coprocess" warnings
exec 3>&p; exec 3>&-
exit 0
@


1.15
log
@pass signals to the coprocess here, too
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.14 2011/05/10 09:29:59 tg Exp $'
d5 1
a5 1
#	Thorsten Glaser <tg@@mirbsd.org>
@


1.14
log
@deal a bit better with newer Assuan pinentry commands
and somewhat better strictness on command parsing
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.13 2011/05/10 09:00:22 tg Exp $'
d133 2
a134 1
log "starting coproc $!: PINENTRY_KWALLET=set '${PINENTRY:-pinentry}' args"
d138 1
@


1.13
log
@Adhere better to the Assuan protocol:
• lines from the client may end with CR-LF or LF
• empty lines or lines starting with a ‘#’ are ignored
• implement the NOP command
• improve handling of BYE or end of input (terminate subprocess gracefully)
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.12 2011/05/10 08:35:31 tg Exp $'
d208 4
a211 1
		(ERR\ 128@@(| *))
d258 3
a260 1
	(SETOK*|SETCANCEL*)
d294 1
a294 1
	(OPTION*)
d316 1
@


1.12
log
@do not warn for “GETINFO version”
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.11 2011/04/09 20:21:15 tg Exp $'
d37 1
a37 1
	eval $1=\$io_line
d240 1
d299 3
d332 5
@


1.11
log
@store negative answes to the “do you want to store X in the KDE Wallet?”
in the wallet to avoid asking the user each time
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.10 2011/03/02 22:49:59 tg Exp $'
d304 1
a304 1
	(GETINFO\ pid)
@


1.10
log
@at that time, there’s no slave yet, so read lines from the parent
(as probably was intended)
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.9 2011/03/02 22:49:16 tg Exp $'
d149 1
a149 1
	local type=$1 key=〈${x_prompt}〉$x_dsctxt pw rv tw=0 d errcnt
d154 5
a158 1
	if pw=$(kwalletcli -q -f pinentry-kwallet -e "$type-e-$key"); then
d166 2
a167 2
	[[ -z $x_errtxt ]] || (( errcnt[1]++ ))
	if (( errcnt[1] )); then
d173 1
a173 1
	if (( errcnt[1] < 2 )); then
d224 2
a225 1
	(( tw )) && if kwalletcli_getpin -qbt "Do you want to store your response for description
d231 2
@


1.9
log
@similar to cid 1004CE24AB21232A3D6 don’t use kwallet if $DISPLAY is empty
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.8 2010/03/03 11:17:51 tg Exp $'
d61 1
a61 1
	while io_s_in line; do
@


1.8
log
@add debugging and fix the bug (broken IPC)
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.7 2010/03/03 09:22:35 tg Exp $'
d4 1
a4 1
# Copyright © 2009, 2010
d127 5
@


1.7
log
@implement GETINFO (pid is ours, version is passed through silently)
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.6 2010/03/03 09:17:39 tg Exp $'
a21 3
#XXX TODO: make all stdio *and* coproc I/O go through functions that
#XXX allow to hook in debugging (logging to a file)

d27 32
d60 3
a62 3
	print ERR 7 trying to call me recursively
	while read line; do
		print ERR 7 trying to call me recursively
d70 1
d72 1
d128 2
a129 1
IFS= read -pr resp || resp='ERR 14 no coprocess'
d136 2
a137 1
print OK ready to listen to your demands
d150 1
d154 2
d162 1
d167 1
d172 1
a172 1
				print OK
d176 1
a176 1
				print ERR 128 not confirmed
d181 2
a182 2
			[[ -n $pw ]] && print -r "D $pw"
			print OK
d188 1
a188 1
		print ERR 14 no coprocess
d192 2
a193 2
		print -p CONFIRM
		IFS= read -pr resp
d205 2
a206 2
		print -p GETPIN
		IFS= read -pr resp
d211 1
a211 1
			IFS= read -pr resp
d215 1
a215 1
	(( tw )) && kwalletcli_getpin -qbt "Do you want to store your response for description
d217 8
a224 4
prompt '$x_prompt' in the KDE Wallet?" && \
	    kwalletcli -q -f pinentry-kwallet -e "$type-v-$key" -p "$pw"
	[[ $type = pass ]] && [[ -n $pw ]] && print -r "D $pw"
	print -r -- "$resp"
d227 1
a227 1
while IFS= read -r line; do
d283 1
a283 1
		print OK
d288 3
a290 3
		print D $$
		print OK
		break
d306 1
a306 1
		print -pr -- "$line"
d309 2
a310 2
			IFS= read -pr resp
			print -r -- "$resp"
d313 1
a313 1
		print OK
@


1.6
log
@When copying I/O to the subprocess, do until we get an OK|ERR line,
not just one line. (Closes: #572118)
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.5 2009/07/12 17:57:33 tg Exp $'
d241 4
d246 1
d250 9
@


1.5
log
@fix syntax error

(yeah, At wOrk on weekends)
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.4 2009/07/09 19:18:25 tg Exp $'
d4 1
a4 1
# Copyright © 2009
d22 3
d170 1
d251 5
a255 2
		IFS= read -pr resp
		print -r -- "$resp"
@


1.4
log
@more -q
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.3 2009/07/08 15:09:52 tg Exp $'
d69 1
a69 1
	if [[ $arg = --version ]]; then
@


1.3
log
@• +pinentry-kwallet
• make installable
• gmake uninstallable
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.2 2009/06/10 19:20:04 tg Exp $'
d35 1
d66 4
a69 1
	if [[ $arg = @@(-V|--version) ]]; then
d75 2
d88 1
a88 1
		print -u2 "warning: unknown argument '$arg'"
d113 1
a113 2
	if pw=$(kwalletcli -f pinentry-kwallet -e "$type-e-$key" \
	    2>/dev/null); then
d121 1
a121 1
		kwalletcli -f pinentry-kwallet -e "$type-e-$key" \
d125 1
a125 2
		pw=$(kwalletcli -f pinentry-kwallet -e "$type-v-$key" \
		    2>/dev/null)
d173 1
a173 1
	(( tw )) && kwalletcli_getpin -bt "Do you want to store your response for description
d176 1
a176 1
	    kwalletcli -f pinentry-kwallet -e "$type-v-$key" -p "$pw"
d233 2
a234 1
		print -ru2 "warning: unknown CONFIRM option ${line#CONFIRM }"
d242 1
a242 1
		print -ru2 "warning: unknown line '$line'"
@


1.2
log
@there's the re-invocation magic
(pinentry-kwallet will also work if there is no other pinentry, merely
accessing the wallet)
@
text
@d2 1
a2 1
# $MirOS: contrib/hosted/tg/code/kwalletcli/pinentry-kwallet,v 1.1 2009/06/10 19:08:58 tg Exp $
a26 2
exit 255	#XXX incomplete

d28 1
d30 1
a30 1
		print ERR trying to call me recursively
d35 60
a94 1
PINENTRY_KWALLET=set "${PINENTRY:-pinentry}" |&
d96 154
a249 1
…
@


1.1
log
@add a stub
@
text
@d2 1
a2 1
# $MirOS$
d36 1
@

