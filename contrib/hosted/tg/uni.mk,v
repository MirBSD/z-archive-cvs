head	1.17;
access;
symbols;
locks; strict;
comment	@# @;


1.17
date	2018.12.02.08.22.39;	author tg;	state Exp;
branches;
next	1.16;
commitid	1005C0396664A9BF3A6;

1.16
date	2018.12.02.08.05.27;	author tg;	state Exp;
branches;
next	1.15;
commitid	1005C03925E00B02EA2;

1.15
date	2018.12.02.08.05.05;	author tg;	state Exp;
branches;
next	1.14;
commitid	1005C0392454F7FF4BB;

1.14
date	2018.12.02.08.00.09;	author tg;	state Exp;
branches;
next	1.13;
commitid	1005C03911A75E8408D;

1.13
date	2018.12.02.06.28.55;	author tg;	state Exp;
branches;
next	1.12;
commitid	1005C037BBA702E7149;

1.12
date	2018.12.02.06.08.41;	author tg;	state Exp;
branches;
next	1.11;
commitid	1005C0376FD7C6037AF;

1.11
date	2018.12.02.05.48.52;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005C0372595A80E3C8;

1.10
date	2018.08.10.02.07.24;	author tg;	state Exp;
branches;
next	1.9;
commitid	1005B6CF36E3932B560;

1.9
date	2018.08.10.01.47.58;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005B6CEEE1116B651D;

1.8
date	2018.08.10.01.47.02;	author tg;	state Exp;
branches;
next	1.7;
commitid	1005B6CEDA9204E7D16;

1.7
date	2018.08.10.00.47.30;	author tg;	state Exp;
branches;
next	1.6;
commitid	1005B6CE020584FF302;

1.6
date	2018.06.26.20.55.24;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005B32A853213756EC;

1.5
date	2018.01.14.02.44.35;	author tg;	state Exp;
branches;
next	1.4;
commitid	1005A5AC3D9260944AA;

1.4
date	2018.01.07.00.25.29;	author tg;	state Exp;
branches;
next	1.3;
commitid	1005A51690E22D2CADF;

1.3
date	2018.01.07.00.22.33;	author tg;	state Exp;
branches;
next	1.2;
commitid	1005A51684D0E0122B9;

1.2
date	2018.01.06.23.49.36;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005A5160A21B9B3B01;

1.1
date	2017.11.18.12.11.38;	author tg;	state Exp;
branches;
next	;
commitid	1005A10238920E747A8;


desc
@@


1.17
log
@clean up after ourselves
@
text
@#!/bin/mksh
rcsid='$MirOS: contrib/hosted/tg/uni.mk,v 1.16 2018/12/02 08:05:27 tg Exp $'
#-
# Copyright © 2017, 2018
#	mirabilos <m@@mirbsd.org>
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un‐
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person’s immediate fault when using the work as intended.
#-
# Copyright © 1991-2018 Unicode, Inc. All rights reserved. Distributed
# under the Terms of Use in: http://www.unicode.org/copyright.html
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of the Unicode data files and any associated documentation (the
# "Data Files") or Unicode software and any associated documentation
# (the "Software") to deal in the Data Files or Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, and/or sell copies of the Data
# Files or Software, and to permit persons to whom the Data Files or
# Software are furnished to do so, provided that either (a) this
# copyright and permission notice appear with all copies of the Data
# Files or Software, or (b) this copyright and permission notice appear
# in associated Documentation.
#
# THE DATA FILES AND SOFTWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY
# OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
# AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR
# ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
# PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THE DATA FILES OR SOFTWARE.
#
# Except as contained in this notice, the name of a copyright holder
# shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in these Data Files or Software without
# prior written authorization of the copyright holder.

mis=0
chkfile() {
	[[ ! -s $1 ]] || return 0
	print -ru2 -- "E: $1 is missing"
	mis=1
}
chkfile EastAsianWidth.txt
chkfile UnicodeData.txt
chkfile Unihan_Readings.txt
(( mis == 0 )) || exit 1

. "$(dirname "$0")/progress-bar"

fgrep kDefinition Unihan_Readings.txt >JamoBMP.txt
Pucd=$(wc -l <UnicodeData.txt)
(( Pbmp = Pucd * 2 / 3 ))
Phan=$(wc -l <JamoBMP.txt)
Pjamo=11172
(( Pbmp = Pucd / 2 + Phan + Pjamo ))
(( Pucd += Phan + Pjamo ))
Psort=10001
Pgrep=5001
Puni=3957
init_progress_bar $((Pucd + Psort + Pgrep + Pbmp*2 + Pucd + Puni))

gen=\$miros${rcsid#?MirOS}
vsn=$(sed -n '1s/^.*Width-\(.*\)\.txt.*$/\1/p' <EastAsianWidth.txt)
vun=$(sed -n '/^# Unicode version: /{s///p;q;}' <Unihan_Readings.txt)
if [[ $vun != "$vsn" ]]; then
	print -ru2 "E: UCD and Unihan versions differ!"
	exit 1
fi
typeset -Uui16 -Z11 cp
set -U
set -A jamo_initial -- G GG N D DD R M B BB S SS '' J JJ C K T P H
set -A jamo_medial -- A AE YA YAE EO E YEO YE O WA WAE OE YO U WEO WE WI YU EU YI I
set -A jamo_final -- '' G GG GS N NI NH D L LG LM LB LS LT LP LH \
    M B BS S SS NG J C K T P H
print -ru2 -- "I: reading UCD"
while IFS= read -r line; do
	cp=16#${line%%;*}
	line=${line#*;}
	if [[ $line != *'<Hangul Syllable, First>'* ]]; then
		print -r -- "${cp#16#};$line"
		draw_progress_bar
		continue
	fi
	print -ru2 -- "I: generating Jamo"
	line=${line#*;}
	IFS=';' read -r endcode x
	let endc=0x$endcode
	let begc=cp--
	while (( ++cp <= endc )); do
		(( j1 = cp - begc ))
		(( j3 = j1 % 28 ))
		(( j1 /= 28 ))
		(( j2 = j1 % 21 ))
		(( j1 /= 21 ))
		n1='HANGUL SYLLABLE '${jamo_initial[j1]}${jamo_medial[j2]}${jamo_final[j3]}
		print -r -- "${cp#16#};$n1;$line"
		draw_progress_bar
	done
	print -ru2 -- "I: back to UCD"
done <UnicodeData.txt >JamoData.txt

print -ru2 -- "I: reading CJK"
while IFS='	' read u k d; do
	[[ $k = kDefinition ]] || continue
	[[ $u = U[+-]+([0-9A-F]) ]] || continue
	cp=16#${u#U?}
	print -r -- "${cp#16#};[UkD] $d"
	draw_progress_bar
done <JamoBMP.txt >>JamoData.txt
print -ru2 -- "I: sorting data"
sort -o JamoData.txt JamoData.txt
let _cur_progress_bar+=Psort-1; draw_progress_bar
sed '/^00010000/,$d' <JamoData.txt >JamoBMP.txt
let _cur_progress_bar+=Pgrep-1; draw_progress_bar

Pucd=$(wc -l <JamoData.txt)
Pbmp=$(wc -l <JamoBMP.txt)
Phan=0
Pjamo=0
redo_progress_bar $((Pucd + Psort + Pgrep + Pbmp*2 + Pucd + Puni))

print -ru2 -- "I: generating HTML"
exec >unidata.htm
cat <<EOF
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>
 <meta http-equiv="content-type" content="text/html; charset=ISO_646.irv:1991" />
 <meta http-equiv="Content-Style-Type" content="text/css" />
 <meta name="MSSmartTagsPreventParsing" content="TRUE" />
 <title>ISO 10646 (BMP)</title>
 <meta name="RCSId" content="$rcsid" />
 <meta name="generator" content="$gen" />
</head><body>
<h1>The Universal Coded Character Set $vsn (Basic Multilingual Plane)</h1>
<table style="table-layout:fixed; border:0px; padding:0px;">
EOF
td='<td style="width:3em;">'
while IFS= read -r line; do
	typeset -i10 x=0x${line:4:4}
	(( x = (x < 32) || (x >= 0x7F && x <= 0x9F) || \
	    (x >= 0xD800 && x <= 0xDFFF) || \
	    (x >= 0xEF80 && x <= 0xEFFF) || (x > 0xFFFD) ? 0 : x ))
	line=${line//'&'/'&amp;'}
	line=${line//'<'/'&lt;'}
	line=${line//'>'/'&gt;'}
	y=
	(( x )) && y="&#$x;"
	print -r -- "<tr>$td$y</td><td>U+${line:4}</td></tr>"
	td='<td>'
	draw_progress_bar
done <JamoBMP.txt
print -r -- '</table>'
print -r -- '</body></html>'

print -ru2 -- "I: generating BMP"
exec >unidata.txt
asn=
eqlen=${%vsn}
while (( eqlen-- )); do
	asn+==
done
print -r -- "The Universal Coded Character Set $vsn Basic Multilingual Plane"
print -r -- "==================================$asn========================="
print
while IFS= read -r line; do
	typeset -Uui16 -Z7 x=0x${line:4:4}
	typeset -i1 j
	(( j = (x < 32) || (x >= 0xD800 && x <= 0xDFFF) || \
	    (x >= 0xEF80 && x <= 0xEFFF) || (x > 0xFFFD) ? 1 : x ))
	m=${j#1#}
	n=${%m}
	print -n "U+${x#16#} "
	if (( n == -1 )); then
		print -n " �"
	elif (( n == 0 )); then
		print -nr -- "  $m"
	elif (( n == 1 )); then
		print -nr -- "$m "
	elif (( n == 2 )); then
		print -nr -- "$m"
	else
		print -u2 Fatal $k $n
		exit 1
	fi
	print -r -- " ${line:9}"
	draw_progress_bar
done <JamoBMP.txt
print
print _______________________________________________________________________
print -r -- "$rcsid"
print -r -- "$gen"

print -ru2 -- "I: generating SMP"
exec >uni_smp.txt
exec 4>uni_acronyms
print -ru4 -- " From ${gen#?}"
print -ru4 -- " From ucd: $vsn"
print -r -- "The Universal Coded Character Set $vsn (all planes)"
print -r -- "==================================$asn============="
print
typeset -i1 j
while IFS= read -r line; do
	typeset -Uui16 -Z11 wi=0x${line::8}
	if (( wi < 0x10000 )); then
		typeset -Uui16 -Z7 x=wi
		(( j = (x < 32) || (x >= 0xD800 && x <= 0xDFFF) || \
		    (x >= 0xEF80 && x <= 0xEFFF) || (x > 0xFFFD) ? 1 : x ))
		m=${j#1#}
		n=${%m}
		aO="($m) "
		print -n "U+${x#16#} "
		if (( n == -1 )); then
			print -n " � "
			aO=
		elif (( n == 0 )); then
			print -nr -- "  $m "
		elif (( n == 1 )); then
			print -nr -- "$m  "
			(( x == 1#( || x == 1#) )) && aO="<$m> "
		elif (( n == 2 )); then
			print -nr -- "$m "
		else
			print -u2 Fatal $k $n
			exit 1
		fi
		aO="U+${x#16#}	$aO"
	else
		aO="U-${wi#16#}	("
		print -n "U-${wi#16#}  "
		set +U
		(( j = (wi >> 18) | 0xF0 ))
		print -nr -- "${j#1#}"
		aO+=${j#1#}
		(( j = ((wi >> 12) & 0x3F) | 0x80 ))
		print -nr -- "${j#1#}"
		aO+=${j#1#}
		(( j = ((wi >> 6) & 0x3F) | 0x80 ))
		print -nr -- "${j#1#}"
		aO+=${j#1#}
		(( j = (wi & 0x3F) | 0x80 ))
		print -nr -- "${j#1#}	"
		aO+=${j#1#}
		set -U
		aO+=') '
	fi
	line=${line:9}
	print -r -- "$line"
	print -ru4 -- "$aO$line"
	draw_progress_bar
done <JamoData.txt
print
print ______________________________________________________________________
print -r -- "$rcsid"
print -r -- "$gen"
exec 4>&-

print -ru2 -- "I: generating U"
exec >utf-8
asn=
eqlen=${%vsn}
while (( eqlen-- )); do
	asn+=┄
done
cat <<EOF
┋ $rcsid
┋ $gen

The Universal Coded Character Set $vsn Basic Multilingual Plane
┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄$asn┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄

The width of these characters have been derived from
MirBSD’s new wcwidth code and thus, this file should
show up fine in an uxterm on MirOS (see xterm(1) for
further reference). This is a generated file, see a‐
bove for the RCS ID of the generator script and read
it for the licence terms on this file. Please credit
mirabilos in derivative works, if possible.

Combining characters with single-cell width are pre‐
fixed by two spaces in the table below. Places where
a C0 and C1 control character would appear show FFFD
as the replacement character instead, again indented
by two spaces instead of one, to denote this.

Now have fun copying and pasting, although be remin‐
ded to either use a recent version of xterm to do a‐
way with cut buffers or keep the selection active in
the source window during pasting; alternatively, use
an editor like jupp: http://www.mirbsd.org/jupp.htm
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
EOF
# NOTE: these are manually synchronised with acronyms,v
# specifically: KAPITÄLCHEN, SCRIPT, SUBSCRIPT, SUPERSCRIPT
cat <<EOF

s̲̲u̲p̲e̲r̲s̲c̲r̲i̲p̲t̲,̲ ̲s̲u̲b̲s̲c̲r̲i̲p̲t̲,̲ ̲K̲a̲p̲i̲t̲ä̲l̲c̲h̲e̲n̲ ̲a̲n̲d̲ ̲o̲t̲h̲e̲r̲ ̲s̲c̲r̲i̲p̲t̲

U ᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖ⁚ʳˢᵗᵘᵛʷˣʸᶻ⁰¹²³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾
D ₐ⁚⁚⁚ₑ⁚⁚ₕᵢⱼₖₗₘₙₒₚ⁚ᵣₛₜᵤᵥ⁚ₓ⁚⁚₀₁₂₃₄₅₆₇₈₉₊₋₌₍₎

U ᴬᴮ⁚ᴰᴱ⁚ᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾ⁚ᴿ⁚ᵀᵁⱽᵂ
K ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘꞯʀꜱᴛᴜᴠᴡ⁚ʏᴢ

U ᵅᵝᵞᵟᵋᶿᶥᶲ ᵠᵡ ªº C( ͣ ͨ ͩ ͤ ᷚ ᷛ ͪ ͥ ᷜ ᷝ ᷞ ͫ ᷟ ᷠ ᷡ ͦ ͬ ᷢ ᷤ ᷥ ͭ ͧ ͮ ͯ ᷦ) ʱʴʵʶˀˁˠˤ
D  ᵦᵧ     ᵨᵩᵪ

U ᴭᴯᴲᴻᴽᵄᵆᵊᵌᵎᵑᵓᵔᵕᵙᵚᵜᵸᶛᶝᶞᶟᶡᶢᶣᶤᶦᶧᶨᶩᶪᶫᶬᶭᶮᶯᶰᶱᶳᶴᶵᶶᶷᶸᶹᶺᶼᶽᶾ
K ᴁᴃᴆⱻᴣʛᵻᴌᴫᴎᴐɶᴕʁᴙᴚᵾꞮꟺꭆꝶᴦᴧꭥᴨᴪᴩ
S ℬ ℂ ℰ ℯ ℱ ℊ ℋℌℍ ℎ ℐℑ ℒ ℓ ℳ ℕ ℴ ℙ ℘ ℚ ℛℜℝ ℤℨ
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁

╭───────┰────┬────┬────┬────┬────┬────┬────┬────┰───────╮
╽ #0000 ┃  � │  � │  � │  � │  � │  � │  � │  � ┃ #0007 ╽
╿ #0008 ┃  � │  � │  � │  � │  � │  � │  � │  � ┃ #000F ╿
╽ #0010 ┃  � │  � │  � │  � │  � │  � │  � │  � ┃ #0017 ╽
╿ #0018 ┃  � │  � │  � │  � │  � │  � │  � │  � ┃ #001F ╿
EOF
i=0x1F
typeset -i1 j
typeset -Uui16 -Z7 k
while (( (k = j = ++i) <= 0xFFFD )); do
	(( i == 0xD800 )) && k=j=i=0xE000
	(( i == 0xEF80 )) && k=j=i=0xF000
	if (( !(i & 0xFFF) )); then
		print '┝━━━━━━━╋━━━━┿━━━━┿━━━━┿━━━━┿━━━━┿━━━━┿━━━━┿━━━━╋━━━━━━━┥'
	elif (( !(i & 0xFF) )); then
		print '├───────╂────┼────┼────┼────┼────┼────┼────┼────╂───────┤'
	fi
	(( l = i & 15 ))
	if (( l == 0 )); then
		print -n "╽ ${k#16} ┃ "
	elif (( l == 8 )); then
		print -n "╿ ${k#16} ┃ "
	else
		print -n " │ "
	fi
	m=${j#1#}
	n=${%m}
	if (( n == -1 )); then
		print -n " �"
	elif (( n == 0 )); then
		print -nr -- "  $m"
	elif (( n == 1 )); then
		print -nr -- "$m "
	elif (( n == 2 )); then
		print -nr -- "$m"
	else
		print -u2 Fatal $k $n
		exit 1
	fi
	if (( l == 7 )); then
		print " ┃ ${k#16} ╽"
	elif (( l == 15 )); then
		print " ┃ ${k#16} ╿"
		draw_progress_bar
	fi
done
cat <<\EOF
 ┟────┴────┚ #FFFD ╿
╰───────┸────┴────┴────┴────┴────┴────┸─────────────────╯

Valid octet sequences for UTF-8/CESU-8:
• 00‥7F				(ASCII)
• C2‥DF 80‥BF			(BMP U+00A0‥U+07FF)
•    E0 A0‥BF 80‥BF		(BMP U+0800‥U+0FFF)
• E1‥EF 80‥BF 80‥BF		(BMP U+1000‥U+FFFF)
•    F0 90‥BF 80‥BF 80‥BF	(astral planes)
• F1‥F3 80‥BF 80‥BF 80‥BF	(   "     "   )
•    F4 80‥8F 80‥BF 80‥BF	(   "     "   )
Surrogates: (H = D800‥DBFF, L = DC00‥DFFF) ⇒
 (((H & 0x03FF) << 10) | (L & 0x03FF) + 0x10000)
UTF-8: Exclude ED followed by A0‥BF (surrogates).
CESU-8: Exclude astral planes; ensure valid surrogates.
OPTU-8: Exclude astral planes and EE followed by BE‥BF.
EOF
# Note the above are also manually synchronised (UTF-8/CESU-8/OPTU-8)

exec >&2
rm JamoData.txt JamoBMP.txt
done_progress_bar
print -ru2 -- All OK.
@


1.16
log
@now do in fact the manual sync…
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/uni.mk,v 1.15 2018/12/02 08:05:05 tg Exp $'
d387 2
a388 1
Surrogates: (H = D800‥DBFF, L = DC00‥DFFF) ⇒ (((H & 0x03FF) << 10) | (L & 0x03FF) + 0x10000)
d396 1
@


1.15
log
@mark some as manyally sync’d
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/uni.mk,v 1.8 2018/08/10 01:47:02 tg Exp $'
d387 1
@


1.14
log
@add UniHan kDefinition; use progress bar
@
text
@d308 4
d391 1
@


1.13
log
@small optimisations that’ll pay out RSN
@
text
@d61 1
d64 14
d80 5
d91 1
d97 1
d100 1
d113 1
d115 1
d117 12
d130 7
d138 1
d167 1
d172 1
d203 1
d210 1
d266 1
d274 1
d368 1
d389 2
a390 1
echo All OK.
@


1.12
log
@check that necessary files exist before proceeding
@
text
@d55 1
a55 1
	[[ -s $1 ]] || return 0
d63 1
d65 1
d72 2
d75 1
a75 1
		print -r -- "$line"
a77 2
	typeset -Uui16 -Z7 cdisp=0x${line%%;*}
	line=${line#*;}
d81 3
a83 3
	let begc=cdisp--
	while (( ++cdisp <= endc )); do
		(( j1 = cdisp - begc ))
d89 1
a89 1
		print -r -- "${cdisp#16#};$n1;$line"
d92 1
d104 1
a104 1
 <meta name="generator" content="\$miros${rcsid#?MirOS}" />
d110 2
a111 2
sed '/^10000/,$d' <JamoData.txt | while IFS= read -r line; do
	typeset -i10 x=0x${line::4}
d120 1
a120 1
	print -r -- "<tr>$td$y</td><td>U+$line</td></tr>"
d122 1
a122 1
done
d135 2
a136 2
sed '/^10000/,$d' <JamoData.txt | while IFS= read -r line; do
	typeset -Uui16 -Z7 x=0x${line::4}
d155 2
a156 2
	print -r -- " ${line:5}"
done
d160 1
d164 1
a164 1
print -ru4 -- " From miros${rcsid#?MirOS}"
d171 1
a171 1
	typeset -Uui16 -Z11 wi=0x${line%%;*}
d214 3
a216 2
	print -r -- "${line#*;}"
	print -ru4 -- "$aO${line#*;}"
d221 1
d232 1
a232 1
┋ \$miros${rcsid#?MirOS}
@


1.11
log
@add rcsid of generator, too
@
text
@d53 10
@


1.10
log
@avoid the ™ issue by simply not using that name instead
@
text
@d91 1
@


1.9
log
@unidata.htm is supposed to be 7bit
@
text
@d79 1
a79 1
done <UnicodeData.txt >UnicodeData.jamo
d89 1
a89 1
 <title>The Unicode&#174; Database $vsn (BMP)</title>
d92 1
a92 1
<h1>Die Unicode&#174;-Datenbank $vsn (Basic Multilingual Plane)</h1>
d96 1
a96 1
sed '/^10000/,$d' <UnicodeData.jamo | while IFS= read -r line; do
a109 1
print -r -- '<p><small>Unicode is a registred trademark of Unicode, Inc. in many countries.</small></p>'
d113 1
a113 1
print -r -- "The Unicode® $vsn Basic Multilingual Plane"
d116 1
a116 1
	print -n =
d118 2
a119 1
print ======================================
d121 1
a121 1
sed '/^10000/,$d' <UnicodeData.jamo | while IFS= read -r line; do
a143 2
print 'Unicode is a registred trademark of Unicode, Inc. in many countries.'
print
d150 3
a152 7
print -ru4 -- " From unicode: $vsn"
print -r -- "Unicode® $vsn (all planes)"
eqlen=${%vsn}
while (( eqlen-- )); do
	print -n =
done
print ======================
d201 1
a201 3
done <UnicodeData.jamo
print
print 'Unicode is a registred trademark of Unicode, Inc. in many countries.'
d217 2
a218 2
The Unicode® $vsn Basic Multilingual Plane
┄┄┄┄┄┄┄┄┄┄┄┄┄$asn┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄
a227 7
Now have fun cutting and pasting, although be remin‐
ded that Unicode characters above U+00FF can only be
pasted while they are still marked in the source ux‐
term and the latter is visible on the screen. Alter‐
natively you can copy them using an UTF-8 aware edi‐
tor such as jupp: http://www.mirbsd.org/jupp.htm

d232 7
a238 1
by two spaces instead of one (to mark this).
a316 2

Unicode is a registred trademark of Unicode, Inc. in many countries.
@


1.8
log
@• Embed the Unicode® Character Database copyright, so we have it somewhere
• Some trademark foo, but shorten the country stuff, as the USA is not
  important for us Europeans
• Adjust various lines’ widths accordingly
• utf-8,v is no longer hand-edited; this is all in uni.mk nowadays;
  add uni.mk’s RCS ID to it conversely
• List valid UTF-8/CESU-8 sequences, to also have them somewhere
• … and OPTU-8, while here ☺
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/uni.mk,v 1.4 2018/01/07 00:25:29 tg Exp $'
d89 1
a89 1
 <title>The Unicode® Database $vsn (BMP)</title>
d92 1
a92 1
<h1>Die Unicode®-Datenbank $vsn (Basic Multilingual Plane)</h1>
@


1.7
log
@apparently, someone added a Kapitälchen Q to Unicode 11 to close the gap…

… but the others (superscript lowercase, subscript lowercase,
superscript uppercase) still have this gap and (except superscript
lowercase) quite some more…
@
text
@d21 31
d89 1
a89 1
 <title>The Unicode Database $vsn (BMP)</title>
d92 1
a92 1
<h1>Die Unicode-Datenbank $vsn (Basic Multilingual Plane)</h1>
d109 3
a111 1
print -r -- '</table></body></html>'
d114 1
a114 1
print -r -- "The Unicode $vsn Basic Multilingual Plane"
d119 1
a119 1
print =====================================
d144 2
d153 1
a153 1
print -r -- "Unicode $vsn (all planes)"
d158 1
a158 1
print =====================
d209 2
d223 1
d225 2
a226 2
The Unicode $vsn Basic Multilingual Plane
┄┄┄┄┄┄┄┄┄┄┄┄$asn┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄
d231 4
a234 7
further reference).

This file was generated (and hand-edited afterwards)
by mirabilos <m@@mirbsd.org>. Because this is a data‐
base it can be used without the need for an explicit
licence, but if possible I would like to be credited
on derivates.
d237 1
a237 1
ded that unicode characters above U+00FF can only be
d314 14
@


1.6
log
@update from MirOS: contrib/samples/utf-8,v 1.20
@
text
@d221 1
a221 1
K ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘ⁚ʀꜱᴛᴜᴠᴡ⁚ʏᴢ
@


1.5
log
@80772 acronyms with 104624 expansions

sync with TNF; add some more; fix a “make check” warning
@
text
@d223 1
a223 1
U ᵅᵝᵞᵟᵋᶿᶥᶲ ᵠᵡ ªº C( ͣͣ ͤ ͥ ͦ ͧ ͨ ͩ ͪ ͫ ͬ ͭ ͮ ͯ) ʱʴʵʶˀˁˠˤ
@


1.4
log
@version info for acronyms
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/uni.mk,v 1.3 2018/01/07 00:22:33 tg Exp $'
d117 1
a117 1
print -ru4 -- " From Unicode $vsn"
@


1.3
log
@add the Hangul syllables from the Jamo enumerated constructs to the lists;
generate a list suitable for acronyms (or so I hope)
@
text
@d2 1
a2 1
rcsid='$MirOS: contrib/hosted/tg/uni.mk,v 1.1 2017/11/18 12:11:38 tg Exp $'
d116 2
@


1.2
log
@make this capable of generating the exact targets
@
text
@d24 25
d65 1
a65 1
sed '/^10000/,$d' <UnicodeData.txt | while IFS= read -r line; do
d88 1
a88 1
sed '/^10000/,$d' <UnicodeData.txt | while IFS= read -r line; do
d115 1
d132 1
d136 1
d141 1
d148 1
d150 1
d155 1
d158 1
d161 1
d164 1
d166 1
d169 2
a170 1
done <UnicodeData.txt
d174 1
@


1.1
log
@add script used to generate the Unicode stuff in mircvs://contrib/samples/
@
text
@d2 19
a20 1
# $MirOS$
d22 1
d24 16
d50 13
a62 2
	print -r -- "<tr><td>$y</td><td>U+$line</td></tr>"
done >unidata.htm
d84 13
a96 1
done >unidata.txt
d133 65
a197 2
done <UnicodeData.txt >uni_smp.txt
i=0x1f
d200 1
a200 2

while (( (k = j = ++i) < 0x10000 )); do
d235 8
a242 1
done >utf-8
@

