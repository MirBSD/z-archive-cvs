head	1.11;
access;
symbols
	FWCF_1_06:1.10
	FWCF_1_05:1.10
	FWCF_1_04:1.10
	FWCF_1_03:1.10
	FWCF_1_01:1.9
	FWCF_1_00:1.9;
locks; strict;
comment	@ * @;


1.11
date	2013.10.31.20.05.47;	author tg;	state Exp;
branches;
next	1.10;
commitid	1005272B7081B0E5655;

1.10
date	2007.03.09.22.35.13;	author tg;	state Exp;
branches;
next	1.9;
commitid	10045F1E1277246A24A;

1.9
date	2006.09.26.10.25.02;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004518FFF55AB578D0;

1.8
date	2006.09.24.19.11.56;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004516D8645DBACA09;

1.7
date	2006.09.16.07.09.49;	author tg;	state Exp;
branches;
next	1.6;
commitid	100450BA34B6AE3B0F3;

1.6
date	2006.09.16.06.18.57;	author tg;	state Exp;
branches;
next	1.5;
commitid	100450B975E603852FA;

1.5
date	2006.09.16.05.06.22;	author tg;	state Exp;
branches;
next	1.4;
commitid	100450B865955F7315E;

1.4
date	2006.09.16.04.40.24;	author tg;	state Exp;
branches;
next	1.3;
commitid	100450B800C0C9AC337;

1.3
date	2006.09.16.03.52.04;	author tg;	state Exp;
branches;
next	1.2;
commitid	100450B74F3168B15F9;

1.2
date	2006.09.16.01.06.32;	author tg;	state Exp;
branches;
next	1.1;
commitid	100450B4E2A0543EDC1;

1.1
date	2006.09.16.00.52.13;	author tg;	state Exp;
branches;
next	;
commitid	100450B4ACC7A493A21;


desc
@@


1.11
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/* $MirOS: contrib/hosted/fwcf/compress.h,v 1.10 2007/03/09 22:35:13 tg Exp $ */

/*
 * This file is part of the FreeWRT project. FreeWRT is copyrighted
 * material, please see the LICENCE file in the top-level directory
 * or at http://www.freewrt.org/licence for details.
 */

#ifndef COMPRESS_H
#define COMPRESS_H

/* BEGIN of plug-in API description - hook yer proprietary modules here */

/* returns 0 on success, -1 on failure */
typedef int (*fwcf_compress_init_func)(void);
/* in: *dst (malloc'd), src, size of source (max. INT_MAX) */
/* returns size of destination on success, -1 on failure */
typedef int (*fwcf_compress_work_func)(char **, char *, size_t)
    __attribute__((__bounded__(__string__, 2, 3)));
/* in: dst, max size of dst, src, size of source (max. INT_MAX) */
/* returns size of destination on success, -1 on failure */
typedef int (*fwcf_compress_rev_func)(char *, size_t, char *, size_t)
    __attribute__((__bounded__(__string__, 1, 2)))
    __attribute__((__bounded__(__string__, 3, 4)));

typedef struct FWCF_COMPRESSOR {
	fwcf_compress_init_func init;
	fwcf_compress_work_func compress;
	fwcf_compress_rev_func decompress;
	const char *name;
	uint8_t code;
} fwcf_compressor;

__BEGIN_DECLS
/* 0=success 1=EINVAL 2=slot already used */
int compress_register(fwcf_compressor *);
__END_DECLS

/* END of plug-in API description, version 1.0 */

__BEGIN_DECLS
/* low-level */
fwcf_compressor *compress_enumerate(void);
int compress_list(void);

/* high-level */
fwcf_compressor *compressor_get(uint8_t);
int compressor_getbyname(const char *);
int list_compressors(void);
__END_DECLS

#endif
@


1.10
log
@while here… allow algorithm selection by name, too
(“I like my users”, or something.)
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.h,v 1.9 2006/09/26 10:25:02 tg Exp $ */
d19 1
a19 1
    __attribute__((bounded (string, 2, 3)));
d23 2
a24 2
    __attribute__((bounded (string, 1, 2)))
    __attribute__((bounded (string, 3, 4)));
@


1.9
log
@* fix missing includes
* cast a little more, for systems other than MirOS #9-current
* spelling
* build fwcf.helper correctly without libz
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.h,v 1.8 2006/09/24 19:11:56 tg Exp $ */
d48 1
@


1.8
log
@* compress.h: describe stable plug-in API for use by compression
  plugins (whose licence can be proprietary, e.g. GPL, as well)
* mkfwcf.c, unfwcf.c: include defs.h to increase chances they'll work on GNU
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.h,v 1.7 2006/09/16 07:09:49 tg Exp $ */
d6 1
a6 1
 * or at http://www.freewrt.org/license for details.
@


1.7
log
@more code-sharing
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.h,v 1.6 2006/09/16 06:18:57 tg Exp $ */
d12 2
d37 1
d39 3
@


1.6
log
@code sharing and cleanup
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.h,v 1.5 2006/09/16 05:06:22 tg Exp $ */
d35 2
d39 2
d42 1
@


1.5
log
@decompressing does need a different API, after all
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.h,v 1.4 2006/09/16 04:40:24 tg Exp $ */
d33 1
a35 1
/* 0=success 1=EINVAL 2=slot already used */
d37 1
@


1.4
log
@* fix prototype for compression functions: must use 'char *' for consistency
* add my own small adler32 implementation, after src/bin/md5/ad32-x86.S
* implement full enclosure with sanity checks
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.h,v 1.3 2006/09/16 03:52:04 tg Exp $ */
d18 5
d27 1
a27 1
	fwcf_compress_work_func decompress;
@


1.3
log
@be c++ friendly
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.h,v 1.2 2006/09/16 01:06:32 tg Exp $ */
d16 1
a16 1
typedef int (*fwcf_compress_work_func)(void **, void *, size_t)
@


1.2
log
@implement the 'null' compressor
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.h,v 1.1 2006/09/16 00:52:13 tg Exp $ */
d27 1
d32 1
@


1.1
log
@implement initial compressor hook list
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/fts_subs.h,v 1.1 2006/09/15 21:11:23 tg Exp $ */
d12 1
d14 2
d29 1
@

