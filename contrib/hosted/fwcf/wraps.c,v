head	1.7;
access;
symbols
	FWCF_1_06:1.7
	FWCF_1_05:1.7
	FWCF_1_04:1.7
	FWCF_1_03:1.7
	FWCF_1_01:1.7
	FWCF_1_00:1.7;
locks; strict;
comment	@ * @;


1.7
date	2006.09.26.10.25.03;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004518FFF55AB578D0;

1.6
date	2006.09.24.20.34.59;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004516EBC4399F582B;

1.5
date	2006.09.23.22.05.25;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004515AFA04C63C9B9;

1.4
date	2006.09.23.20.20.01;	author tg;	state Exp;
branches;
next	1.3;
commitid	100451596B33F0C3FA0;

1.3
date	2006.09.23.16.49.22;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004515659665BE1091;

1.2
date	2006.09.16.07.35.37;	author tg;	state Exp;
branches;
next	1.1;
commitid	100450BA94D3353BC7D;

1.1
date	2006.09.16.07.09.49;	author tg;	state Exp;
branches;
next	;
commitid	100450BA34B6AE3B0F3;


desc
@@


1.7
log
@* fix missing includes
* cast a little more, for systems other than MirOS #9-current
* spelling
* build fwcf.helper correctly without libz
@
text
@/* $MirOS: contrib/hosted/fwcf/wraps.c,v 1.6 2006/09/24 20:34:59 tg Exp $ */

/*-
 * Copyright (c) 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
 */

#include <sys/param.h>
#include <err.h>
#ifdef DEBUG
#include <stdio.h>
#endif
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "defs.h"
#include "adler.h"
#include "compress.h"
#include "fts_subs.h"
#include "pack.h"
#include "sysdeps.h"

__RCSID("$MirOS: contrib/hosted/fwcf/wraps.c,v 1.6 2006/09/24 20:34:59 tg Exp $");

char *
fwcf_packm(const char *dir, int algo, size_t *dstsz)
{
	char empty_data = 0, *data, *f_data = NULL;
	size_t i;

	if (dir == NULL) {
		data = &empty_data;
		i = 1;
	} else {
		ftsf_start(dir);
		data = (f_data = ft_packm()) + sizeof (size_t);
		i = *(size_t *)f_data - sizeof (size_t);
	}
	data = fwcf_pack(data, i, algo, dstsz);
	if (f_data != NULL)
		free(f_data);
	return (data);
}

char *
fwcf_pack(char *odata, size_t i, int algo, size_t *dstsz)
{
	int j;
	size_t k;
	char *data, *cdata;

	if (i > 0xFFFFFF)
		errx(1, "inner size of %lu too large", (u_long)i);
#ifdef DEBUG
	fprintf(stderr, "fwcf_pack: algo %02X packing %lu\n", algo, (u_long)i);
#endif

	if ((j = compressor_get(algo)->compress(&cdata, odata, i)) == -1)
		errx(1, "%s compression failed", compressor_get(algo)->name);

	/* 12 bytes header, padding to 4-byte boundary, 4 bytes trailer */
	k = ((j + 19) / 4) * 4;
#if DEF_FLASHPART > 0xFFFFFF
# error DEF_FLASHPART too large
#endif
	if (k > DEF_FLASHPART)
		errx(1, "%lu bytes too large for flash partition of %lu KiB",
		    (u_long)k, DEF_FLASHPART / 1024UL);
	/* padded to size of flash block */
#if (DEF_FLASHBLOCK & 3)
# error DEF_FLASHBLOCK must be dword-aligned
#endif
	*dstsz = ((k + (DEF_FLASHBLOCK - 1)) / DEF_FLASHBLOCK) * DEF_FLASHBLOCK;
	if ((data = malloc(*dstsz)) == NULL)
		err(1, "malloc");
	mkheader(data, *dstsz, k, i, algo);
	memcpy(data + 12, cdata, j);
	free(cdata);
	k = j + 12;
	while (k & 3)
		data[k++] = 0;
	mktrailer(data, k);
	k += 4;
	pull_rndata((uint8_t *)data + k, *dstsz - k);
	return (data);
}
@


1.6
log
@* join mkfwcf.c, unfwcf.c, fwcf.helper.c into a single file tool.c
  which builds a combinded mkfwcf+unfwcf for the host normally, and
  a stripped-down tool for the target #ifdef SMALL (code sharing ;)
* enhance the tool by recompress functionality

Note: mkfwcf and unfwcf are kept for now
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/wraps.c,v 1.5 2006/09/23 22:05:25 tg Exp $ */
d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/fwcf/wraps.c,v 1.5 2006/09/23 22:05:25 tg Exp $");
d72 1
a72 1
	fprintf(stderr, "fwcf_pack: algo %02X compressing %lu\n", algo, i);
@


1.5
log
@implement the ability to create empty filesystems
implement linux sysdeps for random
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/wraps.c,v 1.4 2006/09/23 20:20:01 tg Exp $ */
d26 3
d40 1
a40 3
__RCSID("$MirOS: contrib/hosted/fwcf/wraps.c,v 1.4 2006/09/23 20:20:01 tg Exp $");

static char empty_data[sizeof (size_t) + 1];
d43 1
a43 1
fwcf_pack(const char *dir, int algo, size_t *dstsz)
d45 2
a46 3
	size_t i, k;
	int j;
	char *data, *cdata;
d49 2
a50 3
		bzero(empty_data, sizeof (empty_data));
		*(size_t *)empty_data = sizeof (empty_data);
		data = empty_data;
d53 2
a54 1
		data = ft_packm();
d56 13
a68 1
	i = *(size_t *)data - sizeof (size_t);
d71 3
d75 1
a75 2
	if ((j = compressor_get(algo)->compress(&cdata, data + sizeof (size_t),
	    i)) == -1)
a76 2
	if (data != empty_data)
		free(data);
@


1.4
log
@* wraps.c: properly calculate size of the flash block from the outer
  size, not from the inner size
* all: handle entropy
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/wraps.c,v 1.3 2006/09/23 16:49:22 tg Exp $ */
d37 3
a39 1
__RCSID("$MirOS: contrib/hosted/fwcf/wraps.c,v 1.3 2006/09/23 16:49:22 tg Exp $");
d48 8
a55 2
	ftsf_start(dir);
	data = ft_packm();
d63 2
a64 1
	free(data);
@


1.3
log
@add to the size_t confusion... different OSes have different
definitions for it
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/wraps.c,v 1.2 2006/09/16 07:35:37 tg Exp $ */
d35 1
d37 1
a37 1
__RCSID("$MirOS: contrib/hosted/fwcf/wraps.c,v 1.2 2006/09/16 07:35:37 tg Exp $");
d69 1
a69 1
	*dstsz = ((i + (DEF_FLASHBLOCK - 1)) / DEF_FLASHBLOCK) * DEF_FLASHBLOCK;
d80 1
a80 4
	while (k < *dstsz) {
		*(uint32_t *)(data + k) = arc4random();
		k += 4;
	}
@


1.2
log
@split the code into smaller units to reduce final executables' sizes
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/wraps.c,v 1.1 2006/09/16 07:09:49 tg Exp $ */
d36 1
a36 1
__RCSID("$MirOS: contrib/hosted/fwcf/wraps.c,v 1.1 2006/09/16 07:09:49 tg Exp $");
d49 1
a49 1
		errx(1, "inner size of %d too large", i);
d62 2
a63 2
		errx(1, "%d bytes too large for flash partition of %d KiB",
		    k, DEF_FLASHPART / 1024);
@


1.1
log
@more code-sharing
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.14 2006/08/09 19:35:23 tg Rel $ */
d33 1
d36 1
a36 1
__RCSID("$MirOS$");
a37 46
#ifdef WRAPS_UNPACK
char *
fwcf_unpack(int fd)
{
	uint8_t c, hdrbuf[12];
	size_t outer, inner, x;
	char *cdata, *udata;

	if (read(fd, hdrbuf, 12) != 12)
		err(1, "read");

	if (strncmp((const char *)hdrbuf, "FWCF", 4))
		errx(1, "file format error");

	outer = LOADT(hdrbuf + 4);
	if (hdrbuf[7] != FWCF_VER)
		errx(1, "wrong file version %02Xh", hdrbuf[7]);
	inner = LOADT(hdrbuf + 8);
	c = hdrbuf[11];

	if (((cdata = malloc(outer)) == NULL) ||
	    ((udata = malloc(inner)) == NULL))
		err(1, "malloc");
	memcpy(cdata, hdrbuf, 12);
	if ((size_t)read(fd, cdata + 12, outer - 12) != (outer - 12))
		err(1, "read");

	ADLER_START(cdata)
	unsigned len = outer - 4;
	ADLER_RUN
	if ((s1 != LOADW(cdata + outer - 4)) ||
	    (s2 != LOADW(cdata + outer - 2)))
		errx(1, "crc mismatch: %02X%02X%02X%02X != %04X%04X",
		    cdata[outer - 1], cdata[outer - 2], cdata[outer - 3],
		    cdata[outer - 4], s2, s1);
	ADLER_END

	if ((x = compressor_get(c)->decompress(udata, inner, cdata + 12,
	    outer - 12)) != inner)
		errx(1, "size mismatch: decompressed %d, want %d", x, inner);
	free(cdata);
	return (udata);
}
#endif

#ifdef WRAPS_PACK
a84 1
#endif
@

