head	1.40;
access;
symbols
	FWCF_1_06:1.39
	FWCF_1_05:1.37
	FWCF_1_04:1.37
	FWCF_1_03:1.36
	FWCF_1_01:1.15
	FWCF_1_00:1.15;
locks; strict;
comment	@# @;


1.40
date	2018.10.07.01.10.16;	author tg;	state Exp;
branches;
next	1.39;
commitid	1005BB95CA10BF418E8;

1.39
date	2008.12.10.18.40.15;	author tg;	state Exp;
branches;
next	1.38;
commitid	10049400D213BD80DD4;

1.38
date	2008.05.03.01.09.30;	author tg;	state Exp;
branches;
next	1.37;
commitid	100481BBB3B66CD6DBA;

1.37
date	2007.07.02.14.55.44;	author tg;	state Exp;
branches;
next	1.36;
commitid	1004689120169EA4559;

1.36
date	2007.03.13.18.31.07;	author tg;	state Exp;
branches;
next	1.35;
commitid	10045F6EDB57C43F78A;

1.35
date	2007.03.09.22.40.53;	author tg;	state Exp;
branches;
next	1.34;
commitid	10045F1E28A0D83B069;

1.34
date	2007.03.09.21.34.55;	author tg;	state Exp;
branches;
next	1.33;
commitid	10045F1D2F428FA2958;

1.33
date	2007.03.09.21.10.28;	author tg;	state Exp;
branches;
next	1.32;
commitid	10045F1CCB44F1E7E4F;

1.32
date	2007.03.02.05.42.27;	author tg;	state Exp;
branches;
next	1.31;
commitid	10045E7B93D1CADE911;

1.31
date	2007.02.28.23.17.34;	author tg;	state Exp;
branches;
next	1.30;
commitid	10045E60D56391D0419;

1.30
date	2007.02.28.21.17.00;	author tg;	state Exp;
branches;
next	1.29;
commitid	10045E5F1440125E5FF;

1.29
date	2007.02.28.21.14.31;	author tg;	state Exp;
branches;
next	1.28;
commitid	10045E5F0AB2C9680B0;

1.28
date	2007.02.28.21.08.22;	author tg;	state Exp;
branches;
next	1.27;
commitid	10045E5ED86358E315E;

1.27
date	2007.02.20.21.06.02;	author tg;	state Exp;
branches;
next	1.26;
commitid	10045DB62AF7E120DAE;

1.26
date	2007.02.20.21.00.31;	author tg;	state Exp;
branches;
next	1.25;
commitid	10045DB617A640DAB51;

1.25
date	2007.02.20.20.02.13;	author tg;	state Exp;
branches;
next	1.24;
commitid	10045DB539B044EFEAD;

1.24
date	2007.02.12.22.19.37;	author tg;	state Exp;
branches;
next	1.23;
commitid	10045D0E7EE74E12E44;

1.23
date	2007.02.12.21.49.08;	author tg;	state Exp;
branches;
next	1.22;
commitid	10045D0E08B06107D21;

1.22
date	2007.02.12.20.52.47;	author tg;	state Exp;
branches;
next	1.21;
commitid	10045D0D39831CC1EF9;

1.21
date	2007.02.12.20.47.47;	author tg;	state Exp;
branches;
next	1.20;
commitid	10045D0D2723985AB03;

1.20
date	2007.02.12.20.35.39;	author tg;	state Exp;
branches;
next	1.19;
commitid	10045D0CF4B6B5A7F4F;

1.19
date	2007.01.26.20.38.31;	author tg;	state Exp;
branches;
next	1.18;
commitid	10045BA66B25A4648A3;

1.18
date	2007.01.25.19.00.43;	author tg;	state Exp;
branches;
next	1.17;
commitid	10045B8FE4C340D3144;

1.17
date	2006.12.20.16.15.15;	author tg;	state Exp;
branches;
next	1.16;
commitid	10045896171059CCD2C;

1.16
date	2006.12.11.23.54.54;	author tg;	state Rel;
branches;
next	1.15;
commitid	100457DEFC626A6A05C;

1.15
date	2006.09.26.10.05.29;	author tg;	state Rel;
branches;
next	1.14;
commitid	1004518FB715E87C007;

1.14
date	2006.09.24.20.46.44;	author tg;	state Stab;
branches;
next	1.13;
commitid	1004516EEBC5E107731;

1.13
date	2006.09.24.20.46.11;	author tg;	state Exp;
branches;
next	1.12;
commitid	1004516EE9525F017D7;

1.12
date	2006.09.24.03.18.34;	author tg;	state Stab;
branches;
next	1.11;
commitid	1004515F9096AE09BCF;

1.11
date	2006.09.24.03.06.21;	author tg;	state Exp;
branches;
next	1.10;
commitid	1004515F63C2E8FBE7E;

1.10
date	2006.09.24.02.05.07;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004515E7D9311C7E66;

1.9
date	2006.09.23.22.54.34;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004515BB3506BA8EBE;

1.8
date	2006.09.23.21.50.21;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004515ABBF2047C8ED;

1.7
date	2006.09.23.18.41.15;	author tg;	state Exp;
branches;
next	1.6;
commitid	10045157FCE33E13363;

1.6
date	2006.09.23.16.54.49;	author tg;	state Exp;
branches;
next	1.5;
commitid	100451566DB061CDD77;

1.5
date	2006.09.16.03.19.52;	author tg;	state Exp;
branches;
next	1.4;
commitid	100450B6D5E42B9A728;

1.4
date	2006.09.16.01.55.24;	author tg;	state Exp;
branches;
next	1.3;
commitid	100450B598527EA0606;

1.3
date	2006.09.15.20.09.36;	author tg;	state Exp;
branches;
next	1.2;
commitid	100450B082946BA0B6E;

1.2
date	2006.09.12.23.07.40;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045073DCC29939C3B;

1.1
date	2006.09.12.22.50.55;	author tg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	100450739B74FFC343D;

1.1.1.1
date	2006.09.12.22.50.55;	author tg;	state Exp;
branches;
next	;
commitid	100450739B74FFC343D;


desc
@@


1.40
log
@spelling cleanup: “programme” is distinct from “program”; even in
British English, the latter is used for computer programs, while
the former serves for things like the TV programme, or a programme
to plant trees
@
text
@﻿                 FreeWRT Configuration Filesystem
                 ════════════════════════════════

                      Specification Document

                                        Version 1.04 - 2 July 2007


Copyright © 2006, 2007
	Thorsten Glaser <tg@@mirbsd.de>

Provided that these terms and disclaimer and all copyright notices
are retained or reproduced in an accompanying document, permission
is granted to deal in this work without restriction, including un-
limited rights to use, publicly perform, distribute, sell, modify,
merge, give away, or sublicence.

This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
the utmost extent permitted by applicable law, neither express nor
implied; without malicious intent or gross negligence. In no event
may a licensor, author or contributor be held liable for indirect,
direct, other damage, loss, or other issues arising in any way out
of dealing in the work, even if advised of the possibility of such
damage or existence of a defect, except proven that it results out
of said person's immediate fault when using the work as intended.


1. Abstract
―――――――――――

FreeWRT is an operating system for embedded devices. At the moment,
it provides a uClibc/GNU/Linux-based operating environment for mips-
based hardware routers, e.g. from Linksys or Asus.

FreeWRT operates on flash memory and as such is under constraints to
reduce the amount of write operations to the root filesystem, because
flash memory has limited lifetime. Changing the file-based configura-
tion in /etc, however, often requires a fair amount of write opera-
tions; furthermore, usual reconfiguration operations change more than
only one file, possibly erasing and re-writing the same flash memory
block several times. In addition, in between these changes, the sy-
stem is in an inconsistent state, and, if the configuration changes
render the system unusable, a simple reboot will not be able to fix
it, a full reflash and reconfiguration is required.

My proposed implementation will present /etc as a memory filesystem,
loaded at boot with the content of the underlying /etc from the de-
fault root filesystem (usually on squashfs or jffs2), then populated
with additional files read from a custom flash partition in the be-
low documented format. Changes to /etc will never be reflected in the
underlying root filesystem, and the fwcf partition is only updated by
a userland program to be run manually.


2. Implementation details
―――――――――――――――――――――――――

The size of the flash partition has been set by the FreeWRT project
to 128 KiB (usually two flash blocks). A custom flash map driver has
been added to the FreeWRT kernel before the import of fwcf.

The command-line utility will support three operations:
• fwcf setup		to be run by the rc bootup script early
• fwcf commit		similar to Cisco ‘write’
• fwcf erase		similar to Cisco ‘erase startup-config’
• fwcf status		NEW IN 1.03: check if commit is needed
• fwcf dump		NEW IN 1.03: make a backup of the fwcf filesystem
• fwcf restore		NEW IN 1.03: restore a previously made backup
• halt		\
• poweroff	 >	NEW IN 1.04: wrapper around busybox
• reboot	/

This utility is implemented as rapid prototype as a shell script in
ash, using one C helper program. Later versions will be pure C.


2.1. Operation of ‘fwcf setup’
――――――――――――――――――――――――――――――

This command will first remap the existing /etc (via ‘mount --bind’)
to /tmp/.fwcf/root. Then, it will create a memory filesystem (tmpfs)
at /tmp/.fwcf/temp and populate it with all files from /tmp/.fwcf/root.
Now, the fwcf flash partition will be read, the format and checksum
verified and data extracted to /tmp/.fwcf/temp, possibly overwriting
pre-existing files†. Then, the /tmp/.fwcf/temp filesystem will be re-
bound to /etc and, finally, the mountpoint at /tmp/.fwcf/temp unloaded.

NEW IN 1.03: If /etc/.fwcf_deleted exists, the files listed in it,
newline-separated, will be removed from and relative to /etc, then
the file itself will be removed.

Data from the end of the fwcf data in the flash partition to the
end of the 64 KiB block the end of data resides in will be written
to /dev/urandom.

NEW IN 1.03: Afterwards, a sorted list of all files is given to the
busybox md5sum applet, the output is stored as /tmp/.fwcf/status.asz

If the “fwcf” mtd partition does not start with the four letters
FWCF on invoking ‘fwcf setup’, it is erased (i.e. populated with
an empty FWCF filesystem).

NEW IN 1.03: If run with ‘-N’, it will not read out the data from
flash and force an “unclean startup”, as described below.

†) NEW IN 1.03: If this fails, but the “fwcf” mtd partition starts
with FWCF, i.e. we cannot read the flash filesystem, possibly because
it's from an incompatible format or unknown compressor, a flag file
is created as /etc/.fwcf_unclean to prevent a following commit which
would lead to data loss. The user must remove this file to override.


2.2. Operation of ‘fwcf commit’
―――――――――――――――――――――――――――――――

A new memory filesystem (tmpfs) will be createt at /tmp/.fwcf/temp
and populated with the data currently in /etc. Now, NEW IN 1.03,
the /tmp/.fwcf/status.asz file is recreated. Then, ALSO NEW IN 1.03,
files in /tmp/.fwcf/root but not in /tmp/.fwcf/temp will be listed
in /tmp/.fwcf/temp/.fwcf_deleted, newline-separated. Now, all files
with exactly the same content in /tmp/.fwcf/root will be removed
from /tmp/.fwcf/temp. Any remaining files will be packed into the
fwcf format documented below and written to the flash partition,
padded to a multiple of 64 KiB with data read from /dev/urandom.

Unclean setups, NEW IN 1.03, will prevent a commit, unless the
file /etc/.fwcf_unclean is removed manually, or the ‘-f’ option
is given.

The first public release does only support directories, files
and symbolic links, for simplicity. Stored hard links and other
file types will be skipped, because their storage format is al-
ready specified (as “reserved for future use”), and ignored. No
inode or file-sequential-number information is read or written.


2.3. Operation of ‘fwcf erase’
――――――――――――――――――――――――――――――

In theory, just writing a NUL byte to the beginning of the flash
partition would suffice. However, this requires an mtd erase and
flash operation of one entire flash block (usually 64 KiB), so an
empty fwcf filesystem padded with random data to the next 64 KiB
will be written instead, for the added benefit of improving the
quality of the kernel PRNG even over total reconfigurations.


2.4. Operation of ‘fwcf status’ (NEW IN 1.03)
――――――――――――――――――――――――――――――― ┄┄┄┄┄┄┄┄┄┄┄┄┄

For all files in /etc, the ‘md5sum’ busybox applet is run, output
stored in a temporary file and compared against the saved values
from ‘fwcf setup’. If the ‘-q’ flag is not given, the differences
are shown as “<oldmd5><space><newmd5><space><file>”, where the md5
is expressed as shown by the busybox applet, or as padded¹ “<NULL>”
if the file does not exist on either side, where “old” is the status
at fwcf setup time (or the /etc from the root fs, if ‘-r’ is given),
and “new” is the status of the current (tmpfs) /etc. If there are
no differences, the exit status is 0, non-0 otherwise.

If the ‘-r’ flag is given, operation is done against the data that
is stored in the ROM, without considering the contents of the FWCF
filesystem, instead.

¹) Every “MD5” value is padded to be 32 bytes long, at its left
   side, with spaces (just to clarify).


2.5. Operation of ‘fwcf dump’ (NEW IN 1.03)
――――――――――――――――――――――――――――― ┄┄┄┄┄┄┄┄┄┄┄┄┄

A dump of the data currently stored in flash (commit first if you
have changed anything!) is dumped to the filename argument, or to
standard output, if none is present.

Note: dumps are a LZO1X compressed tarball of a 256-byte entropy
seed (“seed”) and the contents of the “inner filesystem” in “asz”
format (“dump”), which is stored as .tar.asz itself. There is no
version information, and this is by design.

Implementation information: the fwcf helper tool has a new mo-
de of operation in which it works as compressor/decompressor –
the algorithm used is determined with the -C option on a build
system, and at compile time (i.e. the only one compiled in) on
the target system. That's a compromise relative to using gzip,
because it makes dumps depend on the compression algorithms in
use, but it's always LZO1X-1 in FreeWRT 1.03 and up, and no de-
pendency on a 50+ KiB gzip binary is added; the .tar.asz enco-
ded dump can be recompressed with the tool on the build system.

While the dump itself is tar → compressed → asz encoded, “asz”
itself is not a compressing format, just a storage container –
which stores one octet stream, plus size and checksum informa-
tion only. Because many compressors have no idea about the un-
compressed size, the actual encoded data is prefixed by a lit-
tle endian unsigned 32-bit integer of the uncompressed length;
the resulting larger buffer is then passed to the asz encoder.


2.6. Operation of ‘fwcf restore’ (NEW IN 1.03)
―――――――――――――――――――――――――――――――― ┄┄┄┄┄┄┄┄┄┄┄┄┄

A dump created with “fwcf dump” is expected to be read from the
filename argument, or standard input, if none is present, and
then written to flash.


3. Structure of the fwcf data
―――――――――――――――――――――――――――――

All data is written in little-endian format.

The fwcf data begins at offset 0 in the flash partition, with the
magic bytes “FWCF” (0x46435746).

The next doubleword (four bytes) is the “outer length” of the fwcf
data, including the header (including the magic bytes and the length
information itself) and the trailer (checksum), but not the padding;
the length takes up the lower 24 bits of this doubleword. The upper
8 bits are the (major) version of the specification adhered to, i.e.
0x01 for this document. This information shall be true for all ver-
sions of this specification in order to enable the fwcf command-line
utility to perform as follows: it is not required to process any non-
native versions of fwcf data, but even if reading a different version,
the random data used for the padding should be written to /dev/urandom.

The following information is dependent on the version of the speci-
fication.

The next doubleword (starting at offset 8) is the “inner length” of
the compressed fwcf data (lower 24 bit), or'd with the identification
number of the compression algorithm used (upper 8 bit). Note this ef-
fectively limits both the uncompressed and the compressed size of an
fwcf filesystem to 2²⁴ bytes = 16 MiB. Since the filesystem is de-
signed for /etc, this limitation is not expected to be troublesome.

After this, at offset 12, the compressed data starts. It is padded
to the next 4-byte boundary with zeroes.

The next doubleword is the ADLER-32 checksum (as defined by libz)
of all previous data, starting from the magic bytes at offset 0,
ending with the zero-padding of the compressed data. Note that this
does not check the integrity of the data after decompressing; cur-
rently we must trust the decompressor to check integrity and do a
length check on the decompressed data returned by the plugin our-
selves. The next major version of the specification may change that.


4. Compression algorithm allocation
―――――――――――――――――――――――――――――――――――

An implementation is only required to be able to use exactly one of
the compression algorithms defined below, but it is not required to
implement a specific algorithm. Conversion might be achieved by un-
and repacking the data, or using an fwcf implementation with multi-
ple algorithms. Every implementation, however, is required to offer
at least one of the non-private algorithms below.

This draft of the specification offers two compression algorithms:

0x00 = plain uncompressed data
0x01 = zlib deflate compression as per http://www.zlib.net/
0x10 = LZO1X as per http://www.oberhumer.com/opensource/lzo/

Algorithm codes from 0xE0 to 0xFF are available for private use.


5. Structure of the fwcf filesystem
―――――――――――――――――――――――――――――――――――

The compressed/inner data consists of a byte stream without padding
applied, in the following format:

entry ::= file-entry | NUL-byte

file-entry ::= pathname NUL-byte attributes NUL-byte data

attributes ::= attribute ( attribute )*

The pathname is a POSIX pathname, i.e. can contain any character
except NUL. Directories are separated with ‘/’ and automatically
created by the extraction tool if required. If the first octet
of the pathname is a NUL byte (i.e. it is of zero length), the
end of the filesystem has been reached. Any data read afterwards
MUST be discarded for security reasons.

Attributes consist of a one-byte identifier, which is usually a
letter, and a zero-to-multiple-bytes payload. If the identifier
is a letter, its lowercase and uppercase forms denote the same
attribute with a different payload length.

The raw file data is not padded or aligned; its length is an at-
tribute. Alternate streams / forks are not supported.


6. Currently defined attributes
―――――――――――――――――――――――――――――――

0x01	this file is a block special device ①
	no payload
	reserved for future use

0x02	this file is a character special device ①
	no payload
	reserved for future use

0x03	this file is a symbolic link ②
	no payload

0x04	this file is a hard link to another file ① ④
	no payload
	reserved for future use

0x05	this file is a directory ④
	no payload

0x0D	this file is deleted ①
	reserved for future use

0x10	modification time of the entry
	optional
	ignored for symbolic links
	payload length: 32 bit

g/G	group of the file (numeric GID)
	optional
	payload length: lowercase = 8 bit, uppercase = 32 bit

i/I	“inode” of the file ① ④
	required if this file is a hard link source or target
	optional (ignored) otherwise
	payload length: lowercase = 8 bit, uppercase = 16 bit
	reserved for future use

m/M	mode_t / permissions of the file ③
	optional
	ignored for symbolic links
	payload length: lowercase = 16 bit, uppercase = 32 bit

o/O	owner of the file (numeric UID)
	optional
	payload length: lowercase = 8 bit, uppercase = 32 bit

s/S	size of the file
	for files and symbolic links: mandatory
	for directories, device nodes and hard links: forbidden
	payload length: lowercase = 8 bit, uppercase = 24 bit

① These identifiers are defined in this specification for future
  use; implementations do not need to support them at this time.

② The name of the target is the data, thus, size is required.

③ Defaults to 0 if not used (for security reasons), so labelling
  it as “optional” is probably a farce ☺

④ Implementing hard links and directories is, of course, optional
  for the writer.


7. Miscellaneous
――――――――――――――――

The initial idea for a “configuration filesystem” based upon the
Linux FUSE kernel module has been communicated to me by Waldemar
Brodkorb, FreeWRT Project Founder. After a discussion with him I
decided on the archive/userland tool layout outlined in sections
1 and 2 above. For FreeWRT 1.0, it has been realised in shell.

For now, nodes other than directories, files, and symbolic links
are not supported.

Development of FWCF is hosted in the CVS repository of the MirOS
project. Anonymous read-only CVS access is available at the root
“:ext:_anoncvs@@anoncvs.mirbsd.org:/cvs” by passwordless ext-via-
SSH on port 22; module “fwcf”. CVSweb is also available, e.g. at
http://cvs.mirbsd.de/contrib/hosted/fwcf/ or its mirrors.

FWCF code is released under the same licence terms as the speci-
fication. The author would really appreciate users to credit his
name and that of the FreeWRT Project in derived works and/or the
placement of links to the CVS repository of the original source.


8. The “asz” file format (NEW IN 1.03)
―――――――――――――――――――――――― ┄┄┄┄┄┄┄┄┄┄┄┄┄

The “asz” format is intended for storing small arbitrary 8-bit
data, and used in the “fwcf dump” and “fwcf restore” formats –
the dump itself is a raw uncompressed “inner fwcf filesystem”,
stored as “asz”, and the storage used by the dump/restore com-
mands is a tarball, compressed with lzo1X1 (in the current im-
plementation), the result stored, again, as “asz”.

It almost looks like the “outer fwcf” format, except the start
isn't a header but the ADLER-32 checksum double-word (2 unsig-
ned 16-bit integer in LITTLE ENDIAN), i.e. without magic bytes
to identify the format; followed by the length double-word – 1
unsigned 32-bit integer in LITTLE ENDIAN – and finally the raw
binary data. Only the lowest three octets of the length should
be used because the current implementation malloc(3)s a buffer
containing the whole data.


9. Future directions
――――――――――――――――――――

The next major version of the FWCF filesystem specification is
likely to contain the following changes:

• An additional checksum (probably ADLER32 as well) shall be
  placed inside the compressed portion, to be checked after
  decompression. The idea of adding a random IV has not been
  adopted because we pretty much want the same FWCF blocks,
  except the random padding at the end, to be generated for
  the same input data. (This is not guaranteed because fts()
  may traverse the directory hierarchy differently.)
• Revisit the current size limits and file types.
• Implement a r̲e̲a̲l̲ file type “deleted”, replacing the hack
  with the .fwcf_deleted file.

These future directions have come up during or after the
fwcf 1.00 release process, and from the discussion thereafter.
They are provided as hint only and not part of the specifi-
cation itself. They may change without notice.

⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.39 2008/12/10 18:40:15 tg Exp $
@


1.39
log
@eurynome: anoncvs@@ → _anoncvs@@
@
text
@d52 1
a52 1
a userland programme to be run manually.
d74 1
a74 1
ash, using one C helper programme. Later versions will be pure C.
d428 1
a428 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.38 2008/05/03 01:09:30 tg Exp $
@


1.38
log
@remove advertising clause for all of contrib/ except
‣ heartbeat server/client, for now
‣ stuff in jupp that’ll be regenerated before next release anyway
@
text
@d375 1
a375 1
“:ext:anoncvs@@anoncvs.mirbsd.org:/cvs” using password “anoncvs”,
d428 1
a428 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.37 2007/07/02 14:55:44 tg Exp $
@


1.37
log
@bump to fwcf 1.04
@
text
@a17 5
Advertising materials mentioning features or use of this work must
display the following acknowledgement:
	This product includes material provided by Thorsten Glaser
	for the FreeWRT Project.

d380 3
a382 4
fication, but without the advertising clause. The author however
would really appreciate users to credit his name and that of the
FreeWRT Project in derived works and/or links to the CVS reposi-
tory of the original source.
d428 1
a428 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.36 2007/03/13 18:31:07 tg Exp $
@


1.36
log
@release an 1.03 as per request of wbx@@
• he's been using it on his freewrt 1.0 system for a while now without problems
• if it won't be committed into trunk, nobody's going to test it

this release implies the “reboot hook” changes in freewrt itself are done
@
text
@d6 1
a6 1
                                      Version 1.03 - 13 March 2007
d74 3
d434 1
a434 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.35 2007/03/09 22:40:53 tg Exp $
@


1.35
log
@change dump.tar.gz and status.gz to dump.tar.LZO1X-1.asz and status.LZO1X-1.asz
@
text
@d6 1
a6 1
                                  Version 1.03β - 28 February 2007
a423 6
• Some kind of “reboot hook”: check if the filesystem has
  been changed after the last ‘fwcf commit’ operation. (What
  exactly is a change? Do we take care of mtimes? Currently,
  we're tending to a list of MD5 hashes for the files in the
  filesystem, ignoring all non-regular files. This will be
  implemented as “fwcf status” operation.)
d431 1
a431 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.34 2007/03/09 21:34:55 tg Exp $
@


1.34
log
@Because many compressors have no idea about the uncompressed size,
the actual encoded data for the compression mode of the helper tool
must be prefixed by a little endian unsigned 32-bit integer of the
uncompressed length; the result is then passed to the asz encoder.
@
text
@d178 1
a178 1
Note: dumps are a LZO-1X compressed tarball of a 256-byte entropy
d189 1
a189 1
use, but it's always LZO-1X in FreeWRT 1.03 and up, and no de-
d395 1
a395 1
mands is a tarball, compressed with LZO-1X (in the current im-
d437 1
a437 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.33 2007/03/09 21:10:28 tg Exp $
@


1.33
log
@as per dnehring@@ request, we'll use .tar.LZO-1X.asz as dump format,
instead of .tar.gz, to not pull in a 50+ KiB gzip binary as required
dependency – the “asz” encoding is necessary because LZO itself has
no framing information.
• document that
• document the “asz” encoding – which we already use in storing the
  dump “fwcf inner filesystem” data itself
• move routines for asz en-/decoding into a new file, minilzop.c
• prepare for adding the LZO-1X file compression helper command mode
• fix a few minor glitches
@
text
@d196 4
a199 1
tion only.
d437 1
a437 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.32 2007/03/02 05:42:27 tg Exp $
@


1.32
log
@d̲o̲ store a little entropy seed with backups, and gzip them
no additional dependencies
@
text
@d99 1
a99 1
busybox md5sum applet, the output is stored as /tmp/.fwcf/status.gz
d120 1
a120 1
the /tmp/.fwcf/status.gz file is recreated. Then, ALSO NEW IN 1.03,
d178 3
a180 4
Note: dumps do not contain any entropy seed. They consist of four
bytes ADLER-32 of everything afterwards, little-endian, then four
length bytes (of course only the lower/first three are used), and
after that, the contents of the “inner filesystem”. That's it. No
d183 14
a196 2
Note: as of March 2007, dumps and a little bit of random seed are
packed together in a .tar.gz file as dump format to save space.
d385 21
a405 1
8. Future directions
d434 1
a434 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.31 2007/02/28 23:17:34 tg Exp $
@


1.31
log
@• fwcf.txt, fwcf.sh: “fwcf dump” and “fwcf restore” just now arrived,
  perusing the new -D option of the fwcf helper tool
  XXX should I pipe the output through gzip(1)?
  XXX on second thoughts, maybe not, maybe does the user want to do it
• fwcf.txt: more unicodisation (resistance is futile)
@
text
@d184 3
d403 1
a403 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.30 2007/02/28 21:17:00 tg Exp $
@


1.30
log
@since I botched (released fwcf 1.01-current versions as fwcf 1.02 without
the -beta appended), 1.02 is hereby renamed to 1.03; there will be no 1.02.
@
text
@d68 6
a73 4
* fwcf setup		to be run by the rc bootup script early
* fwcf commit		similar to Cisco ‘write’
* fwcf erase		similar to Cisco ‘erase startup-config’
* fwcf status		NEW IN 1.03: check if commit is needed
d171 22
d377 1
a377 1
* An additional checksum (probably ADLER32 as well) shall be
d384 2
a385 2
* Revisit the current size limits and file types.
* Implement a r̲e̲a̲l̲ file type “deleted”, replacing the hack
d387 1
a387 1
* Some kind of “reboot hook”: check if the filesystem has
a392 1
* “fwcf dump”, “fwcf restore” (even for 1.x)
d400 1
a400 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.29 2007/02/28 21:14:31 tg Exp $
@


1.29
log
@clarify how the output of “fwcf status” is padded – it's designed to be
human-readable, that's why, but this does not prevent scripted use, e.g.
in the to-be reboot hook
@
text
@d6 1
a6 1
                                  Version 1.02β - 28 February 2007
d71 1
a71 1
* fwcf status		NEW IN 1.02: check if commit is needed
d88 1
a88 1
NEW IN 1.02: If /etc/.fwcf_deleted exists, the files listed in it,
d96 1
a96 1
NEW IN 1.02: Afterwards, a sorted list of all files is given to the
d103 1
a103 1
NEW IN 1.02: If run with ‘-N’, it will not read out the data from
d106 1
a106 1
†) NEW IN 1.02: If this fails, but the “fwcf” mtd partition starts
d117 2
a118 2
and populated with the data currently in /etc. Now, NEW IN 1.02,
the /tmp/.fwcf/status.gz file is recreated. Then, ALSO NEW IN 1.02,
d126 1
a126 1
Unclean setups, NEW IN 1.02, will prevent a commit, unless the
d148 1
a148 1
2.4. Operation of ‘fwcf status’ (NEW IN 1.02)
d377 1
a377 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.28 2007/02/28 21:08:22 tg Exp $
@


1.28
log
@* fwcf.sh: use >/dev/null instead of >&- since the latter may fail some tools
* fwcf.txt: use proper unicode characters to push the text into shape
* fwcf.sh, fwcf.txt: implement new “fwcf setup -N” to be used manually during
  failsafe mode, to be able to “fwcf commit” later without a working fwcf
  filesystem loaded: “fwcf setup -N” does everything “fwcf setup” does except
  reading, parsing and extracting the “fwcf filesystem”, and forcefully sets
  the “unclean” flag to prevent an accidental “fwcf commit” induced data loss
* fwcf.sh, fwcf.txt: implement new “fwcf commit -f” so that lazy users won't
  have to manually rm /etc/.fwcf_unclean to force commits… I know you folks ☻
@
text
@d155 1
a155 1
is expressed as shown by the busybox applet, or as padded “<NULL>”
d165 3
d377 1
a377 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.27 2007/02/20 21:06:02 tg Exp $
@


1.27
log
@fwcf commit must recreate the status file
@
text
@d1 2
a2 2
                 FreeWRT Configuration Filesystem
                 ================================
d6 1
a6 1
                                   Version 1.02 - 12 February 2007
d34 1
a34 1
-----------
d61 1
a61 1
-------------------------
d69 2
a70 2
* fwcf commit		similar to Cisco 'write'
* fwcf erase		similar to Cisco 'erase startup-config'
d77 2
a78 2
2.1. Operation of 'fwcf setup'
------------------------------
d80 1
a80 1
This command will first remap the existing /etc (via mount --bind)
d85 1
a85 1
pre-existing files(*). Then, the /tmp/.fwcf/temp filesystem will be re-
d99 2
a100 2
If the "fwcf" mtd partition does not start with the four letters
FWCF on invoking 'fwcf setup', it is erased (i.e. populated with
d103 4
a106 1
(*) NEW IN 1.02: If this fails, but the "fwcf" mtd partition starts
d113 2
a114 2
2.2. Operation of 'fwcf commit'
-------------------------------
d126 4
d133 1
a133 1
ready specified (as "reserved for future use"), and ignored. No
d137 2
a138 2
2.3. Operation of 'fwcf erase'
------------------------------
d148 2
a149 2
2.4. Operation of 'fwcf status' (NEW IN 1.02)
------------------------------- ┄┄┄┄┄┄┄┄┄┄┄┄┄
d151 1
a151 1
For all files in /etc, the md5sum busybox applet is run, output
d153 6
a158 6
from 'fwcf setup'. If the -q flag is not given, the differences
are shown as <oldmd5><space><newmd5><space><file>, where the md5 is
expressed as shown by the busybox applet, or as padded '<NULL>' if
the file does not exist on either side, where "old" is the status
at fwcf setup time (or the /etc from the root fs, if -r is given),
and "new" is the status of the current (tmpfs) /etc. If there are
d161 3
a163 3
If the -r flag is given, operation is done against the data that
is stored in the ROM, without considering the contents of the
FWCF filesystem, instead.
d167 1
a167 1
-----------------------------
d172 1
a172 1
magic bytes "FWCF" (0x46435746).
d174 1
a174 1
The next doubleword (four bytes) is the "outer length" of the fwcf
d188 1
a188 1
The next doubleword (starting at offset 8) is the "inner length" of
d192 1
a192 1
fwcf filesystem to 2^24 bytes = 16 MiB. Since the filesystem is de-
d208 1
a208 1
-----------------------------------
d227 1
a227 1
-----------------------------------
d239 1
a239 1
except NUL. Directories are separated with '/' and automatically
d255 1
a255 1
-------------------------------
d257 1
a257 1
0x01	this file is a block special device (*1)
d261 1
a261 1
0x02	this file is a character special device (*1)
d265 1
a265 1
0x03	this file is a symbolic link (*2)
d268 1
a268 1
0x04	this file is a hard link to another file (*1) (*4)
d272 1
a272 1
0x05	this file is a directory (*4)
d275 1
a275 1
0x0D	this file is deleted (*1)
d287 1
a287 1
i/I	"inode" of the file (*1) (*4)
d293 1
a293 1
m/M	mode_t / permissions of the file (*3)
d307 2
a308 2
*1) These identifiers are defined in this specification for future
    use; implementations do not need to support them at this time.
d310 1
a310 1
*2) The name of the target is the data, thus, size is required.
d312 2
a313 2
*3) Defaults to 0 if not used (for security reasons), so labelling
    it as "optional" is probably a farce ;)
d315 2
a316 2
*4) Implementing hard links and directories is, of course, optional
    for the writer.
d320 1
a320 1
----------------
d322 1
a322 1
The initial idea for a "configuration filesystem" based upon the
d333 2
a334 2
":ext:anoncvs@@anoncvs.mirbsd.org:/cvs" using password "anoncvs",
SSH on port 22; module "fwcf". CVSweb is also available, e.g. at
d345 1
a345 1
--------------------
d358 1
a358 1
* Implement a _real_ file type "deleted", replacing the hack
d360 2
a361 2
* Some kind of "reboot hook": check if the filesystem has
  been changed after the last 'fwcf commit' operation. (What
d365 2
a366 2
  implemented as "fwcf status" operation.)
* "fwcf dump", "fwcf restore" (even for 1.x)
d373 2
a374 2
________________________________________________________________________
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.26 2007/02/20 21:00:31 tg Exp $
@


1.26
log
@sort of implement 'fwcf status', feel free to find bugs and send diffs
@
text
@d23 1
a23 1
This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
d114 2
a115 1
and populated with the data currently in /etc. Then, NEW IN 1.02,
d367 1
a367 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.25 2007/02/20 20:02:13 tg Exp $
@


1.25
log
@• create the status file on 'fwcf commit'
• don't put it to /etc itself, it shouldn't be stored
@
text
@d146 2
a147 2
are shown as <oldmd5><space><newmd5><space><file>, where the md5
is expressed as shown by the busybox applet, or as '<NULL>' if
d366 1
a366 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.24 2007/02/12 22:19:37 tg Exp $
@


1.24
log
@md5 output is large, even in the weird busybox format, which
is '07TQ4R2U381TSU2651S4557R9390TV48  filename', so use spaces
not tabs to be able to fit them onto 80c if filename is short
@
text
@d97 1
a97 1
busybox md5sum applet, the output is stored as /etc/.fwcf_status.gz
d366 1
a366 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.23 2007/02/12 21:49:08 tg Exp $
@


1.23
log
@* fwcf.sh, fwcf.txt: add 'fwcf status' description and list of exit
  codes; amend the help
* fwcf.txt: convert to utf-8 (fwcf.sh stays at latin1 since there is
  no locale support on the target)
@
text
@d146 1
a146 1
are shown as <oldmd5><tab><newmd5><tab><file>, where the "MD5"
d366 1
a366 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.22 2007/02/12 20:52:47 tg Exp $
@


1.22
log
@* make it clear what is new in 1.02
  (this stuff is making it into 1.02 at wbx@@' request)
* allocate/reserve a "deleted" file type for 2.x
@
text
@d9 1
a9 1
Copyright (c) 2006, 2007
d71 1
d96 3
d140 18
d366 1
a366 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.21 2007/02/12 20:47:47 tg Exp $
@


1.21
log
@crude "delete files that exist in the underlying squashfs" hack:
store their names in /tmp/.fwcf/temp/.fwcf_deleted
@
text
@d110 1
a110 1
and populated with the data currently in /etc. NEW IN 1.02: Then,
d112 1
a112 1
in /tmp/.fwcf/temp/.fwcf_deleted, newline-separated. Then, all files
d245 3
d344 1
a344 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.20 2007/02/12 20:35:39 tg Exp $
@


1.20
log
@* fwcf.txt, fwcf.sh: document and implement an "unclean startup" flag,
  to prevent a FreeWRT box from not coming up at all if the FWCF file-
  system cannot be read; it will come up with set-up (TRX filesystem)
  defaults instead and refuse to be committed
* fwcf.txt, fwcf.sh: bump to 1.02, which will include this change as
  well as a reboot hook and a check operation etc.
* fwcf.sh: document possible exit codes
@
text
@d87 4
d110 3
a112 1
and populated with the data currently in /etc. Then, all files
d325 2
a326 2
* Implement a file type "deleted", to enable the user to
  remove a file from the underlying (squashfs) repository.
d341 1
a341 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.19 2007/01/26 20:38:31 tg Exp $
@


1.19
log
@mention "fwcf status" from IRC discussion - named 'status' after the
svn command, since output and function will be similar, 'check' is
too generic and 'diff' usually does something else

maybe 1.02 material
@
text
@d6 1
a6 1
                                   Version 1.01 - 20 December 2006
d9 1
a9 1
Copyright (c) 2006
d84 1
a84 1
pre-existing files. Then, the /tmp/.fwcf/temp filesystem will be re-
d95 6
d335 1
a335 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.18 2007/01/25 19:00:43 tg Exp $
@


1.18
log
@add to TODO: fwcf dump, fwcf restore
idea from reading rants in IRC by nusse (Daniel Maier)
"auf jeden fall eine implementierung wert" ulmen@@
@
text
@d319 2
a320 1
  filesystem, ignoring all non-regular files.)
d329 1
a329 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.17 2006/12/20 16:15:15 tg Exp $
@


1.17
log
@Document some "possible future directions" for the fwcf
specification, i.e. a list of changes that most likely
will be in fwcf 2.00 - derived from the discussion on
the FreeWRT mailing lists and IRC channels during and
after the fwcf 1.00 release.  More suggestions welcome.
@
text
@d320 1
d328 1
a328 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.16 2006/12/11 23:54:54 tg Exp $
@


1.16
log
@mostly administrative licence sync w/ current template
@
text
@d6 1
a6 1
                                  Version 1.00 - 24 September 2006
d298 28
d327 1
a327 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.15 2006/09/26 10:05:29 tg Exp $
@


1.15
log
@add a final note on compressed data integrity; spec itself does not change
@
text
@d12 5
a16 6
Licensee is hereby permitted to deal in this work without restric-
tion, including unlimited rights to use, publicly perform, modify,
merge, distribute, sell, give away or sublicence, provided all co-
pyright notices above, these terms and the disclaimer are retained
in all redistributions or reproduced in accompanying documentation
or other materials provided with binary redistributions.
d23 8
a30 8
Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
express, or implied, to the maximum extent permitted by applicable
law, without malicious intent or gross negligence; in no event may
licensor, an author or contributor be held liable for any indirect
or other damage, or direct damage except proven a consequence of a
direct error of said person and intended use of this work, loss or
other issues arising in any way out of its use, even if advised of
the possibility of such damage or existence of a defect.
d299 1
a299 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.14 2006/09/24 20:46:44 tg Stab $
@


1.14
log
@LZO1X-n is the same for all values of n, as per lzo docs
@
text
@d159 5
a163 1
ending with the zero-padding of the compressed data.
d299 2
a300 2
_________________________________________________________________________
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.13 2006/09/24 20:46:11 tg Exp $
@


1.13
log
@add minilzo from lzo-2.02
this only implements LZO1X-1 though
@
text
@d176 1
a176 1
0x10 = LZO1X-1 as per http://www.oberhumer.com/opensource/lzo/
d296 1
a296 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.12 2006/09/24 03:18:34 tg Stab $
@


1.12
log
@bump the spec to 1.0, reduce amount of private compressors and try
to namespace them, moving LZO to 0x10 - ...
@
text
@d176 1
a176 1
0x10 = LZO1X-999 as per http://www.oberhumer.com/opensource/lzo/
d296 1
a296 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.11 2006/09/24 03:06:21 tg Exp $
@


1.11
log
@we use /tmp/.fwcf, ok wbx@@
@
text
@d6 1
a6 1
                                  Version 0.97 - 23 September 2006
a11 4
This specification is subject to change. Users are advised to wait
for the release of the specification version 1.0 released together
with the first version of the configfs tool.

d138 1
a138 1
0x00 for this document. This information shall be true for all ver-
d176 1
a176 1
0x02 = LZO1X-999 as per http://www.oberhumer.com/opensource/lzo/
d178 1
a178 1
Algorithm codes from 0xC0 to 0xFF are available for private use.
d278 1
a278 1
1 and 2 above.
d295 2
a296 2
_______________________________________________________________________
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.10 2006/09/24 02:05:07 tg Exp $
@


1.10
log
@implement md5summing the files and fixing them up
@
text
@d6 1
a6 1
                                  Version 0.95 - 23 September 2006
d85 2
a86 2
to /var/fwcf/root. Then, it will create a memory filesystem (tmpfs)
at /var/fwcf/tmp and populate it with all files from /var/fwcf/root.
d88 3
a90 3
verified and data extracted to /var/fwcf/tmp, possibly overwriting
pre-existing files. Then, the /var/fwcf/tmp filesystem will be re-
bound to /etc and, finally, the mountpoint at /var/fwcf/tmp unloaded.
d96 4
d104 1
a104 1
A new memory filesystem (tmpfs) will be createt at /var/fwcf/tmp
d106 2
a107 2
with exactly the same content in /var/fwcf/root will be removed
from /var/fwcf/tmp. Any remaining files will be packed into the
d293 1
a293 1
FWCF will be released under the same licence terms as the speci-
d300 1
a300 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.9 2006/09/23 22:54:34 tg Exp $
@


1.9
log
@rapidly prototype in shell
@
text
@d6 1
a6 1
                                  Version 0.94 - 23 September 2006
d107 1
a107 2
The first public release will not remove any files before gene-
rating the compressed data, and only support directories, files
d296 1
a296 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.8 2006/09/23 21:50:21 tg Exp $
@


1.8
log
@* allocate a compression ID to LZO1X-999 (decompressor LZO1X), since
  this is what Markus F.X.J. Oberhumer wants us to use
* document limits of the first implementation (ok'd by wbx@@)
@
text
@d6 1
a6 1
                                  Version 0.93 - 23 September 2006
d69 2
a70 2
to 128 KiB (usually two flash blocks). A custom flash map driver is
going to be added to the FreeWRT kernel before the import of fwcf.
d77 3
d90 1
a90 2
bound to /etc and, if possible, the mountpoint at /var/fwcf/tmp un-
loaded.
d297 1
a297 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.7 2006/09/23 18:41:15 tg Exp $
@


1.7
log
@don't store information about symlinks that we cannot restore anyway
@
text
@d6 1
a6 1
                                  Version 0.92 - 23 September 2006
d105 7
d174 2
a175 1
0x01 = zlib deflate compression
d295 1
a295 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.6 2006/09/23 16:54:49 tg Exp $
@


1.6
log
@for now, don't use anything other than directory, file or symlink.

agreed wbx@@
@
text
@d223 1
d238 1
d287 1
a287 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.5 2006/09/16 03:19:52 tg Exp $
@


1.5
log
@amend the spec: directories are needed
@
text
@d6 1
a6 1
                                  Version 0.91 - 16 September 2006
d205 1
d209 1
d214 1
a214 1
0x04	this file is a hard link to another file (*4)
d216 1
d229 1
a229 1
i/I	"inode" of the file (*4)
d233 1
d248 2
a249 4
*1) These identifiers are reserved in this specification; however,
    implementations are not required to support them at this time.
    Device nodes in /etc do not make sense. (Neither do e.g. FIFOs
    or sockets.)
d269 3
d285 1
a285 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.4 2006/09/16 01:55:24 tg Exp $
@


1.4
log
@* implement packing of single files into the fwcf filesystem inner format
* spec: implementing hardlinks is of course optional for the WRITER
@
text
@d6 1
a6 1
                                   Version 0.9 - 12 September 2006
d215 3
d241 1
a241 1
	for device nodes and hard links: forbidden
d254 2
a255 1
*4) Implementing hard links is, of course, optional for the writer.
d280 1
a280 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.3 2006/09/15 20:09:36 tg Exp $
@


1.3
log
@initial skeleton:

first will be two programmes, mkfwcf and unfwcf, which operate
similar to pkzip and pkunzip; code will be designed to be re-
usable by the later fwcfctl programme.

mkfwcf and unfwcf will be designed to run on MirOS (and OpenBSD);
GNU/Linux compatibility is not a design criterium.
@
text
@d212 1
a212 1
0x04	this file is a hard link to another file
d223 1
a223 1
i/I	"inode" of the file
d251 2
d276 1
a276 1
$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.2 2006/09/12 23:07:40 tg Exp $
@


1.2
log
@improve comments of the attributes
@
text
@d274 1
a274 2

$MirOS: contrib/hosted/fwcf/fwcf.txt,v 1.1.1.1 2006/09/12 22:50:55 tg Exp $
@


1.1
log
@Initial revision
@
text
@d203 1
a203 1
0x01	this file is a block special device
a204 1
	THIS IDENTIFIER IS ONLY RESERVED, IT DOES NOT NEED TO BE IMPLEMENTED
d206 1
a206 1
0x02	this file is a character special device
a207 1
	THIS IDENTIFIER IS ONLY RESERVED, IT DOES NOT NEED TO BE IMPLEMENTED
d209 1
a209 1
0x03	this file is a symbolic link
d228 1
a228 1
m/M	mode_t / permissions of the file
d241 10
d273 1
a273 1
___________________________________________________________________________
d275 1
a275 1
$MirOS$
@


1.1.1.1
log
@because subversion sucks major arse, I'll be using this to develop
an application for FreeWRT; other projects that want to have their
source hosted are free to apply as well; mail tg@@ for details
@
text
@@
