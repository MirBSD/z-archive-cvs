head	1.7;
access;
symbols
	FWCF_1_06:1.7
	FWCF_1_05:1.7
	FWCF_1_04:1.7
	FWCF_1_03:1.7
	FWCF_1_01:1.2
	FWCF_1_00:1.2;
locks; strict;
comment	@ * @;


1.7
date	2007.03.09.22.35.13;	author tg;	state Exp;
branches;
next	1.6;
commitid	10045F1E1277246A24A;

1.6
date	2007.03.09.22.25.45;	author tg;	state Exp;
branches;
next	1.5;
commitid	10045F1DEC66D3BF5E1;

1.5
date	2007.03.09.21.10.29;	author tg;	state Exp;
branches;
next	1.4;
commitid	10045F1CCB44F1E7E4F;

1.4
date	2007.03.03.19.13.12;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045E9C8B800C12177;

1.3
date	2007.02.28.22.59.38;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045E6092C23C8F114;

1.2
date	2006.09.26.10.01.49;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004518FA9A76B7C6C3;

1.1
date	2006.09.24.20.34.59;	author tg;	state Exp;
branches;
next	;
commitid	1004516EBC4399F582B;


desc
@@


1.7
log
@while here… allow algorithm selection by name, too
(“I like my users”, or something.)
@
text
@/* $MirOS: contrib/hosted/fwcf/tool.c,v 1.6 2007/03/09 22:25:45 tg Exp $ */

/*-
 * Copyright (c) 2006, 2007
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Provided that these terms and disclaimer and all copyright notices
 * are retained or reproduced in an accompanying document, permission
 * is granted to deal in this work without restriction, including un-
 * limited rights to use, publicly perform, distribute, sell, modify,
 * merge, give away, or sublicence.
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#include <sys/param.h>
#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include "defs.h"
#include "compress.h"
#include "minilzop.h"
#include "pack.h"

__RCSID("$MirOS: contrib/hosted/fwcf/tool.c,v 1.6 2007/03/09 22:25:45 tg Exp $");

static __dead void usage(void);
static int mkfwcf(int, const char *, int);
static int unfwcf(int, const char *);
#ifndef SMALL
static int refwcf(int, int, int);
#endif
static int fsopen(const char *, int, int);

int
main(int argc, char *argv[])
{
	int c;
	int mode = 0, doempty = 0;
	int ifd, ofd;
#ifdef SMALL
	int calg = -1;
#else
	int calg = 0;
	const char *infile = NULL, *outfile = NULL;
#endif
	const char *dfile = NULL;
	const char *file_root = NULL;
	fwcf_compressor *cl;

#ifdef SMALL
	while ((c = getopt(argc, argv, "D:delMUZ")) != -1)
#else
	while ((c = getopt(argc, argv, "C:cD:dei:lMo:RUZ")) != -1)
#endif
		switch (c) {
#ifndef SMALL
		case 'C':
			if (!(calg = strtonum(optarg, 1, 255, NULL))
			    && !(calg = compressor_getbyname(optarg)))
				usage();
			break;
		case 'c':
			calg = -1;
			break;
#endif
		case 'D':
			if (doempty)
				usage();
			dfile = optarg;
			break;
		case 'd':
			mode = (mode == 5 || mode == 6) ? 6 : 3;
			break;
		case 'e':
			if (dfile != NULL)
				usage();
			doempty = 1;
			break;
#ifndef SMALL
		case 'i':
			infile = optarg;
			break;
#endif
		case 'l':
			return (list_compressors());
		case 'M':
			mode = 1;
			break;
#ifndef SMALL
		case 'o':
			outfile = optarg;
			break;
		case 'R':
			mode = 4;
			break;
#endif
		case 'U':
			mode = 2;
			break;
		case 'Z':
			mode = (mode == 3) ? 6 : 5;
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	switch (mode) {
	case 1:
		if (argc != ((dfile == NULL) ? (1 - doempty) : 0))
			usage();
		break;
	case 2:
		if (argc != ((dfile == NULL) ? 1 : 0))
			usage();
		break;
#ifndef SMALL
	case 3:
	case 4:
		if (argc || doempty || (dfile != NULL))
			usage();
		break;
#endif
	case 5:
	case 6:
		if ((dfile != NULL) || doempty
#ifndef SMALL
		    || infile || outfile
#endif
		    )
			usage();
		break;
	default:
		usage();
	}
	if (argc)
		file_root = *argv;

	if (mode == 5 || mode == 6) {
		ifd = fsopen(argc-- > 0 ? *argv++ : NULL,
		    O_RDONLY, STDIN_FILENO);
		ofd = fsopen(argc-- > 0 ? *argv++ : NULL,
		    O_WRONLY | O_CREAT | O_TRUNC, STDOUT_FILENO);
		if (argc > 0)
			usage();
#ifndef SMALL
		if (calg == 0)
			/* force host tool to compress even without -c */
			calg = -1;
#endif
		goto get_calg;
	}

#ifdef SMALL
	ifd = STDIN_FILENO;
	ofd = STDOUT_FILENO;
#else
	ifd = fsopen(infile, O_RDONLY, STDIN_FILENO);
	ofd = fsopen(outfile, O_WRONLY | O_CREAT | O_TRUNC, STDOUT_FILENO);
#endif

	if (mode == 2 && dfile != NULL) {
		char *data;
		size_t sz;
		int dfd;

		if ((data = fwcf_unpack(ifd, &sz)) == NULL)
			return (1);
		if ((dfd = fsopen(dfile, O_WRONLY | O_CREAT | O_TRUNC,
		    STDOUT_FILENO)) < 0)
			err(1, "open %s", dfile);
		write_aszdata(dfd, data, sz);
		close(dfd);
		free(data);
		return (0);
	}

	if ((mode == 2) || (mode == 3))
		return (unfwcf(ifd, (mode == 3) ? NULL : file_root));

 get_calg:
	if (calg == -1) {
		if ((cl = compress_enumerate()) != NULL)
			for (calg = 1; calg < 257; ++calg)
				if (cl[calg & 0xFF].name != NULL)
					break;

		if ((cl == NULL) || (calg == 257))
			errx(1, "no compression algorithms found");
		calg &= 0xFF;
	}

	if (mode == 5 || mode == 6)
		return (minilzop(ifd, ofd, calg, (mode == 6)));

#ifndef SMALL
	if (mode == 4)
		return (refwcf(ifd, ofd, calg));
#endif

	if (dfile != NULL) {
		char *udata, *data;
		size_t sz, isz;
		int dfd;

		if ((dfd = fsopen(dfile, O_RDONLY, STDIN_FILENO)) < 0)
			err(1, "open %s", dfile);
		read_aszdata(dfd, &udata, &isz);
		close(dfd);
		data = fwcf_pack(udata, isz, calg, &sz);
		isz = write(ofd, data, sz);
		free(data);
		return (isz == sz ? 0 : 1);
	}

	return (mkfwcf(ofd, doempty ? NULL : file_root, calg));
}

static __dead void
usage(void)
{
	extern const char *__progname;

	fprintf(stderr, "Usage:"
#ifdef SMALL
	    "	%s -M { -D <file> | -e | <directory> }"
	    "\n	%s -U { -D <file> | <directory> }"
	    "\n	%s -Z[d] [<infile> [<outfile>]]"
	    "\n	%s -l\n", __progname, __progname, __progname, __progname);
#else
	    "	%s -M [-c | -C <compressor>] [-o <file>]"
	    "\n	    { -D <file> | -e | <directory> }"
	    "\n	%s [-i <file>] -U { -D <file> | <directory> }"
	    "\n	%s [-i <file>] -d"
	    "\n	%s -R [-c | -C <compressor>] [-i <infile>] [-o <outfile>]"
	    "\n	%s -Z[d] [-c | -C <compressor>] [<infile> [<outfile>]]"
	    "\n	%s -l\n",
	    __progname, __progname, __progname, __progname, __progname,
	    __progname);
#endif
	exit(1);
}

static int
mkfwcf(int fd, const char *dir, int algo)
{
	size_t sz;
	char *data;

	data = fwcf_packm(dir, algo, &sz);
	return ((size_t)write(fd, data, sz) == sz ? 0 : 1);
}

static int
unfwcf(int fd, const char *dir)
{
	char *udata;

	if ((udata = fwcf_unpack(fd, NULL))) {
#ifndef SMALL
		if (dir == NULL)
			ft_dump(udata);
		else
#endif
			ft_creatm(udata, dir);
	}
	return (udata != NULL ? 0 : 1);
}

#ifndef SMALL
static int
refwcf(int ifd, int ofd, int algo)
{
	char *udata, *data;
	size_t sz, isz;

	if ((udata = fwcf_unpack(ifd, &isz)) == NULL)
		return (1);
	data = fwcf_pack(udata, isz, algo, &sz);
	return ((size_t)write(ofd, data, sz) == sz ? 0 : 1);
}
#endif

static int
fsopen(const char *fn, int mode, int altfd)
{
	return (((fn == NULL) || (*fn == '\0') ||
	    ((fn[0] == '-') && (fn[1] == '\0'))) ? altfd :
	    open(fn, mode, 0666));
}
@


1.6
log
@• implement file compression; the BSD host tools can select the algorithm
  as usual with -c (first) or -C (by number)
• plug a few leaks
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/tool.c,v 1.4 2007/03/03 19:13:12 tg Exp $ */
d35 1
a35 1
__RCSID("$MirOS: contrib/hosted/fwcf/tool.c,v 1.4 2007/03/03 19:13:12 tg Exp $");
d69 2
a70 1
			if (!(calg = strtonum(optarg, 1, 255, NULL)))
@


1.5
log
@as per dnehring@@ request, we'll use .tar.LZO-1X.asz as dump format,
instead of .tar.gz, to not pull in a 50+ KiB gzip binary as required
dependency – the “asz” encoding is necessary because LZO itself has
no framing information.
• document that
• document the “asz” encoding – which we already use in storing the
  dump “fwcf inner filesystem” data itself
• move routines for asz en-/decoding into a new file, minilzop.c
• prepare for adding the LZO-1X file compression helper command mode
• fix a few minor glitches
@
text
@d62 1
a62 1
	while ((c = getopt(argc, argv, "D:elMU")) != -1)
d64 1
a64 1
	while ((c = getopt(argc, argv, "C:cD:dei:lMo:RU")) != -1)
a80 1
#ifndef SMALL
d82 1
a82 1
			mode = 3;
a83 1
#endif
d110 3
d135 9
d149 16
d185 1
d192 1
d204 3
d222 3
a224 1
		return ((size_t)write(ofd, data, sz) == sz ? 0 : 1);
d239 2
a240 1
	    "\n	%s -l\n", __progname, __progname, __progname);
d247 1
d249 2
a250 1
	    __progname, __progname, __progname, __progname, __progname);
@


1.4
log
@new internal function fsopen: if file is NULL, NUL or "-", return its
third argument (default fd), else open file and return its retval
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/tool.c,v 1.3 2007/02/28 22:59:38 tg Exp $ */
a30 1
#include "adler.h"
d32 1
d35 1
a35 1
__RCSID("$MirOS: contrib/hosted/fwcf/tool.c,v 1.3 2007/02/28 22:59:38 tg Exp $");
d149 1
a149 2
		uint8_t lenbuf[4], adlerbuf[4];
		size_t sz, len;
a150 1
		ADLER_DECL;
d152 2
d157 1
a157 20
		if ((data = fwcf_unpack(ifd, &sz)) == NULL)
			return (1);
		lenbuf[0] = sz & 0xFF;
		lenbuf[1] = (sz >> 8) & 0xFF;
		lenbuf[2] = (sz >> 16) & 0xFF;
		lenbuf[3] = (sz >> 24) & 0xFF;
		len = 4;	/* for ADLER_CALC on lenbuf */
		ADLER_CALC(lenbuf);
		len = sz;	/* for ADLER_CALC on data */
		ADLER_CALC(data);
		adlerbuf[0] = s1 & 0xFF;
		adlerbuf[1] = (s1 >> 8) & 0xFF;
		adlerbuf[2] = s2 & 0xFF;
		adlerbuf[3] = (s2 >> 8) & 0xFF;
		if (write(dfd, adlerbuf, 4) != 4)
			err(1, "short write on %s", dfile);
		if (write(dfd, lenbuf, 4) != 4)
			err(1, "short write on %s", dfile);
		if ((size_t)write(dfd, data, sz) != sz)
			err(1, "short write on %s", dfile);
d183 1
a183 2
		uint8_t hdrbuf[8];
		size_t sz, isz, len;
a184 1
		ADLER_DECL;
d188 1
a188 9
		if (read(dfd, hdrbuf, 8) != 8)
			err(1, "short read on %s", dfile);
		isz = hdrbuf[4] | (hdrbuf[5] << 8) |
		    (hdrbuf[6] << 16) | (hdrbuf[7] << 24);
		if ((udata = malloc(isz)) == NULL)
			err(255, "out of memory trying to allocate %zu bytes",
			    isz);
		if ((size_t)read(dfd, udata, isz) != isz)
			err(1, "short read on %s", dfile);
a189 12
		len = 4;
		ADLER_CALC(hdrbuf + 4);
		len = isz;
		ADLER_CALC(udata);
		if ((hdrbuf[0] != (s1 & 0xFF)) ||
		    (hdrbuf[1] != ((s1 >> 8) & 0xFF)) ||
		    (hdrbuf[2] != (s2 & 0xFF)) ||
		    (hdrbuf[3] != ((s2 >> 8) & 0xFF)))
			err(2, "checksum mismatch from %s, sz %zu,"
			    " want %02X%02X%02X%02X got %04X%04X",
			    dfile, isz, hdrbuf[3], hdrbuf[2],
			    hdrbuf[1], hdrbuf[0], s2, s1);
@


1.3
log
@* new option -D for dumping and restoring the fwcf filesystem in a somewhat
  more portable way (i.e. without the compression, and with only parts of
  the outer header, forced to little-endianness)
* tool.c: mkfwcf() is only needed #ifndef SMALL
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.20 2006/12/11 21:04:56 tg Rel $ */
d35 1
a35 1
__RCSID("$MirOS: contrib/hosted/fwcf/tool.c,v 1.2 2006/09/26 10:01:49 tg Exp $");
d43 1
d50 1
a50 1
	int ifd = STDIN_FILENO, ofd = STDOUT_FILENO;
d139 6
a144 8
#ifndef SMALL
	if (infile != NULL)
		if ((ifd = open(infile, O_RDONLY, 0)) < 0)
			err(1, "open %s", infile);
	if (outfile != NULL)
		if ((ofd = open(outfile, O_WRONLY | O_CREAT | O_TRUNC,
		    0666)) < 0)
			err(1, "open %s", outfile);
d154 2
a155 2
		if ((dfd = (dfile[0] == '-' && dfile[1] == 0 ? STDOUT_FILENO :
		    open(dfile, O_WRONLY | O_CREAT | O_TRUNC, 0666))) < 0)
d207 1
a207 2
		if ((dfd = (dfile[0] == '-' && dfile[1] == 0 ? STDIN_FILENO :
		    open(dfile, O_RDONLY, 0))) < 0)
d299 8
@


1.2
log
@document a future extension which will not make it into 1.00
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/tool.c,v 1.1 2006/09/24 20:34:59 tg Exp $ */
d4 1
a4 1
 * Copyright (c) 2006
d7 5
a11 6
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
d13 8
a20 8
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
d31 1
d35 1
a35 1
__RCSID("$MirOS: contrib/hosted/fwcf/tool.c,v 1.1 2006/09/24 20:34:59 tg Exp $");
d40 1
d42 1
d56 1
d61 1
a61 1
	while ((c = getopt(argc, argv, "elMU")) != -1)
d63 1
a63 1
	while ((c = getopt(argc, argv, "C:cdei:lMo:RU")) != -1)
d74 7
d86 2
d119 1
a119 1
		if (argc != (1 - doempty))
d123 1
a123 1
		if (argc != 1)
d129 1
a129 1
		if (argc || doempty)
d148 34
d196 1
d199 37
d247 2
a248 2
	    "	%s -M { -e | <directory> }"
	    "\n	%s -U <directory>"
a249 8
	/*
	 * Possible later extension (yes, on the target too):
	 *  "\n	%s -M { -D <file> | -e | <directory> }"
	 *  "\n	%s -U { -D <file> | <directory> }"
	 * where -D saves/restores the intermediate form of
	 * the build-system tool's -R option (i.e. the un-
	 * compressed format of the "inner" filesystem).
	 */
d251 4
a254 2
	    "	%s -M [-c | -C <compressor>] [-o <file>] { -e | <directory> }"
	    "\n	%s [-i <file>] {-U <directory> | -d}"
d256 2
a257 1
	    "\n	%s -l\n", __progname, __progname, __progname, __progname);
d288 1
d300 1
@


1.1
log
@* join mkfwcf.c, unfwcf.c, fwcf.helper.c into a single file tool.c
  which builds a combinded mkfwcf+unfwcf for the host normally, and
  a stripped-down tool for the target #ifdef SMALL (code sharing ;)
* enhance the tool by recompress functionality

Note: mkfwcf and unfwcf are kept for now
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.14 2006/08/09 19:35:23 tg Rel $ */
d35 1
a35 1
__RCSID("$MirOS: contrib/hosted/fwcf/fwcf.helper.c,v 1.3 2006/09/23 23:46:35 tg Exp $");
d166 8
@

