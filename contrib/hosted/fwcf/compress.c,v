head	1.7;
access;
symbols
	FWCF_1_06:1.7
	FWCF_1_05:1.7
	FWCF_1_04:1.7
	FWCF_1_03:1.7
	FWCF_1_01:1.7
	FWCF_1_00:1.7;
locks; strict;
comment	@ * @;


1.7
date	2006.09.23.23.46.35;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004515C75D3D00DE3D;

1.6
date	2006.09.23.23.21.03;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004515C15D179DC563;

1.5
date	2006.09.16.07.35.36;	author tg;	state Exp;
branches;
next	1.4;
commitid	100450BA94D3353BC7D;

1.4
date	2006.09.16.07.09.49;	author tg;	state Exp;
branches;
next	1.3;
commitid	100450BA34B6AE3B0F3;

1.3
date	2006.09.16.06.18.57;	author tg;	state Exp;
branches;
next	1.2;
commitid	100450B975E603852FA;

1.2
date	2006.09.16.03.07.48;	author tg;	state Exp;
branches;
next	1.1;
commitid	100450B6A937B6BB46D;

1.1
date	2006.09.16.00.52.13;	author tg;	state Exp;
branches;
next	;
commitid	100450B4ACC7A493A21;


desc
@@


1.7
log
@first round of compile "fixes" (rather: würgarounds) for the target
@
text
@/* $MirOS: contrib/hosted/fwcf/compress.c,v 1.6 2006/09/23 23:21:03 tg Exp $ */

/*-
 * Copyright (c) 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
 */

#include <sys/param.h>
#include <err.h>
#include <stdlib.h>

#include "defs.h"
#include "compress.h"

__RCSID("$MirOS: contrib/hosted/fwcf/compress.c,v 1.6 2006/09/23 23:21:03 tg Exp $");

static void compress_initialise(void);

static fwcf_compressor *fwcf_compressors = NULL;

int
compress_register(fwcf_compressor *e)
{
	compress_initialise();
	if (e == NULL)
		return (1);

	if ((e->init == NULL) || (e->compress == NULL) ||
	    (e->decompress == NULL) || (e->name == NULL))
		return (1);
	if (fwcf_compressors[e->code].name != NULL)
		return (2);

	fwcf_compressors[e->code] = *e;
	return (0);
}

fwcf_compressor *
compress_enumerate(void)
{
	int i;
	fwcf_compressor *rv = NULL;

	compress_initialise();
	for (i = 0; i < 256; ++i)
		if (fwcf_compressors[i].name != NULL) {
			if (fwcf_compressors[i].code == i)
				rv = fwcf_compressors;
			else
				errx(1, "fwcf compressor registry invalid");
		}
	return (rv);
}

static void
compress_initialise(void)
{
	if (fwcf_compressors != NULL)
		return;
	if ((fwcf_compressors = calloc(256, sizeof (fwcf_compressor))) == NULL)
		err(1, "calloc");
}
@


1.6
log
@* work with GNU make
* work on target w/o __RCSID()
* work without c_null
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.c,v 1.5 2006/09/16 07:35:36 tg Exp $ */
d28 1
a29 1
#include "defs.h"
d31 1
a31 1
__RCSID("$MirOS: contrib/hosted/fwcf/compress.c,v 1.5 2006/09/16 07:35:36 tg Exp $");
@


1.5
log
@split the code into smaller units to reduce final executables' sizes
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.c,v 1.4 2006/09/16 07:09:49 tg Exp $ */
d29 1
d31 1
a31 1
__RCSID("$MirOS: contrib/hosted/fwcf/compress.c,v 1.4 2006/09/16 07:09:49 tg Exp $");
@


1.4
log
@more code-sharing
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.c,v 1.3 2006/09/16 06:18:57 tg Exp $ */
a25 1
#include <stdio.h>
d30 1
a30 6
__RCSID("$MirOS: contrib/hosted/fwcf/compress.c,v 1.3 2006/09/16 06:18:57 tg Exp $");

#ifdef DEBUG
#undef __inline
#define __inline /* nothing */
#endif
a77 42

int
compress_list(void)
{
	fwcf_compressor *cl;
	int i;

	if ((cl = compress_enumerate()) == NULL)
		return (1);

	for (i = 0; i < 256; ++i)
		if (cl[i].name != NULL)
			printf("%02Xh = %s%s\n", cl[i].code,
			    (i < 0xC0 ? "" : "PRIVATE "), cl[i].name);
	return (0);
}

fwcf_compressor *
compressor_get(uint8_t algo)
{
	fwcf_compressor *list;

	if ((list = compress_enumerate()) == NULL)
		errx(1, "compress_enumerate");
	if (list[algo].name == NULL)
		errx(1, "compression algorithm %02Xh not loaded", algo);
	if (list[algo].init())
		errx(1, "cannot initialise %s compression", list[algo].name);

	return (&(list[algo]));
}

int
list_compressors(void)
{
	int rv;

	printf("List of registered compressors:\n");
	if ((rv = compress_list()))
		printf("No compressor registered!\n");
	return (rv);
}
@


1.3
log
@code sharing and cleanup
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.c,v 1.2 2006/09/16 03:07:48 tg Exp $ */
d31 1
a31 1
__RCSID("$MirOS: contrib/hosted/fwcf/compress.c,v 1.2 2006/09/16 03:07:48 tg Exp $");
d38 1
a38 1
static __inline void compress_initialise(void);
d76 1
a76 1
static __inline void
d115 11
@


1.2
log
@aid debugging
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/compress.c,v 1.1 2006/09/16 00:52:13 tg Exp $ */
d31 1
a31 1
__RCSID("$MirOS: contrib/hosted/fwcf/compress.c,v 1.1 2006/09/16 00:52:13 tg Exp $");
d100 15
@


1.1
log
@implement initial compressor hook list
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/fts_subs.c,v 1.1 2006/09/15 21:11:23 tg Exp $ */
d31 6
a36 1
__RCSID("$MirOS: contrib/hosted/fwcf/fts_subs.c,v 1.1 2006/09/15 21:11:23 tg Exp $");
@

