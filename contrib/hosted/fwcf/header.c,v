head	1.7;
access;
symbols
	FWCF_1_06:1.7
	FWCF_1_05:1.7
	FWCF_1_04:1.7
	FWCF_1_03:1.7
	FWCF_1_01:1.7
	FWCF_1_00:1.7;
locks; strict;
comment	@ * @;


1.7
date	2006.09.26.10.25.03;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004518FFF55AB578D0;

1.6
date	2006.09.23.23.55.37;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004515C9832F203D85;

1.5
date	2006.09.23.20.20.00;	author tg;	state Exp;
branches;
next	1.4;
commitid	100451596B33F0C3FA0;

1.4
date	2006.09.19.11.30.24;	author tg;	state Exp;
branches;
next	1.3;
commitid	100450FD4D30EBE772E;

1.3
date	2006.09.16.07.09.49;	author tg;	state Exp;
branches;
next	1.2;
commitid	100450BA34B6AE3B0F3;

1.2
date	2006.09.16.06.18.58;	author tg;	state Exp;
branches;
next	1.1;
commitid	100450B975E603852FA;

1.1
date	2006.09.16.04.40.25;	author tg;	state Exp;
branches;
next	;
commitid	100450B800C0C9AC337;


desc
@@


1.7
log
@* fix missing includes
* cast a little more, for systems other than MirOS #9-current
* spelling
* build fwcf.helper correctly without libz
@
text
@/* $MirOS: contrib/hosted/fwcf/header.c,v 1.6 2006/09/23 23:55:37 tg Exp $ */

/*-
 * Copyright (c) 2006
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
 */

#include <sys/param.h>
#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#ifdef DEBUG_ADLER
#include <zlib.h>
#endif

#include "defs.h"
#include "adler.h"
#include "pack.h"

__RCSID("$MirOS: contrib/hosted/fwcf/header.c,v 1.6 2006/09/23 23:55:37 tg Exp $"
    "\t" ADLER_H);

char *
mkheader(char *f_header, size_t hdrsize, uint32_t outer_len,
    uint32_t inner_len, uint8_t algo)
{
	char *hdrptr = f_header;
	size_t hdrleft = hdrsize;

#ifdef DEBUG
	fprintf(stderr, "header: inner=%d outer=%d\n", inner_len & 0xFFFFFF,
	    outer_len & 0xFFFFFF);
#endif

	STOREB('F');
	STOREB('W');
	STOREB('C');
	STOREB('F');

	outer_len = (outer_len & 0xFFFFFF) | (FWCF_VER << 24);
	STORED(outer_len);

	inner_len = (inner_len & 0xFFFFFF) | (algo << 24);
	STORED(inner_len);
	return (hdrptr);
}

char *
mktrailer(char *data, size_t len)
{
	char *hdrptr = data + len;
	size_t hdrleft = 4;
	ADLER_DECL;
#ifdef DEBUG_ADLER
	uint32_t adler = adler32(1, (uint8_t *)data, len);
#endif

	ADLER_CALC(data);
#ifdef DEBUG_ADLER
	if ((s1 != (adler & 0xFFFF)) || (s2 != (adler >> 16)))
		errx(255, "adler32 implementation error: %04X%04X vs %08X",
		    s2, s1, adler);
#endif
	STOREW(s1);
	STOREW(s2);
	return (data);
}
@


1.6
log
@now we're all set, except that uClibc doesn't have fts(3)...
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/header.c,v 1.5 2006/09/23 20:20:00 tg Exp $ */
d26 1
d28 1
a28 1
#ifdef DEBUG
d36 1
a36 1
__RCSID("$MirOS: contrib/hosted/fwcf/header.c,v 1.5 2006/09/23 20:20:00 tg Exp $"
d70 1
a70 1
#ifdef DEBUG
d75 1
a75 1
#ifdef DEBUG
@


1.5
log
@* wraps.c: properly calculate size of the flash block from the outer
  size, not from the inner size
* all: handle entropy
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/header.c,v 1.4 2006/09/19 11:30:24 tg Exp $ */
d26 1
d35 1
a35 1
__RCSID("$MirOS: contrib/hosted/fwcf/header.c,v 1.4 2006/09/19 11:30:24 tg Exp $"
@


1.4
log
@make the adler32 macros easier to use and document them
keep the speed hack of using the 'len' global though
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/header.c,v 1.3 2006/09/16 07:09:49 tg Exp $ */
d34 1
a34 1
__RCSID("$MirOS: contrib/hosted/fwcf/header.c,v 1.3 2006/09/16 07:09:49 tg Exp $"
d44 5
@


1.3
log
@more code-sharing
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/header.c,v 1.2 2006/09/16 06:18:58 tg Exp $ */
d34 1
a34 1
__RCSID("$MirOS: contrib/hosted/fwcf/header.c,v 1.2 2006/09/16 06:18:58 tg Exp $"
d62 1
d66 2
a67 2
	ADLER_START(data)
	ADLER_RUN
a74 1
	ADLER_END
@


1.2
log
@code sharing and cleanup
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/header.c,v 1.1 2006/09/16 04:40:25 tg Exp $ */
a31 1
#include "fts_subs.h"
d34 1
a34 1
__RCSID("$MirOS: contrib/hosted/fwcf/header.c,v 1.1 2006/09/16 04:40:25 tg Exp $"
@


1.1
log
@* fix prototype for compression functions: must use 'char *' for consistency
* add my own small adler32 implementation, after src/bin/md5/ad32-x86.S
* implement full enclosure with sanity checks
@
text
@d1 1
a1 1
/* $MirOS: src/share/misc/licence.template,v 1.14 2006/08/09 19:35:23 tg Rel $ */
d31 1
d35 2
a36 1
__RCSID("$MirOS: contrib/hosted/fwcf/ft_pack.c,v 1.5 2006/09/16 03:51:06 tg Exp $");
a61 1
	uint8_t *buf = (uint8_t *)data;
a62 1
	unsigned s1 = 1, s2 = 0, n;
d64 1
a64 1
	uint32_t adler = adler32(1, buf, len);
d66 2
a67 13

#define BASE	65521	/* largest prime smaller than 65536 */
#define NMAX	5552	/* largest n: 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */
	while (len) {
		len -= (n = MIN(len, NMAX));
		while (n--) {
			s1 += *buf++;
			s2 += s1;
		}
		s1 %= BASE;
		s2 %= BASE;
	}

d75 1
a76 2
#undef BASE
#undef NMAX
@

