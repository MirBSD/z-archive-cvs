head	1.6;
access;
symbols
	FWCF_1_06:1.5
	FWCF_1_05:1.5
	FWCF_1_04:1.5
	FWCF_1_03:1.5
	FWCF_1_01:1.4
	FWCF_1_00:1.4;
locks; strict;
comment	@ * @;


1.6
date	2013.10.31.20.05.47;	author tg;	state Exp;
branches;
next	1.5;
commitid	1005272B7081B0E5655;

1.5
date	2007.03.13.18.31.07;	author tg;	state Exp;
branches;
next	1.4;
commitid	10045F6EDB57C43F78A;

1.4
date	2006.09.26.10.25.02;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004518FFF55AB578D0;

1.3
date	2006.09.24.21.59.13;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004516FFC07E314F36;

1.2
date	2006.09.24.21.55.29;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004516FEE06413AA70;

1.1
date	2006.09.24.21.46.16;	author tg;	state Exp;
branches;
next	;
commitid	1004516FCB12AEB461A;


desc
@@


1.6
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/*-
 * MiniLZO (LZO1X-1) compression plug-in for FWCF
 * Copyright (c) 2006, 2013
 *	Thorsten Glaser <tg@@mirbsd.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 1, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 *
 * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
 * the utmost extent permitted by applicable law, neither express nor
 * implied; without malicious intent or gross negligence. In no event
 * may a licensor, author or contributor be held liable for indirect,
 * direct, other damage, loss, or other issues arising in any way out
 * of dealing in the work, even if advised of the possibility of such
 * damage or existence of a defect, except proven that it results out
 * of said person's immediate fault when using the work as intended.
 */

#include <sys/param.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "defs.h"
#include "compress.h"

__RCSID("$MirOS: contrib/hosted/fwcf/c_lzo1x1.c,v 1.5 2007/03/13 18:31:07 tg Exp $");

#define C_LZO1X1_T1(a,b)			c_lzo1x1_ ## a ## _ ## b
#define C_LZO1X1_T2(a,b)			C_LZO1X1_T1(a,b)
#define LZO_COMPILE_TIME_ASSERT_HEADER(e)	\
		extern int C_LZO1X1_T2(__LINE__,__lzo_cta)[1-2*!(e)];
#define MINILZO_CFG_SKIP_LZO1X_DECOMPRESS	1
#define MINILZO_CFG_SKIP_LZO_PTR		1
#define MINILZO_CFG_SKIP_LZO_STRING		1
#include "minilzo.c"

static void c_lzo1x1_load(void) __attribute__((__constructor__));
static int c_init(void);
static int c_compress(char **, char *, size_t)
    __attribute__((__bounded__(__string__, 2, 3)));
static int c_decompress(char *, size_t, char *, size_t)
    __attribute__((__bounded__(__string__, 1, 2)))
    __attribute__((__bounded__(__string__, 3, 4)));

static fwcf_compressor c_lzo1x1 = {
	c_init,			/* init */
	c_compress,		/* compress */
	c_decompress,		/* decompress */
	"lzo1x1",		/* name */
	0x10			/* code */
};

/* Work-memory needed for compression. Allocate memory in units
 * of `lzo_align_t' (instead of `char') to make sure it is properly aligned.
 */

#define HEAP_ALLOC(var,size) \
    lzo_align_t __LZO_MMODEL var [ ((size) + (sizeof(lzo_align_t) - 1)) / sizeof(lzo_align_t) ]

static HEAP_ALLOC(wrkmem,LZO1X_1_MEM_COMPRESS);

static void
c_lzo1x1_load(void)
{
	if (compress_register(&c_lzo1x1))
		fputs("warning: cannot register compressor 'lzo1x1'!\n", stderr);
}

static int
c_init(void)
{
	return ((lzo_init() == LZO_E_OK) ? 0 : 1);
}

static int
c_compress(char **dst, char *src, size_t len)
{
	lzo_bytep ldst;
	lzo_uint ldlen = len + (len / 16) + 64 + 3;

	if ((ldst = malloc(ldlen)) == NULL)
		return (-1);
#ifdef DEBUG
	fprintf(stderr, "LZO1X-1 compress %lu bytes -> (%lu)",
	    (u_long)len, (u_long)ldlen);
#endif
	lzo1x_1_compress((lzo_bytep)src, len, ldst, &ldlen, wrkmem);
#ifdef DEBUG
	fprintf(stderr, " %lu bytes\n", (u_long)ldlen);
#endif
	*dst = (char *)ldst;
	return (ldlen);
}

static int
c_decompress(char *dst, size_t dstlen, char *src, size_t srclen)
{
	lzo_uint ldlen = dstlen;
	int i;

#ifdef DEBUG
	fprintf(stderr, "LZO1X decompress %lu -> %lu bytes\n",
	    (u_long)srclen, (u_long)dstlen);
#endif
	if (((i = lzo1x_decompress_safe((lzo_bytep)src, srclen, (lzo_bytep)dst,
	    &ldlen, wrkmem)) == LZO_E_OK) || (i == LZO_E_INPUT_NOT_CONSUMED))
		return (ldlen);
#ifdef DEBUG
	fprintf(stderr, "LZO1X decompress error code %d\n", i);
#endif
	return (-1);
}
@


1.5
log
@release an 1.03 as per request of wbx@@
• he's been using it on his freewrt 1.0 system for a while now without problems
• if it won't be committed into trunk, nobody's going to test it

this release implies the “reboot hook” changes in freewrt itself are done
@
text
@a0 2
/* $MirOS: contrib/hosted/fwcf/c_lzo1x1.c,v 1.4 2006/09/26 10:25:02 tg Exp $ */

d3 1
a3 1
 * Copyright (c) 2006
d38 1
a38 1
__RCSID("$MirOS: contrib/hosted/fwcf/c_lzo1x1.c,v 1.4 2006/09/26 10:25:02 tg Exp $");
d49 1
a49 1
static void c_lzo1x1_load(void) __attribute__((constructor));
d52 1
a52 1
    __attribute__((bounded (string, 2, 3)));
d54 2
a55 2
    __attribute__((bounded (string, 1, 2)))
    __attribute__((bounded (string, 3, 4)));
@


1.4
log
@* fix missing includes
* cast a little more, for systems other than MirOS #9-current
* spelling
* build fwcf.helper correctly without libz
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/c_lzo1x1.c,v 1.3 2006/09/24 21:59:13 tg Exp $ */
d22 8
a29 8
 * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
 * express, or implied, to the maximum extent permitted by applicable
 * law, without malicious intent or gross negligence; in no event may
 * licensor, an author or contributor be held liable for any indirect
 * or other damage, or direct damage except proven a consequence of a
 * direct error of said person and intended use of this work, loss or
 * other issues arising in any way out of its use, even if advised of
 * the possibility of such damage or existence of a defect.
d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/fwcf/c_lzo1x1.c,v 1.3 2006/09/24 21:59:13 tg Exp $");
@


1.3
log
@* typo
* fix testsuite
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/c_lzo1x1.c,v 1.2 2006/09/24 21:55:29 tg Exp $ */
d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/fwcf/c_lzo1x1.c,v 1.2 2006/09/24 21:55:29 tg Exp $");
d98 2
a99 1
	fprintf(stderr, "LZO1X-1 compress %lu bytes -> (%lu)", len, ldlen);
d103 1
a103 1
	fprintf(stderr, " %lu bytes\n", ldlen);
d116 2
a117 1
	fprintf(stderr, "LZO1X decompress %lu -> %lu bytes\n", srclen, dstlen);
@


1.2
log
@save another 1012 bytes (BSD i386 host) by omitting functions we don't use
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/c_lzo1x1.c,v 1.1 2006/09/24 21:46:16 tg Exp $ */
d40 1
a40 1
__RCSID("$MirOS: contrib/hosted/fwcf/c_lzo1x1.c,v 1.1 2006/09/24 21:46:16 tg Exp $");
d117 1
a117 1
	if (((i = lzo1x_decompress((lzo_bytep)src, srclen, (lzo_bytep)dst,
@


1.1
log
@implement LZO1X-1 compression via MiniLZO (GPL'd)
@
text
@d1 1
a1 1
/* $MirOS: contrib/hosted/fwcf/c_null.c,v 1.5 2006/09/23 23:46:35 tg Exp $ */
d40 1
a40 1
__RCSID("$MirOS$");
d46 3
@

