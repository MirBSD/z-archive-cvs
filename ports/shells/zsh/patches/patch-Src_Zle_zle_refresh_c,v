head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2011.03.08.19.08.14;	author tg;	state Exp;
branches;
next	1.1;
commitid	1004D767EB44F3A68F8;

1.1
date	2009.09.06.16.31.12;	author tg;	state Exp;
branches;
next	;
commitid	1004AA3E385782410B4;


desc
@@


1.2
log
@update, but keep multibyte disabled after analysis
@
text
@$MirOS: ports/shells/zsh/patches/patch-Src_Zle_zle_refresh_c,v 1.1 2009/09/06 16:31:12 tg Exp $
--- Src/Zle/zle_refresh.c.orig	Mon Dec 20 09:51:20 2010
+++ Src/Zle/zle_refresh.c	Tue Mar  8 17:18:23 2011
@@@@ -2508,9 +2508,12 @@@@ singlerefresh(ZLE_STRING_T tmpline, int 
 	    wchar_t wc;
 	    int started = 0;
 
+#if !defined(__WCHAR_MAX__) || (__WCHAR_MAX__ > 65535U)
 	    if ((unsigned)tmpline[t0] > 0xffffU) {
 		sprintf(dispchars, "<%.08x>", (unsigned)tmpline[t0]);
-	    } else {
+	    } else
+#endif
+	      {
 		sprintf(dispchars, "<%.04x>", (unsigned)tmpline[t0]);
 	    }
 	    while (*dispptr) {
@


1.1
log
@commit an updated zsh, mostly taken from OpenBSD, with a few MirBSD
modifications â€“ just so that it compiles, runs, and almost passes the
testsuite (MidnightBSD and Interix will need more patches; Darwin should
work as-is).

MirBSD testsuite results:
37 successful test scripts, 1 failure, 0 skipped

The reason for this file is documented at the bottom of ./SECURITY
because it led to discovering (at least) one buffer overflow hole
in the multibyte code (and to me not wanting to poke in this code
any longer).
@
text
@d1 4
a4 18
$MirOS$
--- Src/Zle/zle_refresh.c.orig	Mon May 11 08:44:24 2009
+++ Src/Zle/zle_refresh.c	Sun Sep  6 15:34:05 2009
@@@@ -1353,9 +1353,12 @@@@ zrefresh(void)
 	    wchar_t wc;
 	    int started = 0;
 
+#if !defined(__WCHAR_MAX__) || (__WCHAR_MAX__ > 65535U)
 	    if ((unsigned)*t > 0xffffU) {
 		sprintf(dispchars, "<%.08x>", (unsigned)*t);
-	    } else {
+	    } else
+#endif
+	      {
 		sprintf(dispchars, "<%.04x>", (unsigned)*t);
 	    }
 	    while (*dispptr) {
@@@@ -2455,9 +2458,12 @@@@ singlerefresh(ZLE_STRING_T tmpline, int 
@

