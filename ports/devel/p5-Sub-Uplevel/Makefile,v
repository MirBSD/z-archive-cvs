head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2009.01.03.20.49.00;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	100495FCEB33EE258C2;

1.1
date	2009.01.02.16.19.50;	author bsiegert;	state Exp;
branches;
next	;
commitid	100495E3EB03249AB95;


desc
@@


1.2
log
@Add a missing slash at the end of the download paths
@
text
@# $MirOS: ports/devel/p5-Sub-Uplevel/Makefile,v 1.1 2009/01/02 16:19:50 bsiegert Exp $

COMMENT=		apparently run a function in a higher stack frame
DISTNAME=		Sub-Uplevel-0.2002
PKGNAME=		p5-${DISTNAME}-${DASH_VER}
CATEGORIES=		devel perl5
MASTER_SITES=		${MASTER_SITE_PERL_CPAN:=../../authors/id/D/DA/DAGOLDEN/}

PERMIT_PACKAGE_CDROM=	Yes
PERMIT_PACKAGE_FTP=	Yes
PERMIT_DISTFILES_CDROM=	Yes
PERMIT_DISTFILES_FTP=	Yes

CONFIGURE_STYLE=	perl

PKG_ARCH=		*

.include <bsd.port.mk>
@


1.1
log
@Add a port for Sub::Uplevel. From DESCR:

Sub::Uplevel allows you to apparently run a function in a higher stack
frame.

It is like Tcl's uplevel() function, but not quite so dangerous. The
idea is just to fool caller(). All the really naughty bits of Tcl's
uplevel() are avoided.

THIS IS NOT THE SORT OF THING YOU WANT TO DO EVERYDAY.
@
text
@d1 1
a1 1
# $MirOS: ports/infrastructure/templates/perlmod.Makefile,v 1.1 2009/01/01 17:11:33 bsiegert Exp $
d7 1
a7 1
MASTER_SITES=		${MASTER_SITE_PERL_CPAN:=../../authors/id/D/DA/DAGOLDEN}
@

