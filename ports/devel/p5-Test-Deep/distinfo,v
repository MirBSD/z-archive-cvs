head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2009.01.02.20.41.56;	author bsiegert;	state Exp;
branches;
next	;
commitid	100495E7C1A614F73AB;


desc
@@


1.1
log
@Add a port for Test::Deep. From DESCR:

Test::Deep gives you very flexible ways to check that the result you got
is the result you were expecting. At it's simplest it compares two
structures by going through each level, ensuring that the values match,
that arrays and hashes have the same elements and that references are
blessed into the correct class. It also handles circular data structures
without getting caught in an infinite loop.

Where it becomes more interesting is in allowing you to do something
besides simple exact comparisons. With strings, the "eq" operator checks
that 2 strings are exactly equal but sometimes that's not what you want.
When you don't know exactly what the string should be but you do know
some things about how it should look, "eq" is no good and you must use
pattern matching instead. Test::Deep provides pattern matching for
complex data structures.
@
text
@$MirOS$

MD5 (Test-Deep-0.103.tar.gz) = 2fc92524553a3077475ea9589f02d4ee
RMD160 (Test-Deep-0.103.tar.gz) = dadd8c60f1165b474c641c7264b34f82a7580787
SHA1 (Test-Deep-0.103.tar.gz) = 495919ebc253ffe76ece106c21e9361412346edc
SIZE (Test-Deep-0.103.tar.gz) = 32419
TIGER (Test-Deep-0.103.tar.gz) = 9396e1cc8aaa242ba256979f6bacda01b97613c3dda0906a
@
