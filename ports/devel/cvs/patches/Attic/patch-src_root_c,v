head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2012.02.11.19.30.01;	author tg;	state dead;
branches;
next	1.4;
commitid	1004F36C11F02848ED5;

1.4
date	2011.06.11.03.55.37;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004DF2E74A6938C5EF;

1.3
date	2010.09.15.20.57.02;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004C9132F41004B31C;

1.2
date	2007.03.10.23.53.50;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045F344D65465EF23;

1.1
date	2006.10.02.05.59.18;	author tg;	state Exp;
branches;
next	;
commitid	1004520AAAB453C7791;


desc
@@


1.5
log
@update the CVS package in MirPorts (to match base and Debian)

• since the Debian cvs source package was taken over by this one,
  reverse things and use the Debian *.diff.gz to get our patches
  from ;-) saves tracking things in CVS thrice
• since the Debian cvs binary package contains PDF documentation
  generated from something with our patches, ship it instead of
  the one from the vanilla CVS distfile
• ship cvs-switchroot(1) from Debian, which is just a fancy name
  for mircvs://src/scripts/mnt-cvsroot and has a manpage
• move stuff from PREFIX/share/cvs to PREFIX/share/doc/cvs as is proper
• fix regression testsuite on MirBSD as much as possible (same as base)
@
text
@$MirOS: ports/devel/cvs/patches/patch-src_root_c,v 1.4 2011/06/11 03:55:37 tg Exp $
--- src/root.c.orig	Sun Sep 25 00:38:07 2005
+++ src/root.c	Sat Jun 11 03:06:20 2011
@@@@ -18,6 +18,8 @@@@
 #include <assert.h>
 #include "getline.h"
 
+__RCSID("$MirOS: ports/devel/cvs/patches/patch-src_root_c,v 1.4 2011/06/11 03:55:37 tg Exp $");
+
 /* Printable names for things in the current_parsed_root->method enum variable.
    Watch out if the enum is changed in cvs.h! */
 
@@@@ -293,6 +295,12 @@@@ root_allow_free (void)
     dellist (&root_allow);
 }
 
+int
+root_allow_used (void)
+{
+    return (root_allow != NULL);
+}
+
 bool
 root_allow_ok (const char *arg)
 {
@@@@ -535,6 +543,12 @@@@ parse_cvsroot (const char *root_in)
 	    method = "";
 #endif /* defined (CLIENT_SUPPORT) || defined (SERVER_SUPPORT) */
 
+    if (NULL == method)
+	{
+	    error (0, 0, "Missing method in CVSROOT.");
+	    goto error_exit;
+	}
+
 	/* Now we have an access method -- see if it's valid. */
 
 	if (!strcasecmp (method, "local"))
@@@@ -547,6 +561,16 @@@@ parse_cvsroot (const char *root_in)
 	    newroot->method = gserver_method;
 	else if (!strcasecmp (method, "server"))
 	    newroot->method = server_method;
+	else if (strncmp (method, "ext=", 4) == 0)
+	{
+	    newroot->cvs_rsh = xstrdup(method + 4);
+	    newroot->method = ext_method;
+	}
+	else if (!strcasecmp (method, "extssh"))
+	{
+	    newroot->cvs_rsh = xstrdup("ssh");
+	    newroot->method = extssh_method;
+	}
 	else if (!strcasecmp (method, "ext"))
 	    newroot->method = ext_method;
 	else if (!strcasecmp (method, "fork"))
@@@@ -597,13 +621,15 @@@@ parse_cvsroot (const char *root_in)
 	    else if (!strcasecmp (p, "CVS_RSH"))
 	    {
 		/* override CVS_RSH environment variable */
-		if (newroot->method == ext_method)
-		    newroot->cvs_rsh = xstrdup (q);
+		if (newroot->method == ext_method
+		    || newroot->method == extssh_method)
+		newroot->cvs_rsh = xstrdup (q);
 	    }
 	    else if (!strcasecmp (p, "CVS_SERVER"))
 	    {
 		/* override CVS_SERVER environment variable */
 		if (newroot->method == ext_method
+		    || newroot->method == extssh_method
 		    || newroot->method == fork_method)
 		    newroot->cvs_server = xstrdup (q);
 	    }
@@@@ -635,7 +661,8 @@@@ parse_cvsroot (const char *root_in)
     newroot->isremote = (newroot->method != local_method);
 
 #if defined (CLIENT_SUPPORT) || defined (SERVER_SUPPORT)
-    if (readonlyfs && newroot->isremote)
+    if (readonlyfs && newroot->isremote && (newroot->method != ext_method)
+	&& (newroot->method != extssh_method))
 	error (1, 0,
 "Read-only repository feature unavailable with remote roots (cvsroot = %s)",
 	       cvsroot_copy);
@@@@ -828,6 +855,7 @@@@ parse_cvsroot (const char *root_in)
     case server_method:
     case ext_method:
 	no_port = 1;
+    case extssh_method:
 	/* no_password already set */
 	check_hostname = 1;
 	break;
@@@@ -871,8 +899,8 @@@@ parse_cvsroot (const char *root_in)
     if (no_port && newroot->port)
     {
         error (0, 0,
-"CVSROOT port specification is only valid for gserver, kserver,");
-        error (0, 0, "and pserver connection methods.");
+"CVSROOT port specification is only valid for extssh,");
+        error (0, 0, "gserver, kserver and pserver connection methods.");
         goto error_exit;
     }
 #endif /* defined(CLIENT_SUPPORT) || defined (SERVER_SUPPORT) */
@


1.4
log
@update and bring them in sync
@
text
@d1 1
a1 1
$MirOS: ports/devel/cvs/patches/patch-src_root_c,v 1.3 2010/09/15 20:57:02 tg Exp $
d8 1
a8 1
+__RCSID("$MirOS: ports/devel/cvs/patches/patch-src_root_c,v 1.3 2010/09/15 20:57:02 tg Exp $");
@


1.3
log
@WIP port (will be worked on more, commit for safety)

Some changes, in this order:
• re-sync with MirOS base cvs
• reduce diff against upstream
• apply cvs-datetime.patch from Arkadiusz Miskiewicz <arekm>
  via Concurrent Versions System - Bugs: bug #21523, can't parse date/time: =UTC when commiting file (workaround/fix attached)
• apply (only those considered somewhat sane) patches from Debian cvs_1:1.12.13-12
  – 11_check_method_crash
  – 12_rcs2log_POSIX_sort
  – 14_ext_expansion
  – 15_PATH_MAX_check
  – 20_readdir_errno
  – 21_getcwd_chroot
  – 25_import-n-X
  – 51_newlines_in_commit_template (partially)
  – 55_keyword_alphanumerics (modified)
  – 62_cvsrc_whitespace
  – 65_login_cvspass_message
  – 69_ext_allowroot (modified)
  – 71_cvsbug_tmpfix
  – 81_fix_-l (modified)
  – 85_normalize_correct_roots
  – 86_server_wrapper (modified)
  – 93_homedir (modified)
  – 95_flag_conflicted_copies
  – 96_manpage_fixes (partially)
  – 97_cvs.info.typo (partially)
  – 98_fix_sparc_sigbus.diff
• document Debian’s changes in the Texinfo manual
• modify mkman.pl to produce more correct looking output
• point to texinfo HTML document from HTML manpage
• fix fseeko configure.in test
• correct bugs in Debian’s changes
@
text
@d1 1
a1 1
$MirOS$
d3 1
a3 1
+++ src/root.c	Wed Sep 15 19:36:15 2010
d8 1
a8 1
+__RCSID("$MirOS: ports/devel/cvs/patches/patch-src_root_c,v 1.2 2007/03/10 23:53:50 tg Exp $");
d39 1
a39 1
@@@@ -547,6 +561,18 @@@@ parse_cvsroot (const char *root_in)
d45 1
a45 2
+	    const char *rsh = method + 4;
+	    setenv ("CVS_RSH", rsh, 1); /* This is a hack, but simplifies */
d48 1
a48 1
+	else if (strncmp (method, "extssh", 6) == 0)
d50 2
a51 3
+	    const char *rsh = method + 3;
+	    setenv ("CVS_RSH", rsh, 1); /* This is a hack, but simplifies */
+	    newroot->method = ext_method;
d56 19
a74 1
@@@@ -635,7 +661,7 @@@@ parse_cvsroot (const char *root_in)
d79 2
a80 1
+    if (readonlyfs && newroot->isremote && (newroot->method != ext_method))
d84 19
@


1.2
log
@sync the cvs port and the cvs in the base system;
RCSID stuff like in commitid 10045F33CB2157CFEAE
@
text
@d1 3
a3 3
$MirOS: ports/devel/cvs/patches/patch-src_root_c,v 1.1 2006/10/02 05:59:18 tg Exp $
--- src/root.c.orig	Sat Mar 10 23:14:20 2007
+++ src/root.c	Sat Mar 10 23:14:14 2007
d8 1
a8 1
+__RCSID("$MirOS: src/gnu/usr.bin/cvs/src/root.c,v 1.5 2005/12/16 16:09:46 tg Exp $");
d13 46
a58 1
@@@@ -635,7 +637,7 @@@@ parse_cvsroot (const char *root_in)
@


1.1
log
@add cvs port, compiles fine and warning-free on MirOS-current;
other OSes not tested, older MirOS may have issues (mktime, regex/wctype)
@
text
@d1 13
a13 4
$MirOS$
--- src/root.c.orig	Sun Sep 25 00:38:07 2005
+++ src/root.c	Mon Oct  2 04:40:37 2006
@@@@ -635,7 +635,7 @@@@ parse_cvsroot (const char *root_in)
@

