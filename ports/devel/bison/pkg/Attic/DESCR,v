head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.11.02.02.21.52;	author tg;	state dead;
branches;
next	1.1;
commitid	100490D0EB9073B4EFD;

1.1
date	2005.03.18.15.44.28;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.18.15.44.28;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@make this pass all (even the C++) tests
ironically, the testsuite itself was b0rken too, although
a C++ compiler might have let that passâ€¦
@
text
@"Bison" is a general-purpose parser generator that converts a grammar
description for an LALR(1) context-free grammar into a C program
to parse that grammar.  Once you are proficient with Bison, you may
use it to develop a wide range of language parsers, from those used
in simple desk calculators to complex programming languages.

Bison is upward compatible with Yacc: all properly-written Yacc
grammars ought to work with Bison with no change.  Anyone familiar
with Yacc should be able to use Bison with little trouble.  You
need to be fluent in C programming in order to use Bison.
@


1.1
log
@Initial revision
@
text
@@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
