head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.10.04.18.37.33;	author tg;	state dead;
branches;
next	1.1;
commitid	10048E7B76F1F1670BC;

1.1
date	2008.09.23.19.56.32;	author bsiegert;	state Exp;
branches;
next	;
commitid	10048D949A87E36023B;


desc
@@


1.2
log
@fix the ccache thing as discusses:
we now always use
_PASS_CC=	/usr/ports/security/pgp+/w-pgp-2.6.3in-3/bin/mpcc
_PASS_CXX=	/usr/ports/security/pgp+/w-pgp-2.6.3in-3/bin/mpcxx
for compilation; the new _ORIG_CC and _ORIG_CXX are saved (_ORIG_CXX is
even not set to false) and used for Darwin spec file generation (Benny,
please test if this works); Systrace doesn’t bitch; and we now have two
_USE_CC and _USE_CXX variables wich contain what is actually written in
the mpcc and mpcxx files. All six of these are internal, but a Makefile
should™ use _PASS_CC and _PASS_CXX ipv CC and CXX, so that things still
will work when the user overrides CC via the command line (but it works
if he doesn’t already)
@
text
@CCACHE_DEPENDS?=	::devel/ccache
BUILD_DEPENDS+=		${CCACHE_DEPENDS}
CCACHE_DIR?=		${HOME}/.etc/ccache

MAKE_ENV+=		CCACHE_DIR=${CCACHE_DIR:Q}
CONFIGURE_ENV+=		CCACHE_DIR=${CCACHE_DIR:Q}

#CC:=			env CCACHE_DIR=${CCACHE_DIR:Q} ccache ${CC}
#.  if ${NO_CXX:L} == "no"
#CXX:=			env CCACHE_DIR=${CCACHE_DIR:Q} ccache ${CXX}
#.  endif

MODDEVEL/CCACHE_post-patch= ln -s ${LOCALBASE}/bin/ccache ${WRKDIR}/bin/${CC:T}
.if ${NO_CXX:L} == "no"
MODDEVEL/CCACHE_post-patch+= \
	ln -s ${LOCALBASE}/bin/ccache ${WRKDIR}/bin/${CXX:T}
.endif
@


1.1
log
@Change the way ccache support is implemented, due to too many problems.
WRKDIR/bin/mgcc is now a symlink to LOCALBASE/bin/ccache, the dir is set in
{CONFIGURE,MAKE}_ENV. All support is now a module.

Needs to be tested on a platform with systrace.
@
text
@@

