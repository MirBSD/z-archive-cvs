head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2005.10.02.12.01.54;	author tg;	state Exp;
branches;
next	1.1;
commitid	2251433fcc03dc8a;

1.1
date	2005.03.18.15.45.28;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.18.15.45.28;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* update to 1.2.9
* libtoolise PLIST
* autogen'ise
* remove useless caca flavour
* remove no_cxx flavour which didn't do anything anyway
@
text
@$MirOS: ports/devel/sdl/patches/patch-src_video_x11_SDL_x11modes_c,v 1.1.7.1 2005/03/18 15:45:28 tg Exp $
$OpenBSD: patch-src_video_x11_SDL_x11modes_c,v 1.3 2003/09/29 05:41:37 pvalchev Exp $
--- src/video/x11/SDL_x11modes.c.orig	Fri Nov 12 21:25:20 2004
+++ src/video/x11/SDL_x11modes.c	Sun Oct  2 11:15:00 2005
@@@@ -44,6 +44,8 @@@@ static char rcsid =
 #endif 
 
 #define MAX(a, b)        (a > b ? a : b)
+#define V_INTERLACE      0x010
+#define V_DBLSCAN        0x020
 
 #ifdef XFREE86_VM
 Bool SDL_NAME(XF86VidModeGetModeInfo)(Display *dpy, int scr, SDL_NAME(XF86VidModeModeInfo) *info)
@@@@ -92,6 +94,82 @@@@ static int cmpmodes(const void *va, cons
 }
 #endif
 
+#ifdef XFREE86_VM
+static int get_vidmode_filter(SDL_NAME(XF86VidModeModeInfo) **modes, int nmodes, char **bitmap)
+{
+    int i, result = 0;
+    int use_all_modes, use_specific_mode;
+    const char *variable;
+    char *temp;
+
+    if (!nmodes)
+        return 0;
+
+    temp = (char *)malloc((nmodes)*sizeof(char));
+    if (!temp)
+        return 0;
+
+    for ( i = 0; i < nmodes; ++i )
+        temp[i] = 0;
+
+    variable = getenv("SDL_VIDEO_X11_USE_ALL_MODES");
+    use_all_modes = variable ? atoi(variable) : 0;
+    variable = getenv("SDL_VIDEO_X11_USE_SPECIFIC_MODE");
+    use_specific_mode = variable ? atoi(variable) : 0;
+
+    qsort(modes, nmodes, sizeof *modes, cmpmodes);
+
+    if ( use_all_modes ) {
+        for ( i = 0; i < nmodes; ++i )
+            temp[i] = 1;
+        result  = 1;
+/*    } else if ( use_specific_mode ) { ... */
+    } else {
+        int previous_refresh, current_refresh;
+        SDL_NAME(XF86VidModeModeInfo) *previous, *current;
+
+        previous = modes[0];
+        previous_refresh = (int)(previous->dotclock * 1000.0 /
+          (previous->htotal * previous->vtotal));
+        if ( previous->flags & V_INTERLACE ) previous_refresh *= 2;
+        else if ( previous->flags & V_DBLSCAN ) previous_refresh /= 2;
+
+        temp[0] = 1;
+        for ( i = 1; i < nmodes; ++i ) {
+            current = modes[i];
+            current_refresh = (int)(current->dotclock * 1000.0 /
+              (current->htotal * current->vtotal));
+            if ( current->flags & V_INTERLACE ) current_refresh *= 2;
+            else if ( current->flags & V_DBLSCAN ) current_refresh /= 2;
+
+            /* Compare this mode to the previous one */
+            if ( current->hdisplay == previous->hdisplay &&
+                 current->vdisplay == previous->vdisplay ) {
+#ifdef XFREE86_DEBUG
+		printf("Comparing %dx%d at %d Hz and %d Hz\n",
+			current->hdisplay, current->vdisplay,
+			current_refresh, previous_refresh);
+#endif
+                if ( current_refresh > previous_refresh ) {
+                    temp[i-1] = 0;
+                    temp[i]   = 1;
+                }
+                else
+                    temp[i] = 0;
+            }
+            else
+                temp[i] = 1;
+
+            previous = current;
+            previous_refresh = current_refresh;
+        }
+        result = 1;
+    }
+    *bitmap = temp;
+    return result;
+}
+#endif
+
 static void get_real_resolution(_THIS, int* w, int* h);
 
 static void set_best_resolution(_THIS, int width, int height)
@@@@ -103,9 +181,11 @@@@ static void set_best_resolution(_THIS, i
         int i;
         int best_width = 0, best_height = 0;
         int nmodes;
+	char *bitmap;
 
         if ( SDL_NAME(XF86VidModeGetModeLine)(SDL_Display, SDL_Screen, &i, &mode) &&
-             SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display,SDL_Screen,&nmodes,&modes)){
+             SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display,SDL_Screen,&nmodes,&modes) &&
+	     get_vidmode_filter(modes, nmodes, &bitmap) ){
 #ifdef XFREE86_DEBUG
             printf("Available modes (unsorted):\n");
             for ( i = 0; i < nmodes; ++i ) {
@@@@ -117,14 +197,16 @@@@ static void set_best_resolution(_THIS, i
 #endif
             for ( i = 0; i < nmodes ; i++ ) {
                 if ( (modes[i]->hdisplay == width) &&
-                     (modes[i]->vdisplay == height) )
+                     (modes[i]->vdisplay == height) &&
+		     (bitmap[i] == 1) )
                     goto match;
             }
             qsort(modes, nmodes, sizeof *modes, cmpmodes);
             for ( i = nmodes-1; i > 0 ; i-- ) {
 		if ( ! best_width ) {
                     if ( (modes[i]->hdisplay >= width) &&
-                         (modes[i]->vdisplay >= height) ) {
+                         (modes[i]->vdisplay >= height) &&
+			 (bitmap[i] == 1) ) {
                         best_width = modes[i]->hdisplay;
                         best_height = modes[i]->vdisplay;
                     }
@@@@ -142,6 +224,7 @@@@ static void set_best_resolution(_THIS, i
                 SDL_NAME(XF86VidModeSwitchToMode)(SDL_Display, SDL_Screen, modes[i]);
             }
             XFree(modes);
+            if (bitmap) free(bitmap);
         }
     }
 #endif /* XFREE86_VM */
@@@@ -289,6 +372,7 @@@@ int X11_GetVideoModes(_THIS)
     int vm_major, vm_minor;
     int nmodes;
     SDL_NAME(XF86VidModeModeInfo) **modes;
+    char *bitmap = (char*)0;
 #endif
 #ifdef HAVE_XIGXME
     int xme_major, xme_minor;
@@@@ -350,7 +434,8 @@@@ int X11_GetVideoModes(_THIS)
         }
     }
     if ( ! buggy_X11 &&
-         SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display, SDL_Screen,&nmodes,&modes) ) {
+         SDL_NAME(XF86VidModeGetAllModeLines)(SDL_Display, SDL_Screen,&nmodes,&modes)  &&
+         get_vidmode_filter(modes, nmodes, &bitmap) ) {
 
 #ifdef XFREE86_DEBUG
         printf("Available modes: (sorted)\n");
@@@@ -369,6 +454,9 @@@@ int X11_GetVideoModes(_THIS)
             for ( i=0; i<nmodes; ++i ) {
                 int w, h;
 
+                /* Exclude those vidmodes that have been filtered out */
+                if (!bitmap[i]) continue;
+
                 /* Check to see if we should add the screen size (Xinerama) */
                 w = modes[i]->hdisplay;
                 h = modes[i]->vdisplay;
@@@@ -401,6 +489,7 @@@@ int X11_GetVideoModes(_THIS)
             SDL_modelist[n] = NULL;
         }
         XFree(modes);
+        if (bitmap) free(bitmap);
 
         use_vidmode = vm_major * 100 + vm_minor;
         save_mode(this);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$MirOS$
d3 2
a4 2
--- src/video/x11/SDL_x11modes.c.orig	Wed Feb 18 17:21:47 2004
+++ src/video/x11/SDL_x11modes.c	Thu Aug 26 19:41:20 2004
d14 1
a14 1
@@@@ -91,6 +93,82 @@@@ static int cmpmodes(const void *va, cons
d97 1
a97 1
@@@@ -102,9 +180,11 @@@@ static void set_best_resolution(_THIS, i
d110 1
a110 1
@@@@ -116,14 +196,16 @@@@ static void set_best_resolution(_THIS, i
d129 1
a129 1
@@@@ -141,6 +223,7 @@@@ static void set_best_resolution(_THIS, i
d137 1
a137 1
@@@@ -288,6 +371,7 @@@@ int X11_GetVideoModes(_THIS)
d145 1
a145 1
@@@@ -349,7 +433,8 @@@@ int X11_GetVideoModes(_THIS)
d155 1
a155 1
@@@@ -368,6 +453,9 @@@@ int X11_GetVideoModes(_THIS)
d165 1
a165 1
@@@@ -400,6 +488,7 @@@@ int X11_GetVideoModes(_THIS)
@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
