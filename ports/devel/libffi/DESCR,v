head	1.2;
access;
symbols
	start:1.1.1.1 tg:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.05.28.19.07.39;	author tg;	state Exp;
branches;
next	1.1;
commitid	1005386340A207CCD06;

1.1
date	2008.08.08.15.53.57;	author tg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	100489C6BDF38E32927;

1.1.1.1
date	2008.08.08.15.53.57;	author tg;	state Exp;
branches;
next	;
commitid	100489C6BDF38E32927;


desc
@@


1.2
log
@update DESCR, distinfo; add HOMEPAGE; remove junk from Makefile
@
text
@libffi - Portable Foreign Function Interface Library

Compilers for high level languages generate code that follows certain
conventions. These conventions are necessary, in part, for separate
compilation to work. One such convention is the "calling convention".
The "calling convention" is a set of assumptions made by the compiler
about where function arguments will be found on entry to a function. A
"calling convention" also specifies where the return value for a
function is found.

Some programs may not know at the time of compilation what arguments are
to be passed to a function. For instance, an interpreter may be told at
run-time about the number and types of arguments used to call a given
function. Libffi can be used in such programs to provide a bridge from
the interpreter program to compiled code.

The libffi library provides a portable, high level programming interface
to various calling conventions. This allows a programmer to call any
function specified by a call interface description at run-time.

FFI stands for Foreign Function Interface. A foreign function interface
is the popular name for the interface that allows code written in one
language to call code written in another language. The libffi library
really only provides the lowest, machine dependent layer of a fully
featured foreign function interface. A layer must exist above libffi
that handles type conversions for values passed between the two
languages.
@


1.1
log
@Initial revision
@
text
@d1 27
a27 1
The MirOS base-gcc version of libffi-gcj-3.4.6 as MirPort.
@


1.1.1.1
log
@Add a couple of ports required for the customer whose job I'll now be
handling: the Pawn scripting language (of which E17's Embryo is a fork),
a gtk-server binary port (for quick testing; we'll probably want a na-
tive one in both GTK+1.2 and GTK+2 flavours), and libffi from base-gcj.
@
text
@@
