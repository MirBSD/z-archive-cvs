head	1.4;
access;
symbols
	tg:1.4.0.2;
locks; strict;
comment	@# @;


1.4
date	2005.12.15.14.24.19;	author tg;	state Exp;
branches;
next	1.3;
commitid	10043A17C743029E031;

1.3
date	2005.10.07.19.40.55;	author tg;	state Exp;
branches;
next	1.2;
commitid	42794346cf206d2b;

1.2
date	2005.04.26.05.44.31;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.26.05.41.52;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* remove remnants of libc-client.so
* honour SYSCONFDIR, LOCALBASE, TRUEPREFIX
* certificate now in SYSCONFDIR/ssl/*.pem instead
* bump versions on all packages
@
text
@#!/usr/bin/env perl
# $MirOS: ports/mailnews/pine/files/mbxfix,v 1.3 2005/10/07 19:40:55 tg Exp $

# Tool to repair MBX mailbox files as used by
# UW imapd, c-client, Pine etc.
# Andrew Daviel TRIUMF Oct 2001  <advax@@triumf.ca>

# Copyright (c) 2001, 2005
#	Andrew Daviel <advax@@triumf.ca>
#
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publicly perform, modify,
# merge, distribute, sell, give away or sublicence, provided all co-
# pyright notices above, these terms and the disclaimer are retained
# in all redistributions or reproduced in accompanying documentation
# or other materials provided with binary redistributions.
#
# Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
# express, or implied, to the maximum extent permitted by applicable
# law, without malicious intent or gross negligence; in no event may
# licensor, an author or contributor be held liable for any indirect
# or other damage, or direct damage except proven a consequence of a
# direct error of said person and intended use of this work, loss or
# other issues arising in any way out of its use, even if advised of
# the possibility of such damage or existence of a nontrivial bug.


if ($ARGV[0] eq '-v') {
  $debug ++ ;
  shift(@@ARGV) ;
}
if ($ARGV[0] eq '-v') {
  $debug ++ ;
  shift(@@ARGV) ;
}
if ($ARGV[0] eq '-v') {
  $debug ++ ;
  shift(@@ARGV) ;
}

unless ($ARGV[0]) {
  print STDERR "Usage: $0 [-v] <infile> [<outfile>]\n" ;
  print STDERR "Repair MBX format mailbox. If output file not present, check errors then die\n" ;
  print STDERR "Options: -v verbose, use more than once for more\n" ;
  exit ;
}
open (IN,$ARGV[0]) or die "Cannot open input file $ARGV[0]\n" ;;
$h = <IN> ; unless ($h eq "*mbx*\r\n") { die "Not a valid MBX file\n" ;; }
<IN> =~ /([\w]{8})([\w]{8})/ ;
$val = hex($1) ; $luid = hex($2) ;
$lval = localtime($val) ; if ($debug) { print "Created $lval last UID $luid\n" ; }
for ($i=0;$i<30;$i++) {
  $l = <IN> ;
  push (@@uflag,$l) ;
}
$_ = <IN> ; $last = $_ ;
tr/\000//d ; # remove NULs from first header
/(.[\d]-[\w]{3}-[\d]{4} [\d][\d]:[\d][\d]:[\d][\d].*),([\d]*);(0000000[\w]*)-([\w]*)/ ;
$date = $1 ; $j = $2 ; $flags = hex($3) ; $uid = hex($4) ; $nuid = $uid+1 ; $nm = 1 ;
$aflag = '' ;
unless ($flags & 1) { $aflag .= 'new ' ; }
if ($flags & 2) { $aflag .= 'deleted ' ; }
if ($flags & 4) { $aflag .= 'flagged ' ; }
if ($flags & 8) { $aflag .= 'answered ' ; }
if ($flags & 16) { $aflag .= 'old ' ; }
if ($flags & 32) { $aflag .= 'draft ' ; }
if ($debug) { print "$date length $j UID $uid $aflag\n" ; }
while (<IN>) {
  if ( /(.[\d]-[\w]{3}-[\d]{4} [\d][\d]:[\d][\d]:[\d][\d].*),([\d]*);([\w]*)-([\w]*)/) {
    $j0 = $j ; $nm++ ; $date0 = $date ; $uid0 = $uid ;
    $date = $1 ; $j = $2 ; $flags = hex($3) ; $uid = hex($4) ;
    $aflag = '' ;
    if ($flags & 1) { $aflag .= 'seen ' ; }
    if ($flags & 2) { $aflag .= 'deleted ' ; }
    if ($flags & 4) { $aflag .= 'flagged ' ; }
    if ($flags & 8) { $aflag .= 'answered ' ; }
    if ($flags & 16) { $aflag .= 'old ' ; }
    if ($flags & 32) { $aflag .= 'draft ' ; }
    $pl = length($body) ;
    if ($uid>$maxuid) { $maxuid = $uid ; }
    if ($pl != $j0) {
      print "* $date0  uid $uid0 length mismatch $j0 repair $pl\n" ;
      $repair{$nm-1} = $pl ; $nr++ ;
    }
    if ($uid{$uid}) {
      print "* $date length $j duplicate UID $uid\n" ;
      $fixuid++ ;
    }
    $uid{$uid} ++ ;
#    if ($nuid != $uid) {
#      print "* $date length $j UID $uid expected $nuid\n" ;
#      $fixuid++ ;
#    }
    if ($uid > $luid) {
      print "* $date UID $uid exceeds $luid\n" ;
    }
    $last = $_ ; $nuid = $uid + 1 ;

    if ($debug) { print "$date length $j UID $uid $aflag\n" ; }
    $body = '' ;
    next ;
  }
#  rest of message
  if ($debug > 1 && /^Subject: /) { print "  $_" ; }
  if ($debug > 1 && /^From: /) { print "  $_" ; }
  if ($debug > 2 && /^Date: /) { print "  $_" ; }
  if ($debug > 2 && /^Message-Id: /i) { print "  $_" ; }
  if ($debug > 2 && /^To: /) { print "  $_" ; }

  $body .= $_ ;
}
$j0 = $j ;
$pl = length($body) ;
if ($pl != $j0) {
  print "* $date0  uid $uid0  mismatch $j0 repair $pl\n" ;
  $repair{$nm-1} = $pl ; $nr++ ;
}
if ($luid != $maxuid) {
  print "* Largest UID $maxuid != $luid in header\n" ;
}
close(IN) ;

if ($fixuid) { $maxuid = $nm ; }

#while (($repair,$len) = each (%repair)) {
#  $nr++ ;
#  print "repair $repair with $len\n" ;
#}
unless ($nr || $fixuid) { exit ; }
print "$nr length repairs\n$fixuid UID repairs\n" ;

$fixuid = 0 ;

open (IN,$ARGV[0]) or die "Cannot open input file\n" ;
open (OUT,">$ARGV[1]") or die "Cannot create output file \"$ARGV[1]\"\n" ;

$h = <IN> ; unless ($h eq "*mbx*\r\n") { die "Not a valid MBX file\n"  ; }
print OUT $h ;
$l = <IN> ; # print OUT $l ;
$l =~ /([\w]{8})([\w]{8})/ ;
$val = hex($1) ; $luid = hex($2) ;
$lval = localtime($val) ;
printf OUT ("%8.8x%8.8x\r\n",time(),$maxuid) ;
for ($i=0;$i<30;$i++) {
  $l = <IN> ; print OUT $l ;
  push (@@uflag,$l) ;
}
$_ = <IN> ;
/(.*[\d]-[\w]{3}-[\d]{4} [\d][\d]:[\d][\d]:[\d][\d].*),([\d]*);(0000000[\w]*)-([\w]*)/ ;
$date = $1 ; $j = $2 ; $flags = $3 ; $uid = $4 ; $nm =  1 ;
if ($fixuid) {
  $nuid = sprintf("%8.8x",$nm) ;
  s/-$uid/-$nuid/ ;
 }
if ($repair{$nm}) {
  print "repair $_ with $repair{$nm}\n" ;
#  $j = $repair{$nm} ;
  s/,$j;/,$repair{$nm};/;
}
print OUT $_ ;
#print OUT "$date,$j;$flags-$uid\r\n" ;
while (<IN>) {
  if ( /(.[\d]-[\w]{3}-[\d]{4} [\d][\d]:[\d][\d]:[\d][\d].*),([\d]*);([\w]*)-([\w]*)/) {
    $date = $1 ; $j = $2 ; $flags = $3 ; $uid = $4 ; $nm++ ;
    if ($fixuid) { $uid = sprintf("%8.8x",$nm) ; }
    if ($repair{$nm}) {
      print "repair $_ with $repair{$nm}\n" ;
      $j = $repair{$nm} ;
    }
    print OUT "$date,$j;$flags-$uid\r\n" ;
    if ($debug) { print "$date,$j;$flags-$uid\n" ; }
    next ;
  }
  print OUT $_ ;
}
@


1.3
log
@* update to 4.64 (imapd stays at 2004g, yeah, we already had the
  recent "security fix" ;) and bump patchlevels for components
  with unchanged versions (imapd & co., pilot, pico)
* remove shared libc-client since it's a PITA if unsupported upstream
  and on the Mac
@
text
@d2 1
a2 1
# $MirOS: ports/mailnews/pine/files/mbxfix,v 1.2 2005/04/26 05:44:31 tg Exp $
d18 8
a25 7
# Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
# any kind, expressed or implied, to the maximum extent permitted by
# applicable law, but with the warranty of being written without ma-
# licious intent or gross negligence; in no event shall licensor, an
# author or contributor be held liable for any damage, direct, indi-
# rect or other, however caused, arising in any way out of the usage
# of this work, even if advised of the possibility of such damage.
@


1.2
log
@* tweak
* add to package
@
text
@d1 2
a2 2
#!/usr/bin/perl
# $MirOS$
a6 1
# (licence=http://mirbsd.de/MirOS-Licence)
d8 1
a8 1
# Copyright (c) 2001,2005
@


1.1
log
@add mbxfix, a small perl script which saved my INBOX once
by Andrew Daviel who also agreed to use our licence on the file
@
text
@d2 1
d11 1
a11 1

d18 1
a18 1

d29 1
a29 1
  $debug ++ ; 
d33 1
a33 1
  $debug ++ ; 
d37 1
a37 1
  $debug ++ ; 
d81 1
a81 1
    if ($pl != $j0) { 
d89 1
a89 1
    $uid{$uid} ++ ; 
d100 1
a100 1
    $body = '' ; 
d114 1
a114 1
if ($pl != $j0) { 
d151 1
a151 1
if ($fixuid) { 
d174 1
a174 1
  print OUT $_ ;  
a175 1

@

