head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.09.12.08.56.11;	author tg;	state dead;
branches;
next	1.1;
commitid	10048CA2EA75116DF9D;

1.1
date	2008.09.10.09.55.56;	author tg;	state Exp;
branches;
next	;
commitid	10048C7999E002F0617;


desc
@@


1.2
log
@Upgrade to yesterday’s 0.5.0rc1 *sigh* just after I pulled out the
fixes from their svn…
@
text
@$MirOS: ports/databases/py-SQLAlchemy/patches/patch-lib_sqlalchemy_util_py,v 1.1 2008/09/10 09:55:56 tg Exp $

	From SVN changeset 5035

--- lib/sqlalchemy/util.py.orig	Mon Aug  4 22:35:45 2008
+++ lib/sqlalchemy/util.py	Wed Sep 10 09:36:19 2008
@@@@ -395,15 +395,23 @@@@ def class_hierarchy(cls):
     class_hierarchy(class A(object)) returns (A, object), not A plus every
     class systemwide that derives from object.
 
+    Old-style classes are discarded and hierarchies rooted on them
+    will not be descended.
+
     """
+    if isinstance(cls, types.ClassType):
+        return list()
     hier = set([cls])
     process = list(cls.__mro__)
     while process:
         c = process.pop()
-        for b in [_ for _ in c.__bases__ if _ not in hier]:
+        if isinstance(c, types.ClassType):
+            continue
+        for b in (_ for _ in c.__bases__
+                  if _ not in hier and not isinstance(_, types.ClassType)):
             process.append(b)
             hier.add(b)
-        if c.__module__ == '__builtin__':
+        if c.__module__ == '__builtin__' or not hasattr(c, '__subclasses__'):
             continue
         for s in [_ for _ in c.__subclasses__() if _ not in hier]:
             process.append(s)
@


1.1
log
@add two patches from svn trunk required for supporting “old-style” classes,
which, despite going away in Python 2.6, are required for CORBA mappings…

spare me having to comment on this, please
@
text
@d1 1
a1 1
$MirOS$
@

