head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2008.08.26.12.53.59;	author tg;	state Exp;
branches;
next	1.2;
commitid	10048B3FCC805E2DB13;

1.2
date	2008.02.28.18.36.03;	author tg;	state Exp;
branches;
next	1.1;
commitid	10047C6FF22418BD166;

1.1
date	2008.02.28.18.27.21;	author tg;	state Exp;
branches;
next	;
commitid	10047C6FCF228362218;


desc
@@


1.3
log
@update

XXX this uses libtool 2.2, which we downgrade to 1.5, whereas it
XXX would be better to provide a port of such via MirPorts infra

XXX this uses detectheader CONFIGURE_STYLE, which ought to be default
@
text
@$MirOS: ports/databases/sqlite/patches/patch-tool_lemon_c,v 1.2 2008/02/28 18:36:03 tg Exp $
--- tool/lemon.c.orig	Tue Aug  5 19:58:31 2008
+++ tool/lemon.c	Tue Aug 26 12:32:13 2008
@@@@ -6,6 +6,14 @@@@
 **
 ** The author of this program disclaims copyright.
 */
+
+#include <sys/cdefs.h>
+__RCSID("$MirOS: ports/databases/sqlite/patches/patch-tool_lemon_c,v 1.2 2008/02/28 18:36:03 tg Exp $");
+
+#ifndef LEMPAR_PATH
+#define LEMPAR_PATH	"/usr/share/lemon/lempar.c"
+#endif
+
 #include <stdio.h>
 #include <stdarg.h>
 #include <string.h>
@@@@ -1317,15 +1325,15 @@@@ void ErrorMsg(const char *filename, int 
   va_start(ap, format);
   /* Prepare a prefix to be prepended to every output line */
   if( lineno>0 ){
-    sprintf(prefix,"%.*s:%d: ",PREFIXLIMIT-10,filename,lineno);
+    snprintf(prefix,sizeof prefix,"%.*s:%d: ",PREFIXLIMIT-10,filename,lineno);
   }else{
-    sprintf(prefix,"%.*s: ",PREFIXLIMIT-10,filename);
+    snprintf(prefix,sizeof prefix,"%.*s: ",PREFIXLIMIT-10,filename);
   }
   prefixsize = strlen(prefix);
   availablewidth = LINEWIDTH - prefixsize;
 
   /* Generate the error message */
-  vsprintf(errmsg,format,ap);
+  vsnprintf(errmsg,sizeof errmsg,format,ap);
   va_end(ap);
   errmsgsize = strlen(errmsg);
   /* Remove trailing '\n's from the error message. */
@@@@ -1371,12 +1379,11 @@@@ static void handle_D_option(char *z){
     exit(1);
   }
   paz = &azDefine[nDefine-1];
-  *paz = malloc( strlen(z)+1 );
+  *paz = strdup(z);
   if( *paz==0 ){
     fprintf(stderr,"out of memory\n");
     exit(1);
   }
-  strcpy(*paz, z);
   for(z=*paz; *z && *z!='='; z++){}
   *z = 0;
 }
@@@@ -2339,7 +2346,7 @@@@ to follow the previous rule.");
           for(z=psp->filename, nBack=0; *z; z++){
             if( *z=='\\' ) nBack++;
           }
-          sprintf(zLine, "#line %d ", psp->tokenlineno);
+          snprintf(zLine, sizeof (zLine), "#line %d ", psp->tokenlineno);
           nLine = strlen(zLine);
           n += nLine + strlen(psp->filename) + nBack;
         }
@@@@ -2708,16 +2715,18 @@@@ char *suffix;
 {
   char *name;
   char *cp;
+  size_t namelen;
 
-  name = malloc( strlen(lemp->filename) + strlen(suffix) + 5 );
+  namelen = strlen(lemp->filename) + strlen(suffix) + 5;
+  name = malloc(namelen);
   if( name==0 ){
     fprintf(stderr,"Can't allocate space for a filename.\n");
     exit(1);
   }
-  strcpy(name,lemp->filename);
+  strlcpy(name,lemp->filename,namelen);
   cp = strrchr(name,'.');
   if( cp ) *cp = 0;
-  strcat(name,suffix);
+  strlcat(name,suffix,namelen);
   return name;
 }
 
@@@@ -2904,7 +2913,7 @@@@ struct lemon *lemp;
     while( cfp ){
       char buf[20];
       if( cfp->dot==cfp->rp->nrhs ){
-        sprintf(buf,"(%d)",cfp->rp->index);
+        snprintf(buf,sizeof buf,"(%d)",cfp->rp->index);
         fprintf(fp,"    %5s ",buf);
       }else{
         fprintf(fp,"          ");
@@@@ -2959,6 +2968,7 @@@@ int modemask;
 {
   char *pathlist;
   char *path,*cp;
+  size_t pathsz;
   char c;
 
 #ifdef __WIN32__
@@@@ -2969,21 +2979,21 @@@@ int modemask;
   if( cp ){
     c = *cp;
     *cp = 0;
-    path = (char *)malloc( strlen(argv0) + strlen(name) + 2 );
-    if( path ) sprintf(path,"%s/%s",argv0,name);
+    path = (char *)malloc( (pathsz = strlen(argv0) + strlen(name) + 2) );
+    if( path ) snprintf(path,pathsz,"%s/%s",argv0,name);
     *cp = c;
   }else{
     extern char *getenv();
     pathlist = getenv("PATH");
     if( pathlist==0 ) pathlist = ".:/bin:/usr/bin";
-    path = (char *)malloc( strlen(pathlist)+strlen(name)+2 );
+    path = (char *)malloc( (pathsz = strlen(pathlist)+strlen(name)+2) );
     if( path!=0 ){
       while( *pathlist ){
         cp = strchr(pathlist,':');
         if( cp==0 ) cp = &pathlist[strlen(pathlist)];
         c = *cp;
         *cp = 0;
-        sprintf(path,"%s/%s",pathlist,name);
+        snprintf(path,pathsz,"%s/%s",pathlist,name);
         *cp = c;
         if( c==0 ) pathlist = "";
         else pathlist = &cp[1];
@@@@ -3063,14 +3073,16 @@@@ struct lemon *lemp;
 
   cp = strrchr(lemp->filename,'.');
   if( cp ){
-    sprintf(buf,"%.*s.lt",(int)(cp-lemp->filename),lemp->filename);
+    snprintf(buf,sizeof buf,"%.*s.lt",(int)(cp-lemp->filename),lemp->filename);
   }else{
-    sprintf(buf,"%s.lt",lemp->filename);
+    snprintf(buf,sizeof buf,"%s.lt",lemp->filename);
   }
   if( access(buf,004)==0 ){
     tpltname = buf;
   }else if( access(templatename,004)==0 ){
     tpltname = templatename;
+  }else if( access(LEMPAR_PATH,004)==0 ){
+    tpltname = LEMPAR_PATH;
   }else{
     tpltname = pathsearch(lemp->argv0,templatename,0);
   }
@@@@ -3082,7 +3094,7 @@@@ struct lemon *lemp;
   }
   in = fopen(tpltname,"rb");
   if( in==0 ){
-    fprintf(stderr,"Can't open the template file \"%s\".\n",templatename);
+    fprintf(stderr,"Can't open the template file \"%s\".\n",tpltname);
     lemp->errorcnt++;
     return 0;
   }
@@@@ -3225,9 +3237,9 @@@@ PRIVATE char *append_str(char *zText, in
   while( n-- > 0 ){
     c = *(zText++);
     if( c=='%' && n>0 && zText[0]=='d' ){
-      sprintf(zInt, "%d", p1);
+      snprintf(zInt, sizeof (zInt), "%d", p1);
       p1 = p2;
-      strcpy(&z[used], zInt);
+      strlcpy(&z[used], zInt, alloced - used);
       used += strlen(&z[used]);
       zText++;
       n--;
@@@@ -3442,12 +3454,11 @@@@ int mhflag;                 /* True if g
     }
     if( types[hash]==0 ){
       sp->dtnum = hash + 1;
-      types[hash] = (char*)malloc( strlen(stddt)+1 );
+      types[hash] = strdup(stddt);
       if( types[hash]==0 ){
         fprintf(stderr,"Out of memory.\n");
         exit(1);
       }
-      strcpy(types[hash],stddt);
     }
   }
 
@@@@ -3820,7 +3831,7 @@@@ int mhflag;     /* Output in makeheaders
   /* Generate a table containing the symbolic name of every symbol
   */
   for(i=0; i<lemp->nsymbol; i++){
-    sprintf(line,"\"%s\",",lemp->symbols[i]->name);
+    snprintf(line,sizeof line,"\"%s\",",lemp->symbols[i]->name);
     fprintf(out,"  %-15s",line);
     if( (i&3)==3 ){ fprintf(out,"\n"); lineno++; }
   }
@@@@ -3976,7 +3987,7 @@@@ struct lemon *lemp;
   in = file_open(lemp,".h","rb");
   if( in ){
     for(i=1; i<lemp->nterminal && fgets(line,LINESIZE,in); i++){
-      sprintf(pattern,"#define %s%-30s %2d\n",prefix,lemp->symbols[i]->name,i);
+      snprintf(pattern,sizeof pattern,"#define %s%-30s %2d\n",prefix,lemp->symbols[i]->name,i);
       if( strcmp(line,pattern) ) break;
     }
     fclose(in);
@@@@ -4209,8 +4220,7 @@@@ char *y;
 
   if( y==0 ) return 0;
   z = Strsafe_find(y);
-  if( z==0 && (z=malloc( strlen(y)+1 ))!=0 ){
-    strcpy(z,y);
+  if( z==0 && (z=strdup(y))!=0 ){
     Strsafe_insert(z);
   }
   MemoryCheck(z);
@


1.2
log
@while here, nuke all uses of strcpy() and strcat() as well
@
text
@d1 3
a3 11
$MirOS: ports/databases/sqlite/patches/patch-tool_lemon_c,v 1.1 2008/02/28 18:27:21 tg Exp $

	02-lemon-snprintf.patch
	From Debian sqlite3_3.4.2-2.diff.gz

	The LEMPAR_PATH, strcpy/strcat → strlcpy/strlcat changes,
	one sprintf → snprintf change, and fixes to two others,
	are by tg@@mirbsd.

--- tool/lemon.c.orig	Thu Mar 29 20:12:07 2007
+++ tool/lemon.c	Thu Feb 28 18:33:49 2008
d10 1
a10 1
+__RCSID("$MirOS$");
d19 1
a19 1
@@@@ -1324,15 +1332,15 @@@@ void ErrorMsg(const char *filename, int 
d38 1
a38 1
@@@@ -1378,12 +1386,11 @@@@ static void handle_D_option(char *z){
d52 10
a61 1
@@@@ -2673,16 +2680,18 @@@@ char *suffix;
d83 1
a83 1
@@@@ -2865,7 +2874,7 @@@@ struct lemon *lemp;
d92 1
a92 1
@@@@ -2899,6 +2908,7 @@@@ int modemask;
a97 1
   extern int access();
d99 2
a100 1
@@@@ -2910,21 +2920,21 @@@@ int modemask;
d126 1
a126 1
@@@@ -3004,14 +3014,16 @@@@ struct lemon *lemp;
d145 1
a145 1
@@@@ -3023,7 +3035,7 @@@@ struct lemon *lemp;
d154 1
a154 1
@@@@ -3169,9 +3181,9 @@@@ PRIVATE char *append_str(char *zText, in
d166 1
a166 1
@@@@ -3382,12 +3394,11 @@@@ int mhflag;                 /* True if g
d180 1
a180 1
@@@@ -3737,7 +3748,7 @@@@ int mhflag;     /* Output in makeheaders
d189 1
a189 1
@@@@ -3884,7 +3895,7 @@@@ struct lemon *lemp;
d198 1
a198 1
@@@@ -4117,8 +4128,7 @@@@ char *y;
@


1.1
log
@• by request of Rob “rjek” Kendrick, add a lemon MULTI_PACKAGE, like Debian
• apply Debian patches
• fix mistakes in Debian patches (sent upstream)
• bump DASH_VER
@
text
@d1 1
a1 1
$MirOS$
d6 3
a8 1
	Hunk #1, #4, fixes to #5, last part of #6, Hunk #7 by tg@@mirbsd
d11 1
a11 1
+++ tool/lemon.c	Thu Feb 28 18:08:38 2008
d46 37
a82 1
@@@@ -2865,7 +2873,7 @@@@ struct lemon *lemp;
d91 1
a91 1
@@@@ -2899,6 +2907,7 @@@@ int modemask;
d99 1
a99 1
@@@@ -2910,21 +2919,21 @@@@ int modemask;
d125 1
a125 1
@@@@ -3004,14 +3013,16 @@@@ struct lemon *lemp;
d144 1
a144 1
@@@@ -3023,7 +3034,7 @@@@ struct lemon *lemp;
d153 1
a153 1
@@@@ -3169,7 +3180,7 @@@@ PRIVATE char *append_str(char *zText, in
d160 2
a161 1
       strcpy(&z[used], zInt);
d163 16
d197 10
@

