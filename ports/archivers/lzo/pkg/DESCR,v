head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2005.12.15.13.01.19;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043A1692C5AB740B9;

1.1
date	2005.03.18.15.42.41;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.18.15.42.41;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* Update to 2.02
* libtoolise
@
text
@LZO is a data compression library which is suitable for data
de-/compression in real-time. This means it favours speed over
compression ratio.

LZO is written in ANSI C. Both the source code and the compressed
data format are designed to be portable across platforms.

LZO implements a number of algorithms with the following features:

+ Decompression is simple and *very* fast.
+ Requires no memory for decompression.
+ Compression is pretty fast.
+ Requires 64 kB of memory for compression.
+ Allows you to dial up extra compression at a speed cost in the
  compressor. The speed of the decompressor is not reduced.
+ Includes compression levels for generating pre-compressed data
  which achieve a quite competitive compression ratio.
+ There is also a compression level which needs only 8 kB for
  compression.
+ Algorithm is thread safe.
+ Algorithm is lossless.

LZO supports overlapping compression and in-place decompression.

LZO and the LZO algorithms and implementations are distributed
under the terms of the GNU General Public License (GPL). Special
licenses for commercial and other applications are available by
contacting the author.

LZO is fully compatible with the ILP32, LP64, LLP64, ILP64 and
SILP64 programming models, and reportedly runs on a number of
platforms, freestanding and hosted environments.
@


1.1
log
@Initial revision
@
text
@d5 3
d9 24
a32 12
   + Decompression is simple and *very* fast.
   + Requires no memory for decompression.
   + Compression is pretty fast.
   + Requires 64 kB of memory for compression.
   + Allows you to dial up extra compression at a speed cost in the
     compressor. The speed of the decompressor is not reduced.
   + Includes compression levels for generating pre-compressed data
     which achieve a quite competitive compression ratio.
   + There is also a compression level which needs only 8 kB for
     compression.
   + Algorithm is thread safe.
   + Algorithm is lossless.
@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
