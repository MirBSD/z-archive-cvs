head	1.8;
access;
symbols
	MIRBSD_8_BASE:1.4;
locks; strict;
comment	@# @;


1.8
date	2009.09.12.12.06.24;	author tg;	state Exp;
branches;
next	1.7;
commitid	1004AAB8EC324EE4ED9;

1.7
date	2009.09.12.12.04.43;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004AAB8E6C59BB5BD5;

1.6
date	2008.04.22.18.51.41;	author bsiegert;	state Exp;
branches;
next	1.5;
commitid	100480E33676063DC33;

1.5
date	2006.12.21.20.57.53;	author tg;	state Exp;
branches;
next	1.4;
commitid	100458AF52356B49D9B;

1.4
date	2005.11.10.23.36.09;	author tg;	state Exp;
branches;
next	1.3;
commitid	13494373d9587faf;

1.3
date	2005.06.24.15.54.26;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	6fc442bc2be3000d;

1.2
date	2005.06.23.16.53.49;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	301442bae92842ca;

1.1
date	2005.03.18.15.47.19;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.18.15.47.19;	author tg;	state Exp;
branches;
next	;


desc
@@


1.8
log
@make this actually find static libraries, even if (shared||static) was
asked, but not (shared but not static)

 e2p: e2p.2.3
-ebml: Missing library
+ebml: ebml.a
 edit: edit.7.0
@
text
@# $MirOS: ports/infrastructure/scripts/resolve-lib,v 1.7 2009/09/12 12:04:43 tg Exp $
#-
# Copyright (c) 2009
#	Thorsten Glaser <tg@@mirbsd.org>
# Rewrite of code by Marc Espie, Thorsten Glaser and Benny Siegert
#
# Provided that these terms and disclaimer and all copyright notices
# are retained or reproduced in an accompanying document, permission
# is granted to deal in this work without restriction, including un-
# limited rights to use, publicly perform, distribute, sell, modify,
# merge, give away, or sublicence.
#
# This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
# the utmost extent permitted by applicable law, neither express nor
# implied; without malicious intent or gross negligence. In no event
# may a licensor, author or contributor be held liable for indirect,
# direct, other damage, loss, or other issues arising in any way out
# of dealing in the work, even if advised of the possibility of such
# damage or existence of a defect, except proven that it results out
# of said person's immediate fault when using the work as intended.

noshared=0
libtype=bsd
sharedonly=0
strict=0
reqmajor=0
reqminor=0
bestmajor=0
bestminor=0
found_libtool=0
found_shared=0
found_goodshared=0
found_unshared=0

while [[ $1 = -* ]]; do
	case $1 {
	(-noshared)
		noshared=1
		;;
	(-dylib)
		libtype=dylib
		;;
	(-gnulib)
		libtype=gnu
		;;
	(*)
		break
		;;
	}
	shift
done

libname=${1%%*(.)}

if [[ $libname = *.a ]]; then
	libname=${libname%.a}
	noshared=1
else
	if [[ $libname = *.?(=)+([0-9]).+([0-9]) ]]; then
		:
	elif [[ $libname = *.?(=)+([0-9]) ]]; then
		libname=$libname.0
	fi
	if [[ $libname = *.?(=)+([0-9]).+([0-9]) ]]; then
		reqminor=${libname##*.}
		libname=${libname%.$reqminor}
		reqmajor=${libname##*.}
		libname=${libname%.$reqmajor}
		if [[ $reqmajor = =* ]]; then
			reqmajor=${reqmajor#=}
			strict=1
		fi
	fi
	if [[ $libname = *.so ]]; then
		libname=${libname%.so}
		sharedonly=1
	fi
fi

while read line; do
	[[ $line = lib$libname.* ]] || continue
	rest=${line#lib$libname.}
	if [[ $rest = la ]]; then
		found_libtool=1
		continue
	fi
	(( sharedonly )) || if [[ $rest = a ]]; then
		found_unshared=1
	fi
	if (( !noshared )); then
		case $libtype {
		(dylib)
			[[ $rest = +([0-9])*(.+([0-9])).dylib ]] || continue
			major=${rest%%.*}
			minor=${rest#$major.}
			if [[ $minor = [0-9]* ]]; then
				minor=${minor%%.*}
			else
				minor=0
			fi
			;;
		(gnu)
			[[ $rest = so.+([0-9])?(.+([0-9])?(.*)) ]] || continue
			rest=${rest#so.}
			if [[ $rest = +([0-9]) ]]; then
				major=$rest
				minor=0
			else
				major=${rest%%.*}
				minor=${rest#$major.}
				minor=${minor%%.*}
			fi
			;;
		(bsd)
			[[ $rest = so.+([0-9]).+([0-9]) ]] || continue
			rest=${rest#so.}
			major=${rest%%.*}
			minor=${rest#$major.}
			;;
		}
		found_shared=1
		if (( strict )); then
			if (( major > reqmajor )); then
				print Error: strict library too high
				exit 0
			fi
			(( major < reqmajor )) && continue
			(( minor < reqminor )) && continue
			found_goodshared=1
			bestmajor=$major
			(( minor >= bestminor )) && bestminor=$minor
		else
			(( major < reqmajor || \
			    (major == reqmajor && minor < reqminor) )) && \
			    continue
			found_goodshared=1
			if (( major > bestmajor || \
			    (major == bestmajor && minor > bestminor) )); then
				bestmajor=$major
				bestminor=$minor
			fi
		fi
	fi
done

if (( found_libtool )); then
	print $libname.la
elif (( found_goodshared )); then
	print $libname.$bestmajor.$bestminor
elif (( found_shared )); then
	print Error: bad shared library
elif (( found_unshared )); then
	print $libname.a
else
	print Missing library
fi
@


1.7
log
@replace perl script with something readable
@
text
@d1 1
a1 1
# $MirOS: src/share/misc/licence.template,v 1.28 2008/11/14 15:33:44 tg Rel $
d87 3
a142 4
		continue
	fi
	if (( !sharedonly )) && [[ $rest = a ]]; then
		found_unshared=1
@


1.6
log
@Fix a long-standing corner case in dylib (and gnulib!) support. libfoo.so.1
and libfoo.1.dylib (i.e. the one-component names) as well as
libfoo.1.2.dylib (two components) are now supported.

some regex help by Tonnerre
@
text
@d1 5
a5 3
#!/usr/bin/perl
# $MirOS: ports/infrastructure/scripts/resolve-lib,v 1.5 2006/12/21 20:57:53 tg Exp $
# $OpenBSD: resolve-lib,v 1.4 2002/11/28 19:20:37 espie Exp $
d7 5
a11 12
# Copyright (c) 2006
#	Thorsten Glaser <tg@@mirbsd.de>
# Copyright (c) 2001
# Marc Espie.  All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Neither the name of OpenBSD nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
d13 36
a48 59
# THIS SOFTWARE IS PROVIDED BY ITS AUTHOR AND THE OpenBSD project ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

use strict;

my $noshared;
my $dylib;
my $gnulib;
my $sharedonly;
my $strict;
my $reqmajor;
my $reqminor;

# Grab arguments
$_=shift;
if ($_ eq '-noshared') {
	$noshared = 1;
	$_ = shift;
} elsif ($_ eq '-dylib') {
	$dylib = 1;
	$_ = shift;
} elsif ($_ eq '-gnulib') {
	$gnulib = 1;
	$_ = shift;
}

s/\.$//;
# Parse spec
if (m/\.a$/) {
	$_ = $`;
	$noshared = 1;
} else {
	if (m/\.(\d+)\.(\d+)$/) {
		$reqmajor = $1;
		$reqminor = $2;
		$_ = $`;
	} elsif (m/\.\=(\d+)\.(\d+)$/) {
		$reqmajor = $1;
		$reqminor = $2;
		$_ = $`;
		$strict = 1;
	} elsif (m/\.(\d+)$/) {
		$reqmajor = $1;
		$reqminor = 0;
		$_ = $`;
	} elsif (m/\.\=(\d+)$/) {
		$reqmajor = $1;
		$reqminor = 0;
		$strict = 1;
		$_ = $`;
d50 2
a51 8
	if (m/\.so$/) {
		$_ = $`;
		$sharedonly = 1;
	}
}

{
my $libname=$_;
d53 1
a53 2
my $bestmajor=-1;
my $bestminor=-1;
d55 62
a116 56
my $found_shared;
my $found_goodshared;
my $found_unshared;
my $found_libtool;

while(<>) {
	chomp;
	if (m/^lib\Q$libname\E\.la$/) {
		$found_libtool = 1;
	} elsif (!$noshared) {
		my $tmp;
		my $major;
		my $minor;
		if ($dylib) {
			$tmp = m/^lib\Q$libname\E\.(\d+)\.?(\d+)?.?\d*\.dylib$/;
			$major = $1;
			$minor = $2 || 0;
		} elsif ($gnulib) {
			$tmp = m/^lib\Q$libname\E\.so\.(\d+)\.?(\d+)?/;
			$major = $1;
			$minor = $2 || 0;
		} else {
			$tmp = m/^lib\Q$libname\E\.so\.(\d+)\.(\d+)$/;
			$major = $1;
			$minor = $2;
		}
		if ($tmp) {
			$found_shared = 1;
			if ($strict) {
				if ($major > $reqmajor) {
					print "Error: strict library too high\n";
					exit(0);
				}
				if ($major < $reqmajor) {
					next;
				}
				if ($minor < $reqminor) {
					next;
				}
				$found_goodshared = 1;
				$bestmajor = $major;
				if ($minor >= $bestminor) {
					$bestminor = $minor;
				}
			} else {
				if ($major < $reqmajor || ($major == $reqmajor &&
				    $minor < $reqminor)) {
					next;
				}
				$found_goodshared = 1;
				if ($major > $bestmajor || ($major == $bestmajor &&
				    $minor > $bestminor)) {
					$bestmajor = $major;
					$bestminor = $minor;
				}
			}
d118 40
a157 18
	} elsif (!$sharedonly && m/^lib\Q$libname\E\.a$/) {
		$found_unshared = 1;
	}
}

if ($found_libtool) {
	print "$libname.la\n";
} elsif ($found_goodshared) {
	print "$libname.$bestmajor.$bestminor\n";
} elsif ($found_shared) {
	print "Error: bad shared library\n";
} elsif ($found_unshared) {
	print "$libname.a\n";
} else {
	print "Missing library\n";
}

}
@


1.5
log
@initial support for depending on .la files - otherwise, SDL is
not found. (Would be bad for frozen-bubble too. Oops.)

We should, ideally, parse the .la file and output the appropriate
.so or .a (or .dylib) file with version numbers, for better checking,
depending on $sharedonly and friends. And do it again in case we
found a .la but its .so is too old.
@
text
@d2 1
a2 1
# $MirOS: ports/infrastructure/scripts/resolve-lib,v 1.4 2005/11/10 23:36:09 tg Exp $
d104 1
a104 1
			$tmp = m/^lib\Q$libname\E\.(\d+)\.(\d+).\d+.dylib$/;
d106 1
a106 1
			$minor = $2;
d108 1
a108 3
			# XXX check for (\.\d+)*$ but that doesn't work
			# XXX what about .so.1 (let major=0 then)?
			$tmp = m/^lib\Q$libname\E\.so\.(\d+)\.(\d+)/;
d110 1
a110 1
			$minor = $2;
@


1.4
log
@hack in -gnulib support for resolve-lib, becoming necessary
with the recent changes to libtool

bsiegert@@ please look at the two XXX in there, I don't speak
perl well enough to fix that
@
text
@d2 1
a2 1
# $MirOS$
d5 2
d93 1
d97 3
a99 1
	if (!$noshared) {
d154 3
a156 1
if ($found_goodshared) {
@


1.3
log
@Unbreak library resolving on Darwin, wich was broken by the earlier commit.
It _should_ work now, I hope.
@
text
@d2 1
d30 3
a32 2
my $noshared; 
my $dylib; 
d46 3
d98 1
a98 1
		if($dylib) {
d102 6
@


1.2
log
@Add proper support for resolving libspecs on Darwin. I had to edit perl code,
at least I get some beer to help me forget about it.
@
text
@d91 2
d95 2
d99 2
a103 2
			my $major = $1;
			my $minor = $2;
@


1.1
log
@Initial revision
@
text
@d30 1
d41 3
d89 4
a92 20
	if (!$noshared && m/^lib\Q$libname\E\.so\.(\d+)\.(\d+)$/) {
		$found_shared = 1;
		my $major = $1;
		my $minor = $2;
		if ($strict) {
			if ($major > $reqmajor) {
				print "Error: strict library too high\n";
				exit(0);
			}
			if ($major < $reqmajor) {
				next;
			}
			if ($minor < $reqminor) {
				next;
			}
			$found_goodshared = 1;
			$bestmajor = $major;
			if ($minor >= $bestminor) {
				$bestminor = $minor;
			}
d94 33
a126 9
			if ($major < $reqmajor || ($major == $reqmajor &&
			    $minor < $reqminor)) {
				next;
		    	}
			$found_goodshared = 1;
			if ($major > $bestmajor || ($major == $bestmajor &&
			    $minor > $bestminor)) {
			    	$bestmajor = $major;
				$bestminor = $minor;
@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
