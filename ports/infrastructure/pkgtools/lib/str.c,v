head	1.14;
access;
symbols
	bsiegert-cfgfile_BASE:1.13
	bsiegert-cfgfile:1.13.0.2
	MIRBSD_8_BASE:1.4;
locks; strict;
comment	@ * @;


1.14
date	2010.03.09.19.37.49;	author bsiegert;	state Exp;
branches;
next	1.13;
commitid	1004B96A38112487EA9;

1.13
date	2009.11.29.13.42.45;	author bsiegert;	state Exp;
branches
	1.13.2.1;
next	1.12;
commitid	1004B127A394BB4E7F1;

1.12
date	2009.11.15.15.53.33;	author bsiegert;	state Exp;
branches;
next	1.11;
commitid	1004B00240555455B4E;

1.11
date	2008.03.09.17.22.57;	author tg;	state Exp;
branches;
next	1.10;
commitid	10047D41CAA7E715397;

1.10
date	2007.05.02.21.24.14;	author bsiegert;	state Exp;
branches;
next	1.9;
commitid	1004639017279101038;

1.9
date	2006.11.19.22.34.07;	author tg;	state Exp;
branches;
next	1.8;
commitid	1004560DBF46435018A;

1.8
date	2006.11.06.15.59.35;	author bsiegert;	state Exp;
branches;
next	1.7;
commitid	100454F5B251C19D3C0;

1.7
date	2006.11.03.20.14.16;	author bsiegert;	state Exp;
branches;
next	1.6;
commitid	100454BA2B865B51D20;

1.6
date	2006.10.05.15.11.42;	author bsiegert;	state Exp;
branches;
next	1.5;
commitid	10045251FCC2071AF61;

1.5
date	2005.12.29.22.40.38;	author bsiegert;	state Exp;
branches;
next	1.4;
commitid	10043B4648F646AE6C1;

1.4
date	2005.11.15.19.33.59;	author tg;	state Exp;
branches;
next	1.3;
commitid	7927437a38332782;

1.3
date	2005.08.08.19.25.18;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	4e5c42f7b16fbd25;

1.2
date	2005.06.29.17.20.17;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	1b2442c2d7478718;

1.1
date	2005.03.18.15.47.16;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.13.2.1
date	2010.02.27.11.11.21;	author bsiegert;	state Exp;
branches;
next	1.13.2.2;
commitid	1004B88FDC72173C0CB;

1.13.2.2
date	2010.02.27.12.11.49;	author bsiegert;	state Exp;
branches;
next	1.13.2.3;
commitid	1004B890C1C3E49A8B7;

1.13.2.3
date	2010.02.27.16.20.19;	author bsiegert;	state Exp;
branches;
next	1.13.2.4;
commitid	1004B8945DC0802C02F;

1.13.2.4
date	2010.03.04.18.03.39;	author bsiegert;	state Exp;
branches;
next	1.13.2.5;
commitid	1004B8FF5740BB7941D;

1.13.2.5
date	2010.05.31.20.25.20;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004C041AC66F098A17;

1.1.7.1
date	2005.03.18.15.47.16;	author tg;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Make deweycmp() public by removing "static", export the corresponding enum
in lib.h
@
text
@/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13 2009/11/29 13:42:45 bsiegert Exp $ */
/*	$OpenBSD: str.c,v 1.11 2003/07/04 17:31:19 avsm Exp $	*/

/*
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 18 July 1993
 *
 * Miscellaneous string utilities.
 */

#include <err.h>
#include <fnmatch.h>
#include "lib.h"

__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13 2009/11/29 13:42:45 bsiegert Exp $");

/* Convert a filename (which can be relative to the current directory) to
 * an absolute one. Returns a pointer to a static internal buffer.
 */
char *
toabs(const char *filename, const char *cwd)
{
	static char bname[FILENAME_MAX];

	memset(bname, 0, sizeof(bname));
	if (filename[0] == '/')
		strlcpy(bname, filename, sizeof(bname));
	else
		(void) snprintf(bname, sizeof(bname), "%s/%s", cwd, filename);

	return bname;
}

char *
strconcat(const char *s1, const char *s2)
{
    static char tmp[FILENAME_MAX];

    strlcpy(tmp, s1 ? s1 : s2, sizeof(tmp));
    if (s1 && s2)
	strlcat(tmp, s2, sizeof(tmp));
    return tmp;
}

/* Get a string parameter as a file spec or as a "contents follow -" spec */
char *
get_dash_string(char **str)
{
    char *s = *str;

    if (*s == '-')
	*str = copy_string(s + 1);
    else
	*str = fileGetContents(s);
    return *str;
}

/* Rather Obvious */
char *
copy_string(const char *str)
{
    char *ret;

    if (!str)
	ret = NULL;
    else {
	ret = strdup(str);
    }
    return ret;
}

/* Return true if 'str' ends in suffix 'suff' */
bool
suffix(char *str, char *suff)
{
    char *idx;
    bool ret = false;

    idx = strrchr(str, '.');
    if (idx && !strcmp(idx + 1, suff))
	ret = true;
    return ret;
}

/* Assuming str has a suffix, brutally murder it! */
void
nuke_suffix(char *str)
{
    char *idx;

    idx = strrchr(str, '.');
    if (idx)
	*idx = '\0';  /* Yow!  Don't try this on a const! */
}

/* Find the version number in a package name. Use this instead of
 * strrchr(name, '-').
 */
char *
find_version(const char *name)
{
    char *idx;

    if (!name)
	return NULL;
    for (idx = strchr(name + 1, '-'); idx && *idx && !isdigit(idx[1])
		&& idx[1] != '<' && idx[1] != '>'  && idx[1] != '*';
		idx = strchr(idx + 1, '-'));

    return idx;
}

/* Remove the version number from a package name. Optionally add a
 * "-*" suffix at the end.
 */
char *
nuke_version(char *name, bool wildcard)
{
    char *idx, *ret;

    if (!name)
	return NULL;

    if ((idx = find_version(name)))
	*idx = '\0';
    if (asprintf(&ret, wildcard ? "%s-[0-9]*" : "%s", name) == -1) {
	printf("nuke_version: Could not allocate buffer\n");
	return NULL;
    }
    if (idx)
	*idx = '-';
    return ret;
}

/* Find the flavour in a package name.
 */
char *
find_flavour(const char *name)
{
    char *idx;

    if (!name)
	return NULL;
    for (idx = strchr(name + 1, '-'); idx && *idx && !isalpha(idx[1])
		&& idx[1] != '!'; idx = strchr(idx + 1, '-'));

    return idx;
}

/* Lowercase a whole string */
void
str_lowercase(char *str)
{
    while (*str) {
	*str = tolower(*str);
	++str;
    }
}

/* match flavour part of a package against a flavour pattern
 * used by multiversion_match below
 */
static int
flavourcmp(char *pkg_flavour, char *pattern)
{
	char tmp[FILENAME_MAX];
	char *token, *cp;		/* outer strsep loop */
	char *pkg_token, *pkg_match;	/* inner strsep loop */
	bool may_not_match, did_match = false;

	if (!pattern)
		return 1;
	if (pkg_flavour)
		pkg_flavour++; /* jump over '-' */
	
	token = pattern;
	while ((cp = strsep(&token, ",")) != NULL) {
		may_not_match = (*cp == '!');
		if (may_not_match)
			cp++;
		/* check against all flavours of pkg */
		if (pkg_flavour)
			strlcpy(tmp, pkg_flavour, sizeof(tmp));
		else
			*tmp = '\0';
		pkg_token = pkg_flavour;
		while ((pkg_match = strsep(&pkg_token, "-")) != NULL)
			did_match |= !strcmp(cp, pkg_match);
		if ((may_not_match && did_match) ||
				(!may_not_match && !did_match))
			return 0;
	}
	return 1;
}

/* compare two dewey decimal numbers */
int
deweycmp(char *a, enum deweycmp_ops op, char *b)
{
	int             ad;
	int             bd;
	int             cmp;

	for (;;) {
		if (*a == 0 && *b == 0) {
			cmp = 0;
			break;
		}
		ad = bd = 0;
		for (; *a && *a != '.' && *a != '-'; a++) {
			ad = (ad * 10) + (*a - '0');
		}
		for (; *b && *b != '.' && *b != '-'; b++) {
			bd = (bd * 10) + (*b - '0');
		}
		if ((cmp = ad - bd) != 0) {
			break;
		}
		if (*a == '.') {
			a++;
		}
		if (*b == '.') {
			b++;
		}
		/* we might have a patchlevel in a but not in b or vice versa */
		if (*a == '-') {
			if (*b == '-') {
				a++;
				b++;
			} else if (*b == 0) {
				cmp = 0;
				break;
			}
		} else if ((*a == 0) && (*b == '-')) {
			cmp = 0;
			break;
		}
	}
	return (op == GE) ? cmp >= 0 : (op == GT) ? cmp > 0 : (op == LE) ? cmp <= 0 : cmp < 0;
}

/* perform alternate match on "pkg" against "pattern", */
/* calling pmatch (recursively) to resolve any other patterns */
/* return 1 on match, 0 otherwise */
static int
alternate_match(const char *pattern, const char *pkg)
{
	char           *sep;
	char            buf[FILENAME_MAX];
	char           *last;
	char           *alt;
	char           *cp;
	int             cnt;
	int             found;

	if ((sep = strchr(pattern, '{')) == NULL) {
		errx(1, "alternate_match(): '{' expected in \"%s\"", pattern);
	}
	(void) strncpy(buf, pattern, (size_t)(sep - pattern));
	alt = &buf[sep - pattern];
	last = NULL;
	for (cnt = 0, cp = sep; *cp && last == NULL ; cp++) {
		if (*cp == '{') {
			cnt++;
		} else if (*cp == '}' && --cnt == 0 && last == NULL) {
			last = cp + 1;
		}
	}
	if (cnt != 0) {
		pwarnx("Malformed alternate '%s'", pattern);
		return 1;
	}
	for (found = 0, cp = sep + 1; *sep != '}'; cp = sep + 1) {
		for (cnt = 0, sep = cp; cnt > 0 || (cnt == 0 && *sep != '}' && *sep != ','); sep++) {
			if (*sep == '{') {
				cnt++;
			} else if (*sep == '}') {
				cnt--;
			}
		}
		(void) snprintf(alt, sizeof(buf) - (alt - buf), "%.*s%s", (int) (sep - cp), cp, last);
		if (pmatch(buf, pkg) == 1) {
			found = 1;
		}
	}
	return found;
}

/* perform dewey match on "pkg" against "pattern" */
/* return 1 on match, 0 otherwise */
static int
dewey_match(const char *pattern, const char *pkg)
{
	char           *cp;
	char           *sep;
	char           *ver;
	int             found;
	enum deweycmp_ops op;
	int             n;
	char            name[FILENAME_MAX];

	found = 0;
	if ((sep = strpbrk(pattern, "<>")) == NULL)
		errx(1, "dewey_match(): '<' or '>' expexted in \"%s\"", pattern);

	/* next few lines are static in loops, too (-> cache!) */
	snprintf(name, sizeof(name), "%.*s", (int) (sep - pattern), pattern);
	n = (int)(sep - pattern);
	if (name[strlen(name) - 1] == '-') {
		name[strlen(name) - 1] = '\0';
		n--;
	}
	op = (*sep == '>') ? (*(sep + 1) == '=') ? GE : GT : (*(sep + 1) == '=') ? LE : LT;
	ver = (op == GE || op == LE) ? sep + 2 : sep + 1;
	if ((cp = find_version(pkg)) != NULL) {
		if (strncmp(pkg, name, (size_t)(cp - pkg)) == 0 && n == cp - pkg) {
			if (deweycmp(cp + 1, op, ver)) {
				found = 1;
			}
		}
	}
	return found;
}

/* perform glob match on "pkg" against "pattern" */
/* return 1 on match, 0 otherwise */
static int
glob_match(const char *pattern, const char *pkg)
{
	return fnmatch(pattern, pkg, FNM_PERIOD) == 0;
}

/* perform match on multiple version numbers */
/* return 1 on match, 0 otherwise */
static int
multiversion_match(const char *pattern, const char *pkg)
{
	char *cp, *ver, *token;
	char *flavour = NULL;
	char name[FILENAME_MAX];
	enum deweycmp_ops op;
	int result = 0;

	/* short-cut path if the name does not match */
	ver = find_version(pkg);
	if ((cp = find_version(pattern)) == NULL)
		errx(1, "multiversion_match(): malformed pattern '%s'!", pattern);
	/* name must have the same size, of course */
	if ((ver - pkg) != (cp - pattern))
		return 0;
	if (strncmp(pattern, pkg, (size_t)(ver - pkg)))
		return 0;

	ver++; /* jump over '-' */
	strlcpy(name, cp + 1, sizeof(name));
	token = name;

	/* Does the match have a flavour part? */
	flavour = find_flavour(name);
	if (flavour) {
		*flavour = '\0'; /* limit multiver match to non-flavour part */
		flavour++;
	}

	while ((cp = strsep(&token, ",")) != NULL) {
		op = NONE;
		if (*cp == '>')
			op = (cp[1] == '=') ? GE : GT;
		else if (*cp == '<')
			op = (cp[1] == '=') ? LE : LT;
		if (op == NONE && glob_match(cp, ver)) {
			result = 1;
			break;
		}
		if (op != NONE) {
		       	result = deweycmp(ver, op, (op == GE || op == LE) ?
					cp + 2 : cp + 1);
			if (!result)
				break;
		}
	}
	if (!result || !flavour)
		return result;
	return flavourcmp(find_flavour(find_version(pkg)), flavour);
}

/* perform simple match on "pkg" against "pattern" */
/* return 1 on match, 0 otherwise */
static int
simple_match(const char *pattern, const char *pkg)
{
	return !strcmp(pattern, pkg);
}

/* match pkg against pattern, return 1 if matching, 0 else */
/*
 * Optimize: this is called many times in readdir()-loops, where the
 * pattern doesn't change, so the {,} alternates may be unrolles/cached.
 */
int
pmatch(const char *pattern, const char *pkg)
{
	char *cp;

	if (strchr(pattern, '{')) {
		/* emulate csh-type alternates */
		return alternate_match(pattern, pkg);
	}
	if (strpbrk(pattern, ",!")) {
		/* perform match on multiple versions */
		return multiversion_match(pattern, pkg);
	}
	if ((cp = strpbrk(pattern, "<>"))) {
		if (!strchr(cp, '-')) {
			/* perform relational dewey match on version number */
			return dewey_match(pattern, pkg);
		} else {
			/* special case: one version, one flavour */
			return multiversion_match(pattern, pkg);
		}
			
	}
	if (strpbrk(pattern, "*?[]")) {
		/* glob match */
		return glob_match(pattern, pkg);
	}
	/* no alternate, dewey or glob match -> simple compare */
	return simple_match(pattern, pkg);
}


/* search dir for pattern, writing the found match in buf */
/* let's hope there's only one ... - HF */
/* returns -1 on error, 1 if found, 0 otherwise. */
int
findmatchingname(const char *dir, const char *pattern, matchfn f, char *data, int len)
{
    struct dirent  *dp;
    DIR            *dirp;
    int             found;

    found = 0;
    if ((dirp = opendir(dir)) == NULL) {
	/* pwarnx("can't opendir dir '%s'", dir); */
	return -1;
    }
    while ((dp = readdir(dirp)) != NULL) {
	if (strcmp(dp->d_name, ".") == 0 ||
	    strcmp(dp->d_name, "..") == 0) {
	    continue;
	}
	if (pmatch(pattern, dp->d_name)) {
	    if(f)
		f(dp->d_name, data, len);
	    found=1;
	}
    }
    closedir(dirp);

    return found;
}

/* does the pkgname contain any of the special chars ("{[]?*<>")? */
/* if so, return 1, else 0 */
int
ispkgpattern(const char *pkg)
{
    return strpbrk(pkg, "<>[]?*{") != NULL;
}

/* auxiliary function called by findbestmatchingname() */
static int
findbestmatchingname_fn(const char *pkg, char *data, int len)
{
    /* if pkg > data */
    char *s1, *s2;

    s1 = find_version(pkg);
    s2 = find_version(data);
    if (!s1 || !s2)
	return 0;

    if (data[0] == '\0' || deweycmp(++s1, GT, ++s2))
	strlcpy(data, pkg, len);

    return 0;
}

/* find best matching filename, i.e. the pkg with the highest
 * matching(!) version */
/* returns pointer to pkg name (which can be free(3)ed),
 * or NULL if no match is available. */
char *
findbestmatchingname(const char *dir, const char *pattern)
{
	char buf[FILENAME_MAX];

	buf[0]='\0';
	if (findmatchingname(dir, pattern, findbestmatchingname_fn, buf, sizeof(buf)) > 0 && buf[0] != '\0') {
		return strdup(buf);
	}
	return NULL;
}
@


1.13
log
@Replace two occurrences of snprintf without a format string (which is a
potential security problem) by strlcpy.

Found by the clang static analyzer, fix suggested by tg@@
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.12 2009/11/15 15:53:33 bsiegert Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.12 2009/11/15 15:53:33 bsiegert Exp $");
a171 9

enum deweycmp_ops {
	GT,
	GE,
	LT,
	LE,
	NONE
};

d209 1
a209 1
static int
@


1.13.2.1
log
@Introduce a normalize_name() function to replace all the "non-nice" characters
typically found in URLs by _.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13 2009/11/29 13:42:45 bsiegert Exp $ */
d27 1
a27 29
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13 2009/11/29 13:42:45 bsiegert Exp $");

/* "normalize" a URL by replacing all the characters which are "not nice"
 * in a filename by '_' characters.
 */
void
normalize_name(char *filename)
{
	char *cp;

	if (!filename)
		return;

	for (cp = filename; *cp; cp++) {
		switch (*cp) {
			case ':':
			case '/':
			case '.':
			case '~':
			case '$':
			case '%':
			case '@@':
			case '?':
			case '&':
				*cp = '_';
				break;
		}
	}
}
@


1.13.2.2
log
@isalnum(3) exists
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13.2.1 2010/02/27 11:11:21 bsiegert Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13.2.1 2010/02/27 11:11:21 bsiegert Exp $");
d41 13
a53 2
		if (!isalnum(*cp))
			*cp = '_';
@


1.13.2.3
log
@Implement a function to cache the "index.txt" file for remote sources. Also
move some defines to lib.h.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13.2.2 2010/02/27 12:11:49 bsiegert Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13.2.2 2010/02/27 12:11:49 bsiegert Exp $");
a541 13

/* Returns the index cache filename corresponding to a source URL.
 * Returns a pointer to a static internal buffer. */
char *
src_index_name(const char *url)
{
	static char rv[FILENAME_MAX];

	snprintf(rv, sizeof (rv), "%s%s", CACHEDIR, url);
	normalize_name(rv + strlen(CACHEDIR));

	return rv;
}
@


1.13.2.4
log
@Continue on the cfgfile branch:
Introduce a new function findmatchingname_file(), which searches in the cached
index files for a package.
Introduce a function findmatchingname_srcs(), which iterates over all the
sources and returns a list of _all_ matches, minus those sorted out by a
helper function.

Builds fine, but the code is still untested.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13.2.3 2010/02/27 16:20:19 bsiegert Exp $ */
a23 1
#include <errno.h>
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13.2.3 2010/02/27 16:20:19 bsiegert Exp $");
a554 46

int
findmatchingname_file(const char *filename, const char *pattern, matchfn f, char *data, int datalen)
{
	FILE *fp;
	char *line, buf[FILENAME_MAX];
	size_t len;
	int found = 0;

	fp = fopen(filename, "r");
	if (!fp) {
		if (errno == ENOENT)
			warnx("One of the index cache files was not found,"
					"please run 'pkg_add -U'!");
		else
			warn("Error opening an index cache file");
		return -1;
	}

	while ((line = fgetln(fp, &len))) {
		/* don't bother with non-null-terminated strings,
		 * just copy to our own buffer and null-terminate that */
		if (len >= sizeof(buf)) {
			warnx("index cache: line too long!");
			fclose(fp);
			return -1;
		}
		memcpy(buf, line, len);
		buf[len] = '\0';
		if ((len > 0) && buf[len - 1] == '\n')
			buf[--len] = '\0';
		while ((len > 0) && isspace(buf[len - 1]))
			buf[--len] = '\0';
		
		if (pmatch(pattern, buf)) {
			if (f)
				f(buf, data, datalen);
			found = 1;
		}
	}

	if (ferror(fp))
		warn("Error reading an index cache file");
	fclose(fp);
	return found;
}
@


1.13.2.5
log
@add a new function diag(), which is like
	if (Verbose) printf(fmt, ...)
Also add a new module, libspec.c, that is able to parse libspecs like
jpeg.62.0 or tiff.la, etc., and check whether the corresponding library is
present. Not connected to anything yet.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13.2.4 2010/03/04 18:03:39 bsiegert Exp $ */
d28 1
a28 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.13.2.4 2010/03/04 18:03:39 bsiegert Exp $");
a601 15

/* print out a diagnostic string only if Verbose is set. */
int
diag(const char *fmt, ...)
{
	int ret = 0;
	va_list ap;

	va_start(ap, fmt);
	if (Verbose)
		ret = vfprintf(stdout, fmt, ap);
	va_end(ap);
	return ret;
}

@


1.12
log
@Fix an annoying and obscure bug in pkgtools: a dependency on 'luasocket->=2.0.2-0' matched
on 'lua-5.14.0-0' because the package name comparison was broken.

Bug found by tg@@, thanks!

This commit was done within VMWare Fusion 3.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.11 2008/03/09 17:22:57 tg Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.11 2008/03/09 17:22:57 tg Exp $");
d204 1
a204 1
			snprintf(tmp, sizeof(tmp), pkg_flavour);
d376 1
a376 1
	snprintf(name, sizeof(name), cp + 1);
@


1.11
log
@bulk convert FLAVOR to FLAVOUR; nuke unused file; convert to $Mdocdate
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.10 2007/05/02 21:24:14 bsiegert Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.10 2007/05/02 21:24:14 bsiegert Exp $");
d367 5
a375 2
	if ((cp = find_version(pattern)) == NULL)
		errx(1, "multiversion_match(): malformed pattern '%s'!", pattern);
@


1.10
log
@Finally add correct flavor handling to the package matching code in pkgtools,
handled by multiversion_match() and the new flavorcmp() function. This code was
HARD to write because it has two nested strsep() loops. However, I think that I
have fixed all the edge cases.

You can (and you ought to) test the matching code using pkg_info -e, for
example:

pkg_info -e 'SDL-*-!no_x11'
pkg_info -e 'pango->=1.14,<2.0-!foo,!bar'
pkg_info -e 'ghostscript-*-esp'
pkg_info -e 'ghostscript->=7.0-esp,!no_x11'

I think you get the idea (also of the syntax).
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.9 2006/11/19 22:34:07 tg Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.9 2006/11/19 22:34:07 tg Exp $");
d150 1
a150 1
find_flavor(const char *name)
d181 1
a181 1
/* match flavor part of a package against a flavor pattern
d185 1
a185 1
flavorcmp(char *pkg_flavor, char *pattern)
d194 2
a195 2
	if (pkg_flavor)
		pkg_flavor++; /* jump over '-' */
d202 3
a204 3
		/* check against all flavors of pkg */
		if (pkg_flavor)
			snprintf(tmp, sizeof(tmp), pkg_flavor);
d207 1
a207 1
		pkg_token = pkg_flavor;
d360 1
a360 1
	char *flavor = NULL;
d376 5
a380 5
	/* Does the match have a flavor part? */
	flavor = find_flavor(name);
	if (flavor) {
		*flavor = '\0'; /* limit multiver match to non-flavor part */
		flavor++;
d400 1
a400 1
	if (!result || !flavor)
d402 1
a402 1
	return flavorcmp(find_flavor(find_version(pkg)), flavor);
d436 1
a436 1
			/* special case: one version, one flavor */
@


1.9
log
@whitespace at EOL sweep
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.8 2006/11/06 15:59:35 bsiegert Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.8 2006/11/06 15:59:35 bsiegert Exp $");
d119 2
a120 1
		&& idx[1] != '<' && idx[1] != '>'; idx = strchr(idx + 1, '-'));
d147 15
d181 36
d359 3
a361 2
	char			*cp, *ver, *token;
	char			name[FILENAME_MAX];
d363 1
d376 7
d389 10
a398 4
		if (op == NONE && glob_match(cp, ver))
			return 1;
		if (op != NONE && !deweycmp(ver, op, (op == GE || op == LE) ? cp + 2 : cp + 1))
			return 0;
d400 3
a402 1
	return 1;
d421 2
d427 1
a427 1
	if (strchr(pattern, ',')) {
d431 9
a439 3
	if (strpbrk(pattern, "<>")) {
		/* perform relational dewey match on version number */
		return dewey_match(pattern, pkg);
@


1.8
log
@The last commit aborted and fucking CVS ate my log message!
Anyway:

Implement a new pkgspec match type called a multiversion match. It allows
processing dependencies such as
	foo-1.0.*,>=2.2,<2.3
Glob matches (with star) and relational matches (with relop) can be freely
matched. Relationals all have to match, while one of the globs is sufficient,
i.e. the above means foo-1.0.* OR (foo->=2.2 AND foo-<2.3). The last missing
feature from pkg(1), I hope.

Written in the train this morning, which was half an hour late ...
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.7 2006/11/03 20:14:16 bsiegert Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.7 2006/11/03 20:14:16 bsiegert Exp $");
d118 1
a118 1
    for (idx = strchr(name + 1, '-'); idx && *idx && !isdigit(idx[1]) 
d120 1
a120 1
    
d144 1
a144 1
} 
d310 1
a310 1
	
d326 1
a326 1
		else if (*cp == '<') 
@


1.7
log
@Fix an issue where the version comparison code could run into an endless
loop, e.g. when checking an installed tiff-3.7.4-0 against tiff->=3.7.4 as
a pkgspec.

The version matching code needs more work before we can replace parts of
pkg(1) by it.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.6 2006/10/05 15:11:42 bsiegert Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.6 2006/10/05 15:11:42 bsiegert Exp $");
d118 2
a119 1
    for (idx = strchr(name + 1, '-'); idx && *idx && !isdigit(idx[1]); idx = strchr(idx + 1, '-'));
d161 2
a162 1
	LE
d302 34
d356 4
@


1.6
log
@Fix some long-standing bugs w.r.t. package patchlevels:

- introduce find_version() to locate the hyphen the version begins with.
- use it for dewey matches and findbestmatchingname().
- add support for patchlevels to deweycmp().
- update documentation on how to use dewey ops in @@pkgcfl.
- allow same syntax as in dependencies for @@pkgcfl.

The result is that you can do something like
@@pkgcfl subversion-<1.4.0
in your plists. And hey, it works :).
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.5 2005/12/29 22:40:38 bsiegert Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.5 2005/12/29 22:40:38 bsiegert Exp $");
d192 12
a203 3
		if (*a == '-' && *b == '-') {
			a++;
			b++;
@


1.5
log
@BUGFIX: when checking if another version of a package is already installed,
use name-[0-9]*, not name-*, so you don't have this effect: docbook-dsssl
counts as a different version of docbook. Oops.

agreed tg@@
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.4 2005/11/15 19:33:59 tg Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.4 2005/11/15 19:33:59 tg Exp $");
d108 15
d134 1
a134 2
    for (idx = strchr(name + 1, '-'); idx && *idx && !isdigit(idx[1]); idx = strchr(idx + 1, '-'));
    if (idx)
d177 1
a177 1
		for (; *a && *a != '.'; a++) {
d180 1
a180 1
		for (; *b && *b != '.'; b++) {
d192 4
d264 1
a264 1
	/* next three lines are static in loops, too (-> cache!) */
d266 5
d273 1
a273 2
	n = (int)(sep - pattern);
	if ((cp = strrchr(pkg, '-')) != NULL) {
d370 4
a373 2
    s1=strrchr(pkg, '-')+1;
    s2=strrchr(data, '-')+1;
d375 1
a375 1
    if(data[0] == '\0' || deweycmp(s1, GT, s2))
@


1.4
log
@crude U+0060 removal
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.3 2005/08/08 19:25:18 bsiegert Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/str.c,v 1.3 2005/08/08 19:25:18 bsiegert Exp $");
d122 1
a122 1
    if (asprintf(&ret, wildcard ? "%s-*" : "%s", name) == -1) {
@


1.3
log
@Fix the annoying bug that broke pkg_add when the second character of the
pkgname is a digit.

Fixes: p5-*, w3m :)
@
text
@d1 1
a1 1
/**	$MirOS$ */
d27 1
a27 1
__RCSID("$MirOS$");
d210 1
a210 1
		pwarnx("Malformed alternate `%s'", pattern);
@


1.2
log
@IMPORTANT BUGFIX: Overhaul version number handling to take into account the
fact that version numbers might have hyphens in them. Before, a package
"gs-fonts-std-8.11-0" conflicted only with "gs-fonts-std-8.11-*", which is
not what you want. Not it is "gs-fonts-std-*".

Thus, the policy is: version numbers always begin with a digit, i.e. the
first occurrence of "-[0-9]" in the pkgname is the version.

bug report by and agreed tg@@
@
text
@d119 1
a119 1
    for (idx = name; idx && *idx && !isdigit(idx[1]); idx = strchr(idx + 1, '-'));
@


1.1
log
@Initial revision
@
text
@d108 23
@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
