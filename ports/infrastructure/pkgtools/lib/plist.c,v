head	1.20;
access;
symbols
	bsiegert-cfgfile_BASE:1.18
	bsiegert-cfgfile:1.18.0.2
	MIRBSD_8_BASE:1.5;
locks; strict;
comment	@ * @;


1.20
date	2010.09.02.09.42.50;	author tg;	state Exp;
branches;
next	1.19;
commitid	1004C7F71891FEBACB6;

1.19
date	2010.03.15.17.25.31;	author tg;	state Exp;
branches;
next	1.18;
commitid	1004B9E6D8253E199E3;

1.18
date	2009.12.08.18.49.17;	author bsiegert;	state Exp;
branches
	1.18.2.1;
next	1.17;
commitid	1004B1E9F9D3BD821A1;

1.17
date	2009.11.29.13.56.37;	author bsiegert;	state Exp;
branches;
next	1.16;
commitid	1004B127D6A3EEA1A31;

1.16
date	2009.10.20.19.32.50;	author bsiegert;	state Exp;
branches;
next	1.15;
commitid	1004ADE102745DDB74A;

1.15
date	2008.11.02.19.57.31;	author tg;	state Exp;
branches;
next	1.14;
commitid	100490E06234C7ACE08;

1.14
date	2008.11.02.18.56.30;	author tg;	state Exp;
branches;
next	1.13;
commitid	100490DF7B930A3A3BD;

1.13
date	2008.11.02.18.19.53;	author tg;	state Exp;
branches;
next	1.12;
commitid	100490DEF535C71F010;

1.12
date	2008.10.12.14.33.10;	author tg;	state Exp;
branches;
next	1.11;
commitid	10048F20AB866AE170E;

1.11
date	2008.03.27.21.00.38;	author bsiegert;	state Exp;
branches;
next	1.10;
commitid	10047EC0AAA48CF9F34;

1.10
date	2007.05.28.14.12.45;	author tg;	state Exp;
branches;
next	1.9;
commitid	100465AE364335DBB54;

1.9
date	2007.03.30.23.20.11;	author bsiegert;	state Exp;
branches;
next	1.8;
commitid	100460D99284E3410CC;

1.8
date	2007.01.19.23.11.20;	author bsiegert;	state Exp;
branches;
next	1.7;
commitid	10045B14FCB796AA24B;

1.7
date	2006.11.19.22.34.07;	author tg;	state Exp;
branches;
next	1.6;
commitid	1004560DBF46435018A;

1.6
date	2006.09.24.20.40.48;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004516ED663E6E662E;

1.5
date	2005.11.23.17.41.06;	author bsiegert;	state Exp;
branches;
next	1.4;
commitid	1eb54384a9645d3c;

1.4
date	2005.11.19.02.05.29;	author bsiegert;	state Exp;
branches;
next	1.3;
commitid	6633437e87d6af88;

1.3
date	2005.11.15.19.33.59;	author tg;	state Exp;
branches;
next	1.2;
commitid	7927437a38332782;

1.2
date	2005.07.18.20.02.00;	author bsiegert;	state Exp;
branches;
next	1.1;
commitid	73a742dc0aa2783a;

1.1
date	2005.03.18.15.47.16;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.18.2.1
date	2010.06.12.20.27.12;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004C13ED937750A323;

1.1.7.1
date	2005.03.18.15.47.16;	author tg;	state Exp;
branches;
next	;


desc
@@


1.20
log
@replace all remaining calls to system(…) with sxsystem(false, …)
and switch piperead() to use mksh, to fulfil our guarantees
@
text
@/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.19 2010/03/15 17:25:31 tg Exp $ */
/*	$OpenBSD: plist.c,v 1.17 2003/08/21 20:24:57 espie Exp $	*/

/*
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 18 July 1993
 *
 * General packing list routines.
 */

#include "lib.h"
#include <glob.h>
#include <err.h>
#include <md5.h>
#include "rcdb.h"

__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.19 2010/03/15 17:25:31 tg Exp $");

/* this struct defines a plist command type */
typedef struct cmd_t {
	const char	*c_s;		/* string to recognise */
	pl_ent_t	c_type;		/* type of command */
	int		c_argc;		/* # of arguments */
} cmd_t;

/* commands to recognise */
static cmd_t	cmdv[] = {
	{	"cwd",		PLIST_CWD,		1	},
	{	"src",		PLIST_SRC,		1	},
	{	"cd",		PLIST_CWD,		1	},
	{	"exec",		PLIST_CMD,		1	},
	{	"unexec",	PLIST_UNEXEC,		1	},
	{	"mode",		PLIST_CHMOD,		1	},
	{	"owner",	PLIST_CHOWN,		1	},
	{	"group",	PLIST_CHGRP,		1	},
	{	"comment",	PLIST_COMMENT,		1	},
	{	"ignore",	PLIST_IGNORE,		0	},
	{	"name",		PLIST_NAME,		1	},
	{	"display",	PLIST_DISPLAY,		1	},
	{	"pkgdep",	PLIST_PKGDEP,		1	},
	{	"pkgcfl",	PLIST_PKGCFL,		1	},
	{	"mtree",	PLIST_MTREE,		1	},
	{	"dirrm",	PLIST_DIR_RM,		1	},
	{	"option",	PLIST_OPTION,		1	},
	{	"newdepend",	PLIST_NEWDEP,		1	},
	{	"libdepend",	PLIST_LIBDEP,		1	},
	{	"extra",	PLIST_EXTRA,		1	},
	{	"extraunexec",	PLIST_EXTRAUNEXEC,	1	},
	{	"info",		PLIST_INFO,		1	},
	{	"man",		PLIST_MAN,		1	},
	{	"sample",	PLIST_SAMPLE,		1	},
	{	"lib",		PLIST_LIB,		1	},
	{	"shell",	PLIST_SHELL,		1	},
	{	"endfake",	PLIST_ENDFAKE,		0	},
	{	"ldcache",	PLIST_LDCACHE,		1	},
	{	"emul",		PLIST_EMUL,		1	},
	{	"nolib",	PLIST_NOLIB,		1	},
	{	NULL,		-1,			0	}
};

/* Add an item to the end of a packing list */
void
add_plist(package_t *p, pl_ent_t type, const char *arg)
{
	plist_t *tmp;

	tmp = new_plist_entry();
	tmp->name = copy_string(arg);
	tmp->type = type;
	if (!p->head) {
		p->head = p->tail = tmp;
	} else {
		tmp->prev = p->tail;
		p->tail->next = tmp;
		p->tail = tmp;
	}
}

/* add an item to the start of a packing list */
void
add_plist_top(package_t *p, pl_ent_t type, const char *arg)
{
	plist_t *tmp;

	tmp = new_plist_entry();
	tmp->name = copy_string(arg);
	tmp->type = type;
	if (!p->head) {
		p->head = p->tail = tmp;
	} else {
		tmp->next = p->head;
		p->head->prev = tmp;
		p->head = tmp;
	}
}

/* add an item after a certain entry of a packing list */
void add_plist_at(package_t *p, plist_t *after, pl_ent_t type, const char *arg)
{
	plist_t *tmp;

	tmp = new_plist_entry();
	tmp->name = copy_string(arg);
	tmp->type = type;
	tmp->prev = after;
	tmp->next = after->next;
	after->next = tmp;
	if (tmp->next)
		tmp->next->prev = tmp;
	if (p->tail == after)
		p->tail = tmp;
}

/* glob for files and add them to the packing list; if nodups is set,
 * the file is only added if it is not already in the plist as a file
 * entry.
 */
void
add_plist_glob(package_t *pkg, plist_t *after, const char *dir, const char *pattern,
    bool nodups)
{
	glob_t pglob;
	int fd;
	int i;

	memset(&pglob, 0, sizeof(pglob));
	fd = open(".", O_RDONLY, 0);
	chdir(dir);
	glob(pattern, 0, NULL, &pglob);
	fchdir(fd);
	close(fd);
	for (i = 0; i < pglob.gl_pathc; i++) {
		if (!nodups || !find_plist(pkg, PLIST_FILE, pglob.gl_pathv[i]))
			add_plist_at(pkg, after, PLIST_FILE,
			    strdup(pglob.gl_pathv[i]));
	}
	globfree(&pglob);

}

/* Return the last (most recent) entry in a packing list */
plist_t *
last_plist(package_t *p)
{
	return p->tail;
}

/* Mark all items in a packing list to prevent iteration over them */
void
mark_plist(package_t *pkg)
{
	plist_t	*pp;

	for (pp = pkg->head ; pp ; pp = pp->next) {
		pp->marked = true;
	}
}

/* Find a given item in a packing list and, if so, return it (else NULL) */
plist_t *
find_plist(package_t *pkg, pl_ent_t type, const char *name)
{
	plist_t	*pp;

	for (pp = pkg->head;
	    pp && (pp->type != type || (name && strcmp(name,pp->name)));
	    pp = pp->next)
		; /* nothing */
	return pp;
}

/* Look for a specific boolean option argument in the list */
char *
find_plist_option(package_t *pkg, const char *name)
{
	plist_t	*p;

	for (p = pkg->head ; p ; p = p->next) {
		if (p->type == PLIST_OPTION && strcmp(p->name, name) == 0) {
			return p->name;
		}
	}
	return NULL;
}

/*
 * Delete plist item 'type' in the list (if 'name' is non-null, match it
 * too.)  If 'all' is set, delete all items, not just the first occurance.
 */
void
delete_plist(package_t *pkg, bool all, pl_ent_t type, char *name)
{
    plist_t *p = pkg->head;

    while (p) {
	plist_t *pnext = p->next;

	if (p->type == type && (!name || !strcmp(name, p->name))) {
	    free(p->name);
	    if (p->prev)
		p->prev->next = pnext;
	    else
		pkg->head = pnext;
	    if (pnext)
		pnext->prev = p->prev;
	    else
		pkg->tail = p->prev;
	    free(p);
	    if (!all)
		return;
	    p = pnext;
	}
	else
	    p = p->next;
    }
}

/* Allocate a new packing list entry */
plist_t *
new_plist_entry(void)
{
	plist_t *ret;

	if ((ret = (plist_t *)malloc(sizeof(plist_t))) == NULL) {
		err(1, "can't allocate %d bytes", (int)sizeof(plist_t));
	}
	memset(ret, 0, sizeof(plist_t));
	return ret;
}

/* Free an entire packing list */
void
free_plist(package_t *pkg)
{
    plist_t *p = pkg->head;

    while (p) {
	plist_t *p1 = p->next;

	free(p->name);
	free(p);
	p = p1;
    }
    pkg->head = pkg->tail = NULL;
}

/*
 * For an ascii string denoting a plist command, return its code and
 * optionally its argument(s)
 */
int
plist_cmd(char *s, char **arg)
{
	cmd_t	*cmdp;
	char	cmd[FILENAME_MAX + 20];	/* 20 == fudge for max cmd len */
	char	*cp;
	char	*sp;

	(void) strlcpy(cmd, s, sizeof(cmd));
	str_lowercase(cmd);
	for (cp = cmd, sp = s ; *cp ; cp++, sp++) {
		if (isspace(*cp)) {
			for (*cp = '\0'; isspace(*sp) ; sp++) {
			}
			break;
		}
	}
	if (arg) {
		*arg = sp;
	}
	for (cmdp = cmdv ; cmdp->c_s && strcmp(cmdp->c_s, cmd) != 0 ; cmdp++) {
	}
	return cmdp->c_type;
}

/* Read a packing list from a file */
void
read_plist(package_t *pkg, FILE *fp)
{
    char *cp, pline[FILENAME_MAX];
    int cmd;

    while (fgets(pline, FILENAME_MAX, fp)) {
	int len = strlen(pline);

	while (len && isspace(pline[len - 1]))
	    pline[--len] = '\0';
	if (!len)
	    continue;
	cp = pline;
	if (pline[0] == CMD_CHAR) {
	    cmd = plist_cmd(pline + 1, &cp);
	    if (cmd == -1) {
		pwarnx("Unrecognised PLIST command '%s'", pline);
		continue;
	    }
	    if (*cp == '\0')
		cp = NULL;
	}
	else
	    cmd = PLIST_FILE;
	add_plist(pkg, cmd, cp);
    }
}

/* Write a packing list to a file, converting commands to ascii equivs */
void
write_plist(package_t *pkg, FILE *fp)
{
	plist_t	*p;
	cmd_t	*cmdp;

	for (p = pkg->head ; p ; p = p->next) {
		if (p->type == PLIST_FILE) {
			/* Fast-track files - these are the most common */
			(void) fprintf(fp, "%s\n", p->name);
			continue;
		}
		for (cmdp = cmdv ; cmdp->c_type != -1 && cmdp->c_type != p->type ; cmdp++) {
		}
		if (cmdp->c_type == -1) {
			pwarnx("Unknown PLIST command type %d (%s)", p->type, p->name);
		} else if (cmdp->c_argc == 0) {
			(void) fprintf(fp, "%c%s\n", CMD_CHAR, cmdp->c_s);
		} else {
			(void) fprintf(fp, "%c%s %s\n", CMD_CHAR, cmdp->c_s,
					(p->name) ? p->name : "");
		}
	}
}

/*
 * Delete the results of a package installation.
 *
 * This is here rather than in the pkg_delete code because pkg_add needs to
 * run it too in cases of failure.
 */
int
delete_package(bool keep_files, bool nukedirs, rm_cfg_t remove_config,
    bool check_md5, package_t *pkg)
{
    plist_t *p, *pp;
    const char *Where = ".", *last_file = "";
    int fail = 0;
    int len;
    char tmp[FILENAME_MAX], *cp;
    static int usedb = 1;
    RCDB *ourdb;

    if ((ourdb = rcdb_open((cp = getenv("PKG_REFCNTDB")) ? cp : _PATH_REFCNTDB)) == NULL) {
	warn("rcdb_open: not using db");
	usedb = 0;
    }

    for (p = pkg->head; p; p = p->next) {
	switch (p->type)  {
	case PLIST_IGNORE:
	    p = p->next;
	    break;

	case PLIST_CWD:
	    Where = p->name;
	    if (Verbose)
		printf("Change working directory to %s\n", Where);
	    break;

	case PLIST_EXTRAUNEXEC:
	    if (!remove_config)
	    	break;
	    /*FALLTHRU*/
	case PLIST_UNEXEC:
	    if (!format_cmd(tmp, sizeof(tmp), p->name, Where, last_file)) {
	    	pwarnx("unexec command '%s' could not expand", p->name);
		fail = -1;
	    } else {
		if (Verbose)
		    printf("Execute '%s'\n", tmp);
		if (!Fake && sxsystem(false, tmp)) {
		    pwarnx("unexec command for '%s' failed", tmp);
		    fail = -1;
		}
	    }
	    break;

	case PLIST_LIB:
	case PLIST_NOLIB:
	case PLIST_SHELL:
	case PLIST_FILE:
	    if (p->name[strlen(p->name) - 1] == '/')
		break;
	    last_file = p->name;
	    if (keep_files)
		break;
	    (void) snprintf(tmp, sizeof(tmp), "%s/%s", Where, p->name);
	    if (isdir(tmp)) {
		pwarnx("attempting to delete directory '%s' as a file\n"
	   "this packing list is incorrect - ignoring delete request", tmp);
	    }
	    else {
		if (check_md5 && p->next && p->next->type == PLIST_COMMENT && !strncmp(p->next->name, "MD5:", 4)) {
		    char buf[LegibleChecksumLen];

		    if ((cp = MD5File(tmp, buf)) != NULL) {
			/* Mismatch? */
			if (strcmp(cp, p->next->name + 4)) {
			    printf("%s fails original MD5 checksum - %s\n",
				       tmp, Force ? "deleted anyway." : "not deleted.");
			    if (!Force) {
				fail = -1;
				continue;
			    }
			}
		    }
		}
		if (Verbose)
		    printf("Delete file %s\n", tmp);
		if (!Fake) {
		    if (delete_hierarchy(tmp, false, nukedirs))
		    fail = -1;
		}
	    }
	    break;

	case PLIST_SAMPLE:
	case PLIST_EXTRA:
	    if (!remove_config)
	    	break;
	    if (!p->name)
	    	break;
	    delete_extra(p, Where, remove_config, false);
	    break;
	case PLIST_DIR_RM:
	    last_file = p->name;
	    fail = fail | process_dirrm(p, keep_files, &usedb, ourdb, Where);
	    break;
	default:
	    break;
	}
    }

    /* reversely traverse list for dir/ entries */
    for (p = pkg->tail; p; p = p->prev) {
	if (p->type == PLIST_FILE || (remove_config &&
		(p->type == PLIST_SAMPLE || p->type == PLIST_EXTRA))) {
	    len = strlen(p->name);
	    if (p->name[len - 1] == '/') {
		/* cwd might have changed, hunt for a @@cwd entry */
		for (pp = p; pp && pp->type != PLIST_CWD; pp = pp->prev) {
		}
		if (pp) {
		    Where = pp->name;
		}
		if (p->type == PLIST_FILE) {
		    p->name[--len] = '\0';
		    fail = fail | process_dirrm(p, keep_files, &usedb, ourdb, Where);
		} else
		    delete_extra(p, Where, remove_config, true);
	    }
	}
    }

    if (usedb && rcdb_close(ourdb))
	warn("rcdb_close: not synched correctly");
    return fail;
}

int
process_dirrm(plist_t *p, bool keep_files, int *usedb, RCDB *ourdb,
    const char *Where)
{
    recno_t rr;
    char tmp[FILENAME_MAX];
    int64_t rcount = 0;

    if (*usedb) {
	if ((rr = rcdb_lookup(ourdb, p->name)) == (recno_t)-1) {
	    warn("rcdb_lookup");
	    *usedb = 0;
	    rcdb_close(ourdb);
	}
	if (rr) {
	    /* found record; will reduce number by one
	     * and delete record and dir if zero */
	    if (rcdb_read(ourdb, rr, &rcount) == -1) {
		warn("rcdb_read");
		*usedb = 0;
		rcdb_close(ourdb);
	    }
	    if (!rcount)	/* wrong entry */
		rcount = 1;
	    if (rcount--) {
		if (!Fake && rcount && rcdb_modify(ourdb, rr, rcount,
			p->name) == -1) {
		    warn("rcdb_modify");
		    *usedb = 0;
		    rcdb_close(ourdb);
		} else if (!Fake && !rcount && rcdb_delete(ourdb, rr) == -1) {
		    warn("rcdb_delete");
		    *usedb = 0;
		    rcdb_close(ourdb);
		}
	    }
	} /* else record not in database, go on */
    }
    if (rcount)
	return 0;

    (void) snprintf(tmp, sizeof(tmp), "%s/%s", Where, p->name);
    if (!isdir(tmp)) {
	if (fexists(tmp)) {
	    pwarnx("attempting to delete file '%s' as a directory\n"
	       "this packing list is incorrect - ignoring delete request", tmp);
	} else {
	    pwarnx("attempting to delete non-existent directory '%s'\n"
	       "this packing list is incorrect - ignoring delete request", tmp);
	}
    } else if (!keep_files) {
	if (Verbose)
	    printf("Delete directory %s\n", tmp);
	if (!Fake && delete_hierarchy(tmp, false, false)) {
	    pwarnx("unable to completely remove directory '%s'", tmp);
	    return -1;
	}
    }
    return 0;
}

#ifdef DEBUG
#define RMDIR(dir)	RM_DEBUG(RMDIR_CMD, "", (dir))
#define REMOVE(dir, ie)	RM_DEBUG(REMOVE_CMD, ((ie) ? "-f " : ""), (dir))
#define RM_DEBUG(cmd, arg1, arg2) ({				\
	int rv;							\
	char *a2;						\
	a2 = format_arg(arg2);					\
	rv = xsystem(false, "%s %s%s", (cmd), (arg1), a2);	\
	xfree(a2);						\
	(rv);							\
})
#else
#define RMDIR rmdir
#define	REMOVE(file,ie) (remove(file) && !(ie))
#endif

/* Selectively delete a hierarchy */
int
delete_hierarchy(char *dir, bool ign_err, bool nukedirs)
{
    char *cp1, *cp2;

    cp1 = cp2 = dir;
    if (!fexists(dir)) {
	if (!ign_err)
	    pwarnx("%s '%s' doesn't really exist",
		isdir(dir) ? "directory" : "file", dir);
	return !ign_err;
    }
    else if (nukedirs) {
	int rv;
	cp1 = format_arg(dir);
	rv = xsystem(false, "%s -r%s %s", REMOVE_CMD, ign_err ? "f" : "", cp1);
	xfree(cp1);
	if (rv)
	    return 1;
	cp1 = dir;
    }
    else if (isdir(dir)) {
	if (RMDIR(dir) && !ign_err)
	    return 1;
    }
    else {
	if (REMOVE(dir, ign_err))
	    return 1;
    }

    if (!nukedirs)
	return 0;
    while (cp2) {
	if ((cp2 = strrchr(cp1, '/')) != NULL)
	    *cp2 = '\0';
	if (!isemptydir(dir))
	    return 0;
	if (RMDIR(dir) && !ign_err) {
	    if (!fexists(dir))
		pwarnx("directory '%s' doesn't really exist", dir);
	    else
		return 1;
	}
	/* back up the pathname one component */
	if (cp2) {
	    cp1 = dir;
	}
    }
    return 0;
}

/* Delete extra files and directories (@@extra, @@sample).
 * the 'dir' parameter defines whether only files or only directories
 * will be deleted. Rationale: dirs will be removed in a second pass
 * after the files.
 */
void
delete_extra(plist_t *p, const char *Where, const rm_cfg_t remove_config, bool dir)
{
    char *fname;
    char *cp, buf[LegibleChecksumLen];
    size_t len;
    bool b;

    if (!p || !Where || !remove_config)
	return;

    fname = toabs(p->name, Where);
    len = strlen(fname);
    if (len == 0) {
	pwarnx("empty extra filename");
	return;
    }
    /* don't warn if stuff does not exist */
    if (!fexists(fname))
	return;

    b = isdir(fname);
    if (dir) {
	if (b && remove_config == RMCFG_ALL) {
	    if (Verbose)
		printf("Delete extra directory %s\n", fname);
	    if (!Fake && rmdir(fname) == -1)
		pwarn("problem removing directory %s",
		    fname);
	} else if (!b) {
	    pwarnx("extra directory %s is not a directory",
		fname);
	}
    } else if (fname[len - 1] != '/') {
	if (b) {
	    pwarnx("extra file %s is a directory", fname);
	} else {
	    if (remove_config == RMCFG_UNCHANGED
		    && p->prev->type == PLIST_COMMENT
		    && !strncmp(p->prev->name, "MD5:", 4)
		    && (cp = MD5File(fname, buf)) != NULL) {
		/* Mismatch? */
		if (strcmp(cp, p->prev->name + 4)) {
		    if (Verbose)
			printf("Extra file %s was changed -- not removing it\n", fname);
		    return;
		}
	    }

	    if (Verbose)
		printf("Delete extra file %s\n", fname);
	    if (!Fake && unlink(fname) == -1)
		pwarn("problem removing %s", fname);
	}
    }
}
@


1.19
log
@• unbreak building with __CRAZY=Yes
• KNF the function touched while here; bsiegert@@ please RTFM style(9)
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.18 2009/12/08 18:49:17 bsiegert Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.18 2009/12/08 18:49:17 bsiegert Exp $");
d390 1
a390 1
		if (!Fake && system(tmp)) {
@


1.18
log
@Remove the "not checking MD5 sum …" compatibility hack.

tg@@ agrees
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.17 2009/11/29 13:56:37 bsiegert Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.17 2009/11/29 13:56:37 bsiegert Exp $");
d130 3
a132 1
void add_plist_glob(package_t *pkg, plist_t *after, const char *dir, const char *pattern, bool nodups)
d136 1
a136 1
	unsigned int i;
d661 1
a661 1
		
@


1.18.2.1
log
@Add a new function get_ld_type() to examine the plist for the ld type and use it for
checking library dependencies.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.18 2009/12/08 18:49:17 bsiegert Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.18 2009/12/08 18:49:17 bsiegert Exp $");
a195 24
/* Look for one of the options determining the linker type in the plist
 * and return it. First one wins.
 */
ld_type_t
get_ld_type(package_t *pkg)
{
	plist_t *pp;

	for (pp = pkg->head; pp; pp = pp->next) {
		if (pp->type != PLIST_OPTION)
			 continue;
		if (!strcmp(pp->name, "ldcache"))
			return LD_BSD;
		if (!strcmp(pp->name, "dylib"))
			return LD_DYLD;
		if (!strcmp(pp->name, "gnu-ld"))
			return LD_GNU;
		if (!strcmp(pp->name, "static"))
			return LD_STATIC;
	}

	return LD_STATIC;
}

@


1.17
log
@- replace an int by an unsigned int because it will be compared with one
- remove handling of "name" in the package deletion code, as it is not
  used anywhere.

Both found by the static dingens.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.16 2009/10/20 19:32:50 bsiegert Exp $ */
d29 1
a29 3
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.16 2009/10/20 19:32:50 bsiegert Exp $");

#define NULLMD5 "d41d8cd98f00b204e9800998ecf8427e"
d413 1
a413 3
		    if (!strcmp(p->next->name + 4, NULLMD5))
			printf("Not checking MD5 sum for %s\n", tmp);
		    else if ((cp = MD5File(tmp, buf)) != NULL) {
@


1.16
log
@New plist entry type "@@nolib", for use with .la files, which will NOT be passed
through libtoolise/unlibtoolise. Needed for GNU Smalltalk
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.15 2008/11/02 19:57:31 tg Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.15 2008/11/02 19:57:31 tg Exp $");
d135 2
a136 1
	int fd, i;
d358 1
a358 1
    char tmp[FILENAME_MAX], *name = NULL, *cp;
a368 4
	case PLIST_NAME:
	    name = p->name;
	    break;

@


1.15
log
@sprinke a few format_arg for good measure

XXX need to look at format_cmd() as it operates on PLIST strings;
XXX we might want to escape %D %F etc. as well
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.14 2008/11/02 18:56:30 tg Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.14 2008/11/02 18:56:30 tg Exp $");
d71 1
d401 1
@


1.14
log
@• add new memory management functions (xcalloc, xrealloc, xfree, xstrdup,
  xasprintf, xvasprintf)
• add new process calling functions which can optionally unlimit datasize
• add safe formatting functions (untested)
• retire asystem for xsystem
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.13 2008/11/02 18:19:53 tg Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.13 2008/11/02 18:19:53 tg Exp $");
d544 10
a553 2
#define RMDIR(dir) xsystem(false, "%s %s", RMDIR_CMD, dir)
#define REMOVE(dir,ie) xsystem(false, "%s %s%s", REMOVE_CMD, (ie ? "-f " : ""), dir)
d573 5
a577 1
	if (xsystem(false, "%s -r%s %s", REMOVE_CMD, (ign_err ? "f" : ""), dir))
d579 1
@


1.13
log
@rename vsystem into asystem, because v* are these who take a va_list
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.12 2008/10/12 14:33:10 tg Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.12 2008/10/12 14:33:10 tg Exp $");
d544 2
a545 2
#define RMDIR(dir) asystem("%s %s", RMDIR_CMD, dir)
#define REMOVE(dir,ie) asystem("%s %s%s", REMOVE_CMD, (ie ? "-f " : ""), dir)
d565 1
a565 1
	if (asystem("%s -r%s %s", REMOVE_CMD, (ign_err ? "f" : ""), dir))
@


1.12
log
@/usr/ports/infrastructure/pkgtools/lib/plist.c:143: warning: comparison between signed and unsigned
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.11 2008/03/27 21:00:38 bsiegert Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.11 2008/03/27 21:00:38 bsiegert Exp $");
d544 2
a545 2
#define RMDIR(dir) vsystem("%s %s", RMDIR_CMD, dir)
#define REMOVE(dir,ie) vsystem("%s %s%s", REMOVE_CMD, (ie ? "-f " : ""), dir)
d565 1
a565 1
	if (vsystem("%s -r%s %s", REMOVE_CMD, (ign_err ? "f" : ""), dir))
@


1.11
log
@New environment variable PKG_REFCNTDB that can be used to set the path to
shareddirs.db at runtime. Will be used for regression tests.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.10 2007/05/28 14:12:45 tg Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.10 2007/05/28 14:12:45 tg Exp $");
d134 1
a134 2
	int fd;
	unsigned int i;
@


1.10
log
@get rid of errorneous(sp?) warning
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.9 2007/03/30 23:20:11 bsiegert Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.9 2007/03/30 23:20:11 bsiegert Exp $");
d357 1
a357 1
    char tmp[FILENAME_MAX], *name = NULL;
d361 2
a362 2
    if ((ourdb = rcdb_open(_PATH_REFCNTDB)) == NULL) {
	warn("rcdb_open - not using db!");
d415 1
a415 1
		    char *cp, buf[LegibleChecksumLen];
@


1.9
log
@Implement one of the points from my todo list: @@emul directives for
plists. If EMUL is set in a port's Makefile (e.g. EMUL=linux for a port
which needs linux emulation), this fact is entered into the package.
pkg_add checks for the relevant emulation.

- introduce new piperead() function, which executes a command and reads
  one line of output. Carefully crafted to avoid errors.
- new option for pkg_create: -e gives an initial value for @@emul
- bsd.port.mk: add -e to PKG_ARGS if EMUL given
- new function have_emulation(): Is the emulation enabled (via sysctl
  -n) or, alternatively, are we already running the "right" OS?
- pkg_info: show @@emul directive
- documentation: document EMUL and @@emul
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.8 2007/01/19 23:11:20 bsiegert Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.8 2007/01/19 23:11:20 bsiegert Exp $");
d633 1
a633 1
	} else {
@


1.8
log
@Implement a new parameter: pkg_delete -C, will be used for pkg_upgrade IDC.

From the manpage:
     -C      Only delete configuration files that have the same checksum as
             the original file, i.e. those that have not been changed by the
             user.

agreed tg@@
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.7 2006/11/19 22:34:07 tg Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.7 2006/11/19 22:34:07 tg Exp $");
d70 1
d134 2
a135 1
	int fd, i;
@


1.7
log
@whitespace at EOL sweep
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.6 2006/09/24 20:40:48 tg Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.6 2006/09/24 20:40:48 tg Exp $");
d348 1
a348 1
delete_package(bool keep_files, bool nukedirs, bool remove_config,
d444 1
a444 1
	    delete_extra(toabs(p->name, Where), false);
d471 1
a471 1
		    delete_extra(toabs(p->name, Where), true);
d603 1
a603 1
delete_extra(const char *fname, bool dir)
d605 2
d610 4
d625 1
a625 1
	if (b) {
d639 12
@


1.6
log
@size_t and ptrdiff_t
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.5 2005/11/23 17:41:06 bsiegert Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.5 2005/11/23 17:41:06 bsiegert Exp $");
d601 1
a601 1
 */ 
@


1.5
log
@BUGFIX: Fix some mistakes in pkg_delete -U implementation:

- update last_file
- don't delete directories

While here, revert and redo the pl.c patch. The declaration stays where it
was because the code below will come back.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.4 2005/11/19 02:05:29 bsiegert Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.4 2005/11/19 02:05:29 bsiegert Exp $");
d234 1
a234 1
		err(1, "can't allocate %d bytes", sizeof(plist_t));
@


1.4
log
@Implement base package upgrades that actually work:

- add a -U option for pkg_delete to leave the files but unregister the
  package. Update manpage; while here, sort options alphabetically.
- add base package detection code into pkg_upgrade

Please test this, as I haven't done so :).

some help by tg@@
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.3 2005/11/15 19:33:59 tg Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.3 2005/11/15 19:33:59 tg Exp $");
a400 2
	    if (keep_files)
		break;
d404 2
d448 1
a448 1
	    fail = fail | process_dirrm(p, false, &usedb, ourdb, Where);
d469 1
a469 1
		    fail = fail | process_dirrm(p, false, &usedb, ourdb, Where);
d482 1
a482 1
process_dirrm(plist_t *p, bool ign_err, int *usedb, RCDB *ourdb,
d531 1
a531 1
    } else {
d534 1
a534 1
	if (!Fake && delete_hierarchy(tmp, ign_err, false)) {
@


1.3
log
@crude U+0060 removal
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.2 2005/07/18 20:02:00 bsiegert Exp $ */
d29 1
a29 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/lib/plist.c,v 1.2 2005/07/18 20:02:00 bsiegert Exp $");
d348 1
a348 1
delete_package(bool ign_err, bool nukedirs, bool remove_config,
d401 2
d432 1
a432 1
		    if (delete_hierarchy(tmp, ign_err, nukedirs))
d448 1
a448 1
	    fail = fail | process_dirrm(p, ign_err, &usedb, ourdb, Where);
d469 1
a469 1
		    fail = fail | process_dirrm(p, ign_err, &usedb, ourdb, Where);
@


1.2
log
@Update dylib handling to ignore files which are already in the plist, thus
avoiding duplicate entries if libtoolise_plist is used.
@
text
@d1 1
a1 1
/**	$MirOS$ */
d29 1
a29 1
__RCSID("$MirOS$");
d303 1
a303 1
		pwarnx("Unrecognised PLIST command `%s'", pline);
d386 1
a386 1
	    	pwarnx("unexec command `%s' could not expand", p->name);
d390 1
a390 1
		    printf("Execute `%s'\n", tmp);
d392 1
a392 1
		    pwarnx("unexec command for `%s' failed", tmp);
d406 1
a406 1
		pwarnx("attempting to delete directory `%s' as a file\n"
d523 1
a523 1
	    pwarnx("attempting to delete file `%s' as a directory\n"
d526 1
a526 1
	    pwarnx("attempting to delete non-existent directory `%s'\n"
d557 1
a557 1
	    pwarnx("%s `%s' doesn't really exist",
d583 1
a583 1
		pwarnx("directory `%s' doesn't really exist", dir);
@


1.1
log
@Initial revision
@
text
@d126 5
a130 2
/* glob for files and add them to the packing list */
void add_plist_glob(package_t *pkg, plist_t *after, const char *dir, const char *pattern)
d141 5
a145 3
	for (i = 0; i < pglob.gl_pathc; i++)
		add_plist_at(pkg, after, PLIST_FILE,
		    strdup(pglob.gl_pathv[i]));
@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
