head	1.15;
access;
symbols
	bsiegert-cfgfile_BASE:1.14
	bsiegert-cfgfile:1.14.0.2
	MIRBSD_8_BASE:1.8;
locks; strict;
comment	@ * @;


1.15
date	2013.10.31.20.05.23;	author tg;	state Exp;
branches;
next	1.14;
commitid	1005272B7081B0E5655;

1.14
date	2009.05.17.16.51.22;	author tg;	state Exp;
branches;
next	1.13;
commitid	1004A10409F62C8862B;

1.13
date	2008.11.02.18.56.29;	author tg;	state Exp;
branches;
next	1.12;
commitid	100490DF7B930A3A3BD;

1.12
date	2008.11.02.18.19.52;	author tg;	state Exp;
branches;
next	1.11;
commitid	100490DEF535C71F010;

1.11
date	2006.12.11.11.10.21;	author bsiegert;	state Exp;
branches;
next	1.10;
commitid	100457D3CB4725EF59F;

1.10
date	2006.11.19.22.34.07;	author tg;	state Exp;
branches;
next	1.9;
commitid	1004560DBF46435018A;

1.9
date	2006.02.26.00.42.55;	author bsiegert;	state Exp;
branches;
next	1.8;
commitid	1004400F99048AD1A82;

1.8
date	2005.12.20.19.22.59;	author tg;	state Exp;
branches;
next	1.7;
commitid	10043A85A1A7098A89A;

1.7
date	2005.11.19.02.05.28;	author bsiegert;	state Exp;
branches;
next	1.6;
commitid	6633437e87d6af88;

1.6
date	2005.11.15.19.33.57;	author tg;	state Exp;
branches;
next	1.5;
commitid	7927437a38332782;

1.5
date	2005.09.19.19.30.05;	author bsiegert;	state Exp;
branches;
next	1.4;
commitid	499c432f1149096c;

1.4
date	2005.09.12.22.53.22;	author tg;	state Exp;
branches;
next	1.3;
commitid	6e6c432606e897b6;

1.3
date	2005.08.21.20.15.47;	author bsiegert;	state Exp;
branches;
next	1.2;
commitid	4cd74308e0708a68;

1.2
date	2005.05.21.00.16.04;	author tg;	state Exp;
branches
	1.2.2.1;
next	1.1;
commitid	2ef4428e7c341292;

1.1
date	2005.03.18.15.47.16;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.2.2.1
date	2005.09.11.01.05.43;	author tg;	state Exp;
branches;
next	;
commitid	2f08432382e315cf;

1.1.7.1
date	2005.03.18.15.47.16;	author tg;	state Exp;
branches;
next	;


desc
@@


1.15
log
@adapt most __attribute__((…)) occurrences to new KNF style(9)
@
text
@/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.14 2009/05/17 16:51:22 tg Exp $ */
/*	$OpenBSD: perform.c,v 1.16 2003/08/21 20:24:56 espie Exp $	*/

/*-
 * Copyright © 2013
 *	Thorsten “mirabilos” Glaser <tg@@mirbsd.org>
 */

/*
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 18 July 1993
 *
 * This is the main body of the delete module.
 */

#include <sys/param.h>
#ifndef __INTERIX
#include <sys/mount.h>
#endif
#include <err.h>
#include "lib.h"
#include "delete.h"
#include <libgen.h>

__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.14 2009/05/17 16:51:22 tg Exp $");

static int pkg_do(char *);
static void sanity_check(char *);
static int undepend(const char *, char *, int);
static char LogDir[FILENAME_MAX];

int
pkg_perform(char **pkgs)
{
    int i, err_cnt = 0;

    for (i = 0; pkgs[i]; i++)
	err_cnt += pkg_do(pkgs[i]);
    return err_cnt;
}

static package_t Plist;

/* remove all links to the package as well */
static void
delete_pkg_links(const char *dir, const char *pkg)
{
    int base;
    int len;
    DIR *d;
    struct dirent *dp;
    struct stat sb;
    char name[FILENAME_MAX+1];

    base = open(".", O_RDONLY);
    if (base == -1)
    	return;
    if (chdir(dir) == -1) {
    	close(base);
	return;
    }
    d = opendir(".");
    if (d == NULL) {
    	fchdir(base);
	close(base);
	return;
    }
    while ((dp = readdir(d)) != NULL) {
    	if (lstat(dp->d_name, &sb) == -1 || !S_ISLNK(sb.st_mode))
	    continue;
	len = readlink(dp->d_name, name, FILENAME_MAX);
	if (len == -1)
	    continue;
	name[len] = 0;
	if (strcmp(name, pkg))
	    continue;
	unlink(dp->d_name);
    }
    closedir(d);
    fchdir(base);
    close(base);
}

/* This is seriously ugly code following.  Written very fast! */
static int
pkg_do(char *pkg)
{
    FILE *cfile;
    int homefd;
    char fbuf[FILENAME_MAX];
    plist_t *p;
    const char *dbdir;
    char *filename;

    set_pkg(pkg);
    /* Reset some state */
    if (Plist.head)
	free_plist(&Plist);

    dbdir = getenv(PKG_DBDIR);
    if (!dbdir)
       dbdir = DEF_LOG_DIR;

    switch (glob_package(LogDir, sizeof(LogDir), pkg)) {
    case -1:
	pwarnx("error while handling package name");
	return 1;
    case 0:
	pwarnx("no such package installed");
	return 1;
    case 1:
	/* good */
	break;
    default:
	pwarnx("more than one match for package specification");
	return 1;
    }
    pkg = strdup(basename(LogDir));

    if ((homefd = open(".", O_RDONLY, 0555)) == -1) {
	cleanup(0);
	err(2, "unable to get current working directory");
    }
    if (chdir(LogDir) == -1) {
	pwarnx("unable to change directory to %s! deinstall failed", LogDir);
	free(pkg);
	return 1;
    }
    sanity_check(LogDir);
    cfile = fopen(CONTENTS_FNAME, "r");
    if (!cfile) {
	pwarnx("unable to open '%s' file", CONTENTS_FNAME);
	free(pkg);
	return 1;
    }
    /* If we have a prefix, add it now */
    if (Prefix)
	add_plist(&Plist, PLIST_CWD, Prefix);
    read_plist(&Plist, cfile);
    fclose(cfile);
    if (!KeepFiles && find_plist_option(&Plist, "base-package") != NULL) {
	pwarnx("package '%s' is considered a BASE PACKAGE.\n"
		"DELETING IT WILL ALMOST CERTAINLY BREAK YOUR SYSTEM%s.",
		pkg, Force ? "\n(but I'll delete it anyway)" :
		".\nUse -f if you are really sure what you are doing");
	if (!Force) {
	    free(pkg);
	    return 1;
	}
    }
    if (!isemptyfile(REQUIRED_BY_FNAME)) {
	char buf[512];
	pwarnx("package '%s' is required by these other packages\n"
		"and may not be deinstalled%s:",
		pkg, Force ? " (but I'll delete it anyway)" : "" );
	cfile = fopen(REQUIRED_BY_FNAME, "r");
	if (cfile) {
	    while (fgets(buf, sizeof(buf), cfile))
		fprintf(stderr, "%s", buf);
	    fclose(cfile);
	} else
	    pwarnx("cannot open requirements file '%s'", REQUIRED_BY_FNAME);
	if (!Force) {
	    free(pkg);
	    return 1;
	}
    }
    p = find_plist(&Plist, PLIST_CWD, NULL);
    if (!p) {
	pwarnx("package '%s' doesn't have a prefix", pkg);
	free(pkg);
	return 1;
    }
#ifndef __INTERIX
    {
	struct statfs buffer;

	if (statfs(p->name, &buffer) == -1) {
	    pwarnx("package '%s' prefix (%s) does not exist", pkg, p->name);
	    free(pkg);
	    return 1;
	}
	if (buffer.f_flags & MNT_RDONLY) {
	    pwarnx("package'%s' mount point %s is read-only", pkg,
		buffer.f_mntonname);
	    free(pkg);
	    return 1;
	}
    }
#endif

    setenv(PKG_PREFIX_VNAME, p->name, 1);
    setenv("PKG_DELETE_EXTRA", (CleanConf ? "Yes" : "No"), 1);
    if (fexists(REQUIRE_FNAME)) {
	if (Verbose)
	    printf("Executing 'require' script.\n");
	xsystem(false, "chmod +x %s", REQUIRE_FNAME);	/* be sure */
	if (xsystem(false, "./%s %s DEINSTALL", REQUIRE_FNAME, pkg)) {
	    pwarnx("package %s fails requirements %s", pkg,
		   Force ? "" : "- not deleted");
	    if (!Force) {
		free(pkg);
		return 1;
	    }
	}
    }
    if (!NoDeInstall && fexists(DEINSTALL_FNAME)) {
	if (Fake)
	    printf("Would execute de-install script at this point.\n");
	else {
	    xsystem(false, "chmod +x %s", DEINSTALL_FNAME);	/* make sure */
	    if (xsystem(false, "./%s %s DEINSTALL", DEINSTALL_FNAME, pkg)) {
		pwarnx("deinstall script returned error status");
		if (!Force) {
		    free(pkg);
		    return 1;
		}
	    }
	}
    }
    if (fchdir(homefd) == -1) {
	(void) close(homefd);
	cleanup(0);
	err(2, "Cannot change back to former working directory");
    }
    (void) close(homefd);
    if (!Fake) {
	/* Some packages aren't packed right, so we need to just ignore delete_package()'s status.  Ugh! :-( */
	if (delete_package(KeepFiles, CleanDirs, CleanConf, CheckMD5, &Plist) == -1)
	    pwarnx(
	"couldn't entirely delete package (perhaps the packing list is "
	"incorrectly specified?)");
    }
    /* Remove package dependencies */
    filename = toabs(DEPENDS_FNAME, LogDir);
    if (fexists(filename)) {
	if (Verbose)
	    printf("Dependency file found, using it for unregistering dependencies\n");
	cfile = fopen(filename, "r");
	if (cfile == NULL) {
	    pwarn("couldn't open dependency file '%s'", DEPENDS_FNAME);
	    free(pkg);
	    return 1;
	}
	while (fgets(fbuf, sizeof(fbuf), cfile) != NULL) {
	    if (fbuf[strlen(fbuf)-1] == '\n')
		fbuf[strlen(fbuf)-1] = '\0';
	    if (Verbose)
		printf("Attempting to remove dependency on package '%s'\n", fbuf);
	    drop_privs();
	    undepend(fbuf, pkg, 0);
	    raise_privs();
	}
	(void) fclose(cfile);
    } else for (p = Plist.head; p ; p = p->next) {
	if (p->type != PLIST_PKGDEP)
	    continue;
	if (Verbose)
	    printf("Attempting to remove dependency on package '%s'\n", p->name);
	drop_privs();
	if (!Fake)
	    findmatchingname(dbdir, p->name, undepend, pkg, 0);
	raise_privs();
    }
    if (!Fake) {
	if (xsystem(false, "%s -r %s", REMOVE_CMD, LogDir)) {
	    pwarnx("couldn't remove log entry in %s, deinstall failed", LogDir);
	    if (!Force) {
		free(pkg);
		return 1;
	    }
	}
	delete_pkg_links(dbdir, pkg);
    }
    free(pkg);
    return 0;
}

static void
sanity_check(char *pkg)
{
    if (!fexists(CONTENTS_FNAME)) {
	cleanup(0);
	errx(2, "installed package %s has no %s file!", pkg, CONTENTS_FNAME);
    }
}

void
cleanup(int sig __attribute__((__unused__)))
{
	/* return here, for errx(3) calls to succeed */
}

/* deppkgname is the pkg from which's +REQUIRED_BY file we are
 * about to remove pkg2delname. This function is called from
 * findmatchingname(), deppkgname is expanded from a (possible) pattern.
 */
int
undepend(const char *deppkgname, char *pkg2delname,
    int unused __attribute__((__unused__)))
{
     char fname[FILENAME_MAX], ftmp[FILENAME_MAX];
     char fbuf[FILENAME_MAX];
     FILE *fp, *fpwr;
     char *tmp;
     int s;

     (void) snprintf(fname, sizeof(fname), "%s/%s/%s",
	     (tmp = getenv(PKG_DBDIR)) ? tmp : DEF_LOG_DIR,
	     deppkgname, REQUIRED_BY_FNAME);
     fp = fopen(fname, "r");
     if (fp == NULL) {
	 pwarnx("couldn't open dependency file '%s'", fname);
	 return 0;
     }
     (void) snprintf(ftmp, sizeof(ftmp), "%s.XXXXXXXXXX", fname);
     s = mkstemp(ftmp);
     if (s == -1) {
	 fclose(fp);
	 pwarnx("couldn't open temp file '%s'", ftmp);
	 return 0;
     }
     fpwr = fdopen(s, "w");
     if (fpwr == NULL) {
	 close(s);
	 fclose(fp);
	 pwarnx("couldn't fdopen temp file '%s'", ftmp);
	 remove(ftmp);
	 return 0;
     }
     while (fgets(fbuf, sizeof(fbuf), fp) != NULL) {
	 if (fbuf[strlen(fbuf)-1] == '\n')
	     fbuf[strlen(fbuf)-1] = '\0';
	 if (strcmp(fbuf, pkg2delname))		/* no match */
	     fputs(fbuf, fpwr), putc('\n', fpwr);
     }
     (void) fclose(fp);
     if (fchmod(s, 0644) == -1) {
	 pwarnx("error changing permission of temp file '%s'", ftmp);
	 fclose(fpwr);
	 remove(ftmp);
	 return 0;
     }
     if (fclose(fpwr) == EOF) {
	 pwarnx("error closing temp file '%s'", ftmp);
	 remove(ftmp);
	 return 0;
     }
     if (rename(ftmp, fname) == -1)
	 pwarnx("error renaming '%s' to '%s'", ftmp, fname);
     remove(ftmp);			/* just in case */

     return 0;
}
@


1.14
log
@remove bogus newline
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.13 2008/11/02 18:56:29 tg Exp $ */
d4 5
d37 1
a37 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.13 2008/11/02 18:56:29 tg Exp $");
d301 1
a301 1
cleanup(int sig __attribute__((unused)))
d312 1
a312 1
    int unused __attribute__((unused)))
@


1.13
log
@• add new memory management functions (xcalloc, xrealloc, xfree, xstrdup,
  xasprintf, xvasprintf)
• add new process calling functions which can optionally unlimit datasize
• add safe formatting functions (untested)
• retire asystem for xsystem
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.12 2008/11/02 18:19:52 tg Exp $ */
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.12 2008/11/02 18:19:52 tg Exp $");
d238 1
a238 1
	"couldn't entirely delete package (perhaps the packing list is\n"
@


1.12
log
@rename vsystem into asystem, because v* are these who take a va_list
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.11 2006/12/11 11:10:21 bsiegert Exp $ */
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.11 2006/12/11 11:10:21 bsiegert Exp $");
d204 2
a205 2
	asystem("chmod +x %s", REQUIRE_FNAME);	/* be sure */
	if (asystem("./%s %s DEINSTALL", REQUIRE_FNAME, pkg)) {
d218 2
a219 2
	    asystem("chmod +x %s", DEINSTALL_FNAME);	/* make sure */
	    if (asystem("./%s %s DEINSTALL", DEINSTALL_FNAME, pkg)) {
d273 1
a273 1
	if (asystem("%s -r %s", REMOVE_CMD, LogDir)) {
@


1.11
log
@Some updates for pkg_delete:

- plug a memory leak, free() pkg even when package deletion is aborted
- Reliability: instead of doing getcwd() and chdir() later, use the
  recommended pattern: open the directory, save the fd, and fchdir()
  later. OpenBSD says that the old code is generally unsafe. Also
  remove the "Toto! This doesn't look like Kansas anymore!" error message.
- If a +DEPENDS file exists, it is preferred to extracting the
  dependencies from the plist and then calling findmatchingname() to
  find them. As depends were never cached before, patterns were expanded
  at least three times during life of a package: twice (!) on installation,
  one time on deinstallation. No one guaranteed that these matches always
  give the same result. Ugh.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.10 2006/11/19 22:34:07 tg Exp $ */
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.10 2006/11/19 22:34:07 tg Exp $");
d204 2
a205 2
	vsystem("chmod +x %s", REQUIRE_FNAME);	/* be sure */
	if (vsystem("./%s %s DEINSTALL", REQUIRE_FNAME, pkg)) {
d218 2
a219 2
	    vsystem("chmod +x %s", DEINSTALL_FNAME);	/* make sure */
	    if (vsystem("./%s %s DEINSTALL", DEINSTALL_FNAME, pkg)) {
d273 1
a273 1
	if (vsystem("%s -r %s", REMOVE_CMD, LogDir)) {
@


1.10
log
@whitespace at EOL sweep
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.9 2006/02/26 00:42:55 bsiegert Exp $ */
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.9 2006/02/26 00:42:55 bsiegert Exp $");
d96 2
a97 1
    char home[FILENAME_MAX];
d100 1
d127 1
a127 1
    if (!getcwd(home, FILENAME_MAX)) {
d129 1
a129 1
	errx(2, "unable to get current working directory!");
d133 1
d140 1
d153 2
a154 1
	if (!Force)
d156 1
d170 2
a171 1
	if (!Force)
d173 1
d178 1
d187 1
d193 1
d208 2
a209 1
	    if (!Force)
d211 1
d221 2
a222 1
		if (!Force)
d224 1
d228 2
a229 1
    if (chdir(home) == -1) {
d231 1
a231 1
	errx(2, "Toto! This doesn't look like Kansas anymore!");
d233 1
d240 20
a259 4
	if (vsystem("%s -r %s", REMOVE_CMD, LogDir)) {
	    pwarnx("couldn't remove log entry in %s, deinstall failed", LogDir);
	    if (!Force)
		return 1;
d261 2
a262 3
	delete_pkg_links(dbdir, pkg);
    }
    for (p = Plist.head; p ; p = p->next) {
d272 10
@


1.9
log
@Also drop privileges while unregistering dependencies in pkg_delete
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.8 2005/12/20 19:22:59 tg Exp $ */
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.8 2005/12/20 19:22:59 tg Exp $");
d147 1
a147 1
		pkg, Force ? "\n(but I'll delete it anyway)" : 
@


1.8
log
@if pkg_upgrade'ing a base package, don't abort...
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.7 2005/11/19 02:05:28 bsiegert Exp $ */
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.7 2005/11/19 02:05:28 bsiegert Exp $");
d235 1
d238 1
@


1.7
log
@Implement base package upgrades that actually work:

- add a -U option for pkg_delete to leave the files but unregister the
  package. Update manpage; while here, sort options alphabetically.
- add base package detection code into pkg_upgrade

Please test this, as I haven't done so :).

some help by tg@@
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.6 2005/11/15 19:33:57 tg Exp $ */
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.6 2005/11/15 19:33:57 tg Exp $");
d144 1
a144 1
    if (find_plist_option(&Plist, "base-package") != NULL) {
@


1.6
log
@crude U+0060 removal
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.5 2005/09/19 19:30:05 bsiegert Exp $ */
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.5 2005/09/19 19:30:05 bsiegert Exp $");
d219 1
a219 1
	if (delete_package(false, CleanDirs, CleanConf, CheckMD5, &Plist) == -1)
@


1.5
log
@Finally implement @@option base-package. This will be used to mark base
packages, which normally cannot be deleted. Documentation update, too.

This commit is actually from thor because connecting to herc does not
work from here. It might be the two bittorrents, though.

ok tg@@
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.4 2005/09/12 22:53:22 tg Exp $ */
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.4 2005/09/12 22:53:22 tg Exp $");
d163 1
a163 1
	    pwarnx("cannot open requirements file `%s'", REQUIRED_BY_FNAME);
d234 1
a234 1
	    printf("Attempting to remove dependency on package `%s'\n", p->name);
d276 1
a276 1
	 pwarnx("couldn't open dependency file `%s'", fname);
d283 1
a283 1
	 pwarnx("couldn't open temp file `%s'", ftmp);
d290 1
a290 1
	 pwarnx("couldn't fdopen temp file `%s'", ftmp);
d302 1
a302 1
	 pwarnx("error changing permission of temp file `%s'", ftmp);
d308 1
a308 1
	 pwarnx("error closing temp file `%s'", ftmp);
d313 1
a313 1
	 pwarnx("error renaming `%s' to `%s'", ftmp, fname);
@


1.4
log
@join tg-ports-devel branch into HEAD
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.2.2.1 2005/09/11 01:05:43 tg Exp $ */
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.2.2.1 2005/09/11 01:05:43 tg Exp $");
d133 19
d154 1
a154 1
	pwarnx("package `%s' is required by these other packages\n"
a166 11
    sanity_check(LogDir);
    cfile = fopen(CONTENTS_FNAME, "r");
    if (!cfile) {
	pwarnx("unable to open '%s' file", CONTENTS_FNAME);
	return 1;
    }
    /* If we have a prefix, add it now */
    if (Prefix)
	add_plist(&Plist, PLIST_CWD, Prefix);
    read_plist(&Plist, cfile);
    fclose(cfile);
@


1.3
log
@Add extended package name globbing for pkg_info and pkg_delete.
This means that you can do stuff like

% pkg_delete libpixman

without knowing the version. If more than one version is installed (for
example with autoconf), pkg_info will just show you the first match while
pkg_delete refuses to work.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.2 2005/05/21 00:16:04 tg Exp $ */
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.2 2005/05/21 00:16:04 tg Exp $");
@


1.2
log
@* db/Makefile [SHOW_ONLY]
	new ifdef; includes <bsd.own.mk> instead of <mirports.sys.mk>
	  (for make with ___DISPLAY_MAKEVARS)
* install/Setup-Interix.sh
	fix PATH
	new MirMake version
* install/Setup.sh
	preliminary support for Interix:
	use BINOWN/BINGRP (via db/Makefile)
	adjust mtree; paths
* install/mirports.osdep.mk-darwin
	_PORTPATH like this is now default
* pkgtools:
	add/extract.c, delete/perform.c, lib/pen.c:
	  no chflags/chattr/chown/statfs on Interix
	create/perform.c: uncomment header not on Interix
	lib/Makefile: use mbcompat (only on Interix)
	lib/rcdb.c: don't acquire lock on Interix (XXX)
	mbcompat/bsd-arc4random.c:
	  fix includes etc.
	  add protos
	  whitespace cleanup
	mbcompat/mktemp.c:
	  conditionalise __warn_references
* pkgtools/pkg/Makefile: don't strip on install
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.1.7.1 2005/03/18 15:47:16 tg Exp $ */
d30 1
d32 1
a32 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.1.7.1 2005/03/18 15:47:16 tg Exp $");
a50 28
static int
trim_end(char *name)
{
   size_t n, m;
   n = strlen(name);
   m = strlen(".tgz");
   if (n > m && strcmp(name+n-m, ".tgz") == 0) {
	name[n-m] = 0;
	return 1;
   }
   m = strlen(".tar.gz");
   if (n > m && strcmp(name+n-m, ".tar.gz") == 0) {
	name[n-m] = 0;
	return 1;
   }
   m = strlen(".cgz");
   if (n > m && strcmp(name+n-m, ".cgz") == 0) {
	name[n-m] = 0;
	return 1;
   }
   m = strlen(".tar");
   if (n > m && strcmp(name+n-m, ".tar") == 0) {
	name[n-m] = 0;
	return 1;
   }
   return 0;
}

d107 15
a121 10
	dbdir = DEF_LOG_DIR;
try_again:
    (void) snprintf(LogDir, sizeof(LogDir), "%s/%s", dbdir, pkg);
    if (!fexists(LogDir)) {
	if (trim_end(pkg))
	    goto try_again;
	else {
	    pwarnx("no such package installed");
	    return 1;
	}
d123 2
d230 1
@


1.2.2.1
log
@merge -rHEAD into development branch

Note for bsiegert@@ please don't use csh prompts in man pages any more
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.3 2005/08/21 20:15:47 bsiegert Exp $ */
a29 1
#include <libgen.h>
d31 1
a31 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/delete/perform.c,v 1.3 2005/08/21 20:15:47 bsiegert Exp $");
d50 28
d134 10
a143 15
       dbdir = DEF_LOG_DIR;

    switch (glob_package(LogDir, sizeof(LogDir), pkg)) {
    case -1:
	pwarnx("error while handling package name");
	return 1;
    case 0:
	pwarnx("no such package installed");
	return 1;
    case 1:
	/* good */
	break;
    default:
	pwarnx("more than one match for package specification");
	return 1;
a144 2
    pkg = strdup(basename(LogDir));

a249 1
    free(pkg);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/**	$MirOS$ */
d24 1
d26 1
d31 1
a31 1
__RCSID("$MirOS$");
d184 1
d198 1
@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
