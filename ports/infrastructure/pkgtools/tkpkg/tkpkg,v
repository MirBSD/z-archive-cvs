head	1.5;
access;
symbols
	bsiegert-cfgfile_BASE:1.4
	bsiegert-cfgfile:1.4.0.2
	MIRBSD_8_BASE:1.1.7.1;
locks; strict;
comment	@# @;


1.5
date	2017.07.20.21.15.55;	author tg;	state Exp;
branches;
next	1.4;
commitid	10059711D89780CE021;

1.4
date	2009.11.22.15.34.16;	author tg;	state Exp;
branches;
next	1.3;
commitid	1004B0959E8012B753D;

1.3
date	2009.08.19.18.30.12;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004A8C44C94C0217DA;

1.2
date	2008.10.12.15.35.22;	author tg;	state Exp;
branches;
next	1.1;
commitid	10048F218B2228D17F9;

1.1
date	2005.03.18.15.47.16;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.18.15.47.16;	author tg;	state Exp;
branches
	1.1.7.1.2.1;
next	;

1.1.7.1.2.1
date	2005.09.10.23.37.04;	author tg;	state dead;
branches;
next	;
commitid	34d943236e025369;


desc
@@


1.5
log
@.lz and .tlz are claimed by lzip, drop most LZMA-Alone support
(one thing in which Lasse and Antonio agree)
@
text
@#!/usr/local/bin/wish8.4 -f
# $MirOS: ports/infrastructure/pkgtools/tkpkg/tkpkg,v 1.3 2009/08/19 18:30:12 tg Exp $
# $OpenBSD: tkpkg,v 1.4 2001/02/27 17:59:48 todd Exp $
# from FreeBSD Id: tkpkg,v 1.4 1997/02/22 16:09:13 peter Exp
#
set pkgname ""
wm title . "Package Installation"
#--------------------------------------------------------------
# The top level main window, consisting of a bar of buttons and a list
# of packages and a description of the current package.
#--------------------------------------------------------------
frame .menu -relief raised -borderwidth 1
frame .frame -borderwidth 4

scrollbar .frame.scroll -relief sunken -command ".frame.list yview"
listbox .frame.list -yscroll ".frame.scroll set" -relief sunken -setgrid 1
pack append .frame .frame.scroll {right filly} \
        .frame.list {left expand fill}

# build the lower window shoing the complete description of a pacage
frame .f -borderwidth 4
text .f.t -width 80 -height 20 -yscrollcommand ".f.s set" -relief sunken

# Initially display instructions in this window.  Erase the
# instructions and show the package description when the user clicks
# on a package.
#
.f.t insert end "Double click on a package above to see its
complete description here."
scrollbar .f.s -relief sunken -command ".f.t yview"
pack append .f .f.s {right filly} .f.t {left expand fill}

bind .frame.list <Double-Button-1> \
    { do_description [selection get] }
pack append .  .menu {top fill} \
   .f {bottom expand fill} \
   .frame {bottom expand fill}

#----------------------------------------------------------------
# Make menu bar:
#----------------------------------------------------------------
button .menu.inst -text "Install" \
   -command "apply_to_pkg \"pkg_add -v\""
button .menu.dein -text "Deinstall" \
   -command "apply_to_pkg \"pkg_delete -v\""
button .menu.installed -text "What is Installed?" \
   -command "list_pkgs \"pkg_info -I -a |tr '	' ' '\""
button .menu.available -text "What can I install?" \
   -command "list_pkgs \"pkg_info -I -c [glob -nocomplain *.{cgz,cxz,tgz,cpio,tar,tar.z,tar.gz,tar.Z}] |tr '	' ' '\""
button .menu.cont -text "Contents?" \
   -command "apply_to_pkg \"pkg_info -d -v\""
button .menu.quit -text "Quit" -command "destroy ."
button .menu.help -text "Help" -command "do_help"

pack append .menu \
  .menu.inst left \
  .menu.dein left \
  .menu.installed left \
  .menu.available left \
  .menu.cont left \
  .menu.quit left \
  .menu.help right
#-------------------------------------------------------
# Display the package description.
#-------------------------------------------------------
proc list_pkgs {s} {
  set line ""
  set f [eval "open {| sh -c \"$s\" } r"]
  .frame.list delete 0 end
  while {[gets $f line] > 0} {
    .frame.list insert end $line
  }
  close $f
}

# display the list of available packages
set archives [glob -nocomplain *.{cgz,cxz,tgz,cpio,tar,tar.z,tar.gz,tar.Z}]
if {$archives == ""} {
  .frame.list delete 0 end
 .frame.list insert end "Warning: no compressed tar archives files found."
} else {
  list_pkgs "pkg_info -I -c $archives |tr '	' ' '"
}

#-------------------------------------------------------
# Display the package description.
#-------------------------------------------------------
proc do_description {s} {
  global pkgname
  regexp {[^ 	]*} $s filename
  set pkgname $filename
  .f.t delete 0.0 end
  set cmd "pkg_info -d $filename |tr -d ''"
  set f [eval "open {| csh -c \"$cmd\" } r"]
  while {![eof $f]} {
    .f.t insert end [read $f]
  }
}
#-------------------------------------------------------
# package install window.
#-------------------------------------------------------
proc do_help {{w .help}} {
  catch {destroy $w}
  toplevel $w
  wm title $w "Help"
  wm iconname $w "Help"
  button $w.ok -text OK -command "destroy $w"
  message $w.t -relief raised -bd 2 \
    -text "You can install, deinstall and list info on the available packages.  To select a package and see its complete description, press mouse button 1 over the package name.  To install a selected package, press the Install button.  To exit, press the \"Quit\" button."
  pack append $w $w.ok {bottom fillx} $w.t {expand fill}
}
#-------------------------------------------------------
# Apply a command to a package.
#-------------------------------------------------------
proc apply_to_pkg {s} {
    apply_to_pkg_err $s ""
}
#-------------------------------------------------------
# Apply a command to a package, with error stream redirection instructions.
#-------------------------------------------------------
proc apply_to_pkg_err {s errredir} {
  global pkgname
  .f.t delete 0.0 end
  if {$pkgname == ""} {
    .f.t insert end "You must double click on a package name first!"
  } else {
    apply_to_pkg_int "$s $pkgname" "2>&1"
  }
}
proc apply_to_pkg_int {s errredir} {
    .f.t delete 0.0 end
    .f.t insert end "Running: $s\n"
    set f [eval "open {| sh -c \"$s $errredir\" } r"]
    while {![eof $f]} {
      .f.t insert end [read $f 64]
    }
}
#-------------------------------------------------------
# Invoke an arbitrary command.
#-------------------------------------------------------
proc do_command {s} {
  .f.t delete 0.0 end
  .f.t insert end "Running: $s\n"
  set f [eval "open {| $s} r"]
  while {![eof $f]} {
    .f.t insert end [read $f 64]
  }
}
# local variables:
# mode: csh
# compile-command: ""
# comment-start: "# "
# comment-start-skip: "# "
# end:
@


1.4
log
@support for the upcoming XZ Utils compression
planned for long, prodded by bsiegert@@
@
text
@d49 1
a49 1
   -command "list_pkgs \"pkg_info -I -c [glob -nocomplain *.{cgz,cxz,clz,tgz,cpio,tar,tar.z,tar.gz,tar.Z}] |tr '	' ' '\""
d77 1
a77 1
set archives [glob -nocomplain *.{cgz,cxz,clz,tgz,cpio,tar,tar.z,tar.gz,tar.Z}]
@


1.3
log
@make this able to handle .cpio and .tar (interestingly enough, some
parts of the code also know .tar.Z but not all) for use on e.g. the
slow platforms (sparc etc) when re-compressing packages on a faster
machine afterwards
@
text
@d2 1
a2 1
# $MirOS: ports/infrastructure/pkgtools/tkpkg/tkpkg,v 1.2 2008/10/12 15:35:22 tg Exp $
d49 1
a49 1
   -command "list_pkgs \"pkg_info -I -c [glob -nocomplain *.{cgz,clz,tgz,cpio,tar,tar.z,tar.gz,tar.Z}] |tr '	' ' '\""
d77 1
a77 1
set archives [glob -nocomplain *.{cgz,clz,tgz,cpio,tar,tar.z,tar.gz,tar.Z}]
@


1.2
log
@Support for LZMA compressed binary packages (experimental!)

Tested:
• tg@@bleu:/usr/ports/archivers/mpczar $ mmake PKG_SUFX=.clz install clean
• tg@@bleu:~ $ sudo pkg_upgrade -fva /usr/ports/Packages/ssfe-20070109-1.clz

Dependencies on LZMA are *not* handled automatically, also you must use
PKG_SUFX=.clz to enable and ensure lzma is installed prior. This is some-
what hacky, but our package tools suck anyway. The infrastructure allows
for other compressors such as bzip2 too (but that one is not much of a
saving compared to lzma (ratio) and gzip (resource usage) so I did *not*
add it), but in a *lot* of places… should unify that or better, rewrite
all of the package tools in mksh… anyway, please test.
@
text
@d2 1
a2 1
# $MirOS: ports/infrastructure/pkgtools/tkpkg/tkpkg,v 1.1.7.1 2005/03/18 15:47:16 tg Exp $
d49 1
a49 1
   -command "list_pkgs \"pkg_info -I -c [glob -nocomplain *.{cgz,clz,tgz,tar.z,tar.gz,tar.Z}] |tr '	' ' '\""
d77 1
a77 1
set archives [glob -nocomplain *.{cgz,clz,tgz,tar.z,tar.gz,tar.Z}]
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# $MirOS$
d49 1
a49 1
   -command "list_pkgs \"pkg_info -I -c [glob -nocomplain *.{cgz,tgz,tar.z,tar.gz,tar.Z}] |tr '	' ' '\""
d77 1
a77 1
set archives [glob -nocomplain *.{cgz,tgz,tar.z,tar.gz,tar.Z}]
@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@


1.1.7.1.2.1
log
@* bring pkg_scan to Attic - we don't support upgrading anyway
* bring tkpkg to Attic... resurrecting is for volunteers
* write a bit more of the installer, to test on MirOS...
@
text
@d2 1
a2 1
# $MirOS: ports/infrastructure/pkgtools/tkpkg/tkpkg,v 1.1.7.1 2005/03/18 15:47:16 tg Exp $
@

