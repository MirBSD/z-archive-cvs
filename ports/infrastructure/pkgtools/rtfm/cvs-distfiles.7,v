head	1.9;
access;
symbols
	bsiegert-cfgfile_BASE:1.6
	bsiegert-cfgfile:1.6.0.2;
locks; strict;
comment	@.\" @;


1.9
date	2018.12.25.19.38.02;	author tg;	state Exp;
branches;
next	1.8;
commitid	1005C22871909EC7FE2;

1.8
date	2016.02.11.20.12.04;	author tg;	state Exp;
branches;
next	1.7;
commitid	10056BCEAFF41919B5B;

1.7
date	2014.01.07.13.07.33;	author tg;	state Exp;
branches;
next	1.6;
commitid	10052CBFC2C13C46573;

1.6
date	2009.11.22.18.23.35;	author tg;	state Exp;
branches;
next	1.5;
commitid	1004B0981B210A68B89;

1.5
date	2009.11.22.15.48.46;	author tg;	state Exp;
branches;
next	1.4;
commitid	1004B095D622ECA4D23;

1.4
date	2008.11.01.22.57.23;	author tg;	state Exp;
branches;
next	1.3;
commitid	100490CDECE38054B7B;

1.3
date	2008.05.25.20.56.38;	author tg;	state Exp;
branches;
next	1.2;
commitid	1004839D28B6A814A50;

1.2
date	2008.04.05.18.24.33;	author tg;	state Exp;
branches;
next	1.1;
commitid	10047F7C3F733A9CF37;

1.1
date	2007.09.23.20.56.29;	author bsiegert;	state Exp;
branches;
next	;
commitid	10046F6D25C65F99F60;


desc
@@


1.9
log
@update from contrib/samples/portmdoc,v 1.11
@
text
@.\" $MirOS: ports/infrastructure/pkgtools/rtfm/cvs-distfiles.7,v 1.8 2016/02/11 20:12:04 tg Exp $
.\"-
.\" Copyright (c) 2007, 2008, 2009, 2010, 2016, 2018 mirabilos
.\" Copyright (c) 2007 Benny Siegert
.\"
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE DEVELOPERS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"-
.\" Try to make GNU groff and AT&T nroff more compatible
.\" * ` generates ‘ in gnroff, so use \`
.\" * ' generates ’ in gnroff, \' generates ´, so use \*(aq
.\" * - generates ‐ in gnroff, \- generates −, so .tr it to -
.\"   thus use - for hyphens and \- for minus signs and option dashes
.\" * ~ is size-reduced and placed atop in groff, so use \*(TI
.\" * ^ is size-reduced and placed atop in groff, so use \*(ha
.\" * \(en does not work in nroff, so use \*(en
.\" * <>| are problematic, so redefine and use \*(Lt\*(Gt\*(Ba
.\" Also make sure to use \& *before* a punctuation char that is to not
.\" be interpreted as punctuation, and especially with two-letter words
.\" but also (after) a period that does not end a sentence (“e.g.\&”).
.\" The section after the "doc" macropackage has been loaded contains
.\" additional code to convene between the UCB mdoc macropackage (and
.\" its variant as BSD mdoc in groff) and the GNU mdoc macropackage.
.\"
.ie \n(.g \{\
.	if \*[.T]ascii .tr \-\N'45'
.	if \*[.T]latin1 .tr \-\N'45'
.	if \*[.T]utf8 .tr \-\N'45'
.	ds <= \[<=]
.	ds >= \[>=]
.	ds Rq \[rq]
.	ds Lq \[lq]
.	ds sL \(aq
.	ds sR \(aq
.	if \*[.T]utf8 .ds sL `
.	if \*[.T]ps .ds sL `
.	if \*[.T]utf8 .ds sR '
.	if \*[.T]ps .ds sR '
.	ds aq \(aq
.	ds TI \(ti
.	ds ha \(ha
.	ds en \(en
.\}
.el \{\
.	ds aq '
.	ds TI ~
.	ds ha ^
.	ds en \(em
.\}
.\"
.\" Implement .Dd with the Mdocdate RCS keyword
.\"
.rn Dd xD
.de Dd
.ie \\$1$Mdocdate: \{\
.	xD \\$2 \\$3, \\$4
.\}
.el .xD \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8
..
.\"
.\" .Dd must come before definition of .Mx, because when called
.\" with -mandoc, it might implement .Mx itself, but we want to
.\" use our own definition. And .Dd must come *first*, always.
.\"
.Dd $Mdocdate: December 25 2018 $
.\"
.\" Check which macro package we use, and do other -mdoc setup.
.\"
.ie \n(.g \{\
.	if \*[.T]utf8 .tr \[la]\*(Lt
.	if \*[.T]utf8 .tr \[ra]\*(Gt
.	ie d volume-ds-1 .ds tT gnu
.	el .ie d doc-volume-ds-1 .ds tT gnp
.	el .ds tT bsd
.\}
.el .ds tT ucb
.\"
.\" Implement .Mx (MirBSD)
.\"
.ie "\*(tT"gnu" \{\
.	eo
.	de Mx
.	nr curr-font \n[.f]
.	nr curr-size \n[.ps]
.	ds str-Mx \f[\n[curr-font]]\s[\n[curr-size]u]
.	ds str-Mx1 \*[Tn-font-size]\%MirBSD\*[str-Mx]
.	if !\n[arg-limit] \
.	if \n[.$] \{\
.	ds macro-name Mx
.	parse-args \$@@
.	\}
.	if (\n[arg-limit] > \n[arg-ptr]) \{\
.	nr arg-ptr +1
.	ie (\n[type\n[arg-ptr]] == 2) \
.	as str-Mx1 \~\*[arg\n[arg-ptr]]
.	el \
.	nr arg-ptr -1
.	\}
.	ds arg\n[arg-ptr] "\*[str-Mx1]
.	nr type\n[arg-ptr] 2
.	ds space\n[arg-ptr] "\*[space]
.	nr num-args (\n[arg-limit] - \n[arg-ptr])
.	nr arg-limit \n[arg-ptr]
.	if \n[num-args] \
.	parse-space-vector
.	print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[Tn-font-size]
.\}
.el .ie "\*(tT"gnp" \{\
.	eo
.	de Mx
.	nr doc-curr-font \n[.f]
.	nr doc-curr-size \n[.ps]
.	ds doc-str-Mx \f[\n[doc-curr-font]]\s[\n[doc-curr-size]u]
.	ds doc-str-Mx1 \*[doc-Tn-font-size]\%MirBSD\*[doc-str-Mx]
.	if !\n[doc-arg-limit] \
.	if \n[.$] \{\
.	ds doc-macro-name Mx
.	doc-parse-args \$@@
.	\}
.	if (\n[doc-arg-limit] > \n[doc-arg-ptr]) \{\
.	nr doc-arg-ptr +1
.	ie (\n[doc-type\n[doc-arg-ptr]] == 2) \
.	as doc-str-Mx1 \~\*[doc-arg\n[doc-arg-ptr]]
.	el \
.	nr doc-arg-ptr -1
.	\}
.	ds doc-arg\n[doc-arg-ptr] "\*[doc-str-Mx1]
.	nr doc-type\n[doc-arg-ptr] 2
.	ds doc-space\n[doc-arg-ptr] "\*[doc-space]
.	nr doc-num-args (\n[doc-arg-limit] - \n[doc-arg-ptr])
.	nr doc-arg-limit \n[doc-arg-ptr]
.	if \n[doc-num-args] \
.	doc-parse-space-vector
.	doc-print-recursive
..
.	ec
.	ds sP \s0
.	ds tN \*[doc-Tn-font-size]
.\}
.el \{\
.	de Mx
.	nr cF \\n(.f
.	nr cZ \\n(.s
.	ds aa \&\f\\n(cF\s\\n(cZ
.	if \\n(aC==0 \{\
.		ie \\n(.$==0 \&MirBSD\\*(aa
.		el .aV \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8 \\$9
.	\}
.	if \\n(aC>\\n(aP \{\
.		nr aP \\n(aP+1
.		ie \\n(C\\n(aP==2 \{\
.			as b1 \&MirBSD\ #\&\\*(A\\n(aP\\*(aa
.			ie \\n(aC>\\n(aP \{\
.				nr aP \\n(aP+1
.				nR
.			\}
.			el .aZ
.		\}
.		el \{\
.			as b1 \&MirBSD\\*(aa
.			nR
.		\}
.	\}
..
.\}
.\"-
.Dt CVS\-DISTFILES 7
.Os
.Sh NAME
.Nm cvs\-distfiles
.Nd fetch distfiles for MirPorts via CVS
.Sh SYNOPSIS
.Fd CVS_DISTREPO=:ext:cvs.example.com:/cvs
.Fd CVS_DISTDATE=2007\-09\-22
.Fd CVS_DISTTAGS=1_0_release
.Fd CVS_DISTMODS=src
.Pp
.Fd SVN_DISTPATH=https://svn.example.com/projects/foo/trunk
.Fd SVN_DISTFILE=foo\-svn
.Fd SVN_DISTREV=123
.Fd SVN_DISTDIR=foo
.Sh DESCRIPTION
This document describes how the
.Dq fetch distfile via CVS
.Pq or Subversion
method in MirPorts operates.
.Ss The problem
Often, software is not distributed as nicely as we would like
to have it \*(en in a versioned tarball, gzip'd or compress'd.
Sometimes, tarballs are not versioned, broken, or just too old.
But almost universally, source code is available via a revision control
system \*(en such as CVS or Subversion.
.Pp
This manual documents a method to fetch sources via CVS, while
retaining control over correct checksums etc.
.Ss From a user's point of view: CVS
To enable the _CVS_DISTF fetch method, you have to put a few
liness into your port Makefile.
As usual, learning by an example is
.Dq the way to go
\*(en prominent
examples are the three ports essentials/pkgtools, games/bsdgames,
and devel/libtool.
.Pp
The user interface consists of a few variables you can set:
.Bl -tag -width CVS_DISTREPO
.It Ev CVS_DISTREPO
the value of the \-d option to cvs
.It Ev CVS_DISTDATE
.Pq optional
value of \-D option to cvs checkout
.It Ev CVS_DISTTAGS
.Pq optional
value of \-r option to cvs checkout
.It Ev CVS_DISTMODS
module(s) to check out, separated by space
.It Ev CVS_DISTFILE
.Pq optional
file name prefix
.El
.Pp
Note that if
.Ev CVS_DISTREPO
does not start with a colon,
.Ev CVSREADONLYFS
is set automatically, which is not compatible with the
.Ox
version of anoncvssh.
.Pp
Note: while both CVS_DISTDATE and CVS_DISTTAGS are optional,
it is required to set one of them because HEAD checkouts are
a moving target and thus not supported benefitting checksumming.
.Pp
Setting CVS_DISTREPO${_i} enables _CVS_DISTF operation on a
specific distfile.
${_i} can be empty or a single decimal digit, in case you need more
than one distfile.
.Pp
Once operation has started, _CVS_DISTF${_i} is set to the name
of the file created in ${FULLDISTDIR}
.Po Pa /usr/ports/Distfiles Pc ,
in the following scheme: basename[\-dateext][\-tagext].mcz
.Pp
The basename is CVS_DISTFILE${_i}, or (if unset) CVS_DISTMODS${_i}
with dashes removed.
The dateext (only if CVS_DISTDATE is set) is exactly this, but with
all non-numerical parts removed.
The tagext (if CVS_DISTTAGS) is the tag, with all characters except
digits, letters, dash or underscore removed, and a capital T prepended.
This ensures in almost all cases that _CVS_DISTF is unique.
.Pp
Then, _CVS_FETCH${_i} is set to a command to
.Dq retrieve the file
if it is not yet there.
If any _CVS_DISTF${_i} is set, archivers/mpczar is pulled in
as a fetch dependency automatically.
.Pp
All _CVS_DISTF${_i} are added to _DISTFILES automatically, so there
is no need to do this.
Now you only need to set a PKGNAME (unless the default is fine
to you) and you are done.
.Ss From a user's point of view: Subversion
To enable the _CVS_DISTF fetch method, you have to put a few
liness into your port Makefile.
As usual, learning by an example is
.Dq the way to go
\*(en prominent
example is the port
.Pa sysutils/vesautils .
.Pp
The user interface consists of a few variables you can set:
.Bl -tag -width CVS_DISTREPO
.It Ev SVN_DISTDIR
Name of the directory to check out into (top-level package dir).
Defaults to the basename of
.Ev SVN_DISTREPO .
.It Ev SVN_DISTFILE
Optional file name prefix.
Defaults to the basename of
.Ev SVN_DISTDIR .
.It Ev SVN_DISTREPO
Full path to the repository and subdirectory to check out.
.It Ev SVN_DISTREV
Revision number to check out.
.El
.Pp
Setting SVN_DISTREPO${_i} enables _CVS_DISTF operation on a
specific distfile.
${_i} can be empty or a single decimal digit, in case you need more
than one distfile.
.Pp
Once operation has started, _CVS_DISTF${_i} is set to the name
of the file created in ${FULLDISTDIR}
.Po Pa /usr/ports/Distfiles Pc ,
in the following scheme: basename\-revext.mcz
.Pp
The basename is SVN_DISTFILE${_i}.
The revext is the letter
.Sq r
followed by the numerical SVN_DISTREV revision.
This ensures in almost all cases that _CVS_DISTF is unique.
.Pp
Then, _CVS_FETCH${_i} is set to a command to
.Dq retrieve the file
if it is not yet there.
If any _CVS_DISTF${_i} is set, archivers/mpczar and devel/subversion
are pulled in as fetch dependencies automatically.
.Pp
All _CVS_DISTF${_i} are added to _DISTFILES automatically, so there
is no need to do this.
Now you only need to set a PKGNAME (unless the default is fine
to you) and you are done.
.Ss More interesting possibilities
The infrastructure automatically defaults to setting the (first)
distribution directory:
.D1 WRKDIST?=${WRKDIR}/${CVS_DISTMODS}
.D1 WRKDIST?=${WRKDIR}/${SVN_DISTDIR}
.Pp
If CVS_DISTMODS (without ${_i}) contains more than one module, you
must, consequentially, set WRKDIST yourself (also if you differ from
what the infrastructure thinks is a sensible default).
.Pp
The package name is a requirement which still must be set manually,
unless the new default of ${_CVS_DISTF:R}\-${DASH_VER} (CVS) or
${SVN_DISTFILE}\-${SVN_DISTREV}\-${DASH_VER} (SVN) suits your
port, which will cover 95% of the cases.
FOR CVS, THIS ONLY WORKS IF YOU USE CVS_DISTDATE *AND* *NOT* CVS_DISTTAGS.
Another example is to just set a sensible one yourself, like libtool
does (which pulls from the branch\-1\-5 tag):
.D1 PKGNAME=libtool\-1.5.23a.${CVS_DISTDATE:S!/!!g}\-${DASH_VER}
.Pp
Of course, this needs more maintenance.
.Ss What is working behind the curtains
The infrastructure defines a target ${FULLDISTDIR}/${_CVS_DISTF${_i}}
for each file, which is invoked by 
.Sq Cm mmake Ar fetch
automatically and only if the file does not exist.
However, the target itself also checks for the existence of the
distfile, because in some rare cases all dependencies are invoked.
.Pp
First thing is to execute a
.Sq Cm mmake Ar fetch\-depends
so that mpczar is only built if one of the _CVS_DISTF files is missing,
and subversion is only built if needed as well.
This is done already inside the check for existence.
.Pp
After that, _CVS_FETCH${_i} is invoked on the file and the size is
checked (cloned from a
.Dq normal
fetch process).
.Pp
Checksumming, extracting and so on are processed with no difference;
the .mcz file extension yielded an addition to EXTRACT_CASES, of course.
.Pp
Operation of _CVS_FETCH:
.Pp
The script
.Pa /usr/ports/infrastructure/scripts/mkmcz
is invoked with
a few parameters (target, repo, date, tag, modules) and
then creates said *.mcz file, as follows:
.Pp
Prepare a temporary directory (mkdtemp), change into it, invoke
.Sq Cm cvs Ar checkout ,
or
.Sq Cm svn Ar checkout ,
call mpczar on the current directory with an appropriate set of
.Dq ignore files
.Pq So CVS Sc and So .svn Sc .
.Pp
.Xr mpczar 1
then archives all files (no directories, pipes, devices,
symbolic links, and other funky stuff) in ASCII sort order into an
System V CPIO archive with CRC, using the new \-M option to
.Xr cpio 1 ,
which tells it to
.Dq normalise
the archive: serialise inode numbers,
zero out mtime, ownership and device information, and, for efficiency,
store hard links' file contents only once.
This is safe in the scenario (it would not be safe if one of the files
to pack had a hard link to outside the area which is packed, because
its link count is increased by one then).
The CPIO archive is LZ compressed using the
.Sq mpczar.z
helper (really just
.Xr compress 1
in disguise), which is a mathematical function.
.Pp
This achieves that the same unordered set of input files always
creates the same archive (with the same checksum).
.Sh SEE ALSO
.Xr bsd.port.mk 5 ,
.Xr ports 7 ,
.Xr mpczar 1 .
@


1.8
log
@merge most recent portmdoc into a̲l̲l̲ of its users; fixup .\& into \&. like
in mksh(1), for Schillix ditroff
@
text
@d1 1
a1 1
.\" $MirOS: ports/infrastructure/pkgtools/rtfm/cvs-distfiles.7,v 1.6 2009/11/22 18:23:35 tg Exp $
d3 1
a3 1
.\" Copyright (c) 2007, 2008, 2009, 2010, 2016 mirabilos
d84 1
a84 1
.Dd $Mdocdate: November 22 2009 $
d92 1
d105 1
a105 1
.	ds str-Mx1 \*[Tn-font-size]\%MirOS\*[str-Mx]
d131 32
d169 1
a169 1
.		ie \\n(.$==0 \&MirOS\\*(aa
d175 1
a175 1
.			as b1 \&MirOS\ #\&\\*(A\\n(aP\\*(aa
d183 1
a183 1
.			as b1 \&MirOS\\*(aa
@


1.7
log
@-llvm
@
text
@d3 1
a3 1
.\" Copyright (c) 2007, 2008, 2009 Thorsten Glaser
d36 4
d86 1
a86 1
.\" Check which macro package we use
d89 2
@


1.6
log
@fix more manpages
@
text
@d1 1
a1 1
.\" $MirOS: ports/infrastructure/pkgtools/rtfm/cvs-distfiles.7,v 1.5 2009/11/22 15:48:46 tg Exp $
d252 2
a253 1
examples are the two ports lang/llvm and sysutils/vesautils.
@


1.5
log
@update to contrib/samples/portmdoc,v 1.6
@
text
@d1 1
a1 1
.\" $MirOS: ports/infrastructure/pkgtools/rtfm/cvs-distfiles.7,v 1.4 2008/11/01 22:57:23 tg Exp $
d80 1
a80 1
.Dd $Mdocdate: November 17 2009 $
d151 1
a151 1
.Dt CVS-DISTFILES 7
d154 1
a154 1
.Nm cvs-distfiles
@


1.4
log
@implement and document SVN_DISTFILE fetch method (re-using _CVS_DISTF
stuff) after, what, like two years?
@
text
@d1 1
a1 1
.\" $MirOS: ports/infrastructure/pkgtools/rtfm/cvs-distfiles.7,v 1.3 2008/05/25 20:56:38 tg Exp $
d3 1
a3 1
.\" Copyright (c) 2007, 2008 Thorsten Glaser
d29 3
a31 3
.\" * ` generates ‘ in groff, so use \`
.\" * ' generates ’ in groff, \' generates ´, so use \*(aq
.\" * - generates ‐ in groff, \- generates −, fixed in tmac/mdoc/doc-groff
d36 3
d41 13
d80 9
a88 1
.Dd $Mdocdate: May 25 2008 $
d92 31
a122 7
.de Mx
.nr cF \\n(.f
.nr cZ \\n(.s
.ds aa \&\f\\n(cF\s\\n(cZ
.if \\n(aC==0 \{\
.	ie \\n(.$==0 \&MirOS\\*(aa
.	el .aV \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8 \\$9
d124 21
a144 6
.if \\n(aC>\\n(aP \{\
.	nr aP \\n(aP+1
.	ie \\n(C\\n(aP==2 \{\
.		as b1 \&MirOS\ #\&\\*(A\\n(aP\\*(aa
.		ie \\n(aC>\\n(aP \{\
.			nr aP \\n(aP+1
a146 5
.		el .aZ
.	\}
.	el \{\
.		as b1 \&MirOS\\*(aa
.		nR
d148 1
a149 1
..
@


1.3
log
@use :ext: in front of OpenBSD’s anoncvs mirror, and document
@
text
@d1 1
a1 1
.\" $MirOS: ports/infrastructure/pkgtools/rtfm/cvs-distfiles.7,v 1.2 2008/04/05 18:24:33 tg Exp $
d64 1
a64 1
.Dd $Mdocdate: April 5 2008 $
d100 1
a100 1
.Fd CVS_DISTDATE=2007-09-22
d103 5
d109 4
a112 2
This document describes how the "fetch distfile via CVS" method
in MirPorts operates.
d115 1
a115 1
to have it - in a versioned tarball, gzip'd or compress'd.
d118 1
a118 1
system - such as CVS.
d122 2
a123 2
.Ss From a user's point of view
To enable the CVS_DISTF fetch method, you have to put a few
d125 3
a127 1
As usual, learning by an example is "the way to go" - prominent
d134 1
a134 1
the value of the -d option to cvs
d137 1
a137 1
value of -D option to cvs checkout
d140 1
a140 1
value of -r option to cvs checkout
d160 1
a160 1
Setting CVS_DISTREPO${_i} enables CVS_DISTF operation on a
d166 3
a168 2
of the file created in ${FULLDISTDIR} (/usr/ports/Distfiles),
in the following scheme: basename[-dateext][-tagext].mcz
d178 2
a179 1
Then, _CVS_FETCH${_i} is set to a command to "retrieve the file"
d181 2
a182 3
If _CVS_DISTF (empty modifier) is set, archivers/mpczar is pulled in
as a fetch dependency automatically, so you must make sure that, if
multiple distfiles, the first slot for CVS_DISTF is used.
d186 52
a237 1
Now you only need to set a PKGNAME and you are done.
d239 2
a240 2
The infrastructure automatically defaults to setting the (first) di-
stribution directory:
d242 1
d249 2
a250 1
unless the new default of ${_CVS_DISTF:R}-${DASH_VER} suits your
d252 1
a252 1
THIS ONLY WORKS IF YOU USE CVS_DISTDATE *AND* *NOT* CVS_DISTTAGS.
d254 2
a255 2
does (which pulls from the branch-1-5 tag):
.D1 PKGNAME=libtool-1.5.23a.${CVS_DISTDATE:S!/!!g}-${DASH_VER}
d267 3
a269 2
.Sq Cm mmake Ar fetch-depends
so that mpczar is only built if one of the CVS_DISTF files is missing.
d273 3
a275 1
checked (cloned from a "normal" fetch process).
d282 4
a285 3
The script /usr/ports/infrastructure/scripts/mkmcz is invoked with
a few parameters (target, repo, date, tag, modules) - note that it
is already prepared for an SVN_DISTF action yet not tested - and
d290 2
d293 1
a293 1
"ignore files" 
d299 1
a299 1
System V CPIO archive with CRC, using the new -M option to
d301 5
a305 3
which tells it to "normalise" the archive: serialise inode numbers,
zero out mtime, ownership and device information, and, for effi-
ciency, store hard links' file contents only once.
d309 3
a311 2
The CPIO archive is LZ compressed using the 'mpczar.z' helper (really
just
a316 14
.Ss Adding subversion support
SVN_DISTF support would be straight-forward but needs to be tested.
Basically, do a
.Sq Cm less Pa /usr/ports/infrastructure/mk/bsd.port.mk
and a
.Sq Ic /CVS ,
then clone everything you find.
If you pass
.Fl s
to mpczar as very first argument (and don't change the others)
it calls svn instead of cvs.
.Pp
Because I (tg@@) do not support, trust, or endorse subversion, I will
not add such a thing.
@


1.2
log
@+= contrib/samples/portmdoc,v 1.3
@
text
@d1 1
a1 1
.\" $MirOS: ports/infrastructure/pkgtools/rtfm/cvs-distfiles.7,v 1.1 2007/09/23 20:56:29 bsiegert Exp $
d3 1
a3 1
.\" Copyright (c) 2007 Thorsten Glaser
d64 1
a64 2
.\".Dd $Mdocdate: March 14 2008 $
.Dd September 22, 2007
d99 1
a99 1
.Fd CVS_DISTREPO=cvs.example.com:/cvs
d139 8
@


1.1
log
@Enough with this "see the comments at the end of the source file" nonsense.
Very roughly convert the comments, mostly unchanged, to mdoc.

While here, update the bsd.port.mk manpage somewhat. Document modbuild
configure style. Documentation of "mmake upgrade" and especially "mmake
reupgrade" is missing.
@
text
@d1 2
a2 2
.\" $MirOS$
.\"
d27 32
d60 5
d66 28
@

