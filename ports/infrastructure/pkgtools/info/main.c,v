head	1.2;
access;
symbols
	bsiegert-cfgfile_BASE:1.2
	bsiegert-cfgfile:1.2.0.2
	MIRBSD_8_BASE:1.1.7.1;
locks; strict;
comment	@ * @;


1.2
date	2006.12.09.17.34.38;	author bsiegert;	state Exp;
branches
	1.2.2.1;
next	1.1;
commitid	100457AF361062FCEC7;

1.1
date	2005.03.18.15.47.16;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.2.2.1
date	2009.12.29.17.09.31;	author bsiegert;	state Exp;
branches;
next	1.2.2.2;
commitid	1004B3A36D83259360D;

1.2.2.2
date	2010.03.07.15.56.02;	author bsiegert;	state Exp;
branches;
next	;
commitid	1004B93CC9F4FA9DC45;

1.1.7.1
date	2005.03.18.15.47.16;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Implement a new "-P" option for pkg_info to show the +DEPENDS file if it
exists. Enabled by default in "pkg_info -v".

If you have upgraded your pkgtools in the last few weeks, you might have
noticed that forward dependencies are now saved in +DEPENDS files _and_ in
the plist. In the future, +DEPENDS will take precedence.
@
text
@/**	$MirOS: ports/infrastructure/pkgtools/info/main.c,v 1.1.7.1 2005/03/18 15:47:16 tg Exp $ */
/*	$OpenBSD: main.c,v 1.15 2003/07/04 17:31:19 avsm Exp $	*/

/*
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 18 July 1993
 *
 * This is the add module.
 */

#include <err.h>
#include "lib.h"
#include "info.h"

__RCSID("$MirOS: ports/infrastructure/pkgtools/info/main.c,v 1.1.7.1 2005/03/18 15:47:16 tg Exp $");

static char Options[] = "acDde:fIikLl:mPpqRrsvh";

int	Flags		= 0;
bool	AllInstalled	= false;
bool	Quiet		= false;
const char *InfoPrefix	= "";
char PlayPen[FILENAME_MAX];
size_t PlayPenSize	= sizeof(PlayPen);
char *CheckPkg		= NULL;

static __dead void usage(void);

int
main(int argc, char **argv)
{
    int ch;
    char **pkgs, **start;

    pkgs = start = argv;
    while ((ch = getopt(argc, argv, Options)) != -1)
	switch(ch) {
	case 'a':
	    AllInstalled = true;
	    break;

	case 'c':
	    Flags |= SHOW_COMMENT;
	    break;

	case 'D':
	    Flags |= SHOW_DISPLAY;
	    break;

	case 'd':
	    Flags |= SHOW_DESC;
	    break;

	case 'e':
	    CheckPkg = optarg;
	    break;

	case 'f':
	    Flags |= SHOW_PLIST;
	    break;

	case 'I':
	    Flags |= SHOW_INDEX;
	    break;

	case 'i':
	    Flags |= SHOW_INSTALL;
	    break;

	case 'k':
	    Flags |= SHOW_DEINSTALL;
	    break;

	case 'L':
	    Flags |= SHOW_FILES;
	    break;

	case 'l':
	    InfoPrefix = optarg;
	    break;

	case 'm':
	    Flags |= SHOW_MTREE;
	    break;

	case 'P':
	    Flags |= SHOW_DEPENDS;
	    break;

	case 'p':
	    Flags |= SHOW_PREFIX;
	    break;

	case 'q':
	    Quiet = true;
	    break;

	case 'R':
	    Flags |= SHOW_REQBY;
	    break;

	case 'r':
	    Flags |= SHOW_REQUIRE;
	    break;

	case 's':
	    Flags |= SHOW_SAMPLE;
	    break;

	case 'v':
	    Verbose = true;
	    /* Reasonable definition of 'everything' */
	    Flags = SHOW_COMMENT | SHOW_DESC | SHOW_DEPENDS | SHOW_PLIST |
		SHOW_INSTALL | SHOW_DEINSTALL | SHOW_REQUIRE | SHOW_DISPLAY |
		SHOW_MTREE | SHOW_REQBY;
	    break;

	case 'h':
	case '?':
	default:
	    usage();
	    /* NOTREACHED */
	}

    argc -= optind;
    argv += optind;

    if (argc == 0 && !Flags) {
	/* No argument or flags specified - assume -Ia */
	Flags = SHOW_INDEX;
	AllInstalled = true;
    }

    /* Set some reasonable defaults */
    if (!Flags)
	Flags = SHOW_COMMENT | SHOW_DESC | SHOW_REQBY;

    /* Get all the remaining package names, if any */
    while (*argv)
	*pkgs++ = *argv++;

    /* If no packages, yelp */
    if (pkgs == start && !AllInstalled && !CheckPkg)
	pwarnx("missing package name(s)"), usage();
    *pkgs = NULL;
    return pkg_perform(start);
}

static __dead void
usage(void)
{
    fprintf(stderr, "usage: %s\nusage: %s\n",
	"pkg_info [-cDdfIikLmpqRrvh] [-e package] [-l prefix] pkg-name ...",
	"pkg_info -a [flags]");
    exit(1);
}
@


1.2.2.1
log
@Experimental support for the config file in pkg_info and pkg_add. Packages
given as command-line arguments are found in the paths specified in "Source"
lines. Tested in pkg_info:

% pkg_info tiff-cxx-3.7.4-1

finds the uninstalled package in /usr/ports/Packages.

Oh, and PKG_PATH support is dropped for now.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/info/main.c,v 1.2 2006/12/09 17:34:38 bsiegert Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/info/main.c,v 1.2 2006/12/09 17:34:38 bsiegert Exp $");
a46 2
    cfg_read_config(NULL); /* for fileFindByPath */

@


1.2.2.2
log
@Finally, the first real use for the srclist code I implemented the other day:
"pkg_info -E pkgspec" looks for packages matching the spec in the installed
ones and the source list, and prints a list.
@
text
@d1 1
a1 1
/**	$MirOS: ports/infrastructure/pkgtools/info/main.c,v 1.2.2.1 2009/12/29 17:09:31 bsiegert Exp $ */
d27 1
a27 1
__RCSID("$MirOS: ports/infrastructure/pkgtools/info/main.c,v 1.2.2.1 2009/12/29 17:09:31 bsiegert Exp $");
d29 1
a29 1
static char Options[] = "acDdE:e:fIikLl:mPpqRrsvh";
a37 1
char *FindPkg		= NULL;
a67 4
	case 'E':
	    FindPkg = optarg;
	    break;

d157 1
a157 1
    if (pkgs == start && !AllInstalled && !CheckPkg && !FindPkg)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/**	$MirOS$ */
d27 1
a27 1
__RCSID("$MirOS$");
d29 1
a29 1
static char Options[] = "acDde:fIikLl:mpqRrsvh";
d98 4
d125 3
a127 3
	    Flags = SHOW_COMMENT | SHOW_DESC | SHOW_PLIST | SHOW_INSTALL |
		SHOW_DEINSTALL | SHOW_REQUIRE | SHOW_DISPLAY | SHOW_MTREE |
		SHOW_REQBY;
@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
