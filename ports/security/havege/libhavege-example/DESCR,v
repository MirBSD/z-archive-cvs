head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2018.10.07.01.10.05;	author tg;	state Exp;
branches;
next	1.2;
commitid	1005BB95CA10BF418E8;

1.2
date	2008.07.10.15.16.44;	author tg;	state Exp;
branches;
next	1.1;
commitid	100487627DE5F83B56D;

1.1
date	2008.07.04.19.58.16;	author tg;	state Exp;
branches;
next	;
commitid	100486E80AF14F5070F;


desc
@@


1.3
log
@spelling cleanup: “programme” is distinct from “program”; even in
British English, the latter is used for computer programs, while
the former serves for things like the TV programme, or a programme
to plant trees
@
text
@Short program to read from libhavege PRNG 16 KiB at ~16 Hz,
then write 16 bytes to the kernel buffer, the remaining bytes
(for inspection e.g.) to standard output.

The following invocation works approximately like cprng(8):
$ mksh -T- -c 'libhavege-example &'
@


1.2
log
@'mksh -T-' automatically redirects fd #0, #1, and #2 to /dev/null,
so unify and (for non-mbsd) fix the description
@
text
@d1 1
a1 1
Short programme to read from libhavege PRNG 16 KiB at ~16 Hz,
@


1.1
log
@hi HAVEGE, just another PRNG with a truerand()-similar principle,
and a Q&D example tool which can do something similar to cprng(8)
@
text
@d6 1
a6 1
$ mksh -T- -c 'libhavege-example >&- &'
@

