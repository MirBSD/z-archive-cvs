head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.03.09.17.23.02;	author tg;	state Exp;
branches;
next	1.1;
commitid	10047D41CAA7E715397;

1.1
date	2005.03.18.15.47.41;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.18.15.47.41;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@bulk convert FLAVOR to FLAVOUR; nuke unused file; convert to $Mdocdate
@
text
@Icon is a program language that looks superficially like Pascal,
but which supports generators. It also include some very reasonable
X11 support.

The compiler for icon is highly experimental, and not very wieldy.
- it does not support separate compilation.
- it creates somewhat largish C files for all but the smallest projects.
For instance, an icon project of 3000 lines translates to a C file of
90000 lines.

It does feature some static type analysis, which occasionally causes bugs,
as not all rules in the languages have been checked. Unfortunately, it
does not feature specialized code for arithmetic, where it would really go
fast if it were using C arithmetic.

Nonetheless, the resulting code is about twice as fast as the interpreted
code.

There is a no_x11 flavour, that does not require X11 to run.
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
There is a no_x11 flavor, that does not require X11 to run.
@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
