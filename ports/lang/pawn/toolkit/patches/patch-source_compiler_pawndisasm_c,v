head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 tg:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2008.08.08.15.53.57;  author tg;  state Exp;
branches 1.1.1.1;
next     ;
commitid        100489C6BDF38E32927;

1.1.1.1
date     2008.08.08.15.53.57;  author tg;  state Exp;
branches ;
next     ;
commitid        100489C6BDF38E32927;


desc
@@



1.1
log
@Initial revision
@
text
@$MirOS$
--- source/compiler/pawndisasm.c.orig	Thu Mar  6 13:17:51 2008
+++ source/compiler/pawndisasm.c	Fri Aug  8 13:06:26 2008
@@@@ -25,6 +25,7 @@@@
 #include <stdlib.h>
 #include <string.h>
 #include "../amx/amx.h"
+#include "../amx/osdefs.h"
 
 static FILE *fpamx;
 static AMX_HEADER amxhdr;
@@@@ -272,7 +273,7 @@@@ static OPCODE opcodelist[] = {
 
 void print_opcode(FILE *ftxt,cell opcode,cell cip)
 {
-  fprintf(ftxt,"%08lx  %s ",cip,opcodelist[(int)(opcode &0x0000ffff)].name);
+  fprintf(ftxt,"%08lx  %s ",(unsigned long)cip,opcodelist[(int)(opcode &0x0000ffff)].name);
 }
 
 cell parm0(FILE *ftxt,const cell *params,cell opcode,cell cip)
@@@@ -285,42 +286,42 @@@@ cell parm0(FILE *ftxt,const cell *params
 cell parm1(FILE *ftxt,const cell *params,cell opcode,cell cip)
 {
   print_opcode(ftxt,opcode,cip);
-  fprintf(ftxt,"%08lx\n",*params);
+  fprintf(ftxt,"%08lx\n",(unsigned long)*params);
   return 2;
 }
 
 cell parm2(FILE *ftxt,const cell *params,cell opcode,cell cip)
 {
   print_opcode(ftxt,opcode,cip);
-  fprintf(ftxt,"%08lx %08lx\n",params[0],params[1]);
+  fprintf(ftxt,"%08lx %08lx\n",(unsigned long)params[0],(unsigned long)params[1]);
   return 3;
 }
 
 cell parm3(FILE *ftxt,const cell *params,cell opcode,cell cip)
 {
   print_opcode(ftxt,opcode,cip);
-  fprintf(ftxt,"%08lx %08lx %08lx\n",params[0],params[1],params[2]);
+  fprintf(ftxt,"%08lx %08lx %08lx\n",(unsigned long)params[0],(unsigned long)params[1],(unsigned long)params[2]);
   return 4;
 }
 
 cell parm4(FILE *ftxt,const cell *params,cell opcode,cell cip)
 {
   print_opcode(ftxt,opcode,cip);
-  fprintf(ftxt,"%08lx %08lx %08lx %08lx\n",params[0],params[1],params[2],params[3]);
+  fprintf(ftxt,"%08lx %08lx %08lx %08lx\n",(unsigned long)params[0],(unsigned long)params[1],(unsigned long)params[2],(unsigned long)params[3]);
   return 5;
 }
 
 cell parm5(FILE *ftxt,const cell *params,cell opcode,cell cip)
 {
   print_opcode(ftxt,opcode,cip);
-  fprintf(ftxt,"%08lx %08lx %08lx %08lx %08lx\n",params[0],params[1],params[2],params[3],params[4]);
+  fprintf(ftxt,"%08lx %08lx %08lx %08lx %08lx\n",(unsigned long)params[0],(unsigned long)params[1],(unsigned long)params[2],(unsigned long)params[3],(unsigned long)params[4]);
   return 6;
 }
 
 cell parm1_p(FILE *ftxt,const cell *params,cell opcode,cell cip)
 {
   print_opcode(ftxt,opcode,cip);
-  fprintf(ftxt,"%08lx\n",opcode>>16);
+  fprintf(ftxt,"%08lx\n",(unsigned long)(opcode>>16));
   return 1;
 }
 
@@@@ -363,21 +364,21 @@@@ cell do_proc(FILE *ftxt,const cell *para
 cell do_call(FILE *ftxt,const cell *params,cell opcode,cell cip)
 {
   print_opcode(ftxt,opcode,cip);
-  fprintf(ftxt,"%08lx\n",*params+cip);
+  fprintf(ftxt,"%08lx\n",(unsigned long)(*params+cip));
   return 2;
 }
 
 cell do_jump(FILE *ftxt,const cell *params,cell opcode,cell cip)
 {
   print_opcode(ftxt,opcode,cip);
-  fprintf(ftxt,"%08lx\n",*params+cip);
+  fprintf(ftxt,"%08lx\n",(unsigned long)(*params+cip));
   return 2;
 }
 
 cell do_switch(FILE *ftxt,const cell *params,cell opcode,cell cip)
 {
   print_opcode(ftxt,opcode,cip);
-  fprintf(ftxt,"%08lx\n",*params+cip);
+  fprintf(ftxt,"%08lx\n",(unsigned long)(*params+cip));
   return 2;
 }
 
@@@@ -388,9 +389,9 @@@@ cell casetbl(FILE *ftxt,const cell *para
 
   print_opcode(ftxt,opcode,cip);
   num=params[0]+1;
-  fprintf(ftxt,"%08lx %08lx\n",params[0],params[1]+cip+sizeof(cell));
+  fprintf(ftxt,"%08lx %08lx\n",(unsigned long)params[0],(unsigned long)(params[1]+cip+sizeof(cell)));
   for (idx=1; idx<num; idx++)
-    fprintf(ftxt,"                  %08lx %08lx\n",params[2*idx],params[2*idx+1]+cip+(2*idx+1)*sizeof(cell));
+    fprintf(ftxt,"                  %08lx %08lx\n",(unsigned long)params[2*idx],(unsigned long)(params[2*idx+1]+cip+(2*idx+1)*sizeof(cell)));
   return 2*num+1;
 }
 
@@@@ -401,9 +402,9 @@@@ cell icasetbl(FILE *ftxt,const cell *par
 
   print_opcode(ftxt,opcode,cip);
   num=params[0]+1;
-  fprintf(ftxt,"%08lx %08lx\n",params[0],params[1]);
+  fprintf(ftxt,"%08lx %08lx\n",(unsigned long)params[0],(unsigned long)params[1]);
   for (idx=1; idx<num; idx++)
-    fprintf(ftxt,"                  %08lx %08lx\n",params[2*idx],params[2*idx+1]);
+    fprintf(ftxt,"                  %08lx %08lx\n",(unsigned long)params[2*idx],(unsigned long)params[2*idx+1]);
   return 2*num+1;
 }
 
@@@@ -569,7 +570,7 @@@@ int main(int argc,char *argv[])
       } /* if */
       fprintf(fplist,"\n%08lx  ",(cell)(cip-code)*sizeof(cell)-(amxhdr.dat-amxhdr.cod));
     } /* if */
-    fprintf(fplist,"%08lx ",*cip);
+    fprintf(fplist,"%08lx ",(unsigned long)*cip);
     addchars(name,*cip,count);
     count=(count+1) % 4;
     cip++;
@


1.1.1.1
log
@Add a couple of ports required for the customer whose job I'll now be
handling: the Pawn scripting language (of which E17's Embryo is a fork),
a gtk-server binary port (for quick testing; we'll probably want a na-
tive one in both GTK+1.2 and GTK+2 flavours), and libffi from base-gcj.
@
text
@@
