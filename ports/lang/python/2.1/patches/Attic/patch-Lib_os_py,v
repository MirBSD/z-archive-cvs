head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2005.11.04.14.02.35;	author tg;	state dead;
branches;
next	1.1;
commitid	35cd436b691eab9c;

1.1
date	2005.03.18.15.47.49;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.18.15.47.49;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Preliminary commit, to be ok'd by bsiegert@@ later
* remove Python 2.1
* remove Python 2.2
* make the Python 2.3 Makefile easier by shoving stuff into Makefile.inc
* sync patch-configure_in with OpenBSD
  + cc -shared for a.out platforms on 3.8+
  + support for 3.7, 3.8
* add RCS IDs to all patches/files
* sync port and Makefile.inc better against OpenBSD
* sort flavours
* sort Makefile.inc order
* no_cxx flavour now implies _all_ other no_* (missed expat)
* use ${PICFLAG} not -fPIC (invalid on e.g. Darwin, Interix)
* by default, still pull in only the no_cxx flavour as a dependency
  XXX should make no-no_cxx match no_cxx dependency
* XXX update to 2.3.5 missing, will commit that (and 2.4) later
  after this is ok'd by bsiegert@@

untested, WIP
@
text
@$OpenBSD: patch-Lib_os_py,v 1.1 2002/10/08 02:52:25 brad Exp $
--- Lib/os.py.orig	Mon Oct  7 21:55:08 2002
+++ Lib/os.py	Mon Oct  7 21:55:31 2002
@@@@ -291,7 +291,7 @@@@ def execvp(file, args):
     _execvpe(file, args)
 
 def execvpe(file, args, env):
-    """execv(file, args, env)
+    """execvpe(file, args, env)
 
     Execute the executable file (which is searched for along $PATH)
     with argument list args and environment env , replacing the
@@@@ -301,8 +301,9 @@@@ def execvpe(file, args, env):
 
 __all__.extend(["execl","execle","execlp","execlpe","execvp","execvpe"])
 
-_notfound = None
 def _execvpe(file, args, env=None):
+    from errno import ENOENT, ENOTDIR
+
     if env is not None:
         func = execve
         argrest = (args, env)
@@@@ -310,7 +311,7 @@@@ def _execvpe(file, args, env=None):
         func = execv
         argrest = (args,)
         env = environ
-    global _notfound
+
     head, tail = path.split(file)
     if head:
         apply(func, (file,) + argrest)
@@@@ -320,30 +321,21 @@@@ def _execvpe(file, args, env=None):
     else:
         envpath = defpath
     PATH = envpath.split(pathsep)
-    if not _notfound:
-        if sys.platform[:4] == 'beos':
-            #  Process handling (fork, wait) under BeOS (up to 5.0)
-            #  doesn't interoperate reliably with the thread interlocking
-            #  that happens during an import.  The actual error we need
-            #  is the same on BeOS for posix.open() et al., ENOENT.
-            try: unlink('/_#.# ## #.#')
-            except error, _notfound: pass
-        else:
-            import tempfile
-            t = tempfile.mktemp()
-            # Exec a file that is guaranteed not to exist
-            try: execv(t, ('blah',))
-            except error, _notfound: pass
-    exc, arg = error, _notfound
+    saved_exc = None
+    saved_tb = None
     for dir in PATH:
         fullname = path.join(dir, file)
         try:
             apply(func, (fullname,) + argrest)
-        except error, (errno, msg):
-            if errno != arg[0]:
-                exc, arg = error, (errno, msg)
-    raise exc, arg
-
+        except error, e:
+            tb = sys.exc_info()[2]
+            if (e.errno != ENOENT and e.errno != ENOTDIR
+                and saved_exc is None):
+                saved_exc = e
+                saved_tb = tb
+    if saved_exc:
+        raise error, saved_exc, saved_tb
+    raise error, e, tb
 
 # Change environ to automatically call putenv() if it exists
 try:
@@@@ -560,3 +552,4 @@@@ if _exists("fork"):
             stdout, stdin = popen2.popen4(cmd, bufsize)
             return stdin, stdout
         __all__.append("popen4")
+
@


1.1
log
@Initial revision
@
text
@@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
