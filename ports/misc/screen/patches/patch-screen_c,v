head	1.15;
access;
symbols;
locks; strict;
comment	@# @;


1.15
date	2010.01.09.18.34.33;	author tg;	state Exp;
branches;
next	1.14;
commitid	1004B48CC425FB1B2CD;

1.14
date	2008.10.13.20.58.16;	author tg;	state Exp;
branches;
next	1.13;
commitid	10048F3B6761FFF81E9;

1.13
date	2008.10.13.20.52.28;	author tg;	state Exp;
branches;
next	1.12;
commitid	10048F3B5131D97E274;

1.12
date	2007.05.10.13.02.23;	author tg;	state Exp;
branches;
next	1.11;
commitid	100464317A6439F08F1;

1.11
date	2007.04.17.23.41.02;	author tg;	state Exp;
branches;
next	1.10;
commitid	10046255A1913F69329;

1.10
date	2007.03.04.22.21.29;	author tg;	state Exp;
branches;
next	1.9;
commitid	10045EB464D469CA742;

1.9
date	2007.03.04.21.36.11;	author tg;	state Exp;
branches;
next	1.8;
commitid	10045EB3BD315AB7B9E;

1.8
date	2007.03.04.20.00.50;	author tg;	state Exp;
branches;
next	1.7;
commitid	10045EB2500777EEDFA;

1.7
date	2007.03.02.05.20.05;	author tg;	state Exp;
branches;
next	1.6;
commitid	10045E7B3C47F40FF89;

1.6
date	2007.03.02.04.54.56;	author tg;	state Exp;
branches;
next	1.5;
commitid	10045E7AE234E880600;

1.5
date	2007.03.02.04.50.08;	author tg;	state Exp;
branches;
next	1.4;
commitid	10045E7AD1204DECB6E;

1.4
date	2007.02.28.15.27.07;	author tg;	state Exp;
branches;
next	1.3;
commitid	10045E59F334E5747F3;

1.3
date	2007.02.11.01.41.30;	author tg;	state Exp;
branches;
next	1.2;
commitid	10045CE745932F4E145;

1.2
date	2007.02.11.01.33.46;	author tg;	state Exp;
branches;
next	1.1;
commitid	10045CE70FB69D65317;

1.1
date	2005.03.18.15.50.35;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.18.15.50.35;	author tg;	state Exp;
branches;
next	;


desc
@@


1.15
log
@• merge the shm patches into a configure option
• clean up and fix compiler warnings
@
text
@$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.14 2008/10/13 20:58:16 tg Exp $
$OpenBSD: shmpatch-screen_c,v 1.1 2003/11/22 00:56:58 espie Exp $
--- screen.c.orig	Mon Sep  8 14:26:19 2003
+++ screen.c	Sat Jan  9 18:20:54 2010
@@@@ -27,6 +27,19 @@@@
  * Free Software Foundation, Inc.,
  * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
  *
+ * Modified by:
+ * Copyright (c) 2006, 2007, 2008, 2010
+ *	Thorsten Glaser <tg@@mirbsd.de>
+ *
+ * This work is provided "AS IS" and WITHOUT WARRANTY of any kind, to
+ * the utmost extent permitted by applicable law, neither express nor
+ * implied; without malicious intent or gross negligence. In no event
+ * may a licensor, author or contributor be held liable for indirect,
+ * direct, other damage, loss, or other issues arising in any way out
+ * of dealing in the work, even if advised of the possibility of such
+ * damage or existence of a defect, except proven that it results out
+ * of said person's immediate fault when using the work as intended.
+ *
  ****************************************************************
  */
 
@@@@ -44,9 +57,7 @@@@
 # include <sys/ioctl.h>
 #endif
 
-#ifndef SIGINT
 # include <signal.h>
-#endif
 
 #include "config.h"
 
@@@@ -71,6 +82,12 @@@@
 #if (defined(AUX) || defined(_AUX_SOURCE)) && defined(POSIX)
 # include <compat.h>
 #endif
+
+#ifdef IPC_EXPORT_IMAGE
+# include <sys/ipc.h>
+# include <sys/shm.h>
+#endif
+
 #if defined(USE_LOCALE) || defined(ENCODINGS)
 # include <locale.h>
 #endif
@@@@ -152,6 +169,9 @@@@ static char *pad_expand __P((char *, cha
 #ifdef DEBUG
 static void  fds __P((void));
 #endif
+#if defined(ENCODINGS) && defined(UTF8) && defined(POSIX)
+int          scan_for_encoding __P((int));
+#endif
 
 int nversion;	/* numerical version, used for secondary DA */
 
@@@@ -233,6 +253,9 @@@@ struct win *windows;
 struct win *console_window;
 
 
+#ifdef IPC_EXPORT_IMAGE
+char *shm;		/* pointer to shared memory segment */
+#endif
 
 /*
  * Do this last
@@@@ -377,8 +400,11 @@@@ char **av;
 #ifdef DEBUG
   opendebug(1, 0);
 #endif
+#ifndef PORT_VERSION
+#define PORT_VERSION ""
+#endif
   sprintf(version, "%d.%.2d.%.2d%s (%s) %s", REV, VERS,
-	  PATCHLEVEL, STATE, ORIGIN, DATE);
+	  PATCHLEVEL, STATE PORT_VERSION, ORIGIN, DATE);
   nversion = REV * 10000 + VERS * 100 + PATCHLEVEL;
   debug2("-- screen debug started %s (%s)\n", *av, version);
 #ifdef POSIX
@@@@ -461,6 +487,35 @@@@ char **av;
   zmodem_recvcmd = SaveStr("!!! rz -vv -b -E");
 #endif
 
+#ifdef IPC_EXPORT_IMAGE
+  {
+    key_t key = 0xBACD072F;	/* random static IPC key */
+    int shmid;
+
+    /* Allocation of shared mem for 18000 bytes (screen text and attributes
+     * + few coord.).  We supose no screen will be wider than 132x66.
+     * 0x1C0 = [rwx------].
+     */
+    shmid = shmget(key, 18000, IPC_CREAT | 0x1C0);
+    if (shmid < 0) {
+      Panic(errno, "shmget");
+      /* NOTRECHED */
+    }
+    shm = shmat(shmid, NULL, 0);
+    if (shm == (void*)-1) {
+      Panic(errno, "shmat");
+      /* NOTRECHED */
+    }
+    /* minimal initialisation just to have valid data */
+    shm[0] = 80;	/* scrdim x */
+    shm[1] = 1;		/* scrdim y */
+    shm[2] = 0;		/* csrpos x */
+    shm[3] = 0;		/* csrpos y */
+    memset(shm + 4, ' ', 160);
+    memcpy(shm + 4, "screen is initializing...", 25);
+  }
+#endif
+
 #ifdef COPY_PASTE
   CompileKeys((char *)0, 0, mark_key_tab);
 #endif
@@@@ -1223,6 +1278,10 @@@@ char **av;
       if (MakeDisplay(LoginName, attach_tty, attach_term, n, getppid(), &attach_Mode) == 0)
 	Panic(0, "Could not alloc display");
 #ifdef ENCODINGS
+#if defined(UTF8) && defined(POSIX)
+      D_encoding = scan_for_encoding(n);
+      if (D_encoding < 0)
+#endif
       D_encoding = nwin_options.encoding > 0 ? nwin_options.encoding : 0;
       debug1("D_encoding = %d\n", D_encoding);
 #endif
@@@@ -2428,10 +2487,10 @@@@ int rec;
 #endif
 	      break;
 	    case 'y':
-	      sprintf(p, "%02d", tm->tm_year % 100);
+	      sprintf(p, "%02d", (int)(tm->tm_year % 100));
 	      break;
 	    case 'Y':
-	      sprintf(p, "%04d", tm->tm_year + 1900);
+	      sprintf(p, "%04d", (int)(tm->tm_year + 1900));
 	      break;
 	    case 'a':
 	      sprintf(p, tm->tm_hour >= 12 ? "pm" : "am");
@@@@ -2501,15 +2560,15 @@@@ int rec;
 	      int oldnumrend = winmsg_numrend;
 
 	      *p = 0;
-	      strcpy(savebuf, winmsg_buf);
+	      strlcpy(savebuf, winmsg_buf, sizeof(savebuf));
 	      winmsg_numrend = -winmsg_numrend;
 	      MakeWinMsgEv(*s == 'h' ? win->w_hstatus : runbacktick(bt, &oldtick, now.tv_sec), win, '\005', 0, (struct event *)0, rec + 1);
 	      debug2("oldtick=%d tick=%d\n", oldtick, tick);
 	      if (!tick || oldtick < tick)
 		tick = oldtick;
 	      if ((int)strlen(winmsg_buf) < l)
-		strcat(savebuf, winmsg_buf);
-	      strcpy(winmsg_buf, savebuf);
+		strlcat(savebuf, winmsg_buf, sizeof(savebuf));
+	      strlcpy(winmsg_buf, savebuf, sizeof(winmsg_buf));
 	      while (oldnumrend < winmsg_numrend)
 		winmsg_rendpos[oldnumrend++] += p - winmsg_buf;
 	      if (*p)
@@@@ -3174,3 +3233,83 @@@@ char *p;
   return 0;
 }
 
+#if defined(ENCODINGS) && defined(UTF8) && defined(POSIX)
+__RCSID("$miros: src/usr.sbin/wsconfig/wsconfig.c,v 1.16 2007/05/10 13:02:21 tg Exp $");
+__RCSID("$miros: ports/sysutils/chkuterm/dist/chkuterm.c,v 1.11 2007/05/10 13:02:22 tg Exp $");
+__RCSID("$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.14 2008/10/13 20:58:16 tg Exp $");
+static const char sfe_qs[] = "\030\032\r\xE2\x82\xAC.\033[6n";
+
+int
+scan_for_encoding(fd)
+int fd;
+{
+	struct termios tio, otio;
+	char ch;
+	int nr, rv = -1;
+	fd_set fds;
+	struct timeval tv;
+	FILE *wsf;
+
+	wsf = fdopen(nr = dup(fd), "rb+");
+	if (wsf == NULL)
+		close(nr);
+	if (tcgetattr(fd, &otio))
+		return (-1);
+	tio = otio;
+	cfmakeraw(&tio);
+	tcflush(fd, TCIOFLUSH);
+	if (tcsetattr(fd, TCSANOW, &tio))
+		goto out;
+	tv.tv_sec = 0;
+	tv.tv_usec = 75;
+	select(0, NULL, NULL, NULL, &tv);	/* sleep 75 msec */
+	if ((size_t)write(fd, sfe_qs, strlen(sfe_qs)) != strlen(sfe_qs))
+		goto noin;
+	select(0, NULL, NULL, NULL, &tv);	/* sleep 75 msec */
+	FD_ZERO(&fds);
+	FD_SET(fd, &fds);
+	tv.tv_sec = 2;
+	tv.tv_usec = 0;
+	if (select(fd + 1, &fds, NULL, NULL, &tv) <= 0)
+		goto noin;
+	nr = read(fd, &ch, 1);
+	if (wsf != NULL && nr == 1 && ch == 033) {
+		unsigned zeile, spalte;
+
+		if (fscanf(wsf, "[%u;%u", &zeile, &spalte) == 2) {
+			debug2("scan_for_encoding: at line %u column %u\n",
+			    zeile, spalte);
+			switch (spalte) {
+			case 1:	/* EUC-JP, EUC-KR kterm */
+				debug("scan_for_encoding: EUC-JP, EUC-KR\n");
+				if (0)
+			case 5:	/* Shift-JIS kterm */
+				debug("scan_for_encoding: Shift-JIS\n");
+				debug("scan_for_encoding: Japanese -> nochg\n");
+				break;
+			case 3:	/* UTF-8 xterm, screen */
+				debug("scan_for_encoding: UTF-8\n");
+				rv = UTF8;
+				break;
+			case 4:	/* ISO-8859-1 xterm, screen */
+				debug("scan_for_encoding: ISO-8859-1\n");
+				rv = 0;
+				break;
+			default:
+				debug1("scan_for_encoding: unknown @@%u -> -1\n",
+				    spalte);
+				break;
+			}
+		} else
+			debug("scan_for_encoding: invalid response\n");
+	}
+ noin:
+	write(fd, "\r      \r", 8);
+ out:
+	tcflush(fd, TCIOFLUSH);
+	tcsetattr(fd, TCSANOW, &otio);
+	if (wsf != NULL)
+		fclose(wsf);
+	return (rv);
+}
+#endif
@


1.14
log
@hm no, that didn’t help… this Makefile ignores $CPPFLAGS
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.13 2008/10/13 20:52:28 tg Exp $
d4 1
a4 1
+++ screen.c	Mon Oct 13 20:57:47 2008
d10 1
a10 1
+ * Copyright (c) 2006, 2007, 2008
d25 11
a35 1
@@@@ -71,6 +84,12 @@@@
d48 1
a48 13
@@@@ -78,6 +97,11 @@@@
 # include <langinfo.h>
 #endif
 
+#ifdef IPC_EXPORT_IMAGE
+# include <sys/ipc.h>
+# include <sys/shm.h>
+#endif
+
 #include "screen.h"
 #ifdef HAVE_BRAILLE
 # include "braille.h"
@@@@ -152,6 +176,9 @@@@ static char *pad_expand __P((char *, cha
d58 2
a59 2
@@@@ -234,6 +261,10 @@@@ struct win *console_window;
 
d63 1
a63 1
+char *shm;              /* pointer to shared memory segment */
d65 1
a65 1
+
d68 1
a68 2
  */
@@@@ -377,8 +408,11 @@@@ char **av;
d81 1
a81 1
@@@@ -461,6 +495,37 @@@@ char **av;
d87 1
a87 1
+    key_t key = 0xBACD072F;     /* random static IPC key */
d94 10
a103 12
+    shmid = shmget( key, 18000, IPC_CREAT | 0x1C0 );
+    if( shmid < 0 )
+      {
+        Panic( errno, "shmget" );
+        /* NOTRECHED */
+      }
+    shm = shmat( shmid, 0, 0);
+    if ( shm == (void*)-1 )
+      {
+        Panic( errno, "shmat" );
+        /* NOTRECHED */
+      }
d105 6
a110 6
+    shm[0] = 80;   /* scrdim x */
+    shm[1] = 1;    /* scrdim y */
+    shm[2] = 0;    /* csrpos x */
+    shm[3] = 0;    /* csrpos y */
+    strcpy( shm+4, "screen is initializing..." );
+    memset( shm+4+strlen(shm+4), ' ', 80);
d117 1
a117 1
@@@@ -1223,6 +1288,10 @@@@ char **av;
d128 1
a128 1
@@@@ -2428,10 +2497,10 @@@@ int rec;
d141 20
a160 1
@@@@ -3174,3 +3243,83 @@@@ char *p;
d167 1
a167 1
+__RCSID("$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.13 2008/10/13 20:52:28 tg Exp $");
@


1.13
log
@• we need mirmake.h for __RCSID on nōn-MirBSD
• while here, nuke pkg/ subdir
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.12 2007/05/10 13:02:23 tg Exp $
d4 1
a4 1
+++ screen.c	Mon Oct 13 20:51:46 2008
d25 1
a25 1
@@@@ -71,6 +84,16 @@@@
a34 4
+#if !defined(__MirBSD__)
+#include <mirmake.h>	/* for __RCSID() */
+#endif
+
d38 1
a38 1
@@@@ -78,6 +101,11 @@@@
d50 1
a50 1
@@@@ -152,6 +180,9 @@@@ static char *pad_expand __P((char *, cha
d60 1
a60 1
@@@@ -234,6 +265,10 @@@@ struct win *console_window;
d71 1
a71 1
@@@@ -377,8 +412,11 @@@@ char **av;
d84 1
a84 1
@@@@ -461,6 +499,37 @@@@ char **av;
d122 1
a122 1
@@@@ -1223,6 +1292,10 @@@@ char **av;
d133 1
a133 1
@@@@ -2428,10 +2501,10 @@@@ int rec;
d146 1
a146 1
@@@@ -3174,3 +3247,83 @@@@ char *p;
d153 1
a153 1
+__RCSID("$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.12 2007/05/10 13:02:23 tg Exp $");
@


1.12
log
@• wait 75 ms between flushing all tty I/O and writing the enquiry string
• wait 75 ms between writing the enquiry string and waiting for an answer
• bump date of chkuterm, patchlev^Wdash_ver of screen
• screen: mention chkuterm functionality in the description
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.11 2007/04/17 23:41:02 tg Exp $
d4 1
a4 1
+++ screen.c	Thu May 10 12:06:22 2007
d10 1
a10 1
+ * Copyright (c) 2006, 2007
d25 1
a25 1
@@@@ -71,6 +84,12 @@@@
d35 4
d42 1
a42 1
@@@@ -78,6 +97,11 @@@@
d54 1
a54 1
@@@@ -152,6 +176,9 @@@@ static char *pad_expand __P((char *, cha
d64 1
a64 1
@@@@ -234,6 +261,10 @@@@ struct win *console_window;
d75 1
a75 1
@@@@ -377,8 +408,11 @@@@ char **av;
d88 1
a88 1
@@@@ -461,6 +495,37 @@@@ char **av;
d126 1
a126 1
@@@@ -1223,6 +1288,10 @@@@ char **av;
d137 1
a137 1
@@@@ -2428,10 +2497,10 @@@@ int rec;
d150 1
a150 1
@@@@ -3174,3 +3243,83 @@@@ char *p;
@


1.11
log
@When select(2) tells us that we've got something on wsfd, we maybe only got
one char (the first one of the response would be ESC); read it and if it is
it indeed, switch to blocking stdio and get row and column with fscanf(3) –
the response code is luckily being trailed by an ‘R’ that, upon being read,
terminates fscanf gracefully (other stuff is done using TCIOFLUSH).

This change should both make the detection e̲v̲e̲n̲ more reliable on (slow) in-
ternet links as well as reduce the number of flush'd keys if we type during
login already (and not get us the response messed up as programme input). I
only tested this a little bit, though, yet…
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.10 2007/03/04 22:21:29 tg Exp $
d4 1
a4 1
+++ screen.c	Tue Apr 17 23:31:53 2007
d146 1
a146 1
@@@@ -3174,3 +3243,79 @@@@ char *p;
d151 3
a153 3
+__RCSID("$miros: src/usr.sbin/wsconfig/wsconfig.c,v 1.14 2007/04/17 23:41:01 tg Exp $");
+__RCSID("$miros: ports/sysutils/chkuterm/dist/chkuterm.c,v 1.10 2007/04/17 23:41:01 tg Exp $");
+__RCSID("$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.11 2007/04/17 23:41:02 tg Exp $");
d177 3
d182 1
@


1.10
log
@• use select(2) and wait till up to 2 seconds (instead of 50 or 250 ms),
  or if something is waiting for us on stdin, whatever is faster ― this
  might help for even laggier ssh connections
• brand
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.9 2007/03/04 21:36:11 tg Exp $
d4 22
a25 2
+++ screen.c	Sun Mar  4 22:05:32 2007
@@@@ -71,6 +71,12 @@@@
d38 1
a38 1
@@@@ -78,6 +84,11 @@@@
d50 1
a50 1
@@@@ -152,6 +163,9 @@@@ static char *pad_expand __P((char *, cha
d60 1
a60 1
@@@@ -234,6 +248,10 @@@@ struct win *console_window;
d71 1
a71 1
@@@@ -377,8 +395,11 @@@@ char **av;
d84 1
a84 1
@@@@ -461,6 +482,37 @@@@ char **av;
d122 1
a122 1
@@@@ -1223,6 +1275,10 @@@@ char **av;
d133 1
a133 1
@@@@ -2428,10 +2484,10 @@@@ int rec;
d146 1
a146 1
@@@@ -3174,3 +3230,61 @@@@ char *p;
a149 2
+/* Copyright (c) 2007 Thorsten Glaser <tg@@mirbsd.de> */
+
d151 3
a154 2
+__RCSID("$miros: src/usr.sbin/wsconfig/wsconfig.c,v 1.12 2007/03/04 20:00:51 tg Exp $");
+__RCSID("$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.9 2007/03/04 21:36:11 tg Exp $");
d161 2
a162 2
+	char sbuf[64];
+	int i, j = -1;
d165 1
d167 3
d185 26
a210 5
+	i = read(fd, sbuf, sizeof (sbuf));
+	if (i > 5 && sbuf[0] == 033 && sbuf[1] == '[') {
+		j = 2;
+		while (j < (i - 2))
+			if (sbuf[j++] == ';')
d212 2
a213 4
+		if (sbuf[j - 1] == ';')
+			debug2("scan_for_encoding: at column %c%c\n",
+			    sbuf[j], sbuf[j + 1]);
+		else
a214 6
+		if (sbuf[j - 1] == ';' &&
+		    (sbuf[j] == '3' || sbuf[j] == '4') &&
+		    (sbuf[j + 1] < '0' || sbuf[j + 1] > '9'))
+			j = sbuf[j] == '4' ? 0 : UTF8;
+		else
+			j = -1;
d221 3
a223 1
+	return (j);
@


1.9
log
@delay 250ms not 50ms, seems to help via slow ssh links
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.8 2007/03/04 20:00:50 tg Exp $
d4 1
a4 1
+++ screen.c	Sun Mar  4 19:47:45 2007
d51 14
a64 1
@@@@ -461,6 +479,37 @@@@ char **av;
d102 1
a102 1
@@@@ -1223,6 +1272,10 @@@@ char **av;
d113 1
a113 1
@@@@ -2428,10 +2481,10 @@@@ int rec;
d126 1
a126 1
@@@@ -3174,3 +3227,53 @@@@ char *p;
d135 1
a135 1
+__RCSID("$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.8 2007/03/04 20:00:50 tg Exp $");
d144 2
d155 7
a161 2
+		goto out;
+	sleep1000(250 /* ms */);
d180 1
@


1.8
log
@• use TCIOFLUSH + TCSANOW instead of TCSAFLUSH
• sleep 50 ms between writing the “get cursor position” request to the
  terminal and reading the answer

appears to¹ help screen's problems when reattaching from an utf-8 tty
to utf-8 screen backend introduced in screen-4.0.3-4 ― please upgrade

¹) if someone has got a better idea², please tell me
²) no we don't fscanf(3) like linux vt-is-UTF8, since the tty may not
   even support the “get cursor position” request at all
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.7 2007/03/02 05:20:05 tg Exp $
d122 1
a122 1
+__RCSID("$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.7 2007/03/02 05:20:05 tg Exp $");
d141 1
a141 1
+	sleep1000(50 /* ms */);
@


1.7
log
@run the latin1/utf-8/other charset autodetector not only when creating,
but also when attaching to already running screen backends

if you ever use screen from within a non-utf8 terminal, you want to upgrade!
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.6 2007/03/02 04:54:56 tg Exp $
d4 1
a4 1
+++ screen.c	Fri Mar  2 04:57:19 2007
d113 1
a113 1
@@@@ -3174,3 +3227,51 @@@@ char *p;
d121 2
a122 2
+__RCSID("$miros: src/usr.sbin/wsconfig/wsconfig.c,v 1.11 2007/02/18 01:15:11 tg Exp $");
+__RCSID("$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.3 2007/02/11 01:41:30 tg Exp $");
d141 1
d162 2
a163 1
+	tcsetattr(fd, TCSAFLUSH, &otio);
@


1.6
log
@ok, so I obviously botched in r1.4 of this file
roll back r1.5 and r1.4 and merge the two again
this time correct
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.5 2007/03/02 04:50:08 tg Exp $
d4 1
a4 1
+++ screen.c	Fri Mar  2 04:53:54 2007
d35 1
a35 1
+static int   scan_for_encoding __P((int));
d121 1
a121 1
+__RCSID("$miros: src/usr.sbin/wsconfig/wsconfig.c,v 1.10 2007/02/11 00:59:00 tg Exp $");
d124 1
a124 1
+static int
@


1.5
log
@time_t-64 bugs
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.4 2007/02/28 15:27:07 tg Exp $
d4 1
a4 1
+++ screen.c	Fri Mar  2 04:48:37 2007
d30 11
a40 1
@@@@ -234,6 +245,10 @@@@ struct win *console_window;
d51 1
a51 1
@@@@ -461,6 +476,37 @@@@ char **av;
d89 12
a100 1
@@@@ -2428,10 +2474,10 @@@@ int rec;
d113 52
@


1.4
log
@integrate the shmpatch for screen.c into the normal patch,
it's #ifdef'd out anyway, and this way, update-patches is
much less of a hassle, we don't usually do two patch files
for one target file (nbd of OpenWrt has something to sort
stuff like that out, but it's in perl...)
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.3 2007/02/11 01:41:30 tg Exp $
d3 2
a4 2
--- screen.c.orig	Wed Feb 28 15:13:54 2007
+++ screen.c	Wed Feb 28 15:13:55 2007
d30 1
a30 1
@@@@ -237,6 +248,10 @@@@ struct win *console_window;
d41 1
a41 3
@@@@ -462,6 +477,37 @@@@ char **av;
 #ifdef ZMODEM
   zmodem_sendcmd = SaveStr("!!! sz -vv -b ");
d43 2
a44 2
+#endif
+
d74 6
d81 11
a91 2
 
 #ifdef COPY_PASTE
@


1.3
log
@oops, pasto
@
text
@d1 7
a7 6
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.2 2007/02/11 01:33:46 tg Exp $
--- screen.c.orig	Mon Sep  8 14:26:19 2003
+++ screen.c	Sun Feb 11 01:15:30 2007
@@@@ -152,6 +152,9 @@@@ static char *pad_expand __P((char *, cha
 #ifdef DEBUG
 static void  fds __P((void));
d9 16
a24 2
+#if defined(ENCODINGS) && defined(UTF8) && defined(POSIX)
+static int   scan_for_encoding __P((int));
d26 6
a32 1
 int nversion;	/* numerical version, used for secondary DA */
d34 2
a35 7
@@@@ -1223,6 +1226,10 @@@@ char **av;
       if (MakeDisplay(LoginName, attach_tty, attach_term, n, getppid(), &attach_Mode) == 0)
 	Panic(0, "Could not alloc display");
 #ifdef ENCODINGS
+#if defined(UTF8) && defined(POSIX)
+      D_encoding = scan_for_encoding(n);
+      if (D_encoding < 0)
d37 39
a75 2
       D_encoding = nwin_options.encoding > 0 ? nwin_options.encoding : 0;
       debug1("D_encoding = %d\n", D_encoding);
a76 16
@@@@ -2428,10 +2435,10 @@@@ int rec;
 #endif
 	      break;
 	    case 'y':
-	      sprintf(p, "%02d", tm->tm_year % 100);
+	      sprintf(p, "%02d", (int)(tm->tm_year % 100));
 	      break;
 	    case 'Y':
-	      sprintf(p, "%04d", tm->tm_year + 1900);
+	      sprintf(p, "%04ld", (long)(tm->tm_year + 1900));
 	      break;
 	    case 'a':
 	      sprintf(p, tm->tm_hour >= 12 ? "pm" : "am");
@@@@ -3174,3 +3181,51 @@@@ char *p;
   return 0;
 }
d78 1
a78 48
+/* Copyright (c) 2007 Thorsten Glaser <tg@@mirbsd.de> */
+
+#if defined(ENCODINGS) && defined(UTF8) && defined(POSIX)
+static const char sfe_qs[] = "\030\032\r\xE2\x82\xAC.\033[6n";
+__RCSID("$miros: src/usr.sbin/wsconfig/wsconfig.c,v 1.10 2007/02/11 00:59:00 tg Exp $");
+__RCSID("$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.2 2007/02/11 01:33:46 tg Exp $");
+
+static int
+scan_for_encoding(fd)
+int fd;
+{
+	struct termios tio, otio;
+	char sbuf[64];
+	int i, j = -1;
+
+	if (tcgetattr(fd, &otio))
+		return (-1);
+	tio = otio;
+	cfmakeraw(&tio);
+	tcflush(fd, TCIOFLUSH);
+	if (tcsetattr(fd, TCSANOW, &tio))
+		goto out;
+	if ((size_t)write(fd, sfe_qs, strlen(sfe_qs)) != strlen(sfe_qs))
+		goto out;
+	i = read(fd, sbuf, sizeof (sbuf));
+	if (i > 5 && sbuf[0] == 033 && sbuf[1] == '[') {
+		j = 2;
+		while (j < (i - 2))
+			if (sbuf[j++] == ';')
+				break;
+		if (sbuf[j - 1] == ';')
+			debug2("scan_for_encoding: at column %c%c\n",
+			    sbuf[j], sbuf[j + 1]);
+		else
+			debug("scan_for_encoding: invalid response\n");
+		if (sbuf[j - 1] == ';' &&
+		    (sbuf[j] == '3' || sbuf[j] == '4') &&
+		    (sbuf[j + 1] < '0' || sbuf[j + 1] > '9'))
+			j = sbuf[j] == '4' ? 0 : UTF8;
+		else
+			j = -1;
+	}
+	write(fd, "\r      \r", 8);
+ out:
+	tcsetattr(fd, TCSAFLUSH, &otio);
+	return (j);
+}
+#endif
@


1.2
log
@* bump patchlevel
* mention new 'chkuterm' and 'wsconfig(8) -U' like determination
  mechanism in the manual page
* mention that MirChanges are only documented in the manpage in the
  texinfo documentation
* etcscreenrc: sync spelling
* etcscreenrc: pad hours with a zero
* etcscreenrc: we always use UTF-8; people who want to have a latin1
  on the "inner" side can get by with "^A:utf8 off" - no need to set
  the LC_* environment variables since our setlocale(3) always returns
  en_US.UTF-8 anyway; use luit(1) for other encodings (which requires
  a utf-8 capable terminal emulator or screen inside though)
* screen.c: if the "inner" character set of the terminals, as determined
  by either the -U option or setlocale() and nl_langinfo(CODESET), returns
  ISO-8859-1 / C / US-ASCII or UTF-8, run a check like wsconfig(8) -U to
  see if we have UTF-8 (3), ISO-8859-1 (4) or something entirely different
  (like EUC-JP (1), 7bit ASCII (2), Shift-JIS (5) - the numbers in parens
  are the cursor position after outputting the determination string), and
  if we can determine UTF-8 or ISO-8859-1, use it, no matter what the maybe
  broken locale says; actual use case: DEC VT420 on MirOS-current (always
  UTF-8), uxterm on OpenBSD (always 'C' with latin1) or other systems that
  don't have locale support (especially embedded systems)
* screen.c: in the year 2147483648 I assume long is 64 bits alright
@
text
@d1 1
a1 1
$MirOS: ports/misc/screen/patches/patch-screen_c,v 1.1.7.1 2005/03/18 15:50:35 tg Exp $
d47 1
a47 1
+__RCSID("$MirOS: ports/sysutils/chkuterm/dist/chkuterm.c,v 1.7 2007/02/11 00:58:58 tg Exp $");
d73 1
a73 1
+			debug1("scan_for_encoding: at column %c%c\n",
d76 1
a76 1
+			debug1("scan_for_encoding: invalid response\n");
@


1.1
log
@Initial revision
@
text
@d1 25
a25 4
$MirOS$
--- screen.c.orig	Sun Jan 23 20:44:12 2005
+++ screen.c	Sun Jan 23 20:44:26 2005
@@@@ -2428,10 +2428,10 @@@@ int rec;
d34 1
a34 1
+	      sprintf(p, "%04lld", (long long)tm->tm_year + 1900);
d38 52
@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
