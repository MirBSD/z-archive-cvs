head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2016.08.11.20.19.08;	author tg;	state Exp;
branches;
next	1.4;
commitid	10057ACDDC90C549100;

1.4
date	2016.03.26.17.29.24;	author tg;	state Exp;
branches;
next	1.3;
commitid	10056F6C535787D61F0;

1.3
date	2006.01.17.21.13.40;	author tg;	state Exp;
branches;
next	1.2;
commitid	10043CD5DF843EBF979;

1.2
date	2005.12.14.23.28.39;	author tg;	state Exp;
branches;
next	1.1;
commitid	10043A0AA0E5A220A51;

1.1
date	2005.05.14.23.21.06;	author tg;	state Exp;
branches
	1.1.201.1;
next	;
commitid	1e94428687d39445;

1.1.201.1
date	2005.05.14.23.21.06;	author tg;	state Exp;
branches;
next	;
commitid	1e94428687d39445;


desc
@@


1.5
log
@completely re-do Fefe’s find_client_loc refactoring, but do it right instead
@
text
@$MirOS: ports/net/djbdns/patches/patch-src_tdlookup_c,v 1.4 2016/03/26 17:29:24 tg Exp $
--- src/tdlookup.c.orig	Sun Feb 11 21:11:23 2001
+++ src/tdlookup.c	Thu Aug 11 19:44:02 2016
@@@@ -8,6 +8,8 @@@@
 #include "dns.h"
 #include "seek.h"
 #include "response.h"
+#include "ip6.h"
+#include "clientloc.h"
 
 static int want(const char *owner,const char type[2])
 {
@@@@ -33,7 +35,6 @@@@ static int want(const char *owner,const 
 
 static char *d1;
 
-static char clientloc[2];
 static struct tai now;
 static struct cdb c;
 
@@@@ -61,7 +62,7 @@@@ static int find(char *d,int flagwild)
     if (cdb_read(&c,data,dlen,cdb_datapos(&c)) == -1) return -1;
     dpos = dns_packet_copy(data,dlen,0,type,2); if (!dpos) return -1;
     dpos = dns_packet_copy(data,dlen,dpos,&ch,1); if (!dpos) return -1;
-    if ((ch == '=' + 1) || (ch == '*' + 1)) {
+    if ((ch == '=' + 1) || (ch == '*' + 1) || (ch == '6' + 1)) {
       --ch;
       dpos = dns_packet_copy(data,dlen,dpos,recordloc,2); if (!dpos) return -1;
       if (byte_diff(recordloc,2,clientloc)) continue;
@@@@ -103,12 +104,13 @@@@ static int doname(void)
   return response_addname(d1);
 }
 
-static int doit(char *q,char qtype[2])
+static int doit1(char **pqname,char qtype[2])
 {
   unsigned int bpos;
   unsigned int anpos;
   unsigned int aupos;
   unsigned int arpos;
+  char *q;
   char *control;
   char *wild;
   int flaggavesoa;
@@@@ -119,10 +121,17 @@@@ static int doit(char *q,char qtype[2])
   char x[20];
   uint16 u16;
   char addr[8][4];
-  int addrnum;
-  uint32 addrttl;
+  char addr6[8][16];
+  int addrnum,addr6num;
+  uint32 addrttl,addr6ttl;
   int i;
+  int loop = 0 ;
 
+RESTART:
+  if (loop++ >= 100) return 0;
+
+  q = *pqname;
+
   anpos = response_len;
 
   control = q;
@@@@ -130,13 +139,20 @@@@ static int doit(char *q,char qtype[2])
     flagns = 0;
     flagauthoritative = 0;
     cdb_findstart(&c);
-    while (r = find(control,0)) {
+    while ((r = find(control,0))) {
       if (r == -1) return 0;
       if (byte_equal(type,2,DNS_T_SOA)) flagauthoritative = 1;
       if (byte_equal(type,2,DNS_T_NS)) flagns = 1;
     }
     if (flagns) break;
-    if (!*control) return 0; /* q is not within our bailiwick */
+    if (!*control) { /* q is not within our bailiwick */
+      if (loop <= 1)
+        return 0;
+      else {
+        response[2] &= ~4;
+        goto DONE; /* The administrator has issued contradictory instructions */
+      }
+    }
     control += *control;
     control += 1;
   }
@@@@ -152,10 +168,10 @@@@ static int doit(char *q,char qtype[2])
   wild = q;
 
   for (;;) {
-    addrnum = 0;
-    addrttl = 0;
+    addrnum = addr6num = 0;
+    addrttl = addr6ttl = 0;
     cdb_findstart(&c);
-    while (r = find(wild,wild != q)) {
+    while ((r = find(wild,wild != q))) {
       if (r == -1) return 0;
       flagfound = 1;
       if (flaggavesoa && byte_equal(type,2,DNS_T_SOA)) continue;
@@@@ -171,10 +187,29 @@@@ static int doit(char *q,char qtype[2])
 	if (addrnum < 1000000) ++addrnum;
 	continue;
       }
+      if (byte_equal(type,2,DNS_T_AAAA) && (dlen - dpos == 16)) {
+	addr6ttl = ttl;
+	i = dns_random(addr6num + 1);
+	if (i < 8) {
+	  if ((i < addr6num) && (addr6num < 8))
+	    byte_copy(addr6[addr6num],16,addr6[i]);
+	  byte_copy(addr6[i],16,data + dpos);
+	}
+	if (addr6num < 1000000) ++addr6num;
+	continue;
+      }
       if (!response_rstart(q,type,ttl)) return 0;
-      if (byte_equal(type,2,DNS_T_NS) || byte_equal(type,2,DNS_T_CNAME) || byte_equal(type,2,DNS_T_PTR)) {
+      if (byte_equal(type,2,DNS_T_NS) || byte_equal(type,2,DNS_T_PTR)) {
 	if (!doname()) return 0;
       }
+      else if (byte_equal(type,2,DNS_T_CNAME)) {
+	if (!doname()) return 0;
+        if (byte_diff(type,2,qtype)) {
+	  response_rfinish(RESPONSE_ANSWER);
+	  if (!dns_domain_copy(pqname,d1)) return 0;
+	  goto RESTART;
+	}
+      }
       else if (byte_equal(type,2,DNS_T_MX)) {
 	if (!dobytes(2)) return 0;
 	if (!doname()) return 0;
@@@@ -195,6 +230,12 @@@@ static int doit(char *q,char qtype[2])
 	if (!response_addbytes(addr[i],4)) return 0;
 	response_rfinish(RESPONSE_ANSWER);
       }
+    for (i = 0;i < addr6num;++i)
+      if (i < 8) {
+	if (!response_rstart(q,DNS_T_AAAA,addr6ttl)) return 0;
+	if (!response_addbytes(addr6[i],16)) return 0;
+	response_rfinish(RESPONSE_ANSWER);
+      }
 
     if (flagfound) break;
     if (wild == control) break;
@@@@ -212,7 +253,7 @@@@ static int doit(char *q,char qtype[2])
 
   if (flagauthoritative && (aupos == anpos)) {
     cdb_findstart(&c);
-    while (r = find(control,0)) {
+    while ((r = find(control,0))) {
       if (r == -1) return 0;
       if (byte_equal(type,2,DNS_T_SOA)) {
         if (!response_rstart(control,DNS_T_SOA,ttl)) return 0;
@@@@ -227,7 +268,7 @@@@ static int doit(char *q,char qtype[2])
   else
     if (want(control,DNS_T_NS)) {
       cdb_findstart(&c);
-      while (r = find(control,0)) {
+      while ((r = find(control,0))) {
         if (r == -1) return 0;
         if (byte_equal(type,2,DNS_T_NS)) {
           if (!response_rstart(control,DNS_T_NS,ttl)) return 0;
@@@@ -252,13 +293,18 @@@@ static int doit(char *q,char qtype[2])
       case_lowerb(d1,dns_domain_length(d1));
       if (want(d1,DNS_T_A)) {
 	cdb_findstart(&c);
-	while (r = find(d1,0)) {
+	while ((r = find(d1,0))) {
           if (r == -1) return 0;
 	  if (byte_equal(type,2,DNS_T_A)) {
             if (!response_rstart(d1,DNS_T_A,ttl)) return 0;
 	    if (!dobytes(4)) return 0;
             response_rfinish(RESPONSE_ADDITIONAL);
 	  }
+	  else if (byte_equal(type,2,DNS_T_AAAA)) {
+            if (!response_rstart(d1,DNS_T_AAAA,ttl)) return 0;
+	    if (!dobytes(16)) return 0;
+            response_rfinish(RESPONSE_ADDITIONAL);
+	  }
         }
       }
     }
@@@@ -275,36 +321,44 @@@@ static int doit(char *q,char qtype[2])
     }
   }
 
+DONE:
   return 1;
 }
 
-int respond(char *q,char qtype[2],char ip[4])
+static int doit(char *qname,char qtype[2])
 {
-  int fd;
   int r;
-  char key[6];
+  char *q = 0;
 
+  if (!dns_domain_copy(&q, qname)) return 0;
+  r = doit1(&q, qtype);
+  dns_domain_free(&q);
+  return r;
+}
+
+int respond(char *q,char qtype[2],char ip[16])
+{
+  static struct tai cdb_valid = { 0 };
+  static int fd = -1;
+  struct tai one_second;
+  int r;
+
   tai_now(&now);
-  fd = open_read("data.cdb");
-  if (fd == -1) return 0;
-  cdb_init(&c,fd);
+  if (tai_less(&cdb_valid, &now)) {
+    if (fd != -1) {
+      cdb_free(&c);
+      close(fd);
+    }
+    fd = open_read("data.cdb");
+    if (fd == -1) return 0;
+    cdb_init(&c,fd);
+    tai_uint(&one_second, 1);
+    tai_add(&cdb_valid, &now, &one_second);
+  }
 
-  byte_zero(clientloc,2);
-  key[0] = 0;
-  key[1] = '%';
-  byte_copy(key + 2,4,ip);
-  r = cdb_find(&c,key,6);
-  if (!r) r = cdb_find(&c,key,5);
-  if (!r) r = cdb_find(&c,key,4);
-  if (!r) r = cdb_find(&c,key,3);
-  if (!r) r = cdb_find(&c,key,2);
-  if (r == -1) return 0;
-  if (r && (cdb_datalen(&c) == 2))
-    if (cdb_read(&c,clientloc,2,cdb_datapos(&c)) == -1) return 0;
+  if (find_client_loc(ip, &c)) return 0;
 
   r = doit(q,qtype);
 
-  cdb_free(&c);
-  close(fd);
   return r;
 }
@


1.4
log
@complete overhaul of djbdns port:

• merge t4/t6 flavours back into one binary
  ‣ greatly simplify IPv6 handling, too; drop code for v6-less OSes
• merge v4/v6 dnsroots back into one, update all of them
• improve documentation a bit
• apply two patches from http://www.your.org/dnscache/ (SECURITY):
  ‣ merge identical outgoing requests
  ‣ allow caching SOA responses
• update to Fefe’s djbdns-1.05-test27.diff.bz2
  ‣ fixes recursively resolving hosts behind IPv6-only nameservers;
    spotted by Natureshadow (for Teckids’ Lunatics network) and via
    http://serverfault.com/q/627912/189656 (which I’ll answer RSN)
  ⚠ fix with “one second” CDB validity patch
  ⚠ adapt for OpenBSD-style IPv6
• drop ip6.int. reverse v6 DNS for good
• improve dealing with mixing v4/v6 transport
  ⇒ TODO add IP4SEND/IP6SEND support; currently; if IPSEND is v6
    but we send to a v4 server, we use INADDR_ANY for outgoing,
    as automatic fallback address
@
text
@d1 1
a1 1
$MirOS: ports/net/djbdns/patches/patch-src_tdlookup_c,v 1.3 2006/01/17 21:13:40 tg Exp $
d3 1
a3 1
+++ src/tdlookup.c	Sat Mar 26 17:07:49 2016
d13 9
a21 1
@@@@ -61,7 +63,7 @@@@ static int find(char *d,int flagwild)
d30 1
a30 1
@@@@ -103,12 +105,13 @@@@ static int doname(void)
d45 1
a45 1
@@@@ -119,10 +122,17 @@@@ static int doit(char *q,char qtype[2])
d65 1
a65 1
@@@@ -130,13 +140,20 @@@@ static int doit(char *q,char qtype[2])
d88 1
a88 1
@@@@ -152,10 +169,10 @@@@ static int doit(char *q,char qtype[2])
d102 1
a102 1
@@@@ -171,10 +188,29 @@@@ static int doit(char *q,char qtype[2])
d133 1
a133 1
@@@@ -195,6 +231,12 @@@@ static int doit(char *q,char qtype[2])
d146 1
a146 1
@@@@ -212,7 +254,7 @@@@ static int doit(char *q,char qtype[2])
d155 1
a155 1
@@@@ -227,7 +269,7 @@@@ static int doit(char *q,char qtype[2])
d164 1
a164 1
@@@@ -252,13 +294,18 @@@@ static int doit(char *q,char qtype[2])
d184 1
a184 1
@@@@ -275,36 +322,44 @@@@ static int doit(char *q,char qtype[2])
d241 1
a241 1
+  find_client_loc(clientloc, ip, &c);
@


1.3
log
@Apply http://tinydns.org/one-second.patch

| From nelson@@crynwr.com Sat Jul 23 15:19:58 2005
| X-VM-v5-Data: ([nil nil nil nil nil nil nil nil nil]
| 	["1512" "Tuesday" "20" "April" "2004" "13:06:49" "+0200" "Lennert Buytenhek" "buytenh@@wantstofly.org" nil "61" "patch to make djbdns 1.05 cache its mmap() of the data.cdb file" "^From:" nil nil "4" nil nil nil nil nil nil nil nil nil]
| 	nil)
| Return-Path: <nelson@@crynwr.com>
| Delivered-To: nelson@@desk.crynwr.com
| Received: (qmail 9047 invoked by alias); 23 Jul 2005 15:19:58 -0000
| Delivered-To: alias-nelson-nelson@@crynwr.com
| Received: (qmail 9044 invoked by uid 500); 23 Jul 2005 15:19:58 -0000
| Comment: DomainKeys? See http://antispam.yahoo.com/domainkeys
| DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
|   s=dog; d=wantstofly.org;
|   b=IWNClqptgImEp3WfkGIht8VKuoHgvQcYS2QB6tjfjVSIFs+iulN4Fg1yMtJiDL3D  ;
| Message-ID: <20050723151958.9042.qmail@@desk.crynwr.com>
| X-Original-To: buytenh
| Delivered-To: buytenh@@wantstofly.org
| User-Agent: Mutt/1.4.1i
| X-Keywords:
| X-UID: 800
| From: Lennert Buytenhek <buytenh@@wantstofly.org>
| To: nelson@@crynwr.com
| Subject: patch to make djbdns 1.05 cache its mmap() of the data.cdb file
| Date: Tue, 20 Apr 2004 13:06:49 +0200
|
| Hi,
|
| This patch makes djbdns 1.05 cache its mmap() of the data.cdb file up to a
| maximum of one second.  Under high query load, this substantially reduces
| the number of times that the database file needs to be mapped and unmapped,
| and gives a two-digit percentage performance improvement under 100% system
| load (as discussed on the djbdns mailing list.)
|
| Could you stick a copy of the patch on www.tinydns.org please?  I don't
| have anywhere to host it myself at this point, and I would like to see it
| on that page -- is that acceptable to you?
|
|
| thanks,
| Lennert
@
text
@d1 1
a1 1
$MirOS: ports/net/djbdns/patches/patch-src_tdlookup_c,v 1.2 2005/12/14 23:28:39 tg Exp $
d3 2
a4 2
+++ src/tdlookup.c	Tue Jan 17 21:11:30 2006
@@@@ -8,6 +8,7 @@@@
d9 1
d13 10
a22 1
@@@@ -103,12 +104,13 @@@@ static int doname(void)
d37 1
a37 1
@@@@ -119,10 +121,17 @@@@ static int doit(char *q,char qtype[2])
d57 1
a57 1
@@@@ -130,13 +139,20 @@@@ static int doit(char *q,char qtype[2])
d80 1
a80 1
@@@@ -152,10 +168,10 @@@@ static int doit(char *q,char qtype[2])
d94 1
a94 1
@@@@ -171,10 +187,29 @@@@ static int doit(char *q,char qtype[2])
d125 1
a125 1
@@@@ -195,6 +230,12 @@@@ static int doit(char *q,char qtype[2])
d138 1
a138 1
@@@@ -212,7 +253,7 @@@@ static int doit(char *q,char qtype[2])
d147 1
a147 1
@@@@ -227,7 +268,7 @@@@ static int doit(char *q,char qtype[2])
d156 1
a156 1
@@@@ -252,13 +293,18 @@@@ static int doit(char *q,char qtype[2])
d176 1
a176 1
@@@@ -275,23 +321,49 @@@@ static int doit(char *q,char qtype[2])
d184 1
d186 4
a189 2
+{
+  int r;
d191 1
a191 1
+
a197 3
+#ifndef DJB_V6ONLY
 int respond(char *q,char qtype[2],char ip[4])
+#else
d199 1
a199 3
+#endif /* DJB_V6ONLY */
 {
-  int fd;
d203 2
a204 3
   int r;
   char key[6];
 
a208 1
-
d220 14
a233 24
   byte_zero(clientloc,2);
   key[0] = 0;
   key[1] = '%';
+#ifndef DJB_V6ONLY
   byte_copy(key + 2,4,ip);
   r = cdb_find(&c,key,6);
   if (!r) r = cdb_find(&c,key,5);
@@@@ -301,10 +373,21 @@@@ int respond(char *q,char qtype[2],char i
   if (r == -1) return 0;
   if (r && (cdb_datalen(&c) == 2))
     if (cdb_read(&c,clientloc,2,cdb_datapos(&c)) == -1) return 0;
+#else
+  if (byte_equal(ip,12,V4mappedprefix)) {
+    byte_copy(key + 2,4,ip+12);
+    r = cdb_find(&c,key,6);
+    if (!r) r = cdb_find(&c,key,5);
+    if (!r) r = cdb_find(&c,key,4);
+    if (!r) r = cdb_find(&c,key,3);
+    if (!r) r = cdb_find(&c,key,2);
+    if (r == -1) return 0;
+    if (r && (cdb_datalen(&c) == 2))
+      if (cdb_read(&c,clientloc,2,cdb_datapos(&c)) == -1) return 0;
+  }
+#endif /* DJB_V6ONLY */
@


1.2
log
@* update to fefe's djbdns-1.05-test23.diff
  with djbdns-1.05-ixfr.diff
* slightly change naming of v6-transport binaries
* consolidate all added source files in a central directory
  so it can be reused by the v6-transport stuff
* integrate the v6 transport binaries
* fix spacing
* sync descriptive texts with reality
* sync European ORSN (v4 and v6) to their root.hint
* sync OpenNIC too
* Open-RSC seeminly ceased to exist recently
* Apply compiler-temporary-filename.patch
  from http://homepages.tesco.net/~J.deBoynePollard/FGA/djbdns-problems.html
* apply dnscache-cname-handling.patch
* apply dnscache-strict-forwardonly.patch w/ IPv6 tweak
* apply dnscacheip-space-separator.patch
* apply tinydns-alias-chain-truncation.patch
* apply tinydns-data-semantic-error.patch
  appropriately for 6 and 3, too
* fix shell code and path to includes
* fix relative paths
* fix names of library and programmes; NOMAN=yes here (t6)
* Add support for the IPv6 transport module to communicate,
  as a client, with IPv4 transport name servers as well.

  WFM
* build it with -Wall -Werror
* honour ${SYSCONFDIR} throughout the port
@
text
@d1 1
a1 1
$MirOS: ports/net/djbdns/patches/patch-src_tdlookup_c,v 1.1.201.1 2005/05/14 23:21:06 tg Exp $
d3 1
a3 1
+++ src/tdlookup.c	Tue Dec 13 23:44:16 2005
d166 1
a166 1
@@@@ -275,10 +321,26 @@@@ static int doit(char *q,char qtype[2])
d191 4
a194 1
   int fd;
d196 18
a213 1
@@@@ -292,6 +354,7 @@@@ int respond(char *q,char qtype[2],char i
d221 1
a221 1
@@@@ -301,6 +364,19 @@@@ int respond(char *q,char qtype[2],char i
d241 4
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$MirOS$
d3 1
a3 1
+++ src/tdlookup.c	Sat May 14 22:27:18 2005
d12 16
a27 1
@@@@ -119,8 +120,9 @@@@ static int doit(char *q,char qtype[2])
d37 1
d39 5
d45 26
a70 1
@@@@ -152,8 +154,8 @@@@ static int doit(char *q,char qtype[2])
d79 2
a80 1
     while (r = find(wild,wild != q)) {
d82 3
a84 1
@@@@ -171,6 +173,17 @@@@ static int doit(char *q,char qtype[2])
d100 2
a101 1
       if (byte_equal(type,2,DNS_T_NS) || byte_equal(type,2,DNS_T_CNAME) || byte_equal(type,2,DNS_T_PTR)) {
d103 13
a115 1
@@@@ -195,6 +208,12 @@@@ static int doit(char *q,char qtype[2])
d128 27
a154 1
@@@@ -259,6 +278,11 @@@@ static int doit(char *q,char qtype[2])
d166 5
a170 1
@@@@ -278,7 +302,11 @@@@ static int doit(char *q,char qtype[2])
d174 11
d193 1
a193 1
@@@@ -292,6 +320,7 @@@@ int respond(char *q,char qtype[2],char i
d201 1
a201 1
@@@@ -301,6 +330,19 @@@@ int respond(char *q,char qtype[2],char i
@


1.1.201.1
log
@New djbdns port, #ifdef'd, "original" and "no_ipv6" flavours removed
"no_ipv4" non-functional at the moment, will follow later after
redesign using crunchgen(1) and crunchide(1)
@
text
@@
