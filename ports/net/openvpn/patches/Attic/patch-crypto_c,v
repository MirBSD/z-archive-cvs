head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2015.07.19.18.48.53;	author tg;	state dead;
branches;
next	1.1;
commitid	10055ABF11C1F495374;

1.1
date	2006.02.21.19.48.16;	author tg;	state Exp;
branches;
next	;
commitid	10043FB6DF81E8040F6;


desc
@@


1.2
log
@new OpenVPN; modulo HMAC errors thrown on server sideâ€¦
@
text
@$MirOS: ports/net/openvpn/patches/patch-crypto_c,v 1.1 2006/02/21 19:48:16 tg Exp $

use arc4random if we can

--- crypto.c.orig	Tue Feb 21 18:18:07 2006
+++ crypto.c	Tue Feb 21 19:34:18 2006
@@@@ -1622,20 +1622,27 @@@@ void uninit_crypto_lib ()
 
 static uint8_t nonce_data [SHA_DIGEST_LENGTH + NONCE_SECRET_LEN]; /* GLOBAL */
 
+#if !HAVE_ARC4RANDOM
 void
 prng_init (void)
 {
   if (!RAND_bytes (nonce_data, sizeof(nonce_data)))
     msg (M_FATAL, "ERROR: Random number generator cannot obtain entropy for PRNG");
 }
+#endif
 
 void
 prng_bytes (uint8_t *output, int len)
 {
+#if !HAVE_ARC4RANDOM
   SHA_CTX ctx;
+#else
+  uint32_t rnd = 0;
+#endif
   mutex_lock_static (L_PRNG);
   while (len > 0)
     {
+#if !HAVE_ARC4RANDOM
       const int blen = min_int (len, SHA_DIGEST_LENGTH);
       SHA1_Init (&ctx);
       SHA1_Update (&ctx, nonce_data, sizeof (nonce_data));
@@@@ -1643,6 +1650,13 @@@@ prng_bytes (uint8_t *output, int len)
       memcpy (output, nonce_data, blen);
       output += blen;
       len -= blen;
+#else
+      if (!rnd)
+	rnd = arc4random();
+      *output++ = rnd & 0xFF;
+      rnd >>= 8;
+      --len;
+#endif
     }
   mutex_unlock_static (L_PRNG);
 }
@@@@ -1651,11 +1665,18 @@@@ prng_bytes (uint8_t *output, int len)
 long int
 get_random()
 {
+#if !HAVE_ARC4RANDOM
   long int l;
   prng_bytes ((unsigned char *)&l, sizeof(l));
   if (l < 0)
     l = -l;
   return l;
+#else
+  if (sizeof (long int) == 4)
+    return arc4random();
+  else
+    return (long int)(((uint64_t)arc4random()) << 32 | (uint64_t)arc4random());
+#endif
 }
 
 const char *
@


1.1
log
@* patch-configure_ac: check for arc4random(3), arc4random_push(3)
* patch-crypto_{c,h}: use arc4random(3) if available, for PRNG
* patch-ssl_c: if arc4random_push(3) MirOS extension is available,
  mimic recent ssh(1)/sshd(8) patches and push back randomness
  gained by kex with the peer (tls, both methods) - sadly cannot
  use pings, neither does preshared keys help
* patch-tun_c: reduce diffs while here
* Makefile: bump

checked to run against thorvpn (not patched)
@
text
@d1 1
a1 1
$MirOS$
@

