head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2014.11.26.19.29.32;	author tg;	state Exp;
branches;
next	1.3;
commitid	10054762A213E06B080;

1.3
date	2006.10.01.03.31.47;	author tg;	state Exp;
branches;
next	1.2;
commitid	100451F35FF6DEB5A4E;

1.2
date	2005.09.11.23.46.16;	author tg;	state Exp;
branches;
next	1.1;
commitid	6a254324c1be24e7;

1.1
date	2005.03.18.15.46.58;	author tg;	state Exp;
branches
	1.1.7.1;
next	;

1.1.7.1
date	2005.03.18.15.46.58;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove MKC_USAP fully from the tree, we donâ€™t deal with patents
@
text
@The Independent JPEG Group's JPEG software
==========================================

Note: this package contains support for "old jpeg" as per libtiff contrib.

README for release 6 of 2-Aug-95
================================

This distribution contains the sixth public release of the Independent JPEG
Group's free JPEG software.  You are welcome to redistribute this software and
to use it for any purpose, subject to the conditions under LEGAL ISSUES, below.

Serious users of this software (particularly those incorporating it into
larger programs) should contact IJG at jpeg-info@@uunet.uu.net to be added to
our electronic mailing list.  Mailing list members are notified of updates
and have a chance to participate in technical discussions, etc.

This software is the work of Tom Lane, Philip Gladstone, Luis Ortiz, Jim
Boucher, Lee Crocker, Julian Minguillon, George Phillips, Davide Rossi,
Ge' Weijers, and other members of the Independent JPEG Group.

IJG is not affiliated with the official ISO JPEG standards committee.


NOTES on arithmetic compression
===============================

This JPEG implementation supports compression using the arithmetic
coding scheme.

This is the 28-Mar-98 / jpeg-6b version of the arithmetic coding
patch by Guido Vollbeding <guido@@jpegclub.org>, distributed from
outside the USA and without warranty, as usual. See Annex L in
the JPEG spec for further information and a list of relevant patents.

[...]
This is my implementation of the arithmetic encoding and decoding
back-end for JPEG as specified in the

  ISO/IEC International Standard 10918-1 and CCITT Recommendation
  ITU-T T.81, "Information Technology - Digital Compression and
  Coding of Continuous-tone Still Images, Part 1: Requirements
  and Guidelines".

Arithmetic coding is a state-of-the-art lossless entropy data
compression method which offers better compression performance
than the well-established Huffman entropy coding process.

The JPEG standard specifies a particular arithmetic coding scheme
to be used optionally as alternative to Huffman coding.

How does it work?
=================

This distribution is organized as add-on to the widespread
Independent JPEG Group's JPEG software.

Thus, once you managed to install the IJG software distribution
successfully, there should be no additional problems (portability
issues etc.) to incorporate this package into the library,
and usage is straightforward.

Transcode given JPEG files simply with a command like

  jpegtran -arithmetic [-progressive] < orig.jpg > arit.jpg

into an arithmetic coded version LOSSLESSLY! Since there are
practically no applications in existence which can handle such
files, you can only transform it back with the same tool

  jpegtran [-optimize] [-progressive] < arit.jpg > orig2.jpg

to verify correct operation.

Thus, you can easily verify the enhanced compression performance
of the arithmetic coding version compared to the Huffman (with
fixed or custom tables) version.

The claim to evaluate was that arithmetic coding gives an average
5-10% compression improvement against Huffman.
Early tests with this implementation support this claim, and you
can perform tests with own material.

[...]
Note that arithmetic coding requires only a single processing
pass due to its fully-adaptive nature, and compared to one-pass
(fixed tables) Huffman the arithmetic coded version consistently
achieves 10% compression improvement.
Compared with two-pass (custom tables) Huffman the improvement
is 5-10%.

Note that I wasn't able yet to cross-check interoperability of
the produced files with other implementations.
Thus, I can't be sure that the files are compliant to the spec,
but I hope so and the tests support it.
The encoding and decoding processes should be correct anyway,
however, in the sense that they are complementary to each other
and thus retain data integrity.

I would appreciate any indications for compliance or interoperability
with other implementations from somebody.
Please let me know if you are able to cross-check something.

References
==========

- The Independent JPEG Group's software

- JBIG-KIT lossless image compression library by Markus Kuhn

- William B. Pennebaker, Joan L. Mitchell:
  "JPEG Still Image Data Compression Standard",
  Van Nostrand Reinhold, 1993, ISBN 0-442-01272-1.

- jpeg-faq (http://www.faqs.org/faqs/jpeg-faq/)

- compression-faq (http://www.faqs.org/faqs/compression-faq/)
@


1.3
log
@* libjpeg: add support for "old jpeg" hunk from libtiff's contrib section
* libtiff: remove --with-jpeg-*-dir so that it does not add -L/usr/mpkg/lib
  to the command line -> doesn't link against an already installed libtiff
* libtiff: speed up build a lot (--disable-dependency-tracking and
  --disable-libtool-lock)
* libtiff: enable rpaths while here
  (sorry Benny)
* libtiff: remove no longer needed workaround
* libtiff: enable "old jpeg" support (pulls in jpegint.h temporarily tho)
* xloadimage: correct error condition abuse leading to false error message
* all: fix indenting in Makefile; sync DESCR, PLIST, distinfo; bump version
@
text
@d28 2
a29 2
JPEG supports compression using the arithmetic coding scheme.
In this package, this support is ${HAS_ARI}.
@


1.2
log
@* add arithmetic coding support
* convert Makefiles to new <mirports.bsd.mk> structure
* add some calming words to manual page
@
text
@d4 2
@


1.1
log
@Initial revision
@
text
@d21 95
@


1.1.7.1
log
@Import the MirPorts Framework, many files moved or renamed though, no KDE/QT
@
text
@@
