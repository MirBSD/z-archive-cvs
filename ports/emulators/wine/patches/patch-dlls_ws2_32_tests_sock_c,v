head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2008.07.30.00.15.49;	author tg;	state Exp;
branches;
next	;
commitid	100488FB23E3E0E7494;


desc
@@


1.1
log
@Wine 1.0 port, mostly taken from pkgsrc®

request for help: there is probably something about mmap.c the only
thing preventing us from running this… similar to the issues outlined
in the FreeBSD wiki about Wine, but made harder due to W^X probably

This will almost certainly not work on MidnightBSD, have a hard time
working on OpenBSD (especially due to no VFORK_SHM there), is totally
untested on Darwin (and PFRAG.dylib is missing), and not for Interix;
I wonder if it would work on NetBSD® (it should) if MirPorts ran the-
re, but if so, it had IPX support, which theirs doesn’t ☺
@
text
@$MirOS$
--- dlls/ws2_32/tests/sock.c.orig	Tue Jun 17 14:07:08 2008
+++ dlls/ws2_32/tests/sock.c	Tue Jul 29 22:28:00 2008
@@@@ -19,11 +19,12 @@@@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
+#include <winsock2.h>
+
 #include <stdarg.h>
 
 #include <windef.h>
 #include <winbase.h>
-#include <winsock2.h>
 #include <ws2tcpip.h>
 #include <mswsock.h>
 #include "wine/test.h"
@@@@ -425,7 +426,7 @@@@ static VOID WINAPI simple_server ( serve
         ok ( n_recvd == n_expected,
              "simple_server (%x): received less data than expected: %d of %d\n", id, n_recvd, n_expected );
         p = test_buffer ( mem->sock[0].buf, gen->chunk_size, gen->n_chunks );
-        ok ( p == NULL, "simple_server (%x): test pattern error: %d\n", id, p - mem->sock[0].buf);
+        ok ( p == NULL, "simple_server (%x): test pattern error: %td\n", id, p - mem->sock[0].buf);
 
         /* Echo data back */
         n_sent = do_synchronous_send ( mem->sock[0].s, mem->sock[0].buf, n_expected, par->buflen );
@@@@ -521,7 +522,7 @@@@ static VOID WINAPI select_server ( serve
 
                     if ( mem->sock[i].n_recvd == n_expected ) {
                         p = test_buffer ( mem->sock[i].buf, gen->chunk_size, gen->n_chunks );
-                        ok ( p == NULL, "select_server (%x): test pattern error: %d\n", id, p - mem->sock[i].buf );
+                        ok ( p == NULL, "select_server (%x): test pattern error: %td\n", id, p - mem->sock[i].buf );
                         FD_CLR ( mem->sock[i].s, &fds_openrecv );
                     }
 
@@@@ -618,7 +619,7 @@@@ static VOID WINAPI simple_client ( clien
 
     /* check data */
     p = test_buffer ( mem->recv_buf, gen->chunk_size, gen->n_chunks );
-    ok ( p == NULL, "simple_client (%x): test pattern error: %d\n", id, p - mem->recv_buf);
+    ok ( p == NULL, "simple_client (%x): test pattern error: %td\n", id, p - mem->recv_buf);
 
     /* cleanup */
     read_zero_bytes ( mem->s );
@@@@ -741,13 +742,13 @@@@ static void WINAPI event_client ( client
     }
 
     ok ( send_p == send_last,
-         "simple_client (%x): sent less data than expected: %d of %d\n",
+         "simple_client (%x): sent less data than expected: %td of %d\n",
          id, send_p - mem->send_buf, n_expected );
     ok ( recv_p == recv_last,
-         "simple_client (%x): received less data than expected: %d of %d\n",
+         "simple_client (%x): received less data than expected: %td of %d\n",
          id, recv_p - mem->recv_buf, n_expected );
     recv_p = test_buffer ( mem->recv_buf, gen->chunk_size, gen->n_chunks );
-    ok ( recv_p == NULL, "event_client (%x): test pattern error: %d\n", id, recv_p - mem->recv_buf);
+    ok ( recv_p == NULL, "event_client (%x): test pattern error: %td\n", id, recv_p - mem->recv_buf);
 
 out:
     WSACloseEvent ( event );
@
