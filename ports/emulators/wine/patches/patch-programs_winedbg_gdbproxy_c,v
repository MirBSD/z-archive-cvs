head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2008.07.30.00.15.50;	author tg;	state Exp;
branches;
next	;
commitid	100488FB23E3E0E7494;


desc
@@


1.1
log
@Wine 1.0 port, mostly taken from pkgsrc®

request for help: there is probably something about mmap.c the only
thing preventing us from running this… similar to the issues outlined
in the FreeBSD wiki about Wine, but made harder due to W^X probably

This will almost certainly not work on MidnightBSD, have a hard time
working on OpenBSD (especially due to no VFORK_SHM there), is totally
untested on Darwin (and PFRAG.dylib is missing), and not for Interix;
I wonder if it would work on NetBSD® (it should) if MirPorts ran the-
re, but if so, it had IPX support, which theirs doesn’t ☺
@
text
@$MirOS$
--- programs/winedbg/gdbproxy.c.orig	Tue Jun 17 14:07:08 2008
+++ programs/winedbg/gdbproxy.c	Tue Jul 29 22:34:04 2008
@@@@ -1370,7 +1370,7 @@@@ static enum packet_return packet_write_m
     if (ptr - gdbctx->in_packet + len * 2 != gdbctx->in_packet_len)
     {
         if (gdbctx->trace & GDBPXY_TRC_COMMAND_ERROR)
-            fprintf(stderr, "Wrong sizes %u <> %u\n",
+            fprintf(stderr, "Wrong sizes %tu <> %u\n",
                     ptr - gdbctx->in_packet + len * 2, gdbctx->in_packet_len);
         return packet_error;
     }
@@@@ -1442,14 +1442,14 @@@@ static enum packet_return packet_write_r
     if (ptr + 8 - gdbctx->in_packet != gdbctx->in_packet_len)
     {
         if (gdbctx->trace & GDBPXY_TRC_COMMAND_ERROR)
-            fprintf(stderr, "Wrong sizes %u <> %u\n",
+            fprintf(stderr, "Wrong sizes %tu <> %u\n",
                     ptr + 8 - gdbctx->in_packet, gdbctx->in_packet_len);
         return packet_error;
     }
     if (gdbctx->trace & GDBPXY_TRC_COMMAND)
         fprintf(stderr, "Writing reg %u <= %*.*s\n",
-                reg, gdbctx->in_packet_len - (ptr - gdbctx->in_packet),
-                gdbctx->in_packet_len - (ptr - gdbctx->in_packet), ptr);
+                reg, (int)(gdbctx->in_packet_len - (ptr - gdbctx->in_packet)),
+                (int)(gdbctx->in_packet_len - (ptr - gdbctx->in_packet)), ptr);
 
     if (dbg_curr_thread != gdbctx->other_thread && gdbctx->other_thread)
     {
@
