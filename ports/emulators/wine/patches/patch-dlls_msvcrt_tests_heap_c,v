head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2008.07.30.00.15.44;	author tg;	state Exp;
branches;
next	;
commitid	100488FB23E3E0E7494;


desc
@@


1.1
log
@Wine 1.0 port, mostly taken from pkgsrc®

request for help: there is probably something about mmap.c the only
thing preventing us from running this… similar to the issues outlined
in the FreeBSD wiki about Wine, but made harder due to W^X probably

This will almost certainly not work on MidnightBSD, have a hard time
working on OpenBSD (especially due to no VFORK_SHM there), is totally
untested on Darwin (and PFRAG.dylib is missing), and not for Interix;
I wonder if it would work on NetBSD® (it should) if MirPorts ran the-
re, but if so, it had IPX support, which theirs doesn’t ☺
@
text
@$MirOS$
--- dlls/msvcrt/tests/heap.c.orig	Tue Jun 17 14:07:08 2008
+++ dlls/msvcrt/tests/heap.c	Tue Jul 29 22:02:33 2008
@@@@ -48,7 +48,7 @@@@ static void test_aligned_malloc(size_t s
         {
             void *saved;
             saved = *(void **)((DWORD_PTR)((char *)mem - sizeof(void *)) & ~(sizeof(void *) - 1));
-            trace("_aligned_malloc(%3d, %3d) returns %p, saved = %p, diff = %d\n",
+            trace("_aligned_malloc(%3d, %3d) returns %p, saved = %p, diff = %td\n",
                   size, alignment, mem, saved, (char *)saved - (char *)mem);
         }
         p_aligned_free(mem);
@@@@ -79,7 +79,7 @@@@ static void test_aligned_offset_malloc(s
         {
             void *saved;
             saved = *(void **)((DWORD_PTR)((char *)mem - sizeof(void *)) & ~(sizeof(void *) - 1));
-            trace("_aligned_offset_malloc(%3d, %3d, %3d) returns %p, saved = %p, diff = %d\n",
+            trace("_aligned_offset_malloc(%3d, %3d, %3d) returns %p, saved = %p, diff = %td\n",
                   size, alignment, offset, mem, saved, (char *)saved - (char *)mem);
         }
         p_aligned_free(mem);
@@@@ -116,7 +116,7 @@@@ static void test_aligned_realloc(size_t 
         {
             void *saved;
             saved = *(void **)((DWORD_PTR)((char *)mem - sizeof(void *)) & ~(sizeof(void *) - 1));
-            trace("_aligned_malloc(%3d, %3d) returns %p, saved = %p, diff = %d\n",
+            trace("_aligned_malloc(%3d, %3d) returns %p, saved = %p, diff = %td\n",
                   size1, alignment, mem, saved, (char *)saved - (char *)mem);
         }
 
@@@@ -132,7 +132,7 @@@@ static void test_aligned_realloc(size_t 
             {
                 void *saved;
                 saved = *(void **)((DWORD_PTR)((char *)mem2 - sizeof(void *)) & ~(sizeof(void *) - 1));
-                trace("_aligned_realloc(%p, %3d, %3d) returns %p, saved = %p, diff = %d\n",
+                trace("_aligned_realloc(%p, %3d, %3d) returns %p, saved = %p, diff = %td\n",
                       mem, size2, alignment, mem2, saved, (char *)saved - (char *)mem2);
             }
             if (mem1)
@@@@ -188,7 +188,7 @@@@ static void test_aligned_offset_realloc(
         {
             void *saved;
             saved = *(void **)((DWORD_PTR)((char *)mem - sizeof(void *)) & ~(sizeof(void *) - 1));
-            trace("_aligned_offset_malloc(%3d, %3d, %3d) returns %p, saved = %p, diff = %d\n",
+            trace("_aligned_offset_malloc(%3d, %3d, %3d) returns %p, saved = %p, diff = %td\n",
                   size1, alignment, offset, mem, saved, (char *)saved - (char *)mem);
         }
 
@@@@ -204,7 +204,7 @@@@ static void test_aligned_offset_realloc(
             {
                 void *saved;
                 saved = *(void **)((DWORD_PTR)((char *)mem2 - sizeof(void *)) & ~(sizeof(void *) - 1));
-                trace("_aligned_offset_realloc(%p, %3d, %3d, %3d) returns %p, saved = %p, diff = %d\n",
+                trace("_aligned_offset_realloc(%p, %3d, %3d, %3d) returns %p, saved = %p, diff = %td\n",
                       mem, size2, alignment, offset, mem2, saved, (char *)saved - (char *)mem2);
             }
             if (mem1)
@
