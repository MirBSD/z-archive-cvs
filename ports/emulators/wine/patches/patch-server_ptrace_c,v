head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2008.07.30.00.15.51;	author tg;	state Exp;
branches;
next	;
commitid	100488FB23E3E0E7494;


desc
@@


1.1
log
@Wine 1.0 port, mostly taken from pkgsrc®

request for help: there is probably something about mmap.c the only
thing preventing us from running this… similar to the issues outlined
in the FreeBSD wiki about Wine, but made harder due to W^X probably

This will almost certainly not work on MidnightBSD, have a hard time
working on OpenBSD (especially due to no VFORK_SHM there), is totally
untested on Darwin (and PFRAG.dylib is missing), and not for Interix;
I wonder if it would work on NetBSD® (it should) if MirPorts ran the-
re, but if so, it had IPX support, which theirs doesn’t ☺
@
text
@$MirOS$
--- server/ptrace.c.orig	Tue Jun 17 14:07:08 2008
+++ server/ptrace.c	Tue Jul 29 22:39:40 2008
@@@@ -170,11 +170,15 @@@@ static int get_ptrace_pid( struct thread
 }
 
 /* return the Unix tid to use in ptrace calls for a given thread */
+#if (defined(linux) && (defined(__i386__) || defined(__x86_64__))) || \
+    (defined(__i386__) && defined(PTRACE_GETDBREGS) && defined(PTRACE_SETDBREGS) && \
+    (defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__) || defined(__NetBSD__)))
 static int get_ptrace_tid( struct thread *thread )
 {
     if (thread->unix_tid != -1) return thread->unix_tid;
     return thread->unix_pid;
 }
+#endif
 
 /* wait for a ptraced child to get a certain signal */
 static int wait4_thread( struct thread *thread, int signal )
@
