head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.11.20.35.47;	author tg;	state dead;
branches;
next	1.1;
commitid	100482758AB5CB3B36E;

1.1
date	2008.05.07.15.53.07;	author tg;	state Exp;
branches;
next	;
commitid	1004821D01929BE53C2;


desc
@@


1.2
log
@• unify builds
• bring kqemu to qemu-stable
@
text
@#! /bin/sh
# $MirOS: ports/emulators/qemu/snapshot/files/qemu-ifup,v 1.1 2008/05/07 15:53:07 tg Exp $

_ETHER=trunk0
_BRIDGE=bridge0

# Let the environment over-ride this
[ "$BRIDGE" ] || BRIDGE=${_BRIDGE}
[ "$ETHER" ] || ETHER=${_ETHER}

if test `id -u` -ne 0; then
	SUDO=sudo
fi

echo -n " {$1 ($BRIDGE <-> $ETHER)"

# Set the tun device into layer2 mode
$SUDO ifconfig $1 link0 up

# Set up our bridge
$SUDO ifconfig $1 group tun > /dev/null 2>&1
$SUDO ifconfig $BRIDGE create > /dev/null 2>&1 && {
  # Only add rules if the bridge creation succeeds; otherwise
  # duplicate rules get loaded each time qemu starts
  # The following two block carp packets from wasting cpu cycles inside the
  # qemu sessions, remove if testing carp inside qemu
  $SUDO brconfig $BRIDGE rule block in on $ETHER dst 33:33:0:0:0:12
  $SUDO brconfig $BRIDGE rule block in on $ETHER dst 01:00:5e:00:00:12
}
# Since we can specify ETHER and BRIDGE above, its possible that
# this tun interface or this physical interface was setup as part of
# a different bridge earlier, and that is never cleaned up, so we have
# to cleanup here first before we set it up; a physcal interface cannot
# be member to more than one bridge, thankfully, or I never would have
# caught this
ifconfig bridge | sed -n '/^bridge[0-9]*/{s/:.*$//;p;}' | while read brif
do
	$SUDO brconfig $brif del $ETHER > /dev/null 2>&1
	$SUDO brconfig $brif del $1 > /dev/null 2>&1
done
$SUDO brconfig $BRIDGE add $ETHER up
$SUDO brconfig $BRIDGE add $1 up || true
echo "}"
@


1.1
log
@add qemu-0.9.1 port snitched from openbsd, with most of our old patches
applied, and fixed to build with -Werror as well

pro:
• can netboot openbsd 3.9-current/amd64
• can _almost_ boot mirbsd #10/sparc (bsd.rd has issues with esp, bsd.net
  has none, except I have no rootfs handy ATM)
• can still boot MS-DOS
• said to be able to use kqemu – untested

con:
• regression: can *NOT* boot mirbsd #10/i386 any more
@
text
@d2 1
a2 1
# $MirOS$
@

