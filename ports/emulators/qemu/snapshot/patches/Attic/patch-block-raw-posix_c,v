head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2009.10.17.21.43.53;	author tg;	state dead;
branches;
next	1.1;
commitid	1004ADA3A7B39AC3403;

1.1
date	2008.05.07.15.53.08;	author tg;	state Exp;
branches;
next	;
commitid	1004821D01929BE53C2;


desc
@@


1.2
log
@new qemu, slight help from pkgsrc® here (website only shows RC…)

• sparc: regression against 0.10.1/linux – fdc probing results
  in a timeout and then an unexpected interrupt or something
  (probably skippable via UKC)
• i386: findcpuspeed division by zero, should be fixable
@
text
@$MirOS: ports/emulators/qemu/snapshot/patches/patch-block-raw-posix_c,v 1.1 2008/05/07 15:53:08 tg Exp $
$OpenBSD: patch-block-raw-posix_c,v 1.1 2008/04/28 22:52:38 todd Exp $
--- block-raw-posix.c.orig	Sun Jan  6 19:38:19 2008
+++ block-raw-posix.c	Wed May  7 13:51:28 2008
@@@@ -28,7 +28,9 @@@@
 #endif
 #include "block_int.h"
 #include <assert.h>
+#ifndef CONFIG_NO_AIO
 #include <aio.h>
+#endif
 
 #ifdef CONFIG_COCOA
 #include <paths.h>
@@@@ -55,6 +57,11 @@@@
 #ifdef __FreeBSD__
 #include <sys/disk.h>
 #endif
+#ifdef __OpenBSD__
+#include <sys/ioctl.h>
+#include <sys/disklabel.h>
+#include <sys/dkio.h>
+#endif
 
 //#define DEBUG_FLOPPY
 
@@@@ -231,6 +238,7 @@@@ label__raw_write__success:
 }
 
 /***********************************************************/
+#ifndef CONFIG_NO_AIO
 /* Unix AIO using POSIX AIO */
 
 typedef struct RawAIOCB {
@@@@ -456,6 +464,37 @@@@ static void raw_aio_cancel(BlockDriverAI
     }
 }
 
+# else /* !CONFIG_NO_AIO */
+
+void qemu_aio_init(void)
+{
+}
+
+void qemu_aio_poll(void)
+{
+}
+
+void qemu_aio_flush(void)
+{
+}
+
+void qemu_aio_wait_start(void)
+{
+}
+
+void qemu_aio_wait(void)
+{
+#ifndef QEMU_IMG
+       qemu_bh_poll();
+#endif
+}
+
+void qemu_aio_wait_end(void)
+{
+}
+
+#endif /* !CONFIG_NO_AIO */
+
 static void raw_close(BlockDriverState *bs)
 {
     BDRVRawState *s = bs->opaque;
@@@@ -475,8 +514,25 @@@@ static int raw_truncate(BlockDriverState
     return 0;
 }
 
+#ifdef __OpenBSD__
 static int64_t  raw_getlength(BlockDriverState *bs)
 {
+    int fd = ((BDRVRawState*)bs->opaque)->fd;
+    struct stat st;
+    if (fstat(fd, &st))
+        return -1;
+    if (S_ISCHR(st.st_mode) || S_ISBLK(st.st_mode)) {
+        struct disklabel dl;
+        if (ioctl(fd, DIOCGDINFO, &dl))
+            return -1;
+        return (uint64_t)dl.d_secsize *
+                dl.d_partitions[DISKPART(st.st_rdev)].p_size;
+    } else
+      return st.st_size;
+}
+#else /* !__OpenBSD__ */
+static int64_t  raw_getlength(BlockDriverState *bs)
+{
     BDRVRawState *s = bs->opaque;
     int fd = s->fd;
     int64_t size;
@@@@ -521,6 +577,7 @@@@ static int64_t  raw_getlength(BlockDrive
     }
     return size;
 }
+#endif
 
 static int raw_create(const char *filename, int64_t total_size,
                       const char *backing_file, int flags)
@@@@ -555,11 +612,12 @@@@ BlockDriver bdrv_raw = {
     raw_close,
     raw_create,
     raw_flush,
-
+#ifndef CONFIG_NO_AIO
     .bdrv_aio_read = raw_aio_read,
     .bdrv_aio_write = raw_aio_write,
     .bdrv_aio_cancel = raw_aio_cancel,
     .aiocb_size = sizeof(RawAIOCB),
+#endif
     .protocol_name = "file",
     .bdrv_pread = raw_pread,
     .bdrv_pwrite = raw_pwrite,
@@@@ -907,11 +965,12 @@@@ BlockDriver bdrv_host_device = {
     raw_close,
     NULL,
     raw_flush,
-
+#ifndef CONFIG_NO_AIO
     .bdrv_aio_read = raw_aio_read,
     .bdrv_aio_write = raw_aio_write,
     .bdrv_aio_cancel = raw_aio_cancel,
     .aiocb_size = sizeof(RawAIOCB),
+#endif
     .bdrv_pread = raw_pread,
     .bdrv_pwrite = raw_pwrite,
     .bdrv_getlength = raw_getlength,
@


1.1
log
@add qemu-0.9.1 port snitched from openbsd, with most of our old patches
applied, and fixed to build with -Werror as well

pro:
• can netboot openbsd 3.9-current/amd64
• can _almost_ boot mirbsd #10/sparc (bsd.rd has issues with esp, bsd.net
  has none, except I have no rootfs handy ATM)
• can still boot MS-DOS
• said to be able to use kqemu – untested

con:
• regression: can *NOT* boot mirbsd #10/i386 any more
@
text
@d1 1
a1 1
$MirOS$
@

