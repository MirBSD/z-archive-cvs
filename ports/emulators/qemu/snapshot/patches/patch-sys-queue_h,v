head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2009.10.17.21.43.57;	author tg;	state Exp;
branches;
next	;
commitid	1004ADA3A7B39AC3403;


desc
@@


1.1
log
@new qemu, slight help from pkgsrc® here (website only shows RC…)

• sparc: regression against 0.10.1/linux – fdc probing results
  in a timeout and then an unexpected interrupt or something
  (probably skippable via UKC)
• i386: findcpuspeed division by zero, should be fixable
@
text
@$MirOS$

	① MirBSD system headers require some of the things omitted here
	② TAILQ_FOREACH_SAFE is a NetBSDism

--- sys-queue.h.orig	Wed Sep 23 19:01:08 2009
+++ sys-queue.h	Sat Oct 17 17:28:21 2009
@@@@ -36,6 +36,10 @@@@
  *      @@(#)queue.h     8.5 (Berkeley) 8/20/94
  */
 
+#ifdef __MirBSD__
+#include <sys/queue.h>
+#endif
+
 #ifndef _SYS_QUEUE_H_
 #define _SYS_QUEUE_H_
 
@@@@ -210,11 +214,6 @@@@ struct {                                
                 (var);                                                  \
                 (var) = ((var)->field.tqe_next))
 
-#define TAILQ_FOREACH_SAFE(var, head, field, next_var)                  \
-        for ((var) = ((head)->tqh_first);                               \
-                (var) && ((next_var) = ((var)->field.tqe_next), 1);     \
-                (var) = (next_var))
-
 #define TAILQ_FOREACH_REVERSE(var, head, headname, field)               \
         for ((var) = (*(((struct headname *)((head)->tqh_last))->tqh_last));    \
                 (var);                                                  \
@@@@ -341,3 +340,10 @@@@ struct {                                
             : (elm->field.cqe_prev))
 
 #endif  /* !_SYS_QUEUE_H_ */
+
+#ifndef TAILQ_FOREACH_SAFE
+#define TAILQ_FOREACH_SAFE(var, head, field, next_var)                  \
+        for ((var) = ((head)->tqh_first);                               \
+                (var) && ((next_var) = ((var)->field.tqe_next), 1);     \
+                (var) = (next_var))
+#endif
@
